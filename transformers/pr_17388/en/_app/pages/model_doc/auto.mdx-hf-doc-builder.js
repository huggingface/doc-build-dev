import{S as Nxt,i as jxt,s as Dxt,e as a,k as l,w as F,t as o,M as Gxt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Oxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as mVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Vxt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,TA,uf,De,We,hi,yn,MA,Ln,xn,EA,pi,$n,CA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),TA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),MA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),EA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),CA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var V$=s(p);m=r(V$,"NewModelConfig"),V$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var X$=s(fi);pf=r(X$,"model_type"),X$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var z$=s(mi);gi=r(z$,'"new-model"'),z$.forEach(t),TA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),MA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var W$=s(Ln);xn=r(W$,"PreTrainedModel"),W$.forEach(t),EA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),CA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var Q$=s(ui);_f=r(Q$,"NewModelConfig"),Q$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,TA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,MA),e(De,Ln),e(Ln,xn),e(De,EA),e(De,pi),e(pi,$n),e(De,CA),e(De,ui),e(ui,_f),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function Xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,TA,uf,De,We,hi,yn,MA,Ln,xn,EA,pi,$n,CA,ui,_f,Ca,Qe,Ae,V$,_i,X$,z$,Eo,wa,W$,bf,Q$,oOe,Xqe,bi,vf,roe,wA,rOe,toe,tOe,zqe,kn,aOe,aoe,nOe,sOe,noe,lOe,iOe,Wqe,AA,Qqe,H$,dOe,Hqe,Ff,Uqe,vi,Tf,soe,yA,cOe,loe,fOe,Jqe,Co,LA,mOe,xA,gOe,U$,hOe,pOe,uOe,$A,_Oe,ioe,bOe,vOe,FOe,Er,kA,TOe,doe,MOe,EOe,Fi,COe,coe,wOe,AOe,foe,yOe,LOe,xOe,A,Mf,moe,$Oe,kOe,J$,SOe,ROe,POe,Ef,goe,BOe,IOe,Y$,qOe,NOe,jOe,Cf,hoe,DOe,GOe,K$,OOe,VOe,XOe,wf,poe,zOe,WOe,Z$,QOe,HOe,UOe,Af,uoe,JOe,YOe,ek,KOe,ZOe,eVe,yf,_oe,oVe,rVe,ok,tVe,aVe,nVe,Lf,boe,sVe,lVe,rk,iVe,dVe,cVe,xf,voe,fVe,mVe,tk,gVe,hVe,pVe,$f,Foe,uVe,_Ve,ak,bVe,vVe,FVe,kf,Toe,TVe,MVe,nk,EVe,CVe,wVe,Sf,Moe,AVe,yVe,sk,LVe,xVe,$Ve,Rf,Eoe,kVe,SVe,lk,RVe,PVe,BVe,Pf,Coe,IVe,qVe,ik,NVe,jVe,DVe,Bf,woe,GVe,OVe,dk,VVe,XVe,zVe,If,Aoe,WVe,QVe,ck,HVe,UVe,JVe,qf,yoe,YVe,KVe,fk,ZVe,eXe,oXe,Nf,Loe,rXe,tXe,mk,aXe,nXe,sXe,jf,xoe,lXe,iXe,gk,dXe,cXe,fXe,Df,$oe,mXe,gXe,hk,hXe,pXe,uXe,Gf,koe,_Xe,bXe,pk,vXe,FXe,TXe,Of,Soe,MXe,EXe,uk,CXe,wXe,AXe,Vf,Roe,yXe,LXe,_k,xXe,$Xe,kXe,Xf,Poe,SXe,RXe,bk,PXe,BXe,IXe,zf,Boe,qXe,NXe,vk,jXe,DXe,GXe,Wf,Ioe,OXe,VXe,Fk,XXe,zXe,WXe,Qf,qoe,QXe,HXe,Tk,UXe,JXe,YXe,Hf,Noe,KXe,ZXe,Mk,eze,oze,rze,Uf,joe,tze,aze,Ek,nze,sze,lze,Jf,Doe,ize,dze,Ck,cze,fze,mze,Yf,Goe,gze,hze,wk,pze,uze,_ze,Kf,Ooe,bze,vze,Ak,Fze,Tze,Mze,Zf,Voe,Eze,Cze,yk,wze,Aze,yze,em,Xoe,Lze,xze,Lk,$ze,kze,Sze,om,zoe,Rze,Pze,xk,Bze,Ize,qze,rm,Woe,Nze,jze,$k,Dze,Gze,Oze,tm,Qoe,Vze,Xze,kk,zze,Wze,Qze,am,Hoe,Hze,Uze,Sk,Jze,Yze,Kze,nm,Uoe,Zze,eWe,Rk,oWe,rWe,tWe,sm,Joe,aWe,nWe,Pk,sWe,lWe,iWe,lm,Yoe,dWe,cWe,Bk,fWe,mWe,gWe,im,Koe,hWe,pWe,Ik,uWe,_We,bWe,dm,Zoe,vWe,FWe,qk,TWe,MWe,EWe,cm,ere,CWe,wWe,Nk,AWe,yWe,LWe,fm,ore,xWe,$We,jk,kWe,SWe,RWe,mm,rre,PWe,BWe,Dk,IWe,qWe,NWe,gm,tre,jWe,DWe,Gk,GWe,OWe,VWe,hm,are,XWe,zWe,Ok,WWe,QWe,HWe,pm,nre,UWe,JWe,Vk,YWe,KWe,ZWe,um,sre,eQe,oQe,Xk,rQe,tQe,aQe,_m,lre,nQe,sQe,zk,lQe,iQe,dQe,bm,ire,cQe,fQe,Wk,mQe,gQe,hQe,vm,dre,pQe,uQe,Qk,_Qe,bQe,vQe,Fm,cre,FQe,TQe,Hk,MQe,EQe,CQe,Tm,fre,wQe,AQe,Uk,yQe,LQe,xQe,Mm,mre,$Qe,kQe,Jk,SQe,RQe,PQe,Em,gre,BQe,IQe,Yk,qQe,NQe,jQe,Cm,hre,DQe,GQe,Kk,OQe,VQe,XQe,wm,pre,zQe,WQe,Zk,QQe,HQe,UQe,Am,ure,JQe,YQe,eS,KQe,ZQe,eHe,ym,_re,oHe,rHe,oS,tHe,aHe,nHe,Lm,bre,sHe,lHe,rS,iHe,dHe,cHe,xm,vre,fHe,mHe,tS,gHe,hHe,pHe,$m,Fre,uHe,_He,aS,bHe,vHe,FHe,km,Tre,THe,MHe,nS,EHe,CHe,wHe,Sm,Mre,AHe,yHe,sS,LHe,xHe,$He,Rm,Ere,kHe,SHe,lS,RHe,PHe,BHe,Pm,Cre,IHe,qHe,iS,NHe,jHe,DHe,Bm,wre,GHe,OHe,dS,VHe,XHe,zHe,Im,Are,WHe,QHe,cS,HHe,UHe,JHe,qm,yre,YHe,KHe,fS,ZHe,eUe,oUe,Nm,Lre,rUe,tUe,mS,aUe,nUe,sUe,jm,xre,lUe,iUe,gS,dUe,cUe,fUe,Dm,$re,mUe,gUe,hS,hUe,pUe,uUe,Gm,kre,_Ue,bUe,pS,vUe,FUe,TUe,Om,Sre,MUe,EUe,uS,CUe,wUe,AUe,Vm,Rre,yUe,LUe,_S,xUe,$Ue,kUe,Xm,Pre,SUe,RUe,bS,PUe,BUe,IUe,zm,Bre,qUe,NUe,vS,jUe,DUe,GUe,Wm,Ire,OUe,VUe,FS,XUe,zUe,WUe,Qm,qre,QUe,HUe,TS,UUe,JUe,YUe,Hm,Nre,KUe,ZUe,MS,eJe,oJe,rJe,Um,jre,tJe,aJe,ES,nJe,sJe,lJe,Jm,Dre,iJe,dJe,CS,cJe,fJe,mJe,Ym,Gre,gJe,hJe,wS,pJe,uJe,_Je,Km,Ore,bJe,vJe,AS,FJe,TJe,MJe,Zm,Vre,EJe,CJe,yS,wJe,AJe,yJe,eg,Xre,LJe,xJe,LS,$Je,kJe,SJe,og,zre,RJe,PJe,xS,BJe,IJe,qJe,rg,Wre,NJe,jJe,$S,DJe,GJe,OJe,tg,Qre,VJe,XJe,kS,zJe,WJe,QJe,ag,Hre,HJe,UJe,SS,JJe,YJe,KJe,ng,Ure,ZJe,eYe,RS,oYe,rYe,tYe,sg,Jre,aYe,nYe,PS,sYe,lYe,iYe,lg,Yre,dYe,cYe,BS,fYe,mYe,gYe,ig,Kre,hYe,pYe,IS,uYe,_Ye,bYe,dg,Zre,vYe,FYe,qS,TYe,MYe,EYe,cg,ete,CYe,wYe,NS,AYe,yYe,LYe,fg,ote,xYe,$Ye,jS,kYe,SYe,RYe,mg,rte,PYe,BYe,DS,IYe,qYe,NYe,gg,tte,jYe,DYe,GS,GYe,OYe,VYe,hg,ate,XYe,zYe,OS,WYe,QYe,HYe,pg,nte,UYe,JYe,VS,YYe,KYe,ZYe,ug,ste,eKe,oKe,XS,rKe,tKe,aKe,_g,lte,nKe,sKe,zS,lKe,iKe,dKe,bg,ite,cKe,fKe,WS,mKe,gKe,hKe,vg,dte,pKe,uKe,QS,_Ke,bKe,vKe,Fg,cte,FKe,TKe,HS,MKe,EKe,CKe,Tg,fte,wKe,AKe,US,yKe,LKe,xKe,Mg,$Ke,Eg,SA,kKe,mte,SKe,Yqe,Ti,Cg,gte,RA,RKe,hte,PKe,Kqe,wo,PA,BKe,BA,IKe,JS,qKe,NKe,jKe,IA,DKe,pte,GKe,OKe,VKe,Cr,qA,XKe,ute,zKe,WKe,Aa,QKe,_te,HKe,UKe,bte,JKe,YKe,vte,KKe,ZKe,eZe,k,Sn,Fte,oZe,rZe,YS,tZe,aZe,KS,nZe,sZe,lZe,Rn,Tte,iZe,dZe,ZS,cZe,fZe,eR,mZe,gZe,hZe,Pn,Mte,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,wg,Ete,MZe,EZe,tR,CZe,wZe,AZe,Bn,Cte,yZe,LZe,aR,xZe,$Ze,nR,kZe,SZe,RZe,Ag,wte,PZe,BZe,sR,IZe,qZe,NZe,yg,Ate,jZe,DZe,lR,GZe,OZe,VZe,Lg,yte,XZe,zZe,iR,WZe,QZe,HZe,In,Lte,UZe,JZe,dR,YZe,KZe,cR,ZZe,eeo,oeo,qn,xte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,Nn,$te,deo,ceo,gR,feo,meo,hR,geo,heo,peo,xg,kte,ueo,_eo,pR,beo,veo,Feo,$g,Ste,Teo,Meo,uR,Eeo,Ceo,weo,jn,Rte,Aeo,yeo,_R,Leo,xeo,bR,$eo,keo,Seo,kg,Pte,Reo,Peo,vR,Beo,Ieo,qeo,Dn,Bte,Neo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,Gn,Ite,zeo,Weo,MR,Qeo,Heo,ER,Ueo,Jeo,Yeo,On,qte,Keo,Zeo,CR,eoo,ooo,wR,roo,too,aoo,Sg,Nte,noo,soo,AR,loo,ioo,doo,Vn,jte,coo,foo,yR,moo,goo,LR,hoo,poo,uoo,Xn,Dte,_oo,boo,xR,voo,Foo,$R,Too,Moo,Eoo,zn,Gte,Coo,woo,kR,Aoo,yoo,SR,Loo,xoo,$oo,Wn,Ote,koo,Soo,RR,Roo,Poo,PR,Boo,Ioo,qoo,Qn,Vte,Noo,joo,BR,Doo,Goo,IR,Ooo,Voo,Xoo,Hn,Xte,zoo,Woo,qR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Rg,zte,Koo,Zoo,jR,ero,oro,rro,Un,Wte,tro,aro,DR,nro,sro,GR,lro,iro,dro,Pg,Qte,cro,fro,OR,mro,gro,hro,Jn,Hte,pro,uro,VR,_ro,bro,XR,vro,Fro,Tro,Yn,Ute,Mro,Ero,zR,Cro,wro,WR,Aro,yro,Lro,Kn,Jte,xro,$ro,QR,kro,Sro,HR,Rro,Pro,Bro,Zn,Yte,Iro,qro,UR,Nro,jro,JR,Dro,Gro,Oro,es,Kte,Vro,Xro,YR,zro,Wro,KR,Qro,Hro,Uro,Bg,Zte,Jro,Yro,ZR,Kro,Zro,eto,os,eae,oto,rto,eP,tto,ato,oP,nto,sto,lto,rs,oae,ito,dto,rP,cto,fto,tP,mto,gto,hto,ts,rae,pto,uto,aP,_to,bto,nP,vto,Fto,Tto,as,tae,Mto,Eto,sP,Cto,wto,lP,Ato,yto,Lto,ns,aae,xto,$to,iP,kto,Sto,dP,Rto,Pto,Bto,ss,nae,Ito,qto,cP,Nto,jto,fP,Dto,Gto,Oto,ls,sae,Vto,Xto,mP,zto,Wto,gP,Qto,Hto,Uto,Ig,lae,Jto,Yto,hP,Kto,Zto,eao,is,iae,oao,rao,pP,tao,aao,uP,nao,sao,lao,qg,dae,iao,dao,_P,cao,fao,mao,Ng,cae,gao,hao,bP,pao,uao,_ao,ds,fae,bao,vao,vP,Fao,Tao,FP,Mao,Eao,Cao,cs,mae,wao,Aao,TP,yao,Lao,MP,xao,$ao,kao,fs,gae,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,jg,hae,jao,Dao,wP,Gao,Oao,Vao,ms,pae,Xao,zao,AP,Wao,Qao,yP,Hao,Uao,Jao,gs,uae,Yao,Kao,LP,Zao,eno,xP,ono,rno,tno,hs,_ae,ano,nno,$P,sno,lno,kP,ino,dno,cno,ps,bae,fno,mno,SP,gno,hno,RP,pno,uno,_no,us,vae,bno,vno,PP,Fno,Tno,BP,Mno,Eno,Cno,Dg,Fae,wno,Ano,IP,yno,Lno,xno,_s,Tae,$no,kno,qP,Sno,Rno,NP,Pno,Bno,Ino,Gg,Mae,qno,Nno,jP,jno,Dno,Gno,Og,Eae,Ono,Vno,DP,Xno,zno,Wno,Vg,Cae,Qno,Hno,GP,Uno,Jno,Yno,Xg,wae,Kno,Zno,OP,eso,oso,rso,bs,Aae,tso,aso,VP,nso,sso,XP,lso,iso,dso,zg,yae,cso,fso,zP,mso,gso,hso,vs,Lae,pso,uso,WP,_so,bso,QP,vso,Fso,Tso,Fs,xae,Mso,Eso,HP,Cso,wso,UP,Aso,yso,Lso,Ts,$ae,xso,$so,JP,kso,Sso,YP,Rso,Pso,Bso,Ms,kae,Iso,qso,KP,Nso,jso,ZP,Dso,Gso,Oso,Es,Sae,Vso,Xso,eB,zso,Wso,oB,Qso,Hso,Uso,Cs,Rae,Jso,Yso,rB,Kso,Zso,tB,elo,olo,rlo,Wg,Pae,tlo,alo,aB,nlo,slo,llo,Qg,Bae,ilo,dlo,nB,clo,flo,mlo,ws,Iae,glo,hlo,sB,plo,ulo,lB,_lo,blo,vlo,As,qae,Flo,Tlo,iB,Mlo,Elo,dB,Clo,wlo,Alo,ys,Nae,ylo,Llo,cB,xlo,$lo,fB,klo,Slo,Rlo,Hg,jae,Plo,Blo,mB,Ilo,qlo,Nlo,Ug,Dae,jlo,Dlo,gB,Glo,Olo,Vlo,Jg,Gae,Xlo,zlo,hB,Wlo,Qlo,Hlo,Ls,Oae,Ulo,Jlo,pB,Ylo,Klo,uB,Zlo,eio,oio,Yg,Vae,rio,tio,_B,aio,nio,sio,Kg,Xae,lio,iio,bB,dio,cio,fio,Zg,zae,mio,gio,vB,hio,pio,uio,xs,Wae,_io,bio,FB,vio,Fio,TB,Tio,Mio,Eio,eh,Qae,Cio,wio,MB,Aio,yio,Lio,oh,Hae,xio,$io,EB,kio,Sio,Rio,$s,Uae,Pio,Bio,CB,Iio,qio,wB,Nio,jio,Dio,ks,Jae,Gio,Oio,AB,Vio,Xio,yB,zio,Wio,Qio,Ss,Yae,Hio,Uio,LB,Jio,Yio,xB,Kio,Zio,edo,Rs,Kae,odo,rdo,$B,tdo,ado,kB,ndo,sdo,ldo,rh,ido,th,NA,ddo,Zae,cdo,Zqe,Mi,ah,ene,jA,fdo,one,mdo,eNe,Ao,DA,gdo,GA,hdo,SB,pdo,udo,_do,OA,bdo,rne,vdo,Fdo,Tdo,He,VA,Mdo,tne,Edo,Cdo,ya,wdo,ane,Ado,ydo,nne,Ldo,xdo,sne,$do,kdo,Sdo,K,nh,lne,Rdo,Pdo,RB,Bdo,Ido,qdo,sh,ine,Ndo,jdo,PB,Ddo,Gdo,Odo,lh,dne,Vdo,Xdo,BB,zdo,Wdo,Qdo,ih,cne,Hdo,Udo,IB,Jdo,Ydo,Kdo,dh,fne,Zdo,eco,qB,oco,rco,tco,ch,mne,aco,nco,NB,sco,lco,ico,fh,gne,dco,cco,jB,fco,mco,gco,mh,hne,hco,pco,DB,uco,_co,bco,gh,pne,vco,Fco,GB,Tco,Mco,Eco,hh,une,Cco,wco,OB,Aco,yco,Lco,ph,_ne,xco,$co,VB,kco,Sco,Rco,uh,bne,Pco,Bco,XB,Ico,qco,Nco,_h,vne,jco,Dco,zB,Gco,Oco,Vco,bh,Fne,Xco,zco,WB,Wco,Qco,Hco,vh,Tne,Uco,Jco,QB,Yco,Kco,Zco,Fh,Mne,efo,ofo,HB,rfo,tfo,afo,Th,Ene,nfo,sfo,UB,lfo,ifo,dfo,Mh,Cne,cfo,ffo,JB,mfo,gfo,hfo,Eh,wne,pfo,ufo,YB,_fo,bfo,vfo,Ch,Ane,Ffo,Tfo,KB,Mfo,Efo,Cfo,wh,yne,wfo,Afo,ZB,yfo,Lfo,xfo,Ah,Lne,$fo,kfo,eI,Sfo,Rfo,Pfo,yh,xne,Bfo,Ifo,oI,qfo,Nfo,jfo,Lh,$ne,Dfo,Gfo,rI,Ofo,Vfo,Xfo,xh,kne,zfo,Wfo,tI,Qfo,Hfo,Ufo,$h,Sne,Jfo,Yfo,aI,Kfo,Zfo,emo,kh,Rne,omo,rmo,nI,tmo,amo,nmo,Sh,Pne,smo,lmo,sI,imo,dmo,cmo,Rh,fmo,Ph,mmo,Bh,XA,gmo,Bne,hmo,oNe,Ei,Ih,Ine,zA,pmo,qne,umo,rNe,yo,WA,_mo,QA,bmo,lI,vmo,Fmo,Tmo,HA,Mmo,Nne,Emo,Cmo,wmo,Ue,UA,Amo,jne,ymo,Lmo,Ci,xmo,Dne,$mo,kmo,Gne,Smo,Rmo,Pmo,he,qh,One,Bmo,Imo,iI,qmo,Nmo,jmo,Nh,Vne,Dmo,Gmo,Xne,Omo,Vmo,Xmo,jh,zne,zmo,Wmo,dI,Qmo,Hmo,Umo,Dh,Wne,Jmo,Ymo,cI,Kmo,Zmo,ego,Gh,Qne,ogo,rgo,fI,tgo,ago,ngo,Oh,Hne,sgo,lgo,mI,igo,dgo,cgo,Vh,Une,fgo,mgo,gI,ggo,hgo,pgo,Xh,Jne,ugo,_go,hI,bgo,vgo,Fgo,zh,Yne,Tgo,Mgo,pI,Ego,Cgo,wgo,Wh,Kne,Ago,ygo,uI,Lgo,xgo,$go,Qh,Zne,kgo,Sgo,_I,Rgo,Pgo,Bgo,Hh,ese,Igo,qgo,bI,Ngo,jgo,Dgo,Uh,ose,Ggo,Ogo,vI,Vgo,Xgo,zgo,Jh,rse,Wgo,Qgo,FI,Hgo,Ugo,Jgo,Yh,tse,Ygo,Kgo,TI,Zgo,eho,oho,Kh,ase,rho,tho,MI,aho,nho,sho,Zh,nse,lho,iho,EI,dho,cho,fho,ep,mho,op,gho,rp,JA,hho,sse,pho,tNe,wi,tp,lse,YA,uho,ise,_ho,aNe,Lo,KA,bho,Ai,vho,CI,Fho,Tho,wI,Mho,Eho,Cho,ZA,who,dse,Aho,yho,Lho,tt,e6,xho,cse,$ho,kho,yi,Sho,fse,Rho,Pho,AI,Bho,Iho,qho,ap,Nho,Je,o6,jho,mse,Dho,Gho,La,Oho,gse,Vho,Xho,hse,zho,Who,pse,Qho,Hho,Uho,x,np,use,Jho,Yho,yI,Kho,Zho,epo,sp,_se,opo,rpo,LI,tpo,apo,npo,lp,bse,spo,lpo,xI,ipo,dpo,cpo,ip,vse,fpo,mpo,$I,gpo,hpo,ppo,dp,Fse,upo,_po,kI,bpo,vpo,Fpo,cp,Tse,Tpo,Mpo,SI,Epo,Cpo,wpo,fp,Mse,Apo,ypo,RI,Lpo,xpo,$po,mp,Ese,kpo,Spo,PI,Rpo,Ppo,Bpo,gp,Cse,Ipo,qpo,BI,Npo,jpo,Dpo,hp,wse,Gpo,Opo,II,Vpo,Xpo,zpo,pp,Ase,Wpo,Qpo,qI,Hpo,Upo,Jpo,up,yse,Ypo,Kpo,NI,Zpo,euo,ouo,_p,Lse,ruo,tuo,jI,auo,nuo,suo,bp,xse,luo,iuo,DI,duo,cuo,fuo,vp,$se,muo,guo,GI,huo,puo,uuo,Fp,kse,_uo,buo,OI,vuo,Fuo,Tuo,Tp,Sse,Muo,Euo,VI,Cuo,wuo,Auo,Mp,Rse,yuo,Luo,XI,xuo,$uo,kuo,Ep,Pse,Suo,Ruo,zI,Puo,Buo,Iuo,Cp,Bse,quo,Nuo,WI,juo,Duo,Guo,wp,Ise,Ouo,Vuo,QI,Xuo,zuo,Wuo,Ap,qse,Quo,Huo,HI,Uuo,Juo,Yuo,yp,Nse,Kuo,Zuo,UI,e_o,o_o,r_o,Lp,jse,t_o,a_o,JI,n_o,s_o,l_o,xp,Dse,i_o,d_o,YI,c_o,f_o,m_o,$p,Gse,g_o,h_o,KI,p_o,u_o,__o,kp,Ose,b_o,v_o,ZI,F_o,T_o,M_o,Sp,Vse,E_o,C_o,eq,w_o,A_o,y_o,Rp,Xse,L_o,x_o,oq,$_o,k_o,S_o,Pp,zse,R_o,P_o,rq,B_o,I_o,q_o,Bp,Wse,N_o,j_o,tq,D_o,G_o,O_o,Ip,Qse,V_o,X_o,aq,z_o,W_o,Q_o,Ps,Hse,H_o,U_o,nq,J_o,Y_o,sq,K_o,Z_o,e1o,qp,Use,o1o,r1o,lq,t1o,a1o,n1o,Np,Jse,s1o,l1o,iq,i1o,d1o,c1o,jp,Yse,f1o,m1o,dq,g1o,h1o,p1o,Dp,Kse,u1o,_1o,cq,b1o,v1o,F1o,Gp,Zse,T1o,M1o,fq,E1o,C1o,w1o,Op,ele,A1o,y1o,mq,L1o,x1o,$1o,Vp,ole,k1o,S1o,gq,R1o,P1o,B1o,Xp,rle,I1o,q1o,hq,N1o,j1o,D1o,zp,tle,G1o,O1o,pq,V1o,X1o,z1o,Wp,ale,W1o,Q1o,uq,H1o,U1o,J1o,Qp,nle,Y1o,K1o,_q,Z1o,e8o,o8o,Hp,sle,r8o,t8o,bq,a8o,n8o,s8o,Up,lle,l8o,i8o,vq,d8o,c8o,f8o,Jp,ile,m8o,g8o,Fq,h8o,p8o,u8o,Yp,dle,_8o,b8o,Tq,v8o,F8o,T8o,Kp,cle,M8o,E8o,Mq,C8o,w8o,A8o,Zp,fle,y8o,L8o,Eq,x8o,$8o,k8o,eu,mle,S8o,R8o,Cq,P8o,B8o,I8o,ou,gle,q8o,N8o,wq,j8o,D8o,G8o,ru,hle,O8o,V8o,Aq,X8o,z8o,W8o,tu,ple,Q8o,H8o,yq,U8o,J8o,Y8o,au,ule,K8o,Z8o,Lq,ebo,obo,rbo,nu,_le,tbo,abo,xq,nbo,sbo,lbo,su,ble,ibo,dbo,$q,cbo,fbo,mbo,lu,vle,gbo,hbo,kq,pbo,ubo,_bo,iu,Fle,bbo,vbo,Sq,Fbo,Tbo,Mbo,du,Tle,Ebo,Cbo,Rq,wbo,Abo,ybo,cu,Mle,Lbo,xbo,Pq,$bo,kbo,Sbo,fu,Ele,Rbo,Pbo,Bq,Bbo,Ibo,qbo,mu,Cle,Nbo,jbo,Iq,Dbo,Gbo,Obo,gu,wle,Vbo,Xbo,qq,zbo,Wbo,Qbo,hu,Ale,Hbo,Ubo,Nq,Jbo,Ybo,Kbo,pu,yle,Zbo,e2o,jq,o2o,r2o,t2o,uu,Lle,a2o,n2o,Dq,s2o,l2o,i2o,_u,xle,d2o,c2o,Gq,f2o,m2o,g2o,bu,$le,h2o,p2o,Oq,u2o,_2o,b2o,vu,kle,v2o,F2o,Vq,T2o,M2o,E2o,Fu,Sle,C2o,w2o,Xq,A2o,y2o,L2o,Tu,Rle,x2o,$2o,zq,k2o,S2o,R2o,Mu,Ple,P2o,B2o,Wq,I2o,q2o,N2o,Eu,Ble,j2o,D2o,Qq,G2o,O2o,V2o,Cu,Ile,X2o,z2o,Hq,W2o,Q2o,H2o,wu,qle,U2o,J2o,Uq,Y2o,K2o,Z2o,Au,Nle,evo,ovo,Jq,rvo,tvo,avo,yu,jle,nvo,svo,Yq,lvo,ivo,dvo,Lu,Dle,cvo,fvo,Kq,mvo,gvo,hvo,xu,Gle,pvo,uvo,Zq,_vo,bvo,vvo,$u,Ole,Fvo,Tvo,eN,Mvo,Evo,Cvo,ku,Vle,wvo,Avo,oN,yvo,Lvo,xvo,Su,Xle,$vo,kvo,rN,Svo,Rvo,Pvo,Ru,zle,Bvo,Ivo,tN,qvo,Nvo,jvo,Pu,Wle,Dvo,Gvo,aN,Ovo,Vvo,Xvo,Bu,Qle,zvo,Wvo,nN,Qvo,Hvo,Uvo,Iu,Hle,Jvo,Yvo,sN,Kvo,Zvo,e3o,qu,Ule,o3o,r3o,lN,t3o,a3o,n3o,Nu,Jle,s3o,l3o,iN,i3o,d3o,c3o,ju,Yle,f3o,m3o,dN,g3o,h3o,p3o,Du,Kle,u3o,_3o,cN,b3o,v3o,F3o,Gu,Zle,T3o,M3o,fN,E3o,C3o,w3o,Ou,eie,A3o,y3o,mN,L3o,x3o,$3o,Vu,oie,k3o,S3o,gN,R3o,P3o,B3o,Xu,rie,I3o,q3o,hN,N3o,j3o,D3o,zu,tie,G3o,O3o,pN,V3o,X3o,z3o,Wu,aie,W3o,Q3o,uN,H3o,U3o,J3o,Qu,nie,Y3o,K3o,_N,Z3o,eFo,oFo,Hu,sie,rFo,tFo,bN,aFo,nFo,sFo,Uu,lie,lFo,iFo,vN,dFo,cFo,fFo,Ju,iie,mFo,gFo,FN,hFo,pFo,uFo,Yu,_Fo,die,bFo,vFo,cie,FFo,TFo,Ku,nNe,Li,Zu,fie,r6,MFo,mie,EFo,sNe,xo,t6,CFo,xi,wFo,TN,AFo,yFo,MN,LFo,xFo,$Fo,a6,kFo,gie,SFo,RFo,PFo,at,n6,BFo,hie,IFo,qFo,$i,NFo,pie,jFo,DFo,EN,GFo,OFo,VFo,e_,XFo,Ye,s6,zFo,uie,WFo,QFo,xa,HFo,_ie,UFo,JFo,bie,YFo,KFo,vie,ZFo,eTo,oTo,G,o_,Fie,rTo,tTo,CN,aTo,nTo,sTo,r_,Tie,lTo,iTo,wN,dTo,cTo,fTo,t_,Mie,mTo,gTo,AN,hTo,pTo,uTo,a_,Eie,_To,bTo,yN,vTo,FTo,TTo,n_,Cie,MTo,ETo,LN,CTo,wTo,ATo,s_,wie,yTo,LTo,xN,xTo,$To,kTo,l_,Aie,STo,RTo,$N,PTo,BTo,ITo,i_,yie,qTo,NTo,kN,jTo,DTo,GTo,d_,Lie,OTo,VTo,SN,XTo,zTo,WTo,c_,xie,QTo,HTo,RN,UTo,JTo,YTo,f_,$ie,KTo,ZTo,PN,e7o,o7o,r7o,m_,kie,t7o,a7o,BN,n7o,s7o,l7o,g_,Sie,i7o,d7o,IN,c7o,f7o,m7o,h_,Rie,g7o,h7o,qN,p7o,u7o,_7o,p_,Pie,b7o,v7o,NN,F7o,T7o,M7o,u_,Bie,E7o,C7o,jN,w7o,A7o,y7o,__,Iie,L7o,x7o,DN,$7o,k7o,S7o,b_,qie,R7o,P7o,GN,B7o,I7o,q7o,v_,Nie,N7o,j7o,ON,D7o,G7o,O7o,F_,jie,V7o,X7o,VN,z7o,W7o,Q7o,T_,Die,H7o,U7o,XN,J7o,Y7o,K7o,M_,Gie,Z7o,eMo,zN,oMo,rMo,tMo,E_,Oie,aMo,nMo,WN,sMo,lMo,iMo,C_,Vie,dMo,cMo,QN,fMo,mMo,gMo,w_,Xie,hMo,pMo,HN,uMo,_Mo,bMo,A_,zie,vMo,FMo,UN,TMo,MMo,EMo,y_,Wie,CMo,wMo,JN,AMo,yMo,LMo,L_,Qie,xMo,$Mo,YN,kMo,SMo,RMo,x_,Hie,PMo,BMo,KN,IMo,qMo,NMo,$_,Uie,jMo,DMo,ZN,GMo,OMo,VMo,k_,Jie,XMo,zMo,ej,WMo,QMo,HMo,S_,Yie,UMo,JMo,oj,YMo,KMo,ZMo,R_,Kie,e4o,o4o,rj,r4o,t4o,a4o,P_,Zie,n4o,s4o,tj,l4o,i4o,d4o,B_,ede,c4o,f4o,aj,m4o,g4o,h4o,I_,ode,p4o,u4o,nj,_4o,b4o,v4o,q_,rde,F4o,T4o,sj,M4o,E4o,C4o,N_,tde,w4o,A4o,lj,y4o,L4o,x4o,j_,ade,$4o,k4o,ij,S4o,R4o,P4o,D_,nde,B4o,I4o,dj,q4o,N4o,j4o,G_,sde,D4o,G4o,cj,O4o,V4o,X4o,O_,lde,z4o,W4o,fj,Q4o,H4o,U4o,V_,J4o,ide,Y4o,K4o,dde,Z4o,eEo,X_,lNe,ki,z_,cde,l6,oEo,fde,rEo,iNe,$o,i6,tEo,Si,aEo,mj,nEo,sEo,gj,lEo,iEo,dEo,d6,cEo,mde,fEo,mEo,gEo,nt,c6,hEo,gde,pEo,uEo,Ri,_Eo,hde,bEo,vEo,hj,FEo,TEo,MEo,W_,EEo,Ke,f6,CEo,pde,wEo,AEo,$a,yEo,ude,LEo,xEo,_de,$Eo,kEo,bde,SEo,REo,PEo,z,Q_,vde,BEo,IEo,pj,qEo,NEo,jEo,H_,Fde,DEo,GEo,uj,OEo,VEo,XEo,U_,Tde,zEo,WEo,_j,QEo,HEo,UEo,J_,Mde,JEo,YEo,bj,KEo,ZEo,eCo,Y_,Ede,oCo,rCo,vj,tCo,aCo,nCo,K_,Cde,sCo,lCo,Fj,iCo,dCo,cCo,Z_,wde,fCo,mCo,Tj,gCo,hCo,pCo,e1,Ade,uCo,_Co,Mj,bCo,vCo,FCo,o1,yde,TCo,MCo,Ej,ECo,CCo,wCo,r1,Lde,ACo,yCo,Cj,LCo,xCo,$Co,t1,xde,kCo,SCo,wj,RCo,PCo,BCo,a1,$de,ICo,qCo,Aj,NCo,jCo,DCo,n1,kde,GCo,OCo,yj,VCo,XCo,zCo,s1,Sde,WCo,QCo,Lj,HCo,UCo,JCo,l1,Rde,YCo,KCo,xj,ZCo,e5o,o5o,i1,Pde,r5o,t5o,$j,a5o,n5o,s5o,d1,Bde,l5o,i5o,kj,d5o,c5o,f5o,c1,Ide,m5o,g5o,Sj,h5o,p5o,u5o,f1,qde,_5o,b5o,Rj,v5o,F5o,T5o,m1,Nde,M5o,E5o,Pj,C5o,w5o,A5o,g1,jde,y5o,L5o,Bj,x5o,$5o,k5o,h1,Dde,S5o,R5o,Ij,P5o,B5o,I5o,p1,Gde,q5o,N5o,qj,j5o,D5o,G5o,u1,Ode,O5o,V5o,Nj,X5o,z5o,W5o,_1,Vde,Q5o,H5o,jj,U5o,J5o,Y5o,b1,Xde,K5o,Z5o,Dj,ewo,owo,rwo,v1,zde,two,awo,Gj,nwo,swo,lwo,F1,Wde,iwo,dwo,Oj,cwo,fwo,mwo,T1,Qde,gwo,hwo,Vj,pwo,uwo,_wo,M1,Hde,bwo,vwo,Xj,Fwo,Two,Mwo,E1,Ude,Ewo,Cwo,zj,wwo,Awo,ywo,C1,Jde,Lwo,xwo,Wj,$wo,kwo,Swo,w1,Yde,Rwo,Pwo,Qj,Bwo,Iwo,qwo,A1,Kde,Nwo,jwo,Hj,Dwo,Gwo,Owo,y1,Zde,Vwo,Xwo,Uj,zwo,Wwo,Qwo,L1,ece,Hwo,Uwo,Jj,Jwo,Ywo,Kwo,x1,Zwo,oce,e0o,o0o,rce,r0o,t0o,$1,dNe,Pi,k1,tce,m6,a0o,ace,n0o,cNe,ko,g6,s0o,Bi,l0o,Yj,i0o,d0o,Kj,c0o,f0o,m0o,h6,g0o,nce,h0o,p0o,u0o,st,p6,_0o,sce,b0o,v0o,Ii,F0o,lce,T0o,M0o,Zj,E0o,C0o,w0o,S1,A0o,Ze,u6,y0o,ice,L0o,x0o,ka,$0o,dce,k0o,S0o,cce,R0o,P0o,fce,B0o,I0o,q0o,W,R1,mce,N0o,j0o,eD,D0o,G0o,O0o,P1,gce,V0o,X0o,oD,z0o,W0o,Q0o,B1,hce,H0o,U0o,rD,J0o,Y0o,K0o,I1,pce,Z0o,eAo,tD,oAo,rAo,tAo,q1,uce,aAo,nAo,aD,sAo,lAo,iAo,N1,_ce,dAo,cAo,nD,fAo,mAo,gAo,j1,bce,hAo,pAo,sD,uAo,_Ao,bAo,D1,vce,vAo,FAo,lD,TAo,MAo,EAo,G1,Fce,CAo,wAo,iD,AAo,yAo,LAo,O1,Tce,xAo,$Ao,dD,kAo,SAo,RAo,V1,Mce,PAo,BAo,cD,IAo,qAo,NAo,X1,Ece,jAo,DAo,fD,GAo,OAo,VAo,z1,Cce,XAo,zAo,mD,WAo,QAo,HAo,W1,wce,UAo,JAo,gD,YAo,KAo,ZAo,Q1,Ace,e6o,o6o,hD,r6o,t6o,a6o,H1,yce,n6o,s6o,pD,l6o,i6o,d6o,U1,Lce,c6o,f6o,uD,m6o,g6o,h6o,J1,xce,p6o,u6o,_D,_6o,b6o,v6o,Y1,$ce,F6o,T6o,bD,M6o,E6o,C6o,K1,kce,w6o,A6o,vD,y6o,L6o,x6o,Z1,Sce,$6o,k6o,FD,S6o,R6o,P6o,e8,Rce,B6o,I6o,TD,q6o,N6o,j6o,o8,Pce,D6o,G6o,MD,O6o,V6o,X6o,r8,Bce,z6o,W6o,ED,Q6o,H6o,U6o,t8,Ice,J6o,Y6o,CD,K6o,Z6o,eyo,a8,qce,oyo,ryo,wD,tyo,ayo,nyo,n8,Nce,syo,lyo,AD,iyo,dyo,cyo,s8,jce,fyo,myo,yD,gyo,hyo,pyo,l8,Dce,uyo,_yo,LD,byo,vyo,Fyo,i8,Gce,Tyo,Myo,xD,Eyo,Cyo,wyo,d8,Oce,Ayo,yyo,Vce,Lyo,xyo,$yo,c8,Xce,kyo,Syo,$D,Ryo,Pyo,Byo,f8,zce,Iyo,qyo,kD,Nyo,jyo,Dyo,m8,Wce,Gyo,Oyo,SD,Vyo,Xyo,zyo,g8,Qce,Wyo,Qyo,RD,Hyo,Uyo,Jyo,h8,Yyo,Hce,Kyo,Zyo,Uce,eLo,oLo,p8,fNe,qi,u8,Jce,_6,rLo,Yce,tLo,mNe,So,b6,aLo,Ni,nLo,PD,sLo,lLo,BD,iLo,dLo,cLo,v6,fLo,Kce,mLo,gLo,hLo,lt,F6,pLo,Zce,uLo,_Lo,ji,bLo,efe,vLo,FLo,ID,TLo,MLo,ELo,_8,CLo,eo,T6,wLo,ofe,ALo,yLo,Sa,LLo,rfe,xLo,$Lo,tfe,kLo,SLo,afe,RLo,PLo,BLo,ue,b8,nfe,ILo,qLo,qD,NLo,jLo,DLo,v8,sfe,GLo,OLo,ND,VLo,XLo,zLo,F8,lfe,WLo,QLo,jD,HLo,ULo,JLo,T8,ife,YLo,KLo,DD,ZLo,e9o,o9o,M8,dfe,r9o,t9o,GD,a9o,n9o,s9o,E8,cfe,l9o,i9o,OD,d9o,c9o,f9o,C8,ffe,m9o,g9o,VD,h9o,p9o,u9o,w8,mfe,_9o,b9o,XD,v9o,F9o,T9o,A8,gfe,M9o,E9o,zD,C9o,w9o,A9o,y8,hfe,y9o,L9o,WD,x9o,$9o,k9o,L8,pfe,S9o,R9o,QD,P9o,B9o,I9o,x8,ufe,q9o,N9o,HD,j9o,D9o,G9o,$8,_fe,O9o,V9o,UD,X9o,z9o,W9o,k8,bfe,Q9o,H9o,JD,U9o,J9o,Y9o,S8,vfe,K9o,Z9o,YD,exo,oxo,rxo,R8,Ffe,txo,axo,KD,nxo,sxo,lxo,P8,ixo,Tfe,dxo,cxo,Mfe,fxo,mxo,B8,gNe,Di,I8,Efe,M6,gxo,Cfe,hxo,hNe,Ro,E6,pxo,Gi,uxo,ZD,_xo,bxo,eG,vxo,Fxo,Txo,C6,Mxo,wfe,Exo,Cxo,wxo,it,w6,Axo,Afe,yxo,Lxo,Oi,xxo,yfe,$xo,kxo,oG,Sxo,Rxo,Pxo,q8,Bxo,oo,A6,Ixo,Lfe,qxo,Nxo,Ra,jxo,xfe,Dxo,Gxo,$fe,Oxo,Vxo,kfe,Xxo,zxo,Wxo,q,N8,Sfe,Qxo,Hxo,rG,Uxo,Jxo,Yxo,j8,Rfe,Kxo,Zxo,tG,e$o,o$o,r$o,D8,Pfe,t$o,a$o,aG,n$o,s$o,l$o,G8,Bfe,i$o,d$o,nG,c$o,f$o,m$o,O8,Ife,g$o,h$o,sG,p$o,u$o,_$o,V8,qfe,b$o,v$o,lG,F$o,T$o,M$o,X8,Nfe,E$o,C$o,iG,w$o,A$o,y$o,z8,jfe,L$o,x$o,dG,$$o,k$o,S$o,W8,Dfe,R$o,P$o,cG,B$o,I$o,q$o,Q8,Gfe,N$o,j$o,fG,D$o,G$o,O$o,H8,Ofe,V$o,X$o,mG,z$o,W$o,Q$o,U8,Vfe,H$o,U$o,gG,J$o,Y$o,K$o,J8,Xfe,Z$o,eko,hG,oko,rko,tko,Y8,zfe,ako,nko,pG,sko,lko,iko,K8,Wfe,dko,cko,uG,fko,mko,gko,Z8,Qfe,hko,pko,_G,uko,_ko,bko,eb,Hfe,vko,Fko,bG,Tko,Mko,Eko,ob,Ufe,Cko,wko,vG,Ako,yko,Lko,rb,Jfe,xko,$ko,FG,kko,Sko,Rko,tb,Yfe,Pko,Bko,TG,Iko,qko,Nko,ab,Kfe,jko,Dko,MG,Gko,Oko,Vko,nb,Zfe,Xko,zko,EG,Wko,Qko,Hko,sb,eme,Uko,Jko,CG,Yko,Kko,Zko,lb,ome,eSo,oSo,wG,rSo,tSo,aSo,ib,rme,nSo,sSo,AG,lSo,iSo,dSo,db,tme,cSo,fSo,yG,mSo,gSo,hSo,cb,ame,pSo,uSo,LG,_So,bSo,vSo,fb,nme,FSo,TSo,xG,MSo,ESo,CSo,mb,sme,wSo,ASo,$G,ySo,LSo,xSo,gb,lme,$So,kSo,kG,SSo,RSo,PSo,hb,ime,BSo,ISo,SG,qSo,NSo,jSo,pb,dme,DSo,GSo,RG,OSo,VSo,XSo,ub,cme,zSo,WSo,PG,QSo,HSo,USo,_b,fme,JSo,YSo,BG,KSo,ZSo,eRo,bb,mme,oRo,rRo,IG,tRo,aRo,nRo,vb,gme,sRo,lRo,qG,iRo,dRo,cRo,Fb,hme,fRo,mRo,NG,gRo,hRo,pRo,Tb,pme,uRo,_Ro,jG,bRo,vRo,FRo,Mb,ume,TRo,MRo,DG,ERo,CRo,wRo,Eb,_me,ARo,yRo,GG,LRo,xRo,$Ro,Cb,bme,kRo,SRo,OG,RRo,PRo,BRo,wb,vme,IRo,qRo,VG,NRo,jRo,DRo,Ab,Fme,GRo,ORo,XG,VRo,XRo,zRo,yb,Tme,WRo,QRo,zG,HRo,URo,JRo,Lb,Mme,YRo,KRo,WG,ZRo,ePo,oPo,xb,Eme,rPo,tPo,QG,aPo,nPo,sPo,$b,Cme,lPo,iPo,HG,dPo,cPo,fPo,kb,mPo,wme,gPo,hPo,Ame,pPo,uPo,Sb,pNe,Vi,Rb,yme,y6,_Po,Lme,bPo,uNe,Po,L6,vPo,Xi,FPo,UG,TPo,MPo,JG,EPo,CPo,wPo,x6,APo,xme,yPo,LPo,xPo,dt,$6,$Po,$me,kPo,SPo,zi,RPo,kme,PPo,BPo,YG,IPo,qPo,NPo,Pb,jPo,ro,k6,DPo,Sme,GPo,OPo,Pa,VPo,Rme,XPo,zPo,Pme,WPo,QPo,Bme,HPo,UPo,JPo,Y,Bb,Ime,YPo,KPo,KG,ZPo,eBo,oBo,Ib,qme,rBo,tBo,ZG,aBo,nBo,sBo,qb,Nme,lBo,iBo,eO,dBo,cBo,fBo,Nb,jme,mBo,gBo,oO,hBo,pBo,uBo,jb,Dme,_Bo,bBo,rO,vBo,FBo,TBo,Db,Gme,MBo,EBo,tO,CBo,wBo,ABo,Gb,Ome,yBo,LBo,aO,xBo,$Bo,kBo,Ob,Vme,SBo,RBo,nO,PBo,BBo,IBo,Vb,Xme,qBo,NBo,sO,jBo,DBo,GBo,Xb,zme,OBo,VBo,lO,XBo,zBo,WBo,zb,Wme,QBo,HBo,iO,UBo,JBo,YBo,Wb,Qme,KBo,ZBo,dO,eIo,oIo,rIo,Qb,Hme,tIo,aIo,cO,nIo,sIo,lIo,Hb,Ume,iIo,dIo,fO,cIo,fIo,mIo,Ub,Jme,gIo,hIo,mO,pIo,uIo,_Io,Jb,Yme,bIo,vIo,gO,FIo,TIo,MIo,Yb,Kme,EIo,CIo,hO,wIo,AIo,yIo,Kb,Zme,LIo,xIo,pO,$Io,kIo,SIo,Zb,ege,RIo,PIo,uO,BIo,IIo,qIo,e2,oge,NIo,jIo,_O,DIo,GIo,OIo,o2,rge,VIo,XIo,bO,zIo,WIo,QIo,r2,tge,HIo,UIo,vO,JIo,YIo,KIo,t2,age,ZIo,eqo,FO,oqo,rqo,tqo,a2,nge,aqo,nqo,TO,sqo,lqo,iqo,n2,sge,dqo,cqo,MO,fqo,mqo,gqo,s2,lge,hqo,pqo,EO,uqo,_qo,bqo,l2,ige,vqo,Fqo,CO,Tqo,Mqo,Eqo,i2,dge,Cqo,wqo,wO,Aqo,yqo,Lqo,d2,cge,xqo,$qo,AO,kqo,Sqo,Rqo,c2,Pqo,fge,Bqo,Iqo,mge,qqo,Nqo,f2,_Ne,Wi,m2,gge,S6,jqo,hge,Dqo,bNe,Bo,R6,Gqo,Qi,Oqo,yO,Vqo,Xqo,LO,zqo,Wqo,Qqo,P6,Hqo,pge,Uqo,Jqo,Yqo,ct,B6,Kqo,uge,Zqo,eNo,Hi,oNo,_ge,rNo,tNo,xO,aNo,nNo,sNo,g2,lNo,to,I6,iNo,bge,dNo,cNo,Ba,fNo,vge,mNo,gNo,Fge,hNo,pNo,Tge,uNo,_No,bNo,Yr,h2,Mge,vNo,FNo,$O,TNo,MNo,ENo,p2,Ege,CNo,wNo,kO,ANo,yNo,LNo,u2,Cge,xNo,$No,SO,kNo,SNo,RNo,_2,wge,PNo,BNo,RO,INo,qNo,NNo,b2,Age,jNo,DNo,PO,GNo,ONo,VNo,v2,XNo,yge,zNo,WNo,Lge,QNo,HNo,F2,vNe,Ui,T2,xge,q6,UNo,$ge,JNo,FNe,Io,N6,YNo,Ji,KNo,BO,ZNo,ejo,IO,ojo,rjo,tjo,j6,ajo,kge,njo,sjo,ljo,ft,D6,ijo,Sge,djo,cjo,Yi,fjo,Rge,mjo,gjo,qO,hjo,pjo,ujo,M2,_jo,ao,G6,bjo,Pge,vjo,Fjo,Ia,Tjo,Bge,Mjo,Ejo,Ige,Cjo,wjo,qge,Ajo,yjo,Ljo,H,E2,Nge,xjo,$jo,NO,kjo,Sjo,Rjo,C2,jge,Pjo,Bjo,jO,Ijo,qjo,Njo,w2,Dge,jjo,Djo,DO,Gjo,Ojo,Vjo,A2,Gge,Xjo,zjo,GO,Wjo,Qjo,Hjo,y2,Oge,Ujo,Jjo,OO,Yjo,Kjo,Zjo,L2,Vge,eDo,oDo,VO,rDo,tDo,aDo,x2,Xge,nDo,sDo,XO,lDo,iDo,dDo,$2,zge,cDo,fDo,zO,mDo,gDo,hDo,k2,Wge,pDo,uDo,WO,_Do,bDo,vDo,S2,Qge,FDo,TDo,QO,MDo,EDo,CDo,R2,Hge,wDo,ADo,HO,yDo,LDo,xDo,P2,Uge,$Do,kDo,UO,SDo,RDo,PDo,B2,Jge,BDo,IDo,JO,qDo,NDo,jDo,I2,Yge,DDo,GDo,YO,ODo,VDo,XDo,q2,Kge,zDo,WDo,KO,QDo,HDo,UDo,N2,Zge,JDo,YDo,ZO,KDo,ZDo,eGo,j2,ehe,oGo,rGo,eV,tGo,aGo,nGo,D2,ohe,sGo,lGo,oV,iGo,dGo,cGo,G2,rhe,fGo,mGo,rV,gGo,hGo,pGo,O2,the,uGo,_Go,tV,bGo,vGo,FGo,V2,ahe,TGo,MGo,aV,EGo,CGo,wGo,X2,nhe,AGo,yGo,nV,LGo,xGo,$Go,z2,she,kGo,SGo,sV,RGo,PGo,BGo,W2,lhe,IGo,qGo,lV,NGo,jGo,DGo,Q2,ihe,GGo,OGo,iV,VGo,XGo,zGo,H2,dhe,WGo,QGo,dV,HGo,UGo,JGo,U2,che,YGo,KGo,cV,ZGo,eOo,oOo,J2,fhe,rOo,tOo,fV,aOo,nOo,sOo,Y2,mhe,lOo,iOo,mV,dOo,cOo,fOo,K2,ghe,mOo,gOo,gV,hOo,pOo,uOo,Z2,hhe,_Oo,bOo,hV,vOo,FOo,TOo,ev,phe,MOo,EOo,pV,COo,wOo,AOo,ov,uhe,yOo,LOo,uV,xOo,$Oo,kOo,rv,_he,SOo,ROo,_V,POo,BOo,IOo,tv,qOo,bhe,NOo,jOo,vhe,DOo,GOo,av,TNe,Ki,nv,Fhe,O6,OOo,The,VOo,MNe,qo,V6,XOo,Zi,zOo,bV,WOo,QOo,vV,HOo,UOo,JOo,X6,YOo,Mhe,KOo,ZOo,eVo,mt,z6,oVo,Ehe,rVo,tVo,ed,aVo,Che,nVo,sVo,FV,lVo,iVo,dVo,sv,cVo,no,W6,fVo,whe,mVo,gVo,qa,hVo,Ahe,pVo,uVo,yhe,_Vo,bVo,Lhe,vVo,FVo,TVo,V,lv,xhe,MVo,EVo,TV,CVo,wVo,AVo,iv,$he,yVo,LVo,MV,xVo,$Vo,kVo,dv,khe,SVo,RVo,EV,PVo,BVo,IVo,cv,She,qVo,NVo,CV,jVo,DVo,GVo,fv,Rhe,OVo,VVo,wV,XVo,zVo,WVo,mv,Phe,QVo,HVo,AV,UVo,JVo,YVo,gv,Bhe,KVo,ZVo,yV,eXo,oXo,rXo,hv,Ihe,tXo,aXo,LV,nXo,sXo,lXo,pv,qhe,iXo,dXo,xV,cXo,fXo,mXo,uv,Nhe,gXo,hXo,$V,pXo,uXo,_Xo,_v,jhe,bXo,vXo,kV,FXo,TXo,MXo,bv,Dhe,EXo,CXo,SV,wXo,AXo,yXo,vv,Ghe,LXo,xXo,RV,$Xo,kXo,SXo,Fv,Ohe,RXo,PXo,PV,BXo,IXo,qXo,Tv,Vhe,NXo,jXo,BV,DXo,GXo,OXo,Mv,Xhe,VXo,XXo,IV,zXo,WXo,QXo,Ev,zhe,HXo,UXo,qV,JXo,YXo,KXo,Cv,Whe,ZXo,ezo,NV,ozo,rzo,tzo,wv,Qhe,azo,nzo,jV,szo,lzo,izo,Av,Hhe,dzo,czo,DV,fzo,mzo,gzo,yv,Uhe,hzo,pzo,GV,uzo,_zo,bzo,Lv,Jhe,vzo,Fzo,OV,Tzo,Mzo,Ezo,xv,Yhe,Czo,wzo,VV,Azo,yzo,Lzo,$v,Khe,xzo,$zo,XV,kzo,Szo,Rzo,kv,Zhe,Pzo,Bzo,zV,Izo,qzo,Nzo,Sv,epe,jzo,Dzo,WV,Gzo,Ozo,Vzo,Rv,ope,Xzo,zzo,QV,Wzo,Qzo,Hzo,Pv,rpe,Uzo,Jzo,HV,Yzo,Kzo,Zzo,Bv,tpe,eWo,oWo,UV,rWo,tWo,aWo,Iv,ape,nWo,sWo,JV,lWo,iWo,dWo,qv,npe,cWo,fWo,YV,mWo,gWo,hWo,Nv,spe,pWo,uWo,KV,_Wo,bWo,vWo,jv,lpe,FWo,TWo,ZV,MWo,EWo,CWo,Dv,ipe,wWo,AWo,eX,yWo,LWo,xWo,Gv,dpe,$Wo,kWo,oX,SWo,RWo,PWo,Ov,cpe,BWo,IWo,rX,qWo,NWo,jWo,Vv,fpe,DWo,GWo,tX,OWo,VWo,XWo,Xv,mpe,zWo,WWo,aX,QWo,HWo,UWo,zv,gpe,JWo,YWo,nX,KWo,ZWo,eQo,Wv,hpe,oQo,rQo,sX,tQo,aQo,nQo,Qv,sQo,ppe,lQo,iQo,upe,dQo,cQo,Hv,ENe,od,Uv,_pe,Q6,fQo,bpe,mQo,CNe,No,H6,gQo,rd,hQo,lX,pQo,uQo,iX,_Qo,bQo,vQo,U6,FQo,vpe,TQo,MQo,EQo,gt,J6,CQo,Fpe,wQo,AQo,td,yQo,Tpe,LQo,xQo,dX,$Qo,kQo,SQo,Jv,RQo,so,Y6,PQo,Mpe,BQo,IQo,Na,qQo,Epe,NQo,jQo,Cpe,DQo,GQo,wpe,OQo,VQo,XQo,Ape,Yv,ype,zQo,WQo,cX,QQo,HQo,UQo,Kv,JQo,Lpe,YQo,KQo,xpe,ZQo,eHo,Zv,wNe,ad,e3,$pe,K6,oHo,kpe,rHo,ANe,jo,Z6,tHo,nd,aHo,fX,nHo,sHo,mX,lHo,iHo,dHo,ey,cHo,Spe,fHo,mHo,gHo,ht,oy,hHo,Rpe,pHo,uHo,sd,_Ho,Ppe,bHo,vHo,gX,FHo,THo,MHo,o3,EHo,lo,ry,CHo,Bpe,wHo,AHo,ja,yHo,Ipe,LHo,xHo,qpe,$Ho,kHo,Npe,SHo,RHo,PHo,Fe,r3,jpe,BHo,IHo,hX,qHo,NHo,jHo,t3,Dpe,DHo,GHo,pX,OHo,VHo,XHo,a3,Gpe,zHo,WHo,uX,QHo,HHo,UHo,n3,Ope,JHo,YHo,_X,KHo,ZHo,eUo,Bs,Vpe,oUo,rUo,bX,tUo,aUo,vX,nUo,sUo,lUo,s3,Xpe,iUo,dUo,FX,cUo,fUo,mUo,pt,zpe,gUo,hUo,TX,pUo,uUo,MX,_Uo,bUo,EX,vUo,FUo,TUo,l3,Wpe,MUo,EUo,CX,CUo,wUo,AUo,i3,Qpe,yUo,LUo,wX,xUo,$Uo,kUo,d3,Hpe,SUo,RUo,AX,PUo,BUo,IUo,c3,Upe,qUo,NUo,yX,jUo,DUo,GUo,f3,Jpe,OUo,VUo,LX,XUo,zUo,WUo,m3,Ype,QUo,HUo,xX,UUo,JUo,YUo,g3,Kpe,KUo,ZUo,$X,eJo,oJo,rJo,h3,tJo,Zpe,aJo,nJo,eue,sJo,lJo,p3,yNe,ld,u3,oue,ty,iJo,rue,dJo,LNe,Do,ay,cJo,id,fJo,kX,mJo,gJo,SX,hJo,pJo,uJo,ny,_Jo,tue,bJo,vJo,FJo,ut,sy,TJo,aue,MJo,EJo,dd,CJo,nue,wJo,AJo,RX,yJo,LJo,xJo,_3,$Jo,io,ly,kJo,sue,SJo,RJo,Da,PJo,lue,BJo,IJo,iue,qJo,NJo,due,jJo,DJo,GJo,cue,b3,fue,OJo,VJo,PX,XJo,zJo,WJo,v3,QJo,mue,HJo,UJo,gue,JJo,YJo,F3,xNe,cd,T3,hue,iy,KJo,pue,ZJo,$Ne,Go,dy,eYo,fd,oYo,BX,rYo,tYo,IX,aYo,nYo,sYo,cy,lYo,uue,iYo,dYo,cYo,_t,fy,fYo,_ue,mYo,gYo,md,hYo,bue,pYo,uYo,qX,_Yo,bYo,vYo,M3,FYo,co,my,TYo,vue,MYo,EYo,Ga,CYo,Fue,wYo,AYo,Tue,yYo,LYo,Mue,xYo,$Yo,kYo,Se,E3,Eue,SYo,RYo,NX,PYo,BYo,IYo,C3,Cue,qYo,NYo,jX,jYo,DYo,GYo,w3,wue,OYo,VYo,DX,XYo,zYo,WYo,A3,Aue,QYo,HYo,GX,UYo,JYo,YYo,y3,yue,KYo,ZYo,OX,eKo,oKo,rKo,L3,Lue,tKo,aKo,VX,nKo,sKo,lKo,x3,xue,iKo,dKo,XX,cKo,fKo,mKo,$3,$ue,gKo,hKo,zX,pKo,uKo,_Ko,k3,kue,bKo,vKo,WX,FKo,TKo,MKo,S3,EKo,Sue,CKo,wKo,Rue,AKo,yKo,R3,kNe,gd,P3,Pue,gy,LKo,Bue,xKo,SNe,Oo,hy,$Ko,hd,kKo,QX,SKo,RKo,HX,PKo,BKo,IKo,py,qKo,Iue,NKo,jKo,DKo,bt,uy,GKo,que,OKo,VKo,pd,XKo,Nue,zKo,WKo,UX,QKo,HKo,UKo,B3,JKo,fo,_y,YKo,jue,KKo,ZKo,Oa,eZo,Due,oZo,rZo,Gue,tZo,aZo,Oue,nZo,sZo,lZo,Kr,I3,Vue,iZo,dZo,JX,cZo,fZo,mZo,q3,Xue,gZo,hZo,YX,pZo,uZo,_Zo,N3,zue,bZo,vZo,KX,FZo,TZo,MZo,j3,Wue,EZo,CZo,ZX,wZo,AZo,yZo,D3,Que,LZo,xZo,ez,$Zo,kZo,SZo,G3,RZo,Hue,PZo,BZo,Uue,IZo,qZo,O3,RNe,ud,V3,Jue,by,NZo,Yue,jZo,PNe,Vo,vy,DZo,_d,GZo,oz,OZo,VZo,rz,XZo,zZo,WZo,Fy,QZo,Kue,HZo,UZo,JZo,vt,Ty,YZo,Zue,KZo,ZZo,bd,eer,e_e,oer,rer,tz,ter,aer,ner,X3,ser,mo,My,ler,o_e,ier,der,Va,cer,r_e,fer,mer,t_e,ger,her,a_e,per,uer,_er,Re,z3,n_e,ber,ver,az,Fer,Ter,Mer,W3,s_e,Eer,Cer,nz,wer,Aer,yer,Q3,l_e,Ler,xer,sz,$er,ker,Ser,H3,i_e,Rer,Per,lz,Ber,Ier,qer,U3,d_e,Ner,jer,iz,Der,Ger,Oer,J3,c_e,Ver,Xer,dz,zer,Wer,Qer,Y3,f_e,Her,Uer,cz,Jer,Yer,Ker,K3,m_e,Zer,eor,fz,oor,ror,tor,Z3,g_e,aor,nor,mz,sor,lor,ior,eF,dor,h_e,cor,mor,p_e,gor,hor,oF,BNe,vd,rF,u_e,Ey,por,__e,uor,INe,Xo,Cy,_or,Fd,bor,gz,vor,For,hz,Tor,Mor,Eor,wy,Cor,b_e,wor,Aor,yor,Ft,Ay,Lor,v_e,xor,$or,Td,kor,F_e,Sor,Ror,pz,Por,Bor,Ior,tF,qor,go,yy,Nor,T_e,jor,Dor,Xa,Gor,M_e,Oor,Vor,E_e,Xor,zor,C_e,Wor,Qor,Hor,Ly,aF,w_e,Uor,Jor,uz,Yor,Kor,Zor,nF,A_e,err,orr,_z,rrr,trr,arr,sF,nrr,y_e,srr,lrr,L_e,irr,drr,lF,qNe,Md,iF,x_e,xy,crr,$_e,frr,NNe,zo,$y,mrr,Ed,grr,bz,hrr,prr,vz,urr,_rr,brr,ky,vrr,k_e,Frr,Trr,Mrr,Tt,Sy,Err,S_e,Crr,wrr,Cd,Arr,R_e,yrr,Lrr,Fz,xrr,$rr,krr,dF,Srr,ho,Ry,Rrr,P_e,Prr,Brr,za,Irr,B_e,qrr,Nrr,I_e,jrr,Drr,q_e,Grr,Orr,Vrr,Zr,cF,N_e,Xrr,zrr,Tz,Wrr,Qrr,Hrr,fF,j_e,Urr,Jrr,Mz,Yrr,Krr,Zrr,mF,D_e,etr,otr,Ez,rtr,ttr,atr,gF,G_e,ntr,str,Cz,ltr,itr,dtr,hF,O_e,ctr,ftr,wz,mtr,gtr,htr,pF,ptr,V_e,utr,_tr,X_e,btr,vtr,uF,jNe,wd,_F,z_e,Py,Ftr,W_e,Ttr,DNe,Wo,By,Mtr,Ad,Etr,Az,Ctr,wtr,yz,Atr,ytr,Ltr,Iy,xtr,Q_e,$tr,ktr,Str,Mt,qy,Rtr,H_e,Ptr,Btr,yd,Itr,U_e,qtr,Ntr,Lz,jtr,Dtr,Gtr,bF,Otr,po,Ny,Vtr,J_e,Xtr,ztr,Wa,Wtr,Y_e,Qtr,Htr,K_e,Utr,Jtr,Z_e,Ytr,Ktr,Ztr,Ld,vF,e1e,ear,oar,xz,rar,tar,aar,FF,o1e,nar,sar,$z,lar,iar,dar,TF,r1e,car,far,kz,mar,gar,har,MF,par,t1e,uar,_ar,a1e,bar,Far,EF,GNe,xd,CF,n1e,jy,Tar,s1e,Mar,ONe,Qo,Dy,Ear,$d,Car,Sz,war,Aar,Rz,yar,Lar,xar,Gy,$ar,l1e,kar,Sar,Rar,Et,Oy,Par,i1e,Bar,Iar,kd,qar,d1e,Nar,jar,Pz,Dar,Gar,Oar,wF,Var,uo,Vy,Xar,c1e,zar,War,Qa,Qar,f1e,Har,Uar,m1e,Jar,Yar,g1e,Kar,Zar,enr,Xy,AF,h1e,onr,rnr,Bz,tnr,anr,nnr,yF,p1e,snr,lnr,Iz,inr,dnr,cnr,LF,fnr,u1e,mnr,gnr,_1e,hnr,pnr,xF,VNe,Sd,$F,b1e,zy,unr,v1e,_nr,XNe,Ho,Wy,bnr,Rd,vnr,qz,Fnr,Tnr,Nz,Mnr,Enr,Cnr,Qy,wnr,F1e,Anr,ynr,Lnr,Ct,Hy,xnr,T1e,$nr,knr,Pd,Snr,M1e,Rnr,Pnr,jz,Bnr,Inr,qnr,kF,Nnr,_o,Uy,jnr,E1e,Dnr,Gnr,Ha,Onr,C1e,Vnr,Xnr,w1e,znr,Wnr,A1e,Qnr,Hnr,Unr,y1e,SF,L1e,Jnr,Ynr,Dz,Knr,Znr,esr,RF,osr,x1e,rsr,tsr,$1e,asr,nsr,PF,zNe,Bd,BF,k1e,Jy,ssr,S1e,lsr,WNe,Uo,Yy,isr,Id,dsr,Gz,csr,fsr,Oz,msr,gsr,hsr,Ky,psr,R1e,usr,_sr,bsr,wt,Zy,vsr,P1e,Fsr,Tsr,qd,Msr,B1e,Esr,Csr,Vz,wsr,Asr,ysr,IF,Lsr,bo,eL,xsr,I1e,$sr,ksr,Ua,Ssr,q1e,Rsr,Psr,N1e,Bsr,Isr,j1e,qsr,Nsr,jsr,Ja,qF,D1e,Dsr,Gsr,Xz,Osr,Vsr,Xsr,NF,G1e,zsr,Wsr,zz,Qsr,Hsr,Usr,jF,O1e,Jsr,Ysr,Wz,Ksr,Zsr,elr,DF,V1e,olr,rlr,Qz,tlr,alr,nlr,GF,slr,X1e,llr,ilr,z1e,dlr,clr,OF,QNe,Nd,VF,W1e,oL,flr,Q1e,mlr,HNe,Jo,rL,glr,jd,hlr,Hz,plr,ulr,Uz,_lr,blr,vlr,tL,Flr,H1e,Tlr,Mlr,Elr,At,aL,Clr,U1e,wlr,Alr,Dd,ylr,J1e,Llr,xlr,Jz,$lr,klr,Slr,XF,Rlr,vo,nL,Plr,Y1e,Blr,Ilr,Ya,qlr,K1e,Nlr,jlr,Z1e,Dlr,Glr,e8e,Olr,Vlr,Xlr,o8e,zF,r8e,zlr,Wlr,Yz,Qlr,Hlr,Ulr,WF,Jlr,t8e,Ylr,Klr,a8e,Zlr,eir,QF,UNe,Gd,HF,n8e,sL,oir,s8e,rir,JNe,Yo,lL,tir,Od,air,Kz,nir,sir,Zz,lir,iir,dir,iL,cir,l8e,fir,mir,gir,yt,dL,hir,i8e,pir,uir,Vd,_ir,d8e,bir,vir,eW,Fir,Tir,Mir,UF,Eir,wr,cL,Cir,c8e,wir,Air,Ka,yir,f8e,Lir,xir,m8e,$ir,kir,g8e,Sir,Rir,Pir,N,JF,h8e,Bir,Iir,oW,qir,Nir,jir,YF,p8e,Dir,Gir,rW,Oir,Vir,Xir,KF,u8e,zir,Wir,tW,Qir,Hir,Uir,ZF,_8e,Jir,Yir,aW,Kir,Zir,edr,eT,b8e,odr,rdr,nW,tdr,adr,ndr,oT,v8e,sdr,ldr,sW,idr,ddr,cdr,rT,F8e,fdr,mdr,lW,gdr,hdr,pdr,tT,T8e,udr,_dr,iW,bdr,vdr,Fdr,aT,M8e,Tdr,Mdr,dW,Edr,Cdr,wdr,nT,E8e,Adr,ydr,cW,Ldr,xdr,$dr,sT,C8e,kdr,Sdr,fW,Rdr,Pdr,Bdr,lT,w8e,Idr,qdr,mW,Ndr,jdr,Ddr,iT,A8e,Gdr,Odr,gW,Vdr,Xdr,zdr,dT,y8e,Wdr,Qdr,hW,Hdr,Udr,Jdr,cT,L8e,Ydr,Kdr,pW,Zdr,ecr,ocr,fT,x8e,rcr,tcr,uW,acr,ncr,scr,mT,$8e,lcr,icr,_W,dcr,ccr,fcr,Is,k8e,mcr,gcr,bW,hcr,pcr,vW,ucr,_cr,bcr,gT,S8e,vcr,Fcr,FW,Tcr,Mcr,Ecr,hT,R8e,Ccr,wcr,TW,Acr,ycr,Lcr,pT,P8e,xcr,$cr,MW,kcr,Scr,Rcr,uT,B8e,Pcr,Bcr,EW,Icr,qcr,Ncr,_T,I8e,jcr,Dcr,CW,Gcr,Ocr,Vcr,bT,q8e,Xcr,zcr,wW,Wcr,Qcr,Hcr,vT,N8e,Ucr,Jcr,AW,Ycr,Kcr,Zcr,FT,j8e,efr,ofr,yW,rfr,tfr,afr,TT,D8e,nfr,sfr,LW,lfr,ifr,dfr,MT,G8e,cfr,ffr,xW,mfr,gfr,hfr,ET,O8e,pfr,ufr,$W,_fr,bfr,vfr,CT,V8e,Ffr,Tfr,kW,Mfr,Efr,Cfr,wT,X8e,wfr,Afr,SW,yfr,Lfr,xfr,AT,z8e,$fr,kfr,RW,Sfr,Rfr,Pfr,yT,W8e,Bfr,Ifr,PW,qfr,Nfr,jfr,LT,Q8e,Dfr,Gfr,BW,Ofr,Vfr,Xfr,xT,H8e,zfr,Wfr,IW,Qfr,Hfr,Ufr,$T,U8e,Jfr,Yfr,qW,Kfr,Zfr,emr,kT,J8e,omr,rmr,NW,tmr,amr,nmr,ST,Y8e,smr,lmr,jW,imr,dmr,cmr,RT,K8e,fmr,mmr,DW,gmr,hmr,pmr,PT,Z8e,umr,_mr,GW,bmr,vmr,Fmr,BT,ebe,Tmr,Mmr,OW,Emr,Cmr,wmr,IT,obe,Amr,ymr,VW,Lmr,xmr,$mr,qT,rbe,kmr,Smr,XW,Rmr,Pmr,Bmr,NT,tbe,Imr,qmr,zW,Nmr,jmr,Dmr,jT,abe,Gmr,Omr,WW,Vmr,Xmr,zmr,DT,nbe,Wmr,Qmr,QW,Hmr,Umr,Jmr,GT,sbe,Ymr,Kmr,HW,Zmr,egr,ogr,OT,YNe,Xd,VT,lbe,fL,rgr,ibe,tgr,KNe,Ko,mL,agr,zd,ngr,UW,sgr,lgr,JW,igr,dgr,cgr,gL,fgr,dbe,mgr,ggr,hgr,Lt,hL,pgr,cbe,ugr,_gr,Wd,bgr,fbe,vgr,Fgr,YW,Tgr,Mgr,Egr,XT,Cgr,Ar,pL,wgr,mbe,Agr,ygr,Za,Lgr,gbe,xgr,$gr,hbe,kgr,Sgr,pbe,Rgr,Pgr,Bgr,se,zT,ube,Igr,qgr,KW,Ngr,jgr,Dgr,WT,_be,Ggr,Ogr,ZW,Vgr,Xgr,zgr,QT,bbe,Wgr,Qgr,eQ,Hgr,Ugr,Jgr,HT,vbe,Ygr,Kgr,oQ,Zgr,ehr,ohr,UT,Fbe,rhr,thr,rQ,ahr,nhr,shr,JT,Tbe,lhr,ihr,tQ,dhr,chr,fhr,YT,Mbe,mhr,ghr,aQ,hhr,phr,uhr,KT,Ebe,_hr,bhr,nQ,vhr,Fhr,Thr,ZT,Cbe,Mhr,Ehr,sQ,Chr,whr,Ahr,e7,wbe,yhr,Lhr,lQ,xhr,$hr,khr,o7,Abe,Shr,Rhr,iQ,Phr,Bhr,Ihr,r7,ybe,qhr,Nhr,dQ,jhr,Dhr,Ghr,t7,Lbe,Ohr,Vhr,cQ,Xhr,zhr,Whr,a7,xbe,Qhr,Hhr,fQ,Uhr,Jhr,Yhr,n7,$be,Khr,Zhr,mQ,epr,opr,rpr,s7,kbe,tpr,apr,gQ,npr,spr,lpr,l7,Sbe,ipr,dpr,hQ,cpr,fpr,mpr,i7,Rbe,gpr,hpr,pQ,ppr,upr,_pr,d7,Pbe,bpr,vpr,uQ,Fpr,Tpr,Mpr,c7,Bbe,Epr,Cpr,_Q,wpr,Apr,ypr,f7,Ibe,Lpr,xpr,bQ,$pr,kpr,Spr,m7,qbe,Rpr,Ppr,vQ,Bpr,Ipr,qpr,g7,Nbe,Npr,jpr,FQ,Dpr,Gpr,Opr,h7,ZNe,Qd,p7,jbe,uL,Vpr,Dbe,Xpr,eje,Zo,_L,zpr,Hd,Wpr,TQ,Qpr,Hpr,MQ,Upr,Jpr,Ypr,bL,Kpr,Gbe,Zpr,eur,our,xt,vL,rur,Obe,tur,aur,Ud,nur,Vbe,sur,lur,EQ,iur,dur,cur,u7,fur,yr,FL,mur,Xbe,gur,hur,en,pur,zbe,uur,_ur,Wbe,bur,vur,Qbe,Fur,Tur,Mur,Me,_7,Hbe,Eur,Cur,CQ,wur,Aur,yur,b7,Ube,Lur,xur,wQ,$ur,kur,Sur,v7,Jbe,Rur,Pur,AQ,Bur,Iur,qur,F7,Ybe,Nur,jur,yQ,Dur,Gur,Our,T7,Kbe,Vur,Xur,LQ,zur,Wur,Qur,M7,Zbe,Hur,Uur,xQ,Jur,Yur,Kur,E7,e2e,Zur,e_r,$Q,o_r,r_r,t_r,C7,o2e,a_r,n_r,kQ,s_r,l_r,i_r,w7,r2e,d_r,c_r,SQ,f_r,m_r,g_r,A7,t2e,h_r,p_r,RQ,u_r,__r,b_r,y7,a2e,v_r,F_r,PQ,T_r,M_r,E_r,L7,n2e,C_r,w_r,BQ,A_r,y_r,L_r,x7,oje,Jd,$7,s2e,TL,x_r,l2e,$_r,rje,er,ML,k_r,Yd,S_r,IQ,R_r,P_r,qQ,B_r,I_r,q_r,EL,N_r,i2e,j_r,D_r,G_r,$t,CL,O_r,d2e,V_r,X_r,Kd,z_r,c2e,W_r,Q_r,NQ,H_r,U_r,J_r,k7,Y_r,Lr,wL,K_r,f2e,Z_r,e1r,on,o1r,m2e,r1r,t1r,g2e,a1r,n1r,h2e,s1r,l1r,i1r,rn,S7,p2e,d1r,c1r,jQ,f1r,m1r,g1r,R7,u2e,h1r,p1r,DQ,u1r,_1r,b1r,P7,_2e,v1r,F1r,GQ,T1r,M1r,E1r,B7,b2e,C1r,w1r,OQ,A1r,y1r,L1r,I7,tje,Zd,q7,v2e,AL,x1r,F2e,$1r,aje,or,yL,k1r,ec,S1r,VQ,R1r,P1r,XQ,B1r,I1r,q1r,LL,N1r,T2e,j1r,D1r,G1r,kt,xL,O1r,M2e,V1r,X1r,oc,z1r,E2e,W1r,Q1r,zQ,H1r,U1r,J1r,N7,Y1r,xr,$L,K1r,C2e,Z1r,e8r,tn,o8r,w2e,r8r,t8r,A2e,a8r,n8r,y2e,s8r,l8r,i8r,ie,j7,L2e,d8r,c8r,WQ,f8r,m8r,g8r,D7,x2e,h8r,p8r,QQ,u8r,_8r,b8r,G7,$2e,v8r,F8r,HQ,T8r,M8r,E8r,O7,k2e,C8r,w8r,UQ,A8r,y8r,L8r,V7,S2e,x8r,$8r,JQ,k8r,S8r,R8r,X7,R2e,P8r,B8r,YQ,I8r,q8r,N8r,z7,P2e,j8r,D8r,KQ,G8r,O8r,V8r,W7,B2e,X8r,z8r,ZQ,W8r,Q8r,H8r,Q7,I2e,U8r,J8r,eH,Y8r,K8r,Z8r,H7,q2e,ebr,obr,oH,rbr,tbr,abr,U7,N2e,nbr,sbr,rH,lbr,ibr,dbr,J7,j2e,cbr,fbr,tH,mbr,gbr,hbr,Y7,D2e,pbr,ubr,aH,_br,bbr,vbr,K7,G2e,Fbr,Tbr,nH,Mbr,Ebr,Cbr,Z7,O2e,wbr,Abr,sH,ybr,Lbr,xbr,eM,V2e,$br,kbr,lH,Sbr,Rbr,Pbr,oM,X2e,Bbr,Ibr,iH,qbr,Nbr,jbr,rM,z2e,Dbr,Gbr,dH,Obr,Vbr,Xbr,tM,W2e,zbr,Wbr,cH,Qbr,Hbr,Ubr,aM,Q2e,Jbr,Ybr,fH,Kbr,Zbr,e2r,nM,nje,rc,sM,H2e,kL,o2r,U2e,r2r,sje,rr,SL,t2r,tc,a2r,mH,n2r,s2r,gH,l2r,i2r,d2r,RL,c2r,J2e,f2r,m2r,g2r,St,PL,h2r,Y2e,p2r,u2r,ac,_2r,K2e,b2r,v2r,hH,F2r,T2r,M2r,lM,E2r,$r,BL,C2r,Z2e,w2r,A2r,an,y2r,eve,L2r,x2r,ove,$2r,k2r,rve,S2r,R2r,P2r,ye,iM,tve,B2r,I2r,pH,q2r,N2r,j2r,dM,ave,D2r,G2r,uH,O2r,V2r,X2r,cM,nve,z2r,W2r,_H,Q2r,H2r,U2r,fM,sve,J2r,Y2r,bH,K2r,Z2r,evr,mM,lve,ovr,rvr,vH,tvr,avr,nvr,gM,ive,svr,lvr,FH,ivr,dvr,cvr,hM,dve,fvr,mvr,TH,gvr,hvr,pvr,pM,cve,uvr,_vr,MH,bvr,vvr,Fvr,uM,fve,Tvr,Mvr,EH,Evr,Cvr,wvr,_M,mve,Avr,yvr,CH,Lvr,xvr,$vr,bM,lje,nc,vM,gve,IL,kvr,hve,Svr,ije,tr,qL,Rvr,sc,Pvr,wH,Bvr,Ivr,AH,qvr,Nvr,jvr,NL,Dvr,pve,Gvr,Ovr,Vvr,Rt,jL,Xvr,uve,zvr,Wvr,lc,Qvr,_ve,Hvr,Uvr,yH,Jvr,Yvr,Kvr,FM,Zvr,kr,DL,e3r,bve,o3r,r3r,nn,t3r,vve,a3r,n3r,Fve,s3r,l3r,Tve,i3r,d3r,c3r,oe,TM,Mve,f3r,m3r,LH,g3r,h3r,p3r,MM,Eve,u3r,_3r,xH,b3r,v3r,F3r,EM,Cve,T3r,M3r,$H,E3r,C3r,w3r,CM,wve,A3r,y3r,kH,L3r,x3r,$3r,wM,Ave,k3r,S3r,SH,R3r,P3r,B3r,AM,yve,I3r,q3r,RH,N3r,j3r,D3r,yM,Lve,G3r,O3r,PH,V3r,X3r,z3r,LM,xve,W3r,Q3r,BH,H3r,U3r,J3r,xM,$ve,Y3r,K3r,IH,Z3r,eFr,oFr,$M,kve,rFr,tFr,qH,aFr,nFr,sFr,kM,Sve,lFr,iFr,NH,dFr,cFr,fFr,SM,Rve,mFr,gFr,jH,hFr,pFr,uFr,RM,Pve,_Fr,bFr,DH,vFr,FFr,TFr,PM,Bve,MFr,EFr,GH,CFr,wFr,AFr,BM,Ive,yFr,LFr,OH,xFr,$Fr,kFr,IM,qve,SFr,RFr,VH,PFr,BFr,IFr,qM,Nve,qFr,NFr,XH,jFr,DFr,GFr,NM,jve,OFr,VFr,zH,XFr,zFr,WFr,jM,Dve,QFr,HFr,WH,UFr,JFr,YFr,DM,Gve,KFr,ZFr,QH,eTr,oTr,rTr,GM,Ove,tTr,aTr,HH,nTr,sTr,lTr,OM,Vve,iTr,dTr,UH,cTr,fTr,mTr,VM,Xve,gTr,hTr,JH,pTr,uTr,_Tr,XM,zve,bTr,vTr,YH,FTr,TTr,MTr,zM,Wve,ETr,CTr,KH,wTr,ATr,yTr,WM,Qve,LTr,xTr,ZH,$Tr,kTr,STr,QM,dje,ic,HM,Hve,GL,RTr,Uve,PTr,cje,ar,OL,BTr,dc,ITr,eU,qTr,NTr,oU,jTr,DTr,GTr,VL,OTr,Jve,VTr,XTr,zTr,Pt,XL,WTr,Yve,QTr,HTr,cc,UTr,Kve,JTr,YTr,rU,KTr,ZTr,e7r,UM,o7r,Sr,zL,r7r,Zve,t7r,a7r,sn,n7r,e3e,s7r,l7r,o3e,i7r,d7r,r3e,c7r,f7r,m7r,pe,JM,t3e,g7r,h7r,tU,p7r,u7r,_7r,YM,a3e,b7r,v7r,aU,F7r,T7r,M7r,KM,n3e,E7r,C7r,nU,w7r,A7r,y7r,ZM,s3e,L7r,x7r,sU,$7r,k7r,S7r,e4,l3e,R7r,P7r,lU,B7r,I7r,q7r,o4,i3e,N7r,j7r,iU,D7r,G7r,O7r,r4,d3e,V7r,X7r,dU,z7r,W7r,Q7r,t4,c3e,H7r,U7r,cU,J7r,Y7r,K7r,a4,f3e,Z7r,eMr,fU,oMr,rMr,tMr,n4,m3e,aMr,nMr,mU,sMr,lMr,iMr,s4,g3e,dMr,cMr,gU,fMr,mMr,gMr,l4,h3e,hMr,pMr,hU,uMr,_Mr,bMr,i4,p3e,vMr,FMr,pU,TMr,MMr,EMr,d4,u3e,CMr,wMr,uU,AMr,yMr,LMr,c4,_3e,xMr,$Mr,_U,kMr,SMr,RMr,f4,b3e,PMr,BMr,bU,IMr,qMr,NMr,m4,v3e,jMr,DMr,vU,GMr,OMr,VMr,g4,fje,fc,h4,F3e,WL,XMr,T3e,zMr,mje,nr,QL,WMr,mc,QMr,FU,HMr,UMr,TU,JMr,YMr,KMr,HL,ZMr,M3e,e4r,o4r,r4r,Bt,UL,t4r,E3e,a4r,n4r,gc,s4r,C3e,l4r,i4r,MU,d4r,c4r,f4r,p4,m4r,Rr,JL,g4r,w3e,h4r,p4r,ln,u4r,A3e,_4r,b4r,y3e,v4r,F4r,L3e,T4r,M4r,E4r,YL,u4,x3e,C4r,w4r,EU,A4r,y4r,L4r,_4,$3e,x4r,$4r,CU,k4r,S4r,R4r,b4,gje,hc,v4,k3e,KL,P4r,S3e,B4r,hje,sr,ZL,I4r,pc,q4r,wU,N4r,j4r,AU,D4r,G4r,O4r,e9,V4r,R3e,X4r,z4r,W4r,It,o9,Q4r,P3e,H4r,U4r,uc,J4r,B3e,Y4r,K4r,yU,Z4r,eEr,oEr,F4,rEr,Pr,r9,tEr,I3e,aEr,nEr,dn,sEr,q3e,lEr,iEr,N3e,dEr,cEr,j3e,fEr,mEr,gEr,D3e,T4,G3e,hEr,pEr,LU,uEr,_Er,bEr,M4,pje,_c,E4,O3e,t9,vEr,V3e,FEr,uje,lr,a9,TEr,bc,MEr,xU,EEr,CEr,$U,wEr,AEr,yEr,n9,LEr,X3e,xEr,$Er,kEr,qt,s9,SEr,z3e,REr,PEr,vc,BEr,W3e,IEr,qEr,kU,NEr,jEr,DEr,C4,GEr,Br,l9,OEr,Q3e,VEr,XEr,cn,zEr,H3e,WEr,QEr,U3e,HEr,UEr,J3e,JEr,YEr,KEr,de,w4,Y3e,ZEr,eCr,SU,oCr,rCr,tCr,A4,K3e,aCr,nCr,RU,sCr,lCr,iCr,y4,Z3e,dCr,cCr,PU,fCr,mCr,gCr,L4,eFe,hCr,pCr,BU,uCr,_Cr,bCr,x4,oFe,vCr,FCr,IU,TCr,MCr,ECr,$4,rFe,CCr,wCr,qU,ACr,yCr,LCr,k4,tFe,xCr,$Cr,NU,kCr,SCr,RCr,S4,aFe,PCr,BCr,jU,ICr,qCr,NCr,R4,nFe,jCr,DCr,DU,GCr,OCr,VCr,P4,sFe,XCr,zCr,GU,WCr,QCr,HCr,B4,lFe,UCr,JCr,OU,YCr,KCr,ZCr,I4,iFe,e5r,o5r,VU,r5r,t5r,a5r,q4,dFe,n5r,s5r,XU,l5r,i5r,d5r,N4,cFe,c5r,f5r,zU,m5r,g5r,h5r,j4,fFe,p5r,u5r,WU,_5r,b5r,v5r,D4,mFe,F5r,T5r,QU,M5r,E5r,C5r,G4,gFe,w5r,A5r,HU,y5r,L5r,x5r,O4,hFe,$5r,k5r,UU,S5r,R5r,P5r,V4,pFe,B5r,I5r,JU,q5r,N5r,j5r,X4,uFe,D5r,G5r,YU,O5r,V5r,X5r,z4,_je,Fc,W4,_Fe,i9,z5r,bFe,W5r,bje,ir,d9,Q5r,Tc,H5r,KU,U5r,J5r,ZU,Y5r,K5r,Z5r,c9,ewr,vFe,owr,rwr,twr,Nt,f9,awr,FFe,nwr,swr,Mc,lwr,TFe,iwr,dwr,eJ,cwr,fwr,mwr,Q4,gwr,Ir,m9,hwr,MFe,pwr,uwr,fn,_wr,EFe,bwr,vwr,CFe,Fwr,Twr,wFe,Mwr,Ewr,Cwr,ce,H4,AFe,wwr,Awr,oJ,ywr,Lwr,xwr,U4,yFe,$wr,kwr,rJ,Swr,Rwr,Pwr,J4,LFe,Bwr,Iwr,tJ,qwr,Nwr,jwr,Y4,xFe,Dwr,Gwr,aJ,Owr,Vwr,Xwr,K4,$Fe,zwr,Wwr,nJ,Qwr,Hwr,Uwr,Z4,kFe,Jwr,Ywr,sJ,Kwr,Zwr,e0r,eE,SFe,o0r,r0r,lJ,t0r,a0r,n0r,oE,RFe,s0r,l0r,iJ,i0r,d0r,c0r,rE,PFe,f0r,m0r,dJ,g0r,h0r,p0r,tE,BFe,u0r,_0r,cJ,b0r,v0r,F0r,aE,IFe,T0r,M0r,fJ,E0r,C0r,w0r,nE,qFe,A0r,y0r,mJ,L0r,x0r,$0r,sE,NFe,k0r,S0r,gJ,R0r,P0r,B0r,lE,jFe,I0r,q0r,hJ,N0r,j0r,D0r,iE,DFe,G0r,O0r,pJ,V0r,X0r,z0r,dE,GFe,W0r,Q0r,uJ,H0r,U0r,J0r,cE,OFe,Y0r,K0r,_J,Z0r,eAr,oAr,fE,VFe,rAr,tAr,bJ,aAr,nAr,sAr,mE,XFe,lAr,iAr,vJ,dAr,cAr,fAr,gE,zFe,mAr,gAr,FJ,hAr,pAr,uAr,hE,vje,Ec,pE,WFe,g9,_Ar,QFe,bAr,Fje,dr,h9,vAr,Cc,FAr,TJ,TAr,MAr,MJ,EAr,CAr,wAr,p9,AAr,HFe,yAr,LAr,xAr,jt,u9,$Ar,UFe,kAr,SAr,wc,RAr,JFe,PAr,BAr,EJ,IAr,qAr,NAr,uE,jAr,qr,_9,DAr,YFe,GAr,OAr,mn,VAr,KFe,XAr,zAr,ZFe,WAr,QAr,eTe,HAr,UAr,JAr,oTe,_E,rTe,YAr,KAr,CJ,ZAr,e6r,o6r,bE,Tje,Ac,vE,tTe,b9,r6r,aTe,t6r,Mje,cr,v9,a6r,yc,n6r,wJ,s6r,l6r,AJ,i6r,d6r,c6r,F9,f6r,nTe,m6r,g6r,h6r,Dt,T9,p6r,sTe,u6r,_6r,Lc,b6r,lTe,v6r,F6r,yJ,T6r,M6r,E6r,FE,C6r,Nr,M9,w6r,iTe,A6r,y6r,gn,L6r,dTe,x6r,$6r,cTe,k6r,S6r,fTe,R6r,P6r,B6r,mTe,TE,gTe,I6r,q6r,LJ,N6r,j6r,D6r,ME,Eje,xc,EE,hTe,E9,G6r,pTe,O6r,Cje,fr,C9,V6r,$c,X6r,xJ,z6r,W6r,$J,Q6r,H6r,U6r,w9,J6r,uTe,Y6r,K6r,Z6r,Gt,A9,eyr,_Te,oyr,ryr,kc,tyr,bTe,ayr,nyr,kJ,syr,lyr,iyr,CE,dyr,jr,y9,cyr,vTe,fyr,myr,hn,gyr,FTe,hyr,pyr,TTe,uyr,_yr,MTe,byr,vyr,Fyr,re,wE,ETe,Tyr,Myr,SJ,Eyr,Cyr,wyr,AE,CTe,Ayr,yyr,RJ,Lyr,xyr,$yr,yE,wTe,kyr,Syr,PJ,Ryr,Pyr,Byr,LE,ATe,Iyr,qyr,BJ,Nyr,jyr,Dyr,xE,yTe,Gyr,Oyr,IJ,Vyr,Xyr,zyr,$E,LTe,Wyr,Qyr,qJ,Hyr,Uyr,Jyr,kE,xTe,Yyr,Kyr,NJ,Zyr,eLr,oLr,SE,$Te,rLr,tLr,jJ,aLr,nLr,sLr,RE,kTe,lLr,iLr,DJ,dLr,cLr,fLr,PE,STe,mLr,gLr,GJ,hLr,pLr,uLr,BE,RTe,_Lr,bLr,OJ,vLr,FLr,TLr,IE,PTe,MLr,ELr,VJ,CLr,wLr,ALr,qE,BTe,yLr,LLr,XJ,xLr,$Lr,kLr,NE,ITe,SLr,RLr,zJ,PLr,BLr,ILr,jE,qTe,qLr,NLr,WJ,jLr,DLr,GLr,DE,NTe,OLr,VLr,QJ,XLr,zLr,WLr,GE,jTe,QLr,HLr,HJ,ULr,JLr,YLr,OE,DTe,KLr,ZLr,UJ,e9r,o9r,r9r,VE,GTe,t9r,a9r,JJ,n9r,s9r,l9r,XE,OTe,i9r,d9r,YJ,c9r,f9r,m9r,zE,VTe,g9r,h9r,KJ,p9r,u9r,_9r,WE,XTe,b9r,v9r,ZJ,F9r,T9r,M9r,QE,zTe,E9r,C9r,eY,w9r,A9r,y9r,HE,WTe,L9r,x9r,oY,$9r,k9r,S9r,UE,QTe,R9r,P9r,rY,B9r,I9r,q9r,JE,HTe,N9r,j9r,tY,D9r,G9r,O9r,YE,wje,Sc,KE,UTe,L9,V9r,JTe,X9r,Aje,mr,x9,z9r,Rc,W9r,aY,Q9r,H9r,nY,U9r,J9r,Y9r,$9,K9r,YTe,Z9r,exr,oxr,Ot,k9,rxr,KTe,txr,axr,Pc,nxr,ZTe,sxr,lxr,sY,ixr,dxr,cxr,ZE,fxr,Dr,S9,mxr,e7e,gxr,hxr,pn,pxr,o7e,uxr,_xr,r7e,bxr,vxr,t7e,Fxr,Txr,Mxr,Le,eC,a7e,Exr,Cxr,lY,wxr,Axr,yxr,oC,n7e,Lxr,xxr,iY,$xr,kxr,Sxr,rC,s7e,Rxr,Pxr,dY,Bxr,Ixr,qxr,tC,l7e,Nxr,jxr,cY,Dxr,Gxr,Oxr,aC,i7e,Vxr,Xxr,fY,zxr,Wxr,Qxr,nC,d7e,Hxr,Uxr,mY,Jxr,Yxr,Kxr,sC,c7e,Zxr,e$r,gY,o$r,r$r,t$r,lC,f7e,a$r,n$r,hY,s$r,l$r,i$r,iC,m7e,d$r,c$r,pY,f$r,m$r,g$r,dC,g7e,h$r,p$r,uY,u$r,_$r,b$r,cC,yje,Bc,fC,h7e,R9,v$r,p7e,F$r,Lje,gr,P9,T$r,Ic,M$r,_Y,E$r,C$r,bY,w$r,A$r,y$r,B9,L$r,u7e,x$r,$$r,k$r,Vt,I9,S$r,_7e,R$r,P$r,qc,B$r,b7e,I$r,q$r,vY,N$r,j$r,D$r,mC,G$r,Gr,q9,O$r,v7e,V$r,X$r,un,z$r,F7e,W$r,Q$r,T7e,H$r,U$r,M7e,J$r,Y$r,K$r,Ee,gC,E7e,Z$r,ekr,FY,okr,rkr,tkr,hC,C7e,akr,nkr,TY,skr,lkr,ikr,pC,w7e,dkr,ckr,MY,fkr,mkr,gkr,uC,A7e,hkr,pkr,EY,ukr,_kr,bkr,_C,y7e,vkr,Fkr,CY,Tkr,Mkr,Ekr,bC,L7e,Ckr,wkr,wY,Akr,ykr,Lkr,vC,x7e,xkr,$kr,AY,kkr,Skr,Rkr,FC,$7e,Pkr,Bkr,yY,Ikr,qkr,Nkr,TC,k7e,jkr,Dkr,LY,Gkr,Okr,Vkr,MC,S7e,Xkr,zkr,xY,Wkr,Qkr,Hkr,EC,R7e,Ukr,Jkr,$Y,Ykr,Kkr,Zkr,CC,P7e,eSr,oSr,kY,rSr,tSr,aSr,wC,xje,Nc,AC,B7e,N9,nSr,I7e,sSr,$je,hr,j9,lSr,jc,iSr,SY,dSr,cSr,RY,fSr,mSr,gSr,D9,hSr,q7e,pSr,uSr,_Sr,Xt,G9,bSr,N7e,vSr,FSr,Dc,TSr,j7e,MSr,ESr,PY,CSr,wSr,ASr,yC,ySr,Or,O9,LSr,D7e,xSr,$Sr,_n,kSr,G7e,SSr,RSr,O7e,PSr,BSr,V7e,ISr,qSr,NSr,xe,LC,X7e,jSr,DSr,BY,GSr,OSr,VSr,xC,z7e,XSr,zSr,IY,WSr,QSr,HSr,$C,W7e,USr,JSr,qY,YSr,KSr,ZSr,kC,Q7e,eRr,oRr,NY,rRr,tRr,aRr,SC,H7e,nRr,sRr,jY,lRr,iRr,dRr,RC,U7e,cRr,fRr,DY,mRr,gRr,hRr,PC,J7e,pRr,uRr,GY,_Rr,bRr,vRr,BC,Y7e,FRr,TRr,OY,MRr,ERr,CRr,IC,K7e,wRr,ARr,VY,yRr,LRr,xRr,qC,Z7e,$Rr,kRr,XY,SRr,RRr,PRr,NC,kje,Gc,jC,eMe,V9,BRr,oMe,IRr,Sje,pr,X9,qRr,Oc,NRr,zY,jRr,DRr,WY,GRr,ORr,VRr,z9,XRr,rMe,zRr,WRr,QRr,zt,W9,HRr,tMe,URr,JRr,Vc,YRr,aMe,KRr,ZRr,QY,ePr,oPr,rPr,DC,tPr,Vr,Q9,aPr,nMe,nPr,sPr,bn,lPr,sMe,iPr,dPr,lMe,cPr,fPr,iMe,mPr,gPr,hPr,Pe,GC,dMe,pPr,uPr,HY,_Pr,bPr,vPr,OC,cMe,FPr,TPr,UY,MPr,EPr,CPr,VC,fMe,wPr,APr,JY,yPr,LPr,xPr,XC,mMe,$Pr,kPr,YY,SPr,RPr,PPr,zC,gMe,BPr,IPr,KY,qPr,NPr,jPr,WC,hMe,DPr,GPr,ZY,OPr,VPr,XPr,QC,pMe,zPr,WPr,eK,QPr,HPr,UPr,HC,uMe,JPr,YPr,oK,KPr,ZPr,eBr,UC,_Me,oBr,rBr,rK,tBr,aBr,nBr,JC,Rje,Xc,YC,bMe,H9,sBr,vMe,lBr,Pje,ur,U9,iBr,zc,dBr,tK,cBr,fBr,aK,mBr,gBr,hBr,J9,pBr,FMe,uBr,_Br,bBr,Wt,Y9,vBr,TMe,FBr,TBr,Wc,MBr,MMe,EBr,CBr,nK,wBr,ABr,yBr,KC,LBr,Xr,K9,xBr,EMe,$Br,kBr,vn,SBr,CMe,RBr,PBr,wMe,BBr,IBr,AMe,qBr,NBr,jBr,$e,ZC,yMe,DBr,GBr,sK,OBr,VBr,XBr,e5,LMe,zBr,WBr,lK,QBr,HBr,UBr,o5,xMe,JBr,YBr,iK,KBr,ZBr,eIr,r5,$Me,oIr,rIr,dK,tIr,aIr,nIr,t5,kMe,sIr,lIr,cK,iIr,dIr,cIr,a5,SMe,fIr,mIr,fK,gIr,hIr,pIr,n5,RMe,uIr,_Ir,mK,bIr,vIr,FIr,s5,PMe,TIr,MIr,gK,EIr,CIr,wIr,l5,BMe,AIr,yIr,hK,LIr,xIr,$Ir,i5,IMe,kIr,SIr,pK,RIr,PIr,BIr,d5,Bje,Qc,c5,qMe,Z9,IIr,NMe,qIr,Ije,_r,ex,NIr,Hc,jIr,uK,DIr,GIr,_K,OIr,VIr,XIr,ox,zIr,jMe,WIr,QIr,HIr,Qt,rx,UIr,DMe,JIr,YIr,Uc,KIr,GMe,ZIr,eqr,bK,oqr,rqr,tqr,f5,aqr,zr,tx,nqr,OMe,sqr,lqr,Fn,iqr,VMe,dqr,cqr,XMe,fqr,mqr,zMe,gqr,hqr,pqr,ke,m5,WMe,uqr,_qr,vK,bqr,vqr,Fqr,g5,QMe,Tqr,Mqr,FK,Eqr,Cqr,wqr,h5,HMe,Aqr,yqr,TK,Lqr,xqr,$qr,p5,UMe,kqr,Sqr,MK,Rqr,Pqr,Bqr,u5,JMe,Iqr,qqr,EK,Nqr,jqr,Dqr,_5,YMe,Gqr,Oqr,CK,Vqr,Xqr,zqr,b5,KMe,Wqr,Qqr,wK,Hqr,Uqr,Jqr,v5,ZMe,Yqr,Kqr,AK,Zqr,eNr,oNr,F5,e4e,rNr,tNr,yK,aNr,nNr,sNr,T5,o4e,lNr,iNr,LK,dNr,cNr,fNr,M5,qje,Jc,E5,r4e,ax,mNr,t4e,gNr,Nje,br,nx,hNr,Yc,pNr,xK,uNr,_Nr,$K,bNr,vNr,FNr,sx,TNr,a4e,MNr,ENr,CNr,Ht,lx,wNr,n4e,ANr,yNr,Kc,LNr,s4e,xNr,$Nr,kK,kNr,SNr,RNr,C5,PNr,Wr,ix,BNr,l4e,INr,qNr,Tn,NNr,i4e,jNr,DNr,d4e,GNr,ONr,c4e,VNr,XNr,zNr,Ge,w5,f4e,WNr,QNr,SK,HNr,UNr,JNr,A5,m4e,YNr,KNr,RK,ZNr,ejr,ojr,y5,g4e,rjr,tjr,PK,ajr,njr,sjr,L5,h4e,ljr,ijr,BK,djr,cjr,fjr,x5,p4e,mjr,gjr,IK,hjr,pjr,ujr,$5,u4e,_jr,bjr,qK,vjr,Fjr,Tjr,k5,_4e,Mjr,Ejr,NK,Cjr,wjr,Ajr,S5,b4e,yjr,Ljr,jK,xjr,$jr,kjr,R5,jje,Zc,P5,v4e,dx,Sjr,F4e,Rjr,Dje,vr,cx,Pjr,ef,Bjr,DK,Ijr,qjr,GK,Njr,jjr,Djr,fx,Gjr,T4e,Ojr,Vjr,Xjr,Ut,mx,zjr,M4e,Wjr,Qjr,of,Hjr,E4e,Ujr,Jjr,OK,Yjr,Kjr,Zjr,B5,eDr,Qr,gx,oDr,C4e,rDr,tDr,Mn,aDr,w4e,nDr,sDr,A4e,lDr,iDr,y4e,dDr,cDr,fDr,Oe,I5,L4e,mDr,gDr,VK,hDr,pDr,uDr,q5,x4e,_Dr,bDr,XK,vDr,FDr,TDr,N5,$4e,MDr,EDr,zK,CDr,wDr,ADr,j5,k4e,yDr,LDr,WK,xDr,$Dr,kDr,D5,S4e,SDr,RDr,QK,PDr,BDr,IDr,G5,R4e,qDr,NDr,HK,jDr,DDr,GDr,O5,P4e,ODr,VDr,UK,XDr,zDr,WDr,V5,B4e,QDr,HDr,JK,UDr,JDr,YDr,X5,Gje,rf,z5,I4e,hx,KDr,q4e,ZDr,Oje,Fr,px,eGr,tf,oGr,YK,rGr,tGr,KK,aGr,nGr,sGr,ux,lGr,N4e,iGr,dGr,cGr,Jt,_x,fGr,j4e,mGr,gGr,af,hGr,D4e,pGr,uGr,ZK,_Gr,bGr,vGr,W5,FGr,Hr,bx,TGr,G4e,MGr,EGr,En,CGr,O4e,wGr,AGr,V4e,yGr,LGr,X4e,xGr,$Gr,kGr,z4e,Q5,W4e,SGr,RGr,eZ,PGr,BGr,IGr,H5,Vje,nf,U5,Q4e,vx,qGr,H4e,NGr,Xje,Tr,Fx,jGr,sf,DGr,oZ,GGr,OGr,rZ,VGr,XGr,zGr,Tx,WGr,U4e,QGr,HGr,UGr,Yt,Mx,JGr,J4e,YGr,KGr,lf,ZGr,Y4e,eOr,oOr,tZ,rOr,tOr,aOr,J5,nOr,Ur,Ex,sOr,K4e,lOr,iOr,Cn,dOr,Z4e,cOr,fOr,eEe,mOr,gOr,oEe,hOr,pOr,uOr,Cx,Y5,rEe,_Or,bOr,aZ,vOr,FOr,TOr,K5,tEe,MOr,EOr,nZ,COr,wOr,AOr,Z5,zje,df,ew,aEe,wx,yOr,nEe,LOr,Wje,Mr,Ax,xOr,cf,$Or,sZ,kOr,SOr,lZ,ROr,POr,BOr,yx,IOr,sEe,qOr,NOr,jOr,Kt,Lx,DOr,lEe,GOr,OOr,ff,VOr,iEe,XOr,zOr,iZ,WOr,QOr,HOr,ow,UOr,Jr,xx,JOr,dEe,YOr,KOr,wn,ZOr,cEe,eVr,oVr,fEe,rVr,tVr,mEe,aVr,nVr,sVr,gEe,rw,hEe,lVr,iVr,dZ,dVr,cVr,fVr,tw,Qje;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),wA=new te({}),AA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new mVr({props:{warning:!0,$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),yA=new te({}),LA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L581"}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),SA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L727"}}),RA=new te({}),PA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L389"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17388/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),NA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L599"}}),jA=new te({}),DA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17388/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new mVr({props:{$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),XA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),zA=new te({}),WA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L88"}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L102"}}),ep=new mVr({props:{$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L255"}}),YA=new te({}),KA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L733"}}),e6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),ap=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),o6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),r6=new te({}),t6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L740"}}),n6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),l6=new te({}),i6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L755"}}),c6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),f6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),m6=new te({}),g6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L762"}}),p6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),_6=new te({}),b6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L769"}}),F6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),M6=new te({}),E6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L778"}}),w6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),y6=new te({}),L6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L812"}}),$6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Pb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),f2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),S6=new te({}),R6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L819"}}),B6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),g2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),q6=new te({}),N6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L805"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),O6=new te({}),V6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L787"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),Q6=new te({}),H6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L794"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),K6=new te({}),Z6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L828"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L867"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L874"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L897"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L881"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L888"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L906"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L913"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L860"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L835"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L842"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L851"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),sL=new te({}),lL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),fL=new te({}),mL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),uL=new te({}),_L=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),x7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),TL=new te({}),ML=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),k7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),AL=new te({}),yL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),kL=new te({}),SL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),IL=new te({}),qL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),GL=new te({}),OL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),WL=new te({}),QL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),g9=new te({}),h9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),E9=new te({}),C9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),A9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),L9=new te({}),x9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),k9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R9=new te({}),P9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),I9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),N9=new te({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),TA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),MA=o("AutoConfig"),Ln=o(", "),xn=a("a"),EA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),CA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),V$=o("will create a model that is an instance of "),_i=a("a"),X$=o("BertModel"),z$=o("."),Eo=l(),wa=a("p"),W$=o("There is one class of "),bf=a("code"),Q$=o("AutoModel"),oOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xqe=l(),bi=a("h2"),vf=a("a"),roe=a("span"),F(wA.$$.fragment),rOe=l(),toe=a("span"),tOe=o("Extending the Auto Classes"),zqe=l(),kn=a("p"),aOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aoe=a("code"),nOe=o("NewModel"),sOe=o(", make sure you have a "),noe=a("code"),lOe=o("NewModelConfig"),iOe=o(` then you can add those to the auto
classes like this:`),Wqe=l(),F(AA.$$.fragment),Qqe=l(),H$=a("p"),dOe=o("You will then be able to use the auto classes like you would usually do!"),Hqe=l(),F(Ff.$$.fragment),Uqe=l(),vi=a("h2"),Tf=a("a"),soe=a("span"),F(yA.$$.fragment),cOe=l(),loe=a("span"),fOe=o("AutoConfig"),Jqe=l(),Co=a("div"),F(LA.$$.fragment),mOe=l(),xA=a("p"),gOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U$=a("a"),hOe=o("from_pretrained()"),pOe=o(" class method."),uOe=l(),$A=a("p"),_Oe=o("This class cannot be instantiated directly using "),ioe=a("code"),bOe=o("__init__()"),vOe=o(" (throws an error)."),FOe=l(),Er=a("div"),F(kA.$$.fragment),TOe=l(),doe=a("p"),MOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),EOe=l(),Fi=a("p"),COe=o("The configuration class to instantiate is selected based on the "),coe=a("code"),wOe=o("model_type"),AOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),foe=a("code"),yOe=o("pretrained_model_name_or_path"),LOe=o(":"),xOe=l(),A=a("ul"),Mf=a("li"),moe=a("strong"),$Oe=o("albert"),kOe=o(" \u2014 "),J$=a("a"),SOe=o("AlbertConfig"),ROe=o(" (ALBERT model)"),POe=l(),Ef=a("li"),goe=a("strong"),BOe=o("bart"),IOe=o(" \u2014 "),Y$=a("a"),qOe=o("BartConfig"),NOe=o(" (BART model)"),jOe=l(),Cf=a("li"),hoe=a("strong"),DOe=o("beit"),GOe=o(" \u2014 "),K$=a("a"),OOe=o("BeitConfig"),VOe=o(" (BEiT model)"),XOe=l(),wf=a("li"),poe=a("strong"),zOe=o("bert"),WOe=o(" \u2014 "),Z$=a("a"),QOe=o("BertConfig"),HOe=o(" (BERT model)"),UOe=l(),Af=a("li"),uoe=a("strong"),JOe=o("bert-generation"),YOe=o(" \u2014 "),ek=a("a"),KOe=o("BertGenerationConfig"),ZOe=o(" (Bert Generation model)"),eVe=l(),yf=a("li"),_oe=a("strong"),oVe=o("big_bird"),rVe=o(" \u2014 "),ok=a("a"),tVe=o("BigBirdConfig"),aVe=o(" (BigBird model)"),nVe=l(),Lf=a("li"),boe=a("strong"),sVe=o("bigbird_pegasus"),lVe=o(" \u2014 "),rk=a("a"),iVe=o("BigBirdPegasusConfig"),dVe=o(" (BigBirdPegasus model)"),cVe=l(),xf=a("li"),voe=a("strong"),fVe=o("blenderbot"),mVe=o(" \u2014 "),tk=a("a"),gVe=o("BlenderbotConfig"),hVe=o(" (Blenderbot model)"),pVe=l(),$f=a("li"),Foe=a("strong"),uVe=o("blenderbot-small"),_Ve=o(" \u2014 "),ak=a("a"),bVe=o("BlenderbotSmallConfig"),vVe=o(" (BlenderbotSmall model)"),FVe=l(),kf=a("li"),Toe=a("strong"),TVe=o("camembert"),MVe=o(" \u2014 "),nk=a("a"),EVe=o("CamembertConfig"),CVe=o(" (CamemBERT model)"),wVe=l(),Sf=a("li"),Moe=a("strong"),AVe=o("canine"),yVe=o(" \u2014 "),sk=a("a"),LVe=o("CanineConfig"),xVe=o(" (Canine model)"),$Ve=l(),Rf=a("li"),Eoe=a("strong"),kVe=o("clip"),SVe=o(" \u2014 "),lk=a("a"),RVe=o("CLIPConfig"),PVe=o(" (CLIP model)"),BVe=l(),Pf=a("li"),Coe=a("strong"),IVe=o("convbert"),qVe=o(" \u2014 "),ik=a("a"),NVe=o("ConvBertConfig"),jVe=o(" (ConvBERT model)"),DVe=l(),Bf=a("li"),woe=a("strong"),GVe=o("convnext"),OVe=o(" \u2014 "),dk=a("a"),VVe=o("ConvNextConfig"),XVe=o(" (ConvNext model)"),zVe=l(),If=a("li"),Aoe=a("strong"),WVe=o("ctrl"),QVe=o(" \u2014 "),ck=a("a"),HVe=o("CTRLConfig"),UVe=o(" (CTRL model)"),JVe=l(),qf=a("li"),yoe=a("strong"),YVe=o("cvt"),KVe=o(" \u2014 "),fk=a("a"),ZVe=o("CvtConfig"),eXe=o(" (CvT model)"),oXe=l(),Nf=a("li"),Loe=a("strong"),rXe=o("data2vec-audio"),tXe=o(" \u2014 "),mk=a("a"),aXe=o("Data2VecAudioConfig"),nXe=o(" (Data2VecAudio model)"),sXe=l(),jf=a("li"),xoe=a("strong"),lXe=o("data2vec-text"),iXe=o(" \u2014 "),gk=a("a"),dXe=o("Data2VecTextConfig"),cXe=o(" (Data2VecText model)"),fXe=l(),Df=a("li"),$oe=a("strong"),mXe=o("data2vec-vision"),gXe=o(" \u2014 "),hk=a("a"),hXe=o("Data2VecVisionConfig"),pXe=o(" (Data2VecVision model)"),uXe=l(),Gf=a("li"),koe=a("strong"),_Xe=o("deberta"),bXe=o(" \u2014 "),pk=a("a"),vXe=o("DebertaConfig"),FXe=o(" (DeBERTa model)"),TXe=l(),Of=a("li"),Soe=a("strong"),MXe=o("deberta-v2"),EXe=o(" \u2014 "),uk=a("a"),CXe=o("DebertaV2Config"),wXe=o(" (DeBERTa-v2 model)"),AXe=l(),Vf=a("li"),Roe=a("strong"),yXe=o("decision_transformer"),LXe=o(" \u2014 "),_k=a("a"),xXe=o("DecisionTransformerConfig"),$Xe=o(" (Decision Transformer model)"),kXe=l(),Xf=a("li"),Poe=a("strong"),SXe=o("deit"),RXe=o(" \u2014 "),bk=a("a"),PXe=o("DeiTConfig"),BXe=o(" (DeiT model)"),IXe=l(),zf=a("li"),Boe=a("strong"),qXe=o("detr"),NXe=o(" \u2014 "),vk=a("a"),jXe=o("DetrConfig"),DXe=o(" (DETR model)"),GXe=l(),Wf=a("li"),Ioe=a("strong"),OXe=o("distilbert"),VXe=o(" \u2014 "),Fk=a("a"),XXe=o("DistilBertConfig"),zXe=o(" (DistilBERT model)"),WXe=l(),Qf=a("li"),qoe=a("strong"),QXe=o("dpr"),HXe=o(" \u2014 "),Tk=a("a"),UXe=o("DPRConfig"),JXe=o(" (DPR model)"),YXe=l(),Hf=a("li"),Noe=a("strong"),KXe=o("dpt"),ZXe=o(" \u2014 "),Mk=a("a"),eze=o("DPTConfig"),oze=o(" (DPT model)"),rze=l(),Uf=a("li"),joe=a("strong"),tze=o("electra"),aze=o(" \u2014 "),Ek=a("a"),nze=o("ElectraConfig"),sze=o(" (ELECTRA model)"),lze=l(),Jf=a("li"),Doe=a("strong"),ize=o("encoder-decoder"),dze=o(" \u2014 "),Ck=a("a"),cze=o("EncoderDecoderConfig"),fze=o(" (Encoder decoder model)"),mze=l(),Yf=a("li"),Goe=a("strong"),gze=o("flaubert"),hze=o(" \u2014 "),wk=a("a"),pze=o("FlaubertConfig"),uze=o(" (FlauBERT model)"),_ze=l(),Kf=a("li"),Ooe=a("strong"),bze=o("flava"),vze=o(" \u2014 "),Ak=a("a"),Fze=o("FlavaConfig"),Tze=o(" (Flava model)"),Mze=l(),Zf=a("li"),Voe=a("strong"),Eze=o("fnet"),Cze=o(" \u2014 "),yk=a("a"),wze=o("FNetConfig"),Aze=o(" (FNet model)"),yze=l(),em=a("li"),Xoe=a("strong"),Lze=o("fsmt"),xze=o(" \u2014 "),Lk=a("a"),$ze=o("FSMTConfig"),kze=o(" (FairSeq Machine-Translation model)"),Sze=l(),om=a("li"),zoe=a("strong"),Rze=o("funnel"),Pze=o(" \u2014 "),xk=a("a"),Bze=o("FunnelConfig"),Ize=o(" (Funnel Transformer model)"),qze=l(),rm=a("li"),Woe=a("strong"),Nze=o("glpn"),jze=o(" \u2014 "),$k=a("a"),Dze=o("GLPNConfig"),Gze=o(" (GLPN model)"),Oze=l(),tm=a("li"),Qoe=a("strong"),Vze=o("gpt2"),Xze=o(" \u2014 "),kk=a("a"),zze=o("GPT2Config"),Wze=o(" (OpenAI GPT-2 model)"),Qze=l(),am=a("li"),Hoe=a("strong"),Hze=o("gpt_neo"),Uze=o(" \u2014 "),Sk=a("a"),Jze=o("GPTNeoConfig"),Yze=o(" (GPT Neo model)"),Kze=l(),nm=a("li"),Uoe=a("strong"),Zze=o("gptj"),eWe=o(" \u2014 "),Rk=a("a"),oWe=o("GPTJConfig"),rWe=o(" (GPT-J model)"),tWe=l(),sm=a("li"),Joe=a("strong"),aWe=o("hubert"),nWe=o(" \u2014 "),Pk=a("a"),sWe=o("HubertConfig"),lWe=o(" (Hubert model)"),iWe=l(),lm=a("li"),Yoe=a("strong"),dWe=o("ibert"),cWe=o(" \u2014 "),Bk=a("a"),fWe=o("IBertConfig"),mWe=o(" (I-BERT model)"),gWe=l(),im=a("li"),Koe=a("strong"),hWe=o("imagegpt"),pWe=o(" \u2014 "),Ik=a("a"),uWe=o("ImageGPTConfig"),_We=o(" (ImageGPT model)"),bWe=l(),dm=a("li"),Zoe=a("strong"),vWe=o("layoutlm"),FWe=o(" \u2014 "),qk=a("a"),TWe=o("LayoutLMConfig"),MWe=o(" (LayoutLM model)"),EWe=l(),cm=a("li"),ere=a("strong"),CWe=o("layoutlmv2"),wWe=o(" \u2014 "),Nk=a("a"),AWe=o("LayoutLMv2Config"),yWe=o(" (LayoutLMv2 model)"),LWe=l(),fm=a("li"),ore=a("strong"),xWe=o("layoutlmv3"),$We=o(" \u2014 "),jk=a("a"),kWe=o("LayoutLMv3Config"),SWe=o(" (LayoutLMv3 model)"),RWe=l(),mm=a("li"),rre=a("strong"),PWe=o("led"),BWe=o(" \u2014 "),Dk=a("a"),IWe=o("LEDConfig"),qWe=o(" (LED model)"),NWe=l(),gm=a("li"),tre=a("strong"),jWe=o("longformer"),DWe=o(" \u2014 "),Gk=a("a"),GWe=o("LongformerConfig"),OWe=o(" (Longformer model)"),VWe=l(),hm=a("li"),are=a("strong"),XWe=o("luke"),zWe=o(" \u2014 "),Ok=a("a"),WWe=o("LukeConfig"),QWe=o(" (LUKE model)"),HWe=l(),pm=a("li"),nre=a("strong"),UWe=o("lxmert"),JWe=o(" \u2014 "),Vk=a("a"),YWe=o("LxmertConfig"),KWe=o(" (LXMERT model)"),ZWe=l(),um=a("li"),sre=a("strong"),eQe=o("m2m_100"),oQe=o(" \u2014 "),Xk=a("a"),rQe=o("M2M100Config"),tQe=o(" (M2M100 model)"),aQe=l(),_m=a("li"),lre=a("strong"),nQe=o("marian"),sQe=o(" \u2014 "),zk=a("a"),lQe=o("MarianConfig"),iQe=o(" (Marian model)"),dQe=l(),bm=a("li"),ire=a("strong"),cQe=o("maskformer"),fQe=o(" \u2014 "),Wk=a("a"),mQe=o("MaskFormerConfig"),gQe=o(" (MaskFormer model)"),hQe=l(),vm=a("li"),dre=a("strong"),pQe=o("mbart"),uQe=o(" \u2014 "),Qk=a("a"),_Qe=o("MBartConfig"),bQe=o(" (mBART model)"),vQe=l(),Fm=a("li"),cre=a("strong"),FQe=o("megatron-bert"),TQe=o(" \u2014 "),Hk=a("a"),MQe=o("MegatronBertConfig"),EQe=o(" (MegatronBert model)"),CQe=l(),Tm=a("li"),fre=a("strong"),wQe=o("mobilebert"),AQe=o(" \u2014 "),Uk=a("a"),yQe=o("MobileBertConfig"),LQe=o(" (MobileBERT model)"),xQe=l(),Mm=a("li"),mre=a("strong"),$Qe=o("mpnet"),kQe=o(" \u2014 "),Jk=a("a"),SQe=o("MPNetConfig"),RQe=o(" (MPNet model)"),PQe=l(),Em=a("li"),gre=a("strong"),BQe=o("mt5"),IQe=o(" \u2014 "),Yk=a("a"),qQe=o("MT5Config"),NQe=o(" (mT5 model)"),jQe=l(),Cm=a("li"),hre=a("strong"),DQe=o("nystromformer"),GQe=o(" \u2014 "),Kk=a("a"),OQe=o("NystromformerConfig"),VQe=o(" (Nystromformer model)"),XQe=l(),wm=a("li"),pre=a("strong"),zQe=o("openai-gpt"),WQe=o(" \u2014 "),Zk=a("a"),QQe=o("OpenAIGPTConfig"),HQe=o(" (OpenAI GPT model)"),UQe=l(),Am=a("li"),ure=a("strong"),JQe=o("opt"),YQe=o(" \u2014 "),eS=a("a"),KQe=o("OPTConfig"),ZQe=o(" (OPT model)"),eHe=l(),ym=a("li"),_re=a("strong"),oHe=o("pegasus"),rHe=o(" \u2014 "),oS=a("a"),tHe=o("PegasusConfig"),aHe=o(" (Pegasus model)"),nHe=l(),Lm=a("li"),bre=a("strong"),sHe=o("perceiver"),lHe=o(" \u2014 "),rS=a("a"),iHe=o("PerceiverConfig"),dHe=o(" (Perceiver model)"),cHe=l(),xm=a("li"),vre=a("strong"),fHe=o("plbart"),mHe=o(" \u2014 "),tS=a("a"),gHe=o("PLBartConfig"),hHe=o(" (PLBart model)"),pHe=l(),$m=a("li"),Fre=a("strong"),uHe=o("poolformer"),_He=o(" \u2014 "),aS=a("a"),bHe=o("PoolFormerConfig"),vHe=o(" (PoolFormer model)"),FHe=l(),km=a("li"),Tre=a("strong"),THe=o("prophetnet"),MHe=o(" \u2014 "),nS=a("a"),EHe=o("ProphetNetConfig"),CHe=o(" (ProphetNet model)"),wHe=l(),Sm=a("li"),Mre=a("strong"),AHe=o("qdqbert"),yHe=o(" \u2014 "),sS=a("a"),LHe=o("QDQBertConfig"),xHe=o(" (QDQBert model)"),$He=l(),Rm=a("li"),Ere=a("strong"),kHe=o("rag"),SHe=o(" \u2014 "),lS=a("a"),RHe=o("RagConfig"),PHe=o(" (RAG model)"),BHe=l(),Pm=a("li"),Cre=a("strong"),IHe=o("realm"),qHe=o(" \u2014 "),iS=a("a"),NHe=o("RealmConfig"),jHe=o(" (Realm model)"),DHe=l(),Bm=a("li"),wre=a("strong"),GHe=o("reformer"),OHe=o(" \u2014 "),dS=a("a"),VHe=o("ReformerConfig"),XHe=o(" (Reformer model)"),zHe=l(),Im=a("li"),Are=a("strong"),WHe=o("regnet"),QHe=o(" \u2014 "),cS=a("a"),HHe=o("RegNetConfig"),UHe=o(" (RegNet model)"),JHe=l(),qm=a("li"),yre=a("strong"),YHe=o("rembert"),KHe=o(" \u2014 "),fS=a("a"),ZHe=o("RemBertConfig"),eUe=o(" (RemBERT model)"),oUe=l(),Nm=a("li"),Lre=a("strong"),rUe=o("resnet"),tUe=o(" \u2014 "),mS=a("a"),aUe=o("ResNetConfig"),nUe=o(" (ResNet model)"),sUe=l(),jm=a("li"),xre=a("strong"),lUe=o("retribert"),iUe=o(" \u2014 "),gS=a("a"),dUe=o("RetriBertConfig"),cUe=o(" (RetriBERT model)"),fUe=l(),Dm=a("li"),$re=a("strong"),mUe=o("roberta"),gUe=o(" \u2014 "),hS=a("a"),hUe=o("RobertaConfig"),pUe=o(" (RoBERTa model)"),uUe=l(),Gm=a("li"),kre=a("strong"),_Ue=o("roformer"),bUe=o(" \u2014 "),pS=a("a"),vUe=o("RoFormerConfig"),FUe=o(" (RoFormer model)"),TUe=l(),Om=a("li"),Sre=a("strong"),MUe=o("segformer"),EUe=o(" \u2014 "),uS=a("a"),CUe=o("SegformerConfig"),wUe=o(" (SegFormer model)"),AUe=l(),Vm=a("li"),Rre=a("strong"),yUe=o("sew"),LUe=o(" \u2014 "),_S=a("a"),xUe=o("SEWConfig"),$Ue=o(" (SEW model)"),kUe=l(),Xm=a("li"),Pre=a("strong"),SUe=o("sew-d"),RUe=o(" \u2014 "),bS=a("a"),PUe=o("SEWDConfig"),BUe=o(" (SEW-D model)"),IUe=l(),zm=a("li"),Bre=a("strong"),qUe=o("speech-encoder-decoder"),NUe=o(" \u2014 "),vS=a("a"),jUe=o("SpeechEncoderDecoderConfig"),DUe=o(" (Speech Encoder decoder model)"),GUe=l(),Wm=a("li"),Ire=a("strong"),OUe=o("speech_to_text"),VUe=o(" \u2014 "),FS=a("a"),XUe=o("Speech2TextConfig"),zUe=o(" (Speech2Text model)"),WUe=l(),Qm=a("li"),qre=a("strong"),QUe=o("speech_to_text_2"),HUe=o(" \u2014 "),TS=a("a"),UUe=o("Speech2Text2Config"),JUe=o(" (Speech2Text2 model)"),YUe=l(),Hm=a("li"),Nre=a("strong"),KUe=o("splinter"),ZUe=o(" \u2014 "),MS=a("a"),eJe=o("SplinterConfig"),oJe=o(" (Splinter model)"),rJe=l(),Um=a("li"),jre=a("strong"),tJe=o("squeezebert"),aJe=o(" \u2014 "),ES=a("a"),nJe=o("SqueezeBertConfig"),sJe=o(" (SqueezeBERT model)"),lJe=l(),Jm=a("li"),Dre=a("strong"),iJe=o("swin"),dJe=o(" \u2014 "),CS=a("a"),cJe=o("SwinConfig"),fJe=o(" (Swin model)"),mJe=l(),Ym=a("li"),Gre=a("strong"),gJe=o("t5"),hJe=o(" \u2014 "),wS=a("a"),pJe=o("T5Config"),uJe=o(" (T5 model)"),_Je=l(),Km=a("li"),Ore=a("strong"),bJe=o("tapas"),vJe=o(" \u2014 "),AS=a("a"),FJe=o("TapasConfig"),TJe=o(" (TAPAS model)"),MJe=l(),Zm=a("li"),Vre=a("strong"),EJe=o("trajectory_transformer"),CJe=o(" \u2014 "),yS=a("a"),wJe=o("TrajectoryTransformerConfig"),AJe=o(" (Trajectory Transformer model)"),yJe=l(),eg=a("li"),Xre=a("strong"),LJe=o("transfo-xl"),xJe=o(" \u2014 "),LS=a("a"),$Je=o("TransfoXLConfig"),kJe=o(" (Transformer-XL model)"),SJe=l(),og=a("li"),zre=a("strong"),RJe=o("trocr"),PJe=o(" \u2014 "),xS=a("a"),BJe=o("TrOCRConfig"),IJe=o(" (TrOCR model)"),qJe=l(),rg=a("li"),Wre=a("strong"),NJe=o("unispeech"),jJe=o(" \u2014 "),$S=a("a"),DJe=o("UniSpeechConfig"),GJe=o(" (UniSpeech model)"),OJe=l(),tg=a("li"),Qre=a("strong"),VJe=o("unispeech-sat"),XJe=o(" \u2014 "),kS=a("a"),zJe=o("UniSpeechSatConfig"),WJe=o(" (UniSpeechSat model)"),QJe=l(),ag=a("li"),Hre=a("strong"),HJe=o("van"),UJe=o(" \u2014 "),SS=a("a"),JJe=o("VanConfig"),YJe=o(" (VAN model)"),KJe=l(),ng=a("li"),Ure=a("strong"),ZJe=o("vilt"),eYe=o(" \u2014 "),RS=a("a"),oYe=o("ViltConfig"),rYe=o(" (ViLT model)"),tYe=l(),sg=a("li"),Jre=a("strong"),aYe=o("vision-encoder-decoder"),nYe=o(" \u2014 "),PS=a("a"),sYe=o("VisionEncoderDecoderConfig"),lYe=o(" (Vision Encoder decoder model)"),iYe=l(),lg=a("li"),Yre=a("strong"),dYe=o("vision-text-dual-encoder"),cYe=o(" \u2014 "),BS=a("a"),fYe=o("VisionTextDualEncoderConfig"),mYe=o(" (VisionTextDualEncoder model)"),gYe=l(),ig=a("li"),Kre=a("strong"),hYe=o("visual_bert"),pYe=o(" \u2014 "),IS=a("a"),uYe=o("VisualBertConfig"),_Ye=o(" (VisualBert model)"),bYe=l(),dg=a("li"),Zre=a("strong"),vYe=o("vit"),FYe=o(" \u2014 "),qS=a("a"),TYe=o("ViTConfig"),MYe=o(" (ViT model)"),EYe=l(),cg=a("li"),ete=a("strong"),CYe=o("vit_mae"),wYe=o(" \u2014 "),NS=a("a"),AYe=o("ViTMAEConfig"),yYe=o(" (ViTMAE model)"),LYe=l(),fg=a("li"),ote=a("strong"),xYe=o("wav2vec2"),$Ye=o(" \u2014 "),jS=a("a"),kYe=o("Wav2Vec2Config"),SYe=o(" (Wav2Vec2 model)"),RYe=l(),mg=a("li"),rte=a("strong"),PYe=o("wav2vec2-conformer"),BYe=o(" \u2014 "),DS=a("a"),IYe=o("Wav2Vec2ConformerConfig"),qYe=o(" (Wav2Vec2-Conformer model)"),NYe=l(),gg=a("li"),tte=a("strong"),jYe=o("wavlm"),DYe=o(" \u2014 "),GS=a("a"),GYe=o("WavLMConfig"),OYe=o(" (WavLM model)"),VYe=l(),hg=a("li"),ate=a("strong"),XYe=o("xglm"),zYe=o(" \u2014 "),OS=a("a"),WYe=o("XGLMConfig"),QYe=o(" (XGLM model)"),HYe=l(),pg=a("li"),nte=a("strong"),UYe=o("xlm"),JYe=o(" \u2014 "),VS=a("a"),YYe=o("XLMConfig"),KYe=o(" (XLM model)"),ZYe=l(),ug=a("li"),ste=a("strong"),eKe=o("xlm-prophetnet"),oKe=o(" \u2014 "),XS=a("a"),rKe=o("XLMProphetNetConfig"),tKe=o(" (XLMProphetNet model)"),aKe=l(),_g=a("li"),lte=a("strong"),nKe=o("xlm-roberta"),sKe=o(" \u2014 "),zS=a("a"),lKe=o("XLMRobertaConfig"),iKe=o(" (XLM-RoBERTa model)"),dKe=l(),bg=a("li"),ite=a("strong"),cKe=o("xlm-roberta-xl"),fKe=o(" \u2014 "),WS=a("a"),mKe=o("XLMRobertaXLConfig"),gKe=o(" (XLM-RoBERTa-XL model)"),hKe=l(),vg=a("li"),dte=a("strong"),pKe=o("xlnet"),uKe=o(" \u2014 "),QS=a("a"),_Ke=o("XLNetConfig"),bKe=o(" (XLNet model)"),vKe=l(),Fg=a("li"),cte=a("strong"),FKe=o("yolos"),TKe=o(" \u2014 "),HS=a("a"),MKe=o("YolosConfig"),EKe=o(" (YOLOS model)"),CKe=l(),Tg=a("li"),fte=a("strong"),wKe=o("yoso"),AKe=o(" \u2014 "),US=a("a"),yKe=o("YosoConfig"),LKe=o(" (YOSO model)"),xKe=l(),F(Mg.$$.fragment),$Ke=l(),Eg=a("div"),F(SA.$$.fragment),kKe=l(),mte=a("p"),SKe=o("Register a new configuration for this class."),Yqe=l(),Ti=a("h2"),Cg=a("a"),gte=a("span"),F(RA.$$.fragment),RKe=l(),hte=a("span"),PKe=o("AutoTokenizer"),Kqe=l(),wo=a("div"),F(PA.$$.fragment),BKe=l(),BA=a("p"),IKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JS=a("a"),qKe=o("AutoTokenizer.from_pretrained()"),NKe=o(" class method."),jKe=l(),IA=a("p"),DKe=o("This class cannot be instantiated directly using "),pte=a("code"),GKe=o("__init__()"),OKe=o(" (throws an error)."),VKe=l(),Cr=a("div"),F(qA.$$.fragment),XKe=l(),ute=a("p"),zKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WKe=l(),Aa=a("p"),QKe=o("The tokenizer class to instantiate is selected based on the "),_te=a("code"),HKe=o("model_type"),UKe=o(` property of the config object (either
passed as an argument or loaded from `),bte=a("code"),JKe=o("pretrained_model_name_or_path"),YKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vte=a("code"),KKe=o("pretrained_model_name_or_path"),ZKe=o(":"),eZe=l(),k=a("ul"),Sn=a("li"),Fte=a("strong"),oZe=o("albert"),rZe=o(" \u2014 "),YS=a("a"),tZe=o("AlbertTokenizer"),aZe=o(" or "),KS=a("a"),nZe=o("AlbertTokenizerFast"),sZe=o(" (ALBERT model)"),lZe=l(),Rn=a("li"),Tte=a("strong"),iZe=o("bart"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("BartTokenizer"),fZe=o(" or "),eR=a("a"),mZe=o("BartTokenizerFast"),gZe=o(" (BART model)"),hZe=l(),Pn=a("li"),Mte=a("strong"),pZe=o("barthez"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("BarthezTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("BarthezTokenizerFast"),FZe=o(" (BARThez model)"),TZe=l(),wg=a("li"),Ete=a("strong"),MZe=o("bartpho"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("BartphoTokenizer"),wZe=o(" (BARTpho model)"),AZe=l(),Bn=a("li"),Cte=a("strong"),yZe=o("bert"),LZe=o(" \u2014 "),aR=a("a"),xZe=o("BertTokenizer"),$Ze=o(" or "),nR=a("a"),kZe=o("BertTokenizerFast"),SZe=o(" (BERT model)"),RZe=l(),Ag=a("li"),wte=a("strong"),PZe=o("bert-generation"),BZe=o(" \u2014 "),sR=a("a"),IZe=o("BertGenerationTokenizer"),qZe=o(" (Bert Generation model)"),NZe=l(),yg=a("li"),Ate=a("strong"),jZe=o("bert-japanese"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("BertJapaneseTokenizer"),OZe=o(" (BertJapanese model)"),VZe=l(),Lg=a("li"),yte=a("strong"),XZe=o("bertweet"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("BertweetTokenizer"),QZe=o(" (Bertweet model)"),HZe=l(),In=a("li"),Lte=a("strong"),UZe=o("big_bird"),JZe=o(" \u2014 "),dR=a("a"),YZe=o("BigBirdTokenizer"),KZe=o(" or "),cR=a("a"),ZZe=o("BigBirdTokenizerFast"),eeo=o(" (BigBird model)"),oeo=l(),qn=a("li"),xte=a("strong"),reo=o("bigbird_pegasus"),teo=o(" \u2014 "),fR=a("a"),aeo=o("PegasusTokenizer"),neo=o(" or "),mR=a("a"),seo=o("PegasusTokenizerFast"),leo=o(" (BigBirdPegasus model)"),ieo=l(),Nn=a("li"),$te=a("strong"),deo=o("blenderbot"),ceo=o(" \u2014 "),gR=a("a"),feo=o("BlenderbotTokenizer"),meo=o(" or "),hR=a("a"),geo=o("BlenderbotTokenizerFast"),heo=o(" (Blenderbot model)"),peo=l(),xg=a("li"),kte=a("strong"),ueo=o("blenderbot-small"),_eo=o(" \u2014 "),pR=a("a"),beo=o("BlenderbotSmallTokenizer"),veo=o(" (BlenderbotSmall model)"),Feo=l(),$g=a("li"),Ste=a("strong"),Teo=o("byt5"),Meo=o(" \u2014 "),uR=a("a"),Eeo=o("ByT5Tokenizer"),Ceo=o(" (ByT5 model)"),weo=l(),jn=a("li"),Rte=a("strong"),Aeo=o("camembert"),yeo=o(" \u2014 "),_R=a("a"),Leo=o("CamembertTokenizer"),xeo=o(" or "),bR=a("a"),$eo=o("CamembertTokenizerFast"),keo=o(" (CamemBERT model)"),Seo=l(),kg=a("li"),Pte=a("strong"),Reo=o("canine"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("CanineTokenizer"),Ieo=o(" (Canine model)"),qeo=l(),Dn=a("li"),Bte=a("strong"),Neo=o("clip"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("CLIPTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("CLIPTokenizerFast"),Veo=o(" (CLIP model)"),Xeo=l(),Gn=a("li"),Ite=a("strong"),zeo=o("convbert"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("ConvBertTokenizer"),Heo=o(" or "),ER=a("a"),Ueo=o("ConvBertTokenizerFast"),Jeo=o(" (ConvBERT model)"),Yeo=l(),On=a("li"),qte=a("strong"),Keo=o("cpm"),Zeo=o(" \u2014 "),CR=a("a"),eoo=o("CpmTokenizer"),ooo=o(" or "),wR=a("a"),roo=o("CpmTokenizerFast"),too=o(" (CPM model)"),aoo=l(),Sg=a("li"),Nte=a("strong"),noo=o("ctrl"),soo=o(" \u2014 "),AR=a("a"),loo=o("CTRLTokenizer"),ioo=o(" (CTRL model)"),doo=l(),Vn=a("li"),jte=a("strong"),coo=o("data2vec-text"),foo=o(" \u2014 "),yR=a("a"),moo=o("RobertaTokenizer"),goo=o(" or "),LR=a("a"),hoo=o("RobertaTokenizerFast"),poo=o(" (Data2VecText model)"),uoo=l(),Xn=a("li"),Dte=a("strong"),_oo=o("deberta"),boo=o(" \u2014 "),xR=a("a"),voo=o("DebertaTokenizer"),Foo=o(" or "),$R=a("a"),Too=o("DebertaTokenizerFast"),Moo=o(" (DeBERTa model)"),Eoo=l(),zn=a("li"),Gte=a("strong"),Coo=o("deberta-v2"),woo=o(" \u2014 "),kR=a("a"),Aoo=o("DebertaV2Tokenizer"),yoo=o(" or "),SR=a("a"),Loo=o("DebertaV2TokenizerFast"),xoo=o(" (DeBERTa-v2 model)"),$oo=l(),Wn=a("li"),Ote=a("strong"),koo=o("distilbert"),Soo=o(" \u2014 "),RR=a("a"),Roo=o("DistilBertTokenizer"),Poo=o(" or "),PR=a("a"),Boo=o("DistilBertTokenizerFast"),Ioo=o(" (DistilBERT model)"),qoo=l(),Qn=a("li"),Vte=a("strong"),Noo=o("dpr"),joo=o(" \u2014 "),BR=a("a"),Doo=o("DPRQuestionEncoderTokenizer"),Goo=o(" or "),IR=a("a"),Ooo=o("DPRQuestionEncoderTokenizerFast"),Voo=o(" (DPR model)"),Xoo=l(),Hn=a("li"),Xte=a("strong"),zoo=o("electra"),Woo=o(" \u2014 "),qR=a("a"),Qoo=o("ElectraTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("ElectraTokenizerFast"),Joo=o(" (ELECTRA model)"),Yoo=l(),Rg=a("li"),zte=a("strong"),Koo=o("flaubert"),Zoo=o(" \u2014 "),jR=a("a"),ero=o("FlaubertTokenizer"),oro=o(" (FlauBERT model)"),rro=l(),Un=a("li"),Wte=a("strong"),tro=o("fnet"),aro=o(" \u2014 "),DR=a("a"),nro=o("FNetTokenizer"),sro=o(" or "),GR=a("a"),lro=o("FNetTokenizerFast"),iro=o(" (FNet model)"),dro=l(),Pg=a("li"),Qte=a("strong"),cro=o("fsmt"),fro=o(" \u2014 "),OR=a("a"),mro=o("FSMTTokenizer"),gro=o(" (FairSeq Machine-Translation model)"),hro=l(),Jn=a("li"),Hte=a("strong"),pro=o("funnel"),uro=o(" \u2014 "),VR=a("a"),_ro=o("FunnelTokenizer"),bro=o(" or "),XR=a("a"),vro=o("FunnelTokenizerFast"),Fro=o(" (Funnel Transformer model)"),Tro=l(),Yn=a("li"),Ute=a("strong"),Mro=o("gpt2"),Ero=o(" \u2014 "),zR=a("a"),Cro=o("GPT2Tokenizer"),wro=o(" or "),WR=a("a"),Aro=o("GPT2TokenizerFast"),yro=o(" (OpenAI GPT-2 model)"),Lro=l(),Kn=a("li"),Jte=a("strong"),xro=o("gpt_neo"),$ro=o(" \u2014 "),QR=a("a"),kro=o("GPT2Tokenizer"),Sro=o(" or "),HR=a("a"),Rro=o("GPT2TokenizerFast"),Pro=o(" (GPT Neo model)"),Bro=l(),Zn=a("li"),Yte=a("strong"),Iro=o("gptj"),qro=o(" \u2014 "),UR=a("a"),Nro=o("GPT2Tokenizer"),jro=o(" or "),JR=a("a"),Dro=o("GPT2TokenizerFast"),Gro=o(" (GPT-J model)"),Oro=l(),es=a("li"),Kte=a("strong"),Vro=o("herbert"),Xro=o(" \u2014 "),YR=a("a"),zro=o("HerbertTokenizer"),Wro=o(" or "),KR=a("a"),Qro=o("HerbertTokenizerFast"),Hro=o(" (HerBERT model)"),Uro=l(),Bg=a("li"),Zte=a("strong"),Jro=o("hubert"),Yro=o(" \u2014 "),ZR=a("a"),Kro=o("Wav2Vec2CTCTokenizer"),Zro=o(" (Hubert model)"),eto=l(),os=a("li"),eae=a("strong"),oto=o("ibert"),rto=o(" \u2014 "),eP=a("a"),tto=o("RobertaTokenizer"),ato=o(" or "),oP=a("a"),nto=o("RobertaTokenizerFast"),sto=o(" (I-BERT model)"),lto=l(),rs=a("li"),oae=a("strong"),ito=o("layoutlm"),dto=o(" \u2014 "),rP=a("a"),cto=o("LayoutLMTokenizer"),fto=o(" or "),tP=a("a"),mto=o("LayoutLMTokenizerFast"),gto=o(" (LayoutLM model)"),hto=l(),ts=a("li"),rae=a("strong"),pto=o("layoutlmv2"),uto=o(" \u2014 "),aP=a("a"),_to=o("LayoutLMv2Tokenizer"),bto=o(" or "),nP=a("a"),vto=o("LayoutLMv2TokenizerFast"),Fto=o(" (LayoutLMv2 model)"),Tto=l(),as=a("li"),tae=a("strong"),Mto=o("layoutlmv3"),Eto=o(" \u2014 "),sP=a("a"),Cto=o("LayoutLMv3Tokenizer"),wto=o(" or "),lP=a("a"),Ato=o("LayoutLMv3TokenizerFast"),yto=o(" (LayoutLMv3 model)"),Lto=l(),ns=a("li"),aae=a("strong"),xto=o("layoutxlm"),$to=o(" \u2014 "),iP=a("a"),kto=o("LayoutXLMTokenizer"),Sto=o(" or "),dP=a("a"),Rto=o("LayoutXLMTokenizerFast"),Pto=o(" (LayoutXLM model)"),Bto=l(),ss=a("li"),nae=a("strong"),Ito=o("led"),qto=o(" \u2014 "),cP=a("a"),Nto=o("LEDTokenizer"),jto=o(" or "),fP=a("a"),Dto=o("LEDTokenizerFast"),Gto=o(" (LED model)"),Oto=l(),ls=a("li"),sae=a("strong"),Vto=o("longformer"),Xto=o(" \u2014 "),mP=a("a"),zto=o("LongformerTokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("LongformerTokenizerFast"),Hto=o(" (Longformer model)"),Uto=l(),Ig=a("li"),lae=a("strong"),Jto=o("luke"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("LukeTokenizer"),Zto=o(" (LUKE model)"),eao=l(),is=a("li"),iae=a("strong"),oao=o("lxmert"),rao=o(" \u2014 "),pP=a("a"),tao=o("LxmertTokenizer"),aao=o(" or "),uP=a("a"),nao=o("LxmertTokenizerFast"),sao=o(" (LXMERT model)"),lao=l(),qg=a("li"),dae=a("strong"),iao=o("m2m_100"),dao=o(" \u2014 "),_P=a("a"),cao=o("M2M100Tokenizer"),fao=o(" (M2M100 model)"),mao=l(),Ng=a("li"),cae=a("strong"),gao=o("marian"),hao=o(" \u2014 "),bP=a("a"),pao=o("MarianTokenizer"),uao=o(" (Marian model)"),_ao=l(),ds=a("li"),fae=a("strong"),bao=o("mbart"),vao=o(" \u2014 "),vP=a("a"),Fao=o("MBartTokenizer"),Tao=o(" or "),FP=a("a"),Mao=o("MBartTokenizerFast"),Eao=o(" (mBART model)"),Cao=l(),cs=a("li"),mae=a("strong"),wao=o("mbart50"),Aao=o(" \u2014 "),TP=a("a"),yao=o("MBart50Tokenizer"),Lao=o(" or "),MP=a("a"),xao=o("MBart50TokenizerFast"),$ao=o(" (mBART-50 model)"),kao=l(),fs=a("li"),gae=a("strong"),Sao=o("megatron-bert"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("BertTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("BertTokenizerFast"),qao=o(" (MegatronBert model)"),Nao=l(),jg=a("li"),hae=a("strong"),jao=o("mluke"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("MLukeTokenizer"),Oao=o(" (mLUKE model)"),Vao=l(),ms=a("li"),pae=a("strong"),Xao=o("mobilebert"),zao=o(" \u2014 "),AP=a("a"),Wao=o("MobileBertTokenizer"),Qao=o(" or "),yP=a("a"),Hao=o("MobileBertTokenizerFast"),Uao=o(" (MobileBERT model)"),Jao=l(),gs=a("li"),uae=a("strong"),Yao=o("mpnet"),Kao=o(" \u2014 "),LP=a("a"),Zao=o("MPNetTokenizer"),eno=o(" or "),xP=a("a"),ono=o("MPNetTokenizerFast"),rno=o(" (MPNet model)"),tno=l(),hs=a("li"),_ae=a("strong"),ano=o("mt5"),nno=o(" \u2014 "),$P=a("a"),sno=o("MT5Tokenizer"),lno=o(" or "),kP=a("a"),ino=o("MT5TokenizerFast"),dno=o(" (mT5 model)"),cno=l(),ps=a("li"),bae=a("strong"),fno=o("nystromformer"),mno=o(" \u2014 "),SP=a("a"),gno=o("AlbertTokenizer"),hno=o(" or "),RP=a("a"),pno=o("AlbertTokenizerFast"),uno=o(" (Nystromformer model)"),_no=l(),us=a("li"),vae=a("strong"),bno=o("openai-gpt"),vno=o(" \u2014 "),PP=a("a"),Fno=o("OpenAIGPTTokenizer"),Tno=o(" or "),BP=a("a"),Mno=o("OpenAIGPTTokenizerFast"),Eno=o(" (OpenAI GPT model)"),Cno=l(),Dg=a("li"),Fae=a("strong"),wno=o("opt"),Ano=o(" \u2014 "),IP=a("a"),yno=o("GPT2Tokenizer"),Lno=o(" (OPT model)"),xno=l(),_s=a("li"),Tae=a("strong"),$no=o("pegasus"),kno=o(" \u2014 "),qP=a("a"),Sno=o("PegasusTokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("PegasusTokenizerFast"),Bno=o(" (Pegasus model)"),Ino=l(),Gg=a("li"),Mae=a("strong"),qno=o("perceiver"),Nno=o(" \u2014 "),jP=a("a"),jno=o("PerceiverTokenizer"),Dno=o(" (Perceiver model)"),Gno=l(),Og=a("li"),Eae=a("strong"),Ono=o("phobert"),Vno=o(" \u2014 "),DP=a("a"),Xno=o("PhobertTokenizer"),zno=o(" (PhoBERT model)"),Wno=l(),Vg=a("li"),Cae=a("strong"),Qno=o("plbart"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("PLBartTokenizer"),Jno=o(" (PLBart model)"),Yno=l(),Xg=a("li"),wae=a("strong"),Kno=o("prophetnet"),Zno=o(" \u2014 "),OP=a("a"),eso=o("ProphetNetTokenizer"),oso=o(" (ProphetNet model)"),rso=l(),bs=a("li"),Aae=a("strong"),tso=o("qdqbert"),aso=o(" \u2014 "),VP=a("a"),nso=o("BertTokenizer"),sso=o(" or "),XP=a("a"),lso=o("BertTokenizerFast"),iso=o(" (QDQBert model)"),dso=l(),zg=a("li"),yae=a("strong"),cso=o("rag"),fso=o(" \u2014 "),zP=a("a"),mso=o("RagTokenizer"),gso=o(" (RAG model)"),hso=l(),vs=a("li"),Lae=a("strong"),pso=o("realm"),uso=o(" \u2014 "),WP=a("a"),_so=o("RealmTokenizer"),bso=o(" or "),QP=a("a"),vso=o("RealmTokenizerFast"),Fso=o(" (Realm model)"),Tso=l(),Fs=a("li"),xae=a("strong"),Mso=o("reformer"),Eso=o(" \u2014 "),HP=a("a"),Cso=o("ReformerTokenizer"),wso=o(" or "),UP=a("a"),Aso=o("ReformerTokenizerFast"),yso=o(" (Reformer model)"),Lso=l(),Ts=a("li"),$ae=a("strong"),xso=o("rembert"),$so=o(" \u2014 "),JP=a("a"),kso=o("RemBertTokenizer"),Sso=o(" or "),YP=a("a"),Rso=o("RemBertTokenizerFast"),Pso=o(" (RemBERT model)"),Bso=l(),Ms=a("li"),kae=a("strong"),Iso=o("retribert"),qso=o(" \u2014 "),KP=a("a"),Nso=o("RetriBertTokenizer"),jso=o(" or "),ZP=a("a"),Dso=o("RetriBertTokenizerFast"),Gso=o(" (RetriBERT model)"),Oso=l(),Es=a("li"),Sae=a("strong"),Vso=o("roberta"),Xso=o(" \u2014 "),eB=a("a"),zso=o("RobertaTokenizer"),Wso=o(" or "),oB=a("a"),Qso=o("RobertaTokenizerFast"),Hso=o(" (RoBERTa model)"),Uso=l(),Cs=a("li"),Rae=a("strong"),Jso=o("roformer"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("RoFormerTokenizer"),Zso=o(" or "),tB=a("a"),elo=o("RoFormerTokenizerFast"),olo=o(" (RoFormer model)"),rlo=l(),Wg=a("li"),Pae=a("strong"),tlo=o("speech_to_text"),alo=o(" \u2014 "),aB=a("a"),nlo=o("Speech2TextTokenizer"),slo=o(" (Speech2Text model)"),llo=l(),Qg=a("li"),Bae=a("strong"),ilo=o("speech_to_text_2"),dlo=o(" \u2014 "),nB=a("a"),clo=o("Speech2Text2Tokenizer"),flo=o(" (Speech2Text2 model)"),mlo=l(),ws=a("li"),Iae=a("strong"),glo=o("splinter"),hlo=o(" \u2014 "),sB=a("a"),plo=o("SplinterTokenizer"),ulo=o(" or "),lB=a("a"),_lo=o("SplinterTokenizerFast"),blo=o(" (Splinter model)"),vlo=l(),As=a("li"),qae=a("strong"),Flo=o("squeezebert"),Tlo=o(" \u2014 "),iB=a("a"),Mlo=o("SqueezeBertTokenizer"),Elo=o(" or "),dB=a("a"),Clo=o("SqueezeBertTokenizerFast"),wlo=o(" (SqueezeBERT model)"),Alo=l(),ys=a("li"),Nae=a("strong"),ylo=o("t5"),Llo=o(" \u2014 "),cB=a("a"),xlo=o("T5Tokenizer"),$lo=o(" or "),fB=a("a"),klo=o("T5TokenizerFast"),Slo=o(" (T5 model)"),Rlo=l(),Hg=a("li"),jae=a("strong"),Plo=o("tapas"),Blo=o(" \u2014 "),mB=a("a"),Ilo=o("TapasTokenizer"),qlo=o(" (TAPAS model)"),Nlo=l(),Ug=a("li"),Dae=a("strong"),jlo=o("tapex"),Dlo=o(" \u2014 "),gB=a("a"),Glo=o("TapexTokenizer"),Olo=o(" (TAPEX model)"),Vlo=l(),Jg=a("li"),Gae=a("strong"),Xlo=o("transfo-xl"),zlo=o(" \u2014 "),hB=a("a"),Wlo=o("TransfoXLTokenizer"),Qlo=o(" (Transformer-XL model)"),Hlo=l(),Ls=a("li"),Oae=a("strong"),Ulo=o("visual_bert"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("BertTokenizer"),Klo=o(" or "),uB=a("a"),Zlo=o("BertTokenizerFast"),eio=o(" (VisualBert model)"),oio=l(),Yg=a("li"),Vae=a("strong"),rio=o("wav2vec2"),tio=o(" \u2014 "),_B=a("a"),aio=o("Wav2Vec2CTCTokenizer"),nio=o(" (Wav2Vec2 model)"),sio=l(),Kg=a("li"),Xae=a("strong"),lio=o("wav2vec2-conformer"),iio=o(" \u2014 "),bB=a("a"),dio=o("Wav2Vec2CTCTokenizer"),cio=o(" (Wav2Vec2-Conformer model)"),fio=l(),Zg=a("li"),zae=a("strong"),mio=o("wav2vec2_phoneme"),gio=o(" \u2014 "),vB=a("a"),hio=o("Wav2Vec2PhonemeCTCTokenizer"),pio=o(" (Wav2Vec2Phoneme model)"),uio=l(),xs=a("li"),Wae=a("strong"),_io=o("xglm"),bio=o(" \u2014 "),FB=a("a"),vio=o("XGLMTokenizer"),Fio=o(" or "),TB=a("a"),Tio=o("XGLMTokenizerFast"),Mio=o(" (XGLM model)"),Eio=l(),eh=a("li"),Qae=a("strong"),Cio=o("xlm"),wio=o(" \u2014 "),MB=a("a"),Aio=o("XLMTokenizer"),yio=o(" (XLM model)"),Lio=l(),oh=a("li"),Hae=a("strong"),xio=o("xlm-prophetnet"),$io=o(" \u2014 "),EB=a("a"),kio=o("XLMProphetNetTokenizer"),Sio=o(" (XLMProphetNet model)"),Rio=l(),$s=a("li"),Uae=a("strong"),Pio=o("xlm-roberta"),Bio=o(" \u2014 "),CB=a("a"),Iio=o("XLMRobertaTokenizer"),qio=o(" or "),wB=a("a"),Nio=o("XLMRobertaTokenizerFast"),jio=o(" (XLM-RoBERTa model)"),Dio=l(),ks=a("li"),Jae=a("strong"),Gio=o("xlm-roberta-xl"),Oio=o(" \u2014 "),AB=a("a"),Vio=o("RobertaTokenizer"),Xio=o(" or "),yB=a("a"),zio=o("RobertaTokenizerFast"),Wio=o(" (XLM-RoBERTa-XL model)"),Qio=l(),Ss=a("li"),Yae=a("strong"),Hio=o("xlnet"),Uio=o(" \u2014 "),LB=a("a"),Jio=o("XLNetTokenizer"),Yio=o(" or "),xB=a("a"),Kio=o("XLNetTokenizerFast"),Zio=o(" (XLNet model)"),edo=l(),Rs=a("li"),Kae=a("strong"),odo=o("yoso"),rdo=o(" \u2014 "),$B=a("a"),tdo=o("AlbertTokenizer"),ado=o(" or "),kB=a("a"),ndo=o("AlbertTokenizerFast"),sdo=o(" (YOSO model)"),ldo=l(),F(rh.$$.fragment),ido=l(),th=a("div"),F(NA.$$.fragment),ddo=l(),Zae=a("p"),cdo=o("Register a new tokenizer in this mapping."),Zqe=l(),Mi=a("h2"),ah=a("a"),ene=a("span"),F(jA.$$.fragment),fdo=l(),one=a("span"),mdo=o("AutoFeatureExtractor"),eNe=l(),Ao=a("div"),F(DA.$$.fragment),gdo=l(),GA=a("p"),hdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SB=a("a"),pdo=o("AutoFeatureExtractor.from_pretrained()"),udo=o(" class method."),_do=l(),OA=a("p"),bdo=o("This class cannot be instantiated directly using "),rne=a("code"),vdo=o("__init__()"),Fdo=o(" (throws an error)."),Tdo=l(),He=a("div"),F(VA.$$.fragment),Mdo=l(),tne=a("p"),Edo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cdo=l(),ya=a("p"),wdo=o("The feature extractor class to instantiate is selected based on the "),ane=a("code"),Ado=o("model_type"),ydo=o(` property of the config object
(either passed as an argument or loaded from `),nne=a("code"),Ldo=o("pretrained_model_name_or_path"),xdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sne=a("code"),$do=o("pretrained_model_name_or_path"),kdo=o(":"),Sdo=l(),K=a("ul"),nh=a("li"),lne=a("strong"),Rdo=o("beit"),Pdo=o(" \u2014 "),RB=a("a"),Bdo=o("BeitFeatureExtractor"),Ido=o(" (BEiT model)"),qdo=l(),sh=a("li"),ine=a("strong"),Ndo=o("clip"),jdo=o(" \u2014 "),PB=a("a"),Ddo=o("CLIPFeatureExtractor"),Gdo=o(" (CLIP model)"),Odo=l(),lh=a("li"),dne=a("strong"),Vdo=o("convnext"),Xdo=o(" \u2014 "),BB=a("a"),zdo=o("ConvNextFeatureExtractor"),Wdo=o(" (ConvNext model)"),Qdo=l(),ih=a("li"),cne=a("strong"),Hdo=o("cvt"),Udo=o(" \u2014 "),IB=a("a"),Jdo=o("ConvNextFeatureExtractor"),Ydo=o(" (CvT model)"),Kdo=l(),dh=a("li"),fne=a("strong"),Zdo=o("data2vec-audio"),eco=o(" \u2014 "),qB=a("a"),oco=o("Wav2Vec2FeatureExtractor"),rco=o(" (Data2VecAudio model)"),tco=l(),ch=a("li"),mne=a("strong"),aco=o("data2vec-vision"),nco=o(" \u2014 "),NB=a("a"),sco=o("BeitFeatureExtractor"),lco=o(" (Data2VecVision model)"),ico=l(),fh=a("li"),gne=a("strong"),dco=o("deit"),cco=o(" \u2014 "),jB=a("a"),fco=o("DeiTFeatureExtractor"),mco=o(" (DeiT model)"),gco=l(),mh=a("li"),hne=a("strong"),hco=o("detr"),pco=o(" \u2014 "),DB=a("a"),uco=o("DetrFeatureExtractor"),_co=o(" (DETR model)"),bco=l(),gh=a("li"),pne=a("strong"),vco=o("dpt"),Fco=o(" \u2014 "),GB=a("a"),Tco=o("DPTFeatureExtractor"),Mco=o(" (DPT model)"),Eco=l(),hh=a("li"),une=a("strong"),Cco=o("flava"),wco=o(" \u2014 "),OB=a("a"),Aco=o("FlavaFeatureExtractor"),yco=o(" (Flava model)"),Lco=l(),ph=a("li"),_ne=a("strong"),xco=o("glpn"),$co=o(" \u2014 "),VB=a("a"),kco=o("GLPNFeatureExtractor"),Sco=o(" (GLPN model)"),Rco=l(),uh=a("li"),bne=a("strong"),Pco=o("hubert"),Bco=o(" \u2014 "),XB=a("a"),Ico=o("Wav2Vec2FeatureExtractor"),qco=o(" (Hubert model)"),Nco=l(),_h=a("li"),vne=a("strong"),jco=o("layoutlmv2"),Dco=o(" \u2014 "),zB=a("a"),Gco=o("LayoutLMv2FeatureExtractor"),Oco=o(" (LayoutLMv2 model)"),Vco=l(),bh=a("li"),Fne=a("strong"),Xco=o("layoutlmv3"),zco=o(" \u2014 "),WB=a("a"),Wco=o("LayoutLMv3FeatureExtractor"),Qco=o(" (LayoutLMv3 model)"),Hco=l(),vh=a("li"),Tne=a("strong"),Uco=o("maskformer"),Jco=o(" \u2014 "),QB=a("a"),Yco=o("MaskFormerFeatureExtractor"),Kco=o(" (MaskFormer model)"),Zco=l(),Fh=a("li"),Mne=a("strong"),efo=o("perceiver"),ofo=o(" \u2014 "),HB=a("a"),rfo=o("PerceiverFeatureExtractor"),tfo=o(" (Perceiver model)"),afo=l(),Th=a("li"),Ene=a("strong"),nfo=o("poolformer"),sfo=o(" \u2014 "),UB=a("a"),lfo=o("PoolFormerFeatureExtractor"),ifo=o(" (PoolFormer model)"),dfo=l(),Mh=a("li"),Cne=a("strong"),cfo=o("regnet"),ffo=o(" \u2014 "),JB=a("a"),mfo=o("ConvNextFeatureExtractor"),gfo=o(" (RegNet model)"),hfo=l(),Eh=a("li"),wne=a("strong"),pfo=o("resnet"),ufo=o(" \u2014 "),YB=a("a"),_fo=o("ConvNextFeatureExtractor"),bfo=o(" (ResNet model)"),vfo=l(),Ch=a("li"),Ane=a("strong"),Ffo=o("segformer"),Tfo=o(" \u2014 "),KB=a("a"),Mfo=o("SegformerFeatureExtractor"),Efo=o(" (SegFormer model)"),Cfo=l(),wh=a("li"),yne=a("strong"),wfo=o("speech_to_text"),Afo=o(" \u2014 "),ZB=a("a"),yfo=o("Speech2TextFeatureExtractor"),Lfo=o(" (Speech2Text model)"),xfo=l(),Ah=a("li"),Lne=a("strong"),$fo=o("swin"),kfo=o(" \u2014 "),eI=a("a"),Sfo=o("ViTFeatureExtractor"),Rfo=o(" (Swin model)"),Pfo=l(),yh=a("li"),xne=a("strong"),Bfo=o("van"),Ifo=o(" \u2014 "),oI=a("a"),qfo=o("ConvNextFeatureExtractor"),Nfo=o(" (VAN model)"),jfo=l(),Lh=a("li"),$ne=a("strong"),Dfo=o("vit"),Gfo=o(" \u2014 "),rI=a("a"),Ofo=o("ViTFeatureExtractor"),Vfo=o(" (ViT model)"),Xfo=l(),xh=a("li"),kne=a("strong"),zfo=o("vit_mae"),Wfo=o(" \u2014 "),tI=a("a"),Qfo=o("ViTFeatureExtractor"),Hfo=o(" (ViTMAE model)"),Ufo=l(),$h=a("li"),Sne=a("strong"),Jfo=o("wav2vec2"),Yfo=o(" \u2014 "),aI=a("a"),Kfo=o("Wav2Vec2FeatureExtractor"),Zfo=o(" (Wav2Vec2 model)"),emo=l(),kh=a("li"),Rne=a("strong"),omo=o("wav2vec2-conformer"),rmo=o(" \u2014 "),nI=a("a"),tmo=o("Wav2Vec2FeatureExtractor"),amo=o(" (Wav2Vec2-Conformer model)"),nmo=l(),Sh=a("li"),Pne=a("strong"),smo=o("yolos"),lmo=o(" \u2014 "),sI=a("a"),imo=o("YolosFeatureExtractor"),dmo=o(" (YOLOS model)"),cmo=l(),F(Rh.$$.fragment),fmo=l(),F(Ph.$$.fragment),mmo=l(),Bh=a("div"),F(XA.$$.fragment),gmo=l(),Bne=a("p"),hmo=o("Register a new feature extractor for this class."),oNe=l(),Ei=a("h2"),Ih=a("a"),Ine=a("span"),F(zA.$$.fragment),pmo=l(),qne=a("span"),umo=o("AutoProcessor"),rNe=l(),yo=a("div"),F(WA.$$.fragment),_mo=l(),QA=a("p"),bmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lI=a("a"),vmo=o("AutoProcessor.from_pretrained()"),Fmo=o(" class method."),Tmo=l(),HA=a("p"),Mmo=o("This class cannot be instantiated directly using "),Nne=a("code"),Emo=o("__init__()"),Cmo=o(" (throws an error)."),wmo=l(),Ue=a("div"),F(UA.$$.fragment),Amo=l(),jne=a("p"),ymo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Lmo=l(),Ci=a("p"),xmo=o("The processor class to instantiate is selected based on the "),Dne=a("code"),$mo=o("model_type"),kmo=o(` property of the config object (either
passed as an argument or loaded from `),Gne=a("code"),Smo=o("pretrained_model_name_or_path"),Rmo=o(" if possible):"),Pmo=l(),he=a("ul"),qh=a("li"),One=a("strong"),Bmo=o("clip"),Imo=o(" \u2014 "),iI=a("a"),qmo=o("CLIPProcessor"),Nmo=o(" (CLIP model)"),jmo=l(),Nh=a("li"),Vne=a("strong"),Dmo=o("flava"),Gmo=o(" \u2014 "),Xne=a("code"),Omo=o("FLAVAProcessor"),Vmo=o(" (Flava model)"),Xmo=l(),jh=a("li"),zne=a("strong"),zmo=o("layoutlmv2"),Wmo=o(" \u2014 "),dI=a("a"),Qmo=o("LayoutLMv2Processor"),Hmo=o(" (LayoutLMv2 model)"),Umo=l(),Dh=a("li"),Wne=a("strong"),Jmo=o("layoutlmv3"),Ymo=o(" \u2014 "),cI=a("a"),Kmo=o("LayoutLMv3Processor"),Zmo=o(" (LayoutLMv3 model)"),ego=l(),Gh=a("li"),Qne=a("strong"),ogo=o("layoutxlm"),rgo=o(" \u2014 "),fI=a("a"),tgo=o("LayoutXLMProcessor"),ago=o(" (LayoutXLM model)"),ngo=l(),Oh=a("li"),Hne=a("strong"),sgo=o("sew"),lgo=o(" \u2014 "),mI=a("a"),igo=o("Wav2Vec2Processor"),dgo=o(" (SEW model)"),cgo=l(),Vh=a("li"),Une=a("strong"),fgo=o("sew-d"),mgo=o(" \u2014 "),gI=a("a"),ggo=o("Wav2Vec2Processor"),hgo=o(" (SEW-D model)"),pgo=l(),Xh=a("li"),Jne=a("strong"),ugo=o("speech_to_text"),_go=o(" \u2014 "),hI=a("a"),bgo=o("Speech2TextProcessor"),vgo=o(" (Speech2Text model)"),Fgo=l(),zh=a("li"),Yne=a("strong"),Tgo=o("speech_to_text_2"),Mgo=o(" \u2014 "),pI=a("a"),Ego=o("Speech2Text2Processor"),Cgo=o(" (Speech2Text2 model)"),wgo=l(),Wh=a("li"),Kne=a("strong"),Ago=o("trocr"),ygo=o(" \u2014 "),uI=a("a"),Lgo=o("TrOCRProcessor"),xgo=o(" (TrOCR model)"),$go=l(),Qh=a("li"),Zne=a("strong"),kgo=o("unispeech"),Sgo=o(" \u2014 "),_I=a("a"),Rgo=o("Wav2Vec2Processor"),Pgo=o(" (UniSpeech model)"),Bgo=l(),Hh=a("li"),ese=a("strong"),Igo=o("unispeech-sat"),qgo=o(" \u2014 "),bI=a("a"),Ngo=o("Wav2Vec2Processor"),jgo=o(" (UniSpeechSat model)"),Dgo=l(),Uh=a("li"),ose=a("strong"),Ggo=o("vilt"),Ogo=o(" \u2014 "),vI=a("a"),Vgo=o("ViltProcessor"),Xgo=o(" (ViLT model)"),zgo=l(),Jh=a("li"),rse=a("strong"),Wgo=o("vision-text-dual-encoder"),Qgo=o(" \u2014 "),FI=a("a"),Hgo=o("VisionTextDualEncoderProcessor"),Ugo=o(" (VisionTextDualEncoder model)"),Jgo=l(),Yh=a("li"),tse=a("strong"),Ygo=o("wav2vec2"),Kgo=o(" \u2014 "),TI=a("a"),Zgo=o("Wav2Vec2Processor"),eho=o(" (Wav2Vec2 model)"),oho=l(),Kh=a("li"),ase=a("strong"),rho=o("wav2vec2-conformer"),tho=o(" \u2014 "),MI=a("a"),aho=o("Wav2Vec2Processor"),nho=o(" (Wav2Vec2-Conformer model)"),sho=l(),Zh=a("li"),nse=a("strong"),lho=o("wavlm"),iho=o(" \u2014 "),EI=a("a"),dho=o("Wav2Vec2Processor"),cho=o(" (WavLM model)"),fho=l(),F(ep.$$.fragment),mho=l(),F(op.$$.fragment),gho=l(),rp=a("div"),F(JA.$$.fragment),hho=l(),sse=a("p"),pho=o("Register a new processor for this class."),tNe=l(),wi=a("h2"),tp=a("a"),lse=a("span"),F(YA.$$.fragment),uho=l(),ise=a("span"),_ho=o("AutoModel"),aNe=l(),Lo=a("div"),F(KA.$$.fragment),bho=l(),Ai=a("p"),vho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CI=a("a"),Fho=o("from_pretrained()"),Tho=o(" class method or the "),wI=a("a"),Mho=o("from_config()"),Eho=o(` class
method.`),Cho=l(),ZA=a("p"),who=o("This class cannot be instantiated directly using "),dse=a("code"),Aho=o("__init__()"),yho=o(" (throws an error)."),Lho=l(),tt=a("div"),F(e6.$$.fragment),xho=l(),cse=a("p"),$ho=o("Instantiates one of the base model classes of the library from a configuration."),kho=l(),yi=a("p"),Sho=o(`Note:
Loading a model from its configuration file does `),fse=a("strong"),Rho=o("not"),Pho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AI=a("a"),Bho=o("from_pretrained()"),Iho=o(" to load the model weights."),qho=l(),F(ap.$$.fragment),Nho=l(),Je=a("div"),F(o6.$$.fragment),jho=l(),mse=a("p"),Dho=o("Instantiate one of the base model classes of the library from a pretrained model."),Gho=l(),La=a("p"),Oho=o("The model class to instantiate is selected based on the "),gse=a("code"),Vho=o("model_type"),Xho=o(` property of the config object (either
passed as an argument or loaded from `),hse=a("code"),zho=o("pretrained_model_name_or_path"),Who=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pse=a("code"),Qho=o("pretrained_model_name_or_path"),Hho=o(":"),Uho=l(),x=a("ul"),np=a("li"),use=a("strong"),Jho=o("albert"),Yho=o(" \u2014 "),yI=a("a"),Kho=o("AlbertModel"),Zho=o(" (ALBERT model)"),epo=l(),sp=a("li"),_se=a("strong"),opo=o("bart"),rpo=o(" \u2014 "),LI=a("a"),tpo=o("BartModel"),apo=o(" (BART model)"),npo=l(),lp=a("li"),bse=a("strong"),spo=o("beit"),lpo=o(" \u2014 "),xI=a("a"),ipo=o("BeitModel"),dpo=o(" (BEiT model)"),cpo=l(),ip=a("li"),vse=a("strong"),fpo=o("bert"),mpo=o(" \u2014 "),$I=a("a"),gpo=o("BertModel"),hpo=o(" (BERT model)"),ppo=l(),dp=a("li"),Fse=a("strong"),upo=o("bert-generation"),_po=o(" \u2014 "),kI=a("a"),bpo=o("BertGenerationEncoder"),vpo=o(" (Bert Generation model)"),Fpo=l(),cp=a("li"),Tse=a("strong"),Tpo=o("big_bird"),Mpo=o(" \u2014 "),SI=a("a"),Epo=o("BigBirdModel"),Cpo=o(" (BigBird model)"),wpo=l(),fp=a("li"),Mse=a("strong"),Apo=o("bigbird_pegasus"),ypo=o(" \u2014 "),RI=a("a"),Lpo=o("BigBirdPegasusModel"),xpo=o(" (BigBirdPegasus model)"),$po=l(),mp=a("li"),Ese=a("strong"),kpo=o("blenderbot"),Spo=o(" \u2014 "),PI=a("a"),Rpo=o("BlenderbotModel"),Ppo=o(" (Blenderbot model)"),Bpo=l(),gp=a("li"),Cse=a("strong"),Ipo=o("blenderbot-small"),qpo=o(" \u2014 "),BI=a("a"),Npo=o("BlenderbotSmallModel"),jpo=o(" (BlenderbotSmall model)"),Dpo=l(),hp=a("li"),wse=a("strong"),Gpo=o("camembert"),Opo=o(" \u2014 "),II=a("a"),Vpo=o("CamembertModel"),Xpo=o(" (CamemBERT model)"),zpo=l(),pp=a("li"),Ase=a("strong"),Wpo=o("canine"),Qpo=o(" \u2014 "),qI=a("a"),Hpo=o("CanineModel"),Upo=o(" (Canine model)"),Jpo=l(),up=a("li"),yse=a("strong"),Ypo=o("clip"),Kpo=o(" \u2014 "),NI=a("a"),Zpo=o("CLIPModel"),euo=o(" (CLIP model)"),ouo=l(),_p=a("li"),Lse=a("strong"),ruo=o("convbert"),tuo=o(" \u2014 "),jI=a("a"),auo=o("ConvBertModel"),nuo=o(" (ConvBERT model)"),suo=l(),bp=a("li"),xse=a("strong"),luo=o("convnext"),iuo=o(" \u2014 "),DI=a("a"),duo=o("ConvNextModel"),cuo=o(" (ConvNext model)"),fuo=l(),vp=a("li"),$se=a("strong"),muo=o("ctrl"),guo=o(" \u2014 "),GI=a("a"),huo=o("CTRLModel"),puo=o(" (CTRL model)"),uuo=l(),Fp=a("li"),kse=a("strong"),_uo=o("cvt"),buo=o(" \u2014 "),OI=a("a"),vuo=o("CvtModel"),Fuo=o(" (CvT model)"),Tuo=l(),Tp=a("li"),Sse=a("strong"),Muo=o("data2vec-audio"),Euo=o(" \u2014 "),VI=a("a"),Cuo=o("Data2VecAudioModel"),wuo=o(" (Data2VecAudio model)"),Auo=l(),Mp=a("li"),Rse=a("strong"),yuo=o("data2vec-text"),Luo=o(" \u2014 "),XI=a("a"),xuo=o("Data2VecTextModel"),$uo=o(" (Data2VecText model)"),kuo=l(),Ep=a("li"),Pse=a("strong"),Suo=o("data2vec-vision"),Ruo=o(" \u2014 "),zI=a("a"),Puo=o("Data2VecVisionModel"),Buo=o(" (Data2VecVision model)"),Iuo=l(),Cp=a("li"),Bse=a("strong"),quo=o("deberta"),Nuo=o(" \u2014 "),WI=a("a"),juo=o("DebertaModel"),Duo=o(" (DeBERTa model)"),Guo=l(),wp=a("li"),Ise=a("strong"),Ouo=o("deberta-v2"),Vuo=o(" \u2014 "),QI=a("a"),Xuo=o("DebertaV2Model"),zuo=o(" (DeBERTa-v2 model)"),Wuo=l(),Ap=a("li"),qse=a("strong"),Quo=o("decision_transformer"),Huo=o(" \u2014 "),HI=a("a"),Uuo=o("DecisionTransformerModel"),Juo=o(" (Decision Transformer model)"),Yuo=l(),yp=a("li"),Nse=a("strong"),Kuo=o("deit"),Zuo=o(" \u2014 "),UI=a("a"),e_o=o("DeiTModel"),o_o=o(" (DeiT model)"),r_o=l(),Lp=a("li"),jse=a("strong"),t_o=o("detr"),a_o=o(" \u2014 "),JI=a("a"),n_o=o("DetrModel"),s_o=o(" (DETR model)"),l_o=l(),xp=a("li"),Dse=a("strong"),i_o=o("distilbert"),d_o=o(" \u2014 "),YI=a("a"),c_o=o("DistilBertModel"),f_o=o(" (DistilBERT model)"),m_o=l(),$p=a("li"),Gse=a("strong"),g_o=o("dpr"),h_o=o(" \u2014 "),KI=a("a"),p_o=o("DPRQuestionEncoder"),u_o=o(" (DPR model)"),__o=l(),kp=a("li"),Ose=a("strong"),b_o=o("dpt"),v_o=o(" \u2014 "),ZI=a("a"),F_o=o("DPTModel"),T_o=o(" (DPT model)"),M_o=l(),Sp=a("li"),Vse=a("strong"),E_o=o("electra"),C_o=o(" \u2014 "),eq=a("a"),w_o=o("ElectraModel"),A_o=o(" (ELECTRA model)"),y_o=l(),Rp=a("li"),Xse=a("strong"),L_o=o("flaubert"),x_o=o(" \u2014 "),oq=a("a"),$_o=o("FlaubertModel"),k_o=o(" (FlauBERT model)"),S_o=l(),Pp=a("li"),zse=a("strong"),R_o=o("flava"),P_o=o(" \u2014 "),rq=a("a"),B_o=o("FlavaModel"),I_o=o(" (Flava model)"),q_o=l(),Bp=a("li"),Wse=a("strong"),N_o=o("fnet"),j_o=o(" \u2014 "),tq=a("a"),D_o=o("FNetModel"),G_o=o(" (FNet model)"),O_o=l(),Ip=a("li"),Qse=a("strong"),V_o=o("fsmt"),X_o=o(" \u2014 "),aq=a("a"),z_o=o("FSMTModel"),W_o=o(" (FairSeq Machine-Translation model)"),Q_o=l(),Ps=a("li"),Hse=a("strong"),H_o=o("funnel"),U_o=o(" \u2014 "),nq=a("a"),J_o=o("FunnelModel"),Y_o=o(" or "),sq=a("a"),K_o=o("FunnelBaseModel"),Z_o=o(" (Funnel Transformer model)"),e1o=l(),qp=a("li"),Use=a("strong"),o1o=o("glpn"),r1o=o(" \u2014 "),lq=a("a"),t1o=o("GLPNModel"),a1o=o(" (GLPN model)"),n1o=l(),Np=a("li"),Jse=a("strong"),s1o=o("gpt2"),l1o=o(" \u2014 "),iq=a("a"),i1o=o("GPT2Model"),d1o=o(" (OpenAI GPT-2 model)"),c1o=l(),jp=a("li"),Yse=a("strong"),f1o=o("gpt_neo"),m1o=o(" \u2014 "),dq=a("a"),g1o=o("GPTNeoModel"),h1o=o(" (GPT Neo model)"),p1o=l(),Dp=a("li"),Kse=a("strong"),u1o=o("gptj"),_1o=o(" \u2014 "),cq=a("a"),b1o=o("GPTJModel"),v1o=o(" (GPT-J model)"),F1o=l(),Gp=a("li"),Zse=a("strong"),T1o=o("hubert"),M1o=o(" \u2014 "),fq=a("a"),E1o=o("HubertModel"),C1o=o(" (Hubert model)"),w1o=l(),Op=a("li"),ele=a("strong"),A1o=o("ibert"),y1o=o(" \u2014 "),mq=a("a"),L1o=o("IBertModel"),x1o=o(" (I-BERT model)"),$1o=l(),Vp=a("li"),ole=a("strong"),k1o=o("imagegpt"),S1o=o(" \u2014 "),gq=a("a"),R1o=o("ImageGPTModel"),P1o=o(" (ImageGPT model)"),B1o=l(),Xp=a("li"),rle=a("strong"),I1o=o("layoutlm"),q1o=o(" \u2014 "),hq=a("a"),N1o=o("LayoutLMModel"),j1o=o(" (LayoutLM model)"),D1o=l(),zp=a("li"),tle=a("strong"),G1o=o("layoutlmv2"),O1o=o(" \u2014 "),pq=a("a"),V1o=o("LayoutLMv2Model"),X1o=o(" (LayoutLMv2 model)"),z1o=l(),Wp=a("li"),ale=a("strong"),W1o=o("layoutlmv3"),Q1o=o(" \u2014 "),uq=a("a"),H1o=o("LayoutLMv3Model"),U1o=o(" (LayoutLMv3 model)"),J1o=l(),Qp=a("li"),nle=a("strong"),Y1o=o("led"),K1o=o(" \u2014 "),_q=a("a"),Z1o=o("LEDModel"),e8o=o(" (LED model)"),o8o=l(),Hp=a("li"),sle=a("strong"),r8o=o("longformer"),t8o=o(" \u2014 "),bq=a("a"),a8o=o("LongformerModel"),n8o=o(" (Longformer model)"),s8o=l(),Up=a("li"),lle=a("strong"),l8o=o("luke"),i8o=o(" \u2014 "),vq=a("a"),d8o=o("LukeModel"),c8o=o(" (LUKE model)"),f8o=l(),Jp=a("li"),ile=a("strong"),m8o=o("lxmert"),g8o=o(" \u2014 "),Fq=a("a"),h8o=o("LxmertModel"),p8o=o(" (LXMERT model)"),u8o=l(),Yp=a("li"),dle=a("strong"),_8o=o("m2m_100"),b8o=o(" \u2014 "),Tq=a("a"),v8o=o("M2M100Model"),F8o=o(" (M2M100 model)"),T8o=l(),Kp=a("li"),cle=a("strong"),M8o=o("marian"),E8o=o(" \u2014 "),Mq=a("a"),C8o=o("MarianModel"),w8o=o(" (Marian model)"),A8o=l(),Zp=a("li"),fle=a("strong"),y8o=o("maskformer"),L8o=o(" \u2014 "),Eq=a("a"),x8o=o("MaskFormerModel"),$8o=o(" (MaskFormer model)"),k8o=l(),eu=a("li"),mle=a("strong"),S8o=o("mbart"),R8o=o(" \u2014 "),Cq=a("a"),P8o=o("MBartModel"),B8o=o(" (mBART model)"),I8o=l(),ou=a("li"),gle=a("strong"),q8o=o("megatron-bert"),N8o=o(" \u2014 "),wq=a("a"),j8o=o("MegatronBertModel"),D8o=o(" (MegatronBert model)"),G8o=l(),ru=a("li"),hle=a("strong"),O8o=o("mobilebert"),V8o=o(" \u2014 "),Aq=a("a"),X8o=o("MobileBertModel"),z8o=o(" (MobileBERT model)"),W8o=l(),tu=a("li"),ple=a("strong"),Q8o=o("mpnet"),H8o=o(" \u2014 "),yq=a("a"),U8o=o("MPNetModel"),J8o=o(" (MPNet model)"),Y8o=l(),au=a("li"),ule=a("strong"),K8o=o("mt5"),Z8o=o(" \u2014 "),Lq=a("a"),ebo=o("MT5Model"),obo=o(" (mT5 model)"),rbo=l(),nu=a("li"),_le=a("strong"),tbo=o("nystromformer"),abo=o(" \u2014 "),xq=a("a"),nbo=o("NystromformerModel"),sbo=o(" (Nystromformer model)"),lbo=l(),su=a("li"),ble=a("strong"),ibo=o("openai-gpt"),dbo=o(" \u2014 "),$q=a("a"),cbo=o("OpenAIGPTModel"),fbo=o(" (OpenAI GPT model)"),mbo=l(),lu=a("li"),vle=a("strong"),gbo=o("opt"),hbo=o(" \u2014 "),kq=a("a"),pbo=o("OPTModel"),ubo=o(" (OPT model)"),_bo=l(),iu=a("li"),Fle=a("strong"),bbo=o("pegasus"),vbo=o(" \u2014 "),Sq=a("a"),Fbo=o("PegasusModel"),Tbo=o(" (Pegasus model)"),Mbo=l(),du=a("li"),Tle=a("strong"),Ebo=o("perceiver"),Cbo=o(" \u2014 "),Rq=a("a"),wbo=o("PerceiverModel"),Abo=o(" (Perceiver model)"),ybo=l(),cu=a("li"),Mle=a("strong"),Lbo=o("plbart"),xbo=o(" \u2014 "),Pq=a("a"),$bo=o("PLBartModel"),kbo=o(" (PLBart model)"),Sbo=l(),fu=a("li"),Ele=a("strong"),Rbo=o("poolformer"),Pbo=o(" \u2014 "),Bq=a("a"),Bbo=o("PoolFormerModel"),Ibo=o(" (PoolFormer model)"),qbo=l(),mu=a("li"),Cle=a("strong"),Nbo=o("prophetnet"),jbo=o(" \u2014 "),Iq=a("a"),Dbo=o("ProphetNetModel"),Gbo=o(" (ProphetNet model)"),Obo=l(),gu=a("li"),wle=a("strong"),Vbo=o("qdqbert"),Xbo=o(" \u2014 "),qq=a("a"),zbo=o("QDQBertModel"),Wbo=o(" (QDQBert model)"),Qbo=l(),hu=a("li"),Ale=a("strong"),Hbo=o("reformer"),Ubo=o(" \u2014 "),Nq=a("a"),Jbo=o("ReformerModel"),Ybo=o(" (Reformer model)"),Kbo=l(),pu=a("li"),yle=a("strong"),Zbo=o("regnet"),e2o=o(" \u2014 "),jq=a("a"),o2o=o("RegNetModel"),r2o=o(" (RegNet model)"),t2o=l(),uu=a("li"),Lle=a("strong"),a2o=o("rembert"),n2o=o(" \u2014 "),Dq=a("a"),s2o=o("RemBertModel"),l2o=o(" (RemBERT model)"),i2o=l(),_u=a("li"),xle=a("strong"),d2o=o("resnet"),c2o=o(" \u2014 "),Gq=a("a"),f2o=o("ResNetModel"),m2o=o(" (ResNet model)"),g2o=l(),bu=a("li"),$le=a("strong"),h2o=o("retribert"),p2o=o(" \u2014 "),Oq=a("a"),u2o=o("RetriBertModel"),_2o=o(" (RetriBERT model)"),b2o=l(),vu=a("li"),kle=a("strong"),v2o=o("roberta"),F2o=o(" \u2014 "),Vq=a("a"),T2o=o("RobertaModel"),M2o=o(" (RoBERTa model)"),E2o=l(),Fu=a("li"),Sle=a("strong"),C2o=o("roformer"),w2o=o(" \u2014 "),Xq=a("a"),A2o=o("RoFormerModel"),y2o=o(" (RoFormer model)"),L2o=l(),Tu=a("li"),Rle=a("strong"),x2o=o("segformer"),$2o=o(" \u2014 "),zq=a("a"),k2o=o("SegformerModel"),S2o=o(" (SegFormer model)"),R2o=l(),Mu=a("li"),Ple=a("strong"),P2o=o("sew"),B2o=o(" \u2014 "),Wq=a("a"),I2o=o("SEWModel"),q2o=o(" (SEW model)"),N2o=l(),Eu=a("li"),Ble=a("strong"),j2o=o("sew-d"),D2o=o(" \u2014 "),Qq=a("a"),G2o=o("SEWDModel"),O2o=o(" (SEW-D model)"),V2o=l(),Cu=a("li"),Ile=a("strong"),X2o=o("speech_to_text"),z2o=o(" \u2014 "),Hq=a("a"),W2o=o("Speech2TextModel"),Q2o=o(" (Speech2Text model)"),H2o=l(),wu=a("li"),qle=a("strong"),U2o=o("splinter"),J2o=o(" \u2014 "),Uq=a("a"),Y2o=o("SplinterModel"),K2o=o(" (Splinter model)"),Z2o=l(),Au=a("li"),Nle=a("strong"),evo=o("squeezebert"),ovo=o(" \u2014 "),Jq=a("a"),rvo=o("SqueezeBertModel"),tvo=o(" (SqueezeBERT model)"),avo=l(),yu=a("li"),jle=a("strong"),nvo=o("swin"),svo=o(" \u2014 "),Yq=a("a"),lvo=o("SwinModel"),ivo=o(" (Swin model)"),dvo=l(),Lu=a("li"),Dle=a("strong"),cvo=o("t5"),fvo=o(" \u2014 "),Kq=a("a"),mvo=o("T5Model"),gvo=o(" (T5 model)"),hvo=l(),xu=a("li"),Gle=a("strong"),pvo=o("tapas"),uvo=o(" \u2014 "),Zq=a("a"),_vo=o("TapasModel"),bvo=o(" (TAPAS model)"),vvo=l(),$u=a("li"),Ole=a("strong"),Fvo=o("trajectory_transformer"),Tvo=o(" \u2014 "),eN=a("a"),Mvo=o("TrajectoryTransformerModel"),Evo=o(" (Trajectory Transformer model)"),Cvo=l(),ku=a("li"),Vle=a("strong"),wvo=o("transfo-xl"),Avo=o(" \u2014 "),oN=a("a"),yvo=o("TransfoXLModel"),Lvo=o(" (Transformer-XL model)"),xvo=l(),Su=a("li"),Xle=a("strong"),$vo=o("unispeech"),kvo=o(" \u2014 "),rN=a("a"),Svo=o("UniSpeechModel"),Rvo=o(" (UniSpeech model)"),Pvo=l(),Ru=a("li"),zle=a("strong"),Bvo=o("unispeech-sat"),Ivo=o(" \u2014 "),tN=a("a"),qvo=o("UniSpeechSatModel"),Nvo=o(" (UniSpeechSat model)"),jvo=l(),Pu=a("li"),Wle=a("strong"),Dvo=o("van"),Gvo=o(" \u2014 "),aN=a("a"),Ovo=o("VanModel"),Vvo=o(" (VAN model)"),Xvo=l(),Bu=a("li"),Qle=a("strong"),zvo=o("vilt"),Wvo=o(" \u2014 "),nN=a("a"),Qvo=o("ViltModel"),Hvo=o(" (ViLT model)"),Uvo=l(),Iu=a("li"),Hle=a("strong"),Jvo=o("vision-text-dual-encoder"),Yvo=o(" \u2014 "),sN=a("a"),Kvo=o("VisionTextDualEncoderModel"),Zvo=o(" (VisionTextDualEncoder model)"),e3o=l(),qu=a("li"),Ule=a("strong"),o3o=o("visual_bert"),r3o=o(" \u2014 "),lN=a("a"),t3o=o("VisualBertModel"),a3o=o(" (VisualBert model)"),n3o=l(),Nu=a("li"),Jle=a("strong"),s3o=o("vit"),l3o=o(" \u2014 "),iN=a("a"),i3o=o("ViTModel"),d3o=o(" (ViT model)"),c3o=l(),ju=a("li"),Yle=a("strong"),f3o=o("vit_mae"),m3o=o(" \u2014 "),dN=a("a"),g3o=o("ViTMAEModel"),h3o=o(" (ViTMAE model)"),p3o=l(),Du=a("li"),Kle=a("strong"),u3o=o("wav2vec2"),_3o=o(" \u2014 "),cN=a("a"),b3o=o("Wav2Vec2Model"),v3o=o(" (Wav2Vec2 model)"),F3o=l(),Gu=a("li"),Zle=a("strong"),T3o=o("wav2vec2-conformer"),M3o=o(" \u2014 "),fN=a("a"),E3o=o("Wav2Vec2ConformerModel"),C3o=o(" (Wav2Vec2-Conformer model)"),w3o=l(),Ou=a("li"),eie=a("strong"),A3o=o("wavlm"),y3o=o(" \u2014 "),mN=a("a"),L3o=o("WavLMModel"),x3o=o(" (WavLM model)"),$3o=l(),Vu=a("li"),oie=a("strong"),k3o=o("xglm"),S3o=o(" \u2014 "),gN=a("a"),R3o=o("XGLMModel"),P3o=o(" (XGLM model)"),B3o=l(),Xu=a("li"),rie=a("strong"),I3o=o("xlm"),q3o=o(" \u2014 "),hN=a("a"),N3o=o("XLMModel"),j3o=o(" (XLM model)"),D3o=l(),zu=a("li"),tie=a("strong"),G3o=o("xlm-prophetnet"),O3o=o(" \u2014 "),pN=a("a"),V3o=o("XLMProphetNetModel"),X3o=o(" (XLMProphetNet model)"),z3o=l(),Wu=a("li"),aie=a("strong"),W3o=o("xlm-roberta"),Q3o=o(" \u2014 "),uN=a("a"),H3o=o("XLMRobertaModel"),U3o=o(" (XLM-RoBERTa model)"),J3o=l(),Qu=a("li"),nie=a("strong"),Y3o=o("xlm-roberta-xl"),K3o=o(" \u2014 "),_N=a("a"),Z3o=o("XLMRobertaXLModel"),eFo=o(" (XLM-RoBERTa-XL model)"),oFo=l(),Hu=a("li"),sie=a("strong"),rFo=o("xlnet"),tFo=o(" \u2014 "),bN=a("a"),aFo=o("XLNetModel"),nFo=o(" (XLNet model)"),sFo=l(),Uu=a("li"),lie=a("strong"),lFo=o("yolos"),iFo=o(" \u2014 "),vN=a("a"),dFo=o("YolosModel"),cFo=o(" (YOLOS model)"),fFo=l(),Ju=a("li"),iie=a("strong"),mFo=o("yoso"),gFo=o(" \u2014 "),FN=a("a"),hFo=o("YosoModel"),pFo=o(" (YOSO model)"),uFo=l(),Yu=a("p"),_Fo=o("The model is set in evaluation mode by default using "),die=a("code"),bFo=o("model.eval()"),vFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),FFo=o("model.train()"),TFo=l(),F(Ku.$$.fragment),nNe=l(),Li=a("h2"),Zu=a("a"),fie=a("span"),F(r6.$$.fragment),MFo=l(),mie=a("span"),EFo=o("AutoModelForPreTraining"),sNe=l(),xo=a("div"),F(t6.$$.fragment),CFo=l(),xi=a("p"),wFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TN=a("a"),AFo=o("from_pretrained()"),yFo=o(" class method or the "),MN=a("a"),LFo=o("from_config()"),xFo=o(` class
method.`),$Fo=l(),a6=a("p"),kFo=o("This class cannot be instantiated directly using "),gie=a("code"),SFo=o("__init__()"),RFo=o(" (throws an error)."),PFo=l(),at=a("div"),F(n6.$$.fragment),BFo=l(),hie=a("p"),IFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qFo=l(),$i=a("p"),NFo=o(`Note:
Loading a model from its configuration file does `),pie=a("strong"),jFo=o("not"),DFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=a("a"),GFo=o("from_pretrained()"),OFo=o(" to load the model weights."),VFo=l(),F(e_.$$.fragment),XFo=l(),Ye=a("div"),F(s6.$$.fragment),zFo=l(),uie=a("p"),WFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QFo=l(),xa=a("p"),HFo=o("The model class to instantiate is selected based on the "),_ie=a("code"),UFo=o("model_type"),JFo=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),ZFo=o("pretrained_model_name_or_path"),eTo=o(":"),oTo=l(),G=a("ul"),o_=a("li"),Fie=a("strong"),rTo=o("albert"),tTo=o(" \u2014 "),CN=a("a"),aTo=o("AlbertForPreTraining"),nTo=o(" (ALBERT model)"),sTo=l(),r_=a("li"),Tie=a("strong"),lTo=o("bart"),iTo=o(" \u2014 "),wN=a("a"),dTo=o("BartForConditionalGeneration"),cTo=o(" (BART model)"),fTo=l(),t_=a("li"),Mie=a("strong"),mTo=o("bert"),gTo=o(" \u2014 "),AN=a("a"),hTo=o("BertForPreTraining"),pTo=o(" (BERT model)"),uTo=l(),a_=a("li"),Eie=a("strong"),_To=o("big_bird"),bTo=o(" \u2014 "),yN=a("a"),vTo=o("BigBirdForPreTraining"),FTo=o(" (BigBird model)"),TTo=l(),n_=a("li"),Cie=a("strong"),MTo=o("camembert"),ETo=o(" \u2014 "),LN=a("a"),CTo=o("CamembertForMaskedLM"),wTo=o(" (CamemBERT model)"),ATo=l(),s_=a("li"),wie=a("strong"),yTo=o("ctrl"),LTo=o(" \u2014 "),xN=a("a"),xTo=o("CTRLLMHeadModel"),$To=o(" (CTRL model)"),kTo=l(),l_=a("li"),Aie=a("strong"),STo=o("data2vec-text"),RTo=o(" \u2014 "),$N=a("a"),PTo=o("Data2VecTextForMaskedLM"),BTo=o(" (Data2VecText model)"),ITo=l(),i_=a("li"),yie=a("strong"),qTo=o("deberta"),NTo=o(" \u2014 "),kN=a("a"),jTo=o("DebertaForMaskedLM"),DTo=o(" (DeBERTa model)"),GTo=l(),d_=a("li"),Lie=a("strong"),OTo=o("deberta-v2"),VTo=o(" \u2014 "),SN=a("a"),XTo=o("DebertaV2ForMaskedLM"),zTo=o(" (DeBERTa-v2 model)"),WTo=l(),c_=a("li"),xie=a("strong"),QTo=o("distilbert"),HTo=o(" \u2014 "),RN=a("a"),UTo=o("DistilBertForMaskedLM"),JTo=o(" (DistilBERT model)"),YTo=l(),f_=a("li"),$ie=a("strong"),KTo=o("electra"),ZTo=o(" \u2014 "),PN=a("a"),e7o=o("ElectraForPreTraining"),o7o=o(" (ELECTRA model)"),r7o=l(),m_=a("li"),kie=a("strong"),t7o=o("flaubert"),a7o=o(" \u2014 "),BN=a("a"),n7o=o("FlaubertWithLMHeadModel"),s7o=o(" (FlauBERT model)"),l7o=l(),g_=a("li"),Sie=a("strong"),i7o=o("flava"),d7o=o(" \u2014 "),IN=a("a"),c7o=o("FlavaForPreTraining"),f7o=o(" (Flava model)"),m7o=l(),h_=a("li"),Rie=a("strong"),g7o=o("fnet"),h7o=o(" \u2014 "),qN=a("a"),p7o=o("FNetForPreTraining"),u7o=o(" (FNet model)"),_7o=l(),p_=a("li"),Pie=a("strong"),b7o=o("fsmt"),v7o=o(" \u2014 "),NN=a("a"),F7o=o("FSMTForConditionalGeneration"),T7o=o(" (FairSeq Machine-Translation model)"),M7o=l(),u_=a("li"),Bie=a("strong"),E7o=o("funnel"),C7o=o(" \u2014 "),jN=a("a"),w7o=o("FunnelForPreTraining"),A7o=o(" (Funnel Transformer model)"),y7o=l(),__=a("li"),Iie=a("strong"),L7o=o("gpt2"),x7o=o(" \u2014 "),DN=a("a"),$7o=o("GPT2LMHeadModel"),k7o=o(" (OpenAI GPT-2 model)"),S7o=l(),b_=a("li"),qie=a("strong"),R7o=o("ibert"),P7o=o(" \u2014 "),GN=a("a"),B7o=o("IBertForMaskedLM"),I7o=o(" (I-BERT model)"),q7o=l(),v_=a("li"),Nie=a("strong"),N7o=o("layoutlm"),j7o=o(" \u2014 "),ON=a("a"),D7o=o("LayoutLMForMaskedLM"),G7o=o(" (LayoutLM model)"),O7o=l(),F_=a("li"),jie=a("strong"),V7o=o("longformer"),X7o=o(" \u2014 "),VN=a("a"),z7o=o("LongformerForMaskedLM"),W7o=o(" (Longformer model)"),Q7o=l(),T_=a("li"),Die=a("strong"),H7o=o("lxmert"),U7o=o(" \u2014 "),XN=a("a"),J7o=o("LxmertForPreTraining"),Y7o=o(" (LXMERT model)"),K7o=l(),M_=a("li"),Gie=a("strong"),Z7o=o("megatron-bert"),eMo=o(" \u2014 "),zN=a("a"),oMo=o("MegatronBertForPreTraining"),rMo=o(" (MegatronBert model)"),tMo=l(),E_=a("li"),Oie=a("strong"),aMo=o("mobilebert"),nMo=o(" \u2014 "),WN=a("a"),sMo=o("MobileBertForPreTraining"),lMo=o(" (MobileBERT model)"),iMo=l(),C_=a("li"),Vie=a("strong"),dMo=o("mpnet"),cMo=o(" \u2014 "),QN=a("a"),fMo=o("MPNetForMaskedLM"),mMo=o(" (MPNet model)"),gMo=l(),w_=a("li"),Xie=a("strong"),hMo=o("openai-gpt"),pMo=o(" \u2014 "),HN=a("a"),uMo=o("OpenAIGPTLMHeadModel"),_Mo=o(" (OpenAI GPT model)"),bMo=l(),A_=a("li"),zie=a("strong"),vMo=o("retribert"),FMo=o(" \u2014 "),UN=a("a"),TMo=o("RetriBertModel"),MMo=o(" (RetriBERT model)"),EMo=l(),y_=a("li"),Wie=a("strong"),CMo=o("roberta"),wMo=o(" \u2014 "),JN=a("a"),AMo=o("RobertaForMaskedLM"),yMo=o(" (RoBERTa model)"),LMo=l(),L_=a("li"),Qie=a("strong"),xMo=o("splinter"),$Mo=o(" \u2014 "),YN=a("a"),kMo=o("SplinterForPreTraining"),SMo=o(" (Splinter model)"),RMo=l(),x_=a("li"),Hie=a("strong"),PMo=o("squeezebert"),BMo=o(" \u2014 "),KN=a("a"),IMo=o("SqueezeBertForMaskedLM"),qMo=o(" (SqueezeBERT model)"),NMo=l(),$_=a("li"),Uie=a("strong"),jMo=o("t5"),DMo=o(" \u2014 "),ZN=a("a"),GMo=o("T5ForConditionalGeneration"),OMo=o(" (T5 model)"),VMo=l(),k_=a("li"),Jie=a("strong"),XMo=o("tapas"),zMo=o(" \u2014 "),ej=a("a"),WMo=o("TapasForMaskedLM"),QMo=o(" (TAPAS model)"),HMo=l(),S_=a("li"),Yie=a("strong"),UMo=o("transfo-xl"),JMo=o(" \u2014 "),oj=a("a"),YMo=o("TransfoXLLMHeadModel"),KMo=o(" (Transformer-XL model)"),ZMo=l(),R_=a("li"),Kie=a("strong"),e4o=o("unispeech"),o4o=o(" \u2014 "),rj=a("a"),r4o=o("UniSpeechForPreTraining"),t4o=o(" (UniSpeech model)"),a4o=l(),P_=a("li"),Zie=a("strong"),n4o=o("unispeech-sat"),s4o=o(" \u2014 "),tj=a("a"),l4o=o("UniSpeechSatForPreTraining"),i4o=o(" (UniSpeechSat model)"),d4o=l(),B_=a("li"),ede=a("strong"),c4o=o("visual_bert"),f4o=o(" \u2014 "),aj=a("a"),m4o=o("VisualBertForPreTraining"),g4o=o(" (VisualBert model)"),h4o=l(),I_=a("li"),ode=a("strong"),p4o=o("vit_mae"),u4o=o(" \u2014 "),nj=a("a"),_4o=o("ViTMAEForPreTraining"),b4o=o(" (ViTMAE model)"),v4o=l(),q_=a("li"),rde=a("strong"),F4o=o("wav2vec2"),T4o=o(" \u2014 "),sj=a("a"),M4o=o("Wav2Vec2ForPreTraining"),E4o=o(" (Wav2Vec2 model)"),C4o=l(),N_=a("li"),tde=a("strong"),w4o=o("wav2vec2-conformer"),A4o=o(" \u2014 "),lj=a("a"),y4o=o("Wav2Vec2ConformerForPreTraining"),L4o=o(" (Wav2Vec2-Conformer model)"),x4o=l(),j_=a("li"),ade=a("strong"),$4o=o("xlm"),k4o=o(" \u2014 "),ij=a("a"),S4o=o("XLMWithLMHeadModel"),R4o=o(" (XLM model)"),P4o=l(),D_=a("li"),nde=a("strong"),B4o=o("xlm-roberta"),I4o=o(" \u2014 "),dj=a("a"),q4o=o("XLMRobertaForMaskedLM"),N4o=o(" (XLM-RoBERTa model)"),j4o=l(),G_=a("li"),sde=a("strong"),D4o=o("xlm-roberta-xl"),G4o=o(" \u2014 "),cj=a("a"),O4o=o("XLMRobertaXLForMaskedLM"),V4o=o(" (XLM-RoBERTa-XL model)"),X4o=l(),O_=a("li"),lde=a("strong"),z4o=o("xlnet"),W4o=o(" \u2014 "),fj=a("a"),Q4o=o("XLNetLMHeadModel"),H4o=o(" (XLNet model)"),U4o=l(),V_=a("p"),J4o=o("The model is set in evaluation mode by default using "),ide=a("code"),Y4o=o("model.eval()"),K4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=a("code"),Z4o=o("model.train()"),eEo=l(),F(X_.$$.fragment),lNe=l(),ki=a("h2"),z_=a("a"),cde=a("span"),F(l6.$$.fragment),oEo=l(),fde=a("span"),rEo=o("AutoModelForCausalLM"),iNe=l(),$o=a("div"),F(i6.$$.fragment),tEo=l(),Si=a("p"),aEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mj=a("a"),nEo=o("from_pretrained()"),sEo=o(" class method or the "),gj=a("a"),lEo=o("from_config()"),iEo=o(` class
method.`),dEo=l(),d6=a("p"),cEo=o("This class cannot be instantiated directly using "),mde=a("code"),fEo=o("__init__()"),mEo=o(" (throws an error)."),gEo=l(),nt=a("div"),F(c6.$$.fragment),hEo=l(),gde=a("p"),pEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uEo=l(),Ri=a("p"),_Eo=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),bEo=o("not"),vEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),FEo=o("from_pretrained()"),TEo=o(" to load the model weights."),MEo=l(),F(W_.$$.fragment),EEo=l(),Ke=a("div"),F(f6.$$.fragment),CEo=l(),pde=a("p"),wEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AEo=l(),$a=a("p"),yEo=o("The model class to instantiate is selected based on the "),ude=a("code"),LEo=o("model_type"),xEo=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),$Eo=o("pretrained_model_name_or_path"),kEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),SEo=o("pretrained_model_name_or_path"),REo=o(":"),PEo=l(),z=a("ul"),Q_=a("li"),vde=a("strong"),BEo=o("bart"),IEo=o(" \u2014 "),pj=a("a"),qEo=o("BartForCausalLM"),NEo=o(" (BART model)"),jEo=l(),H_=a("li"),Fde=a("strong"),DEo=o("bert"),GEo=o(" \u2014 "),uj=a("a"),OEo=o("BertLMHeadModel"),VEo=o(" (BERT model)"),XEo=l(),U_=a("li"),Tde=a("strong"),zEo=o("bert-generation"),WEo=o(" \u2014 "),_j=a("a"),QEo=o("BertGenerationDecoder"),HEo=o(" (Bert Generation model)"),UEo=l(),J_=a("li"),Mde=a("strong"),JEo=o("big_bird"),YEo=o(" \u2014 "),bj=a("a"),KEo=o("BigBirdForCausalLM"),ZEo=o(" (BigBird model)"),eCo=l(),Y_=a("li"),Ede=a("strong"),oCo=o("bigbird_pegasus"),rCo=o(" \u2014 "),vj=a("a"),tCo=o("BigBirdPegasusForCausalLM"),aCo=o(" (BigBirdPegasus model)"),nCo=l(),K_=a("li"),Cde=a("strong"),sCo=o("blenderbot"),lCo=o(" \u2014 "),Fj=a("a"),iCo=o("BlenderbotForCausalLM"),dCo=o(" (Blenderbot model)"),cCo=l(),Z_=a("li"),wde=a("strong"),fCo=o("blenderbot-small"),mCo=o(" \u2014 "),Tj=a("a"),gCo=o("BlenderbotSmallForCausalLM"),hCo=o(" (BlenderbotSmall model)"),pCo=l(),e1=a("li"),Ade=a("strong"),uCo=o("camembert"),_Co=o(" \u2014 "),Mj=a("a"),bCo=o("CamembertForCausalLM"),vCo=o(" (CamemBERT model)"),FCo=l(),o1=a("li"),yde=a("strong"),TCo=o("ctrl"),MCo=o(" \u2014 "),Ej=a("a"),ECo=o("CTRLLMHeadModel"),CCo=o(" (CTRL model)"),wCo=l(),r1=a("li"),Lde=a("strong"),ACo=o("data2vec-text"),yCo=o(" \u2014 "),Cj=a("a"),LCo=o("Data2VecTextForCausalLM"),xCo=o(" (Data2VecText model)"),$Co=l(),t1=a("li"),xde=a("strong"),kCo=o("electra"),SCo=o(" \u2014 "),wj=a("a"),RCo=o("ElectraForCausalLM"),PCo=o(" (ELECTRA model)"),BCo=l(),a1=a("li"),$de=a("strong"),ICo=o("gpt2"),qCo=o(" \u2014 "),Aj=a("a"),NCo=o("GPT2LMHeadModel"),jCo=o(" (OpenAI GPT-2 model)"),DCo=l(),n1=a("li"),kde=a("strong"),GCo=o("gpt_neo"),OCo=o(" \u2014 "),yj=a("a"),VCo=o("GPTNeoForCausalLM"),XCo=o(" (GPT Neo model)"),zCo=l(),s1=a("li"),Sde=a("strong"),WCo=o("gptj"),QCo=o(" \u2014 "),Lj=a("a"),HCo=o("GPTJForCausalLM"),UCo=o(" (GPT-J model)"),JCo=l(),l1=a("li"),Rde=a("strong"),YCo=o("marian"),KCo=o(" \u2014 "),xj=a("a"),ZCo=o("MarianForCausalLM"),e5o=o(" (Marian model)"),o5o=l(),i1=a("li"),Pde=a("strong"),r5o=o("mbart"),t5o=o(" \u2014 "),$j=a("a"),a5o=o("MBartForCausalLM"),n5o=o(" (mBART model)"),s5o=l(),d1=a("li"),Bde=a("strong"),l5o=o("megatron-bert"),i5o=o(" \u2014 "),kj=a("a"),d5o=o("MegatronBertForCausalLM"),c5o=o(" (MegatronBert model)"),f5o=l(),c1=a("li"),Ide=a("strong"),m5o=o("openai-gpt"),g5o=o(" \u2014 "),Sj=a("a"),h5o=o("OpenAIGPTLMHeadModel"),p5o=o(" (OpenAI GPT model)"),u5o=l(),f1=a("li"),qde=a("strong"),_5o=o("opt"),b5o=o(" \u2014 "),Rj=a("a"),v5o=o("OPTForCausalLM"),F5o=o(" (OPT model)"),T5o=l(),m1=a("li"),Nde=a("strong"),M5o=o("pegasus"),E5o=o(" \u2014 "),Pj=a("a"),C5o=o("PegasusForCausalLM"),w5o=o(" (Pegasus model)"),A5o=l(),g1=a("li"),jde=a("strong"),y5o=o("plbart"),L5o=o(" \u2014 "),Bj=a("a"),x5o=o("PLBartForCausalLM"),$5o=o(" (PLBart model)"),k5o=l(),h1=a("li"),Dde=a("strong"),S5o=o("prophetnet"),R5o=o(" \u2014 "),Ij=a("a"),P5o=o("ProphetNetForCausalLM"),B5o=o(" (ProphetNet model)"),I5o=l(),p1=a("li"),Gde=a("strong"),q5o=o("qdqbert"),N5o=o(" \u2014 "),qj=a("a"),j5o=o("QDQBertLMHeadModel"),D5o=o(" (QDQBert model)"),G5o=l(),u1=a("li"),Ode=a("strong"),O5o=o("reformer"),V5o=o(" \u2014 "),Nj=a("a"),X5o=o("ReformerModelWithLMHead"),z5o=o(" (Reformer model)"),W5o=l(),_1=a("li"),Vde=a("strong"),Q5o=o("rembert"),H5o=o(" \u2014 "),jj=a("a"),U5o=o("RemBertForCausalLM"),J5o=o(" (RemBERT model)"),Y5o=l(),b1=a("li"),Xde=a("strong"),K5o=o("roberta"),Z5o=o(" \u2014 "),Dj=a("a"),ewo=o("RobertaForCausalLM"),owo=o(" (RoBERTa model)"),rwo=l(),v1=a("li"),zde=a("strong"),two=o("roformer"),awo=o(" \u2014 "),Gj=a("a"),nwo=o("RoFormerForCausalLM"),swo=o(" (RoFormer model)"),lwo=l(),F1=a("li"),Wde=a("strong"),iwo=o("speech_to_text_2"),dwo=o(" \u2014 "),Oj=a("a"),cwo=o("Speech2Text2ForCausalLM"),fwo=o(" (Speech2Text2 model)"),mwo=l(),T1=a("li"),Qde=a("strong"),gwo=o("transfo-xl"),hwo=o(" \u2014 "),Vj=a("a"),pwo=o("TransfoXLLMHeadModel"),uwo=o(" (Transformer-XL model)"),_wo=l(),M1=a("li"),Hde=a("strong"),bwo=o("trocr"),vwo=o(" \u2014 "),Xj=a("a"),Fwo=o("TrOCRForCausalLM"),Two=o(" (TrOCR model)"),Mwo=l(),E1=a("li"),Ude=a("strong"),Ewo=o("xglm"),Cwo=o(" \u2014 "),zj=a("a"),wwo=o("XGLMForCausalLM"),Awo=o(" (XGLM model)"),ywo=l(),C1=a("li"),Jde=a("strong"),Lwo=o("xlm"),xwo=o(" \u2014 "),Wj=a("a"),$wo=o("XLMWithLMHeadModel"),kwo=o(" (XLM model)"),Swo=l(),w1=a("li"),Yde=a("strong"),Rwo=o("xlm-prophetnet"),Pwo=o(" \u2014 "),Qj=a("a"),Bwo=o("XLMProphetNetForCausalLM"),Iwo=o(" (XLMProphetNet model)"),qwo=l(),A1=a("li"),Kde=a("strong"),Nwo=o("xlm-roberta"),jwo=o(" \u2014 "),Hj=a("a"),Dwo=o("XLMRobertaForCausalLM"),Gwo=o(" (XLM-RoBERTa model)"),Owo=l(),y1=a("li"),Zde=a("strong"),Vwo=o("xlm-roberta-xl"),Xwo=o(" \u2014 "),Uj=a("a"),zwo=o("XLMRobertaXLForCausalLM"),Wwo=o(" (XLM-RoBERTa-XL model)"),Qwo=l(),L1=a("li"),ece=a("strong"),Hwo=o("xlnet"),Uwo=o(" \u2014 "),Jj=a("a"),Jwo=o("XLNetLMHeadModel"),Ywo=o(" (XLNet model)"),Kwo=l(),x1=a("p"),Zwo=o("The model is set in evaluation mode by default using "),oce=a("code"),e0o=o("model.eval()"),o0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rce=a("code"),r0o=o("model.train()"),t0o=l(),F($1.$$.fragment),dNe=l(),Pi=a("h2"),k1=a("a"),tce=a("span"),F(m6.$$.fragment),a0o=l(),ace=a("span"),n0o=o("AutoModelForMaskedLM"),cNe=l(),ko=a("div"),F(g6.$$.fragment),s0o=l(),Bi=a("p"),l0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yj=a("a"),i0o=o("from_pretrained()"),d0o=o(" class method or the "),Kj=a("a"),c0o=o("from_config()"),f0o=o(` class
method.`),m0o=l(),h6=a("p"),g0o=o("This class cannot be instantiated directly using "),nce=a("code"),h0o=o("__init__()"),p0o=o(" (throws an error)."),u0o=l(),st=a("div"),F(p6.$$.fragment),_0o=l(),sce=a("p"),b0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),v0o=l(),Ii=a("p"),F0o=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),T0o=o("not"),M0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=a("a"),E0o=o("from_pretrained()"),C0o=o(" to load the model weights."),w0o=l(),F(S1.$$.fragment),A0o=l(),Ze=a("div"),F(u6.$$.fragment),y0o=l(),ice=a("p"),L0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x0o=l(),ka=a("p"),$0o=o("The model class to instantiate is selected based on the "),dce=a("code"),k0o=o("model_type"),S0o=o(` property of the config object (either
passed as an argument or loaded from `),cce=a("code"),R0o=o("pretrained_model_name_or_path"),P0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),B0o=o("pretrained_model_name_or_path"),I0o=o(":"),q0o=l(),W=a("ul"),R1=a("li"),mce=a("strong"),N0o=o("albert"),j0o=o(" \u2014 "),eD=a("a"),D0o=o("AlbertForMaskedLM"),G0o=o(" (ALBERT model)"),O0o=l(),P1=a("li"),gce=a("strong"),V0o=o("bart"),X0o=o(" \u2014 "),oD=a("a"),z0o=o("BartForConditionalGeneration"),W0o=o(" (BART model)"),Q0o=l(),B1=a("li"),hce=a("strong"),H0o=o("bert"),U0o=o(" \u2014 "),rD=a("a"),J0o=o("BertForMaskedLM"),Y0o=o(" (BERT model)"),K0o=l(),I1=a("li"),pce=a("strong"),Z0o=o("big_bird"),eAo=o(" \u2014 "),tD=a("a"),oAo=o("BigBirdForMaskedLM"),rAo=o(" (BigBird model)"),tAo=l(),q1=a("li"),uce=a("strong"),aAo=o("camembert"),nAo=o(" \u2014 "),aD=a("a"),sAo=o("CamembertForMaskedLM"),lAo=o(" (CamemBERT model)"),iAo=l(),N1=a("li"),_ce=a("strong"),dAo=o("convbert"),cAo=o(" \u2014 "),nD=a("a"),fAo=o("ConvBertForMaskedLM"),mAo=o(" (ConvBERT model)"),gAo=l(),j1=a("li"),bce=a("strong"),hAo=o("data2vec-text"),pAo=o(" \u2014 "),sD=a("a"),uAo=o("Data2VecTextForMaskedLM"),_Ao=o(" (Data2VecText model)"),bAo=l(),D1=a("li"),vce=a("strong"),vAo=o("deberta"),FAo=o(" \u2014 "),lD=a("a"),TAo=o("DebertaForMaskedLM"),MAo=o(" (DeBERTa model)"),EAo=l(),G1=a("li"),Fce=a("strong"),CAo=o("deberta-v2"),wAo=o(" \u2014 "),iD=a("a"),AAo=o("DebertaV2ForMaskedLM"),yAo=o(" (DeBERTa-v2 model)"),LAo=l(),O1=a("li"),Tce=a("strong"),xAo=o("distilbert"),$Ao=o(" \u2014 "),dD=a("a"),kAo=o("DistilBertForMaskedLM"),SAo=o(" (DistilBERT model)"),RAo=l(),V1=a("li"),Mce=a("strong"),PAo=o("electra"),BAo=o(" \u2014 "),cD=a("a"),IAo=o("ElectraForMaskedLM"),qAo=o(" (ELECTRA model)"),NAo=l(),X1=a("li"),Ece=a("strong"),jAo=o("flaubert"),DAo=o(" \u2014 "),fD=a("a"),GAo=o("FlaubertWithLMHeadModel"),OAo=o(" (FlauBERT model)"),VAo=l(),z1=a("li"),Cce=a("strong"),XAo=o("fnet"),zAo=o(" \u2014 "),mD=a("a"),WAo=o("FNetForMaskedLM"),QAo=o(" (FNet model)"),HAo=l(),W1=a("li"),wce=a("strong"),UAo=o("funnel"),JAo=o(" \u2014 "),gD=a("a"),YAo=o("FunnelForMaskedLM"),KAo=o(" (Funnel Transformer model)"),ZAo=l(),Q1=a("li"),Ace=a("strong"),e6o=o("ibert"),o6o=o(" \u2014 "),hD=a("a"),r6o=o("IBertForMaskedLM"),t6o=o(" (I-BERT model)"),a6o=l(),H1=a("li"),yce=a("strong"),n6o=o("layoutlm"),s6o=o(" \u2014 "),pD=a("a"),l6o=o("LayoutLMForMaskedLM"),i6o=o(" (LayoutLM model)"),d6o=l(),U1=a("li"),Lce=a("strong"),c6o=o("longformer"),f6o=o(" \u2014 "),uD=a("a"),m6o=o("LongformerForMaskedLM"),g6o=o(" (Longformer model)"),h6o=l(),J1=a("li"),xce=a("strong"),p6o=o("mbart"),u6o=o(" \u2014 "),_D=a("a"),_6o=o("MBartForConditionalGeneration"),b6o=o(" (mBART model)"),v6o=l(),Y1=a("li"),$ce=a("strong"),F6o=o("megatron-bert"),T6o=o(" \u2014 "),bD=a("a"),M6o=o("MegatronBertForMaskedLM"),E6o=o(" (MegatronBert model)"),C6o=l(),K1=a("li"),kce=a("strong"),w6o=o("mobilebert"),A6o=o(" \u2014 "),vD=a("a"),y6o=o("MobileBertForMaskedLM"),L6o=o(" (MobileBERT model)"),x6o=l(),Z1=a("li"),Sce=a("strong"),$6o=o("mpnet"),k6o=o(" \u2014 "),FD=a("a"),S6o=o("MPNetForMaskedLM"),R6o=o(" (MPNet model)"),P6o=l(),e8=a("li"),Rce=a("strong"),B6o=o("nystromformer"),I6o=o(" \u2014 "),TD=a("a"),q6o=o("NystromformerForMaskedLM"),N6o=o(" (Nystromformer model)"),j6o=l(),o8=a("li"),Pce=a("strong"),D6o=o("perceiver"),G6o=o(" \u2014 "),MD=a("a"),O6o=o("PerceiverForMaskedLM"),V6o=o(" (Perceiver model)"),X6o=l(),r8=a("li"),Bce=a("strong"),z6o=o("qdqbert"),W6o=o(" \u2014 "),ED=a("a"),Q6o=o("QDQBertForMaskedLM"),H6o=o(" (QDQBert model)"),U6o=l(),t8=a("li"),Ice=a("strong"),J6o=o("reformer"),Y6o=o(" \u2014 "),CD=a("a"),K6o=o("ReformerForMaskedLM"),Z6o=o(" (Reformer model)"),eyo=l(),a8=a("li"),qce=a("strong"),oyo=o("rembert"),ryo=o(" \u2014 "),wD=a("a"),tyo=o("RemBertForMaskedLM"),ayo=o(" (RemBERT model)"),nyo=l(),n8=a("li"),Nce=a("strong"),syo=o("roberta"),lyo=o(" \u2014 "),AD=a("a"),iyo=o("RobertaForMaskedLM"),dyo=o(" (RoBERTa model)"),cyo=l(),s8=a("li"),jce=a("strong"),fyo=o("roformer"),myo=o(" \u2014 "),yD=a("a"),gyo=o("RoFormerForMaskedLM"),hyo=o(" (RoFormer model)"),pyo=l(),l8=a("li"),Dce=a("strong"),uyo=o("squeezebert"),_yo=o(" \u2014 "),LD=a("a"),byo=o("SqueezeBertForMaskedLM"),vyo=o(" (SqueezeBERT model)"),Fyo=l(),i8=a("li"),Gce=a("strong"),Tyo=o("tapas"),Myo=o(" \u2014 "),xD=a("a"),Eyo=o("TapasForMaskedLM"),Cyo=o(" (TAPAS model)"),wyo=l(),d8=a("li"),Oce=a("strong"),Ayo=o("wav2vec2"),yyo=o(" \u2014 "),Vce=a("code"),Lyo=o("Wav2Vec2ForMaskedLM"),xyo=o(" (Wav2Vec2 model)"),$yo=l(),c8=a("li"),Xce=a("strong"),kyo=o("xlm"),Syo=o(" \u2014 "),$D=a("a"),Ryo=o("XLMWithLMHeadModel"),Pyo=o(" (XLM model)"),Byo=l(),f8=a("li"),zce=a("strong"),Iyo=o("xlm-roberta"),qyo=o(" \u2014 "),kD=a("a"),Nyo=o("XLMRobertaForMaskedLM"),jyo=o(" (XLM-RoBERTa model)"),Dyo=l(),m8=a("li"),Wce=a("strong"),Gyo=o("xlm-roberta-xl"),Oyo=o(" \u2014 "),SD=a("a"),Vyo=o("XLMRobertaXLForMaskedLM"),Xyo=o(" (XLM-RoBERTa-XL model)"),zyo=l(),g8=a("li"),Qce=a("strong"),Wyo=o("yoso"),Qyo=o(" \u2014 "),RD=a("a"),Hyo=o("YosoForMaskedLM"),Uyo=o(" (YOSO model)"),Jyo=l(),h8=a("p"),Yyo=o("The model is set in evaluation mode by default using "),Hce=a("code"),Kyo=o("model.eval()"),Zyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),eLo=o("model.train()"),oLo=l(),F(p8.$$.fragment),fNe=l(),qi=a("h2"),u8=a("a"),Jce=a("span"),F(_6.$$.fragment),rLo=l(),Yce=a("span"),tLo=o("AutoModelForSeq2SeqLM"),mNe=l(),So=a("div"),F(b6.$$.fragment),aLo=l(),Ni=a("p"),nLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PD=a("a"),sLo=o("from_pretrained()"),lLo=o(" class method or the "),BD=a("a"),iLo=o("from_config()"),dLo=o(` class
method.`),cLo=l(),v6=a("p"),fLo=o("This class cannot be instantiated directly using "),Kce=a("code"),mLo=o("__init__()"),gLo=o(" (throws an error)."),hLo=l(),lt=a("div"),F(F6.$$.fragment),pLo=l(),Zce=a("p"),uLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Lo=l(),ji=a("p"),bLo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),vLo=o("not"),FLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=a("a"),TLo=o("from_pretrained()"),MLo=o(" to load the model weights."),ELo=l(),F(_8.$$.fragment),CLo=l(),eo=a("div"),F(T6.$$.fragment),wLo=l(),ofe=a("p"),ALo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yLo=l(),Sa=a("p"),LLo=o("The model class to instantiate is selected based on the "),rfe=a("code"),xLo=o("model_type"),$Lo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),kLo=o("pretrained_model_name_or_path"),SLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),RLo=o("pretrained_model_name_or_path"),PLo=o(":"),BLo=l(),ue=a("ul"),b8=a("li"),nfe=a("strong"),ILo=o("bart"),qLo=o(" \u2014 "),qD=a("a"),NLo=o("BartForConditionalGeneration"),jLo=o(" (BART model)"),DLo=l(),v8=a("li"),sfe=a("strong"),GLo=o("bigbird_pegasus"),OLo=o(" \u2014 "),ND=a("a"),VLo=o("BigBirdPegasusForConditionalGeneration"),XLo=o(" (BigBirdPegasus model)"),zLo=l(),F8=a("li"),lfe=a("strong"),WLo=o("blenderbot"),QLo=o(" \u2014 "),jD=a("a"),HLo=o("BlenderbotForConditionalGeneration"),ULo=o(" (Blenderbot model)"),JLo=l(),T8=a("li"),ife=a("strong"),YLo=o("blenderbot-small"),KLo=o(" \u2014 "),DD=a("a"),ZLo=o("BlenderbotSmallForConditionalGeneration"),e9o=o(" (BlenderbotSmall model)"),o9o=l(),M8=a("li"),dfe=a("strong"),r9o=o("encoder-decoder"),t9o=o(" \u2014 "),GD=a("a"),a9o=o("EncoderDecoderModel"),n9o=o(" (Encoder decoder model)"),s9o=l(),E8=a("li"),cfe=a("strong"),l9o=o("fsmt"),i9o=o(" \u2014 "),OD=a("a"),d9o=o("FSMTForConditionalGeneration"),c9o=o(" (FairSeq Machine-Translation model)"),f9o=l(),C8=a("li"),ffe=a("strong"),m9o=o("led"),g9o=o(" \u2014 "),VD=a("a"),h9o=o("LEDForConditionalGeneration"),p9o=o(" (LED model)"),u9o=l(),w8=a("li"),mfe=a("strong"),_9o=o("m2m_100"),b9o=o(" \u2014 "),XD=a("a"),v9o=o("M2M100ForConditionalGeneration"),F9o=o(" (M2M100 model)"),T9o=l(),A8=a("li"),gfe=a("strong"),M9o=o("marian"),E9o=o(" \u2014 "),zD=a("a"),C9o=o("MarianMTModel"),w9o=o(" (Marian model)"),A9o=l(),y8=a("li"),hfe=a("strong"),y9o=o("mbart"),L9o=o(" \u2014 "),WD=a("a"),x9o=o("MBartForConditionalGeneration"),$9o=o(" (mBART model)"),k9o=l(),L8=a("li"),pfe=a("strong"),S9o=o("mt5"),R9o=o(" \u2014 "),QD=a("a"),P9o=o("MT5ForConditionalGeneration"),B9o=o(" (mT5 model)"),I9o=l(),x8=a("li"),ufe=a("strong"),q9o=o("pegasus"),N9o=o(" \u2014 "),HD=a("a"),j9o=o("PegasusForConditionalGeneration"),D9o=o(" (Pegasus model)"),G9o=l(),$8=a("li"),_fe=a("strong"),O9o=o("plbart"),V9o=o(" \u2014 "),UD=a("a"),X9o=o("PLBartForConditionalGeneration"),z9o=o(" (PLBart model)"),W9o=l(),k8=a("li"),bfe=a("strong"),Q9o=o("prophetnet"),H9o=o(" \u2014 "),JD=a("a"),U9o=o("ProphetNetForConditionalGeneration"),J9o=o(" (ProphetNet model)"),Y9o=l(),S8=a("li"),vfe=a("strong"),K9o=o("t5"),Z9o=o(" \u2014 "),YD=a("a"),exo=o("T5ForConditionalGeneration"),oxo=o(" (T5 model)"),rxo=l(),R8=a("li"),Ffe=a("strong"),txo=o("xlm-prophetnet"),axo=o(" \u2014 "),KD=a("a"),nxo=o("XLMProphetNetForConditionalGeneration"),sxo=o(" (XLMProphetNet model)"),lxo=l(),P8=a("p"),ixo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),dxo=o("model.eval()"),cxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),fxo=o("model.train()"),mxo=l(),F(B8.$$.fragment),gNe=l(),Di=a("h2"),I8=a("a"),Efe=a("span"),F(M6.$$.fragment),gxo=l(),Cfe=a("span"),hxo=o("AutoModelForSequenceClassification"),hNe=l(),Ro=a("div"),F(E6.$$.fragment),pxo=l(),Gi=a("p"),uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZD=a("a"),_xo=o("from_pretrained()"),bxo=o(" class method or the "),eG=a("a"),vxo=o("from_config()"),Fxo=o(` class
method.`),Txo=l(),C6=a("p"),Mxo=o("This class cannot be instantiated directly using "),wfe=a("code"),Exo=o("__init__()"),Cxo=o(" (throws an error)."),wxo=l(),it=a("div"),F(w6.$$.fragment),Axo=l(),Afe=a("p"),yxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lxo=l(),Oi=a("p"),xxo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),$xo=o("not"),kxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),Sxo=o("from_pretrained()"),Rxo=o(" to load the model weights."),Pxo=l(),F(q8.$$.fragment),Bxo=l(),oo=a("div"),F(A6.$$.fragment),Ixo=l(),Lfe=a("p"),qxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nxo=l(),Ra=a("p"),jxo=o("The model class to instantiate is selected based on the "),xfe=a("code"),Dxo=o("model_type"),Gxo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),Oxo=o("pretrained_model_name_or_path"),Vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),Xxo=o("pretrained_model_name_or_path"),zxo=o(":"),Wxo=l(),q=a("ul"),N8=a("li"),Sfe=a("strong"),Qxo=o("albert"),Hxo=o(" \u2014 "),rG=a("a"),Uxo=o("AlbertForSequenceClassification"),Jxo=o(" (ALBERT model)"),Yxo=l(),j8=a("li"),Rfe=a("strong"),Kxo=o("bart"),Zxo=o(" \u2014 "),tG=a("a"),e$o=o("BartForSequenceClassification"),o$o=o(" (BART model)"),r$o=l(),D8=a("li"),Pfe=a("strong"),t$o=o("bert"),a$o=o(" \u2014 "),aG=a("a"),n$o=o("BertForSequenceClassification"),s$o=o(" (BERT model)"),l$o=l(),G8=a("li"),Bfe=a("strong"),i$o=o("big_bird"),d$o=o(" \u2014 "),nG=a("a"),c$o=o("BigBirdForSequenceClassification"),f$o=o(" (BigBird model)"),m$o=l(),O8=a("li"),Ife=a("strong"),g$o=o("bigbird_pegasus"),h$o=o(" \u2014 "),sG=a("a"),p$o=o("BigBirdPegasusForSequenceClassification"),u$o=o(" (BigBirdPegasus model)"),_$o=l(),V8=a("li"),qfe=a("strong"),b$o=o("camembert"),v$o=o(" \u2014 "),lG=a("a"),F$o=o("CamembertForSequenceClassification"),T$o=o(" (CamemBERT model)"),M$o=l(),X8=a("li"),Nfe=a("strong"),E$o=o("canine"),C$o=o(" \u2014 "),iG=a("a"),w$o=o("CanineForSequenceClassification"),A$o=o(" (Canine model)"),y$o=l(),z8=a("li"),jfe=a("strong"),L$o=o("convbert"),x$o=o(" \u2014 "),dG=a("a"),$$o=o("ConvBertForSequenceClassification"),k$o=o(" (ConvBERT model)"),S$o=l(),W8=a("li"),Dfe=a("strong"),R$o=o("ctrl"),P$o=o(" \u2014 "),cG=a("a"),B$o=o("CTRLForSequenceClassification"),I$o=o(" (CTRL model)"),q$o=l(),Q8=a("li"),Gfe=a("strong"),N$o=o("data2vec-text"),j$o=o(" \u2014 "),fG=a("a"),D$o=o("Data2VecTextForSequenceClassification"),G$o=o(" (Data2VecText model)"),O$o=l(),H8=a("li"),Ofe=a("strong"),V$o=o("deberta"),X$o=o(" \u2014 "),mG=a("a"),z$o=o("DebertaForSequenceClassification"),W$o=o(" (DeBERTa model)"),Q$o=l(),U8=a("li"),Vfe=a("strong"),H$o=o("deberta-v2"),U$o=o(" \u2014 "),gG=a("a"),J$o=o("DebertaV2ForSequenceClassification"),Y$o=o(" (DeBERTa-v2 model)"),K$o=l(),J8=a("li"),Xfe=a("strong"),Z$o=o("distilbert"),eko=o(" \u2014 "),hG=a("a"),oko=o("DistilBertForSequenceClassification"),rko=o(" (DistilBERT model)"),tko=l(),Y8=a("li"),zfe=a("strong"),ako=o("electra"),nko=o(" \u2014 "),pG=a("a"),sko=o("ElectraForSequenceClassification"),lko=o(" (ELECTRA model)"),iko=l(),K8=a("li"),Wfe=a("strong"),dko=o("flaubert"),cko=o(" \u2014 "),uG=a("a"),fko=o("FlaubertForSequenceClassification"),mko=o(" (FlauBERT model)"),gko=l(),Z8=a("li"),Qfe=a("strong"),hko=o("fnet"),pko=o(" \u2014 "),_G=a("a"),uko=o("FNetForSequenceClassification"),_ko=o(" (FNet model)"),bko=l(),eb=a("li"),Hfe=a("strong"),vko=o("funnel"),Fko=o(" \u2014 "),bG=a("a"),Tko=o("FunnelForSequenceClassification"),Mko=o(" (Funnel Transformer model)"),Eko=l(),ob=a("li"),Ufe=a("strong"),Cko=o("gpt2"),wko=o(" \u2014 "),vG=a("a"),Ako=o("GPT2ForSequenceClassification"),yko=o(" (OpenAI GPT-2 model)"),Lko=l(),rb=a("li"),Jfe=a("strong"),xko=o("gpt_neo"),$ko=o(" \u2014 "),FG=a("a"),kko=o("GPTNeoForSequenceClassification"),Sko=o(" (GPT Neo model)"),Rko=l(),tb=a("li"),Yfe=a("strong"),Pko=o("gptj"),Bko=o(" \u2014 "),TG=a("a"),Iko=o("GPTJForSequenceClassification"),qko=o(" (GPT-J model)"),Nko=l(),ab=a("li"),Kfe=a("strong"),jko=o("ibert"),Dko=o(" \u2014 "),MG=a("a"),Gko=o("IBertForSequenceClassification"),Oko=o(" (I-BERT model)"),Vko=l(),nb=a("li"),Zfe=a("strong"),Xko=o("layoutlm"),zko=o(" \u2014 "),EG=a("a"),Wko=o("LayoutLMForSequenceClassification"),Qko=o(" (LayoutLM model)"),Hko=l(),sb=a("li"),eme=a("strong"),Uko=o("layoutlmv2"),Jko=o(" \u2014 "),CG=a("a"),Yko=o("LayoutLMv2ForSequenceClassification"),Kko=o(" (LayoutLMv2 model)"),Zko=l(),lb=a("li"),ome=a("strong"),eSo=o("layoutlmv3"),oSo=o(" \u2014 "),wG=a("a"),rSo=o("LayoutLMv3ForSequenceClassification"),tSo=o(" (LayoutLMv3 model)"),aSo=l(),ib=a("li"),rme=a("strong"),nSo=o("led"),sSo=o(" \u2014 "),AG=a("a"),lSo=o("LEDForSequenceClassification"),iSo=o(" (LED model)"),dSo=l(),db=a("li"),tme=a("strong"),cSo=o("longformer"),fSo=o(" \u2014 "),yG=a("a"),mSo=o("LongformerForSequenceClassification"),gSo=o(" (Longformer model)"),hSo=l(),cb=a("li"),ame=a("strong"),pSo=o("mbart"),uSo=o(" \u2014 "),LG=a("a"),_So=o("MBartForSequenceClassification"),bSo=o(" (mBART model)"),vSo=l(),fb=a("li"),nme=a("strong"),FSo=o("megatron-bert"),TSo=o(" \u2014 "),xG=a("a"),MSo=o("MegatronBertForSequenceClassification"),ESo=o(" (MegatronBert model)"),CSo=l(),mb=a("li"),sme=a("strong"),wSo=o("mobilebert"),ASo=o(" \u2014 "),$G=a("a"),ySo=o("MobileBertForSequenceClassification"),LSo=o(" (MobileBERT model)"),xSo=l(),gb=a("li"),lme=a("strong"),$So=o("mpnet"),kSo=o(" \u2014 "),kG=a("a"),SSo=o("MPNetForSequenceClassification"),RSo=o(" (MPNet model)"),PSo=l(),hb=a("li"),ime=a("strong"),BSo=o("nystromformer"),ISo=o(" \u2014 "),SG=a("a"),qSo=o("NystromformerForSequenceClassification"),NSo=o(" (Nystromformer model)"),jSo=l(),pb=a("li"),dme=a("strong"),DSo=o("openai-gpt"),GSo=o(" \u2014 "),RG=a("a"),OSo=o("OpenAIGPTForSequenceClassification"),VSo=o(" (OpenAI GPT model)"),XSo=l(),ub=a("li"),cme=a("strong"),zSo=o("perceiver"),WSo=o(" \u2014 "),PG=a("a"),QSo=o("PerceiverForSequenceClassification"),HSo=o(" (Perceiver model)"),USo=l(),_b=a("li"),fme=a("strong"),JSo=o("plbart"),YSo=o(" \u2014 "),BG=a("a"),KSo=o("PLBartForSequenceClassification"),ZSo=o(" (PLBart model)"),eRo=l(),bb=a("li"),mme=a("strong"),oRo=o("qdqbert"),rRo=o(" \u2014 "),IG=a("a"),tRo=o("QDQBertForSequenceClassification"),aRo=o(" (QDQBert model)"),nRo=l(),vb=a("li"),gme=a("strong"),sRo=o("reformer"),lRo=o(" \u2014 "),qG=a("a"),iRo=o("ReformerForSequenceClassification"),dRo=o(" (Reformer model)"),cRo=l(),Fb=a("li"),hme=a("strong"),fRo=o("rembert"),mRo=o(" \u2014 "),NG=a("a"),gRo=o("RemBertForSequenceClassification"),hRo=o(" (RemBERT model)"),pRo=l(),Tb=a("li"),pme=a("strong"),uRo=o("roberta"),_Ro=o(" \u2014 "),jG=a("a"),bRo=o("RobertaForSequenceClassification"),vRo=o(" (RoBERTa model)"),FRo=l(),Mb=a("li"),ume=a("strong"),TRo=o("roformer"),MRo=o(" \u2014 "),DG=a("a"),ERo=o("RoFormerForSequenceClassification"),CRo=o(" (RoFormer model)"),wRo=l(),Eb=a("li"),_me=a("strong"),ARo=o("squeezebert"),yRo=o(" \u2014 "),GG=a("a"),LRo=o("SqueezeBertForSequenceClassification"),xRo=o(" (SqueezeBERT model)"),$Ro=l(),Cb=a("li"),bme=a("strong"),kRo=o("tapas"),SRo=o(" \u2014 "),OG=a("a"),RRo=o("TapasForSequenceClassification"),PRo=o(" (TAPAS model)"),BRo=l(),wb=a("li"),vme=a("strong"),IRo=o("transfo-xl"),qRo=o(" \u2014 "),VG=a("a"),NRo=o("TransfoXLForSequenceClassification"),jRo=o(" (Transformer-XL model)"),DRo=l(),Ab=a("li"),Fme=a("strong"),GRo=o("xlm"),ORo=o(" \u2014 "),XG=a("a"),VRo=o("XLMForSequenceClassification"),XRo=o(" (XLM model)"),zRo=l(),yb=a("li"),Tme=a("strong"),WRo=o("xlm-roberta"),QRo=o(" \u2014 "),zG=a("a"),HRo=o("XLMRobertaForSequenceClassification"),URo=o(" (XLM-RoBERTa model)"),JRo=l(),Lb=a("li"),Mme=a("strong"),YRo=o("xlm-roberta-xl"),KRo=o(" \u2014 "),WG=a("a"),ZRo=o("XLMRobertaXLForSequenceClassification"),ePo=o(" (XLM-RoBERTa-XL model)"),oPo=l(),xb=a("li"),Eme=a("strong"),rPo=o("xlnet"),tPo=o(" \u2014 "),QG=a("a"),aPo=o("XLNetForSequenceClassification"),nPo=o(" (XLNet model)"),sPo=l(),$b=a("li"),Cme=a("strong"),lPo=o("yoso"),iPo=o(" \u2014 "),HG=a("a"),dPo=o("YosoForSequenceClassification"),cPo=o(" (YOSO model)"),fPo=l(),kb=a("p"),mPo=o("The model is set in evaluation mode by default using "),wme=a("code"),gPo=o("model.eval()"),hPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=a("code"),pPo=o("model.train()"),uPo=l(),F(Sb.$$.fragment),pNe=l(),Vi=a("h2"),Rb=a("a"),yme=a("span"),F(y6.$$.fragment),_Po=l(),Lme=a("span"),bPo=o("AutoModelForMultipleChoice"),uNe=l(),Po=a("div"),F(L6.$$.fragment),vPo=l(),Xi=a("p"),FPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UG=a("a"),TPo=o("from_pretrained()"),MPo=o(" class method or the "),JG=a("a"),EPo=o("from_config()"),CPo=o(` class
method.`),wPo=l(),x6=a("p"),APo=o("This class cannot be instantiated directly using "),xme=a("code"),yPo=o("__init__()"),LPo=o(" (throws an error)."),xPo=l(),dt=a("div"),F($6.$$.fragment),$Po=l(),$me=a("p"),kPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SPo=l(),zi=a("p"),RPo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),PPo=o("not"),BPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),IPo=o("from_pretrained()"),qPo=o(" to load the model weights."),NPo=l(),F(Pb.$$.fragment),jPo=l(),ro=a("div"),F(k6.$$.fragment),DPo=l(),Sme=a("p"),GPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OPo=l(),Pa=a("p"),VPo=o("The model class to instantiate is selected based on the "),Rme=a("code"),XPo=o("model_type"),zPo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),WPo=o("pretrained_model_name_or_path"),QPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(":"),JPo=l(),Y=a("ul"),Bb=a("li"),Ime=a("strong"),YPo=o("albert"),KPo=o(" \u2014 "),KG=a("a"),ZPo=o("AlbertForMultipleChoice"),eBo=o(" (ALBERT model)"),oBo=l(),Ib=a("li"),qme=a("strong"),rBo=o("bert"),tBo=o(" \u2014 "),ZG=a("a"),aBo=o("BertForMultipleChoice"),nBo=o(" (BERT model)"),sBo=l(),qb=a("li"),Nme=a("strong"),lBo=o("big_bird"),iBo=o(" \u2014 "),eO=a("a"),dBo=o("BigBirdForMultipleChoice"),cBo=o(" (BigBird model)"),fBo=l(),Nb=a("li"),jme=a("strong"),mBo=o("camembert"),gBo=o(" \u2014 "),oO=a("a"),hBo=o("CamembertForMultipleChoice"),pBo=o(" (CamemBERT model)"),uBo=l(),jb=a("li"),Dme=a("strong"),_Bo=o("canine"),bBo=o(" \u2014 "),rO=a("a"),vBo=o("CanineForMultipleChoice"),FBo=o(" (Canine model)"),TBo=l(),Db=a("li"),Gme=a("strong"),MBo=o("convbert"),EBo=o(" \u2014 "),tO=a("a"),CBo=o("ConvBertForMultipleChoice"),wBo=o(" (ConvBERT model)"),ABo=l(),Gb=a("li"),Ome=a("strong"),yBo=o("data2vec-text"),LBo=o(" \u2014 "),aO=a("a"),xBo=o("Data2VecTextForMultipleChoice"),$Bo=o(" (Data2VecText model)"),kBo=l(),Ob=a("li"),Vme=a("strong"),SBo=o("deberta-v2"),RBo=o(" \u2014 "),nO=a("a"),PBo=o("DebertaV2ForMultipleChoice"),BBo=o(" (DeBERTa-v2 model)"),IBo=l(),Vb=a("li"),Xme=a("strong"),qBo=o("distilbert"),NBo=o(" \u2014 "),sO=a("a"),jBo=o("DistilBertForMultipleChoice"),DBo=o(" (DistilBERT model)"),GBo=l(),Xb=a("li"),zme=a("strong"),OBo=o("electra"),VBo=o(" \u2014 "),lO=a("a"),XBo=o("ElectraForMultipleChoice"),zBo=o(" (ELECTRA model)"),WBo=l(),zb=a("li"),Wme=a("strong"),QBo=o("flaubert"),HBo=o(" \u2014 "),iO=a("a"),UBo=o("FlaubertForMultipleChoice"),JBo=o(" (FlauBERT model)"),YBo=l(),Wb=a("li"),Qme=a("strong"),KBo=o("fnet"),ZBo=o(" \u2014 "),dO=a("a"),eIo=o("FNetForMultipleChoice"),oIo=o(" (FNet model)"),rIo=l(),Qb=a("li"),Hme=a("strong"),tIo=o("funnel"),aIo=o(" \u2014 "),cO=a("a"),nIo=o("FunnelForMultipleChoice"),sIo=o(" (Funnel Transformer model)"),lIo=l(),Hb=a("li"),Ume=a("strong"),iIo=o("ibert"),dIo=o(" \u2014 "),fO=a("a"),cIo=o("IBertForMultipleChoice"),fIo=o(" (I-BERT model)"),mIo=l(),Ub=a("li"),Jme=a("strong"),gIo=o("longformer"),hIo=o(" \u2014 "),mO=a("a"),pIo=o("LongformerForMultipleChoice"),uIo=o(" (Longformer model)"),_Io=l(),Jb=a("li"),Yme=a("strong"),bIo=o("megatron-bert"),vIo=o(" \u2014 "),gO=a("a"),FIo=o("MegatronBertForMultipleChoice"),TIo=o(" (MegatronBert model)"),MIo=l(),Yb=a("li"),Kme=a("strong"),EIo=o("mobilebert"),CIo=o(" \u2014 "),hO=a("a"),wIo=o("MobileBertForMultipleChoice"),AIo=o(" (MobileBERT model)"),yIo=l(),Kb=a("li"),Zme=a("strong"),LIo=o("mpnet"),xIo=o(" \u2014 "),pO=a("a"),$Io=o("MPNetForMultipleChoice"),kIo=o(" (MPNet model)"),SIo=l(),Zb=a("li"),ege=a("strong"),RIo=o("nystromformer"),PIo=o(" \u2014 "),uO=a("a"),BIo=o("NystromformerForMultipleChoice"),IIo=o(" (Nystromformer model)"),qIo=l(),e2=a("li"),oge=a("strong"),NIo=o("qdqbert"),jIo=o(" \u2014 "),_O=a("a"),DIo=o("QDQBertForMultipleChoice"),GIo=o(" (QDQBert model)"),OIo=l(),o2=a("li"),rge=a("strong"),VIo=o("rembert"),XIo=o(" \u2014 "),bO=a("a"),zIo=o("RemBertForMultipleChoice"),WIo=o(" (RemBERT model)"),QIo=l(),r2=a("li"),tge=a("strong"),HIo=o("roberta"),UIo=o(" \u2014 "),vO=a("a"),JIo=o("RobertaForMultipleChoice"),YIo=o(" (RoBERTa model)"),KIo=l(),t2=a("li"),age=a("strong"),ZIo=o("roformer"),eqo=o(" \u2014 "),FO=a("a"),oqo=o("RoFormerForMultipleChoice"),rqo=o(" (RoFormer model)"),tqo=l(),a2=a("li"),nge=a("strong"),aqo=o("squeezebert"),nqo=o(" \u2014 "),TO=a("a"),sqo=o("SqueezeBertForMultipleChoice"),lqo=o(" (SqueezeBERT model)"),iqo=l(),n2=a("li"),sge=a("strong"),dqo=o("xlm"),cqo=o(" \u2014 "),MO=a("a"),fqo=o("XLMForMultipleChoice"),mqo=o(" (XLM model)"),gqo=l(),s2=a("li"),lge=a("strong"),hqo=o("xlm-roberta"),pqo=o(" \u2014 "),EO=a("a"),uqo=o("XLMRobertaForMultipleChoice"),_qo=o(" (XLM-RoBERTa model)"),bqo=l(),l2=a("li"),ige=a("strong"),vqo=o("xlm-roberta-xl"),Fqo=o(" \u2014 "),CO=a("a"),Tqo=o("XLMRobertaXLForMultipleChoice"),Mqo=o(" (XLM-RoBERTa-XL model)"),Eqo=l(),i2=a("li"),dge=a("strong"),Cqo=o("xlnet"),wqo=o(" \u2014 "),wO=a("a"),Aqo=o("XLNetForMultipleChoice"),yqo=o(" (XLNet model)"),Lqo=l(),d2=a("li"),cge=a("strong"),xqo=o("yoso"),$qo=o(" \u2014 "),AO=a("a"),kqo=o("YosoForMultipleChoice"),Sqo=o(" (YOSO model)"),Rqo=l(),c2=a("p"),Pqo=o("The model is set in evaluation mode by default using "),fge=a("code"),Bqo=o("model.eval()"),Iqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),qqo=o("model.train()"),Nqo=l(),F(f2.$$.fragment),_Ne=l(),Wi=a("h2"),m2=a("a"),gge=a("span"),F(S6.$$.fragment),jqo=l(),hge=a("span"),Dqo=o("AutoModelForNextSentencePrediction"),bNe=l(),Bo=a("div"),F(R6.$$.fragment),Gqo=l(),Qi=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yO=a("a"),Vqo=o("from_pretrained()"),Xqo=o(" class method or the "),LO=a("a"),zqo=o("from_config()"),Wqo=o(` class
method.`),Qqo=l(),P6=a("p"),Hqo=o("This class cannot be instantiated directly using "),pge=a("code"),Uqo=o("__init__()"),Jqo=o(" (throws an error)."),Yqo=l(),ct=a("div"),F(B6.$$.fragment),Kqo=l(),uge=a("p"),Zqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eNo=l(),Hi=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),aNo=o("from_pretrained()"),nNo=o(" to load the model weights."),sNo=l(),F(g2.$$.fragment),lNo=l(),to=a("div"),F(I6.$$.fragment),iNo=l(),bge=a("p"),dNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cNo=l(),Ba=a("p"),fNo=o("The model class to instantiate is selected based on the "),vge=a("code"),mNo=o("model_type"),gNo=o(` property of the config object (either
passed as an argument or loaded from `),Fge=a("code"),hNo=o("pretrained_model_name_or_path"),pNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),uNo=o("pretrained_model_name_or_path"),_No=o(":"),bNo=l(),Yr=a("ul"),h2=a("li"),Mge=a("strong"),vNo=o("bert"),FNo=o(" \u2014 "),$O=a("a"),TNo=o("BertForNextSentencePrediction"),MNo=o(" (BERT model)"),ENo=l(),p2=a("li"),Ege=a("strong"),CNo=o("fnet"),wNo=o(" \u2014 "),kO=a("a"),ANo=o("FNetForNextSentencePrediction"),yNo=o(" (FNet model)"),LNo=l(),u2=a("li"),Cge=a("strong"),xNo=o("megatron-bert"),$No=o(" \u2014 "),SO=a("a"),kNo=o("MegatronBertForNextSentencePrediction"),SNo=o(" (MegatronBert model)"),RNo=l(),_2=a("li"),wge=a("strong"),PNo=o("mobilebert"),BNo=o(" \u2014 "),RO=a("a"),INo=o("MobileBertForNextSentencePrediction"),qNo=o(" (MobileBERT model)"),NNo=l(),b2=a("li"),Age=a("strong"),jNo=o("qdqbert"),DNo=o(" \u2014 "),PO=a("a"),GNo=o("QDQBertForNextSentencePrediction"),ONo=o(" (QDQBert model)"),VNo=l(),v2=a("p"),XNo=o("The model is set in evaluation mode by default using "),yge=a("code"),zNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),QNo=o("model.train()"),HNo=l(),F(F2.$$.fragment),vNe=l(),Ui=a("h2"),T2=a("a"),xge=a("span"),F(q6.$$.fragment),UNo=l(),$ge=a("span"),JNo=o("AutoModelForTokenClassification"),FNe=l(),Io=a("div"),F(N6.$$.fragment),YNo=l(),Ji=a("p"),KNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BO=a("a"),ZNo=o("from_pretrained()"),ejo=o(" class method or the "),IO=a("a"),ojo=o("from_config()"),rjo=o(` class
method.`),tjo=l(),j6=a("p"),ajo=o("This class cannot be instantiated directly using "),kge=a("code"),njo=o("__init__()"),sjo=o(" (throws an error)."),ljo=l(),ft=a("div"),F(D6.$$.fragment),ijo=l(),Sge=a("p"),djo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cjo=l(),Yi=a("p"),fjo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),mjo=o("not"),gjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),hjo=o("from_pretrained()"),pjo=o(" to load the model weights."),ujo=l(),F(M2.$$.fragment),_jo=l(),ao=a("div"),F(G6.$$.fragment),bjo=l(),Pge=a("p"),vjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fjo=l(),Ia=a("p"),Tjo=o("The model class to instantiate is selected based on the "),Bge=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),Cjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),Ajo=o("pretrained_model_name_or_path"),yjo=o(":"),Ljo=l(),H=a("ul"),E2=a("li"),Nge=a("strong"),xjo=o("albert"),$jo=o(" \u2014 "),NO=a("a"),kjo=o("AlbertForTokenClassification"),Sjo=o(" (ALBERT model)"),Rjo=l(),C2=a("li"),jge=a("strong"),Pjo=o("bert"),Bjo=o(" \u2014 "),jO=a("a"),Ijo=o("BertForTokenClassification"),qjo=o(" (BERT model)"),Njo=l(),w2=a("li"),Dge=a("strong"),jjo=o("big_bird"),Djo=o(" \u2014 "),DO=a("a"),Gjo=o("BigBirdForTokenClassification"),Ojo=o(" (BigBird model)"),Vjo=l(),A2=a("li"),Gge=a("strong"),Xjo=o("camembert"),zjo=o(" \u2014 "),GO=a("a"),Wjo=o("CamembertForTokenClassification"),Qjo=o(" (CamemBERT model)"),Hjo=l(),y2=a("li"),Oge=a("strong"),Ujo=o("canine"),Jjo=o(" \u2014 "),OO=a("a"),Yjo=o("CanineForTokenClassification"),Kjo=o(" (Canine model)"),Zjo=l(),L2=a("li"),Vge=a("strong"),eDo=o("convbert"),oDo=o(" \u2014 "),VO=a("a"),rDo=o("ConvBertForTokenClassification"),tDo=o(" (ConvBERT model)"),aDo=l(),x2=a("li"),Xge=a("strong"),nDo=o("data2vec-text"),sDo=o(" \u2014 "),XO=a("a"),lDo=o("Data2VecTextForTokenClassification"),iDo=o(" (Data2VecText model)"),dDo=l(),$2=a("li"),zge=a("strong"),cDo=o("deberta"),fDo=o(" \u2014 "),zO=a("a"),mDo=o("DebertaForTokenClassification"),gDo=o(" (DeBERTa model)"),hDo=l(),k2=a("li"),Wge=a("strong"),pDo=o("deberta-v2"),uDo=o(" \u2014 "),WO=a("a"),_Do=o("DebertaV2ForTokenClassification"),bDo=o(" (DeBERTa-v2 model)"),vDo=l(),S2=a("li"),Qge=a("strong"),FDo=o("distilbert"),TDo=o(" \u2014 "),QO=a("a"),MDo=o("DistilBertForTokenClassification"),EDo=o(" (DistilBERT model)"),CDo=l(),R2=a("li"),Hge=a("strong"),wDo=o("electra"),ADo=o(" \u2014 "),HO=a("a"),yDo=o("ElectraForTokenClassification"),LDo=o(" (ELECTRA model)"),xDo=l(),P2=a("li"),Uge=a("strong"),$Do=o("flaubert"),kDo=o(" \u2014 "),UO=a("a"),SDo=o("FlaubertForTokenClassification"),RDo=o(" (FlauBERT model)"),PDo=l(),B2=a("li"),Jge=a("strong"),BDo=o("fnet"),IDo=o(" \u2014 "),JO=a("a"),qDo=o("FNetForTokenClassification"),NDo=o(" (FNet model)"),jDo=l(),I2=a("li"),Yge=a("strong"),DDo=o("funnel"),GDo=o(" \u2014 "),YO=a("a"),ODo=o("FunnelForTokenClassification"),VDo=o(" (Funnel Transformer model)"),XDo=l(),q2=a("li"),Kge=a("strong"),zDo=o("gpt2"),WDo=o(" \u2014 "),KO=a("a"),QDo=o("GPT2ForTokenClassification"),HDo=o(" (OpenAI GPT-2 model)"),UDo=l(),N2=a("li"),Zge=a("strong"),JDo=o("ibert"),YDo=o(" \u2014 "),ZO=a("a"),KDo=o("IBertForTokenClassification"),ZDo=o(" (I-BERT model)"),eGo=l(),j2=a("li"),ehe=a("strong"),oGo=o("layoutlm"),rGo=o(" \u2014 "),eV=a("a"),tGo=o("LayoutLMForTokenClassification"),aGo=o(" (LayoutLM model)"),nGo=l(),D2=a("li"),ohe=a("strong"),sGo=o("layoutlmv2"),lGo=o(" \u2014 "),oV=a("a"),iGo=o("LayoutLMv2ForTokenClassification"),dGo=o(" (LayoutLMv2 model)"),cGo=l(),G2=a("li"),rhe=a("strong"),fGo=o("layoutlmv3"),mGo=o(" \u2014 "),rV=a("a"),gGo=o("LayoutLMv3ForTokenClassification"),hGo=o(" (LayoutLMv3 model)"),pGo=l(),O2=a("li"),the=a("strong"),uGo=o("longformer"),_Go=o(" \u2014 "),tV=a("a"),bGo=o("LongformerForTokenClassification"),vGo=o(" (Longformer model)"),FGo=l(),V2=a("li"),ahe=a("strong"),TGo=o("megatron-bert"),MGo=o(" \u2014 "),aV=a("a"),EGo=o("MegatronBertForTokenClassification"),CGo=o(" (MegatronBert model)"),wGo=l(),X2=a("li"),nhe=a("strong"),AGo=o("mobilebert"),yGo=o(" \u2014 "),nV=a("a"),LGo=o("MobileBertForTokenClassification"),xGo=o(" (MobileBERT model)"),$Go=l(),z2=a("li"),she=a("strong"),kGo=o("mpnet"),SGo=o(" \u2014 "),sV=a("a"),RGo=o("MPNetForTokenClassification"),PGo=o(" (MPNet model)"),BGo=l(),W2=a("li"),lhe=a("strong"),IGo=o("nystromformer"),qGo=o(" \u2014 "),lV=a("a"),NGo=o("NystromformerForTokenClassification"),jGo=o(" (Nystromformer model)"),DGo=l(),Q2=a("li"),ihe=a("strong"),GGo=o("qdqbert"),OGo=o(" \u2014 "),iV=a("a"),VGo=o("QDQBertForTokenClassification"),XGo=o(" (QDQBert model)"),zGo=l(),H2=a("li"),dhe=a("strong"),WGo=o("rembert"),QGo=o(" \u2014 "),dV=a("a"),HGo=o("RemBertForTokenClassification"),UGo=o(" (RemBERT model)"),JGo=l(),U2=a("li"),che=a("strong"),YGo=o("roberta"),KGo=o(" \u2014 "),cV=a("a"),ZGo=o("RobertaForTokenClassification"),eOo=o(" (RoBERTa model)"),oOo=l(),J2=a("li"),fhe=a("strong"),rOo=o("roformer"),tOo=o(" \u2014 "),fV=a("a"),aOo=o("RoFormerForTokenClassification"),nOo=o(" (RoFormer model)"),sOo=l(),Y2=a("li"),mhe=a("strong"),lOo=o("squeezebert"),iOo=o(" \u2014 "),mV=a("a"),dOo=o("SqueezeBertForTokenClassification"),cOo=o(" (SqueezeBERT model)"),fOo=l(),K2=a("li"),ghe=a("strong"),mOo=o("xlm"),gOo=o(" \u2014 "),gV=a("a"),hOo=o("XLMForTokenClassification"),pOo=o(" (XLM model)"),uOo=l(),Z2=a("li"),hhe=a("strong"),_Oo=o("xlm-roberta"),bOo=o(" \u2014 "),hV=a("a"),vOo=o("XLMRobertaForTokenClassification"),FOo=o(" (XLM-RoBERTa model)"),TOo=l(),ev=a("li"),phe=a("strong"),MOo=o("xlm-roberta-xl"),EOo=o(" \u2014 "),pV=a("a"),COo=o("XLMRobertaXLForTokenClassification"),wOo=o(" (XLM-RoBERTa-XL model)"),AOo=l(),ov=a("li"),uhe=a("strong"),yOo=o("xlnet"),LOo=o(" \u2014 "),uV=a("a"),xOo=o("XLNetForTokenClassification"),$Oo=o(" (XLNet model)"),kOo=l(),rv=a("li"),_he=a("strong"),SOo=o("yoso"),ROo=o(" \u2014 "),_V=a("a"),POo=o("YosoForTokenClassification"),BOo=o(" (YOSO model)"),IOo=l(),tv=a("p"),qOo=o("The model is set in evaluation mode by default using "),bhe=a("code"),NOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),DOo=o("model.train()"),GOo=l(),F(av.$$.fragment),TNe=l(),Ki=a("h2"),nv=a("a"),Fhe=a("span"),F(O6.$$.fragment),OOo=l(),The=a("span"),VOo=o("AutoModelForQuestionAnswering"),MNe=l(),qo=a("div"),F(V6.$$.fragment),XOo=l(),Zi=a("p"),zOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bV=a("a"),WOo=o("from_pretrained()"),QOo=o(" class method or the "),vV=a("a"),HOo=o("from_config()"),UOo=o(` class
method.`),JOo=l(),X6=a("p"),YOo=o("This class cannot be instantiated directly using "),Mhe=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eVo=l(),mt=a("div"),F(z6.$$.fragment),oVo=l(),Ehe=a("p"),rVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tVo=l(),ed=a("p"),aVo=o(`Note:
Loading a model from its configuration file does `),Che=a("strong"),nVo=o("not"),sVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),lVo=o("from_pretrained()"),iVo=o(" to load the model weights."),dVo=l(),F(sv.$$.fragment),cVo=l(),no=a("div"),F(W6.$$.fragment),fVo=l(),whe=a("p"),mVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gVo=l(),qa=a("p"),hVo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),pVo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),vVo=o("pretrained_model_name_or_path"),FVo=o(":"),TVo=l(),V=a("ul"),lv=a("li"),xhe=a("strong"),MVo=o("albert"),EVo=o(" \u2014 "),TV=a("a"),CVo=o("AlbertForQuestionAnswering"),wVo=o(" (ALBERT model)"),AVo=l(),iv=a("li"),$he=a("strong"),yVo=o("bart"),LVo=o(" \u2014 "),MV=a("a"),xVo=o("BartForQuestionAnswering"),$Vo=o(" (BART model)"),kVo=l(),dv=a("li"),khe=a("strong"),SVo=o("bert"),RVo=o(" \u2014 "),EV=a("a"),PVo=o("BertForQuestionAnswering"),BVo=o(" (BERT model)"),IVo=l(),cv=a("li"),She=a("strong"),qVo=o("big_bird"),NVo=o(" \u2014 "),CV=a("a"),jVo=o("BigBirdForQuestionAnswering"),DVo=o(" (BigBird model)"),GVo=l(),fv=a("li"),Rhe=a("strong"),OVo=o("bigbird_pegasus"),VVo=o(" \u2014 "),wV=a("a"),XVo=o("BigBirdPegasusForQuestionAnswering"),zVo=o(" (BigBirdPegasus model)"),WVo=l(),mv=a("li"),Phe=a("strong"),QVo=o("camembert"),HVo=o(" \u2014 "),AV=a("a"),UVo=o("CamembertForQuestionAnswering"),JVo=o(" (CamemBERT model)"),YVo=l(),gv=a("li"),Bhe=a("strong"),KVo=o("canine"),ZVo=o(" \u2014 "),yV=a("a"),eXo=o("CanineForQuestionAnswering"),oXo=o(" (Canine model)"),rXo=l(),hv=a("li"),Ihe=a("strong"),tXo=o("convbert"),aXo=o(" \u2014 "),LV=a("a"),nXo=o("ConvBertForQuestionAnswering"),sXo=o(" (ConvBERT model)"),lXo=l(),pv=a("li"),qhe=a("strong"),iXo=o("data2vec-text"),dXo=o(" \u2014 "),xV=a("a"),cXo=o("Data2VecTextForQuestionAnswering"),fXo=o(" (Data2VecText model)"),mXo=l(),uv=a("li"),Nhe=a("strong"),gXo=o("deberta"),hXo=o(" \u2014 "),$V=a("a"),pXo=o("DebertaForQuestionAnswering"),uXo=o(" (DeBERTa model)"),_Xo=l(),_v=a("li"),jhe=a("strong"),bXo=o("deberta-v2"),vXo=o(" \u2014 "),kV=a("a"),FXo=o("DebertaV2ForQuestionAnswering"),TXo=o(" (DeBERTa-v2 model)"),MXo=l(),bv=a("li"),Dhe=a("strong"),EXo=o("distilbert"),CXo=o(" \u2014 "),SV=a("a"),wXo=o("DistilBertForQuestionAnswering"),AXo=o(" (DistilBERT model)"),yXo=l(),vv=a("li"),Ghe=a("strong"),LXo=o("electra"),xXo=o(" \u2014 "),RV=a("a"),$Xo=o("ElectraForQuestionAnswering"),kXo=o(" (ELECTRA model)"),SXo=l(),Fv=a("li"),Ohe=a("strong"),RXo=o("flaubert"),PXo=o(" \u2014 "),PV=a("a"),BXo=o("FlaubertForQuestionAnsweringSimple"),IXo=o(" (FlauBERT model)"),qXo=l(),Tv=a("li"),Vhe=a("strong"),NXo=o("fnet"),jXo=o(" \u2014 "),BV=a("a"),DXo=o("FNetForQuestionAnswering"),GXo=o(" (FNet model)"),OXo=l(),Mv=a("li"),Xhe=a("strong"),VXo=o("funnel"),XXo=o(" \u2014 "),IV=a("a"),zXo=o("FunnelForQuestionAnswering"),WXo=o(" (Funnel Transformer model)"),QXo=l(),Ev=a("li"),zhe=a("strong"),HXo=o("gptj"),UXo=o(" \u2014 "),qV=a("a"),JXo=o("GPTJForQuestionAnswering"),YXo=o(" (GPT-J model)"),KXo=l(),Cv=a("li"),Whe=a("strong"),ZXo=o("ibert"),ezo=o(" \u2014 "),NV=a("a"),ozo=o("IBertForQuestionAnswering"),rzo=o(" (I-BERT model)"),tzo=l(),wv=a("li"),Qhe=a("strong"),azo=o("layoutlmv2"),nzo=o(" \u2014 "),jV=a("a"),szo=o("LayoutLMv2ForQuestionAnswering"),lzo=o(" (LayoutLMv2 model)"),izo=l(),Av=a("li"),Hhe=a("strong"),dzo=o("layoutlmv3"),czo=o(" \u2014 "),DV=a("a"),fzo=o("LayoutLMv3ForQuestionAnswering"),mzo=o(" (LayoutLMv3 model)"),gzo=l(),yv=a("li"),Uhe=a("strong"),hzo=o("led"),pzo=o(" \u2014 "),GV=a("a"),uzo=o("LEDForQuestionAnswering"),_zo=o(" (LED model)"),bzo=l(),Lv=a("li"),Jhe=a("strong"),vzo=o("longformer"),Fzo=o(" \u2014 "),OV=a("a"),Tzo=o("LongformerForQuestionAnswering"),Mzo=o(" (Longformer model)"),Ezo=l(),xv=a("li"),Yhe=a("strong"),Czo=o("lxmert"),wzo=o(" \u2014 "),VV=a("a"),Azo=o("LxmertForQuestionAnswering"),yzo=o(" (LXMERT model)"),Lzo=l(),$v=a("li"),Khe=a("strong"),xzo=o("mbart"),$zo=o(" \u2014 "),XV=a("a"),kzo=o("MBartForQuestionAnswering"),Szo=o(" (mBART model)"),Rzo=l(),kv=a("li"),Zhe=a("strong"),Pzo=o("megatron-bert"),Bzo=o(" \u2014 "),zV=a("a"),Izo=o("MegatronBertForQuestionAnswering"),qzo=o(" (MegatronBert model)"),Nzo=l(),Sv=a("li"),epe=a("strong"),jzo=o("mobilebert"),Dzo=o(" \u2014 "),WV=a("a"),Gzo=o("MobileBertForQuestionAnswering"),Ozo=o(" (MobileBERT model)"),Vzo=l(),Rv=a("li"),ope=a("strong"),Xzo=o("mpnet"),zzo=o(" \u2014 "),QV=a("a"),Wzo=o("MPNetForQuestionAnswering"),Qzo=o(" (MPNet model)"),Hzo=l(),Pv=a("li"),rpe=a("strong"),Uzo=o("nystromformer"),Jzo=o(" \u2014 "),HV=a("a"),Yzo=o("NystromformerForQuestionAnswering"),Kzo=o(" (Nystromformer model)"),Zzo=l(),Bv=a("li"),tpe=a("strong"),eWo=o("qdqbert"),oWo=o(" \u2014 "),UV=a("a"),rWo=o("QDQBertForQuestionAnswering"),tWo=o(" (QDQBert model)"),aWo=l(),Iv=a("li"),ape=a("strong"),nWo=o("reformer"),sWo=o(" \u2014 "),JV=a("a"),lWo=o("ReformerForQuestionAnswering"),iWo=o(" (Reformer model)"),dWo=l(),qv=a("li"),npe=a("strong"),cWo=o("rembert"),fWo=o(" \u2014 "),YV=a("a"),mWo=o("RemBertForQuestionAnswering"),gWo=o(" (RemBERT model)"),hWo=l(),Nv=a("li"),spe=a("strong"),pWo=o("roberta"),uWo=o(" \u2014 "),KV=a("a"),_Wo=o("RobertaForQuestionAnswering"),bWo=o(" (RoBERTa model)"),vWo=l(),jv=a("li"),lpe=a("strong"),FWo=o("roformer"),TWo=o(" \u2014 "),ZV=a("a"),MWo=o("RoFormerForQuestionAnswering"),EWo=o(" (RoFormer model)"),CWo=l(),Dv=a("li"),ipe=a("strong"),wWo=o("splinter"),AWo=o(" \u2014 "),eX=a("a"),yWo=o("SplinterForQuestionAnswering"),LWo=o(" (Splinter model)"),xWo=l(),Gv=a("li"),dpe=a("strong"),$Wo=o("squeezebert"),kWo=o(" \u2014 "),oX=a("a"),SWo=o("SqueezeBertForQuestionAnswering"),RWo=o(" (SqueezeBERT model)"),PWo=l(),Ov=a("li"),cpe=a("strong"),BWo=o("xlm"),IWo=o(" \u2014 "),rX=a("a"),qWo=o("XLMForQuestionAnsweringSimple"),NWo=o(" (XLM model)"),jWo=l(),Vv=a("li"),fpe=a("strong"),DWo=o("xlm-roberta"),GWo=o(" \u2014 "),tX=a("a"),OWo=o("XLMRobertaForQuestionAnswering"),VWo=o(" (XLM-RoBERTa model)"),XWo=l(),Xv=a("li"),mpe=a("strong"),zWo=o("xlm-roberta-xl"),WWo=o(" \u2014 "),aX=a("a"),QWo=o("XLMRobertaXLForQuestionAnswering"),HWo=o(" (XLM-RoBERTa-XL model)"),UWo=l(),zv=a("li"),gpe=a("strong"),JWo=o("xlnet"),YWo=o(" \u2014 "),nX=a("a"),KWo=o("XLNetForQuestionAnsweringSimple"),ZWo=o(" (XLNet model)"),eQo=l(),Wv=a("li"),hpe=a("strong"),oQo=o("yoso"),rQo=o(" \u2014 "),sX=a("a"),tQo=o("YosoForQuestionAnswering"),aQo=o(" (YOSO model)"),nQo=l(),Qv=a("p"),sQo=o("The model is set in evaluation mode by default using "),ppe=a("code"),lQo=o("model.eval()"),iQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),dQo=o("model.train()"),cQo=l(),F(Hv.$$.fragment),ENe=l(),od=a("h2"),Uv=a("a"),_pe=a("span"),F(Q6.$$.fragment),fQo=l(),bpe=a("span"),mQo=o("AutoModelForTableQuestionAnswering"),CNe=l(),No=a("div"),F(H6.$$.fragment),gQo=l(),rd=a("p"),hQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lX=a("a"),pQo=o("from_pretrained()"),uQo=o(" class method or the "),iX=a("a"),_Qo=o("from_config()"),bQo=o(` class
method.`),vQo=l(),U6=a("p"),FQo=o("This class cannot be instantiated directly using "),vpe=a("code"),TQo=o("__init__()"),MQo=o(" (throws an error)."),EQo=l(),gt=a("div"),F(J6.$$.fragment),CQo=l(),Fpe=a("p"),wQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),AQo=l(),td=a("p"),yQo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),LQo=o("not"),xQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),$Qo=o("from_pretrained()"),kQo=o(" to load the model weights."),SQo=l(),F(Jv.$$.fragment),RQo=l(),so=a("div"),F(Y6.$$.fragment),PQo=l(),Mpe=a("p"),BQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IQo=l(),Na=a("p"),qQo=o("The model class to instantiate is selected based on the "),Epe=a("code"),NQo=o("model_type"),jQo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),DQo=o("pretrained_model_name_or_path"),GQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),OQo=o("pretrained_model_name_or_path"),VQo=o(":"),XQo=l(),Ape=a("ul"),Yv=a("li"),ype=a("strong"),zQo=o("tapas"),WQo=o(" \u2014 "),cX=a("a"),QQo=o("TapasForQuestionAnswering"),HQo=o(" (TAPAS model)"),UQo=l(),Kv=a("p"),JQo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),YQo=o("model.eval()"),KQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),ZQo=o("model.train()"),eHo=l(),F(Zv.$$.fragment),wNe=l(),ad=a("h2"),e3=a("a"),$pe=a("span"),F(K6.$$.fragment),oHo=l(),kpe=a("span"),rHo=o("AutoModelForImageClassification"),ANe=l(),jo=a("div"),F(Z6.$$.fragment),tHo=l(),nd=a("p"),aHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fX=a("a"),nHo=o("from_pretrained()"),sHo=o(" class method or the "),mX=a("a"),lHo=o("from_config()"),iHo=o(` class
method.`),dHo=l(),ey=a("p"),cHo=o("This class cannot be instantiated directly using "),Spe=a("code"),fHo=o("__init__()"),mHo=o(" (throws an error)."),gHo=l(),ht=a("div"),F(oy.$$.fragment),hHo=l(),Rpe=a("p"),pHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uHo=l(),sd=a("p"),_Ho=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),bHo=o("not"),vHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),FHo=o("from_pretrained()"),THo=o(" to load the model weights."),MHo=l(),F(o3.$$.fragment),EHo=l(),lo=a("div"),F(ry.$$.fragment),CHo=l(),Bpe=a("p"),wHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AHo=l(),ja=a("p"),yHo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),LHo=o("model_type"),xHo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),SHo=o("pretrained_model_name_or_path"),RHo=o(":"),PHo=l(),Fe=a("ul"),r3=a("li"),jpe=a("strong"),BHo=o("beit"),IHo=o(" \u2014 "),hX=a("a"),qHo=o("BeitForImageClassification"),NHo=o(" (BEiT model)"),jHo=l(),t3=a("li"),Dpe=a("strong"),DHo=o("convnext"),GHo=o(" \u2014 "),pX=a("a"),OHo=o("ConvNextForImageClassification"),VHo=o(" (ConvNext model)"),XHo=l(),a3=a("li"),Gpe=a("strong"),zHo=o("cvt"),WHo=o(" \u2014 "),uX=a("a"),QHo=o("CvtForImageClassification"),HHo=o(" (CvT model)"),UHo=l(),n3=a("li"),Ope=a("strong"),JHo=o("data2vec-vision"),YHo=o(" \u2014 "),_X=a("a"),KHo=o("Data2VecVisionForImageClassification"),ZHo=o(" (Data2VecVision model)"),eUo=l(),Bs=a("li"),Vpe=a("strong"),oUo=o("deit"),rUo=o(" \u2014 "),bX=a("a"),tUo=o("DeiTForImageClassification"),aUo=o(" or "),vX=a("a"),nUo=o("DeiTForImageClassificationWithTeacher"),sUo=o(" (DeiT model)"),lUo=l(),s3=a("li"),Xpe=a("strong"),iUo=o("imagegpt"),dUo=o(" \u2014 "),FX=a("a"),cUo=o("ImageGPTForImageClassification"),fUo=o(" (ImageGPT model)"),mUo=l(),pt=a("li"),zpe=a("strong"),gUo=o("perceiver"),hUo=o(" \u2014 "),TX=a("a"),pUo=o("PerceiverForImageClassificationLearned"),uUo=o(" or "),MX=a("a"),_Uo=o("PerceiverForImageClassificationFourier"),bUo=o(" or "),EX=a("a"),vUo=o("PerceiverForImageClassificationConvProcessing"),FUo=o(" (Perceiver model)"),TUo=l(),l3=a("li"),Wpe=a("strong"),MUo=o("poolformer"),EUo=o(" \u2014 "),CX=a("a"),CUo=o("PoolFormerForImageClassification"),wUo=o(" (PoolFormer model)"),AUo=l(),i3=a("li"),Qpe=a("strong"),yUo=o("regnet"),LUo=o(" \u2014 "),wX=a("a"),xUo=o("RegNetForImageClassification"),$Uo=o(" (RegNet model)"),kUo=l(),d3=a("li"),Hpe=a("strong"),SUo=o("resnet"),RUo=o(" \u2014 "),AX=a("a"),PUo=o("ResNetForImageClassification"),BUo=o(" (ResNet model)"),IUo=l(),c3=a("li"),Upe=a("strong"),qUo=o("segformer"),NUo=o(" \u2014 "),yX=a("a"),jUo=o("SegformerForImageClassification"),DUo=o(" (SegFormer model)"),GUo=l(),f3=a("li"),Jpe=a("strong"),OUo=o("swin"),VUo=o(" \u2014 "),LX=a("a"),XUo=o("SwinForImageClassification"),zUo=o(" (Swin model)"),WUo=l(),m3=a("li"),Ype=a("strong"),QUo=o("van"),HUo=o(" \u2014 "),xX=a("a"),UUo=o("VanForImageClassification"),JUo=o(" (VAN model)"),YUo=l(),g3=a("li"),Kpe=a("strong"),KUo=o("vit"),ZUo=o(" \u2014 "),$X=a("a"),eJo=o("ViTForImageClassification"),oJo=o(" (ViT model)"),rJo=l(),h3=a("p"),tJo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),aJo=o("model.eval()"),nJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),sJo=o("model.train()"),lJo=l(),F(p3.$$.fragment),yNe=l(),ld=a("h2"),u3=a("a"),oue=a("span"),F(ty.$$.fragment),iJo=l(),rue=a("span"),dJo=o("AutoModelForVision2Seq"),LNe=l(),Do=a("div"),F(ay.$$.fragment),cJo=l(),id=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kX=a("a"),mJo=o("from_pretrained()"),gJo=o(" class method or the "),SX=a("a"),hJo=o("from_config()"),pJo=o(` class
method.`),uJo=l(),ny=a("p"),_Jo=o("This class cannot be instantiated directly using "),tue=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),FJo=l(),ut=a("div"),F(sy.$$.fragment),TJo=l(),aue=a("p"),MJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),EJo=l(),dd=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),wJo=o("not"),AJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),yJo=o("from_pretrained()"),LJo=o(" to load the model weights."),xJo=l(),F(_3.$$.fragment),$Jo=l(),io=a("div"),F(ly.$$.fragment),kJo=l(),sue=a("p"),SJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RJo=l(),Da=a("p"),PJo=o("The model class to instantiate is selected based on the "),lue=a("code"),BJo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),qJo=o("pretrained_model_name_or_path"),NJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),cue=a("ul"),b3=a("li"),fue=a("strong"),OJo=o("vision-encoder-decoder"),VJo=o(" \u2014 "),PX=a("a"),XJo=o("VisionEncoderDecoderModel"),zJo=o(" (Vision Encoder decoder model)"),WJo=l(),v3=a("p"),QJo=o("The model is set in evaluation mode by default using "),mue=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),JJo=o("model.train()"),YJo=l(),F(F3.$$.fragment),xNe=l(),cd=a("h2"),T3=a("a"),hue=a("span"),F(iy.$$.fragment),KJo=l(),pue=a("span"),ZJo=o("AutoModelForAudioClassification"),$Ne=l(),Go=a("div"),F(dy.$$.fragment),eYo=l(),fd=a("p"),oYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BX=a("a"),rYo=o("from_pretrained()"),tYo=o(" class method or the "),IX=a("a"),aYo=o("from_config()"),nYo=o(` class
method.`),sYo=l(),cy=a("p"),lYo=o("This class cannot be instantiated directly using "),uue=a("code"),iYo=o("__init__()"),dYo=o(" (throws an error)."),cYo=l(),_t=a("div"),F(fy.$$.fragment),fYo=l(),_ue=a("p"),mYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gYo=l(),md=a("p"),hYo=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),pYo=o("not"),uYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),_Yo=o("from_pretrained()"),bYo=o(" to load the model weights."),vYo=l(),F(M3.$$.fragment),FYo=l(),co=a("div"),F(my.$$.fragment),TYo=l(),vue=a("p"),MYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),EYo=l(),Ga=a("p"),CYo=o("The model class to instantiate is selected based on the "),Fue=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),xYo=o("pretrained_model_name_or_path"),$Yo=o(":"),kYo=l(),Se=a("ul"),E3=a("li"),Eue=a("strong"),SYo=o("data2vec-audio"),RYo=o(" \u2014 "),NX=a("a"),PYo=o("Data2VecAudioForSequenceClassification"),BYo=o(" (Data2VecAudio model)"),IYo=l(),C3=a("li"),Cue=a("strong"),qYo=o("hubert"),NYo=o(" \u2014 "),jX=a("a"),jYo=o("HubertForSequenceClassification"),DYo=o(" (Hubert model)"),GYo=l(),w3=a("li"),wue=a("strong"),OYo=o("sew"),VYo=o(" \u2014 "),DX=a("a"),XYo=o("SEWForSequenceClassification"),zYo=o(" (SEW model)"),WYo=l(),A3=a("li"),Aue=a("strong"),QYo=o("sew-d"),HYo=o(" \u2014 "),GX=a("a"),UYo=o("SEWDForSequenceClassification"),JYo=o(" (SEW-D model)"),YYo=l(),y3=a("li"),yue=a("strong"),KYo=o("unispeech"),ZYo=o(" \u2014 "),OX=a("a"),eKo=o("UniSpeechForSequenceClassification"),oKo=o(" (UniSpeech model)"),rKo=l(),L3=a("li"),Lue=a("strong"),tKo=o("unispeech-sat"),aKo=o(" \u2014 "),VX=a("a"),nKo=o("UniSpeechSatForSequenceClassification"),sKo=o(" (UniSpeechSat model)"),lKo=l(),x3=a("li"),xue=a("strong"),iKo=o("wav2vec2"),dKo=o(" \u2014 "),XX=a("a"),cKo=o("Wav2Vec2ForSequenceClassification"),fKo=o(" (Wav2Vec2 model)"),mKo=l(),$3=a("li"),$ue=a("strong"),gKo=o("wav2vec2-conformer"),hKo=o(" \u2014 "),zX=a("a"),pKo=o("Wav2Vec2ConformerForSequenceClassification"),uKo=o(" (Wav2Vec2-Conformer model)"),_Ko=l(),k3=a("li"),kue=a("strong"),bKo=o("wavlm"),vKo=o(" \u2014 "),WX=a("a"),FKo=o("WavLMForSequenceClassification"),TKo=o(" (WavLM model)"),MKo=l(),S3=a("p"),EKo=o("The model is set in evaluation mode by default using "),Sue=a("code"),CKo=o("model.eval()"),wKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),AKo=o("model.train()"),yKo=l(),F(R3.$$.fragment),kNe=l(),gd=a("h2"),P3=a("a"),Pue=a("span"),F(gy.$$.fragment),LKo=l(),Bue=a("span"),xKo=o("AutoModelForAudioFrameClassification"),SNe=l(),Oo=a("div"),F(hy.$$.fragment),$Ko=l(),hd=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QX=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),HX=a("a"),PKo=o("from_config()"),BKo=o(` class
method.`),IKo=l(),py=a("p"),qKo=o("This class cannot be instantiated directly using "),Iue=a("code"),NKo=o("__init__()"),jKo=o(" (throws an error)."),DKo=l(),bt=a("div"),F(uy.$$.fragment),GKo=l(),que=a("p"),OKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),VKo=l(),pd=a("p"),XKo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),zKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),QKo=o("from_pretrained()"),HKo=o(" to load the model weights."),UKo=l(),F(B3.$$.fragment),JKo=l(),fo=a("div"),F(_y.$$.fragment),YKo=l(),jue=a("p"),KKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ZKo=l(),Oa=a("p"),eZo=o("The model class to instantiate is selected based on the "),Due=a("code"),oZo=o("model_type"),rZo=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),nZo=o("pretrained_model_name_or_path"),sZo=o(":"),lZo=l(),Kr=a("ul"),I3=a("li"),Vue=a("strong"),iZo=o("data2vec-audio"),dZo=o(" \u2014 "),JX=a("a"),cZo=o("Data2VecAudioForAudioFrameClassification"),fZo=o(" (Data2VecAudio model)"),mZo=l(),q3=a("li"),Xue=a("strong"),gZo=o("unispeech-sat"),hZo=o(" \u2014 "),YX=a("a"),pZo=o("UniSpeechSatForAudioFrameClassification"),uZo=o(" (UniSpeechSat model)"),_Zo=l(),N3=a("li"),zue=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),KX=a("a"),FZo=o("Wav2Vec2ForAudioFrameClassification"),TZo=o(" (Wav2Vec2 model)"),MZo=l(),j3=a("li"),Wue=a("strong"),EZo=o("wav2vec2-conformer"),CZo=o(" \u2014 "),ZX=a("a"),wZo=o("Wav2Vec2ConformerForAudioFrameClassification"),AZo=o(" (Wav2Vec2-Conformer model)"),yZo=l(),D3=a("li"),Que=a("strong"),LZo=o("wavlm"),xZo=o(" \u2014 "),ez=a("a"),$Zo=o("WavLMForAudioFrameClassification"),kZo=o(" (WavLM model)"),SZo=l(),G3=a("p"),RZo=o("The model is set in evaluation mode by default using "),Hue=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),IZo=o("model.train()"),qZo=l(),F(O3.$$.fragment),RNe=l(),ud=a("h2"),V3=a("a"),Jue=a("span"),F(by.$$.fragment),NZo=l(),Yue=a("span"),jZo=o("AutoModelForCTC"),PNe=l(),Vo=a("div"),F(vy.$$.fragment),DZo=l(),_d=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oz=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),rz=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),WZo=l(),Fy=a("p"),QZo=o("This class cannot be instantiated directly using "),Kue=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),vt=a("div"),F(Ty.$$.fragment),YZo=l(),Zue=a("p"),KZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZZo=l(),bd=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(X3.$$.fragment),ser=l(),mo=a("div"),F(My.$$.fragment),ler=l(),o_e=a("p"),ier=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),der=l(),Va=a("p"),cer=o("The model class to instantiate is selected based on the "),r_e=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),per=o("pretrained_model_name_or_path"),uer=o(":"),_er=l(),Re=a("ul"),z3=a("li"),n_e=a("strong"),ber=o("data2vec-audio"),ver=o(" \u2014 "),az=a("a"),Fer=o("Data2VecAudioForCTC"),Ter=o(" (Data2VecAudio model)"),Mer=l(),W3=a("li"),s_e=a("strong"),Eer=o("hubert"),Cer=o(" \u2014 "),nz=a("a"),wer=o("HubertForCTC"),Aer=o(" (Hubert model)"),yer=l(),Q3=a("li"),l_e=a("strong"),Ler=o("sew"),xer=o(" \u2014 "),sz=a("a"),$er=o("SEWForCTC"),ker=o(" (SEW model)"),Ser=l(),H3=a("li"),i_e=a("strong"),Rer=o("sew-d"),Per=o(" \u2014 "),lz=a("a"),Ber=o("SEWDForCTC"),Ier=o(" (SEW-D model)"),qer=l(),U3=a("li"),d_e=a("strong"),Ner=o("unispeech"),jer=o(" \u2014 "),iz=a("a"),Der=o("UniSpeechForCTC"),Ger=o(" (UniSpeech model)"),Oer=l(),J3=a("li"),c_e=a("strong"),Ver=o("unispeech-sat"),Xer=o(" \u2014 "),dz=a("a"),zer=o("UniSpeechSatForCTC"),Wer=o(" (UniSpeechSat model)"),Qer=l(),Y3=a("li"),f_e=a("strong"),Her=o("wav2vec2"),Uer=o(" \u2014 "),cz=a("a"),Jer=o("Wav2Vec2ForCTC"),Yer=o(" (Wav2Vec2 model)"),Ker=l(),K3=a("li"),m_e=a("strong"),Zer=o("wav2vec2-conformer"),eor=o(" \u2014 "),fz=a("a"),oor=o("Wav2Vec2ConformerForCTC"),ror=o(" (Wav2Vec2-Conformer model)"),tor=l(),Z3=a("li"),g_e=a("strong"),aor=o("wavlm"),nor=o(" \u2014 "),mz=a("a"),sor=o("WavLMForCTC"),lor=o(" (WavLM model)"),ior=l(),eF=a("p"),dor=o("The model is set in evaluation mode by default using "),h_e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),gor=o("model.train()"),hor=l(),F(oF.$$.fragment),BNe=l(),vd=a("h2"),rF=a("a"),u_e=a("span"),F(Ey.$$.fragment),por=l(),__e=a("span"),uor=o("AutoModelForSpeechSeq2Seq"),INe=l(),Xo=a("div"),F(Cy.$$.fragment),_or=l(),Fd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gz=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),hz=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),wy=a("p"),Cor=o("This class cannot be instantiated directly using "),b_e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),yor=l(),Ft=a("div"),F(Ay.$$.fragment),Lor=l(),v_e=a("p"),xor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$or=l(),Td=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(tF.$$.fragment),qor=l(),go=a("div"),F(yy.$$.fragment),Nor=l(),T_e=a("p"),jor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dor=l(),Xa=a("p"),Gor=o("The model class to instantiate is selected based on the "),M_e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),Ly=a("ul"),aF=a("li"),w_e=a("strong"),Uor=o("speech-encoder-decoder"),Jor=o(" \u2014 "),uz=a("a"),Yor=o("SpeechEncoderDecoderModel"),Kor=o(" (Speech Encoder decoder model)"),Zor=l(),nF=a("li"),A_e=a("strong"),err=o("speech_to_text"),orr=o(" \u2014 "),_z=a("a"),rrr=o("Speech2TextForConditionalGeneration"),trr=o(" (Speech2Text model)"),arr=l(),sF=a("p"),nrr=o("The model is set in evaluation mode by default using "),y_e=a("code"),srr=o("model.eval()"),lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),irr=o("model.train()"),drr=l(),F(lF.$$.fragment),qNe=l(),Md=a("h2"),iF=a("a"),x_e=a("span"),F(xy.$$.fragment),crr=l(),$_e=a("span"),frr=o("AutoModelForAudioXVector"),NNe=l(),zo=a("div"),F($y.$$.fragment),mrr=l(),Ed=a("p"),grr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bz=a("a"),hrr=o("from_pretrained()"),prr=o(" class method or the "),vz=a("a"),urr=o("from_config()"),_rr=o(` class
method.`),brr=l(),ky=a("p"),vrr=o("This class cannot be instantiated directly using "),k_e=a("code"),Frr=o("__init__()"),Trr=o(" (throws an error)."),Mrr=l(),Tt=a("div"),F(Sy.$$.fragment),Err=l(),S_e=a("p"),Crr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wrr=l(),Cd=a("p"),Arr=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),yrr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),xrr=o("from_pretrained()"),$rr=o(" to load the model weights."),krr=l(),F(dF.$$.fragment),Srr=l(),ho=a("div"),F(Ry.$$.fragment),Rrr=l(),P_e=a("p"),Prr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Brr=l(),za=a("p"),Irr=o("The model class to instantiate is selected based on the "),B_e=a("code"),qrr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Vrr=l(),Zr=a("ul"),cF=a("li"),N_e=a("strong"),Xrr=o("data2vec-audio"),zrr=o(" \u2014 "),Tz=a("a"),Wrr=o("Data2VecAudioForXVector"),Qrr=o(" (Data2VecAudio model)"),Hrr=l(),fF=a("li"),j_e=a("strong"),Urr=o("unispeech-sat"),Jrr=o(" \u2014 "),Mz=a("a"),Yrr=o("UniSpeechSatForXVector"),Krr=o(" (UniSpeechSat model)"),Zrr=l(),mF=a("li"),D_e=a("strong"),etr=o("wav2vec2"),otr=o(" \u2014 "),Ez=a("a"),rtr=o("Wav2Vec2ForXVector"),ttr=o(" (Wav2Vec2 model)"),atr=l(),gF=a("li"),G_e=a("strong"),ntr=o("wav2vec2-conformer"),str=o(" \u2014 "),Cz=a("a"),ltr=o("Wav2Vec2ConformerForXVector"),itr=o(" (Wav2Vec2-Conformer model)"),dtr=l(),hF=a("li"),O_e=a("strong"),ctr=o("wavlm"),ftr=o(" \u2014 "),wz=a("a"),mtr=o("WavLMForXVector"),gtr=o(" (WavLM model)"),htr=l(),pF=a("p"),ptr=o("The model is set in evaluation mode by default using "),V_e=a("code"),utr=o("model.eval()"),_tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),btr=o("model.train()"),vtr=l(),F(uF.$$.fragment),jNe=l(),wd=a("h2"),_F=a("a"),z_e=a("span"),F(Py.$$.fragment),Ftr=l(),W_e=a("span"),Ttr=o("AutoModelForMaskedImageModeling"),DNe=l(),Wo=a("div"),F(By.$$.fragment),Mtr=l(),Ad=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Az=a("a"),Ctr=o("from_pretrained()"),wtr=o(" class method or the "),yz=a("a"),Atr=o("from_config()"),ytr=o(` class
method.`),Ltr=l(),Iy=a("p"),xtr=o("This class cannot be instantiated directly using "),Q_e=a("code"),$tr=o("__init__()"),ktr=o(" (throws an error)."),Str=l(),Mt=a("div"),F(qy.$$.fragment),Rtr=l(),H_e=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Btr=l(),yd=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),qtr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),jtr=o("from_pretrained()"),Dtr=o(" to load the model weights."),Gtr=l(),F(bF.$$.fragment),Otr=l(),po=a("div"),F(Ny.$$.fragment),Vtr=l(),J_e=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ztr=l(),Wa=a("p"),Wtr=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Qtr=o("model_type"),Htr=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Utr=o("pretrained_model_name_or_path"),Jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(":"),Ztr=l(),Ld=a("ul"),vF=a("li"),e1e=a("strong"),ear=o("deit"),oar=o(" \u2014 "),xz=a("a"),rar=o("DeiTForMaskedImageModeling"),tar=o(" (DeiT model)"),aar=l(),FF=a("li"),o1e=a("strong"),nar=o("swin"),sar=o(" \u2014 "),$z=a("a"),lar=o("SwinForMaskedImageModeling"),iar=o(" (Swin model)"),dar=l(),TF=a("li"),r1e=a("strong"),car=o("vit"),far=o(" \u2014 "),kz=a("a"),mar=o("ViTForMaskedImageModeling"),gar=o(" (ViT model)"),har=l(),MF=a("p"),par=o("The model is set in evaluation mode by default using "),t1e=a("code"),uar=o("model.eval()"),_ar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),bar=o("model.train()"),Far=l(),F(EF.$$.fragment),GNe=l(),xd=a("h2"),CF=a("a"),n1e=a("span"),F(jy.$$.fragment),Tar=l(),s1e=a("span"),Mar=o("AutoModelForObjectDetection"),ONe=l(),Qo=a("div"),F(Dy.$$.fragment),Ear=l(),$d=a("p"),Car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Sz=a("a"),war=o("from_pretrained()"),Aar=o(" class method or the "),Rz=a("a"),yar=o("from_config()"),Lar=o(` class
method.`),xar=l(),Gy=a("p"),$ar=o("This class cannot be instantiated directly using "),l1e=a("code"),kar=o("__init__()"),Sar=o(" (throws an error)."),Rar=l(),Et=a("div"),F(Oy.$$.fragment),Par=l(),i1e=a("p"),Bar=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Iar=l(),kd=a("p"),qar=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),Nar=o("not"),jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),Dar=o("from_pretrained()"),Gar=o(" to load the model weights."),Oar=l(),F(wF.$$.fragment),Var=l(),uo=a("div"),F(Vy.$$.fragment),Xar=l(),c1e=a("p"),zar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),War=l(),Qa=a("p"),Qar=o("The model class to instantiate is selected based on the "),f1e=a("code"),Har=o("model_type"),Uar=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),Jar=o("pretrained_model_name_or_path"),Yar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(":"),enr=l(),Xy=a("ul"),AF=a("li"),h1e=a("strong"),onr=o("detr"),rnr=o(" \u2014 "),Bz=a("a"),tnr=o("DetrForObjectDetection"),anr=o(" (DETR model)"),nnr=l(),yF=a("li"),p1e=a("strong"),snr=o("yolos"),lnr=o(" \u2014 "),Iz=a("a"),inr=o("YolosForObjectDetection"),dnr=o(" (YOLOS model)"),cnr=l(),LF=a("p"),fnr=o("The model is set in evaluation mode by default using "),u1e=a("code"),mnr=o("model.eval()"),gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=a("code"),hnr=o("model.train()"),pnr=l(),F(xF.$$.fragment),VNe=l(),Sd=a("h2"),$F=a("a"),b1e=a("span"),F(zy.$$.fragment),unr=l(),v1e=a("span"),_nr=o("AutoModelForImageSegmentation"),XNe=l(),Ho=a("div"),F(Wy.$$.fragment),bnr=l(),Rd=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qz=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" class method or the "),Nz=a("a"),Mnr=o("from_config()"),Enr=o(` class
method.`),Cnr=l(),Qy=a("p"),wnr=o("This class cannot be instantiated directly using "),F1e=a("code"),Anr=o("__init__()"),ynr=o(" (throws an error)."),Lnr=l(),Ct=a("div"),F(Hy.$$.fragment),xnr=l(),T1e=a("p"),$nr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),knr=l(),Pd=a("p"),Snr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),Rnr=o("not"),Pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Bnr=o("from_pretrained()"),Inr=o(" to load the model weights."),qnr=l(),F(kF.$$.fragment),Nnr=l(),_o=a("div"),F(Uy.$$.fragment),jnr=l(),E1e=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gnr=l(),Ha=a("p"),Onr=o("The model class to instantiate is selected based on the "),C1e=a("code"),Vnr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(":"),Unr=l(),y1e=a("ul"),SF=a("li"),L1e=a("strong"),Jnr=o("detr"),Ynr=o(" \u2014 "),Dz=a("a"),Knr=o("DetrForSegmentation"),Znr=o(" (DETR model)"),esr=l(),RF=a("p"),osr=o("The model is set in evaluation mode by default using "),x1e=a("code"),rsr=o("model.eval()"),tsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),asr=o("model.train()"),nsr=l(),F(PF.$$.fragment),zNe=l(),Bd=a("h2"),BF=a("a"),k1e=a("span"),F(Jy.$$.fragment),ssr=l(),S1e=a("span"),lsr=o("AutoModelForSemanticSegmentation"),WNe=l(),Uo=a("div"),F(Yy.$$.fragment),isr=l(),Id=a("p"),dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Gz=a("a"),csr=o("from_pretrained()"),fsr=o(" class method or the "),Oz=a("a"),msr=o("from_config()"),gsr=o(` class
method.`),hsr=l(),Ky=a("p"),psr=o("This class cannot be instantiated directly using "),R1e=a("code"),usr=o("__init__()"),_sr=o(" (throws an error)."),bsr=l(),wt=a("div"),F(Zy.$$.fragment),vsr=l(),P1e=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tsr=l(),qd=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),Esr=o("not"),Csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),wsr=o("from_pretrained()"),Asr=o(" to load the model weights."),ysr=l(),F(IF.$$.fragment),Lsr=l(),bo=a("div"),F(eL.$$.fragment),xsr=l(),I1e=a("p"),$sr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ksr=l(),Ua=a("p"),Ssr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Rsr=o("model_type"),Psr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),qsr=o("pretrained_model_name_or_path"),Nsr=o(":"),jsr=l(),Ja=a("ul"),qF=a("li"),D1e=a("strong"),Dsr=o("beit"),Gsr=o(" \u2014 "),Xz=a("a"),Osr=o("BeitForSemanticSegmentation"),Vsr=o(" (BEiT model)"),Xsr=l(),NF=a("li"),G1e=a("strong"),zsr=o("data2vec-vision"),Wsr=o(" \u2014 "),zz=a("a"),Qsr=o("Data2VecVisionForSemanticSegmentation"),Hsr=o(" (Data2VecVision model)"),Usr=l(),jF=a("li"),O1e=a("strong"),Jsr=o("dpt"),Ysr=o(" \u2014 "),Wz=a("a"),Ksr=o("DPTForSemanticSegmentation"),Zsr=o(" (DPT model)"),elr=l(),DF=a("li"),V1e=a("strong"),olr=o("segformer"),rlr=o(" \u2014 "),Qz=a("a"),tlr=o("SegformerForSemanticSegmentation"),alr=o(" (SegFormer model)"),nlr=l(),GF=a("p"),slr=o("The model is set in evaluation mode by default using "),X1e=a("code"),llr=o("model.eval()"),ilr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),dlr=o("model.train()"),clr=l(),F(OF.$$.fragment),QNe=l(),Nd=a("h2"),VF=a("a"),W1e=a("span"),F(oL.$$.fragment),flr=l(),Q1e=a("span"),mlr=o("AutoModelForInstanceSegmentation"),HNe=l(),Jo=a("div"),F(rL.$$.fragment),glr=l(),jd=a("p"),hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Hz=a("a"),plr=o("from_pretrained()"),ulr=o(" class method or the "),Uz=a("a"),_lr=o("from_config()"),blr=o(` class
method.`),vlr=l(),tL=a("p"),Flr=o("This class cannot be instantiated directly using "),H1e=a("code"),Tlr=o("__init__()"),Mlr=o(" (throws an error)."),Elr=l(),At=a("div"),F(aL.$$.fragment),Clr=l(),U1e=a("p"),wlr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Alr=l(),Dd=a("p"),ylr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Llr=o("not"),xlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),$lr=o("from_pretrained()"),klr=o(" to load the model weights."),Slr=l(),F(XF.$$.fragment),Rlr=l(),vo=a("div"),F(nL.$$.fragment),Plr=l(),Y1e=a("p"),Blr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ilr=l(),Ya=a("p"),qlr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Nlr=o("model_type"),jlr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Dlr=o("pretrained_model_name_or_path"),Glr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),Olr=o("pretrained_model_name_or_path"),Vlr=o(":"),Xlr=l(),o8e=a("ul"),zF=a("li"),r8e=a("strong"),zlr=o("maskformer"),Wlr=o(" \u2014 "),Yz=a("a"),Qlr=o("MaskFormerForInstanceSegmentation"),Hlr=o(" (MaskFormer model)"),Ulr=l(),WF=a("p"),Jlr=o("The model is set in evaluation mode by default using "),t8e=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),Zlr=o("model.train()"),eir=l(),F(QF.$$.fragment),UNe=l(),Gd=a("h2"),HF=a("a"),n8e=a("span"),F(sL.$$.fragment),oir=l(),s8e=a("span"),rir=o("TFAutoModel"),JNe=l(),Yo=a("div"),F(lL.$$.fragment),tir=l(),Od=a("p"),air=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kz=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),Zz=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),iL=a("p"),cir=o("This class cannot be instantiated directly using "),l8e=a("code"),fir=o("__init__()"),mir=o(" (throws an error)."),gir=l(),yt=a("div"),F(dL.$$.fragment),hir=l(),i8e=a("p"),pir=o("Instantiates one of the base model classes of the library from a configuration."),uir=l(),Vd=a("p"),_ir=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(UF.$$.fragment),Eir=l(),wr=a("div"),F(cL.$$.fragment),Cir=l(),c8e=a("p"),wir=o("Instantiate one of the base model classes of the library from a pretrained model."),Air=l(),Ka=a("p"),yir=o("The model class to instantiate is selected based on the "),f8e=a("code"),Lir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),N=a("ul"),JF=a("li"),h8e=a("strong"),Bir=o("albert"),Iir=o(" \u2014 "),oW=a("a"),qir=o("TFAlbertModel"),Nir=o(" (ALBERT model)"),jir=l(),YF=a("li"),p8e=a("strong"),Dir=o("bart"),Gir=o(" \u2014 "),rW=a("a"),Oir=o("TFBartModel"),Vir=o(" (BART model)"),Xir=l(),KF=a("li"),u8e=a("strong"),zir=o("bert"),Wir=o(" \u2014 "),tW=a("a"),Qir=o("TFBertModel"),Hir=o(" (BERT model)"),Uir=l(),ZF=a("li"),_8e=a("strong"),Jir=o("blenderbot"),Yir=o(" \u2014 "),aW=a("a"),Kir=o("TFBlenderbotModel"),Zir=o(" (Blenderbot model)"),edr=l(),eT=a("li"),b8e=a("strong"),odr=o("blenderbot-small"),rdr=o(" \u2014 "),nW=a("a"),tdr=o("TFBlenderbotSmallModel"),adr=o(" (BlenderbotSmall model)"),ndr=l(),oT=a("li"),v8e=a("strong"),sdr=o("camembert"),ldr=o(" \u2014 "),sW=a("a"),idr=o("TFCamembertModel"),ddr=o(" (CamemBERT model)"),cdr=l(),rT=a("li"),F8e=a("strong"),fdr=o("clip"),mdr=o(" \u2014 "),lW=a("a"),gdr=o("TFCLIPModel"),hdr=o(" (CLIP model)"),pdr=l(),tT=a("li"),T8e=a("strong"),udr=o("convbert"),_dr=o(" \u2014 "),iW=a("a"),bdr=o("TFConvBertModel"),vdr=o(" (ConvBERT model)"),Fdr=l(),aT=a("li"),M8e=a("strong"),Tdr=o("convnext"),Mdr=o(" \u2014 "),dW=a("a"),Edr=o("TFConvNextModel"),Cdr=o(" (ConvNext model)"),wdr=l(),nT=a("li"),E8e=a("strong"),Adr=o("ctrl"),ydr=o(" \u2014 "),cW=a("a"),Ldr=o("TFCTRLModel"),xdr=o(" (CTRL model)"),$dr=l(),sT=a("li"),C8e=a("strong"),kdr=o("data2vec-vision"),Sdr=o(" \u2014 "),fW=a("a"),Rdr=o("TFData2VecVisionModel"),Pdr=o(" (Data2VecVision model)"),Bdr=l(),lT=a("li"),w8e=a("strong"),Idr=o("deberta"),qdr=o(" \u2014 "),mW=a("a"),Ndr=o("TFDebertaModel"),jdr=o(" (DeBERTa model)"),Ddr=l(),iT=a("li"),A8e=a("strong"),Gdr=o("deberta-v2"),Odr=o(" \u2014 "),gW=a("a"),Vdr=o("TFDebertaV2Model"),Xdr=o(" (DeBERTa-v2 model)"),zdr=l(),dT=a("li"),y8e=a("strong"),Wdr=o("distilbert"),Qdr=o(" \u2014 "),hW=a("a"),Hdr=o("TFDistilBertModel"),Udr=o(" (DistilBERT model)"),Jdr=l(),cT=a("li"),L8e=a("strong"),Ydr=o("dpr"),Kdr=o(" \u2014 "),pW=a("a"),Zdr=o("TFDPRQuestionEncoder"),ecr=o(" (DPR model)"),ocr=l(),fT=a("li"),x8e=a("strong"),rcr=o("electra"),tcr=o(" \u2014 "),uW=a("a"),acr=o("TFElectraModel"),ncr=o(" (ELECTRA model)"),scr=l(),mT=a("li"),$8e=a("strong"),lcr=o("flaubert"),icr=o(" \u2014 "),_W=a("a"),dcr=o("TFFlaubertModel"),ccr=o(" (FlauBERT model)"),fcr=l(),Is=a("li"),k8e=a("strong"),mcr=o("funnel"),gcr=o(" \u2014 "),bW=a("a"),hcr=o("TFFunnelModel"),pcr=o(" or "),vW=a("a"),ucr=o("TFFunnelBaseModel"),_cr=o(" (Funnel Transformer model)"),bcr=l(),gT=a("li"),S8e=a("strong"),vcr=o("gpt2"),Fcr=o(" \u2014 "),FW=a("a"),Tcr=o("TFGPT2Model"),Mcr=o(" (OpenAI GPT-2 model)"),Ecr=l(),hT=a("li"),R8e=a("strong"),Ccr=o("gptj"),wcr=o(" \u2014 "),TW=a("a"),Acr=o("TFGPTJModel"),ycr=o(" (GPT-J model)"),Lcr=l(),pT=a("li"),P8e=a("strong"),xcr=o("hubert"),$cr=o(" \u2014 "),MW=a("a"),kcr=o("TFHubertModel"),Scr=o(" (Hubert model)"),Rcr=l(),uT=a("li"),B8e=a("strong"),Pcr=o("layoutlm"),Bcr=o(" \u2014 "),EW=a("a"),Icr=o("TFLayoutLMModel"),qcr=o(" (LayoutLM model)"),Ncr=l(),_T=a("li"),I8e=a("strong"),jcr=o("led"),Dcr=o(" \u2014 "),CW=a("a"),Gcr=o("TFLEDModel"),Ocr=o(" (LED model)"),Vcr=l(),bT=a("li"),q8e=a("strong"),Xcr=o("longformer"),zcr=o(" \u2014 "),wW=a("a"),Wcr=o("TFLongformerModel"),Qcr=o(" (Longformer model)"),Hcr=l(),vT=a("li"),N8e=a("strong"),Ucr=o("lxmert"),Jcr=o(" \u2014 "),AW=a("a"),Ycr=o("TFLxmertModel"),Kcr=o(" (LXMERT model)"),Zcr=l(),FT=a("li"),j8e=a("strong"),efr=o("marian"),ofr=o(" \u2014 "),yW=a("a"),rfr=o("TFMarianModel"),tfr=o(" (Marian model)"),afr=l(),TT=a("li"),D8e=a("strong"),nfr=o("mbart"),sfr=o(" \u2014 "),LW=a("a"),lfr=o("TFMBartModel"),ifr=o(" (mBART model)"),dfr=l(),MT=a("li"),G8e=a("strong"),cfr=o("mobilebert"),ffr=o(" \u2014 "),xW=a("a"),mfr=o("TFMobileBertModel"),gfr=o(" (MobileBERT model)"),hfr=l(),ET=a("li"),O8e=a("strong"),pfr=o("mpnet"),ufr=o(" \u2014 "),$W=a("a"),_fr=o("TFMPNetModel"),bfr=o(" (MPNet model)"),vfr=l(),CT=a("li"),V8e=a("strong"),Ffr=o("mt5"),Tfr=o(" \u2014 "),kW=a("a"),Mfr=o("TFMT5Model"),Efr=o(" (mT5 model)"),Cfr=l(),wT=a("li"),X8e=a("strong"),wfr=o("openai-gpt"),Afr=o(" \u2014 "),SW=a("a"),yfr=o("TFOpenAIGPTModel"),Lfr=o(" (OpenAI GPT model)"),xfr=l(),AT=a("li"),z8e=a("strong"),$fr=o("opt"),kfr=o(" \u2014 "),RW=a("a"),Sfr=o("TFOPTModel"),Rfr=o(" (OPT model)"),Pfr=l(),yT=a("li"),W8e=a("strong"),Bfr=o("pegasus"),Ifr=o(" \u2014 "),PW=a("a"),qfr=o("TFPegasusModel"),Nfr=o(" (Pegasus model)"),jfr=l(),LT=a("li"),Q8e=a("strong"),Dfr=o("rembert"),Gfr=o(" \u2014 "),BW=a("a"),Ofr=o("TFRemBertModel"),Vfr=o(" (RemBERT model)"),Xfr=l(),xT=a("li"),H8e=a("strong"),zfr=o("roberta"),Wfr=o(" \u2014 "),IW=a("a"),Qfr=o("TFRobertaModel"),Hfr=o(" (RoBERTa model)"),Ufr=l(),$T=a("li"),U8e=a("strong"),Jfr=o("roformer"),Yfr=o(" \u2014 "),qW=a("a"),Kfr=o("TFRoFormerModel"),Zfr=o(" (RoFormer model)"),emr=l(),kT=a("li"),J8e=a("strong"),omr=o("speech_to_text"),rmr=o(" \u2014 "),NW=a("a"),tmr=o("TFSpeech2TextModel"),amr=o(" (Speech2Text model)"),nmr=l(),ST=a("li"),Y8e=a("strong"),smr=o("swin"),lmr=o(" \u2014 "),jW=a("a"),imr=o("TFSwinModel"),dmr=o(" (Swin model)"),cmr=l(),RT=a("li"),K8e=a("strong"),fmr=o("t5"),mmr=o(" \u2014 "),DW=a("a"),gmr=o("TFT5Model"),hmr=o(" (T5 model)"),pmr=l(),PT=a("li"),Z8e=a("strong"),umr=o("tapas"),_mr=o(" \u2014 "),GW=a("a"),bmr=o("TFTapasModel"),vmr=o(" (TAPAS model)"),Fmr=l(),BT=a("li"),ebe=a("strong"),Tmr=o("transfo-xl"),Mmr=o(" \u2014 "),OW=a("a"),Emr=o("TFTransfoXLModel"),Cmr=o(" (Transformer-XL model)"),wmr=l(),IT=a("li"),obe=a("strong"),Amr=o("vit"),ymr=o(" \u2014 "),VW=a("a"),Lmr=o("TFViTModel"),xmr=o(" (ViT model)"),$mr=l(),qT=a("li"),rbe=a("strong"),kmr=o("vit_mae"),Smr=o(" \u2014 "),XW=a("a"),Rmr=o("TFViTMAEModel"),Pmr=o(" (ViTMAE model)"),Bmr=l(),NT=a("li"),tbe=a("strong"),Imr=o("wav2vec2"),qmr=o(" \u2014 "),zW=a("a"),Nmr=o("TFWav2Vec2Model"),jmr=o(" (Wav2Vec2 model)"),Dmr=l(),jT=a("li"),abe=a("strong"),Gmr=o("xlm"),Omr=o(" \u2014 "),WW=a("a"),Vmr=o("TFXLMModel"),Xmr=o(" (XLM model)"),zmr=l(),DT=a("li"),nbe=a("strong"),Wmr=o("xlm-roberta"),Qmr=o(" \u2014 "),QW=a("a"),Hmr=o("TFXLMRobertaModel"),Umr=o(" (XLM-RoBERTa model)"),Jmr=l(),GT=a("li"),sbe=a("strong"),Ymr=o("xlnet"),Kmr=o(" \u2014 "),HW=a("a"),Zmr=o("TFXLNetModel"),egr=o(" (XLNet model)"),ogr=l(),F(OT.$$.fragment),YNe=l(),Xd=a("h2"),VT=a("a"),lbe=a("span"),F(fL.$$.fragment),rgr=l(),ibe=a("span"),tgr=o("TFAutoModelForPreTraining"),KNe=l(),Ko=a("div"),F(mL.$$.fragment),agr=l(),zd=a("p"),ngr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UW=a("a"),sgr=o("from_pretrained()"),lgr=o(" class method or the "),JW=a("a"),igr=o("from_config()"),dgr=o(` class
method.`),cgr=l(),gL=a("p"),fgr=o("This class cannot be instantiated directly using "),dbe=a("code"),mgr=o("__init__()"),ggr=o(" (throws an error)."),hgr=l(),Lt=a("div"),F(hL.$$.fragment),pgr=l(),cbe=a("p"),ugr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_gr=l(),Wd=a("p"),bgr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),vgr=o("not"),Fgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),Tgr=o("from_pretrained()"),Mgr=o(" to load the model weights."),Egr=l(),F(XT.$$.fragment),Cgr=l(),Ar=a("div"),F(pL.$$.fragment),wgr=l(),mbe=a("p"),Agr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ygr=l(),Za=a("p"),Lgr=o("The model class to instantiate is selected based on the "),gbe=a("code"),xgr=o("model_type"),$gr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),kgr=o("pretrained_model_name_or_path"),Sgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Rgr=o("pretrained_model_name_or_path"),Pgr=o(":"),Bgr=l(),se=a("ul"),zT=a("li"),ube=a("strong"),Igr=o("albert"),qgr=o(" \u2014 "),KW=a("a"),Ngr=o("TFAlbertForPreTraining"),jgr=o(" (ALBERT model)"),Dgr=l(),WT=a("li"),_be=a("strong"),Ggr=o("bart"),Ogr=o(" \u2014 "),ZW=a("a"),Vgr=o("TFBartForConditionalGeneration"),Xgr=o(" (BART model)"),zgr=l(),QT=a("li"),bbe=a("strong"),Wgr=o("bert"),Qgr=o(" \u2014 "),eQ=a("a"),Hgr=o("TFBertForPreTraining"),Ugr=o(" (BERT model)"),Jgr=l(),HT=a("li"),vbe=a("strong"),Ygr=o("camembert"),Kgr=o(" \u2014 "),oQ=a("a"),Zgr=o("TFCamembertForMaskedLM"),ehr=o(" (CamemBERT model)"),ohr=l(),UT=a("li"),Fbe=a("strong"),rhr=o("ctrl"),thr=o(" \u2014 "),rQ=a("a"),ahr=o("TFCTRLLMHeadModel"),nhr=o(" (CTRL model)"),shr=l(),JT=a("li"),Tbe=a("strong"),lhr=o("distilbert"),ihr=o(" \u2014 "),tQ=a("a"),dhr=o("TFDistilBertForMaskedLM"),chr=o(" (DistilBERT model)"),fhr=l(),YT=a("li"),Mbe=a("strong"),mhr=o("electra"),ghr=o(" \u2014 "),aQ=a("a"),hhr=o("TFElectraForPreTraining"),phr=o(" (ELECTRA model)"),uhr=l(),KT=a("li"),Ebe=a("strong"),_hr=o("flaubert"),bhr=o(" \u2014 "),nQ=a("a"),vhr=o("TFFlaubertWithLMHeadModel"),Fhr=o(" (FlauBERT model)"),Thr=l(),ZT=a("li"),Cbe=a("strong"),Mhr=o("funnel"),Ehr=o(" \u2014 "),sQ=a("a"),Chr=o("TFFunnelForPreTraining"),whr=o(" (Funnel Transformer model)"),Ahr=l(),e7=a("li"),wbe=a("strong"),yhr=o("gpt2"),Lhr=o(" \u2014 "),lQ=a("a"),xhr=o("TFGPT2LMHeadModel"),$hr=o(" (OpenAI GPT-2 model)"),khr=l(),o7=a("li"),Abe=a("strong"),Shr=o("layoutlm"),Rhr=o(" \u2014 "),iQ=a("a"),Phr=o("TFLayoutLMForMaskedLM"),Bhr=o(" (LayoutLM model)"),Ihr=l(),r7=a("li"),ybe=a("strong"),qhr=o("lxmert"),Nhr=o(" \u2014 "),dQ=a("a"),jhr=o("TFLxmertForPreTraining"),Dhr=o(" (LXMERT model)"),Ghr=l(),t7=a("li"),Lbe=a("strong"),Ohr=o("mobilebert"),Vhr=o(" \u2014 "),cQ=a("a"),Xhr=o("TFMobileBertForPreTraining"),zhr=o(" (MobileBERT model)"),Whr=l(),a7=a("li"),xbe=a("strong"),Qhr=o("mpnet"),Hhr=o(" \u2014 "),fQ=a("a"),Uhr=o("TFMPNetForMaskedLM"),Jhr=o(" (MPNet model)"),Yhr=l(),n7=a("li"),$be=a("strong"),Khr=o("openai-gpt"),Zhr=o(" \u2014 "),mQ=a("a"),epr=o("TFOpenAIGPTLMHeadModel"),opr=o(" (OpenAI GPT model)"),rpr=l(),s7=a("li"),kbe=a("strong"),tpr=o("roberta"),apr=o(" \u2014 "),gQ=a("a"),npr=o("TFRobertaForMaskedLM"),spr=o(" (RoBERTa model)"),lpr=l(),l7=a("li"),Sbe=a("strong"),ipr=o("t5"),dpr=o(" \u2014 "),hQ=a("a"),cpr=o("TFT5ForConditionalGeneration"),fpr=o(" (T5 model)"),mpr=l(),i7=a("li"),Rbe=a("strong"),gpr=o("tapas"),hpr=o(" \u2014 "),pQ=a("a"),ppr=o("TFTapasForMaskedLM"),upr=o(" (TAPAS model)"),_pr=l(),d7=a("li"),Pbe=a("strong"),bpr=o("transfo-xl"),vpr=o(" \u2014 "),uQ=a("a"),Fpr=o("TFTransfoXLLMHeadModel"),Tpr=o(" (Transformer-XL model)"),Mpr=l(),c7=a("li"),Bbe=a("strong"),Epr=o("vit_mae"),Cpr=o(" \u2014 "),_Q=a("a"),wpr=o("TFViTMAEForPreTraining"),Apr=o(" (ViTMAE model)"),ypr=l(),f7=a("li"),Ibe=a("strong"),Lpr=o("xlm"),xpr=o(" \u2014 "),bQ=a("a"),$pr=o("TFXLMWithLMHeadModel"),kpr=o(" (XLM model)"),Spr=l(),m7=a("li"),qbe=a("strong"),Rpr=o("xlm-roberta"),Ppr=o(" \u2014 "),vQ=a("a"),Bpr=o("TFXLMRobertaForMaskedLM"),Ipr=o(" (XLM-RoBERTa model)"),qpr=l(),g7=a("li"),Nbe=a("strong"),Npr=o("xlnet"),jpr=o(" \u2014 "),FQ=a("a"),Dpr=o("TFXLNetLMHeadModel"),Gpr=o(" (XLNet model)"),Opr=l(),F(h7.$$.fragment),ZNe=l(),Qd=a("h2"),p7=a("a"),jbe=a("span"),F(uL.$$.fragment),Vpr=l(),Dbe=a("span"),Xpr=o("TFAutoModelForCausalLM"),eje=l(),Zo=a("div"),F(_L.$$.fragment),zpr=l(),Hd=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=a("a"),Qpr=o("from_pretrained()"),Hpr=o(" class method or the "),MQ=a("a"),Upr=o("from_config()"),Jpr=o(` class
method.`),Ypr=l(),bL=a("p"),Kpr=o("This class cannot be instantiated directly using "),Gbe=a("code"),Zpr=o("__init__()"),eur=o(" (throws an error)."),our=l(),xt=a("div"),F(vL.$$.fragment),rur=l(),Obe=a("p"),tur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aur=l(),Ud=a("p"),nur=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),sur=o("not"),lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),iur=o("from_pretrained()"),dur=o(" to load the model weights."),cur=l(),F(u7.$$.fragment),fur=l(),yr=a("div"),F(FL.$$.fragment),mur=l(),Xbe=a("p"),gur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hur=l(),en=a("p"),pur=o("The model class to instantiate is selected based on the "),zbe=a("code"),uur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),bur=o("pretrained_model_name_or_path"),vur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(":"),Mur=l(),Me=a("ul"),_7=a("li"),Hbe=a("strong"),Eur=o("bert"),Cur=o(" \u2014 "),CQ=a("a"),wur=o("TFBertLMHeadModel"),Aur=o(" (BERT model)"),yur=l(),b7=a("li"),Ube=a("strong"),Lur=o("camembert"),xur=o(" \u2014 "),wQ=a("a"),$ur=o("TFCamembertForCausalLM"),kur=o(" (CamemBERT model)"),Sur=l(),v7=a("li"),Jbe=a("strong"),Rur=o("ctrl"),Pur=o(" \u2014 "),AQ=a("a"),Bur=o("TFCTRLLMHeadModel"),Iur=o(" (CTRL model)"),qur=l(),F7=a("li"),Ybe=a("strong"),Nur=o("gpt2"),jur=o(" \u2014 "),yQ=a("a"),Dur=o("TFGPT2LMHeadModel"),Gur=o(" (OpenAI GPT-2 model)"),Our=l(),T7=a("li"),Kbe=a("strong"),Vur=o("gptj"),Xur=o(" \u2014 "),LQ=a("a"),zur=o("TFGPTJForCausalLM"),Wur=o(" (GPT-J model)"),Qur=l(),M7=a("li"),Zbe=a("strong"),Hur=o("openai-gpt"),Uur=o(" \u2014 "),xQ=a("a"),Jur=o("TFOpenAIGPTLMHeadModel"),Yur=o(" (OpenAI GPT model)"),Kur=l(),E7=a("li"),e2e=a("strong"),Zur=o("rembert"),e_r=o(" \u2014 "),$Q=a("a"),o_r=o("TFRemBertForCausalLM"),r_r=o(" (RemBERT model)"),t_r=l(),C7=a("li"),o2e=a("strong"),a_r=o("roberta"),n_r=o(" \u2014 "),kQ=a("a"),s_r=o("TFRobertaForCausalLM"),l_r=o(" (RoBERTa model)"),i_r=l(),w7=a("li"),r2e=a("strong"),d_r=o("roformer"),c_r=o(" \u2014 "),SQ=a("a"),f_r=o("TFRoFormerForCausalLM"),m_r=o(" (RoFormer model)"),g_r=l(),A7=a("li"),t2e=a("strong"),h_r=o("transfo-xl"),p_r=o(" \u2014 "),RQ=a("a"),u_r=o("TFTransfoXLLMHeadModel"),__r=o(" (Transformer-XL model)"),b_r=l(),y7=a("li"),a2e=a("strong"),v_r=o("xlm"),F_r=o(" \u2014 "),PQ=a("a"),T_r=o("TFXLMWithLMHeadModel"),M_r=o(" (XLM model)"),E_r=l(),L7=a("li"),n2e=a("strong"),C_r=o("xlnet"),w_r=o(" \u2014 "),BQ=a("a"),A_r=o("TFXLNetLMHeadModel"),y_r=o(" (XLNet model)"),L_r=l(),F(x7.$$.fragment),oje=l(),Jd=a("h2"),$7=a("a"),s2e=a("span"),F(TL.$$.fragment),x_r=l(),l2e=a("span"),$_r=o("TFAutoModelForImageClassification"),rje=l(),er=a("div"),F(ML.$$.fragment),k_r=l(),Yd=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=a("a"),R_r=o("from_pretrained()"),P_r=o(" class method or the "),qQ=a("a"),B_r=o("from_config()"),I_r=o(` class
method.`),q_r=l(),EL=a("p"),N_r=o("This class cannot be instantiated directly using "),i2e=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),$t=a("div"),F(CL.$$.fragment),O_r=l(),d2e=a("p"),V_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X_r=l(),Kd=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),W_r=o("not"),Q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(k7.$$.fragment),Y_r=l(),Lr=a("div"),F(wL.$$.fragment),K_r=l(),f2e=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e1r=l(),on=a("p"),o1r=o("The model class to instantiate is selected based on the "),m2e=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),rn=a("ul"),S7=a("li"),p2e=a("strong"),d1r=o("convnext"),c1r=o(" \u2014 "),jQ=a("a"),f1r=o("TFConvNextForImageClassification"),m1r=o(" (ConvNext model)"),g1r=l(),R7=a("li"),u2e=a("strong"),h1r=o("data2vec-vision"),p1r=o(" \u2014 "),DQ=a("a"),u1r=o("TFData2VecVisionForImageClassification"),_1r=o(" (Data2VecVision model)"),b1r=l(),P7=a("li"),_2e=a("strong"),v1r=o("swin"),F1r=o(" \u2014 "),GQ=a("a"),T1r=o("TFSwinForImageClassification"),M1r=o(" (Swin model)"),E1r=l(),B7=a("li"),b2e=a("strong"),C1r=o("vit"),w1r=o(" \u2014 "),OQ=a("a"),A1r=o("TFViTForImageClassification"),y1r=o(" (ViT model)"),L1r=l(),F(I7.$$.fragment),tje=l(),Zd=a("h2"),q7=a("a"),v2e=a("span"),F(AL.$$.fragment),x1r=l(),F2e=a("span"),$1r=o("TFAutoModelForMaskedLM"),aje=l(),or=a("div"),F(yL.$$.fragment),k1r=l(),ec=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VQ=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),XQ=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),q1r=l(),LL=a("p"),N1r=o("This class cannot be instantiated directly using "),T2e=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),kt=a("div"),F(xL.$$.fragment),O1r=l(),M2e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X1r=l(),oc=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),W1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(N7.$$.fragment),Y1r=l(),xr=a("div"),F($L.$$.fragment),K1r=l(),C2e=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e8r=l(),tn=a("p"),o8r=o("The model class to instantiate is selected based on the "),w2e=a("code"),r8r=o("model_type"),t8r=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(":"),i8r=l(),ie=a("ul"),j7=a("li"),L2e=a("strong"),d8r=o("albert"),c8r=o(" \u2014 "),WQ=a("a"),f8r=o("TFAlbertForMaskedLM"),m8r=o(" (ALBERT model)"),g8r=l(),D7=a("li"),x2e=a("strong"),h8r=o("bert"),p8r=o(" \u2014 "),QQ=a("a"),u8r=o("TFBertForMaskedLM"),_8r=o(" (BERT model)"),b8r=l(),G7=a("li"),$2e=a("strong"),v8r=o("camembert"),F8r=o(" \u2014 "),HQ=a("a"),T8r=o("TFCamembertForMaskedLM"),M8r=o(" (CamemBERT model)"),E8r=l(),O7=a("li"),k2e=a("strong"),C8r=o("convbert"),w8r=o(" \u2014 "),UQ=a("a"),A8r=o("TFConvBertForMaskedLM"),y8r=o(" (ConvBERT model)"),L8r=l(),V7=a("li"),S2e=a("strong"),x8r=o("deberta"),$8r=o(" \u2014 "),JQ=a("a"),k8r=o("TFDebertaForMaskedLM"),S8r=o(" (DeBERTa model)"),R8r=l(),X7=a("li"),R2e=a("strong"),P8r=o("deberta-v2"),B8r=o(" \u2014 "),YQ=a("a"),I8r=o("TFDebertaV2ForMaskedLM"),q8r=o(" (DeBERTa-v2 model)"),N8r=l(),z7=a("li"),P2e=a("strong"),j8r=o("distilbert"),D8r=o(" \u2014 "),KQ=a("a"),G8r=o("TFDistilBertForMaskedLM"),O8r=o(" (DistilBERT model)"),V8r=l(),W7=a("li"),B2e=a("strong"),X8r=o("electra"),z8r=o(" \u2014 "),ZQ=a("a"),W8r=o("TFElectraForMaskedLM"),Q8r=o(" (ELECTRA model)"),H8r=l(),Q7=a("li"),I2e=a("strong"),U8r=o("flaubert"),J8r=o(" \u2014 "),eH=a("a"),Y8r=o("TFFlaubertWithLMHeadModel"),K8r=o(" (FlauBERT model)"),Z8r=l(),H7=a("li"),q2e=a("strong"),ebr=o("funnel"),obr=o(" \u2014 "),oH=a("a"),rbr=o("TFFunnelForMaskedLM"),tbr=o(" (Funnel Transformer model)"),abr=l(),U7=a("li"),N2e=a("strong"),nbr=o("layoutlm"),sbr=o(" \u2014 "),rH=a("a"),lbr=o("TFLayoutLMForMaskedLM"),ibr=o(" (LayoutLM model)"),dbr=l(),J7=a("li"),j2e=a("strong"),cbr=o("longformer"),fbr=o(" \u2014 "),tH=a("a"),mbr=o("TFLongformerForMaskedLM"),gbr=o(" (Longformer model)"),hbr=l(),Y7=a("li"),D2e=a("strong"),pbr=o("mobilebert"),ubr=o(" \u2014 "),aH=a("a"),_br=o("TFMobileBertForMaskedLM"),bbr=o(" (MobileBERT model)"),vbr=l(),K7=a("li"),G2e=a("strong"),Fbr=o("mpnet"),Tbr=o(" \u2014 "),nH=a("a"),Mbr=o("TFMPNetForMaskedLM"),Ebr=o(" (MPNet model)"),Cbr=l(),Z7=a("li"),O2e=a("strong"),wbr=o("rembert"),Abr=o(" \u2014 "),sH=a("a"),ybr=o("TFRemBertForMaskedLM"),Lbr=o(" (RemBERT model)"),xbr=l(),eM=a("li"),V2e=a("strong"),$br=o("roberta"),kbr=o(" \u2014 "),lH=a("a"),Sbr=o("TFRobertaForMaskedLM"),Rbr=o(" (RoBERTa model)"),Pbr=l(),oM=a("li"),X2e=a("strong"),Bbr=o("roformer"),Ibr=o(" \u2014 "),iH=a("a"),qbr=o("TFRoFormerForMaskedLM"),Nbr=o(" (RoFormer model)"),jbr=l(),rM=a("li"),z2e=a("strong"),Dbr=o("tapas"),Gbr=o(" \u2014 "),dH=a("a"),Obr=o("TFTapasForMaskedLM"),Vbr=o(" (TAPAS model)"),Xbr=l(),tM=a("li"),W2e=a("strong"),zbr=o("xlm"),Wbr=o(" \u2014 "),cH=a("a"),Qbr=o("TFXLMWithLMHeadModel"),Hbr=o(" (XLM model)"),Ubr=l(),aM=a("li"),Q2e=a("strong"),Jbr=o("xlm-roberta"),Ybr=o(" \u2014 "),fH=a("a"),Kbr=o("TFXLMRobertaForMaskedLM"),Zbr=o(" (XLM-RoBERTa model)"),e2r=l(),F(nM.$$.fragment),nje=l(),rc=a("h2"),sM=a("a"),H2e=a("span"),F(kL.$$.fragment),o2r=l(),U2e=a("span"),r2r=o("TFAutoModelForSeq2SeqLM"),sje=l(),rr=a("div"),F(SL.$$.fragment),t2r=l(),tc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mH=a("a"),n2r=o("from_pretrained()"),s2r=o(" class method or the "),gH=a("a"),l2r=o("from_config()"),i2r=o(` class
method.`),d2r=l(),RL=a("p"),c2r=o("This class cannot be instantiated directly using "),J2e=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),St=a("div"),F(PL.$$.fragment),h2r=l(),Y2e=a("p"),p2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u2r=l(),ac=a("p"),_2r=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),F2r=o("from_pretrained()"),T2r=o(" to load the model weights."),M2r=l(),F(lM.$$.fragment),E2r=l(),$r=a("div"),F(BL.$$.fragment),C2r=l(),Z2e=a("p"),w2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A2r=l(),an=a("p"),y2r=o("The model class to instantiate is selected based on the "),eve=a("code"),L2r=o("model_type"),x2r=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),$2r=o("pretrained_model_name_or_path"),k2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(":"),P2r=l(),ye=a("ul"),iM=a("li"),tve=a("strong"),B2r=o("bart"),I2r=o(" \u2014 "),pH=a("a"),q2r=o("TFBartForConditionalGeneration"),N2r=o(" (BART model)"),j2r=l(),dM=a("li"),ave=a("strong"),D2r=o("blenderbot"),G2r=o(" \u2014 "),uH=a("a"),O2r=o("TFBlenderbotForConditionalGeneration"),V2r=o(" (Blenderbot model)"),X2r=l(),cM=a("li"),nve=a("strong"),z2r=o("blenderbot-small"),W2r=o(" \u2014 "),_H=a("a"),Q2r=o("TFBlenderbotSmallForConditionalGeneration"),H2r=o(" (BlenderbotSmall model)"),U2r=l(),fM=a("li"),sve=a("strong"),J2r=o("encoder-decoder"),Y2r=o(" \u2014 "),bH=a("a"),K2r=o("TFEncoderDecoderModel"),Z2r=o(" (Encoder decoder model)"),evr=l(),mM=a("li"),lve=a("strong"),ovr=o("led"),rvr=o(" \u2014 "),vH=a("a"),tvr=o("TFLEDForConditionalGeneration"),avr=o(" (LED model)"),nvr=l(),gM=a("li"),ive=a("strong"),svr=o("marian"),lvr=o(" \u2014 "),FH=a("a"),ivr=o("TFMarianMTModel"),dvr=o(" (Marian model)"),cvr=l(),hM=a("li"),dve=a("strong"),fvr=o("mbart"),mvr=o(" \u2014 "),TH=a("a"),gvr=o("TFMBartForConditionalGeneration"),hvr=o(" (mBART model)"),pvr=l(),pM=a("li"),cve=a("strong"),uvr=o("mt5"),_vr=o(" \u2014 "),MH=a("a"),bvr=o("TFMT5ForConditionalGeneration"),vvr=o(" (mT5 model)"),Fvr=l(),uM=a("li"),fve=a("strong"),Tvr=o("pegasus"),Mvr=o(" \u2014 "),EH=a("a"),Evr=o("TFPegasusForConditionalGeneration"),Cvr=o(" (Pegasus model)"),wvr=l(),_M=a("li"),mve=a("strong"),Avr=o("t5"),yvr=o(" \u2014 "),CH=a("a"),Lvr=o("TFT5ForConditionalGeneration"),xvr=o(" (T5 model)"),$vr=l(),F(bM.$$.fragment),lje=l(),nc=a("h2"),vM=a("a"),gve=a("span"),F(IL.$$.fragment),kvr=l(),hve=a("span"),Svr=o("TFAutoModelForSequenceClassification"),ije=l(),tr=a("div"),F(qL.$$.fragment),Rvr=l(),sc=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wH=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" class method or the "),AH=a("a"),qvr=o("from_config()"),Nvr=o(` class
method.`),jvr=l(),NL=a("p"),Dvr=o("This class cannot be instantiated directly using "),pve=a("code"),Gvr=o("__init__()"),Ovr=o(" (throws an error)."),Vvr=l(),Rt=a("div"),F(jL.$$.fragment),Xvr=l(),uve=a("p"),zvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wvr=l(),lc=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),Hvr=o("not"),Uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" to load the model weights."),Kvr=l(),F(FM.$$.fragment),Zvr=l(),kr=a("div"),F(DL.$$.fragment),e3r=l(),bve=a("p"),o3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),r3r=l(),nn=a("p"),t3r=o("The model class to instantiate is selected based on the "),vve=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),oe=a("ul"),TM=a("li"),Mve=a("strong"),f3r=o("albert"),m3r=o(" \u2014 "),LH=a("a"),g3r=o("TFAlbertForSequenceClassification"),h3r=o(" (ALBERT model)"),p3r=l(),MM=a("li"),Eve=a("strong"),u3r=o("bert"),_3r=o(" \u2014 "),xH=a("a"),b3r=o("TFBertForSequenceClassification"),v3r=o(" (BERT model)"),F3r=l(),EM=a("li"),Cve=a("strong"),T3r=o("camembert"),M3r=o(" \u2014 "),$H=a("a"),E3r=o("TFCamembertForSequenceClassification"),C3r=o(" (CamemBERT model)"),w3r=l(),CM=a("li"),wve=a("strong"),A3r=o("convbert"),y3r=o(" \u2014 "),kH=a("a"),L3r=o("TFConvBertForSequenceClassification"),x3r=o(" (ConvBERT model)"),$3r=l(),wM=a("li"),Ave=a("strong"),k3r=o("ctrl"),S3r=o(" \u2014 "),SH=a("a"),R3r=o("TFCTRLForSequenceClassification"),P3r=o(" (CTRL model)"),B3r=l(),AM=a("li"),yve=a("strong"),I3r=o("deberta"),q3r=o(" \u2014 "),RH=a("a"),N3r=o("TFDebertaForSequenceClassification"),j3r=o(" (DeBERTa model)"),D3r=l(),yM=a("li"),Lve=a("strong"),G3r=o("deberta-v2"),O3r=o(" \u2014 "),PH=a("a"),V3r=o("TFDebertaV2ForSequenceClassification"),X3r=o(" (DeBERTa-v2 model)"),z3r=l(),LM=a("li"),xve=a("strong"),W3r=o("distilbert"),Q3r=o(" \u2014 "),BH=a("a"),H3r=o("TFDistilBertForSequenceClassification"),U3r=o(" (DistilBERT model)"),J3r=l(),xM=a("li"),$ve=a("strong"),Y3r=o("electra"),K3r=o(" \u2014 "),IH=a("a"),Z3r=o("TFElectraForSequenceClassification"),eFr=o(" (ELECTRA model)"),oFr=l(),$M=a("li"),kve=a("strong"),rFr=o("flaubert"),tFr=o(" \u2014 "),qH=a("a"),aFr=o("TFFlaubertForSequenceClassification"),nFr=o(" (FlauBERT model)"),sFr=l(),kM=a("li"),Sve=a("strong"),lFr=o("funnel"),iFr=o(" \u2014 "),NH=a("a"),dFr=o("TFFunnelForSequenceClassification"),cFr=o(" (Funnel Transformer model)"),fFr=l(),SM=a("li"),Rve=a("strong"),mFr=o("gpt2"),gFr=o(" \u2014 "),jH=a("a"),hFr=o("TFGPT2ForSequenceClassification"),pFr=o(" (OpenAI GPT-2 model)"),uFr=l(),RM=a("li"),Pve=a("strong"),_Fr=o("gptj"),bFr=o(" \u2014 "),DH=a("a"),vFr=o("TFGPTJForSequenceClassification"),FFr=o(" (GPT-J model)"),TFr=l(),PM=a("li"),Bve=a("strong"),MFr=o("layoutlm"),EFr=o(" \u2014 "),GH=a("a"),CFr=o("TFLayoutLMForSequenceClassification"),wFr=o(" (LayoutLM model)"),AFr=l(),BM=a("li"),Ive=a("strong"),yFr=o("longformer"),LFr=o(" \u2014 "),OH=a("a"),xFr=o("TFLongformerForSequenceClassification"),$Fr=o(" (Longformer model)"),kFr=l(),IM=a("li"),qve=a("strong"),SFr=o("mobilebert"),RFr=o(" \u2014 "),VH=a("a"),PFr=o("TFMobileBertForSequenceClassification"),BFr=o(" (MobileBERT model)"),IFr=l(),qM=a("li"),Nve=a("strong"),qFr=o("mpnet"),NFr=o(" \u2014 "),XH=a("a"),jFr=o("TFMPNetForSequenceClassification"),DFr=o(" (MPNet model)"),GFr=l(),NM=a("li"),jve=a("strong"),OFr=o("openai-gpt"),VFr=o(" \u2014 "),zH=a("a"),XFr=o("TFOpenAIGPTForSequenceClassification"),zFr=o(" (OpenAI GPT model)"),WFr=l(),jM=a("li"),Dve=a("strong"),QFr=o("rembert"),HFr=o(" \u2014 "),WH=a("a"),UFr=o("TFRemBertForSequenceClassification"),JFr=o(" (RemBERT model)"),YFr=l(),DM=a("li"),Gve=a("strong"),KFr=o("roberta"),ZFr=o(" \u2014 "),QH=a("a"),eTr=o("TFRobertaForSequenceClassification"),oTr=o(" (RoBERTa model)"),rTr=l(),GM=a("li"),Ove=a("strong"),tTr=o("roformer"),aTr=o(" \u2014 "),HH=a("a"),nTr=o("TFRoFormerForSequenceClassification"),sTr=o(" (RoFormer model)"),lTr=l(),OM=a("li"),Vve=a("strong"),iTr=o("tapas"),dTr=o(" \u2014 "),UH=a("a"),cTr=o("TFTapasForSequenceClassification"),fTr=o(" (TAPAS model)"),mTr=l(),VM=a("li"),Xve=a("strong"),gTr=o("transfo-xl"),hTr=o(" \u2014 "),JH=a("a"),pTr=o("TFTransfoXLForSequenceClassification"),uTr=o(" (Transformer-XL model)"),_Tr=l(),XM=a("li"),zve=a("strong"),bTr=o("xlm"),vTr=o(" \u2014 "),YH=a("a"),FTr=o("TFXLMForSequenceClassification"),TTr=o(" (XLM model)"),MTr=l(),zM=a("li"),Wve=a("strong"),ETr=o("xlm-roberta"),CTr=o(" \u2014 "),KH=a("a"),wTr=o("TFXLMRobertaForSequenceClassification"),ATr=o(" (XLM-RoBERTa model)"),yTr=l(),WM=a("li"),Qve=a("strong"),LTr=o("xlnet"),xTr=o(" \u2014 "),ZH=a("a"),$Tr=o("TFXLNetForSequenceClassification"),kTr=o(" (XLNet model)"),STr=l(),F(QM.$$.fragment),dje=l(),ic=a("h2"),HM=a("a"),Hve=a("span"),F(GL.$$.fragment),RTr=l(),Uve=a("span"),PTr=o("TFAutoModelForMultipleChoice"),cje=l(),ar=a("div"),F(OL.$$.fragment),BTr=l(),dc=a("p"),ITr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eU=a("a"),qTr=o("from_pretrained()"),NTr=o(" class method or the "),oU=a("a"),jTr=o("from_config()"),DTr=o(` class
method.`),GTr=l(),VL=a("p"),OTr=o("This class cannot be instantiated directly using "),Jve=a("code"),VTr=o("__init__()"),XTr=o(" (throws an error)."),zTr=l(),Pt=a("div"),F(XL.$$.fragment),WTr=l(),Yve=a("p"),QTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HTr=l(),cc=a("p"),UTr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),JTr=o("not"),YTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),KTr=o("from_pretrained()"),ZTr=o(" to load the model weights."),e7r=l(),F(UM.$$.fragment),o7r=l(),Sr=a("div"),F(zL.$$.fragment),r7r=l(),Zve=a("p"),t7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a7r=l(),sn=a("p"),n7r=o("The model class to instantiate is selected based on the "),e3e=a("code"),s7r=o("model_type"),l7r=o(` property of the config object (either
passed as an argument or loaded from `),o3e=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(":"),m7r=l(),pe=a("ul"),JM=a("li"),t3e=a("strong"),g7r=o("albert"),h7r=o(" \u2014 "),tU=a("a"),p7r=o("TFAlbertForMultipleChoice"),u7r=o(" (ALBERT model)"),_7r=l(),YM=a("li"),a3e=a("strong"),b7r=o("bert"),v7r=o(" \u2014 "),aU=a("a"),F7r=o("TFBertForMultipleChoice"),T7r=o(" (BERT model)"),M7r=l(),KM=a("li"),n3e=a("strong"),E7r=o("camembert"),C7r=o(" \u2014 "),nU=a("a"),w7r=o("TFCamembertForMultipleChoice"),A7r=o(" (CamemBERT model)"),y7r=l(),ZM=a("li"),s3e=a("strong"),L7r=o("convbert"),x7r=o(" \u2014 "),sU=a("a"),$7r=o("TFConvBertForMultipleChoice"),k7r=o(" (ConvBERT model)"),S7r=l(),e4=a("li"),l3e=a("strong"),R7r=o("distilbert"),P7r=o(" \u2014 "),lU=a("a"),B7r=o("TFDistilBertForMultipleChoice"),I7r=o(" (DistilBERT model)"),q7r=l(),o4=a("li"),i3e=a("strong"),N7r=o("electra"),j7r=o(" \u2014 "),iU=a("a"),D7r=o("TFElectraForMultipleChoice"),G7r=o(" (ELECTRA model)"),O7r=l(),r4=a("li"),d3e=a("strong"),V7r=o("flaubert"),X7r=o(" \u2014 "),dU=a("a"),z7r=o("TFFlaubertForMultipleChoice"),W7r=o(" (FlauBERT model)"),Q7r=l(),t4=a("li"),c3e=a("strong"),H7r=o("funnel"),U7r=o(" \u2014 "),cU=a("a"),J7r=o("TFFunnelForMultipleChoice"),Y7r=o(" (Funnel Transformer model)"),K7r=l(),a4=a("li"),f3e=a("strong"),Z7r=o("longformer"),eMr=o(" \u2014 "),fU=a("a"),oMr=o("TFLongformerForMultipleChoice"),rMr=o(" (Longformer model)"),tMr=l(),n4=a("li"),m3e=a("strong"),aMr=o("mobilebert"),nMr=o(" \u2014 "),mU=a("a"),sMr=o("TFMobileBertForMultipleChoice"),lMr=o(" (MobileBERT model)"),iMr=l(),s4=a("li"),g3e=a("strong"),dMr=o("mpnet"),cMr=o(" \u2014 "),gU=a("a"),fMr=o("TFMPNetForMultipleChoice"),mMr=o(" (MPNet model)"),gMr=l(),l4=a("li"),h3e=a("strong"),hMr=o("rembert"),pMr=o(" \u2014 "),hU=a("a"),uMr=o("TFRemBertForMultipleChoice"),_Mr=o(" (RemBERT model)"),bMr=l(),i4=a("li"),p3e=a("strong"),vMr=o("roberta"),FMr=o(" \u2014 "),pU=a("a"),TMr=o("TFRobertaForMultipleChoice"),MMr=o(" (RoBERTa model)"),EMr=l(),d4=a("li"),u3e=a("strong"),CMr=o("roformer"),wMr=o(" \u2014 "),uU=a("a"),AMr=o("TFRoFormerForMultipleChoice"),yMr=o(" (RoFormer model)"),LMr=l(),c4=a("li"),_3e=a("strong"),xMr=o("xlm"),$Mr=o(" \u2014 "),_U=a("a"),kMr=o("TFXLMForMultipleChoice"),SMr=o(" (XLM model)"),RMr=l(),f4=a("li"),b3e=a("strong"),PMr=o("xlm-roberta"),BMr=o(" \u2014 "),bU=a("a"),IMr=o("TFXLMRobertaForMultipleChoice"),qMr=o(" (XLM-RoBERTa model)"),NMr=l(),m4=a("li"),v3e=a("strong"),jMr=o("xlnet"),DMr=o(" \u2014 "),vU=a("a"),GMr=o("TFXLNetForMultipleChoice"),OMr=o(" (XLNet model)"),VMr=l(),F(g4.$$.fragment),fje=l(),fc=a("h2"),h4=a("a"),F3e=a("span"),F(WL.$$.fragment),XMr=l(),T3e=a("span"),zMr=o("TFAutoModelForNextSentencePrediction"),mje=l(),nr=a("div"),F(QL.$$.fragment),WMr=l(),mc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FU=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),TU=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),HL=a("p"),ZMr=o("This class cannot be instantiated directly using "),M3e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),Bt=a("div"),F(UL.$$.fragment),t4r=l(),E3e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n4r=l(),gc=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),C3e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),d4r=o("from_pretrained()"),c4r=o(" to load the model weights."),f4r=l(),F(p4.$$.fragment),m4r=l(),Rr=a("div"),F(JL.$$.fragment),g4r=l(),w3e=a("p"),h4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),p4r=l(),ln=a("p"),u4r=o("The model class to instantiate is selected based on the "),A3e=a("code"),_4r=o("model_type"),b4r=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),v4r=o("pretrained_model_name_or_path"),F4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(":"),E4r=l(),YL=a("ul"),u4=a("li"),x3e=a("strong"),C4r=o("bert"),w4r=o(" \u2014 "),EU=a("a"),A4r=o("TFBertForNextSentencePrediction"),y4r=o(" (BERT model)"),L4r=l(),_4=a("li"),$3e=a("strong"),x4r=o("mobilebert"),$4r=o(" \u2014 "),CU=a("a"),k4r=o("TFMobileBertForNextSentencePrediction"),S4r=o(" (MobileBERT model)"),R4r=l(),F(b4.$$.fragment),gje=l(),hc=a("h2"),v4=a("a"),k3e=a("span"),F(KL.$$.fragment),P4r=l(),S3e=a("span"),B4r=o("TFAutoModelForTableQuestionAnswering"),hje=l(),sr=a("div"),F(ZL.$$.fragment),I4r=l(),pc=a("p"),q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wU=a("a"),N4r=o("from_pretrained()"),j4r=o(" class method or the "),AU=a("a"),D4r=o("from_config()"),G4r=o(` class
method.`),O4r=l(),e9=a("p"),V4r=o("This class cannot be instantiated directly using "),R3e=a("code"),X4r=o("__init__()"),z4r=o(" (throws an error)."),W4r=l(),It=a("div"),F(o9.$$.fragment),Q4r=l(),P3e=a("p"),H4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U4r=l(),uc=a("p"),J4r=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),Y4r=o("not"),K4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),Z4r=o("from_pretrained()"),eEr=o(" to load the model weights."),oEr=l(),F(F4.$$.fragment),rEr=l(),Pr=a("div"),F(r9.$$.fragment),tEr=l(),I3e=a("p"),aEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nEr=l(),dn=a("p"),sEr=o("The model class to instantiate is selected based on the "),q3e=a("code"),lEr=o("model_type"),iEr=o(` property of the config object (either
passed as an argument or loaded from `),N3e=a("code"),dEr=o("pretrained_model_name_or_path"),cEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),fEr=o("pretrained_model_name_or_path"),mEr=o(":"),gEr=l(),D3e=a("ul"),T4=a("li"),G3e=a("strong"),hEr=o("tapas"),pEr=o(" \u2014 "),LU=a("a"),uEr=o("TFTapasForQuestionAnswering"),_Er=o(" (TAPAS model)"),bEr=l(),F(M4.$$.fragment),pje=l(),_c=a("h2"),E4=a("a"),O3e=a("span"),F(t9.$$.fragment),vEr=l(),V3e=a("span"),FEr=o("TFAutoModelForTokenClassification"),uje=l(),lr=a("div"),F(a9.$$.fragment),TEr=l(),bc=a("p"),MEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xU=a("a"),EEr=o("from_pretrained()"),CEr=o(" class method or the "),$U=a("a"),wEr=o("from_config()"),AEr=o(` class
method.`),yEr=l(),n9=a("p"),LEr=o("This class cannot be instantiated directly using "),X3e=a("code"),xEr=o("__init__()"),$Er=o(" (throws an error)."),kEr=l(),qt=a("div"),F(s9.$$.fragment),SEr=l(),z3e=a("p"),REr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PEr=l(),vc=a("p"),BEr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),IEr=o("not"),qEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),NEr=o("from_pretrained()"),jEr=o(" to load the model weights."),DEr=l(),F(C4.$$.fragment),GEr=l(),Br=a("div"),F(l9.$$.fragment),OEr=l(),Q3e=a("p"),VEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XEr=l(),cn=a("p"),zEr=o("The model class to instantiate is selected based on the "),H3e=a("code"),WEr=o("model_type"),QEr=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),HEr=o("pretrained_model_name_or_path"),UEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(":"),KEr=l(),de=a("ul"),w4=a("li"),Y3e=a("strong"),ZEr=o("albert"),eCr=o(" \u2014 "),SU=a("a"),oCr=o("TFAlbertForTokenClassification"),rCr=o(" (ALBERT model)"),tCr=l(),A4=a("li"),K3e=a("strong"),aCr=o("bert"),nCr=o(" \u2014 "),RU=a("a"),sCr=o("TFBertForTokenClassification"),lCr=o(" (BERT model)"),iCr=l(),y4=a("li"),Z3e=a("strong"),dCr=o("camembert"),cCr=o(" \u2014 "),PU=a("a"),fCr=o("TFCamembertForTokenClassification"),mCr=o(" (CamemBERT model)"),gCr=l(),L4=a("li"),eFe=a("strong"),hCr=o("convbert"),pCr=o(" \u2014 "),BU=a("a"),uCr=o("TFConvBertForTokenClassification"),_Cr=o(" (ConvBERT model)"),bCr=l(),x4=a("li"),oFe=a("strong"),vCr=o("deberta"),FCr=o(" \u2014 "),IU=a("a"),TCr=o("TFDebertaForTokenClassification"),MCr=o(" (DeBERTa model)"),ECr=l(),$4=a("li"),rFe=a("strong"),CCr=o("deberta-v2"),wCr=o(" \u2014 "),qU=a("a"),ACr=o("TFDebertaV2ForTokenClassification"),yCr=o(" (DeBERTa-v2 model)"),LCr=l(),k4=a("li"),tFe=a("strong"),xCr=o("distilbert"),$Cr=o(" \u2014 "),NU=a("a"),kCr=o("TFDistilBertForTokenClassification"),SCr=o(" (DistilBERT model)"),RCr=l(),S4=a("li"),aFe=a("strong"),PCr=o("electra"),BCr=o(" \u2014 "),jU=a("a"),ICr=o("TFElectraForTokenClassification"),qCr=o(" (ELECTRA model)"),NCr=l(),R4=a("li"),nFe=a("strong"),jCr=o("flaubert"),DCr=o(" \u2014 "),DU=a("a"),GCr=o("TFFlaubertForTokenClassification"),OCr=o(" (FlauBERT model)"),VCr=l(),P4=a("li"),sFe=a("strong"),XCr=o("funnel"),zCr=o(" \u2014 "),GU=a("a"),WCr=o("TFFunnelForTokenClassification"),QCr=o(" (Funnel Transformer model)"),HCr=l(),B4=a("li"),lFe=a("strong"),UCr=o("layoutlm"),JCr=o(" \u2014 "),OU=a("a"),YCr=o("TFLayoutLMForTokenClassification"),KCr=o(" (LayoutLM model)"),ZCr=l(),I4=a("li"),iFe=a("strong"),e5r=o("longformer"),o5r=o(" \u2014 "),VU=a("a"),r5r=o("TFLongformerForTokenClassification"),t5r=o(" (Longformer model)"),a5r=l(),q4=a("li"),dFe=a("strong"),n5r=o("mobilebert"),s5r=o(" \u2014 "),XU=a("a"),l5r=o("TFMobileBertForTokenClassification"),i5r=o(" (MobileBERT model)"),d5r=l(),N4=a("li"),cFe=a("strong"),c5r=o("mpnet"),f5r=o(" \u2014 "),zU=a("a"),m5r=o("TFMPNetForTokenClassification"),g5r=o(" (MPNet model)"),h5r=l(),j4=a("li"),fFe=a("strong"),p5r=o("rembert"),u5r=o(" \u2014 "),WU=a("a"),_5r=o("TFRemBertForTokenClassification"),b5r=o(" (RemBERT model)"),v5r=l(),D4=a("li"),mFe=a("strong"),F5r=o("roberta"),T5r=o(" \u2014 "),QU=a("a"),M5r=o("TFRobertaForTokenClassification"),E5r=o(" (RoBERTa model)"),C5r=l(),G4=a("li"),gFe=a("strong"),w5r=o("roformer"),A5r=o(" \u2014 "),HU=a("a"),y5r=o("TFRoFormerForTokenClassification"),L5r=o(" (RoFormer model)"),x5r=l(),O4=a("li"),hFe=a("strong"),$5r=o("xlm"),k5r=o(" \u2014 "),UU=a("a"),S5r=o("TFXLMForTokenClassification"),R5r=o(" (XLM model)"),P5r=l(),V4=a("li"),pFe=a("strong"),B5r=o("xlm-roberta"),I5r=o(" \u2014 "),JU=a("a"),q5r=o("TFXLMRobertaForTokenClassification"),N5r=o(" (XLM-RoBERTa model)"),j5r=l(),X4=a("li"),uFe=a("strong"),D5r=o("xlnet"),G5r=o(" \u2014 "),YU=a("a"),O5r=o("TFXLNetForTokenClassification"),V5r=o(" (XLNet model)"),X5r=l(),F(z4.$$.fragment),_je=l(),Fc=a("h2"),W4=a("a"),_Fe=a("span"),F(i9.$$.fragment),z5r=l(),bFe=a("span"),W5r=o("TFAutoModelForQuestionAnswering"),bje=l(),ir=a("div"),F(d9.$$.fragment),Q5r=l(),Tc=a("p"),H5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KU=a("a"),U5r=o("from_pretrained()"),J5r=o(" class method or the "),ZU=a("a"),Y5r=o("from_config()"),K5r=o(` class
method.`),Z5r=l(),c9=a("p"),ewr=o("This class cannot be instantiated directly using "),vFe=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),Nt=a("div"),F(f9.$$.fragment),awr=l(),FFe=a("p"),nwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),swr=l(),Mc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(Q4.$$.fragment),gwr=l(),Ir=a("div"),F(m9.$$.fragment),hwr=l(),MFe=a("p"),pwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uwr=l(),fn=a("p"),_wr=o("The model class to instantiate is selected based on the "),EFe=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),ce=a("ul"),H4=a("li"),AFe=a("strong"),wwr=o("albert"),Awr=o(" \u2014 "),oJ=a("a"),ywr=o("TFAlbertForQuestionAnswering"),Lwr=o(" (ALBERT model)"),xwr=l(),U4=a("li"),yFe=a("strong"),$wr=o("bert"),kwr=o(" \u2014 "),rJ=a("a"),Swr=o("TFBertForQuestionAnswering"),Rwr=o(" (BERT model)"),Pwr=l(),J4=a("li"),LFe=a("strong"),Bwr=o("camembert"),Iwr=o(" \u2014 "),tJ=a("a"),qwr=o("TFCamembertForQuestionAnswering"),Nwr=o(" (CamemBERT model)"),jwr=l(),Y4=a("li"),xFe=a("strong"),Dwr=o("convbert"),Gwr=o(" \u2014 "),aJ=a("a"),Owr=o("TFConvBertForQuestionAnswering"),Vwr=o(" (ConvBERT model)"),Xwr=l(),K4=a("li"),$Fe=a("strong"),zwr=o("deberta"),Wwr=o(" \u2014 "),nJ=a("a"),Qwr=o("TFDebertaForQuestionAnswering"),Hwr=o(" (DeBERTa model)"),Uwr=l(),Z4=a("li"),kFe=a("strong"),Jwr=o("deberta-v2"),Ywr=o(" \u2014 "),sJ=a("a"),Kwr=o("TFDebertaV2ForQuestionAnswering"),Zwr=o(" (DeBERTa-v2 model)"),e0r=l(),eE=a("li"),SFe=a("strong"),o0r=o("distilbert"),r0r=o(" \u2014 "),lJ=a("a"),t0r=o("TFDistilBertForQuestionAnswering"),a0r=o(" (DistilBERT model)"),n0r=l(),oE=a("li"),RFe=a("strong"),s0r=o("electra"),l0r=o(" \u2014 "),iJ=a("a"),i0r=o("TFElectraForQuestionAnswering"),d0r=o(" (ELECTRA model)"),c0r=l(),rE=a("li"),PFe=a("strong"),f0r=o("flaubert"),m0r=o(" \u2014 "),dJ=a("a"),g0r=o("TFFlaubertForQuestionAnsweringSimple"),h0r=o(" (FlauBERT model)"),p0r=l(),tE=a("li"),BFe=a("strong"),u0r=o("funnel"),_0r=o(" \u2014 "),cJ=a("a"),b0r=o("TFFunnelForQuestionAnswering"),v0r=o(" (Funnel Transformer model)"),F0r=l(),aE=a("li"),IFe=a("strong"),T0r=o("gptj"),M0r=o(" \u2014 "),fJ=a("a"),E0r=o("TFGPTJForQuestionAnswering"),C0r=o(" (GPT-J model)"),w0r=l(),nE=a("li"),qFe=a("strong"),A0r=o("longformer"),y0r=o(" \u2014 "),mJ=a("a"),L0r=o("TFLongformerForQuestionAnswering"),x0r=o(" (Longformer model)"),$0r=l(),sE=a("li"),NFe=a("strong"),k0r=o("mobilebert"),S0r=o(" \u2014 "),gJ=a("a"),R0r=o("TFMobileBertForQuestionAnswering"),P0r=o(" (MobileBERT model)"),B0r=l(),lE=a("li"),jFe=a("strong"),I0r=o("mpnet"),q0r=o(" \u2014 "),hJ=a("a"),N0r=o("TFMPNetForQuestionAnswering"),j0r=o(" (MPNet model)"),D0r=l(),iE=a("li"),DFe=a("strong"),G0r=o("rembert"),O0r=o(" \u2014 "),pJ=a("a"),V0r=o("TFRemBertForQuestionAnswering"),X0r=o(" (RemBERT model)"),z0r=l(),dE=a("li"),GFe=a("strong"),W0r=o("roberta"),Q0r=o(" \u2014 "),uJ=a("a"),H0r=o("TFRobertaForQuestionAnswering"),U0r=o(" (RoBERTa model)"),J0r=l(),cE=a("li"),OFe=a("strong"),Y0r=o("roformer"),K0r=o(" \u2014 "),_J=a("a"),Z0r=o("TFRoFormerForQuestionAnswering"),eAr=o(" (RoFormer model)"),oAr=l(),fE=a("li"),VFe=a("strong"),rAr=o("xlm"),tAr=o(" \u2014 "),bJ=a("a"),aAr=o("TFXLMForQuestionAnsweringSimple"),nAr=o(" (XLM model)"),sAr=l(),mE=a("li"),XFe=a("strong"),lAr=o("xlm-roberta"),iAr=o(" \u2014 "),vJ=a("a"),dAr=o("TFXLMRobertaForQuestionAnswering"),cAr=o(" (XLM-RoBERTa model)"),fAr=l(),gE=a("li"),zFe=a("strong"),mAr=o("xlnet"),gAr=o(" \u2014 "),FJ=a("a"),hAr=o("TFXLNetForQuestionAnsweringSimple"),pAr=o(" (XLNet model)"),uAr=l(),F(hE.$$.fragment),vje=l(),Ec=a("h2"),pE=a("a"),WFe=a("span"),F(g9.$$.fragment),_Ar=l(),QFe=a("span"),bAr=o("TFAutoModelForVision2Seq"),Fje=l(),dr=a("div"),F(h9.$$.fragment),vAr=l(),Cc=a("p"),FAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TJ=a("a"),TAr=o("from_pretrained()"),MAr=o(" class method or the "),MJ=a("a"),EAr=o("from_config()"),CAr=o(` class
method.`),wAr=l(),p9=a("p"),AAr=o("This class cannot be instantiated directly using "),HFe=a("code"),yAr=o("__init__()"),LAr=o(" (throws an error)."),xAr=l(),jt=a("div"),F(u9.$$.fragment),$Ar=l(),UFe=a("p"),kAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SAr=l(),wc=a("p"),RAr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),PAr=o("not"),BAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),IAr=o("from_pretrained()"),qAr=o(" to load the model weights."),NAr=l(),F(uE.$$.fragment),jAr=l(),qr=a("div"),F(_9.$$.fragment),DAr=l(),YFe=a("p"),GAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OAr=l(),mn=a("p"),VAr=o("The model class to instantiate is selected based on the "),KFe=a("code"),XAr=o("model_type"),zAr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),WAr=o("pretrained_model_name_or_path"),QAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(":"),JAr=l(),oTe=a("ul"),_E=a("li"),rTe=a("strong"),YAr=o("vision-encoder-decoder"),KAr=o(" \u2014 "),CJ=a("a"),ZAr=o("TFVisionEncoderDecoderModel"),e6r=o(" (Vision Encoder decoder model)"),o6r=l(),F(bE.$$.fragment),Tje=l(),Ac=a("h2"),vE=a("a"),tTe=a("span"),F(b9.$$.fragment),r6r=l(),aTe=a("span"),t6r=o("TFAutoModelForSpeechSeq2Seq"),Mje=l(),cr=a("div"),F(v9.$$.fragment),a6r=l(),yc=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=a("a"),s6r=o("from_pretrained()"),l6r=o(" class method or the "),AJ=a("a"),i6r=o("from_config()"),d6r=o(` class
method.`),c6r=l(),F9=a("p"),f6r=o("This class cannot be instantiated directly using "),nTe=a("code"),m6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),Dt=a("div"),F(T9.$$.fragment),p6r=l(),sTe=a("p"),u6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_6r=l(),Lc=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),v6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),T6r=o("from_pretrained()"),M6r=o(" to load the model weights."),E6r=l(),F(FE.$$.fragment),C6r=l(),Nr=a("div"),F(M9.$$.fragment),w6r=l(),iTe=a("p"),A6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y6r=l(),gn=a("p"),L6r=o("The model class to instantiate is selected based on the "),dTe=a("code"),x6r=o("model_type"),$6r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),R6r=o("pretrained_model_name_or_path"),P6r=o(":"),B6r=l(),mTe=a("ul"),TE=a("li"),gTe=a("strong"),I6r=o("speech_to_text"),q6r=o(" \u2014 "),LJ=a("a"),N6r=o("TFSpeech2TextForConditionalGeneration"),j6r=o(" (Speech2Text model)"),D6r=l(),F(ME.$$.fragment),Eje=l(),xc=a("h2"),EE=a("a"),hTe=a("span"),F(E9.$$.fragment),G6r=l(),pTe=a("span"),O6r=o("FlaxAutoModel"),Cje=l(),fr=a("div"),F(C9.$$.fragment),V6r=l(),$c=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xJ=a("a"),z6r=o("from_pretrained()"),W6r=o(" class method or the "),$J=a("a"),Q6r=o("from_config()"),H6r=o(` class
method.`),U6r=l(),w9=a("p"),J6r=o("This class cannot be instantiated directly using "),uTe=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),Gt=a("div"),F(A9.$$.fragment),eyr=l(),_Te=a("p"),oyr=o("Instantiates one of the base model classes of the library from a configuration."),ryr=l(),kc=a("p"),tyr=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),ayr=o("not"),nyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),syr=o("from_pretrained()"),lyr=o(" to load the model weights."),iyr=l(),F(CE.$$.fragment),dyr=l(),jr=a("div"),F(y9.$$.fragment),cyr=l(),vTe=a("p"),fyr=o("Instantiate one of the base model classes of the library from a pretrained model."),myr=l(),hn=a("p"),gyr=o("The model class to instantiate is selected based on the "),FTe=a("code"),hyr=o("model_type"),pyr=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),uyr=o("pretrained_model_name_or_path"),_yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),byr=o("pretrained_model_name_or_path"),vyr=o(":"),Fyr=l(),re=a("ul"),wE=a("li"),ETe=a("strong"),Tyr=o("albert"),Myr=o(" \u2014 "),SJ=a("a"),Eyr=o("FlaxAlbertModel"),Cyr=o(" (ALBERT model)"),wyr=l(),AE=a("li"),CTe=a("strong"),Ayr=o("bart"),yyr=o(" \u2014 "),RJ=a("a"),Lyr=o("FlaxBartModel"),xyr=o(" (BART model)"),$yr=l(),yE=a("li"),wTe=a("strong"),kyr=o("beit"),Syr=o(" \u2014 "),PJ=a("a"),Ryr=o("FlaxBeitModel"),Pyr=o(" (BEiT model)"),Byr=l(),LE=a("li"),ATe=a("strong"),Iyr=o("bert"),qyr=o(" \u2014 "),BJ=a("a"),Nyr=o("FlaxBertModel"),jyr=o(" (BERT model)"),Dyr=l(),xE=a("li"),yTe=a("strong"),Gyr=o("big_bird"),Oyr=o(" \u2014 "),IJ=a("a"),Vyr=o("FlaxBigBirdModel"),Xyr=o(" (BigBird model)"),zyr=l(),$E=a("li"),LTe=a("strong"),Wyr=o("blenderbot"),Qyr=o(" \u2014 "),qJ=a("a"),Hyr=o("FlaxBlenderbotModel"),Uyr=o(" (Blenderbot model)"),Jyr=l(),kE=a("li"),xTe=a("strong"),Yyr=o("blenderbot-small"),Kyr=o(" \u2014 "),NJ=a("a"),Zyr=o("FlaxBlenderbotSmallModel"),eLr=o(" (BlenderbotSmall model)"),oLr=l(),SE=a("li"),$Te=a("strong"),rLr=o("clip"),tLr=o(" \u2014 "),jJ=a("a"),aLr=o("FlaxCLIPModel"),nLr=o(" (CLIP model)"),sLr=l(),RE=a("li"),kTe=a("strong"),lLr=o("distilbert"),iLr=o(" \u2014 "),DJ=a("a"),dLr=o("FlaxDistilBertModel"),cLr=o(" (DistilBERT model)"),fLr=l(),PE=a("li"),STe=a("strong"),mLr=o("electra"),gLr=o(" \u2014 "),GJ=a("a"),hLr=o("FlaxElectraModel"),pLr=o(" (ELECTRA model)"),uLr=l(),BE=a("li"),RTe=a("strong"),_Lr=o("gpt2"),bLr=o(" \u2014 "),OJ=a("a"),vLr=o("FlaxGPT2Model"),FLr=o(" (OpenAI GPT-2 model)"),TLr=l(),IE=a("li"),PTe=a("strong"),MLr=o("gpt_neo"),ELr=o(" \u2014 "),VJ=a("a"),CLr=o("FlaxGPTNeoModel"),wLr=o(" (GPT Neo model)"),ALr=l(),qE=a("li"),BTe=a("strong"),yLr=o("gptj"),LLr=o(" \u2014 "),XJ=a("a"),xLr=o("FlaxGPTJModel"),$Lr=o(" (GPT-J model)"),kLr=l(),NE=a("li"),ITe=a("strong"),SLr=o("marian"),RLr=o(" \u2014 "),zJ=a("a"),PLr=o("FlaxMarianModel"),BLr=o(" (Marian model)"),ILr=l(),jE=a("li"),qTe=a("strong"),qLr=o("mbart"),NLr=o(" \u2014 "),WJ=a("a"),jLr=o("FlaxMBartModel"),DLr=o(" (mBART model)"),GLr=l(),DE=a("li"),NTe=a("strong"),OLr=o("mt5"),VLr=o(" \u2014 "),QJ=a("a"),XLr=o("FlaxMT5Model"),zLr=o(" (mT5 model)"),WLr=l(),GE=a("li"),jTe=a("strong"),QLr=o("opt"),HLr=o(" \u2014 "),HJ=a("a"),ULr=o("FlaxOPTModel"),JLr=o(" (OPT model)"),YLr=l(),OE=a("li"),DTe=a("strong"),KLr=o("pegasus"),ZLr=o(" \u2014 "),UJ=a("a"),e9r=o("FlaxPegasusModel"),o9r=o(" (Pegasus model)"),r9r=l(),VE=a("li"),GTe=a("strong"),t9r=o("roberta"),a9r=o(" \u2014 "),JJ=a("a"),n9r=o("FlaxRobertaModel"),s9r=o(" (RoBERTa model)"),l9r=l(),XE=a("li"),OTe=a("strong"),i9r=o("roformer"),d9r=o(" \u2014 "),YJ=a("a"),c9r=o("FlaxRoFormerModel"),f9r=o(" (RoFormer model)"),m9r=l(),zE=a("li"),VTe=a("strong"),g9r=o("t5"),h9r=o(" \u2014 "),KJ=a("a"),p9r=o("FlaxT5Model"),u9r=o(" (T5 model)"),_9r=l(),WE=a("li"),XTe=a("strong"),b9r=o("vision-text-dual-encoder"),v9r=o(" \u2014 "),ZJ=a("a"),F9r=o("FlaxVisionTextDualEncoderModel"),T9r=o(" (VisionTextDualEncoder model)"),M9r=l(),QE=a("li"),zTe=a("strong"),E9r=o("vit"),C9r=o(" \u2014 "),eY=a("a"),w9r=o("FlaxViTModel"),A9r=o(" (ViT model)"),y9r=l(),HE=a("li"),WTe=a("strong"),L9r=o("wav2vec2"),x9r=o(" \u2014 "),oY=a("a"),$9r=o("FlaxWav2Vec2Model"),k9r=o(" (Wav2Vec2 model)"),S9r=l(),UE=a("li"),QTe=a("strong"),R9r=o("xglm"),P9r=o(" \u2014 "),rY=a("a"),B9r=o("FlaxXGLMModel"),I9r=o(" (XGLM model)"),q9r=l(),JE=a("li"),HTe=a("strong"),N9r=o("xlm-roberta"),j9r=o(" \u2014 "),tY=a("a"),D9r=o("FlaxXLMRobertaModel"),G9r=o(" (XLM-RoBERTa model)"),O9r=l(),F(YE.$$.fragment),wje=l(),Sc=a("h2"),KE=a("a"),UTe=a("span"),F(L9.$$.fragment),V9r=l(),JTe=a("span"),X9r=o("FlaxAutoModelForCausalLM"),Aje=l(),mr=a("div"),F(x9.$$.fragment),z9r=l(),Rc=a("p"),W9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aY=a("a"),Q9r=o("from_pretrained()"),H9r=o(" class method or the "),nY=a("a"),U9r=o("from_config()"),J9r=o(` class
method.`),Y9r=l(),$9=a("p"),K9r=o("This class cannot be instantiated directly using "),YTe=a("code"),Z9r=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),Ot=a("div"),F(k9.$$.fragment),rxr=l(),KTe=a("p"),txr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),axr=l(),Pc=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),ixr=o("from_pretrained()"),dxr=o(" to load the model weights."),cxr=l(),F(ZE.$$.fragment),fxr=l(),Dr=a("div"),F(S9.$$.fragment),mxr=l(),e7e=a("p"),gxr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hxr=l(),pn=a("p"),pxr=o("The model class to instantiate is selected based on the "),o7e=a("code"),uxr=o("model_type"),_xr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(":"),Mxr=l(),Le=a("ul"),eC=a("li"),a7e=a("strong"),Exr=o("bart"),Cxr=o(" \u2014 "),lY=a("a"),wxr=o("FlaxBartForCausalLM"),Axr=o(" (BART model)"),yxr=l(),oC=a("li"),n7e=a("strong"),Lxr=o("bert"),xxr=o(" \u2014 "),iY=a("a"),$xr=o("FlaxBertForCausalLM"),kxr=o(" (BERT model)"),Sxr=l(),rC=a("li"),s7e=a("strong"),Rxr=o("big_bird"),Pxr=o(" \u2014 "),dY=a("a"),Bxr=o("FlaxBigBirdForCausalLM"),Ixr=o(" (BigBird model)"),qxr=l(),tC=a("li"),l7e=a("strong"),Nxr=o("electra"),jxr=o(" \u2014 "),cY=a("a"),Dxr=o("FlaxElectraForCausalLM"),Gxr=o(" (ELECTRA model)"),Oxr=l(),aC=a("li"),i7e=a("strong"),Vxr=o("gpt2"),Xxr=o(" \u2014 "),fY=a("a"),zxr=o("FlaxGPT2LMHeadModel"),Wxr=o(" (OpenAI GPT-2 model)"),Qxr=l(),nC=a("li"),d7e=a("strong"),Hxr=o("gpt_neo"),Uxr=o(" \u2014 "),mY=a("a"),Jxr=o("FlaxGPTNeoForCausalLM"),Yxr=o(" (GPT Neo model)"),Kxr=l(),sC=a("li"),c7e=a("strong"),Zxr=o("gptj"),e$r=o(" \u2014 "),gY=a("a"),o$r=o("FlaxGPTJForCausalLM"),r$r=o(" (GPT-J model)"),t$r=l(),lC=a("li"),f7e=a("strong"),a$r=o("opt"),n$r=o(" \u2014 "),hY=a("a"),s$r=o("FlaxOPTForCausalLM"),l$r=o(" (OPT model)"),i$r=l(),iC=a("li"),m7e=a("strong"),d$r=o("roberta"),c$r=o(" \u2014 "),pY=a("a"),f$r=o("FlaxRobertaForCausalLM"),m$r=o(" (RoBERTa model)"),g$r=l(),dC=a("li"),g7e=a("strong"),h$r=o("xglm"),p$r=o(" \u2014 "),uY=a("a"),u$r=o("FlaxXGLMForCausalLM"),_$r=o(" (XGLM model)"),b$r=l(),F(cC.$$.fragment),yje=l(),Bc=a("h2"),fC=a("a"),h7e=a("span"),F(R9.$$.fragment),v$r=l(),p7e=a("span"),F$r=o("FlaxAutoModelForPreTraining"),Lje=l(),gr=a("div"),F(P9.$$.fragment),T$r=l(),Ic=a("p"),M$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Y=a("a"),E$r=o("from_pretrained()"),C$r=o(" class method or the "),bY=a("a"),w$r=o("from_config()"),A$r=o(` class
method.`),y$r=l(),B9=a("p"),L$r=o("This class cannot be instantiated directly using "),u7e=a("code"),x$r=o("__init__()"),$$r=o(" (throws an error)."),k$r=l(),Vt=a("div"),F(I9.$$.fragment),S$r=l(),_7e=a("p"),R$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P$r=l(),qc=a("p"),B$r=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),I$r=o("not"),q$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),N$r=o("from_pretrained()"),j$r=o(" to load the model weights."),D$r=l(),F(mC.$$.fragment),G$r=l(),Gr=a("div"),F(q9.$$.fragment),O$r=l(),v7e=a("p"),V$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X$r=l(),un=a("p"),z$r=o("The model class to instantiate is selected based on the "),F7e=a("code"),W$r=o("model_type"),Q$r=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),H$r=o("pretrained_model_name_or_path"),U$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(":"),K$r=l(),Ee=a("ul"),gC=a("li"),E7e=a("strong"),Z$r=o("albert"),ekr=o(" \u2014 "),FY=a("a"),okr=o("FlaxAlbertForPreTraining"),rkr=o(" (ALBERT model)"),tkr=l(),hC=a("li"),C7e=a("strong"),akr=o("bart"),nkr=o(" \u2014 "),TY=a("a"),skr=o("FlaxBartForConditionalGeneration"),lkr=o(" (BART model)"),ikr=l(),pC=a("li"),w7e=a("strong"),dkr=o("bert"),ckr=o(" \u2014 "),MY=a("a"),fkr=o("FlaxBertForPreTraining"),mkr=o(" (BERT model)"),gkr=l(),uC=a("li"),A7e=a("strong"),hkr=o("big_bird"),pkr=o(" \u2014 "),EY=a("a"),ukr=o("FlaxBigBirdForPreTraining"),_kr=o(" (BigBird model)"),bkr=l(),_C=a("li"),y7e=a("strong"),vkr=o("electra"),Fkr=o(" \u2014 "),CY=a("a"),Tkr=o("FlaxElectraForPreTraining"),Mkr=o(" (ELECTRA model)"),Ekr=l(),bC=a("li"),L7e=a("strong"),Ckr=o("mbart"),wkr=o(" \u2014 "),wY=a("a"),Akr=o("FlaxMBartForConditionalGeneration"),ykr=o(" (mBART model)"),Lkr=l(),vC=a("li"),x7e=a("strong"),xkr=o("mt5"),$kr=o(" \u2014 "),AY=a("a"),kkr=o("FlaxMT5ForConditionalGeneration"),Skr=o(" (mT5 model)"),Rkr=l(),FC=a("li"),$7e=a("strong"),Pkr=o("roberta"),Bkr=o(" \u2014 "),yY=a("a"),Ikr=o("FlaxRobertaForMaskedLM"),qkr=o(" (RoBERTa model)"),Nkr=l(),TC=a("li"),k7e=a("strong"),jkr=o("roformer"),Dkr=o(" \u2014 "),LY=a("a"),Gkr=o("FlaxRoFormerForMaskedLM"),Okr=o(" (RoFormer model)"),Vkr=l(),MC=a("li"),S7e=a("strong"),Xkr=o("t5"),zkr=o(" \u2014 "),xY=a("a"),Wkr=o("FlaxT5ForConditionalGeneration"),Qkr=o(" (T5 model)"),Hkr=l(),EC=a("li"),R7e=a("strong"),Ukr=o("wav2vec2"),Jkr=o(" \u2014 "),$Y=a("a"),Ykr=o("FlaxWav2Vec2ForPreTraining"),Kkr=o(" (Wav2Vec2 model)"),Zkr=l(),CC=a("li"),P7e=a("strong"),eSr=o("xlm-roberta"),oSr=o(" \u2014 "),kY=a("a"),rSr=o("FlaxXLMRobertaForMaskedLM"),tSr=o(" (XLM-RoBERTa model)"),aSr=l(),F(wC.$$.fragment),xje=l(),Nc=a("h2"),AC=a("a"),B7e=a("span"),F(N9.$$.fragment),nSr=l(),I7e=a("span"),sSr=o("FlaxAutoModelForMaskedLM"),$je=l(),hr=a("div"),F(j9.$$.fragment),lSr=l(),jc=a("p"),iSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SY=a("a"),dSr=o("from_pretrained()"),cSr=o(" class method or the "),RY=a("a"),fSr=o("from_config()"),mSr=o(` class
method.`),gSr=l(),D9=a("p"),hSr=o("This class cannot be instantiated directly using "),q7e=a("code"),pSr=o("__init__()"),uSr=o(" (throws an error)."),_Sr=l(),Xt=a("div"),F(G9.$$.fragment),bSr=l(),N7e=a("p"),vSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FSr=l(),Dc=a("p"),TSr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),MSr=o("not"),ESr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),CSr=o("from_pretrained()"),wSr=o(" to load the model weights."),ASr=l(),F(yC.$$.fragment),ySr=l(),Or=a("div"),F(O9.$$.fragment),LSr=l(),D7e=a("p"),xSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Sr=l(),_n=a("p"),kSr=o("The model class to instantiate is selected based on the "),G7e=a("code"),SSr=o("model_type"),RSr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),ISr=o("pretrained_model_name_or_path"),qSr=o(":"),NSr=l(),xe=a("ul"),LC=a("li"),X7e=a("strong"),jSr=o("albert"),DSr=o(" \u2014 "),BY=a("a"),GSr=o("FlaxAlbertForMaskedLM"),OSr=o(" (ALBERT model)"),VSr=l(),xC=a("li"),z7e=a("strong"),XSr=o("bart"),zSr=o(" \u2014 "),IY=a("a"),WSr=o("FlaxBartForConditionalGeneration"),QSr=o(" (BART model)"),HSr=l(),$C=a("li"),W7e=a("strong"),USr=o("bert"),JSr=o(" \u2014 "),qY=a("a"),YSr=o("FlaxBertForMaskedLM"),KSr=o(" (BERT model)"),ZSr=l(),kC=a("li"),Q7e=a("strong"),eRr=o("big_bird"),oRr=o(" \u2014 "),NY=a("a"),rRr=o("FlaxBigBirdForMaskedLM"),tRr=o(" (BigBird model)"),aRr=l(),SC=a("li"),H7e=a("strong"),nRr=o("distilbert"),sRr=o(" \u2014 "),jY=a("a"),lRr=o("FlaxDistilBertForMaskedLM"),iRr=o(" (DistilBERT model)"),dRr=l(),RC=a("li"),U7e=a("strong"),cRr=o("electra"),fRr=o(" \u2014 "),DY=a("a"),mRr=o("FlaxElectraForMaskedLM"),gRr=o(" (ELECTRA model)"),hRr=l(),PC=a("li"),J7e=a("strong"),pRr=o("mbart"),uRr=o(" \u2014 "),GY=a("a"),_Rr=o("FlaxMBartForConditionalGeneration"),bRr=o(" (mBART model)"),vRr=l(),BC=a("li"),Y7e=a("strong"),FRr=o("roberta"),TRr=o(" \u2014 "),OY=a("a"),MRr=o("FlaxRobertaForMaskedLM"),ERr=o(" (RoBERTa model)"),CRr=l(),IC=a("li"),K7e=a("strong"),wRr=o("roformer"),ARr=o(" \u2014 "),VY=a("a"),yRr=o("FlaxRoFormerForMaskedLM"),LRr=o(" (RoFormer model)"),xRr=l(),qC=a("li"),Z7e=a("strong"),$Rr=o("xlm-roberta"),kRr=o(" \u2014 "),XY=a("a"),SRr=o("FlaxXLMRobertaForMaskedLM"),RRr=o(" (XLM-RoBERTa model)"),PRr=l(),F(NC.$$.fragment),kje=l(),Gc=a("h2"),jC=a("a"),eMe=a("span"),F(V9.$$.fragment),BRr=l(),oMe=a("span"),IRr=o("FlaxAutoModelForSeq2SeqLM"),Sje=l(),pr=a("div"),F(X9.$$.fragment),qRr=l(),Oc=a("p"),NRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zY=a("a"),jRr=o("from_pretrained()"),DRr=o(" class method or the "),WY=a("a"),GRr=o("from_config()"),ORr=o(` class
method.`),VRr=l(),z9=a("p"),XRr=o("This class cannot be instantiated directly using "),rMe=a("code"),zRr=o("__init__()"),WRr=o(" (throws an error)."),QRr=l(),zt=a("div"),F(W9.$$.fragment),HRr=l(),tMe=a("p"),URr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JRr=l(),Vc=a("p"),YRr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),KRr=o("not"),ZRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),ePr=o("from_pretrained()"),oPr=o(" to load the model weights."),rPr=l(),F(DC.$$.fragment),tPr=l(),Vr=a("div"),F(Q9.$$.fragment),aPr=l(),nMe=a("p"),nPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sPr=l(),bn=a("p"),lPr=o("The model class to instantiate is selected based on the "),sMe=a("code"),iPr=o("model_type"),dPr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),mPr=o("pretrained_model_name_or_path"),gPr=o(":"),hPr=l(),Pe=a("ul"),GC=a("li"),dMe=a("strong"),pPr=o("bart"),uPr=o(" \u2014 "),HY=a("a"),_Pr=o("FlaxBartForConditionalGeneration"),bPr=o(" (BART model)"),vPr=l(),OC=a("li"),cMe=a("strong"),FPr=o("blenderbot"),TPr=o(" \u2014 "),UY=a("a"),MPr=o("FlaxBlenderbotForConditionalGeneration"),EPr=o(" (Blenderbot model)"),CPr=l(),VC=a("li"),fMe=a("strong"),wPr=o("blenderbot-small"),APr=o(" \u2014 "),JY=a("a"),yPr=o("FlaxBlenderbotSmallForConditionalGeneration"),LPr=o(" (BlenderbotSmall model)"),xPr=l(),XC=a("li"),mMe=a("strong"),$Pr=o("encoder-decoder"),kPr=o(" \u2014 "),YY=a("a"),SPr=o("FlaxEncoderDecoderModel"),RPr=o(" (Encoder decoder model)"),PPr=l(),zC=a("li"),gMe=a("strong"),BPr=o("marian"),IPr=o(" \u2014 "),KY=a("a"),qPr=o("FlaxMarianMTModel"),NPr=o(" (Marian model)"),jPr=l(),WC=a("li"),hMe=a("strong"),DPr=o("mbart"),GPr=o(" \u2014 "),ZY=a("a"),OPr=o("FlaxMBartForConditionalGeneration"),VPr=o(" (mBART model)"),XPr=l(),QC=a("li"),pMe=a("strong"),zPr=o("mt5"),WPr=o(" \u2014 "),eK=a("a"),QPr=o("FlaxMT5ForConditionalGeneration"),HPr=o(" (mT5 model)"),UPr=l(),HC=a("li"),uMe=a("strong"),JPr=o("pegasus"),YPr=o(" \u2014 "),oK=a("a"),KPr=o("FlaxPegasusForConditionalGeneration"),ZPr=o(" (Pegasus model)"),eBr=l(),UC=a("li"),_Me=a("strong"),oBr=o("t5"),rBr=o(" \u2014 "),rK=a("a"),tBr=o("FlaxT5ForConditionalGeneration"),aBr=o(" (T5 model)"),nBr=l(),F(JC.$$.fragment),Rje=l(),Xc=a("h2"),YC=a("a"),bMe=a("span"),F(H9.$$.fragment),sBr=l(),vMe=a("span"),lBr=o("FlaxAutoModelForSequenceClassification"),Pje=l(),ur=a("div"),F(U9.$$.fragment),iBr=l(),zc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),aK=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),J9=a("p"),pBr=o("This class cannot be instantiated directly using "),FMe=a("code"),uBr=o("__init__()"),_Br=o(" (throws an error)."),bBr=l(),Wt=a("div"),F(Y9.$$.fragment),vBr=l(),TMe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TBr=l(),Wc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),yBr=l(),F(KC.$$.fragment),LBr=l(),Xr=a("div"),F(K9.$$.fragment),xBr=l(),EMe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kBr=l(),vn=a("p"),SBr=o("The model class to instantiate is selected based on the "),CMe=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),qBr=o("pretrained_model_name_or_path"),NBr=o(":"),jBr=l(),$e=a("ul"),ZC=a("li"),yMe=a("strong"),DBr=o("albert"),GBr=o(" \u2014 "),sK=a("a"),OBr=o("FlaxAlbertForSequenceClassification"),VBr=o(" (ALBERT model)"),XBr=l(),e5=a("li"),LMe=a("strong"),zBr=o("bart"),WBr=o(" \u2014 "),lK=a("a"),QBr=o("FlaxBartForSequenceClassification"),HBr=o(" (BART model)"),UBr=l(),o5=a("li"),xMe=a("strong"),JBr=o("bert"),YBr=o(" \u2014 "),iK=a("a"),KBr=o("FlaxBertForSequenceClassification"),ZBr=o(" (BERT model)"),eIr=l(),r5=a("li"),$Me=a("strong"),oIr=o("big_bird"),rIr=o(" \u2014 "),dK=a("a"),tIr=o("FlaxBigBirdForSequenceClassification"),aIr=o(" (BigBird model)"),nIr=l(),t5=a("li"),kMe=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),cK=a("a"),iIr=o("FlaxDistilBertForSequenceClassification"),dIr=o(" (DistilBERT model)"),cIr=l(),a5=a("li"),SMe=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),fK=a("a"),gIr=o("FlaxElectraForSequenceClassification"),hIr=o(" (ELECTRA model)"),pIr=l(),n5=a("li"),RMe=a("strong"),uIr=o("mbart"),_Ir=o(" \u2014 "),mK=a("a"),bIr=o("FlaxMBartForSequenceClassification"),vIr=o(" (mBART model)"),FIr=l(),s5=a("li"),PMe=a("strong"),TIr=o("roberta"),MIr=o(" \u2014 "),gK=a("a"),EIr=o("FlaxRobertaForSequenceClassification"),CIr=o(" (RoBERTa model)"),wIr=l(),l5=a("li"),BMe=a("strong"),AIr=o("roformer"),yIr=o(" \u2014 "),hK=a("a"),LIr=o("FlaxRoFormerForSequenceClassification"),xIr=o(" (RoFormer model)"),$Ir=l(),i5=a("li"),IMe=a("strong"),kIr=o("xlm-roberta"),SIr=o(" \u2014 "),pK=a("a"),RIr=o("FlaxXLMRobertaForSequenceClassification"),PIr=o(" (XLM-RoBERTa model)"),BIr=l(),F(d5.$$.fragment),Bje=l(),Qc=a("h2"),c5=a("a"),qMe=a("span"),F(Z9.$$.fragment),IIr=l(),NMe=a("span"),qIr=o("FlaxAutoModelForQuestionAnswering"),Ije=l(),_r=a("div"),F(ex.$$.fragment),NIr=l(),Hc=a("p"),jIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=a("a"),DIr=o("from_pretrained()"),GIr=o(" class method or the "),_K=a("a"),OIr=o("from_config()"),VIr=o(` class
method.`),XIr=l(),ox=a("p"),zIr=o("This class cannot be instantiated directly using "),jMe=a("code"),WIr=o("__init__()"),QIr=o(" (throws an error)."),HIr=l(),Qt=a("div"),F(rx.$$.fragment),UIr=l(),DMe=a("p"),JIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YIr=l(),Uc=a("p"),KIr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),ZIr=o("not"),eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),oqr=o("from_pretrained()"),rqr=o(" to load the model weights."),tqr=l(),F(f5.$$.fragment),aqr=l(),zr=a("div"),F(tx.$$.fragment),nqr=l(),OMe=a("p"),sqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lqr=l(),Fn=a("p"),iqr=o("The model class to instantiate is selected based on the "),VMe=a("code"),dqr=o("model_type"),cqr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(":"),pqr=l(),ke=a("ul"),m5=a("li"),WMe=a("strong"),uqr=o("albert"),_qr=o(" \u2014 "),vK=a("a"),bqr=o("FlaxAlbertForQuestionAnswering"),vqr=o(" (ALBERT model)"),Fqr=l(),g5=a("li"),QMe=a("strong"),Tqr=o("bart"),Mqr=o(" \u2014 "),FK=a("a"),Eqr=o("FlaxBartForQuestionAnswering"),Cqr=o(" (BART model)"),wqr=l(),h5=a("li"),HMe=a("strong"),Aqr=o("bert"),yqr=o(" \u2014 "),TK=a("a"),Lqr=o("FlaxBertForQuestionAnswering"),xqr=o(" (BERT model)"),$qr=l(),p5=a("li"),UMe=a("strong"),kqr=o("big_bird"),Sqr=o(" \u2014 "),MK=a("a"),Rqr=o("FlaxBigBirdForQuestionAnswering"),Pqr=o(" (BigBird model)"),Bqr=l(),u5=a("li"),JMe=a("strong"),Iqr=o("distilbert"),qqr=o(" \u2014 "),EK=a("a"),Nqr=o("FlaxDistilBertForQuestionAnswering"),jqr=o(" (DistilBERT model)"),Dqr=l(),_5=a("li"),YMe=a("strong"),Gqr=o("electra"),Oqr=o(" \u2014 "),CK=a("a"),Vqr=o("FlaxElectraForQuestionAnswering"),Xqr=o(" (ELECTRA model)"),zqr=l(),b5=a("li"),KMe=a("strong"),Wqr=o("mbart"),Qqr=o(" \u2014 "),wK=a("a"),Hqr=o("FlaxMBartForQuestionAnswering"),Uqr=o(" (mBART model)"),Jqr=l(),v5=a("li"),ZMe=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),AK=a("a"),Zqr=o("FlaxRobertaForQuestionAnswering"),eNr=o(" (RoBERTa model)"),oNr=l(),F5=a("li"),e4e=a("strong"),rNr=o("roformer"),tNr=o(" \u2014 "),yK=a("a"),aNr=o("FlaxRoFormerForQuestionAnswering"),nNr=o(" (RoFormer model)"),sNr=l(),T5=a("li"),o4e=a("strong"),lNr=o("xlm-roberta"),iNr=o(" \u2014 "),LK=a("a"),dNr=o("FlaxXLMRobertaForQuestionAnswering"),cNr=o(" (XLM-RoBERTa model)"),fNr=l(),F(M5.$$.fragment),qje=l(),Jc=a("h2"),E5=a("a"),r4e=a("span"),F(ax.$$.fragment),mNr=l(),t4e=a("span"),gNr=o("FlaxAutoModelForTokenClassification"),Nje=l(),br=a("div"),F(nx.$$.fragment),hNr=l(),Yc=a("p"),pNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xK=a("a"),uNr=o("from_pretrained()"),_Nr=o(" class method or the "),$K=a("a"),bNr=o("from_config()"),vNr=o(` class
method.`),FNr=l(),sx=a("p"),TNr=o("This class cannot be instantiated directly using "),a4e=a("code"),MNr=o("__init__()"),ENr=o(" (throws an error)."),CNr=l(),Ht=a("div"),F(lx.$$.fragment),wNr=l(),n4e=a("p"),ANr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yNr=l(),Kc=a("p"),LNr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),xNr=o("not"),$Nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),kNr=o("from_pretrained()"),SNr=o(" to load the model weights."),RNr=l(),F(C5.$$.fragment),PNr=l(),Wr=a("div"),F(ix.$$.fragment),BNr=l(),l4e=a("p"),INr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qNr=l(),Tn=a("p"),NNr=o("The model class to instantiate is selected based on the "),i4e=a("code"),jNr=o("model_type"),DNr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),GNr=o("pretrained_model_name_or_path"),ONr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),VNr=o("pretrained_model_name_or_path"),XNr=o(":"),zNr=l(),Ge=a("ul"),w5=a("li"),f4e=a("strong"),WNr=o("albert"),QNr=o(" \u2014 "),SK=a("a"),HNr=o("FlaxAlbertForTokenClassification"),UNr=o(" (ALBERT model)"),JNr=l(),A5=a("li"),m4e=a("strong"),YNr=o("bert"),KNr=o(" \u2014 "),RK=a("a"),ZNr=o("FlaxBertForTokenClassification"),ejr=o(" (BERT model)"),ojr=l(),y5=a("li"),g4e=a("strong"),rjr=o("big_bird"),tjr=o(" \u2014 "),PK=a("a"),ajr=o("FlaxBigBirdForTokenClassification"),njr=o(" (BigBird model)"),sjr=l(),L5=a("li"),h4e=a("strong"),ljr=o("distilbert"),ijr=o(" \u2014 "),BK=a("a"),djr=o("FlaxDistilBertForTokenClassification"),cjr=o(" (DistilBERT model)"),fjr=l(),x5=a("li"),p4e=a("strong"),mjr=o("electra"),gjr=o(" \u2014 "),IK=a("a"),hjr=o("FlaxElectraForTokenClassification"),pjr=o(" (ELECTRA model)"),ujr=l(),$5=a("li"),u4e=a("strong"),_jr=o("roberta"),bjr=o(" \u2014 "),qK=a("a"),vjr=o("FlaxRobertaForTokenClassification"),Fjr=o(" (RoBERTa model)"),Tjr=l(),k5=a("li"),_4e=a("strong"),Mjr=o("roformer"),Ejr=o(" \u2014 "),NK=a("a"),Cjr=o("FlaxRoFormerForTokenClassification"),wjr=o(" (RoFormer model)"),Ajr=l(),S5=a("li"),b4e=a("strong"),yjr=o("xlm-roberta"),Ljr=o(" \u2014 "),jK=a("a"),xjr=o("FlaxXLMRobertaForTokenClassification"),$jr=o(" (XLM-RoBERTa model)"),kjr=l(),F(R5.$$.fragment),jje=l(),Zc=a("h2"),P5=a("a"),v4e=a("span"),F(dx.$$.fragment),Sjr=l(),F4e=a("span"),Rjr=o("FlaxAutoModelForMultipleChoice"),Dje=l(),vr=a("div"),F(cx.$$.fragment),Pjr=l(),ef=a("p"),Bjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DK=a("a"),Ijr=o("from_pretrained()"),qjr=o(" class method or the "),GK=a("a"),Njr=o("from_config()"),jjr=o(` class
method.`),Djr=l(),fx=a("p"),Gjr=o("This class cannot be instantiated directly using "),T4e=a("code"),Ojr=o("__init__()"),Vjr=o(" (throws an error)."),Xjr=l(),Ut=a("div"),F(mx.$$.fragment),zjr=l(),M4e=a("p"),Wjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qjr=l(),of=a("p"),Hjr=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),Ujr=o("not"),Jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),Yjr=o("from_pretrained()"),Kjr=o(" to load the model weights."),Zjr=l(),F(B5.$$.fragment),eDr=l(),Qr=a("div"),F(gx.$$.fragment),oDr=l(),C4e=a("p"),rDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tDr=l(),Mn=a("p"),aDr=o("The model class to instantiate is selected based on the "),w4e=a("code"),nDr=o("model_type"),sDr=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),lDr=o("pretrained_model_name_or_path"),iDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),dDr=o("pretrained_model_name_or_path"),cDr=o(":"),fDr=l(),Oe=a("ul"),I5=a("li"),L4e=a("strong"),mDr=o("albert"),gDr=o(" \u2014 "),VK=a("a"),hDr=o("FlaxAlbertForMultipleChoice"),pDr=o(" (ALBERT model)"),uDr=l(),q5=a("li"),x4e=a("strong"),_Dr=o("bert"),bDr=o(" \u2014 "),XK=a("a"),vDr=o("FlaxBertForMultipleChoice"),FDr=o(" (BERT model)"),TDr=l(),N5=a("li"),$4e=a("strong"),MDr=o("big_bird"),EDr=o(" \u2014 "),zK=a("a"),CDr=o("FlaxBigBirdForMultipleChoice"),wDr=o(" (BigBird model)"),ADr=l(),j5=a("li"),k4e=a("strong"),yDr=o("distilbert"),LDr=o(" \u2014 "),WK=a("a"),xDr=o("FlaxDistilBertForMultipleChoice"),$Dr=o(" (DistilBERT model)"),kDr=l(),D5=a("li"),S4e=a("strong"),SDr=o("electra"),RDr=o(" \u2014 "),QK=a("a"),PDr=o("FlaxElectraForMultipleChoice"),BDr=o(" (ELECTRA model)"),IDr=l(),G5=a("li"),R4e=a("strong"),qDr=o("roberta"),NDr=o(" \u2014 "),HK=a("a"),jDr=o("FlaxRobertaForMultipleChoice"),DDr=o(" (RoBERTa model)"),GDr=l(),O5=a("li"),P4e=a("strong"),ODr=o("roformer"),VDr=o(" \u2014 "),UK=a("a"),XDr=o("FlaxRoFormerForMultipleChoice"),zDr=o(" (RoFormer model)"),WDr=l(),V5=a("li"),B4e=a("strong"),QDr=o("xlm-roberta"),HDr=o(" \u2014 "),JK=a("a"),UDr=o("FlaxXLMRobertaForMultipleChoice"),JDr=o(" (XLM-RoBERTa model)"),YDr=l(),F(X5.$$.fragment),Gje=l(),rf=a("h2"),z5=a("a"),I4e=a("span"),F(hx.$$.fragment),KDr=l(),q4e=a("span"),ZDr=o("FlaxAutoModelForNextSentencePrediction"),Oje=l(),Fr=a("div"),F(px.$$.fragment),eGr=l(),tf=a("p"),oGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YK=a("a"),rGr=o("from_pretrained()"),tGr=o(" class method or the "),KK=a("a"),aGr=o("from_config()"),nGr=o(` class
method.`),sGr=l(),ux=a("p"),lGr=o("This class cannot be instantiated directly using "),N4e=a("code"),iGr=o("__init__()"),dGr=o(" (throws an error)."),cGr=l(),Jt=a("div"),F(_x.$$.fragment),fGr=l(),j4e=a("p"),mGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gGr=l(),af=a("p"),hGr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),pGr=o("not"),uGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),_Gr=o("from_pretrained()"),bGr=o(" to load the model weights."),vGr=l(),F(W5.$$.fragment),FGr=l(),Hr=a("div"),F(bx.$$.fragment),TGr=l(),G4e=a("p"),MGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EGr=l(),En=a("p"),CGr=o("The model class to instantiate is selected based on the "),O4e=a("code"),wGr=o("model_type"),AGr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),yGr=o("pretrained_model_name_or_path"),LGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(":"),kGr=l(),z4e=a("ul"),Q5=a("li"),W4e=a("strong"),SGr=o("bert"),RGr=o(" \u2014 "),eZ=a("a"),PGr=o("FlaxBertForNextSentencePrediction"),BGr=o(" (BERT model)"),IGr=l(),F(H5.$$.fragment),Vje=l(),nf=a("h2"),U5=a("a"),Q4e=a("span"),F(vx.$$.fragment),qGr=l(),H4e=a("span"),NGr=o("FlaxAutoModelForImageClassification"),Xje=l(),Tr=a("div"),F(Fx.$$.fragment),jGr=l(),sf=a("p"),DGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oZ=a("a"),GGr=o("from_pretrained()"),OGr=o(" class method or the "),rZ=a("a"),VGr=o("from_config()"),XGr=o(` class
method.`),zGr=l(),Tx=a("p"),WGr=o("This class cannot be instantiated directly using "),U4e=a("code"),QGr=o("__init__()"),HGr=o(" (throws an error)."),UGr=l(),Yt=a("div"),F(Mx.$$.fragment),JGr=l(),J4e=a("p"),YGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KGr=l(),lf=a("p"),ZGr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),eOr=o("not"),oOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),rOr=o("from_pretrained()"),tOr=o(" to load the model weights."),aOr=l(),F(J5.$$.fragment),nOr=l(),Ur=a("div"),F(Ex.$$.fragment),sOr=l(),K4e=a("p"),lOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iOr=l(),Cn=a("p"),dOr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),cOr=o("model_type"),fOr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),mOr=o("pretrained_model_name_or_path"),gOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(":"),uOr=l(),Cx=a("ul"),Y5=a("li"),rEe=a("strong"),_Or=o("beit"),bOr=o(" \u2014 "),aZ=a("a"),vOr=o("FlaxBeitForImageClassification"),FOr=o(" (BEiT model)"),TOr=l(),K5=a("li"),tEe=a("strong"),MOr=o("vit"),EOr=o(" \u2014 "),nZ=a("a"),COr=o("FlaxViTForImageClassification"),wOr=o(" (ViT model)"),AOr=l(),F(Z5.$$.fragment),zje=l(),df=a("h2"),ew=a("a"),aEe=a("span"),F(wx.$$.fragment),yOr=l(),nEe=a("span"),LOr=o("FlaxAutoModelForVision2Seq"),Wje=l(),Mr=a("div"),F(Ax.$$.fragment),xOr=l(),cf=a("p"),$Or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sZ=a("a"),kOr=o("from_pretrained()"),SOr=o(" class method or the "),lZ=a("a"),ROr=o("from_config()"),POr=o(` class
method.`),BOr=l(),yx=a("p"),IOr=o("This class cannot be instantiated directly using "),sEe=a("code"),qOr=o("__init__()"),NOr=o(" (throws an error)."),jOr=l(),Kt=a("div"),F(Lx.$$.fragment),DOr=l(),lEe=a("p"),GOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OOr=l(),ff=a("p"),VOr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),XOr=o("not"),zOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),WOr=o("from_pretrained()"),QOr=o(" to load the model weights."),HOr=l(),F(ow.$$.fragment),UOr=l(),Jr=a("div"),F(xx.$$.fragment),JOr=l(),dEe=a("p"),YOr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KOr=l(),wn=a("p"),ZOr=o("The model class to instantiate is selected based on the "),cEe=a("code"),eVr=o("model_type"),oVr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),rVr=o("pretrained_model_name_or_path"),tVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),aVr=o("pretrained_model_name_or_path"),nVr=o(":"),sVr=l(),gEe=a("ul"),rw=a("li"),hEe=a("strong"),lVr=o("vision-encoder-decoder"),iVr=o(" \u2014 "),dZ=a("a"),dVr=o("FlaxVisionEncoderDecoderModel"),cVr=o(" (Vision Encoder decoder model)"),fVr=l(),F(tw.$$.fragment),this.h()},l(f){const _=Gxt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var $x=s(p);m=n($x,"A",{id:!0,class:!0,href:!0});var pEe=s(m);u=n(pEe,"SPAN",{});var uEe=s(u);T(d.$$.fragment,uEe),uEe.forEach(t),pEe.forEach(t),h=i($x),Mo=n($x,"SPAN",{});var _Ee=s(Mo);fi=r(_Ee,"Auto Classes"),_Ee.forEach(t),$x.forEach(t),pf=i(f),rt=n(f,"P",{});var kx=s(rt);mi=r(kx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(kx,"CODE",{});var bEe=s(gi);TA=r(bEe,"from_pretrained()"),bEe.forEach(t),uf=r(kx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var vEe=s(yn);MA=r(vEe,"AutoConfig"),vEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var FEe=s(xn);EA=r(FEe,"AutoModel"),FEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var TEe=s($n);CA=r(TEe,"AutoTokenizer"),TEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Sx=s(Ae);V$=r(Sx,"will create a model that is an instance of "),_i=n(Sx,"A",{href:!0});var MEe=s(_i);X$=r(MEe,"BertModel"),MEe.forEach(t),z$=r(Sx,"."),Sx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Rx=s(wa);W$=r(Rx,"There is one class of "),bf=n(Rx,"CODE",{});var EEe=s(bf);Q$=r(EEe,"AutoModel"),EEe.forEach(t),oOe=r(Rx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Rx.forEach(t),Xqe=i(f),bi=n(f,"H2",{class:!0});var Px=s(bi);vf=n(Px,"A",{id:!0,class:!0,href:!0});var CEe=s(vf);roe=n(CEe,"SPAN",{});var wEe=s(roe);T(wA.$$.fragment,wEe),wEe.forEach(t),CEe.forEach(t),rOe=i(Px),toe=n(Px,"SPAN",{});var AEe=s(toe);tOe=r(AEe,"Extending the Auto Classes"),AEe.forEach(t),Px.forEach(t),zqe=i(f),kn=n(f,"P",{});var mf=s(kn);aOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aoe=n(mf,"CODE",{});var yEe=s(aoe);nOe=r(yEe,"NewModel"),yEe.forEach(t),sOe=r(mf,", make sure you have a "),noe=n(mf,"CODE",{});var LEe=s(noe);lOe=r(LEe,"NewModelConfig"),LEe.forEach(t),iOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Wqe=i(f),T(AA.$$.fragment,f),Qqe=i(f),H$=n(f,"P",{});var xEe=s(H$);dOe=r(xEe,"You will then be able to use the auto classes like you would usually do!"),xEe.forEach(t),Hqe=i(f),T(Ff.$$.fragment,f),Uqe=i(f),vi=n(f,"H2",{class:!0});var Bx=s(vi);Tf=n(Bx,"A",{id:!0,class:!0,href:!0});var $Ee=s(Tf);soe=n($Ee,"SPAN",{});var kEe=s(soe);T(yA.$$.fragment,kEe),kEe.forEach(t),$Ee.forEach(t),cOe=i(Bx),loe=n(Bx,"SPAN",{});var SEe=s(loe);fOe=r(SEe,"AutoConfig"),SEe.forEach(t),Bx.forEach(t),Jqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(LA.$$.fragment,et),mOe=i(et),xA=n(et,"P",{});var Ix=s(xA);gOe=r(Ix,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U$=n(Ix,"A",{href:!0});var REe=s(U$);hOe=r(REe,"from_pretrained()"),REe.forEach(t),pOe=r(Ix," class method."),Ix.forEach(t),uOe=i(et),$A=n(et,"P",{});var qx=s($A);_Oe=r(qx,"This class cannot be instantiated directly using "),ioe=n(qx,"CODE",{});var PEe=s(ioe);bOe=r(PEe,"__init__()"),PEe.forEach(t),vOe=r(qx," (throws an error)."),qx.forEach(t),FOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(kA.$$.fragment,ot),TOe=i(ot),doe=n(ot,"P",{});var BEe=s(doe);MOe=r(BEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),BEe.forEach(t),EOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);COe=r(gf,"The configuration class to instantiate is selected based on the "),coe=n(gf,"CODE",{});var IEe=s(coe);wOe=r(IEe,"model_type"),IEe.forEach(t),AOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),foe=n(gf,"CODE",{});var qEe=s(foe);yOe=r(qEe,"pretrained_model_name_or_path"),qEe.forEach(t),LOe=r(gf,":"),gf.forEach(t),xOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var aw=s(Mf);moe=n(aw,"STRONG",{});var NEe=s(moe);$Oe=r(NEe,"albert"),NEe.forEach(t),kOe=r(aw," \u2014 "),J$=n(aw,"A",{href:!0});var jEe=s(J$);SOe=r(jEe,"AlbertConfig"),jEe.forEach(t),ROe=r(aw," (ALBERT model)"),aw.forEach(t),POe=i(y),Ef=n(y,"LI",{});var nw=s(Ef);goe=n(nw,"STRONG",{});var DEe=s(goe);BOe=r(DEe,"bart"),DEe.forEach(t),IOe=r(nw," \u2014 "),Y$=n(nw,"A",{href:!0});var GEe=s(Y$);qOe=r(GEe,"BartConfig"),GEe.forEach(t),NOe=r(nw," (BART model)"),nw.forEach(t),jOe=i(y),Cf=n(y,"LI",{});var sw=s(Cf);hoe=n(sw,"STRONG",{});var OEe=s(hoe);DOe=r(OEe,"beit"),OEe.forEach(t),GOe=r(sw," \u2014 "),K$=n(sw,"A",{href:!0});var VEe=s(K$);OOe=r(VEe,"BeitConfig"),VEe.forEach(t),VOe=r(sw," (BEiT model)"),sw.forEach(t),XOe=i(y),wf=n(y,"LI",{});var lw=s(wf);poe=n(lw,"STRONG",{});var XEe=s(poe);zOe=r(XEe,"bert"),XEe.forEach(t),WOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var zEe=s(Z$);QOe=r(zEe,"BertConfig"),zEe.forEach(t),HOe=r(lw," (BERT model)"),lw.forEach(t),UOe=i(y),Af=n(y,"LI",{});var iw=s(Af);uoe=n(iw,"STRONG",{});var WEe=s(uoe);JOe=r(WEe,"bert-generation"),WEe.forEach(t),YOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var QEe=s(ek);KOe=r(QEe,"BertGenerationConfig"),QEe.forEach(t),ZOe=r(iw," (Bert Generation model)"),iw.forEach(t),eVe=i(y),yf=n(y,"LI",{});var dw=s(yf);_oe=n(dw,"STRONG",{});var HEe=s(_oe);oVe=r(HEe,"big_bird"),HEe.forEach(t),rVe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var UEe=s(ok);tVe=r(UEe,"BigBirdConfig"),UEe.forEach(t),aVe=r(dw," (BigBird model)"),dw.forEach(t),nVe=i(y),Lf=n(y,"LI",{});var cw=s(Lf);boe=n(cw,"STRONG",{});var JEe=s(boe);sVe=r(JEe,"bigbird_pegasus"),JEe.forEach(t),lVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var YEe=s(rk);iVe=r(YEe,"BigBirdPegasusConfig"),YEe.forEach(t),dVe=r(cw," (BigBirdPegasus model)"),cw.forEach(t),cVe=i(y),xf=n(y,"LI",{});var fw=s(xf);voe=n(fw,"STRONG",{});var KEe=s(voe);fVe=r(KEe,"blenderbot"),KEe.forEach(t),mVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var ZEe=s(tk);gVe=r(ZEe,"BlenderbotConfig"),ZEe.forEach(t),hVe=r(fw," (Blenderbot model)"),fw.forEach(t),pVe=i(y),$f=n(y,"LI",{});var mw=s($f);Foe=n(mw,"STRONG",{});var eCe=s(Foe);uVe=r(eCe,"blenderbot-small"),eCe.forEach(t),_Ve=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var oCe=s(ak);bVe=r(oCe,"BlenderbotSmallConfig"),oCe.forEach(t),vVe=r(mw," (BlenderbotSmall model)"),mw.forEach(t),FVe=i(y),kf=n(y,"LI",{});var gw=s(kf);Toe=n(gw,"STRONG",{});var rCe=s(Toe);TVe=r(rCe,"camembert"),rCe.forEach(t),MVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var tCe=s(nk);EVe=r(tCe,"CamembertConfig"),tCe.forEach(t),CVe=r(gw," (CamemBERT model)"),gw.forEach(t),wVe=i(y),Sf=n(y,"LI",{});var hw=s(Sf);Moe=n(hw,"STRONG",{});var aCe=s(Moe);AVe=r(aCe,"canine"),aCe.forEach(t),yVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var nCe=s(sk);LVe=r(nCe,"CanineConfig"),nCe.forEach(t),xVe=r(hw," (Canine model)"),hw.forEach(t),$Ve=i(y),Rf=n(y,"LI",{});var pw=s(Rf);Eoe=n(pw,"STRONG",{});var sCe=s(Eoe);kVe=r(sCe,"clip"),sCe.forEach(t),SVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var lCe=s(lk);RVe=r(lCe,"CLIPConfig"),lCe.forEach(t),PVe=r(pw," (CLIP model)"),pw.forEach(t),BVe=i(y),Pf=n(y,"LI",{});var uw=s(Pf);Coe=n(uw,"STRONG",{});var iCe=s(Coe);IVe=r(iCe,"convbert"),iCe.forEach(t),qVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var dCe=s(ik);NVe=r(dCe,"ConvBertConfig"),dCe.forEach(t),jVe=r(uw," (ConvBERT model)"),uw.forEach(t),DVe=i(y),Bf=n(y,"LI",{});var _w=s(Bf);woe=n(_w,"STRONG",{});var cCe=s(woe);GVe=r(cCe,"convnext"),cCe.forEach(t),OVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var fCe=s(dk);VVe=r(fCe,"ConvNextConfig"),fCe.forEach(t),XVe=r(_w," (ConvNext model)"),_w.forEach(t),zVe=i(y),If=n(y,"LI",{});var bw=s(If);Aoe=n(bw,"STRONG",{});var mCe=s(Aoe);WVe=r(mCe,"ctrl"),mCe.forEach(t),QVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var gCe=s(ck);HVe=r(gCe,"CTRLConfig"),gCe.forEach(t),UVe=r(bw," (CTRL model)"),bw.forEach(t),JVe=i(y),qf=n(y,"LI",{});var vw=s(qf);yoe=n(vw,"STRONG",{});var hCe=s(yoe);YVe=r(hCe,"cvt"),hCe.forEach(t),KVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var pCe=s(fk);ZVe=r(pCe,"CvtConfig"),pCe.forEach(t),eXe=r(vw," (CvT model)"),vw.forEach(t),oXe=i(y),Nf=n(y,"LI",{});var Fw=s(Nf);Loe=n(Fw,"STRONG",{});var uCe=s(Loe);rXe=r(uCe,"data2vec-audio"),uCe.forEach(t),tXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var _Ce=s(mk);aXe=r(_Ce,"Data2VecAudioConfig"),_Ce.forEach(t),nXe=r(Fw," (Data2VecAudio model)"),Fw.forEach(t),sXe=i(y),jf=n(y,"LI",{});var Tw=s(jf);xoe=n(Tw,"STRONG",{});var bCe=s(xoe);lXe=r(bCe,"data2vec-text"),bCe.forEach(t),iXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var vCe=s(gk);dXe=r(vCe,"Data2VecTextConfig"),vCe.forEach(t),cXe=r(Tw," (Data2VecText model)"),Tw.forEach(t),fXe=i(y),Df=n(y,"LI",{});var Mw=s(Df);$oe=n(Mw,"STRONG",{});var FCe=s($oe);mXe=r(FCe,"data2vec-vision"),FCe.forEach(t),gXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var TCe=s(hk);hXe=r(TCe,"Data2VecVisionConfig"),TCe.forEach(t),pXe=r(Mw," (Data2VecVision model)"),Mw.forEach(t),uXe=i(y),Gf=n(y,"LI",{});var Ew=s(Gf);koe=n(Ew,"STRONG",{});var MCe=s(koe);_Xe=r(MCe,"deberta"),MCe.forEach(t),bXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var ECe=s(pk);vXe=r(ECe,"DebertaConfig"),ECe.forEach(t),FXe=r(Ew," (DeBERTa model)"),Ew.forEach(t),TXe=i(y),Of=n(y,"LI",{});var Cw=s(Of);Soe=n(Cw,"STRONG",{});var CCe=s(Soe);MXe=r(CCe,"deberta-v2"),CCe.forEach(t),EXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var wCe=s(uk);CXe=r(wCe,"DebertaV2Config"),wCe.forEach(t),wXe=r(Cw," (DeBERTa-v2 model)"),Cw.forEach(t),AXe=i(y),Vf=n(y,"LI",{});var ww=s(Vf);Roe=n(ww,"STRONG",{});var ACe=s(Roe);yXe=r(ACe,"decision_transformer"),ACe.forEach(t),LXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var yCe=s(_k);xXe=r(yCe,"DecisionTransformerConfig"),yCe.forEach(t),$Xe=r(ww," (Decision Transformer model)"),ww.forEach(t),kXe=i(y),Xf=n(y,"LI",{});var Aw=s(Xf);Poe=n(Aw,"STRONG",{});var LCe=s(Poe);SXe=r(LCe,"deit"),LCe.forEach(t),RXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var gVr=s(bk);PXe=r(gVr,"DeiTConfig"),gVr.forEach(t),BXe=r(Aw," (DeiT model)"),Aw.forEach(t),IXe=i(y),zf=n(y,"LI",{});var xCe=s(zf);Boe=n(xCe,"STRONG",{});var hVr=s(Boe);qXe=r(hVr,"detr"),hVr.forEach(t),NXe=r(xCe," \u2014 "),vk=n(xCe,"A",{href:!0});var pVr=s(vk);jXe=r(pVr,"DetrConfig"),pVr.forEach(t),DXe=r(xCe," (DETR model)"),xCe.forEach(t),GXe=i(y),Wf=n(y,"LI",{});var $Ce=s(Wf);Ioe=n($Ce,"STRONG",{});var uVr=s(Ioe);OXe=r(uVr,"distilbert"),uVr.forEach(t),VXe=r($Ce," \u2014 "),Fk=n($Ce,"A",{href:!0});var _Vr=s(Fk);XXe=r(_Vr,"DistilBertConfig"),_Vr.forEach(t),zXe=r($Ce," (DistilBERT model)"),$Ce.forEach(t),WXe=i(y),Qf=n(y,"LI",{});var kCe=s(Qf);qoe=n(kCe,"STRONG",{});var bVr=s(qoe);QXe=r(bVr,"dpr"),bVr.forEach(t),HXe=r(kCe," \u2014 "),Tk=n(kCe,"A",{href:!0});var vVr=s(Tk);UXe=r(vVr,"DPRConfig"),vVr.forEach(t),JXe=r(kCe," (DPR model)"),kCe.forEach(t),YXe=i(y),Hf=n(y,"LI",{});var SCe=s(Hf);Noe=n(SCe,"STRONG",{});var FVr=s(Noe);KXe=r(FVr,"dpt"),FVr.forEach(t),ZXe=r(SCe," \u2014 "),Mk=n(SCe,"A",{href:!0});var TVr=s(Mk);eze=r(TVr,"DPTConfig"),TVr.forEach(t),oze=r(SCe," (DPT model)"),SCe.forEach(t),rze=i(y),Uf=n(y,"LI",{});var RCe=s(Uf);joe=n(RCe,"STRONG",{});var MVr=s(joe);tze=r(MVr,"electra"),MVr.forEach(t),aze=r(RCe," \u2014 "),Ek=n(RCe,"A",{href:!0});var EVr=s(Ek);nze=r(EVr,"ElectraConfig"),EVr.forEach(t),sze=r(RCe," (ELECTRA model)"),RCe.forEach(t),lze=i(y),Jf=n(y,"LI",{});var PCe=s(Jf);Doe=n(PCe,"STRONG",{});var CVr=s(Doe);ize=r(CVr,"encoder-decoder"),CVr.forEach(t),dze=r(PCe," \u2014 "),Ck=n(PCe,"A",{href:!0});var wVr=s(Ck);cze=r(wVr,"EncoderDecoderConfig"),wVr.forEach(t),fze=r(PCe," (Encoder decoder model)"),PCe.forEach(t),mze=i(y),Yf=n(y,"LI",{});var BCe=s(Yf);Goe=n(BCe,"STRONG",{});var AVr=s(Goe);gze=r(AVr,"flaubert"),AVr.forEach(t),hze=r(BCe," \u2014 "),wk=n(BCe,"A",{href:!0});var yVr=s(wk);pze=r(yVr,"FlaubertConfig"),yVr.forEach(t),uze=r(BCe," (FlauBERT model)"),BCe.forEach(t),_ze=i(y),Kf=n(y,"LI",{});var ICe=s(Kf);Ooe=n(ICe,"STRONG",{});var LVr=s(Ooe);bze=r(LVr,"flava"),LVr.forEach(t),vze=r(ICe," \u2014 "),Ak=n(ICe,"A",{href:!0});var xVr=s(Ak);Fze=r(xVr,"FlavaConfig"),xVr.forEach(t),Tze=r(ICe," (Flava model)"),ICe.forEach(t),Mze=i(y),Zf=n(y,"LI",{});var qCe=s(Zf);Voe=n(qCe,"STRONG",{});var $Vr=s(Voe);Eze=r($Vr,"fnet"),$Vr.forEach(t),Cze=r(qCe," \u2014 "),yk=n(qCe,"A",{href:!0});var kVr=s(yk);wze=r(kVr,"FNetConfig"),kVr.forEach(t),Aze=r(qCe," (FNet model)"),qCe.forEach(t),yze=i(y),em=n(y,"LI",{});var NCe=s(em);Xoe=n(NCe,"STRONG",{});var SVr=s(Xoe);Lze=r(SVr,"fsmt"),SVr.forEach(t),xze=r(NCe," \u2014 "),Lk=n(NCe,"A",{href:!0});var RVr=s(Lk);$ze=r(RVr,"FSMTConfig"),RVr.forEach(t),kze=r(NCe," (FairSeq Machine-Translation model)"),NCe.forEach(t),Sze=i(y),om=n(y,"LI",{});var jCe=s(om);zoe=n(jCe,"STRONG",{});var PVr=s(zoe);Rze=r(PVr,"funnel"),PVr.forEach(t),Pze=r(jCe," \u2014 "),xk=n(jCe,"A",{href:!0});var BVr=s(xk);Bze=r(BVr,"FunnelConfig"),BVr.forEach(t),Ize=r(jCe," (Funnel Transformer model)"),jCe.forEach(t),qze=i(y),rm=n(y,"LI",{});var DCe=s(rm);Woe=n(DCe,"STRONG",{});var IVr=s(Woe);Nze=r(IVr,"glpn"),IVr.forEach(t),jze=r(DCe," \u2014 "),$k=n(DCe,"A",{href:!0});var qVr=s($k);Dze=r(qVr,"GLPNConfig"),qVr.forEach(t),Gze=r(DCe," (GLPN model)"),DCe.forEach(t),Oze=i(y),tm=n(y,"LI",{});var GCe=s(tm);Qoe=n(GCe,"STRONG",{});var NVr=s(Qoe);Vze=r(NVr,"gpt2"),NVr.forEach(t),Xze=r(GCe," \u2014 "),kk=n(GCe,"A",{href:!0});var jVr=s(kk);zze=r(jVr,"GPT2Config"),jVr.forEach(t),Wze=r(GCe," (OpenAI GPT-2 model)"),GCe.forEach(t),Qze=i(y),am=n(y,"LI",{});var OCe=s(am);Hoe=n(OCe,"STRONG",{});var DVr=s(Hoe);Hze=r(DVr,"gpt_neo"),DVr.forEach(t),Uze=r(OCe," \u2014 "),Sk=n(OCe,"A",{href:!0});var GVr=s(Sk);Jze=r(GVr,"GPTNeoConfig"),GVr.forEach(t),Yze=r(OCe," (GPT Neo model)"),OCe.forEach(t),Kze=i(y),nm=n(y,"LI",{});var VCe=s(nm);Uoe=n(VCe,"STRONG",{});var OVr=s(Uoe);Zze=r(OVr,"gptj"),OVr.forEach(t),eWe=r(VCe," \u2014 "),Rk=n(VCe,"A",{href:!0});var VVr=s(Rk);oWe=r(VVr,"GPTJConfig"),VVr.forEach(t),rWe=r(VCe," (GPT-J model)"),VCe.forEach(t),tWe=i(y),sm=n(y,"LI",{});var XCe=s(sm);Joe=n(XCe,"STRONG",{});var XVr=s(Joe);aWe=r(XVr,"hubert"),XVr.forEach(t),nWe=r(XCe," \u2014 "),Pk=n(XCe,"A",{href:!0});var zVr=s(Pk);sWe=r(zVr,"HubertConfig"),zVr.forEach(t),lWe=r(XCe," (Hubert model)"),XCe.forEach(t),iWe=i(y),lm=n(y,"LI",{});var zCe=s(lm);Yoe=n(zCe,"STRONG",{});var WVr=s(Yoe);dWe=r(WVr,"ibert"),WVr.forEach(t),cWe=r(zCe," \u2014 "),Bk=n(zCe,"A",{href:!0});var QVr=s(Bk);fWe=r(QVr,"IBertConfig"),QVr.forEach(t),mWe=r(zCe," (I-BERT model)"),zCe.forEach(t),gWe=i(y),im=n(y,"LI",{});var WCe=s(im);Koe=n(WCe,"STRONG",{});var HVr=s(Koe);hWe=r(HVr,"imagegpt"),HVr.forEach(t),pWe=r(WCe," \u2014 "),Ik=n(WCe,"A",{href:!0});var UVr=s(Ik);uWe=r(UVr,"ImageGPTConfig"),UVr.forEach(t),_We=r(WCe," (ImageGPT model)"),WCe.forEach(t),bWe=i(y),dm=n(y,"LI",{});var QCe=s(dm);Zoe=n(QCe,"STRONG",{});var JVr=s(Zoe);vWe=r(JVr,"layoutlm"),JVr.forEach(t),FWe=r(QCe," \u2014 "),qk=n(QCe,"A",{href:!0});var YVr=s(qk);TWe=r(YVr,"LayoutLMConfig"),YVr.forEach(t),MWe=r(QCe," (LayoutLM model)"),QCe.forEach(t),EWe=i(y),cm=n(y,"LI",{});var HCe=s(cm);ere=n(HCe,"STRONG",{});var KVr=s(ere);CWe=r(KVr,"layoutlmv2"),KVr.forEach(t),wWe=r(HCe," \u2014 "),Nk=n(HCe,"A",{href:!0});var ZVr=s(Nk);AWe=r(ZVr,"LayoutLMv2Config"),ZVr.forEach(t),yWe=r(HCe," (LayoutLMv2 model)"),HCe.forEach(t),LWe=i(y),fm=n(y,"LI",{});var UCe=s(fm);ore=n(UCe,"STRONG",{});var eXr=s(ore);xWe=r(eXr,"layoutlmv3"),eXr.forEach(t),$We=r(UCe," \u2014 "),jk=n(UCe,"A",{href:!0});var oXr=s(jk);kWe=r(oXr,"LayoutLMv3Config"),oXr.forEach(t),SWe=r(UCe," (LayoutLMv3 model)"),UCe.forEach(t),RWe=i(y),mm=n(y,"LI",{});var JCe=s(mm);rre=n(JCe,"STRONG",{});var rXr=s(rre);PWe=r(rXr,"led"),rXr.forEach(t),BWe=r(JCe," \u2014 "),Dk=n(JCe,"A",{href:!0});var tXr=s(Dk);IWe=r(tXr,"LEDConfig"),tXr.forEach(t),qWe=r(JCe," (LED model)"),JCe.forEach(t),NWe=i(y),gm=n(y,"LI",{});var YCe=s(gm);tre=n(YCe,"STRONG",{});var aXr=s(tre);jWe=r(aXr,"longformer"),aXr.forEach(t),DWe=r(YCe," \u2014 "),Gk=n(YCe,"A",{href:!0});var nXr=s(Gk);GWe=r(nXr,"LongformerConfig"),nXr.forEach(t),OWe=r(YCe," (Longformer model)"),YCe.forEach(t),VWe=i(y),hm=n(y,"LI",{});var KCe=s(hm);are=n(KCe,"STRONG",{});var sXr=s(are);XWe=r(sXr,"luke"),sXr.forEach(t),zWe=r(KCe," \u2014 "),Ok=n(KCe,"A",{href:!0});var lXr=s(Ok);WWe=r(lXr,"LukeConfig"),lXr.forEach(t),QWe=r(KCe," (LUKE model)"),KCe.forEach(t),HWe=i(y),pm=n(y,"LI",{});var ZCe=s(pm);nre=n(ZCe,"STRONG",{});var iXr=s(nre);UWe=r(iXr,"lxmert"),iXr.forEach(t),JWe=r(ZCe," \u2014 "),Vk=n(ZCe,"A",{href:!0});var dXr=s(Vk);YWe=r(dXr,"LxmertConfig"),dXr.forEach(t),KWe=r(ZCe," (LXMERT model)"),ZCe.forEach(t),ZWe=i(y),um=n(y,"LI",{});var e5e=s(um);sre=n(e5e,"STRONG",{});var cXr=s(sre);eQe=r(cXr,"m2m_100"),cXr.forEach(t),oQe=r(e5e," \u2014 "),Xk=n(e5e,"A",{href:!0});var fXr=s(Xk);rQe=r(fXr,"M2M100Config"),fXr.forEach(t),tQe=r(e5e," (M2M100 model)"),e5e.forEach(t),aQe=i(y),_m=n(y,"LI",{});var o5e=s(_m);lre=n(o5e,"STRONG",{});var mXr=s(lre);nQe=r(mXr,"marian"),mXr.forEach(t),sQe=r(o5e," \u2014 "),zk=n(o5e,"A",{href:!0});var gXr=s(zk);lQe=r(gXr,"MarianConfig"),gXr.forEach(t),iQe=r(o5e," (Marian model)"),o5e.forEach(t),dQe=i(y),bm=n(y,"LI",{});var r5e=s(bm);ire=n(r5e,"STRONG",{});var hXr=s(ire);cQe=r(hXr,"maskformer"),hXr.forEach(t),fQe=r(r5e," \u2014 "),Wk=n(r5e,"A",{href:!0});var pXr=s(Wk);mQe=r(pXr,"MaskFormerConfig"),pXr.forEach(t),gQe=r(r5e," (MaskFormer model)"),r5e.forEach(t),hQe=i(y),vm=n(y,"LI",{});var t5e=s(vm);dre=n(t5e,"STRONG",{});var uXr=s(dre);pQe=r(uXr,"mbart"),uXr.forEach(t),uQe=r(t5e," \u2014 "),Qk=n(t5e,"A",{href:!0});var _Xr=s(Qk);_Qe=r(_Xr,"MBartConfig"),_Xr.forEach(t),bQe=r(t5e," (mBART model)"),t5e.forEach(t),vQe=i(y),Fm=n(y,"LI",{});var a5e=s(Fm);cre=n(a5e,"STRONG",{});var bXr=s(cre);FQe=r(bXr,"megatron-bert"),bXr.forEach(t),TQe=r(a5e," \u2014 "),Hk=n(a5e,"A",{href:!0});var vXr=s(Hk);MQe=r(vXr,"MegatronBertConfig"),vXr.forEach(t),EQe=r(a5e," (MegatronBert model)"),a5e.forEach(t),CQe=i(y),Tm=n(y,"LI",{});var n5e=s(Tm);fre=n(n5e,"STRONG",{});var FXr=s(fre);wQe=r(FXr,"mobilebert"),FXr.forEach(t),AQe=r(n5e," \u2014 "),Uk=n(n5e,"A",{href:!0});var TXr=s(Uk);yQe=r(TXr,"MobileBertConfig"),TXr.forEach(t),LQe=r(n5e," (MobileBERT model)"),n5e.forEach(t),xQe=i(y),Mm=n(y,"LI",{});var s5e=s(Mm);mre=n(s5e,"STRONG",{});var MXr=s(mre);$Qe=r(MXr,"mpnet"),MXr.forEach(t),kQe=r(s5e," \u2014 "),Jk=n(s5e,"A",{href:!0});var EXr=s(Jk);SQe=r(EXr,"MPNetConfig"),EXr.forEach(t),RQe=r(s5e," (MPNet model)"),s5e.forEach(t),PQe=i(y),Em=n(y,"LI",{});var l5e=s(Em);gre=n(l5e,"STRONG",{});var CXr=s(gre);BQe=r(CXr,"mt5"),CXr.forEach(t),IQe=r(l5e," \u2014 "),Yk=n(l5e,"A",{href:!0});var wXr=s(Yk);qQe=r(wXr,"MT5Config"),wXr.forEach(t),NQe=r(l5e," (mT5 model)"),l5e.forEach(t),jQe=i(y),Cm=n(y,"LI",{});var i5e=s(Cm);hre=n(i5e,"STRONG",{});var AXr=s(hre);DQe=r(AXr,"nystromformer"),AXr.forEach(t),GQe=r(i5e," \u2014 "),Kk=n(i5e,"A",{href:!0});var yXr=s(Kk);OQe=r(yXr,"NystromformerConfig"),yXr.forEach(t),VQe=r(i5e," (Nystromformer model)"),i5e.forEach(t),XQe=i(y),wm=n(y,"LI",{});var d5e=s(wm);pre=n(d5e,"STRONG",{});var LXr=s(pre);zQe=r(LXr,"openai-gpt"),LXr.forEach(t),WQe=r(d5e," \u2014 "),Zk=n(d5e,"A",{href:!0});var xXr=s(Zk);QQe=r(xXr,"OpenAIGPTConfig"),xXr.forEach(t),HQe=r(d5e," (OpenAI GPT model)"),d5e.forEach(t),UQe=i(y),Am=n(y,"LI",{});var c5e=s(Am);ure=n(c5e,"STRONG",{});var $Xr=s(ure);JQe=r($Xr,"opt"),$Xr.forEach(t),YQe=r(c5e," \u2014 "),eS=n(c5e,"A",{href:!0});var kXr=s(eS);KQe=r(kXr,"OPTConfig"),kXr.forEach(t),ZQe=r(c5e," (OPT model)"),c5e.forEach(t),eHe=i(y),ym=n(y,"LI",{});var f5e=s(ym);_re=n(f5e,"STRONG",{});var SXr=s(_re);oHe=r(SXr,"pegasus"),SXr.forEach(t),rHe=r(f5e," \u2014 "),oS=n(f5e,"A",{href:!0});var RXr=s(oS);tHe=r(RXr,"PegasusConfig"),RXr.forEach(t),aHe=r(f5e," (Pegasus model)"),f5e.forEach(t),nHe=i(y),Lm=n(y,"LI",{});var m5e=s(Lm);bre=n(m5e,"STRONG",{});var PXr=s(bre);sHe=r(PXr,"perceiver"),PXr.forEach(t),lHe=r(m5e," \u2014 "),rS=n(m5e,"A",{href:!0});var BXr=s(rS);iHe=r(BXr,"PerceiverConfig"),BXr.forEach(t),dHe=r(m5e," (Perceiver model)"),m5e.forEach(t),cHe=i(y),xm=n(y,"LI",{});var g5e=s(xm);vre=n(g5e,"STRONG",{});var IXr=s(vre);fHe=r(IXr,"plbart"),IXr.forEach(t),mHe=r(g5e," \u2014 "),tS=n(g5e,"A",{href:!0});var qXr=s(tS);gHe=r(qXr,"PLBartConfig"),qXr.forEach(t),hHe=r(g5e," (PLBart model)"),g5e.forEach(t),pHe=i(y),$m=n(y,"LI",{});var h5e=s($m);Fre=n(h5e,"STRONG",{});var NXr=s(Fre);uHe=r(NXr,"poolformer"),NXr.forEach(t),_He=r(h5e," \u2014 "),aS=n(h5e,"A",{href:!0});var jXr=s(aS);bHe=r(jXr,"PoolFormerConfig"),jXr.forEach(t),vHe=r(h5e," (PoolFormer model)"),h5e.forEach(t),FHe=i(y),km=n(y,"LI",{});var p5e=s(km);Tre=n(p5e,"STRONG",{});var DXr=s(Tre);THe=r(DXr,"prophetnet"),DXr.forEach(t),MHe=r(p5e," \u2014 "),nS=n(p5e,"A",{href:!0});var GXr=s(nS);EHe=r(GXr,"ProphetNetConfig"),GXr.forEach(t),CHe=r(p5e," (ProphetNet model)"),p5e.forEach(t),wHe=i(y),Sm=n(y,"LI",{});var u5e=s(Sm);Mre=n(u5e,"STRONG",{});var OXr=s(Mre);AHe=r(OXr,"qdqbert"),OXr.forEach(t),yHe=r(u5e," \u2014 "),sS=n(u5e,"A",{href:!0});var VXr=s(sS);LHe=r(VXr,"QDQBertConfig"),VXr.forEach(t),xHe=r(u5e," (QDQBert model)"),u5e.forEach(t),$He=i(y),Rm=n(y,"LI",{});var _5e=s(Rm);Ere=n(_5e,"STRONG",{});var XXr=s(Ere);kHe=r(XXr,"rag"),XXr.forEach(t),SHe=r(_5e," \u2014 "),lS=n(_5e,"A",{href:!0});var zXr=s(lS);RHe=r(zXr,"RagConfig"),zXr.forEach(t),PHe=r(_5e," (RAG model)"),_5e.forEach(t),BHe=i(y),Pm=n(y,"LI",{});var b5e=s(Pm);Cre=n(b5e,"STRONG",{});var WXr=s(Cre);IHe=r(WXr,"realm"),WXr.forEach(t),qHe=r(b5e," \u2014 "),iS=n(b5e,"A",{href:!0});var QXr=s(iS);NHe=r(QXr,"RealmConfig"),QXr.forEach(t),jHe=r(b5e," (Realm model)"),b5e.forEach(t),DHe=i(y),Bm=n(y,"LI",{});var v5e=s(Bm);wre=n(v5e,"STRONG",{});var HXr=s(wre);GHe=r(HXr,"reformer"),HXr.forEach(t),OHe=r(v5e," \u2014 "),dS=n(v5e,"A",{href:!0});var UXr=s(dS);VHe=r(UXr,"ReformerConfig"),UXr.forEach(t),XHe=r(v5e," (Reformer model)"),v5e.forEach(t),zHe=i(y),Im=n(y,"LI",{});var F5e=s(Im);Are=n(F5e,"STRONG",{});var JXr=s(Are);WHe=r(JXr,"regnet"),JXr.forEach(t),QHe=r(F5e," \u2014 "),cS=n(F5e,"A",{href:!0});var YXr=s(cS);HHe=r(YXr,"RegNetConfig"),YXr.forEach(t),UHe=r(F5e," (RegNet model)"),F5e.forEach(t),JHe=i(y),qm=n(y,"LI",{});var T5e=s(qm);yre=n(T5e,"STRONG",{});var KXr=s(yre);YHe=r(KXr,"rembert"),KXr.forEach(t),KHe=r(T5e," \u2014 "),fS=n(T5e,"A",{href:!0});var ZXr=s(fS);ZHe=r(ZXr,"RemBertConfig"),ZXr.forEach(t),eUe=r(T5e," (RemBERT model)"),T5e.forEach(t),oUe=i(y),Nm=n(y,"LI",{});var M5e=s(Nm);Lre=n(M5e,"STRONG",{});var ezr=s(Lre);rUe=r(ezr,"resnet"),ezr.forEach(t),tUe=r(M5e," \u2014 "),mS=n(M5e,"A",{href:!0});var ozr=s(mS);aUe=r(ozr,"ResNetConfig"),ozr.forEach(t),nUe=r(M5e," (ResNet model)"),M5e.forEach(t),sUe=i(y),jm=n(y,"LI",{});var E5e=s(jm);xre=n(E5e,"STRONG",{});var rzr=s(xre);lUe=r(rzr,"retribert"),rzr.forEach(t),iUe=r(E5e," \u2014 "),gS=n(E5e,"A",{href:!0});var tzr=s(gS);dUe=r(tzr,"RetriBertConfig"),tzr.forEach(t),cUe=r(E5e," (RetriBERT model)"),E5e.forEach(t),fUe=i(y),Dm=n(y,"LI",{});var C5e=s(Dm);$re=n(C5e,"STRONG",{});var azr=s($re);mUe=r(azr,"roberta"),azr.forEach(t),gUe=r(C5e," \u2014 "),hS=n(C5e,"A",{href:!0});var nzr=s(hS);hUe=r(nzr,"RobertaConfig"),nzr.forEach(t),pUe=r(C5e," (RoBERTa model)"),C5e.forEach(t),uUe=i(y),Gm=n(y,"LI",{});var w5e=s(Gm);kre=n(w5e,"STRONG",{});var szr=s(kre);_Ue=r(szr,"roformer"),szr.forEach(t),bUe=r(w5e," \u2014 "),pS=n(w5e,"A",{href:!0});var lzr=s(pS);vUe=r(lzr,"RoFormerConfig"),lzr.forEach(t),FUe=r(w5e," (RoFormer model)"),w5e.forEach(t),TUe=i(y),Om=n(y,"LI",{});var A5e=s(Om);Sre=n(A5e,"STRONG",{});var izr=s(Sre);MUe=r(izr,"segformer"),izr.forEach(t),EUe=r(A5e," \u2014 "),uS=n(A5e,"A",{href:!0});var dzr=s(uS);CUe=r(dzr,"SegformerConfig"),dzr.forEach(t),wUe=r(A5e," (SegFormer model)"),A5e.forEach(t),AUe=i(y),Vm=n(y,"LI",{});var y5e=s(Vm);Rre=n(y5e,"STRONG",{});var czr=s(Rre);yUe=r(czr,"sew"),czr.forEach(t),LUe=r(y5e," \u2014 "),_S=n(y5e,"A",{href:!0});var fzr=s(_S);xUe=r(fzr,"SEWConfig"),fzr.forEach(t),$Ue=r(y5e," (SEW model)"),y5e.forEach(t),kUe=i(y),Xm=n(y,"LI",{});var L5e=s(Xm);Pre=n(L5e,"STRONG",{});var mzr=s(Pre);SUe=r(mzr,"sew-d"),mzr.forEach(t),RUe=r(L5e," \u2014 "),bS=n(L5e,"A",{href:!0});var gzr=s(bS);PUe=r(gzr,"SEWDConfig"),gzr.forEach(t),BUe=r(L5e," (SEW-D model)"),L5e.forEach(t),IUe=i(y),zm=n(y,"LI",{});var x5e=s(zm);Bre=n(x5e,"STRONG",{});var hzr=s(Bre);qUe=r(hzr,"speech-encoder-decoder"),hzr.forEach(t),NUe=r(x5e," \u2014 "),vS=n(x5e,"A",{href:!0});var pzr=s(vS);jUe=r(pzr,"SpeechEncoderDecoderConfig"),pzr.forEach(t),DUe=r(x5e," (Speech Encoder decoder model)"),x5e.forEach(t),GUe=i(y),Wm=n(y,"LI",{});var $5e=s(Wm);Ire=n($5e,"STRONG",{});var uzr=s(Ire);OUe=r(uzr,"speech_to_text"),uzr.forEach(t),VUe=r($5e," \u2014 "),FS=n($5e,"A",{href:!0});var _zr=s(FS);XUe=r(_zr,"Speech2TextConfig"),_zr.forEach(t),zUe=r($5e," (Speech2Text model)"),$5e.forEach(t),WUe=i(y),Qm=n(y,"LI",{});var k5e=s(Qm);qre=n(k5e,"STRONG",{});var bzr=s(qre);QUe=r(bzr,"speech_to_text_2"),bzr.forEach(t),HUe=r(k5e," \u2014 "),TS=n(k5e,"A",{href:!0});var vzr=s(TS);UUe=r(vzr,"Speech2Text2Config"),vzr.forEach(t),JUe=r(k5e," (Speech2Text2 model)"),k5e.forEach(t),YUe=i(y),Hm=n(y,"LI",{});var S5e=s(Hm);Nre=n(S5e,"STRONG",{});var Fzr=s(Nre);KUe=r(Fzr,"splinter"),Fzr.forEach(t),ZUe=r(S5e," \u2014 "),MS=n(S5e,"A",{href:!0});var Tzr=s(MS);eJe=r(Tzr,"SplinterConfig"),Tzr.forEach(t),oJe=r(S5e," (Splinter model)"),S5e.forEach(t),rJe=i(y),Um=n(y,"LI",{});var R5e=s(Um);jre=n(R5e,"STRONG",{});var Mzr=s(jre);tJe=r(Mzr,"squeezebert"),Mzr.forEach(t),aJe=r(R5e," \u2014 "),ES=n(R5e,"A",{href:!0});var Ezr=s(ES);nJe=r(Ezr,"SqueezeBertConfig"),Ezr.forEach(t),sJe=r(R5e," (SqueezeBERT model)"),R5e.forEach(t),lJe=i(y),Jm=n(y,"LI",{});var P5e=s(Jm);Dre=n(P5e,"STRONG",{});var Czr=s(Dre);iJe=r(Czr,"swin"),Czr.forEach(t),dJe=r(P5e," \u2014 "),CS=n(P5e,"A",{href:!0});var wzr=s(CS);cJe=r(wzr,"SwinConfig"),wzr.forEach(t),fJe=r(P5e," (Swin model)"),P5e.forEach(t),mJe=i(y),Ym=n(y,"LI",{});var B5e=s(Ym);Gre=n(B5e,"STRONG",{});var Azr=s(Gre);gJe=r(Azr,"t5"),Azr.forEach(t),hJe=r(B5e," \u2014 "),wS=n(B5e,"A",{href:!0});var yzr=s(wS);pJe=r(yzr,"T5Config"),yzr.forEach(t),uJe=r(B5e," (T5 model)"),B5e.forEach(t),_Je=i(y),Km=n(y,"LI",{});var I5e=s(Km);Ore=n(I5e,"STRONG",{});var Lzr=s(Ore);bJe=r(Lzr,"tapas"),Lzr.forEach(t),vJe=r(I5e," \u2014 "),AS=n(I5e,"A",{href:!0});var xzr=s(AS);FJe=r(xzr,"TapasConfig"),xzr.forEach(t),TJe=r(I5e," (TAPAS model)"),I5e.forEach(t),MJe=i(y),Zm=n(y,"LI",{});var q5e=s(Zm);Vre=n(q5e,"STRONG",{});var $zr=s(Vre);EJe=r($zr,"trajectory_transformer"),$zr.forEach(t),CJe=r(q5e," \u2014 "),yS=n(q5e,"A",{href:!0});var kzr=s(yS);wJe=r(kzr,"TrajectoryTransformerConfig"),kzr.forEach(t),AJe=r(q5e," (Trajectory Transformer model)"),q5e.forEach(t),yJe=i(y),eg=n(y,"LI",{});var N5e=s(eg);Xre=n(N5e,"STRONG",{});var Szr=s(Xre);LJe=r(Szr,"transfo-xl"),Szr.forEach(t),xJe=r(N5e," \u2014 "),LS=n(N5e,"A",{href:!0});var Rzr=s(LS);$Je=r(Rzr,"TransfoXLConfig"),Rzr.forEach(t),kJe=r(N5e," (Transformer-XL model)"),N5e.forEach(t),SJe=i(y),og=n(y,"LI",{});var j5e=s(og);zre=n(j5e,"STRONG",{});var Pzr=s(zre);RJe=r(Pzr,"trocr"),Pzr.forEach(t),PJe=r(j5e," \u2014 "),xS=n(j5e,"A",{href:!0});var Bzr=s(xS);BJe=r(Bzr,"TrOCRConfig"),Bzr.forEach(t),IJe=r(j5e," (TrOCR model)"),j5e.forEach(t),qJe=i(y),rg=n(y,"LI",{});var D5e=s(rg);Wre=n(D5e,"STRONG",{});var Izr=s(Wre);NJe=r(Izr,"unispeech"),Izr.forEach(t),jJe=r(D5e," \u2014 "),$S=n(D5e,"A",{href:!0});var qzr=s($S);DJe=r(qzr,"UniSpeechConfig"),qzr.forEach(t),GJe=r(D5e," (UniSpeech model)"),D5e.forEach(t),OJe=i(y),tg=n(y,"LI",{});var G5e=s(tg);Qre=n(G5e,"STRONG",{});var Nzr=s(Qre);VJe=r(Nzr,"unispeech-sat"),Nzr.forEach(t),XJe=r(G5e," \u2014 "),kS=n(G5e,"A",{href:!0});var jzr=s(kS);zJe=r(jzr,"UniSpeechSatConfig"),jzr.forEach(t),WJe=r(G5e," (UniSpeechSat model)"),G5e.forEach(t),QJe=i(y),ag=n(y,"LI",{});var O5e=s(ag);Hre=n(O5e,"STRONG",{});var Dzr=s(Hre);HJe=r(Dzr,"van"),Dzr.forEach(t),UJe=r(O5e," \u2014 "),SS=n(O5e,"A",{href:!0});var Gzr=s(SS);JJe=r(Gzr,"VanConfig"),Gzr.forEach(t),YJe=r(O5e," (VAN model)"),O5e.forEach(t),KJe=i(y),ng=n(y,"LI",{});var V5e=s(ng);Ure=n(V5e,"STRONG",{});var Ozr=s(Ure);ZJe=r(Ozr,"vilt"),Ozr.forEach(t),eYe=r(V5e," \u2014 "),RS=n(V5e,"A",{href:!0});var Vzr=s(RS);oYe=r(Vzr,"ViltConfig"),Vzr.forEach(t),rYe=r(V5e," (ViLT model)"),V5e.forEach(t),tYe=i(y),sg=n(y,"LI",{});var X5e=s(sg);Jre=n(X5e,"STRONG",{});var Xzr=s(Jre);aYe=r(Xzr,"vision-encoder-decoder"),Xzr.forEach(t),nYe=r(X5e," \u2014 "),PS=n(X5e,"A",{href:!0});var zzr=s(PS);sYe=r(zzr,"VisionEncoderDecoderConfig"),zzr.forEach(t),lYe=r(X5e," (Vision Encoder decoder model)"),X5e.forEach(t),iYe=i(y),lg=n(y,"LI",{});var z5e=s(lg);Yre=n(z5e,"STRONG",{});var Wzr=s(Yre);dYe=r(Wzr,"vision-text-dual-encoder"),Wzr.forEach(t),cYe=r(z5e," \u2014 "),BS=n(z5e,"A",{href:!0});var Qzr=s(BS);fYe=r(Qzr,"VisionTextDualEncoderConfig"),Qzr.forEach(t),mYe=r(z5e," (VisionTextDualEncoder model)"),z5e.forEach(t),gYe=i(y),ig=n(y,"LI",{});var W5e=s(ig);Kre=n(W5e,"STRONG",{});var Hzr=s(Kre);hYe=r(Hzr,"visual_bert"),Hzr.forEach(t),pYe=r(W5e," \u2014 "),IS=n(W5e,"A",{href:!0});var Uzr=s(IS);uYe=r(Uzr,"VisualBertConfig"),Uzr.forEach(t),_Ye=r(W5e," (VisualBert model)"),W5e.forEach(t),bYe=i(y),dg=n(y,"LI",{});var Q5e=s(dg);Zre=n(Q5e,"STRONG",{});var Jzr=s(Zre);vYe=r(Jzr,"vit"),Jzr.forEach(t),FYe=r(Q5e," \u2014 "),qS=n(Q5e,"A",{href:!0});var Yzr=s(qS);TYe=r(Yzr,"ViTConfig"),Yzr.forEach(t),MYe=r(Q5e," (ViT model)"),Q5e.forEach(t),EYe=i(y),cg=n(y,"LI",{});var H5e=s(cg);ete=n(H5e,"STRONG",{});var Kzr=s(ete);CYe=r(Kzr,"vit_mae"),Kzr.forEach(t),wYe=r(H5e," \u2014 "),NS=n(H5e,"A",{href:!0});var Zzr=s(NS);AYe=r(Zzr,"ViTMAEConfig"),Zzr.forEach(t),yYe=r(H5e," (ViTMAE model)"),H5e.forEach(t),LYe=i(y),fg=n(y,"LI",{});var U5e=s(fg);ote=n(U5e,"STRONG",{});var eWr=s(ote);xYe=r(eWr,"wav2vec2"),eWr.forEach(t),$Ye=r(U5e," \u2014 "),jS=n(U5e,"A",{href:!0});var oWr=s(jS);kYe=r(oWr,"Wav2Vec2Config"),oWr.forEach(t),SYe=r(U5e," (Wav2Vec2 model)"),U5e.forEach(t),RYe=i(y),mg=n(y,"LI",{});var J5e=s(mg);rte=n(J5e,"STRONG",{});var rWr=s(rte);PYe=r(rWr,"wav2vec2-conformer"),rWr.forEach(t),BYe=r(J5e," \u2014 "),DS=n(J5e,"A",{href:!0});var tWr=s(DS);IYe=r(tWr,"Wav2Vec2ConformerConfig"),tWr.forEach(t),qYe=r(J5e," (Wav2Vec2-Conformer model)"),J5e.forEach(t),NYe=i(y),gg=n(y,"LI",{});var Y5e=s(gg);tte=n(Y5e,"STRONG",{});var aWr=s(tte);jYe=r(aWr,"wavlm"),aWr.forEach(t),DYe=r(Y5e," \u2014 "),GS=n(Y5e,"A",{href:!0});var nWr=s(GS);GYe=r(nWr,"WavLMConfig"),nWr.forEach(t),OYe=r(Y5e," (WavLM model)"),Y5e.forEach(t),VYe=i(y),hg=n(y,"LI",{});var K5e=s(hg);ate=n(K5e,"STRONG",{});var sWr=s(ate);XYe=r(sWr,"xglm"),sWr.forEach(t),zYe=r(K5e," \u2014 "),OS=n(K5e,"A",{href:!0});var lWr=s(OS);WYe=r(lWr,"XGLMConfig"),lWr.forEach(t),QYe=r(K5e," (XGLM model)"),K5e.forEach(t),HYe=i(y),pg=n(y,"LI",{});var Z5e=s(pg);nte=n(Z5e,"STRONG",{});var iWr=s(nte);UYe=r(iWr,"xlm"),iWr.forEach(t),JYe=r(Z5e," \u2014 "),VS=n(Z5e,"A",{href:!0});var dWr=s(VS);YYe=r(dWr,"XLMConfig"),dWr.forEach(t),KYe=r(Z5e," (XLM model)"),Z5e.forEach(t),ZYe=i(y),ug=n(y,"LI",{});var ewe=s(ug);ste=n(ewe,"STRONG",{});var cWr=s(ste);eKe=r(cWr,"xlm-prophetnet"),cWr.forEach(t),oKe=r(ewe," \u2014 "),XS=n(ewe,"A",{href:!0});var fWr=s(XS);rKe=r(fWr,"XLMProphetNetConfig"),fWr.forEach(t),tKe=r(ewe," (XLMProphetNet model)"),ewe.forEach(t),aKe=i(y),_g=n(y,"LI",{});var owe=s(_g);lte=n(owe,"STRONG",{});var mWr=s(lte);nKe=r(mWr,"xlm-roberta"),mWr.forEach(t),sKe=r(owe," \u2014 "),zS=n(owe,"A",{href:!0});var gWr=s(zS);lKe=r(gWr,"XLMRobertaConfig"),gWr.forEach(t),iKe=r(owe," (XLM-RoBERTa model)"),owe.forEach(t),dKe=i(y),bg=n(y,"LI",{});var rwe=s(bg);ite=n(rwe,"STRONG",{});var hWr=s(ite);cKe=r(hWr,"xlm-roberta-xl"),hWr.forEach(t),fKe=r(rwe," \u2014 "),WS=n(rwe,"A",{href:!0});var pWr=s(WS);mKe=r(pWr,"XLMRobertaXLConfig"),pWr.forEach(t),gKe=r(rwe," (XLM-RoBERTa-XL model)"),rwe.forEach(t),hKe=i(y),vg=n(y,"LI",{});var twe=s(vg);dte=n(twe,"STRONG",{});var uWr=s(dte);pKe=r(uWr,"xlnet"),uWr.forEach(t),uKe=r(twe," \u2014 "),QS=n(twe,"A",{href:!0});var _Wr=s(QS);_Ke=r(_Wr,"XLNetConfig"),_Wr.forEach(t),bKe=r(twe," (XLNet model)"),twe.forEach(t),vKe=i(y),Fg=n(y,"LI",{});var awe=s(Fg);cte=n(awe,"STRONG",{});var bWr=s(cte);FKe=r(bWr,"yolos"),bWr.forEach(t),TKe=r(awe," \u2014 "),HS=n(awe,"A",{href:!0});var vWr=s(HS);MKe=r(vWr,"YolosConfig"),vWr.forEach(t),EKe=r(awe," (YOLOS model)"),awe.forEach(t),CKe=i(y),Tg=n(y,"LI",{});var nwe=s(Tg);fte=n(nwe,"STRONG",{});var FWr=s(fte);wKe=r(FWr,"yoso"),FWr.forEach(t),AKe=r(nwe," \u2014 "),US=n(nwe,"A",{href:!0});var TWr=s(US);yKe=r(TWr,"YosoConfig"),TWr.forEach(t),LKe=r(nwe," (YOSO model)"),nwe.forEach(t),y.forEach(t),xKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),$Ke=i(et),Eg=n(et,"DIV",{class:!0});var Hje=s(Eg);T(SA.$$.fragment,Hje),kKe=i(Hje),mte=n(Hje,"P",{});var MWr=s(mte);SKe=r(MWr,"Register a new configuration for this class."),MWr.forEach(t),Hje.forEach(t),et.forEach(t),Yqe=i(f),Ti=n(f,"H2",{class:!0});var Uje=s(Ti);Cg=n(Uje,"A",{id:!0,class:!0,href:!0});var EWr=s(Cg);gte=n(EWr,"SPAN",{});var CWr=s(gte);T(RA.$$.fragment,CWr),CWr.forEach(t),EWr.forEach(t),RKe=i(Uje),hte=n(Uje,"SPAN",{});var wWr=s(hte);PKe=r(wWr,"AutoTokenizer"),wWr.forEach(t),Uje.forEach(t),Kqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(PA.$$.fragment,qs),BKe=i(qs),BA=n(qs,"P",{});var Jje=s(BA);IKe=r(Jje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JS=n(Jje,"A",{href:!0});var AWr=s(JS);qKe=r(AWr,"AutoTokenizer.from_pretrained()"),AWr.forEach(t),NKe=r(Jje," class method."),Jje.forEach(t),jKe=i(qs),IA=n(qs,"P",{});var Yje=s(IA);DKe=r(Yje,"This class cannot be instantiated directly using "),pte=n(Yje,"CODE",{});var yWr=s(pte);GKe=r(yWr,"__init__()"),yWr.forEach(t),OKe=r(Yje," (throws an error)."),Yje.forEach(t),VKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(qA.$$.fragment,Ns),XKe=i(Ns),ute=n(Ns,"P",{});var LWr=s(ute);zKe=r(LWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LWr.forEach(t),WKe=i(Ns),Aa=n(Ns,"P",{});var yw=s(Aa);QKe=r(yw,"The tokenizer class to instantiate is selected based on the "),_te=n(yw,"CODE",{});var xWr=s(_te);HKe=r(xWr,"model_type"),xWr.forEach(t),UKe=r(yw,` property of the config object (either
passed as an argument or loaded from `),bte=n(yw,"CODE",{});var $Wr=s(bte);JKe=r($Wr,"pretrained_model_name_or_path"),$Wr.forEach(t),YKe=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vte=n(yw,"CODE",{});var kWr=s(vte);KKe=r(kWr,"pretrained_model_name_or_path"),kWr.forEach(t),ZKe=r(yw,":"),yw.forEach(t),eZe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Nx=s(Sn);Fte=n(Nx,"STRONG",{});var SWr=s(Fte);oZe=r(SWr,"albert"),SWr.forEach(t),rZe=r(Nx," \u2014 "),YS=n(Nx,"A",{href:!0});var RWr=s(YS);tZe=r(RWr,"AlbertTokenizer"),RWr.forEach(t),aZe=r(Nx," or "),KS=n(Nx,"A",{href:!0});var PWr=s(KS);nZe=r(PWr,"AlbertTokenizerFast"),PWr.forEach(t),sZe=r(Nx," (ALBERT model)"),Nx.forEach(t),lZe=i(S),Rn=n(S,"LI",{});var jx=s(Rn);Tte=n(jx,"STRONG",{});var BWr=s(Tte);iZe=r(BWr,"bart"),BWr.forEach(t),dZe=r(jx," \u2014 "),ZS=n(jx,"A",{href:!0});var IWr=s(ZS);cZe=r(IWr,"BartTokenizer"),IWr.forEach(t),fZe=r(jx," or "),eR=n(jx,"A",{href:!0});var qWr=s(eR);mZe=r(qWr,"BartTokenizerFast"),qWr.forEach(t),gZe=r(jx," (BART model)"),jx.forEach(t),hZe=i(S),Pn=n(S,"LI",{});var Dx=s(Pn);Mte=n(Dx,"STRONG",{});var NWr=s(Mte);pZe=r(NWr,"barthez"),NWr.forEach(t),uZe=r(Dx," \u2014 "),oR=n(Dx,"A",{href:!0});var jWr=s(oR);_Ze=r(jWr,"BarthezTokenizer"),jWr.forEach(t),bZe=r(Dx," or "),rR=n(Dx,"A",{href:!0});var DWr=s(rR);vZe=r(DWr,"BarthezTokenizerFast"),DWr.forEach(t),FZe=r(Dx," (BARThez model)"),Dx.forEach(t),TZe=i(S),wg=n(S,"LI",{});var swe=s(wg);Ete=n(swe,"STRONG",{});var GWr=s(Ete);MZe=r(GWr,"bartpho"),GWr.forEach(t),EZe=r(swe," \u2014 "),tR=n(swe,"A",{href:!0});var OWr=s(tR);CZe=r(OWr,"BartphoTokenizer"),OWr.forEach(t),wZe=r(swe," (BARTpho model)"),swe.forEach(t),AZe=i(S),Bn=n(S,"LI",{});var Gx=s(Bn);Cte=n(Gx,"STRONG",{});var VWr=s(Cte);yZe=r(VWr,"bert"),VWr.forEach(t),LZe=r(Gx," \u2014 "),aR=n(Gx,"A",{href:!0});var XWr=s(aR);xZe=r(XWr,"BertTokenizer"),XWr.forEach(t),$Ze=r(Gx," or "),nR=n(Gx,"A",{href:!0});var zWr=s(nR);kZe=r(zWr,"BertTokenizerFast"),zWr.forEach(t),SZe=r(Gx," (BERT model)"),Gx.forEach(t),RZe=i(S),Ag=n(S,"LI",{});var lwe=s(Ag);wte=n(lwe,"STRONG",{});var WWr=s(wte);PZe=r(WWr,"bert-generation"),WWr.forEach(t),BZe=r(lwe," \u2014 "),sR=n(lwe,"A",{href:!0});var QWr=s(sR);IZe=r(QWr,"BertGenerationTokenizer"),QWr.forEach(t),qZe=r(lwe," (Bert Generation model)"),lwe.forEach(t),NZe=i(S),yg=n(S,"LI",{});var iwe=s(yg);Ate=n(iwe,"STRONG",{});var HWr=s(Ate);jZe=r(HWr,"bert-japanese"),HWr.forEach(t),DZe=r(iwe," \u2014 "),lR=n(iwe,"A",{href:!0});var UWr=s(lR);GZe=r(UWr,"BertJapaneseTokenizer"),UWr.forEach(t),OZe=r(iwe," (BertJapanese model)"),iwe.forEach(t),VZe=i(S),Lg=n(S,"LI",{});var dwe=s(Lg);yte=n(dwe,"STRONG",{});var JWr=s(yte);XZe=r(JWr,"bertweet"),JWr.forEach(t),zZe=r(dwe," \u2014 "),iR=n(dwe,"A",{href:!0});var YWr=s(iR);WZe=r(YWr,"BertweetTokenizer"),YWr.forEach(t),QZe=r(dwe," (Bertweet model)"),dwe.forEach(t),HZe=i(S),In=n(S,"LI",{});var Ox=s(In);Lte=n(Ox,"STRONG",{});var KWr=s(Lte);UZe=r(KWr,"big_bird"),KWr.forEach(t),JZe=r(Ox," \u2014 "),dR=n(Ox,"A",{href:!0});var ZWr=s(dR);YZe=r(ZWr,"BigBirdTokenizer"),ZWr.forEach(t),KZe=r(Ox," or "),cR=n(Ox,"A",{href:!0});var eQr=s(cR);ZZe=r(eQr,"BigBirdTokenizerFast"),eQr.forEach(t),eeo=r(Ox," (BigBird model)"),Ox.forEach(t),oeo=i(S),qn=n(S,"LI",{});var Vx=s(qn);xte=n(Vx,"STRONG",{});var oQr=s(xte);reo=r(oQr,"bigbird_pegasus"),oQr.forEach(t),teo=r(Vx," \u2014 "),fR=n(Vx,"A",{href:!0});var rQr=s(fR);aeo=r(rQr,"PegasusTokenizer"),rQr.forEach(t),neo=r(Vx," or "),mR=n(Vx,"A",{href:!0});var tQr=s(mR);seo=r(tQr,"PegasusTokenizerFast"),tQr.forEach(t),leo=r(Vx," (BigBirdPegasus model)"),Vx.forEach(t),ieo=i(S),Nn=n(S,"LI",{});var Xx=s(Nn);$te=n(Xx,"STRONG",{});var aQr=s($te);deo=r(aQr,"blenderbot"),aQr.forEach(t),ceo=r(Xx," \u2014 "),gR=n(Xx,"A",{href:!0});var nQr=s(gR);feo=r(nQr,"BlenderbotTokenizer"),nQr.forEach(t),meo=r(Xx," or "),hR=n(Xx,"A",{href:!0});var sQr=s(hR);geo=r(sQr,"BlenderbotTokenizerFast"),sQr.forEach(t),heo=r(Xx," (Blenderbot model)"),Xx.forEach(t),peo=i(S),xg=n(S,"LI",{});var cwe=s(xg);kte=n(cwe,"STRONG",{});var lQr=s(kte);ueo=r(lQr,"blenderbot-small"),lQr.forEach(t),_eo=r(cwe," \u2014 "),pR=n(cwe,"A",{href:!0});var iQr=s(pR);beo=r(iQr,"BlenderbotSmallTokenizer"),iQr.forEach(t),veo=r(cwe," (BlenderbotSmall model)"),cwe.forEach(t),Feo=i(S),$g=n(S,"LI",{});var fwe=s($g);Ste=n(fwe,"STRONG",{});var dQr=s(Ste);Teo=r(dQr,"byt5"),dQr.forEach(t),Meo=r(fwe," \u2014 "),uR=n(fwe,"A",{href:!0});var cQr=s(uR);Eeo=r(cQr,"ByT5Tokenizer"),cQr.forEach(t),Ceo=r(fwe," (ByT5 model)"),fwe.forEach(t),weo=i(S),jn=n(S,"LI",{});var zx=s(jn);Rte=n(zx,"STRONG",{});var fQr=s(Rte);Aeo=r(fQr,"camembert"),fQr.forEach(t),yeo=r(zx," \u2014 "),_R=n(zx,"A",{href:!0});var mQr=s(_R);Leo=r(mQr,"CamembertTokenizer"),mQr.forEach(t),xeo=r(zx," or "),bR=n(zx,"A",{href:!0});var gQr=s(bR);$eo=r(gQr,"CamembertTokenizerFast"),gQr.forEach(t),keo=r(zx," (CamemBERT model)"),zx.forEach(t),Seo=i(S),kg=n(S,"LI",{});var mwe=s(kg);Pte=n(mwe,"STRONG",{});var hQr=s(Pte);Reo=r(hQr,"canine"),hQr.forEach(t),Peo=r(mwe," \u2014 "),vR=n(mwe,"A",{href:!0});var pQr=s(vR);Beo=r(pQr,"CanineTokenizer"),pQr.forEach(t),Ieo=r(mwe," (Canine model)"),mwe.forEach(t),qeo=i(S),Dn=n(S,"LI",{});var Wx=s(Dn);Bte=n(Wx,"STRONG",{});var uQr=s(Bte);Neo=r(uQr,"clip"),uQr.forEach(t),jeo=r(Wx," \u2014 "),FR=n(Wx,"A",{href:!0});var _Qr=s(FR);Deo=r(_Qr,"CLIPTokenizer"),_Qr.forEach(t),Geo=r(Wx," or "),TR=n(Wx,"A",{href:!0});var bQr=s(TR);Oeo=r(bQr,"CLIPTokenizerFast"),bQr.forEach(t),Veo=r(Wx," (CLIP model)"),Wx.forEach(t),Xeo=i(S),Gn=n(S,"LI",{});var Qx=s(Gn);Ite=n(Qx,"STRONG",{});var vQr=s(Ite);zeo=r(vQr,"convbert"),vQr.forEach(t),Weo=r(Qx," \u2014 "),MR=n(Qx,"A",{href:!0});var FQr=s(MR);Qeo=r(FQr,"ConvBertTokenizer"),FQr.forEach(t),Heo=r(Qx," or "),ER=n(Qx,"A",{href:!0});var TQr=s(ER);Ueo=r(TQr,"ConvBertTokenizerFast"),TQr.forEach(t),Jeo=r(Qx," (ConvBERT model)"),Qx.forEach(t),Yeo=i(S),On=n(S,"LI",{});var Hx=s(On);qte=n(Hx,"STRONG",{});var MQr=s(qte);Keo=r(MQr,"cpm"),MQr.forEach(t),Zeo=r(Hx," \u2014 "),CR=n(Hx,"A",{href:!0});var EQr=s(CR);eoo=r(EQr,"CpmTokenizer"),EQr.forEach(t),ooo=r(Hx," or "),wR=n(Hx,"A",{href:!0});var CQr=s(wR);roo=r(CQr,"CpmTokenizerFast"),CQr.forEach(t),too=r(Hx," (CPM model)"),Hx.forEach(t),aoo=i(S),Sg=n(S,"LI",{});var gwe=s(Sg);Nte=n(gwe,"STRONG",{});var wQr=s(Nte);noo=r(wQr,"ctrl"),wQr.forEach(t),soo=r(gwe," \u2014 "),AR=n(gwe,"A",{href:!0});var AQr=s(AR);loo=r(AQr,"CTRLTokenizer"),AQr.forEach(t),ioo=r(gwe," (CTRL model)"),gwe.forEach(t),doo=i(S),Vn=n(S,"LI",{});var Ux=s(Vn);jte=n(Ux,"STRONG",{});var yQr=s(jte);coo=r(yQr,"data2vec-text"),yQr.forEach(t),foo=r(Ux," \u2014 "),yR=n(Ux,"A",{href:!0});var LQr=s(yR);moo=r(LQr,"RobertaTokenizer"),LQr.forEach(t),goo=r(Ux," or "),LR=n(Ux,"A",{href:!0});var xQr=s(LR);hoo=r(xQr,"RobertaTokenizerFast"),xQr.forEach(t),poo=r(Ux," (Data2VecText model)"),Ux.forEach(t),uoo=i(S),Xn=n(S,"LI",{});var Jx=s(Xn);Dte=n(Jx,"STRONG",{});var $Qr=s(Dte);_oo=r($Qr,"deberta"),$Qr.forEach(t),boo=r(Jx," \u2014 "),xR=n(Jx,"A",{href:!0});var kQr=s(xR);voo=r(kQr,"DebertaTokenizer"),kQr.forEach(t),Foo=r(Jx," or "),$R=n(Jx,"A",{href:!0});var SQr=s($R);Too=r(SQr,"DebertaTokenizerFast"),SQr.forEach(t),Moo=r(Jx," (DeBERTa model)"),Jx.forEach(t),Eoo=i(S),zn=n(S,"LI",{});var Yx=s(zn);Gte=n(Yx,"STRONG",{});var RQr=s(Gte);Coo=r(RQr,"deberta-v2"),RQr.forEach(t),woo=r(Yx," \u2014 "),kR=n(Yx,"A",{href:!0});var PQr=s(kR);Aoo=r(PQr,"DebertaV2Tokenizer"),PQr.forEach(t),yoo=r(Yx," or "),SR=n(Yx,"A",{href:!0});var BQr=s(SR);Loo=r(BQr,"DebertaV2TokenizerFast"),BQr.forEach(t),xoo=r(Yx," (DeBERTa-v2 model)"),Yx.forEach(t),$oo=i(S),Wn=n(S,"LI",{});var Kx=s(Wn);Ote=n(Kx,"STRONG",{});var IQr=s(Ote);koo=r(IQr,"distilbert"),IQr.forEach(t),Soo=r(Kx," \u2014 "),RR=n(Kx,"A",{href:!0});var qQr=s(RR);Roo=r(qQr,"DistilBertTokenizer"),qQr.forEach(t),Poo=r(Kx," or "),PR=n(Kx,"A",{href:!0});var NQr=s(PR);Boo=r(NQr,"DistilBertTokenizerFast"),NQr.forEach(t),Ioo=r(Kx," (DistilBERT model)"),Kx.forEach(t),qoo=i(S),Qn=n(S,"LI",{});var Zx=s(Qn);Vte=n(Zx,"STRONG",{});var jQr=s(Vte);Noo=r(jQr,"dpr"),jQr.forEach(t),joo=r(Zx," \u2014 "),BR=n(Zx,"A",{href:!0});var DQr=s(BR);Doo=r(DQr,"DPRQuestionEncoderTokenizer"),DQr.forEach(t),Goo=r(Zx," or "),IR=n(Zx,"A",{href:!0});var GQr=s(IR);Ooo=r(GQr,"DPRQuestionEncoderTokenizerFast"),GQr.forEach(t),Voo=r(Zx," (DPR model)"),Zx.forEach(t),Xoo=i(S),Hn=n(S,"LI",{});var e$=s(Hn);Xte=n(e$,"STRONG",{});var OQr=s(Xte);zoo=r(OQr,"electra"),OQr.forEach(t),Woo=r(e$," \u2014 "),qR=n(e$,"A",{href:!0});var VQr=s(qR);Qoo=r(VQr,"ElectraTokenizer"),VQr.forEach(t),Hoo=r(e$," or "),NR=n(e$,"A",{href:!0});var XQr=s(NR);Uoo=r(XQr,"ElectraTokenizerFast"),XQr.forEach(t),Joo=r(e$," (ELECTRA model)"),e$.forEach(t),Yoo=i(S),Rg=n(S,"LI",{});var hwe=s(Rg);zte=n(hwe,"STRONG",{});var zQr=s(zte);Koo=r(zQr,"flaubert"),zQr.forEach(t),Zoo=r(hwe," \u2014 "),jR=n(hwe,"A",{href:!0});var WQr=s(jR);ero=r(WQr,"FlaubertTokenizer"),WQr.forEach(t),oro=r(hwe," (FlauBERT model)"),hwe.forEach(t),rro=i(S),Un=n(S,"LI",{});var o$=s(Un);Wte=n(o$,"STRONG",{});var QQr=s(Wte);tro=r(QQr,"fnet"),QQr.forEach(t),aro=r(o$," \u2014 "),DR=n(o$,"A",{href:!0});var HQr=s(DR);nro=r(HQr,"FNetTokenizer"),HQr.forEach(t),sro=r(o$," or "),GR=n(o$,"A",{href:!0});var UQr=s(GR);lro=r(UQr,"FNetTokenizerFast"),UQr.forEach(t),iro=r(o$," (FNet model)"),o$.forEach(t),dro=i(S),Pg=n(S,"LI",{});var pwe=s(Pg);Qte=n(pwe,"STRONG",{});var JQr=s(Qte);cro=r(JQr,"fsmt"),JQr.forEach(t),fro=r(pwe," \u2014 "),OR=n(pwe,"A",{href:!0});var YQr=s(OR);mro=r(YQr,"FSMTTokenizer"),YQr.forEach(t),gro=r(pwe," (FairSeq Machine-Translation model)"),pwe.forEach(t),hro=i(S),Jn=n(S,"LI",{});var r$=s(Jn);Hte=n(r$,"STRONG",{});var KQr=s(Hte);pro=r(KQr,"funnel"),KQr.forEach(t),uro=r(r$," \u2014 "),VR=n(r$,"A",{href:!0});var ZQr=s(VR);_ro=r(ZQr,"FunnelTokenizer"),ZQr.forEach(t),bro=r(r$," or "),XR=n(r$,"A",{href:!0});var eHr=s(XR);vro=r(eHr,"FunnelTokenizerFast"),eHr.forEach(t),Fro=r(r$," (Funnel Transformer model)"),r$.forEach(t),Tro=i(S),Yn=n(S,"LI",{});var t$=s(Yn);Ute=n(t$,"STRONG",{});var oHr=s(Ute);Mro=r(oHr,"gpt2"),oHr.forEach(t),Ero=r(t$," \u2014 "),zR=n(t$,"A",{href:!0});var rHr=s(zR);Cro=r(rHr,"GPT2Tokenizer"),rHr.forEach(t),wro=r(t$," or "),WR=n(t$,"A",{href:!0});var tHr=s(WR);Aro=r(tHr,"GPT2TokenizerFast"),tHr.forEach(t),yro=r(t$," (OpenAI GPT-2 model)"),t$.forEach(t),Lro=i(S),Kn=n(S,"LI",{});var a$=s(Kn);Jte=n(a$,"STRONG",{});var aHr=s(Jte);xro=r(aHr,"gpt_neo"),aHr.forEach(t),$ro=r(a$," \u2014 "),QR=n(a$,"A",{href:!0});var nHr=s(QR);kro=r(nHr,"GPT2Tokenizer"),nHr.forEach(t),Sro=r(a$," or "),HR=n(a$,"A",{href:!0});var sHr=s(HR);Rro=r(sHr,"GPT2TokenizerFast"),sHr.forEach(t),Pro=r(a$," (GPT Neo model)"),a$.forEach(t),Bro=i(S),Zn=n(S,"LI",{});var n$=s(Zn);Yte=n(n$,"STRONG",{});var lHr=s(Yte);Iro=r(lHr,"gptj"),lHr.forEach(t),qro=r(n$," \u2014 "),UR=n(n$,"A",{href:!0});var iHr=s(UR);Nro=r(iHr,"GPT2Tokenizer"),iHr.forEach(t),jro=r(n$," or "),JR=n(n$,"A",{href:!0});var dHr=s(JR);Dro=r(dHr,"GPT2TokenizerFast"),dHr.forEach(t),Gro=r(n$," (GPT-J model)"),n$.forEach(t),Oro=i(S),es=n(S,"LI",{});var s$=s(es);Kte=n(s$,"STRONG",{});var cHr=s(Kte);Vro=r(cHr,"herbert"),cHr.forEach(t),Xro=r(s$," \u2014 "),YR=n(s$,"A",{href:!0});var fHr=s(YR);zro=r(fHr,"HerbertTokenizer"),fHr.forEach(t),Wro=r(s$," or "),KR=n(s$,"A",{href:!0});var mHr=s(KR);Qro=r(mHr,"HerbertTokenizerFast"),mHr.forEach(t),Hro=r(s$," (HerBERT model)"),s$.forEach(t),Uro=i(S),Bg=n(S,"LI",{});var uwe=s(Bg);Zte=n(uwe,"STRONG",{});var gHr=s(Zte);Jro=r(gHr,"hubert"),gHr.forEach(t),Yro=r(uwe," \u2014 "),ZR=n(uwe,"A",{href:!0});var hHr=s(ZR);Kro=r(hHr,"Wav2Vec2CTCTokenizer"),hHr.forEach(t),Zro=r(uwe," (Hubert model)"),uwe.forEach(t),eto=i(S),os=n(S,"LI",{});var l$=s(os);eae=n(l$,"STRONG",{});var pHr=s(eae);oto=r(pHr,"ibert"),pHr.forEach(t),rto=r(l$," \u2014 "),eP=n(l$,"A",{href:!0});var uHr=s(eP);tto=r(uHr,"RobertaTokenizer"),uHr.forEach(t),ato=r(l$," or "),oP=n(l$,"A",{href:!0});var _Hr=s(oP);nto=r(_Hr,"RobertaTokenizerFast"),_Hr.forEach(t),sto=r(l$," (I-BERT model)"),l$.forEach(t),lto=i(S),rs=n(S,"LI",{});var i$=s(rs);oae=n(i$,"STRONG",{});var bHr=s(oae);ito=r(bHr,"layoutlm"),bHr.forEach(t),dto=r(i$," \u2014 "),rP=n(i$,"A",{href:!0});var vHr=s(rP);cto=r(vHr,"LayoutLMTokenizer"),vHr.forEach(t),fto=r(i$," or "),tP=n(i$,"A",{href:!0});var FHr=s(tP);mto=r(FHr,"LayoutLMTokenizerFast"),FHr.forEach(t),gto=r(i$," (LayoutLM model)"),i$.forEach(t),hto=i(S),ts=n(S,"LI",{});var d$=s(ts);rae=n(d$,"STRONG",{});var THr=s(rae);pto=r(THr,"layoutlmv2"),THr.forEach(t),uto=r(d$," \u2014 "),aP=n(d$,"A",{href:!0});var MHr=s(aP);_to=r(MHr,"LayoutLMv2Tokenizer"),MHr.forEach(t),bto=r(d$," or "),nP=n(d$,"A",{href:!0});var EHr=s(nP);vto=r(EHr,"LayoutLMv2TokenizerFast"),EHr.forEach(t),Fto=r(d$," (LayoutLMv2 model)"),d$.forEach(t),Tto=i(S),as=n(S,"LI",{});var c$=s(as);tae=n(c$,"STRONG",{});var CHr=s(tae);Mto=r(CHr,"layoutlmv3"),CHr.forEach(t),Eto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var wHr=s(sP);Cto=r(wHr,"LayoutLMv3Tokenizer"),wHr.forEach(t),wto=r(c$," or "),lP=n(c$,"A",{href:!0});var AHr=s(lP);Ato=r(AHr,"LayoutLMv3TokenizerFast"),AHr.forEach(t),yto=r(c$," (LayoutLMv3 model)"),c$.forEach(t),Lto=i(S),ns=n(S,"LI",{});var f$=s(ns);aae=n(f$,"STRONG",{});var yHr=s(aae);xto=r(yHr,"layoutxlm"),yHr.forEach(t),$to=r(f$," \u2014 "),iP=n(f$,"A",{href:!0});var LHr=s(iP);kto=r(LHr,"LayoutXLMTokenizer"),LHr.forEach(t),Sto=r(f$," or "),dP=n(f$,"A",{href:!0});var xHr=s(dP);Rto=r(xHr,"LayoutXLMTokenizerFast"),xHr.forEach(t),Pto=r(f$," (LayoutXLM model)"),f$.forEach(t),Bto=i(S),ss=n(S,"LI",{});var m$=s(ss);nae=n(m$,"STRONG",{});var $Hr=s(nae);Ito=r($Hr,"led"),$Hr.forEach(t),qto=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var kHr=s(cP);Nto=r(kHr,"LEDTokenizer"),kHr.forEach(t),jto=r(m$," or "),fP=n(m$,"A",{href:!0});var SHr=s(fP);Dto=r(SHr,"LEDTokenizerFast"),SHr.forEach(t),Gto=r(m$," (LED model)"),m$.forEach(t),Oto=i(S),ls=n(S,"LI",{});var g$=s(ls);sae=n(g$,"STRONG",{});var RHr=s(sae);Vto=r(RHr,"longformer"),RHr.forEach(t),Xto=r(g$," \u2014 "),mP=n(g$,"A",{href:!0});var PHr=s(mP);zto=r(PHr,"LongformerTokenizer"),PHr.forEach(t),Wto=r(g$," or "),gP=n(g$,"A",{href:!0});var BHr=s(gP);Qto=r(BHr,"LongformerTokenizerFast"),BHr.forEach(t),Hto=r(g$," (Longformer model)"),g$.forEach(t),Uto=i(S),Ig=n(S,"LI",{});var _we=s(Ig);lae=n(_we,"STRONG",{});var IHr=s(lae);Jto=r(IHr,"luke"),IHr.forEach(t),Yto=r(_we," \u2014 "),hP=n(_we,"A",{href:!0});var qHr=s(hP);Kto=r(qHr,"LukeTokenizer"),qHr.forEach(t),Zto=r(_we," (LUKE model)"),_we.forEach(t),eao=i(S),is=n(S,"LI",{});var h$=s(is);iae=n(h$,"STRONG",{});var NHr=s(iae);oao=r(NHr,"lxmert"),NHr.forEach(t),rao=r(h$," \u2014 "),pP=n(h$,"A",{href:!0});var jHr=s(pP);tao=r(jHr,"LxmertTokenizer"),jHr.forEach(t),aao=r(h$," or "),uP=n(h$,"A",{href:!0});var DHr=s(uP);nao=r(DHr,"LxmertTokenizerFast"),DHr.forEach(t),sao=r(h$," (LXMERT model)"),h$.forEach(t),lao=i(S),qg=n(S,"LI",{});var bwe=s(qg);dae=n(bwe,"STRONG",{});var GHr=s(dae);iao=r(GHr,"m2m_100"),GHr.forEach(t),dao=r(bwe," \u2014 "),_P=n(bwe,"A",{href:!0});var OHr=s(_P);cao=r(OHr,"M2M100Tokenizer"),OHr.forEach(t),fao=r(bwe," (M2M100 model)"),bwe.forEach(t),mao=i(S),Ng=n(S,"LI",{});var vwe=s(Ng);cae=n(vwe,"STRONG",{});var VHr=s(cae);gao=r(VHr,"marian"),VHr.forEach(t),hao=r(vwe," \u2014 "),bP=n(vwe,"A",{href:!0});var XHr=s(bP);pao=r(XHr,"MarianTokenizer"),XHr.forEach(t),uao=r(vwe," (Marian model)"),vwe.forEach(t),_ao=i(S),ds=n(S,"LI",{});var p$=s(ds);fae=n(p$,"STRONG",{});var zHr=s(fae);bao=r(zHr,"mbart"),zHr.forEach(t),vao=r(p$," \u2014 "),vP=n(p$,"A",{href:!0});var WHr=s(vP);Fao=r(WHr,"MBartTokenizer"),WHr.forEach(t),Tao=r(p$," or "),FP=n(p$,"A",{href:!0});var QHr=s(FP);Mao=r(QHr,"MBartTokenizerFast"),QHr.forEach(t),Eao=r(p$," (mBART model)"),p$.forEach(t),Cao=i(S),cs=n(S,"LI",{});var u$=s(cs);mae=n(u$,"STRONG",{});var HHr=s(mae);wao=r(HHr,"mbart50"),HHr.forEach(t),Aao=r(u$," \u2014 "),TP=n(u$,"A",{href:!0});var UHr=s(TP);yao=r(UHr,"MBart50Tokenizer"),UHr.forEach(t),Lao=r(u$," or "),MP=n(u$,"A",{href:!0});var JHr=s(MP);xao=r(JHr,"MBart50TokenizerFast"),JHr.forEach(t),$ao=r(u$," (mBART-50 model)"),u$.forEach(t),kao=i(S),fs=n(S,"LI",{});var _$=s(fs);gae=n(_$,"STRONG",{});var YHr=s(gae);Sao=r(YHr,"megatron-bert"),YHr.forEach(t),Rao=r(_$," \u2014 "),EP=n(_$,"A",{href:!0});var KHr=s(EP);Pao=r(KHr,"BertTokenizer"),KHr.forEach(t),Bao=r(_$," or "),CP=n(_$,"A",{href:!0});var ZHr=s(CP);Iao=r(ZHr,"BertTokenizerFast"),ZHr.forEach(t),qao=r(_$," (MegatronBert model)"),_$.forEach(t),Nao=i(S),jg=n(S,"LI",{});var Fwe=s(jg);hae=n(Fwe,"STRONG",{});var eUr=s(hae);jao=r(eUr,"mluke"),eUr.forEach(t),Dao=r(Fwe," \u2014 "),wP=n(Fwe,"A",{href:!0});var oUr=s(wP);Gao=r(oUr,"MLukeTokenizer"),oUr.forEach(t),Oao=r(Fwe," (mLUKE model)"),Fwe.forEach(t),Vao=i(S),ms=n(S,"LI",{});var b$=s(ms);pae=n(b$,"STRONG",{});var rUr=s(pae);Xao=r(rUr,"mobilebert"),rUr.forEach(t),zao=r(b$," \u2014 "),AP=n(b$,"A",{href:!0});var tUr=s(AP);Wao=r(tUr,"MobileBertTokenizer"),tUr.forEach(t),Qao=r(b$," or "),yP=n(b$,"A",{href:!0});var aUr=s(yP);Hao=r(aUr,"MobileBertTokenizerFast"),aUr.forEach(t),Uao=r(b$," (MobileBERT model)"),b$.forEach(t),Jao=i(S),gs=n(S,"LI",{});var v$=s(gs);uae=n(v$,"STRONG",{});var nUr=s(uae);Yao=r(nUr,"mpnet"),nUr.forEach(t),Kao=r(v$," \u2014 "),LP=n(v$,"A",{href:!0});var sUr=s(LP);Zao=r(sUr,"MPNetTokenizer"),sUr.forEach(t),eno=r(v$," or "),xP=n(v$,"A",{href:!0});var lUr=s(xP);ono=r(lUr,"MPNetTokenizerFast"),lUr.forEach(t),rno=r(v$," (MPNet model)"),v$.forEach(t),tno=i(S),hs=n(S,"LI",{});var F$=s(hs);_ae=n(F$,"STRONG",{});var iUr=s(_ae);ano=r(iUr,"mt5"),iUr.forEach(t),nno=r(F$," \u2014 "),$P=n(F$,"A",{href:!0});var dUr=s($P);sno=r(dUr,"MT5Tokenizer"),dUr.forEach(t),lno=r(F$," or "),kP=n(F$,"A",{href:!0});var cUr=s(kP);ino=r(cUr,"MT5TokenizerFast"),cUr.forEach(t),dno=r(F$," (mT5 model)"),F$.forEach(t),cno=i(S),ps=n(S,"LI",{});var T$=s(ps);bae=n(T$,"STRONG",{});var fUr=s(bae);fno=r(fUr,"nystromformer"),fUr.forEach(t),mno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var mUr=s(SP);gno=r(mUr,"AlbertTokenizer"),mUr.forEach(t),hno=r(T$," or "),RP=n(T$,"A",{href:!0});var gUr=s(RP);pno=r(gUr,"AlbertTokenizerFast"),gUr.forEach(t),uno=r(T$," (Nystromformer model)"),T$.forEach(t),_no=i(S),us=n(S,"LI",{});var M$=s(us);vae=n(M$,"STRONG",{});var hUr=s(vae);bno=r(hUr,"openai-gpt"),hUr.forEach(t),vno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var pUr=s(PP);Fno=r(pUr,"OpenAIGPTTokenizer"),pUr.forEach(t),Tno=r(M$," or "),BP=n(M$,"A",{href:!0});var uUr=s(BP);Mno=r(uUr,"OpenAIGPTTokenizerFast"),uUr.forEach(t),Eno=r(M$," (OpenAI GPT model)"),M$.forEach(t),Cno=i(S),Dg=n(S,"LI",{});var Twe=s(Dg);Fae=n(Twe,"STRONG",{});var _Ur=s(Fae);wno=r(_Ur,"opt"),_Ur.forEach(t),Ano=r(Twe," \u2014 "),IP=n(Twe,"A",{href:!0});var bUr=s(IP);yno=r(bUr,"GPT2Tokenizer"),bUr.forEach(t),Lno=r(Twe," (OPT model)"),Twe.forEach(t),xno=i(S),_s=n(S,"LI",{});var E$=s(_s);Tae=n(E$,"STRONG",{});var vUr=s(Tae);$no=r(vUr,"pegasus"),vUr.forEach(t),kno=r(E$," \u2014 "),qP=n(E$,"A",{href:!0});var FUr=s(qP);Sno=r(FUr,"PegasusTokenizer"),FUr.forEach(t),Rno=r(E$," or "),NP=n(E$,"A",{href:!0});var TUr=s(NP);Pno=r(TUr,"PegasusTokenizerFast"),TUr.forEach(t),Bno=r(E$," (Pegasus model)"),E$.forEach(t),Ino=i(S),Gg=n(S,"LI",{});var Mwe=s(Gg);Mae=n(Mwe,"STRONG",{});var MUr=s(Mae);qno=r(MUr,"perceiver"),MUr.forEach(t),Nno=r(Mwe," \u2014 "),jP=n(Mwe,"A",{href:!0});var EUr=s(jP);jno=r(EUr,"PerceiverTokenizer"),EUr.forEach(t),Dno=r(Mwe," (Perceiver model)"),Mwe.forEach(t),Gno=i(S),Og=n(S,"LI",{});var Ewe=s(Og);Eae=n(Ewe,"STRONG",{});var CUr=s(Eae);Ono=r(CUr,"phobert"),CUr.forEach(t),Vno=r(Ewe," \u2014 "),DP=n(Ewe,"A",{href:!0});var wUr=s(DP);Xno=r(wUr,"PhobertTokenizer"),wUr.forEach(t),zno=r(Ewe," (PhoBERT model)"),Ewe.forEach(t),Wno=i(S),Vg=n(S,"LI",{});var Cwe=s(Vg);Cae=n(Cwe,"STRONG",{});var AUr=s(Cae);Qno=r(AUr,"plbart"),AUr.forEach(t),Hno=r(Cwe," \u2014 "),GP=n(Cwe,"A",{href:!0});var yUr=s(GP);Uno=r(yUr,"PLBartTokenizer"),yUr.forEach(t),Jno=r(Cwe," (PLBart model)"),Cwe.forEach(t),Yno=i(S),Xg=n(S,"LI",{});var wwe=s(Xg);wae=n(wwe,"STRONG",{});var LUr=s(wae);Kno=r(LUr,"prophetnet"),LUr.forEach(t),Zno=r(wwe," \u2014 "),OP=n(wwe,"A",{href:!0});var xUr=s(OP);eso=r(xUr,"ProphetNetTokenizer"),xUr.forEach(t),oso=r(wwe," (ProphetNet model)"),wwe.forEach(t),rso=i(S),bs=n(S,"LI",{});var C$=s(bs);Aae=n(C$,"STRONG",{});var $Ur=s(Aae);tso=r($Ur,"qdqbert"),$Ur.forEach(t),aso=r(C$," \u2014 "),VP=n(C$,"A",{href:!0});var kUr=s(VP);nso=r(kUr,"BertTokenizer"),kUr.forEach(t),sso=r(C$," or "),XP=n(C$,"A",{href:!0});var SUr=s(XP);lso=r(SUr,"BertTokenizerFast"),SUr.forEach(t),iso=r(C$," (QDQBert model)"),C$.forEach(t),dso=i(S),zg=n(S,"LI",{});var Awe=s(zg);yae=n(Awe,"STRONG",{});var RUr=s(yae);cso=r(RUr,"rag"),RUr.forEach(t),fso=r(Awe," \u2014 "),zP=n(Awe,"A",{href:!0});var PUr=s(zP);mso=r(PUr,"RagTokenizer"),PUr.forEach(t),gso=r(Awe," (RAG model)"),Awe.forEach(t),hso=i(S),vs=n(S,"LI",{});var w$=s(vs);Lae=n(w$,"STRONG",{});var BUr=s(Lae);pso=r(BUr,"realm"),BUr.forEach(t),uso=r(w$," \u2014 "),WP=n(w$,"A",{href:!0});var IUr=s(WP);_so=r(IUr,"RealmTokenizer"),IUr.forEach(t),bso=r(w$," or "),QP=n(w$,"A",{href:!0});var qUr=s(QP);vso=r(qUr,"RealmTokenizerFast"),qUr.forEach(t),Fso=r(w$," (Realm model)"),w$.forEach(t),Tso=i(S),Fs=n(S,"LI",{});var A$=s(Fs);xae=n(A$,"STRONG",{});var NUr=s(xae);Mso=r(NUr,"reformer"),NUr.forEach(t),Eso=r(A$," \u2014 "),HP=n(A$,"A",{href:!0});var jUr=s(HP);Cso=r(jUr,"ReformerTokenizer"),jUr.forEach(t),wso=r(A$," or "),UP=n(A$,"A",{href:!0});var DUr=s(UP);Aso=r(DUr,"ReformerTokenizerFast"),DUr.forEach(t),yso=r(A$," (Reformer model)"),A$.forEach(t),Lso=i(S),Ts=n(S,"LI",{});var y$=s(Ts);$ae=n(y$,"STRONG",{});var GUr=s($ae);xso=r(GUr,"rembert"),GUr.forEach(t),$so=r(y$," \u2014 "),JP=n(y$,"A",{href:!0});var OUr=s(JP);kso=r(OUr,"RemBertTokenizer"),OUr.forEach(t),Sso=r(y$," or "),YP=n(y$,"A",{href:!0});var VUr=s(YP);Rso=r(VUr,"RemBertTokenizerFast"),VUr.forEach(t),Pso=r(y$," (RemBERT model)"),y$.forEach(t),Bso=i(S),Ms=n(S,"LI",{});var L$=s(Ms);kae=n(L$,"STRONG",{});var XUr=s(kae);Iso=r(XUr,"retribert"),XUr.forEach(t),qso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var zUr=s(KP);Nso=r(zUr,"RetriBertTokenizer"),zUr.forEach(t),jso=r(L$," or "),ZP=n(L$,"A",{href:!0});var WUr=s(ZP);Dso=r(WUr,"RetriBertTokenizerFast"),WUr.forEach(t),Gso=r(L$," (RetriBERT model)"),L$.forEach(t),Oso=i(S),Es=n(S,"LI",{});var x$=s(Es);Sae=n(x$,"STRONG",{});var QUr=s(Sae);Vso=r(QUr,"roberta"),QUr.forEach(t),Xso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var HUr=s(eB);zso=r(HUr,"RobertaTokenizer"),HUr.forEach(t),Wso=r(x$," or "),oB=n(x$,"A",{href:!0});var UUr=s(oB);Qso=r(UUr,"RobertaTokenizerFast"),UUr.forEach(t),Hso=r(x$," (RoBERTa model)"),x$.forEach(t),Uso=i(S),Cs=n(S,"LI",{});var $$=s(Cs);Rae=n($$,"STRONG",{});var JUr=s(Rae);Jso=r(JUr,"roformer"),JUr.forEach(t),Yso=r($$," \u2014 "),rB=n($$,"A",{href:!0});var YUr=s(rB);Kso=r(YUr,"RoFormerTokenizer"),YUr.forEach(t),Zso=r($$," or "),tB=n($$,"A",{href:!0});var KUr=s(tB);elo=r(KUr,"RoFormerTokenizerFast"),KUr.forEach(t),olo=r($$," (RoFormer model)"),$$.forEach(t),rlo=i(S),Wg=n(S,"LI",{});var ywe=s(Wg);Pae=n(ywe,"STRONG",{});var ZUr=s(Pae);tlo=r(ZUr,"speech_to_text"),ZUr.forEach(t),alo=r(ywe," \u2014 "),aB=n(ywe,"A",{href:!0});var eJr=s(aB);nlo=r(eJr,"Speech2TextTokenizer"),eJr.forEach(t),slo=r(ywe," (Speech2Text model)"),ywe.forEach(t),llo=i(S),Qg=n(S,"LI",{});var Lwe=s(Qg);Bae=n(Lwe,"STRONG",{});var oJr=s(Bae);ilo=r(oJr,"speech_to_text_2"),oJr.forEach(t),dlo=r(Lwe," \u2014 "),nB=n(Lwe,"A",{href:!0});var rJr=s(nB);clo=r(rJr,"Speech2Text2Tokenizer"),rJr.forEach(t),flo=r(Lwe," (Speech2Text2 model)"),Lwe.forEach(t),mlo=i(S),ws=n(S,"LI",{});var k$=s(ws);Iae=n(k$,"STRONG",{});var tJr=s(Iae);glo=r(tJr,"splinter"),tJr.forEach(t),hlo=r(k$," \u2014 "),sB=n(k$,"A",{href:!0});var aJr=s(sB);plo=r(aJr,"SplinterTokenizer"),aJr.forEach(t),ulo=r(k$," or "),lB=n(k$,"A",{href:!0});var nJr=s(lB);_lo=r(nJr,"SplinterTokenizerFast"),nJr.forEach(t),blo=r(k$," (Splinter model)"),k$.forEach(t),vlo=i(S),As=n(S,"LI",{});var S$=s(As);qae=n(S$,"STRONG",{});var sJr=s(qae);Flo=r(sJr,"squeezebert"),sJr.forEach(t),Tlo=r(S$," \u2014 "),iB=n(S$,"A",{href:!0});var lJr=s(iB);Mlo=r(lJr,"SqueezeBertTokenizer"),lJr.forEach(t),Elo=r(S$," or "),dB=n(S$,"A",{href:!0});var iJr=s(dB);Clo=r(iJr,"SqueezeBertTokenizerFast"),iJr.forEach(t),wlo=r(S$," (SqueezeBERT model)"),S$.forEach(t),Alo=i(S),ys=n(S,"LI",{});var R$=s(ys);Nae=n(R$,"STRONG",{});var dJr=s(Nae);ylo=r(dJr,"t5"),dJr.forEach(t),Llo=r(R$," \u2014 "),cB=n(R$,"A",{href:!0});var cJr=s(cB);xlo=r(cJr,"T5Tokenizer"),cJr.forEach(t),$lo=r(R$," or "),fB=n(R$,"A",{href:!0});var fJr=s(fB);klo=r(fJr,"T5TokenizerFast"),fJr.forEach(t),Slo=r(R$," (T5 model)"),R$.forEach(t),Rlo=i(S),Hg=n(S,"LI",{});var xwe=s(Hg);jae=n(xwe,"STRONG",{});var mJr=s(jae);Plo=r(mJr,"tapas"),mJr.forEach(t),Blo=r(xwe," \u2014 "),mB=n(xwe,"A",{href:!0});var gJr=s(mB);Ilo=r(gJr,"TapasTokenizer"),gJr.forEach(t),qlo=r(xwe," (TAPAS model)"),xwe.forEach(t),Nlo=i(S),Ug=n(S,"LI",{});var $we=s(Ug);Dae=n($we,"STRONG",{});var hJr=s(Dae);jlo=r(hJr,"tapex"),hJr.forEach(t),Dlo=r($we," \u2014 "),gB=n($we,"A",{href:!0});var pJr=s(gB);Glo=r(pJr,"TapexTokenizer"),pJr.forEach(t),Olo=r($we," (TAPEX model)"),$we.forEach(t),Vlo=i(S),Jg=n(S,"LI",{});var kwe=s(Jg);Gae=n(kwe,"STRONG",{});var uJr=s(Gae);Xlo=r(uJr,"transfo-xl"),uJr.forEach(t),zlo=r(kwe," \u2014 "),hB=n(kwe,"A",{href:!0});var _Jr=s(hB);Wlo=r(_Jr,"TransfoXLTokenizer"),_Jr.forEach(t),Qlo=r(kwe," (Transformer-XL model)"),kwe.forEach(t),Hlo=i(S),Ls=n(S,"LI",{});var P$=s(Ls);Oae=n(P$,"STRONG",{});var bJr=s(Oae);Ulo=r(bJr,"visual_bert"),bJr.forEach(t),Jlo=r(P$," \u2014 "),pB=n(P$,"A",{href:!0});var vJr=s(pB);Ylo=r(vJr,"BertTokenizer"),vJr.forEach(t),Klo=r(P$," or "),uB=n(P$,"A",{href:!0});var FJr=s(uB);Zlo=r(FJr,"BertTokenizerFast"),FJr.forEach(t),eio=r(P$," (VisualBert model)"),P$.forEach(t),oio=i(S),Yg=n(S,"LI",{});var Swe=s(Yg);Vae=n(Swe,"STRONG",{});var TJr=s(Vae);rio=r(TJr,"wav2vec2"),TJr.forEach(t),tio=r(Swe," \u2014 "),_B=n(Swe,"A",{href:!0});var MJr=s(_B);aio=r(MJr,"Wav2Vec2CTCTokenizer"),MJr.forEach(t),nio=r(Swe," (Wav2Vec2 model)"),Swe.forEach(t),sio=i(S),Kg=n(S,"LI",{});var Rwe=s(Kg);Xae=n(Rwe,"STRONG",{});var EJr=s(Xae);lio=r(EJr,"wav2vec2-conformer"),EJr.forEach(t),iio=r(Rwe," \u2014 "),bB=n(Rwe,"A",{href:!0});var CJr=s(bB);dio=r(CJr,"Wav2Vec2CTCTokenizer"),CJr.forEach(t),cio=r(Rwe," (Wav2Vec2-Conformer model)"),Rwe.forEach(t),fio=i(S),Zg=n(S,"LI",{});var Pwe=s(Zg);zae=n(Pwe,"STRONG",{});var wJr=s(zae);mio=r(wJr,"wav2vec2_phoneme"),wJr.forEach(t),gio=r(Pwe," \u2014 "),vB=n(Pwe,"A",{href:!0});var AJr=s(vB);hio=r(AJr,"Wav2Vec2PhonemeCTCTokenizer"),AJr.forEach(t),pio=r(Pwe," (Wav2Vec2Phoneme model)"),Pwe.forEach(t),uio=i(S),xs=n(S,"LI",{});var B$=s(xs);Wae=n(B$,"STRONG",{});var yJr=s(Wae);_io=r(yJr,"xglm"),yJr.forEach(t),bio=r(B$," \u2014 "),FB=n(B$,"A",{href:!0});var LJr=s(FB);vio=r(LJr,"XGLMTokenizer"),LJr.forEach(t),Fio=r(B$," or "),TB=n(B$,"A",{href:!0});var xJr=s(TB);Tio=r(xJr,"XGLMTokenizerFast"),xJr.forEach(t),Mio=r(B$," (XGLM model)"),B$.forEach(t),Eio=i(S),eh=n(S,"LI",{});var Bwe=s(eh);Qae=n(Bwe,"STRONG",{});var $Jr=s(Qae);Cio=r($Jr,"xlm"),$Jr.forEach(t),wio=r(Bwe," \u2014 "),MB=n(Bwe,"A",{href:!0});var kJr=s(MB);Aio=r(kJr,"XLMTokenizer"),kJr.forEach(t),yio=r(Bwe," (XLM model)"),Bwe.forEach(t),Lio=i(S),oh=n(S,"LI",{});var Iwe=s(oh);Hae=n(Iwe,"STRONG",{});var SJr=s(Hae);xio=r(SJr,"xlm-prophetnet"),SJr.forEach(t),$io=r(Iwe," \u2014 "),EB=n(Iwe,"A",{href:!0});var RJr=s(EB);kio=r(RJr,"XLMProphetNetTokenizer"),RJr.forEach(t),Sio=r(Iwe," (XLMProphetNet model)"),Iwe.forEach(t),Rio=i(S),$s=n(S,"LI",{});var I$=s($s);Uae=n(I$,"STRONG",{});var PJr=s(Uae);Pio=r(PJr,"xlm-roberta"),PJr.forEach(t),Bio=r(I$," \u2014 "),CB=n(I$,"A",{href:!0});var BJr=s(CB);Iio=r(BJr,"XLMRobertaTokenizer"),BJr.forEach(t),qio=r(I$," or "),wB=n(I$,"A",{href:!0});var IJr=s(wB);Nio=r(IJr,"XLMRobertaTokenizerFast"),IJr.forEach(t),jio=r(I$," (XLM-RoBERTa model)"),I$.forEach(t),Dio=i(S),ks=n(S,"LI",{});var q$=s(ks);Jae=n(q$,"STRONG",{});var qJr=s(Jae);Gio=r(qJr,"xlm-roberta-xl"),qJr.forEach(t),Oio=r(q$," \u2014 "),AB=n(q$,"A",{href:!0});var NJr=s(AB);Vio=r(NJr,"RobertaTokenizer"),NJr.forEach(t),Xio=r(q$," or "),yB=n(q$,"A",{href:!0});var jJr=s(yB);zio=r(jJr,"RobertaTokenizerFast"),jJr.forEach(t),Wio=r(q$," (XLM-RoBERTa-XL model)"),q$.forEach(t),Qio=i(S),Ss=n(S,"LI",{});var N$=s(Ss);Yae=n(N$,"STRONG",{});var DJr=s(Yae);Hio=r(DJr,"xlnet"),DJr.forEach(t),Uio=r(N$," \u2014 "),LB=n(N$,"A",{href:!0});var GJr=s(LB);Jio=r(GJr,"XLNetTokenizer"),GJr.forEach(t),Yio=r(N$," or "),xB=n(N$,"A",{href:!0});var OJr=s(xB);Kio=r(OJr,"XLNetTokenizerFast"),OJr.forEach(t),Zio=r(N$," (XLNet model)"),N$.forEach(t),edo=i(S),Rs=n(S,"LI",{});var j$=s(Rs);Kae=n(j$,"STRONG",{});var VJr=s(Kae);odo=r(VJr,"yoso"),VJr.forEach(t),rdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var XJr=s($B);tdo=r(XJr,"AlbertTokenizer"),XJr.forEach(t),ado=r(j$," or "),kB=n(j$,"A",{href:!0});var zJr=s(kB);ndo=r(zJr,"AlbertTokenizerFast"),zJr.forEach(t),sdo=r(j$," (YOSO model)"),j$.forEach(t),S.forEach(t),ldo=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),ido=i(qs),th=n(qs,"DIV",{class:!0});var Kje=s(th);T(NA.$$.fragment,Kje),ddo=i(Kje),Zae=n(Kje,"P",{});var WJr=s(Zae);cdo=r(WJr,"Register a new tokenizer in this mapping."),WJr.forEach(t),Kje.forEach(t),qs.forEach(t),Zqe=i(f),Mi=n(f,"H2",{class:!0});var Zje=s(Mi);ah=n(Zje,"A",{id:!0,class:!0,href:!0});var QJr=s(ah);ene=n(QJr,"SPAN",{});var HJr=s(ene);T(jA.$$.fragment,HJr),HJr.forEach(t),QJr.forEach(t),fdo=i(Zje),one=n(Zje,"SPAN",{});var UJr=s(one);mdo=r(UJr,"AutoFeatureExtractor"),UJr.forEach(t),Zje.forEach(t),eNe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(DA.$$.fragment,js),gdo=i(js),GA=n(js,"P",{});var eDe=s(GA);hdo=r(eDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SB=n(eDe,"A",{href:!0});var JJr=s(SB);pdo=r(JJr,"AutoFeatureExtractor.from_pretrained()"),JJr.forEach(t),udo=r(eDe," class method."),eDe.forEach(t),_do=i(js),OA=n(js,"P",{});var oDe=s(OA);bdo=r(oDe,"This class cannot be instantiated directly using "),rne=n(oDe,"CODE",{});var YJr=s(rne);vdo=r(YJr,"__init__()"),YJr.forEach(t),Fdo=r(oDe," (throws an error)."),oDe.forEach(t),Tdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(VA.$$.fragment,Zt),Mdo=i(Zt),tne=n(Zt,"P",{});var KJr=s(tne);Edo=r(KJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KJr.forEach(t),Cdo=i(Zt),ya=n(Zt,"P",{});var Lw=s(ya);wdo=r(Lw,"The feature extractor class to instantiate is selected based on the "),ane=n(Lw,"CODE",{});var ZJr=s(ane);Ado=r(ZJr,"model_type"),ZJr.forEach(t),ydo=r(Lw,` property of the config object
(either passed as an argument or loaded from `),nne=n(Lw,"CODE",{});var eYr=s(nne);Ldo=r(eYr,"pretrained_model_name_or_path"),eYr.forEach(t),xdo=r(Lw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sne=n(Lw,"CODE",{});var oYr=s(sne);$do=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),kdo=r(Lw,":"),Lw.forEach(t),Sdo=i(Zt),K=n(Zt,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var qwe=s(nh);lne=n(qwe,"STRONG",{});var rYr=s(lne);Rdo=r(rYr,"beit"),rYr.forEach(t),Pdo=r(qwe," \u2014 "),RB=n(qwe,"A",{href:!0});var tYr=s(RB);Bdo=r(tYr,"BeitFeatureExtractor"),tYr.forEach(t),Ido=r(qwe," (BEiT model)"),qwe.forEach(t),qdo=i(ee),sh=n(ee,"LI",{});var Nwe=s(sh);ine=n(Nwe,"STRONG",{});var aYr=s(ine);Ndo=r(aYr,"clip"),aYr.forEach(t),jdo=r(Nwe," \u2014 "),PB=n(Nwe,"A",{href:!0});var nYr=s(PB);Ddo=r(nYr,"CLIPFeatureExtractor"),nYr.forEach(t),Gdo=r(Nwe," (CLIP model)"),Nwe.forEach(t),Odo=i(ee),lh=n(ee,"LI",{});var jwe=s(lh);dne=n(jwe,"STRONG",{});var sYr=s(dne);Vdo=r(sYr,"convnext"),sYr.forEach(t),Xdo=r(jwe," \u2014 "),BB=n(jwe,"A",{href:!0});var lYr=s(BB);zdo=r(lYr,"ConvNextFeatureExtractor"),lYr.forEach(t),Wdo=r(jwe," (ConvNext model)"),jwe.forEach(t),Qdo=i(ee),ih=n(ee,"LI",{});var Dwe=s(ih);cne=n(Dwe,"STRONG",{});var iYr=s(cne);Hdo=r(iYr,"cvt"),iYr.forEach(t),Udo=r(Dwe," \u2014 "),IB=n(Dwe,"A",{href:!0});var dYr=s(IB);Jdo=r(dYr,"ConvNextFeatureExtractor"),dYr.forEach(t),Ydo=r(Dwe," (CvT model)"),Dwe.forEach(t),Kdo=i(ee),dh=n(ee,"LI",{});var Gwe=s(dh);fne=n(Gwe,"STRONG",{});var cYr=s(fne);Zdo=r(cYr,"data2vec-audio"),cYr.forEach(t),eco=r(Gwe," \u2014 "),qB=n(Gwe,"A",{href:!0});var fYr=s(qB);oco=r(fYr,"Wav2Vec2FeatureExtractor"),fYr.forEach(t),rco=r(Gwe," (Data2VecAudio model)"),Gwe.forEach(t),tco=i(ee),ch=n(ee,"LI",{});var Owe=s(ch);mne=n(Owe,"STRONG",{});var mYr=s(mne);aco=r(mYr,"data2vec-vision"),mYr.forEach(t),nco=r(Owe," \u2014 "),NB=n(Owe,"A",{href:!0});var gYr=s(NB);sco=r(gYr,"BeitFeatureExtractor"),gYr.forEach(t),lco=r(Owe," (Data2VecVision model)"),Owe.forEach(t),ico=i(ee),fh=n(ee,"LI",{});var Vwe=s(fh);gne=n(Vwe,"STRONG",{});var hYr=s(gne);dco=r(hYr,"deit"),hYr.forEach(t),cco=r(Vwe," \u2014 "),jB=n(Vwe,"A",{href:!0});var pYr=s(jB);fco=r(pYr,"DeiTFeatureExtractor"),pYr.forEach(t),mco=r(Vwe," (DeiT model)"),Vwe.forEach(t),gco=i(ee),mh=n(ee,"LI",{});var Xwe=s(mh);hne=n(Xwe,"STRONG",{});var uYr=s(hne);hco=r(uYr,"detr"),uYr.forEach(t),pco=r(Xwe," \u2014 "),DB=n(Xwe,"A",{href:!0});var _Yr=s(DB);uco=r(_Yr,"DetrFeatureExtractor"),_Yr.forEach(t),_co=r(Xwe," (DETR model)"),Xwe.forEach(t),bco=i(ee),gh=n(ee,"LI",{});var zwe=s(gh);pne=n(zwe,"STRONG",{});var bYr=s(pne);vco=r(bYr,"dpt"),bYr.forEach(t),Fco=r(zwe," \u2014 "),GB=n(zwe,"A",{href:!0});var vYr=s(GB);Tco=r(vYr,"DPTFeatureExtractor"),vYr.forEach(t),Mco=r(zwe," (DPT model)"),zwe.forEach(t),Eco=i(ee),hh=n(ee,"LI",{});var Wwe=s(hh);une=n(Wwe,"STRONG",{});var FYr=s(une);Cco=r(FYr,"flava"),FYr.forEach(t),wco=r(Wwe," \u2014 "),OB=n(Wwe,"A",{href:!0});var TYr=s(OB);Aco=r(TYr,"FlavaFeatureExtractor"),TYr.forEach(t),yco=r(Wwe," (Flava model)"),Wwe.forEach(t),Lco=i(ee),ph=n(ee,"LI",{});var Qwe=s(ph);_ne=n(Qwe,"STRONG",{});var MYr=s(_ne);xco=r(MYr,"glpn"),MYr.forEach(t),$co=r(Qwe," \u2014 "),VB=n(Qwe,"A",{href:!0});var EYr=s(VB);kco=r(EYr,"GLPNFeatureExtractor"),EYr.forEach(t),Sco=r(Qwe," (GLPN model)"),Qwe.forEach(t),Rco=i(ee),uh=n(ee,"LI",{});var Hwe=s(uh);bne=n(Hwe,"STRONG",{});var CYr=s(bne);Pco=r(CYr,"hubert"),CYr.forEach(t),Bco=r(Hwe," \u2014 "),XB=n(Hwe,"A",{href:!0});var wYr=s(XB);Ico=r(wYr,"Wav2Vec2FeatureExtractor"),wYr.forEach(t),qco=r(Hwe," (Hubert model)"),Hwe.forEach(t),Nco=i(ee),_h=n(ee,"LI",{});var Uwe=s(_h);vne=n(Uwe,"STRONG",{});var AYr=s(vne);jco=r(AYr,"layoutlmv2"),AYr.forEach(t),Dco=r(Uwe," \u2014 "),zB=n(Uwe,"A",{href:!0});var yYr=s(zB);Gco=r(yYr,"LayoutLMv2FeatureExtractor"),yYr.forEach(t),Oco=r(Uwe," (LayoutLMv2 model)"),Uwe.forEach(t),Vco=i(ee),bh=n(ee,"LI",{});var Jwe=s(bh);Fne=n(Jwe,"STRONG",{});var LYr=s(Fne);Xco=r(LYr,"layoutlmv3"),LYr.forEach(t),zco=r(Jwe," \u2014 "),WB=n(Jwe,"A",{href:!0});var xYr=s(WB);Wco=r(xYr,"LayoutLMv3FeatureExtractor"),xYr.forEach(t),Qco=r(Jwe," (LayoutLMv3 model)"),Jwe.forEach(t),Hco=i(ee),vh=n(ee,"LI",{});var Ywe=s(vh);Tne=n(Ywe,"STRONG",{});var $Yr=s(Tne);Uco=r($Yr,"maskformer"),$Yr.forEach(t),Jco=r(Ywe," \u2014 "),QB=n(Ywe,"A",{href:!0});var kYr=s(QB);Yco=r(kYr,"MaskFormerFeatureExtractor"),kYr.forEach(t),Kco=r(Ywe," (MaskFormer model)"),Ywe.forEach(t),Zco=i(ee),Fh=n(ee,"LI",{});var Kwe=s(Fh);Mne=n(Kwe,"STRONG",{});var SYr=s(Mne);efo=r(SYr,"perceiver"),SYr.forEach(t),ofo=r(Kwe," \u2014 "),HB=n(Kwe,"A",{href:!0});var RYr=s(HB);rfo=r(RYr,"PerceiverFeatureExtractor"),RYr.forEach(t),tfo=r(Kwe," (Perceiver model)"),Kwe.forEach(t),afo=i(ee),Th=n(ee,"LI",{});var Zwe=s(Th);Ene=n(Zwe,"STRONG",{});var PYr=s(Ene);nfo=r(PYr,"poolformer"),PYr.forEach(t),sfo=r(Zwe," \u2014 "),UB=n(Zwe,"A",{href:!0});var BYr=s(UB);lfo=r(BYr,"PoolFormerFeatureExtractor"),BYr.forEach(t),ifo=r(Zwe," (PoolFormer model)"),Zwe.forEach(t),dfo=i(ee),Mh=n(ee,"LI",{});var e0e=s(Mh);Cne=n(e0e,"STRONG",{});var IYr=s(Cne);cfo=r(IYr,"regnet"),IYr.forEach(t),ffo=r(e0e," \u2014 "),JB=n(e0e,"A",{href:!0});var qYr=s(JB);mfo=r(qYr,"ConvNextFeatureExtractor"),qYr.forEach(t),gfo=r(e0e," (RegNet model)"),e0e.forEach(t),hfo=i(ee),Eh=n(ee,"LI",{});var o0e=s(Eh);wne=n(o0e,"STRONG",{});var NYr=s(wne);pfo=r(NYr,"resnet"),NYr.forEach(t),ufo=r(o0e," \u2014 "),YB=n(o0e,"A",{href:!0});var jYr=s(YB);_fo=r(jYr,"ConvNextFeatureExtractor"),jYr.forEach(t),bfo=r(o0e," (ResNet model)"),o0e.forEach(t),vfo=i(ee),Ch=n(ee,"LI",{});var r0e=s(Ch);Ane=n(r0e,"STRONG",{});var DYr=s(Ane);Ffo=r(DYr,"segformer"),DYr.forEach(t),Tfo=r(r0e," \u2014 "),KB=n(r0e,"A",{href:!0});var GYr=s(KB);Mfo=r(GYr,"SegformerFeatureExtractor"),GYr.forEach(t),Efo=r(r0e," (SegFormer model)"),r0e.forEach(t),Cfo=i(ee),wh=n(ee,"LI",{});var t0e=s(wh);yne=n(t0e,"STRONG",{});var OYr=s(yne);wfo=r(OYr,"speech_to_text"),OYr.forEach(t),Afo=r(t0e," \u2014 "),ZB=n(t0e,"A",{href:!0});var VYr=s(ZB);yfo=r(VYr,"Speech2TextFeatureExtractor"),VYr.forEach(t),Lfo=r(t0e," (Speech2Text model)"),t0e.forEach(t),xfo=i(ee),Ah=n(ee,"LI",{});var a0e=s(Ah);Lne=n(a0e,"STRONG",{});var XYr=s(Lne);$fo=r(XYr,"swin"),XYr.forEach(t),kfo=r(a0e," \u2014 "),eI=n(a0e,"A",{href:!0});var zYr=s(eI);Sfo=r(zYr,"ViTFeatureExtractor"),zYr.forEach(t),Rfo=r(a0e," (Swin model)"),a0e.forEach(t),Pfo=i(ee),yh=n(ee,"LI",{});var n0e=s(yh);xne=n(n0e,"STRONG",{});var WYr=s(xne);Bfo=r(WYr,"van"),WYr.forEach(t),Ifo=r(n0e," \u2014 "),oI=n(n0e,"A",{href:!0});var QYr=s(oI);qfo=r(QYr,"ConvNextFeatureExtractor"),QYr.forEach(t),Nfo=r(n0e," (VAN model)"),n0e.forEach(t),jfo=i(ee),Lh=n(ee,"LI",{});var s0e=s(Lh);$ne=n(s0e,"STRONG",{});var HYr=s($ne);Dfo=r(HYr,"vit"),HYr.forEach(t),Gfo=r(s0e," \u2014 "),rI=n(s0e,"A",{href:!0});var UYr=s(rI);Ofo=r(UYr,"ViTFeatureExtractor"),UYr.forEach(t),Vfo=r(s0e," (ViT model)"),s0e.forEach(t),Xfo=i(ee),xh=n(ee,"LI",{});var l0e=s(xh);kne=n(l0e,"STRONG",{});var JYr=s(kne);zfo=r(JYr,"vit_mae"),JYr.forEach(t),Wfo=r(l0e," \u2014 "),tI=n(l0e,"A",{href:!0});var YYr=s(tI);Qfo=r(YYr,"ViTFeatureExtractor"),YYr.forEach(t),Hfo=r(l0e," (ViTMAE model)"),l0e.forEach(t),Ufo=i(ee),$h=n(ee,"LI",{});var i0e=s($h);Sne=n(i0e,"STRONG",{});var KYr=s(Sne);Jfo=r(KYr,"wav2vec2"),KYr.forEach(t),Yfo=r(i0e," \u2014 "),aI=n(i0e,"A",{href:!0});var ZYr=s(aI);Kfo=r(ZYr,"Wav2Vec2FeatureExtractor"),ZYr.forEach(t),Zfo=r(i0e," (Wav2Vec2 model)"),i0e.forEach(t),emo=i(ee),kh=n(ee,"LI",{});var d0e=s(kh);Rne=n(d0e,"STRONG",{});var eKr=s(Rne);omo=r(eKr,"wav2vec2-conformer"),eKr.forEach(t),rmo=r(d0e," \u2014 "),nI=n(d0e,"A",{href:!0});var oKr=s(nI);tmo=r(oKr,"Wav2Vec2FeatureExtractor"),oKr.forEach(t),amo=r(d0e," (Wav2Vec2-Conformer model)"),d0e.forEach(t),nmo=i(ee),Sh=n(ee,"LI",{});var c0e=s(Sh);Pne=n(c0e,"STRONG",{});var rKr=s(Pne);smo=r(rKr,"yolos"),rKr.forEach(t),lmo=r(c0e," \u2014 "),sI=n(c0e,"A",{href:!0});var tKr=s(sI);imo=r(tKr,"YolosFeatureExtractor"),tKr.forEach(t),dmo=r(c0e," (YOLOS model)"),c0e.forEach(t),ee.forEach(t),cmo=i(Zt),T(Rh.$$.fragment,Zt),fmo=i(Zt),T(Ph.$$.fragment,Zt),Zt.forEach(t),mmo=i(js),Bh=n(js,"DIV",{class:!0});var rDe=s(Bh);T(XA.$$.fragment,rDe),gmo=i(rDe),Bne=n(rDe,"P",{});var aKr=s(Bne);hmo=r(aKr,"Register a new feature extractor for this class."),aKr.forEach(t),rDe.forEach(t),js.forEach(t),oNe=i(f),Ei=n(f,"H2",{class:!0});var tDe=s(Ei);Ih=n(tDe,"A",{id:!0,class:!0,href:!0});var nKr=s(Ih);Ine=n(nKr,"SPAN",{});var sKr=s(Ine);T(zA.$$.fragment,sKr),sKr.forEach(t),nKr.forEach(t),pmo=i(tDe),qne=n(tDe,"SPAN",{});var lKr=s(qne);umo=r(lKr,"AutoProcessor"),lKr.forEach(t),tDe.forEach(t),rNe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(WA.$$.fragment,Ds),_mo=i(Ds),QA=n(Ds,"P",{});var aDe=s(QA);bmo=r(aDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lI=n(aDe,"A",{href:!0});var iKr=s(lI);vmo=r(iKr,"AutoProcessor.from_pretrained()"),iKr.forEach(t),Fmo=r(aDe," class method."),aDe.forEach(t),Tmo=i(Ds),HA=n(Ds,"P",{});var nDe=s(HA);Mmo=r(nDe,"This class cannot be instantiated directly using "),Nne=n(nDe,"CODE",{});var dKr=s(Nne);Emo=r(dKr,"__init__()"),dKr.forEach(t),Cmo=r(nDe," (throws an error)."),nDe.forEach(t),wmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(UA.$$.fragment,ea),Amo=i(ea),jne=n(ea,"P",{});var cKr=s(jne);ymo=r(cKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cKr.forEach(t),Lmo=i(ea),Ci=n(ea,"P",{});var cZ=s(Ci);xmo=r(cZ,"The processor class to instantiate is selected based on the "),Dne=n(cZ,"CODE",{});var fKr=s(Dne);$mo=r(fKr,"model_type"),fKr.forEach(t),kmo=r(cZ,` property of the config object (either
passed as an argument or loaded from `),Gne=n(cZ,"CODE",{});var mKr=s(Gne);Smo=r(mKr,"pretrained_model_name_or_path"),mKr.forEach(t),Rmo=r(cZ," if possible):"),cZ.forEach(t),Pmo=i(ea),he=n(ea,"UL",{});var _e=s(he);qh=n(_e,"LI",{});var f0e=s(qh);One=n(f0e,"STRONG",{});var gKr=s(One);Bmo=r(gKr,"clip"),gKr.forEach(t),Imo=r(f0e," \u2014 "),iI=n(f0e,"A",{href:!0});var hKr=s(iI);qmo=r(hKr,"CLIPProcessor"),hKr.forEach(t),Nmo=r(f0e," (CLIP model)"),f0e.forEach(t),jmo=i(_e),Nh=n(_e,"LI",{});var m0e=s(Nh);Vne=n(m0e,"STRONG",{});var pKr=s(Vne);Dmo=r(pKr,"flava"),pKr.forEach(t),Gmo=r(m0e," \u2014 "),Xne=n(m0e,"CODE",{});var uKr=s(Xne);Omo=r(uKr,"FLAVAProcessor"),uKr.forEach(t),Vmo=r(m0e," (Flava model)"),m0e.forEach(t),Xmo=i(_e),jh=n(_e,"LI",{});var g0e=s(jh);zne=n(g0e,"STRONG",{});var _Kr=s(zne);zmo=r(_Kr,"layoutlmv2"),_Kr.forEach(t),Wmo=r(g0e," \u2014 "),dI=n(g0e,"A",{href:!0});var bKr=s(dI);Qmo=r(bKr,"LayoutLMv2Processor"),bKr.forEach(t),Hmo=r(g0e," (LayoutLMv2 model)"),g0e.forEach(t),Umo=i(_e),Dh=n(_e,"LI",{});var h0e=s(Dh);Wne=n(h0e,"STRONG",{});var vKr=s(Wne);Jmo=r(vKr,"layoutlmv3"),vKr.forEach(t),Ymo=r(h0e," \u2014 "),cI=n(h0e,"A",{href:!0});var FKr=s(cI);Kmo=r(FKr,"LayoutLMv3Processor"),FKr.forEach(t),Zmo=r(h0e," (LayoutLMv3 model)"),h0e.forEach(t),ego=i(_e),Gh=n(_e,"LI",{});var p0e=s(Gh);Qne=n(p0e,"STRONG",{});var TKr=s(Qne);ogo=r(TKr,"layoutxlm"),TKr.forEach(t),rgo=r(p0e," \u2014 "),fI=n(p0e,"A",{href:!0});var MKr=s(fI);tgo=r(MKr,"LayoutXLMProcessor"),MKr.forEach(t),ago=r(p0e," (LayoutXLM model)"),p0e.forEach(t),ngo=i(_e),Oh=n(_e,"LI",{});var u0e=s(Oh);Hne=n(u0e,"STRONG",{});var EKr=s(Hne);sgo=r(EKr,"sew"),EKr.forEach(t),lgo=r(u0e," \u2014 "),mI=n(u0e,"A",{href:!0});var CKr=s(mI);igo=r(CKr,"Wav2Vec2Processor"),CKr.forEach(t),dgo=r(u0e," (SEW model)"),u0e.forEach(t),cgo=i(_e),Vh=n(_e,"LI",{});var _0e=s(Vh);Une=n(_0e,"STRONG",{});var wKr=s(Une);fgo=r(wKr,"sew-d"),wKr.forEach(t),mgo=r(_0e," \u2014 "),gI=n(_0e,"A",{href:!0});var AKr=s(gI);ggo=r(AKr,"Wav2Vec2Processor"),AKr.forEach(t),hgo=r(_0e," (SEW-D model)"),_0e.forEach(t),pgo=i(_e),Xh=n(_e,"LI",{});var b0e=s(Xh);Jne=n(b0e,"STRONG",{});var yKr=s(Jne);ugo=r(yKr,"speech_to_text"),yKr.forEach(t),_go=r(b0e," \u2014 "),hI=n(b0e,"A",{href:!0});var LKr=s(hI);bgo=r(LKr,"Speech2TextProcessor"),LKr.forEach(t),vgo=r(b0e," (Speech2Text model)"),b0e.forEach(t),Fgo=i(_e),zh=n(_e,"LI",{});var v0e=s(zh);Yne=n(v0e,"STRONG",{});var xKr=s(Yne);Tgo=r(xKr,"speech_to_text_2"),xKr.forEach(t),Mgo=r(v0e," \u2014 "),pI=n(v0e,"A",{href:!0});var $Kr=s(pI);Ego=r($Kr,"Speech2Text2Processor"),$Kr.forEach(t),Cgo=r(v0e," (Speech2Text2 model)"),v0e.forEach(t),wgo=i(_e),Wh=n(_e,"LI",{});var F0e=s(Wh);Kne=n(F0e,"STRONG",{});var kKr=s(Kne);Ago=r(kKr,"trocr"),kKr.forEach(t),ygo=r(F0e," \u2014 "),uI=n(F0e,"A",{href:!0});var SKr=s(uI);Lgo=r(SKr,"TrOCRProcessor"),SKr.forEach(t),xgo=r(F0e," (TrOCR model)"),F0e.forEach(t),$go=i(_e),Qh=n(_e,"LI",{});var T0e=s(Qh);Zne=n(T0e,"STRONG",{});var RKr=s(Zne);kgo=r(RKr,"unispeech"),RKr.forEach(t),Sgo=r(T0e," \u2014 "),_I=n(T0e,"A",{href:!0});var PKr=s(_I);Rgo=r(PKr,"Wav2Vec2Processor"),PKr.forEach(t),Pgo=r(T0e," (UniSpeech model)"),T0e.forEach(t),Bgo=i(_e),Hh=n(_e,"LI",{});var M0e=s(Hh);ese=n(M0e,"STRONG",{});var BKr=s(ese);Igo=r(BKr,"unispeech-sat"),BKr.forEach(t),qgo=r(M0e," \u2014 "),bI=n(M0e,"A",{href:!0});var IKr=s(bI);Ngo=r(IKr,"Wav2Vec2Processor"),IKr.forEach(t),jgo=r(M0e," (UniSpeechSat model)"),M0e.forEach(t),Dgo=i(_e),Uh=n(_e,"LI",{});var E0e=s(Uh);ose=n(E0e,"STRONG",{});var qKr=s(ose);Ggo=r(qKr,"vilt"),qKr.forEach(t),Ogo=r(E0e," \u2014 "),vI=n(E0e,"A",{href:!0});var NKr=s(vI);Vgo=r(NKr,"ViltProcessor"),NKr.forEach(t),Xgo=r(E0e," (ViLT model)"),E0e.forEach(t),zgo=i(_e),Jh=n(_e,"LI",{});var C0e=s(Jh);rse=n(C0e,"STRONG",{});var jKr=s(rse);Wgo=r(jKr,"vision-text-dual-encoder"),jKr.forEach(t),Qgo=r(C0e," \u2014 "),FI=n(C0e,"A",{href:!0});var DKr=s(FI);Hgo=r(DKr,"VisionTextDualEncoderProcessor"),DKr.forEach(t),Ugo=r(C0e," (VisionTextDualEncoder model)"),C0e.forEach(t),Jgo=i(_e),Yh=n(_e,"LI",{});var w0e=s(Yh);tse=n(w0e,"STRONG",{});var GKr=s(tse);Ygo=r(GKr,"wav2vec2"),GKr.forEach(t),Kgo=r(w0e," \u2014 "),TI=n(w0e,"A",{href:!0});var OKr=s(TI);Zgo=r(OKr,"Wav2Vec2Processor"),OKr.forEach(t),eho=r(w0e," (Wav2Vec2 model)"),w0e.forEach(t),oho=i(_e),Kh=n(_e,"LI",{});var A0e=s(Kh);ase=n(A0e,"STRONG",{});var VKr=s(ase);rho=r(VKr,"wav2vec2-conformer"),VKr.forEach(t),tho=r(A0e," \u2014 "),MI=n(A0e,"A",{href:!0});var XKr=s(MI);aho=r(XKr,"Wav2Vec2Processor"),XKr.forEach(t),nho=r(A0e," (Wav2Vec2-Conformer model)"),A0e.forEach(t),sho=i(_e),Zh=n(_e,"LI",{});var y0e=s(Zh);nse=n(y0e,"STRONG",{});var zKr=s(nse);lho=r(zKr,"wavlm"),zKr.forEach(t),iho=r(y0e," \u2014 "),EI=n(y0e,"A",{href:!0});var WKr=s(EI);dho=r(WKr,"Wav2Vec2Processor"),WKr.forEach(t),cho=r(y0e," (WavLM model)"),y0e.forEach(t),_e.forEach(t),fho=i(ea),T(ep.$$.fragment,ea),mho=i(ea),T(op.$$.fragment,ea),ea.forEach(t),gho=i(Ds),rp=n(Ds,"DIV",{class:!0});var sDe=s(rp);T(JA.$$.fragment,sDe),hho=i(sDe),sse=n(sDe,"P",{});var QKr=s(sse);pho=r(QKr,"Register a new processor for this class."),QKr.forEach(t),sDe.forEach(t),Ds.forEach(t),tNe=i(f),wi=n(f,"H2",{class:!0});var lDe=s(wi);tp=n(lDe,"A",{id:!0,class:!0,href:!0});var HKr=s(tp);lse=n(HKr,"SPAN",{});var UKr=s(lse);T(YA.$$.fragment,UKr),UKr.forEach(t),HKr.forEach(t),uho=i(lDe),ise=n(lDe,"SPAN",{});var JKr=s(ise);_ho=r(JKr,"AutoModel"),JKr.forEach(t),lDe.forEach(t),aNe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(KA.$$.fragment,Gs),bho=i(Gs),Ai=n(Gs,"P",{});var fZ=s(Ai);vho=r(fZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CI=n(fZ,"A",{href:!0});var YKr=s(CI);Fho=r(YKr,"from_pretrained()"),YKr.forEach(t),Tho=r(fZ," class method or the "),wI=n(fZ,"A",{href:!0});var KKr=s(wI);Mho=r(KKr,"from_config()"),KKr.forEach(t),Eho=r(fZ,` class
method.`),fZ.forEach(t),Cho=i(Gs),ZA=n(Gs,"P",{});var iDe=s(ZA);who=r(iDe,"This class cannot be instantiated directly using "),dse=n(iDe,"CODE",{});var ZKr=s(dse);Aho=r(ZKr,"__init__()"),ZKr.forEach(t),yho=r(iDe," (throws an error)."),iDe.forEach(t),Lho=i(Gs),tt=n(Gs,"DIV",{class:!0});var xw=s(tt);T(e6.$$.fragment,xw),xho=i(xw),cse=n(xw,"P",{});var eZr=s(cse);$ho=r(eZr,"Instantiates one of the base model classes of the library from a configuration."),eZr.forEach(t),kho=i(xw),yi=n(xw,"P",{});var mZ=s(yi);Sho=r(mZ,`Note:
Loading a model from its configuration file does `),fse=n(mZ,"STRONG",{});var oZr=s(fse);Rho=r(oZr,"not"),oZr.forEach(t),Pho=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AI=n(mZ,"A",{href:!0});var rZr=s(AI);Bho=r(rZr,"from_pretrained()"),rZr.forEach(t),Iho=r(mZ," to load the model weights."),mZ.forEach(t),qho=i(xw),T(ap.$$.fragment,xw),xw.forEach(t),Nho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(o6.$$.fragment,oa),jho=i(oa),mse=n(oa,"P",{});var tZr=s(mse);Dho=r(tZr,"Instantiate one of the base model classes of the library from a pretrained model."),tZr.forEach(t),Gho=i(oa),La=n(oa,"P",{});var $w=s(La);Oho=r($w,"The model class to instantiate is selected based on the "),gse=n($w,"CODE",{});var aZr=s(gse);Vho=r(aZr,"model_type"),aZr.forEach(t),Xho=r($w,` property of the config object (either
passed as an argument or loaded from `),hse=n($w,"CODE",{});var nZr=s(hse);zho=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),Who=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pse=n($w,"CODE",{});var sZr=s(pse);Qho=r(sZr,"pretrained_model_name_or_path"),sZr.forEach(t),Hho=r($w,":"),$w.forEach(t),Uho=i(oa),x=n(oa,"UL",{});var $=s(x);np=n($,"LI",{});var L0e=s(np);use=n(L0e,"STRONG",{});var lZr=s(use);Jho=r(lZr,"albert"),lZr.forEach(t),Yho=r(L0e," \u2014 "),yI=n(L0e,"A",{href:!0});var iZr=s(yI);Kho=r(iZr,"AlbertModel"),iZr.forEach(t),Zho=r(L0e," (ALBERT model)"),L0e.forEach(t),epo=i($),sp=n($,"LI",{});var x0e=s(sp);_se=n(x0e,"STRONG",{});var dZr=s(_se);opo=r(dZr,"bart"),dZr.forEach(t),rpo=r(x0e," \u2014 "),LI=n(x0e,"A",{href:!0});var cZr=s(LI);tpo=r(cZr,"BartModel"),cZr.forEach(t),apo=r(x0e," (BART model)"),x0e.forEach(t),npo=i($),lp=n($,"LI",{});var $0e=s(lp);bse=n($0e,"STRONG",{});var fZr=s(bse);spo=r(fZr,"beit"),fZr.forEach(t),lpo=r($0e," \u2014 "),xI=n($0e,"A",{href:!0});var mZr=s(xI);ipo=r(mZr,"BeitModel"),mZr.forEach(t),dpo=r($0e," (BEiT model)"),$0e.forEach(t),cpo=i($),ip=n($,"LI",{});var k0e=s(ip);vse=n(k0e,"STRONG",{});var gZr=s(vse);fpo=r(gZr,"bert"),gZr.forEach(t),mpo=r(k0e," \u2014 "),$I=n(k0e,"A",{href:!0});var hZr=s($I);gpo=r(hZr,"BertModel"),hZr.forEach(t),hpo=r(k0e," (BERT model)"),k0e.forEach(t),ppo=i($),dp=n($,"LI",{});var S0e=s(dp);Fse=n(S0e,"STRONG",{});var pZr=s(Fse);upo=r(pZr,"bert-generation"),pZr.forEach(t),_po=r(S0e," \u2014 "),kI=n(S0e,"A",{href:!0});var uZr=s(kI);bpo=r(uZr,"BertGenerationEncoder"),uZr.forEach(t),vpo=r(S0e," (Bert Generation model)"),S0e.forEach(t),Fpo=i($),cp=n($,"LI",{});var R0e=s(cp);Tse=n(R0e,"STRONG",{});var _Zr=s(Tse);Tpo=r(_Zr,"big_bird"),_Zr.forEach(t),Mpo=r(R0e," \u2014 "),SI=n(R0e,"A",{href:!0});var bZr=s(SI);Epo=r(bZr,"BigBirdModel"),bZr.forEach(t),Cpo=r(R0e," (BigBird model)"),R0e.forEach(t),wpo=i($),fp=n($,"LI",{});var P0e=s(fp);Mse=n(P0e,"STRONG",{});var vZr=s(Mse);Apo=r(vZr,"bigbird_pegasus"),vZr.forEach(t),ypo=r(P0e," \u2014 "),RI=n(P0e,"A",{href:!0});var FZr=s(RI);Lpo=r(FZr,"BigBirdPegasusModel"),FZr.forEach(t),xpo=r(P0e," (BigBirdPegasus model)"),P0e.forEach(t),$po=i($),mp=n($,"LI",{});var B0e=s(mp);Ese=n(B0e,"STRONG",{});var TZr=s(Ese);kpo=r(TZr,"blenderbot"),TZr.forEach(t),Spo=r(B0e," \u2014 "),PI=n(B0e,"A",{href:!0});var MZr=s(PI);Rpo=r(MZr,"BlenderbotModel"),MZr.forEach(t),Ppo=r(B0e," (Blenderbot model)"),B0e.forEach(t),Bpo=i($),gp=n($,"LI",{});var I0e=s(gp);Cse=n(I0e,"STRONG",{});var EZr=s(Cse);Ipo=r(EZr,"blenderbot-small"),EZr.forEach(t),qpo=r(I0e," \u2014 "),BI=n(I0e,"A",{href:!0});var CZr=s(BI);Npo=r(CZr,"BlenderbotSmallModel"),CZr.forEach(t),jpo=r(I0e," (BlenderbotSmall model)"),I0e.forEach(t),Dpo=i($),hp=n($,"LI",{});var q0e=s(hp);wse=n(q0e,"STRONG",{});var wZr=s(wse);Gpo=r(wZr,"camembert"),wZr.forEach(t),Opo=r(q0e," \u2014 "),II=n(q0e,"A",{href:!0});var AZr=s(II);Vpo=r(AZr,"CamembertModel"),AZr.forEach(t),Xpo=r(q0e," (CamemBERT model)"),q0e.forEach(t),zpo=i($),pp=n($,"LI",{});var N0e=s(pp);Ase=n(N0e,"STRONG",{});var yZr=s(Ase);Wpo=r(yZr,"canine"),yZr.forEach(t),Qpo=r(N0e," \u2014 "),qI=n(N0e,"A",{href:!0});var LZr=s(qI);Hpo=r(LZr,"CanineModel"),LZr.forEach(t),Upo=r(N0e," (Canine model)"),N0e.forEach(t),Jpo=i($),up=n($,"LI",{});var j0e=s(up);yse=n(j0e,"STRONG",{});var xZr=s(yse);Ypo=r(xZr,"clip"),xZr.forEach(t),Kpo=r(j0e," \u2014 "),NI=n(j0e,"A",{href:!0});var $Zr=s(NI);Zpo=r($Zr,"CLIPModel"),$Zr.forEach(t),euo=r(j0e," (CLIP model)"),j0e.forEach(t),ouo=i($),_p=n($,"LI",{});var D0e=s(_p);Lse=n(D0e,"STRONG",{});var kZr=s(Lse);ruo=r(kZr,"convbert"),kZr.forEach(t),tuo=r(D0e," \u2014 "),jI=n(D0e,"A",{href:!0});var SZr=s(jI);auo=r(SZr,"ConvBertModel"),SZr.forEach(t),nuo=r(D0e," (ConvBERT model)"),D0e.forEach(t),suo=i($),bp=n($,"LI",{});var G0e=s(bp);xse=n(G0e,"STRONG",{});var RZr=s(xse);luo=r(RZr,"convnext"),RZr.forEach(t),iuo=r(G0e," \u2014 "),DI=n(G0e,"A",{href:!0});var PZr=s(DI);duo=r(PZr,"ConvNextModel"),PZr.forEach(t),cuo=r(G0e," (ConvNext model)"),G0e.forEach(t),fuo=i($),vp=n($,"LI",{});var O0e=s(vp);$se=n(O0e,"STRONG",{});var BZr=s($se);muo=r(BZr,"ctrl"),BZr.forEach(t),guo=r(O0e," \u2014 "),GI=n(O0e,"A",{href:!0});var IZr=s(GI);huo=r(IZr,"CTRLModel"),IZr.forEach(t),puo=r(O0e," (CTRL model)"),O0e.forEach(t),uuo=i($),Fp=n($,"LI",{});var V0e=s(Fp);kse=n(V0e,"STRONG",{});var qZr=s(kse);_uo=r(qZr,"cvt"),qZr.forEach(t),buo=r(V0e," \u2014 "),OI=n(V0e,"A",{href:!0});var NZr=s(OI);vuo=r(NZr,"CvtModel"),NZr.forEach(t),Fuo=r(V0e," (CvT model)"),V0e.forEach(t),Tuo=i($),Tp=n($,"LI",{});var X0e=s(Tp);Sse=n(X0e,"STRONG",{});var jZr=s(Sse);Muo=r(jZr,"data2vec-audio"),jZr.forEach(t),Euo=r(X0e," \u2014 "),VI=n(X0e,"A",{href:!0});var DZr=s(VI);Cuo=r(DZr,"Data2VecAudioModel"),DZr.forEach(t),wuo=r(X0e," (Data2VecAudio model)"),X0e.forEach(t),Auo=i($),Mp=n($,"LI",{});var z0e=s(Mp);Rse=n(z0e,"STRONG",{});var GZr=s(Rse);yuo=r(GZr,"data2vec-text"),GZr.forEach(t),Luo=r(z0e," \u2014 "),XI=n(z0e,"A",{href:!0});var OZr=s(XI);xuo=r(OZr,"Data2VecTextModel"),OZr.forEach(t),$uo=r(z0e," (Data2VecText model)"),z0e.forEach(t),kuo=i($),Ep=n($,"LI",{});var W0e=s(Ep);Pse=n(W0e,"STRONG",{});var VZr=s(Pse);Suo=r(VZr,"data2vec-vision"),VZr.forEach(t),Ruo=r(W0e," \u2014 "),zI=n(W0e,"A",{href:!0});var XZr=s(zI);Puo=r(XZr,"Data2VecVisionModel"),XZr.forEach(t),Buo=r(W0e," (Data2VecVision model)"),W0e.forEach(t),Iuo=i($),Cp=n($,"LI",{});var Q0e=s(Cp);Bse=n(Q0e,"STRONG",{});var zZr=s(Bse);quo=r(zZr,"deberta"),zZr.forEach(t),Nuo=r(Q0e," \u2014 "),WI=n(Q0e,"A",{href:!0});var WZr=s(WI);juo=r(WZr,"DebertaModel"),WZr.forEach(t),Duo=r(Q0e," (DeBERTa model)"),Q0e.forEach(t),Guo=i($),wp=n($,"LI",{});var H0e=s(wp);Ise=n(H0e,"STRONG",{});var QZr=s(Ise);Ouo=r(QZr,"deberta-v2"),QZr.forEach(t),Vuo=r(H0e," \u2014 "),QI=n(H0e,"A",{href:!0});var HZr=s(QI);Xuo=r(HZr,"DebertaV2Model"),HZr.forEach(t),zuo=r(H0e," (DeBERTa-v2 model)"),H0e.forEach(t),Wuo=i($),Ap=n($,"LI",{});var U0e=s(Ap);qse=n(U0e,"STRONG",{});var UZr=s(qse);Quo=r(UZr,"decision_transformer"),UZr.forEach(t),Huo=r(U0e," \u2014 "),HI=n(U0e,"A",{href:!0});var JZr=s(HI);Uuo=r(JZr,"DecisionTransformerModel"),JZr.forEach(t),Juo=r(U0e," (Decision Transformer model)"),U0e.forEach(t),Yuo=i($),yp=n($,"LI",{});var J0e=s(yp);Nse=n(J0e,"STRONG",{});var YZr=s(Nse);Kuo=r(YZr,"deit"),YZr.forEach(t),Zuo=r(J0e," \u2014 "),UI=n(J0e,"A",{href:!0});var KZr=s(UI);e_o=r(KZr,"DeiTModel"),KZr.forEach(t),o_o=r(J0e," (DeiT model)"),J0e.forEach(t),r_o=i($),Lp=n($,"LI",{});var Y0e=s(Lp);jse=n(Y0e,"STRONG",{});var ZZr=s(jse);t_o=r(ZZr,"detr"),ZZr.forEach(t),a_o=r(Y0e," \u2014 "),JI=n(Y0e,"A",{href:!0});var eet=s(JI);n_o=r(eet,"DetrModel"),eet.forEach(t),s_o=r(Y0e," (DETR model)"),Y0e.forEach(t),l_o=i($),xp=n($,"LI",{});var K0e=s(xp);Dse=n(K0e,"STRONG",{});var oet=s(Dse);i_o=r(oet,"distilbert"),oet.forEach(t),d_o=r(K0e," \u2014 "),YI=n(K0e,"A",{href:!0});var ret=s(YI);c_o=r(ret,"DistilBertModel"),ret.forEach(t),f_o=r(K0e," (DistilBERT model)"),K0e.forEach(t),m_o=i($),$p=n($,"LI",{});var Z0e=s($p);Gse=n(Z0e,"STRONG",{});var tet=s(Gse);g_o=r(tet,"dpr"),tet.forEach(t),h_o=r(Z0e," \u2014 "),KI=n(Z0e,"A",{href:!0});var aet=s(KI);p_o=r(aet,"DPRQuestionEncoder"),aet.forEach(t),u_o=r(Z0e," (DPR model)"),Z0e.forEach(t),__o=i($),kp=n($,"LI",{});var eAe=s(kp);Ose=n(eAe,"STRONG",{});var net=s(Ose);b_o=r(net,"dpt"),net.forEach(t),v_o=r(eAe," \u2014 "),ZI=n(eAe,"A",{href:!0});var set=s(ZI);F_o=r(set,"DPTModel"),set.forEach(t),T_o=r(eAe," (DPT model)"),eAe.forEach(t),M_o=i($),Sp=n($,"LI",{});var oAe=s(Sp);Vse=n(oAe,"STRONG",{});var iet=s(Vse);E_o=r(iet,"electra"),iet.forEach(t),C_o=r(oAe," \u2014 "),eq=n(oAe,"A",{href:!0});var det=s(eq);w_o=r(det,"ElectraModel"),det.forEach(t),A_o=r(oAe," (ELECTRA model)"),oAe.forEach(t),y_o=i($),Rp=n($,"LI",{});var rAe=s(Rp);Xse=n(rAe,"STRONG",{});var cet=s(Xse);L_o=r(cet,"flaubert"),cet.forEach(t),x_o=r(rAe," \u2014 "),oq=n(rAe,"A",{href:!0});var fet=s(oq);$_o=r(fet,"FlaubertModel"),fet.forEach(t),k_o=r(rAe," (FlauBERT model)"),rAe.forEach(t),S_o=i($),Pp=n($,"LI",{});var tAe=s(Pp);zse=n(tAe,"STRONG",{});var met=s(zse);R_o=r(met,"flava"),met.forEach(t),P_o=r(tAe," \u2014 "),rq=n(tAe,"A",{href:!0});var get=s(rq);B_o=r(get,"FlavaModel"),get.forEach(t),I_o=r(tAe," (Flava model)"),tAe.forEach(t),q_o=i($),Bp=n($,"LI",{});var aAe=s(Bp);Wse=n(aAe,"STRONG",{});var het=s(Wse);N_o=r(het,"fnet"),het.forEach(t),j_o=r(aAe," \u2014 "),tq=n(aAe,"A",{href:!0});var pet=s(tq);D_o=r(pet,"FNetModel"),pet.forEach(t),G_o=r(aAe," (FNet model)"),aAe.forEach(t),O_o=i($),Ip=n($,"LI",{});var nAe=s(Ip);Qse=n(nAe,"STRONG",{});var uet=s(Qse);V_o=r(uet,"fsmt"),uet.forEach(t),X_o=r(nAe," \u2014 "),aq=n(nAe,"A",{href:!0});var _et=s(aq);z_o=r(_et,"FSMTModel"),_et.forEach(t),W_o=r(nAe," (FairSeq Machine-Translation model)"),nAe.forEach(t),Q_o=i($),Ps=n($,"LI",{});var D$=s(Ps);Hse=n(D$,"STRONG",{});var bet=s(Hse);H_o=r(bet,"funnel"),bet.forEach(t),U_o=r(D$," \u2014 "),nq=n(D$,"A",{href:!0});var vet=s(nq);J_o=r(vet,"FunnelModel"),vet.forEach(t),Y_o=r(D$," or "),sq=n(D$,"A",{href:!0});var Fet=s(sq);K_o=r(Fet,"FunnelBaseModel"),Fet.forEach(t),Z_o=r(D$," (Funnel Transformer model)"),D$.forEach(t),e1o=i($),qp=n($,"LI",{});var sAe=s(qp);Use=n(sAe,"STRONG",{});var Tet=s(Use);o1o=r(Tet,"glpn"),Tet.forEach(t),r1o=r(sAe," \u2014 "),lq=n(sAe,"A",{href:!0});var Met=s(lq);t1o=r(Met,"GLPNModel"),Met.forEach(t),a1o=r(sAe," (GLPN model)"),sAe.forEach(t),n1o=i($),Np=n($,"LI",{});var lAe=s(Np);Jse=n(lAe,"STRONG",{});var Eet=s(Jse);s1o=r(Eet,"gpt2"),Eet.forEach(t),l1o=r(lAe," \u2014 "),iq=n(lAe,"A",{href:!0});var Cet=s(iq);i1o=r(Cet,"GPT2Model"),Cet.forEach(t),d1o=r(lAe," (OpenAI GPT-2 model)"),lAe.forEach(t),c1o=i($),jp=n($,"LI",{});var iAe=s(jp);Yse=n(iAe,"STRONG",{});var wet=s(Yse);f1o=r(wet,"gpt_neo"),wet.forEach(t),m1o=r(iAe," \u2014 "),dq=n(iAe,"A",{href:!0});var Aet=s(dq);g1o=r(Aet,"GPTNeoModel"),Aet.forEach(t),h1o=r(iAe," (GPT Neo model)"),iAe.forEach(t),p1o=i($),Dp=n($,"LI",{});var dAe=s(Dp);Kse=n(dAe,"STRONG",{});var yet=s(Kse);u1o=r(yet,"gptj"),yet.forEach(t),_1o=r(dAe," \u2014 "),cq=n(dAe,"A",{href:!0});var Let=s(cq);b1o=r(Let,"GPTJModel"),Let.forEach(t),v1o=r(dAe," (GPT-J model)"),dAe.forEach(t),F1o=i($),Gp=n($,"LI",{});var cAe=s(Gp);Zse=n(cAe,"STRONG",{});var xet=s(Zse);T1o=r(xet,"hubert"),xet.forEach(t),M1o=r(cAe," \u2014 "),fq=n(cAe,"A",{href:!0});var $et=s(fq);E1o=r($et,"HubertModel"),$et.forEach(t),C1o=r(cAe," (Hubert model)"),cAe.forEach(t),w1o=i($),Op=n($,"LI",{});var fAe=s(Op);ele=n(fAe,"STRONG",{});var ket=s(ele);A1o=r(ket,"ibert"),ket.forEach(t),y1o=r(fAe," \u2014 "),mq=n(fAe,"A",{href:!0});var Set=s(mq);L1o=r(Set,"IBertModel"),Set.forEach(t),x1o=r(fAe," (I-BERT model)"),fAe.forEach(t),$1o=i($),Vp=n($,"LI",{});var mAe=s(Vp);ole=n(mAe,"STRONG",{});var Ret=s(ole);k1o=r(Ret,"imagegpt"),Ret.forEach(t),S1o=r(mAe," \u2014 "),gq=n(mAe,"A",{href:!0});var Pet=s(gq);R1o=r(Pet,"ImageGPTModel"),Pet.forEach(t),P1o=r(mAe," (ImageGPT model)"),mAe.forEach(t),B1o=i($),Xp=n($,"LI",{});var gAe=s(Xp);rle=n(gAe,"STRONG",{});var Bet=s(rle);I1o=r(Bet,"layoutlm"),Bet.forEach(t),q1o=r(gAe," \u2014 "),hq=n(gAe,"A",{href:!0});var Iet=s(hq);N1o=r(Iet,"LayoutLMModel"),Iet.forEach(t),j1o=r(gAe," (LayoutLM model)"),gAe.forEach(t),D1o=i($),zp=n($,"LI",{});var hAe=s(zp);tle=n(hAe,"STRONG",{});var qet=s(tle);G1o=r(qet,"layoutlmv2"),qet.forEach(t),O1o=r(hAe," \u2014 "),pq=n(hAe,"A",{href:!0});var Net=s(pq);V1o=r(Net,"LayoutLMv2Model"),Net.forEach(t),X1o=r(hAe," (LayoutLMv2 model)"),hAe.forEach(t),z1o=i($),Wp=n($,"LI",{});var pAe=s(Wp);ale=n(pAe,"STRONG",{});var jet=s(ale);W1o=r(jet,"layoutlmv3"),jet.forEach(t),Q1o=r(pAe," \u2014 "),uq=n(pAe,"A",{href:!0});var Det=s(uq);H1o=r(Det,"LayoutLMv3Model"),Det.forEach(t),U1o=r(pAe," (LayoutLMv3 model)"),pAe.forEach(t),J1o=i($),Qp=n($,"LI",{});var uAe=s(Qp);nle=n(uAe,"STRONG",{});var Get=s(nle);Y1o=r(Get,"led"),Get.forEach(t),K1o=r(uAe," \u2014 "),_q=n(uAe,"A",{href:!0});var Oet=s(_q);Z1o=r(Oet,"LEDModel"),Oet.forEach(t),e8o=r(uAe," (LED model)"),uAe.forEach(t),o8o=i($),Hp=n($,"LI",{});var _Ae=s(Hp);sle=n(_Ae,"STRONG",{});var Vet=s(sle);r8o=r(Vet,"longformer"),Vet.forEach(t),t8o=r(_Ae," \u2014 "),bq=n(_Ae,"A",{href:!0});var Xet=s(bq);a8o=r(Xet,"LongformerModel"),Xet.forEach(t),n8o=r(_Ae," (Longformer model)"),_Ae.forEach(t),s8o=i($),Up=n($,"LI",{});var bAe=s(Up);lle=n(bAe,"STRONG",{});var zet=s(lle);l8o=r(zet,"luke"),zet.forEach(t),i8o=r(bAe," \u2014 "),vq=n(bAe,"A",{href:!0});var Wet=s(vq);d8o=r(Wet,"LukeModel"),Wet.forEach(t),c8o=r(bAe," (LUKE model)"),bAe.forEach(t),f8o=i($),Jp=n($,"LI",{});var vAe=s(Jp);ile=n(vAe,"STRONG",{});var Qet=s(ile);m8o=r(Qet,"lxmert"),Qet.forEach(t),g8o=r(vAe," \u2014 "),Fq=n(vAe,"A",{href:!0});var Het=s(Fq);h8o=r(Het,"LxmertModel"),Het.forEach(t),p8o=r(vAe," (LXMERT model)"),vAe.forEach(t),u8o=i($),Yp=n($,"LI",{});var FAe=s(Yp);dle=n(FAe,"STRONG",{});var Uet=s(dle);_8o=r(Uet,"m2m_100"),Uet.forEach(t),b8o=r(FAe," \u2014 "),Tq=n(FAe,"A",{href:!0});var Jet=s(Tq);v8o=r(Jet,"M2M100Model"),Jet.forEach(t),F8o=r(FAe," (M2M100 model)"),FAe.forEach(t),T8o=i($),Kp=n($,"LI",{});var TAe=s(Kp);cle=n(TAe,"STRONG",{});var Yet=s(cle);M8o=r(Yet,"marian"),Yet.forEach(t),E8o=r(TAe," \u2014 "),Mq=n(TAe,"A",{href:!0});var Ket=s(Mq);C8o=r(Ket,"MarianModel"),Ket.forEach(t),w8o=r(TAe," (Marian model)"),TAe.forEach(t),A8o=i($),Zp=n($,"LI",{});var MAe=s(Zp);fle=n(MAe,"STRONG",{});var Zet=s(fle);y8o=r(Zet,"maskformer"),Zet.forEach(t),L8o=r(MAe," \u2014 "),Eq=n(MAe,"A",{href:!0});var eot=s(Eq);x8o=r(eot,"MaskFormerModel"),eot.forEach(t),$8o=r(MAe," (MaskFormer model)"),MAe.forEach(t),k8o=i($),eu=n($,"LI",{});var EAe=s(eu);mle=n(EAe,"STRONG",{});var oot=s(mle);S8o=r(oot,"mbart"),oot.forEach(t),R8o=r(EAe," \u2014 "),Cq=n(EAe,"A",{href:!0});var rot=s(Cq);P8o=r(rot,"MBartModel"),rot.forEach(t),B8o=r(EAe," (mBART model)"),EAe.forEach(t),I8o=i($),ou=n($,"LI",{});var CAe=s(ou);gle=n(CAe,"STRONG",{});var tot=s(gle);q8o=r(tot,"megatron-bert"),tot.forEach(t),N8o=r(CAe," \u2014 "),wq=n(CAe,"A",{href:!0});var aot=s(wq);j8o=r(aot,"MegatronBertModel"),aot.forEach(t),D8o=r(CAe," (MegatronBert model)"),CAe.forEach(t),G8o=i($),ru=n($,"LI",{});var wAe=s(ru);hle=n(wAe,"STRONG",{});var not=s(hle);O8o=r(not,"mobilebert"),not.forEach(t),V8o=r(wAe," \u2014 "),Aq=n(wAe,"A",{href:!0});var sot=s(Aq);X8o=r(sot,"MobileBertModel"),sot.forEach(t),z8o=r(wAe," (MobileBERT model)"),wAe.forEach(t),W8o=i($),tu=n($,"LI",{});var AAe=s(tu);ple=n(AAe,"STRONG",{});var lot=s(ple);Q8o=r(lot,"mpnet"),lot.forEach(t),H8o=r(AAe," \u2014 "),yq=n(AAe,"A",{href:!0});var iot=s(yq);U8o=r(iot,"MPNetModel"),iot.forEach(t),J8o=r(AAe," (MPNet model)"),AAe.forEach(t),Y8o=i($),au=n($,"LI",{});var yAe=s(au);ule=n(yAe,"STRONG",{});var dot=s(ule);K8o=r(dot,"mt5"),dot.forEach(t),Z8o=r(yAe," \u2014 "),Lq=n(yAe,"A",{href:!0});var cot=s(Lq);ebo=r(cot,"MT5Model"),cot.forEach(t),obo=r(yAe," (mT5 model)"),yAe.forEach(t),rbo=i($),nu=n($,"LI",{});var LAe=s(nu);_le=n(LAe,"STRONG",{});var fot=s(_le);tbo=r(fot,"nystromformer"),fot.forEach(t),abo=r(LAe," \u2014 "),xq=n(LAe,"A",{href:!0});var mot=s(xq);nbo=r(mot,"NystromformerModel"),mot.forEach(t),sbo=r(LAe," (Nystromformer model)"),LAe.forEach(t),lbo=i($),su=n($,"LI",{});var xAe=s(su);ble=n(xAe,"STRONG",{});var got=s(ble);ibo=r(got,"openai-gpt"),got.forEach(t),dbo=r(xAe," \u2014 "),$q=n(xAe,"A",{href:!0});var hot=s($q);cbo=r(hot,"OpenAIGPTModel"),hot.forEach(t),fbo=r(xAe," (OpenAI GPT model)"),xAe.forEach(t),mbo=i($),lu=n($,"LI",{});var $Ae=s(lu);vle=n($Ae,"STRONG",{});var pot=s(vle);gbo=r(pot,"opt"),pot.forEach(t),hbo=r($Ae," \u2014 "),kq=n($Ae,"A",{href:!0});var uot=s(kq);pbo=r(uot,"OPTModel"),uot.forEach(t),ubo=r($Ae," (OPT model)"),$Ae.forEach(t),_bo=i($),iu=n($,"LI",{});var kAe=s(iu);Fle=n(kAe,"STRONG",{});var _ot=s(Fle);bbo=r(_ot,"pegasus"),_ot.forEach(t),vbo=r(kAe," \u2014 "),Sq=n(kAe,"A",{href:!0});var bot=s(Sq);Fbo=r(bot,"PegasusModel"),bot.forEach(t),Tbo=r(kAe," (Pegasus model)"),kAe.forEach(t),Mbo=i($),du=n($,"LI",{});var SAe=s(du);Tle=n(SAe,"STRONG",{});var vot=s(Tle);Ebo=r(vot,"perceiver"),vot.forEach(t),Cbo=r(SAe," \u2014 "),Rq=n(SAe,"A",{href:!0});var Fot=s(Rq);wbo=r(Fot,"PerceiverModel"),Fot.forEach(t),Abo=r(SAe," (Perceiver model)"),SAe.forEach(t),ybo=i($),cu=n($,"LI",{});var RAe=s(cu);Mle=n(RAe,"STRONG",{});var Tot=s(Mle);Lbo=r(Tot,"plbart"),Tot.forEach(t),xbo=r(RAe," \u2014 "),Pq=n(RAe,"A",{href:!0});var Mot=s(Pq);$bo=r(Mot,"PLBartModel"),Mot.forEach(t),kbo=r(RAe," (PLBart model)"),RAe.forEach(t),Sbo=i($),fu=n($,"LI",{});var PAe=s(fu);Ele=n(PAe,"STRONG",{});var Eot=s(Ele);Rbo=r(Eot,"poolformer"),Eot.forEach(t),Pbo=r(PAe," \u2014 "),Bq=n(PAe,"A",{href:!0});var Cot=s(Bq);Bbo=r(Cot,"PoolFormerModel"),Cot.forEach(t),Ibo=r(PAe," (PoolFormer model)"),PAe.forEach(t),qbo=i($),mu=n($,"LI",{});var BAe=s(mu);Cle=n(BAe,"STRONG",{});var wot=s(Cle);Nbo=r(wot,"prophetnet"),wot.forEach(t),jbo=r(BAe," \u2014 "),Iq=n(BAe,"A",{href:!0});var Aot=s(Iq);Dbo=r(Aot,"ProphetNetModel"),Aot.forEach(t),Gbo=r(BAe," (ProphetNet model)"),BAe.forEach(t),Obo=i($),gu=n($,"LI",{});var IAe=s(gu);wle=n(IAe,"STRONG",{});var yot=s(wle);Vbo=r(yot,"qdqbert"),yot.forEach(t),Xbo=r(IAe," \u2014 "),qq=n(IAe,"A",{href:!0});var Lot=s(qq);zbo=r(Lot,"QDQBertModel"),Lot.forEach(t),Wbo=r(IAe," (QDQBert model)"),IAe.forEach(t),Qbo=i($),hu=n($,"LI",{});var qAe=s(hu);Ale=n(qAe,"STRONG",{});var xot=s(Ale);Hbo=r(xot,"reformer"),xot.forEach(t),Ubo=r(qAe," \u2014 "),Nq=n(qAe,"A",{href:!0});var $ot=s(Nq);Jbo=r($ot,"ReformerModel"),$ot.forEach(t),Ybo=r(qAe," (Reformer model)"),qAe.forEach(t),Kbo=i($),pu=n($,"LI",{});var NAe=s(pu);yle=n(NAe,"STRONG",{});var kot=s(yle);Zbo=r(kot,"regnet"),kot.forEach(t),e2o=r(NAe," \u2014 "),jq=n(NAe,"A",{href:!0});var Sot=s(jq);o2o=r(Sot,"RegNetModel"),Sot.forEach(t),r2o=r(NAe," (RegNet model)"),NAe.forEach(t),t2o=i($),uu=n($,"LI",{});var jAe=s(uu);Lle=n(jAe,"STRONG",{});var Rot=s(Lle);a2o=r(Rot,"rembert"),Rot.forEach(t),n2o=r(jAe," \u2014 "),Dq=n(jAe,"A",{href:!0});var Pot=s(Dq);s2o=r(Pot,"RemBertModel"),Pot.forEach(t),l2o=r(jAe," (RemBERT model)"),jAe.forEach(t),i2o=i($),_u=n($,"LI",{});var DAe=s(_u);xle=n(DAe,"STRONG",{});var Bot=s(xle);d2o=r(Bot,"resnet"),Bot.forEach(t),c2o=r(DAe," \u2014 "),Gq=n(DAe,"A",{href:!0});var Iot=s(Gq);f2o=r(Iot,"ResNetModel"),Iot.forEach(t),m2o=r(DAe," (ResNet model)"),DAe.forEach(t),g2o=i($),bu=n($,"LI",{});var GAe=s(bu);$le=n(GAe,"STRONG",{});var qot=s($le);h2o=r(qot,"retribert"),qot.forEach(t),p2o=r(GAe," \u2014 "),Oq=n(GAe,"A",{href:!0});var Not=s(Oq);u2o=r(Not,"RetriBertModel"),Not.forEach(t),_2o=r(GAe," (RetriBERT model)"),GAe.forEach(t),b2o=i($),vu=n($,"LI",{});var OAe=s(vu);kle=n(OAe,"STRONG",{});var jot=s(kle);v2o=r(jot,"roberta"),jot.forEach(t),F2o=r(OAe," \u2014 "),Vq=n(OAe,"A",{href:!0});var Dot=s(Vq);T2o=r(Dot,"RobertaModel"),Dot.forEach(t),M2o=r(OAe," (RoBERTa model)"),OAe.forEach(t),E2o=i($),Fu=n($,"LI",{});var VAe=s(Fu);Sle=n(VAe,"STRONG",{});var Got=s(Sle);C2o=r(Got,"roformer"),Got.forEach(t),w2o=r(VAe," \u2014 "),Xq=n(VAe,"A",{href:!0});var Oot=s(Xq);A2o=r(Oot,"RoFormerModel"),Oot.forEach(t),y2o=r(VAe," (RoFormer model)"),VAe.forEach(t),L2o=i($),Tu=n($,"LI",{});var XAe=s(Tu);Rle=n(XAe,"STRONG",{});var Vot=s(Rle);x2o=r(Vot,"segformer"),Vot.forEach(t),$2o=r(XAe," \u2014 "),zq=n(XAe,"A",{href:!0});var Xot=s(zq);k2o=r(Xot,"SegformerModel"),Xot.forEach(t),S2o=r(XAe," (SegFormer model)"),XAe.forEach(t),R2o=i($),Mu=n($,"LI",{});var zAe=s(Mu);Ple=n(zAe,"STRONG",{});var zot=s(Ple);P2o=r(zot,"sew"),zot.forEach(t),B2o=r(zAe," \u2014 "),Wq=n(zAe,"A",{href:!0});var Wot=s(Wq);I2o=r(Wot,"SEWModel"),Wot.forEach(t),q2o=r(zAe," (SEW model)"),zAe.forEach(t),N2o=i($),Eu=n($,"LI",{});var WAe=s(Eu);Ble=n(WAe,"STRONG",{});var Qot=s(Ble);j2o=r(Qot,"sew-d"),Qot.forEach(t),D2o=r(WAe," \u2014 "),Qq=n(WAe,"A",{href:!0});var Hot=s(Qq);G2o=r(Hot,"SEWDModel"),Hot.forEach(t),O2o=r(WAe," (SEW-D model)"),WAe.forEach(t),V2o=i($),Cu=n($,"LI",{});var QAe=s(Cu);Ile=n(QAe,"STRONG",{});var Uot=s(Ile);X2o=r(Uot,"speech_to_text"),Uot.forEach(t),z2o=r(QAe," \u2014 "),Hq=n(QAe,"A",{href:!0});var Jot=s(Hq);W2o=r(Jot,"Speech2TextModel"),Jot.forEach(t),Q2o=r(QAe," (Speech2Text model)"),QAe.forEach(t),H2o=i($),wu=n($,"LI",{});var HAe=s(wu);qle=n(HAe,"STRONG",{});var Yot=s(qle);U2o=r(Yot,"splinter"),Yot.forEach(t),J2o=r(HAe," \u2014 "),Uq=n(HAe,"A",{href:!0});var Kot=s(Uq);Y2o=r(Kot,"SplinterModel"),Kot.forEach(t),K2o=r(HAe," (Splinter model)"),HAe.forEach(t),Z2o=i($),Au=n($,"LI",{});var UAe=s(Au);Nle=n(UAe,"STRONG",{});var Zot=s(Nle);evo=r(Zot,"squeezebert"),Zot.forEach(t),ovo=r(UAe," \u2014 "),Jq=n(UAe,"A",{href:!0});var ert=s(Jq);rvo=r(ert,"SqueezeBertModel"),ert.forEach(t),tvo=r(UAe," (SqueezeBERT model)"),UAe.forEach(t),avo=i($),yu=n($,"LI",{});var JAe=s(yu);jle=n(JAe,"STRONG",{});var ort=s(jle);nvo=r(ort,"swin"),ort.forEach(t),svo=r(JAe," \u2014 "),Yq=n(JAe,"A",{href:!0});var rrt=s(Yq);lvo=r(rrt,"SwinModel"),rrt.forEach(t),ivo=r(JAe," (Swin model)"),JAe.forEach(t),dvo=i($),Lu=n($,"LI",{});var YAe=s(Lu);Dle=n(YAe,"STRONG",{});var trt=s(Dle);cvo=r(trt,"t5"),trt.forEach(t),fvo=r(YAe," \u2014 "),Kq=n(YAe,"A",{href:!0});var art=s(Kq);mvo=r(art,"T5Model"),art.forEach(t),gvo=r(YAe," (T5 model)"),YAe.forEach(t),hvo=i($),xu=n($,"LI",{});var KAe=s(xu);Gle=n(KAe,"STRONG",{});var nrt=s(Gle);pvo=r(nrt,"tapas"),nrt.forEach(t),uvo=r(KAe," \u2014 "),Zq=n(KAe,"A",{href:!0});var srt=s(Zq);_vo=r(srt,"TapasModel"),srt.forEach(t),bvo=r(KAe," (TAPAS model)"),KAe.forEach(t),vvo=i($),$u=n($,"LI",{});var ZAe=s($u);Ole=n(ZAe,"STRONG",{});var lrt=s(Ole);Fvo=r(lrt,"trajectory_transformer"),lrt.forEach(t),Tvo=r(ZAe," \u2014 "),eN=n(ZAe,"A",{href:!0});var irt=s(eN);Mvo=r(irt,"TrajectoryTransformerModel"),irt.forEach(t),Evo=r(ZAe," (Trajectory Transformer model)"),ZAe.forEach(t),Cvo=i($),ku=n($,"LI",{});var e6e=s(ku);Vle=n(e6e,"STRONG",{});var drt=s(Vle);wvo=r(drt,"transfo-xl"),drt.forEach(t),Avo=r(e6e," \u2014 "),oN=n(e6e,"A",{href:!0});var crt=s(oN);yvo=r(crt,"TransfoXLModel"),crt.forEach(t),Lvo=r(e6e," (Transformer-XL model)"),e6e.forEach(t),xvo=i($),Su=n($,"LI",{});var o6e=s(Su);Xle=n(o6e,"STRONG",{});var frt=s(Xle);$vo=r(frt,"unispeech"),frt.forEach(t),kvo=r(o6e," \u2014 "),rN=n(o6e,"A",{href:!0});var mrt=s(rN);Svo=r(mrt,"UniSpeechModel"),mrt.forEach(t),Rvo=r(o6e," (UniSpeech model)"),o6e.forEach(t),Pvo=i($),Ru=n($,"LI",{});var r6e=s(Ru);zle=n(r6e,"STRONG",{});var grt=s(zle);Bvo=r(grt,"unispeech-sat"),grt.forEach(t),Ivo=r(r6e," \u2014 "),tN=n(r6e,"A",{href:!0});var hrt=s(tN);qvo=r(hrt,"UniSpeechSatModel"),hrt.forEach(t),Nvo=r(r6e," (UniSpeechSat model)"),r6e.forEach(t),jvo=i($),Pu=n($,"LI",{});var t6e=s(Pu);Wle=n(t6e,"STRONG",{});var prt=s(Wle);Dvo=r(prt,"van"),prt.forEach(t),Gvo=r(t6e," \u2014 "),aN=n(t6e,"A",{href:!0});var urt=s(aN);Ovo=r(urt,"VanModel"),urt.forEach(t),Vvo=r(t6e," (VAN model)"),t6e.forEach(t),Xvo=i($),Bu=n($,"LI",{});var a6e=s(Bu);Qle=n(a6e,"STRONG",{});var _rt=s(Qle);zvo=r(_rt,"vilt"),_rt.forEach(t),Wvo=r(a6e," \u2014 "),nN=n(a6e,"A",{href:!0});var brt=s(nN);Qvo=r(brt,"ViltModel"),brt.forEach(t),Hvo=r(a6e," (ViLT model)"),a6e.forEach(t),Uvo=i($),Iu=n($,"LI",{});var n6e=s(Iu);Hle=n(n6e,"STRONG",{});var vrt=s(Hle);Jvo=r(vrt,"vision-text-dual-encoder"),vrt.forEach(t),Yvo=r(n6e," \u2014 "),sN=n(n6e,"A",{href:!0});var Frt=s(sN);Kvo=r(Frt,"VisionTextDualEncoderModel"),Frt.forEach(t),Zvo=r(n6e," (VisionTextDualEncoder model)"),n6e.forEach(t),e3o=i($),qu=n($,"LI",{});var s6e=s(qu);Ule=n(s6e,"STRONG",{});var Trt=s(Ule);o3o=r(Trt,"visual_bert"),Trt.forEach(t),r3o=r(s6e," \u2014 "),lN=n(s6e,"A",{href:!0});var Mrt=s(lN);t3o=r(Mrt,"VisualBertModel"),Mrt.forEach(t),a3o=r(s6e," (VisualBert model)"),s6e.forEach(t),n3o=i($),Nu=n($,"LI",{});var l6e=s(Nu);Jle=n(l6e,"STRONG",{});var Ert=s(Jle);s3o=r(Ert,"vit"),Ert.forEach(t),l3o=r(l6e," \u2014 "),iN=n(l6e,"A",{href:!0});var Crt=s(iN);i3o=r(Crt,"ViTModel"),Crt.forEach(t),d3o=r(l6e," (ViT model)"),l6e.forEach(t),c3o=i($),ju=n($,"LI",{});var i6e=s(ju);Yle=n(i6e,"STRONG",{});var wrt=s(Yle);f3o=r(wrt,"vit_mae"),wrt.forEach(t),m3o=r(i6e," \u2014 "),dN=n(i6e,"A",{href:!0});var Art=s(dN);g3o=r(Art,"ViTMAEModel"),Art.forEach(t),h3o=r(i6e," (ViTMAE model)"),i6e.forEach(t),p3o=i($),Du=n($,"LI",{});var d6e=s(Du);Kle=n(d6e,"STRONG",{});var yrt=s(Kle);u3o=r(yrt,"wav2vec2"),yrt.forEach(t),_3o=r(d6e," \u2014 "),cN=n(d6e,"A",{href:!0});var Lrt=s(cN);b3o=r(Lrt,"Wav2Vec2Model"),Lrt.forEach(t),v3o=r(d6e," (Wav2Vec2 model)"),d6e.forEach(t),F3o=i($),Gu=n($,"LI",{});var c6e=s(Gu);Zle=n(c6e,"STRONG",{});var xrt=s(Zle);T3o=r(xrt,"wav2vec2-conformer"),xrt.forEach(t),M3o=r(c6e," \u2014 "),fN=n(c6e,"A",{href:!0});var $rt=s(fN);E3o=r($rt,"Wav2Vec2ConformerModel"),$rt.forEach(t),C3o=r(c6e," (Wav2Vec2-Conformer model)"),c6e.forEach(t),w3o=i($),Ou=n($,"LI",{});var f6e=s(Ou);eie=n(f6e,"STRONG",{});var krt=s(eie);A3o=r(krt,"wavlm"),krt.forEach(t),y3o=r(f6e," \u2014 "),mN=n(f6e,"A",{href:!0});var Srt=s(mN);L3o=r(Srt,"WavLMModel"),Srt.forEach(t),x3o=r(f6e," (WavLM model)"),f6e.forEach(t),$3o=i($),Vu=n($,"LI",{});var m6e=s(Vu);oie=n(m6e,"STRONG",{});var Rrt=s(oie);k3o=r(Rrt,"xglm"),Rrt.forEach(t),S3o=r(m6e," \u2014 "),gN=n(m6e,"A",{href:!0});var Prt=s(gN);R3o=r(Prt,"XGLMModel"),Prt.forEach(t),P3o=r(m6e," (XGLM model)"),m6e.forEach(t),B3o=i($),Xu=n($,"LI",{});var g6e=s(Xu);rie=n(g6e,"STRONG",{});var Brt=s(rie);I3o=r(Brt,"xlm"),Brt.forEach(t),q3o=r(g6e," \u2014 "),hN=n(g6e,"A",{href:!0});var Irt=s(hN);N3o=r(Irt,"XLMModel"),Irt.forEach(t),j3o=r(g6e," (XLM model)"),g6e.forEach(t),D3o=i($),zu=n($,"LI",{});var h6e=s(zu);tie=n(h6e,"STRONG",{});var qrt=s(tie);G3o=r(qrt,"xlm-prophetnet"),qrt.forEach(t),O3o=r(h6e," \u2014 "),pN=n(h6e,"A",{href:!0});var Nrt=s(pN);V3o=r(Nrt,"XLMProphetNetModel"),Nrt.forEach(t),X3o=r(h6e," (XLMProphetNet model)"),h6e.forEach(t),z3o=i($),Wu=n($,"LI",{});var p6e=s(Wu);aie=n(p6e,"STRONG",{});var jrt=s(aie);W3o=r(jrt,"xlm-roberta"),jrt.forEach(t),Q3o=r(p6e," \u2014 "),uN=n(p6e,"A",{href:!0});var Drt=s(uN);H3o=r(Drt,"XLMRobertaModel"),Drt.forEach(t),U3o=r(p6e," (XLM-RoBERTa model)"),p6e.forEach(t),J3o=i($),Qu=n($,"LI",{});var u6e=s(Qu);nie=n(u6e,"STRONG",{});var Grt=s(nie);Y3o=r(Grt,"xlm-roberta-xl"),Grt.forEach(t),K3o=r(u6e," \u2014 "),_N=n(u6e,"A",{href:!0});var Ort=s(_N);Z3o=r(Ort,"XLMRobertaXLModel"),Ort.forEach(t),eFo=r(u6e," (XLM-RoBERTa-XL model)"),u6e.forEach(t),oFo=i($),Hu=n($,"LI",{});var _6e=s(Hu);sie=n(_6e,"STRONG",{});var Vrt=s(sie);rFo=r(Vrt,"xlnet"),Vrt.forEach(t),tFo=r(_6e," \u2014 "),bN=n(_6e,"A",{href:!0});var Xrt=s(bN);aFo=r(Xrt,"XLNetModel"),Xrt.forEach(t),nFo=r(_6e," (XLNet model)"),_6e.forEach(t),sFo=i($),Uu=n($,"LI",{});var b6e=s(Uu);lie=n(b6e,"STRONG",{});var zrt=s(lie);lFo=r(zrt,"yolos"),zrt.forEach(t),iFo=r(b6e," \u2014 "),vN=n(b6e,"A",{href:!0});var Wrt=s(vN);dFo=r(Wrt,"YolosModel"),Wrt.forEach(t),cFo=r(b6e," (YOLOS model)"),b6e.forEach(t),fFo=i($),Ju=n($,"LI",{});var v6e=s(Ju);iie=n(v6e,"STRONG",{});var Qrt=s(iie);mFo=r(Qrt,"yoso"),Qrt.forEach(t),gFo=r(v6e," \u2014 "),FN=n(v6e,"A",{href:!0});var Hrt=s(FN);hFo=r(Hrt,"YosoModel"),Hrt.forEach(t),pFo=r(v6e," (YOSO model)"),v6e.forEach(t),$.forEach(t),uFo=i(oa),Yu=n(oa,"P",{});var F6e=s(Yu);_Fo=r(F6e,"The model is set in evaluation mode by default using "),die=n(F6e,"CODE",{});var Urt=s(die);bFo=r(Urt,"model.eval()"),Urt.forEach(t),vFo=r(F6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(F6e,"CODE",{});var Jrt=s(cie);FFo=r(Jrt,"model.train()"),Jrt.forEach(t),F6e.forEach(t),TFo=i(oa),T(Ku.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),nNe=i(f),Li=n(f,"H2",{class:!0});var dDe=s(Li);Zu=n(dDe,"A",{id:!0,class:!0,href:!0});var Yrt=s(Zu);fie=n(Yrt,"SPAN",{});var Krt=s(fie);T(r6.$$.fragment,Krt),Krt.forEach(t),Yrt.forEach(t),MFo=i(dDe),mie=n(dDe,"SPAN",{});var Zrt=s(mie);EFo=r(Zrt,"AutoModelForPreTraining"),Zrt.forEach(t),dDe.forEach(t),sNe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(t6.$$.fragment,Os),CFo=i(Os),xi=n(Os,"P",{});var gZ=s(xi);wFo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TN=n(gZ,"A",{href:!0});var ett=s(TN);AFo=r(ett,"from_pretrained()"),ett.forEach(t),yFo=r(gZ," class method or the "),MN=n(gZ,"A",{href:!0});var ott=s(MN);LFo=r(ott,"from_config()"),ott.forEach(t),xFo=r(gZ,` class
method.`),gZ.forEach(t),$Fo=i(Os),a6=n(Os,"P",{});var cDe=s(a6);kFo=r(cDe,"This class cannot be instantiated directly using "),gie=n(cDe,"CODE",{});var rtt=s(gie);SFo=r(rtt,"__init__()"),rtt.forEach(t),RFo=r(cDe," (throws an error)."),cDe.forEach(t),PFo=i(Os),at=n(Os,"DIV",{class:!0});var kw=s(at);T(n6.$$.fragment,kw),BFo=i(kw),hie=n(kw,"P",{});var ttt=s(hie);IFo=r(ttt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ttt.forEach(t),qFo=i(kw),$i=n(kw,"P",{});var hZ=s($i);NFo=r(hZ,`Note:
Loading a model from its configuration file does `),pie=n(hZ,"STRONG",{});var att=s(pie);jFo=r(att,"not"),att.forEach(t),DFo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=n(hZ,"A",{href:!0});var ntt=s(EN);GFo=r(ntt,"from_pretrained()"),ntt.forEach(t),OFo=r(hZ," to load the model weights."),hZ.forEach(t),VFo=i(kw),T(e_.$$.fragment,kw),kw.forEach(t),XFo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(s6.$$.fragment,ra),zFo=i(ra),uie=n(ra,"P",{});var stt=s(uie);WFo=r(stt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),stt.forEach(t),QFo=i(ra),xa=n(ra,"P",{});var Sw=s(xa);HFo=r(Sw,"The model class to instantiate is selected based on the "),_ie=n(Sw,"CODE",{});var ltt=s(_ie);UFo=r(ltt,"model_type"),ltt.forEach(t),JFo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),bie=n(Sw,"CODE",{});var itt=s(bie);YFo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),KFo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(Sw,"CODE",{});var dtt=s(vie);ZFo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),eTo=r(Sw,":"),Sw.forEach(t),oTo=i(ra),G=n(ra,"UL",{});var O=s(G);o_=n(O,"LI",{});var T6e=s(o_);Fie=n(T6e,"STRONG",{});var ctt=s(Fie);rTo=r(ctt,"albert"),ctt.forEach(t),tTo=r(T6e," \u2014 "),CN=n(T6e,"A",{href:!0});var ftt=s(CN);aTo=r(ftt,"AlbertForPreTraining"),ftt.forEach(t),nTo=r(T6e," (ALBERT model)"),T6e.forEach(t),sTo=i(O),r_=n(O,"LI",{});var M6e=s(r_);Tie=n(M6e,"STRONG",{});var mtt=s(Tie);lTo=r(mtt,"bart"),mtt.forEach(t),iTo=r(M6e," \u2014 "),wN=n(M6e,"A",{href:!0});var gtt=s(wN);dTo=r(gtt,"BartForConditionalGeneration"),gtt.forEach(t),cTo=r(M6e," (BART model)"),M6e.forEach(t),fTo=i(O),t_=n(O,"LI",{});var E6e=s(t_);Mie=n(E6e,"STRONG",{});var htt=s(Mie);mTo=r(htt,"bert"),htt.forEach(t),gTo=r(E6e," \u2014 "),AN=n(E6e,"A",{href:!0});var ptt=s(AN);hTo=r(ptt,"BertForPreTraining"),ptt.forEach(t),pTo=r(E6e," (BERT model)"),E6e.forEach(t),uTo=i(O),a_=n(O,"LI",{});var C6e=s(a_);Eie=n(C6e,"STRONG",{});var utt=s(Eie);_To=r(utt,"big_bird"),utt.forEach(t),bTo=r(C6e," \u2014 "),yN=n(C6e,"A",{href:!0});var _tt=s(yN);vTo=r(_tt,"BigBirdForPreTraining"),_tt.forEach(t),FTo=r(C6e," (BigBird model)"),C6e.forEach(t),TTo=i(O),n_=n(O,"LI",{});var w6e=s(n_);Cie=n(w6e,"STRONG",{});var btt=s(Cie);MTo=r(btt,"camembert"),btt.forEach(t),ETo=r(w6e," \u2014 "),LN=n(w6e,"A",{href:!0});var vtt=s(LN);CTo=r(vtt,"CamembertForMaskedLM"),vtt.forEach(t),wTo=r(w6e," (CamemBERT model)"),w6e.forEach(t),ATo=i(O),s_=n(O,"LI",{});var A6e=s(s_);wie=n(A6e,"STRONG",{});var Ftt=s(wie);yTo=r(Ftt,"ctrl"),Ftt.forEach(t),LTo=r(A6e," \u2014 "),xN=n(A6e,"A",{href:!0});var Ttt=s(xN);xTo=r(Ttt,"CTRLLMHeadModel"),Ttt.forEach(t),$To=r(A6e," (CTRL model)"),A6e.forEach(t),kTo=i(O),l_=n(O,"LI",{});var y6e=s(l_);Aie=n(y6e,"STRONG",{});var Mtt=s(Aie);STo=r(Mtt,"data2vec-text"),Mtt.forEach(t),RTo=r(y6e," \u2014 "),$N=n(y6e,"A",{href:!0});var Ett=s($N);PTo=r(Ett,"Data2VecTextForMaskedLM"),Ett.forEach(t),BTo=r(y6e," (Data2VecText model)"),y6e.forEach(t),ITo=i(O),i_=n(O,"LI",{});var L6e=s(i_);yie=n(L6e,"STRONG",{});var Ctt=s(yie);qTo=r(Ctt,"deberta"),Ctt.forEach(t),NTo=r(L6e," \u2014 "),kN=n(L6e,"A",{href:!0});var wtt=s(kN);jTo=r(wtt,"DebertaForMaskedLM"),wtt.forEach(t),DTo=r(L6e," (DeBERTa model)"),L6e.forEach(t),GTo=i(O),d_=n(O,"LI",{});var x6e=s(d_);Lie=n(x6e,"STRONG",{});var Att=s(Lie);OTo=r(Att,"deberta-v2"),Att.forEach(t),VTo=r(x6e," \u2014 "),SN=n(x6e,"A",{href:!0});var ytt=s(SN);XTo=r(ytt,"DebertaV2ForMaskedLM"),ytt.forEach(t),zTo=r(x6e," (DeBERTa-v2 model)"),x6e.forEach(t),WTo=i(O),c_=n(O,"LI",{});var $6e=s(c_);xie=n($6e,"STRONG",{});var Ltt=s(xie);QTo=r(Ltt,"distilbert"),Ltt.forEach(t),HTo=r($6e," \u2014 "),RN=n($6e,"A",{href:!0});var xtt=s(RN);UTo=r(xtt,"DistilBertForMaskedLM"),xtt.forEach(t),JTo=r($6e," (DistilBERT model)"),$6e.forEach(t),YTo=i(O),f_=n(O,"LI",{});var k6e=s(f_);$ie=n(k6e,"STRONG",{});var $tt=s($ie);KTo=r($tt,"electra"),$tt.forEach(t),ZTo=r(k6e," \u2014 "),PN=n(k6e,"A",{href:!0});var ktt=s(PN);e7o=r(ktt,"ElectraForPreTraining"),ktt.forEach(t),o7o=r(k6e," (ELECTRA model)"),k6e.forEach(t),r7o=i(O),m_=n(O,"LI",{});var S6e=s(m_);kie=n(S6e,"STRONG",{});var Stt=s(kie);t7o=r(Stt,"flaubert"),Stt.forEach(t),a7o=r(S6e," \u2014 "),BN=n(S6e,"A",{href:!0});var Rtt=s(BN);n7o=r(Rtt,"FlaubertWithLMHeadModel"),Rtt.forEach(t),s7o=r(S6e," (FlauBERT model)"),S6e.forEach(t),l7o=i(O),g_=n(O,"LI",{});var R6e=s(g_);Sie=n(R6e,"STRONG",{});var Ptt=s(Sie);i7o=r(Ptt,"flava"),Ptt.forEach(t),d7o=r(R6e," \u2014 "),IN=n(R6e,"A",{href:!0});var Btt=s(IN);c7o=r(Btt,"FlavaForPreTraining"),Btt.forEach(t),f7o=r(R6e," (Flava model)"),R6e.forEach(t),m7o=i(O),h_=n(O,"LI",{});var P6e=s(h_);Rie=n(P6e,"STRONG",{});var Itt=s(Rie);g7o=r(Itt,"fnet"),Itt.forEach(t),h7o=r(P6e," \u2014 "),qN=n(P6e,"A",{href:!0});var qtt=s(qN);p7o=r(qtt,"FNetForPreTraining"),qtt.forEach(t),u7o=r(P6e," (FNet model)"),P6e.forEach(t),_7o=i(O),p_=n(O,"LI",{});var B6e=s(p_);Pie=n(B6e,"STRONG",{});var Ntt=s(Pie);b7o=r(Ntt,"fsmt"),Ntt.forEach(t),v7o=r(B6e," \u2014 "),NN=n(B6e,"A",{href:!0});var jtt=s(NN);F7o=r(jtt,"FSMTForConditionalGeneration"),jtt.forEach(t),T7o=r(B6e," (FairSeq Machine-Translation model)"),B6e.forEach(t),M7o=i(O),u_=n(O,"LI",{});var I6e=s(u_);Bie=n(I6e,"STRONG",{});var Dtt=s(Bie);E7o=r(Dtt,"funnel"),Dtt.forEach(t),C7o=r(I6e," \u2014 "),jN=n(I6e,"A",{href:!0});var Gtt=s(jN);w7o=r(Gtt,"FunnelForPreTraining"),Gtt.forEach(t),A7o=r(I6e," (Funnel Transformer model)"),I6e.forEach(t),y7o=i(O),__=n(O,"LI",{});var q6e=s(__);Iie=n(q6e,"STRONG",{});var Ott=s(Iie);L7o=r(Ott,"gpt2"),Ott.forEach(t),x7o=r(q6e," \u2014 "),DN=n(q6e,"A",{href:!0});var Vtt=s(DN);$7o=r(Vtt,"GPT2LMHeadModel"),Vtt.forEach(t),k7o=r(q6e," (OpenAI GPT-2 model)"),q6e.forEach(t),S7o=i(O),b_=n(O,"LI",{});var N6e=s(b_);qie=n(N6e,"STRONG",{});var Xtt=s(qie);R7o=r(Xtt,"ibert"),Xtt.forEach(t),P7o=r(N6e," \u2014 "),GN=n(N6e,"A",{href:!0});var ztt=s(GN);B7o=r(ztt,"IBertForMaskedLM"),ztt.forEach(t),I7o=r(N6e," (I-BERT model)"),N6e.forEach(t),q7o=i(O),v_=n(O,"LI",{});var j6e=s(v_);Nie=n(j6e,"STRONG",{});var Wtt=s(Nie);N7o=r(Wtt,"layoutlm"),Wtt.forEach(t),j7o=r(j6e," \u2014 "),ON=n(j6e,"A",{href:!0});var Qtt=s(ON);D7o=r(Qtt,"LayoutLMForMaskedLM"),Qtt.forEach(t),G7o=r(j6e," (LayoutLM model)"),j6e.forEach(t),O7o=i(O),F_=n(O,"LI",{});var D6e=s(F_);jie=n(D6e,"STRONG",{});var Htt=s(jie);V7o=r(Htt,"longformer"),Htt.forEach(t),X7o=r(D6e," \u2014 "),VN=n(D6e,"A",{href:!0});var Utt=s(VN);z7o=r(Utt,"LongformerForMaskedLM"),Utt.forEach(t),W7o=r(D6e," (Longformer model)"),D6e.forEach(t),Q7o=i(O),T_=n(O,"LI",{});var G6e=s(T_);Die=n(G6e,"STRONG",{});var Jtt=s(Die);H7o=r(Jtt,"lxmert"),Jtt.forEach(t),U7o=r(G6e," \u2014 "),XN=n(G6e,"A",{href:!0});var Ytt=s(XN);J7o=r(Ytt,"LxmertForPreTraining"),Ytt.forEach(t),Y7o=r(G6e," (LXMERT model)"),G6e.forEach(t),K7o=i(O),M_=n(O,"LI",{});var O6e=s(M_);Gie=n(O6e,"STRONG",{});var Ktt=s(Gie);Z7o=r(Ktt,"megatron-bert"),Ktt.forEach(t),eMo=r(O6e," \u2014 "),zN=n(O6e,"A",{href:!0});var Ztt=s(zN);oMo=r(Ztt,"MegatronBertForPreTraining"),Ztt.forEach(t),rMo=r(O6e," (MegatronBert model)"),O6e.forEach(t),tMo=i(O),E_=n(O,"LI",{});var V6e=s(E_);Oie=n(V6e,"STRONG",{});var eat=s(Oie);aMo=r(eat,"mobilebert"),eat.forEach(t),nMo=r(V6e," \u2014 "),WN=n(V6e,"A",{href:!0});var oat=s(WN);sMo=r(oat,"MobileBertForPreTraining"),oat.forEach(t),lMo=r(V6e," (MobileBERT model)"),V6e.forEach(t),iMo=i(O),C_=n(O,"LI",{});var X6e=s(C_);Vie=n(X6e,"STRONG",{});var rat=s(Vie);dMo=r(rat,"mpnet"),rat.forEach(t),cMo=r(X6e," \u2014 "),QN=n(X6e,"A",{href:!0});var tat=s(QN);fMo=r(tat,"MPNetForMaskedLM"),tat.forEach(t),mMo=r(X6e," (MPNet model)"),X6e.forEach(t),gMo=i(O),w_=n(O,"LI",{});var z6e=s(w_);Xie=n(z6e,"STRONG",{});var aat=s(Xie);hMo=r(aat,"openai-gpt"),aat.forEach(t),pMo=r(z6e," \u2014 "),HN=n(z6e,"A",{href:!0});var nat=s(HN);uMo=r(nat,"OpenAIGPTLMHeadModel"),nat.forEach(t),_Mo=r(z6e," (OpenAI GPT model)"),z6e.forEach(t),bMo=i(O),A_=n(O,"LI",{});var W6e=s(A_);zie=n(W6e,"STRONG",{});var sat=s(zie);vMo=r(sat,"retribert"),sat.forEach(t),FMo=r(W6e," \u2014 "),UN=n(W6e,"A",{href:!0});var lat=s(UN);TMo=r(lat,"RetriBertModel"),lat.forEach(t),MMo=r(W6e," (RetriBERT model)"),W6e.forEach(t),EMo=i(O),y_=n(O,"LI",{});var Q6e=s(y_);Wie=n(Q6e,"STRONG",{});var iat=s(Wie);CMo=r(iat,"roberta"),iat.forEach(t),wMo=r(Q6e," \u2014 "),JN=n(Q6e,"A",{href:!0});var dat=s(JN);AMo=r(dat,"RobertaForMaskedLM"),dat.forEach(t),yMo=r(Q6e," (RoBERTa model)"),Q6e.forEach(t),LMo=i(O),L_=n(O,"LI",{});var H6e=s(L_);Qie=n(H6e,"STRONG",{});var cat=s(Qie);xMo=r(cat,"splinter"),cat.forEach(t),$Mo=r(H6e," \u2014 "),YN=n(H6e,"A",{href:!0});var fat=s(YN);kMo=r(fat,"SplinterForPreTraining"),fat.forEach(t),SMo=r(H6e," (Splinter model)"),H6e.forEach(t),RMo=i(O),x_=n(O,"LI",{});var U6e=s(x_);Hie=n(U6e,"STRONG",{});var mat=s(Hie);PMo=r(mat,"squeezebert"),mat.forEach(t),BMo=r(U6e," \u2014 "),KN=n(U6e,"A",{href:!0});var gat=s(KN);IMo=r(gat,"SqueezeBertForMaskedLM"),gat.forEach(t),qMo=r(U6e," (SqueezeBERT model)"),U6e.forEach(t),NMo=i(O),$_=n(O,"LI",{});var J6e=s($_);Uie=n(J6e,"STRONG",{});var hat=s(Uie);jMo=r(hat,"t5"),hat.forEach(t),DMo=r(J6e," \u2014 "),ZN=n(J6e,"A",{href:!0});var pat=s(ZN);GMo=r(pat,"T5ForConditionalGeneration"),pat.forEach(t),OMo=r(J6e," (T5 model)"),J6e.forEach(t),VMo=i(O),k_=n(O,"LI",{});var Y6e=s(k_);Jie=n(Y6e,"STRONG",{});var uat=s(Jie);XMo=r(uat,"tapas"),uat.forEach(t),zMo=r(Y6e," \u2014 "),ej=n(Y6e,"A",{href:!0});var _at=s(ej);WMo=r(_at,"TapasForMaskedLM"),_at.forEach(t),QMo=r(Y6e," (TAPAS model)"),Y6e.forEach(t),HMo=i(O),S_=n(O,"LI",{});var K6e=s(S_);Yie=n(K6e,"STRONG",{});var bat=s(Yie);UMo=r(bat,"transfo-xl"),bat.forEach(t),JMo=r(K6e," \u2014 "),oj=n(K6e,"A",{href:!0});var vat=s(oj);YMo=r(vat,"TransfoXLLMHeadModel"),vat.forEach(t),KMo=r(K6e," (Transformer-XL model)"),K6e.forEach(t),ZMo=i(O),R_=n(O,"LI",{});var Z6e=s(R_);Kie=n(Z6e,"STRONG",{});var Fat=s(Kie);e4o=r(Fat,"unispeech"),Fat.forEach(t),o4o=r(Z6e," \u2014 "),rj=n(Z6e,"A",{href:!0});var Tat=s(rj);r4o=r(Tat,"UniSpeechForPreTraining"),Tat.forEach(t),t4o=r(Z6e," (UniSpeech model)"),Z6e.forEach(t),a4o=i(O),P_=n(O,"LI",{});var eye=s(P_);Zie=n(eye,"STRONG",{});var Mat=s(Zie);n4o=r(Mat,"unispeech-sat"),Mat.forEach(t),s4o=r(eye," \u2014 "),tj=n(eye,"A",{href:!0});var Eat=s(tj);l4o=r(Eat,"UniSpeechSatForPreTraining"),Eat.forEach(t),i4o=r(eye," (UniSpeechSat model)"),eye.forEach(t),d4o=i(O),B_=n(O,"LI",{});var oye=s(B_);ede=n(oye,"STRONG",{});var Cat=s(ede);c4o=r(Cat,"visual_bert"),Cat.forEach(t),f4o=r(oye," \u2014 "),aj=n(oye,"A",{href:!0});var wat=s(aj);m4o=r(wat,"VisualBertForPreTraining"),wat.forEach(t),g4o=r(oye," (VisualBert model)"),oye.forEach(t),h4o=i(O),I_=n(O,"LI",{});var rye=s(I_);ode=n(rye,"STRONG",{});var Aat=s(ode);p4o=r(Aat,"vit_mae"),Aat.forEach(t),u4o=r(rye," \u2014 "),nj=n(rye,"A",{href:!0});var yat=s(nj);_4o=r(yat,"ViTMAEForPreTraining"),yat.forEach(t),b4o=r(rye," (ViTMAE model)"),rye.forEach(t),v4o=i(O),q_=n(O,"LI",{});var tye=s(q_);rde=n(tye,"STRONG",{});var Lat=s(rde);F4o=r(Lat,"wav2vec2"),Lat.forEach(t),T4o=r(tye," \u2014 "),sj=n(tye,"A",{href:!0});var xat=s(sj);M4o=r(xat,"Wav2Vec2ForPreTraining"),xat.forEach(t),E4o=r(tye," (Wav2Vec2 model)"),tye.forEach(t),C4o=i(O),N_=n(O,"LI",{});var aye=s(N_);tde=n(aye,"STRONG",{});var $at=s(tde);w4o=r($at,"wav2vec2-conformer"),$at.forEach(t),A4o=r(aye," \u2014 "),lj=n(aye,"A",{href:!0});var kat=s(lj);y4o=r(kat,"Wav2Vec2ConformerForPreTraining"),kat.forEach(t),L4o=r(aye," (Wav2Vec2-Conformer model)"),aye.forEach(t),x4o=i(O),j_=n(O,"LI",{});var nye=s(j_);ade=n(nye,"STRONG",{});var Sat=s(ade);$4o=r(Sat,"xlm"),Sat.forEach(t),k4o=r(nye," \u2014 "),ij=n(nye,"A",{href:!0});var Rat=s(ij);S4o=r(Rat,"XLMWithLMHeadModel"),Rat.forEach(t),R4o=r(nye," (XLM model)"),nye.forEach(t),P4o=i(O),D_=n(O,"LI",{});var sye=s(D_);nde=n(sye,"STRONG",{});var Pat=s(nde);B4o=r(Pat,"xlm-roberta"),Pat.forEach(t),I4o=r(sye," \u2014 "),dj=n(sye,"A",{href:!0});var Bat=s(dj);q4o=r(Bat,"XLMRobertaForMaskedLM"),Bat.forEach(t),N4o=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),j4o=i(O),G_=n(O,"LI",{});var lye=s(G_);sde=n(lye,"STRONG",{});var Iat=s(sde);D4o=r(Iat,"xlm-roberta-xl"),Iat.forEach(t),G4o=r(lye," \u2014 "),cj=n(lye,"A",{href:!0});var qat=s(cj);O4o=r(qat,"XLMRobertaXLForMaskedLM"),qat.forEach(t),V4o=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),X4o=i(O),O_=n(O,"LI",{});var iye=s(O_);lde=n(iye,"STRONG",{});var Nat=s(lde);z4o=r(Nat,"xlnet"),Nat.forEach(t),W4o=r(iye," \u2014 "),fj=n(iye,"A",{href:!0});var jat=s(fj);Q4o=r(jat,"XLNetLMHeadModel"),jat.forEach(t),H4o=r(iye," (XLNet model)"),iye.forEach(t),O.forEach(t),U4o=i(ra),V_=n(ra,"P",{});var dye=s(V_);J4o=r(dye,"The model is set in evaluation mode by default using "),ide=n(dye,"CODE",{});var Dat=s(ide);Y4o=r(Dat,"model.eval()"),Dat.forEach(t),K4o=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=n(dye,"CODE",{});var Gat=s(dde);Z4o=r(Gat,"model.train()"),Gat.forEach(t),dye.forEach(t),eEo=i(ra),T(X_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),lNe=i(f),ki=n(f,"H2",{class:!0});var fDe=s(ki);z_=n(fDe,"A",{id:!0,class:!0,href:!0});var Oat=s(z_);cde=n(Oat,"SPAN",{});var Vat=s(cde);T(l6.$$.fragment,Vat),Vat.forEach(t),Oat.forEach(t),oEo=i(fDe),fde=n(fDe,"SPAN",{});var Xat=s(fde);rEo=r(Xat,"AutoModelForCausalLM"),Xat.forEach(t),fDe.forEach(t),iNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(i6.$$.fragment,Vs),tEo=i(Vs),Si=n(Vs,"P",{});var pZ=s(Si);aEo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mj=n(pZ,"A",{href:!0});var zat=s(mj);nEo=r(zat,"from_pretrained()"),zat.forEach(t),sEo=r(pZ," class method or the "),gj=n(pZ,"A",{href:!0});var Wat=s(gj);lEo=r(Wat,"from_config()"),Wat.forEach(t),iEo=r(pZ,` class
method.`),pZ.forEach(t),dEo=i(Vs),d6=n(Vs,"P",{});var mDe=s(d6);cEo=r(mDe,"This class cannot be instantiated directly using "),mde=n(mDe,"CODE",{});var Qat=s(mde);fEo=r(Qat,"__init__()"),Qat.forEach(t),mEo=r(mDe," (throws an error)."),mDe.forEach(t),gEo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Rw=s(nt);T(c6.$$.fragment,Rw),hEo=i(Rw),gde=n(Rw,"P",{});var Hat=s(gde);pEo=r(Hat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hat.forEach(t),uEo=i(Rw),Ri=n(Rw,"P",{});var uZ=s(Ri);_Eo=r(uZ,`Note:
Loading a model from its configuration file does `),hde=n(uZ,"STRONG",{});var Uat=s(hde);bEo=r(Uat,"not"),Uat.forEach(t),vEo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(uZ,"A",{href:!0});var Jat=s(hj);FEo=r(Jat,"from_pretrained()"),Jat.forEach(t),TEo=r(uZ," to load the model weights."),uZ.forEach(t),MEo=i(Rw),T(W_.$$.fragment,Rw),Rw.forEach(t),EEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(f6.$$.fragment,ta),CEo=i(ta),pde=n(ta,"P",{});var Yat=s(pde);wEo=r(Yat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yat.forEach(t),AEo=i(ta),$a=n(ta,"P",{});var Pw=s($a);yEo=r(Pw,"The model class to instantiate is selected based on the "),ude=n(Pw,"CODE",{});var Kat=s(ude);LEo=r(Kat,"model_type"),Kat.forEach(t),xEo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),_de=n(Pw,"CODE",{});var Zat=s(_de);$Eo=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),kEo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(Pw,"CODE",{});var ent=s(bde);SEo=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),REo=r(Pw,":"),Pw.forEach(t),PEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Q_=n(Q,"LI",{});var cye=s(Q_);vde=n(cye,"STRONG",{});var ont=s(vde);BEo=r(ont,"bart"),ont.forEach(t),IEo=r(cye," \u2014 "),pj=n(cye,"A",{href:!0});var rnt=s(pj);qEo=r(rnt,"BartForCausalLM"),rnt.forEach(t),NEo=r(cye," (BART model)"),cye.forEach(t),jEo=i(Q),H_=n(Q,"LI",{});var fye=s(H_);Fde=n(fye,"STRONG",{});var tnt=s(Fde);DEo=r(tnt,"bert"),tnt.forEach(t),GEo=r(fye," \u2014 "),uj=n(fye,"A",{href:!0});var ant=s(uj);OEo=r(ant,"BertLMHeadModel"),ant.forEach(t),VEo=r(fye," (BERT model)"),fye.forEach(t),XEo=i(Q),U_=n(Q,"LI",{});var mye=s(U_);Tde=n(mye,"STRONG",{});var nnt=s(Tde);zEo=r(nnt,"bert-generation"),nnt.forEach(t),WEo=r(mye," \u2014 "),_j=n(mye,"A",{href:!0});var snt=s(_j);QEo=r(snt,"BertGenerationDecoder"),snt.forEach(t),HEo=r(mye," (Bert Generation model)"),mye.forEach(t),UEo=i(Q),J_=n(Q,"LI",{});var gye=s(J_);Mde=n(gye,"STRONG",{});var lnt=s(Mde);JEo=r(lnt,"big_bird"),lnt.forEach(t),YEo=r(gye," \u2014 "),bj=n(gye,"A",{href:!0});var int=s(bj);KEo=r(int,"BigBirdForCausalLM"),int.forEach(t),ZEo=r(gye," (BigBird model)"),gye.forEach(t),eCo=i(Q),Y_=n(Q,"LI",{});var hye=s(Y_);Ede=n(hye,"STRONG",{});var dnt=s(Ede);oCo=r(dnt,"bigbird_pegasus"),dnt.forEach(t),rCo=r(hye," \u2014 "),vj=n(hye,"A",{href:!0});var cnt=s(vj);tCo=r(cnt,"BigBirdPegasusForCausalLM"),cnt.forEach(t),aCo=r(hye," (BigBirdPegasus model)"),hye.forEach(t),nCo=i(Q),K_=n(Q,"LI",{});var pye=s(K_);Cde=n(pye,"STRONG",{});var fnt=s(Cde);sCo=r(fnt,"blenderbot"),fnt.forEach(t),lCo=r(pye," \u2014 "),Fj=n(pye,"A",{href:!0});var mnt=s(Fj);iCo=r(mnt,"BlenderbotForCausalLM"),mnt.forEach(t),dCo=r(pye," (Blenderbot model)"),pye.forEach(t),cCo=i(Q),Z_=n(Q,"LI",{});var uye=s(Z_);wde=n(uye,"STRONG",{});var gnt=s(wde);fCo=r(gnt,"blenderbot-small"),gnt.forEach(t),mCo=r(uye," \u2014 "),Tj=n(uye,"A",{href:!0});var hnt=s(Tj);gCo=r(hnt,"BlenderbotSmallForCausalLM"),hnt.forEach(t),hCo=r(uye," (BlenderbotSmall model)"),uye.forEach(t),pCo=i(Q),e1=n(Q,"LI",{});var _ye=s(e1);Ade=n(_ye,"STRONG",{});var pnt=s(Ade);uCo=r(pnt,"camembert"),pnt.forEach(t),_Co=r(_ye," \u2014 "),Mj=n(_ye,"A",{href:!0});var unt=s(Mj);bCo=r(unt,"CamembertForCausalLM"),unt.forEach(t),vCo=r(_ye," (CamemBERT model)"),_ye.forEach(t),FCo=i(Q),o1=n(Q,"LI",{});var bye=s(o1);yde=n(bye,"STRONG",{});var _nt=s(yde);TCo=r(_nt,"ctrl"),_nt.forEach(t),MCo=r(bye," \u2014 "),Ej=n(bye,"A",{href:!0});var bnt=s(Ej);ECo=r(bnt,"CTRLLMHeadModel"),bnt.forEach(t),CCo=r(bye," (CTRL model)"),bye.forEach(t),wCo=i(Q),r1=n(Q,"LI",{});var vye=s(r1);Lde=n(vye,"STRONG",{});var vnt=s(Lde);ACo=r(vnt,"data2vec-text"),vnt.forEach(t),yCo=r(vye," \u2014 "),Cj=n(vye,"A",{href:!0});var Fnt=s(Cj);LCo=r(Fnt,"Data2VecTextForCausalLM"),Fnt.forEach(t),xCo=r(vye," (Data2VecText model)"),vye.forEach(t),$Co=i(Q),t1=n(Q,"LI",{});var Fye=s(t1);xde=n(Fye,"STRONG",{});var Tnt=s(xde);kCo=r(Tnt,"electra"),Tnt.forEach(t),SCo=r(Fye," \u2014 "),wj=n(Fye,"A",{href:!0});var Mnt=s(wj);RCo=r(Mnt,"ElectraForCausalLM"),Mnt.forEach(t),PCo=r(Fye," (ELECTRA model)"),Fye.forEach(t),BCo=i(Q),a1=n(Q,"LI",{});var Tye=s(a1);$de=n(Tye,"STRONG",{});var Ent=s($de);ICo=r(Ent,"gpt2"),Ent.forEach(t),qCo=r(Tye," \u2014 "),Aj=n(Tye,"A",{href:!0});var Cnt=s(Aj);NCo=r(Cnt,"GPT2LMHeadModel"),Cnt.forEach(t),jCo=r(Tye," (OpenAI GPT-2 model)"),Tye.forEach(t),DCo=i(Q),n1=n(Q,"LI",{});var Mye=s(n1);kde=n(Mye,"STRONG",{});var wnt=s(kde);GCo=r(wnt,"gpt_neo"),wnt.forEach(t),OCo=r(Mye," \u2014 "),yj=n(Mye,"A",{href:!0});var Ant=s(yj);VCo=r(Ant,"GPTNeoForCausalLM"),Ant.forEach(t),XCo=r(Mye," (GPT Neo model)"),Mye.forEach(t),zCo=i(Q),s1=n(Q,"LI",{});var Eye=s(s1);Sde=n(Eye,"STRONG",{});var ynt=s(Sde);WCo=r(ynt,"gptj"),ynt.forEach(t),QCo=r(Eye," \u2014 "),Lj=n(Eye,"A",{href:!0});var Lnt=s(Lj);HCo=r(Lnt,"GPTJForCausalLM"),Lnt.forEach(t),UCo=r(Eye," (GPT-J model)"),Eye.forEach(t),JCo=i(Q),l1=n(Q,"LI",{});var Cye=s(l1);Rde=n(Cye,"STRONG",{});var xnt=s(Rde);YCo=r(xnt,"marian"),xnt.forEach(t),KCo=r(Cye," \u2014 "),xj=n(Cye,"A",{href:!0});var $nt=s(xj);ZCo=r($nt,"MarianForCausalLM"),$nt.forEach(t),e5o=r(Cye," (Marian model)"),Cye.forEach(t),o5o=i(Q),i1=n(Q,"LI",{});var wye=s(i1);Pde=n(wye,"STRONG",{});var knt=s(Pde);r5o=r(knt,"mbart"),knt.forEach(t),t5o=r(wye," \u2014 "),$j=n(wye,"A",{href:!0});var Snt=s($j);a5o=r(Snt,"MBartForCausalLM"),Snt.forEach(t),n5o=r(wye," (mBART model)"),wye.forEach(t),s5o=i(Q),d1=n(Q,"LI",{});var Aye=s(d1);Bde=n(Aye,"STRONG",{});var Rnt=s(Bde);l5o=r(Rnt,"megatron-bert"),Rnt.forEach(t),i5o=r(Aye," \u2014 "),kj=n(Aye,"A",{href:!0});var Pnt=s(kj);d5o=r(Pnt,"MegatronBertForCausalLM"),Pnt.forEach(t),c5o=r(Aye," (MegatronBert model)"),Aye.forEach(t),f5o=i(Q),c1=n(Q,"LI",{});var yye=s(c1);Ide=n(yye,"STRONG",{});var Bnt=s(Ide);m5o=r(Bnt,"openai-gpt"),Bnt.forEach(t),g5o=r(yye," \u2014 "),Sj=n(yye,"A",{href:!0});var Int=s(Sj);h5o=r(Int,"OpenAIGPTLMHeadModel"),Int.forEach(t),p5o=r(yye," (OpenAI GPT model)"),yye.forEach(t),u5o=i(Q),f1=n(Q,"LI",{});var Lye=s(f1);qde=n(Lye,"STRONG",{});var qnt=s(qde);_5o=r(qnt,"opt"),qnt.forEach(t),b5o=r(Lye," \u2014 "),Rj=n(Lye,"A",{href:!0});var Nnt=s(Rj);v5o=r(Nnt,"OPTForCausalLM"),Nnt.forEach(t),F5o=r(Lye," (OPT model)"),Lye.forEach(t),T5o=i(Q),m1=n(Q,"LI",{});var xye=s(m1);Nde=n(xye,"STRONG",{});var jnt=s(Nde);M5o=r(jnt,"pegasus"),jnt.forEach(t),E5o=r(xye," \u2014 "),Pj=n(xye,"A",{href:!0});var Dnt=s(Pj);C5o=r(Dnt,"PegasusForCausalLM"),Dnt.forEach(t),w5o=r(xye," (Pegasus model)"),xye.forEach(t),A5o=i(Q),g1=n(Q,"LI",{});var $ye=s(g1);jde=n($ye,"STRONG",{});var Gnt=s(jde);y5o=r(Gnt,"plbart"),Gnt.forEach(t),L5o=r($ye," \u2014 "),Bj=n($ye,"A",{href:!0});var Ont=s(Bj);x5o=r(Ont,"PLBartForCausalLM"),Ont.forEach(t),$5o=r($ye," (PLBart model)"),$ye.forEach(t),k5o=i(Q),h1=n(Q,"LI",{});var kye=s(h1);Dde=n(kye,"STRONG",{});var Vnt=s(Dde);S5o=r(Vnt,"prophetnet"),Vnt.forEach(t),R5o=r(kye," \u2014 "),Ij=n(kye,"A",{href:!0});var Xnt=s(Ij);P5o=r(Xnt,"ProphetNetForCausalLM"),Xnt.forEach(t),B5o=r(kye," (ProphetNet model)"),kye.forEach(t),I5o=i(Q),p1=n(Q,"LI",{});var Sye=s(p1);Gde=n(Sye,"STRONG",{});var znt=s(Gde);q5o=r(znt,"qdqbert"),znt.forEach(t),N5o=r(Sye," \u2014 "),qj=n(Sye,"A",{href:!0});var Wnt=s(qj);j5o=r(Wnt,"QDQBertLMHeadModel"),Wnt.forEach(t),D5o=r(Sye," (QDQBert model)"),Sye.forEach(t),G5o=i(Q),u1=n(Q,"LI",{});var Rye=s(u1);Ode=n(Rye,"STRONG",{});var Qnt=s(Ode);O5o=r(Qnt,"reformer"),Qnt.forEach(t),V5o=r(Rye," \u2014 "),Nj=n(Rye,"A",{href:!0});var Hnt=s(Nj);X5o=r(Hnt,"ReformerModelWithLMHead"),Hnt.forEach(t),z5o=r(Rye," (Reformer model)"),Rye.forEach(t),W5o=i(Q),_1=n(Q,"LI",{});var Pye=s(_1);Vde=n(Pye,"STRONG",{});var Unt=s(Vde);Q5o=r(Unt,"rembert"),Unt.forEach(t),H5o=r(Pye," \u2014 "),jj=n(Pye,"A",{href:!0});var Jnt=s(jj);U5o=r(Jnt,"RemBertForCausalLM"),Jnt.forEach(t),J5o=r(Pye," (RemBERT model)"),Pye.forEach(t),Y5o=i(Q),b1=n(Q,"LI",{});var Bye=s(b1);Xde=n(Bye,"STRONG",{});var Ynt=s(Xde);K5o=r(Ynt,"roberta"),Ynt.forEach(t),Z5o=r(Bye," \u2014 "),Dj=n(Bye,"A",{href:!0});var Knt=s(Dj);ewo=r(Knt,"RobertaForCausalLM"),Knt.forEach(t),owo=r(Bye," (RoBERTa model)"),Bye.forEach(t),rwo=i(Q),v1=n(Q,"LI",{});var Iye=s(v1);zde=n(Iye,"STRONG",{});var Znt=s(zde);two=r(Znt,"roformer"),Znt.forEach(t),awo=r(Iye," \u2014 "),Gj=n(Iye,"A",{href:!0});var est=s(Gj);nwo=r(est,"RoFormerForCausalLM"),est.forEach(t),swo=r(Iye," (RoFormer model)"),Iye.forEach(t),lwo=i(Q),F1=n(Q,"LI",{});var qye=s(F1);Wde=n(qye,"STRONG",{});var ost=s(Wde);iwo=r(ost,"speech_to_text_2"),ost.forEach(t),dwo=r(qye," \u2014 "),Oj=n(qye,"A",{href:!0});var rst=s(Oj);cwo=r(rst,"Speech2Text2ForCausalLM"),rst.forEach(t),fwo=r(qye," (Speech2Text2 model)"),qye.forEach(t),mwo=i(Q),T1=n(Q,"LI",{});var Nye=s(T1);Qde=n(Nye,"STRONG",{});var tst=s(Qde);gwo=r(tst,"transfo-xl"),tst.forEach(t),hwo=r(Nye," \u2014 "),Vj=n(Nye,"A",{href:!0});var ast=s(Vj);pwo=r(ast,"TransfoXLLMHeadModel"),ast.forEach(t),uwo=r(Nye," (Transformer-XL model)"),Nye.forEach(t),_wo=i(Q),M1=n(Q,"LI",{});var jye=s(M1);Hde=n(jye,"STRONG",{});var nst=s(Hde);bwo=r(nst,"trocr"),nst.forEach(t),vwo=r(jye," \u2014 "),Xj=n(jye,"A",{href:!0});var sst=s(Xj);Fwo=r(sst,"TrOCRForCausalLM"),sst.forEach(t),Two=r(jye," (TrOCR model)"),jye.forEach(t),Mwo=i(Q),E1=n(Q,"LI",{});var Dye=s(E1);Ude=n(Dye,"STRONG",{});var lst=s(Ude);Ewo=r(lst,"xglm"),lst.forEach(t),Cwo=r(Dye," \u2014 "),zj=n(Dye,"A",{href:!0});var ist=s(zj);wwo=r(ist,"XGLMForCausalLM"),ist.forEach(t),Awo=r(Dye," (XGLM model)"),Dye.forEach(t),ywo=i(Q),C1=n(Q,"LI",{});var Gye=s(C1);Jde=n(Gye,"STRONG",{});var dst=s(Jde);Lwo=r(dst,"xlm"),dst.forEach(t),xwo=r(Gye," \u2014 "),Wj=n(Gye,"A",{href:!0});var cst=s(Wj);$wo=r(cst,"XLMWithLMHeadModel"),cst.forEach(t),kwo=r(Gye," (XLM model)"),Gye.forEach(t),Swo=i(Q),w1=n(Q,"LI",{});var Oye=s(w1);Yde=n(Oye,"STRONG",{});var fst=s(Yde);Rwo=r(fst,"xlm-prophetnet"),fst.forEach(t),Pwo=r(Oye," \u2014 "),Qj=n(Oye,"A",{href:!0});var mst=s(Qj);Bwo=r(mst,"XLMProphetNetForCausalLM"),mst.forEach(t),Iwo=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),qwo=i(Q),A1=n(Q,"LI",{});var Vye=s(A1);Kde=n(Vye,"STRONG",{});var gst=s(Kde);Nwo=r(gst,"xlm-roberta"),gst.forEach(t),jwo=r(Vye," \u2014 "),Hj=n(Vye,"A",{href:!0});var hst=s(Hj);Dwo=r(hst,"XLMRobertaForCausalLM"),hst.forEach(t),Gwo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),Owo=i(Q),y1=n(Q,"LI",{});var Xye=s(y1);Zde=n(Xye,"STRONG",{});var pst=s(Zde);Vwo=r(pst,"xlm-roberta-xl"),pst.forEach(t),Xwo=r(Xye," \u2014 "),Uj=n(Xye,"A",{href:!0});var ust=s(Uj);zwo=r(ust,"XLMRobertaXLForCausalLM"),ust.forEach(t),Wwo=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),Qwo=i(Q),L1=n(Q,"LI",{});var zye=s(L1);ece=n(zye,"STRONG",{});var _st=s(ece);Hwo=r(_st,"xlnet"),_st.forEach(t),Uwo=r(zye," \u2014 "),Jj=n(zye,"A",{href:!0});var bst=s(Jj);Jwo=r(bst,"XLNetLMHeadModel"),bst.forEach(t),Ywo=r(zye," (XLNet model)"),zye.forEach(t),Q.forEach(t),Kwo=i(ta),x1=n(ta,"P",{});var Wye=s(x1);Zwo=r(Wye,"The model is set in evaluation mode by default using "),oce=n(Wye,"CODE",{});var vst=s(oce);e0o=r(vst,"model.eval()"),vst.forEach(t),o0o=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rce=n(Wye,"CODE",{});var Fst=s(rce);r0o=r(Fst,"model.train()"),Fst.forEach(t),Wye.forEach(t),t0o=i(ta),T($1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),dNe=i(f),Pi=n(f,"H2",{class:!0});var gDe=s(Pi);k1=n(gDe,"A",{id:!0,class:!0,href:!0});var Tst=s(k1);tce=n(Tst,"SPAN",{});var Mst=s(tce);T(m6.$$.fragment,Mst),Mst.forEach(t),Tst.forEach(t),a0o=i(gDe),ace=n(gDe,"SPAN",{});var Est=s(ace);n0o=r(Est,"AutoModelForMaskedLM"),Est.forEach(t),gDe.forEach(t),cNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(g6.$$.fragment,Xs),s0o=i(Xs),Bi=n(Xs,"P",{});var _Z=s(Bi);l0o=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yj=n(_Z,"A",{href:!0});var Cst=s(Yj);i0o=r(Cst,"from_pretrained()"),Cst.forEach(t),d0o=r(_Z," class method or the "),Kj=n(_Z,"A",{href:!0});var wst=s(Kj);c0o=r(wst,"from_config()"),wst.forEach(t),f0o=r(_Z,` class
method.`),_Z.forEach(t),m0o=i(Xs),h6=n(Xs,"P",{});var hDe=s(h6);g0o=r(hDe,"This class cannot be instantiated directly using "),nce=n(hDe,"CODE",{});var Ast=s(nce);h0o=r(Ast,"__init__()"),Ast.forEach(t),p0o=r(hDe," (throws an error)."),hDe.forEach(t),u0o=i(Xs),st=n(Xs,"DIV",{class:!0});var Bw=s(st);T(p6.$$.fragment,Bw),_0o=i(Bw),sce=n(Bw,"P",{});var yst=s(sce);b0o=r(yst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yst.forEach(t),v0o=i(Bw),Ii=n(Bw,"P",{});var bZ=s(Ii);F0o=r(bZ,`Note:
Loading a model from its configuration file does `),lce=n(bZ,"STRONG",{});var Lst=s(lce);T0o=r(Lst,"not"),Lst.forEach(t),M0o=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=n(bZ,"A",{href:!0});var xst=s(Zj);E0o=r(xst,"from_pretrained()"),xst.forEach(t),C0o=r(bZ," to load the model weights."),bZ.forEach(t),w0o=i(Bw),T(S1.$$.fragment,Bw),Bw.forEach(t),A0o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(u6.$$.fragment,aa),y0o=i(aa),ice=n(aa,"P",{});var $st=s(ice);L0o=r($st,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$st.forEach(t),x0o=i(aa),ka=n(aa,"P",{});var Iw=s(ka);$0o=r(Iw,"The model class to instantiate is selected based on the "),dce=n(Iw,"CODE",{});var kst=s(dce);k0o=r(kst,"model_type"),kst.forEach(t),S0o=r(Iw,` property of the config object (either
passed as an argument or loaded from `),cce=n(Iw,"CODE",{});var Sst=s(cce);R0o=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),P0o=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=n(Iw,"CODE",{});var Rst=s(fce);B0o=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),I0o=r(Iw,":"),Iw.forEach(t),q0o=i(aa),W=n(aa,"UL",{});var U=s(W);R1=n(U,"LI",{});var Qye=s(R1);mce=n(Qye,"STRONG",{});var Pst=s(mce);N0o=r(Pst,"albert"),Pst.forEach(t),j0o=r(Qye," \u2014 "),eD=n(Qye,"A",{href:!0});var Bst=s(eD);D0o=r(Bst,"AlbertForMaskedLM"),Bst.forEach(t),G0o=r(Qye," (ALBERT model)"),Qye.forEach(t),O0o=i(U),P1=n(U,"LI",{});var Hye=s(P1);gce=n(Hye,"STRONG",{});var Ist=s(gce);V0o=r(Ist,"bart"),Ist.forEach(t),X0o=r(Hye," \u2014 "),oD=n(Hye,"A",{href:!0});var qst=s(oD);z0o=r(qst,"BartForConditionalGeneration"),qst.forEach(t),W0o=r(Hye," (BART model)"),Hye.forEach(t),Q0o=i(U),B1=n(U,"LI",{});var Uye=s(B1);hce=n(Uye,"STRONG",{});var Nst=s(hce);H0o=r(Nst,"bert"),Nst.forEach(t),U0o=r(Uye," \u2014 "),rD=n(Uye,"A",{href:!0});var jst=s(rD);J0o=r(jst,"BertForMaskedLM"),jst.forEach(t),Y0o=r(Uye," (BERT model)"),Uye.forEach(t),K0o=i(U),I1=n(U,"LI",{});var Jye=s(I1);pce=n(Jye,"STRONG",{});var Dst=s(pce);Z0o=r(Dst,"big_bird"),Dst.forEach(t),eAo=r(Jye," \u2014 "),tD=n(Jye,"A",{href:!0});var Gst=s(tD);oAo=r(Gst,"BigBirdForMaskedLM"),Gst.forEach(t),rAo=r(Jye," (BigBird model)"),Jye.forEach(t),tAo=i(U),q1=n(U,"LI",{});var Yye=s(q1);uce=n(Yye,"STRONG",{});var Ost=s(uce);aAo=r(Ost,"camembert"),Ost.forEach(t),nAo=r(Yye," \u2014 "),aD=n(Yye,"A",{href:!0});var Vst=s(aD);sAo=r(Vst,"CamembertForMaskedLM"),Vst.forEach(t),lAo=r(Yye," (CamemBERT model)"),Yye.forEach(t),iAo=i(U),N1=n(U,"LI",{});var Kye=s(N1);_ce=n(Kye,"STRONG",{});var Xst=s(_ce);dAo=r(Xst,"convbert"),Xst.forEach(t),cAo=r(Kye," \u2014 "),nD=n(Kye,"A",{href:!0});var zst=s(nD);fAo=r(zst,"ConvBertForMaskedLM"),zst.forEach(t),mAo=r(Kye," (ConvBERT model)"),Kye.forEach(t),gAo=i(U),j1=n(U,"LI",{});var Zye=s(j1);bce=n(Zye,"STRONG",{});var Wst=s(bce);hAo=r(Wst,"data2vec-text"),Wst.forEach(t),pAo=r(Zye," \u2014 "),sD=n(Zye,"A",{href:!0});var Qst=s(sD);uAo=r(Qst,"Data2VecTextForMaskedLM"),Qst.forEach(t),_Ao=r(Zye," (Data2VecText model)"),Zye.forEach(t),bAo=i(U),D1=n(U,"LI",{});var eLe=s(D1);vce=n(eLe,"STRONG",{});var Hst=s(vce);vAo=r(Hst,"deberta"),Hst.forEach(t),FAo=r(eLe," \u2014 "),lD=n(eLe,"A",{href:!0});var Ust=s(lD);TAo=r(Ust,"DebertaForMaskedLM"),Ust.forEach(t),MAo=r(eLe," (DeBERTa model)"),eLe.forEach(t),EAo=i(U),G1=n(U,"LI",{});var oLe=s(G1);Fce=n(oLe,"STRONG",{});var Jst=s(Fce);CAo=r(Jst,"deberta-v2"),Jst.forEach(t),wAo=r(oLe," \u2014 "),iD=n(oLe,"A",{href:!0});var Yst=s(iD);AAo=r(Yst,"DebertaV2ForMaskedLM"),Yst.forEach(t),yAo=r(oLe," (DeBERTa-v2 model)"),oLe.forEach(t),LAo=i(U),O1=n(U,"LI",{});var rLe=s(O1);Tce=n(rLe,"STRONG",{});var Kst=s(Tce);xAo=r(Kst,"distilbert"),Kst.forEach(t),$Ao=r(rLe," \u2014 "),dD=n(rLe,"A",{href:!0});var Zst=s(dD);kAo=r(Zst,"DistilBertForMaskedLM"),Zst.forEach(t),SAo=r(rLe," (DistilBERT model)"),rLe.forEach(t),RAo=i(U),V1=n(U,"LI",{});var tLe=s(V1);Mce=n(tLe,"STRONG",{});var elt=s(Mce);PAo=r(elt,"electra"),elt.forEach(t),BAo=r(tLe," \u2014 "),cD=n(tLe,"A",{href:!0});var olt=s(cD);IAo=r(olt,"ElectraForMaskedLM"),olt.forEach(t),qAo=r(tLe," (ELECTRA model)"),tLe.forEach(t),NAo=i(U),X1=n(U,"LI",{});var aLe=s(X1);Ece=n(aLe,"STRONG",{});var rlt=s(Ece);jAo=r(rlt,"flaubert"),rlt.forEach(t),DAo=r(aLe," \u2014 "),fD=n(aLe,"A",{href:!0});var tlt=s(fD);GAo=r(tlt,"FlaubertWithLMHeadModel"),tlt.forEach(t),OAo=r(aLe," (FlauBERT model)"),aLe.forEach(t),VAo=i(U),z1=n(U,"LI",{});var nLe=s(z1);Cce=n(nLe,"STRONG",{});var alt=s(Cce);XAo=r(alt,"fnet"),alt.forEach(t),zAo=r(nLe," \u2014 "),mD=n(nLe,"A",{href:!0});var nlt=s(mD);WAo=r(nlt,"FNetForMaskedLM"),nlt.forEach(t),QAo=r(nLe," (FNet model)"),nLe.forEach(t),HAo=i(U),W1=n(U,"LI",{});var sLe=s(W1);wce=n(sLe,"STRONG",{});var slt=s(wce);UAo=r(slt,"funnel"),slt.forEach(t),JAo=r(sLe," \u2014 "),gD=n(sLe,"A",{href:!0});var llt=s(gD);YAo=r(llt,"FunnelForMaskedLM"),llt.forEach(t),KAo=r(sLe," (Funnel Transformer model)"),sLe.forEach(t),ZAo=i(U),Q1=n(U,"LI",{});var lLe=s(Q1);Ace=n(lLe,"STRONG",{});var ilt=s(Ace);e6o=r(ilt,"ibert"),ilt.forEach(t),o6o=r(lLe," \u2014 "),hD=n(lLe,"A",{href:!0});var dlt=s(hD);r6o=r(dlt,"IBertForMaskedLM"),dlt.forEach(t),t6o=r(lLe," (I-BERT model)"),lLe.forEach(t),a6o=i(U),H1=n(U,"LI",{});var iLe=s(H1);yce=n(iLe,"STRONG",{});var clt=s(yce);n6o=r(clt,"layoutlm"),clt.forEach(t),s6o=r(iLe," \u2014 "),pD=n(iLe,"A",{href:!0});var flt=s(pD);l6o=r(flt,"LayoutLMForMaskedLM"),flt.forEach(t),i6o=r(iLe," (LayoutLM model)"),iLe.forEach(t),d6o=i(U),U1=n(U,"LI",{});var dLe=s(U1);Lce=n(dLe,"STRONG",{});var mlt=s(Lce);c6o=r(mlt,"longformer"),mlt.forEach(t),f6o=r(dLe," \u2014 "),uD=n(dLe,"A",{href:!0});var glt=s(uD);m6o=r(glt,"LongformerForMaskedLM"),glt.forEach(t),g6o=r(dLe," (Longformer model)"),dLe.forEach(t),h6o=i(U),J1=n(U,"LI",{});var cLe=s(J1);xce=n(cLe,"STRONG",{});var hlt=s(xce);p6o=r(hlt,"mbart"),hlt.forEach(t),u6o=r(cLe," \u2014 "),_D=n(cLe,"A",{href:!0});var plt=s(_D);_6o=r(plt,"MBartForConditionalGeneration"),plt.forEach(t),b6o=r(cLe," (mBART model)"),cLe.forEach(t),v6o=i(U),Y1=n(U,"LI",{});var fLe=s(Y1);$ce=n(fLe,"STRONG",{});var ult=s($ce);F6o=r(ult,"megatron-bert"),ult.forEach(t),T6o=r(fLe," \u2014 "),bD=n(fLe,"A",{href:!0});var _lt=s(bD);M6o=r(_lt,"MegatronBertForMaskedLM"),_lt.forEach(t),E6o=r(fLe," (MegatronBert model)"),fLe.forEach(t),C6o=i(U),K1=n(U,"LI",{});var mLe=s(K1);kce=n(mLe,"STRONG",{});var blt=s(kce);w6o=r(blt,"mobilebert"),blt.forEach(t),A6o=r(mLe," \u2014 "),vD=n(mLe,"A",{href:!0});var vlt=s(vD);y6o=r(vlt,"MobileBertForMaskedLM"),vlt.forEach(t),L6o=r(mLe," (MobileBERT model)"),mLe.forEach(t),x6o=i(U),Z1=n(U,"LI",{});var gLe=s(Z1);Sce=n(gLe,"STRONG",{});var Flt=s(Sce);$6o=r(Flt,"mpnet"),Flt.forEach(t),k6o=r(gLe," \u2014 "),FD=n(gLe,"A",{href:!0});var Tlt=s(FD);S6o=r(Tlt,"MPNetForMaskedLM"),Tlt.forEach(t),R6o=r(gLe," (MPNet model)"),gLe.forEach(t),P6o=i(U),e8=n(U,"LI",{});var hLe=s(e8);Rce=n(hLe,"STRONG",{});var Mlt=s(Rce);B6o=r(Mlt,"nystromformer"),Mlt.forEach(t),I6o=r(hLe," \u2014 "),TD=n(hLe,"A",{href:!0});var Elt=s(TD);q6o=r(Elt,"NystromformerForMaskedLM"),Elt.forEach(t),N6o=r(hLe," (Nystromformer model)"),hLe.forEach(t),j6o=i(U),o8=n(U,"LI",{});var pLe=s(o8);Pce=n(pLe,"STRONG",{});var Clt=s(Pce);D6o=r(Clt,"perceiver"),Clt.forEach(t),G6o=r(pLe," \u2014 "),MD=n(pLe,"A",{href:!0});var wlt=s(MD);O6o=r(wlt,"PerceiverForMaskedLM"),wlt.forEach(t),V6o=r(pLe," (Perceiver model)"),pLe.forEach(t),X6o=i(U),r8=n(U,"LI",{});var uLe=s(r8);Bce=n(uLe,"STRONG",{});var Alt=s(Bce);z6o=r(Alt,"qdqbert"),Alt.forEach(t),W6o=r(uLe," \u2014 "),ED=n(uLe,"A",{href:!0});var ylt=s(ED);Q6o=r(ylt,"QDQBertForMaskedLM"),ylt.forEach(t),H6o=r(uLe," (QDQBert model)"),uLe.forEach(t),U6o=i(U),t8=n(U,"LI",{});var _Le=s(t8);Ice=n(_Le,"STRONG",{});var Llt=s(Ice);J6o=r(Llt,"reformer"),Llt.forEach(t),Y6o=r(_Le," \u2014 "),CD=n(_Le,"A",{href:!0});var xlt=s(CD);K6o=r(xlt,"ReformerForMaskedLM"),xlt.forEach(t),Z6o=r(_Le," (Reformer model)"),_Le.forEach(t),eyo=i(U),a8=n(U,"LI",{});var bLe=s(a8);qce=n(bLe,"STRONG",{});var $lt=s(qce);oyo=r($lt,"rembert"),$lt.forEach(t),ryo=r(bLe," \u2014 "),wD=n(bLe,"A",{href:!0});var klt=s(wD);tyo=r(klt,"RemBertForMaskedLM"),klt.forEach(t),ayo=r(bLe," (RemBERT model)"),bLe.forEach(t),nyo=i(U),n8=n(U,"LI",{});var vLe=s(n8);Nce=n(vLe,"STRONG",{});var Slt=s(Nce);syo=r(Slt,"roberta"),Slt.forEach(t),lyo=r(vLe," \u2014 "),AD=n(vLe,"A",{href:!0});var Rlt=s(AD);iyo=r(Rlt,"RobertaForMaskedLM"),Rlt.forEach(t),dyo=r(vLe," (RoBERTa model)"),vLe.forEach(t),cyo=i(U),s8=n(U,"LI",{});var FLe=s(s8);jce=n(FLe,"STRONG",{});var Plt=s(jce);fyo=r(Plt,"roformer"),Plt.forEach(t),myo=r(FLe," \u2014 "),yD=n(FLe,"A",{href:!0});var Blt=s(yD);gyo=r(Blt,"RoFormerForMaskedLM"),Blt.forEach(t),hyo=r(FLe," (RoFormer model)"),FLe.forEach(t),pyo=i(U),l8=n(U,"LI",{});var TLe=s(l8);Dce=n(TLe,"STRONG",{});var Ilt=s(Dce);uyo=r(Ilt,"squeezebert"),Ilt.forEach(t),_yo=r(TLe," \u2014 "),LD=n(TLe,"A",{href:!0});var qlt=s(LD);byo=r(qlt,"SqueezeBertForMaskedLM"),qlt.forEach(t),vyo=r(TLe," (SqueezeBERT model)"),TLe.forEach(t),Fyo=i(U),i8=n(U,"LI",{});var MLe=s(i8);Gce=n(MLe,"STRONG",{});var Nlt=s(Gce);Tyo=r(Nlt,"tapas"),Nlt.forEach(t),Myo=r(MLe," \u2014 "),xD=n(MLe,"A",{href:!0});var jlt=s(xD);Eyo=r(jlt,"TapasForMaskedLM"),jlt.forEach(t),Cyo=r(MLe," (TAPAS model)"),MLe.forEach(t),wyo=i(U),d8=n(U,"LI",{});var ELe=s(d8);Oce=n(ELe,"STRONG",{});var Dlt=s(Oce);Ayo=r(Dlt,"wav2vec2"),Dlt.forEach(t),yyo=r(ELe," \u2014 "),Vce=n(ELe,"CODE",{});var Glt=s(Vce);Lyo=r(Glt,"Wav2Vec2ForMaskedLM"),Glt.forEach(t),xyo=r(ELe," (Wav2Vec2 model)"),ELe.forEach(t),$yo=i(U),c8=n(U,"LI",{});var CLe=s(c8);Xce=n(CLe,"STRONG",{});var Olt=s(Xce);kyo=r(Olt,"xlm"),Olt.forEach(t),Syo=r(CLe," \u2014 "),$D=n(CLe,"A",{href:!0});var Vlt=s($D);Ryo=r(Vlt,"XLMWithLMHeadModel"),Vlt.forEach(t),Pyo=r(CLe," (XLM model)"),CLe.forEach(t),Byo=i(U),f8=n(U,"LI",{});var wLe=s(f8);zce=n(wLe,"STRONG",{});var Xlt=s(zce);Iyo=r(Xlt,"xlm-roberta"),Xlt.forEach(t),qyo=r(wLe," \u2014 "),kD=n(wLe,"A",{href:!0});var zlt=s(kD);Nyo=r(zlt,"XLMRobertaForMaskedLM"),zlt.forEach(t),jyo=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),Dyo=i(U),m8=n(U,"LI",{});var ALe=s(m8);Wce=n(ALe,"STRONG",{});var Wlt=s(Wce);Gyo=r(Wlt,"xlm-roberta-xl"),Wlt.forEach(t),Oyo=r(ALe," \u2014 "),SD=n(ALe,"A",{href:!0});var Qlt=s(SD);Vyo=r(Qlt,"XLMRobertaXLForMaskedLM"),Qlt.forEach(t),Xyo=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),zyo=i(U),g8=n(U,"LI",{});var yLe=s(g8);Qce=n(yLe,"STRONG",{});var Hlt=s(Qce);Wyo=r(Hlt,"yoso"),Hlt.forEach(t),Qyo=r(yLe," \u2014 "),RD=n(yLe,"A",{href:!0});var Ult=s(RD);Hyo=r(Ult,"YosoForMaskedLM"),Ult.forEach(t),Uyo=r(yLe," (YOSO model)"),yLe.forEach(t),U.forEach(t),Jyo=i(aa),h8=n(aa,"P",{});var LLe=s(h8);Yyo=r(LLe,"The model is set in evaluation mode by default using "),Hce=n(LLe,"CODE",{});var Jlt=s(Hce);Kyo=r(Jlt,"model.eval()"),Jlt.forEach(t),Zyo=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(LLe,"CODE",{});var Ylt=s(Uce);eLo=r(Ylt,"model.train()"),Ylt.forEach(t),LLe.forEach(t),oLo=i(aa),T(p8.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),fNe=i(f),qi=n(f,"H2",{class:!0});var pDe=s(qi);u8=n(pDe,"A",{id:!0,class:!0,href:!0});var Klt=s(u8);Jce=n(Klt,"SPAN",{});var Zlt=s(Jce);T(_6.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),rLo=i(pDe),Yce=n(pDe,"SPAN",{});var eit=s(Yce);tLo=r(eit,"AutoModelForSeq2SeqLM"),eit.forEach(t),pDe.forEach(t),mNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(b6.$$.fragment,zs),aLo=i(zs),Ni=n(zs,"P",{});var vZ=s(Ni);nLo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PD=n(vZ,"A",{href:!0});var oit=s(PD);sLo=r(oit,"from_pretrained()"),oit.forEach(t),lLo=r(vZ," class method or the "),BD=n(vZ,"A",{href:!0});var rit=s(BD);iLo=r(rit,"from_config()"),rit.forEach(t),dLo=r(vZ,` class
method.`),vZ.forEach(t),cLo=i(zs),v6=n(zs,"P",{});var uDe=s(v6);fLo=r(uDe,"This class cannot be instantiated directly using "),Kce=n(uDe,"CODE",{});var tit=s(Kce);mLo=r(tit,"__init__()"),tit.forEach(t),gLo=r(uDe," (throws an error)."),uDe.forEach(t),hLo=i(zs),lt=n(zs,"DIV",{class:!0});var qw=s(lt);T(F6.$$.fragment,qw),pLo=i(qw),Zce=n(qw,"P",{});var ait=s(Zce);uLo=r(ait,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ait.forEach(t),_Lo=i(qw),ji=n(qw,"P",{});var FZ=s(ji);bLo=r(FZ,`Note:
Loading a model from its configuration file does `),efe=n(FZ,"STRONG",{});var nit=s(efe);vLo=r(nit,"not"),nit.forEach(t),FLo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=n(FZ,"A",{href:!0});var sit=s(ID);TLo=r(sit,"from_pretrained()"),sit.forEach(t),MLo=r(FZ," to load the model weights."),FZ.forEach(t),ELo=i(qw),T(_8.$$.fragment,qw),qw.forEach(t),CLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(T6.$$.fragment,na),wLo=i(na),ofe=n(na,"P",{});var lit=s(ofe);ALo=r(lit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lit.forEach(t),yLo=i(na),Sa=n(na,"P",{});var Nw=s(Sa);LLo=r(Nw,"The model class to instantiate is selected based on the "),rfe=n(Nw,"CODE",{});var iit=s(rfe);xLo=r(iit,"model_type"),iit.forEach(t),$Lo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),tfe=n(Nw,"CODE",{});var dit=s(tfe);kLo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),SLo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(Nw,"CODE",{});var cit=s(afe);RLo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),PLo=r(Nw,":"),Nw.forEach(t),BLo=i(na),ue=n(na,"UL",{});var ve=s(ue);b8=n(ve,"LI",{});var xLe=s(b8);nfe=n(xLe,"STRONG",{});var fit=s(nfe);ILo=r(fit,"bart"),fit.forEach(t),qLo=r(xLe," \u2014 "),qD=n(xLe,"A",{href:!0});var mit=s(qD);NLo=r(mit,"BartForConditionalGeneration"),mit.forEach(t),jLo=r(xLe," (BART model)"),xLe.forEach(t),DLo=i(ve),v8=n(ve,"LI",{});var $Le=s(v8);sfe=n($Le,"STRONG",{});var git=s(sfe);GLo=r(git,"bigbird_pegasus"),git.forEach(t),OLo=r($Le," \u2014 "),ND=n($Le,"A",{href:!0});var hit=s(ND);VLo=r(hit,"BigBirdPegasusForConditionalGeneration"),hit.forEach(t),XLo=r($Le," (BigBirdPegasus model)"),$Le.forEach(t),zLo=i(ve),F8=n(ve,"LI",{});var kLe=s(F8);lfe=n(kLe,"STRONG",{});var pit=s(lfe);WLo=r(pit,"blenderbot"),pit.forEach(t),QLo=r(kLe," \u2014 "),jD=n(kLe,"A",{href:!0});var uit=s(jD);HLo=r(uit,"BlenderbotForConditionalGeneration"),uit.forEach(t),ULo=r(kLe," (Blenderbot model)"),kLe.forEach(t),JLo=i(ve),T8=n(ve,"LI",{});var SLe=s(T8);ife=n(SLe,"STRONG",{});var _it=s(ife);YLo=r(_it,"blenderbot-small"),_it.forEach(t),KLo=r(SLe," \u2014 "),DD=n(SLe,"A",{href:!0});var bit=s(DD);ZLo=r(bit,"BlenderbotSmallForConditionalGeneration"),bit.forEach(t),e9o=r(SLe," (BlenderbotSmall model)"),SLe.forEach(t),o9o=i(ve),M8=n(ve,"LI",{});var RLe=s(M8);dfe=n(RLe,"STRONG",{});var vit=s(dfe);r9o=r(vit,"encoder-decoder"),vit.forEach(t),t9o=r(RLe," \u2014 "),GD=n(RLe,"A",{href:!0});var Fit=s(GD);a9o=r(Fit,"EncoderDecoderModel"),Fit.forEach(t),n9o=r(RLe," (Encoder decoder model)"),RLe.forEach(t),s9o=i(ve),E8=n(ve,"LI",{});var PLe=s(E8);cfe=n(PLe,"STRONG",{});var Tit=s(cfe);l9o=r(Tit,"fsmt"),Tit.forEach(t),i9o=r(PLe," \u2014 "),OD=n(PLe,"A",{href:!0});var Mit=s(OD);d9o=r(Mit,"FSMTForConditionalGeneration"),Mit.forEach(t),c9o=r(PLe," (FairSeq Machine-Translation model)"),PLe.forEach(t),f9o=i(ve),C8=n(ve,"LI",{});var BLe=s(C8);ffe=n(BLe,"STRONG",{});var Eit=s(ffe);m9o=r(Eit,"led"),Eit.forEach(t),g9o=r(BLe," \u2014 "),VD=n(BLe,"A",{href:!0});var Cit=s(VD);h9o=r(Cit,"LEDForConditionalGeneration"),Cit.forEach(t),p9o=r(BLe," (LED model)"),BLe.forEach(t),u9o=i(ve),w8=n(ve,"LI",{});var ILe=s(w8);mfe=n(ILe,"STRONG",{});var wit=s(mfe);_9o=r(wit,"m2m_100"),wit.forEach(t),b9o=r(ILe," \u2014 "),XD=n(ILe,"A",{href:!0});var Ait=s(XD);v9o=r(Ait,"M2M100ForConditionalGeneration"),Ait.forEach(t),F9o=r(ILe," (M2M100 model)"),ILe.forEach(t),T9o=i(ve),A8=n(ve,"LI",{});var qLe=s(A8);gfe=n(qLe,"STRONG",{});var yit=s(gfe);M9o=r(yit,"marian"),yit.forEach(t),E9o=r(qLe," \u2014 "),zD=n(qLe,"A",{href:!0});var Lit=s(zD);C9o=r(Lit,"MarianMTModel"),Lit.forEach(t),w9o=r(qLe," (Marian model)"),qLe.forEach(t),A9o=i(ve),y8=n(ve,"LI",{});var NLe=s(y8);hfe=n(NLe,"STRONG",{});var xit=s(hfe);y9o=r(xit,"mbart"),xit.forEach(t),L9o=r(NLe," \u2014 "),WD=n(NLe,"A",{href:!0});var $it=s(WD);x9o=r($it,"MBartForConditionalGeneration"),$it.forEach(t),$9o=r(NLe," (mBART model)"),NLe.forEach(t),k9o=i(ve),L8=n(ve,"LI",{});var jLe=s(L8);pfe=n(jLe,"STRONG",{});var kit=s(pfe);S9o=r(kit,"mt5"),kit.forEach(t),R9o=r(jLe," \u2014 "),QD=n(jLe,"A",{href:!0});var Sit=s(QD);P9o=r(Sit,"MT5ForConditionalGeneration"),Sit.forEach(t),B9o=r(jLe," (mT5 model)"),jLe.forEach(t),I9o=i(ve),x8=n(ve,"LI",{});var DLe=s(x8);ufe=n(DLe,"STRONG",{});var Rit=s(ufe);q9o=r(Rit,"pegasus"),Rit.forEach(t),N9o=r(DLe," \u2014 "),HD=n(DLe,"A",{href:!0});var Pit=s(HD);j9o=r(Pit,"PegasusForConditionalGeneration"),Pit.forEach(t),D9o=r(DLe," (Pegasus model)"),DLe.forEach(t),G9o=i(ve),$8=n(ve,"LI",{});var GLe=s($8);_fe=n(GLe,"STRONG",{});var Bit=s(_fe);O9o=r(Bit,"plbart"),Bit.forEach(t),V9o=r(GLe," \u2014 "),UD=n(GLe,"A",{href:!0});var Iit=s(UD);X9o=r(Iit,"PLBartForConditionalGeneration"),Iit.forEach(t),z9o=r(GLe," (PLBart model)"),GLe.forEach(t),W9o=i(ve),k8=n(ve,"LI",{});var OLe=s(k8);bfe=n(OLe,"STRONG",{});var qit=s(bfe);Q9o=r(qit,"prophetnet"),qit.forEach(t),H9o=r(OLe," \u2014 "),JD=n(OLe,"A",{href:!0});var Nit=s(JD);U9o=r(Nit,"ProphetNetForConditionalGeneration"),Nit.forEach(t),J9o=r(OLe," (ProphetNet model)"),OLe.forEach(t),Y9o=i(ve),S8=n(ve,"LI",{});var VLe=s(S8);vfe=n(VLe,"STRONG",{});var jit=s(vfe);K9o=r(jit,"t5"),jit.forEach(t),Z9o=r(VLe," \u2014 "),YD=n(VLe,"A",{href:!0});var Dit=s(YD);exo=r(Dit,"T5ForConditionalGeneration"),Dit.forEach(t),oxo=r(VLe," (T5 model)"),VLe.forEach(t),rxo=i(ve),R8=n(ve,"LI",{});var XLe=s(R8);Ffe=n(XLe,"STRONG",{});var Git=s(Ffe);txo=r(Git,"xlm-prophetnet"),Git.forEach(t),axo=r(XLe," \u2014 "),KD=n(XLe,"A",{href:!0});var Oit=s(KD);nxo=r(Oit,"XLMProphetNetForConditionalGeneration"),Oit.forEach(t),sxo=r(XLe," (XLMProphetNet model)"),XLe.forEach(t),ve.forEach(t),lxo=i(na),P8=n(na,"P",{});var zLe=s(P8);ixo=r(zLe,"The model is set in evaluation mode by default using "),Tfe=n(zLe,"CODE",{});var Vit=s(Tfe);dxo=r(Vit,"model.eval()"),Vit.forEach(t),cxo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(zLe,"CODE",{});var Xit=s(Mfe);fxo=r(Xit,"model.train()"),Xit.forEach(t),zLe.forEach(t),mxo=i(na),T(B8.$$.fragment,na),na.forEach(t),zs.forEach(t),gNe=i(f),Di=n(f,"H2",{class:!0});var _De=s(Di);I8=n(_De,"A",{id:!0,class:!0,href:!0});var zit=s(I8);Efe=n(zit,"SPAN",{});var Wit=s(Efe);T(M6.$$.fragment,Wit),Wit.forEach(t),zit.forEach(t),gxo=i(_De),Cfe=n(_De,"SPAN",{});var Qit=s(Cfe);hxo=r(Qit,"AutoModelForSequenceClassification"),Qit.forEach(t),_De.forEach(t),hNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(E6.$$.fragment,Ws),pxo=i(Ws),Gi=n(Ws,"P",{});var TZ=s(Gi);uxo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZD=n(TZ,"A",{href:!0});var Hit=s(ZD);_xo=r(Hit,"from_pretrained()"),Hit.forEach(t),bxo=r(TZ," class method or the "),eG=n(TZ,"A",{href:!0});var Uit=s(eG);vxo=r(Uit,"from_config()"),Uit.forEach(t),Fxo=r(TZ,` class
method.`),TZ.forEach(t),Txo=i(Ws),C6=n(Ws,"P",{});var bDe=s(C6);Mxo=r(bDe,"This class cannot be instantiated directly using "),wfe=n(bDe,"CODE",{});var Jit=s(wfe);Exo=r(Jit,"__init__()"),Jit.forEach(t),Cxo=r(bDe," (throws an error)."),bDe.forEach(t),wxo=i(Ws),it=n(Ws,"DIV",{class:!0});var jw=s(it);T(w6.$$.fragment,jw),Axo=i(jw),Afe=n(jw,"P",{});var Yit=s(Afe);yxo=r(Yit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yit.forEach(t),Lxo=i(jw),Oi=n(jw,"P",{});var MZ=s(Oi);xxo=r(MZ,`Note:
Loading a model from its configuration file does `),yfe=n(MZ,"STRONG",{});var Kit=s(yfe);$xo=r(Kit,"not"),Kit.forEach(t),kxo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(MZ,"A",{href:!0});var Zit=s(oG);Sxo=r(Zit,"from_pretrained()"),Zit.forEach(t),Rxo=r(MZ," to load the model weights."),MZ.forEach(t),Pxo=i(jw),T(q8.$$.fragment,jw),jw.forEach(t),Bxo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(A6.$$.fragment,sa),Ixo=i(sa),Lfe=n(sa,"P",{});var edt=s(Lfe);qxo=r(edt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),edt.forEach(t),Nxo=i(sa),Ra=n(sa,"P",{});var Dw=s(Ra);jxo=r(Dw,"The model class to instantiate is selected based on the "),xfe=n(Dw,"CODE",{});var odt=s(xfe);Dxo=r(odt,"model_type"),odt.forEach(t),Gxo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),$fe=n(Dw,"CODE",{});var rdt=s($fe);Oxo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),Vxo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(Dw,"CODE",{});var tdt=s(kfe);Xxo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),zxo=r(Dw,":"),Dw.forEach(t),Wxo=i(sa),q=n(sa,"UL",{});var j=s(q);N8=n(j,"LI",{});var WLe=s(N8);Sfe=n(WLe,"STRONG",{});var adt=s(Sfe);Qxo=r(adt,"albert"),adt.forEach(t),Hxo=r(WLe," \u2014 "),rG=n(WLe,"A",{href:!0});var ndt=s(rG);Uxo=r(ndt,"AlbertForSequenceClassification"),ndt.forEach(t),Jxo=r(WLe," (ALBERT model)"),WLe.forEach(t),Yxo=i(j),j8=n(j,"LI",{});var QLe=s(j8);Rfe=n(QLe,"STRONG",{});var sdt=s(Rfe);Kxo=r(sdt,"bart"),sdt.forEach(t),Zxo=r(QLe," \u2014 "),tG=n(QLe,"A",{href:!0});var ldt=s(tG);e$o=r(ldt,"BartForSequenceClassification"),ldt.forEach(t),o$o=r(QLe," (BART model)"),QLe.forEach(t),r$o=i(j),D8=n(j,"LI",{});var HLe=s(D8);Pfe=n(HLe,"STRONG",{});var idt=s(Pfe);t$o=r(idt,"bert"),idt.forEach(t),a$o=r(HLe," \u2014 "),aG=n(HLe,"A",{href:!0});var ddt=s(aG);n$o=r(ddt,"BertForSequenceClassification"),ddt.forEach(t),s$o=r(HLe," (BERT model)"),HLe.forEach(t),l$o=i(j),G8=n(j,"LI",{});var ULe=s(G8);Bfe=n(ULe,"STRONG",{});var cdt=s(Bfe);i$o=r(cdt,"big_bird"),cdt.forEach(t),d$o=r(ULe," \u2014 "),nG=n(ULe,"A",{href:!0});var fdt=s(nG);c$o=r(fdt,"BigBirdForSequenceClassification"),fdt.forEach(t),f$o=r(ULe," (BigBird model)"),ULe.forEach(t),m$o=i(j),O8=n(j,"LI",{});var JLe=s(O8);Ife=n(JLe,"STRONG",{});var mdt=s(Ife);g$o=r(mdt,"bigbird_pegasus"),mdt.forEach(t),h$o=r(JLe," \u2014 "),sG=n(JLe,"A",{href:!0});var gdt=s(sG);p$o=r(gdt,"BigBirdPegasusForSequenceClassification"),gdt.forEach(t),u$o=r(JLe," (BigBirdPegasus model)"),JLe.forEach(t),_$o=i(j),V8=n(j,"LI",{});var YLe=s(V8);qfe=n(YLe,"STRONG",{});var hdt=s(qfe);b$o=r(hdt,"camembert"),hdt.forEach(t),v$o=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var pdt=s(lG);F$o=r(pdt,"CamembertForSequenceClassification"),pdt.forEach(t),T$o=r(YLe," (CamemBERT model)"),YLe.forEach(t),M$o=i(j),X8=n(j,"LI",{});var KLe=s(X8);Nfe=n(KLe,"STRONG",{});var udt=s(Nfe);E$o=r(udt,"canine"),udt.forEach(t),C$o=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var _dt=s(iG);w$o=r(_dt,"CanineForSequenceClassification"),_dt.forEach(t),A$o=r(KLe," (Canine model)"),KLe.forEach(t),y$o=i(j),z8=n(j,"LI",{});var ZLe=s(z8);jfe=n(ZLe,"STRONG",{});var bdt=s(jfe);L$o=r(bdt,"convbert"),bdt.forEach(t),x$o=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var vdt=s(dG);$$o=r(vdt,"ConvBertForSequenceClassification"),vdt.forEach(t),k$o=r(ZLe," (ConvBERT model)"),ZLe.forEach(t),S$o=i(j),W8=n(j,"LI",{});var e9e=s(W8);Dfe=n(e9e,"STRONG",{});var Fdt=s(Dfe);R$o=r(Fdt,"ctrl"),Fdt.forEach(t),P$o=r(e9e," \u2014 "),cG=n(e9e,"A",{href:!0});var Tdt=s(cG);B$o=r(Tdt,"CTRLForSequenceClassification"),Tdt.forEach(t),I$o=r(e9e," (CTRL model)"),e9e.forEach(t),q$o=i(j),Q8=n(j,"LI",{});var o9e=s(Q8);Gfe=n(o9e,"STRONG",{});var Mdt=s(Gfe);N$o=r(Mdt,"data2vec-text"),Mdt.forEach(t),j$o=r(o9e," \u2014 "),fG=n(o9e,"A",{href:!0});var Edt=s(fG);D$o=r(Edt,"Data2VecTextForSequenceClassification"),Edt.forEach(t),G$o=r(o9e," (Data2VecText model)"),o9e.forEach(t),O$o=i(j),H8=n(j,"LI",{});var r9e=s(H8);Ofe=n(r9e,"STRONG",{});var Cdt=s(Ofe);V$o=r(Cdt,"deberta"),Cdt.forEach(t),X$o=r(r9e," \u2014 "),mG=n(r9e,"A",{href:!0});var wdt=s(mG);z$o=r(wdt,"DebertaForSequenceClassification"),wdt.forEach(t),W$o=r(r9e," (DeBERTa model)"),r9e.forEach(t),Q$o=i(j),U8=n(j,"LI",{});var t9e=s(U8);Vfe=n(t9e,"STRONG",{});var Adt=s(Vfe);H$o=r(Adt,"deberta-v2"),Adt.forEach(t),U$o=r(t9e," \u2014 "),gG=n(t9e,"A",{href:!0});var ydt=s(gG);J$o=r(ydt,"DebertaV2ForSequenceClassification"),ydt.forEach(t),Y$o=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),K$o=i(j),J8=n(j,"LI",{});var a9e=s(J8);Xfe=n(a9e,"STRONG",{});var Ldt=s(Xfe);Z$o=r(Ldt,"distilbert"),Ldt.forEach(t),eko=r(a9e," \u2014 "),hG=n(a9e,"A",{href:!0});var xdt=s(hG);oko=r(xdt,"DistilBertForSequenceClassification"),xdt.forEach(t),rko=r(a9e," (DistilBERT model)"),a9e.forEach(t),tko=i(j),Y8=n(j,"LI",{});var n9e=s(Y8);zfe=n(n9e,"STRONG",{});var $dt=s(zfe);ako=r($dt,"electra"),$dt.forEach(t),nko=r(n9e," \u2014 "),pG=n(n9e,"A",{href:!0});var kdt=s(pG);sko=r(kdt,"ElectraForSequenceClassification"),kdt.forEach(t),lko=r(n9e," (ELECTRA model)"),n9e.forEach(t),iko=i(j),K8=n(j,"LI",{});var s9e=s(K8);Wfe=n(s9e,"STRONG",{});var Sdt=s(Wfe);dko=r(Sdt,"flaubert"),Sdt.forEach(t),cko=r(s9e," \u2014 "),uG=n(s9e,"A",{href:!0});var Rdt=s(uG);fko=r(Rdt,"FlaubertForSequenceClassification"),Rdt.forEach(t),mko=r(s9e," (FlauBERT model)"),s9e.forEach(t),gko=i(j),Z8=n(j,"LI",{});var l9e=s(Z8);Qfe=n(l9e,"STRONG",{});var Pdt=s(Qfe);hko=r(Pdt,"fnet"),Pdt.forEach(t),pko=r(l9e," \u2014 "),_G=n(l9e,"A",{href:!0});var Bdt=s(_G);uko=r(Bdt,"FNetForSequenceClassification"),Bdt.forEach(t),_ko=r(l9e," (FNet model)"),l9e.forEach(t),bko=i(j),eb=n(j,"LI",{});var i9e=s(eb);Hfe=n(i9e,"STRONG",{});var Idt=s(Hfe);vko=r(Idt,"funnel"),Idt.forEach(t),Fko=r(i9e," \u2014 "),bG=n(i9e,"A",{href:!0});var qdt=s(bG);Tko=r(qdt,"FunnelForSequenceClassification"),qdt.forEach(t),Mko=r(i9e," (Funnel Transformer model)"),i9e.forEach(t),Eko=i(j),ob=n(j,"LI",{});var d9e=s(ob);Ufe=n(d9e,"STRONG",{});var Ndt=s(Ufe);Cko=r(Ndt,"gpt2"),Ndt.forEach(t),wko=r(d9e," \u2014 "),vG=n(d9e,"A",{href:!0});var jdt=s(vG);Ako=r(jdt,"GPT2ForSequenceClassification"),jdt.forEach(t),yko=r(d9e," (OpenAI GPT-2 model)"),d9e.forEach(t),Lko=i(j),rb=n(j,"LI",{});var c9e=s(rb);Jfe=n(c9e,"STRONG",{});var Ddt=s(Jfe);xko=r(Ddt,"gpt_neo"),Ddt.forEach(t),$ko=r(c9e," \u2014 "),FG=n(c9e,"A",{href:!0});var Gdt=s(FG);kko=r(Gdt,"GPTNeoForSequenceClassification"),Gdt.forEach(t),Sko=r(c9e," (GPT Neo model)"),c9e.forEach(t),Rko=i(j),tb=n(j,"LI",{});var f9e=s(tb);Yfe=n(f9e,"STRONG",{});var Odt=s(Yfe);Pko=r(Odt,"gptj"),Odt.forEach(t),Bko=r(f9e," \u2014 "),TG=n(f9e,"A",{href:!0});var Vdt=s(TG);Iko=r(Vdt,"GPTJForSequenceClassification"),Vdt.forEach(t),qko=r(f9e," (GPT-J model)"),f9e.forEach(t),Nko=i(j),ab=n(j,"LI",{});var m9e=s(ab);Kfe=n(m9e,"STRONG",{});var Xdt=s(Kfe);jko=r(Xdt,"ibert"),Xdt.forEach(t),Dko=r(m9e," \u2014 "),MG=n(m9e,"A",{href:!0});var zdt=s(MG);Gko=r(zdt,"IBertForSequenceClassification"),zdt.forEach(t),Oko=r(m9e," (I-BERT model)"),m9e.forEach(t),Vko=i(j),nb=n(j,"LI",{});var g9e=s(nb);Zfe=n(g9e,"STRONG",{});var Wdt=s(Zfe);Xko=r(Wdt,"layoutlm"),Wdt.forEach(t),zko=r(g9e," \u2014 "),EG=n(g9e,"A",{href:!0});var Qdt=s(EG);Wko=r(Qdt,"LayoutLMForSequenceClassification"),Qdt.forEach(t),Qko=r(g9e," (LayoutLM model)"),g9e.forEach(t),Hko=i(j),sb=n(j,"LI",{});var h9e=s(sb);eme=n(h9e,"STRONG",{});var Hdt=s(eme);Uko=r(Hdt,"layoutlmv2"),Hdt.forEach(t),Jko=r(h9e," \u2014 "),CG=n(h9e,"A",{href:!0});var Udt=s(CG);Yko=r(Udt,"LayoutLMv2ForSequenceClassification"),Udt.forEach(t),Kko=r(h9e," (LayoutLMv2 model)"),h9e.forEach(t),Zko=i(j),lb=n(j,"LI",{});var p9e=s(lb);ome=n(p9e,"STRONG",{});var Jdt=s(ome);eSo=r(Jdt,"layoutlmv3"),Jdt.forEach(t),oSo=r(p9e," \u2014 "),wG=n(p9e,"A",{href:!0});var Ydt=s(wG);rSo=r(Ydt,"LayoutLMv3ForSequenceClassification"),Ydt.forEach(t),tSo=r(p9e," (LayoutLMv3 model)"),p9e.forEach(t),aSo=i(j),ib=n(j,"LI",{});var u9e=s(ib);rme=n(u9e,"STRONG",{});var Kdt=s(rme);nSo=r(Kdt,"led"),Kdt.forEach(t),sSo=r(u9e," \u2014 "),AG=n(u9e,"A",{href:!0});var Zdt=s(AG);lSo=r(Zdt,"LEDForSequenceClassification"),Zdt.forEach(t),iSo=r(u9e," (LED model)"),u9e.forEach(t),dSo=i(j),db=n(j,"LI",{});var _9e=s(db);tme=n(_9e,"STRONG",{});var ect=s(tme);cSo=r(ect,"longformer"),ect.forEach(t),fSo=r(_9e," \u2014 "),yG=n(_9e,"A",{href:!0});var oct=s(yG);mSo=r(oct,"LongformerForSequenceClassification"),oct.forEach(t),gSo=r(_9e," (Longformer model)"),_9e.forEach(t),hSo=i(j),cb=n(j,"LI",{});var b9e=s(cb);ame=n(b9e,"STRONG",{});var rct=s(ame);pSo=r(rct,"mbart"),rct.forEach(t),uSo=r(b9e," \u2014 "),LG=n(b9e,"A",{href:!0});var tct=s(LG);_So=r(tct,"MBartForSequenceClassification"),tct.forEach(t),bSo=r(b9e," (mBART model)"),b9e.forEach(t),vSo=i(j),fb=n(j,"LI",{});var v9e=s(fb);nme=n(v9e,"STRONG",{});var act=s(nme);FSo=r(act,"megatron-bert"),act.forEach(t),TSo=r(v9e," \u2014 "),xG=n(v9e,"A",{href:!0});var nct=s(xG);MSo=r(nct,"MegatronBertForSequenceClassification"),nct.forEach(t),ESo=r(v9e," (MegatronBert model)"),v9e.forEach(t),CSo=i(j),mb=n(j,"LI",{});var F9e=s(mb);sme=n(F9e,"STRONG",{});var sct=s(sme);wSo=r(sct,"mobilebert"),sct.forEach(t),ASo=r(F9e," \u2014 "),$G=n(F9e,"A",{href:!0});var lct=s($G);ySo=r(lct,"MobileBertForSequenceClassification"),lct.forEach(t),LSo=r(F9e," (MobileBERT model)"),F9e.forEach(t),xSo=i(j),gb=n(j,"LI",{});var T9e=s(gb);lme=n(T9e,"STRONG",{});var ict=s(lme);$So=r(ict,"mpnet"),ict.forEach(t),kSo=r(T9e," \u2014 "),kG=n(T9e,"A",{href:!0});var dct=s(kG);SSo=r(dct,"MPNetForSequenceClassification"),dct.forEach(t),RSo=r(T9e," (MPNet model)"),T9e.forEach(t),PSo=i(j),hb=n(j,"LI",{});var M9e=s(hb);ime=n(M9e,"STRONG",{});var cct=s(ime);BSo=r(cct,"nystromformer"),cct.forEach(t),ISo=r(M9e," \u2014 "),SG=n(M9e,"A",{href:!0});var fct=s(SG);qSo=r(fct,"NystromformerForSequenceClassification"),fct.forEach(t),NSo=r(M9e," (Nystromformer model)"),M9e.forEach(t),jSo=i(j),pb=n(j,"LI",{});var E9e=s(pb);dme=n(E9e,"STRONG",{});var mct=s(dme);DSo=r(mct,"openai-gpt"),mct.forEach(t),GSo=r(E9e," \u2014 "),RG=n(E9e,"A",{href:!0});var gct=s(RG);OSo=r(gct,"OpenAIGPTForSequenceClassification"),gct.forEach(t),VSo=r(E9e," (OpenAI GPT model)"),E9e.forEach(t),XSo=i(j),ub=n(j,"LI",{});var C9e=s(ub);cme=n(C9e,"STRONG",{});var hct=s(cme);zSo=r(hct,"perceiver"),hct.forEach(t),WSo=r(C9e," \u2014 "),PG=n(C9e,"A",{href:!0});var pct=s(PG);QSo=r(pct,"PerceiverForSequenceClassification"),pct.forEach(t),HSo=r(C9e," (Perceiver model)"),C9e.forEach(t),USo=i(j),_b=n(j,"LI",{});var w9e=s(_b);fme=n(w9e,"STRONG",{});var uct=s(fme);JSo=r(uct,"plbart"),uct.forEach(t),YSo=r(w9e," \u2014 "),BG=n(w9e,"A",{href:!0});var _ct=s(BG);KSo=r(_ct,"PLBartForSequenceClassification"),_ct.forEach(t),ZSo=r(w9e," (PLBart model)"),w9e.forEach(t),eRo=i(j),bb=n(j,"LI",{});var A9e=s(bb);mme=n(A9e,"STRONG",{});var bct=s(mme);oRo=r(bct,"qdqbert"),bct.forEach(t),rRo=r(A9e," \u2014 "),IG=n(A9e,"A",{href:!0});var vct=s(IG);tRo=r(vct,"QDQBertForSequenceClassification"),vct.forEach(t),aRo=r(A9e," (QDQBert model)"),A9e.forEach(t),nRo=i(j),vb=n(j,"LI",{});var y9e=s(vb);gme=n(y9e,"STRONG",{});var Fct=s(gme);sRo=r(Fct,"reformer"),Fct.forEach(t),lRo=r(y9e," \u2014 "),qG=n(y9e,"A",{href:!0});var Tct=s(qG);iRo=r(Tct,"ReformerForSequenceClassification"),Tct.forEach(t),dRo=r(y9e," (Reformer model)"),y9e.forEach(t),cRo=i(j),Fb=n(j,"LI",{});var L9e=s(Fb);hme=n(L9e,"STRONG",{});var Mct=s(hme);fRo=r(Mct,"rembert"),Mct.forEach(t),mRo=r(L9e," \u2014 "),NG=n(L9e,"A",{href:!0});var Ect=s(NG);gRo=r(Ect,"RemBertForSequenceClassification"),Ect.forEach(t),hRo=r(L9e," (RemBERT model)"),L9e.forEach(t),pRo=i(j),Tb=n(j,"LI",{});var x9e=s(Tb);pme=n(x9e,"STRONG",{});var Cct=s(pme);uRo=r(Cct,"roberta"),Cct.forEach(t),_Ro=r(x9e," \u2014 "),jG=n(x9e,"A",{href:!0});var wct=s(jG);bRo=r(wct,"RobertaForSequenceClassification"),wct.forEach(t),vRo=r(x9e," (RoBERTa model)"),x9e.forEach(t),FRo=i(j),Mb=n(j,"LI",{});var $9e=s(Mb);ume=n($9e,"STRONG",{});var Act=s(ume);TRo=r(Act,"roformer"),Act.forEach(t),MRo=r($9e," \u2014 "),DG=n($9e,"A",{href:!0});var yct=s(DG);ERo=r(yct,"RoFormerForSequenceClassification"),yct.forEach(t),CRo=r($9e," (RoFormer model)"),$9e.forEach(t),wRo=i(j),Eb=n(j,"LI",{});var k9e=s(Eb);_me=n(k9e,"STRONG",{});var Lct=s(_me);ARo=r(Lct,"squeezebert"),Lct.forEach(t),yRo=r(k9e," \u2014 "),GG=n(k9e,"A",{href:!0});var xct=s(GG);LRo=r(xct,"SqueezeBertForSequenceClassification"),xct.forEach(t),xRo=r(k9e," (SqueezeBERT model)"),k9e.forEach(t),$Ro=i(j),Cb=n(j,"LI",{});var S9e=s(Cb);bme=n(S9e,"STRONG",{});var $ct=s(bme);kRo=r($ct,"tapas"),$ct.forEach(t),SRo=r(S9e," \u2014 "),OG=n(S9e,"A",{href:!0});var kct=s(OG);RRo=r(kct,"TapasForSequenceClassification"),kct.forEach(t),PRo=r(S9e," (TAPAS model)"),S9e.forEach(t),BRo=i(j),wb=n(j,"LI",{});var R9e=s(wb);vme=n(R9e,"STRONG",{});var Sct=s(vme);IRo=r(Sct,"transfo-xl"),Sct.forEach(t),qRo=r(R9e," \u2014 "),VG=n(R9e,"A",{href:!0});var Rct=s(VG);NRo=r(Rct,"TransfoXLForSequenceClassification"),Rct.forEach(t),jRo=r(R9e," (Transformer-XL model)"),R9e.forEach(t),DRo=i(j),Ab=n(j,"LI",{});var P9e=s(Ab);Fme=n(P9e,"STRONG",{});var Pct=s(Fme);GRo=r(Pct,"xlm"),Pct.forEach(t),ORo=r(P9e," \u2014 "),XG=n(P9e,"A",{href:!0});var Bct=s(XG);VRo=r(Bct,"XLMForSequenceClassification"),Bct.forEach(t),XRo=r(P9e," (XLM model)"),P9e.forEach(t),zRo=i(j),yb=n(j,"LI",{});var B9e=s(yb);Tme=n(B9e,"STRONG",{});var Ict=s(Tme);WRo=r(Ict,"xlm-roberta"),Ict.forEach(t),QRo=r(B9e," \u2014 "),zG=n(B9e,"A",{href:!0});var qct=s(zG);HRo=r(qct,"XLMRobertaForSequenceClassification"),qct.forEach(t),URo=r(B9e," (XLM-RoBERTa model)"),B9e.forEach(t),JRo=i(j),Lb=n(j,"LI",{});var I9e=s(Lb);Mme=n(I9e,"STRONG",{});var Nct=s(Mme);YRo=r(Nct,"xlm-roberta-xl"),Nct.forEach(t),KRo=r(I9e," \u2014 "),WG=n(I9e,"A",{href:!0});var jct=s(WG);ZRo=r(jct,"XLMRobertaXLForSequenceClassification"),jct.forEach(t),ePo=r(I9e," (XLM-RoBERTa-XL model)"),I9e.forEach(t),oPo=i(j),xb=n(j,"LI",{});var q9e=s(xb);Eme=n(q9e,"STRONG",{});var Dct=s(Eme);rPo=r(Dct,"xlnet"),Dct.forEach(t),tPo=r(q9e," \u2014 "),QG=n(q9e,"A",{href:!0});var Gct=s(QG);aPo=r(Gct,"XLNetForSequenceClassification"),Gct.forEach(t),nPo=r(q9e," (XLNet model)"),q9e.forEach(t),sPo=i(j),$b=n(j,"LI",{});var N9e=s($b);Cme=n(N9e,"STRONG",{});var Oct=s(Cme);lPo=r(Oct,"yoso"),Oct.forEach(t),iPo=r(N9e," \u2014 "),HG=n(N9e,"A",{href:!0});var Vct=s(HG);dPo=r(Vct,"YosoForSequenceClassification"),Vct.forEach(t),cPo=r(N9e," (YOSO model)"),N9e.forEach(t),j.forEach(t),fPo=i(sa),kb=n(sa,"P",{});var j9e=s(kb);mPo=r(j9e,"The model is set in evaluation mode by default using "),wme=n(j9e,"CODE",{});var Xct=s(wme);gPo=r(Xct,"model.eval()"),Xct.forEach(t),hPo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=n(j9e,"CODE",{});var zct=s(Ame);pPo=r(zct,"model.train()"),zct.forEach(t),j9e.forEach(t),uPo=i(sa),T(Sb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),pNe=i(f),Vi=n(f,"H2",{class:!0});var vDe=s(Vi);Rb=n(vDe,"A",{id:!0,class:!0,href:!0});var Wct=s(Rb);yme=n(Wct,"SPAN",{});var Qct=s(yme);T(y6.$$.fragment,Qct),Qct.forEach(t),Wct.forEach(t),_Po=i(vDe),Lme=n(vDe,"SPAN",{});var Hct=s(Lme);bPo=r(Hct,"AutoModelForMultipleChoice"),Hct.forEach(t),vDe.forEach(t),uNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(L6.$$.fragment,Qs),vPo=i(Qs),Xi=n(Qs,"P",{});var EZ=s(Xi);FPo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UG=n(EZ,"A",{href:!0});var Uct=s(UG);TPo=r(Uct,"from_pretrained()"),Uct.forEach(t),MPo=r(EZ," class method or the "),JG=n(EZ,"A",{href:!0});var Jct=s(JG);EPo=r(Jct,"from_config()"),Jct.forEach(t),CPo=r(EZ,` class
method.`),EZ.forEach(t),wPo=i(Qs),x6=n(Qs,"P",{});var FDe=s(x6);APo=r(FDe,"This class cannot be instantiated directly using "),xme=n(FDe,"CODE",{});var Yct=s(xme);yPo=r(Yct,"__init__()"),Yct.forEach(t),LPo=r(FDe," (throws an error)."),FDe.forEach(t),xPo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Gw=s(dt);T($6.$$.fragment,Gw),$Po=i(Gw),$me=n(Gw,"P",{});var Kct=s($me);kPo=r(Kct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kct.forEach(t),SPo=i(Gw),zi=n(Gw,"P",{});var CZ=s(zi);RPo=r(CZ,`Note:
Loading a model from its configuration file does `),kme=n(CZ,"STRONG",{});var Zct=s(kme);PPo=r(Zct,"not"),Zct.forEach(t),BPo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(CZ,"A",{href:!0});var eft=s(YG);IPo=r(eft,"from_pretrained()"),eft.forEach(t),qPo=r(CZ," to load the model weights."),CZ.forEach(t),NPo=i(Gw),T(Pb.$$.fragment,Gw),Gw.forEach(t),jPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(k6.$$.fragment,la),DPo=i(la),Sme=n(la,"P",{});var oft=s(Sme);GPo=r(oft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oft.forEach(t),OPo=i(la),Pa=n(la,"P",{});var Ow=s(Pa);VPo=r(Ow,"The model class to instantiate is selected based on the "),Rme=n(Ow,"CODE",{});var rft=s(Rme);XPo=r(rft,"model_type"),rft.forEach(t),zPo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Pme=n(Ow,"CODE",{});var tft=s(Pme);WPo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),QPo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(Ow,"CODE",{});var aft=s(Bme);HPo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),UPo=r(Ow,":"),Ow.forEach(t),JPo=i(la),Y=n(la,"UL",{});var Z=s(Y);Bb=n(Z,"LI",{});var D9e=s(Bb);Ime=n(D9e,"STRONG",{});var nft=s(Ime);YPo=r(nft,"albert"),nft.forEach(t),KPo=r(D9e," \u2014 "),KG=n(D9e,"A",{href:!0});var sft=s(KG);ZPo=r(sft,"AlbertForMultipleChoice"),sft.forEach(t),eBo=r(D9e," (ALBERT model)"),D9e.forEach(t),oBo=i(Z),Ib=n(Z,"LI",{});var G9e=s(Ib);qme=n(G9e,"STRONG",{});var lft=s(qme);rBo=r(lft,"bert"),lft.forEach(t),tBo=r(G9e," \u2014 "),ZG=n(G9e,"A",{href:!0});var ift=s(ZG);aBo=r(ift,"BertForMultipleChoice"),ift.forEach(t),nBo=r(G9e," (BERT model)"),G9e.forEach(t),sBo=i(Z),qb=n(Z,"LI",{});var O9e=s(qb);Nme=n(O9e,"STRONG",{});var dft=s(Nme);lBo=r(dft,"big_bird"),dft.forEach(t),iBo=r(O9e," \u2014 "),eO=n(O9e,"A",{href:!0});var cft=s(eO);dBo=r(cft,"BigBirdForMultipleChoice"),cft.forEach(t),cBo=r(O9e," (BigBird model)"),O9e.forEach(t),fBo=i(Z),Nb=n(Z,"LI",{});var V9e=s(Nb);jme=n(V9e,"STRONG",{});var fft=s(jme);mBo=r(fft,"camembert"),fft.forEach(t),gBo=r(V9e," \u2014 "),oO=n(V9e,"A",{href:!0});var mft=s(oO);hBo=r(mft,"CamembertForMultipleChoice"),mft.forEach(t),pBo=r(V9e," (CamemBERT model)"),V9e.forEach(t),uBo=i(Z),jb=n(Z,"LI",{});var X9e=s(jb);Dme=n(X9e,"STRONG",{});var gft=s(Dme);_Bo=r(gft,"canine"),gft.forEach(t),bBo=r(X9e," \u2014 "),rO=n(X9e,"A",{href:!0});var hft=s(rO);vBo=r(hft,"CanineForMultipleChoice"),hft.forEach(t),FBo=r(X9e," (Canine model)"),X9e.forEach(t),TBo=i(Z),Db=n(Z,"LI",{});var z9e=s(Db);Gme=n(z9e,"STRONG",{});var pft=s(Gme);MBo=r(pft,"convbert"),pft.forEach(t),EBo=r(z9e," \u2014 "),tO=n(z9e,"A",{href:!0});var uft=s(tO);CBo=r(uft,"ConvBertForMultipleChoice"),uft.forEach(t),wBo=r(z9e," (ConvBERT model)"),z9e.forEach(t),ABo=i(Z),Gb=n(Z,"LI",{});var W9e=s(Gb);Ome=n(W9e,"STRONG",{});var _ft=s(Ome);yBo=r(_ft,"data2vec-text"),_ft.forEach(t),LBo=r(W9e," \u2014 "),aO=n(W9e,"A",{href:!0});var bft=s(aO);xBo=r(bft,"Data2VecTextForMultipleChoice"),bft.forEach(t),$Bo=r(W9e," (Data2VecText model)"),W9e.forEach(t),kBo=i(Z),Ob=n(Z,"LI",{});var Q9e=s(Ob);Vme=n(Q9e,"STRONG",{});var vft=s(Vme);SBo=r(vft,"deberta-v2"),vft.forEach(t),RBo=r(Q9e," \u2014 "),nO=n(Q9e,"A",{href:!0});var Fft=s(nO);PBo=r(Fft,"DebertaV2ForMultipleChoice"),Fft.forEach(t),BBo=r(Q9e," (DeBERTa-v2 model)"),Q9e.forEach(t),IBo=i(Z),Vb=n(Z,"LI",{});var H9e=s(Vb);Xme=n(H9e,"STRONG",{});var Tft=s(Xme);qBo=r(Tft,"distilbert"),Tft.forEach(t),NBo=r(H9e," \u2014 "),sO=n(H9e,"A",{href:!0});var Mft=s(sO);jBo=r(Mft,"DistilBertForMultipleChoice"),Mft.forEach(t),DBo=r(H9e," (DistilBERT model)"),H9e.forEach(t),GBo=i(Z),Xb=n(Z,"LI",{});var U9e=s(Xb);zme=n(U9e,"STRONG",{});var Eft=s(zme);OBo=r(Eft,"electra"),Eft.forEach(t),VBo=r(U9e," \u2014 "),lO=n(U9e,"A",{href:!0});var Cft=s(lO);XBo=r(Cft,"ElectraForMultipleChoice"),Cft.forEach(t),zBo=r(U9e," (ELECTRA model)"),U9e.forEach(t),WBo=i(Z),zb=n(Z,"LI",{});var J9e=s(zb);Wme=n(J9e,"STRONG",{});var wft=s(Wme);QBo=r(wft,"flaubert"),wft.forEach(t),HBo=r(J9e," \u2014 "),iO=n(J9e,"A",{href:!0});var Aft=s(iO);UBo=r(Aft,"FlaubertForMultipleChoice"),Aft.forEach(t),JBo=r(J9e," (FlauBERT model)"),J9e.forEach(t),YBo=i(Z),Wb=n(Z,"LI",{});var Y9e=s(Wb);Qme=n(Y9e,"STRONG",{});var yft=s(Qme);KBo=r(yft,"fnet"),yft.forEach(t),ZBo=r(Y9e," \u2014 "),dO=n(Y9e,"A",{href:!0});var Lft=s(dO);eIo=r(Lft,"FNetForMultipleChoice"),Lft.forEach(t),oIo=r(Y9e," (FNet model)"),Y9e.forEach(t),rIo=i(Z),Qb=n(Z,"LI",{});var K9e=s(Qb);Hme=n(K9e,"STRONG",{});var xft=s(Hme);tIo=r(xft,"funnel"),xft.forEach(t),aIo=r(K9e," \u2014 "),cO=n(K9e,"A",{href:!0});var $ft=s(cO);nIo=r($ft,"FunnelForMultipleChoice"),$ft.forEach(t),sIo=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),lIo=i(Z),Hb=n(Z,"LI",{});var Z9e=s(Hb);Ume=n(Z9e,"STRONG",{});var kft=s(Ume);iIo=r(kft,"ibert"),kft.forEach(t),dIo=r(Z9e," \u2014 "),fO=n(Z9e,"A",{href:!0});var Sft=s(fO);cIo=r(Sft,"IBertForMultipleChoice"),Sft.forEach(t),fIo=r(Z9e," (I-BERT model)"),Z9e.forEach(t),mIo=i(Z),Ub=n(Z,"LI",{});var exe=s(Ub);Jme=n(exe,"STRONG",{});var Rft=s(Jme);gIo=r(Rft,"longformer"),Rft.forEach(t),hIo=r(exe," \u2014 "),mO=n(exe,"A",{href:!0});var Pft=s(mO);pIo=r(Pft,"LongformerForMultipleChoice"),Pft.forEach(t),uIo=r(exe," (Longformer model)"),exe.forEach(t),_Io=i(Z),Jb=n(Z,"LI",{});var oxe=s(Jb);Yme=n(oxe,"STRONG",{});var Bft=s(Yme);bIo=r(Bft,"megatron-bert"),Bft.forEach(t),vIo=r(oxe," \u2014 "),gO=n(oxe,"A",{href:!0});var Ift=s(gO);FIo=r(Ift,"MegatronBertForMultipleChoice"),Ift.forEach(t),TIo=r(oxe," (MegatronBert model)"),oxe.forEach(t),MIo=i(Z),Yb=n(Z,"LI",{});var rxe=s(Yb);Kme=n(rxe,"STRONG",{});var qft=s(Kme);EIo=r(qft,"mobilebert"),qft.forEach(t),CIo=r(rxe," \u2014 "),hO=n(rxe,"A",{href:!0});var Nft=s(hO);wIo=r(Nft,"MobileBertForMultipleChoice"),Nft.forEach(t),AIo=r(rxe," (MobileBERT model)"),rxe.forEach(t),yIo=i(Z),Kb=n(Z,"LI",{});var txe=s(Kb);Zme=n(txe,"STRONG",{});var jft=s(Zme);LIo=r(jft,"mpnet"),jft.forEach(t),xIo=r(txe," \u2014 "),pO=n(txe,"A",{href:!0});var Dft=s(pO);$Io=r(Dft,"MPNetForMultipleChoice"),Dft.forEach(t),kIo=r(txe," (MPNet model)"),txe.forEach(t),SIo=i(Z),Zb=n(Z,"LI",{});var axe=s(Zb);ege=n(axe,"STRONG",{});var Gft=s(ege);RIo=r(Gft,"nystromformer"),Gft.forEach(t),PIo=r(axe," \u2014 "),uO=n(axe,"A",{href:!0});var Oft=s(uO);BIo=r(Oft,"NystromformerForMultipleChoice"),Oft.forEach(t),IIo=r(axe," (Nystromformer model)"),axe.forEach(t),qIo=i(Z),e2=n(Z,"LI",{});var nxe=s(e2);oge=n(nxe,"STRONG",{});var Vft=s(oge);NIo=r(Vft,"qdqbert"),Vft.forEach(t),jIo=r(nxe," \u2014 "),_O=n(nxe,"A",{href:!0});var Xft=s(_O);DIo=r(Xft,"QDQBertForMultipleChoice"),Xft.forEach(t),GIo=r(nxe," (QDQBert model)"),nxe.forEach(t),OIo=i(Z),o2=n(Z,"LI",{});var sxe=s(o2);rge=n(sxe,"STRONG",{});var zft=s(rge);VIo=r(zft,"rembert"),zft.forEach(t),XIo=r(sxe," \u2014 "),bO=n(sxe,"A",{href:!0});var Wft=s(bO);zIo=r(Wft,"RemBertForMultipleChoice"),Wft.forEach(t),WIo=r(sxe," (RemBERT model)"),sxe.forEach(t),QIo=i(Z),r2=n(Z,"LI",{});var lxe=s(r2);tge=n(lxe,"STRONG",{});var Qft=s(tge);HIo=r(Qft,"roberta"),Qft.forEach(t),UIo=r(lxe," \u2014 "),vO=n(lxe,"A",{href:!0});var Hft=s(vO);JIo=r(Hft,"RobertaForMultipleChoice"),Hft.forEach(t),YIo=r(lxe," (RoBERTa model)"),lxe.forEach(t),KIo=i(Z),t2=n(Z,"LI",{});var ixe=s(t2);age=n(ixe,"STRONG",{});var Uft=s(age);ZIo=r(Uft,"roformer"),Uft.forEach(t),eqo=r(ixe," \u2014 "),FO=n(ixe,"A",{href:!0});var Jft=s(FO);oqo=r(Jft,"RoFormerForMultipleChoice"),Jft.forEach(t),rqo=r(ixe," (RoFormer model)"),ixe.forEach(t),tqo=i(Z),a2=n(Z,"LI",{});var dxe=s(a2);nge=n(dxe,"STRONG",{});var Yft=s(nge);aqo=r(Yft,"squeezebert"),Yft.forEach(t),nqo=r(dxe," \u2014 "),TO=n(dxe,"A",{href:!0});var Kft=s(TO);sqo=r(Kft,"SqueezeBertForMultipleChoice"),Kft.forEach(t),lqo=r(dxe," (SqueezeBERT model)"),dxe.forEach(t),iqo=i(Z),n2=n(Z,"LI",{});var cxe=s(n2);sge=n(cxe,"STRONG",{});var Zft=s(sge);dqo=r(Zft,"xlm"),Zft.forEach(t),cqo=r(cxe," \u2014 "),MO=n(cxe,"A",{href:!0});var emt=s(MO);fqo=r(emt,"XLMForMultipleChoice"),emt.forEach(t),mqo=r(cxe," (XLM model)"),cxe.forEach(t),gqo=i(Z),s2=n(Z,"LI",{});var fxe=s(s2);lge=n(fxe,"STRONG",{});var omt=s(lge);hqo=r(omt,"xlm-roberta"),omt.forEach(t),pqo=r(fxe," \u2014 "),EO=n(fxe,"A",{href:!0});var rmt=s(EO);uqo=r(rmt,"XLMRobertaForMultipleChoice"),rmt.forEach(t),_qo=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),bqo=i(Z),l2=n(Z,"LI",{});var mxe=s(l2);ige=n(mxe,"STRONG",{});var tmt=s(ige);vqo=r(tmt,"xlm-roberta-xl"),tmt.forEach(t),Fqo=r(mxe," \u2014 "),CO=n(mxe,"A",{href:!0});var amt=s(CO);Tqo=r(amt,"XLMRobertaXLForMultipleChoice"),amt.forEach(t),Mqo=r(mxe," (XLM-RoBERTa-XL model)"),mxe.forEach(t),Eqo=i(Z),i2=n(Z,"LI",{});var gxe=s(i2);dge=n(gxe,"STRONG",{});var nmt=s(dge);Cqo=r(nmt,"xlnet"),nmt.forEach(t),wqo=r(gxe," \u2014 "),wO=n(gxe,"A",{href:!0});var smt=s(wO);Aqo=r(smt,"XLNetForMultipleChoice"),smt.forEach(t),yqo=r(gxe," (XLNet model)"),gxe.forEach(t),Lqo=i(Z),d2=n(Z,"LI",{});var hxe=s(d2);cge=n(hxe,"STRONG",{});var lmt=s(cge);xqo=r(lmt,"yoso"),lmt.forEach(t),$qo=r(hxe," \u2014 "),AO=n(hxe,"A",{href:!0});var imt=s(AO);kqo=r(imt,"YosoForMultipleChoice"),imt.forEach(t),Sqo=r(hxe," (YOSO model)"),hxe.forEach(t),Z.forEach(t),Rqo=i(la),c2=n(la,"P",{});var pxe=s(c2);Pqo=r(pxe,"The model is set in evaluation mode by default using "),fge=n(pxe,"CODE",{});var dmt=s(fge);Bqo=r(dmt,"model.eval()"),dmt.forEach(t),Iqo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(pxe,"CODE",{});var cmt=s(mge);qqo=r(cmt,"model.train()"),cmt.forEach(t),pxe.forEach(t),Nqo=i(la),T(f2.$$.fragment,la),la.forEach(t),Qs.forEach(t),_Ne=i(f),Wi=n(f,"H2",{class:!0});var TDe=s(Wi);m2=n(TDe,"A",{id:!0,class:!0,href:!0});var fmt=s(m2);gge=n(fmt,"SPAN",{});var mmt=s(gge);T(S6.$$.fragment,mmt),mmt.forEach(t),fmt.forEach(t),jqo=i(TDe),hge=n(TDe,"SPAN",{});var gmt=s(hge);Dqo=r(gmt,"AutoModelForNextSentencePrediction"),gmt.forEach(t),TDe.forEach(t),bNe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(R6.$$.fragment,Hs),Gqo=i(Hs),Qi=n(Hs,"P",{});var wZ=s(Qi);Oqo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yO=n(wZ,"A",{href:!0});var hmt=s(yO);Vqo=r(hmt,"from_pretrained()"),hmt.forEach(t),Xqo=r(wZ," class method or the "),LO=n(wZ,"A",{href:!0});var pmt=s(LO);zqo=r(pmt,"from_config()"),pmt.forEach(t),Wqo=r(wZ,` class
method.`),wZ.forEach(t),Qqo=i(Hs),P6=n(Hs,"P",{});var MDe=s(P6);Hqo=r(MDe,"This class cannot be instantiated directly using "),pge=n(MDe,"CODE",{});var umt=s(pge);Uqo=r(umt,"__init__()"),umt.forEach(t),Jqo=r(MDe," (throws an error)."),MDe.forEach(t),Yqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Vw=s(ct);T(B6.$$.fragment,Vw),Kqo=i(Vw),uge=n(Vw,"P",{});var _mt=s(uge);Zqo=r(_mt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_mt.forEach(t),eNo=i(Vw),Hi=n(Vw,"P",{});var AZ=s(Hi);oNo=r(AZ,`Note:
Loading a model from its configuration file does `),_ge=n(AZ,"STRONG",{});var bmt=s(_ge);rNo=r(bmt,"not"),bmt.forEach(t),tNo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(AZ,"A",{href:!0});var vmt=s(xO);aNo=r(vmt,"from_pretrained()"),vmt.forEach(t),nNo=r(AZ," to load the model weights."),AZ.forEach(t),sNo=i(Vw),T(g2.$$.fragment,Vw),Vw.forEach(t),lNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(I6.$$.fragment,ia),iNo=i(ia),bge=n(ia,"P",{});var Fmt=s(bge);dNo=r(Fmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fmt.forEach(t),cNo=i(ia),Ba=n(ia,"P",{});var Xw=s(Ba);fNo=r(Xw,"The model class to instantiate is selected based on the "),vge=n(Xw,"CODE",{});var Tmt=s(vge);mNo=r(Tmt,"model_type"),Tmt.forEach(t),gNo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Fge=n(Xw,"CODE",{});var Mmt=s(Fge);hNo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),pNo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(Xw,"CODE",{});var Emt=s(Tge);uNo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),_No=r(Xw,":"),Xw.forEach(t),bNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);h2=n(Us,"LI",{});var uxe=s(h2);Mge=n(uxe,"STRONG",{});var Cmt=s(Mge);vNo=r(Cmt,"bert"),Cmt.forEach(t),FNo=r(uxe," \u2014 "),$O=n(uxe,"A",{href:!0});var wmt=s($O);TNo=r(wmt,"BertForNextSentencePrediction"),wmt.forEach(t),MNo=r(uxe," (BERT model)"),uxe.forEach(t),ENo=i(Us),p2=n(Us,"LI",{});var _xe=s(p2);Ege=n(_xe,"STRONG",{});var Amt=s(Ege);CNo=r(Amt,"fnet"),Amt.forEach(t),wNo=r(_xe," \u2014 "),kO=n(_xe,"A",{href:!0});var ymt=s(kO);ANo=r(ymt,"FNetForNextSentencePrediction"),ymt.forEach(t),yNo=r(_xe," (FNet model)"),_xe.forEach(t),LNo=i(Us),u2=n(Us,"LI",{});var bxe=s(u2);Cge=n(bxe,"STRONG",{});var Lmt=s(Cge);xNo=r(Lmt,"megatron-bert"),Lmt.forEach(t),$No=r(bxe," \u2014 "),SO=n(bxe,"A",{href:!0});var xmt=s(SO);kNo=r(xmt,"MegatronBertForNextSentencePrediction"),xmt.forEach(t),SNo=r(bxe," (MegatronBert model)"),bxe.forEach(t),RNo=i(Us),_2=n(Us,"LI",{});var vxe=s(_2);wge=n(vxe,"STRONG",{});var $mt=s(wge);PNo=r($mt,"mobilebert"),$mt.forEach(t),BNo=r(vxe," \u2014 "),RO=n(vxe,"A",{href:!0});var kmt=s(RO);INo=r(kmt,"MobileBertForNextSentencePrediction"),kmt.forEach(t),qNo=r(vxe," (MobileBERT model)"),vxe.forEach(t),NNo=i(Us),b2=n(Us,"LI",{});var Fxe=s(b2);Age=n(Fxe,"STRONG",{});var Smt=s(Age);jNo=r(Smt,"qdqbert"),Smt.forEach(t),DNo=r(Fxe," \u2014 "),PO=n(Fxe,"A",{href:!0});var Rmt=s(PO);GNo=r(Rmt,"QDQBertForNextSentencePrediction"),Rmt.forEach(t),ONo=r(Fxe," (QDQBert model)"),Fxe.forEach(t),Us.forEach(t),VNo=i(ia),v2=n(ia,"P",{});var Txe=s(v2);XNo=r(Txe,"The model is set in evaluation mode by default using "),yge=n(Txe,"CODE",{});var Pmt=s(yge);zNo=r(Pmt,"model.eval()"),Pmt.forEach(t),WNo=r(Txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(Txe,"CODE",{});var Bmt=s(Lge);QNo=r(Bmt,"model.train()"),Bmt.forEach(t),Txe.forEach(t),HNo=i(ia),T(F2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),vNe=i(f),Ui=n(f,"H2",{class:!0});var EDe=s(Ui);T2=n(EDe,"A",{id:!0,class:!0,href:!0});var Imt=s(T2);xge=n(Imt,"SPAN",{});var qmt=s(xge);T(q6.$$.fragment,qmt),qmt.forEach(t),Imt.forEach(t),UNo=i(EDe),$ge=n(EDe,"SPAN",{});var Nmt=s($ge);JNo=r(Nmt,"AutoModelForTokenClassification"),Nmt.forEach(t),EDe.forEach(t),FNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(N6.$$.fragment,Js),YNo=i(Js),Ji=n(Js,"P",{});var yZ=s(Ji);KNo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BO=n(yZ,"A",{href:!0});var jmt=s(BO);ZNo=r(jmt,"from_pretrained()"),jmt.forEach(t),ejo=r(yZ," class method or the "),IO=n(yZ,"A",{href:!0});var Dmt=s(IO);ojo=r(Dmt,"from_config()"),Dmt.forEach(t),rjo=r(yZ,` class
method.`),yZ.forEach(t),tjo=i(Js),j6=n(Js,"P",{});var CDe=s(j6);ajo=r(CDe,"This class cannot be instantiated directly using "),kge=n(CDe,"CODE",{});var Gmt=s(kge);njo=r(Gmt,"__init__()"),Gmt.forEach(t),sjo=r(CDe," (throws an error)."),CDe.forEach(t),ljo=i(Js),ft=n(Js,"DIV",{class:!0});var zw=s(ft);T(D6.$$.fragment,zw),ijo=i(zw),Sge=n(zw,"P",{});var Omt=s(Sge);djo=r(Omt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Omt.forEach(t),cjo=i(zw),Yi=n(zw,"P",{});var LZ=s(Yi);fjo=r(LZ,`Note:
Loading a model from its configuration file does `),Rge=n(LZ,"STRONG",{});var Vmt=s(Rge);mjo=r(Vmt,"not"),Vmt.forEach(t),gjo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(LZ,"A",{href:!0});var Xmt=s(qO);hjo=r(Xmt,"from_pretrained()"),Xmt.forEach(t),pjo=r(LZ," to load the model weights."),LZ.forEach(t),ujo=i(zw),T(M2.$$.fragment,zw),zw.forEach(t),_jo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(G6.$$.fragment,da),bjo=i(da),Pge=n(da,"P",{});var zmt=s(Pge);vjo=r(zmt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zmt.forEach(t),Fjo=i(da),Ia=n(da,"P",{});var Ww=s(Ia);Tjo=r(Ww,"The model class to instantiate is selected based on the "),Bge=n(Ww,"CODE",{});var Wmt=s(Bge);Mjo=r(Wmt,"model_type"),Wmt.forEach(t),Ejo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Ige=n(Ww,"CODE",{});var Qmt=s(Ige);Cjo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),wjo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(Ww,"CODE",{});var Hmt=s(qge);Ajo=r(Hmt,"pretrained_model_name_or_path"),Hmt.forEach(t),yjo=r(Ww,":"),Ww.forEach(t),Ljo=i(da),H=n(da,"UL",{});var J=s(H);E2=n(J,"LI",{});var Mxe=s(E2);Nge=n(Mxe,"STRONG",{});var Umt=s(Nge);xjo=r(Umt,"albert"),Umt.forEach(t),$jo=r(Mxe," \u2014 "),NO=n(Mxe,"A",{href:!0});var Jmt=s(NO);kjo=r(Jmt,"AlbertForTokenClassification"),Jmt.forEach(t),Sjo=r(Mxe," (ALBERT model)"),Mxe.forEach(t),Rjo=i(J),C2=n(J,"LI",{});var Exe=s(C2);jge=n(Exe,"STRONG",{});var Ymt=s(jge);Pjo=r(Ymt,"bert"),Ymt.forEach(t),Bjo=r(Exe," \u2014 "),jO=n(Exe,"A",{href:!0});var Kmt=s(jO);Ijo=r(Kmt,"BertForTokenClassification"),Kmt.forEach(t),qjo=r(Exe," (BERT model)"),Exe.forEach(t),Njo=i(J),w2=n(J,"LI",{});var Cxe=s(w2);Dge=n(Cxe,"STRONG",{});var Zmt=s(Dge);jjo=r(Zmt,"big_bird"),Zmt.forEach(t),Djo=r(Cxe," \u2014 "),DO=n(Cxe,"A",{href:!0});var egt=s(DO);Gjo=r(egt,"BigBirdForTokenClassification"),egt.forEach(t),Ojo=r(Cxe," (BigBird model)"),Cxe.forEach(t),Vjo=i(J),A2=n(J,"LI",{});var wxe=s(A2);Gge=n(wxe,"STRONG",{});var ogt=s(Gge);Xjo=r(ogt,"camembert"),ogt.forEach(t),zjo=r(wxe," \u2014 "),GO=n(wxe,"A",{href:!0});var rgt=s(GO);Wjo=r(rgt,"CamembertForTokenClassification"),rgt.forEach(t),Qjo=r(wxe," (CamemBERT model)"),wxe.forEach(t),Hjo=i(J),y2=n(J,"LI",{});var Axe=s(y2);Oge=n(Axe,"STRONG",{});var tgt=s(Oge);Ujo=r(tgt,"canine"),tgt.forEach(t),Jjo=r(Axe," \u2014 "),OO=n(Axe,"A",{href:!0});var agt=s(OO);Yjo=r(agt,"CanineForTokenClassification"),agt.forEach(t),Kjo=r(Axe," (Canine model)"),Axe.forEach(t),Zjo=i(J),L2=n(J,"LI",{});var yxe=s(L2);Vge=n(yxe,"STRONG",{});var ngt=s(Vge);eDo=r(ngt,"convbert"),ngt.forEach(t),oDo=r(yxe," \u2014 "),VO=n(yxe,"A",{href:!0});var sgt=s(VO);rDo=r(sgt,"ConvBertForTokenClassification"),sgt.forEach(t),tDo=r(yxe," (ConvBERT model)"),yxe.forEach(t),aDo=i(J),x2=n(J,"LI",{});var Lxe=s(x2);Xge=n(Lxe,"STRONG",{});var lgt=s(Xge);nDo=r(lgt,"data2vec-text"),lgt.forEach(t),sDo=r(Lxe," \u2014 "),XO=n(Lxe,"A",{href:!0});var igt=s(XO);lDo=r(igt,"Data2VecTextForTokenClassification"),igt.forEach(t),iDo=r(Lxe," (Data2VecText model)"),Lxe.forEach(t),dDo=i(J),$2=n(J,"LI",{});var xxe=s($2);zge=n(xxe,"STRONG",{});var dgt=s(zge);cDo=r(dgt,"deberta"),dgt.forEach(t),fDo=r(xxe," \u2014 "),zO=n(xxe,"A",{href:!0});var cgt=s(zO);mDo=r(cgt,"DebertaForTokenClassification"),cgt.forEach(t),gDo=r(xxe," (DeBERTa model)"),xxe.forEach(t),hDo=i(J),k2=n(J,"LI",{});var $xe=s(k2);Wge=n($xe,"STRONG",{});var fgt=s(Wge);pDo=r(fgt,"deberta-v2"),fgt.forEach(t),uDo=r($xe," \u2014 "),WO=n($xe,"A",{href:!0});var mgt=s(WO);_Do=r(mgt,"DebertaV2ForTokenClassification"),mgt.forEach(t),bDo=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),vDo=i(J),S2=n(J,"LI",{});var kxe=s(S2);Qge=n(kxe,"STRONG",{});var ggt=s(Qge);FDo=r(ggt,"distilbert"),ggt.forEach(t),TDo=r(kxe," \u2014 "),QO=n(kxe,"A",{href:!0});var hgt=s(QO);MDo=r(hgt,"DistilBertForTokenClassification"),hgt.forEach(t),EDo=r(kxe," (DistilBERT model)"),kxe.forEach(t),CDo=i(J),R2=n(J,"LI",{});var Sxe=s(R2);Hge=n(Sxe,"STRONG",{});var pgt=s(Hge);wDo=r(pgt,"electra"),pgt.forEach(t),ADo=r(Sxe," \u2014 "),HO=n(Sxe,"A",{href:!0});var ugt=s(HO);yDo=r(ugt,"ElectraForTokenClassification"),ugt.forEach(t),LDo=r(Sxe," (ELECTRA model)"),Sxe.forEach(t),xDo=i(J),P2=n(J,"LI",{});var Rxe=s(P2);Uge=n(Rxe,"STRONG",{});var _gt=s(Uge);$Do=r(_gt,"flaubert"),_gt.forEach(t),kDo=r(Rxe," \u2014 "),UO=n(Rxe,"A",{href:!0});var bgt=s(UO);SDo=r(bgt,"FlaubertForTokenClassification"),bgt.forEach(t),RDo=r(Rxe," (FlauBERT model)"),Rxe.forEach(t),PDo=i(J),B2=n(J,"LI",{});var Pxe=s(B2);Jge=n(Pxe,"STRONG",{});var vgt=s(Jge);BDo=r(vgt,"fnet"),vgt.forEach(t),IDo=r(Pxe," \u2014 "),JO=n(Pxe,"A",{href:!0});var Fgt=s(JO);qDo=r(Fgt,"FNetForTokenClassification"),Fgt.forEach(t),NDo=r(Pxe," (FNet model)"),Pxe.forEach(t),jDo=i(J),I2=n(J,"LI",{});var Bxe=s(I2);Yge=n(Bxe,"STRONG",{});var Tgt=s(Yge);DDo=r(Tgt,"funnel"),Tgt.forEach(t),GDo=r(Bxe," \u2014 "),YO=n(Bxe,"A",{href:!0});var Mgt=s(YO);ODo=r(Mgt,"FunnelForTokenClassification"),Mgt.forEach(t),VDo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),XDo=i(J),q2=n(J,"LI",{});var Ixe=s(q2);Kge=n(Ixe,"STRONG",{});var Egt=s(Kge);zDo=r(Egt,"gpt2"),Egt.forEach(t),WDo=r(Ixe," \u2014 "),KO=n(Ixe,"A",{href:!0});var Cgt=s(KO);QDo=r(Cgt,"GPT2ForTokenClassification"),Cgt.forEach(t),HDo=r(Ixe," (OpenAI GPT-2 model)"),Ixe.forEach(t),UDo=i(J),N2=n(J,"LI",{});var qxe=s(N2);Zge=n(qxe,"STRONG",{});var wgt=s(Zge);JDo=r(wgt,"ibert"),wgt.forEach(t),YDo=r(qxe," \u2014 "),ZO=n(qxe,"A",{href:!0});var Agt=s(ZO);KDo=r(Agt,"IBertForTokenClassification"),Agt.forEach(t),ZDo=r(qxe," (I-BERT model)"),qxe.forEach(t),eGo=i(J),j2=n(J,"LI",{});var Nxe=s(j2);ehe=n(Nxe,"STRONG",{});var ygt=s(ehe);oGo=r(ygt,"layoutlm"),ygt.forEach(t),rGo=r(Nxe," \u2014 "),eV=n(Nxe,"A",{href:!0});var Lgt=s(eV);tGo=r(Lgt,"LayoutLMForTokenClassification"),Lgt.forEach(t),aGo=r(Nxe," (LayoutLM model)"),Nxe.forEach(t),nGo=i(J),D2=n(J,"LI",{});var jxe=s(D2);ohe=n(jxe,"STRONG",{});var xgt=s(ohe);sGo=r(xgt,"layoutlmv2"),xgt.forEach(t),lGo=r(jxe," \u2014 "),oV=n(jxe,"A",{href:!0});var $gt=s(oV);iGo=r($gt,"LayoutLMv2ForTokenClassification"),$gt.forEach(t),dGo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),cGo=i(J),G2=n(J,"LI",{});var Dxe=s(G2);rhe=n(Dxe,"STRONG",{});var kgt=s(rhe);fGo=r(kgt,"layoutlmv3"),kgt.forEach(t),mGo=r(Dxe," \u2014 "),rV=n(Dxe,"A",{href:!0});var Sgt=s(rV);gGo=r(Sgt,"LayoutLMv3ForTokenClassification"),Sgt.forEach(t),hGo=r(Dxe," (LayoutLMv3 model)"),Dxe.forEach(t),pGo=i(J),O2=n(J,"LI",{});var Gxe=s(O2);the=n(Gxe,"STRONG",{});var Rgt=s(the);uGo=r(Rgt,"longformer"),Rgt.forEach(t),_Go=r(Gxe," \u2014 "),tV=n(Gxe,"A",{href:!0});var Pgt=s(tV);bGo=r(Pgt,"LongformerForTokenClassification"),Pgt.forEach(t),vGo=r(Gxe," (Longformer model)"),Gxe.forEach(t),FGo=i(J),V2=n(J,"LI",{});var Oxe=s(V2);ahe=n(Oxe,"STRONG",{});var Bgt=s(ahe);TGo=r(Bgt,"megatron-bert"),Bgt.forEach(t),MGo=r(Oxe," \u2014 "),aV=n(Oxe,"A",{href:!0});var Igt=s(aV);EGo=r(Igt,"MegatronBertForTokenClassification"),Igt.forEach(t),CGo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),wGo=i(J),X2=n(J,"LI",{});var Vxe=s(X2);nhe=n(Vxe,"STRONG",{});var qgt=s(nhe);AGo=r(qgt,"mobilebert"),qgt.forEach(t),yGo=r(Vxe," \u2014 "),nV=n(Vxe,"A",{href:!0});var Ngt=s(nV);LGo=r(Ngt,"MobileBertForTokenClassification"),Ngt.forEach(t),xGo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),$Go=i(J),z2=n(J,"LI",{});var Xxe=s(z2);she=n(Xxe,"STRONG",{});var jgt=s(she);kGo=r(jgt,"mpnet"),jgt.forEach(t),SGo=r(Xxe," \u2014 "),sV=n(Xxe,"A",{href:!0});var Dgt=s(sV);RGo=r(Dgt,"MPNetForTokenClassification"),Dgt.forEach(t),PGo=r(Xxe," (MPNet model)"),Xxe.forEach(t),BGo=i(J),W2=n(J,"LI",{});var zxe=s(W2);lhe=n(zxe,"STRONG",{});var Ggt=s(lhe);IGo=r(Ggt,"nystromformer"),Ggt.forEach(t),qGo=r(zxe," \u2014 "),lV=n(zxe,"A",{href:!0});var Ogt=s(lV);NGo=r(Ogt,"NystromformerForTokenClassification"),Ogt.forEach(t),jGo=r(zxe," (Nystromformer model)"),zxe.forEach(t),DGo=i(J),Q2=n(J,"LI",{});var Wxe=s(Q2);ihe=n(Wxe,"STRONG",{});var Vgt=s(ihe);GGo=r(Vgt,"qdqbert"),Vgt.forEach(t),OGo=r(Wxe," \u2014 "),iV=n(Wxe,"A",{href:!0});var Xgt=s(iV);VGo=r(Xgt,"QDQBertForTokenClassification"),Xgt.forEach(t),XGo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),zGo=i(J),H2=n(J,"LI",{});var Qxe=s(H2);dhe=n(Qxe,"STRONG",{});var zgt=s(dhe);WGo=r(zgt,"rembert"),zgt.forEach(t),QGo=r(Qxe," \u2014 "),dV=n(Qxe,"A",{href:!0});var Wgt=s(dV);HGo=r(Wgt,"RemBertForTokenClassification"),Wgt.forEach(t),UGo=r(Qxe," (RemBERT model)"),Qxe.forEach(t),JGo=i(J),U2=n(J,"LI",{});var Hxe=s(U2);che=n(Hxe,"STRONG",{});var Qgt=s(che);YGo=r(Qgt,"roberta"),Qgt.forEach(t),KGo=r(Hxe," \u2014 "),cV=n(Hxe,"A",{href:!0});var Hgt=s(cV);ZGo=r(Hgt,"RobertaForTokenClassification"),Hgt.forEach(t),eOo=r(Hxe," (RoBERTa model)"),Hxe.forEach(t),oOo=i(J),J2=n(J,"LI",{});var Uxe=s(J2);fhe=n(Uxe,"STRONG",{});var Ugt=s(fhe);rOo=r(Ugt,"roformer"),Ugt.forEach(t),tOo=r(Uxe," \u2014 "),fV=n(Uxe,"A",{href:!0});var Jgt=s(fV);aOo=r(Jgt,"RoFormerForTokenClassification"),Jgt.forEach(t),nOo=r(Uxe," (RoFormer model)"),Uxe.forEach(t),sOo=i(J),Y2=n(J,"LI",{});var Jxe=s(Y2);mhe=n(Jxe,"STRONG",{});var Ygt=s(mhe);lOo=r(Ygt,"squeezebert"),Ygt.forEach(t),iOo=r(Jxe," \u2014 "),mV=n(Jxe,"A",{href:!0});var Kgt=s(mV);dOo=r(Kgt,"SqueezeBertForTokenClassification"),Kgt.forEach(t),cOo=r(Jxe," (SqueezeBERT model)"),Jxe.forEach(t),fOo=i(J),K2=n(J,"LI",{});var Yxe=s(K2);ghe=n(Yxe,"STRONG",{});var Zgt=s(ghe);mOo=r(Zgt,"xlm"),Zgt.forEach(t),gOo=r(Yxe," \u2014 "),gV=n(Yxe,"A",{href:!0});var eht=s(gV);hOo=r(eht,"XLMForTokenClassification"),eht.forEach(t),pOo=r(Yxe," (XLM model)"),Yxe.forEach(t),uOo=i(J),Z2=n(J,"LI",{});var Kxe=s(Z2);hhe=n(Kxe,"STRONG",{});var oht=s(hhe);_Oo=r(oht,"xlm-roberta"),oht.forEach(t),bOo=r(Kxe," \u2014 "),hV=n(Kxe,"A",{href:!0});var rht=s(hV);vOo=r(rht,"XLMRobertaForTokenClassification"),rht.forEach(t),FOo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),TOo=i(J),ev=n(J,"LI",{});var Zxe=s(ev);phe=n(Zxe,"STRONG",{});var tht=s(phe);MOo=r(tht,"xlm-roberta-xl"),tht.forEach(t),EOo=r(Zxe," \u2014 "),pV=n(Zxe,"A",{href:!0});var aht=s(pV);COo=r(aht,"XLMRobertaXLForTokenClassification"),aht.forEach(t),wOo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),AOo=i(J),ov=n(J,"LI",{});var e$e=s(ov);uhe=n(e$e,"STRONG",{});var nht=s(uhe);yOo=r(nht,"xlnet"),nht.forEach(t),LOo=r(e$e," \u2014 "),uV=n(e$e,"A",{href:!0});var sht=s(uV);xOo=r(sht,"XLNetForTokenClassification"),sht.forEach(t),$Oo=r(e$e," (XLNet model)"),e$e.forEach(t),kOo=i(J),rv=n(J,"LI",{});var o$e=s(rv);_he=n(o$e,"STRONG",{});var lht=s(_he);SOo=r(lht,"yoso"),lht.forEach(t),ROo=r(o$e," \u2014 "),_V=n(o$e,"A",{href:!0});var iht=s(_V);POo=r(iht,"YosoForTokenClassification"),iht.forEach(t),BOo=r(o$e," (YOSO model)"),o$e.forEach(t),J.forEach(t),IOo=i(da),tv=n(da,"P",{});var r$e=s(tv);qOo=r(r$e,"The model is set in evaluation mode by default using "),bhe=n(r$e,"CODE",{});var dht=s(bhe);NOo=r(dht,"model.eval()"),dht.forEach(t),jOo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(r$e,"CODE",{});var cht=s(vhe);DOo=r(cht,"model.train()"),cht.forEach(t),r$e.forEach(t),GOo=i(da),T(av.$$.fragment,da),da.forEach(t),Js.forEach(t),TNe=i(f),Ki=n(f,"H2",{class:!0});var wDe=s(Ki);nv=n(wDe,"A",{id:!0,class:!0,href:!0});var fht=s(nv);Fhe=n(fht,"SPAN",{});var mht=s(Fhe);T(O6.$$.fragment,mht),mht.forEach(t),fht.forEach(t),OOo=i(wDe),The=n(wDe,"SPAN",{});var ght=s(The);VOo=r(ght,"AutoModelForQuestionAnswering"),ght.forEach(t),wDe.forEach(t),MNe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(V6.$$.fragment,Ys),XOo=i(Ys),Zi=n(Ys,"P",{});var xZ=s(Zi);zOo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bV=n(xZ,"A",{href:!0});var hht=s(bV);WOo=r(hht,"from_pretrained()"),hht.forEach(t),QOo=r(xZ," class method or the "),vV=n(xZ,"A",{href:!0});var pht=s(vV);HOo=r(pht,"from_config()"),pht.forEach(t),UOo=r(xZ,` class
method.`),xZ.forEach(t),JOo=i(Ys),X6=n(Ys,"P",{});var ADe=s(X6);YOo=r(ADe,"This class cannot be instantiated directly using "),Mhe=n(ADe,"CODE",{});var uht=s(Mhe);KOo=r(uht,"__init__()"),uht.forEach(t),ZOo=r(ADe," (throws an error)."),ADe.forEach(t),eVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Qw=s(mt);T(z6.$$.fragment,Qw),oVo=i(Qw),Ehe=n(Qw,"P",{});var _ht=s(Ehe);rVo=r(_ht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_ht.forEach(t),tVo=i(Qw),ed=n(Qw,"P",{});var $Z=s(ed);aVo=r($Z,`Note:
Loading a model from its configuration file does `),Che=n($Z,"STRONG",{});var bht=s(Che);nVo=r(bht,"not"),bht.forEach(t),sVo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n($Z,"A",{href:!0});var vht=s(FV);lVo=r(vht,"from_pretrained()"),vht.forEach(t),iVo=r($Z," to load the model weights."),$Z.forEach(t),dVo=i(Qw),T(sv.$$.fragment,Qw),Qw.forEach(t),cVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(W6.$$.fragment,ca),fVo=i(ca),whe=n(ca,"P",{});var Fht=s(whe);mVo=r(Fht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fht.forEach(t),gVo=i(ca),qa=n(ca,"P",{});var Hw=s(qa);hVo=r(Hw,"The model class to instantiate is selected based on the "),Ahe=n(Hw,"CODE",{});var Tht=s(Ahe);pVo=r(Tht,"model_type"),Tht.forEach(t),uVo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),yhe=n(Hw,"CODE",{});var Mht=s(yhe);_Vo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),bVo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(Hw,"CODE",{});var Eht=s(Lhe);vVo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),FVo=r(Hw,":"),Hw.forEach(t),TVo=i(ca),V=n(ca,"UL",{});var X=s(V);lv=n(X,"LI",{});var t$e=s(lv);xhe=n(t$e,"STRONG",{});var Cht=s(xhe);MVo=r(Cht,"albert"),Cht.forEach(t),EVo=r(t$e," \u2014 "),TV=n(t$e,"A",{href:!0});var wht=s(TV);CVo=r(wht,"AlbertForQuestionAnswering"),wht.forEach(t),wVo=r(t$e," (ALBERT model)"),t$e.forEach(t),AVo=i(X),iv=n(X,"LI",{});var a$e=s(iv);$he=n(a$e,"STRONG",{});var Aht=s($he);yVo=r(Aht,"bart"),Aht.forEach(t),LVo=r(a$e," \u2014 "),MV=n(a$e,"A",{href:!0});var yht=s(MV);xVo=r(yht,"BartForQuestionAnswering"),yht.forEach(t),$Vo=r(a$e," (BART model)"),a$e.forEach(t),kVo=i(X),dv=n(X,"LI",{});var n$e=s(dv);khe=n(n$e,"STRONG",{});var Lht=s(khe);SVo=r(Lht,"bert"),Lht.forEach(t),RVo=r(n$e," \u2014 "),EV=n(n$e,"A",{href:!0});var xht=s(EV);PVo=r(xht,"BertForQuestionAnswering"),xht.forEach(t),BVo=r(n$e," (BERT model)"),n$e.forEach(t),IVo=i(X),cv=n(X,"LI",{});var s$e=s(cv);She=n(s$e,"STRONG",{});var $ht=s(She);qVo=r($ht,"big_bird"),$ht.forEach(t),NVo=r(s$e," \u2014 "),CV=n(s$e,"A",{href:!0});var kht=s(CV);jVo=r(kht,"BigBirdForQuestionAnswering"),kht.forEach(t),DVo=r(s$e," (BigBird model)"),s$e.forEach(t),GVo=i(X),fv=n(X,"LI",{});var l$e=s(fv);Rhe=n(l$e,"STRONG",{});var Sht=s(Rhe);OVo=r(Sht,"bigbird_pegasus"),Sht.forEach(t),VVo=r(l$e," \u2014 "),wV=n(l$e,"A",{href:!0});var Rht=s(wV);XVo=r(Rht,"BigBirdPegasusForQuestionAnswering"),Rht.forEach(t),zVo=r(l$e," (BigBirdPegasus model)"),l$e.forEach(t),WVo=i(X),mv=n(X,"LI",{});var i$e=s(mv);Phe=n(i$e,"STRONG",{});var Pht=s(Phe);QVo=r(Pht,"camembert"),Pht.forEach(t),HVo=r(i$e," \u2014 "),AV=n(i$e,"A",{href:!0});var Bht=s(AV);UVo=r(Bht,"CamembertForQuestionAnswering"),Bht.forEach(t),JVo=r(i$e," (CamemBERT model)"),i$e.forEach(t),YVo=i(X),gv=n(X,"LI",{});var d$e=s(gv);Bhe=n(d$e,"STRONG",{});var Iht=s(Bhe);KVo=r(Iht,"canine"),Iht.forEach(t),ZVo=r(d$e," \u2014 "),yV=n(d$e,"A",{href:!0});var qht=s(yV);eXo=r(qht,"CanineForQuestionAnswering"),qht.forEach(t),oXo=r(d$e," (Canine model)"),d$e.forEach(t),rXo=i(X),hv=n(X,"LI",{});var c$e=s(hv);Ihe=n(c$e,"STRONG",{});var Nht=s(Ihe);tXo=r(Nht,"convbert"),Nht.forEach(t),aXo=r(c$e," \u2014 "),LV=n(c$e,"A",{href:!0});var jht=s(LV);nXo=r(jht,"ConvBertForQuestionAnswering"),jht.forEach(t),sXo=r(c$e," (ConvBERT model)"),c$e.forEach(t),lXo=i(X),pv=n(X,"LI",{});var f$e=s(pv);qhe=n(f$e,"STRONG",{});var Dht=s(qhe);iXo=r(Dht,"data2vec-text"),Dht.forEach(t),dXo=r(f$e," \u2014 "),xV=n(f$e,"A",{href:!0});var Ght=s(xV);cXo=r(Ght,"Data2VecTextForQuestionAnswering"),Ght.forEach(t),fXo=r(f$e," (Data2VecText model)"),f$e.forEach(t),mXo=i(X),uv=n(X,"LI",{});var m$e=s(uv);Nhe=n(m$e,"STRONG",{});var Oht=s(Nhe);gXo=r(Oht,"deberta"),Oht.forEach(t),hXo=r(m$e," \u2014 "),$V=n(m$e,"A",{href:!0});var Vht=s($V);pXo=r(Vht,"DebertaForQuestionAnswering"),Vht.forEach(t),uXo=r(m$e," (DeBERTa model)"),m$e.forEach(t),_Xo=i(X),_v=n(X,"LI",{});var g$e=s(_v);jhe=n(g$e,"STRONG",{});var Xht=s(jhe);bXo=r(Xht,"deberta-v2"),Xht.forEach(t),vXo=r(g$e," \u2014 "),kV=n(g$e,"A",{href:!0});var zht=s(kV);FXo=r(zht,"DebertaV2ForQuestionAnswering"),zht.forEach(t),TXo=r(g$e," (DeBERTa-v2 model)"),g$e.forEach(t),MXo=i(X),bv=n(X,"LI",{});var h$e=s(bv);Dhe=n(h$e,"STRONG",{});var Wht=s(Dhe);EXo=r(Wht,"distilbert"),Wht.forEach(t),CXo=r(h$e," \u2014 "),SV=n(h$e,"A",{href:!0});var Qht=s(SV);wXo=r(Qht,"DistilBertForQuestionAnswering"),Qht.forEach(t),AXo=r(h$e," (DistilBERT model)"),h$e.forEach(t),yXo=i(X),vv=n(X,"LI",{});var p$e=s(vv);Ghe=n(p$e,"STRONG",{});var Hht=s(Ghe);LXo=r(Hht,"electra"),Hht.forEach(t),xXo=r(p$e," \u2014 "),RV=n(p$e,"A",{href:!0});var Uht=s(RV);$Xo=r(Uht,"ElectraForQuestionAnswering"),Uht.forEach(t),kXo=r(p$e," (ELECTRA model)"),p$e.forEach(t),SXo=i(X),Fv=n(X,"LI",{});var u$e=s(Fv);Ohe=n(u$e,"STRONG",{});var Jht=s(Ohe);RXo=r(Jht,"flaubert"),Jht.forEach(t),PXo=r(u$e," \u2014 "),PV=n(u$e,"A",{href:!0});var Yht=s(PV);BXo=r(Yht,"FlaubertForQuestionAnsweringSimple"),Yht.forEach(t),IXo=r(u$e," (FlauBERT model)"),u$e.forEach(t),qXo=i(X),Tv=n(X,"LI",{});var _$e=s(Tv);Vhe=n(_$e,"STRONG",{});var Kht=s(Vhe);NXo=r(Kht,"fnet"),Kht.forEach(t),jXo=r(_$e," \u2014 "),BV=n(_$e,"A",{href:!0});var Zht=s(BV);DXo=r(Zht,"FNetForQuestionAnswering"),Zht.forEach(t),GXo=r(_$e," (FNet model)"),_$e.forEach(t),OXo=i(X),Mv=n(X,"LI",{});var b$e=s(Mv);Xhe=n(b$e,"STRONG",{});var ept=s(Xhe);VXo=r(ept,"funnel"),ept.forEach(t),XXo=r(b$e," \u2014 "),IV=n(b$e,"A",{href:!0});var opt=s(IV);zXo=r(opt,"FunnelForQuestionAnswering"),opt.forEach(t),WXo=r(b$e," (Funnel Transformer model)"),b$e.forEach(t),QXo=i(X),Ev=n(X,"LI",{});var v$e=s(Ev);zhe=n(v$e,"STRONG",{});var rpt=s(zhe);HXo=r(rpt,"gptj"),rpt.forEach(t),UXo=r(v$e," \u2014 "),qV=n(v$e,"A",{href:!0});var tpt=s(qV);JXo=r(tpt,"GPTJForQuestionAnswering"),tpt.forEach(t),YXo=r(v$e," (GPT-J model)"),v$e.forEach(t),KXo=i(X),Cv=n(X,"LI",{});var F$e=s(Cv);Whe=n(F$e,"STRONG",{});var apt=s(Whe);ZXo=r(apt,"ibert"),apt.forEach(t),ezo=r(F$e," \u2014 "),NV=n(F$e,"A",{href:!0});var npt=s(NV);ozo=r(npt,"IBertForQuestionAnswering"),npt.forEach(t),rzo=r(F$e," (I-BERT model)"),F$e.forEach(t),tzo=i(X),wv=n(X,"LI",{});var T$e=s(wv);Qhe=n(T$e,"STRONG",{});var spt=s(Qhe);azo=r(spt,"layoutlmv2"),spt.forEach(t),nzo=r(T$e," \u2014 "),jV=n(T$e,"A",{href:!0});var lpt=s(jV);szo=r(lpt,"LayoutLMv2ForQuestionAnswering"),lpt.forEach(t),lzo=r(T$e," (LayoutLMv2 model)"),T$e.forEach(t),izo=i(X),Av=n(X,"LI",{});var M$e=s(Av);Hhe=n(M$e,"STRONG",{});var ipt=s(Hhe);dzo=r(ipt,"layoutlmv3"),ipt.forEach(t),czo=r(M$e," \u2014 "),DV=n(M$e,"A",{href:!0});var dpt=s(DV);fzo=r(dpt,"LayoutLMv3ForQuestionAnswering"),dpt.forEach(t),mzo=r(M$e," (LayoutLMv3 model)"),M$e.forEach(t),gzo=i(X),yv=n(X,"LI",{});var E$e=s(yv);Uhe=n(E$e,"STRONG",{});var cpt=s(Uhe);hzo=r(cpt,"led"),cpt.forEach(t),pzo=r(E$e," \u2014 "),GV=n(E$e,"A",{href:!0});var fpt=s(GV);uzo=r(fpt,"LEDForQuestionAnswering"),fpt.forEach(t),_zo=r(E$e," (LED model)"),E$e.forEach(t),bzo=i(X),Lv=n(X,"LI",{});var C$e=s(Lv);Jhe=n(C$e,"STRONG",{});var mpt=s(Jhe);vzo=r(mpt,"longformer"),mpt.forEach(t),Fzo=r(C$e," \u2014 "),OV=n(C$e,"A",{href:!0});var gpt=s(OV);Tzo=r(gpt,"LongformerForQuestionAnswering"),gpt.forEach(t),Mzo=r(C$e," (Longformer model)"),C$e.forEach(t),Ezo=i(X),xv=n(X,"LI",{});var w$e=s(xv);Yhe=n(w$e,"STRONG",{});var hpt=s(Yhe);Czo=r(hpt,"lxmert"),hpt.forEach(t),wzo=r(w$e," \u2014 "),VV=n(w$e,"A",{href:!0});var ppt=s(VV);Azo=r(ppt,"LxmertForQuestionAnswering"),ppt.forEach(t),yzo=r(w$e," (LXMERT model)"),w$e.forEach(t),Lzo=i(X),$v=n(X,"LI",{});var A$e=s($v);Khe=n(A$e,"STRONG",{});var upt=s(Khe);xzo=r(upt,"mbart"),upt.forEach(t),$zo=r(A$e," \u2014 "),XV=n(A$e,"A",{href:!0});var _pt=s(XV);kzo=r(_pt,"MBartForQuestionAnswering"),_pt.forEach(t),Szo=r(A$e," (mBART model)"),A$e.forEach(t),Rzo=i(X),kv=n(X,"LI",{});var y$e=s(kv);Zhe=n(y$e,"STRONG",{});var bpt=s(Zhe);Pzo=r(bpt,"megatron-bert"),bpt.forEach(t),Bzo=r(y$e," \u2014 "),zV=n(y$e,"A",{href:!0});var vpt=s(zV);Izo=r(vpt,"MegatronBertForQuestionAnswering"),vpt.forEach(t),qzo=r(y$e," (MegatronBert model)"),y$e.forEach(t),Nzo=i(X),Sv=n(X,"LI",{});var L$e=s(Sv);epe=n(L$e,"STRONG",{});var Fpt=s(epe);jzo=r(Fpt,"mobilebert"),Fpt.forEach(t),Dzo=r(L$e," \u2014 "),WV=n(L$e,"A",{href:!0});var Tpt=s(WV);Gzo=r(Tpt,"MobileBertForQuestionAnswering"),Tpt.forEach(t),Ozo=r(L$e," (MobileBERT model)"),L$e.forEach(t),Vzo=i(X),Rv=n(X,"LI",{});var x$e=s(Rv);ope=n(x$e,"STRONG",{});var Mpt=s(ope);Xzo=r(Mpt,"mpnet"),Mpt.forEach(t),zzo=r(x$e," \u2014 "),QV=n(x$e,"A",{href:!0});var Ept=s(QV);Wzo=r(Ept,"MPNetForQuestionAnswering"),Ept.forEach(t),Qzo=r(x$e," (MPNet model)"),x$e.forEach(t),Hzo=i(X),Pv=n(X,"LI",{});var $$e=s(Pv);rpe=n($$e,"STRONG",{});var Cpt=s(rpe);Uzo=r(Cpt,"nystromformer"),Cpt.forEach(t),Jzo=r($$e," \u2014 "),HV=n($$e,"A",{href:!0});var wpt=s(HV);Yzo=r(wpt,"NystromformerForQuestionAnswering"),wpt.forEach(t),Kzo=r($$e," (Nystromformer model)"),$$e.forEach(t),Zzo=i(X),Bv=n(X,"LI",{});var k$e=s(Bv);tpe=n(k$e,"STRONG",{});var Apt=s(tpe);eWo=r(Apt,"qdqbert"),Apt.forEach(t),oWo=r(k$e," \u2014 "),UV=n(k$e,"A",{href:!0});var ypt=s(UV);rWo=r(ypt,"QDQBertForQuestionAnswering"),ypt.forEach(t),tWo=r(k$e," (QDQBert model)"),k$e.forEach(t),aWo=i(X),Iv=n(X,"LI",{});var S$e=s(Iv);ape=n(S$e,"STRONG",{});var Lpt=s(ape);nWo=r(Lpt,"reformer"),Lpt.forEach(t),sWo=r(S$e," \u2014 "),JV=n(S$e,"A",{href:!0});var xpt=s(JV);lWo=r(xpt,"ReformerForQuestionAnswering"),xpt.forEach(t),iWo=r(S$e," (Reformer model)"),S$e.forEach(t),dWo=i(X),qv=n(X,"LI",{});var R$e=s(qv);npe=n(R$e,"STRONG",{});var $pt=s(npe);cWo=r($pt,"rembert"),$pt.forEach(t),fWo=r(R$e," \u2014 "),YV=n(R$e,"A",{href:!0});var kpt=s(YV);mWo=r(kpt,"RemBertForQuestionAnswering"),kpt.forEach(t),gWo=r(R$e," (RemBERT model)"),R$e.forEach(t),hWo=i(X),Nv=n(X,"LI",{});var P$e=s(Nv);spe=n(P$e,"STRONG",{});var Spt=s(spe);pWo=r(Spt,"roberta"),Spt.forEach(t),uWo=r(P$e," \u2014 "),KV=n(P$e,"A",{href:!0});var Rpt=s(KV);_Wo=r(Rpt,"RobertaForQuestionAnswering"),Rpt.forEach(t),bWo=r(P$e," (RoBERTa model)"),P$e.forEach(t),vWo=i(X),jv=n(X,"LI",{});var B$e=s(jv);lpe=n(B$e,"STRONG",{});var Ppt=s(lpe);FWo=r(Ppt,"roformer"),Ppt.forEach(t),TWo=r(B$e," \u2014 "),ZV=n(B$e,"A",{href:!0});var Bpt=s(ZV);MWo=r(Bpt,"RoFormerForQuestionAnswering"),Bpt.forEach(t),EWo=r(B$e," (RoFormer model)"),B$e.forEach(t),CWo=i(X),Dv=n(X,"LI",{});var I$e=s(Dv);ipe=n(I$e,"STRONG",{});var Ipt=s(ipe);wWo=r(Ipt,"splinter"),Ipt.forEach(t),AWo=r(I$e," \u2014 "),eX=n(I$e,"A",{href:!0});var qpt=s(eX);yWo=r(qpt,"SplinterForQuestionAnswering"),qpt.forEach(t),LWo=r(I$e," (Splinter model)"),I$e.forEach(t),xWo=i(X),Gv=n(X,"LI",{});var q$e=s(Gv);dpe=n(q$e,"STRONG",{});var Npt=s(dpe);$Wo=r(Npt,"squeezebert"),Npt.forEach(t),kWo=r(q$e," \u2014 "),oX=n(q$e,"A",{href:!0});var jpt=s(oX);SWo=r(jpt,"SqueezeBertForQuestionAnswering"),jpt.forEach(t),RWo=r(q$e," (SqueezeBERT model)"),q$e.forEach(t),PWo=i(X),Ov=n(X,"LI",{});var N$e=s(Ov);cpe=n(N$e,"STRONG",{});var Dpt=s(cpe);BWo=r(Dpt,"xlm"),Dpt.forEach(t),IWo=r(N$e," \u2014 "),rX=n(N$e,"A",{href:!0});var Gpt=s(rX);qWo=r(Gpt,"XLMForQuestionAnsweringSimple"),Gpt.forEach(t),NWo=r(N$e," (XLM model)"),N$e.forEach(t),jWo=i(X),Vv=n(X,"LI",{});var j$e=s(Vv);fpe=n(j$e,"STRONG",{});var Opt=s(fpe);DWo=r(Opt,"xlm-roberta"),Opt.forEach(t),GWo=r(j$e," \u2014 "),tX=n(j$e,"A",{href:!0});var Vpt=s(tX);OWo=r(Vpt,"XLMRobertaForQuestionAnswering"),Vpt.forEach(t),VWo=r(j$e," (XLM-RoBERTa model)"),j$e.forEach(t),XWo=i(X),Xv=n(X,"LI",{});var D$e=s(Xv);mpe=n(D$e,"STRONG",{});var Xpt=s(mpe);zWo=r(Xpt,"xlm-roberta-xl"),Xpt.forEach(t),WWo=r(D$e," \u2014 "),aX=n(D$e,"A",{href:!0});var zpt=s(aX);QWo=r(zpt,"XLMRobertaXLForQuestionAnswering"),zpt.forEach(t),HWo=r(D$e," (XLM-RoBERTa-XL model)"),D$e.forEach(t),UWo=i(X),zv=n(X,"LI",{});var G$e=s(zv);gpe=n(G$e,"STRONG",{});var Wpt=s(gpe);JWo=r(Wpt,"xlnet"),Wpt.forEach(t),YWo=r(G$e," \u2014 "),nX=n(G$e,"A",{href:!0});var Qpt=s(nX);KWo=r(Qpt,"XLNetForQuestionAnsweringSimple"),Qpt.forEach(t),ZWo=r(G$e," (XLNet model)"),G$e.forEach(t),eQo=i(X),Wv=n(X,"LI",{});var O$e=s(Wv);hpe=n(O$e,"STRONG",{});var Hpt=s(hpe);oQo=r(Hpt,"yoso"),Hpt.forEach(t),rQo=r(O$e," \u2014 "),sX=n(O$e,"A",{href:!0});var Upt=s(sX);tQo=r(Upt,"YosoForQuestionAnswering"),Upt.forEach(t),aQo=r(O$e," (YOSO model)"),O$e.forEach(t),X.forEach(t),nQo=i(ca),Qv=n(ca,"P",{});var V$e=s(Qv);sQo=r(V$e,"The model is set in evaluation mode by default using "),ppe=n(V$e,"CODE",{});var Jpt=s(ppe);lQo=r(Jpt,"model.eval()"),Jpt.forEach(t),iQo=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(V$e,"CODE",{});var Ypt=s(upe);dQo=r(Ypt,"model.train()"),Ypt.forEach(t),V$e.forEach(t),cQo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),ENe=i(f),od=n(f,"H2",{class:!0});var yDe=s(od);Uv=n(yDe,"A",{id:!0,class:!0,href:!0});var Kpt=s(Uv);_pe=n(Kpt,"SPAN",{});var Zpt=s(_pe);T(Q6.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),fQo=i(yDe),bpe=n(yDe,"SPAN",{});var eut=s(bpe);mQo=r(eut,"AutoModelForTableQuestionAnswering"),eut.forEach(t),yDe.forEach(t),CNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(H6.$$.fragment,Ks),gQo=i(Ks),rd=n(Ks,"P",{});var kZ=s(rd);hQo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lX=n(kZ,"A",{href:!0});var out=s(lX);pQo=r(out,"from_pretrained()"),out.forEach(t),uQo=r(kZ," class method or the "),iX=n(kZ,"A",{href:!0});var rut=s(iX);_Qo=r(rut,"from_config()"),rut.forEach(t),bQo=r(kZ,` class
method.`),kZ.forEach(t),vQo=i(Ks),U6=n(Ks,"P",{});var LDe=s(U6);FQo=r(LDe,"This class cannot be instantiated directly using "),vpe=n(LDe,"CODE",{});var tut=s(vpe);TQo=r(tut,"__init__()"),tut.forEach(t),MQo=r(LDe," (throws an error)."),LDe.forEach(t),EQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Uw=s(gt);T(J6.$$.fragment,Uw),CQo=i(Uw),Fpe=n(Uw,"P",{});var aut=s(Fpe);wQo=r(aut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aut.forEach(t),AQo=i(Uw),td=n(Uw,"P",{});var SZ=s(td);yQo=r(SZ,`Note:
Loading a model from its configuration file does `),Tpe=n(SZ,"STRONG",{});var nut=s(Tpe);LQo=r(nut,"not"),nut.forEach(t),xQo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(SZ,"A",{href:!0});var sut=s(dX);$Qo=r(sut,"from_pretrained()"),sut.forEach(t),kQo=r(SZ," to load the model weights."),SZ.forEach(t),SQo=i(Uw),T(Jv.$$.fragment,Uw),Uw.forEach(t),RQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Y6.$$.fragment,fa),PQo=i(fa),Mpe=n(fa,"P",{});var lut=s(Mpe);BQo=r(lut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lut.forEach(t),IQo=i(fa),Na=n(fa,"P",{});var Jw=s(Na);qQo=r(Jw,"The model class to instantiate is selected based on the "),Epe=n(Jw,"CODE",{});var iut=s(Epe);NQo=r(iut,"model_type"),iut.forEach(t),jQo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(Jw,"CODE",{});var dut=s(Cpe);DQo=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),GQo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(Jw,"CODE",{});var cut=s(wpe);OQo=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),VQo=r(Jw,":"),Jw.forEach(t),XQo=i(fa),Ape=n(fa,"UL",{});var fut=s(Ape);Yv=n(fut,"LI",{});var X$e=s(Yv);ype=n(X$e,"STRONG",{});var mut=s(ype);zQo=r(mut,"tapas"),mut.forEach(t),WQo=r(X$e," \u2014 "),cX=n(X$e,"A",{href:!0});var gut=s(cX);QQo=r(gut,"TapasForQuestionAnswering"),gut.forEach(t),HQo=r(X$e," (TAPAS model)"),X$e.forEach(t),fut.forEach(t),UQo=i(fa),Kv=n(fa,"P",{});var z$e=s(Kv);JQo=r(z$e,"The model is set in evaluation mode by default using "),Lpe=n(z$e,"CODE",{});var hut=s(Lpe);YQo=r(hut,"model.eval()"),hut.forEach(t),KQo=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(z$e,"CODE",{});var put=s(xpe);ZQo=r(put,"model.train()"),put.forEach(t),z$e.forEach(t),eHo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),wNe=i(f),ad=n(f,"H2",{class:!0});var xDe=s(ad);e3=n(xDe,"A",{id:!0,class:!0,href:!0});var uut=s(e3);$pe=n(uut,"SPAN",{});var _ut=s($pe);T(K6.$$.fragment,_ut),_ut.forEach(t),uut.forEach(t),oHo=i(xDe),kpe=n(xDe,"SPAN",{});var but=s(kpe);rHo=r(but,"AutoModelForImageClassification"),but.forEach(t),xDe.forEach(t),ANe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Z6.$$.fragment,Zs),tHo=i(Zs),nd=n(Zs,"P",{});var RZ=s(nd);aHo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fX=n(RZ,"A",{href:!0});var vut=s(fX);nHo=r(vut,"from_pretrained()"),vut.forEach(t),sHo=r(RZ," class method or the "),mX=n(RZ,"A",{href:!0});var Fut=s(mX);lHo=r(Fut,"from_config()"),Fut.forEach(t),iHo=r(RZ,` class
method.`),RZ.forEach(t),dHo=i(Zs),ey=n(Zs,"P",{});var $De=s(ey);cHo=r($De,"This class cannot be instantiated directly using "),Spe=n($De,"CODE",{});var Tut=s(Spe);fHo=r(Tut,"__init__()"),Tut.forEach(t),mHo=r($De," (throws an error)."),$De.forEach(t),gHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Yw=s(ht);T(oy.$$.fragment,Yw),hHo=i(Yw),Rpe=n(Yw,"P",{});var Mut=s(Rpe);pHo=r(Mut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mut.forEach(t),uHo=i(Yw),sd=n(Yw,"P",{});var PZ=s(sd);_Ho=r(PZ,`Note:
Loading a model from its configuration file does `),Ppe=n(PZ,"STRONG",{});var Eut=s(Ppe);bHo=r(Eut,"not"),Eut.forEach(t),vHo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(PZ,"A",{href:!0});var Cut=s(gX);FHo=r(Cut,"from_pretrained()"),Cut.forEach(t),THo=r(PZ," to load the model weights."),PZ.forEach(t),MHo=i(Yw),T(o3.$$.fragment,Yw),Yw.forEach(t),EHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(ry.$$.fragment,ma),CHo=i(ma),Bpe=n(ma,"P",{});var wut=s(Bpe);wHo=r(wut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wut.forEach(t),AHo=i(ma),ja=n(ma,"P",{});var Kw=s(ja);yHo=r(Kw,"The model class to instantiate is selected based on the "),Ipe=n(Kw,"CODE",{});var Aut=s(Ipe);LHo=r(Aut,"model_type"),Aut.forEach(t),xHo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),qpe=n(Kw,"CODE",{});var yut=s(qpe);$Ho=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),kHo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Kw,"CODE",{});var Lut=s(Npe);SHo=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),RHo=r(Kw,":"),Kw.forEach(t),PHo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);r3=n(Te,"LI",{});var W$e=s(r3);jpe=n(W$e,"STRONG",{});var xut=s(jpe);BHo=r(xut,"beit"),xut.forEach(t),IHo=r(W$e," \u2014 "),hX=n(W$e,"A",{href:!0});var $ut=s(hX);qHo=r($ut,"BeitForImageClassification"),$ut.forEach(t),NHo=r(W$e," (BEiT model)"),W$e.forEach(t),jHo=i(Te),t3=n(Te,"LI",{});var Q$e=s(t3);Dpe=n(Q$e,"STRONG",{});var kut=s(Dpe);DHo=r(kut,"convnext"),kut.forEach(t),GHo=r(Q$e," \u2014 "),pX=n(Q$e,"A",{href:!0});var Sut=s(pX);OHo=r(Sut,"ConvNextForImageClassification"),Sut.forEach(t),VHo=r(Q$e," (ConvNext model)"),Q$e.forEach(t),XHo=i(Te),a3=n(Te,"LI",{});var H$e=s(a3);Gpe=n(H$e,"STRONG",{});var Rut=s(Gpe);zHo=r(Rut,"cvt"),Rut.forEach(t),WHo=r(H$e," \u2014 "),uX=n(H$e,"A",{href:!0});var Put=s(uX);QHo=r(Put,"CvtForImageClassification"),Put.forEach(t),HHo=r(H$e," (CvT model)"),H$e.forEach(t),UHo=i(Te),n3=n(Te,"LI",{});var U$e=s(n3);Ope=n(U$e,"STRONG",{});var But=s(Ope);JHo=r(But,"data2vec-vision"),But.forEach(t),YHo=r(U$e," \u2014 "),_X=n(U$e,"A",{href:!0});var Iut=s(_X);KHo=r(Iut,"Data2VecVisionForImageClassification"),Iut.forEach(t),ZHo=r(U$e," (Data2VecVision model)"),U$e.forEach(t),eUo=i(Te),Bs=n(Te,"LI",{});var G$=s(Bs);Vpe=n(G$,"STRONG",{});var qut=s(Vpe);oUo=r(qut,"deit"),qut.forEach(t),rUo=r(G$," \u2014 "),bX=n(G$,"A",{href:!0});var Nut=s(bX);tUo=r(Nut,"DeiTForImageClassification"),Nut.forEach(t),aUo=r(G$," or "),vX=n(G$,"A",{href:!0});var jut=s(vX);nUo=r(jut,"DeiTForImageClassificationWithTeacher"),jut.forEach(t),sUo=r(G$," (DeiT model)"),G$.forEach(t),lUo=i(Te),s3=n(Te,"LI",{});var J$e=s(s3);Xpe=n(J$e,"STRONG",{});var Dut=s(Xpe);iUo=r(Dut,"imagegpt"),Dut.forEach(t),dUo=r(J$e," \u2014 "),FX=n(J$e,"A",{href:!0});var Gut=s(FX);cUo=r(Gut,"ImageGPTForImageClassification"),Gut.forEach(t),fUo=r(J$e," (ImageGPT model)"),J$e.forEach(t),mUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);zpe=n(hf,"STRONG",{});var Out=s(zpe);gUo=r(Out,"perceiver"),Out.forEach(t),hUo=r(hf," \u2014 "),TX=n(hf,"A",{href:!0});var Vut=s(TX);pUo=r(Vut,"PerceiverForImageClassificationLearned"),Vut.forEach(t),uUo=r(hf," or "),MX=n(hf,"A",{href:!0});var Xut=s(MX);_Uo=r(Xut,"PerceiverForImageClassificationFourier"),Xut.forEach(t),bUo=r(hf," or "),EX=n(hf,"A",{href:!0});var zut=s(EX);vUo=r(zut,"PerceiverForImageClassificationConvProcessing"),zut.forEach(t),FUo=r(hf," (Perceiver model)"),hf.forEach(t),TUo=i(Te),l3=n(Te,"LI",{});var Y$e=s(l3);Wpe=n(Y$e,"STRONG",{});var Wut=s(Wpe);MUo=r(Wut,"poolformer"),Wut.forEach(t),EUo=r(Y$e," \u2014 "),CX=n(Y$e,"A",{href:!0});var Qut=s(CX);CUo=r(Qut,"PoolFormerForImageClassification"),Qut.forEach(t),wUo=r(Y$e," (PoolFormer model)"),Y$e.forEach(t),AUo=i(Te),i3=n(Te,"LI",{});var K$e=s(i3);Qpe=n(K$e,"STRONG",{});var Hut=s(Qpe);yUo=r(Hut,"regnet"),Hut.forEach(t),LUo=r(K$e," \u2014 "),wX=n(K$e,"A",{href:!0});var Uut=s(wX);xUo=r(Uut,"RegNetForImageClassification"),Uut.forEach(t),$Uo=r(K$e," (RegNet model)"),K$e.forEach(t),kUo=i(Te),d3=n(Te,"LI",{});var Z$e=s(d3);Hpe=n(Z$e,"STRONG",{});var Jut=s(Hpe);SUo=r(Jut,"resnet"),Jut.forEach(t),RUo=r(Z$e," \u2014 "),AX=n(Z$e,"A",{href:!0});var Yut=s(AX);PUo=r(Yut,"ResNetForImageClassification"),Yut.forEach(t),BUo=r(Z$e," (ResNet model)"),Z$e.forEach(t),IUo=i(Te),c3=n(Te,"LI",{});var eke=s(c3);Upe=n(eke,"STRONG",{});var Kut=s(Upe);qUo=r(Kut,"segformer"),Kut.forEach(t),NUo=r(eke," \u2014 "),yX=n(eke,"A",{href:!0});var Zut=s(yX);jUo=r(Zut,"SegformerForImageClassification"),Zut.forEach(t),DUo=r(eke," (SegFormer model)"),eke.forEach(t),GUo=i(Te),f3=n(Te,"LI",{});var oke=s(f3);Jpe=n(oke,"STRONG",{});var e_t=s(Jpe);OUo=r(e_t,"swin"),e_t.forEach(t),VUo=r(oke," \u2014 "),LX=n(oke,"A",{href:!0});var o_t=s(LX);XUo=r(o_t,"SwinForImageClassification"),o_t.forEach(t),zUo=r(oke," (Swin model)"),oke.forEach(t),WUo=i(Te),m3=n(Te,"LI",{});var rke=s(m3);Ype=n(rke,"STRONG",{});var r_t=s(Ype);QUo=r(r_t,"van"),r_t.forEach(t),HUo=r(rke," \u2014 "),xX=n(rke,"A",{href:!0});var t_t=s(xX);UUo=r(t_t,"VanForImageClassification"),t_t.forEach(t),JUo=r(rke," (VAN model)"),rke.forEach(t),YUo=i(Te),g3=n(Te,"LI",{});var tke=s(g3);Kpe=n(tke,"STRONG",{});var a_t=s(Kpe);KUo=r(a_t,"vit"),a_t.forEach(t),ZUo=r(tke," \u2014 "),$X=n(tke,"A",{href:!0});var n_t=s($X);eJo=r(n_t,"ViTForImageClassification"),n_t.forEach(t),oJo=r(tke," (ViT model)"),tke.forEach(t),Te.forEach(t),rJo=i(ma),h3=n(ma,"P",{});var ake=s(h3);tJo=r(ake,"The model is set in evaluation mode by default using "),Zpe=n(ake,"CODE",{});var s_t=s(Zpe);aJo=r(s_t,"model.eval()"),s_t.forEach(t),nJo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(ake,"CODE",{});var l_t=s(eue);sJo=r(l_t,"model.train()"),l_t.forEach(t),ake.forEach(t),lJo=i(ma),T(p3.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),yNe=i(f),ld=n(f,"H2",{class:!0});var kDe=s(ld);u3=n(kDe,"A",{id:!0,class:!0,href:!0});var i_t=s(u3);oue=n(i_t,"SPAN",{});var d_t=s(oue);T(ty.$$.fragment,d_t),d_t.forEach(t),i_t.forEach(t),iJo=i(kDe),rue=n(kDe,"SPAN",{});var c_t=s(rue);dJo=r(c_t,"AutoModelForVision2Seq"),c_t.forEach(t),kDe.forEach(t),LNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(ay.$$.fragment,el),cJo=i(el),id=n(el,"P",{});var BZ=s(id);fJo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kX=n(BZ,"A",{href:!0});var f_t=s(kX);mJo=r(f_t,"from_pretrained()"),f_t.forEach(t),gJo=r(BZ," class method or the "),SX=n(BZ,"A",{href:!0});var m_t=s(SX);hJo=r(m_t,"from_config()"),m_t.forEach(t),pJo=r(BZ,` class
method.`),BZ.forEach(t),uJo=i(el),ny=n(el,"P",{});var SDe=s(ny);_Jo=r(SDe,"This class cannot be instantiated directly using "),tue=n(SDe,"CODE",{});var g_t=s(tue);bJo=r(g_t,"__init__()"),g_t.forEach(t),vJo=r(SDe," (throws an error)."),SDe.forEach(t),FJo=i(el),ut=n(el,"DIV",{class:!0});var Zw=s(ut);T(sy.$$.fragment,Zw),TJo=i(Zw),aue=n(Zw,"P",{});var h_t=s(aue);MJo=r(h_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),h_t.forEach(t),EJo=i(Zw),dd=n(Zw,"P",{});var IZ=s(dd);CJo=r(IZ,`Note:
Loading a model from its configuration file does `),nue=n(IZ,"STRONG",{});var p_t=s(nue);wJo=r(p_t,"not"),p_t.forEach(t),AJo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(IZ,"A",{href:!0});var u_t=s(RX);yJo=r(u_t,"from_pretrained()"),u_t.forEach(t),LJo=r(IZ," to load the model weights."),IZ.forEach(t),xJo=i(Zw),T(_3.$$.fragment,Zw),Zw.forEach(t),$Jo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(ly.$$.fragment,ga),kJo=i(ga),sue=n(ga,"P",{});var __t=s(sue);SJo=r(__t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),__t.forEach(t),RJo=i(ga),Da=n(ga,"P",{});var e0=s(Da);PJo=r(e0,"The model class to instantiate is selected based on the "),lue=n(e0,"CODE",{});var b_t=s(lue);BJo=r(b_t,"model_type"),b_t.forEach(t),IJo=r(e0,` property of the config object (either
passed as an argument or loaded from `),iue=n(e0,"CODE",{});var v_t=s(iue);qJo=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),NJo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(e0,"CODE",{});var F_t=s(due);jJo=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),DJo=r(e0,":"),e0.forEach(t),GJo=i(ga),cue=n(ga,"UL",{});var T_t=s(cue);b3=n(T_t,"LI",{});var nke=s(b3);fue=n(nke,"STRONG",{});var M_t=s(fue);OJo=r(M_t,"vision-encoder-decoder"),M_t.forEach(t),VJo=r(nke," \u2014 "),PX=n(nke,"A",{href:!0});var E_t=s(PX);XJo=r(E_t,"VisionEncoderDecoderModel"),E_t.forEach(t),zJo=r(nke," (Vision Encoder decoder model)"),nke.forEach(t),T_t.forEach(t),WJo=i(ga),v3=n(ga,"P",{});var ske=s(v3);QJo=r(ske,"The model is set in evaluation mode by default using "),mue=n(ske,"CODE",{});var C_t=s(mue);HJo=r(C_t,"model.eval()"),C_t.forEach(t),UJo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(ske,"CODE",{});var w_t=s(gue);JJo=r(w_t,"model.train()"),w_t.forEach(t),ske.forEach(t),YJo=i(ga),T(F3.$$.fragment,ga),ga.forEach(t),el.forEach(t),xNe=i(f),cd=n(f,"H2",{class:!0});var RDe=s(cd);T3=n(RDe,"A",{id:!0,class:!0,href:!0});var A_t=s(T3);hue=n(A_t,"SPAN",{});var y_t=s(hue);T(iy.$$.fragment,y_t),y_t.forEach(t),A_t.forEach(t),KJo=i(RDe),pue=n(RDe,"SPAN",{});var L_t=s(pue);ZJo=r(L_t,"AutoModelForAudioClassification"),L_t.forEach(t),RDe.forEach(t),$Ne=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(dy.$$.fragment,ol),eYo=i(ol),fd=n(ol,"P",{});var qZ=s(fd);oYo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BX=n(qZ,"A",{href:!0});var x_t=s(BX);rYo=r(x_t,"from_pretrained()"),x_t.forEach(t),tYo=r(qZ," class method or the "),IX=n(qZ,"A",{href:!0});var $_t=s(IX);aYo=r($_t,"from_config()"),$_t.forEach(t),nYo=r(qZ,` class
method.`),qZ.forEach(t),sYo=i(ol),cy=n(ol,"P",{});var PDe=s(cy);lYo=r(PDe,"This class cannot be instantiated directly using "),uue=n(PDe,"CODE",{});var k_t=s(uue);iYo=r(k_t,"__init__()"),k_t.forEach(t),dYo=r(PDe," (throws an error)."),PDe.forEach(t),cYo=i(ol),_t=n(ol,"DIV",{class:!0});var o0=s(_t);T(fy.$$.fragment,o0),fYo=i(o0),_ue=n(o0,"P",{});var S_t=s(_ue);mYo=r(S_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),S_t.forEach(t),gYo=i(o0),md=n(o0,"P",{});var NZ=s(md);hYo=r(NZ,`Note:
Loading a model from its configuration file does `),bue=n(NZ,"STRONG",{});var R_t=s(bue);pYo=r(R_t,"not"),R_t.forEach(t),uYo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(NZ,"A",{href:!0});var P_t=s(qX);_Yo=r(P_t,"from_pretrained()"),P_t.forEach(t),bYo=r(NZ," to load the model weights."),NZ.forEach(t),vYo=i(o0),T(M3.$$.fragment,o0),o0.forEach(t),FYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(my.$$.fragment,ha),TYo=i(ha),vue=n(ha,"P",{});var B_t=s(vue);MYo=r(B_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),B_t.forEach(t),EYo=i(ha),Ga=n(ha,"P",{});var r0=s(Ga);CYo=r(r0,"The model class to instantiate is selected based on the "),Fue=n(r0,"CODE",{});var I_t=s(Fue);wYo=r(I_t,"model_type"),I_t.forEach(t),AYo=r(r0,` property of the config object (either
passed as an argument or loaded from `),Tue=n(r0,"CODE",{});var q_t=s(Tue);yYo=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),LYo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(r0,"CODE",{});var N_t=s(Mue);xYo=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),$Yo=r(r0,":"),r0.forEach(t),kYo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);E3=n(Ve,"LI",{});var lke=s(E3);Eue=n(lke,"STRONG",{});var j_t=s(Eue);SYo=r(j_t,"data2vec-audio"),j_t.forEach(t),RYo=r(lke," \u2014 "),NX=n(lke,"A",{href:!0});var D_t=s(NX);PYo=r(D_t,"Data2VecAudioForSequenceClassification"),D_t.forEach(t),BYo=r(lke," (Data2VecAudio model)"),lke.forEach(t),IYo=i(Ve),C3=n(Ve,"LI",{});var ike=s(C3);Cue=n(ike,"STRONG",{});var G_t=s(Cue);qYo=r(G_t,"hubert"),G_t.forEach(t),NYo=r(ike," \u2014 "),jX=n(ike,"A",{href:!0});var O_t=s(jX);jYo=r(O_t,"HubertForSequenceClassification"),O_t.forEach(t),DYo=r(ike," (Hubert model)"),ike.forEach(t),GYo=i(Ve),w3=n(Ve,"LI",{});var dke=s(w3);wue=n(dke,"STRONG",{});var V_t=s(wue);OYo=r(V_t,"sew"),V_t.forEach(t),VYo=r(dke," \u2014 "),DX=n(dke,"A",{href:!0});var X_t=s(DX);XYo=r(X_t,"SEWForSequenceClassification"),X_t.forEach(t),zYo=r(dke," (SEW model)"),dke.forEach(t),WYo=i(Ve),A3=n(Ve,"LI",{});var cke=s(A3);Aue=n(cke,"STRONG",{});var z_t=s(Aue);QYo=r(z_t,"sew-d"),z_t.forEach(t),HYo=r(cke," \u2014 "),GX=n(cke,"A",{href:!0});var W_t=s(GX);UYo=r(W_t,"SEWDForSequenceClassification"),W_t.forEach(t),JYo=r(cke," (SEW-D model)"),cke.forEach(t),YYo=i(Ve),y3=n(Ve,"LI",{});var fke=s(y3);yue=n(fke,"STRONG",{});var Q_t=s(yue);KYo=r(Q_t,"unispeech"),Q_t.forEach(t),ZYo=r(fke," \u2014 "),OX=n(fke,"A",{href:!0});var H_t=s(OX);eKo=r(H_t,"UniSpeechForSequenceClassification"),H_t.forEach(t),oKo=r(fke," (UniSpeech model)"),fke.forEach(t),rKo=i(Ve),L3=n(Ve,"LI",{});var mke=s(L3);Lue=n(mke,"STRONG",{});var U_t=s(Lue);tKo=r(U_t,"unispeech-sat"),U_t.forEach(t),aKo=r(mke," \u2014 "),VX=n(mke,"A",{href:!0});var J_t=s(VX);nKo=r(J_t,"UniSpeechSatForSequenceClassification"),J_t.forEach(t),sKo=r(mke," (UniSpeechSat model)"),mke.forEach(t),lKo=i(Ve),x3=n(Ve,"LI",{});var gke=s(x3);xue=n(gke,"STRONG",{});var Y_t=s(xue);iKo=r(Y_t,"wav2vec2"),Y_t.forEach(t),dKo=r(gke," \u2014 "),XX=n(gke,"A",{href:!0});var K_t=s(XX);cKo=r(K_t,"Wav2Vec2ForSequenceClassification"),K_t.forEach(t),fKo=r(gke," (Wav2Vec2 model)"),gke.forEach(t),mKo=i(Ve),$3=n(Ve,"LI",{});var hke=s($3);$ue=n(hke,"STRONG",{});var Z_t=s($ue);gKo=r(Z_t,"wav2vec2-conformer"),Z_t.forEach(t),hKo=r(hke," \u2014 "),zX=n(hke,"A",{href:!0});var e1t=s(zX);pKo=r(e1t,"Wav2Vec2ConformerForSequenceClassification"),e1t.forEach(t),uKo=r(hke," (Wav2Vec2-Conformer model)"),hke.forEach(t),_Ko=i(Ve),k3=n(Ve,"LI",{});var pke=s(k3);kue=n(pke,"STRONG",{});var o1t=s(kue);bKo=r(o1t,"wavlm"),o1t.forEach(t),vKo=r(pke," \u2014 "),WX=n(pke,"A",{href:!0});var r1t=s(WX);FKo=r(r1t,"WavLMForSequenceClassification"),r1t.forEach(t),TKo=r(pke," (WavLM model)"),pke.forEach(t),Ve.forEach(t),MKo=i(ha),S3=n(ha,"P",{});var uke=s(S3);EKo=r(uke,"The model is set in evaluation mode by default using "),Sue=n(uke,"CODE",{});var t1t=s(Sue);CKo=r(t1t,"model.eval()"),t1t.forEach(t),wKo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(uke,"CODE",{});var a1t=s(Rue);AKo=r(a1t,"model.train()"),a1t.forEach(t),uke.forEach(t),yKo=i(ha),T(R3.$$.fragment,ha),ha.forEach(t),ol.forEach(t),kNe=i(f),gd=n(f,"H2",{class:!0});var BDe=s(gd);P3=n(BDe,"A",{id:!0,class:!0,href:!0});var n1t=s(P3);Pue=n(n1t,"SPAN",{});var s1t=s(Pue);T(gy.$$.fragment,s1t),s1t.forEach(t),n1t.forEach(t),LKo=i(BDe),Bue=n(BDe,"SPAN",{});var l1t=s(Bue);xKo=r(l1t,"AutoModelForAudioFrameClassification"),l1t.forEach(t),BDe.forEach(t),SNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(hy.$$.fragment,rl),$Ko=i(rl),hd=n(rl,"P",{});var jZ=s(hd);kKo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QX=n(jZ,"A",{href:!0});var i1t=s(QX);SKo=r(i1t,"from_pretrained()"),i1t.forEach(t),RKo=r(jZ," class method or the "),HX=n(jZ,"A",{href:!0});var d1t=s(HX);PKo=r(d1t,"from_config()"),d1t.forEach(t),BKo=r(jZ,` class
method.`),jZ.forEach(t),IKo=i(rl),py=n(rl,"P",{});var IDe=s(py);qKo=r(IDe,"This class cannot be instantiated directly using "),Iue=n(IDe,"CODE",{});var c1t=s(Iue);NKo=r(c1t,"__init__()"),c1t.forEach(t),jKo=r(IDe," (throws an error)."),IDe.forEach(t),DKo=i(rl),bt=n(rl,"DIV",{class:!0});var t0=s(bt);T(uy.$$.fragment,t0),GKo=i(t0),que=n(t0,"P",{});var f1t=s(que);OKo=r(f1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),f1t.forEach(t),VKo=i(t0),pd=n(t0,"P",{});var DZ=s(pd);XKo=r(DZ,`Note:
Loading a model from its configuration file does `),Nue=n(DZ,"STRONG",{});var m1t=s(Nue);zKo=r(m1t,"not"),m1t.forEach(t),WKo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(DZ,"A",{href:!0});var g1t=s(UX);QKo=r(g1t,"from_pretrained()"),g1t.forEach(t),HKo=r(DZ," to load the model weights."),DZ.forEach(t),UKo=i(t0),T(B3.$$.fragment,t0),t0.forEach(t),JKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(_y.$$.fragment,pa),YKo=i(pa),jue=n(pa,"P",{});var h1t=s(jue);KKo=r(h1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h1t.forEach(t),ZKo=i(pa),Oa=n(pa,"P",{});var a0=s(Oa);eZo=r(a0,"The model class to instantiate is selected based on the "),Due=n(a0,"CODE",{});var p1t=s(Due);oZo=r(p1t,"model_type"),p1t.forEach(t),rZo=r(a0,` property of the config object (either
passed as an argument or loaded from `),Gue=n(a0,"CODE",{});var u1t=s(Gue);tZo=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),aZo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(a0,"CODE",{});var _1t=s(Oue);nZo=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),sZo=r(a0,":"),a0.forEach(t),lZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);I3=n(tl,"LI",{});var _ke=s(I3);Vue=n(_ke,"STRONG",{});var b1t=s(Vue);iZo=r(b1t,"data2vec-audio"),b1t.forEach(t),dZo=r(_ke," \u2014 "),JX=n(_ke,"A",{href:!0});var v1t=s(JX);cZo=r(v1t,"Data2VecAudioForAudioFrameClassification"),v1t.forEach(t),fZo=r(_ke," (Data2VecAudio model)"),_ke.forEach(t),mZo=i(tl),q3=n(tl,"LI",{});var bke=s(q3);Xue=n(bke,"STRONG",{});var F1t=s(Xue);gZo=r(F1t,"unispeech-sat"),F1t.forEach(t),hZo=r(bke," \u2014 "),YX=n(bke,"A",{href:!0});var T1t=s(YX);pZo=r(T1t,"UniSpeechSatForAudioFrameClassification"),T1t.forEach(t),uZo=r(bke," (UniSpeechSat model)"),bke.forEach(t),_Zo=i(tl),N3=n(tl,"LI",{});var vke=s(N3);zue=n(vke,"STRONG",{});var M1t=s(zue);bZo=r(M1t,"wav2vec2"),M1t.forEach(t),vZo=r(vke," \u2014 "),KX=n(vke,"A",{href:!0});var E1t=s(KX);FZo=r(E1t,"Wav2Vec2ForAudioFrameClassification"),E1t.forEach(t),TZo=r(vke," (Wav2Vec2 model)"),vke.forEach(t),MZo=i(tl),j3=n(tl,"LI",{});var Fke=s(j3);Wue=n(Fke,"STRONG",{});var C1t=s(Wue);EZo=r(C1t,"wav2vec2-conformer"),C1t.forEach(t),CZo=r(Fke," \u2014 "),ZX=n(Fke,"A",{href:!0});var w1t=s(ZX);wZo=r(w1t,"Wav2Vec2ConformerForAudioFrameClassification"),w1t.forEach(t),AZo=r(Fke," (Wav2Vec2-Conformer model)"),Fke.forEach(t),yZo=i(tl),D3=n(tl,"LI",{});var Tke=s(D3);Que=n(Tke,"STRONG",{});var A1t=s(Que);LZo=r(A1t,"wavlm"),A1t.forEach(t),xZo=r(Tke," \u2014 "),ez=n(Tke,"A",{href:!0});var y1t=s(ez);$Zo=r(y1t,"WavLMForAudioFrameClassification"),y1t.forEach(t),kZo=r(Tke," (WavLM model)"),Tke.forEach(t),tl.forEach(t),SZo=i(pa),G3=n(pa,"P",{});var Mke=s(G3);RZo=r(Mke,"The model is set in evaluation mode by default using "),Hue=n(Mke,"CODE",{});var L1t=s(Hue);PZo=r(L1t,"model.eval()"),L1t.forEach(t),BZo=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(Mke,"CODE",{});var x1t=s(Uue);IZo=r(x1t,"model.train()"),x1t.forEach(t),Mke.forEach(t),qZo=i(pa),T(O3.$$.fragment,pa),pa.forEach(t),rl.forEach(t),RNe=i(f),ud=n(f,"H2",{class:!0});var qDe=s(ud);V3=n(qDe,"A",{id:!0,class:!0,href:!0});var $1t=s(V3);Jue=n($1t,"SPAN",{});var k1t=s(Jue);T(by.$$.fragment,k1t),k1t.forEach(t),$1t.forEach(t),NZo=i(qDe),Yue=n(qDe,"SPAN",{});var S1t=s(Yue);jZo=r(S1t,"AutoModelForCTC"),S1t.forEach(t),qDe.forEach(t),PNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(vy.$$.fragment,al),DZo=i(al),_d=n(al,"P",{});var GZ=s(_d);GZo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oz=n(GZ,"A",{href:!0});var R1t=s(oz);OZo=r(R1t,"from_pretrained()"),R1t.forEach(t),VZo=r(GZ," class method or the "),rz=n(GZ,"A",{href:!0});var P1t=s(rz);XZo=r(P1t,"from_config()"),P1t.forEach(t),zZo=r(GZ,` class
method.`),GZ.forEach(t),WZo=i(al),Fy=n(al,"P",{});var NDe=s(Fy);QZo=r(NDe,"This class cannot be instantiated directly using "),Kue=n(NDe,"CODE",{});var B1t=s(Kue);HZo=r(B1t,"__init__()"),B1t.forEach(t),UZo=r(NDe," (throws an error)."),NDe.forEach(t),JZo=i(al),vt=n(al,"DIV",{class:!0});var n0=s(vt);T(Ty.$$.fragment,n0),YZo=i(n0),Zue=n(n0,"P",{});var I1t=s(Zue);KZo=r(I1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),I1t.forEach(t),ZZo=i(n0),bd=n(n0,"P",{});var OZ=s(bd);eer=r(OZ,`Note:
Loading a model from its configuration file does `),e_e=n(OZ,"STRONG",{});var q1t=s(e_e);oer=r(q1t,"not"),q1t.forEach(t),rer=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(OZ,"A",{href:!0});var N1t=s(tz);ter=r(N1t,"from_pretrained()"),N1t.forEach(t),aer=r(OZ," to load the model weights."),OZ.forEach(t),ner=i(n0),T(X3.$$.fragment,n0),n0.forEach(t),ser=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(My.$$.fragment,ua),ler=i(ua),o_e=n(ua,"P",{});var j1t=s(o_e);ier=r(j1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),j1t.forEach(t),der=i(ua),Va=n(ua,"P",{});var s0=s(Va);cer=r(s0,"The model class to instantiate is selected based on the "),r_e=n(s0,"CODE",{});var D1t=s(r_e);fer=r(D1t,"model_type"),D1t.forEach(t),mer=r(s0,` property of the config object (either
passed as an argument or loaded from `),t_e=n(s0,"CODE",{});var G1t=s(t_e);ger=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),her=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(s0,"CODE",{});var O1t=s(a_e);per=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),uer=r(s0,":"),s0.forEach(t),_er=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);z3=n(Xe,"LI",{});var Eke=s(z3);n_e=n(Eke,"STRONG",{});var V1t=s(n_e);ber=r(V1t,"data2vec-audio"),V1t.forEach(t),ver=r(Eke," \u2014 "),az=n(Eke,"A",{href:!0});var X1t=s(az);Fer=r(X1t,"Data2VecAudioForCTC"),X1t.forEach(t),Ter=r(Eke," (Data2VecAudio model)"),Eke.forEach(t),Mer=i(Xe),W3=n(Xe,"LI",{});var Cke=s(W3);s_e=n(Cke,"STRONG",{});var z1t=s(s_e);Eer=r(z1t,"hubert"),z1t.forEach(t),Cer=r(Cke," \u2014 "),nz=n(Cke,"A",{href:!0});var W1t=s(nz);wer=r(W1t,"HubertForCTC"),W1t.forEach(t),Aer=r(Cke," (Hubert model)"),Cke.forEach(t),yer=i(Xe),Q3=n(Xe,"LI",{});var wke=s(Q3);l_e=n(wke,"STRONG",{});var Q1t=s(l_e);Ler=r(Q1t,"sew"),Q1t.forEach(t),xer=r(wke," \u2014 "),sz=n(wke,"A",{href:!0});var H1t=s(sz);$er=r(H1t,"SEWForCTC"),H1t.forEach(t),ker=r(wke," (SEW model)"),wke.forEach(t),Ser=i(Xe),H3=n(Xe,"LI",{});var Ake=s(H3);i_e=n(Ake,"STRONG",{});var U1t=s(i_e);Rer=r(U1t,"sew-d"),U1t.forEach(t),Per=r(Ake," \u2014 "),lz=n(Ake,"A",{href:!0});var J1t=s(lz);Ber=r(J1t,"SEWDForCTC"),J1t.forEach(t),Ier=r(Ake," (SEW-D model)"),Ake.forEach(t),qer=i(Xe),U3=n(Xe,"LI",{});var yke=s(U3);d_e=n(yke,"STRONG",{});var Y1t=s(d_e);Ner=r(Y1t,"unispeech"),Y1t.forEach(t),jer=r(yke," \u2014 "),iz=n(yke,"A",{href:!0});var K1t=s(iz);Der=r(K1t,"UniSpeechForCTC"),K1t.forEach(t),Ger=r(yke," (UniSpeech model)"),yke.forEach(t),Oer=i(Xe),J3=n(Xe,"LI",{});var Lke=s(J3);c_e=n(Lke,"STRONG",{});var Z1t=s(c_e);Ver=r(Z1t,"unispeech-sat"),Z1t.forEach(t),Xer=r(Lke," \u2014 "),dz=n(Lke,"A",{href:!0});var e8t=s(dz);zer=r(e8t,"UniSpeechSatForCTC"),e8t.forEach(t),Wer=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),Qer=i(Xe),Y3=n(Xe,"LI",{});var xke=s(Y3);f_e=n(xke,"STRONG",{});var o8t=s(f_e);Her=r(o8t,"wav2vec2"),o8t.forEach(t),Uer=r(xke," \u2014 "),cz=n(xke,"A",{href:!0});var r8t=s(cz);Jer=r(r8t,"Wav2Vec2ForCTC"),r8t.forEach(t),Yer=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Ker=i(Xe),K3=n(Xe,"LI",{});var $ke=s(K3);m_e=n($ke,"STRONG",{});var t8t=s(m_e);Zer=r(t8t,"wav2vec2-conformer"),t8t.forEach(t),eor=r($ke," \u2014 "),fz=n($ke,"A",{href:!0});var a8t=s(fz);oor=r(a8t,"Wav2Vec2ConformerForCTC"),a8t.forEach(t),ror=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),tor=i(Xe),Z3=n(Xe,"LI",{});var kke=s(Z3);g_e=n(kke,"STRONG",{});var n8t=s(g_e);aor=r(n8t,"wavlm"),n8t.forEach(t),nor=r(kke," \u2014 "),mz=n(kke,"A",{href:!0});var s8t=s(mz);sor=r(s8t,"WavLMForCTC"),s8t.forEach(t),lor=r(kke," (WavLM model)"),kke.forEach(t),Xe.forEach(t),ior=i(ua),eF=n(ua,"P",{});var Ske=s(eF);dor=r(Ske,"The model is set in evaluation mode by default using "),h_e=n(Ske,"CODE",{});var l8t=s(h_e);cor=r(l8t,"model.eval()"),l8t.forEach(t),mor=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(Ske,"CODE",{});var i8t=s(p_e);gor=r(i8t,"model.train()"),i8t.forEach(t),Ske.forEach(t),hor=i(ua),T(oF.$$.fragment,ua),ua.forEach(t),al.forEach(t),BNe=i(f),vd=n(f,"H2",{class:!0});var jDe=s(vd);rF=n(jDe,"A",{id:!0,class:!0,href:!0});var d8t=s(rF);u_e=n(d8t,"SPAN",{});var c8t=s(u_e);T(Ey.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),por=i(jDe),__e=n(jDe,"SPAN",{});var f8t=s(__e);uor=r(f8t,"AutoModelForSpeechSeq2Seq"),f8t.forEach(t),jDe.forEach(t),INe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(Cy.$$.fragment,nl),_or=i(nl),Fd=n(nl,"P",{});var VZ=s(Fd);bor=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gz=n(VZ,"A",{href:!0});var m8t=s(gz);vor=r(m8t,"from_pretrained()"),m8t.forEach(t),For=r(VZ," class method or the "),hz=n(VZ,"A",{href:!0});var g8t=s(hz);Tor=r(g8t,"from_config()"),g8t.forEach(t),Mor=r(VZ,` class
method.`),VZ.forEach(t),Eor=i(nl),wy=n(nl,"P",{});var DDe=s(wy);Cor=r(DDe,"This class cannot be instantiated directly using "),b_e=n(DDe,"CODE",{});var h8t=s(b_e);wor=r(h8t,"__init__()"),h8t.forEach(t),Aor=r(DDe," (throws an error)."),DDe.forEach(t),yor=i(nl),Ft=n(nl,"DIV",{class:!0});var l0=s(Ft);T(Ay.$$.fragment,l0),Lor=i(l0),v_e=n(l0,"P",{});var p8t=s(v_e);xor=r(p8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),p8t.forEach(t),$or=i(l0),Td=n(l0,"P",{});var XZ=s(Td);kor=r(XZ,`Note:
Loading a model from its configuration file does `),F_e=n(XZ,"STRONG",{});var u8t=s(F_e);Sor=r(u8t,"not"),u8t.forEach(t),Ror=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(XZ,"A",{href:!0});var _8t=s(pz);Por=r(_8t,"from_pretrained()"),_8t.forEach(t),Bor=r(XZ," to load the model weights."),XZ.forEach(t),Ior=i(l0),T(tF.$$.fragment,l0),l0.forEach(t),qor=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(yy.$$.fragment,_a),Nor=i(_a),T_e=n(_a,"P",{});var b8t=s(T_e);jor=r(b8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b8t.forEach(t),Dor=i(_a),Xa=n(_a,"P",{});var i0=s(Xa);Gor=r(i0,"The model class to instantiate is selected based on the "),M_e=n(i0,"CODE",{});var v8t=s(M_e);Oor=r(v8t,"model_type"),v8t.forEach(t),Vor=r(i0,` property of the config object (either
passed as an argument or loaded from `),E_e=n(i0,"CODE",{});var F8t=s(E_e);Xor=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),zor=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(i0,"CODE",{});var T8t=s(C_e);Wor=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),Qor=r(i0,":"),i0.forEach(t),Hor=i(_a),Ly=n(_a,"UL",{});var GDe=s(Ly);aF=n(GDe,"LI",{});var Rke=s(aF);w_e=n(Rke,"STRONG",{});var M8t=s(w_e);Uor=r(M8t,"speech-encoder-decoder"),M8t.forEach(t),Jor=r(Rke," \u2014 "),uz=n(Rke,"A",{href:!0});var E8t=s(uz);Yor=r(E8t,"SpeechEncoderDecoderModel"),E8t.forEach(t),Kor=r(Rke," (Speech Encoder decoder model)"),Rke.forEach(t),Zor=i(GDe),nF=n(GDe,"LI",{});var Pke=s(nF);A_e=n(Pke,"STRONG",{});var C8t=s(A_e);err=r(C8t,"speech_to_text"),C8t.forEach(t),orr=r(Pke," \u2014 "),_z=n(Pke,"A",{href:!0});var w8t=s(_z);rrr=r(w8t,"Speech2TextForConditionalGeneration"),w8t.forEach(t),trr=r(Pke," (Speech2Text model)"),Pke.forEach(t),GDe.forEach(t),arr=i(_a),sF=n(_a,"P",{});var Bke=s(sF);nrr=r(Bke,"The model is set in evaluation mode by default using "),y_e=n(Bke,"CODE",{});var A8t=s(y_e);srr=r(A8t,"model.eval()"),A8t.forEach(t),lrr=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(Bke,"CODE",{});var y8t=s(L_e);irr=r(y8t,"model.train()"),y8t.forEach(t),Bke.forEach(t),drr=i(_a),T(lF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),qNe=i(f),Md=n(f,"H2",{class:!0});var ODe=s(Md);iF=n(ODe,"A",{id:!0,class:!0,href:!0});var L8t=s(iF);x_e=n(L8t,"SPAN",{});var x8t=s(x_e);T(xy.$$.fragment,x8t),x8t.forEach(t),L8t.forEach(t),crr=i(ODe),$_e=n(ODe,"SPAN",{});var $8t=s($_e);frr=r($8t,"AutoModelForAudioXVector"),$8t.forEach(t),ODe.forEach(t),NNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T($y.$$.fragment,sl),mrr=i(sl),Ed=n(sl,"P",{});var zZ=s(Ed);grr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bz=n(zZ,"A",{href:!0});var k8t=s(bz);hrr=r(k8t,"from_pretrained()"),k8t.forEach(t),prr=r(zZ," class method or the "),vz=n(zZ,"A",{href:!0});var S8t=s(vz);urr=r(S8t,"from_config()"),S8t.forEach(t),_rr=r(zZ,` class
method.`),zZ.forEach(t),brr=i(sl),ky=n(sl,"P",{});var VDe=s(ky);vrr=r(VDe,"This class cannot be instantiated directly using "),k_e=n(VDe,"CODE",{});var R8t=s(k_e);Frr=r(R8t,"__init__()"),R8t.forEach(t),Trr=r(VDe," (throws an error)."),VDe.forEach(t),Mrr=i(sl),Tt=n(sl,"DIV",{class:!0});var d0=s(Tt);T(Sy.$$.fragment,d0),Err=i(d0),S_e=n(d0,"P",{});var P8t=s(S_e);Crr=r(P8t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),P8t.forEach(t),wrr=i(d0),Cd=n(d0,"P",{});var WZ=s(Cd);Arr=r(WZ,`Note:
Loading a model from its configuration file does `),R_e=n(WZ,"STRONG",{});var B8t=s(R_e);yrr=r(B8t,"not"),B8t.forEach(t),Lrr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(WZ,"A",{href:!0});var I8t=s(Fz);xrr=r(I8t,"from_pretrained()"),I8t.forEach(t),$rr=r(WZ," to load the model weights."),WZ.forEach(t),krr=i(d0),T(dF.$$.fragment,d0),d0.forEach(t),Srr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(Ry.$$.fragment,ba),Rrr=i(ba),P_e=n(ba,"P",{});var q8t=s(P_e);Prr=r(q8t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),q8t.forEach(t),Brr=i(ba),za=n(ba,"P",{});var c0=s(za);Irr=r(c0,"The model class to instantiate is selected based on the "),B_e=n(c0,"CODE",{});var N8t=s(B_e);qrr=r(N8t,"model_type"),N8t.forEach(t),Nrr=r(c0,` property of the config object (either
passed as an argument or loaded from `),I_e=n(c0,"CODE",{});var j8t=s(I_e);jrr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),Drr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(c0,"CODE",{});var D8t=s(q_e);Grr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),Orr=r(c0,":"),c0.forEach(t),Vrr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);cF=n(ll,"LI",{});var Ike=s(cF);N_e=n(Ike,"STRONG",{});var G8t=s(N_e);Xrr=r(G8t,"data2vec-audio"),G8t.forEach(t),zrr=r(Ike," \u2014 "),Tz=n(Ike,"A",{href:!0});var O8t=s(Tz);Wrr=r(O8t,"Data2VecAudioForXVector"),O8t.forEach(t),Qrr=r(Ike," (Data2VecAudio model)"),Ike.forEach(t),Hrr=i(ll),fF=n(ll,"LI",{});var qke=s(fF);j_e=n(qke,"STRONG",{});var V8t=s(j_e);Urr=r(V8t,"unispeech-sat"),V8t.forEach(t),Jrr=r(qke," \u2014 "),Mz=n(qke,"A",{href:!0});var X8t=s(Mz);Yrr=r(X8t,"UniSpeechSatForXVector"),X8t.forEach(t),Krr=r(qke," (UniSpeechSat model)"),qke.forEach(t),Zrr=i(ll),mF=n(ll,"LI",{});var Nke=s(mF);D_e=n(Nke,"STRONG",{});var z8t=s(D_e);etr=r(z8t,"wav2vec2"),z8t.forEach(t),otr=r(Nke," \u2014 "),Ez=n(Nke,"A",{href:!0});var W8t=s(Ez);rtr=r(W8t,"Wav2Vec2ForXVector"),W8t.forEach(t),ttr=r(Nke," (Wav2Vec2 model)"),Nke.forEach(t),atr=i(ll),gF=n(ll,"LI",{});var jke=s(gF);G_e=n(jke,"STRONG",{});var Q8t=s(G_e);ntr=r(Q8t,"wav2vec2-conformer"),Q8t.forEach(t),str=r(jke," \u2014 "),Cz=n(jke,"A",{href:!0});var H8t=s(Cz);ltr=r(H8t,"Wav2Vec2ConformerForXVector"),H8t.forEach(t),itr=r(jke," (Wav2Vec2-Conformer model)"),jke.forEach(t),dtr=i(ll),hF=n(ll,"LI",{});var Dke=s(hF);O_e=n(Dke,"STRONG",{});var U8t=s(O_e);ctr=r(U8t,"wavlm"),U8t.forEach(t),ftr=r(Dke," \u2014 "),wz=n(Dke,"A",{href:!0});var J8t=s(wz);mtr=r(J8t,"WavLMForXVector"),J8t.forEach(t),gtr=r(Dke," (WavLM model)"),Dke.forEach(t),ll.forEach(t),htr=i(ba),pF=n(ba,"P",{});var Gke=s(pF);ptr=r(Gke,"The model is set in evaluation mode by default using "),V_e=n(Gke,"CODE",{});var Y8t=s(V_e);utr=r(Y8t,"model.eval()"),Y8t.forEach(t),_tr=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(Gke,"CODE",{});var K8t=s(X_e);btr=r(K8t,"model.train()"),K8t.forEach(t),Gke.forEach(t),vtr=i(ba),T(uF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),jNe=i(f),wd=n(f,"H2",{class:!0});var XDe=s(wd);_F=n(XDe,"A",{id:!0,class:!0,href:!0});var Z8t=s(_F);z_e=n(Z8t,"SPAN",{});var ebt=s(z_e);T(Py.$$.fragment,ebt),ebt.forEach(t),Z8t.forEach(t),Ftr=i(XDe),W_e=n(XDe,"SPAN",{});var obt=s(W_e);Ttr=r(obt,"AutoModelForMaskedImageModeling"),obt.forEach(t),XDe.forEach(t),DNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(By.$$.fragment,il),Mtr=i(il),Ad=n(il,"P",{});var QZ=s(Ad);Etr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Az=n(QZ,"A",{href:!0});var rbt=s(Az);Ctr=r(rbt,"from_pretrained()"),rbt.forEach(t),wtr=r(QZ," class method or the "),yz=n(QZ,"A",{href:!0});var tbt=s(yz);Atr=r(tbt,"from_config()"),tbt.forEach(t),ytr=r(QZ,` class
method.`),QZ.forEach(t),Ltr=i(il),Iy=n(il,"P",{});var zDe=s(Iy);xtr=r(zDe,"This class cannot be instantiated directly using "),Q_e=n(zDe,"CODE",{});var abt=s(Q_e);$tr=r(abt,"__init__()"),abt.forEach(t),ktr=r(zDe," (throws an error)."),zDe.forEach(t),Str=i(il),Mt=n(il,"DIV",{class:!0});var f0=s(Mt);T(qy.$$.fragment,f0),Rtr=i(f0),H_e=n(f0,"P",{});var nbt=s(H_e);Ptr=r(nbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nbt.forEach(t),Btr=i(f0),yd=n(f0,"P",{});var HZ=s(yd);Itr=r(HZ,`Note:
Loading a model from its configuration file does `),U_e=n(HZ,"STRONG",{});var sbt=s(U_e);qtr=r(sbt,"not"),sbt.forEach(t),Ntr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(HZ,"A",{href:!0});var lbt=s(Lz);jtr=r(lbt,"from_pretrained()"),lbt.forEach(t),Dtr=r(HZ," to load the model weights."),HZ.forEach(t),Gtr=i(f0),T(bF.$$.fragment,f0),f0.forEach(t),Otr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(Ny.$$.fragment,va),Vtr=i(va),J_e=n(va,"P",{});var ibt=s(J_e);Xtr=r(ibt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ibt.forEach(t),ztr=i(va),Wa=n(va,"P",{});var m0=s(Wa);Wtr=r(m0,"The model class to instantiate is selected based on the "),Y_e=n(m0,"CODE",{});var dbt=s(Y_e);Qtr=r(dbt,"model_type"),dbt.forEach(t),Htr=r(m0,` property of the config object (either
passed as an argument or loaded from `),K_e=n(m0,"CODE",{});var cbt=s(K_e);Utr=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),Jtr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(m0,"CODE",{});var fbt=s(Z_e);Ytr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Ktr=r(m0,":"),m0.forEach(t),Ztr=i(va),Ld=n(va,"UL",{});var UZ=s(Ld);vF=n(UZ,"LI",{});var Oke=s(vF);e1e=n(Oke,"STRONG",{});var mbt=s(e1e);ear=r(mbt,"deit"),mbt.forEach(t),oar=r(Oke," \u2014 "),xz=n(Oke,"A",{href:!0});var gbt=s(xz);rar=r(gbt,"DeiTForMaskedImageModeling"),gbt.forEach(t),tar=r(Oke," (DeiT model)"),Oke.forEach(t),aar=i(UZ),FF=n(UZ,"LI",{});var Vke=s(FF);o1e=n(Vke,"STRONG",{});var hbt=s(o1e);nar=r(hbt,"swin"),hbt.forEach(t),sar=r(Vke," \u2014 "),$z=n(Vke,"A",{href:!0});var pbt=s($z);lar=r(pbt,"SwinForMaskedImageModeling"),pbt.forEach(t),iar=r(Vke," (Swin model)"),Vke.forEach(t),dar=i(UZ),TF=n(UZ,"LI",{});var Xke=s(TF);r1e=n(Xke,"STRONG",{});var ubt=s(r1e);car=r(ubt,"vit"),ubt.forEach(t),far=r(Xke," \u2014 "),kz=n(Xke,"A",{href:!0});var _bt=s(kz);mar=r(_bt,"ViTForMaskedImageModeling"),_bt.forEach(t),gar=r(Xke," (ViT model)"),Xke.forEach(t),UZ.forEach(t),har=i(va),MF=n(va,"P",{});var zke=s(MF);par=r(zke,"The model is set in evaluation mode by default using "),t1e=n(zke,"CODE",{});var bbt=s(t1e);uar=r(bbt,"model.eval()"),bbt.forEach(t),_ar=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(zke,"CODE",{});var vbt=s(a1e);bar=r(vbt,"model.train()"),vbt.forEach(t),zke.forEach(t),Far=i(va),T(EF.$$.fragment,va),va.forEach(t),il.forEach(t),GNe=i(f),xd=n(f,"H2",{class:!0});var WDe=s(xd);CF=n(WDe,"A",{id:!0,class:!0,href:!0});var Fbt=s(CF);n1e=n(Fbt,"SPAN",{});var Tbt=s(n1e);T(jy.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),Tar=i(WDe),s1e=n(WDe,"SPAN",{});var Mbt=s(s1e);Mar=r(Mbt,"AutoModelForObjectDetection"),Mbt.forEach(t),WDe.forEach(t),ONe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(Dy.$$.fragment,dl),Ear=i(dl),$d=n(dl,"P",{});var JZ=s($d);Car=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Sz=n(JZ,"A",{href:!0});var Ebt=s(Sz);war=r(Ebt,"from_pretrained()"),Ebt.forEach(t),Aar=r(JZ," class method or the "),Rz=n(JZ,"A",{href:!0});var Cbt=s(Rz);yar=r(Cbt,"from_config()"),Cbt.forEach(t),Lar=r(JZ,` class
method.`),JZ.forEach(t),xar=i(dl),Gy=n(dl,"P",{});var QDe=s(Gy);$ar=r(QDe,"This class cannot be instantiated directly using "),l1e=n(QDe,"CODE",{});var wbt=s(l1e);kar=r(wbt,"__init__()"),wbt.forEach(t),Sar=r(QDe," (throws an error)."),QDe.forEach(t),Rar=i(dl),Et=n(dl,"DIV",{class:!0});var g0=s(Et);T(Oy.$$.fragment,g0),Par=i(g0),i1e=n(g0,"P",{});var Abt=s(i1e);Bar=r(Abt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Abt.forEach(t),Iar=i(g0),kd=n(g0,"P",{});var YZ=s(kd);qar=r(YZ,`Note:
Loading a model from its configuration file does `),d1e=n(YZ,"STRONG",{});var ybt=s(d1e);Nar=r(ybt,"not"),ybt.forEach(t),jar=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(YZ,"A",{href:!0});var Lbt=s(Pz);Dar=r(Lbt,"from_pretrained()"),Lbt.forEach(t),Gar=r(YZ," to load the model weights."),YZ.forEach(t),Oar=i(g0),T(wF.$$.fragment,g0),g0.forEach(t),Var=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(Vy.$$.fragment,Fa),Xar=i(Fa),c1e=n(Fa,"P",{});var xbt=s(c1e);zar=r(xbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),xbt.forEach(t),War=i(Fa),Qa=n(Fa,"P",{});var h0=s(Qa);Qar=r(h0,"The model class to instantiate is selected based on the "),f1e=n(h0,"CODE",{});var $bt=s(f1e);Har=r($bt,"model_type"),$bt.forEach(t),Uar=r(h0,` property of the config object (either
passed as an argument or loaded from `),m1e=n(h0,"CODE",{});var kbt=s(m1e);Jar=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Yar=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(h0,"CODE",{});var Sbt=s(g1e);Kar=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Zar=r(h0,":"),h0.forEach(t),enr=i(Fa),Xy=n(Fa,"UL",{});var HDe=s(Xy);AF=n(HDe,"LI",{});var Wke=s(AF);h1e=n(Wke,"STRONG",{});var Rbt=s(h1e);onr=r(Rbt,"detr"),Rbt.forEach(t),rnr=r(Wke," \u2014 "),Bz=n(Wke,"A",{href:!0});var Pbt=s(Bz);tnr=r(Pbt,"DetrForObjectDetection"),Pbt.forEach(t),anr=r(Wke," (DETR model)"),Wke.forEach(t),nnr=i(HDe),yF=n(HDe,"LI",{});var Qke=s(yF);p1e=n(Qke,"STRONG",{});var Bbt=s(p1e);snr=r(Bbt,"yolos"),Bbt.forEach(t),lnr=r(Qke," \u2014 "),Iz=n(Qke,"A",{href:!0});var Ibt=s(Iz);inr=r(Ibt,"YolosForObjectDetection"),Ibt.forEach(t),dnr=r(Qke," (YOLOS model)"),Qke.forEach(t),HDe.forEach(t),cnr=i(Fa),LF=n(Fa,"P",{});var Hke=s(LF);fnr=r(Hke,"The model is set in evaluation mode by default using "),u1e=n(Hke,"CODE",{});var qbt=s(u1e);mnr=r(qbt,"model.eval()"),qbt.forEach(t),gnr=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_1e=n(Hke,"CODE",{});var Nbt=s(_1e);hnr=r(Nbt,"model.train()"),Nbt.forEach(t),Hke.forEach(t),pnr=i(Fa),T(xF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),VNe=i(f),Sd=n(f,"H2",{class:!0});var UDe=s(Sd);$F=n(UDe,"A",{id:!0,class:!0,href:!0});var jbt=s($F);b1e=n(jbt,"SPAN",{});var Dbt=s(b1e);T(zy.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),unr=i(UDe),v1e=n(UDe,"SPAN",{});var Gbt=s(v1e);_nr=r(Gbt,"AutoModelForImageSegmentation"),Gbt.forEach(t),UDe.forEach(t),XNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Wy.$$.fragment,cl),bnr=i(cl),Rd=n(cl,"P",{});var KZ=s(Rd);vnr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qz=n(KZ,"A",{href:!0});var Obt=s(qz);Fnr=r(Obt,"from_pretrained()"),Obt.forEach(t),Tnr=r(KZ," class method or the "),Nz=n(KZ,"A",{href:!0});var Vbt=s(Nz);Mnr=r(Vbt,"from_config()"),Vbt.forEach(t),Enr=r(KZ,` class
method.`),KZ.forEach(t),Cnr=i(cl),Qy=n(cl,"P",{});var JDe=s(Qy);wnr=r(JDe,"This class cannot be instantiated directly using "),F1e=n(JDe,"CODE",{});var Xbt=s(F1e);Anr=r(Xbt,"__init__()"),Xbt.forEach(t),ynr=r(JDe," (throws an error)."),JDe.forEach(t),Lnr=i(cl),Ct=n(cl,"DIV",{class:!0});var p0=s(Ct);T(Hy.$$.fragment,p0),xnr=i(p0),T1e=n(p0,"P",{});var zbt=s(T1e);$nr=r(zbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zbt.forEach(t),knr=i(p0),Pd=n(p0,"P",{});var ZZ=s(Pd);Snr=r(ZZ,`Note:
Loading a model from its configuration file does `),M1e=n(ZZ,"STRONG",{});var Wbt=s(M1e);Rnr=r(Wbt,"not"),Wbt.forEach(t),Pnr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(ZZ,"A",{href:!0});var Qbt=s(jz);Bnr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),Inr=r(ZZ," to load the model weights."),ZZ.forEach(t),qnr=i(p0),T(kF.$$.fragment,p0),p0.forEach(t),Nnr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Uy.$$.fragment,Ta),jnr=i(Ta),E1e=n(Ta,"P",{});var Hbt=s(E1e);Dnr=r(Hbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hbt.forEach(t),Gnr=i(Ta),Ha=n(Ta,"P",{});var u0=s(Ha);Onr=r(u0,"The model class to instantiate is selected based on the "),C1e=n(u0,"CODE",{});var Ubt=s(C1e);Vnr=r(Ubt,"model_type"),Ubt.forEach(t),Xnr=r(u0,` property of the config object (either
passed as an argument or loaded from `),w1e=n(u0,"CODE",{});var Jbt=s(w1e);znr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),Wnr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(u0,"CODE",{});var Ybt=s(A1e);Qnr=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),Hnr=r(u0,":"),u0.forEach(t),Unr=i(Ta),y1e=n(Ta,"UL",{});var Kbt=s(y1e);SF=n(Kbt,"LI",{});var Uke=s(SF);L1e=n(Uke,"STRONG",{});var Zbt=s(L1e);Jnr=r(Zbt,"detr"),Zbt.forEach(t),Ynr=r(Uke," \u2014 "),Dz=n(Uke,"A",{href:!0});var e2t=s(Dz);Knr=r(e2t,"DetrForSegmentation"),e2t.forEach(t),Znr=r(Uke," (DETR model)"),Uke.forEach(t),Kbt.forEach(t),esr=i(Ta),RF=n(Ta,"P",{});var Jke=s(RF);osr=r(Jke,"The model is set in evaluation mode by default using "),x1e=n(Jke,"CODE",{});var o2t=s(x1e);rsr=r(o2t,"model.eval()"),o2t.forEach(t),tsr=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(Jke,"CODE",{});var r2t=s($1e);asr=r(r2t,"model.train()"),r2t.forEach(t),Jke.forEach(t),nsr=i(Ta),T(PF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),zNe=i(f),Bd=n(f,"H2",{class:!0});var YDe=s(Bd);BF=n(YDe,"A",{id:!0,class:!0,href:!0});var t2t=s(BF);k1e=n(t2t,"SPAN",{});var a2t=s(k1e);T(Jy.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),ssr=i(YDe),S1e=n(YDe,"SPAN",{});var n2t=s(S1e);lsr=r(n2t,"AutoModelForSemanticSegmentation"),n2t.forEach(t),YDe.forEach(t),WNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Yy.$$.fragment,fl),isr=i(fl),Id=n(fl,"P",{});var eee=s(Id);dsr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Gz=n(eee,"A",{href:!0});var s2t=s(Gz);csr=r(s2t,"from_pretrained()"),s2t.forEach(t),fsr=r(eee," class method or the "),Oz=n(eee,"A",{href:!0});var l2t=s(Oz);msr=r(l2t,"from_config()"),l2t.forEach(t),gsr=r(eee,` class
method.`),eee.forEach(t),hsr=i(fl),Ky=n(fl,"P",{});var KDe=s(Ky);psr=r(KDe,"This class cannot be instantiated directly using "),R1e=n(KDe,"CODE",{});var i2t=s(R1e);usr=r(i2t,"__init__()"),i2t.forEach(t),_sr=r(KDe," (throws an error)."),KDe.forEach(t),bsr=i(fl),wt=n(fl,"DIV",{class:!0});var _0=s(wt);T(Zy.$$.fragment,_0),vsr=i(_0),P1e=n(_0,"P",{});var d2t=s(P1e);Fsr=r(d2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),d2t.forEach(t),Tsr=i(_0),qd=n(_0,"P",{});var oee=s(qd);Msr=r(oee,`Note:
Loading a model from its configuration file does `),B1e=n(oee,"STRONG",{});var c2t=s(B1e);Esr=r(c2t,"not"),c2t.forEach(t),Csr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(oee,"A",{href:!0});var f2t=s(Vz);wsr=r(f2t,"from_pretrained()"),f2t.forEach(t),Asr=r(oee," to load the model weights."),oee.forEach(t),ysr=i(_0),T(IF.$$.fragment,_0),_0.forEach(t),Lsr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(eL.$$.fragment,Ma),xsr=i(Ma),I1e=n(Ma,"P",{});var m2t=s(I1e);$sr=r(m2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m2t.forEach(t),ksr=i(Ma),Ua=n(Ma,"P",{});var b0=s(Ua);Ssr=r(b0,"The model class to instantiate is selected based on the "),q1e=n(b0,"CODE",{});var g2t=s(q1e);Rsr=r(g2t,"model_type"),g2t.forEach(t),Psr=r(b0,` property of the config object (either
passed as an argument or loaded from `),N1e=n(b0,"CODE",{});var h2t=s(N1e);Bsr=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),Isr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(b0,"CODE",{});var p2t=s(j1e);qsr=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Nsr=r(b0,":"),b0.forEach(t),jsr=i(Ma),Ja=n(Ma,"UL",{});var v0=s(Ja);qF=n(v0,"LI",{});var Yke=s(qF);D1e=n(Yke,"STRONG",{});var u2t=s(D1e);Dsr=r(u2t,"beit"),u2t.forEach(t),Gsr=r(Yke," \u2014 "),Xz=n(Yke,"A",{href:!0});var _2t=s(Xz);Osr=r(_2t,"BeitForSemanticSegmentation"),_2t.forEach(t),Vsr=r(Yke," (BEiT model)"),Yke.forEach(t),Xsr=i(v0),NF=n(v0,"LI",{});var Kke=s(NF);G1e=n(Kke,"STRONG",{});var b2t=s(G1e);zsr=r(b2t,"data2vec-vision"),b2t.forEach(t),Wsr=r(Kke," \u2014 "),zz=n(Kke,"A",{href:!0});var v2t=s(zz);Qsr=r(v2t,"Data2VecVisionForSemanticSegmentation"),v2t.forEach(t),Hsr=r(Kke," (Data2VecVision model)"),Kke.forEach(t),Usr=i(v0),jF=n(v0,"LI",{});var Zke=s(jF);O1e=n(Zke,"STRONG",{});var F2t=s(O1e);Jsr=r(F2t,"dpt"),F2t.forEach(t),Ysr=r(Zke," \u2014 "),Wz=n(Zke,"A",{href:!0});var T2t=s(Wz);Ksr=r(T2t,"DPTForSemanticSegmentation"),T2t.forEach(t),Zsr=r(Zke," (DPT model)"),Zke.forEach(t),elr=i(v0),DF=n(v0,"LI",{});var eSe=s(DF);V1e=n(eSe,"STRONG",{});var M2t=s(V1e);olr=r(M2t,"segformer"),M2t.forEach(t),rlr=r(eSe," \u2014 "),Qz=n(eSe,"A",{href:!0});var E2t=s(Qz);tlr=r(E2t,"SegformerForSemanticSegmentation"),E2t.forEach(t),alr=r(eSe," (SegFormer model)"),eSe.forEach(t),v0.forEach(t),nlr=i(Ma),GF=n(Ma,"P",{});var oSe=s(GF);slr=r(oSe,"The model is set in evaluation mode by default using "),X1e=n(oSe,"CODE",{});var C2t=s(X1e);llr=r(C2t,"model.eval()"),C2t.forEach(t),ilr=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(oSe,"CODE",{});var w2t=s(z1e);dlr=r(w2t,"model.train()"),w2t.forEach(t),oSe.forEach(t),clr=i(Ma),T(OF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),QNe=i(f),Nd=n(f,"H2",{class:!0});var ZDe=s(Nd);VF=n(ZDe,"A",{id:!0,class:!0,href:!0});var A2t=s(VF);W1e=n(A2t,"SPAN",{});var y2t=s(W1e);T(oL.$$.fragment,y2t),y2t.forEach(t),A2t.forEach(t),flr=i(ZDe),Q1e=n(ZDe,"SPAN",{});var L2t=s(Q1e);mlr=r(L2t,"AutoModelForInstanceSegmentation"),L2t.forEach(t),ZDe.forEach(t),HNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(rL.$$.fragment,ml),glr=i(ml),jd=n(ml,"P",{});var ree=s(jd);hlr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Hz=n(ree,"A",{href:!0});var x2t=s(Hz);plr=r(x2t,"from_pretrained()"),x2t.forEach(t),ulr=r(ree," class method or the "),Uz=n(ree,"A",{href:!0});var $2t=s(Uz);_lr=r($2t,"from_config()"),$2t.forEach(t),blr=r(ree,` class
method.`),ree.forEach(t),vlr=i(ml),tL=n(ml,"P",{});var eGe=s(tL);Flr=r(eGe,"This class cannot be instantiated directly using "),H1e=n(eGe,"CODE",{});var k2t=s(H1e);Tlr=r(k2t,"__init__()"),k2t.forEach(t),Mlr=r(eGe," (throws an error)."),eGe.forEach(t),Elr=i(ml),At=n(ml,"DIV",{class:!0});var F0=s(At);T(aL.$$.fragment,F0),Clr=i(F0),U1e=n(F0,"P",{});var S2t=s(U1e);wlr=r(S2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),S2t.forEach(t),Alr=i(F0),Dd=n(F0,"P",{});var tee=s(Dd);ylr=r(tee,`Note:
Loading a model from its configuration file does `),J1e=n(tee,"STRONG",{});var R2t=s(J1e);Llr=r(R2t,"not"),R2t.forEach(t),xlr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(tee,"A",{href:!0});var P2t=s(Jz);$lr=r(P2t,"from_pretrained()"),P2t.forEach(t),klr=r(tee," to load the model weights."),tee.forEach(t),Slr=i(F0),T(XF.$$.fragment,F0),F0.forEach(t),Rlr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(nL.$$.fragment,Ea),Plr=i(Ea),Y1e=n(Ea,"P",{});var B2t=s(Y1e);Blr=r(B2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),B2t.forEach(t),Ilr=i(Ea),Ya=n(Ea,"P",{});var T0=s(Ya);qlr=r(T0,"The model class to instantiate is selected based on the "),K1e=n(T0,"CODE",{});var I2t=s(K1e);Nlr=r(I2t,"model_type"),I2t.forEach(t),jlr=r(T0,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(T0,"CODE",{});var q2t=s(Z1e);Dlr=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),Glr=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(T0,"CODE",{});var N2t=s(e8e);Olr=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),Vlr=r(T0,":"),T0.forEach(t),Xlr=i(Ea),o8e=n(Ea,"UL",{});var j2t=s(o8e);zF=n(j2t,"LI",{});var rSe=s(zF);r8e=n(rSe,"STRONG",{});var D2t=s(r8e);zlr=r(D2t,"maskformer"),D2t.forEach(t),Wlr=r(rSe," \u2014 "),Yz=n(rSe,"A",{href:!0});var G2t=s(Yz);Qlr=r(G2t,"MaskFormerForInstanceSegmentation"),G2t.forEach(t),Hlr=r(rSe," (MaskFormer model)"),rSe.forEach(t),j2t.forEach(t),Ulr=i(Ea),WF=n(Ea,"P",{});var tSe=s(WF);Jlr=r(tSe,"The model is set in evaluation mode by default using "),t8e=n(tSe,"CODE",{});var O2t=s(t8e);Ylr=r(O2t,"model.eval()"),O2t.forEach(t),Klr=r(tSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(tSe,"CODE",{});var V2t=s(a8e);Zlr=r(V2t,"model.train()"),V2t.forEach(t),tSe.forEach(t),eir=i(Ea),T(QF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),UNe=i(f),Gd=n(f,"H2",{class:!0});var oGe=s(Gd);HF=n(oGe,"A",{id:!0,class:!0,href:!0});var X2t=s(HF);n8e=n(X2t,"SPAN",{});var z2t=s(n8e);T(sL.$$.fragment,z2t),z2t.forEach(t),X2t.forEach(t),oir=i(oGe),s8e=n(oGe,"SPAN",{});var W2t=s(s8e);rir=r(W2t,"TFAutoModel"),W2t.forEach(t),oGe.forEach(t),JNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(lL.$$.fragment,gl),tir=i(gl),Od=n(gl,"P",{});var aee=s(Od);air=r(aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kz=n(aee,"A",{href:!0});var Q2t=s(Kz);nir=r(Q2t,"from_pretrained()"),Q2t.forEach(t),sir=r(aee," class method or the "),Zz=n(aee,"A",{href:!0});var H2t=s(Zz);lir=r(H2t,"from_config()"),H2t.forEach(t),iir=r(aee,` class
method.`),aee.forEach(t),dir=i(gl),iL=n(gl,"P",{});var rGe=s(iL);cir=r(rGe,"This class cannot be instantiated directly using "),l8e=n(rGe,"CODE",{});var U2t=s(l8e);fir=r(U2t,"__init__()"),U2t.forEach(t),mir=r(rGe," (throws an error)."),rGe.forEach(t),gir=i(gl),yt=n(gl,"DIV",{class:!0});var M0=s(yt);T(dL.$$.fragment,M0),hir=i(M0),i8e=n(M0,"P",{});var J2t=s(i8e);pir=r(J2t,"Instantiates one of the base model classes of the library from a configuration."),J2t.forEach(t),uir=i(M0),Vd=n(M0,"P",{});var nee=s(Vd);_ir=r(nee,`Note:
Loading a model from its configuration file does `),d8e=n(nee,"STRONG",{});var Y2t=s(d8e);bir=r(Y2t,"not"),Y2t.forEach(t),vir=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(nee,"A",{href:!0});var K2t=s(eW);Fir=r(K2t,"from_pretrained()"),K2t.forEach(t),Tir=r(nee," to load the model weights."),nee.forEach(t),Mir=i(M0),T(UF.$$.fragment,M0),M0.forEach(t),Eir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(cL.$$.fragment,hl),Cir=i(hl),c8e=n(hl,"P",{});var Z2t=s(c8e);wir=r(Z2t,"Instantiate one of the base model classes of the library from a pretrained model."),Z2t.forEach(t),Air=i(hl),Ka=n(hl,"P",{});var E0=s(Ka);yir=r(E0,"The model class to instantiate is selected based on the "),f8e=n(E0,"CODE",{});var evt=s(f8e);Lir=r(evt,"model_type"),evt.forEach(t),xir=r(E0,` property of the config object (either
passed as an argument or loaded from `),m8e=n(E0,"CODE",{});var ovt=s(m8e);$ir=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),kir=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(E0,"CODE",{});var rvt=s(g8e);Sir=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),Rir=r(E0,":"),E0.forEach(t),Pir=i(hl),N=n(hl,"UL",{});var D=s(N);JF=n(D,"LI",{});var aSe=s(JF);h8e=n(aSe,"STRONG",{});var tvt=s(h8e);Bir=r(tvt,"albert"),tvt.forEach(t),Iir=r(aSe," \u2014 "),oW=n(aSe,"A",{href:!0});var avt=s(oW);qir=r(avt,"TFAlbertModel"),avt.forEach(t),Nir=r(aSe," (ALBERT model)"),aSe.forEach(t),jir=i(D),YF=n(D,"LI",{});var nSe=s(YF);p8e=n(nSe,"STRONG",{});var nvt=s(p8e);Dir=r(nvt,"bart"),nvt.forEach(t),Gir=r(nSe," \u2014 "),rW=n(nSe,"A",{href:!0});var svt=s(rW);Oir=r(svt,"TFBartModel"),svt.forEach(t),Vir=r(nSe," (BART model)"),nSe.forEach(t),Xir=i(D),KF=n(D,"LI",{});var sSe=s(KF);u8e=n(sSe,"STRONG",{});var lvt=s(u8e);zir=r(lvt,"bert"),lvt.forEach(t),Wir=r(sSe," \u2014 "),tW=n(sSe,"A",{href:!0});var ivt=s(tW);Qir=r(ivt,"TFBertModel"),ivt.forEach(t),Hir=r(sSe," (BERT model)"),sSe.forEach(t),Uir=i(D),ZF=n(D,"LI",{});var lSe=s(ZF);_8e=n(lSe,"STRONG",{});var dvt=s(_8e);Jir=r(dvt,"blenderbot"),dvt.forEach(t),Yir=r(lSe," \u2014 "),aW=n(lSe,"A",{href:!0});var cvt=s(aW);Kir=r(cvt,"TFBlenderbotModel"),cvt.forEach(t),Zir=r(lSe," (Blenderbot model)"),lSe.forEach(t),edr=i(D),eT=n(D,"LI",{});var iSe=s(eT);b8e=n(iSe,"STRONG",{});var fvt=s(b8e);odr=r(fvt,"blenderbot-small"),fvt.forEach(t),rdr=r(iSe," \u2014 "),nW=n(iSe,"A",{href:!0});var mvt=s(nW);tdr=r(mvt,"TFBlenderbotSmallModel"),mvt.forEach(t),adr=r(iSe," (BlenderbotSmall model)"),iSe.forEach(t),ndr=i(D),oT=n(D,"LI",{});var dSe=s(oT);v8e=n(dSe,"STRONG",{});var gvt=s(v8e);sdr=r(gvt,"camembert"),gvt.forEach(t),ldr=r(dSe," \u2014 "),sW=n(dSe,"A",{href:!0});var hvt=s(sW);idr=r(hvt,"TFCamembertModel"),hvt.forEach(t),ddr=r(dSe," (CamemBERT model)"),dSe.forEach(t),cdr=i(D),rT=n(D,"LI",{});var cSe=s(rT);F8e=n(cSe,"STRONG",{});var pvt=s(F8e);fdr=r(pvt,"clip"),pvt.forEach(t),mdr=r(cSe," \u2014 "),lW=n(cSe,"A",{href:!0});var uvt=s(lW);gdr=r(uvt,"TFCLIPModel"),uvt.forEach(t),hdr=r(cSe," (CLIP model)"),cSe.forEach(t),pdr=i(D),tT=n(D,"LI",{});var fSe=s(tT);T8e=n(fSe,"STRONG",{});var _vt=s(T8e);udr=r(_vt,"convbert"),_vt.forEach(t),_dr=r(fSe," \u2014 "),iW=n(fSe,"A",{href:!0});var bvt=s(iW);bdr=r(bvt,"TFConvBertModel"),bvt.forEach(t),vdr=r(fSe," (ConvBERT model)"),fSe.forEach(t),Fdr=i(D),aT=n(D,"LI",{});var mSe=s(aT);M8e=n(mSe,"STRONG",{});var vvt=s(M8e);Tdr=r(vvt,"convnext"),vvt.forEach(t),Mdr=r(mSe," \u2014 "),dW=n(mSe,"A",{href:!0});var Fvt=s(dW);Edr=r(Fvt,"TFConvNextModel"),Fvt.forEach(t),Cdr=r(mSe," (ConvNext model)"),mSe.forEach(t),wdr=i(D),nT=n(D,"LI",{});var gSe=s(nT);E8e=n(gSe,"STRONG",{});var Tvt=s(E8e);Adr=r(Tvt,"ctrl"),Tvt.forEach(t),ydr=r(gSe," \u2014 "),cW=n(gSe,"A",{href:!0});var Mvt=s(cW);Ldr=r(Mvt,"TFCTRLModel"),Mvt.forEach(t),xdr=r(gSe," (CTRL model)"),gSe.forEach(t),$dr=i(D),sT=n(D,"LI",{});var hSe=s(sT);C8e=n(hSe,"STRONG",{});var Evt=s(C8e);kdr=r(Evt,"data2vec-vision"),Evt.forEach(t),Sdr=r(hSe," \u2014 "),fW=n(hSe,"A",{href:!0});var Cvt=s(fW);Rdr=r(Cvt,"TFData2VecVisionModel"),Cvt.forEach(t),Pdr=r(hSe," (Data2VecVision model)"),hSe.forEach(t),Bdr=i(D),lT=n(D,"LI",{});var pSe=s(lT);w8e=n(pSe,"STRONG",{});var wvt=s(w8e);Idr=r(wvt,"deberta"),wvt.forEach(t),qdr=r(pSe," \u2014 "),mW=n(pSe,"A",{href:!0});var Avt=s(mW);Ndr=r(Avt,"TFDebertaModel"),Avt.forEach(t),jdr=r(pSe," (DeBERTa model)"),pSe.forEach(t),Ddr=i(D),iT=n(D,"LI",{});var uSe=s(iT);A8e=n(uSe,"STRONG",{});var yvt=s(A8e);Gdr=r(yvt,"deberta-v2"),yvt.forEach(t),Odr=r(uSe," \u2014 "),gW=n(uSe,"A",{href:!0});var Lvt=s(gW);Vdr=r(Lvt,"TFDebertaV2Model"),Lvt.forEach(t),Xdr=r(uSe," (DeBERTa-v2 model)"),uSe.forEach(t),zdr=i(D),dT=n(D,"LI",{});var _Se=s(dT);y8e=n(_Se,"STRONG",{});var xvt=s(y8e);Wdr=r(xvt,"distilbert"),xvt.forEach(t),Qdr=r(_Se," \u2014 "),hW=n(_Se,"A",{href:!0});var $vt=s(hW);Hdr=r($vt,"TFDistilBertModel"),$vt.forEach(t),Udr=r(_Se," (DistilBERT model)"),_Se.forEach(t),Jdr=i(D),cT=n(D,"LI",{});var bSe=s(cT);L8e=n(bSe,"STRONG",{});var kvt=s(L8e);Ydr=r(kvt,"dpr"),kvt.forEach(t),Kdr=r(bSe," \u2014 "),pW=n(bSe,"A",{href:!0});var Svt=s(pW);Zdr=r(Svt,"TFDPRQuestionEncoder"),Svt.forEach(t),ecr=r(bSe," (DPR model)"),bSe.forEach(t),ocr=i(D),fT=n(D,"LI",{});var vSe=s(fT);x8e=n(vSe,"STRONG",{});var Rvt=s(x8e);rcr=r(Rvt,"electra"),Rvt.forEach(t),tcr=r(vSe," \u2014 "),uW=n(vSe,"A",{href:!0});var Pvt=s(uW);acr=r(Pvt,"TFElectraModel"),Pvt.forEach(t),ncr=r(vSe," (ELECTRA model)"),vSe.forEach(t),scr=i(D),mT=n(D,"LI",{});var FSe=s(mT);$8e=n(FSe,"STRONG",{});var Bvt=s($8e);lcr=r(Bvt,"flaubert"),Bvt.forEach(t),icr=r(FSe," \u2014 "),_W=n(FSe,"A",{href:!0});var Ivt=s(_W);dcr=r(Ivt,"TFFlaubertModel"),Ivt.forEach(t),ccr=r(FSe," (FlauBERT model)"),FSe.forEach(t),fcr=i(D),Is=n(D,"LI",{});var O$=s(Is);k8e=n(O$,"STRONG",{});var qvt=s(k8e);mcr=r(qvt,"funnel"),qvt.forEach(t),gcr=r(O$," \u2014 "),bW=n(O$,"A",{href:!0});var Nvt=s(bW);hcr=r(Nvt,"TFFunnelModel"),Nvt.forEach(t),pcr=r(O$," or "),vW=n(O$,"A",{href:!0});var jvt=s(vW);ucr=r(jvt,"TFFunnelBaseModel"),jvt.forEach(t),_cr=r(O$," (Funnel Transformer model)"),O$.forEach(t),bcr=i(D),gT=n(D,"LI",{});var TSe=s(gT);S8e=n(TSe,"STRONG",{});var Dvt=s(S8e);vcr=r(Dvt,"gpt2"),Dvt.forEach(t),Fcr=r(TSe," \u2014 "),FW=n(TSe,"A",{href:!0});var Gvt=s(FW);Tcr=r(Gvt,"TFGPT2Model"),Gvt.forEach(t),Mcr=r(TSe," (OpenAI GPT-2 model)"),TSe.forEach(t),Ecr=i(D),hT=n(D,"LI",{});var MSe=s(hT);R8e=n(MSe,"STRONG",{});var Ovt=s(R8e);Ccr=r(Ovt,"gptj"),Ovt.forEach(t),wcr=r(MSe," \u2014 "),TW=n(MSe,"A",{href:!0});var Vvt=s(TW);Acr=r(Vvt,"TFGPTJModel"),Vvt.forEach(t),ycr=r(MSe," (GPT-J model)"),MSe.forEach(t),Lcr=i(D),pT=n(D,"LI",{});var ESe=s(pT);P8e=n(ESe,"STRONG",{});var Xvt=s(P8e);xcr=r(Xvt,"hubert"),Xvt.forEach(t),$cr=r(ESe," \u2014 "),MW=n(ESe,"A",{href:!0});var zvt=s(MW);kcr=r(zvt,"TFHubertModel"),zvt.forEach(t),Scr=r(ESe," (Hubert model)"),ESe.forEach(t),Rcr=i(D),uT=n(D,"LI",{});var CSe=s(uT);B8e=n(CSe,"STRONG",{});var Wvt=s(B8e);Pcr=r(Wvt,"layoutlm"),Wvt.forEach(t),Bcr=r(CSe," \u2014 "),EW=n(CSe,"A",{href:!0});var Qvt=s(EW);Icr=r(Qvt,"TFLayoutLMModel"),Qvt.forEach(t),qcr=r(CSe," (LayoutLM model)"),CSe.forEach(t),Ncr=i(D),_T=n(D,"LI",{});var wSe=s(_T);I8e=n(wSe,"STRONG",{});var Hvt=s(I8e);jcr=r(Hvt,"led"),Hvt.forEach(t),Dcr=r(wSe," \u2014 "),CW=n(wSe,"A",{href:!0});var Uvt=s(CW);Gcr=r(Uvt,"TFLEDModel"),Uvt.forEach(t),Ocr=r(wSe," (LED model)"),wSe.forEach(t),Vcr=i(D),bT=n(D,"LI",{});var ASe=s(bT);q8e=n(ASe,"STRONG",{});var Jvt=s(q8e);Xcr=r(Jvt,"longformer"),Jvt.forEach(t),zcr=r(ASe," \u2014 "),wW=n(ASe,"A",{href:!0});var Yvt=s(wW);Wcr=r(Yvt,"TFLongformerModel"),Yvt.forEach(t),Qcr=r(ASe," (Longformer model)"),ASe.forEach(t),Hcr=i(D),vT=n(D,"LI",{});var ySe=s(vT);N8e=n(ySe,"STRONG",{});var Kvt=s(N8e);Ucr=r(Kvt,"lxmert"),Kvt.forEach(t),Jcr=r(ySe," \u2014 "),AW=n(ySe,"A",{href:!0});var Zvt=s(AW);Ycr=r(Zvt,"TFLxmertModel"),Zvt.forEach(t),Kcr=r(ySe," (LXMERT model)"),ySe.forEach(t),Zcr=i(D),FT=n(D,"LI",{});var LSe=s(FT);j8e=n(LSe,"STRONG",{});var e3t=s(j8e);efr=r(e3t,"marian"),e3t.forEach(t),ofr=r(LSe," \u2014 "),yW=n(LSe,"A",{href:!0});var o3t=s(yW);rfr=r(o3t,"TFMarianModel"),o3t.forEach(t),tfr=r(LSe," (Marian model)"),LSe.forEach(t),afr=i(D),TT=n(D,"LI",{});var xSe=s(TT);D8e=n(xSe,"STRONG",{});var r3t=s(D8e);nfr=r(r3t,"mbart"),r3t.forEach(t),sfr=r(xSe," \u2014 "),LW=n(xSe,"A",{href:!0});var t3t=s(LW);lfr=r(t3t,"TFMBartModel"),t3t.forEach(t),ifr=r(xSe," (mBART model)"),xSe.forEach(t),dfr=i(D),MT=n(D,"LI",{});var $Se=s(MT);G8e=n($Se,"STRONG",{});var a3t=s(G8e);cfr=r(a3t,"mobilebert"),a3t.forEach(t),ffr=r($Se," \u2014 "),xW=n($Se,"A",{href:!0});var n3t=s(xW);mfr=r(n3t,"TFMobileBertModel"),n3t.forEach(t),gfr=r($Se," (MobileBERT model)"),$Se.forEach(t),hfr=i(D),ET=n(D,"LI",{});var kSe=s(ET);O8e=n(kSe,"STRONG",{});var s3t=s(O8e);pfr=r(s3t,"mpnet"),s3t.forEach(t),ufr=r(kSe," \u2014 "),$W=n(kSe,"A",{href:!0});var l3t=s($W);_fr=r(l3t,"TFMPNetModel"),l3t.forEach(t),bfr=r(kSe," (MPNet model)"),kSe.forEach(t),vfr=i(D),CT=n(D,"LI",{});var SSe=s(CT);V8e=n(SSe,"STRONG",{});var i3t=s(V8e);Ffr=r(i3t,"mt5"),i3t.forEach(t),Tfr=r(SSe," \u2014 "),kW=n(SSe,"A",{href:!0});var d3t=s(kW);Mfr=r(d3t,"TFMT5Model"),d3t.forEach(t),Efr=r(SSe," (mT5 model)"),SSe.forEach(t),Cfr=i(D),wT=n(D,"LI",{});var RSe=s(wT);X8e=n(RSe,"STRONG",{});var c3t=s(X8e);wfr=r(c3t,"openai-gpt"),c3t.forEach(t),Afr=r(RSe," \u2014 "),SW=n(RSe,"A",{href:!0});var f3t=s(SW);yfr=r(f3t,"TFOpenAIGPTModel"),f3t.forEach(t),Lfr=r(RSe," (OpenAI GPT model)"),RSe.forEach(t),xfr=i(D),AT=n(D,"LI",{});var PSe=s(AT);z8e=n(PSe,"STRONG",{});var m3t=s(z8e);$fr=r(m3t,"opt"),m3t.forEach(t),kfr=r(PSe," \u2014 "),RW=n(PSe,"A",{href:!0});var g3t=s(RW);Sfr=r(g3t,"TFOPTModel"),g3t.forEach(t),Rfr=r(PSe," (OPT model)"),PSe.forEach(t),Pfr=i(D),yT=n(D,"LI",{});var BSe=s(yT);W8e=n(BSe,"STRONG",{});var h3t=s(W8e);Bfr=r(h3t,"pegasus"),h3t.forEach(t),Ifr=r(BSe," \u2014 "),PW=n(BSe,"A",{href:!0});var p3t=s(PW);qfr=r(p3t,"TFPegasusModel"),p3t.forEach(t),Nfr=r(BSe," (Pegasus model)"),BSe.forEach(t),jfr=i(D),LT=n(D,"LI",{});var ISe=s(LT);Q8e=n(ISe,"STRONG",{});var u3t=s(Q8e);Dfr=r(u3t,"rembert"),u3t.forEach(t),Gfr=r(ISe," \u2014 "),BW=n(ISe,"A",{href:!0});var _3t=s(BW);Ofr=r(_3t,"TFRemBertModel"),_3t.forEach(t),Vfr=r(ISe," (RemBERT model)"),ISe.forEach(t),Xfr=i(D),xT=n(D,"LI",{});var qSe=s(xT);H8e=n(qSe,"STRONG",{});var b3t=s(H8e);zfr=r(b3t,"roberta"),b3t.forEach(t),Wfr=r(qSe," \u2014 "),IW=n(qSe,"A",{href:!0});var v3t=s(IW);Qfr=r(v3t,"TFRobertaModel"),v3t.forEach(t),Hfr=r(qSe," (RoBERTa model)"),qSe.forEach(t),Ufr=i(D),$T=n(D,"LI",{});var NSe=s($T);U8e=n(NSe,"STRONG",{});var F3t=s(U8e);Jfr=r(F3t,"roformer"),F3t.forEach(t),Yfr=r(NSe," \u2014 "),qW=n(NSe,"A",{href:!0});var T3t=s(qW);Kfr=r(T3t,"TFRoFormerModel"),T3t.forEach(t),Zfr=r(NSe," (RoFormer model)"),NSe.forEach(t),emr=i(D),kT=n(D,"LI",{});var jSe=s(kT);J8e=n(jSe,"STRONG",{});var M3t=s(J8e);omr=r(M3t,"speech_to_text"),M3t.forEach(t),rmr=r(jSe," \u2014 "),NW=n(jSe,"A",{href:!0});var E3t=s(NW);tmr=r(E3t,"TFSpeech2TextModel"),E3t.forEach(t),amr=r(jSe," (Speech2Text model)"),jSe.forEach(t),nmr=i(D),ST=n(D,"LI",{});var DSe=s(ST);Y8e=n(DSe,"STRONG",{});var C3t=s(Y8e);smr=r(C3t,"swin"),C3t.forEach(t),lmr=r(DSe," \u2014 "),jW=n(DSe,"A",{href:!0});var w3t=s(jW);imr=r(w3t,"TFSwinModel"),w3t.forEach(t),dmr=r(DSe," (Swin model)"),DSe.forEach(t),cmr=i(D),RT=n(D,"LI",{});var GSe=s(RT);K8e=n(GSe,"STRONG",{});var A3t=s(K8e);fmr=r(A3t,"t5"),A3t.forEach(t),mmr=r(GSe," \u2014 "),DW=n(GSe,"A",{href:!0});var y3t=s(DW);gmr=r(y3t,"TFT5Model"),y3t.forEach(t),hmr=r(GSe," (T5 model)"),GSe.forEach(t),pmr=i(D),PT=n(D,"LI",{});var OSe=s(PT);Z8e=n(OSe,"STRONG",{});var L3t=s(Z8e);umr=r(L3t,"tapas"),L3t.forEach(t),_mr=r(OSe," \u2014 "),GW=n(OSe,"A",{href:!0});var x3t=s(GW);bmr=r(x3t,"TFTapasModel"),x3t.forEach(t),vmr=r(OSe," (TAPAS model)"),OSe.forEach(t),Fmr=i(D),BT=n(D,"LI",{});var VSe=s(BT);ebe=n(VSe,"STRONG",{});var $3t=s(ebe);Tmr=r($3t,"transfo-xl"),$3t.forEach(t),Mmr=r(VSe," \u2014 "),OW=n(VSe,"A",{href:!0});var k3t=s(OW);Emr=r(k3t,"TFTransfoXLModel"),k3t.forEach(t),Cmr=r(VSe," (Transformer-XL model)"),VSe.forEach(t),wmr=i(D),IT=n(D,"LI",{});var XSe=s(IT);obe=n(XSe,"STRONG",{});var S3t=s(obe);Amr=r(S3t,"vit"),S3t.forEach(t),ymr=r(XSe," \u2014 "),VW=n(XSe,"A",{href:!0});var R3t=s(VW);Lmr=r(R3t,"TFViTModel"),R3t.forEach(t),xmr=r(XSe," (ViT model)"),XSe.forEach(t),$mr=i(D),qT=n(D,"LI",{});var zSe=s(qT);rbe=n(zSe,"STRONG",{});var P3t=s(rbe);kmr=r(P3t,"vit_mae"),P3t.forEach(t),Smr=r(zSe," \u2014 "),XW=n(zSe,"A",{href:!0});var B3t=s(XW);Rmr=r(B3t,"TFViTMAEModel"),B3t.forEach(t),Pmr=r(zSe," (ViTMAE model)"),zSe.forEach(t),Bmr=i(D),NT=n(D,"LI",{});var WSe=s(NT);tbe=n(WSe,"STRONG",{});var I3t=s(tbe);Imr=r(I3t,"wav2vec2"),I3t.forEach(t),qmr=r(WSe," \u2014 "),zW=n(WSe,"A",{href:!0});var q3t=s(zW);Nmr=r(q3t,"TFWav2Vec2Model"),q3t.forEach(t),jmr=r(WSe," (Wav2Vec2 model)"),WSe.forEach(t),Dmr=i(D),jT=n(D,"LI",{});var QSe=s(jT);abe=n(QSe,"STRONG",{});var N3t=s(abe);Gmr=r(N3t,"xlm"),N3t.forEach(t),Omr=r(QSe," \u2014 "),WW=n(QSe,"A",{href:!0});var j3t=s(WW);Vmr=r(j3t,"TFXLMModel"),j3t.forEach(t),Xmr=r(QSe," (XLM model)"),QSe.forEach(t),zmr=i(D),DT=n(D,"LI",{});var HSe=s(DT);nbe=n(HSe,"STRONG",{});var D3t=s(nbe);Wmr=r(D3t,"xlm-roberta"),D3t.forEach(t),Qmr=r(HSe," \u2014 "),QW=n(HSe,"A",{href:!0});var G3t=s(QW);Hmr=r(G3t,"TFXLMRobertaModel"),G3t.forEach(t),Umr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Jmr=i(D),GT=n(D,"LI",{});var USe=s(GT);sbe=n(USe,"STRONG",{});var O3t=s(sbe);Ymr=r(O3t,"xlnet"),O3t.forEach(t),Kmr=r(USe," \u2014 "),HW=n(USe,"A",{href:!0});var V3t=s(HW);Zmr=r(V3t,"TFXLNetModel"),V3t.forEach(t),egr=r(USe," (XLNet model)"),USe.forEach(t),D.forEach(t),ogr=i(hl),T(OT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),YNe=i(f),Xd=n(f,"H2",{class:!0});var tGe=s(Xd);VT=n(tGe,"A",{id:!0,class:!0,href:!0});var X3t=s(VT);lbe=n(X3t,"SPAN",{});var z3t=s(lbe);T(fL.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),rgr=i(tGe),ibe=n(tGe,"SPAN",{});var W3t=s(ibe);tgr=r(W3t,"TFAutoModelForPreTraining"),W3t.forEach(t),tGe.forEach(t),KNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(mL.$$.fragment,pl),agr=i(pl),zd=n(pl,"P",{});var see=s(zd);ngr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UW=n(see,"A",{href:!0});var Q3t=s(UW);sgr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),lgr=r(see," class method or the "),JW=n(see,"A",{href:!0});var H3t=s(JW);igr=r(H3t,"from_config()"),H3t.forEach(t),dgr=r(see,` class
method.`),see.forEach(t),cgr=i(pl),gL=n(pl,"P",{});var aGe=s(gL);fgr=r(aGe,"This class cannot be instantiated directly using "),dbe=n(aGe,"CODE",{});var U3t=s(dbe);mgr=r(U3t,"__init__()"),U3t.forEach(t),ggr=r(aGe," (throws an error)."),aGe.forEach(t),hgr=i(pl),Lt=n(pl,"DIV",{class:!0});var C0=s(Lt);T(hL.$$.fragment,C0),pgr=i(C0),cbe=n(C0,"P",{});var J3t=s(cbe);ugr=r(J3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J3t.forEach(t),_gr=i(C0),Wd=n(C0,"P",{});var lee=s(Wd);bgr=r(lee,`Note:
Loading a model from its configuration file does `),fbe=n(lee,"STRONG",{});var Y3t=s(fbe);vgr=r(Y3t,"not"),Y3t.forEach(t),Fgr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(lee,"A",{href:!0});var K3t=s(YW);Tgr=r(K3t,"from_pretrained()"),K3t.forEach(t),Mgr=r(lee," to load the model weights."),lee.forEach(t),Egr=i(C0),T(XT.$$.fragment,C0),C0.forEach(t),Cgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(pL.$$.fragment,ul),wgr=i(ul),mbe=n(ul,"P",{});var Z3t=s(mbe);Agr=r(Z3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z3t.forEach(t),ygr=i(ul),Za=n(ul,"P",{});var w0=s(Za);Lgr=r(w0,"The model class to instantiate is selected based on the "),gbe=n(w0,"CODE",{});var eFt=s(gbe);xgr=r(eFt,"model_type"),eFt.forEach(t),$gr=r(w0,` property of the config object (either
passed as an argument or loaded from `),hbe=n(w0,"CODE",{});var oFt=s(hbe);kgr=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),Sgr=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(w0,"CODE",{});var rFt=s(pbe);Rgr=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),Pgr=r(w0,":"),w0.forEach(t),Bgr=i(ul),se=n(ul,"UL",{});var le=s(se);zT=n(le,"LI",{});var JSe=s(zT);ube=n(JSe,"STRONG",{});var tFt=s(ube);Igr=r(tFt,"albert"),tFt.forEach(t),qgr=r(JSe," \u2014 "),KW=n(JSe,"A",{href:!0});var aFt=s(KW);Ngr=r(aFt,"TFAlbertForPreTraining"),aFt.forEach(t),jgr=r(JSe," (ALBERT model)"),JSe.forEach(t),Dgr=i(le),WT=n(le,"LI",{});var YSe=s(WT);_be=n(YSe,"STRONG",{});var nFt=s(_be);Ggr=r(nFt,"bart"),nFt.forEach(t),Ogr=r(YSe," \u2014 "),ZW=n(YSe,"A",{href:!0});var sFt=s(ZW);Vgr=r(sFt,"TFBartForConditionalGeneration"),sFt.forEach(t),Xgr=r(YSe," (BART model)"),YSe.forEach(t),zgr=i(le),QT=n(le,"LI",{});var KSe=s(QT);bbe=n(KSe,"STRONG",{});var lFt=s(bbe);Wgr=r(lFt,"bert"),lFt.forEach(t),Qgr=r(KSe," \u2014 "),eQ=n(KSe,"A",{href:!0});var iFt=s(eQ);Hgr=r(iFt,"TFBertForPreTraining"),iFt.forEach(t),Ugr=r(KSe," (BERT model)"),KSe.forEach(t),Jgr=i(le),HT=n(le,"LI",{});var ZSe=s(HT);vbe=n(ZSe,"STRONG",{});var dFt=s(vbe);Ygr=r(dFt,"camembert"),dFt.forEach(t),Kgr=r(ZSe," \u2014 "),oQ=n(ZSe,"A",{href:!0});var cFt=s(oQ);Zgr=r(cFt,"TFCamembertForMaskedLM"),cFt.forEach(t),ehr=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),ohr=i(le),UT=n(le,"LI",{});var eRe=s(UT);Fbe=n(eRe,"STRONG",{});var fFt=s(Fbe);rhr=r(fFt,"ctrl"),fFt.forEach(t),thr=r(eRe," \u2014 "),rQ=n(eRe,"A",{href:!0});var mFt=s(rQ);ahr=r(mFt,"TFCTRLLMHeadModel"),mFt.forEach(t),nhr=r(eRe," (CTRL model)"),eRe.forEach(t),shr=i(le),JT=n(le,"LI",{});var oRe=s(JT);Tbe=n(oRe,"STRONG",{});var gFt=s(Tbe);lhr=r(gFt,"distilbert"),gFt.forEach(t),ihr=r(oRe," \u2014 "),tQ=n(oRe,"A",{href:!0});var hFt=s(tQ);dhr=r(hFt,"TFDistilBertForMaskedLM"),hFt.forEach(t),chr=r(oRe," (DistilBERT model)"),oRe.forEach(t),fhr=i(le),YT=n(le,"LI",{});var rRe=s(YT);Mbe=n(rRe,"STRONG",{});var pFt=s(Mbe);mhr=r(pFt,"electra"),pFt.forEach(t),ghr=r(rRe," \u2014 "),aQ=n(rRe,"A",{href:!0});var uFt=s(aQ);hhr=r(uFt,"TFElectraForPreTraining"),uFt.forEach(t),phr=r(rRe," (ELECTRA model)"),rRe.forEach(t),uhr=i(le),KT=n(le,"LI",{});var tRe=s(KT);Ebe=n(tRe,"STRONG",{});var _Ft=s(Ebe);_hr=r(_Ft,"flaubert"),_Ft.forEach(t),bhr=r(tRe," \u2014 "),nQ=n(tRe,"A",{href:!0});var bFt=s(nQ);vhr=r(bFt,"TFFlaubertWithLMHeadModel"),bFt.forEach(t),Fhr=r(tRe," (FlauBERT model)"),tRe.forEach(t),Thr=i(le),ZT=n(le,"LI",{});var aRe=s(ZT);Cbe=n(aRe,"STRONG",{});var vFt=s(Cbe);Mhr=r(vFt,"funnel"),vFt.forEach(t),Ehr=r(aRe," \u2014 "),sQ=n(aRe,"A",{href:!0});var FFt=s(sQ);Chr=r(FFt,"TFFunnelForPreTraining"),FFt.forEach(t),whr=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),Ahr=i(le),e7=n(le,"LI",{});var nRe=s(e7);wbe=n(nRe,"STRONG",{});var TFt=s(wbe);yhr=r(TFt,"gpt2"),TFt.forEach(t),Lhr=r(nRe," \u2014 "),lQ=n(nRe,"A",{href:!0});var MFt=s(lQ);xhr=r(MFt,"TFGPT2LMHeadModel"),MFt.forEach(t),$hr=r(nRe," (OpenAI GPT-2 model)"),nRe.forEach(t),khr=i(le),o7=n(le,"LI",{});var sRe=s(o7);Abe=n(sRe,"STRONG",{});var EFt=s(Abe);Shr=r(EFt,"layoutlm"),EFt.forEach(t),Rhr=r(sRe," \u2014 "),iQ=n(sRe,"A",{href:!0});var CFt=s(iQ);Phr=r(CFt,"TFLayoutLMForMaskedLM"),CFt.forEach(t),Bhr=r(sRe," (LayoutLM model)"),sRe.forEach(t),Ihr=i(le),r7=n(le,"LI",{});var lRe=s(r7);ybe=n(lRe,"STRONG",{});var wFt=s(ybe);qhr=r(wFt,"lxmert"),wFt.forEach(t),Nhr=r(lRe," \u2014 "),dQ=n(lRe,"A",{href:!0});var AFt=s(dQ);jhr=r(AFt,"TFLxmertForPreTraining"),AFt.forEach(t),Dhr=r(lRe," (LXMERT model)"),lRe.forEach(t),Ghr=i(le),t7=n(le,"LI",{});var iRe=s(t7);Lbe=n(iRe,"STRONG",{});var yFt=s(Lbe);Ohr=r(yFt,"mobilebert"),yFt.forEach(t),Vhr=r(iRe," \u2014 "),cQ=n(iRe,"A",{href:!0});var LFt=s(cQ);Xhr=r(LFt,"TFMobileBertForPreTraining"),LFt.forEach(t),zhr=r(iRe," (MobileBERT model)"),iRe.forEach(t),Whr=i(le),a7=n(le,"LI",{});var dRe=s(a7);xbe=n(dRe,"STRONG",{});var xFt=s(xbe);Qhr=r(xFt,"mpnet"),xFt.forEach(t),Hhr=r(dRe," \u2014 "),fQ=n(dRe,"A",{href:!0});var $Ft=s(fQ);Uhr=r($Ft,"TFMPNetForMaskedLM"),$Ft.forEach(t),Jhr=r(dRe," (MPNet model)"),dRe.forEach(t),Yhr=i(le),n7=n(le,"LI",{});var cRe=s(n7);$be=n(cRe,"STRONG",{});var kFt=s($be);Khr=r(kFt,"openai-gpt"),kFt.forEach(t),Zhr=r(cRe," \u2014 "),mQ=n(cRe,"A",{href:!0});var SFt=s(mQ);epr=r(SFt,"TFOpenAIGPTLMHeadModel"),SFt.forEach(t),opr=r(cRe," (OpenAI GPT model)"),cRe.forEach(t),rpr=i(le),s7=n(le,"LI",{});var fRe=s(s7);kbe=n(fRe,"STRONG",{});var RFt=s(kbe);tpr=r(RFt,"roberta"),RFt.forEach(t),apr=r(fRe," \u2014 "),gQ=n(fRe,"A",{href:!0});var PFt=s(gQ);npr=r(PFt,"TFRobertaForMaskedLM"),PFt.forEach(t),spr=r(fRe," (RoBERTa model)"),fRe.forEach(t),lpr=i(le),l7=n(le,"LI",{});var mRe=s(l7);Sbe=n(mRe,"STRONG",{});var BFt=s(Sbe);ipr=r(BFt,"t5"),BFt.forEach(t),dpr=r(mRe," \u2014 "),hQ=n(mRe,"A",{href:!0});var IFt=s(hQ);cpr=r(IFt,"TFT5ForConditionalGeneration"),IFt.forEach(t),fpr=r(mRe," (T5 model)"),mRe.forEach(t),mpr=i(le),i7=n(le,"LI",{});var gRe=s(i7);Rbe=n(gRe,"STRONG",{});var qFt=s(Rbe);gpr=r(qFt,"tapas"),qFt.forEach(t),hpr=r(gRe," \u2014 "),pQ=n(gRe,"A",{href:!0});var NFt=s(pQ);ppr=r(NFt,"TFTapasForMaskedLM"),NFt.forEach(t),upr=r(gRe," (TAPAS model)"),gRe.forEach(t),_pr=i(le),d7=n(le,"LI",{});var hRe=s(d7);Pbe=n(hRe,"STRONG",{});var jFt=s(Pbe);bpr=r(jFt,"transfo-xl"),jFt.forEach(t),vpr=r(hRe," \u2014 "),uQ=n(hRe,"A",{href:!0});var DFt=s(uQ);Fpr=r(DFt,"TFTransfoXLLMHeadModel"),DFt.forEach(t),Tpr=r(hRe," (Transformer-XL model)"),hRe.forEach(t),Mpr=i(le),c7=n(le,"LI",{});var pRe=s(c7);Bbe=n(pRe,"STRONG",{});var GFt=s(Bbe);Epr=r(GFt,"vit_mae"),GFt.forEach(t),Cpr=r(pRe," \u2014 "),_Q=n(pRe,"A",{href:!0});var OFt=s(_Q);wpr=r(OFt,"TFViTMAEForPreTraining"),OFt.forEach(t),Apr=r(pRe," (ViTMAE model)"),pRe.forEach(t),ypr=i(le),f7=n(le,"LI",{});var uRe=s(f7);Ibe=n(uRe,"STRONG",{});var VFt=s(Ibe);Lpr=r(VFt,"xlm"),VFt.forEach(t),xpr=r(uRe," \u2014 "),bQ=n(uRe,"A",{href:!0});var XFt=s(bQ);$pr=r(XFt,"TFXLMWithLMHeadModel"),XFt.forEach(t),kpr=r(uRe," (XLM model)"),uRe.forEach(t),Spr=i(le),m7=n(le,"LI",{});var _Re=s(m7);qbe=n(_Re,"STRONG",{});var zFt=s(qbe);Rpr=r(zFt,"xlm-roberta"),zFt.forEach(t),Ppr=r(_Re," \u2014 "),vQ=n(_Re,"A",{href:!0});var WFt=s(vQ);Bpr=r(WFt,"TFXLMRobertaForMaskedLM"),WFt.forEach(t),Ipr=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),qpr=i(le),g7=n(le,"LI",{});var bRe=s(g7);Nbe=n(bRe,"STRONG",{});var QFt=s(Nbe);Npr=r(QFt,"xlnet"),QFt.forEach(t),jpr=r(bRe," \u2014 "),FQ=n(bRe,"A",{href:!0});var HFt=s(FQ);Dpr=r(HFt,"TFXLNetLMHeadModel"),HFt.forEach(t),Gpr=r(bRe," (XLNet model)"),bRe.forEach(t),le.forEach(t),Opr=i(ul),T(h7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),ZNe=i(f),Qd=n(f,"H2",{class:!0});var nGe=s(Qd);p7=n(nGe,"A",{id:!0,class:!0,href:!0});var UFt=s(p7);jbe=n(UFt,"SPAN",{});var JFt=s(jbe);T(uL.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),Vpr=i(nGe),Dbe=n(nGe,"SPAN",{});var YFt=s(Dbe);Xpr=r(YFt,"TFAutoModelForCausalLM"),YFt.forEach(t),nGe.forEach(t),eje=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(_L.$$.fragment,_l),zpr=i(_l),Hd=n(_l,"P",{});var iee=s(Hd);Wpr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=n(iee,"A",{href:!0});var KFt=s(TQ);Qpr=r(KFt,"from_pretrained()"),KFt.forEach(t),Hpr=r(iee," class method or the "),MQ=n(iee,"A",{href:!0});var ZFt=s(MQ);Upr=r(ZFt,"from_config()"),ZFt.forEach(t),Jpr=r(iee,` class
method.`),iee.forEach(t),Ypr=i(_l),bL=n(_l,"P",{});var sGe=s(bL);Kpr=r(sGe,"This class cannot be instantiated directly using "),Gbe=n(sGe,"CODE",{});var eTt=s(Gbe);Zpr=r(eTt,"__init__()"),eTt.forEach(t),eur=r(sGe," (throws an error)."),sGe.forEach(t),our=i(_l),xt=n(_l,"DIV",{class:!0});var A0=s(xt);T(vL.$$.fragment,A0),rur=i(A0),Obe=n(A0,"P",{});var oTt=s(Obe);tur=r(oTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oTt.forEach(t),aur=i(A0),Ud=n(A0,"P",{});var dee=s(Ud);nur=r(dee,`Note:
Loading a model from its configuration file does `),Vbe=n(dee,"STRONG",{});var rTt=s(Vbe);sur=r(rTt,"not"),rTt.forEach(t),lur=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(dee,"A",{href:!0});var tTt=s(EQ);iur=r(tTt,"from_pretrained()"),tTt.forEach(t),dur=r(dee," to load the model weights."),dee.forEach(t),cur=i(A0),T(u7.$$.fragment,A0),A0.forEach(t),fur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(FL.$$.fragment,bl),mur=i(bl),Xbe=n(bl,"P",{});var aTt=s(Xbe);gur=r(aTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aTt.forEach(t),hur=i(bl),en=n(bl,"P",{});var y0=s(en);pur=r(y0,"The model class to instantiate is selected based on the "),zbe=n(y0,"CODE",{});var nTt=s(zbe);uur=r(nTt,"model_type"),nTt.forEach(t),_ur=r(y0,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(y0,"CODE",{});var sTt=s(Wbe);bur=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),vur=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(y0,"CODE",{});var lTt=s(Qbe);Fur=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),Tur=r(y0,":"),y0.forEach(t),Mur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);_7=n(Ce,"LI",{});var vRe=s(_7);Hbe=n(vRe,"STRONG",{});var iTt=s(Hbe);Eur=r(iTt,"bert"),iTt.forEach(t),Cur=r(vRe," \u2014 "),CQ=n(vRe,"A",{href:!0});var dTt=s(CQ);wur=r(dTt,"TFBertLMHeadModel"),dTt.forEach(t),Aur=r(vRe," (BERT model)"),vRe.forEach(t),yur=i(Ce),b7=n(Ce,"LI",{});var FRe=s(b7);Ube=n(FRe,"STRONG",{});var cTt=s(Ube);Lur=r(cTt,"camembert"),cTt.forEach(t),xur=r(FRe," \u2014 "),wQ=n(FRe,"A",{href:!0});var fTt=s(wQ);$ur=r(fTt,"TFCamembertForCausalLM"),fTt.forEach(t),kur=r(FRe," (CamemBERT model)"),FRe.forEach(t),Sur=i(Ce),v7=n(Ce,"LI",{});var TRe=s(v7);Jbe=n(TRe,"STRONG",{});var mTt=s(Jbe);Rur=r(mTt,"ctrl"),mTt.forEach(t),Pur=r(TRe," \u2014 "),AQ=n(TRe,"A",{href:!0});var gTt=s(AQ);Bur=r(gTt,"TFCTRLLMHeadModel"),gTt.forEach(t),Iur=r(TRe," (CTRL model)"),TRe.forEach(t),qur=i(Ce),F7=n(Ce,"LI",{});var MRe=s(F7);Ybe=n(MRe,"STRONG",{});var hTt=s(Ybe);Nur=r(hTt,"gpt2"),hTt.forEach(t),jur=r(MRe," \u2014 "),yQ=n(MRe,"A",{href:!0});var pTt=s(yQ);Dur=r(pTt,"TFGPT2LMHeadModel"),pTt.forEach(t),Gur=r(MRe," (OpenAI GPT-2 model)"),MRe.forEach(t),Our=i(Ce),T7=n(Ce,"LI",{});var ERe=s(T7);Kbe=n(ERe,"STRONG",{});var uTt=s(Kbe);Vur=r(uTt,"gptj"),uTt.forEach(t),Xur=r(ERe," \u2014 "),LQ=n(ERe,"A",{href:!0});var _Tt=s(LQ);zur=r(_Tt,"TFGPTJForCausalLM"),_Tt.forEach(t),Wur=r(ERe," (GPT-J model)"),ERe.forEach(t),Qur=i(Ce),M7=n(Ce,"LI",{});var CRe=s(M7);Zbe=n(CRe,"STRONG",{});var bTt=s(Zbe);Hur=r(bTt,"openai-gpt"),bTt.forEach(t),Uur=r(CRe," \u2014 "),xQ=n(CRe,"A",{href:!0});var vTt=s(xQ);Jur=r(vTt,"TFOpenAIGPTLMHeadModel"),vTt.forEach(t),Yur=r(CRe," (OpenAI GPT model)"),CRe.forEach(t),Kur=i(Ce),E7=n(Ce,"LI",{});var wRe=s(E7);e2e=n(wRe,"STRONG",{});var FTt=s(e2e);Zur=r(FTt,"rembert"),FTt.forEach(t),e_r=r(wRe," \u2014 "),$Q=n(wRe,"A",{href:!0});var TTt=s($Q);o_r=r(TTt,"TFRemBertForCausalLM"),TTt.forEach(t),r_r=r(wRe," (RemBERT model)"),wRe.forEach(t),t_r=i(Ce),C7=n(Ce,"LI",{});var ARe=s(C7);o2e=n(ARe,"STRONG",{});var MTt=s(o2e);a_r=r(MTt,"roberta"),MTt.forEach(t),n_r=r(ARe," \u2014 "),kQ=n(ARe,"A",{href:!0});var ETt=s(kQ);s_r=r(ETt,"TFRobertaForCausalLM"),ETt.forEach(t),l_r=r(ARe," (RoBERTa model)"),ARe.forEach(t),i_r=i(Ce),w7=n(Ce,"LI",{});var yRe=s(w7);r2e=n(yRe,"STRONG",{});var CTt=s(r2e);d_r=r(CTt,"roformer"),CTt.forEach(t),c_r=r(yRe," \u2014 "),SQ=n(yRe,"A",{href:!0});var wTt=s(SQ);f_r=r(wTt,"TFRoFormerForCausalLM"),wTt.forEach(t),m_r=r(yRe," (RoFormer model)"),yRe.forEach(t),g_r=i(Ce),A7=n(Ce,"LI",{});var LRe=s(A7);t2e=n(LRe,"STRONG",{});var ATt=s(t2e);h_r=r(ATt,"transfo-xl"),ATt.forEach(t),p_r=r(LRe," \u2014 "),RQ=n(LRe,"A",{href:!0});var yTt=s(RQ);u_r=r(yTt,"TFTransfoXLLMHeadModel"),yTt.forEach(t),__r=r(LRe," (Transformer-XL model)"),LRe.forEach(t),b_r=i(Ce),y7=n(Ce,"LI",{});var xRe=s(y7);a2e=n(xRe,"STRONG",{});var LTt=s(a2e);v_r=r(LTt,"xlm"),LTt.forEach(t),F_r=r(xRe," \u2014 "),PQ=n(xRe,"A",{href:!0});var xTt=s(PQ);T_r=r(xTt,"TFXLMWithLMHeadModel"),xTt.forEach(t),M_r=r(xRe," (XLM model)"),xRe.forEach(t),E_r=i(Ce),L7=n(Ce,"LI",{});var $Re=s(L7);n2e=n($Re,"STRONG",{});var $Tt=s(n2e);C_r=r($Tt,"xlnet"),$Tt.forEach(t),w_r=r($Re," \u2014 "),BQ=n($Re,"A",{href:!0});var kTt=s(BQ);A_r=r(kTt,"TFXLNetLMHeadModel"),kTt.forEach(t),y_r=r($Re," (XLNet model)"),$Re.forEach(t),Ce.forEach(t),L_r=i(bl),T(x7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),oje=i(f),Jd=n(f,"H2",{class:!0});var lGe=s(Jd);$7=n(lGe,"A",{id:!0,class:!0,href:!0});var STt=s($7);s2e=n(STt,"SPAN",{});var RTt=s(s2e);T(TL.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),x_r=i(lGe),l2e=n(lGe,"SPAN",{});var PTt=s(l2e);$_r=r(PTt,"TFAutoModelForImageClassification"),PTt.forEach(t),lGe.forEach(t),rje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(ML.$$.fragment,vl),k_r=i(vl),Yd=n(vl,"P",{});var cee=s(Yd);S_r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=n(cee,"A",{href:!0});var BTt=s(IQ);R_r=r(BTt,"from_pretrained()"),BTt.forEach(t),P_r=r(cee," class method or the "),qQ=n(cee,"A",{href:!0});var ITt=s(qQ);B_r=r(ITt,"from_config()"),ITt.forEach(t),I_r=r(cee,` class
method.`),cee.forEach(t),q_r=i(vl),EL=n(vl,"P",{});var iGe=s(EL);N_r=r(iGe,"This class cannot be instantiated directly using "),i2e=n(iGe,"CODE",{});var qTt=s(i2e);j_r=r(qTt,"__init__()"),qTt.forEach(t),D_r=r(iGe," (throws an error)."),iGe.forEach(t),G_r=i(vl),$t=n(vl,"DIV",{class:!0});var L0=s($t);T(CL.$$.fragment,L0),O_r=i(L0),d2e=n(L0,"P",{});var NTt=s(d2e);V_r=r(NTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NTt.forEach(t),X_r=i(L0),Kd=n(L0,"P",{});var fee=s(Kd);z_r=r(fee,`Note:
Loading a model from its configuration file does `),c2e=n(fee,"STRONG",{});var jTt=s(c2e);W_r=r(jTt,"not"),jTt.forEach(t),Q_r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(fee,"A",{href:!0});var DTt=s(NQ);H_r=r(DTt,"from_pretrained()"),DTt.forEach(t),U_r=r(fee," to load the model weights."),fee.forEach(t),J_r=i(L0),T(k7.$$.fragment,L0),L0.forEach(t),Y_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(wL.$$.fragment,Fl),K_r=i(Fl),f2e=n(Fl,"P",{});var GTt=s(f2e);Z_r=r(GTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GTt.forEach(t),e1r=i(Fl),on=n(Fl,"P",{});var x0=s(on);o1r=r(x0,"The model class to instantiate is selected based on the "),m2e=n(x0,"CODE",{});var OTt=s(m2e);r1r=r(OTt,"model_type"),OTt.forEach(t),t1r=r(x0,` property of the config object (either
passed as an argument or loaded from `),g2e=n(x0,"CODE",{});var VTt=s(g2e);a1r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),n1r=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(x0,"CODE",{});var XTt=s(h2e);s1r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),l1r=r(x0,":"),x0.forEach(t),i1r=i(Fl),rn=n(Fl,"UL",{});var $0=s(rn);S7=n($0,"LI",{});var kRe=s(S7);p2e=n(kRe,"STRONG",{});var zTt=s(p2e);d1r=r(zTt,"convnext"),zTt.forEach(t),c1r=r(kRe," \u2014 "),jQ=n(kRe,"A",{href:!0});var WTt=s(jQ);f1r=r(WTt,"TFConvNextForImageClassification"),WTt.forEach(t),m1r=r(kRe," (ConvNext model)"),kRe.forEach(t),g1r=i($0),R7=n($0,"LI",{});var SRe=s(R7);u2e=n(SRe,"STRONG",{});var QTt=s(u2e);h1r=r(QTt,"data2vec-vision"),QTt.forEach(t),p1r=r(SRe," \u2014 "),DQ=n(SRe,"A",{href:!0});var HTt=s(DQ);u1r=r(HTt,"TFData2VecVisionForImageClassification"),HTt.forEach(t),_1r=r(SRe," (Data2VecVision model)"),SRe.forEach(t),b1r=i($0),P7=n($0,"LI",{});var RRe=s(P7);_2e=n(RRe,"STRONG",{});var UTt=s(_2e);v1r=r(UTt,"swin"),UTt.forEach(t),F1r=r(RRe," \u2014 "),GQ=n(RRe,"A",{href:!0});var JTt=s(GQ);T1r=r(JTt,"TFSwinForImageClassification"),JTt.forEach(t),M1r=r(RRe," (Swin model)"),RRe.forEach(t),E1r=i($0),B7=n($0,"LI",{});var PRe=s(B7);b2e=n(PRe,"STRONG",{});var YTt=s(b2e);C1r=r(YTt,"vit"),YTt.forEach(t),w1r=r(PRe," \u2014 "),OQ=n(PRe,"A",{href:!0});var KTt=s(OQ);A1r=r(KTt,"TFViTForImageClassification"),KTt.forEach(t),y1r=r(PRe," (ViT model)"),PRe.forEach(t),$0.forEach(t),L1r=i(Fl),T(I7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),tje=i(f),Zd=n(f,"H2",{class:!0});var dGe=s(Zd);q7=n(dGe,"A",{id:!0,class:!0,href:!0});var ZTt=s(q7);v2e=n(ZTt,"SPAN",{});var e7t=s(v2e);T(AL.$$.fragment,e7t),e7t.forEach(t),ZTt.forEach(t),x1r=i(dGe),F2e=n(dGe,"SPAN",{});var o7t=s(F2e);$1r=r(o7t,"TFAutoModelForMaskedLM"),o7t.forEach(t),dGe.forEach(t),aje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(yL.$$.fragment,Tl),k1r=i(Tl),ec=n(Tl,"P",{});var mee=s(ec);S1r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VQ=n(mee,"A",{href:!0});var r7t=s(VQ);R1r=r(r7t,"from_pretrained()"),r7t.forEach(t),P1r=r(mee," class method or the "),XQ=n(mee,"A",{href:!0});var t7t=s(XQ);B1r=r(t7t,"from_config()"),t7t.forEach(t),I1r=r(mee,` class
method.`),mee.forEach(t),q1r=i(Tl),LL=n(Tl,"P",{});var cGe=s(LL);N1r=r(cGe,"This class cannot be instantiated directly using "),T2e=n(cGe,"CODE",{});var a7t=s(T2e);j1r=r(a7t,"__init__()"),a7t.forEach(t),D1r=r(cGe," (throws an error)."),cGe.forEach(t),G1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var k0=s(kt);T(xL.$$.fragment,k0),O1r=i(k0),M2e=n(k0,"P",{});var n7t=s(M2e);V1r=r(n7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n7t.forEach(t),X1r=i(k0),oc=n(k0,"P",{});var gee=s(oc);z1r=r(gee,`Note:
Loading a model from its configuration file does `),E2e=n(gee,"STRONG",{});var s7t=s(E2e);W1r=r(s7t,"not"),s7t.forEach(t),Q1r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(gee,"A",{href:!0});var l7t=s(zQ);H1r=r(l7t,"from_pretrained()"),l7t.forEach(t),U1r=r(gee," to load the model weights."),gee.forEach(t),J1r=i(k0),T(N7.$$.fragment,k0),k0.forEach(t),Y1r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T($L.$$.fragment,Ml),K1r=i(Ml),C2e=n(Ml,"P",{});var i7t=s(C2e);Z1r=r(i7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i7t.forEach(t),e8r=i(Ml),tn=n(Ml,"P",{});var S0=s(tn);o8r=r(S0,"The model class to instantiate is selected based on the "),w2e=n(S0,"CODE",{});var d7t=s(w2e);r8r=r(d7t,"model_type"),d7t.forEach(t),t8r=r(S0,` property of the config object (either
passed as an argument or loaded from `),A2e=n(S0,"CODE",{});var c7t=s(A2e);a8r=r(c7t,"pretrained_model_name_or_path"),c7t.forEach(t),n8r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(S0,"CODE",{});var f7t=s(y2e);s8r=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),l8r=r(S0,":"),S0.forEach(t),i8r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);j7=n(fe,"LI",{});var BRe=s(j7);L2e=n(BRe,"STRONG",{});var m7t=s(L2e);d8r=r(m7t,"albert"),m7t.forEach(t),c8r=r(BRe," \u2014 "),WQ=n(BRe,"A",{href:!0});var g7t=s(WQ);f8r=r(g7t,"TFAlbertForMaskedLM"),g7t.forEach(t),m8r=r(BRe," (ALBERT model)"),BRe.forEach(t),g8r=i(fe),D7=n(fe,"LI",{});var IRe=s(D7);x2e=n(IRe,"STRONG",{});var h7t=s(x2e);h8r=r(h7t,"bert"),h7t.forEach(t),p8r=r(IRe," \u2014 "),QQ=n(IRe,"A",{href:!0});var p7t=s(QQ);u8r=r(p7t,"TFBertForMaskedLM"),p7t.forEach(t),_8r=r(IRe," (BERT model)"),IRe.forEach(t),b8r=i(fe),G7=n(fe,"LI",{});var qRe=s(G7);$2e=n(qRe,"STRONG",{});var u7t=s($2e);v8r=r(u7t,"camembert"),u7t.forEach(t),F8r=r(qRe," \u2014 "),HQ=n(qRe,"A",{href:!0});var _7t=s(HQ);T8r=r(_7t,"TFCamembertForMaskedLM"),_7t.forEach(t),M8r=r(qRe," (CamemBERT model)"),qRe.forEach(t),E8r=i(fe),O7=n(fe,"LI",{});var NRe=s(O7);k2e=n(NRe,"STRONG",{});var b7t=s(k2e);C8r=r(b7t,"convbert"),b7t.forEach(t),w8r=r(NRe," \u2014 "),UQ=n(NRe,"A",{href:!0});var v7t=s(UQ);A8r=r(v7t,"TFConvBertForMaskedLM"),v7t.forEach(t),y8r=r(NRe," (ConvBERT model)"),NRe.forEach(t),L8r=i(fe),V7=n(fe,"LI",{});var jRe=s(V7);S2e=n(jRe,"STRONG",{});var F7t=s(S2e);x8r=r(F7t,"deberta"),F7t.forEach(t),$8r=r(jRe," \u2014 "),JQ=n(jRe,"A",{href:!0});var T7t=s(JQ);k8r=r(T7t,"TFDebertaForMaskedLM"),T7t.forEach(t),S8r=r(jRe," (DeBERTa model)"),jRe.forEach(t),R8r=i(fe),X7=n(fe,"LI",{});var DRe=s(X7);R2e=n(DRe,"STRONG",{});var M7t=s(R2e);P8r=r(M7t,"deberta-v2"),M7t.forEach(t),B8r=r(DRe," \u2014 "),YQ=n(DRe,"A",{href:!0});var E7t=s(YQ);I8r=r(E7t,"TFDebertaV2ForMaskedLM"),E7t.forEach(t),q8r=r(DRe," (DeBERTa-v2 model)"),DRe.forEach(t),N8r=i(fe),z7=n(fe,"LI",{});var GRe=s(z7);P2e=n(GRe,"STRONG",{});var C7t=s(P2e);j8r=r(C7t,"distilbert"),C7t.forEach(t),D8r=r(GRe," \u2014 "),KQ=n(GRe,"A",{href:!0});var w7t=s(KQ);G8r=r(w7t,"TFDistilBertForMaskedLM"),w7t.forEach(t),O8r=r(GRe," (DistilBERT model)"),GRe.forEach(t),V8r=i(fe),W7=n(fe,"LI",{});var ORe=s(W7);B2e=n(ORe,"STRONG",{});var A7t=s(B2e);X8r=r(A7t,"electra"),A7t.forEach(t),z8r=r(ORe," \u2014 "),ZQ=n(ORe,"A",{href:!0});var y7t=s(ZQ);W8r=r(y7t,"TFElectraForMaskedLM"),y7t.forEach(t),Q8r=r(ORe," (ELECTRA model)"),ORe.forEach(t),H8r=i(fe),Q7=n(fe,"LI",{});var VRe=s(Q7);I2e=n(VRe,"STRONG",{});var L7t=s(I2e);U8r=r(L7t,"flaubert"),L7t.forEach(t),J8r=r(VRe," \u2014 "),eH=n(VRe,"A",{href:!0});var x7t=s(eH);Y8r=r(x7t,"TFFlaubertWithLMHeadModel"),x7t.forEach(t),K8r=r(VRe," (FlauBERT model)"),VRe.forEach(t),Z8r=i(fe),H7=n(fe,"LI",{});var XRe=s(H7);q2e=n(XRe,"STRONG",{});var $7t=s(q2e);ebr=r($7t,"funnel"),$7t.forEach(t),obr=r(XRe," \u2014 "),oH=n(XRe,"A",{href:!0});var k7t=s(oH);rbr=r(k7t,"TFFunnelForMaskedLM"),k7t.forEach(t),tbr=r(XRe," (Funnel Transformer model)"),XRe.forEach(t),abr=i(fe),U7=n(fe,"LI",{});var zRe=s(U7);N2e=n(zRe,"STRONG",{});var S7t=s(N2e);nbr=r(S7t,"layoutlm"),S7t.forEach(t),sbr=r(zRe," \u2014 "),rH=n(zRe,"A",{href:!0});var R7t=s(rH);lbr=r(R7t,"TFLayoutLMForMaskedLM"),R7t.forEach(t),ibr=r(zRe," (LayoutLM model)"),zRe.forEach(t),dbr=i(fe),J7=n(fe,"LI",{});var WRe=s(J7);j2e=n(WRe,"STRONG",{});var P7t=s(j2e);cbr=r(P7t,"longformer"),P7t.forEach(t),fbr=r(WRe," \u2014 "),tH=n(WRe,"A",{href:!0});var B7t=s(tH);mbr=r(B7t,"TFLongformerForMaskedLM"),B7t.forEach(t),gbr=r(WRe," (Longformer model)"),WRe.forEach(t),hbr=i(fe),Y7=n(fe,"LI",{});var QRe=s(Y7);D2e=n(QRe,"STRONG",{});var I7t=s(D2e);pbr=r(I7t,"mobilebert"),I7t.forEach(t),ubr=r(QRe," \u2014 "),aH=n(QRe,"A",{href:!0});var q7t=s(aH);_br=r(q7t,"TFMobileBertForMaskedLM"),q7t.forEach(t),bbr=r(QRe," (MobileBERT model)"),QRe.forEach(t),vbr=i(fe),K7=n(fe,"LI",{});var HRe=s(K7);G2e=n(HRe,"STRONG",{});var N7t=s(G2e);Fbr=r(N7t,"mpnet"),N7t.forEach(t),Tbr=r(HRe," \u2014 "),nH=n(HRe,"A",{href:!0});var j7t=s(nH);Mbr=r(j7t,"TFMPNetForMaskedLM"),j7t.forEach(t),Ebr=r(HRe," (MPNet model)"),HRe.forEach(t),Cbr=i(fe),Z7=n(fe,"LI",{});var URe=s(Z7);O2e=n(URe,"STRONG",{});var D7t=s(O2e);wbr=r(D7t,"rembert"),D7t.forEach(t),Abr=r(URe," \u2014 "),sH=n(URe,"A",{href:!0});var G7t=s(sH);ybr=r(G7t,"TFRemBertForMaskedLM"),G7t.forEach(t),Lbr=r(URe," (RemBERT model)"),URe.forEach(t),xbr=i(fe),eM=n(fe,"LI",{});var JRe=s(eM);V2e=n(JRe,"STRONG",{});var O7t=s(V2e);$br=r(O7t,"roberta"),O7t.forEach(t),kbr=r(JRe," \u2014 "),lH=n(JRe,"A",{href:!0});var V7t=s(lH);Sbr=r(V7t,"TFRobertaForMaskedLM"),V7t.forEach(t),Rbr=r(JRe," (RoBERTa model)"),JRe.forEach(t),Pbr=i(fe),oM=n(fe,"LI",{});var YRe=s(oM);X2e=n(YRe,"STRONG",{});var X7t=s(X2e);Bbr=r(X7t,"roformer"),X7t.forEach(t),Ibr=r(YRe," \u2014 "),iH=n(YRe,"A",{href:!0});var z7t=s(iH);qbr=r(z7t,"TFRoFormerForMaskedLM"),z7t.forEach(t),Nbr=r(YRe," (RoFormer model)"),YRe.forEach(t),jbr=i(fe),rM=n(fe,"LI",{});var KRe=s(rM);z2e=n(KRe,"STRONG",{});var W7t=s(z2e);Dbr=r(W7t,"tapas"),W7t.forEach(t),Gbr=r(KRe," \u2014 "),dH=n(KRe,"A",{href:!0});var Q7t=s(dH);Obr=r(Q7t,"TFTapasForMaskedLM"),Q7t.forEach(t),Vbr=r(KRe," (TAPAS model)"),KRe.forEach(t),Xbr=i(fe),tM=n(fe,"LI",{});var ZRe=s(tM);W2e=n(ZRe,"STRONG",{});var H7t=s(W2e);zbr=r(H7t,"xlm"),H7t.forEach(t),Wbr=r(ZRe," \u2014 "),cH=n(ZRe,"A",{href:!0});var U7t=s(cH);Qbr=r(U7t,"TFXLMWithLMHeadModel"),U7t.forEach(t),Hbr=r(ZRe," (XLM model)"),ZRe.forEach(t),Ubr=i(fe),aM=n(fe,"LI",{});var ePe=s(aM);Q2e=n(ePe,"STRONG",{});var J7t=s(Q2e);Jbr=r(J7t,"xlm-roberta"),J7t.forEach(t),Ybr=r(ePe," \u2014 "),fH=n(ePe,"A",{href:!0});var Y7t=s(fH);Kbr=r(Y7t,"TFXLMRobertaForMaskedLM"),Y7t.forEach(t),Zbr=r(ePe," (XLM-RoBERTa model)"),ePe.forEach(t),fe.forEach(t),e2r=i(Ml),T(nM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),nje=i(f),rc=n(f,"H2",{class:!0});var fGe=s(rc);sM=n(fGe,"A",{id:!0,class:!0,href:!0});var K7t=s(sM);H2e=n(K7t,"SPAN",{});var Z7t=s(H2e);T(kL.$$.fragment,Z7t),Z7t.forEach(t),K7t.forEach(t),o2r=i(fGe),U2e=n(fGe,"SPAN",{});var eMt=s(U2e);r2r=r(eMt,"TFAutoModelForSeq2SeqLM"),eMt.forEach(t),fGe.forEach(t),sje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(SL.$$.fragment,El),t2r=i(El),tc=n(El,"P",{});var hee=s(tc);a2r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mH=n(hee,"A",{href:!0});var oMt=s(mH);n2r=r(oMt,"from_pretrained()"),oMt.forEach(t),s2r=r(hee," class method or the "),gH=n(hee,"A",{href:!0});var rMt=s(gH);l2r=r(rMt,"from_config()"),rMt.forEach(t),i2r=r(hee,` class
method.`),hee.forEach(t),d2r=i(El),RL=n(El,"P",{});var mGe=s(RL);c2r=r(mGe,"This class cannot be instantiated directly using "),J2e=n(mGe,"CODE",{});var tMt=s(J2e);f2r=r(tMt,"__init__()"),tMt.forEach(t),m2r=r(mGe," (throws an error)."),mGe.forEach(t),g2r=i(El),St=n(El,"DIV",{class:!0});var R0=s(St);T(PL.$$.fragment,R0),h2r=i(R0),Y2e=n(R0,"P",{});var aMt=s(Y2e);p2r=r(aMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aMt.forEach(t),u2r=i(R0),ac=n(R0,"P",{});var pee=s(ac);_2r=r(pee,`Note:
Loading a model from its configuration file does `),K2e=n(pee,"STRONG",{});var nMt=s(K2e);b2r=r(nMt,"not"),nMt.forEach(t),v2r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(pee,"A",{href:!0});var sMt=s(hH);F2r=r(sMt,"from_pretrained()"),sMt.forEach(t),T2r=r(pee," to load the model weights."),pee.forEach(t),M2r=i(R0),T(lM.$$.fragment,R0),R0.forEach(t),E2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(BL.$$.fragment,Cl),C2r=i(Cl),Z2e=n(Cl,"P",{});var lMt=s(Z2e);w2r=r(lMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lMt.forEach(t),A2r=i(Cl),an=n(Cl,"P",{});var P0=s(an);y2r=r(P0,"The model class to instantiate is selected based on the "),eve=n(P0,"CODE",{});var iMt=s(eve);L2r=r(iMt,"model_type"),iMt.forEach(t),x2r=r(P0,` property of the config object (either
passed as an argument or loaded from `),ove=n(P0,"CODE",{});var dMt=s(ove);$2r=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),k2r=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(P0,"CODE",{});var cMt=s(rve);S2r=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),R2r=r(P0,":"),P0.forEach(t),P2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);iM=n(Be,"LI",{});var oPe=s(iM);tve=n(oPe,"STRONG",{});var fMt=s(tve);B2r=r(fMt,"bart"),fMt.forEach(t),I2r=r(oPe," \u2014 "),pH=n(oPe,"A",{href:!0});var mMt=s(pH);q2r=r(mMt,"TFBartForConditionalGeneration"),mMt.forEach(t),N2r=r(oPe," (BART model)"),oPe.forEach(t),j2r=i(Be),dM=n(Be,"LI",{});var rPe=s(dM);ave=n(rPe,"STRONG",{});var gMt=s(ave);D2r=r(gMt,"blenderbot"),gMt.forEach(t),G2r=r(rPe," \u2014 "),uH=n(rPe,"A",{href:!0});var hMt=s(uH);O2r=r(hMt,"TFBlenderbotForConditionalGeneration"),hMt.forEach(t),V2r=r(rPe," (Blenderbot model)"),rPe.forEach(t),X2r=i(Be),cM=n(Be,"LI",{});var tPe=s(cM);nve=n(tPe,"STRONG",{});var pMt=s(nve);z2r=r(pMt,"blenderbot-small"),pMt.forEach(t),W2r=r(tPe," \u2014 "),_H=n(tPe,"A",{href:!0});var uMt=s(_H);Q2r=r(uMt,"TFBlenderbotSmallForConditionalGeneration"),uMt.forEach(t),H2r=r(tPe," (BlenderbotSmall model)"),tPe.forEach(t),U2r=i(Be),fM=n(Be,"LI",{});var aPe=s(fM);sve=n(aPe,"STRONG",{});var _Mt=s(sve);J2r=r(_Mt,"encoder-decoder"),_Mt.forEach(t),Y2r=r(aPe," \u2014 "),bH=n(aPe,"A",{href:!0});var bMt=s(bH);K2r=r(bMt,"TFEncoderDecoderModel"),bMt.forEach(t),Z2r=r(aPe," (Encoder decoder model)"),aPe.forEach(t),evr=i(Be),mM=n(Be,"LI",{});var nPe=s(mM);lve=n(nPe,"STRONG",{});var vMt=s(lve);ovr=r(vMt,"led"),vMt.forEach(t),rvr=r(nPe," \u2014 "),vH=n(nPe,"A",{href:!0});var FMt=s(vH);tvr=r(FMt,"TFLEDForConditionalGeneration"),FMt.forEach(t),avr=r(nPe," (LED model)"),nPe.forEach(t),nvr=i(Be),gM=n(Be,"LI",{});var sPe=s(gM);ive=n(sPe,"STRONG",{});var TMt=s(ive);svr=r(TMt,"marian"),TMt.forEach(t),lvr=r(sPe," \u2014 "),FH=n(sPe,"A",{href:!0});var MMt=s(FH);ivr=r(MMt,"TFMarianMTModel"),MMt.forEach(t),dvr=r(sPe," (Marian model)"),sPe.forEach(t),cvr=i(Be),hM=n(Be,"LI",{});var lPe=s(hM);dve=n(lPe,"STRONG",{});var EMt=s(dve);fvr=r(EMt,"mbart"),EMt.forEach(t),mvr=r(lPe," \u2014 "),TH=n(lPe,"A",{href:!0});var CMt=s(TH);gvr=r(CMt,"TFMBartForConditionalGeneration"),CMt.forEach(t),hvr=r(lPe," (mBART model)"),lPe.forEach(t),pvr=i(Be),pM=n(Be,"LI",{});var iPe=s(pM);cve=n(iPe,"STRONG",{});var wMt=s(cve);uvr=r(wMt,"mt5"),wMt.forEach(t),_vr=r(iPe," \u2014 "),MH=n(iPe,"A",{href:!0});var AMt=s(MH);bvr=r(AMt,"TFMT5ForConditionalGeneration"),AMt.forEach(t),vvr=r(iPe," (mT5 model)"),iPe.forEach(t),Fvr=i(Be),uM=n(Be,"LI",{});var dPe=s(uM);fve=n(dPe,"STRONG",{});var yMt=s(fve);Tvr=r(yMt,"pegasus"),yMt.forEach(t),Mvr=r(dPe," \u2014 "),EH=n(dPe,"A",{href:!0});var LMt=s(EH);Evr=r(LMt,"TFPegasusForConditionalGeneration"),LMt.forEach(t),Cvr=r(dPe," (Pegasus model)"),dPe.forEach(t),wvr=i(Be),_M=n(Be,"LI",{});var cPe=s(_M);mve=n(cPe,"STRONG",{});var xMt=s(mve);Avr=r(xMt,"t5"),xMt.forEach(t),yvr=r(cPe," \u2014 "),CH=n(cPe,"A",{href:!0});var $Mt=s(CH);Lvr=r($Mt,"TFT5ForConditionalGeneration"),$Mt.forEach(t),xvr=r(cPe," (T5 model)"),cPe.forEach(t),Be.forEach(t),$vr=i(Cl),T(bM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),lje=i(f),nc=n(f,"H2",{class:!0});var gGe=s(nc);vM=n(gGe,"A",{id:!0,class:!0,href:!0});var kMt=s(vM);gve=n(kMt,"SPAN",{});var SMt=s(gve);T(IL.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),kvr=i(gGe),hve=n(gGe,"SPAN",{});var RMt=s(hve);Svr=r(RMt,"TFAutoModelForSequenceClassification"),RMt.forEach(t),gGe.forEach(t),ije=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(qL.$$.fragment,wl),Rvr=i(wl),sc=n(wl,"P",{});var uee=s(sc);Pvr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wH=n(uee,"A",{href:!0});var PMt=s(wH);Bvr=r(PMt,"from_pretrained()"),PMt.forEach(t),Ivr=r(uee," class method or the "),AH=n(uee,"A",{href:!0});var BMt=s(AH);qvr=r(BMt,"from_config()"),BMt.forEach(t),Nvr=r(uee,` class
method.`),uee.forEach(t),jvr=i(wl),NL=n(wl,"P",{});var hGe=s(NL);Dvr=r(hGe,"This class cannot be instantiated directly using "),pve=n(hGe,"CODE",{});var IMt=s(pve);Gvr=r(IMt,"__init__()"),IMt.forEach(t),Ovr=r(hGe," (throws an error)."),hGe.forEach(t),Vvr=i(wl),Rt=n(wl,"DIV",{class:!0});var B0=s(Rt);T(jL.$$.fragment,B0),Xvr=i(B0),uve=n(B0,"P",{});var qMt=s(uve);zvr=r(qMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qMt.forEach(t),Wvr=i(B0),lc=n(B0,"P",{});var _ee=s(lc);Qvr=r(_ee,`Note:
Loading a model from its configuration file does `),_ve=n(_ee,"STRONG",{});var NMt=s(_ve);Hvr=r(NMt,"not"),NMt.forEach(t),Uvr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(_ee,"A",{href:!0});var jMt=s(yH);Jvr=r(jMt,"from_pretrained()"),jMt.forEach(t),Yvr=r(_ee," to load the model weights."),_ee.forEach(t),Kvr=i(B0),T(FM.$$.fragment,B0),B0.forEach(t),Zvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(DL.$$.fragment,Al),e3r=i(Al),bve=n(Al,"P",{});var DMt=s(bve);o3r=r(DMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DMt.forEach(t),r3r=i(Al),nn=n(Al,"P",{});var I0=s(nn);t3r=r(I0,"The model class to instantiate is selected based on the "),vve=n(I0,"CODE",{});var GMt=s(vve);a3r=r(GMt,"model_type"),GMt.forEach(t),n3r=r(I0,` property of the config object (either
passed as an argument or loaded from `),Fve=n(I0,"CODE",{});var OMt=s(Fve);s3r=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),l3r=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(I0,"CODE",{});var VMt=s(Tve);i3r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),d3r=r(I0,":"),I0.forEach(t),c3r=i(Al),oe=n(Al,"UL",{});var ae=s(oe);TM=n(ae,"LI",{});var fPe=s(TM);Mve=n(fPe,"STRONG",{});var XMt=s(Mve);f3r=r(XMt,"albert"),XMt.forEach(t),m3r=r(fPe," \u2014 "),LH=n(fPe,"A",{href:!0});var zMt=s(LH);g3r=r(zMt,"TFAlbertForSequenceClassification"),zMt.forEach(t),h3r=r(fPe," (ALBERT model)"),fPe.forEach(t),p3r=i(ae),MM=n(ae,"LI",{});var mPe=s(MM);Eve=n(mPe,"STRONG",{});var WMt=s(Eve);u3r=r(WMt,"bert"),WMt.forEach(t),_3r=r(mPe," \u2014 "),xH=n(mPe,"A",{href:!0});var QMt=s(xH);b3r=r(QMt,"TFBertForSequenceClassification"),QMt.forEach(t),v3r=r(mPe," (BERT model)"),mPe.forEach(t),F3r=i(ae),EM=n(ae,"LI",{});var gPe=s(EM);Cve=n(gPe,"STRONG",{});var HMt=s(Cve);T3r=r(HMt,"camembert"),HMt.forEach(t),M3r=r(gPe," \u2014 "),$H=n(gPe,"A",{href:!0});var UMt=s($H);E3r=r(UMt,"TFCamembertForSequenceClassification"),UMt.forEach(t),C3r=r(gPe," (CamemBERT model)"),gPe.forEach(t),w3r=i(ae),CM=n(ae,"LI",{});var hPe=s(CM);wve=n(hPe,"STRONG",{});var JMt=s(wve);A3r=r(JMt,"convbert"),JMt.forEach(t),y3r=r(hPe," \u2014 "),kH=n(hPe,"A",{href:!0});var YMt=s(kH);L3r=r(YMt,"TFConvBertForSequenceClassification"),YMt.forEach(t),x3r=r(hPe," (ConvBERT model)"),hPe.forEach(t),$3r=i(ae),wM=n(ae,"LI",{});var pPe=s(wM);Ave=n(pPe,"STRONG",{});var KMt=s(Ave);k3r=r(KMt,"ctrl"),KMt.forEach(t),S3r=r(pPe," \u2014 "),SH=n(pPe,"A",{href:!0});var ZMt=s(SH);R3r=r(ZMt,"TFCTRLForSequenceClassification"),ZMt.forEach(t),P3r=r(pPe," (CTRL model)"),pPe.forEach(t),B3r=i(ae),AM=n(ae,"LI",{});var uPe=s(AM);yve=n(uPe,"STRONG",{});var e4t=s(yve);I3r=r(e4t,"deberta"),e4t.forEach(t),q3r=r(uPe," \u2014 "),RH=n(uPe,"A",{href:!0});var o4t=s(RH);N3r=r(o4t,"TFDebertaForSequenceClassification"),o4t.forEach(t),j3r=r(uPe," (DeBERTa model)"),uPe.forEach(t),D3r=i(ae),yM=n(ae,"LI",{});var _Pe=s(yM);Lve=n(_Pe,"STRONG",{});var r4t=s(Lve);G3r=r(r4t,"deberta-v2"),r4t.forEach(t),O3r=r(_Pe," \u2014 "),PH=n(_Pe,"A",{href:!0});var t4t=s(PH);V3r=r(t4t,"TFDebertaV2ForSequenceClassification"),t4t.forEach(t),X3r=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),z3r=i(ae),LM=n(ae,"LI",{});var bPe=s(LM);xve=n(bPe,"STRONG",{});var a4t=s(xve);W3r=r(a4t,"distilbert"),a4t.forEach(t),Q3r=r(bPe," \u2014 "),BH=n(bPe,"A",{href:!0});var n4t=s(BH);H3r=r(n4t,"TFDistilBertForSequenceClassification"),n4t.forEach(t),U3r=r(bPe," (DistilBERT model)"),bPe.forEach(t),J3r=i(ae),xM=n(ae,"LI",{});var vPe=s(xM);$ve=n(vPe,"STRONG",{});var s4t=s($ve);Y3r=r(s4t,"electra"),s4t.forEach(t),K3r=r(vPe," \u2014 "),IH=n(vPe,"A",{href:!0});var l4t=s(IH);Z3r=r(l4t,"TFElectraForSequenceClassification"),l4t.forEach(t),eFr=r(vPe," (ELECTRA model)"),vPe.forEach(t),oFr=i(ae),$M=n(ae,"LI",{});var FPe=s($M);kve=n(FPe,"STRONG",{});var i4t=s(kve);rFr=r(i4t,"flaubert"),i4t.forEach(t),tFr=r(FPe," \u2014 "),qH=n(FPe,"A",{href:!0});var d4t=s(qH);aFr=r(d4t,"TFFlaubertForSequenceClassification"),d4t.forEach(t),nFr=r(FPe," (FlauBERT model)"),FPe.forEach(t),sFr=i(ae),kM=n(ae,"LI",{});var TPe=s(kM);Sve=n(TPe,"STRONG",{});var c4t=s(Sve);lFr=r(c4t,"funnel"),c4t.forEach(t),iFr=r(TPe," \u2014 "),NH=n(TPe,"A",{href:!0});var f4t=s(NH);dFr=r(f4t,"TFFunnelForSequenceClassification"),f4t.forEach(t),cFr=r(TPe," (Funnel Transformer model)"),TPe.forEach(t),fFr=i(ae),SM=n(ae,"LI",{});var MPe=s(SM);Rve=n(MPe,"STRONG",{});var m4t=s(Rve);mFr=r(m4t,"gpt2"),m4t.forEach(t),gFr=r(MPe," \u2014 "),jH=n(MPe,"A",{href:!0});var g4t=s(jH);hFr=r(g4t,"TFGPT2ForSequenceClassification"),g4t.forEach(t),pFr=r(MPe," (OpenAI GPT-2 model)"),MPe.forEach(t),uFr=i(ae),RM=n(ae,"LI",{});var EPe=s(RM);Pve=n(EPe,"STRONG",{});var h4t=s(Pve);_Fr=r(h4t,"gptj"),h4t.forEach(t),bFr=r(EPe," \u2014 "),DH=n(EPe,"A",{href:!0});var p4t=s(DH);vFr=r(p4t,"TFGPTJForSequenceClassification"),p4t.forEach(t),FFr=r(EPe," (GPT-J model)"),EPe.forEach(t),TFr=i(ae),PM=n(ae,"LI",{});var CPe=s(PM);Bve=n(CPe,"STRONG",{});var u4t=s(Bve);MFr=r(u4t,"layoutlm"),u4t.forEach(t),EFr=r(CPe," \u2014 "),GH=n(CPe,"A",{href:!0});var _4t=s(GH);CFr=r(_4t,"TFLayoutLMForSequenceClassification"),_4t.forEach(t),wFr=r(CPe," (LayoutLM model)"),CPe.forEach(t),AFr=i(ae),BM=n(ae,"LI",{});var wPe=s(BM);Ive=n(wPe,"STRONG",{});var b4t=s(Ive);yFr=r(b4t,"longformer"),b4t.forEach(t),LFr=r(wPe," \u2014 "),OH=n(wPe,"A",{href:!0});var v4t=s(OH);xFr=r(v4t,"TFLongformerForSequenceClassification"),v4t.forEach(t),$Fr=r(wPe," (Longformer model)"),wPe.forEach(t),kFr=i(ae),IM=n(ae,"LI",{});var APe=s(IM);qve=n(APe,"STRONG",{});var F4t=s(qve);SFr=r(F4t,"mobilebert"),F4t.forEach(t),RFr=r(APe," \u2014 "),VH=n(APe,"A",{href:!0});var T4t=s(VH);PFr=r(T4t,"TFMobileBertForSequenceClassification"),T4t.forEach(t),BFr=r(APe," (MobileBERT model)"),APe.forEach(t),IFr=i(ae),qM=n(ae,"LI",{});var yPe=s(qM);Nve=n(yPe,"STRONG",{});var M4t=s(Nve);qFr=r(M4t,"mpnet"),M4t.forEach(t),NFr=r(yPe," \u2014 "),XH=n(yPe,"A",{href:!0});var E4t=s(XH);jFr=r(E4t,"TFMPNetForSequenceClassification"),E4t.forEach(t),DFr=r(yPe," (MPNet model)"),yPe.forEach(t),GFr=i(ae),NM=n(ae,"LI",{});var LPe=s(NM);jve=n(LPe,"STRONG",{});var C4t=s(jve);OFr=r(C4t,"openai-gpt"),C4t.forEach(t),VFr=r(LPe," \u2014 "),zH=n(LPe,"A",{href:!0});var w4t=s(zH);XFr=r(w4t,"TFOpenAIGPTForSequenceClassification"),w4t.forEach(t),zFr=r(LPe," (OpenAI GPT model)"),LPe.forEach(t),WFr=i(ae),jM=n(ae,"LI",{});var xPe=s(jM);Dve=n(xPe,"STRONG",{});var A4t=s(Dve);QFr=r(A4t,"rembert"),A4t.forEach(t),HFr=r(xPe," \u2014 "),WH=n(xPe,"A",{href:!0});var y4t=s(WH);UFr=r(y4t,"TFRemBertForSequenceClassification"),y4t.forEach(t),JFr=r(xPe," (RemBERT model)"),xPe.forEach(t),YFr=i(ae),DM=n(ae,"LI",{});var $Pe=s(DM);Gve=n($Pe,"STRONG",{});var L4t=s(Gve);KFr=r(L4t,"roberta"),L4t.forEach(t),ZFr=r($Pe," \u2014 "),QH=n($Pe,"A",{href:!0});var x4t=s(QH);eTr=r(x4t,"TFRobertaForSequenceClassification"),x4t.forEach(t),oTr=r($Pe," (RoBERTa model)"),$Pe.forEach(t),rTr=i(ae),GM=n(ae,"LI",{});var kPe=s(GM);Ove=n(kPe,"STRONG",{});var $4t=s(Ove);tTr=r($4t,"roformer"),$4t.forEach(t),aTr=r(kPe," \u2014 "),HH=n(kPe,"A",{href:!0});var k4t=s(HH);nTr=r(k4t,"TFRoFormerForSequenceClassification"),k4t.forEach(t),sTr=r(kPe," (RoFormer model)"),kPe.forEach(t),lTr=i(ae),OM=n(ae,"LI",{});var SPe=s(OM);Vve=n(SPe,"STRONG",{});var S4t=s(Vve);iTr=r(S4t,"tapas"),S4t.forEach(t),dTr=r(SPe," \u2014 "),UH=n(SPe,"A",{href:!0});var R4t=s(UH);cTr=r(R4t,"TFTapasForSequenceClassification"),R4t.forEach(t),fTr=r(SPe," (TAPAS model)"),SPe.forEach(t),mTr=i(ae),VM=n(ae,"LI",{});var RPe=s(VM);Xve=n(RPe,"STRONG",{});var P4t=s(Xve);gTr=r(P4t,"transfo-xl"),P4t.forEach(t),hTr=r(RPe," \u2014 "),JH=n(RPe,"A",{href:!0});var B4t=s(JH);pTr=r(B4t,"TFTransfoXLForSequenceClassification"),B4t.forEach(t),uTr=r(RPe," (Transformer-XL model)"),RPe.forEach(t),_Tr=i(ae),XM=n(ae,"LI",{});var PPe=s(XM);zve=n(PPe,"STRONG",{});var I4t=s(zve);bTr=r(I4t,"xlm"),I4t.forEach(t),vTr=r(PPe," \u2014 "),YH=n(PPe,"A",{href:!0});var q4t=s(YH);FTr=r(q4t,"TFXLMForSequenceClassification"),q4t.forEach(t),TTr=r(PPe," (XLM model)"),PPe.forEach(t),MTr=i(ae),zM=n(ae,"LI",{});var BPe=s(zM);Wve=n(BPe,"STRONG",{});var N4t=s(Wve);ETr=r(N4t,"xlm-roberta"),N4t.forEach(t),CTr=r(BPe," \u2014 "),KH=n(BPe,"A",{href:!0});var j4t=s(KH);wTr=r(j4t,"TFXLMRobertaForSequenceClassification"),j4t.forEach(t),ATr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),yTr=i(ae),WM=n(ae,"LI",{});var IPe=s(WM);Qve=n(IPe,"STRONG",{});var D4t=s(Qve);LTr=r(D4t,"xlnet"),D4t.forEach(t),xTr=r(IPe," \u2014 "),ZH=n(IPe,"A",{href:!0});var G4t=s(ZH);$Tr=r(G4t,"TFXLNetForSequenceClassification"),G4t.forEach(t),kTr=r(IPe," (XLNet model)"),IPe.forEach(t),ae.forEach(t),STr=i(Al),T(QM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),dje=i(f),ic=n(f,"H2",{class:!0});var pGe=s(ic);HM=n(pGe,"A",{id:!0,class:!0,href:!0});var O4t=s(HM);Hve=n(O4t,"SPAN",{});var V4t=s(Hve);T(GL.$$.fragment,V4t),V4t.forEach(t),O4t.forEach(t),RTr=i(pGe),Uve=n(pGe,"SPAN",{});var X4t=s(Uve);PTr=r(X4t,"TFAutoModelForMultipleChoice"),X4t.forEach(t),pGe.forEach(t),cje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(OL.$$.fragment,yl),BTr=i(yl),dc=n(yl,"P",{});var bee=s(dc);ITr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eU=n(bee,"A",{href:!0});var z4t=s(eU);qTr=r(z4t,"from_pretrained()"),z4t.forEach(t),NTr=r(bee," class method or the "),oU=n(bee,"A",{href:!0});var W4t=s(oU);jTr=r(W4t,"from_config()"),W4t.forEach(t),DTr=r(bee,` class
method.`),bee.forEach(t),GTr=i(yl),VL=n(yl,"P",{});var uGe=s(VL);OTr=r(uGe,"This class cannot be instantiated directly using "),Jve=n(uGe,"CODE",{});var Q4t=s(Jve);VTr=r(Q4t,"__init__()"),Q4t.forEach(t),XTr=r(uGe," (throws an error)."),uGe.forEach(t),zTr=i(yl),Pt=n(yl,"DIV",{class:!0});var q0=s(Pt);T(XL.$$.fragment,q0),WTr=i(q0),Yve=n(q0,"P",{});var H4t=s(Yve);QTr=r(H4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H4t.forEach(t),HTr=i(q0),cc=n(q0,"P",{});var vee=s(cc);UTr=r(vee,`Note:
Loading a model from its configuration file does `),Kve=n(vee,"STRONG",{});var U4t=s(Kve);JTr=r(U4t,"not"),U4t.forEach(t),YTr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(vee,"A",{href:!0});var J4t=s(rU);KTr=r(J4t,"from_pretrained()"),J4t.forEach(t),ZTr=r(vee," to load the model weights."),vee.forEach(t),e7r=i(q0),T(UM.$$.fragment,q0),q0.forEach(t),o7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(zL.$$.fragment,Ll),r7r=i(Ll),Zve=n(Ll,"P",{});var Y4t=s(Zve);t7r=r(Y4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Y4t.forEach(t),a7r=i(Ll),sn=n(Ll,"P",{});var N0=s(sn);n7r=r(N0,"The model class to instantiate is selected based on the "),e3e=n(N0,"CODE",{});var K4t=s(e3e);s7r=r(K4t,"model_type"),K4t.forEach(t),l7r=r(N0,` property of the config object (either
passed as an argument or loaded from `),o3e=n(N0,"CODE",{});var Z4t=s(o3e);i7r=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),d7r=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=n(N0,"CODE",{});var eEt=s(r3e);c7r=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),f7r=r(N0,":"),N0.forEach(t),m7r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);JM=n(be,"LI",{});var qPe=s(JM);t3e=n(qPe,"STRONG",{});var oEt=s(t3e);g7r=r(oEt,"albert"),oEt.forEach(t),h7r=r(qPe," \u2014 "),tU=n(qPe,"A",{href:!0});var rEt=s(tU);p7r=r(rEt,"TFAlbertForMultipleChoice"),rEt.forEach(t),u7r=r(qPe," (ALBERT model)"),qPe.forEach(t),_7r=i(be),YM=n(be,"LI",{});var NPe=s(YM);a3e=n(NPe,"STRONG",{});var tEt=s(a3e);b7r=r(tEt,"bert"),tEt.forEach(t),v7r=r(NPe," \u2014 "),aU=n(NPe,"A",{href:!0});var aEt=s(aU);F7r=r(aEt,"TFBertForMultipleChoice"),aEt.forEach(t),T7r=r(NPe," (BERT model)"),NPe.forEach(t),M7r=i(be),KM=n(be,"LI",{});var jPe=s(KM);n3e=n(jPe,"STRONG",{});var nEt=s(n3e);E7r=r(nEt,"camembert"),nEt.forEach(t),C7r=r(jPe," \u2014 "),nU=n(jPe,"A",{href:!0});var sEt=s(nU);w7r=r(sEt,"TFCamembertForMultipleChoice"),sEt.forEach(t),A7r=r(jPe," (CamemBERT model)"),jPe.forEach(t),y7r=i(be),ZM=n(be,"LI",{});var DPe=s(ZM);s3e=n(DPe,"STRONG",{});var lEt=s(s3e);L7r=r(lEt,"convbert"),lEt.forEach(t),x7r=r(DPe," \u2014 "),sU=n(DPe,"A",{href:!0});var iEt=s(sU);$7r=r(iEt,"TFConvBertForMultipleChoice"),iEt.forEach(t),k7r=r(DPe," (ConvBERT model)"),DPe.forEach(t),S7r=i(be),e4=n(be,"LI",{});var GPe=s(e4);l3e=n(GPe,"STRONG",{});var dEt=s(l3e);R7r=r(dEt,"distilbert"),dEt.forEach(t),P7r=r(GPe," \u2014 "),lU=n(GPe,"A",{href:!0});var cEt=s(lU);B7r=r(cEt,"TFDistilBertForMultipleChoice"),cEt.forEach(t),I7r=r(GPe," (DistilBERT model)"),GPe.forEach(t),q7r=i(be),o4=n(be,"LI",{});var OPe=s(o4);i3e=n(OPe,"STRONG",{});var fEt=s(i3e);N7r=r(fEt,"electra"),fEt.forEach(t),j7r=r(OPe," \u2014 "),iU=n(OPe,"A",{href:!0});var mEt=s(iU);D7r=r(mEt,"TFElectraForMultipleChoice"),mEt.forEach(t),G7r=r(OPe," (ELECTRA model)"),OPe.forEach(t),O7r=i(be),r4=n(be,"LI",{});var VPe=s(r4);d3e=n(VPe,"STRONG",{});var gEt=s(d3e);V7r=r(gEt,"flaubert"),gEt.forEach(t),X7r=r(VPe," \u2014 "),dU=n(VPe,"A",{href:!0});var hEt=s(dU);z7r=r(hEt,"TFFlaubertForMultipleChoice"),hEt.forEach(t),W7r=r(VPe," (FlauBERT model)"),VPe.forEach(t),Q7r=i(be),t4=n(be,"LI",{});var XPe=s(t4);c3e=n(XPe,"STRONG",{});var pEt=s(c3e);H7r=r(pEt,"funnel"),pEt.forEach(t),U7r=r(XPe," \u2014 "),cU=n(XPe,"A",{href:!0});var uEt=s(cU);J7r=r(uEt,"TFFunnelForMultipleChoice"),uEt.forEach(t),Y7r=r(XPe," (Funnel Transformer model)"),XPe.forEach(t),K7r=i(be),a4=n(be,"LI",{});var zPe=s(a4);f3e=n(zPe,"STRONG",{});var _Et=s(f3e);Z7r=r(_Et,"longformer"),_Et.forEach(t),eMr=r(zPe," \u2014 "),fU=n(zPe,"A",{href:!0});var bEt=s(fU);oMr=r(bEt,"TFLongformerForMultipleChoice"),bEt.forEach(t),rMr=r(zPe," (Longformer model)"),zPe.forEach(t),tMr=i(be),n4=n(be,"LI",{});var WPe=s(n4);m3e=n(WPe,"STRONG",{});var vEt=s(m3e);aMr=r(vEt,"mobilebert"),vEt.forEach(t),nMr=r(WPe," \u2014 "),mU=n(WPe,"A",{href:!0});var FEt=s(mU);sMr=r(FEt,"TFMobileBertForMultipleChoice"),FEt.forEach(t),lMr=r(WPe," (MobileBERT model)"),WPe.forEach(t),iMr=i(be),s4=n(be,"LI",{});var QPe=s(s4);g3e=n(QPe,"STRONG",{});var TEt=s(g3e);dMr=r(TEt,"mpnet"),TEt.forEach(t),cMr=r(QPe," \u2014 "),gU=n(QPe,"A",{href:!0});var MEt=s(gU);fMr=r(MEt,"TFMPNetForMultipleChoice"),MEt.forEach(t),mMr=r(QPe," (MPNet model)"),QPe.forEach(t),gMr=i(be),l4=n(be,"LI",{});var HPe=s(l4);h3e=n(HPe,"STRONG",{});var EEt=s(h3e);hMr=r(EEt,"rembert"),EEt.forEach(t),pMr=r(HPe," \u2014 "),hU=n(HPe,"A",{href:!0});var CEt=s(hU);uMr=r(CEt,"TFRemBertForMultipleChoice"),CEt.forEach(t),_Mr=r(HPe," (RemBERT model)"),HPe.forEach(t),bMr=i(be),i4=n(be,"LI",{});var UPe=s(i4);p3e=n(UPe,"STRONG",{});var wEt=s(p3e);vMr=r(wEt,"roberta"),wEt.forEach(t),FMr=r(UPe," \u2014 "),pU=n(UPe,"A",{href:!0});var AEt=s(pU);TMr=r(AEt,"TFRobertaForMultipleChoice"),AEt.forEach(t),MMr=r(UPe," (RoBERTa model)"),UPe.forEach(t),EMr=i(be),d4=n(be,"LI",{});var JPe=s(d4);u3e=n(JPe,"STRONG",{});var yEt=s(u3e);CMr=r(yEt,"roformer"),yEt.forEach(t),wMr=r(JPe," \u2014 "),uU=n(JPe,"A",{href:!0});var LEt=s(uU);AMr=r(LEt,"TFRoFormerForMultipleChoice"),LEt.forEach(t),yMr=r(JPe," (RoFormer model)"),JPe.forEach(t),LMr=i(be),c4=n(be,"LI",{});var YPe=s(c4);_3e=n(YPe,"STRONG",{});var xEt=s(_3e);xMr=r(xEt,"xlm"),xEt.forEach(t),$Mr=r(YPe," \u2014 "),_U=n(YPe,"A",{href:!0});var $Et=s(_U);kMr=r($Et,"TFXLMForMultipleChoice"),$Et.forEach(t),SMr=r(YPe," (XLM model)"),YPe.forEach(t),RMr=i(be),f4=n(be,"LI",{});var KPe=s(f4);b3e=n(KPe,"STRONG",{});var kEt=s(b3e);PMr=r(kEt,"xlm-roberta"),kEt.forEach(t),BMr=r(KPe," \u2014 "),bU=n(KPe,"A",{href:!0});var SEt=s(bU);IMr=r(SEt,"TFXLMRobertaForMultipleChoice"),SEt.forEach(t),qMr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),NMr=i(be),m4=n(be,"LI",{});var ZPe=s(m4);v3e=n(ZPe,"STRONG",{});var REt=s(v3e);jMr=r(REt,"xlnet"),REt.forEach(t),DMr=r(ZPe," \u2014 "),vU=n(ZPe,"A",{href:!0});var PEt=s(vU);GMr=r(PEt,"TFXLNetForMultipleChoice"),PEt.forEach(t),OMr=r(ZPe," (XLNet model)"),ZPe.forEach(t),be.forEach(t),VMr=i(Ll),T(g4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),fje=i(f),fc=n(f,"H2",{class:!0});var _Ge=s(fc);h4=n(_Ge,"A",{id:!0,class:!0,href:!0});var BEt=s(h4);F3e=n(BEt,"SPAN",{});var IEt=s(F3e);T(WL.$$.fragment,IEt),IEt.forEach(t),BEt.forEach(t),XMr=i(_Ge),T3e=n(_Ge,"SPAN",{});var qEt=s(T3e);zMr=r(qEt,"TFAutoModelForNextSentencePrediction"),qEt.forEach(t),_Ge.forEach(t),mje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(QL.$$.fragment,xl),WMr=i(xl),mc=n(xl,"P",{});var Fee=s(mc);QMr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FU=n(Fee,"A",{href:!0});var NEt=s(FU);HMr=r(NEt,"from_pretrained()"),NEt.forEach(t),UMr=r(Fee," class method or the "),TU=n(Fee,"A",{href:!0});var jEt=s(TU);JMr=r(jEt,"from_config()"),jEt.forEach(t),YMr=r(Fee,` class
method.`),Fee.forEach(t),KMr=i(xl),HL=n(xl,"P",{});var bGe=s(HL);ZMr=r(bGe,"This class cannot be instantiated directly using "),M3e=n(bGe,"CODE",{});var DEt=s(M3e);e4r=r(DEt,"__init__()"),DEt.forEach(t),o4r=r(bGe," (throws an error)."),bGe.forEach(t),r4r=i(xl),Bt=n(xl,"DIV",{class:!0});var j0=s(Bt);T(UL.$$.fragment,j0),t4r=i(j0),E3e=n(j0,"P",{});var GEt=s(E3e);a4r=r(GEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GEt.forEach(t),n4r=i(j0),gc=n(j0,"P",{});var Tee=s(gc);s4r=r(Tee,`Note:
Loading a model from its configuration file does `),C3e=n(Tee,"STRONG",{});var OEt=s(C3e);l4r=r(OEt,"not"),OEt.forEach(t),i4r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Tee,"A",{href:!0});var VEt=s(MU);d4r=r(VEt,"from_pretrained()"),VEt.forEach(t),c4r=r(Tee," to load the model weights."),Tee.forEach(t),f4r=i(j0),T(p4.$$.fragment,j0),j0.forEach(t),m4r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(JL.$$.fragment,$l),g4r=i($l),w3e=n($l,"P",{});var XEt=s(w3e);h4r=r(XEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XEt.forEach(t),p4r=i($l),ln=n($l,"P",{});var D0=s(ln);u4r=r(D0,"The model class to instantiate is selected based on the "),A3e=n(D0,"CODE",{});var zEt=s(A3e);_4r=r(zEt,"model_type"),zEt.forEach(t),b4r=r(D0,` property of the config object (either
passed as an argument or loaded from `),y3e=n(D0,"CODE",{});var WEt=s(y3e);v4r=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),F4r=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(D0,"CODE",{});var QEt=s(L3e);T4r=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),M4r=r(D0,":"),D0.forEach(t),E4r=i($l),YL=n($l,"UL",{});var vGe=s(YL);u4=n(vGe,"LI",{});var eBe=s(u4);x3e=n(eBe,"STRONG",{});var HEt=s(x3e);C4r=r(HEt,"bert"),HEt.forEach(t),w4r=r(eBe," \u2014 "),EU=n(eBe,"A",{href:!0});var UEt=s(EU);A4r=r(UEt,"TFBertForNextSentencePrediction"),UEt.forEach(t),y4r=r(eBe," (BERT model)"),eBe.forEach(t),L4r=i(vGe),_4=n(vGe,"LI",{});var oBe=s(_4);$3e=n(oBe,"STRONG",{});var JEt=s($3e);x4r=r(JEt,"mobilebert"),JEt.forEach(t),$4r=r(oBe," \u2014 "),CU=n(oBe,"A",{href:!0});var YEt=s(CU);k4r=r(YEt,"TFMobileBertForNextSentencePrediction"),YEt.forEach(t),S4r=r(oBe," (MobileBERT model)"),oBe.forEach(t),vGe.forEach(t),R4r=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),gje=i(f),hc=n(f,"H2",{class:!0});var FGe=s(hc);v4=n(FGe,"A",{id:!0,class:!0,href:!0});var KEt=s(v4);k3e=n(KEt,"SPAN",{});var ZEt=s(k3e);T(KL.$$.fragment,ZEt),ZEt.forEach(t),KEt.forEach(t),P4r=i(FGe),S3e=n(FGe,"SPAN",{});var eCt=s(S3e);B4r=r(eCt,"TFAutoModelForTableQuestionAnswering"),eCt.forEach(t),FGe.forEach(t),hje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(ZL.$$.fragment,kl),I4r=i(kl),pc=n(kl,"P",{});var Mee=s(pc);q4r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wU=n(Mee,"A",{href:!0});var oCt=s(wU);N4r=r(oCt,"from_pretrained()"),oCt.forEach(t),j4r=r(Mee," class method or the "),AU=n(Mee,"A",{href:!0});var rCt=s(AU);D4r=r(rCt,"from_config()"),rCt.forEach(t),G4r=r(Mee,` class
method.`),Mee.forEach(t),O4r=i(kl),e9=n(kl,"P",{});var TGe=s(e9);V4r=r(TGe,"This class cannot be instantiated directly using "),R3e=n(TGe,"CODE",{});var tCt=s(R3e);X4r=r(tCt,"__init__()"),tCt.forEach(t),z4r=r(TGe," (throws an error)."),TGe.forEach(t),W4r=i(kl),It=n(kl,"DIV",{class:!0});var G0=s(It);T(o9.$$.fragment,G0),Q4r=i(G0),P3e=n(G0,"P",{});var aCt=s(P3e);H4r=r(aCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aCt.forEach(t),U4r=i(G0),uc=n(G0,"P",{});var Eee=s(uc);J4r=r(Eee,`Note:
Loading a model from its configuration file does `),B3e=n(Eee,"STRONG",{});var nCt=s(B3e);Y4r=r(nCt,"not"),nCt.forEach(t),K4r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(Eee,"A",{href:!0});var sCt=s(yU);Z4r=r(sCt,"from_pretrained()"),sCt.forEach(t),eEr=r(Eee," to load the model weights."),Eee.forEach(t),oEr=i(G0),T(F4.$$.fragment,G0),G0.forEach(t),rEr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(r9.$$.fragment,Sl),tEr=i(Sl),I3e=n(Sl,"P",{});var lCt=s(I3e);aEr=r(lCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lCt.forEach(t),nEr=i(Sl),dn=n(Sl,"P",{});var O0=s(dn);sEr=r(O0,"The model class to instantiate is selected based on the "),q3e=n(O0,"CODE",{});var iCt=s(q3e);lEr=r(iCt,"model_type"),iCt.forEach(t),iEr=r(O0,` property of the config object (either
passed as an argument or loaded from `),N3e=n(O0,"CODE",{});var dCt=s(N3e);dEr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),cEr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(O0,"CODE",{});var cCt=s(j3e);fEr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),mEr=r(O0,":"),O0.forEach(t),gEr=i(Sl),D3e=n(Sl,"UL",{});var fCt=s(D3e);T4=n(fCt,"LI",{});var rBe=s(T4);G3e=n(rBe,"STRONG",{});var mCt=s(G3e);hEr=r(mCt,"tapas"),mCt.forEach(t),pEr=r(rBe," \u2014 "),LU=n(rBe,"A",{href:!0});var gCt=s(LU);uEr=r(gCt,"TFTapasForQuestionAnswering"),gCt.forEach(t),_Er=r(rBe," (TAPAS model)"),rBe.forEach(t),fCt.forEach(t),bEr=i(Sl),T(M4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),pje=i(f),_c=n(f,"H2",{class:!0});var MGe=s(_c);E4=n(MGe,"A",{id:!0,class:!0,href:!0});var hCt=s(E4);O3e=n(hCt,"SPAN",{});var pCt=s(O3e);T(t9.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),vEr=i(MGe),V3e=n(MGe,"SPAN",{});var uCt=s(V3e);FEr=r(uCt,"TFAutoModelForTokenClassification"),uCt.forEach(t),MGe.forEach(t),uje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(a9.$$.fragment,Rl),TEr=i(Rl),bc=n(Rl,"P",{});var Cee=s(bc);MEr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xU=n(Cee,"A",{href:!0});var _Ct=s(xU);EEr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),CEr=r(Cee," class method or the "),$U=n(Cee,"A",{href:!0});var bCt=s($U);wEr=r(bCt,"from_config()"),bCt.forEach(t),AEr=r(Cee,` class
method.`),Cee.forEach(t),yEr=i(Rl),n9=n(Rl,"P",{});var EGe=s(n9);LEr=r(EGe,"This class cannot be instantiated directly using "),X3e=n(EGe,"CODE",{});var vCt=s(X3e);xEr=r(vCt,"__init__()"),vCt.forEach(t),$Er=r(EGe," (throws an error)."),EGe.forEach(t),kEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var V0=s(qt);T(s9.$$.fragment,V0),SEr=i(V0),z3e=n(V0,"P",{});var FCt=s(z3e);REr=r(FCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FCt.forEach(t),PEr=i(V0),vc=n(V0,"P",{});var wee=s(vc);BEr=r(wee,`Note:
Loading a model from its configuration file does `),W3e=n(wee,"STRONG",{});var TCt=s(W3e);IEr=r(TCt,"not"),TCt.forEach(t),qEr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(wee,"A",{href:!0});var MCt=s(kU);NEr=r(MCt,"from_pretrained()"),MCt.forEach(t),jEr=r(wee," to load the model weights."),wee.forEach(t),DEr=i(V0),T(C4.$$.fragment,V0),V0.forEach(t),GEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(l9.$$.fragment,Pl),OEr=i(Pl),Q3e=n(Pl,"P",{});var ECt=s(Q3e);VEr=r(ECt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ECt.forEach(t),XEr=i(Pl),cn=n(Pl,"P",{});var X0=s(cn);zEr=r(X0,"The model class to instantiate is selected based on the "),H3e=n(X0,"CODE",{});var CCt=s(H3e);WEr=r(CCt,"model_type"),CCt.forEach(t),QEr=r(X0,` property of the config object (either
passed as an argument or loaded from `),U3e=n(X0,"CODE",{});var wCt=s(U3e);HEr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),UEr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(X0,"CODE",{});var ACt=s(J3e);JEr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),YEr=r(X0,":"),X0.forEach(t),KEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);w4=n(me,"LI",{});var tBe=s(w4);Y3e=n(tBe,"STRONG",{});var yCt=s(Y3e);ZEr=r(yCt,"albert"),yCt.forEach(t),eCr=r(tBe," \u2014 "),SU=n(tBe,"A",{href:!0});var LCt=s(SU);oCr=r(LCt,"TFAlbertForTokenClassification"),LCt.forEach(t),rCr=r(tBe," (ALBERT model)"),tBe.forEach(t),tCr=i(me),A4=n(me,"LI",{});var aBe=s(A4);K3e=n(aBe,"STRONG",{});var xCt=s(K3e);aCr=r(xCt,"bert"),xCt.forEach(t),nCr=r(aBe," \u2014 "),RU=n(aBe,"A",{href:!0});var $Ct=s(RU);sCr=r($Ct,"TFBertForTokenClassification"),$Ct.forEach(t),lCr=r(aBe," (BERT model)"),aBe.forEach(t),iCr=i(me),y4=n(me,"LI",{});var nBe=s(y4);Z3e=n(nBe,"STRONG",{});var kCt=s(Z3e);dCr=r(kCt,"camembert"),kCt.forEach(t),cCr=r(nBe," \u2014 "),PU=n(nBe,"A",{href:!0});var SCt=s(PU);fCr=r(SCt,"TFCamembertForTokenClassification"),SCt.forEach(t),mCr=r(nBe," (CamemBERT model)"),nBe.forEach(t),gCr=i(me),L4=n(me,"LI",{});var sBe=s(L4);eFe=n(sBe,"STRONG",{});var RCt=s(eFe);hCr=r(RCt,"convbert"),RCt.forEach(t),pCr=r(sBe," \u2014 "),BU=n(sBe,"A",{href:!0});var PCt=s(BU);uCr=r(PCt,"TFConvBertForTokenClassification"),PCt.forEach(t),_Cr=r(sBe," (ConvBERT model)"),sBe.forEach(t),bCr=i(me),x4=n(me,"LI",{});var lBe=s(x4);oFe=n(lBe,"STRONG",{});var BCt=s(oFe);vCr=r(BCt,"deberta"),BCt.forEach(t),FCr=r(lBe," \u2014 "),IU=n(lBe,"A",{href:!0});var ICt=s(IU);TCr=r(ICt,"TFDebertaForTokenClassification"),ICt.forEach(t),MCr=r(lBe," (DeBERTa model)"),lBe.forEach(t),ECr=i(me),$4=n(me,"LI",{});var iBe=s($4);rFe=n(iBe,"STRONG",{});var qCt=s(rFe);CCr=r(qCt,"deberta-v2"),qCt.forEach(t),wCr=r(iBe," \u2014 "),qU=n(iBe,"A",{href:!0});var NCt=s(qU);ACr=r(NCt,"TFDebertaV2ForTokenClassification"),NCt.forEach(t),yCr=r(iBe," (DeBERTa-v2 model)"),iBe.forEach(t),LCr=i(me),k4=n(me,"LI",{});var dBe=s(k4);tFe=n(dBe,"STRONG",{});var jCt=s(tFe);xCr=r(jCt,"distilbert"),jCt.forEach(t),$Cr=r(dBe," \u2014 "),NU=n(dBe,"A",{href:!0});var DCt=s(NU);kCr=r(DCt,"TFDistilBertForTokenClassification"),DCt.forEach(t),SCr=r(dBe," (DistilBERT model)"),dBe.forEach(t),RCr=i(me),S4=n(me,"LI",{});var cBe=s(S4);aFe=n(cBe,"STRONG",{});var GCt=s(aFe);PCr=r(GCt,"electra"),GCt.forEach(t),BCr=r(cBe," \u2014 "),jU=n(cBe,"A",{href:!0});var OCt=s(jU);ICr=r(OCt,"TFElectraForTokenClassification"),OCt.forEach(t),qCr=r(cBe," (ELECTRA model)"),cBe.forEach(t),NCr=i(me),R4=n(me,"LI",{});var fBe=s(R4);nFe=n(fBe,"STRONG",{});var VCt=s(nFe);jCr=r(VCt,"flaubert"),VCt.forEach(t),DCr=r(fBe," \u2014 "),DU=n(fBe,"A",{href:!0});var XCt=s(DU);GCr=r(XCt,"TFFlaubertForTokenClassification"),XCt.forEach(t),OCr=r(fBe," (FlauBERT model)"),fBe.forEach(t),VCr=i(me),P4=n(me,"LI",{});var mBe=s(P4);sFe=n(mBe,"STRONG",{});var zCt=s(sFe);XCr=r(zCt,"funnel"),zCt.forEach(t),zCr=r(mBe," \u2014 "),GU=n(mBe,"A",{href:!0});var WCt=s(GU);WCr=r(WCt,"TFFunnelForTokenClassification"),WCt.forEach(t),QCr=r(mBe," (Funnel Transformer model)"),mBe.forEach(t),HCr=i(me),B4=n(me,"LI",{});var gBe=s(B4);lFe=n(gBe,"STRONG",{});var QCt=s(lFe);UCr=r(QCt,"layoutlm"),QCt.forEach(t),JCr=r(gBe," \u2014 "),OU=n(gBe,"A",{href:!0});var HCt=s(OU);YCr=r(HCt,"TFLayoutLMForTokenClassification"),HCt.forEach(t),KCr=r(gBe," (LayoutLM model)"),gBe.forEach(t),ZCr=i(me),I4=n(me,"LI",{});var hBe=s(I4);iFe=n(hBe,"STRONG",{});var UCt=s(iFe);e5r=r(UCt,"longformer"),UCt.forEach(t),o5r=r(hBe," \u2014 "),VU=n(hBe,"A",{href:!0});var JCt=s(VU);r5r=r(JCt,"TFLongformerForTokenClassification"),JCt.forEach(t),t5r=r(hBe," (Longformer model)"),hBe.forEach(t),a5r=i(me),q4=n(me,"LI",{});var pBe=s(q4);dFe=n(pBe,"STRONG",{});var YCt=s(dFe);n5r=r(YCt,"mobilebert"),YCt.forEach(t),s5r=r(pBe," \u2014 "),XU=n(pBe,"A",{href:!0});var KCt=s(XU);l5r=r(KCt,"TFMobileBertForTokenClassification"),KCt.forEach(t),i5r=r(pBe," (MobileBERT model)"),pBe.forEach(t),d5r=i(me),N4=n(me,"LI",{});var uBe=s(N4);cFe=n(uBe,"STRONG",{});var ZCt=s(cFe);c5r=r(ZCt,"mpnet"),ZCt.forEach(t),f5r=r(uBe," \u2014 "),zU=n(uBe,"A",{href:!0});var e5t=s(zU);m5r=r(e5t,"TFMPNetForTokenClassification"),e5t.forEach(t),g5r=r(uBe," (MPNet model)"),uBe.forEach(t),h5r=i(me),j4=n(me,"LI",{});var _Be=s(j4);fFe=n(_Be,"STRONG",{});var o5t=s(fFe);p5r=r(o5t,"rembert"),o5t.forEach(t),u5r=r(_Be," \u2014 "),WU=n(_Be,"A",{href:!0});var r5t=s(WU);_5r=r(r5t,"TFRemBertForTokenClassification"),r5t.forEach(t),b5r=r(_Be," (RemBERT model)"),_Be.forEach(t),v5r=i(me),D4=n(me,"LI",{});var bBe=s(D4);mFe=n(bBe,"STRONG",{});var t5t=s(mFe);F5r=r(t5t,"roberta"),t5t.forEach(t),T5r=r(bBe," \u2014 "),QU=n(bBe,"A",{href:!0});var a5t=s(QU);M5r=r(a5t,"TFRobertaForTokenClassification"),a5t.forEach(t),E5r=r(bBe," (RoBERTa model)"),bBe.forEach(t),C5r=i(me),G4=n(me,"LI",{});var vBe=s(G4);gFe=n(vBe,"STRONG",{});var n5t=s(gFe);w5r=r(n5t,"roformer"),n5t.forEach(t),A5r=r(vBe," \u2014 "),HU=n(vBe,"A",{href:!0});var s5t=s(HU);y5r=r(s5t,"TFRoFormerForTokenClassification"),s5t.forEach(t),L5r=r(vBe," (RoFormer model)"),vBe.forEach(t),x5r=i(me),O4=n(me,"LI",{});var FBe=s(O4);hFe=n(FBe,"STRONG",{});var l5t=s(hFe);$5r=r(l5t,"xlm"),l5t.forEach(t),k5r=r(FBe," \u2014 "),UU=n(FBe,"A",{href:!0});var i5t=s(UU);S5r=r(i5t,"TFXLMForTokenClassification"),i5t.forEach(t),R5r=r(FBe," (XLM model)"),FBe.forEach(t),P5r=i(me),V4=n(me,"LI",{});var TBe=s(V4);pFe=n(TBe,"STRONG",{});var d5t=s(pFe);B5r=r(d5t,"xlm-roberta"),d5t.forEach(t),I5r=r(TBe," \u2014 "),JU=n(TBe,"A",{href:!0});var c5t=s(JU);q5r=r(c5t,"TFXLMRobertaForTokenClassification"),c5t.forEach(t),N5r=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),j5r=i(me),X4=n(me,"LI",{});var MBe=s(X4);uFe=n(MBe,"STRONG",{});var f5t=s(uFe);D5r=r(f5t,"xlnet"),f5t.forEach(t),G5r=r(MBe," \u2014 "),YU=n(MBe,"A",{href:!0});var m5t=s(YU);O5r=r(m5t,"TFXLNetForTokenClassification"),m5t.forEach(t),V5r=r(MBe," (XLNet model)"),MBe.forEach(t),me.forEach(t),X5r=i(Pl),T(z4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),_je=i(f),Fc=n(f,"H2",{class:!0});var CGe=s(Fc);W4=n(CGe,"A",{id:!0,class:!0,href:!0});var g5t=s(W4);_Fe=n(g5t,"SPAN",{});var h5t=s(_Fe);T(i9.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),z5r=i(CGe),bFe=n(CGe,"SPAN",{});var p5t=s(bFe);W5r=r(p5t,"TFAutoModelForQuestionAnswering"),p5t.forEach(t),CGe.forEach(t),bje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(d9.$$.fragment,Bl),Q5r=i(Bl),Tc=n(Bl,"P",{});var Aee=s(Tc);H5r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KU=n(Aee,"A",{href:!0});var u5t=s(KU);U5r=r(u5t,"from_pretrained()"),u5t.forEach(t),J5r=r(Aee," class method or the "),ZU=n(Aee,"A",{href:!0});var _5t=s(ZU);Y5r=r(_5t,"from_config()"),_5t.forEach(t),K5r=r(Aee,` class
method.`),Aee.forEach(t),Z5r=i(Bl),c9=n(Bl,"P",{});var wGe=s(c9);ewr=r(wGe,"This class cannot be instantiated directly using "),vFe=n(wGe,"CODE",{});var b5t=s(vFe);owr=r(b5t,"__init__()"),b5t.forEach(t),rwr=r(wGe," (throws an error)."),wGe.forEach(t),twr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var z0=s(Nt);T(f9.$$.fragment,z0),awr=i(z0),FFe=n(z0,"P",{});var v5t=s(FFe);nwr=r(v5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v5t.forEach(t),swr=i(z0),Mc=n(z0,"P",{});var yee=s(Mc);lwr=r(yee,`Note:
Loading a model from its configuration file does `),TFe=n(yee,"STRONG",{});var F5t=s(TFe);iwr=r(F5t,"not"),F5t.forEach(t),dwr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(yee,"A",{href:!0});var T5t=s(eJ);cwr=r(T5t,"from_pretrained()"),T5t.forEach(t),fwr=r(yee," to load the model weights."),yee.forEach(t),mwr=i(z0),T(Q4.$$.fragment,z0),z0.forEach(t),gwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(m9.$$.fragment,Il),hwr=i(Il),MFe=n(Il,"P",{});var M5t=s(MFe);pwr=r(M5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M5t.forEach(t),uwr=i(Il),fn=n(Il,"P",{});var W0=s(fn);_wr=r(W0,"The model class to instantiate is selected based on the "),EFe=n(W0,"CODE",{});var E5t=s(EFe);bwr=r(E5t,"model_type"),E5t.forEach(t),vwr=r(W0,` property of the config object (either
passed as an argument or loaded from `),CFe=n(W0,"CODE",{});var C5t=s(CFe);Fwr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),Twr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(W0,"CODE",{});var w5t=s(wFe);Mwr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Ewr=r(W0,":"),W0.forEach(t),Cwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);H4=n(ge,"LI",{});var EBe=s(H4);AFe=n(EBe,"STRONG",{});var A5t=s(AFe);wwr=r(A5t,"albert"),A5t.forEach(t),Awr=r(EBe," \u2014 "),oJ=n(EBe,"A",{href:!0});var y5t=s(oJ);ywr=r(y5t,"TFAlbertForQuestionAnswering"),y5t.forEach(t),Lwr=r(EBe," (ALBERT model)"),EBe.forEach(t),xwr=i(ge),U4=n(ge,"LI",{});var CBe=s(U4);yFe=n(CBe,"STRONG",{});var L5t=s(yFe);$wr=r(L5t,"bert"),L5t.forEach(t),kwr=r(CBe," \u2014 "),rJ=n(CBe,"A",{href:!0});var x5t=s(rJ);Swr=r(x5t,"TFBertForQuestionAnswering"),x5t.forEach(t),Rwr=r(CBe," (BERT model)"),CBe.forEach(t),Pwr=i(ge),J4=n(ge,"LI",{});var wBe=s(J4);LFe=n(wBe,"STRONG",{});var $5t=s(LFe);Bwr=r($5t,"camembert"),$5t.forEach(t),Iwr=r(wBe," \u2014 "),tJ=n(wBe,"A",{href:!0});var k5t=s(tJ);qwr=r(k5t,"TFCamembertForQuestionAnswering"),k5t.forEach(t),Nwr=r(wBe," (CamemBERT model)"),wBe.forEach(t),jwr=i(ge),Y4=n(ge,"LI",{});var ABe=s(Y4);xFe=n(ABe,"STRONG",{});var S5t=s(xFe);Dwr=r(S5t,"convbert"),S5t.forEach(t),Gwr=r(ABe," \u2014 "),aJ=n(ABe,"A",{href:!0});var R5t=s(aJ);Owr=r(R5t,"TFConvBertForQuestionAnswering"),R5t.forEach(t),Vwr=r(ABe," (ConvBERT model)"),ABe.forEach(t),Xwr=i(ge),K4=n(ge,"LI",{});var yBe=s(K4);$Fe=n(yBe,"STRONG",{});var P5t=s($Fe);zwr=r(P5t,"deberta"),P5t.forEach(t),Wwr=r(yBe," \u2014 "),nJ=n(yBe,"A",{href:!0});var B5t=s(nJ);Qwr=r(B5t,"TFDebertaForQuestionAnswering"),B5t.forEach(t),Hwr=r(yBe," (DeBERTa model)"),yBe.forEach(t),Uwr=i(ge),Z4=n(ge,"LI",{});var LBe=s(Z4);kFe=n(LBe,"STRONG",{});var I5t=s(kFe);Jwr=r(I5t,"deberta-v2"),I5t.forEach(t),Ywr=r(LBe," \u2014 "),sJ=n(LBe,"A",{href:!0});var q5t=s(sJ);Kwr=r(q5t,"TFDebertaV2ForQuestionAnswering"),q5t.forEach(t),Zwr=r(LBe," (DeBERTa-v2 model)"),LBe.forEach(t),e0r=i(ge),eE=n(ge,"LI",{});var xBe=s(eE);SFe=n(xBe,"STRONG",{});var N5t=s(SFe);o0r=r(N5t,"distilbert"),N5t.forEach(t),r0r=r(xBe," \u2014 "),lJ=n(xBe,"A",{href:!0});var j5t=s(lJ);t0r=r(j5t,"TFDistilBertForQuestionAnswering"),j5t.forEach(t),a0r=r(xBe," (DistilBERT model)"),xBe.forEach(t),n0r=i(ge),oE=n(ge,"LI",{});var $Be=s(oE);RFe=n($Be,"STRONG",{});var D5t=s(RFe);s0r=r(D5t,"electra"),D5t.forEach(t),l0r=r($Be," \u2014 "),iJ=n($Be,"A",{href:!0});var G5t=s(iJ);i0r=r(G5t,"TFElectraForQuestionAnswering"),G5t.forEach(t),d0r=r($Be," (ELECTRA model)"),$Be.forEach(t),c0r=i(ge),rE=n(ge,"LI",{});var kBe=s(rE);PFe=n(kBe,"STRONG",{});var O5t=s(PFe);f0r=r(O5t,"flaubert"),O5t.forEach(t),m0r=r(kBe," \u2014 "),dJ=n(kBe,"A",{href:!0});var V5t=s(dJ);g0r=r(V5t,"TFFlaubertForQuestionAnsweringSimple"),V5t.forEach(t),h0r=r(kBe," (FlauBERT model)"),kBe.forEach(t),p0r=i(ge),tE=n(ge,"LI",{});var SBe=s(tE);BFe=n(SBe,"STRONG",{});var X5t=s(BFe);u0r=r(X5t,"funnel"),X5t.forEach(t),_0r=r(SBe," \u2014 "),cJ=n(SBe,"A",{href:!0});var z5t=s(cJ);b0r=r(z5t,"TFFunnelForQuestionAnswering"),z5t.forEach(t),v0r=r(SBe," (Funnel Transformer model)"),SBe.forEach(t),F0r=i(ge),aE=n(ge,"LI",{});var RBe=s(aE);IFe=n(RBe,"STRONG",{});var W5t=s(IFe);T0r=r(W5t,"gptj"),W5t.forEach(t),M0r=r(RBe," \u2014 "),fJ=n(RBe,"A",{href:!0});var Q5t=s(fJ);E0r=r(Q5t,"TFGPTJForQuestionAnswering"),Q5t.forEach(t),C0r=r(RBe," (GPT-J model)"),RBe.forEach(t),w0r=i(ge),nE=n(ge,"LI",{});var PBe=s(nE);qFe=n(PBe,"STRONG",{});var H5t=s(qFe);A0r=r(H5t,"longformer"),H5t.forEach(t),y0r=r(PBe," \u2014 "),mJ=n(PBe,"A",{href:!0});var U5t=s(mJ);L0r=r(U5t,"TFLongformerForQuestionAnswering"),U5t.forEach(t),x0r=r(PBe," (Longformer model)"),PBe.forEach(t),$0r=i(ge),sE=n(ge,"LI",{});var BBe=s(sE);NFe=n(BBe,"STRONG",{});var J5t=s(NFe);k0r=r(J5t,"mobilebert"),J5t.forEach(t),S0r=r(BBe," \u2014 "),gJ=n(BBe,"A",{href:!0});var Y5t=s(gJ);R0r=r(Y5t,"TFMobileBertForQuestionAnswering"),Y5t.forEach(t),P0r=r(BBe," (MobileBERT model)"),BBe.forEach(t),B0r=i(ge),lE=n(ge,"LI",{});var IBe=s(lE);jFe=n(IBe,"STRONG",{});var K5t=s(jFe);I0r=r(K5t,"mpnet"),K5t.forEach(t),q0r=r(IBe," \u2014 "),hJ=n(IBe,"A",{href:!0});var Z5t=s(hJ);N0r=r(Z5t,"TFMPNetForQuestionAnswering"),Z5t.forEach(t),j0r=r(IBe," (MPNet model)"),IBe.forEach(t),D0r=i(ge),iE=n(ge,"LI",{});var qBe=s(iE);DFe=n(qBe,"STRONG",{});var ewt=s(DFe);G0r=r(ewt,"rembert"),ewt.forEach(t),O0r=r(qBe," \u2014 "),pJ=n(qBe,"A",{href:!0});var owt=s(pJ);V0r=r(owt,"TFRemBertForQuestionAnswering"),owt.forEach(t),X0r=r(qBe," (RemBERT model)"),qBe.forEach(t),z0r=i(ge),dE=n(ge,"LI",{});var NBe=s(dE);GFe=n(NBe,"STRONG",{});var rwt=s(GFe);W0r=r(rwt,"roberta"),rwt.forEach(t),Q0r=r(NBe," \u2014 "),uJ=n(NBe,"A",{href:!0});var twt=s(uJ);H0r=r(twt,"TFRobertaForQuestionAnswering"),twt.forEach(t),U0r=r(NBe," (RoBERTa model)"),NBe.forEach(t),J0r=i(ge),cE=n(ge,"LI",{});var jBe=s(cE);OFe=n(jBe,"STRONG",{});var awt=s(OFe);Y0r=r(awt,"roformer"),awt.forEach(t),K0r=r(jBe," \u2014 "),_J=n(jBe,"A",{href:!0});var nwt=s(_J);Z0r=r(nwt,"TFRoFormerForQuestionAnswering"),nwt.forEach(t),eAr=r(jBe," (RoFormer model)"),jBe.forEach(t),oAr=i(ge),fE=n(ge,"LI",{});var DBe=s(fE);VFe=n(DBe,"STRONG",{});var swt=s(VFe);rAr=r(swt,"xlm"),swt.forEach(t),tAr=r(DBe," \u2014 "),bJ=n(DBe,"A",{href:!0});var lwt=s(bJ);aAr=r(lwt,"TFXLMForQuestionAnsweringSimple"),lwt.forEach(t),nAr=r(DBe," (XLM model)"),DBe.forEach(t),sAr=i(ge),mE=n(ge,"LI",{});var GBe=s(mE);XFe=n(GBe,"STRONG",{});var iwt=s(XFe);lAr=r(iwt,"xlm-roberta"),iwt.forEach(t),iAr=r(GBe," \u2014 "),vJ=n(GBe,"A",{href:!0});var dwt=s(vJ);dAr=r(dwt,"TFXLMRobertaForQuestionAnswering"),dwt.forEach(t),cAr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),fAr=i(ge),gE=n(ge,"LI",{});var OBe=s(gE);zFe=n(OBe,"STRONG",{});var cwt=s(zFe);mAr=r(cwt,"xlnet"),cwt.forEach(t),gAr=r(OBe," \u2014 "),FJ=n(OBe,"A",{href:!0});var fwt=s(FJ);hAr=r(fwt,"TFXLNetForQuestionAnsweringSimple"),fwt.forEach(t),pAr=r(OBe," (XLNet model)"),OBe.forEach(t),ge.forEach(t),uAr=i(Il),T(hE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),vje=i(f),Ec=n(f,"H2",{class:!0});var AGe=s(Ec);pE=n(AGe,"A",{id:!0,class:!0,href:!0});var mwt=s(pE);WFe=n(mwt,"SPAN",{});var gwt=s(WFe);T(g9.$$.fragment,gwt),gwt.forEach(t),mwt.forEach(t),_Ar=i(AGe),QFe=n(AGe,"SPAN",{});var hwt=s(QFe);bAr=r(hwt,"TFAutoModelForVision2Seq"),hwt.forEach(t),AGe.forEach(t),Fje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(h9.$$.fragment,ql),vAr=i(ql),Cc=n(ql,"P",{});var Lee=s(Cc);FAr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TJ=n(Lee,"A",{href:!0});var pwt=s(TJ);TAr=r(pwt,"from_pretrained()"),pwt.forEach(t),MAr=r(Lee," class method or the "),MJ=n(Lee,"A",{href:!0});var uwt=s(MJ);EAr=r(uwt,"from_config()"),uwt.forEach(t),CAr=r(Lee,` class
method.`),Lee.forEach(t),wAr=i(ql),p9=n(ql,"P",{});var yGe=s(p9);AAr=r(yGe,"This class cannot be instantiated directly using "),HFe=n(yGe,"CODE",{});var _wt=s(HFe);yAr=r(_wt,"__init__()"),_wt.forEach(t),LAr=r(yGe," (throws an error)."),yGe.forEach(t),xAr=i(ql),jt=n(ql,"DIV",{class:!0});var Q0=s(jt);T(u9.$$.fragment,Q0),$Ar=i(Q0),UFe=n(Q0,"P",{});var bwt=s(UFe);kAr=r(bwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bwt.forEach(t),SAr=i(Q0),wc=n(Q0,"P",{});var xee=s(wc);RAr=r(xee,`Note:
Loading a model from its configuration file does `),JFe=n(xee,"STRONG",{});var vwt=s(JFe);PAr=r(vwt,"not"),vwt.forEach(t),BAr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(xee,"A",{href:!0});var Fwt=s(EJ);IAr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),qAr=r(xee," to load the model weights."),xee.forEach(t),NAr=i(Q0),T(uE.$$.fragment,Q0),Q0.forEach(t),jAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(_9.$$.fragment,Nl),DAr=i(Nl),YFe=n(Nl,"P",{});var Twt=s(YFe);GAr=r(Twt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Twt.forEach(t),OAr=i(Nl),mn=n(Nl,"P",{});var H0=s(mn);VAr=r(H0,"The model class to instantiate is selected based on the "),KFe=n(H0,"CODE",{});var Mwt=s(KFe);XAr=r(Mwt,"model_type"),Mwt.forEach(t),zAr=r(H0,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(H0,"CODE",{});var Ewt=s(ZFe);WAr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),QAr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(H0,"CODE",{});var Cwt=s(eTe);HAr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),UAr=r(H0,":"),H0.forEach(t),JAr=i(Nl),oTe=n(Nl,"UL",{});var wwt=s(oTe);_E=n(wwt,"LI",{});var VBe=s(_E);rTe=n(VBe,"STRONG",{});var Awt=s(rTe);YAr=r(Awt,"vision-encoder-decoder"),Awt.forEach(t),KAr=r(VBe," \u2014 "),CJ=n(VBe,"A",{href:!0});var ywt=s(CJ);ZAr=r(ywt,"TFVisionEncoderDecoderModel"),ywt.forEach(t),e6r=r(VBe," (Vision Encoder decoder model)"),VBe.forEach(t),wwt.forEach(t),o6r=i(Nl),T(bE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Tje=i(f),Ac=n(f,"H2",{class:!0});var LGe=s(Ac);vE=n(LGe,"A",{id:!0,class:!0,href:!0});var Lwt=s(vE);tTe=n(Lwt,"SPAN",{});var xwt=s(tTe);T(b9.$$.fragment,xwt),xwt.forEach(t),Lwt.forEach(t),r6r=i(LGe),aTe=n(LGe,"SPAN",{});var $wt=s(aTe);t6r=r($wt,"TFAutoModelForSpeechSeq2Seq"),$wt.forEach(t),LGe.forEach(t),Mje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(v9.$$.fragment,jl),a6r=i(jl),yc=n(jl,"P",{});var $ee=s(yc);n6r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=n($ee,"A",{href:!0});var kwt=s(wJ);s6r=r(kwt,"from_pretrained()"),kwt.forEach(t),l6r=r($ee," class method or the "),AJ=n($ee,"A",{href:!0});var Swt=s(AJ);i6r=r(Swt,"from_config()"),Swt.forEach(t),d6r=r($ee,` class
method.`),$ee.forEach(t),c6r=i(jl),F9=n(jl,"P",{});var xGe=s(F9);f6r=r(xGe,"This class cannot be instantiated directly using "),nTe=n(xGe,"CODE",{});var Rwt=s(nTe);m6r=r(Rwt,"__init__()"),Rwt.forEach(t),g6r=r(xGe," (throws an error)."),xGe.forEach(t),h6r=i(jl),Dt=n(jl,"DIV",{class:!0});var U0=s(Dt);T(T9.$$.fragment,U0),p6r=i(U0),sTe=n(U0,"P",{});var Pwt=s(sTe);u6r=r(Pwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pwt.forEach(t),_6r=i(U0),Lc=n(U0,"P",{});var kee=s(Lc);b6r=r(kee,`Note:
Loading a model from its configuration file does `),lTe=n(kee,"STRONG",{});var Bwt=s(lTe);v6r=r(Bwt,"not"),Bwt.forEach(t),F6r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(kee,"A",{href:!0});var Iwt=s(yJ);T6r=r(Iwt,"from_pretrained()"),Iwt.forEach(t),M6r=r(kee," to load the model weights."),kee.forEach(t),E6r=i(U0),T(FE.$$.fragment,U0),U0.forEach(t),C6r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(M9.$$.fragment,Dl),w6r=i(Dl),iTe=n(Dl,"P",{});var qwt=s(iTe);A6r=r(qwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qwt.forEach(t),y6r=i(Dl),gn=n(Dl,"P",{});var J0=s(gn);L6r=r(J0,"The model class to instantiate is selected based on the "),dTe=n(J0,"CODE",{});var Nwt=s(dTe);x6r=r(Nwt,"model_type"),Nwt.forEach(t),$6r=r(J0,` property of the config object (either
passed as an argument or loaded from `),cTe=n(J0,"CODE",{});var jwt=s(cTe);k6r=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),S6r=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(J0,"CODE",{});var Dwt=s(fTe);R6r=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),P6r=r(J0,":"),J0.forEach(t),B6r=i(Dl),mTe=n(Dl,"UL",{});var Gwt=s(mTe);TE=n(Gwt,"LI",{});var XBe=s(TE);gTe=n(XBe,"STRONG",{});var Owt=s(gTe);I6r=r(Owt,"speech_to_text"),Owt.forEach(t),q6r=r(XBe," \u2014 "),LJ=n(XBe,"A",{href:!0});var Vwt=s(LJ);N6r=r(Vwt,"TFSpeech2TextForConditionalGeneration"),Vwt.forEach(t),j6r=r(XBe," (Speech2Text model)"),XBe.forEach(t),Gwt.forEach(t),D6r=i(Dl),T(ME.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Eje=i(f),xc=n(f,"H2",{class:!0});var $Ge=s(xc);EE=n($Ge,"A",{id:!0,class:!0,href:!0});var Xwt=s(EE);hTe=n(Xwt,"SPAN",{});var zwt=s(hTe);T(E9.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),G6r=i($Ge),pTe=n($Ge,"SPAN",{});var Wwt=s(pTe);O6r=r(Wwt,"FlaxAutoModel"),Wwt.forEach(t),$Ge.forEach(t),Cje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(C9.$$.fragment,Gl),V6r=i(Gl),$c=n(Gl,"P",{});var See=s($c);X6r=r(See,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xJ=n(See,"A",{href:!0});var Qwt=s(xJ);z6r=r(Qwt,"from_pretrained()"),Qwt.forEach(t),W6r=r(See," class method or the "),$J=n(See,"A",{href:!0});var Hwt=s($J);Q6r=r(Hwt,"from_config()"),Hwt.forEach(t),H6r=r(See,` class
method.`),See.forEach(t),U6r=i(Gl),w9=n(Gl,"P",{});var kGe=s(w9);J6r=r(kGe,"This class cannot be instantiated directly using "),uTe=n(kGe,"CODE",{});var Uwt=s(uTe);Y6r=r(Uwt,"__init__()"),Uwt.forEach(t),K6r=r(kGe," (throws an error)."),kGe.forEach(t),Z6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Y0=s(Gt);T(A9.$$.fragment,Y0),eyr=i(Y0),_Te=n(Y0,"P",{});var Jwt=s(_Te);oyr=r(Jwt,"Instantiates one of the base model classes of the library from a configuration."),Jwt.forEach(t),ryr=i(Y0),kc=n(Y0,"P",{});var Ree=s(kc);tyr=r(Ree,`Note:
Loading a model from its configuration file does `),bTe=n(Ree,"STRONG",{});var Ywt=s(bTe);ayr=r(Ywt,"not"),Ywt.forEach(t),nyr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Ree,"A",{href:!0});var Kwt=s(kJ);syr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),lyr=r(Ree," to load the model weights."),Ree.forEach(t),iyr=i(Y0),T(CE.$$.fragment,Y0),Y0.forEach(t),dyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(y9.$$.fragment,Ol),cyr=i(Ol),vTe=n(Ol,"P",{});var Zwt=s(vTe);fyr=r(Zwt,"Instantiate one of the base model classes of the library from a pretrained model."),Zwt.forEach(t),myr=i(Ol),hn=n(Ol,"P",{});var K0=s(hn);gyr=r(K0,"The model class to instantiate is selected based on the "),FTe=n(K0,"CODE",{});var e0t=s(FTe);hyr=r(e0t,"model_type"),e0t.forEach(t),pyr=r(K0,` property of the config object (either
passed as an argument or loaded from `),TTe=n(K0,"CODE",{});var o0t=s(TTe);uyr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),_yr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(K0,"CODE",{});var r0t=s(MTe);byr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),vyr=r(K0,":"),K0.forEach(t),Fyr=i(Ol),re=n(Ol,"UL",{});var ne=s(re);wE=n(ne,"LI",{});var zBe=s(wE);ETe=n(zBe,"STRONG",{});var t0t=s(ETe);Tyr=r(t0t,"albert"),t0t.forEach(t),Myr=r(zBe," \u2014 "),SJ=n(zBe,"A",{href:!0});var a0t=s(SJ);Eyr=r(a0t,"FlaxAlbertModel"),a0t.forEach(t),Cyr=r(zBe," (ALBERT model)"),zBe.forEach(t),wyr=i(ne),AE=n(ne,"LI",{});var WBe=s(AE);CTe=n(WBe,"STRONG",{});var n0t=s(CTe);Ayr=r(n0t,"bart"),n0t.forEach(t),yyr=r(WBe," \u2014 "),RJ=n(WBe,"A",{href:!0});var s0t=s(RJ);Lyr=r(s0t,"FlaxBartModel"),s0t.forEach(t),xyr=r(WBe," (BART model)"),WBe.forEach(t),$yr=i(ne),yE=n(ne,"LI",{});var QBe=s(yE);wTe=n(QBe,"STRONG",{});var l0t=s(wTe);kyr=r(l0t,"beit"),l0t.forEach(t),Syr=r(QBe," \u2014 "),PJ=n(QBe,"A",{href:!0});var i0t=s(PJ);Ryr=r(i0t,"FlaxBeitModel"),i0t.forEach(t),Pyr=r(QBe," (BEiT model)"),QBe.forEach(t),Byr=i(ne),LE=n(ne,"LI",{});var HBe=s(LE);ATe=n(HBe,"STRONG",{});var d0t=s(ATe);Iyr=r(d0t,"bert"),d0t.forEach(t),qyr=r(HBe," \u2014 "),BJ=n(HBe,"A",{href:!0});var c0t=s(BJ);Nyr=r(c0t,"FlaxBertModel"),c0t.forEach(t),jyr=r(HBe," (BERT model)"),HBe.forEach(t),Dyr=i(ne),xE=n(ne,"LI",{});var UBe=s(xE);yTe=n(UBe,"STRONG",{});var f0t=s(yTe);Gyr=r(f0t,"big_bird"),f0t.forEach(t),Oyr=r(UBe," \u2014 "),IJ=n(UBe,"A",{href:!0});var m0t=s(IJ);Vyr=r(m0t,"FlaxBigBirdModel"),m0t.forEach(t),Xyr=r(UBe," (BigBird model)"),UBe.forEach(t),zyr=i(ne),$E=n(ne,"LI",{});var JBe=s($E);LTe=n(JBe,"STRONG",{});var g0t=s(LTe);Wyr=r(g0t,"blenderbot"),g0t.forEach(t),Qyr=r(JBe," \u2014 "),qJ=n(JBe,"A",{href:!0});var h0t=s(qJ);Hyr=r(h0t,"FlaxBlenderbotModel"),h0t.forEach(t),Uyr=r(JBe," (Blenderbot model)"),JBe.forEach(t),Jyr=i(ne),kE=n(ne,"LI",{});var YBe=s(kE);xTe=n(YBe,"STRONG",{});var p0t=s(xTe);Yyr=r(p0t,"blenderbot-small"),p0t.forEach(t),Kyr=r(YBe," \u2014 "),NJ=n(YBe,"A",{href:!0});var u0t=s(NJ);Zyr=r(u0t,"FlaxBlenderbotSmallModel"),u0t.forEach(t),eLr=r(YBe," (BlenderbotSmall model)"),YBe.forEach(t),oLr=i(ne),SE=n(ne,"LI",{});var KBe=s(SE);$Te=n(KBe,"STRONG",{});var _0t=s($Te);rLr=r(_0t,"clip"),_0t.forEach(t),tLr=r(KBe," \u2014 "),jJ=n(KBe,"A",{href:!0});var b0t=s(jJ);aLr=r(b0t,"FlaxCLIPModel"),b0t.forEach(t),nLr=r(KBe," (CLIP model)"),KBe.forEach(t),sLr=i(ne),RE=n(ne,"LI",{});var ZBe=s(RE);kTe=n(ZBe,"STRONG",{});var v0t=s(kTe);lLr=r(v0t,"distilbert"),v0t.forEach(t),iLr=r(ZBe," \u2014 "),DJ=n(ZBe,"A",{href:!0});var F0t=s(DJ);dLr=r(F0t,"FlaxDistilBertModel"),F0t.forEach(t),cLr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),fLr=i(ne),PE=n(ne,"LI",{});var eIe=s(PE);STe=n(eIe,"STRONG",{});var T0t=s(STe);mLr=r(T0t,"electra"),T0t.forEach(t),gLr=r(eIe," \u2014 "),GJ=n(eIe,"A",{href:!0});var M0t=s(GJ);hLr=r(M0t,"FlaxElectraModel"),M0t.forEach(t),pLr=r(eIe," (ELECTRA model)"),eIe.forEach(t),uLr=i(ne),BE=n(ne,"LI",{});var oIe=s(BE);RTe=n(oIe,"STRONG",{});var E0t=s(RTe);_Lr=r(E0t,"gpt2"),E0t.forEach(t),bLr=r(oIe," \u2014 "),OJ=n(oIe,"A",{href:!0});var C0t=s(OJ);vLr=r(C0t,"FlaxGPT2Model"),C0t.forEach(t),FLr=r(oIe," (OpenAI GPT-2 model)"),oIe.forEach(t),TLr=i(ne),IE=n(ne,"LI",{});var rIe=s(IE);PTe=n(rIe,"STRONG",{});var w0t=s(PTe);MLr=r(w0t,"gpt_neo"),w0t.forEach(t),ELr=r(rIe," \u2014 "),VJ=n(rIe,"A",{href:!0});var A0t=s(VJ);CLr=r(A0t,"FlaxGPTNeoModel"),A0t.forEach(t),wLr=r(rIe," (GPT Neo model)"),rIe.forEach(t),ALr=i(ne),qE=n(ne,"LI",{});var tIe=s(qE);BTe=n(tIe,"STRONG",{});var y0t=s(BTe);yLr=r(y0t,"gptj"),y0t.forEach(t),LLr=r(tIe," \u2014 "),XJ=n(tIe,"A",{href:!0});var L0t=s(XJ);xLr=r(L0t,"FlaxGPTJModel"),L0t.forEach(t),$Lr=r(tIe," (GPT-J model)"),tIe.forEach(t),kLr=i(ne),NE=n(ne,"LI",{});var aIe=s(NE);ITe=n(aIe,"STRONG",{});var x0t=s(ITe);SLr=r(x0t,"marian"),x0t.forEach(t),RLr=r(aIe," \u2014 "),zJ=n(aIe,"A",{href:!0});var $0t=s(zJ);PLr=r($0t,"FlaxMarianModel"),$0t.forEach(t),BLr=r(aIe," (Marian model)"),aIe.forEach(t),ILr=i(ne),jE=n(ne,"LI",{});var nIe=s(jE);qTe=n(nIe,"STRONG",{});var k0t=s(qTe);qLr=r(k0t,"mbart"),k0t.forEach(t),NLr=r(nIe," \u2014 "),WJ=n(nIe,"A",{href:!0});var S0t=s(WJ);jLr=r(S0t,"FlaxMBartModel"),S0t.forEach(t),DLr=r(nIe," (mBART model)"),nIe.forEach(t),GLr=i(ne),DE=n(ne,"LI",{});var sIe=s(DE);NTe=n(sIe,"STRONG",{});var R0t=s(NTe);OLr=r(R0t,"mt5"),R0t.forEach(t),VLr=r(sIe," \u2014 "),QJ=n(sIe,"A",{href:!0});var P0t=s(QJ);XLr=r(P0t,"FlaxMT5Model"),P0t.forEach(t),zLr=r(sIe," (mT5 model)"),sIe.forEach(t),WLr=i(ne),GE=n(ne,"LI",{});var lIe=s(GE);jTe=n(lIe,"STRONG",{});var B0t=s(jTe);QLr=r(B0t,"opt"),B0t.forEach(t),HLr=r(lIe," \u2014 "),HJ=n(lIe,"A",{href:!0});var I0t=s(HJ);ULr=r(I0t,"FlaxOPTModel"),I0t.forEach(t),JLr=r(lIe," (OPT model)"),lIe.forEach(t),YLr=i(ne),OE=n(ne,"LI",{});var iIe=s(OE);DTe=n(iIe,"STRONG",{});var q0t=s(DTe);KLr=r(q0t,"pegasus"),q0t.forEach(t),ZLr=r(iIe," \u2014 "),UJ=n(iIe,"A",{href:!0});var N0t=s(UJ);e9r=r(N0t,"FlaxPegasusModel"),N0t.forEach(t),o9r=r(iIe," (Pegasus model)"),iIe.forEach(t),r9r=i(ne),VE=n(ne,"LI",{});var dIe=s(VE);GTe=n(dIe,"STRONG",{});var j0t=s(GTe);t9r=r(j0t,"roberta"),j0t.forEach(t),a9r=r(dIe," \u2014 "),JJ=n(dIe,"A",{href:!0});var D0t=s(JJ);n9r=r(D0t,"FlaxRobertaModel"),D0t.forEach(t),s9r=r(dIe," (RoBERTa model)"),dIe.forEach(t),l9r=i(ne),XE=n(ne,"LI",{});var cIe=s(XE);OTe=n(cIe,"STRONG",{});var G0t=s(OTe);i9r=r(G0t,"roformer"),G0t.forEach(t),d9r=r(cIe," \u2014 "),YJ=n(cIe,"A",{href:!0});var O0t=s(YJ);c9r=r(O0t,"FlaxRoFormerModel"),O0t.forEach(t),f9r=r(cIe," (RoFormer model)"),cIe.forEach(t),m9r=i(ne),zE=n(ne,"LI",{});var fIe=s(zE);VTe=n(fIe,"STRONG",{});var V0t=s(VTe);g9r=r(V0t,"t5"),V0t.forEach(t),h9r=r(fIe," \u2014 "),KJ=n(fIe,"A",{href:!0});var X0t=s(KJ);p9r=r(X0t,"FlaxT5Model"),X0t.forEach(t),u9r=r(fIe," (T5 model)"),fIe.forEach(t),_9r=i(ne),WE=n(ne,"LI",{});var mIe=s(WE);XTe=n(mIe,"STRONG",{});var z0t=s(XTe);b9r=r(z0t,"vision-text-dual-encoder"),z0t.forEach(t),v9r=r(mIe," \u2014 "),ZJ=n(mIe,"A",{href:!0});var W0t=s(ZJ);F9r=r(W0t,"FlaxVisionTextDualEncoderModel"),W0t.forEach(t),T9r=r(mIe," (VisionTextDualEncoder model)"),mIe.forEach(t),M9r=i(ne),QE=n(ne,"LI",{});var gIe=s(QE);zTe=n(gIe,"STRONG",{});var Q0t=s(zTe);E9r=r(Q0t,"vit"),Q0t.forEach(t),C9r=r(gIe," \u2014 "),eY=n(gIe,"A",{href:!0});var H0t=s(eY);w9r=r(H0t,"FlaxViTModel"),H0t.forEach(t),A9r=r(gIe," (ViT model)"),gIe.forEach(t),y9r=i(ne),HE=n(ne,"LI",{});var hIe=s(HE);WTe=n(hIe,"STRONG",{});var U0t=s(WTe);L9r=r(U0t,"wav2vec2"),U0t.forEach(t),x9r=r(hIe," \u2014 "),oY=n(hIe,"A",{href:!0});var J0t=s(oY);$9r=r(J0t,"FlaxWav2Vec2Model"),J0t.forEach(t),k9r=r(hIe," (Wav2Vec2 model)"),hIe.forEach(t),S9r=i(ne),UE=n(ne,"LI",{});var pIe=s(UE);QTe=n(pIe,"STRONG",{});var Y0t=s(QTe);R9r=r(Y0t,"xglm"),Y0t.forEach(t),P9r=r(pIe," \u2014 "),rY=n(pIe,"A",{href:!0});var K0t=s(rY);B9r=r(K0t,"FlaxXGLMModel"),K0t.forEach(t),I9r=r(pIe," (XGLM model)"),pIe.forEach(t),q9r=i(ne),JE=n(ne,"LI",{});var uIe=s(JE);HTe=n(uIe,"STRONG",{});var Z0t=s(HTe);N9r=r(Z0t,"xlm-roberta"),Z0t.forEach(t),j9r=r(uIe," \u2014 "),tY=n(uIe,"A",{href:!0});var eAt=s(tY);D9r=r(eAt,"FlaxXLMRobertaModel"),eAt.forEach(t),G9r=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),ne.forEach(t),O9r=i(Ol),T(YE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),wje=i(f),Sc=n(f,"H2",{class:!0});var SGe=s(Sc);KE=n(SGe,"A",{id:!0,class:!0,href:!0});var oAt=s(KE);UTe=n(oAt,"SPAN",{});var rAt=s(UTe);T(L9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),V9r=i(SGe),JTe=n(SGe,"SPAN",{});var tAt=s(JTe);X9r=r(tAt,"FlaxAutoModelForCausalLM"),tAt.forEach(t),SGe.forEach(t),Aje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(x9.$$.fragment,Vl),z9r=i(Vl),Rc=n(Vl,"P",{});var Pee=s(Rc);W9r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aY=n(Pee,"A",{href:!0});var aAt=s(aY);Q9r=r(aAt,"from_pretrained()"),aAt.forEach(t),H9r=r(Pee," class method or the "),nY=n(Pee,"A",{href:!0});var nAt=s(nY);U9r=r(nAt,"from_config()"),nAt.forEach(t),J9r=r(Pee,` class
method.`),Pee.forEach(t),Y9r=i(Vl),$9=n(Vl,"P",{});var RGe=s($9);K9r=r(RGe,"This class cannot be instantiated directly using "),YTe=n(RGe,"CODE",{});var sAt=s(YTe);Z9r=r(sAt,"__init__()"),sAt.forEach(t),exr=r(RGe," (throws an error)."),RGe.forEach(t),oxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Z0=s(Ot);T(k9.$$.fragment,Z0),rxr=i(Z0),KTe=n(Z0,"P",{});var lAt=s(KTe);txr=r(lAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lAt.forEach(t),axr=i(Z0),Pc=n(Z0,"P",{});var Bee=s(Pc);nxr=r(Bee,`Note:
Loading a model from its configuration file does `),ZTe=n(Bee,"STRONG",{});var iAt=s(ZTe);sxr=r(iAt,"not"),iAt.forEach(t),lxr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(Bee,"A",{href:!0});var dAt=s(sY);ixr=r(dAt,"from_pretrained()"),dAt.forEach(t),dxr=r(Bee," to load the model weights."),Bee.forEach(t),cxr=i(Z0),T(ZE.$$.fragment,Z0),Z0.forEach(t),fxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(S9.$$.fragment,Xl),mxr=i(Xl),e7e=n(Xl,"P",{});var cAt=s(e7e);gxr=r(cAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cAt.forEach(t),hxr=i(Xl),pn=n(Xl,"P",{});var eA=s(pn);pxr=r(eA,"The model class to instantiate is selected based on the "),o7e=n(eA,"CODE",{});var fAt=s(o7e);uxr=r(fAt,"model_type"),fAt.forEach(t),_xr=r(eA,` property of the config object (either
passed as an argument or loaded from `),r7e=n(eA,"CODE",{});var mAt=s(r7e);bxr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),vxr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(eA,"CODE",{});var gAt=s(t7e);Fxr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Txr=r(eA,":"),eA.forEach(t),Mxr=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);eC=n(Ie,"LI",{});var _Ie=s(eC);a7e=n(_Ie,"STRONG",{});var hAt=s(a7e);Exr=r(hAt,"bart"),hAt.forEach(t),Cxr=r(_Ie," \u2014 "),lY=n(_Ie,"A",{href:!0});var pAt=s(lY);wxr=r(pAt,"FlaxBartForCausalLM"),pAt.forEach(t),Axr=r(_Ie," (BART model)"),_Ie.forEach(t),yxr=i(Ie),oC=n(Ie,"LI",{});var bIe=s(oC);n7e=n(bIe,"STRONG",{});var uAt=s(n7e);Lxr=r(uAt,"bert"),uAt.forEach(t),xxr=r(bIe," \u2014 "),iY=n(bIe,"A",{href:!0});var _At=s(iY);$xr=r(_At,"FlaxBertForCausalLM"),_At.forEach(t),kxr=r(bIe," (BERT model)"),bIe.forEach(t),Sxr=i(Ie),rC=n(Ie,"LI",{});var vIe=s(rC);s7e=n(vIe,"STRONG",{});var bAt=s(s7e);Rxr=r(bAt,"big_bird"),bAt.forEach(t),Pxr=r(vIe," \u2014 "),dY=n(vIe,"A",{href:!0});var vAt=s(dY);Bxr=r(vAt,"FlaxBigBirdForCausalLM"),vAt.forEach(t),Ixr=r(vIe," (BigBird model)"),vIe.forEach(t),qxr=i(Ie),tC=n(Ie,"LI",{});var FIe=s(tC);l7e=n(FIe,"STRONG",{});var FAt=s(l7e);Nxr=r(FAt,"electra"),FAt.forEach(t),jxr=r(FIe," \u2014 "),cY=n(FIe,"A",{href:!0});var TAt=s(cY);Dxr=r(TAt,"FlaxElectraForCausalLM"),TAt.forEach(t),Gxr=r(FIe," (ELECTRA model)"),FIe.forEach(t),Oxr=i(Ie),aC=n(Ie,"LI",{});var TIe=s(aC);i7e=n(TIe,"STRONG",{});var MAt=s(i7e);Vxr=r(MAt,"gpt2"),MAt.forEach(t),Xxr=r(TIe," \u2014 "),fY=n(TIe,"A",{href:!0});var EAt=s(fY);zxr=r(EAt,"FlaxGPT2LMHeadModel"),EAt.forEach(t),Wxr=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),Qxr=i(Ie),nC=n(Ie,"LI",{});var MIe=s(nC);d7e=n(MIe,"STRONG",{});var CAt=s(d7e);Hxr=r(CAt,"gpt_neo"),CAt.forEach(t),Uxr=r(MIe," \u2014 "),mY=n(MIe,"A",{href:!0});var wAt=s(mY);Jxr=r(wAt,"FlaxGPTNeoForCausalLM"),wAt.forEach(t),Yxr=r(MIe," (GPT Neo model)"),MIe.forEach(t),Kxr=i(Ie),sC=n(Ie,"LI",{});var EIe=s(sC);c7e=n(EIe,"STRONG",{});var AAt=s(c7e);Zxr=r(AAt,"gptj"),AAt.forEach(t),e$r=r(EIe," \u2014 "),gY=n(EIe,"A",{href:!0});var yAt=s(gY);o$r=r(yAt,"FlaxGPTJForCausalLM"),yAt.forEach(t),r$r=r(EIe," (GPT-J model)"),EIe.forEach(t),t$r=i(Ie),lC=n(Ie,"LI",{});var CIe=s(lC);f7e=n(CIe,"STRONG",{});var LAt=s(f7e);a$r=r(LAt,"opt"),LAt.forEach(t),n$r=r(CIe," \u2014 "),hY=n(CIe,"A",{href:!0});var xAt=s(hY);s$r=r(xAt,"FlaxOPTForCausalLM"),xAt.forEach(t),l$r=r(CIe," (OPT model)"),CIe.forEach(t),i$r=i(Ie),iC=n(Ie,"LI",{});var wIe=s(iC);m7e=n(wIe,"STRONG",{});var $At=s(m7e);d$r=r($At,"roberta"),$At.forEach(t),c$r=r(wIe," \u2014 "),pY=n(wIe,"A",{href:!0});var kAt=s(pY);f$r=r(kAt,"FlaxRobertaForCausalLM"),kAt.forEach(t),m$r=r(wIe," (RoBERTa model)"),wIe.forEach(t),g$r=i(Ie),dC=n(Ie,"LI",{});var AIe=s(dC);g7e=n(AIe,"STRONG",{});var SAt=s(g7e);h$r=r(SAt,"xglm"),SAt.forEach(t),p$r=r(AIe," \u2014 "),uY=n(AIe,"A",{href:!0});var RAt=s(uY);u$r=r(RAt,"FlaxXGLMForCausalLM"),RAt.forEach(t),_$r=r(AIe," (XGLM model)"),AIe.forEach(t),Ie.forEach(t),b$r=i(Xl),T(cC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),yje=i(f),Bc=n(f,"H2",{class:!0});var PGe=s(Bc);fC=n(PGe,"A",{id:!0,class:!0,href:!0});var PAt=s(fC);h7e=n(PAt,"SPAN",{});var BAt=s(h7e);T(R9.$$.fragment,BAt),BAt.forEach(t),PAt.forEach(t),v$r=i(PGe),p7e=n(PGe,"SPAN",{});var IAt=s(p7e);F$r=r(IAt,"FlaxAutoModelForPreTraining"),IAt.forEach(t),PGe.forEach(t),Lje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(P9.$$.fragment,zl),T$r=i(zl),Ic=n(zl,"P",{});var Iee=s(Ic);M$r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Y=n(Iee,"A",{href:!0});var qAt=s(_Y);E$r=r(qAt,"from_pretrained()"),qAt.forEach(t),C$r=r(Iee," class method or the "),bY=n(Iee,"A",{href:!0});var NAt=s(bY);w$r=r(NAt,"from_config()"),NAt.forEach(t),A$r=r(Iee,` class
method.`),Iee.forEach(t),y$r=i(zl),B9=n(zl,"P",{});var BGe=s(B9);L$r=r(BGe,"This class cannot be instantiated directly using "),u7e=n(BGe,"CODE",{});var jAt=s(u7e);x$r=r(jAt,"__init__()"),jAt.forEach(t),$$r=r(BGe," (throws an error)."),BGe.forEach(t),k$r=i(zl),Vt=n(zl,"DIV",{class:!0});var oA=s(Vt);T(I9.$$.fragment,oA),S$r=i(oA),_7e=n(oA,"P",{});var DAt=s(_7e);R$r=r(DAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DAt.forEach(t),P$r=i(oA),qc=n(oA,"P",{});var qee=s(qc);B$r=r(qee,`Note:
Loading a model from its configuration file does `),b7e=n(qee,"STRONG",{});var GAt=s(b7e);I$r=r(GAt,"not"),GAt.forEach(t),q$r=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(qee,"A",{href:!0});var OAt=s(vY);N$r=r(OAt,"from_pretrained()"),OAt.forEach(t),j$r=r(qee," to load the model weights."),qee.forEach(t),D$r=i(oA),T(mC.$$.fragment,oA),oA.forEach(t),G$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(q9.$$.fragment,Wl),O$r=i(Wl),v7e=n(Wl,"P",{});var VAt=s(v7e);V$r=r(VAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VAt.forEach(t),X$r=i(Wl),un=n(Wl,"P",{});var rA=s(un);z$r=r(rA,"The model class to instantiate is selected based on the "),F7e=n(rA,"CODE",{});var XAt=s(F7e);W$r=r(XAt,"model_type"),XAt.forEach(t),Q$r=r(rA,` property of the config object (either
passed as an argument or loaded from `),T7e=n(rA,"CODE",{});var zAt=s(T7e);H$r=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),U$r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(rA,"CODE",{});var WAt=s(M7e);J$r=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),Y$r=r(rA,":"),rA.forEach(t),K$r=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);gC=n(we,"LI",{});var yIe=s(gC);E7e=n(yIe,"STRONG",{});var QAt=s(E7e);Z$r=r(QAt,"albert"),QAt.forEach(t),ekr=r(yIe," \u2014 "),FY=n(yIe,"A",{href:!0});var HAt=s(FY);okr=r(HAt,"FlaxAlbertForPreTraining"),HAt.forEach(t),rkr=r(yIe," (ALBERT model)"),yIe.forEach(t),tkr=i(we),hC=n(we,"LI",{});var LIe=s(hC);C7e=n(LIe,"STRONG",{});var UAt=s(C7e);akr=r(UAt,"bart"),UAt.forEach(t),nkr=r(LIe," \u2014 "),TY=n(LIe,"A",{href:!0});var JAt=s(TY);skr=r(JAt,"FlaxBartForConditionalGeneration"),JAt.forEach(t),lkr=r(LIe," (BART model)"),LIe.forEach(t),ikr=i(we),pC=n(we,"LI",{});var xIe=s(pC);w7e=n(xIe,"STRONG",{});var YAt=s(w7e);dkr=r(YAt,"bert"),YAt.forEach(t),ckr=r(xIe," \u2014 "),MY=n(xIe,"A",{href:!0});var KAt=s(MY);fkr=r(KAt,"FlaxBertForPreTraining"),KAt.forEach(t),mkr=r(xIe," (BERT model)"),xIe.forEach(t),gkr=i(we),uC=n(we,"LI",{});var $Ie=s(uC);A7e=n($Ie,"STRONG",{});var ZAt=s(A7e);hkr=r(ZAt,"big_bird"),ZAt.forEach(t),pkr=r($Ie," \u2014 "),EY=n($Ie,"A",{href:!0});var e6t=s(EY);ukr=r(e6t,"FlaxBigBirdForPreTraining"),e6t.forEach(t),_kr=r($Ie," (BigBird model)"),$Ie.forEach(t),bkr=i(we),_C=n(we,"LI",{});var kIe=s(_C);y7e=n(kIe,"STRONG",{});var o6t=s(y7e);vkr=r(o6t,"electra"),o6t.forEach(t),Fkr=r(kIe," \u2014 "),CY=n(kIe,"A",{href:!0});var r6t=s(CY);Tkr=r(r6t,"FlaxElectraForPreTraining"),r6t.forEach(t),Mkr=r(kIe," (ELECTRA model)"),kIe.forEach(t),Ekr=i(we),bC=n(we,"LI",{});var SIe=s(bC);L7e=n(SIe,"STRONG",{});var t6t=s(L7e);Ckr=r(t6t,"mbart"),t6t.forEach(t),wkr=r(SIe," \u2014 "),wY=n(SIe,"A",{href:!0});var a6t=s(wY);Akr=r(a6t,"FlaxMBartForConditionalGeneration"),a6t.forEach(t),ykr=r(SIe," (mBART model)"),SIe.forEach(t),Lkr=i(we),vC=n(we,"LI",{});var RIe=s(vC);x7e=n(RIe,"STRONG",{});var n6t=s(x7e);xkr=r(n6t,"mt5"),n6t.forEach(t),$kr=r(RIe," \u2014 "),AY=n(RIe,"A",{href:!0});var s6t=s(AY);kkr=r(s6t,"FlaxMT5ForConditionalGeneration"),s6t.forEach(t),Skr=r(RIe," (mT5 model)"),RIe.forEach(t),Rkr=i(we),FC=n(we,"LI",{});var PIe=s(FC);$7e=n(PIe,"STRONG",{});var l6t=s($7e);Pkr=r(l6t,"roberta"),l6t.forEach(t),Bkr=r(PIe," \u2014 "),yY=n(PIe,"A",{href:!0});var i6t=s(yY);Ikr=r(i6t,"FlaxRobertaForMaskedLM"),i6t.forEach(t),qkr=r(PIe," (RoBERTa model)"),PIe.forEach(t),Nkr=i(we),TC=n(we,"LI",{});var BIe=s(TC);k7e=n(BIe,"STRONG",{});var d6t=s(k7e);jkr=r(d6t,"roformer"),d6t.forEach(t),Dkr=r(BIe," \u2014 "),LY=n(BIe,"A",{href:!0});var c6t=s(LY);Gkr=r(c6t,"FlaxRoFormerForMaskedLM"),c6t.forEach(t),Okr=r(BIe," (RoFormer model)"),BIe.forEach(t),Vkr=i(we),MC=n(we,"LI",{});var IIe=s(MC);S7e=n(IIe,"STRONG",{});var f6t=s(S7e);Xkr=r(f6t,"t5"),f6t.forEach(t),zkr=r(IIe," \u2014 "),xY=n(IIe,"A",{href:!0});var m6t=s(xY);Wkr=r(m6t,"FlaxT5ForConditionalGeneration"),m6t.forEach(t),Qkr=r(IIe," (T5 model)"),IIe.forEach(t),Hkr=i(we),EC=n(we,"LI",{});var qIe=s(EC);R7e=n(qIe,"STRONG",{});var g6t=s(R7e);Ukr=r(g6t,"wav2vec2"),g6t.forEach(t),Jkr=r(qIe," \u2014 "),$Y=n(qIe,"A",{href:!0});var h6t=s($Y);Ykr=r(h6t,"FlaxWav2Vec2ForPreTraining"),h6t.forEach(t),Kkr=r(qIe," (Wav2Vec2 model)"),qIe.forEach(t),Zkr=i(we),CC=n(we,"LI",{});var NIe=s(CC);P7e=n(NIe,"STRONG",{});var p6t=s(P7e);eSr=r(p6t,"xlm-roberta"),p6t.forEach(t),oSr=r(NIe," \u2014 "),kY=n(NIe,"A",{href:!0});var u6t=s(kY);rSr=r(u6t,"FlaxXLMRobertaForMaskedLM"),u6t.forEach(t),tSr=r(NIe," (XLM-RoBERTa model)"),NIe.forEach(t),we.forEach(t),aSr=i(Wl),T(wC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),xje=i(f),Nc=n(f,"H2",{class:!0});var IGe=s(Nc);AC=n(IGe,"A",{id:!0,class:!0,href:!0});var _6t=s(AC);B7e=n(_6t,"SPAN",{});var b6t=s(B7e);T(N9.$$.fragment,b6t),b6t.forEach(t),_6t.forEach(t),nSr=i(IGe),I7e=n(IGe,"SPAN",{});var v6t=s(I7e);sSr=r(v6t,"FlaxAutoModelForMaskedLM"),v6t.forEach(t),IGe.forEach(t),$je=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(j9.$$.fragment,Ql),lSr=i(Ql),jc=n(Ql,"P",{});var Nee=s(jc);iSr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SY=n(Nee,"A",{href:!0});var F6t=s(SY);dSr=r(F6t,"from_pretrained()"),F6t.forEach(t),cSr=r(Nee," class method or the "),RY=n(Nee,"A",{href:!0});var T6t=s(RY);fSr=r(T6t,"from_config()"),T6t.forEach(t),mSr=r(Nee,` class
method.`),Nee.forEach(t),gSr=i(Ql),D9=n(Ql,"P",{});var qGe=s(D9);hSr=r(qGe,"This class cannot be instantiated directly using "),q7e=n(qGe,"CODE",{});var M6t=s(q7e);pSr=r(M6t,"__init__()"),M6t.forEach(t),uSr=r(qGe," (throws an error)."),qGe.forEach(t),_Sr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var tA=s(Xt);T(G9.$$.fragment,tA),bSr=i(tA),N7e=n(tA,"P",{});var E6t=s(N7e);vSr=r(E6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E6t.forEach(t),FSr=i(tA),Dc=n(tA,"P",{});var jee=s(Dc);TSr=r(jee,`Note:
Loading a model from its configuration file does `),j7e=n(jee,"STRONG",{});var C6t=s(j7e);MSr=r(C6t,"not"),C6t.forEach(t),ESr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(jee,"A",{href:!0});var w6t=s(PY);CSr=r(w6t,"from_pretrained()"),w6t.forEach(t),wSr=r(jee," to load the model weights."),jee.forEach(t),ASr=i(tA),T(yC.$$.fragment,tA),tA.forEach(t),ySr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(O9.$$.fragment,Hl),LSr=i(Hl),D7e=n(Hl,"P",{});var A6t=s(D7e);xSr=r(A6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A6t.forEach(t),$Sr=i(Hl),_n=n(Hl,"P",{});var aA=s(_n);kSr=r(aA,"The model class to instantiate is selected based on the "),G7e=n(aA,"CODE",{});var y6t=s(G7e);SSr=r(y6t,"model_type"),y6t.forEach(t),RSr=r(aA,` property of the config object (either
passed as an argument or loaded from `),O7e=n(aA,"CODE",{});var L6t=s(O7e);PSr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),BSr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(aA,"CODE",{});var x6t=s(V7e);ISr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),qSr=r(aA,":"),aA.forEach(t),NSr=i(Hl),xe=n(Hl,"UL",{});var qe=s(xe);LC=n(qe,"LI",{});var jIe=s(LC);X7e=n(jIe,"STRONG",{});var $6t=s(X7e);jSr=r($6t,"albert"),$6t.forEach(t),DSr=r(jIe," \u2014 "),BY=n(jIe,"A",{href:!0});var k6t=s(BY);GSr=r(k6t,"FlaxAlbertForMaskedLM"),k6t.forEach(t),OSr=r(jIe," (ALBERT model)"),jIe.forEach(t),VSr=i(qe),xC=n(qe,"LI",{});var DIe=s(xC);z7e=n(DIe,"STRONG",{});var S6t=s(z7e);XSr=r(S6t,"bart"),S6t.forEach(t),zSr=r(DIe," \u2014 "),IY=n(DIe,"A",{href:!0});var R6t=s(IY);WSr=r(R6t,"FlaxBartForConditionalGeneration"),R6t.forEach(t),QSr=r(DIe," (BART model)"),DIe.forEach(t),HSr=i(qe),$C=n(qe,"LI",{});var GIe=s($C);W7e=n(GIe,"STRONG",{});var P6t=s(W7e);USr=r(P6t,"bert"),P6t.forEach(t),JSr=r(GIe," \u2014 "),qY=n(GIe,"A",{href:!0});var B6t=s(qY);YSr=r(B6t,"FlaxBertForMaskedLM"),B6t.forEach(t),KSr=r(GIe," (BERT model)"),GIe.forEach(t),ZSr=i(qe),kC=n(qe,"LI",{});var OIe=s(kC);Q7e=n(OIe,"STRONG",{});var I6t=s(Q7e);eRr=r(I6t,"big_bird"),I6t.forEach(t),oRr=r(OIe," \u2014 "),NY=n(OIe,"A",{href:!0});var q6t=s(NY);rRr=r(q6t,"FlaxBigBirdForMaskedLM"),q6t.forEach(t),tRr=r(OIe," (BigBird model)"),OIe.forEach(t),aRr=i(qe),SC=n(qe,"LI",{});var VIe=s(SC);H7e=n(VIe,"STRONG",{});var N6t=s(H7e);nRr=r(N6t,"distilbert"),N6t.forEach(t),sRr=r(VIe," \u2014 "),jY=n(VIe,"A",{href:!0});var j6t=s(jY);lRr=r(j6t,"FlaxDistilBertForMaskedLM"),j6t.forEach(t),iRr=r(VIe," (DistilBERT model)"),VIe.forEach(t),dRr=i(qe),RC=n(qe,"LI",{});var XIe=s(RC);U7e=n(XIe,"STRONG",{});var D6t=s(U7e);cRr=r(D6t,"electra"),D6t.forEach(t),fRr=r(XIe," \u2014 "),DY=n(XIe,"A",{href:!0});var G6t=s(DY);mRr=r(G6t,"FlaxElectraForMaskedLM"),G6t.forEach(t),gRr=r(XIe," (ELECTRA model)"),XIe.forEach(t),hRr=i(qe),PC=n(qe,"LI",{});var zIe=s(PC);J7e=n(zIe,"STRONG",{});var O6t=s(J7e);pRr=r(O6t,"mbart"),O6t.forEach(t),uRr=r(zIe," \u2014 "),GY=n(zIe,"A",{href:!0});var V6t=s(GY);_Rr=r(V6t,"FlaxMBartForConditionalGeneration"),V6t.forEach(t),bRr=r(zIe," (mBART model)"),zIe.forEach(t),vRr=i(qe),BC=n(qe,"LI",{});var WIe=s(BC);Y7e=n(WIe,"STRONG",{});var X6t=s(Y7e);FRr=r(X6t,"roberta"),X6t.forEach(t),TRr=r(WIe," \u2014 "),OY=n(WIe,"A",{href:!0});var z6t=s(OY);MRr=r(z6t,"FlaxRobertaForMaskedLM"),z6t.forEach(t),ERr=r(WIe," (RoBERTa model)"),WIe.forEach(t),CRr=i(qe),IC=n(qe,"LI",{});var QIe=s(IC);K7e=n(QIe,"STRONG",{});var W6t=s(K7e);wRr=r(W6t,"roformer"),W6t.forEach(t),ARr=r(QIe," \u2014 "),VY=n(QIe,"A",{href:!0});var Q6t=s(VY);yRr=r(Q6t,"FlaxRoFormerForMaskedLM"),Q6t.forEach(t),LRr=r(QIe," (RoFormer model)"),QIe.forEach(t),xRr=i(qe),qC=n(qe,"LI",{});var HIe=s(qC);Z7e=n(HIe,"STRONG",{});var H6t=s(Z7e);$Rr=r(H6t,"xlm-roberta"),H6t.forEach(t),kRr=r(HIe," \u2014 "),XY=n(HIe,"A",{href:!0});var U6t=s(XY);SRr=r(U6t,"FlaxXLMRobertaForMaskedLM"),U6t.forEach(t),RRr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),qe.forEach(t),PRr=i(Hl),T(NC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),kje=i(f),Gc=n(f,"H2",{class:!0});var NGe=s(Gc);jC=n(NGe,"A",{id:!0,class:!0,href:!0});var J6t=s(jC);eMe=n(J6t,"SPAN",{});var Y6t=s(eMe);T(V9.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),BRr=i(NGe),oMe=n(NGe,"SPAN",{});var K6t=s(oMe);IRr=r(K6t,"FlaxAutoModelForSeq2SeqLM"),K6t.forEach(t),NGe.forEach(t),Sje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(X9.$$.fragment,Ul),qRr=i(Ul),Oc=n(Ul,"P",{});var Dee=s(Oc);NRr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zY=n(Dee,"A",{href:!0});var Z6t=s(zY);jRr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),DRr=r(Dee," class method or the "),WY=n(Dee,"A",{href:!0});var eyt=s(WY);GRr=r(eyt,"from_config()"),eyt.forEach(t),ORr=r(Dee,` class
method.`),Dee.forEach(t),VRr=i(Ul),z9=n(Ul,"P",{});var jGe=s(z9);XRr=r(jGe,"This class cannot be instantiated directly using "),rMe=n(jGe,"CODE",{});var oyt=s(rMe);zRr=r(oyt,"__init__()"),oyt.forEach(t),WRr=r(jGe," (throws an error)."),jGe.forEach(t),QRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var nA=s(zt);T(W9.$$.fragment,nA),HRr=i(nA),tMe=n(nA,"P",{});var ryt=s(tMe);URr=r(ryt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ryt.forEach(t),JRr=i(nA),Vc=n(nA,"P",{});var Gee=s(Vc);YRr=r(Gee,`Note:
Loading a model from its configuration file does `),aMe=n(Gee,"STRONG",{});var tyt=s(aMe);KRr=r(tyt,"not"),tyt.forEach(t),ZRr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Gee,"A",{href:!0});var ayt=s(QY);ePr=r(ayt,"from_pretrained()"),ayt.forEach(t),oPr=r(Gee," to load the model weights."),Gee.forEach(t),rPr=i(nA),T(DC.$$.fragment,nA),nA.forEach(t),tPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Q9.$$.fragment,Jl),aPr=i(Jl),nMe=n(Jl,"P",{});var nyt=s(nMe);nPr=r(nyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nyt.forEach(t),sPr=i(Jl),bn=n(Jl,"P",{});var sA=s(bn);lPr=r(sA,"The model class to instantiate is selected based on the "),sMe=n(sA,"CODE",{});var syt=s(sMe);iPr=r(syt,"model_type"),syt.forEach(t),dPr=r(sA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(sA,"CODE",{});var lyt=s(lMe);cPr=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),fPr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(sA,"CODE",{});var iyt=s(iMe);mPr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),gPr=r(sA,":"),sA.forEach(t),hPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);GC=n(ze,"LI",{});var UIe=s(GC);dMe=n(UIe,"STRONG",{});var dyt=s(dMe);pPr=r(dyt,"bart"),dyt.forEach(t),uPr=r(UIe," \u2014 "),HY=n(UIe,"A",{href:!0});var cyt=s(HY);_Pr=r(cyt,"FlaxBartForConditionalGeneration"),cyt.forEach(t),bPr=r(UIe," (BART model)"),UIe.forEach(t),vPr=i(ze),OC=n(ze,"LI",{});var JIe=s(OC);cMe=n(JIe,"STRONG",{});var fyt=s(cMe);FPr=r(fyt,"blenderbot"),fyt.forEach(t),TPr=r(JIe," \u2014 "),UY=n(JIe,"A",{href:!0});var myt=s(UY);MPr=r(myt,"FlaxBlenderbotForConditionalGeneration"),myt.forEach(t),EPr=r(JIe," (Blenderbot model)"),JIe.forEach(t),CPr=i(ze),VC=n(ze,"LI",{});var YIe=s(VC);fMe=n(YIe,"STRONG",{});var gyt=s(fMe);wPr=r(gyt,"blenderbot-small"),gyt.forEach(t),APr=r(YIe," \u2014 "),JY=n(YIe,"A",{href:!0});var hyt=s(JY);yPr=r(hyt,"FlaxBlenderbotSmallForConditionalGeneration"),hyt.forEach(t),LPr=r(YIe," (BlenderbotSmall model)"),YIe.forEach(t),xPr=i(ze),XC=n(ze,"LI",{});var KIe=s(XC);mMe=n(KIe,"STRONG",{});var pyt=s(mMe);$Pr=r(pyt,"encoder-decoder"),pyt.forEach(t),kPr=r(KIe," \u2014 "),YY=n(KIe,"A",{href:!0});var uyt=s(YY);SPr=r(uyt,"FlaxEncoderDecoderModel"),uyt.forEach(t),RPr=r(KIe," (Encoder decoder model)"),KIe.forEach(t),PPr=i(ze),zC=n(ze,"LI",{});var ZIe=s(zC);gMe=n(ZIe,"STRONG",{});var _yt=s(gMe);BPr=r(_yt,"marian"),_yt.forEach(t),IPr=r(ZIe," \u2014 "),KY=n(ZIe,"A",{href:!0});var byt=s(KY);qPr=r(byt,"FlaxMarianMTModel"),byt.forEach(t),NPr=r(ZIe," (Marian model)"),ZIe.forEach(t),jPr=i(ze),WC=n(ze,"LI",{});var eqe=s(WC);hMe=n(eqe,"STRONG",{});var vyt=s(hMe);DPr=r(vyt,"mbart"),vyt.forEach(t),GPr=r(eqe," \u2014 "),ZY=n(eqe,"A",{href:!0});var Fyt=s(ZY);OPr=r(Fyt,"FlaxMBartForConditionalGeneration"),Fyt.forEach(t),VPr=r(eqe," (mBART model)"),eqe.forEach(t),XPr=i(ze),QC=n(ze,"LI",{});var oqe=s(QC);pMe=n(oqe,"STRONG",{});var Tyt=s(pMe);zPr=r(Tyt,"mt5"),Tyt.forEach(t),WPr=r(oqe," \u2014 "),eK=n(oqe,"A",{href:!0});var Myt=s(eK);QPr=r(Myt,"FlaxMT5ForConditionalGeneration"),Myt.forEach(t),HPr=r(oqe," (mT5 model)"),oqe.forEach(t),UPr=i(ze),HC=n(ze,"LI",{});var rqe=s(HC);uMe=n(rqe,"STRONG",{});var Eyt=s(uMe);JPr=r(Eyt,"pegasus"),Eyt.forEach(t),YPr=r(rqe," \u2014 "),oK=n(rqe,"A",{href:!0});var Cyt=s(oK);KPr=r(Cyt,"FlaxPegasusForConditionalGeneration"),Cyt.forEach(t),ZPr=r(rqe," (Pegasus model)"),rqe.forEach(t),eBr=i(ze),UC=n(ze,"LI",{});var tqe=s(UC);_Me=n(tqe,"STRONG",{});var wyt=s(_Me);oBr=r(wyt,"t5"),wyt.forEach(t),rBr=r(tqe," \u2014 "),rK=n(tqe,"A",{href:!0});var Ayt=s(rK);tBr=r(Ayt,"FlaxT5ForConditionalGeneration"),Ayt.forEach(t),aBr=r(tqe," (T5 model)"),tqe.forEach(t),ze.forEach(t),nBr=i(Jl),T(JC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Rje=i(f),Xc=n(f,"H2",{class:!0});var DGe=s(Xc);YC=n(DGe,"A",{id:!0,class:!0,href:!0});var yyt=s(YC);bMe=n(yyt,"SPAN",{});var Lyt=s(bMe);T(H9.$$.fragment,Lyt),Lyt.forEach(t),yyt.forEach(t),sBr=i(DGe),vMe=n(DGe,"SPAN",{});var xyt=s(vMe);lBr=r(xyt,"FlaxAutoModelForSequenceClassification"),xyt.forEach(t),DGe.forEach(t),Pje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(U9.$$.fragment,Yl),iBr=i(Yl),zc=n(Yl,"P",{});var Oee=s(zc);dBr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=n(Oee,"A",{href:!0});var $yt=s(tK);cBr=r($yt,"from_pretrained()"),$yt.forEach(t),fBr=r(Oee," class method or the "),aK=n(Oee,"A",{href:!0});var kyt=s(aK);mBr=r(kyt,"from_config()"),kyt.forEach(t),gBr=r(Oee,` class
method.`),Oee.forEach(t),hBr=i(Yl),J9=n(Yl,"P",{});var GGe=s(J9);pBr=r(GGe,"This class cannot be instantiated directly using "),FMe=n(GGe,"CODE",{});var Syt=s(FMe);uBr=r(Syt,"__init__()"),Syt.forEach(t),_Br=r(GGe," (throws an error)."),GGe.forEach(t),bBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var lA=s(Wt);T(Y9.$$.fragment,lA),vBr=i(lA),TMe=n(lA,"P",{});var Ryt=s(TMe);FBr=r(Ryt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ryt.forEach(t),TBr=i(lA),Wc=n(lA,"P",{});var Vee=s(Wc);MBr=r(Vee,`Note:
Loading a model from its configuration file does `),MMe=n(Vee,"STRONG",{});var Pyt=s(MMe);EBr=r(Pyt,"not"),Pyt.forEach(t),CBr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(Vee,"A",{href:!0});var Byt=s(nK);wBr=r(Byt,"from_pretrained()"),Byt.forEach(t),ABr=r(Vee," to load the model weights."),Vee.forEach(t),yBr=i(lA),T(KC.$$.fragment,lA),lA.forEach(t),LBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(K9.$$.fragment,Kl),xBr=i(Kl),EMe=n(Kl,"P",{});var Iyt=s(EMe);$Br=r(Iyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Iyt.forEach(t),kBr=i(Kl),vn=n(Kl,"P",{});var iA=s(vn);SBr=r(iA,"The model class to instantiate is selected based on the "),CMe=n(iA,"CODE",{});var qyt=s(CMe);RBr=r(qyt,"model_type"),qyt.forEach(t),PBr=r(iA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(iA,"CODE",{});var Nyt=s(wMe);BBr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),IBr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(iA,"CODE",{});var jyt=s(AMe);qBr=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),NBr=r(iA,":"),iA.forEach(t),jBr=i(Kl),$e=n(Kl,"UL",{});var Ne=s($e);ZC=n(Ne,"LI",{});var aqe=s(ZC);yMe=n(aqe,"STRONG",{});var Dyt=s(yMe);DBr=r(Dyt,"albert"),Dyt.forEach(t),GBr=r(aqe," \u2014 "),sK=n(aqe,"A",{href:!0});var Gyt=s(sK);OBr=r(Gyt,"FlaxAlbertForSequenceClassification"),Gyt.forEach(t),VBr=r(aqe," (ALBERT model)"),aqe.forEach(t),XBr=i(Ne),e5=n(Ne,"LI",{});var nqe=s(e5);LMe=n(nqe,"STRONG",{});var Oyt=s(LMe);zBr=r(Oyt,"bart"),Oyt.forEach(t),WBr=r(nqe," \u2014 "),lK=n(nqe,"A",{href:!0});var Vyt=s(lK);QBr=r(Vyt,"FlaxBartForSequenceClassification"),Vyt.forEach(t),HBr=r(nqe," (BART model)"),nqe.forEach(t),UBr=i(Ne),o5=n(Ne,"LI",{});var sqe=s(o5);xMe=n(sqe,"STRONG",{});var Xyt=s(xMe);JBr=r(Xyt,"bert"),Xyt.forEach(t),YBr=r(sqe," \u2014 "),iK=n(sqe,"A",{href:!0});var zyt=s(iK);KBr=r(zyt,"FlaxBertForSequenceClassification"),zyt.forEach(t),ZBr=r(sqe," (BERT model)"),sqe.forEach(t),eIr=i(Ne),r5=n(Ne,"LI",{});var lqe=s(r5);$Me=n(lqe,"STRONG",{});var Wyt=s($Me);oIr=r(Wyt,"big_bird"),Wyt.forEach(t),rIr=r(lqe," \u2014 "),dK=n(lqe,"A",{href:!0});var Qyt=s(dK);tIr=r(Qyt,"FlaxBigBirdForSequenceClassification"),Qyt.forEach(t),aIr=r(lqe," (BigBird model)"),lqe.forEach(t),nIr=i(Ne),t5=n(Ne,"LI",{});var iqe=s(t5);kMe=n(iqe,"STRONG",{});var Hyt=s(kMe);sIr=r(Hyt,"distilbert"),Hyt.forEach(t),lIr=r(iqe," \u2014 "),cK=n(iqe,"A",{href:!0});var Uyt=s(cK);iIr=r(Uyt,"FlaxDistilBertForSequenceClassification"),Uyt.forEach(t),dIr=r(iqe," (DistilBERT model)"),iqe.forEach(t),cIr=i(Ne),a5=n(Ne,"LI",{});var dqe=s(a5);SMe=n(dqe,"STRONG",{});var Jyt=s(SMe);fIr=r(Jyt,"electra"),Jyt.forEach(t),mIr=r(dqe," \u2014 "),fK=n(dqe,"A",{href:!0});var Yyt=s(fK);gIr=r(Yyt,"FlaxElectraForSequenceClassification"),Yyt.forEach(t),hIr=r(dqe," (ELECTRA model)"),dqe.forEach(t),pIr=i(Ne),n5=n(Ne,"LI",{});var cqe=s(n5);RMe=n(cqe,"STRONG",{});var Kyt=s(RMe);uIr=r(Kyt,"mbart"),Kyt.forEach(t),_Ir=r(cqe," \u2014 "),mK=n(cqe,"A",{href:!0});var Zyt=s(mK);bIr=r(Zyt,"FlaxMBartForSequenceClassification"),Zyt.forEach(t),vIr=r(cqe," (mBART model)"),cqe.forEach(t),FIr=i(Ne),s5=n(Ne,"LI",{});var fqe=s(s5);PMe=n(fqe,"STRONG",{});var eLt=s(PMe);TIr=r(eLt,"roberta"),eLt.forEach(t),MIr=r(fqe," \u2014 "),gK=n(fqe,"A",{href:!0});var oLt=s(gK);EIr=r(oLt,"FlaxRobertaForSequenceClassification"),oLt.forEach(t),CIr=r(fqe," (RoBERTa model)"),fqe.forEach(t),wIr=i(Ne),l5=n(Ne,"LI",{});var mqe=s(l5);BMe=n(mqe,"STRONG",{});var rLt=s(BMe);AIr=r(rLt,"roformer"),rLt.forEach(t),yIr=r(mqe," \u2014 "),hK=n(mqe,"A",{href:!0});var tLt=s(hK);LIr=r(tLt,"FlaxRoFormerForSequenceClassification"),tLt.forEach(t),xIr=r(mqe," (RoFormer model)"),mqe.forEach(t),$Ir=i(Ne),i5=n(Ne,"LI",{});var gqe=s(i5);IMe=n(gqe,"STRONG",{});var aLt=s(IMe);kIr=r(aLt,"xlm-roberta"),aLt.forEach(t),SIr=r(gqe," \u2014 "),pK=n(gqe,"A",{href:!0});var nLt=s(pK);RIr=r(nLt,"FlaxXLMRobertaForSequenceClassification"),nLt.forEach(t),PIr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),Ne.forEach(t),BIr=i(Kl),T(d5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Bje=i(f),Qc=n(f,"H2",{class:!0});var OGe=s(Qc);c5=n(OGe,"A",{id:!0,class:!0,href:!0});var sLt=s(c5);qMe=n(sLt,"SPAN",{});var lLt=s(qMe);T(Z9.$$.fragment,lLt),lLt.forEach(t),sLt.forEach(t),IIr=i(OGe),NMe=n(OGe,"SPAN",{});var iLt=s(NMe);qIr=r(iLt,"FlaxAutoModelForQuestionAnswering"),iLt.forEach(t),OGe.forEach(t),Ije=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(ex.$$.fragment,Zl),NIr=i(Zl),Hc=n(Zl,"P",{});var Xee=s(Hc);jIr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=n(Xee,"A",{href:!0});var dLt=s(uK);DIr=r(dLt,"from_pretrained()"),dLt.forEach(t),GIr=r(Xee," class method or the "),_K=n(Xee,"A",{href:!0});var cLt=s(_K);OIr=r(cLt,"from_config()"),cLt.forEach(t),VIr=r(Xee,` class
method.`),Xee.forEach(t),XIr=i(Zl),ox=n(Zl,"P",{});var VGe=s(ox);zIr=r(VGe,"This class cannot be instantiated directly using "),jMe=n(VGe,"CODE",{});var fLt=s(jMe);WIr=r(fLt,"__init__()"),fLt.forEach(t),QIr=r(VGe," (throws an error)."),VGe.forEach(t),HIr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var dA=s(Qt);T(rx.$$.fragment,dA),UIr=i(dA),DMe=n(dA,"P",{});var mLt=s(DMe);JIr=r(mLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mLt.forEach(t),YIr=i(dA),Uc=n(dA,"P",{});var zee=s(Uc);KIr=r(zee,`Note:
Loading a model from its configuration file does `),GMe=n(zee,"STRONG",{});var gLt=s(GMe);ZIr=r(gLt,"not"),gLt.forEach(t),eqr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(zee,"A",{href:!0});var hLt=s(bK);oqr=r(hLt,"from_pretrained()"),hLt.forEach(t),rqr=r(zee," to load the model weights."),zee.forEach(t),tqr=i(dA),T(f5.$$.fragment,dA),dA.forEach(t),aqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(tx.$$.fragment,ei),nqr=i(ei),OMe=n(ei,"P",{});var pLt=s(OMe);sqr=r(pLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pLt.forEach(t),lqr=i(ei),Fn=n(ei,"P",{});var cA=s(Fn);iqr=r(cA,"The model class to instantiate is selected based on the "),VMe=n(cA,"CODE",{});var uLt=s(VMe);dqr=r(uLt,"model_type"),uLt.forEach(t),cqr=r(cA,` property of the config object (either
passed as an argument or loaded from `),XMe=n(cA,"CODE",{});var _Lt=s(XMe);fqr=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),mqr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(cA,"CODE",{});var bLt=s(zMe);gqr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),hqr=r(cA,":"),cA.forEach(t),pqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);m5=n(je,"LI",{});var hqe=s(m5);WMe=n(hqe,"STRONG",{});var vLt=s(WMe);uqr=r(vLt,"albert"),vLt.forEach(t),_qr=r(hqe," \u2014 "),vK=n(hqe,"A",{href:!0});var FLt=s(vK);bqr=r(FLt,"FlaxAlbertForQuestionAnswering"),FLt.forEach(t),vqr=r(hqe," (ALBERT model)"),hqe.forEach(t),Fqr=i(je),g5=n(je,"LI",{});var pqe=s(g5);QMe=n(pqe,"STRONG",{});var TLt=s(QMe);Tqr=r(TLt,"bart"),TLt.forEach(t),Mqr=r(pqe," \u2014 "),FK=n(pqe,"A",{href:!0});var MLt=s(FK);Eqr=r(MLt,"FlaxBartForQuestionAnswering"),MLt.forEach(t),Cqr=r(pqe," (BART model)"),pqe.forEach(t),wqr=i(je),h5=n(je,"LI",{});var uqe=s(h5);HMe=n(uqe,"STRONG",{});var ELt=s(HMe);Aqr=r(ELt,"bert"),ELt.forEach(t),yqr=r(uqe," \u2014 "),TK=n(uqe,"A",{href:!0});var CLt=s(TK);Lqr=r(CLt,"FlaxBertForQuestionAnswering"),CLt.forEach(t),xqr=r(uqe," (BERT model)"),uqe.forEach(t),$qr=i(je),p5=n(je,"LI",{});var _qe=s(p5);UMe=n(_qe,"STRONG",{});var wLt=s(UMe);kqr=r(wLt,"big_bird"),wLt.forEach(t),Sqr=r(_qe," \u2014 "),MK=n(_qe,"A",{href:!0});var ALt=s(MK);Rqr=r(ALt,"FlaxBigBirdForQuestionAnswering"),ALt.forEach(t),Pqr=r(_qe," (BigBird model)"),_qe.forEach(t),Bqr=i(je),u5=n(je,"LI",{});var bqe=s(u5);JMe=n(bqe,"STRONG",{});var yLt=s(JMe);Iqr=r(yLt,"distilbert"),yLt.forEach(t),qqr=r(bqe," \u2014 "),EK=n(bqe,"A",{href:!0});var LLt=s(EK);Nqr=r(LLt,"FlaxDistilBertForQuestionAnswering"),LLt.forEach(t),jqr=r(bqe," (DistilBERT model)"),bqe.forEach(t),Dqr=i(je),_5=n(je,"LI",{});var vqe=s(_5);YMe=n(vqe,"STRONG",{});var xLt=s(YMe);Gqr=r(xLt,"electra"),xLt.forEach(t),Oqr=r(vqe," \u2014 "),CK=n(vqe,"A",{href:!0});var $Lt=s(CK);Vqr=r($Lt,"FlaxElectraForQuestionAnswering"),$Lt.forEach(t),Xqr=r(vqe," (ELECTRA model)"),vqe.forEach(t),zqr=i(je),b5=n(je,"LI",{});var Fqe=s(b5);KMe=n(Fqe,"STRONG",{});var kLt=s(KMe);Wqr=r(kLt,"mbart"),kLt.forEach(t),Qqr=r(Fqe," \u2014 "),wK=n(Fqe,"A",{href:!0});var SLt=s(wK);Hqr=r(SLt,"FlaxMBartForQuestionAnswering"),SLt.forEach(t),Uqr=r(Fqe," (mBART model)"),Fqe.forEach(t),Jqr=i(je),v5=n(je,"LI",{});var Tqe=s(v5);ZMe=n(Tqe,"STRONG",{});var RLt=s(ZMe);Yqr=r(RLt,"roberta"),RLt.forEach(t),Kqr=r(Tqe," \u2014 "),AK=n(Tqe,"A",{href:!0});var PLt=s(AK);Zqr=r(PLt,"FlaxRobertaForQuestionAnswering"),PLt.forEach(t),eNr=r(Tqe," (RoBERTa model)"),Tqe.forEach(t),oNr=i(je),F5=n(je,"LI",{});var Mqe=s(F5);e4e=n(Mqe,"STRONG",{});var BLt=s(e4e);rNr=r(BLt,"roformer"),BLt.forEach(t),tNr=r(Mqe," \u2014 "),yK=n(Mqe,"A",{href:!0});var ILt=s(yK);aNr=r(ILt,"FlaxRoFormerForQuestionAnswering"),ILt.forEach(t),nNr=r(Mqe," (RoFormer model)"),Mqe.forEach(t),sNr=i(je),T5=n(je,"LI",{});var Eqe=s(T5);o4e=n(Eqe,"STRONG",{});var qLt=s(o4e);lNr=r(qLt,"xlm-roberta"),qLt.forEach(t),iNr=r(Eqe," \u2014 "),LK=n(Eqe,"A",{href:!0});var NLt=s(LK);dNr=r(NLt,"FlaxXLMRobertaForQuestionAnswering"),NLt.forEach(t),cNr=r(Eqe," (XLM-RoBERTa model)"),Eqe.forEach(t),je.forEach(t),fNr=i(ei),T(M5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),qje=i(f),Jc=n(f,"H2",{class:!0});var XGe=s(Jc);E5=n(XGe,"A",{id:!0,class:!0,href:!0});var jLt=s(E5);r4e=n(jLt,"SPAN",{});var DLt=s(r4e);T(ax.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),mNr=i(XGe),t4e=n(XGe,"SPAN",{});var GLt=s(t4e);gNr=r(GLt,"FlaxAutoModelForTokenClassification"),GLt.forEach(t),XGe.forEach(t),Nje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(nx.$$.fragment,oi),hNr=i(oi),Yc=n(oi,"P",{});var Wee=s(Yc);pNr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xK=n(Wee,"A",{href:!0});var OLt=s(xK);uNr=r(OLt,"from_pretrained()"),OLt.forEach(t),_Nr=r(Wee," class method or the "),$K=n(Wee,"A",{href:!0});var VLt=s($K);bNr=r(VLt,"from_config()"),VLt.forEach(t),vNr=r(Wee,` class
method.`),Wee.forEach(t),FNr=i(oi),sx=n(oi,"P",{});var zGe=s(sx);TNr=r(zGe,"This class cannot be instantiated directly using "),a4e=n(zGe,"CODE",{});var XLt=s(a4e);MNr=r(XLt,"__init__()"),XLt.forEach(t),ENr=r(zGe," (throws an error)."),zGe.forEach(t),CNr=i(oi),Ht=n(oi,"DIV",{class:!0});var fA=s(Ht);T(lx.$$.fragment,fA),wNr=i(fA),n4e=n(fA,"P",{});var zLt=s(n4e);ANr=r(zLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zLt.forEach(t),yNr=i(fA),Kc=n(fA,"P",{});var Qee=s(Kc);LNr=r(Qee,`Note:
Loading a model from its configuration file does `),s4e=n(Qee,"STRONG",{});var WLt=s(s4e);xNr=r(WLt,"not"),WLt.forEach(t),$Nr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(Qee,"A",{href:!0});var QLt=s(kK);kNr=r(QLt,"from_pretrained()"),QLt.forEach(t),SNr=r(Qee," to load the model weights."),Qee.forEach(t),RNr=i(fA),T(C5.$$.fragment,fA),fA.forEach(t),PNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(ix.$$.fragment,ri),BNr=i(ri),l4e=n(ri,"P",{});var HLt=s(l4e);INr=r(HLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HLt.forEach(t),qNr=i(ri),Tn=n(ri,"P",{});var mA=s(Tn);NNr=r(mA,"The model class to instantiate is selected based on the "),i4e=n(mA,"CODE",{});var ULt=s(i4e);jNr=r(ULt,"model_type"),ULt.forEach(t),DNr=r(mA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(mA,"CODE",{});var JLt=s(d4e);GNr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),ONr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(mA,"CODE",{});var YLt=s(c4e);VNr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),XNr=r(mA,":"),mA.forEach(t),zNr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);w5=n(Fo,"LI",{});var Cqe=s(w5);f4e=n(Cqe,"STRONG",{});var KLt=s(f4e);WNr=r(KLt,"albert"),KLt.forEach(t),QNr=r(Cqe," \u2014 "),SK=n(Cqe,"A",{href:!0});var ZLt=s(SK);HNr=r(ZLt,"FlaxAlbertForTokenClassification"),ZLt.forEach(t),UNr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),JNr=i(Fo),A5=n(Fo,"LI",{});var wqe=s(A5);m4e=n(wqe,"STRONG",{});var e9t=s(m4e);YNr=r(e9t,"bert"),e9t.forEach(t),KNr=r(wqe," \u2014 "),RK=n(wqe,"A",{href:!0});var o9t=s(RK);ZNr=r(o9t,"FlaxBertForTokenClassification"),o9t.forEach(t),ejr=r(wqe," (BERT model)"),wqe.forEach(t),ojr=i(Fo),y5=n(Fo,"LI",{});var Aqe=s(y5);g4e=n(Aqe,"STRONG",{});var r9t=s(g4e);rjr=r(r9t,"big_bird"),r9t.forEach(t),tjr=r(Aqe," \u2014 "),PK=n(Aqe,"A",{href:!0});var t9t=s(PK);ajr=r(t9t,"FlaxBigBirdForTokenClassification"),t9t.forEach(t),njr=r(Aqe," (BigBird model)"),Aqe.forEach(t),sjr=i(Fo),L5=n(Fo,"LI",{});var yqe=s(L5);h4e=n(yqe,"STRONG",{});var a9t=s(h4e);ljr=r(a9t,"distilbert"),a9t.forEach(t),ijr=r(yqe," \u2014 "),BK=n(yqe,"A",{href:!0});var n9t=s(BK);djr=r(n9t,"FlaxDistilBertForTokenClassification"),n9t.forEach(t),cjr=r(yqe," (DistilBERT model)"),yqe.forEach(t),fjr=i(Fo),x5=n(Fo,"LI",{});var Lqe=s(x5);p4e=n(Lqe,"STRONG",{});var s9t=s(p4e);mjr=r(s9t,"electra"),s9t.forEach(t),gjr=r(Lqe," \u2014 "),IK=n(Lqe,"A",{href:!0});var l9t=s(IK);hjr=r(l9t,"FlaxElectraForTokenClassification"),l9t.forEach(t),pjr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),ujr=i(Fo),$5=n(Fo,"LI",{});var xqe=s($5);u4e=n(xqe,"STRONG",{});var i9t=s(u4e);_jr=r(i9t,"roberta"),i9t.forEach(t),bjr=r(xqe," \u2014 "),qK=n(xqe,"A",{href:!0});var d9t=s(qK);vjr=r(d9t,"FlaxRobertaForTokenClassification"),d9t.forEach(t),Fjr=r(xqe," (RoBERTa model)"),xqe.forEach(t),Tjr=i(Fo),k5=n(Fo,"LI",{});var $qe=s(k5);_4e=n($qe,"STRONG",{});var c9t=s(_4e);Mjr=r(c9t,"roformer"),c9t.forEach(t),Ejr=r($qe," \u2014 "),NK=n($qe,"A",{href:!0});var f9t=s(NK);Cjr=r(f9t,"FlaxRoFormerForTokenClassification"),f9t.forEach(t),wjr=r($qe," (RoFormer model)"),$qe.forEach(t),Ajr=i(Fo),S5=n(Fo,"LI",{});var kqe=s(S5);b4e=n(kqe,"STRONG",{});var m9t=s(b4e);yjr=r(m9t,"xlm-roberta"),m9t.forEach(t),Ljr=r(kqe," \u2014 "),jK=n(kqe,"A",{href:!0});var g9t=s(jK);xjr=r(g9t,"FlaxXLMRobertaForTokenClassification"),g9t.forEach(t),$jr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),Fo.forEach(t),kjr=i(ri),T(R5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),jje=i(f),Zc=n(f,"H2",{class:!0});var WGe=s(Zc);P5=n(WGe,"A",{id:!0,class:!0,href:!0});var h9t=s(P5);v4e=n(h9t,"SPAN",{});var p9t=s(v4e);T(dx.$$.fragment,p9t),p9t.forEach(t),h9t.forEach(t),Sjr=i(WGe),F4e=n(WGe,"SPAN",{});var u9t=s(F4e);Rjr=r(u9t,"FlaxAutoModelForMultipleChoice"),u9t.forEach(t),WGe.forEach(t),Dje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(cx.$$.fragment,ti),Pjr=i(ti),ef=n(ti,"P",{});var Hee=s(ef);Bjr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DK=n(Hee,"A",{href:!0});var _9t=s(DK);Ijr=r(_9t,"from_pretrained()"),_9t.forEach(t),qjr=r(Hee," class method or the "),GK=n(Hee,"A",{href:!0});var b9t=s(GK);Njr=r(b9t,"from_config()"),b9t.forEach(t),jjr=r(Hee,` class
method.`),Hee.forEach(t),Djr=i(ti),fx=n(ti,"P",{});var QGe=s(fx);Gjr=r(QGe,"This class cannot be instantiated directly using "),T4e=n(QGe,"CODE",{});var v9t=s(T4e);Ojr=r(v9t,"__init__()"),v9t.forEach(t),Vjr=r(QGe," (throws an error)."),QGe.forEach(t),Xjr=i(ti),Ut=n(ti,"DIV",{class:!0});var gA=s(Ut);T(mx.$$.fragment,gA),zjr=i(gA),M4e=n(gA,"P",{});var F9t=s(M4e);Wjr=r(F9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F9t.forEach(t),Qjr=i(gA),of=n(gA,"P",{});var Uee=s(of);Hjr=r(Uee,`Note:
Loading a model from its configuration file does `),E4e=n(Uee,"STRONG",{});var T9t=s(E4e);Ujr=r(T9t,"not"),T9t.forEach(t),Jjr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Uee,"A",{href:!0});var M9t=s(OK);Yjr=r(M9t,"from_pretrained()"),M9t.forEach(t),Kjr=r(Uee," to load the model weights."),Uee.forEach(t),Zjr=i(gA),T(B5.$$.fragment,gA),gA.forEach(t),eDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(gx.$$.fragment,ai),oDr=i(ai),C4e=n(ai,"P",{});var E9t=s(C4e);rDr=r(E9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E9t.forEach(t),tDr=i(ai),Mn=n(ai,"P",{});var hA=s(Mn);aDr=r(hA,"The model class to instantiate is selected based on the "),w4e=n(hA,"CODE",{});var C9t=s(w4e);nDr=r(C9t,"model_type"),C9t.forEach(t),sDr=r(hA,` property of the config object (either
passed as an argument or loaded from `),A4e=n(hA,"CODE",{});var w9t=s(A4e);lDr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),iDr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(hA,"CODE",{});var A9t=s(y4e);dDr=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),cDr=r(hA,":"),hA.forEach(t),fDr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);I5=n(To,"LI",{});var Sqe=s(I5);L4e=n(Sqe,"STRONG",{});var y9t=s(L4e);mDr=r(y9t,"albert"),y9t.forEach(t),gDr=r(Sqe," \u2014 "),VK=n(Sqe,"A",{href:!0});var L9t=s(VK);hDr=r(L9t,"FlaxAlbertForMultipleChoice"),L9t.forEach(t),pDr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),uDr=i(To),q5=n(To,"LI",{});var Rqe=s(q5);x4e=n(Rqe,"STRONG",{});var x9t=s(x4e);_Dr=r(x9t,"bert"),x9t.forEach(t),bDr=r(Rqe," \u2014 "),XK=n(Rqe,"A",{href:!0});var $9t=s(XK);vDr=r($9t,"FlaxBertForMultipleChoice"),$9t.forEach(t),FDr=r(Rqe," (BERT model)"),Rqe.forEach(t),TDr=i(To),N5=n(To,"LI",{});var Pqe=s(N5);$4e=n(Pqe,"STRONG",{});var k9t=s($4e);MDr=r(k9t,"big_bird"),k9t.forEach(t),EDr=r(Pqe," \u2014 "),zK=n(Pqe,"A",{href:!0});var S9t=s(zK);CDr=r(S9t,"FlaxBigBirdForMultipleChoice"),S9t.forEach(t),wDr=r(Pqe," (BigBird model)"),Pqe.forEach(t),ADr=i(To),j5=n(To,"LI",{});var Bqe=s(j5);k4e=n(Bqe,"STRONG",{});var R9t=s(k4e);yDr=r(R9t,"distilbert"),R9t.forEach(t),LDr=r(Bqe," \u2014 "),WK=n(Bqe,"A",{href:!0});var P9t=s(WK);xDr=r(P9t,"FlaxDistilBertForMultipleChoice"),P9t.forEach(t),$Dr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),kDr=i(To),D5=n(To,"LI",{});var Iqe=s(D5);S4e=n(Iqe,"STRONG",{});var B9t=s(S4e);SDr=r(B9t,"electra"),B9t.forEach(t),RDr=r(Iqe," \u2014 "),QK=n(Iqe,"A",{href:!0});var I9t=s(QK);PDr=r(I9t,"FlaxElectraForMultipleChoice"),I9t.forEach(t),BDr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),IDr=i(To),G5=n(To,"LI",{});var qqe=s(G5);R4e=n(qqe,"STRONG",{});var q9t=s(R4e);qDr=r(q9t,"roberta"),q9t.forEach(t),NDr=r(qqe," \u2014 "),HK=n(qqe,"A",{href:!0});var N9t=s(HK);jDr=r(N9t,"FlaxRobertaForMultipleChoice"),N9t.forEach(t),DDr=r(qqe," (RoBERTa model)"),qqe.forEach(t),GDr=i(To),O5=n(To,"LI",{});var Nqe=s(O5);P4e=n(Nqe,"STRONG",{});var j9t=s(P4e);ODr=r(j9t,"roformer"),j9t.forEach(t),VDr=r(Nqe," \u2014 "),UK=n(Nqe,"A",{href:!0});var D9t=s(UK);XDr=r(D9t,"FlaxRoFormerForMultipleChoice"),D9t.forEach(t),zDr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),WDr=i(To),V5=n(To,"LI",{});var jqe=s(V5);B4e=n(jqe,"STRONG",{});var G9t=s(B4e);QDr=r(G9t,"xlm-roberta"),G9t.forEach(t),HDr=r(jqe," \u2014 "),JK=n(jqe,"A",{href:!0});var O9t=s(JK);UDr=r(O9t,"FlaxXLMRobertaForMultipleChoice"),O9t.forEach(t),JDr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),To.forEach(t),YDr=i(ai),T(X5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Gje=i(f),rf=n(f,"H2",{class:!0});var HGe=s(rf);z5=n(HGe,"A",{id:!0,class:!0,href:!0});var V9t=s(z5);I4e=n(V9t,"SPAN",{});var X9t=s(I4e);T(hx.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),KDr=i(HGe),q4e=n(HGe,"SPAN",{});var z9t=s(q4e);ZDr=r(z9t,"FlaxAutoModelForNextSentencePrediction"),z9t.forEach(t),HGe.forEach(t),Oje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(px.$$.fragment,ni),eGr=i(ni),tf=n(ni,"P",{});var Jee=s(tf);oGr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YK=n(Jee,"A",{href:!0});var W9t=s(YK);rGr=r(W9t,"from_pretrained()"),W9t.forEach(t),tGr=r(Jee," class method or the "),KK=n(Jee,"A",{href:!0});var Q9t=s(KK);aGr=r(Q9t,"from_config()"),Q9t.forEach(t),nGr=r(Jee,` class
method.`),Jee.forEach(t),sGr=i(ni),ux=n(ni,"P",{});var UGe=s(ux);lGr=r(UGe,"This class cannot be instantiated directly using "),N4e=n(UGe,"CODE",{});var H9t=s(N4e);iGr=r(H9t,"__init__()"),H9t.forEach(t),dGr=r(UGe," (throws an error)."),UGe.forEach(t),cGr=i(ni),Jt=n(ni,"DIV",{class:!0});var pA=s(Jt);T(_x.$$.fragment,pA),fGr=i(pA),j4e=n(pA,"P",{});var U9t=s(j4e);mGr=r(U9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U9t.forEach(t),gGr=i(pA),af=n(pA,"P",{});var Yee=s(af);hGr=r(Yee,`Note:
Loading a model from its configuration file does `),D4e=n(Yee,"STRONG",{});var J9t=s(D4e);pGr=r(J9t,"not"),J9t.forEach(t),uGr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Yee,"A",{href:!0});var Y9t=s(ZK);_Gr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),bGr=r(Yee," to load the model weights."),Yee.forEach(t),vGr=i(pA),T(W5.$$.fragment,pA),pA.forEach(t),FGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(bx.$$.fragment,si),TGr=i(si),G4e=n(si,"P",{});var K9t=s(G4e);MGr=r(K9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K9t.forEach(t),EGr=i(si),En=n(si,"P",{});var uA=s(En);CGr=r(uA,"The model class to instantiate is selected based on the "),O4e=n(uA,"CODE",{});var Z9t=s(O4e);wGr=r(Z9t,"model_type"),Z9t.forEach(t),AGr=r(uA,` property of the config object (either
passed as an argument or loaded from `),V4e=n(uA,"CODE",{});var ext=s(V4e);yGr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),LGr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(uA,"CODE",{});var oxt=s(X4e);xGr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),$Gr=r(uA,":"),uA.forEach(t),kGr=i(si),z4e=n(si,"UL",{});var rxt=s(z4e);Q5=n(rxt,"LI",{});var Dqe=s(Q5);W4e=n(Dqe,"STRONG",{});var txt=s(W4e);SGr=r(txt,"bert"),txt.forEach(t),RGr=r(Dqe," \u2014 "),eZ=n(Dqe,"A",{href:!0});var axt=s(eZ);PGr=r(axt,"FlaxBertForNextSentencePrediction"),axt.forEach(t),BGr=r(Dqe," (BERT model)"),Dqe.forEach(t),rxt.forEach(t),IGr=i(si),T(H5.$$.fragment,si),si.forEach(t),ni.forEach(t),Vje=i(f),nf=n(f,"H2",{class:!0});var JGe=s(nf);U5=n(JGe,"A",{id:!0,class:!0,href:!0});var nxt=s(U5);Q4e=n(nxt,"SPAN",{});var sxt=s(Q4e);T(vx.$$.fragment,sxt),sxt.forEach(t),nxt.forEach(t),qGr=i(JGe),H4e=n(JGe,"SPAN",{});var lxt=s(H4e);NGr=r(lxt,"FlaxAutoModelForImageClassification"),lxt.forEach(t),JGe.forEach(t),Xje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Fx.$$.fragment,li),jGr=i(li),sf=n(li,"P",{});var Kee=s(sf);DGr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oZ=n(Kee,"A",{href:!0});var ixt=s(oZ);GGr=r(ixt,"from_pretrained()"),ixt.forEach(t),OGr=r(Kee," class method or the "),rZ=n(Kee,"A",{href:!0});var dxt=s(rZ);VGr=r(dxt,"from_config()"),dxt.forEach(t),XGr=r(Kee,` class
method.`),Kee.forEach(t),zGr=i(li),Tx=n(li,"P",{});var YGe=s(Tx);WGr=r(YGe,"This class cannot be instantiated directly using "),U4e=n(YGe,"CODE",{});var cxt=s(U4e);QGr=r(cxt,"__init__()"),cxt.forEach(t),HGr=r(YGe," (throws an error)."),YGe.forEach(t),UGr=i(li),Yt=n(li,"DIV",{class:!0});var _A=s(Yt);T(Mx.$$.fragment,_A),JGr=i(_A),J4e=n(_A,"P",{});var fxt=s(J4e);YGr=r(fxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fxt.forEach(t),KGr=i(_A),lf=n(_A,"P",{});var Zee=s(lf);ZGr=r(Zee,`Note:
Loading a model from its configuration file does `),Y4e=n(Zee,"STRONG",{});var mxt=s(Y4e);eOr=r(mxt,"not"),mxt.forEach(t),oOr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Zee,"A",{href:!0});var gxt=s(tZ);rOr=r(gxt,"from_pretrained()"),gxt.forEach(t),tOr=r(Zee," to load the model weights."),Zee.forEach(t),aOr=i(_A),T(J5.$$.fragment,_A),_A.forEach(t),nOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Ex.$$.fragment,ii),sOr=i(ii),K4e=n(ii,"P",{});var hxt=s(K4e);lOr=r(hxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hxt.forEach(t),iOr=i(ii),Cn=n(ii,"P",{});var bA=s(Cn);dOr=r(bA,"The model class to instantiate is selected based on the "),Z4e=n(bA,"CODE",{});var pxt=s(Z4e);cOr=r(pxt,"model_type"),pxt.forEach(t),fOr=r(bA,` property of the config object (either
passed as an argument or loaded from `),eEe=n(bA,"CODE",{});var uxt=s(eEe);mOr=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),gOr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(bA,"CODE",{});var _xt=s(oEe);hOr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),pOr=r(bA,":"),bA.forEach(t),uOr=i(ii),Cx=n(ii,"UL",{});var KGe=s(Cx);Y5=n(KGe,"LI",{});var Gqe=s(Y5);rEe=n(Gqe,"STRONG",{});var bxt=s(rEe);_Or=r(bxt,"beit"),bxt.forEach(t),bOr=r(Gqe," \u2014 "),aZ=n(Gqe,"A",{href:!0});var vxt=s(aZ);vOr=r(vxt,"FlaxBeitForImageClassification"),vxt.forEach(t),FOr=r(Gqe," (BEiT model)"),Gqe.forEach(t),TOr=i(KGe),K5=n(KGe,"LI",{});var Oqe=s(K5);tEe=n(Oqe,"STRONG",{});var Fxt=s(tEe);MOr=r(Fxt,"vit"),Fxt.forEach(t),EOr=r(Oqe," \u2014 "),nZ=n(Oqe,"A",{href:!0});var Txt=s(nZ);COr=r(Txt,"FlaxViTForImageClassification"),Txt.forEach(t),wOr=r(Oqe," (ViT model)"),Oqe.forEach(t),KGe.forEach(t),AOr=i(ii),T(Z5.$$.fragment,ii),ii.forEach(t),li.forEach(t),zje=i(f),df=n(f,"H2",{class:!0});var ZGe=s(df);ew=n(ZGe,"A",{id:!0,class:!0,href:!0});var Mxt=s(ew);aEe=n(Mxt,"SPAN",{});var Ext=s(aEe);T(wx.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),yOr=i(ZGe),nEe=n(ZGe,"SPAN",{});var Cxt=s(nEe);LOr=r(Cxt,"FlaxAutoModelForVision2Seq"),Cxt.forEach(t),ZGe.forEach(t),Wje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Ax.$$.fragment,di),xOr=i(di),cf=n(di,"P",{});var eoe=s(cf);$Or=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sZ=n(eoe,"A",{href:!0});var wxt=s(sZ);kOr=r(wxt,"from_pretrained()"),wxt.forEach(t),SOr=r(eoe," class method or the "),lZ=n(eoe,"A",{href:!0});var Axt=s(lZ);ROr=r(Axt,"from_config()"),Axt.forEach(t),POr=r(eoe,` class
method.`),eoe.forEach(t),BOr=i(di),yx=n(di,"P",{});var eOe=s(yx);IOr=r(eOe,"This class cannot be instantiated directly using "),sEe=n(eOe,"CODE",{});var yxt=s(sEe);qOr=r(yxt,"__init__()"),yxt.forEach(t),NOr=r(eOe," (throws an error)."),eOe.forEach(t),jOr=i(di),Kt=n(di,"DIV",{class:!0});var vA=s(Kt);T(Lx.$$.fragment,vA),DOr=i(vA),lEe=n(vA,"P",{});var Lxt=s(lEe);GOr=r(Lxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lxt.forEach(t),OOr=i(vA),ff=n(vA,"P",{});var ooe=s(ff);VOr=r(ooe,`Note:
Loading a model from its configuration file does `),iEe=n(ooe,"STRONG",{});var xxt=s(iEe);XOr=r(xxt,"not"),xxt.forEach(t),zOr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(ooe,"A",{href:!0});var $xt=s(iZ);WOr=r($xt,"from_pretrained()"),$xt.forEach(t),QOr=r(ooe," to load the model weights."),ooe.forEach(t),HOr=i(vA),T(ow.$$.fragment,vA),vA.forEach(t),UOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(xx.$$.fragment,ci),JOr=i(ci),dEe=n(ci,"P",{});var kxt=s(dEe);YOr=r(kxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kxt.forEach(t),KOr=i(ci),wn=n(ci,"P",{});var FA=s(wn);ZOr=r(FA,"The model class to instantiate is selected based on the "),cEe=n(FA,"CODE",{});var Sxt=s(cEe);eVr=r(Sxt,"model_type"),Sxt.forEach(t),oVr=r(FA,` property of the config object (either
passed as an argument or loaded from `),fEe=n(FA,"CODE",{});var Rxt=s(fEe);rVr=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),tVr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(FA,"CODE",{});var Pxt=s(mEe);aVr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),nVr=r(FA,":"),FA.forEach(t),sVr=i(ci),gEe=n(ci,"UL",{});var Bxt=s(gEe);rw=n(Bxt,"LI",{});var Vqe=s(rw);hEe=n(Vqe,"STRONG",{});var Ixt=s(hEe);lVr=r(Ixt,"vision-encoder-decoder"),Ixt.forEach(t),iVr=r(Vqe," \u2014 "),dZ=n(Vqe,"A",{href:!0});var qxt=s(dZ);dVr=r(qxt,"FlaxVisionEncoderDecoderModel"),qxt.forEach(t),cVr=r(Vqe," (Vision Encoder decoder model)"),Vqe.forEach(t),Bxt.forEach(t),fVr=i(ci),T(tw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Gkt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(U$,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(J$,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig"),c(Y$,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig"),c(K$,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig"),c(Z$,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig"),c(ek,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ok,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig"),c(rk,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(tk,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ak,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(nk,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig"),c(sk,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig"),c(lk,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig"),c(ik,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig"),c(dk,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig"),c(ck,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig"),c(fk,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig"),c(mk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(gk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(hk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pk,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig"),c(uk,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(_k,"href","/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(bk,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig"),c(vk,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig"),c(Fk,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Tk,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig"),c(Mk,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig"),c(Ek,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig"),c(Ck,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(wk,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ak,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig"),c(yk,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig"),c(Lk,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig"),c(xk,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig"),c($k,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNConfig"),c(kk,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config"),c(Sk,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Rk,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig"),c(Pk,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig"),c(Bk,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig"),c(Ik,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(qk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Nk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(jk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Dk,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig"),c(Gk,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig"),c(Ok,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeConfig"),c(Vk,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig"),c(Xk,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config"),c(zk,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig"),c(Wk,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Qk,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig"),c(Hk,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Uk,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Jk,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig"),c(Yk,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config"),c(Kk,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Zk,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(eS,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig"),c(oS,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig"),c(rS,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig"),c(tS,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig"),c(aS,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(nS,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(sS,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(lS,"href","/docs/transformers/pr_17388/en/model_doc/rag#transformers.RagConfig"),c(iS,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmConfig"),c(dS,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig"),c(cS,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig"),c(fS,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig"),c(mS,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig"),c(gS,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig"),c(hS,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig"),c(pS,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig"),c(uS,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig"),c(_S,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig"),c(bS,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig"),c(vS,"href","/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(FS,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(TS,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(MS,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig"),c(ES,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(CS,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig"),c(wS,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config"),c(AS,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig"),c(yS,"href","/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LS,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(xS,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRConfig"),c($S,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(kS,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(SS,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig"),c(RS,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltConfig"),c(PS,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(BS,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(IS,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(qS,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig"),c(NS,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(jS,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(DS,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(GS,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig"),c(OS,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig"),c(VS,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig"),c(XS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(zS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(WS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QS,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig"),c(HS,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig"),c(US,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(JS,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(YS,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(KS,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartTokenizer"),c(eR,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartTokenizerFast"),c(oR,"href","/docs/transformers/pr_17388/en/model_doc/barthez#transformers.BarthezTokenizer"),c(rR,"href","/docs/transformers/pr_17388/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(tR,"href","/docs/transformers/pr_17388/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(aR,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(nR,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(sR,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(lR,"href","/docs/transformers/pr_17388/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(iR,"href","/docs/transformers/pr_17388/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(dR,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(cR,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(fR,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mR,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(hR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(pR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(uR,"href","/docs/transformers/pr_17388/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(_R,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertTokenizer"),c(bR,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineTokenizer"),c(FR,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPTokenizer"),c(TR,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MR,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(ER,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17388/en/model_doc/cpm#transformers.CpmTokenizer"),c(wR,"href","/docs/transformers/pr_17388/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(AR,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(yR,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LR,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaTokenizer"),c($R,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(kR,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(SR,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(RR,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(PR,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(IR,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(qR,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraTokenizer"),c(NR,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(jR,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(DR,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetTokenizer"),c(GR,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(OR,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(VR,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelTokenizer"),c(XR,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(zR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YR,"href","/docs/transformers/pr_17388/en/model_doc/herbert#transformers.HerbertTokenizer"),c(KR,"href","/docs/transformers/pr_17388/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eP,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oP,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(tP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(aP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(nP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(sP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(lP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(iP,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(dP,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(cP,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDTokenizer"),c(fP,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDTokenizerFast"),c(mP,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerTokenizer"),c(gP,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(hP,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeTokenizer"),c(pP,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(uP,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(bP,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianTokenizer"),c(vP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartTokenizer"),c(FP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(TP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(MP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(EP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(CP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17388/en/model_doc/mluke#transformers.MLukeTokenizer"),c(AP,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(yP,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(xP,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c($P,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Tokenizer"),c(kP,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5TokenizerFast"),c(SP,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(RP,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(BP,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(IP,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qP,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NP,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jP,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(DP,"href","/docs/transformers/pr_17388/en/model_doc/phobert#transformers.PhobertTokenizer"),c(GP,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartTokenizer"),c(OP,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(VP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(XP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17388/en/model_doc/rag#transformers.RagTokenizer"),c(WP,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmTokenizer"),c(QP,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmTokenizerFast"),c(HP,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerTokenizer"),c(UP,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(JP,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertTokenizer"),c(YP,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(ZP,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(tB,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(aB,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(nB,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(sB,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterTokenizer"),c(lB,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(iB,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(dB,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Tokenizer"),c(fB,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5TokenizerFast"),c(mB,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasTokenizer"),c(gB,"href","/docs/transformers/pr_17388/en/model_doc/tapex#transformers.TapexTokenizer"),c(hB,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(pB,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(uB,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(FB,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMTokenizer"),c(TB,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(MB,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMTokenizer"),c(EB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(CB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(wB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(AB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LB,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(xB,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c($B,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(kB,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(SB,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(RB,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(lI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(iI,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPProcessor"),c(dI,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(cI,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(fI,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(mI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hI,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(pI,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uI,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_I,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltProcessor"),c(FI,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(TI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"id","transformers.AutoModel"),c(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(CI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yI,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertModel"),c(LI,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartModel"),c(xI,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitModel"),c($I,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel"),c(kI,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(SI,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdModel"),c(RI,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(PI,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(BI,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(II,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertModel"),c(qI,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineModel"),c(NI,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPModel"),c(jI,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertModel"),c(DI,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextModel"),c(GI,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLModel"),c(OI,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtModel"),c(VI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(XI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(WI,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaModel"),c(QI,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HI,"href","/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(UI,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTModel"),c(JI,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrModel"),c(YI,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertModel"),c(KI,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ZI,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTModel"),c(eq,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraModel"),c(oq,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertModel"),c(rq,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaModel"),c(tq,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetModel"),c(aq,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTModel"),c(nq,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelModel"),c(sq,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lq,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNModel"),c(iq,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Model"),c(dq,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cq,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJModel"),c(fq,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertModel"),c(mq,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertModel"),c(gq,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(hq,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(pq,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(uq,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(_q,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDModel"),c(bq,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerModel"),c(vq,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeModel"),c(Fq,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertModel"),c(Tq,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Model"),c(Mq,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianModel"),c(Eq,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Cq,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartModel"),c(wq,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Aq,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertModel"),c(yq,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetModel"),c(Lq,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Model"),c(xq,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerModel"),c($q,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(kq,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTModel"),c(Sq,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusModel"),c(Rq,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverModel"),c(Pq,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartModel"),c(Bq,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Iq,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(qq,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Nq,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModel"),c(jq,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetModel"),c(Dq,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertModel"),c(Gq,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetModel"),c(Oq,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel"),c(Vq,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaModel"),c(Xq,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerModel"),c(zq,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerModel"),c(Wq,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWModel"),c(Qq,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDModel"),c(Hq,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Uq,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterModel"),c(Jq,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Yq,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinModel"),c(Kq,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Model"),c(Zq,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasModel"),c(eN,"href","/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(oN,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(rN,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechModel"),c(tN,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(aN,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanModel"),c(nN,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltModel"),c(sN,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(lN,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertModel"),c(iN,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTModel"),c(dN,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(cN,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(fN,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(mN,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMModel"),c(gN,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMModel"),c(hN,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMModel"),c(pN,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(uN,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(_N,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(bN,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetModel"),c(vN,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosModel"),c(FN,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForPreTraining"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(TN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CN,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForPreTraining"),c(wN,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AN,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForPreTraining"),c(yN,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(LN,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(xN,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($N,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(kN,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(SN,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(RN,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForPreTraining"),c(BN,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(IN,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaForPreTraining"),c(qN,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForPreTraining"),c(NN,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jN,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(DN,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(GN,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VN,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XN,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(zN,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(WN,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(QN,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(HN,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(UN,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel"),c(JN,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(YN,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(KN,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oj,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rj,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(tj,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(aj,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(nj,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(sj,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(lj,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(ij,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(cj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(fj,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForCausalLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(mj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pj,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForCausalLM"),c(uj,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertLMHeadModel"),c(_j,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(bj,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(vj,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Fj,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Tj,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Mj,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Ej,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(wj,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Aj,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yj,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Lj,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(xj,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianForCausalLM"),c($j,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForCausalLM"),c(kj,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Sj,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Rj,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTForCausalLM"),c(Pj,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Bj,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Ij,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(qj,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(jj,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Dj,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Gj,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Oj,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Vj,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(zj,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Wj,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Hj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Uj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Jj,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForMaskedLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Yj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eD,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(oD,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(aD,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lD,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dD,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(fD,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(gD,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(hD,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uD,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_D,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TD,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(MD,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ED,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wD,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(LD,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($D,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(SD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RD,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u8,"id","transformers.AutoModelForSeq2SeqLM"),c(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u8,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(PD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ID,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qD,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(OD,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VD,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianMTModel"),c(WD,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I8,"id","transformers.AutoModelForSequenceClassification"),c(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I8,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(ZD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForMultipleChoice"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForNextSentencePrediction"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(yO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($O,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(kO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(SO,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(RO,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(PO,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForTokenClassification"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(BO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(GO,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(OO,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForTokenClassification"),c(VO,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(zO,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(WO,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(QO,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(UO,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(YO,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(KO,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(oV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(tV,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aV,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(lV,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iV,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cV,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fV,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mV,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hV,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pV,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uV,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_V,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(bV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BV,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tX,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sX,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(lX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.AutoModelForImageClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(fX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForImageClassification"),c(pX,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(uX,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_X,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bX,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vX,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FX,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CX,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wX,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AX,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yX,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LX,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForImageClassification"),c(xX,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanForImageClassification"),c($X,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForVision2Seq"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(kX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.AutoModelForAudioClassification"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForAudioFrameClassification"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(YX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(KX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ZX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(ez,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForCTC"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(oz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nz,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForCTC"),c(sz,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForCTC"),c(lz,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForCTC"),c(iz,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dz,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(mz,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(gz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(_z,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForAudioXVector"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(bz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Mz,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Ez,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Cz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(wz,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForMaskedImageModeling"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c($z,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kz,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForObjectDetection"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Iz,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForImageSegmentation"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForSemanticSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(zz,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Wz,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Qz,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForInstanceSegmentation"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.TFAutoModel"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertModel"),c(rW,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartModel"),c(tW,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertModel"),c(aW,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(nW,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(sW,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertModel"),c(lW,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.TFCLIPModel"),c(iW,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertModel"),c(dW,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextModel"),c(cW,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLModel"),c(fW,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mW,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaModel"),c(gW,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hW,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pW,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uW,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraModel"),c(_W,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bW,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelModel"),c(vW,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(FW,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2Model"),c(TW,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJModel"),c(MW,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.TFHubertModel"),c(EW,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(CW,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDModel"),c(wW,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerModel"),c(AW,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertModel"),c(yW,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianModel"),c(LW,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartModel"),c(xW,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($W,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kW,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5Model"),c(SW,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(RW,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTModel"),c(PW,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusModel"),c(BW,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertModel"),c(IW,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaModel"),c(qW,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerModel"),c(NW,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(jW,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinModel"),c(DW,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5Model"),c(GW,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasModel"),c(OW,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(VW,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTModel"),c(XW,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zW,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(WW,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMModel"),c(QW,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(HW,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.TFAutoModelForPreTraining"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ZW,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForPreTraining"),c(oQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(nQ,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(lQ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(cQ,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(pQ,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(bQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.TFAutoModelForCausalLM"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(AQ,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LQ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(xQ,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($Q,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(kQ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(SQ,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(RQ,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($7,"id","transformers.TFAutoModelForImageClassification"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(DQ,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(GQ,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(OQ,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForMaskedLM"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(eH,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oH,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(rH,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(tH,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(aH,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(sH,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(iH,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(dH,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(cH,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fH,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(mH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uH,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(_H,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(bH,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(vH,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(FH,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianMTModel"),c(TH,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(EH,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForSequenceClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(wH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($H,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForMultipleChoice"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(eU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(FU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(CU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(wU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForTokenClassification"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(xU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(RU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(PU,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(IU,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(qU,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(NU,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(jU,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(DU,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(OU,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(VU,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(XU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(WU,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(HU,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(UU,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(JU,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(YU,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForQuestionAnswering"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(cJ,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(vJ,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForVision2Seq"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModel"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertModel"),c(RJ,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartModel"),c(PJ,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitModel"),c(BJ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertModel"),c(IJ,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(qJ,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(NJ,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(jJ,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.FlaxCLIPModel"),c(DJ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(GJ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraModel"),c(OJ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(VJ,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(XJ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(zJ,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianModel"),c(WJ,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartModel"),c(QJ,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5Model"),c(HJ,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTModel"),c(UJ,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(JJ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(YJ,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(KJ,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5Model"),c(ZJ,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(eY,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTModel"),c(oY,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(rY,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(tY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.FlaxAutoModelForCausalLM"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(iY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(dY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(cY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(fY,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(mY,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(gY,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(hY,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(pY,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(uY,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForPreTraining"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(TY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(EY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(CY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(wY,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LY,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xY,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(kY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForMaskedLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(NY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(jY,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(DY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(GY,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VY,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(KY,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(ZY,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(tK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.FlaxAutoModelForTokenClassification"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(xK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(RK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(PK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(BK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(IK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(qK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(NK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(jK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(YK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForImageClassification"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nZ,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForVision2Seq"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,TA),e(rt,uf),b(f,De,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,MA),e(We,Ln),e(We,xn),e(xn,EA),e(We,pi),e(We,$n),e($n,CA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,V$),e(Ae,_i),e(_i,X$),e(Ae,z$),b(f,Eo,_),b(f,wa,_),e(wa,W$),e(wa,bf),e(bf,Q$),e(wa,oOe),b(f,Xqe,_),b(f,bi,_),e(bi,vf),e(vf,roe),M(wA,roe,null),e(bi,rOe),e(bi,toe),e(toe,tOe),b(f,zqe,_),b(f,kn,_),e(kn,aOe),e(kn,aoe),e(aoe,nOe),e(kn,sOe),e(kn,noe),e(noe,lOe),e(kn,iOe),b(f,Wqe,_),M(AA,f,_),b(f,Qqe,_),b(f,H$,_),e(H$,dOe),b(f,Hqe,_),M(Ff,f,_),b(f,Uqe,_),b(f,vi,_),e(vi,Tf),e(Tf,soe),M(yA,soe,null),e(vi,cOe),e(vi,loe),e(loe,fOe),b(f,Jqe,_),b(f,Co,_),M(LA,Co,null),e(Co,mOe),e(Co,xA),e(xA,gOe),e(xA,U$),e(U$,hOe),e(xA,pOe),e(Co,uOe),e(Co,$A),e($A,_Oe),e($A,ioe),e(ioe,bOe),e($A,vOe),e(Co,FOe),e(Co,Er),M(kA,Er,null),e(Er,TOe),e(Er,doe),e(doe,MOe),e(Er,EOe),e(Er,Fi),e(Fi,COe),e(Fi,coe),e(coe,wOe),e(Fi,AOe),e(Fi,foe),e(foe,yOe),e(Fi,LOe),e(Er,xOe),e(Er,A),e(A,Mf),e(Mf,moe),e(moe,$Oe),e(Mf,kOe),e(Mf,J$),e(J$,SOe),e(Mf,ROe),e(A,POe),e(A,Ef),e(Ef,goe),e(goe,BOe),e(Ef,IOe),e(Ef,Y$),e(Y$,qOe),e(Ef,NOe),e(A,jOe),e(A,Cf),e(Cf,hoe),e(hoe,DOe),e(Cf,GOe),e(Cf,K$),e(K$,OOe),e(Cf,VOe),e(A,XOe),e(A,wf),e(wf,poe),e(poe,zOe),e(wf,WOe),e(wf,Z$),e(Z$,QOe),e(wf,HOe),e(A,UOe),e(A,Af),e(Af,uoe),e(uoe,JOe),e(Af,YOe),e(Af,ek),e(ek,KOe),e(Af,ZOe),e(A,eVe),e(A,yf),e(yf,_oe),e(_oe,oVe),e(yf,rVe),e(yf,ok),e(ok,tVe),e(yf,aVe),e(A,nVe),e(A,Lf),e(Lf,boe),e(boe,sVe),e(Lf,lVe),e(Lf,rk),e(rk,iVe),e(Lf,dVe),e(A,cVe),e(A,xf),e(xf,voe),e(voe,fVe),e(xf,mVe),e(xf,tk),e(tk,gVe),e(xf,hVe),e(A,pVe),e(A,$f),e($f,Foe),e(Foe,uVe),e($f,_Ve),e($f,ak),e(ak,bVe),e($f,vVe),e(A,FVe),e(A,kf),e(kf,Toe),e(Toe,TVe),e(kf,MVe),e(kf,nk),e(nk,EVe),e(kf,CVe),e(A,wVe),e(A,Sf),e(Sf,Moe),e(Moe,AVe),e(Sf,yVe),e(Sf,sk),e(sk,LVe),e(Sf,xVe),e(A,$Ve),e(A,Rf),e(Rf,Eoe),e(Eoe,kVe),e(Rf,SVe),e(Rf,lk),e(lk,RVe),e(Rf,PVe),e(A,BVe),e(A,Pf),e(Pf,Coe),e(Coe,IVe),e(Pf,qVe),e(Pf,ik),e(ik,NVe),e(Pf,jVe),e(A,DVe),e(A,Bf),e(Bf,woe),e(woe,GVe),e(Bf,OVe),e(Bf,dk),e(dk,VVe),e(Bf,XVe),e(A,zVe),e(A,If),e(If,Aoe),e(Aoe,WVe),e(If,QVe),e(If,ck),e(ck,HVe),e(If,UVe),e(A,JVe),e(A,qf),e(qf,yoe),e(yoe,YVe),e(qf,KVe),e(qf,fk),e(fk,ZVe),e(qf,eXe),e(A,oXe),e(A,Nf),e(Nf,Loe),e(Loe,rXe),e(Nf,tXe),e(Nf,mk),e(mk,aXe),e(Nf,nXe),e(A,sXe),e(A,jf),e(jf,xoe),e(xoe,lXe),e(jf,iXe),e(jf,gk),e(gk,dXe),e(jf,cXe),e(A,fXe),e(A,Df),e(Df,$oe),e($oe,mXe),e(Df,gXe),e(Df,hk),e(hk,hXe),e(Df,pXe),e(A,uXe),e(A,Gf),e(Gf,koe),e(koe,_Xe),e(Gf,bXe),e(Gf,pk),e(pk,vXe),e(Gf,FXe),e(A,TXe),e(A,Of),e(Of,Soe),e(Soe,MXe),e(Of,EXe),e(Of,uk),e(uk,CXe),e(Of,wXe),e(A,AXe),e(A,Vf),e(Vf,Roe),e(Roe,yXe),e(Vf,LXe),e(Vf,_k),e(_k,xXe),e(Vf,$Xe),e(A,kXe),e(A,Xf),e(Xf,Poe),e(Poe,SXe),e(Xf,RXe),e(Xf,bk),e(bk,PXe),e(Xf,BXe),e(A,IXe),e(A,zf),e(zf,Boe),e(Boe,qXe),e(zf,NXe),e(zf,vk),e(vk,jXe),e(zf,DXe),e(A,GXe),e(A,Wf),e(Wf,Ioe),e(Ioe,OXe),e(Wf,VXe),e(Wf,Fk),e(Fk,XXe),e(Wf,zXe),e(A,WXe),e(A,Qf),e(Qf,qoe),e(qoe,QXe),e(Qf,HXe),e(Qf,Tk),e(Tk,UXe),e(Qf,JXe),e(A,YXe),e(A,Hf),e(Hf,Noe),e(Noe,KXe),e(Hf,ZXe),e(Hf,Mk),e(Mk,eze),e(Hf,oze),e(A,rze),e(A,Uf),e(Uf,joe),e(joe,tze),e(Uf,aze),e(Uf,Ek),e(Ek,nze),e(Uf,sze),e(A,lze),e(A,Jf),e(Jf,Doe),e(Doe,ize),e(Jf,dze),e(Jf,Ck),e(Ck,cze),e(Jf,fze),e(A,mze),e(A,Yf),e(Yf,Goe),e(Goe,gze),e(Yf,hze),e(Yf,wk),e(wk,pze),e(Yf,uze),e(A,_ze),e(A,Kf),e(Kf,Ooe),e(Ooe,bze),e(Kf,vze),e(Kf,Ak),e(Ak,Fze),e(Kf,Tze),e(A,Mze),e(A,Zf),e(Zf,Voe),e(Voe,Eze),e(Zf,Cze),e(Zf,yk),e(yk,wze),e(Zf,Aze),e(A,yze),e(A,em),e(em,Xoe),e(Xoe,Lze),e(em,xze),e(em,Lk),e(Lk,$ze),e(em,kze),e(A,Sze),e(A,om),e(om,zoe),e(zoe,Rze),e(om,Pze),e(om,xk),e(xk,Bze),e(om,Ize),e(A,qze),e(A,rm),e(rm,Woe),e(Woe,Nze),e(rm,jze),e(rm,$k),e($k,Dze),e(rm,Gze),e(A,Oze),e(A,tm),e(tm,Qoe),e(Qoe,Vze),e(tm,Xze),e(tm,kk),e(kk,zze),e(tm,Wze),e(A,Qze),e(A,am),e(am,Hoe),e(Hoe,Hze),e(am,Uze),e(am,Sk),e(Sk,Jze),e(am,Yze),e(A,Kze),e(A,nm),e(nm,Uoe),e(Uoe,Zze),e(nm,eWe),e(nm,Rk),e(Rk,oWe),e(nm,rWe),e(A,tWe),e(A,sm),e(sm,Joe),e(Joe,aWe),e(sm,nWe),e(sm,Pk),e(Pk,sWe),e(sm,lWe),e(A,iWe),e(A,lm),e(lm,Yoe),e(Yoe,dWe),e(lm,cWe),e(lm,Bk),e(Bk,fWe),e(lm,mWe),e(A,gWe),e(A,im),e(im,Koe),e(Koe,hWe),e(im,pWe),e(im,Ik),e(Ik,uWe),e(im,_We),e(A,bWe),e(A,dm),e(dm,Zoe),e(Zoe,vWe),e(dm,FWe),e(dm,qk),e(qk,TWe),e(dm,MWe),e(A,EWe),e(A,cm),e(cm,ere),e(ere,CWe),e(cm,wWe),e(cm,Nk),e(Nk,AWe),e(cm,yWe),e(A,LWe),e(A,fm),e(fm,ore),e(ore,xWe),e(fm,$We),e(fm,jk),e(jk,kWe),e(fm,SWe),e(A,RWe),e(A,mm),e(mm,rre),e(rre,PWe),e(mm,BWe),e(mm,Dk),e(Dk,IWe),e(mm,qWe),e(A,NWe),e(A,gm),e(gm,tre),e(tre,jWe),e(gm,DWe),e(gm,Gk),e(Gk,GWe),e(gm,OWe),e(A,VWe),e(A,hm),e(hm,are),e(are,XWe),e(hm,zWe),e(hm,Ok),e(Ok,WWe),e(hm,QWe),e(A,HWe),e(A,pm),e(pm,nre),e(nre,UWe),e(pm,JWe),e(pm,Vk),e(Vk,YWe),e(pm,KWe),e(A,ZWe),e(A,um),e(um,sre),e(sre,eQe),e(um,oQe),e(um,Xk),e(Xk,rQe),e(um,tQe),e(A,aQe),e(A,_m),e(_m,lre),e(lre,nQe),e(_m,sQe),e(_m,zk),e(zk,lQe),e(_m,iQe),e(A,dQe),e(A,bm),e(bm,ire),e(ire,cQe),e(bm,fQe),e(bm,Wk),e(Wk,mQe),e(bm,gQe),e(A,hQe),e(A,vm),e(vm,dre),e(dre,pQe),e(vm,uQe),e(vm,Qk),e(Qk,_Qe),e(vm,bQe),e(A,vQe),e(A,Fm),e(Fm,cre),e(cre,FQe),e(Fm,TQe),e(Fm,Hk),e(Hk,MQe),e(Fm,EQe),e(A,CQe),e(A,Tm),e(Tm,fre),e(fre,wQe),e(Tm,AQe),e(Tm,Uk),e(Uk,yQe),e(Tm,LQe),e(A,xQe),e(A,Mm),e(Mm,mre),e(mre,$Qe),e(Mm,kQe),e(Mm,Jk),e(Jk,SQe),e(Mm,RQe),e(A,PQe),e(A,Em),e(Em,gre),e(gre,BQe),e(Em,IQe),e(Em,Yk),e(Yk,qQe),e(Em,NQe),e(A,jQe),e(A,Cm),e(Cm,hre),e(hre,DQe),e(Cm,GQe),e(Cm,Kk),e(Kk,OQe),e(Cm,VQe),e(A,XQe),e(A,wm),e(wm,pre),e(pre,zQe),e(wm,WQe),e(wm,Zk),e(Zk,QQe),e(wm,HQe),e(A,UQe),e(A,Am),e(Am,ure),e(ure,JQe),e(Am,YQe),e(Am,eS),e(eS,KQe),e(Am,ZQe),e(A,eHe),e(A,ym),e(ym,_re),e(_re,oHe),e(ym,rHe),e(ym,oS),e(oS,tHe),e(ym,aHe),e(A,nHe),e(A,Lm),e(Lm,bre),e(bre,sHe),e(Lm,lHe),e(Lm,rS),e(rS,iHe),e(Lm,dHe),e(A,cHe),e(A,xm),e(xm,vre),e(vre,fHe),e(xm,mHe),e(xm,tS),e(tS,gHe),e(xm,hHe),e(A,pHe),e(A,$m),e($m,Fre),e(Fre,uHe),e($m,_He),e($m,aS),e(aS,bHe),e($m,vHe),e(A,FHe),e(A,km),e(km,Tre),e(Tre,THe),e(km,MHe),e(km,nS),e(nS,EHe),e(km,CHe),e(A,wHe),e(A,Sm),e(Sm,Mre),e(Mre,AHe),e(Sm,yHe),e(Sm,sS),e(sS,LHe),e(Sm,xHe),e(A,$He),e(A,Rm),e(Rm,Ere),e(Ere,kHe),e(Rm,SHe),e(Rm,lS),e(lS,RHe),e(Rm,PHe),e(A,BHe),e(A,Pm),e(Pm,Cre),e(Cre,IHe),e(Pm,qHe),e(Pm,iS),e(iS,NHe),e(Pm,jHe),e(A,DHe),e(A,Bm),e(Bm,wre),e(wre,GHe),e(Bm,OHe),e(Bm,dS),e(dS,VHe),e(Bm,XHe),e(A,zHe),e(A,Im),e(Im,Are),e(Are,WHe),e(Im,QHe),e(Im,cS),e(cS,HHe),e(Im,UHe),e(A,JHe),e(A,qm),e(qm,yre),e(yre,YHe),e(qm,KHe),e(qm,fS),e(fS,ZHe),e(qm,eUe),e(A,oUe),e(A,Nm),e(Nm,Lre),e(Lre,rUe),e(Nm,tUe),e(Nm,mS),e(mS,aUe),e(Nm,nUe),e(A,sUe),e(A,jm),e(jm,xre),e(xre,lUe),e(jm,iUe),e(jm,gS),e(gS,dUe),e(jm,cUe),e(A,fUe),e(A,Dm),e(Dm,$re),e($re,mUe),e(Dm,gUe),e(Dm,hS),e(hS,hUe),e(Dm,pUe),e(A,uUe),e(A,Gm),e(Gm,kre),e(kre,_Ue),e(Gm,bUe),e(Gm,pS),e(pS,vUe),e(Gm,FUe),e(A,TUe),e(A,Om),e(Om,Sre),e(Sre,MUe),e(Om,EUe),e(Om,uS),e(uS,CUe),e(Om,wUe),e(A,AUe),e(A,Vm),e(Vm,Rre),e(Rre,yUe),e(Vm,LUe),e(Vm,_S),e(_S,xUe),e(Vm,$Ue),e(A,kUe),e(A,Xm),e(Xm,Pre),e(Pre,SUe),e(Xm,RUe),e(Xm,bS),e(bS,PUe),e(Xm,BUe),e(A,IUe),e(A,zm),e(zm,Bre),e(Bre,qUe),e(zm,NUe),e(zm,vS),e(vS,jUe),e(zm,DUe),e(A,GUe),e(A,Wm),e(Wm,Ire),e(Ire,OUe),e(Wm,VUe),e(Wm,FS),e(FS,XUe),e(Wm,zUe),e(A,WUe),e(A,Qm),e(Qm,qre),e(qre,QUe),e(Qm,HUe),e(Qm,TS),e(TS,UUe),e(Qm,JUe),e(A,YUe),e(A,Hm),e(Hm,Nre),e(Nre,KUe),e(Hm,ZUe),e(Hm,MS),e(MS,eJe),e(Hm,oJe),e(A,rJe),e(A,Um),e(Um,jre),e(jre,tJe),e(Um,aJe),e(Um,ES),e(ES,nJe),e(Um,sJe),e(A,lJe),e(A,Jm),e(Jm,Dre),e(Dre,iJe),e(Jm,dJe),e(Jm,CS),e(CS,cJe),e(Jm,fJe),e(A,mJe),e(A,Ym),e(Ym,Gre),e(Gre,gJe),e(Ym,hJe),e(Ym,wS),e(wS,pJe),e(Ym,uJe),e(A,_Je),e(A,Km),e(Km,Ore),e(Ore,bJe),e(Km,vJe),e(Km,AS),e(AS,FJe),e(Km,TJe),e(A,MJe),e(A,Zm),e(Zm,Vre),e(Vre,EJe),e(Zm,CJe),e(Zm,yS),e(yS,wJe),e(Zm,AJe),e(A,yJe),e(A,eg),e(eg,Xre),e(Xre,LJe),e(eg,xJe),e(eg,LS),e(LS,$Je),e(eg,kJe),e(A,SJe),e(A,og),e(og,zre),e(zre,RJe),e(og,PJe),e(og,xS),e(xS,BJe),e(og,IJe),e(A,qJe),e(A,rg),e(rg,Wre),e(Wre,NJe),e(rg,jJe),e(rg,$S),e($S,DJe),e(rg,GJe),e(A,OJe),e(A,tg),e(tg,Qre),e(Qre,VJe),e(tg,XJe),e(tg,kS),e(kS,zJe),e(tg,WJe),e(A,QJe),e(A,ag),e(ag,Hre),e(Hre,HJe),e(ag,UJe),e(ag,SS),e(SS,JJe),e(ag,YJe),e(A,KJe),e(A,ng),e(ng,Ure),e(Ure,ZJe),e(ng,eYe),e(ng,RS),e(RS,oYe),e(ng,rYe),e(A,tYe),e(A,sg),e(sg,Jre),e(Jre,aYe),e(sg,nYe),e(sg,PS),e(PS,sYe),e(sg,lYe),e(A,iYe),e(A,lg),e(lg,Yre),e(Yre,dYe),e(lg,cYe),e(lg,BS),e(BS,fYe),e(lg,mYe),e(A,gYe),e(A,ig),e(ig,Kre),e(Kre,hYe),e(ig,pYe),e(ig,IS),e(IS,uYe),e(ig,_Ye),e(A,bYe),e(A,dg),e(dg,Zre),e(Zre,vYe),e(dg,FYe),e(dg,qS),e(qS,TYe),e(dg,MYe),e(A,EYe),e(A,cg),e(cg,ete),e(ete,CYe),e(cg,wYe),e(cg,NS),e(NS,AYe),e(cg,yYe),e(A,LYe),e(A,fg),e(fg,ote),e(ote,xYe),e(fg,$Ye),e(fg,jS),e(jS,kYe),e(fg,SYe),e(A,RYe),e(A,mg),e(mg,rte),e(rte,PYe),e(mg,BYe),e(mg,DS),e(DS,IYe),e(mg,qYe),e(A,NYe),e(A,gg),e(gg,tte),e(tte,jYe),e(gg,DYe),e(gg,GS),e(GS,GYe),e(gg,OYe),e(A,VYe),e(A,hg),e(hg,ate),e(ate,XYe),e(hg,zYe),e(hg,OS),e(OS,WYe),e(hg,QYe),e(A,HYe),e(A,pg),e(pg,nte),e(nte,UYe),e(pg,JYe),e(pg,VS),e(VS,YYe),e(pg,KYe),e(A,ZYe),e(A,ug),e(ug,ste),e(ste,eKe),e(ug,oKe),e(ug,XS),e(XS,rKe),e(ug,tKe),e(A,aKe),e(A,_g),e(_g,lte),e(lte,nKe),e(_g,sKe),e(_g,zS),e(zS,lKe),e(_g,iKe),e(A,dKe),e(A,bg),e(bg,ite),e(ite,cKe),e(bg,fKe),e(bg,WS),e(WS,mKe),e(bg,gKe),e(A,hKe),e(A,vg),e(vg,dte),e(dte,pKe),e(vg,uKe),e(vg,QS),e(QS,_Ke),e(vg,bKe),e(A,vKe),e(A,Fg),e(Fg,cte),e(cte,FKe),e(Fg,TKe),e(Fg,HS),e(HS,MKe),e(Fg,EKe),e(A,CKe),e(A,Tg),e(Tg,fte),e(fte,wKe),e(Tg,AKe),e(Tg,US),e(US,yKe),e(Tg,LKe),e(Er,xKe),M(Mg,Er,null),e(Co,$Ke),e(Co,Eg),M(SA,Eg,null),e(Eg,kKe),e(Eg,mte),e(mte,SKe),b(f,Yqe,_),b(f,Ti,_),e(Ti,Cg),e(Cg,gte),M(RA,gte,null),e(Ti,RKe),e(Ti,hte),e(hte,PKe),b(f,Kqe,_),b(f,wo,_),M(PA,wo,null),e(wo,BKe),e(wo,BA),e(BA,IKe),e(BA,JS),e(JS,qKe),e(BA,NKe),e(wo,jKe),e(wo,IA),e(IA,DKe),e(IA,pte),e(pte,GKe),e(IA,OKe),e(wo,VKe),e(wo,Cr),M(qA,Cr,null),e(Cr,XKe),e(Cr,ute),e(ute,zKe),e(Cr,WKe),e(Cr,Aa),e(Aa,QKe),e(Aa,_te),e(_te,HKe),e(Aa,UKe),e(Aa,bte),e(bte,JKe),e(Aa,YKe),e(Aa,vte),e(vte,KKe),e(Aa,ZKe),e(Cr,eZe),e(Cr,k),e(k,Sn),e(Sn,Fte),e(Fte,oZe),e(Sn,rZe),e(Sn,YS),e(YS,tZe),e(Sn,aZe),e(Sn,KS),e(KS,nZe),e(Sn,sZe),e(k,lZe),e(k,Rn),e(Rn,Tte),e(Tte,iZe),e(Rn,dZe),e(Rn,ZS),e(ZS,cZe),e(Rn,fZe),e(Rn,eR),e(eR,mZe),e(Rn,gZe),e(k,hZe),e(k,Pn),e(Pn,Mte),e(Mte,pZe),e(Pn,uZe),e(Pn,oR),e(oR,_Ze),e(Pn,bZe),e(Pn,rR),e(rR,vZe),e(Pn,FZe),e(k,TZe),e(k,wg),e(wg,Ete),e(Ete,MZe),e(wg,EZe),e(wg,tR),e(tR,CZe),e(wg,wZe),e(k,AZe),e(k,Bn),e(Bn,Cte),e(Cte,yZe),e(Bn,LZe),e(Bn,aR),e(aR,xZe),e(Bn,$Ze),e(Bn,nR),e(nR,kZe),e(Bn,SZe),e(k,RZe),e(k,Ag),e(Ag,wte),e(wte,PZe),e(Ag,BZe),e(Ag,sR),e(sR,IZe),e(Ag,qZe),e(k,NZe),e(k,yg),e(yg,Ate),e(Ate,jZe),e(yg,DZe),e(yg,lR),e(lR,GZe),e(yg,OZe),e(k,VZe),e(k,Lg),e(Lg,yte),e(yte,XZe),e(Lg,zZe),e(Lg,iR),e(iR,WZe),e(Lg,QZe),e(k,HZe),e(k,In),e(In,Lte),e(Lte,UZe),e(In,JZe),e(In,dR),e(dR,YZe),e(In,KZe),e(In,cR),e(cR,ZZe),e(In,eeo),e(k,oeo),e(k,qn),e(qn,xte),e(xte,reo),e(qn,teo),e(qn,fR),e(fR,aeo),e(qn,neo),e(qn,mR),e(mR,seo),e(qn,leo),e(k,ieo),e(k,Nn),e(Nn,$te),e($te,deo),e(Nn,ceo),e(Nn,gR),e(gR,feo),e(Nn,meo),e(Nn,hR),e(hR,geo),e(Nn,heo),e(k,peo),e(k,xg),e(xg,kte),e(kte,ueo),e(xg,_eo),e(xg,pR),e(pR,beo),e(xg,veo),e(k,Feo),e(k,$g),e($g,Ste),e(Ste,Teo),e($g,Meo),e($g,uR),e(uR,Eeo),e($g,Ceo),e(k,weo),e(k,jn),e(jn,Rte),e(Rte,Aeo),e(jn,yeo),e(jn,_R),e(_R,Leo),e(jn,xeo),e(jn,bR),e(bR,$eo),e(jn,keo),e(k,Seo),e(k,kg),e(kg,Pte),e(Pte,Reo),e(kg,Peo),e(kg,vR),e(vR,Beo),e(kg,Ieo),e(k,qeo),e(k,Dn),e(Dn,Bte),e(Bte,Neo),e(Dn,jeo),e(Dn,FR),e(FR,Deo),e(Dn,Geo),e(Dn,TR),e(TR,Oeo),e(Dn,Veo),e(k,Xeo),e(k,Gn),e(Gn,Ite),e(Ite,zeo),e(Gn,Weo),e(Gn,MR),e(MR,Qeo),e(Gn,Heo),e(Gn,ER),e(ER,Ueo),e(Gn,Jeo),e(k,Yeo),e(k,On),e(On,qte),e(qte,Keo),e(On,Zeo),e(On,CR),e(CR,eoo),e(On,ooo),e(On,wR),e(wR,roo),e(On,too),e(k,aoo),e(k,Sg),e(Sg,Nte),e(Nte,noo),e(Sg,soo),e(Sg,AR),e(AR,loo),e(Sg,ioo),e(k,doo),e(k,Vn),e(Vn,jte),e(jte,coo),e(Vn,foo),e(Vn,yR),e(yR,moo),e(Vn,goo),e(Vn,LR),e(LR,hoo),e(Vn,poo),e(k,uoo),e(k,Xn),e(Xn,Dte),e(Dte,_oo),e(Xn,boo),e(Xn,xR),e(xR,voo),e(Xn,Foo),e(Xn,$R),e($R,Too),e(Xn,Moo),e(k,Eoo),e(k,zn),e(zn,Gte),e(Gte,Coo),e(zn,woo),e(zn,kR),e(kR,Aoo),e(zn,yoo),e(zn,SR),e(SR,Loo),e(zn,xoo),e(k,$oo),e(k,Wn),e(Wn,Ote),e(Ote,koo),e(Wn,Soo),e(Wn,RR),e(RR,Roo),e(Wn,Poo),e(Wn,PR),e(PR,Boo),e(Wn,Ioo),e(k,qoo),e(k,Qn),e(Qn,Vte),e(Vte,Noo),e(Qn,joo),e(Qn,BR),e(BR,Doo),e(Qn,Goo),e(Qn,IR),e(IR,Ooo),e(Qn,Voo),e(k,Xoo),e(k,Hn),e(Hn,Xte),e(Xte,zoo),e(Hn,Woo),e(Hn,qR),e(qR,Qoo),e(Hn,Hoo),e(Hn,NR),e(NR,Uoo),e(Hn,Joo),e(k,Yoo),e(k,Rg),e(Rg,zte),e(zte,Koo),e(Rg,Zoo),e(Rg,jR),e(jR,ero),e(Rg,oro),e(k,rro),e(k,Un),e(Un,Wte),e(Wte,tro),e(Un,aro),e(Un,DR),e(DR,nro),e(Un,sro),e(Un,GR),e(GR,lro),e(Un,iro),e(k,dro),e(k,Pg),e(Pg,Qte),e(Qte,cro),e(Pg,fro),e(Pg,OR),e(OR,mro),e(Pg,gro),e(k,hro),e(k,Jn),e(Jn,Hte),e(Hte,pro),e(Jn,uro),e(Jn,VR),e(VR,_ro),e(Jn,bro),e(Jn,XR),e(XR,vro),e(Jn,Fro),e(k,Tro),e(k,Yn),e(Yn,Ute),e(Ute,Mro),e(Yn,Ero),e(Yn,zR),e(zR,Cro),e(Yn,wro),e(Yn,WR),e(WR,Aro),e(Yn,yro),e(k,Lro),e(k,Kn),e(Kn,Jte),e(Jte,xro),e(Kn,$ro),e(Kn,QR),e(QR,kro),e(Kn,Sro),e(Kn,HR),e(HR,Rro),e(Kn,Pro),e(k,Bro),e(k,Zn),e(Zn,Yte),e(Yte,Iro),e(Zn,qro),e(Zn,UR),e(UR,Nro),e(Zn,jro),e(Zn,JR),e(JR,Dro),e(Zn,Gro),e(k,Oro),e(k,es),e(es,Kte),e(Kte,Vro),e(es,Xro),e(es,YR),e(YR,zro),e(es,Wro),e(es,KR),e(KR,Qro),e(es,Hro),e(k,Uro),e(k,Bg),e(Bg,Zte),e(Zte,Jro),e(Bg,Yro),e(Bg,ZR),e(ZR,Kro),e(Bg,Zro),e(k,eto),e(k,os),e(os,eae),e(eae,oto),e(os,rto),e(os,eP),e(eP,tto),e(os,ato),e(os,oP),e(oP,nto),e(os,sto),e(k,lto),e(k,rs),e(rs,oae),e(oae,ito),e(rs,dto),e(rs,rP),e(rP,cto),e(rs,fto),e(rs,tP),e(tP,mto),e(rs,gto),e(k,hto),e(k,ts),e(ts,rae),e(rae,pto),e(ts,uto),e(ts,aP),e(aP,_to),e(ts,bto),e(ts,nP),e(nP,vto),e(ts,Fto),e(k,Tto),e(k,as),e(as,tae),e(tae,Mto),e(as,Eto),e(as,sP),e(sP,Cto),e(as,wto),e(as,lP),e(lP,Ato),e(as,yto),e(k,Lto),e(k,ns),e(ns,aae),e(aae,xto),e(ns,$to),e(ns,iP),e(iP,kto),e(ns,Sto),e(ns,dP),e(dP,Rto),e(ns,Pto),e(k,Bto),e(k,ss),e(ss,nae),e(nae,Ito),e(ss,qto),e(ss,cP),e(cP,Nto),e(ss,jto),e(ss,fP),e(fP,Dto),e(ss,Gto),e(k,Oto),e(k,ls),e(ls,sae),e(sae,Vto),e(ls,Xto),e(ls,mP),e(mP,zto),e(ls,Wto),e(ls,gP),e(gP,Qto),e(ls,Hto),e(k,Uto),e(k,Ig),e(Ig,lae),e(lae,Jto),e(Ig,Yto),e(Ig,hP),e(hP,Kto),e(Ig,Zto),e(k,eao),e(k,is),e(is,iae),e(iae,oao),e(is,rao),e(is,pP),e(pP,tao),e(is,aao),e(is,uP),e(uP,nao),e(is,sao),e(k,lao),e(k,qg),e(qg,dae),e(dae,iao),e(qg,dao),e(qg,_P),e(_P,cao),e(qg,fao),e(k,mao),e(k,Ng),e(Ng,cae),e(cae,gao),e(Ng,hao),e(Ng,bP),e(bP,pao),e(Ng,uao),e(k,_ao),e(k,ds),e(ds,fae),e(fae,bao),e(ds,vao),e(ds,vP),e(vP,Fao),e(ds,Tao),e(ds,FP),e(FP,Mao),e(ds,Eao),e(k,Cao),e(k,cs),e(cs,mae),e(mae,wao),e(cs,Aao),e(cs,TP),e(TP,yao),e(cs,Lao),e(cs,MP),e(MP,xao),e(cs,$ao),e(k,kao),e(k,fs),e(fs,gae),e(gae,Sao),e(fs,Rao),e(fs,EP),e(EP,Pao),e(fs,Bao),e(fs,CP),e(CP,Iao),e(fs,qao),e(k,Nao),e(k,jg),e(jg,hae),e(hae,jao),e(jg,Dao),e(jg,wP),e(wP,Gao),e(jg,Oao),e(k,Vao),e(k,ms),e(ms,pae),e(pae,Xao),e(ms,zao),e(ms,AP),e(AP,Wao),e(ms,Qao),e(ms,yP),e(yP,Hao),e(ms,Uao),e(k,Jao),e(k,gs),e(gs,uae),e(uae,Yao),e(gs,Kao),e(gs,LP),e(LP,Zao),e(gs,eno),e(gs,xP),e(xP,ono),e(gs,rno),e(k,tno),e(k,hs),e(hs,_ae),e(_ae,ano),e(hs,nno),e(hs,$P),e($P,sno),e(hs,lno),e(hs,kP),e(kP,ino),e(hs,dno),e(k,cno),e(k,ps),e(ps,bae),e(bae,fno),e(ps,mno),e(ps,SP),e(SP,gno),e(ps,hno),e(ps,RP),e(RP,pno),e(ps,uno),e(k,_no),e(k,us),e(us,vae),e(vae,bno),e(us,vno),e(us,PP),e(PP,Fno),e(us,Tno),e(us,BP),e(BP,Mno),e(us,Eno),e(k,Cno),e(k,Dg),e(Dg,Fae),e(Fae,wno),e(Dg,Ano),e(Dg,IP),e(IP,yno),e(Dg,Lno),e(k,xno),e(k,_s),e(_s,Tae),e(Tae,$no),e(_s,kno),e(_s,qP),e(qP,Sno),e(_s,Rno),e(_s,NP),e(NP,Pno),e(_s,Bno),e(k,Ino),e(k,Gg),e(Gg,Mae),e(Mae,qno),e(Gg,Nno),e(Gg,jP),e(jP,jno),e(Gg,Dno),e(k,Gno),e(k,Og),e(Og,Eae),e(Eae,Ono),e(Og,Vno),e(Og,DP),e(DP,Xno),e(Og,zno),e(k,Wno),e(k,Vg),e(Vg,Cae),e(Cae,Qno),e(Vg,Hno),e(Vg,GP),e(GP,Uno),e(Vg,Jno),e(k,Yno),e(k,Xg),e(Xg,wae),e(wae,Kno),e(Xg,Zno),e(Xg,OP),e(OP,eso),e(Xg,oso),e(k,rso),e(k,bs),e(bs,Aae),e(Aae,tso),e(bs,aso),e(bs,VP),e(VP,nso),e(bs,sso),e(bs,XP),e(XP,lso),e(bs,iso),e(k,dso),e(k,zg),e(zg,yae),e(yae,cso),e(zg,fso),e(zg,zP),e(zP,mso),e(zg,gso),e(k,hso),e(k,vs),e(vs,Lae),e(Lae,pso),e(vs,uso),e(vs,WP),e(WP,_so),e(vs,bso),e(vs,QP),e(QP,vso),e(vs,Fso),e(k,Tso),e(k,Fs),e(Fs,xae),e(xae,Mso),e(Fs,Eso),e(Fs,HP),e(HP,Cso),e(Fs,wso),e(Fs,UP),e(UP,Aso),e(Fs,yso),e(k,Lso),e(k,Ts),e(Ts,$ae),e($ae,xso),e(Ts,$so),e(Ts,JP),e(JP,kso),e(Ts,Sso),e(Ts,YP),e(YP,Rso),e(Ts,Pso),e(k,Bso),e(k,Ms),e(Ms,kae),e(kae,Iso),e(Ms,qso),e(Ms,KP),e(KP,Nso),e(Ms,jso),e(Ms,ZP),e(ZP,Dso),e(Ms,Gso),e(k,Oso),e(k,Es),e(Es,Sae),e(Sae,Vso),e(Es,Xso),e(Es,eB),e(eB,zso),e(Es,Wso),e(Es,oB),e(oB,Qso),e(Es,Hso),e(k,Uso),e(k,Cs),e(Cs,Rae),e(Rae,Jso),e(Cs,Yso),e(Cs,rB),e(rB,Kso),e(Cs,Zso),e(Cs,tB),e(tB,elo),e(Cs,olo),e(k,rlo),e(k,Wg),e(Wg,Pae),e(Pae,tlo),e(Wg,alo),e(Wg,aB),e(aB,nlo),e(Wg,slo),e(k,llo),e(k,Qg),e(Qg,Bae),e(Bae,ilo),e(Qg,dlo),e(Qg,nB),e(nB,clo),e(Qg,flo),e(k,mlo),e(k,ws),e(ws,Iae),e(Iae,glo),e(ws,hlo),e(ws,sB),e(sB,plo),e(ws,ulo),e(ws,lB),e(lB,_lo),e(ws,blo),e(k,vlo),e(k,As),e(As,qae),e(qae,Flo),e(As,Tlo),e(As,iB),e(iB,Mlo),e(As,Elo),e(As,dB),e(dB,Clo),e(As,wlo),e(k,Alo),e(k,ys),e(ys,Nae),e(Nae,ylo),e(ys,Llo),e(ys,cB),e(cB,xlo),e(ys,$lo),e(ys,fB),e(fB,klo),e(ys,Slo),e(k,Rlo),e(k,Hg),e(Hg,jae),e(jae,Plo),e(Hg,Blo),e(Hg,mB),e(mB,Ilo),e(Hg,qlo),e(k,Nlo),e(k,Ug),e(Ug,Dae),e(Dae,jlo),e(Ug,Dlo),e(Ug,gB),e(gB,Glo),e(Ug,Olo),e(k,Vlo),e(k,Jg),e(Jg,Gae),e(Gae,Xlo),e(Jg,zlo),e(Jg,hB),e(hB,Wlo),e(Jg,Qlo),e(k,Hlo),e(k,Ls),e(Ls,Oae),e(Oae,Ulo),e(Ls,Jlo),e(Ls,pB),e(pB,Ylo),e(Ls,Klo),e(Ls,uB),e(uB,Zlo),e(Ls,eio),e(k,oio),e(k,Yg),e(Yg,Vae),e(Vae,rio),e(Yg,tio),e(Yg,_B),e(_B,aio),e(Yg,nio),e(k,sio),e(k,Kg),e(Kg,Xae),e(Xae,lio),e(Kg,iio),e(Kg,bB),e(bB,dio),e(Kg,cio),e(k,fio),e(k,Zg),e(Zg,zae),e(zae,mio),e(Zg,gio),e(Zg,vB),e(vB,hio),e(Zg,pio),e(k,uio),e(k,xs),e(xs,Wae),e(Wae,_io),e(xs,bio),e(xs,FB),e(FB,vio),e(xs,Fio),e(xs,TB),e(TB,Tio),e(xs,Mio),e(k,Eio),e(k,eh),e(eh,Qae),e(Qae,Cio),e(eh,wio),e(eh,MB),e(MB,Aio),e(eh,yio),e(k,Lio),e(k,oh),e(oh,Hae),e(Hae,xio),e(oh,$io),e(oh,EB),e(EB,kio),e(oh,Sio),e(k,Rio),e(k,$s),e($s,Uae),e(Uae,Pio),e($s,Bio),e($s,CB),e(CB,Iio),e($s,qio),e($s,wB),e(wB,Nio),e($s,jio),e(k,Dio),e(k,ks),e(ks,Jae),e(Jae,Gio),e(ks,Oio),e(ks,AB),e(AB,Vio),e(ks,Xio),e(ks,yB),e(yB,zio),e(ks,Wio),e(k,Qio),e(k,Ss),e(Ss,Yae),e(Yae,Hio),e(Ss,Uio),e(Ss,LB),e(LB,Jio),e(Ss,Yio),e(Ss,xB),e(xB,Kio),e(Ss,Zio),e(k,edo),e(k,Rs),e(Rs,Kae),e(Kae,odo),e(Rs,rdo),e(Rs,$B),e($B,tdo),e(Rs,ado),e(Rs,kB),e(kB,ndo),e(Rs,sdo),e(Cr,ldo),M(rh,Cr,null),e(wo,ido),e(wo,th),M(NA,th,null),e(th,ddo),e(th,Zae),e(Zae,cdo),b(f,Zqe,_),b(f,Mi,_),e(Mi,ah),e(ah,ene),M(jA,ene,null),e(Mi,fdo),e(Mi,one),e(one,mdo),b(f,eNe,_),b(f,Ao,_),M(DA,Ao,null),e(Ao,gdo),e(Ao,GA),e(GA,hdo),e(GA,SB),e(SB,pdo),e(GA,udo),e(Ao,_do),e(Ao,OA),e(OA,bdo),e(OA,rne),e(rne,vdo),e(OA,Fdo),e(Ao,Tdo),e(Ao,He),M(VA,He,null),e(He,Mdo),e(He,tne),e(tne,Edo),e(He,Cdo),e(He,ya),e(ya,wdo),e(ya,ane),e(ane,Ado),e(ya,ydo),e(ya,nne),e(nne,Ldo),e(ya,xdo),e(ya,sne),e(sne,$do),e(ya,kdo),e(He,Sdo),e(He,K),e(K,nh),e(nh,lne),e(lne,Rdo),e(nh,Pdo),e(nh,RB),e(RB,Bdo),e(nh,Ido),e(K,qdo),e(K,sh),e(sh,ine),e(ine,Ndo),e(sh,jdo),e(sh,PB),e(PB,Ddo),e(sh,Gdo),e(K,Odo),e(K,lh),e(lh,dne),e(dne,Vdo),e(lh,Xdo),e(lh,BB),e(BB,zdo),e(lh,Wdo),e(K,Qdo),e(K,ih),e(ih,cne),e(cne,Hdo),e(ih,Udo),e(ih,IB),e(IB,Jdo),e(ih,Ydo),e(K,Kdo),e(K,dh),e(dh,fne),e(fne,Zdo),e(dh,eco),e(dh,qB),e(qB,oco),e(dh,rco),e(K,tco),e(K,ch),e(ch,mne),e(mne,aco),e(ch,nco),e(ch,NB),e(NB,sco),e(ch,lco),e(K,ico),e(K,fh),e(fh,gne),e(gne,dco),e(fh,cco),e(fh,jB),e(jB,fco),e(fh,mco),e(K,gco),e(K,mh),e(mh,hne),e(hne,hco),e(mh,pco),e(mh,DB),e(DB,uco),e(mh,_co),e(K,bco),e(K,gh),e(gh,pne),e(pne,vco),e(gh,Fco),e(gh,GB),e(GB,Tco),e(gh,Mco),e(K,Eco),e(K,hh),e(hh,une),e(une,Cco),e(hh,wco),e(hh,OB),e(OB,Aco),e(hh,yco),e(K,Lco),e(K,ph),e(ph,_ne),e(_ne,xco),e(ph,$co),e(ph,VB),e(VB,kco),e(ph,Sco),e(K,Rco),e(K,uh),e(uh,bne),e(bne,Pco),e(uh,Bco),e(uh,XB),e(XB,Ico),e(uh,qco),e(K,Nco),e(K,_h),e(_h,vne),e(vne,jco),e(_h,Dco),e(_h,zB),e(zB,Gco),e(_h,Oco),e(K,Vco),e(K,bh),e(bh,Fne),e(Fne,Xco),e(bh,zco),e(bh,WB),e(WB,Wco),e(bh,Qco),e(K,Hco),e(K,vh),e(vh,Tne),e(Tne,Uco),e(vh,Jco),e(vh,QB),e(QB,Yco),e(vh,Kco),e(K,Zco),e(K,Fh),e(Fh,Mne),e(Mne,efo),e(Fh,ofo),e(Fh,HB),e(HB,rfo),e(Fh,tfo),e(K,afo),e(K,Th),e(Th,Ene),e(Ene,nfo),e(Th,sfo),e(Th,UB),e(UB,lfo),e(Th,ifo),e(K,dfo),e(K,Mh),e(Mh,Cne),e(Cne,cfo),e(Mh,ffo),e(Mh,JB),e(JB,mfo),e(Mh,gfo),e(K,hfo),e(K,Eh),e(Eh,wne),e(wne,pfo),e(Eh,ufo),e(Eh,YB),e(YB,_fo),e(Eh,bfo),e(K,vfo),e(K,Ch),e(Ch,Ane),e(Ane,Ffo),e(Ch,Tfo),e(Ch,KB),e(KB,Mfo),e(Ch,Efo),e(K,Cfo),e(K,wh),e(wh,yne),e(yne,wfo),e(wh,Afo),e(wh,ZB),e(ZB,yfo),e(wh,Lfo),e(K,xfo),e(K,Ah),e(Ah,Lne),e(Lne,$fo),e(Ah,kfo),e(Ah,eI),e(eI,Sfo),e(Ah,Rfo),e(K,Pfo),e(K,yh),e(yh,xne),e(xne,Bfo),e(yh,Ifo),e(yh,oI),e(oI,qfo),e(yh,Nfo),e(K,jfo),e(K,Lh),e(Lh,$ne),e($ne,Dfo),e(Lh,Gfo),e(Lh,rI),e(rI,Ofo),e(Lh,Vfo),e(K,Xfo),e(K,xh),e(xh,kne),e(kne,zfo),e(xh,Wfo),e(xh,tI),e(tI,Qfo),e(xh,Hfo),e(K,Ufo),e(K,$h),e($h,Sne),e(Sne,Jfo),e($h,Yfo),e($h,aI),e(aI,Kfo),e($h,Zfo),e(K,emo),e(K,kh),e(kh,Rne),e(Rne,omo),e(kh,rmo),e(kh,nI),e(nI,tmo),e(kh,amo),e(K,nmo),e(K,Sh),e(Sh,Pne),e(Pne,smo),e(Sh,lmo),e(Sh,sI),e(sI,imo),e(Sh,dmo),e(He,cmo),M(Rh,He,null),e(He,fmo),M(Ph,He,null),e(Ao,mmo),e(Ao,Bh),M(XA,Bh,null),e(Bh,gmo),e(Bh,Bne),e(Bne,hmo),b(f,oNe,_),b(f,Ei,_),e(Ei,Ih),e(Ih,Ine),M(zA,Ine,null),e(Ei,pmo),e(Ei,qne),e(qne,umo),b(f,rNe,_),b(f,yo,_),M(WA,yo,null),e(yo,_mo),e(yo,QA),e(QA,bmo),e(QA,lI),e(lI,vmo),e(QA,Fmo),e(yo,Tmo),e(yo,HA),e(HA,Mmo),e(HA,Nne),e(Nne,Emo),e(HA,Cmo),e(yo,wmo),e(yo,Ue),M(UA,Ue,null),e(Ue,Amo),e(Ue,jne),e(jne,ymo),e(Ue,Lmo),e(Ue,Ci),e(Ci,xmo),e(Ci,Dne),e(Dne,$mo),e(Ci,kmo),e(Ci,Gne),e(Gne,Smo),e(Ci,Rmo),e(Ue,Pmo),e(Ue,he),e(he,qh),e(qh,One),e(One,Bmo),e(qh,Imo),e(qh,iI),e(iI,qmo),e(qh,Nmo),e(he,jmo),e(he,Nh),e(Nh,Vne),e(Vne,Dmo),e(Nh,Gmo),e(Nh,Xne),e(Xne,Omo),e(Nh,Vmo),e(he,Xmo),e(he,jh),e(jh,zne),e(zne,zmo),e(jh,Wmo),e(jh,dI),e(dI,Qmo),e(jh,Hmo),e(he,Umo),e(he,Dh),e(Dh,Wne),e(Wne,Jmo),e(Dh,Ymo),e(Dh,cI),e(cI,Kmo),e(Dh,Zmo),e(he,ego),e(he,Gh),e(Gh,Qne),e(Qne,ogo),e(Gh,rgo),e(Gh,fI),e(fI,tgo),e(Gh,ago),e(he,ngo),e(he,Oh),e(Oh,Hne),e(Hne,sgo),e(Oh,lgo),e(Oh,mI),e(mI,igo),e(Oh,dgo),e(he,cgo),e(he,Vh),e(Vh,Une),e(Une,fgo),e(Vh,mgo),e(Vh,gI),e(gI,ggo),e(Vh,hgo),e(he,pgo),e(he,Xh),e(Xh,Jne),e(Jne,ugo),e(Xh,_go),e(Xh,hI),e(hI,bgo),e(Xh,vgo),e(he,Fgo),e(he,zh),e(zh,Yne),e(Yne,Tgo),e(zh,Mgo),e(zh,pI),e(pI,Ego),e(zh,Cgo),e(he,wgo),e(he,Wh),e(Wh,Kne),e(Kne,Ago),e(Wh,ygo),e(Wh,uI),e(uI,Lgo),e(Wh,xgo),e(he,$go),e(he,Qh),e(Qh,Zne),e(Zne,kgo),e(Qh,Sgo),e(Qh,_I),e(_I,Rgo),e(Qh,Pgo),e(he,Bgo),e(he,Hh),e(Hh,ese),e(ese,Igo),e(Hh,qgo),e(Hh,bI),e(bI,Ngo),e(Hh,jgo),e(he,Dgo),e(he,Uh),e(Uh,ose),e(ose,Ggo),e(Uh,Ogo),e(Uh,vI),e(vI,Vgo),e(Uh,Xgo),e(he,zgo),e(he,Jh),e(Jh,rse),e(rse,Wgo),e(Jh,Qgo),e(Jh,FI),e(FI,Hgo),e(Jh,Ugo),e(he,Jgo),e(he,Yh),e(Yh,tse),e(tse,Ygo),e(Yh,Kgo),e(Yh,TI),e(TI,Zgo),e(Yh,eho),e(he,oho),e(he,Kh),e(Kh,ase),e(ase,rho),e(Kh,tho),e(Kh,MI),e(MI,aho),e(Kh,nho),e(he,sho),e(he,Zh),e(Zh,nse),e(nse,lho),e(Zh,iho),e(Zh,EI),e(EI,dho),e(Zh,cho),e(Ue,fho),M(ep,Ue,null),e(Ue,mho),M(op,Ue,null),e(yo,gho),e(yo,rp),M(JA,rp,null),e(rp,hho),e(rp,sse),e(sse,pho),b(f,tNe,_),b(f,wi,_),e(wi,tp),e(tp,lse),M(YA,lse,null),e(wi,uho),e(wi,ise),e(ise,_ho),b(f,aNe,_),b(f,Lo,_),M(KA,Lo,null),e(Lo,bho),e(Lo,Ai),e(Ai,vho),e(Ai,CI),e(CI,Fho),e(Ai,Tho),e(Ai,wI),e(wI,Mho),e(Ai,Eho),e(Lo,Cho),e(Lo,ZA),e(ZA,who),e(ZA,dse),e(dse,Aho),e(ZA,yho),e(Lo,Lho),e(Lo,tt),M(e6,tt,null),e(tt,xho),e(tt,cse),e(cse,$ho),e(tt,kho),e(tt,yi),e(yi,Sho),e(yi,fse),e(fse,Rho),e(yi,Pho),e(yi,AI),e(AI,Bho),e(yi,Iho),e(tt,qho),M(ap,tt,null),e(Lo,Nho),e(Lo,Je),M(o6,Je,null),e(Je,jho),e(Je,mse),e(mse,Dho),e(Je,Gho),e(Je,La),e(La,Oho),e(La,gse),e(gse,Vho),e(La,Xho),e(La,hse),e(hse,zho),e(La,Who),e(La,pse),e(pse,Qho),e(La,Hho),e(Je,Uho),e(Je,x),e(x,np),e(np,use),e(use,Jho),e(np,Yho),e(np,yI),e(yI,Kho),e(np,Zho),e(x,epo),e(x,sp),e(sp,_se),e(_se,opo),e(sp,rpo),e(sp,LI),e(LI,tpo),e(sp,apo),e(x,npo),e(x,lp),e(lp,bse),e(bse,spo),e(lp,lpo),e(lp,xI),e(xI,ipo),e(lp,dpo),e(x,cpo),e(x,ip),e(ip,vse),e(vse,fpo),e(ip,mpo),e(ip,$I),e($I,gpo),e(ip,hpo),e(x,ppo),e(x,dp),e(dp,Fse),e(Fse,upo),e(dp,_po),e(dp,kI),e(kI,bpo),e(dp,vpo),e(x,Fpo),e(x,cp),e(cp,Tse),e(Tse,Tpo),e(cp,Mpo),e(cp,SI),e(SI,Epo),e(cp,Cpo),e(x,wpo),e(x,fp),e(fp,Mse),e(Mse,Apo),e(fp,ypo),e(fp,RI),e(RI,Lpo),e(fp,xpo),e(x,$po),e(x,mp),e(mp,Ese),e(Ese,kpo),e(mp,Spo),e(mp,PI),e(PI,Rpo),e(mp,Ppo),e(x,Bpo),e(x,gp),e(gp,Cse),e(Cse,Ipo),e(gp,qpo),e(gp,BI),e(BI,Npo),e(gp,jpo),e(x,Dpo),e(x,hp),e(hp,wse),e(wse,Gpo),e(hp,Opo),e(hp,II),e(II,Vpo),e(hp,Xpo),e(x,zpo),e(x,pp),e(pp,Ase),e(Ase,Wpo),e(pp,Qpo),e(pp,qI),e(qI,Hpo),e(pp,Upo),e(x,Jpo),e(x,up),e(up,yse),e(yse,Ypo),e(up,Kpo),e(up,NI),e(NI,Zpo),e(up,euo),e(x,ouo),e(x,_p),e(_p,Lse),e(Lse,ruo),e(_p,tuo),e(_p,jI),e(jI,auo),e(_p,nuo),e(x,suo),e(x,bp),e(bp,xse),e(xse,luo),e(bp,iuo),e(bp,DI),e(DI,duo),e(bp,cuo),e(x,fuo),e(x,vp),e(vp,$se),e($se,muo),e(vp,guo),e(vp,GI),e(GI,huo),e(vp,puo),e(x,uuo),e(x,Fp),e(Fp,kse),e(kse,_uo),e(Fp,buo),e(Fp,OI),e(OI,vuo),e(Fp,Fuo),e(x,Tuo),e(x,Tp),e(Tp,Sse),e(Sse,Muo),e(Tp,Euo),e(Tp,VI),e(VI,Cuo),e(Tp,wuo),e(x,Auo),e(x,Mp),e(Mp,Rse),e(Rse,yuo),e(Mp,Luo),e(Mp,XI),e(XI,xuo),e(Mp,$uo),e(x,kuo),e(x,Ep),e(Ep,Pse),e(Pse,Suo),e(Ep,Ruo),e(Ep,zI),e(zI,Puo),e(Ep,Buo),e(x,Iuo),e(x,Cp),e(Cp,Bse),e(Bse,quo),e(Cp,Nuo),e(Cp,WI),e(WI,juo),e(Cp,Duo),e(x,Guo),e(x,wp),e(wp,Ise),e(Ise,Ouo),e(wp,Vuo),e(wp,QI),e(QI,Xuo),e(wp,zuo),e(x,Wuo),e(x,Ap),e(Ap,qse),e(qse,Quo),e(Ap,Huo),e(Ap,HI),e(HI,Uuo),e(Ap,Juo),e(x,Yuo),e(x,yp),e(yp,Nse),e(Nse,Kuo),e(yp,Zuo),e(yp,UI),e(UI,e_o),e(yp,o_o),e(x,r_o),e(x,Lp),e(Lp,jse),e(jse,t_o),e(Lp,a_o),e(Lp,JI),e(JI,n_o),e(Lp,s_o),e(x,l_o),e(x,xp),e(xp,Dse),e(Dse,i_o),e(xp,d_o),e(xp,YI),e(YI,c_o),e(xp,f_o),e(x,m_o),e(x,$p),e($p,Gse),e(Gse,g_o),e($p,h_o),e($p,KI),e(KI,p_o),e($p,u_o),e(x,__o),e(x,kp),e(kp,Ose),e(Ose,b_o),e(kp,v_o),e(kp,ZI),e(ZI,F_o),e(kp,T_o),e(x,M_o),e(x,Sp),e(Sp,Vse),e(Vse,E_o),e(Sp,C_o),e(Sp,eq),e(eq,w_o),e(Sp,A_o),e(x,y_o),e(x,Rp),e(Rp,Xse),e(Xse,L_o),e(Rp,x_o),e(Rp,oq),e(oq,$_o),e(Rp,k_o),e(x,S_o),e(x,Pp),e(Pp,zse),e(zse,R_o),e(Pp,P_o),e(Pp,rq),e(rq,B_o),e(Pp,I_o),e(x,q_o),e(x,Bp),e(Bp,Wse),e(Wse,N_o),e(Bp,j_o),e(Bp,tq),e(tq,D_o),e(Bp,G_o),e(x,O_o),e(x,Ip),e(Ip,Qse),e(Qse,V_o),e(Ip,X_o),e(Ip,aq),e(aq,z_o),e(Ip,W_o),e(x,Q_o),e(x,Ps),e(Ps,Hse),e(Hse,H_o),e(Ps,U_o),e(Ps,nq),e(nq,J_o),e(Ps,Y_o),e(Ps,sq),e(sq,K_o),e(Ps,Z_o),e(x,e1o),e(x,qp),e(qp,Use),e(Use,o1o),e(qp,r1o),e(qp,lq),e(lq,t1o),e(qp,a1o),e(x,n1o),e(x,Np),e(Np,Jse),e(Jse,s1o),e(Np,l1o),e(Np,iq),e(iq,i1o),e(Np,d1o),e(x,c1o),e(x,jp),e(jp,Yse),e(Yse,f1o),e(jp,m1o),e(jp,dq),e(dq,g1o),e(jp,h1o),e(x,p1o),e(x,Dp),e(Dp,Kse),e(Kse,u1o),e(Dp,_1o),e(Dp,cq),e(cq,b1o),e(Dp,v1o),e(x,F1o),e(x,Gp),e(Gp,Zse),e(Zse,T1o),e(Gp,M1o),e(Gp,fq),e(fq,E1o),e(Gp,C1o),e(x,w1o),e(x,Op),e(Op,ele),e(ele,A1o),e(Op,y1o),e(Op,mq),e(mq,L1o),e(Op,x1o),e(x,$1o),e(x,Vp),e(Vp,ole),e(ole,k1o),e(Vp,S1o),e(Vp,gq),e(gq,R1o),e(Vp,P1o),e(x,B1o),e(x,Xp),e(Xp,rle),e(rle,I1o),e(Xp,q1o),e(Xp,hq),e(hq,N1o),e(Xp,j1o),e(x,D1o),e(x,zp),e(zp,tle),e(tle,G1o),e(zp,O1o),e(zp,pq),e(pq,V1o),e(zp,X1o),e(x,z1o),e(x,Wp),e(Wp,ale),e(ale,W1o),e(Wp,Q1o),e(Wp,uq),e(uq,H1o),e(Wp,U1o),e(x,J1o),e(x,Qp),e(Qp,nle),e(nle,Y1o),e(Qp,K1o),e(Qp,_q),e(_q,Z1o),e(Qp,e8o),e(x,o8o),e(x,Hp),e(Hp,sle),e(sle,r8o),e(Hp,t8o),e(Hp,bq),e(bq,a8o),e(Hp,n8o),e(x,s8o),e(x,Up),e(Up,lle),e(lle,l8o),e(Up,i8o),e(Up,vq),e(vq,d8o),e(Up,c8o),e(x,f8o),e(x,Jp),e(Jp,ile),e(ile,m8o),e(Jp,g8o),e(Jp,Fq),e(Fq,h8o),e(Jp,p8o),e(x,u8o),e(x,Yp),e(Yp,dle),e(dle,_8o),e(Yp,b8o),e(Yp,Tq),e(Tq,v8o),e(Yp,F8o),e(x,T8o),e(x,Kp),e(Kp,cle),e(cle,M8o),e(Kp,E8o),e(Kp,Mq),e(Mq,C8o),e(Kp,w8o),e(x,A8o),e(x,Zp),e(Zp,fle),e(fle,y8o),e(Zp,L8o),e(Zp,Eq),e(Eq,x8o),e(Zp,$8o),e(x,k8o),e(x,eu),e(eu,mle),e(mle,S8o),e(eu,R8o),e(eu,Cq),e(Cq,P8o),e(eu,B8o),e(x,I8o),e(x,ou),e(ou,gle),e(gle,q8o),e(ou,N8o),e(ou,wq),e(wq,j8o),e(ou,D8o),e(x,G8o),e(x,ru),e(ru,hle),e(hle,O8o),e(ru,V8o),e(ru,Aq),e(Aq,X8o),e(ru,z8o),e(x,W8o),e(x,tu),e(tu,ple),e(ple,Q8o),e(tu,H8o),e(tu,yq),e(yq,U8o),e(tu,J8o),e(x,Y8o),e(x,au),e(au,ule),e(ule,K8o),e(au,Z8o),e(au,Lq),e(Lq,ebo),e(au,obo),e(x,rbo),e(x,nu),e(nu,_le),e(_le,tbo),e(nu,abo),e(nu,xq),e(xq,nbo),e(nu,sbo),e(x,lbo),e(x,su),e(su,ble),e(ble,ibo),e(su,dbo),e(su,$q),e($q,cbo),e(su,fbo),e(x,mbo),e(x,lu),e(lu,vle),e(vle,gbo),e(lu,hbo),e(lu,kq),e(kq,pbo),e(lu,ubo),e(x,_bo),e(x,iu),e(iu,Fle),e(Fle,bbo),e(iu,vbo),e(iu,Sq),e(Sq,Fbo),e(iu,Tbo),e(x,Mbo),e(x,du),e(du,Tle),e(Tle,Ebo),e(du,Cbo),e(du,Rq),e(Rq,wbo),e(du,Abo),e(x,ybo),e(x,cu),e(cu,Mle),e(Mle,Lbo),e(cu,xbo),e(cu,Pq),e(Pq,$bo),e(cu,kbo),e(x,Sbo),e(x,fu),e(fu,Ele),e(Ele,Rbo),e(fu,Pbo),e(fu,Bq),e(Bq,Bbo),e(fu,Ibo),e(x,qbo),e(x,mu),e(mu,Cle),e(Cle,Nbo),e(mu,jbo),e(mu,Iq),e(Iq,Dbo),e(mu,Gbo),e(x,Obo),e(x,gu),e(gu,wle),e(wle,Vbo),e(gu,Xbo),e(gu,qq),e(qq,zbo),e(gu,Wbo),e(x,Qbo),e(x,hu),e(hu,Ale),e(Ale,Hbo),e(hu,Ubo),e(hu,Nq),e(Nq,Jbo),e(hu,Ybo),e(x,Kbo),e(x,pu),e(pu,yle),e(yle,Zbo),e(pu,e2o),e(pu,jq),e(jq,o2o),e(pu,r2o),e(x,t2o),e(x,uu),e(uu,Lle),e(Lle,a2o),e(uu,n2o),e(uu,Dq),e(Dq,s2o),e(uu,l2o),e(x,i2o),e(x,_u),e(_u,xle),e(xle,d2o),e(_u,c2o),e(_u,Gq),e(Gq,f2o),e(_u,m2o),e(x,g2o),e(x,bu),e(bu,$le),e($le,h2o),e(bu,p2o),e(bu,Oq),e(Oq,u2o),e(bu,_2o),e(x,b2o),e(x,vu),e(vu,kle),e(kle,v2o),e(vu,F2o),e(vu,Vq),e(Vq,T2o),e(vu,M2o),e(x,E2o),e(x,Fu),e(Fu,Sle),e(Sle,C2o),e(Fu,w2o),e(Fu,Xq),e(Xq,A2o),e(Fu,y2o),e(x,L2o),e(x,Tu),e(Tu,Rle),e(Rle,x2o),e(Tu,$2o),e(Tu,zq),e(zq,k2o),e(Tu,S2o),e(x,R2o),e(x,Mu),e(Mu,Ple),e(Ple,P2o),e(Mu,B2o),e(Mu,Wq),e(Wq,I2o),e(Mu,q2o),e(x,N2o),e(x,Eu),e(Eu,Ble),e(Ble,j2o),e(Eu,D2o),e(Eu,Qq),e(Qq,G2o),e(Eu,O2o),e(x,V2o),e(x,Cu),e(Cu,Ile),e(Ile,X2o),e(Cu,z2o),e(Cu,Hq),e(Hq,W2o),e(Cu,Q2o),e(x,H2o),e(x,wu),e(wu,qle),e(qle,U2o),e(wu,J2o),e(wu,Uq),e(Uq,Y2o),e(wu,K2o),e(x,Z2o),e(x,Au),e(Au,Nle),e(Nle,evo),e(Au,ovo),e(Au,Jq),e(Jq,rvo),e(Au,tvo),e(x,avo),e(x,yu),e(yu,jle),e(jle,nvo),e(yu,svo),e(yu,Yq),e(Yq,lvo),e(yu,ivo),e(x,dvo),e(x,Lu),e(Lu,Dle),e(Dle,cvo),e(Lu,fvo),e(Lu,Kq),e(Kq,mvo),e(Lu,gvo),e(x,hvo),e(x,xu),e(xu,Gle),e(Gle,pvo),e(xu,uvo),e(xu,Zq),e(Zq,_vo),e(xu,bvo),e(x,vvo),e(x,$u),e($u,Ole),e(Ole,Fvo),e($u,Tvo),e($u,eN),e(eN,Mvo),e($u,Evo),e(x,Cvo),e(x,ku),e(ku,Vle),e(Vle,wvo),e(ku,Avo),e(ku,oN),e(oN,yvo),e(ku,Lvo),e(x,xvo),e(x,Su),e(Su,Xle),e(Xle,$vo),e(Su,kvo),e(Su,rN),e(rN,Svo),e(Su,Rvo),e(x,Pvo),e(x,Ru),e(Ru,zle),e(zle,Bvo),e(Ru,Ivo),e(Ru,tN),e(tN,qvo),e(Ru,Nvo),e(x,jvo),e(x,Pu),e(Pu,Wle),e(Wle,Dvo),e(Pu,Gvo),e(Pu,aN),e(aN,Ovo),e(Pu,Vvo),e(x,Xvo),e(x,Bu),e(Bu,Qle),e(Qle,zvo),e(Bu,Wvo),e(Bu,nN),e(nN,Qvo),e(Bu,Hvo),e(x,Uvo),e(x,Iu),e(Iu,Hle),e(Hle,Jvo),e(Iu,Yvo),e(Iu,sN),e(sN,Kvo),e(Iu,Zvo),e(x,e3o),e(x,qu),e(qu,Ule),e(Ule,o3o),e(qu,r3o),e(qu,lN),e(lN,t3o),e(qu,a3o),e(x,n3o),e(x,Nu),e(Nu,Jle),e(Jle,s3o),e(Nu,l3o),e(Nu,iN),e(iN,i3o),e(Nu,d3o),e(x,c3o),e(x,ju),e(ju,Yle),e(Yle,f3o),e(ju,m3o),e(ju,dN),e(dN,g3o),e(ju,h3o),e(x,p3o),e(x,Du),e(Du,Kle),e(Kle,u3o),e(Du,_3o),e(Du,cN),e(cN,b3o),e(Du,v3o),e(x,F3o),e(x,Gu),e(Gu,Zle),e(Zle,T3o),e(Gu,M3o),e(Gu,fN),e(fN,E3o),e(Gu,C3o),e(x,w3o),e(x,Ou),e(Ou,eie),e(eie,A3o),e(Ou,y3o),e(Ou,mN),e(mN,L3o),e(Ou,x3o),e(x,$3o),e(x,Vu),e(Vu,oie),e(oie,k3o),e(Vu,S3o),e(Vu,gN),e(gN,R3o),e(Vu,P3o),e(x,B3o),e(x,Xu),e(Xu,rie),e(rie,I3o),e(Xu,q3o),e(Xu,hN),e(hN,N3o),e(Xu,j3o),e(x,D3o),e(x,zu),e(zu,tie),e(tie,G3o),e(zu,O3o),e(zu,pN),e(pN,V3o),e(zu,X3o),e(x,z3o),e(x,Wu),e(Wu,aie),e(aie,W3o),e(Wu,Q3o),e(Wu,uN),e(uN,H3o),e(Wu,U3o),e(x,J3o),e(x,Qu),e(Qu,nie),e(nie,Y3o),e(Qu,K3o),e(Qu,_N),e(_N,Z3o),e(Qu,eFo),e(x,oFo),e(x,Hu),e(Hu,sie),e(sie,rFo),e(Hu,tFo),e(Hu,bN),e(bN,aFo),e(Hu,nFo),e(x,sFo),e(x,Uu),e(Uu,lie),e(lie,lFo),e(Uu,iFo),e(Uu,vN),e(vN,dFo),e(Uu,cFo),e(x,fFo),e(x,Ju),e(Ju,iie),e(iie,mFo),e(Ju,gFo),e(Ju,FN),e(FN,hFo),e(Ju,pFo),e(Je,uFo),e(Je,Yu),e(Yu,_Fo),e(Yu,die),e(die,bFo),e(Yu,vFo),e(Yu,cie),e(cie,FFo),e(Je,TFo),M(Ku,Je,null),b(f,nNe,_),b(f,Li,_),e(Li,Zu),e(Zu,fie),M(r6,fie,null),e(Li,MFo),e(Li,mie),e(mie,EFo),b(f,sNe,_),b(f,xo,_),M(t6,xo,null),e(xo,CFo),e(xo,xi),e(xi,wFo),e(xi,TN),e(TN,AFo),e(xi,yFo),e(xi,MN),e(MN,LFo),e(xi,xFo),e(xo,$Fo),e(xo,a6),e(a6,kFo),e(a6,gie),e(gie,SFo),e(a6,RFo),e(xo,PFo),e(xo,at),M(n6,at,null),e(at,BFo),e(at,hie),e(hie,IFo),e(at,qFo),e(at,$i),e($i,NFo),e($i,pie),e(pie,jFo),e($i,DFo),e($i,EN),e(EN,GFo),e($i,OFo),e(at,VFo),M(e_,at,null),e(xo,XFo),e(xo,Ye),M(s6,Ye,null),e(Ye,zFo),e(Ye,uie),e(uie,WFo),e(Ye,QFo),e(Ye,xa),e(xa,HFo),e(xa,_ie),e(_ie,UFo),e(xa,JFo),e(xa,bie),e(bie,YFo),e(xa,KFo),e(xa,vie),e(vie,ZFo),e(xa,eTo),e(Ye,oTo),e(Ye,G),e(G,o_),e(o_,Fie),e(Fie,rTo),e(o_,tTo),e(o_,CN),e(CN,aTo),e(o_,nTo),e(G,sTo),e(G,r_),e(r_,Tie),e(Tie,lTo),e(r_,iTo),e(r_,wN),e(wN,dTo),e(r_,cTo),e(G,fTo),e(G,t_),e(t_,Mie),e(Mie,mTo),e(t_,gTo),e(t_,AN),e(AN,hTo),e(t_,pTo),e(G,uTo),e(G,a_),e(a_,Eie),e(Eie,_To),e(a_,bTo),e(a_,yN),e(yN,vTo),e(a_,FTo),e(G,TTo),e(G,n_),e(n_,Cie),e(Cie,MTo),e(n_,ETo),e(n_,LN),e(LN,CTo),e(n_,wTo),e(G,ATo),e(G,s_),e(s_,wie),e(wie,yTo),e(s_,LTo),e(s_,xN),e(xN,xTo),e(s_,$To),e(G,kTo),e(G,l_),e(l_,Aie),e(Aie,STo),e(l_,RTo),e(l_,$N),e($N,PTo),e(l_,BTo),e(G,ITo),e(G,i_),e(i_,yie),e(yie,qTo),e(i_,NTo),e(i_,kN),e(kN,jTo),e(i_,DTo),e(G,GTo),e(G,d_),e(d_,Lie),e(Lie,OTo),e(d_,VTo),e(d_,SN),e(SN,XTo),e(d_,zTo),e(G,WTo),e(G,c_),e(c_,xie),e(xie,QTo),e(c_,HTo),e(c_,RN),e(RN,UTo),e(c_,JTo),e(G,YTo),e(G,f_),e(f_,$ie),e($ie,KTo),e(f_,ZTo),e(f_,PN),e(PN,e7o),e(f_,o7o),e(G,r7o),e(G,m_),e(m_,kie),e(kie,t7o),e(m_,a7o),e(m_,BN),e(BN,n7o),e(m_,s7o),e(G,l7o),e(G,g_),e(g_,Sie),e(Sie,i7o),e(g_,d7o),e(g_,IN),e(IN,c7o),e(g_,f7o),e(G,m7o),e(G,h_),e(h_,Rie),e(Rie,g7o),e(h_,h7o),e(h_,qN),e(qN,p7o),e(h_,u7o),e(G,_7o),e(G,p_),e(p_,Pie),e(Pie,b7o),e(p_,v7o),e(p_,NN),e(NN,F7o),e(p_,T7o),e(G,M7o),e(G,u_),e(u_,Bie),e(Bie,E7o),e(u_,C7o),e(u_,jN),e(jN,w7o),e(u_,A7o),e(G,y7o),e(G,__),e(__,Iie),e(Iie,L7o),e(__,x7o),e(__,DN),e(DN,$7o),e(__,k7o),e(G,S7o),e(G,b_),e(b_,qie),e(qie,R7o),e(b_,P7o),e(b_,GN),e(GN,B7o),e(b_,I7o),e(G,q7o),e(G,v_),e(v_,Nie),e(Nie,N7o),e(v_,j7o),e(v_,ON),e(ON,D7o),e(v_,G7o),e(G,O7o),e(G,F_),e(F_,jie),e(jie,V7o),e(F_,X7o),e(F_,VN),e(VN,z7o),e(F_,W7o),e(G,Q7o),e(G,T_),e(T_,Die),e(Die,H7o),e(T_,U7o),e(T_,XN),e(XN,J7o),e(T_,Y7o),e(G,K7o),e(G,M_),e(M_,Gie),e(Gie,Z7o),e(M_,eMo),e(M_,zN),e(zN,oMo),e(M_,rMo),e(G,tMo),e(G,E_),e(E_,Oie),e(Oie,aMo),e(E_,nMo),e(E_,WN),e(WN,sMo),e(E_,lMo),e(G,iMo),e(G,C_),e(C_,Vie),e(Vie,dMo),e(C_,cMo),e(C_,QN),e(QN,fMo),e(C_,mMo),e(G,gMo),e(G,w_),e(w_,Xie),e(Xie,hMo),e(w_,pMo),e(w_,HN),e(HN,uMo),e(w_,_Mo),e(G,bMo),e(G,A_),e(A_,zie),e(zie,vMo),e(A_,FMo),e(A_,UN),e(UN,TMo),e(A_,MMo),e(G,EMo),e(G,y_),e(y_,Wie),e(Wie,CMo),e(y_,wMo),e(y_,JN),e(JN,AMo),e(y_,yMo),e(G,LMo),e(G,L_),e(L_,Qie),e(Qie,xMo),e(L_,$Mo),e(L_,YN),e(YN,kMo),e(L_,SMo),e(G,RMo),e(G,x_),e(x_,Hie),e(Hie,PMo),e(x_,BMo),e(x_,KN),e(KN,IMo),e(x_,qMo),e(G,NMo),e(G,$_),e($_,Uie),e(Uie,jMo),e($_,DMo),e($_,ZN),e(ZN,GMo),e($_,OMo),e(G,VMo),e(G,k_),e(k_,Jie),e(Jie,XMo),e(k_,zMo),e(k_,ej),e(ej,WMo),e(k_,QMo),e(G,HMo),e(G,S_),e(S_,Yie),e(Yie,UMo),e(S_,JMo),e(S_,oj),e(oj,YMo),e(S_,KMo),e(G,ZMo),e(G,R_),e(R_,Kie),e(Kie,e4o),e(R_,o4o),e(R_,rj),e(rj,r4o),e(R_,t4o),e(G,a4o),e(G,P_),e(P_,Zie),e(Zie,n4o),e(P_,s4o),e(P_,tj),e(tj,l4o),e(P_,i4o),e(G,d4o),e(G,B_),e(B_,ede),e(ede,c4o),e(B_,f4o),e(B_,aj),e(aj,m4o),e(B_,g4o),e(G,h4o),e(G,I_),e(I_,ode),e(ode,p4o),e(I_,u4o),e(I_,nj),e(nj,_4o),e(I_,b4o),e(G,v4o),e(G,q_),e(q_,rde),e(rde,F4o),e(q_,T4o),e(q_,sj),e(sj,M4o),e(q_,E4o),e(G,C4o),e(G,N_),e(N_,tde),e(tde,w4o),e(N_,A4o),e(N_,lj),e(lj,y4o),e(N_,L4o),e(G,x4o),e(G,j_),e(j_,ade),e(ade,$4o),e(j_,k4o),e(j_,ij),e(ij,S4o),e(j_,R4o),e(G,P4o),e(G,D_),e(D_,nde),e(nde,B4o),e(D_,I4o),e(D_,dj),e(dj,q4o),e(D_,N4o),e(G,j4o),e(G,G_),e(G_,sde),e(sde,D4o),e(G_,G4o),e(G_,cj),e(cj,O4o),e(G_,V4o),e(G,X4o),e(G,O_),e(O_,lde),e(lde,z4o),e(O_,W4o),e(O_,fj),e(fj,Q4o),e(O_,H4o),e(Ye,U4o),e(Ye,V_),e(V_,J4o),e(V_,ide),e(ide,Y4o),e(V_,K4o),e(V_,dde),e(dde,Z4o),e(Ye,eEo),M(X_,Ye,null),b(f,lNe,_),b(f,ki,_),e(ki,z_),e(z_,cde),M(l6,cde,null),e(ki,oEo),e(ki,fde),e(fde,rEo),b(f,iNe,_),b(f,$o,_),M(i6,$o,null),e($o,tEo),e($o,Si),e(Si,aEo),e(Si,mj),e(mj,nEo),e(Si,sEo),e(Si,gj),e(gj,lEo),e(Si,iEo),e($o,dEo),e($o,d6),e(d6,cEo),e(d6,mde),e(mde,fEo),e(d6,mEo),e($o,gEo),e($o,nt),M(c6,nt,null),e(nt,hEo),e(nt,gde),e(gde,pEo),e(nt,uEo),e(nt,Ri),e(Ri,_Eo),e(Ri,hde),e(hde,bEo),e(Ri,vEo),e(Ri,hj),e(hj,FEo),e(Ri,TEo),e(nt,MEo),M(W_,nt,null),e($o,EEo),e($o,Ke),M(f6,Ke,null),e(Ke,CEo),e(Ke,pde),e(pde,wEo),e(Ke,AEo),e(Ke,$a),e($a,yEo),e($a,ude),e(ude,LEo),e($a,xEo),e($a,_de),e(_de,$Eo),e($a,kEo),e($a,bde),e(bde,SEo),e($a,REo),e(Ke,PEo),e(Ke,z),e(z,Q_),e(Q_,vde),e(vde,BEo),e(Q_,IEo),e(Q_,pj),e(pj,qEo),e(Q_,NEo),e(z,jEo),e(z,H_),e(H_,Fde),e(Fde,DEo),e(H_,GEo),e(H_,uj),e(uj,OEo),e(H_,VEo),e(z,XEo),e(z,U_),e(U_,Tde),e(Tde,zEo),e(U_,WEo),e(U_,_j),e(_j,QEo),e(U_,HEo),e(z,UEo),e(z,J_),e(J_,Mde),e(Mde,JEo),e(J_,YEo),e(J_,bj),e(bj,KEo),e(J_,ZEo),e(z,eCo),e(z,Y_),e(Y_,Ede),e(Ede,oCo),e(Y_,rCo),e(Y_,vj),e(vj,tCo),e(Y_,aCo),e(z,nCo),e(z,K_),e(K_,Cde),e(Cde,sCo),e(K_,lCo),e(K_,Fj),e(Fj,iCo),e(K_,dCo),e(z,cCo),e(z,Z_),e(Z_,wde),e(wde,fCo),e(Z_,mCo),e(Z_,Tj),e(Tj,gCo),e(Z_,hCo),e(z,pCo),e(z,e1),e(e1,Ade),e(Ade,uCo),e(e1,_Co),e(e1,Mj),e(Mj,bCo),e(e1,vCo),e(z,FCo),e(z,o1),e(o1,yde),e(yde,TCo),e(o1,MCo),e(o1,Ej),e(Ej,ECo),e(o1,CCo),e(z,wCo),e(z,r1),e(r1,Lde),e(Lde,ACo),e(r1,yCo),e(r1,Cj),e(Cj,LCo),e(r1,xCo),e(z,$Co),e(z,t1),e(t1,xde),e(xde,kCo),e(t1,SCo),e(t1,wj),e(wj,RCo),e(t1,PCo),e(z,BCo),e(z,a1),e(a1,$de),e($de,ICo),e(a1,qCo),e(a1,Aj),e(Aj,NCo),e(a1,jCo),e(z,DCo),e(z,n1),e(n1,kde),e(kde,GCo),e(n1,OCo),e(n1,yj),e(yj,VCo),e(n1,XCo),e(z,zCo),e(z,s1),e(s1,Sde),e(Sde,WCo),e(s1,QCo),e(s1,Lj),e(Lj,HCo),e(s1,UCo),e(z,JCo),e(z,l1),e(l1,Rde),e(Rde,YCo),e(l1,KCo),e(l1,xj),e(xj,ZCo),e(l1,e5o),e(z,o5o),e(z,i1),e(i1,Pde),e(Pde,r5o),e(i1,t5o),e(i1,$j),e($j,a5o),e(i1,n5o),e(z,s5o),e(z,d1),e(d1,Bde),e(Bde,l5o),e(d1,i5o),e(d1,kj),e(kj,d5o),e(d1,c5o),e(z,f5o),e(z,c1),e(c1,Ide),e(Ide,m5o),e(c1,g5o),e(c1,Sj),e(Sj,h5o),e(c1,p5o),e(z,u5o),e(z,f1),e(f1,qde),e(qde,_5o),e(f1,b5o),e(f1,Rj),e(Rj,v5o),e(f1,F5o),e(z,T5o),e(z,m1),e(m1,Nde),e(Nde,M5o),e(m1,E5o),e(m1,Pj),e(Pj,C5o),e(m1,w5o),e(z,A5o),e(z,g1),e(g1,jde),e(jde,y5o),e(g1,L5o),e(g1,Bj),e(Bj,x5o),e(g1,$5o),e(z,k5o),e(z,h1),e(h1,Dde),e(Dde,S5o),e(h1,R5o),e(h1,Ij),e(Ij,P5o),e(h1,B5o),e(z,I5o),e(z,p1),e(p1,Gde),e(Gde,q5o),e(p1,N5o),e(p1,qj),e(qj,j5o),e(p1,D5o),e(z,G5o),e(z,u1),e(u1,Ode),e(Ode,O5o),e(u1,V5o),e(u1,Nj),e(Nj,X5o),e(u1,z5o),e(z,W5o),e(z,_1),e(_1,Vde),e(Vde,Q5o),e(_1,H5o),e(_1,jj),e(jj,U5o),e(_1,J5o),e(z,Y5o),e(z,b1),e(b1,Xde),e(Xde,K5o),e(b1,Z5o),e(b1,Dj),e(Dj,ewo),e(b1,owo),e(z,rwo),e(z,v1),e(v1,zde),e(zde,two),e(v1,awo),e(v1,Gj),e(Gj,nwo),e(v1,swo),e(z,lwo),e(z,F1),e(F1,Wde),e(Wde,iwo),e(F1,dwo),e(F1,Oj),e(Oj,cwo),e(F1,fwo),e(z,mwo),e(z,T1),e(T1,Qde),e(Qde,gwo),e(T1,hwo),e(T1,Vj),e(Vj,pwo),e(T1,uwo),e(z,_wo),e(z,M1),e(M1,Hde),e(Hde,bwo),e(M1,vwo),e(M1,Xj),e(Xj,Fwo),e(M1,Two),e(z,Mwo),e(z,E1),e(E1,Ude),e(Ude,Ewo),e(E1,Cwo),e(E1,zj),e(zj,wwo),e(E1,Awo),e(z,ywo),e(z,C1),e(C1,Jde),e(Jde,Lwo),e(C1,xwo),e(C1,Wj),e(Wj,$wo),e(C1,kwo),e(z,Swo),e(z,w1),e(w1,Yde),e(Yde,Rwo),e(w1,Pwo),e(w1,Qj),e(Qj,Bwo),e(w1,Iwo),e(z,qwo),e(z,A1),e(A1,Kde),e(Kde,Nwo),e(A1,jwo),e(A1,Hj),e(Hj,Dwo),e(A1,Gwo),e(z,Owo),e(z,y1),e(y1,Zde),e(Zde,Vwo),e(y1,Xwo),e(y1,Uj),e(Uj,zwo),e(y1,Wwo),e(z,Qwo),e(z,L1),e(L1,ece),e(ece,Hwo),e(L1,Uwo),e(L1,Jj),e(Jj,Jwo),e(L1,Ywo),e(Ke,Kwo),e(Ke,x1),e(x1,Zwo),e(x1,oce),e(oce,e0o),e(x1,o0o),e(x1,rce),e(rce,r0o),e(Ke,t0o),M($1,Ke,null),b(f,dNe,_),b(f,Pi,_),e(Pi,k1),e(k1,tce),M(m6,tce,null),e(Pi,a0o),e(Pi,ace),e(ace,n0o),b(f,cNe,_),b(f,ko,_),M(g6,ko,null),e(ko,s0o),e(ko,Bi),e(Bi,l0o),e(Bi,Yj),e(Yj,i0o),e(Bi,d0o),e(Bi,Kj),e(Kj,c0o),e(Bi,f0o),e(ko,m0o),e(ko,h6),e(h6,g0o),e(h6,nce),e(nce,h0o),e(h6,p0o),e(ko,u0o),e(ko,st),M(p6,st,null),e(st,_0o),e(st,sce),e(sce,b0o),e(st,v0o),e(st,Ii),e(Ii,F0o),e(Ii,lce),e(lce,T0o),e(Ii,M0o),e(Ii,Zj),e(Zj,E0o),e(Ii,C0o),e(st,w0o),M(S1,st,null),e(ko,A0o),e(ko,Ze),M(u6,Ze,null),e(Ze,y0o),e(Ze,ice),e(ice,L0o),e(Ze,x0o),e(Ze,ka),e(ka,$0o),e(ka,dce),e(dce,k0o),e(ka,S0o),e(ka,cce),e(cce,R0o),e(ka,P0o),e(ka,fce),e(fce,B0o),e(ka,I0o),e(Ze,q0o),e(Ze,W),e(W,R1),e(R1,mce),e(mce,N0o),e(R1,j0o),e(R1,eD),e(eD,D0o),e(R1,G0o),e(W,O0o),e(W,P1),e(P1,gce),e(gce,V0o),e(P1,X0o),e(P1,oD),e(oD,z0o),e(P1,W0o),e(W,Q0o),e(W,B1),e(B1,hce),e(hce,H0o),e(B1,U0o),e(B1,rD),e(rD,J0o),e(B1,Y0o),e(W,K0o),e(W,I1),e(I1,pce),e(pce,Z0o),e(I1,eAo),e(I1,tD),e(tD,oAo),e(I1,rAo),e(W,tAo),e(W,q1),e(q1,uce),e(uce,aAo),e(q1,nAo),e(q1,aD),e(aD,sAo),e(q1,lAo),e(W,iAo),e(W,N1),e(N1,_ce),e(_ce,dAo),e(N1,cAo),e(N1,nD),e(nD,fAo),e(N1,mAo),e(W,gAo),e(W,j1),e(j1,bce),e(bce,hAo),e(j1,pAo),e(j1,sD),e(sD,uAo),e(j1,_Ao),e(W,bAo),e(W,D1),e(D1,vce),e(vce,vAo),e(D1,FAo),e(D1,lD),e(lD,TAo),e(D1,MAo),e(W,EAo),e(W,G1),e(G1,Fce),e(Fce,CAo),e(G1,wAo),e(G1,iD),e(iD,AAo),e(G1,yAo),e(W,LAo),e(W,O1),e(O1,Tce),e(Tce,xAo),e(O1,$Ao),e(O1,dD),e(dD,kAo),e(O1,SAo),e(W,RAo),e(W,V1),e(V1,Mce),e(Mce,PAo),e(V1,BAo),e(V1,cD),e(cD,IAo),e(V1,qAo),e(W,NAo),e(W,X1),e(X1,Ece),e(Ece,jAo),e(X1,DAo),e(X1,fD),e(fD,GAo),e(X1,OAo),e(W,VAo),e(W,z1),e(z1,Cce),e(Cce,XAo),e(z1,zAo),e(z1,mD),e(mD,WAo),e(z1,QAo),e(W,HAo),e(W,W1),e(W1,wce),e(wce,UAo),e(W1,JAo),e(W1,gD),e(gD,YAo),e(W1,KAo),e(W,ZAo),e(W,Q1),e(Q1,Ace),e(Ace,e6o),e(Q1,o6o),e(Q1,hD),e(hD,r6o),e(Q1,t6o),e(W,a6o),e(W,H1),e(H1,yce),e(yce,n6o),e(H1,s6o),e(H1,pD),e(pD,l6o),e(H1,i6o),e(W,d6o),e(W,U1),e(U1,Lce),e(Lce,c6o),e(U1,f6o),e(U1,uD),e(uD,m6o),e(U1,g6o),e(W,h6o),e(W,J1),e(J1,xce),e(xce,p6o),e(J1,u6o),e(J1,_D),e(_D,_6o),e(J1,b6o),e(W,v6o),e(W,Y1),e(Y1,$ce),e($ce,F6o),e(Y1,T6o),e(Y1,bD),e(bD,M6o),e(Y1,E6o),e(W,C6o),e(W,K1),e(K1,kce),e(kce,w6o),e(K1,A6o),e(K1,vD),e(vD,y6o),e(K1,L6o),e(W,x6o),e(W,Z1),e(Z1,Sce),e(Sce,$6o),e(Z1,k6o),e(Z1,FD),e(FD,S6o),e(Z1,R6o),e(W,P6o),e(W,e8),e(e8,Rce),e(Rce,B6o),e(e8,I6o),e(e8,TD),e(TD,q6o),e(e8,N6o),e(W,j6o),e(W,o8),e(o8,Pce),e(Pce,D6o),e(o8,G6o),e(o8,MD),e(MD,O6o),e(o8,V6o),e(W,X6o),e(W,r8),e(r8,Bce),e(Bce,z6o),e(r8,W6o),e(r8,ED),e(ED,Q6o),e(r8,H6o),e(W,U6o),e(W,t8),e(t8,Ice),e(Ice,J6o),e(t8,Y6o),e(t8,CD),e(CD,K6o),e(t8,Z6o),e(W,eyo),e(W,a8),e(a8,qce),e(qce,oyo),e(a8,ryo),e(a8,wD),e(wD,tyo),e(a8,ayo),e(W,nyo),e(W,n8),e(n8,Nce),e(Nce,syo),e(n8,lyo),e(n8,AD),e(AD,iyo),e(n8,dyo),e(W,cyo),e(W,s8),e(s8,jce),e(jce,fyo),e(s8,myo),e(s8,yD),e(yD,gyo),e(s8,hyo),e(W,pyo),e(W,l8),e(l8,Dce),e(Dce,uyo),e(l8,_yo),e(l8,LD),e(LD,byo),e(l8,vyo),e(W,Fyo),e(W,i8),e(i8,Gce),e(Gce,Tyo),e(i8,Myo),e(i8,xD),e(xD,Eyo),e(i8,Cyo),e(W,wyo),e(W,d8),e(d8,Oce),e(Oce,Ayo),e(d8,yyo),e(d8,Vce),e(Vce,Lyo),e(d8,xyo),e(W,$yo),e(W,c8),e(c8,Xce),e(Xce,kyo),e(c8,Syo),e(c8,$D),e($D,Ryo),e(c8,Pyo),e(W,Byo),e(W,f8),e(f8,zce),e(zce,Iyo),e(f8,qyo),e(f8,kD),e(kD,Nyo),e(f8,jyo),e(W,Dyo),e(W,m8),e(m8,Wce),e(Wce,Gyo),e(m8,Oyo),e(m8,SD),e(SD,Vyo),e(m8,Xyo),e(W,zyo),e(W,g8),e(g8,Qce),e(Qce,Wyo),e(g8,Qyo),e(g8,RD),e(RD,Hyo),e(g8,Uyo),e(Ze,Jyo),e(Ze,h8),e(h8,Yyo),e(h8,Hce),e(Hce,Kyo),e(h8,Zyo),e(h8,Uce),e(Uce,eLo),e(Ze,oLo),M(p8,Ze,null),b(f,fNe,_),b(f,qi,_),e(qi,u8),e(u8,Jce),M(_6,Jce,null),e(qi,rLo),e(qi,Yce),e(Yce,tLo),b(f,mNe,_),b(f,So,_),M(b6,So,null),e(So,aLo),e(So,Ni),e(Ni,nLo),e(Ni,PD),e(PD,sLo),e(Ni,lLo),e(Ni,BD),e(BD,iLo),e(Ni,dLo),e(So,cLo),e(So,v6),e(v6,fLo),e(v6,Kce),e(Kce,mLo),e(v6,gLo),e(So,hLo),e(So,lt),M(F6,lt,null),e(lt,pLo),e(lt,Zce),e(Zce,uLo),e(lt,_Lo),e(lt,ji),e(ji,bLo),e(ji,efe),e(efe,vLo),e(ji,FLo),e(ji,ID),e(ID,TLo),e(ji,MLo),e(lt,ELo),M(_8,lt,null),e(So,CLo),e(So,eo),M(T6,eo,null),e(eo,wLo),e(eo,ofe),e(ofe,ALo),e(eo,yLo),e(eo,Sa),e(Sa,LLo),e(Sa,rfe),e(rfe,xLo),e(Sa,$Lo),e(Sa,tfe),e(tfe,kLo),e(Sa,SLo),e(Sa,afe),e(afe,RLo),e(Sa,PLo),e(eo,BLo),e(eo,ue),e(ue,b8),e(b8,nfe),e(nfe,ILo),e(b8,qLo),e(b8,qD),e(qD,NLo),e(b8,jLo),e(ue,DLo),e(ue,v8),e(v8,sfe),e(sfe,GLo),e(v8,OLo),e(v8,ND),e(ND,VLo),e(v8,XLo),e(ue,zLo),e(ue,F8),e(F8,lfe),e(lfe,WLo),e(F8,QLo),e(F8,jD),e(jD,HLo),e(F8,ULo),e(ue,JLo),e(ue,T8),e(T8,ife),e(ife,YLo),e(T8,KLo),e(T8,DD),e(DD,ZLo),e(T8,e9o),e(ue,o9o),e(ue,M8),e(M8,dfe),e(dfe,r9o),e(M8,t9o),e(M8,GD),e(GD,a9o),e(M8,n9o),e(ue,s9o),e(ue,E8),e(E8,cfe),e(cfe,l9o),e(E8,i9o),e(E8,OD),e(OD,d9o),e(E8,c9o),e(ue,f9o),e(ue,C8),e(C8,ffe),e(ffe,m9o),e(C8,g9o),e(C8,VD),e(VD,h9o),e(C8,p9o),e(ue,u9o),e(ue,w8),e(w8,mfe),e(mfe,_9o),e(w8,b9o),e(w8,XD),e(XD,v9o),e(w8,F9o),e(ue,T9o),e(ue,A8),e(A8,gfe),e(gfe,M9o),e(A8,E9o),e(A8,zD),e(zD,C9o),e(A8,w9o),e(ue,A9o),e(ue,y8),e(y8,hfe),e(hfe,y9o),e(y8,L9o),e(y8,WD),e(WD,x9o),e(y8,$9o),e(ue,k9o),e(ue,L8),e(L8,pfe),e(pfe,S9o),e(L8,R9o),e(L8,QD),e(QD,P9o),e(L8,B9o),e(ue,I9o),e(ue,x8),e(x8,ufe),e(ufe,q9o),e(x8,N9o),e(x8,HD),e(HD,j9o),e(x8,D9o),e(ue,G9o),e(ue,$8),e($8,_fe),e(_fe,O9o),e($8,V9o),e($8,UD),e(UD,X9o),e($8,z9o),e(ue,W9o),e(ue,k8),e(k8,bfe),e(bfe,Q9o),e(k8,H9o),e(k8,JD),e(JD,U9o),e(k8,J9o),e(ue,Y9o),e(ue,S8),e(S8,vfe),e(vfe,K9o),e(S8,Z9o),e(S8,YD),e(YD,exo),e(S8,oxo),e(ue,rxo),e(ue,R8),e(R8,Ffe),e(Ffe,txo),e(R8,axo),e(R8,KD),e(KD,nxo),e(R8,sxo),e(eo,lxo),e(eo,P8),e(P8,ixo),e(P8,Tfe),e(Tfe,dxo),e(P8,cxo),e(P8,Mfe),e(Mfe,fxo),e(eo,mxo),M(B8,eo,null),b(f,gNe,_),b(f,Di,_),e(Di,I8),e(I8,Efe),M(M6,Efe,null),e(Di,gxo),e(Di,Cfe),e(Cfe,hxo),b(f,hNe,_),b(f,Ro,_),M(E6,Ro,null),e(Ro,pxo),e(Ro,Gi),e(Gi,uxo),e(Gi,ZD),e(ZD,_xo),e(Gi,bxo),e(Gi,eG),e(eG,vxo),e(Gi,Fxo),e(Ro,Txo),e(Ro,C6),e(C6,Mxo),e(C6,wfe),e(wfe,Exo),e(C6,Cxo),e(Ro,wxo),e(Ro,it),M(w6,it,null),e(it,Axo),e(it,Afe),e(Afe,yxo),e(it,Lxo),e(it,Oi),e(Oi,xxo),e(Oi,yfe),e(yfe,$xo),e(Oi,kxo),e(Oi,oG),e(oG,Sxo),e(Oi,Rxo),e(it,Pxo),M(q8,it,null),e(Ro,Bxo),e(Ro,oo),M(A6,oo,null),e(oo,Ixo),e(oo,Lfe),e(Lfe,qxo),e(oo,Nxo),e(oo,Ra),e(Ra,jxo),e(Ra,xfe),e(xfe,Dxo),e(Ra,Gxo),e(Ra,$fe),e($fe,Oxo),e(Ra,Vxo),e(Ra,kfe),e(kfe,Xxo),e(Ra,zxo),e(oo,Wxo),e(oo,q),e(q,N8),e(N8,Sfe),e(Sfe,Qxo),e(N8,Hxo),e(N8,rG),e(rG,Uxo),e(N8,Jxo),e(q,Yxo),e(q,j8),e(j8,Rfe),e(Rfe,Kxo),e(j8,Zxo),e(j8,tG),e(tG,e$o),e(j8,o$o),e(q,r$o),e(q,D8),e(D8,Pfe),e(Pfe,t$o),e(D8,a$o),e(D8,aG),e(aG,n$o),e(D8,s$o),e(q,l$o),e(q,G8),e(G8,Bfe),e(Bfe,i$o),e(G8,d$o),e(G8,nG),e(nG,c$o),e(G8,f$o),e(q,m$o),e(q,O8),e(O8,Ife),e(Ife,g$o),e(O8,h$o),e(O8,sG),e(sG,p$o),e(O8,u$o),e(q,_$o),e(q,V8),e(V8,qfe),e(qfe,b$o),e(V8,v$o),e(V8,lG),e(lG,F$o),e(V8,T$o),e(q,M$o),e(q,X8),e(X8,Nfe),e(Nfe,E$o),e(X8,C$o),e(X8,iG),e(iG,w$o),e(X8,A$o),e(q,y$o),e(q,z8),e(z8,jfe),e(jfe,L$o),e(z8,x$o),e(z8,dG),e(dG,$$o),e(z8,k$o),e(q,S$o),e(q,W8),e(W8,Dfe),e(Dfe,R$o),e(W8,P$o),e(W8,cG),e(cG,B$o),e(W8,I$o),e(q,q$o),e(q,Q8),e(Q8,Gfe),e(Gfe,N$o),e(Q8,j$o),e(Q8,fG),e(fG,D$o),e(Q8,G$o),e(q,O$o),e(q,H8),e(H8,Ofe),e(Ofe,V$o),e(H8,X$o),e(H8,mG),e(mG,z$o),e(H8,W$o),e(q,Q$o),e(q,U8),e(U8,Vfe),e(Vfe,H$o),e(U8,U$o),e(U8,gG),e(gG,J$o),e(U8,Y$o),e(q,K$o),e(q,J8),e(J8,Xfe),e(Xfe,Z$o),e(J8,eko),e(J8,hG),e(hG,oko),e(J8,rko),e(q,tko),e(q,Y8),e(Y8,zfe),e(zfe,ako),e(Y8,nko),e(Y8,pG),e(pG,sko),e(Y8,lko),e(q,iko),e(q,K8),e(K8,Wfe),e(Wfe,dko),e(K8,cko),e(K8,uG),e(uG,fko),e(K8,mko),e(q,gko),e(q,Z8),e(Z8,Qfe),e(Qfe,hko),e(Z8,pko),e(Z8,_G),e(_G,uko),e(Z8,_ko),e(q,bko),e(q,eb),e(eb,Hfe),e(Hfe,vko),e(eb,Fko),e(eb,bG),e(bG,Tko),e(eb,Mko),e(q,Eko),e(q,ob),e(ob,Ufe),e(Ufe,Cko),e(ob,wko),e(ob,vG),e(vG,Ako),e(ob,yko),e(q,Lko),e(q,rb),e(rb,Jfe),e(Jfe,xko),e(rb,$ko),e(rb,FG),e(FG,kko),e(rb,Sko),e(q,Rko),e(q,tb),e(tb,Yfe),e(Yfe,Pko),e(tb,Bko),e(tb,TG),e(TG,Iko),e(tb,qko),e(q,Nko),e(q,ab),e(ab,Kfe),e(Kfe,jko),e(ab,Dko),e(ab,MG),e(MG,Gko),e(ab,Oko),e(q,Vko),e(q,nb),e(nb,Zfe),e(Zfe,Xko),e(nb,zko),e(nb,EG),e(EG,Wko),e(nb,Qko),e(q,Hko),e(q,sb),e(sb,eme),e(eme,Uko),e(sb,Jko),e(sb,CG),e(CG,Yko),e(sb,Kko),e(q,Zko),e(q,lb),e(lb,ome),e(ome,eSo),e(lb,oSo),e(lb,wG),e(wG,rSo),e(lb,tSo),e(q,aSo),e(q,ib),e(ib,rme),e(rme,nSo),e(ib,sSo),e(ib,AG),e(AG,lSo),e(ib,iSo),e(q,dSo),e(q,db),e(db,tme),e(tme,cSo),e(db,fSo),e(db,yG),e(yG,mSo),e(db,gSo),e(q,hSo),e(q,cb),e(cb,ame),e(ame,pSo),e(cb,uSo),e(cb,LG),e(LG,_So),e(cb,bSo),e(q,vSo),e(q,fb),e(fb,nme),e(nme,FSo),e(fb,TSo),e(fb,xG),e(xG,MSo),e(fb,ESo),e(q,CSo),e(q,mb),e(mb,sme),e(sme,wSo),e(mb,ASo),e(mb,$G),e($G,ySo),e(mb,LSo),e(q,xSo),e(q,gb),e(gb,lme),e(lme,$So),e(gb,kSo),e(gb,kG),e(kG,SSo),e(gb,RSo),e(q,PSo),e(q,hb),e(hb,ime),e(ime,BSo),e(hb,ISo),e(hb,SG),e(SG,qSo),e(hb,NSo),e(q,jSo),e(q,pb),e(pb,dme),e(dme,DSo),e(pb,GSo),e(pb,RG),e(RG,OSo),e(pb,VSo),e(q,XSo),e(q,ub),e(ub,cme),e(cme,zSo),e(ub,WSo),e(ub,PG),e(PG,QSo),e(ub,HSo),e(q,USo),e(q,_b),e(_b,fme),e(fme,JSo),e(_b,YSo),e(_b,BG),e(BG,KSo),e(_b,ZSo),e(q,eRo),e(q,bb),e(bb,mme),e(mme,oRo),e(bb,rRo),e(bb,IG),e(IG,tRo),e(bb,aRo),e(q,nRo),e(q,vb),e(vb,gme),e(gme,sRo),e(vb,lRo),e(vb,qG),e(qG,iRo),e(vb,dRo),e(q,cRo),e(q,Fb),e(Fb,hme),e(hme,fRo),e(Fb,mRo),e(Fb,NG),e(NG,gRo),e(Fb,hRo),e(q,pRo),e(q,Tb),e(Tb,pme),e(pme,uRo),e(Tb,_Ro),e(Tb,jG),e(jG,bRo),e(Tb,vRo),e(q,FRo),e(q,Mb),e(Mb,ume),e(ume,TRo),e(Mb,MRo),e(Mb,DG),e(DG,ERo),e(Mb,CRo),e(q,wRo),e(q,Eb),e(Eb,_me),e(_me,ARo),e(Eb,yRo),e(Eb,GG),e(GG,LRo),e(Eb,xRo),e(q,$Ro),e(q,Cb),e(Cb,bme),e(bme,kRo),e(Cb,SRo),e(Cb,OG),e(OG,RRo),e(Cb,PRo),e(q,BRo),e(q,wb),e(wb,vme),e(vme,IRo),e(wb,qRo),e(wb,VG),e(VG,NRo),e(wb,jRo),e(q,DRo),e(q,Ab),e(Ab,Fme),e(Fme,GRo),e(Ab,ORo),e(Ab,XG),e(XG,VRo),e(Ab,XRo),e(q,zRo),e(q,yb),e(yb,Tme),e(Tme,WRo),e(yb,QRo),e(yb,zG),e(zG,HRo),e(yb,URo),e(q,JRo),e(q,Lb),e(Lb,Mme),e(Mme,YRo),e(Lb,KRo),e(Lb,WG),e(WG,ZRo),e(Lb,ePo),e(q,oPo),e(q,xb),e(xb,Eme),e(Eme,rPo),e(xb,tPo),e(xb,QG),e(QG,aPo),e(xb,nPo),e(q,sPo),e(q,$b),e($b,Cme),e(Cme,lPo),e($b,iPo),e($b,HG),e(HG,dPo),e($b,cPo),e(oo,fPo),e(oo,kb),e(kb,mPo),e(kb,wme),e(wme,gPo),e(kb,hPo),e(kb,Ame),e(Ame,pPo),e(oo,uPo),M(Sb,oo,null),b(f,pNe,_),b(f,Vi,_),e(Vi,Rb),e(Rb,yme),M(y6,yme,null),e(Vi,_Po),e(Vi,Lme),e(Lme,bPo),b(f,uNe,_),b(f,Po,_),M(L6,Po,null),e(Po,vPo),e(Po,Xi),e(Xi,FPo),e(Xi,UG),e(UG,TPo),e(Xi,MPo),e(Xi,JG),e(JG,EPo),e(Xi,CPo),e(Po,wPo),e(Po,x6),e(x6,APo),e(x6,xme),e(xme,yPo),e(x6,LPo),e(Po,xPo),e(Po,dt),M($6,dt,null),e(dt,$Po),e(dt,$me),e($me,kPo),e(dt,SPo),e(dt,zi),e(zi,RPo),e(zi,kme),e(kme,PPo),e(zi,BPo),e(zi,YG),e(YG,IPo),e(zi,qPo),e(dt,NPo),M(Pb,dt,null),e(Po,jPo),e(Po,ro),M(k6,ro,null),e(ro,DPo),e(ro,Sme),e(Sme,GPo),e(ro,OPo),e(ro,Pa),e(Pa,VPo),e(Pa,Rme),e(Rme,XPo),e(Pa,zPo),e(Pa,Pme),e(Pme,WPo),e(Pa,QPo),e(Pa,Bme),e(Bme,HPo),e(Pa,UPo),e(ro,JPo),e(ro,Y),e(Y,Bb),e(Bb,Ime),e(Ime,YPo),e(Bb,KPo),e(Bb,KG),e(KG,ZPo),e(Bb,eBo),e(Y,oBo),e(Y,Ib),e(Ib,qme),e(qme,rBo),e(Ib,tBo),e(Ib,ZG),e(ZG,aBo),e(Ib,nBo),e(Y,sBo),e(Y,qb),e(qb,Nme),e(Nme,lBo),e(qb,iBo),e(qb,eO),e(eO,dBo),e(qb,cBo),e(Y,fBo),e(Y,Nb),e(Nb,jme),e(jme,mBo),e(Nb,gBo),e(Nb,oO),e(oO,hBo),e(Nb,pBo),e(Y,uBo),e(Y,jb),e(jb,Dme),e(Dme,_Bo),e(jb,bBo),e(jb,rO),e(rO,vBo),e(jb,FBo),e(Y,TBo),e(Y,Db),e(Db,Gme),e(Gme,MBo),e(Db,EBo),e(Db,tO),e(tO,CBo),e(Db,wBo),e(Y,ABo),e(Y,Gb),e(Gb,Ome),e(Ome,yBo),e(Gb,LBo),e(Gb,aO),e(aO,xBo),e(Gb,$Bo),e(Y,kBo),e(Y,Ob),e(Ob,Vme),e(Vme,SBo),e(Ob,RBo),e(Ob,nO),e(nO,PBo),e(Ob,BBo),e(Y,IBo),e(Y,Vb),e(Vb,Xme),e(Xme,qBo),e(Vb,NBo),e(Vb,sO),e(sO,jBo),e(Vb,DBo),e(Y,GBo),e(Y,Xb),e(Xb,zme),e(zme,OBo),e(Xb,VBo),e(Xb,lO),e(lO,XBo),e(Xb,zBo),e(Y,WBo),e(Y,zb),e(zb,Wme),e(Wme,QBo),e(zb,HBo),e(zb,iO),e(iO,UBo),e(zb,JBo),e(Y,YBo),e(Y,Wb),e(Wb,Qme),e(Qme,KBo),e(Wb,ZBo),e(Wb,dO),e(dO,eIo),e(Wb,oIo),e(Y,rIo),e(Y,Qb),e(Qb,Hme),e(Hme,tIo),e(Qb,aIo),e(Qb,cO),e(cO,nIo),e(Qb,sIo),e(Y,lIo),e(Y,Hb),e(Hb,Ume),e(Ume,iIo),e(Hb,dIo),e(Hb,fO),e(fO,cIo),e(Hb,fIo),e(Y,mIo),e(Y,Ub),e(Ub,Jme),e(Jme,gIo),e(Ub,hIo),e(Ub,mO),e(mO,pIo),e(Ub,uIo),e(Y,_Io),e(Y,Jb),e(Jb,Yme),e(Yme,bIo),e(Jb,vIo),e(Jb,gO),e(gO,FIo),e(Jb,TIo),e(Y,MIo),e(Y,Yb),e(Yb,Kme),e(Kme,EIo),e(Yb,CIo),e(Yb,hO),e(hO,wIo),e(Yb,AIo),e(Y,yIo),e(Y,Kb),e(Kb,Zme),e(Zme,LIo),e(Kb,xIo),e(Kb,pO),e(pO,$Io),e(Kb,kIo),e(Y,SIo),e(Y,Zb),e(Zb,ege),e(ege,RIo),e(Zb,PIo),e(Zb,uO),e(uO,BIo),e(Zb,IIo),e(Y,qIo),e(Y,e2),e(e2,oge),e(oge,NIo),e(e2,jIo),e(e2,_O),e(_O,DIo),e(e2,GIo),e(Y,OIo),e(Y,o2),e(o2,rge),e(rge,VIo),e(o2,XIo),e(o2,bO),e(bO,zIo),e(o2,WIo),e(Y,QIo),e(Y,r2),e(r2,tge),e(tge,HIo),e(r2,UIo),e(r2,vO),e(vO,JIo),e(r2,YIo),e(Y,KIo),e(Y,t2),e(t2,age),e(age,ZIo),e(t2,eqo),e(t2,FO),e(FO,oqo),e(t2,rqo),e(Y,tqo),e(Y,a2),e(a2,nge),e(nge,aqo),e(a2,nqo),e(a2,TO),e(TO,sqo),e(a2,lqo),e(Y,iqo),e(Y,n2),e(n2,sge),e(sge,dqo),e(n2,cqo),e(n2,MO),e(MO,fqo),e(n2,mqo),e(Y,gqo),e(Y,s2),e(s2,lge),e(lge,hqo),e(s2,pqo),e(s2,EO),e(EO,uqo),e(s2,_qo),e(Y,bqo),e(Y,l2),e(l2,ige),e(ige,vqo),e(l2,Fqo),e(l2,CO),e(CO,Tqo),e(l2,Mqo),e(Y,Eqo),e(Y,i2),e(i2,dge),e(dge,Cqo),e(i2,wqo),e(i2,wO),e(wO,Aqo),e(i2,yqo),e(Y,Lqo),e(Y,d2),e(d2,cge),e(cge,xqo),e(d2,$qo),e(d2,AO),e(AO,kqo),e(d2,Sqo),e(ro,Rqo),e(ro,c2),e(c2,Pqo),e(c2,fge),e(fge,Bqo),e(c2,Iqo),e(c2,mge),e(mge,qqo),e(ro,Nqo),M(f2,ro,null),b(f,_Ne,_),b(f,Wi,_),e(Wi,m2),e(m2,gge),M(S6,gge,null),e(Wi,jqo),e(Wi,hge),e(hge,Dqo),b(f,bNe,_),b(f,Bo,_),M(R6,Bo,null),e(Bo,Gqo),e(Bo,Qi),e(Qi,Oqo),e(Qi,yO),e(yO,Vqo),e(Qi,Xqo),e(Qi,LO),e(LO,zqo),e(Qi,Wqo),e(Bo,Qqo),e(Bo,P6),e(P6,Hqo),e(P6,pge),e(pge,Uqo),e(P6,Jqo),e(Bo,Yqo),e(Bo,ct),M(B6,ct,null),e(ct,Kqo),e(ct,uge),e(uge,Zqo),e(ct,eNo),e(ct,Hi),e(Hi,oNo),e(Hi,_ge),e(_ge,rNo),e(Hi,tNo),e(Hi,xO),e(xO,aNo),e(Hi,nNo),e(ct,sNo),M(g2,ct,null),e(Bo,lNo),e(Bo,to),M(I6,to,null),e(to,iNo),e(to,bge),e(bge,dNo),e(to,cNo),e(to,Ba),e(Ba,fNo),e(Ba,vge),e(vge,mNo),e(Ba,gNo),e(Ba,Fge),e(Fge,hNo),e(Ba,pNo),e(Ba,Tge),e(Tge,uNo),e(Ba,_No),e(to,bNo),e(to,Yr),e(Yr,h2),e(h2,Mge),e(Mge,vNo),e(h2,FNo),e(h2,$O),e($O,TNo),e(h2,MNo),e(Yr,ENo),e(Yr,p2),e(p2,Ege),e(Ege,CNo),e(p2,wNo),e(p2,kO),e(kO,ANo),e(p2,yNo),e(Yr,LNo),e(Yr,u2),e(u2,Cge),e(Cge,xNo),e(u2,$No),e(u2,SO),e(SO,kNo),e(u2,SNo),e(Yr,RNo),e(Yr,_2),e(_2,wge),e(wge,PNo),e(_2,BNo),e(_2,RO),e(RO,INo),e(_2,qNo),e(Yr,NNo),e(Yr,b2),e(b2,Age),e(Age,jNo),e(b2,DNo),e(b2,PO),e(PO,GNo),e(b2,ONo),e(to,VNo),e(to,v2),e(v2,XNo),e(v2,yge),e(yge,zNo),e(v2,WNo),e(v2,Lge),e(Lge,QNo),e(to,HNo),M(F2,to,null),b(f,vNe,_),b(f,Ui,_),e(Ui,T2),e(T2,xge),M(q6,xge,null),e(Ui,UNo),e(Ui,$ge),e($ge,JNo),b(f,FNe,_),b(f,Io,_),M(N6,Io,null),e(Io,YNo),e(Io,Ji),e(Ji,KNo),e(Ji,BO),e(BO,ZNo),e(Ji,ejo),e(Ji,IO),e(IO,ojo),e(Ji,rjo),e(Io,tjo),e(Io,j6),e(j6,ajo),e(j6,kge),e(kge,njo),e(j6,sjo),e(Io,ljo),e(Io,ft),M(D6,ft,null),e(ft,ijo),e(ft,Sge),e(Sge,djo),e(ft,cjo),e(ft,Yi),e(Yi,fjo),e(Yi,Rge),e(Rge,mjo),e(Yi,gjo),e(Yi,qO),e(qO,hjo),e(Yi,pjo),e(ft,ujo),M(M2,ft,null),e(Io,_jo),e(Io,ao),M(G6,ao,null),e(ao,bjo),e(ao,Pge),e(Pge,vjo),e(ao,Fjo),e(ao,Ia),e(Ia,Tjo),e(Ia,Bge),e(Bge,Mjo),e(Ia,Ejo),e(Ia,Ige),e(Ige,Cjo),e(Ia,wjo),e(Ia,qge),e(qge,Ajo),e(Ia,yjo),e(ao,Ljo),e(ao,H),e(H,E2),e(E2,Nge),e(Nge,xjo),e(E2,$jo),e(E2,NO),e(NO,kjo),e(E2,Sjo),e(H,Rjo),e(H,C2),e(C2,jge),e(jge,Pjo),e(C2,Bjo),e(C2,jO),e(jO,Ijo),e(C2,qjo),e(H,Njo),e(H,w2),e(w2,Dge),e(Dge,jjo),e(w2,Djo),e(w2,DO),e(DO,Gjo),e(w2,Ojo),e(H,Vjo),e(H,A2),e(A2,Gge),e(Gge,Xjo),e(A2,zjo),e(A2,GO),e(GO,Wjo),e(A2,Qjo),e(H,Hjo),e(H,y2),e(y2,Oge),e(Oge,Ujo),e(y2,Jjo),e(y2,OO),e(OO,Yjo),e(y2,Kjo),e(H,Zjo),e(H,L2),e(L2,Vge),e(Vge,eDo),e(L2,oDo),e(L2,VO),e(VO,rDo),e(L2,tDo),e(H,aDo),e(H,x2),e(x2,Xge),e(Xge,nDo),e(x2,sDo),e(x2,XO),e(XO,lDo),e(x2,iDo),e(H,dDo),e(H,$2),e($2,zge),e(zge,cDo),e($2,fDo),e($2,zO),e(zO,mDo),e($2,gDo),e(H,hDo),e(H,k2),e(k2,Wge),e(Wge,pDo),e(k2,uDo),e(k2,WO),e(WO,_Do),e(k2,bDo),e(H,vDo),e(H,S2),e(S2,Qge),e(Qge,FDo),e(S2,TDo),e(S2,QO),e(QO,MDo),e(S2,EDo),e(H,CDo),e(H,R2),e(R2,Hge),e(Hge,wDo),e(R2,ADo),e(R2,HO),e(HO,yDo),e(R2,LDo),e(H,xDo),e(H,P2),e(P2,Uge),e(Uge,$Do),e(P2,kDo),e(P2,UO),e(UO,SDo),e(P2,RDo),e(H,PDo),e(H,B2),e(B2,Jge),e(Jge,BDo),e(B2,IDo),e(B2,JO),e(JO,qDo),e(B2,NDo),e(H,jDo),e(H,I2),e(I2,Yge),e(Yge,DDo),e(I2,GDo),e(I2,YO),e(YO,ODo),e(I2,VDo),e(H,XDo),e(H,q2),e(q2,Kge),e(Kge,zDo),e(q2,WDo),e(q2,KO),e(KO,QDo),e(q2,HDo),e(H,UDo),e(H,N2),e(N2,Zge),e(Zge,JDo),e(N2,YDo),e(N2,ZO),e(ZO,KDo),e(N2,ZDo),e(H,eGo),e(H,j2),e(j2,ehe),e(ehe,oGo),e(j2,rGo),e(j2,eV),e(eV,tGo),e(j2,aGo),e(H,nGo),e(H,D2),e(D2,ohe),e(ohe,sGo),e(D2,lGo),e(D2,oV),e(oV,iGo),e(D2,dGo),e(H,cGo),e(H,G2),e(G2,rhe),e(rhe,fGo),e(G2,mGo),e(G2,rV),e(rV,gGo),e(G2,hGo),e(H,pGo),e(H,O2),e(O2,the),e(the,uGo),e(O2,_Go),e(O2,tV),e(tV,bGo),e(O2,vGo),e(H,FGo),e(H,V2),e(V2,ahe),e(ahe,TGo),e(V2,MGo),e(V2,aV),e(aV,EGo),e(V2,CGo),e(H,wGo),e(H,X2),e(X2,nhe),e(nhe,AGo),e(X2,yGo),e(X2,nV),e(nV,LGo),e(X2,xGo),e(H,$Go),e(H,z2),e(z2,she),e(she,kGo),e(z2,SGo),e(z2,sV),e(sV,RGo),e(z2,PGo),e(H,BGo),e(H,W2),e(W2,lhe),e(lhe,IGo),e(W2,qGo),e(W2,lV),e(lV,NGo),e(W2,jGo),e(H,DGo),e(H,Q2),e(Q2,ihe),e(ihe,GGo),e(Q2,OGo),e(Q2,iV),e(iV,VGo),e(Q2,XGo),e(H,zGo),e(H,H2),e(H2,dhe),e(dhe,WGo),e(H2,QGo),e(H2,dV),e(dV,HGo),e(H2,UGo),e(H,JGo),e(H,U2),e(U2,che),e(che,YGo),e(U2,KGo),e(U2,cV),e(cV,ZGo),e(U2,eOo),e(H,oOo),e(H,J2),e(J2,fhe),e(fhe,rOo),e(J2,tOo),e(J2,fV),e(fV,aOo),e(J2,nOo),e(H,sOo),e(H,Y2),e(Y2,mhe),e(mhe,lOo),e(Y2,iOo),e(Y2,mV),e(mV,dOo),e(Y2,cOo),e(H,fOo),e(H,K2),e(K2,ghe),e(ghe,mOo),e(K2,gOo),e(K2,gV),e(gV,hOo),e(K2,pOo),e(H,uOo),e(H,Z2),e(Z2,hhe),e(hhe,_Oo),e(Z2,bOo),e(Z2,hV),e(hV,vOo),e(Z2,FOo),e(H,TOo),e(H,ev),e(ev,phe),e(phe,MOo),e(ev,EOo),e(ev,pV),e(pV,COo),e(ev,wOo),e(H,AOo),e(H,ov),e(ov,uhe),e(uhe,yOo),e(ov,LOo),e(ov,uV),e(uV,xOo),e(ov,$Oo),e(H,kOo),e(H,rv),e(rv,_he),e(_he,SOo),e(rv,ROo),e(rv,_V),e(_V,POo),e(rv,BOo),e(ao,IOo),e(ao,tv),e(tv,qOo),e(tv,bhe),e(bhe,NOo),e(tv,jOo),e(tv,vhe),e(vhe,DOo),e(ao,GOo),M(av,ao,null),b(f,TNe,_),b(f,Ki,_),e(Ki,nv),e(nv,Fhe),M(O6,Fhe,null),e(Ki,OOo),e(Ki,The),e(The,VOo),b(f,MNe,_),b(f,qo,_),M(V6,qo,null),e(qo,XOo),e(qo,Zi),e(Zi,zOo),e(Zi,bV),e(bV,WOo),e(Zi,QOo),e(Zi,vV),e(vV,HOo),e(Zi,UOo),e(qo,JOo),e(qo,X6),e(X6,YOo),e(X6,Mhe),e(Mhe,KOo),e(X6,ZOo),e(qo,eVo),e(qo,mt),M(z6,mt,null),e(mt,oVo),e(mt,Ehe),e(Ehe,rVo),e(mt,tVo),e(mt,ed),e(ed,aVo),e(ed,Che),e(Che,nVo),e(ed,sVo),e(ed,FV),e(FV,lVo),e(ed,iVo),e(mt,dVo),M(sv,mt,null),e(qo,cVo),e(qo,no),M(W6,no,null),e(no,fVo),e(no,whe),e(whe,mVo),e(no,gVo),e(no,qa),e(qa,hVo),e(qa,Ahe),e(Ahe,pVo),e(qa,uVo),e(qa,yhe),e(yhe,_Vo),e(qa,bVo),e(qa,Lhe),e(Lhe,vVo),e(qa,FVo),e(no,TVo),e(no,V),e(V,lv),e(lv,xhe),e(xhe,MVo),e(lv,EVo),e(lv,TV),e(TV,CVo),e(lv,wVo),e(V,AVo),e(V,iv),e(iv,$he),e($he,yVo),e(iv,LVo),e(iv,MV),e(MV,xVo),e(iv,$Vo),e(V,kVo),e(V,dv),e(dv,khe),e(khe,SVo),e(dv,RVo),e(dv,EV),e(EV,PVo),e(dv,BVo),e(V,IVo),e(V,cv),e(cv,She),e(She,qVo),e(cv,NVo),e(cv,CV),e(CV,jVo),e(cv,DVo),e(V,GVo),e(V,fv),e(fv,Rhe),e(Rhe,OVo),e(fv,VVo),e(fv,wV),e(wV,XVo),e(fv,zVo),e(V,WVo),e(V,mv),e(mv,Phe),e(Phe,QVo),e(mv,HVo),e(mv,AV),e(AV,UVo),e(mv,JVo),e(V,YVo),e(V,gv),e(gv,Bhe),e(Bhe,KVo),e(gv,ZVo),e(gv,yV),e(yV,eXo),e(gv,oXo),e(V,rXo),e(V,hv),e(hv,Ihe),e(Ihe,tXo),e(hv,aXo),e(hv,LV),e(LV,nXo),e(hv,sXo),e(V,lXo),e(V,pv),e(pv,qhe),e(qhe,iXo),e(pv,dXo),e(pv,xV),e(xV,cXo),e(pv,fXo),e(V,mXo),e(V,uv),e(uv,Nhe),e(Nhe,gXo),e(uv,hXo),e(uv,$V),e($V,pXo),e(uv,uXo),e(V,_Xo),e(V,_v),e(_v,jhe),e(jhe,bXo),e(_v,vXo),e(_v,kV),e(kV,FXo),e(_v,TXo),e(V,MXo),e(V,bv),e(bv,Dhe),e(Dhe,EXo),e(bv,CXo),e(bv,SV),e(SV,wXo),e(bv,AXo),e(V,yXo),e(V,vv),e(vv,Ghe),e(Ghe,LXo),e(vv,xXo),e(vv,RV),e(RV,$Xo),e(vv,kXo),e(V,SXo),e(V,Fv),e(Fv,Ohe),e(Ohe,RXo),e(Fv,PXo),e(Fv,PV),e(PV,BXo),e(Fv,IXo),e(V,qXo),e(V,Tv),e(Tv,Vhe),e(Vhe,NXo),e(Tv,jXo),e(Tv,BV),e(BV,DXo),e(Tv,GXo),e(V,OXo),e(V,Mv),e(Mv,Xhe),e(Xhe,VXo),e(Mv,XXo),e(Mv,IV),e(IV,zXo),e(Mv,WXo),e(V,QXo),e(V,Ev),e(Ev,zhe),e(zhe,HXo),e(Ev,UXo),e(Ev,qV),e(qV,JXo),e(Ev,YXo),e(V,KXo),e(V,Cv),e(Cv,Whe),e(Whe,ZXo),e(Cv,ezo),e(Cv,NV),e(NV,ozo),e(Cv,rzo),e(V,tzo),e(V,wv),e(wv,Qhe),e(Qhe,azo),e(wv,nzo),e(wv,jV),e(jV,szo),e(wv,lzo),e(V,izo),e(V,Av),e(Av,Hhe),e(Hhe,dzo),e(Av,czo),e(Av,DV),e(DV,fzo),e(Av,mzo),e(V,gzo),e(V,yv),e(yv,Uhe),e(Uhe,hzo),e(yv,pzo),e(yv,GV),e(GV,uzo),e(yv,_zo),e(V,bzo),e(V,Lv),e(Lv,Jhe),e(Jhe,vzo),e(Lv,Fzo),e(Lv,OV),e(OV,Tzo),e(Lv,Mzo),e(V,Ezo),e(V,xv),e(xv,Yhe),e(Yhe,Czo),e(xv,wzo),e(xv,VV),e(VV,Azo),e(xv,yzo),e(V,Lzo),e(V,$v),e($v,Khe),e(Khe,xzo),e($v,$zo),e($v,XV),e(XV,kzo),e($v,Szo),e(V,Rzo),e(V,kv),e(kv,Zhe),e(Zhe,Pzo),e(kv,Bzo),e(kv,zV),e(zV,Izo),e(kv,qzo),e(V,Nzo),e(V,Sv),e(Sv,epe),e(epe,jzo),e(Sv,Dzo),e(Sv,WV),e(WV,Gzo),e(Sv,Ozo),e(V,Vzo),e(V,Rv),e(Rv,ope),e(ope,Xzo),e(Rv,zzo),e(Rv,QV),e(QV,Wzo),e(Rv,Qzo),e(V,Hzo),e(V,Pv),e(Pv,rpe),e(rpe,Uzo),e(Pv,Jzo),e(Pv,HV),e(HV,Yzo),e(Pv,Kzo),e(V,Zzo),e(V,Bv),e(Bv,tpe),e(tpe,eWo),e(Bv,oWo),e(Bv,UV),e(UV,rWo),e(Bv,tWo),e(V,aWo),e(V,Iv),e(Iv,ape),e(ape,nWo),e(Iv,sWo),e(Iv,JV),e(JV,lWo),e(Iv,iWo),e(V,dWo),e(V,qv),e(qv,npe),e(npe,cWo),e(qv,fWo),e(qv,YV),e(YV,mWo),e(qv,gWo),e(V,hWo),e(V,Nv),e(Nv,spe),e(spe,pWo),e(Nv,uWo),e(Nv,KV),e(KV,_Wo),e(Nv,bWo),e(V,vWo),e(V,jv),e(jv,lpe),e(lpe,FWo),e(jv,TWo),e(jv,ZV),e(ZV,MWo),e(jv,EWo),e(V,CWo),e(V,Dv),e(Dv,ipe),e(ipe,wWo),e(Dv,AWo),e(Dv,eX),e(eX,yWo),e(Dv,LWo),e(V,xWo),e(V,Gv),e(Gv,dpe),e(dpe,$Wo),e(Gv,kWo),e(Gv,oX),e(oX,SWo),e(Gv,RWo),e(V,PWo),e(V,Ov),e(Ov,cpe),e(cpe,BWo),e(Ov,IWo),e(Ov,rX),e(rX,qWo),e(Ov,NWo),e(V,jWo),e(V,Vv),e(Vv,fpe),e(fpe,DWo),e(Vv,GWo),e(Vv,tX),e(tX,OWo),e(Vv,VWo),e(V,XWo),e(V,Xv),e(Xv,mpe),e(mpe,zWo),e(Xv,WWo),e(Xv,aX),e(aX,QWo),e(Xv,HWo),e(V,UWo),e(V,zv),e(zv,gpe),e(gpe,JWo),e(zv,YWo),e(zv,nX),e(nX,KWo),e(zv,ZWo),e(V,eQo),e(V,Wv),e(Wv,hpe),e(hpe,oQo),e(Wv,rQo),e(Wv,sX),e(sX,tQo),e(Wv,aQo),e(no,nQo),e(no,Qv),e(Qv,sQo),e(Qv,ppe),e(ppe,lQo),e(Qv,iQo),e(Qv,upe),e(upe,dQo),e(no,cQo),M(Hv,no,null),b(f,ENe,_),b(f,od,_),e(od,Uv),e(Uv,_pe),M(Q6,_pe,null),e(od,fQo),e(od,bpe),e(bpe,mQo),b(f,CNe,_),b(f,No,_),M(H6,No,null),e(No,gQo),e(No,rd),e(rd,hQo),e(rd,lX),e(lX,pQo),e(rd,uQo),e(rd,iX),e(iX,_Qo),e(rd,bQo),e(No,vQo),e(No,U6),e(U6,FQo),e(U6,vpe),e(vpe,TQo),e(U6,MQo),e(No,EQo),e(No,gt),M(J6,gt,null),e(gt,CQo),e(gt,Fpe),e(Fpe,wQo),e(gt,AQo),e(gt,td),e(td,yQo),e(td,Tpe),e(Tpe,LQo),e(td,xQo),e(td,dX),e(dX,$Qo),e(td,kQo),e(gt,SQo),M(Jv,gt,null),e(No,RQo),e(No,so),M(Y6,so,null),e(so,PQo),e(so,Mpe),e(Mpe,BQo),e(so,IQo),e(so,Na),e(Na,qQo),e(Na,Epe),e(Epe,NQo),e(Na,jQo),e(Na,Cpe),e(Cpe,DQo),e(Na,GQo),e(Na,wpe),e(wpe,OQo),e(Na,VQo),e(so,XQo),e(so,Ape),e(Ape,Yv),e(Yv,ype),e(ype,zQo),e(Yv,WQo),e(Yv,cX),e(cX,QQo),e(Yv,HQo),e(so,UQo),e(so,Kv),e(Kv,JQo),e(Kv,Lpe),e(Lpe,YQo),e(Kv,KQo),e(Kv,xpe),e(xpe,ZQo),e(so,eHo),M(Zv,so,null),b(f,wNe,_),b(f,ad,_),e(ad,e3),e(e3,$pe),M(K6,$pe,null),e(ad,oHo),e(ad,kpe),e(kpe,rHo),b(f,ANe,_),b(f,jo,_),M(Z6,jo,null),e(jo,tHo),e(jo,nd),e(nd,aHo),e(nd,fX),e(fX,nHo),e(nd,sHo),e(nd,mX),e(mX,lHo),e(nd,iHo),e(jo,dHo),e(jo,ey),e(ey,cHo),e(ey,Spe),e(Spe,fHo),e(ey,mHo),e(jo,gHo),e(jo,ht),M(oy,ht,null),e(ht,hHo),e(ht,Rpe),e(Rpe,pHo),e(ht,uHo),e(ht,sd),e(sd,_Ho),e(sd,Ppe),e(Ppe,bHo),e(sd,vHo),e(sd,gX),e(gX,FHo),e(sd,THo),e(ht,MHo),M(o3,ht,null),e(jo,EHo),e(jo,lo),M(ry,lo,null),e(lo,CHo),e(lo,Bpe),e(Bpe,wHo),e(lo,AHo),e(lo,ja),e(ja,yHo),e(ja,Ipe),e(Ipe,LHo),e(ja,xHo),e(ja,qpe),e(qpe,$Ho),e(ja,kHo),e(ja,Npe),e(Npe,SHo),e(ja,RHo),e(lo,PHo),e(lo,Fe),e(Fe,r3),e(r3,jpe),e(jpe,BHo),e(r3,IHo),e(r3,hX),e(hX,qHo),e(r3,NHo),e(Fe,jHo),e(Fe,t3),e(t3,Dpe),e(Dpe,DHo),e(t3,GHo),e(t3,pX),e(pX,OHo),e(t3,VHo),e(Fe,XHo),e(Fe,a3),e(a3,Gpe),e(Gpe,zHo),e(a3,WHo),e(a3,uX),e(uX,QHo),e(a3,HHo),e(Fe,UHo),e(Fe,n3),e(n3,Ope),e(Ope,JHo),e(n3,YHo),e(n3,_X),e(_X,KHo),e(n3,ZHo),e(Fe,eUo),e(Fe,Bs),e(Bs,Vpe),e(Vpe,oUo),e(Bs,rUo),e(Bs,bX),e(bX,tUo),e(Bs,aUo),e(Bs,vX),e(vX,nUo),e(Bs,sUo),e(Fe,lUo),e(Fe,s3),e(s3,Xpe),e(Xpe,iUo),e(s3,dUo),e(s3,FX),e(FX,cUo),e(s3,fUo),e(Fe,mUo),e(Fe,pt),e(pt,zpe),e(zpe,gUo),e(pt,hUo),e(pt,TX),e(TX,pUo),e(pt,uUo),e(pt,MX),e(MX,_Uo),e(pt,bUo),e(pt,EX),e(EX,vUo),e(pt,FUo),e(Fe,TUo),e(Fe,l3),e(l3,Wpe),e(Wpe,MUo),e(l3,EUo),e(l3,CX),e(CX,CUo),e(l3,wUo),e(Fe,AUo),e(Fe,i3),e(i3,Qpe),e(Qpe,yUo),e(i3,LUo),e(i3,wX),e(wX,xUo),e(i3,$Uo),e(Fe,kUo),e(Fe,d3),e(d3,Hpe),e(Hpe,SUo),e(d3,RUo),e(d3,AX),e(AX,PUo),e(d3,BUo),e(Fe,IUo),e(Fe,c3),e(c3,Upe),e(Upe,qUo),e(c3,NUo),e(c3,yX),e(yX,jUo),e(c3,DUo),e(Fe,GUo),e(Fe,f3),e(f3,Jpe),e(Jpe,OUo),e(f3,VUo),e(f3,LX),e(LX,XUo),e(f3,zUo),e(Fe,WUo),e(Fe,m3),e(m3,Ype),e(Ype,QUo),e(m3,HUo),e(m3,xX),e(xX,UUo),e(m3,JUo),e(Fe,YUo),e(Fe,g3),e(g3,Kpe),e(Kpe,KUo),e(g3,ZUo),e(g3,$X),e($X,eJo),e(g3,oJo),e(lo,rJo),e(lo,h3),e(h3,tJo),e(h3,Zpe),e(Zpe,aJo),e(h3,nJo),e(h3,eue),e(eue,sJo),e(lo,lJo),M(p3,lo,null),b(f,yNe,_),b(f,ld,_),e(ld,u3),e(u3,oue),M(ty,oue,null),e(ld,iJo),e(ld,rue),e(rue,dJo),b(f,LNe,_),b(f,Do,_),M(ay,Do,null),e(Do,cJo),e(Do,id),e(id,fJo),e(id,kX),e(kX,mJo),e(id,gJo),e(id,SX),e(SX,hJo),e(id,pJo),e(Do,uJo),e(Do,ny),e(ny,_Jo),e(ny,tue),e(tue,bJo),e(ny,vJo),e(Do,FJo),e(Do,ut),M(sy,ut,null),e(ut,TJo),e(ut,aue),e(aue,MJo),e(ut,EJo),e(ut,dd),e(dd,CJo),e(dd,nue),e(nue,wJo),e(dd,AJo),e(dd,RX),e(RX,yJo),e(dd,LJo),e(ut,xJo),M(_3,ut,null),e(Do,$Jo),e(Do,io),M(ly,io,null),e(io,kJo),e(io,sue),e(sue,SJo),e(io,RJo),e(io,Da),e(Da,PJo),e(Da,lue),e(lue,BJo),e(Da,IJo),e(Da,iue),e(iue,qJo),e(Da,NJo),e(Da,due),e(due,jJo),e(Da,DJo),e(io,GJo),e(io,cue),e(cue,b3),e(b3,fue),e(fue,OJo),e(b3,VJo),e(b3,PX),e(PX,XJo),e(b3,zJo),e(io,WJo),e(io,v3),e(v3,QJo),e(v3,mue),e(mue,HJo),e(v3,UJo),e(v3,gue),e(gue,JJo),e(io,YJo),M(F3,io,null),b(f,xNe,_),b(f,cd,_),e(cd,T3),e(T3,hue),M(iy,hue,null),e(cd,KJo),e(cd,pue),e(pue,ZJo),b(f,$Ne,_),b(f,Go,_),M(dy,Go,null),e(Go,eYo),e(Go,fd),e(fd,oYo),e(fd,BX),e(BX,rYo),e(fd,tYo),e(fd,IX),e(IX,aYo),e(fd,nYo),e(Go,sYo),e(Go,cy),e(cy,lYo),e(cy,uue),e(uue,iYo),e(cy,dYo),e(Go,cYo),e(Go,_t),M(fy,_t,null),e(_t,fYo),e(_t,_ue),e(_ue,mYo),e(_t,gYo),e(_t,md),e(md,hYo),e(md,bue),e(bue,pYo),e(md,uYo),e(md,qX),e(qX,_Yo),e(md,bYo),e(_t,vYo),M(M3,_t,null),e(Go,FYo),e(Go,co),M(my,co,null),e(co,TYo),e(co,vue),e(vue,MYo),e(co,EYo),e(co,Ga),e(Ga,CYo),e(Ga,Fue),e(Fue,wYo),e(Ga,AYo),e(Ga,Tue),e(Tue,yYo),e(Ga,LYo),e(Ga,Mue),e(Mue,xYo),e(Ga,$Yo),e(co,kYo),e(co,Se),e(Se,E3),e(E3,Eue),e(Eue,SYo),e(E3,RYo),e(E3,NX),e(NX,PYo),e(E3,BYo),e(Se,IYo),e(Se,C3),e(C3,Cue),e(Cue,qYo),e(C3,NYo),e(C3,jX),e(jX,jYo),e(C3,DYo),e(Se,GYo),e(Se,w3),e(w3,wue),e(wue,OYo),e(w3,VYo),e(w3,DX),e(DX,XYo),e(w3,zYo),e(Se,WYo),e(Se,A3),e(A3,Aue),e(Aue,QYo),e(A3,HYo),e(A3,GX),e(GX,UYo),e(A3,JYo),e(Se,YYo),e(Se,y3),e(y3,yue),e(yue,KYo),e(y3,ZYo),e(y3,OX),e(OX,eKo),e(y3,oKo),e(Se,rKo),e(Se,L3),e(L3,Lue),e(Lue,tKo),e(L3,aKo),e(L3,VX),e(VX,nKo),e(L3,sKo),e(Se,lKo),e(Se,x3),e(x3,xue),e(xue,iKo),e(x3,dKo),e(x3,XX),e(XX,cKo),e(x3,fKo),e(Se,mKo),e(Se,$3),e($3,$ue),e($ue,gKo),e($3,hKo),e($3,zX),e(zX,pKo),e($3,uKo),e(Se,_Ko),e(Se,k3),e(k3,kue),e(kue,bKo),e(k3,vKo),e(k3,WX),e(WX,FKo),e(k3,TKo),e(co,MKo),e(co,S3),e(S3,EKo),e(S3,Sue),e(Sue,CKo),e(S3,wKo),e(S3,Rue),e(Rue,AKo),e(co,yKo),M(R3,co,null),b(f,kNe,_),b(f,gd,_),e(gd,P3),e(P3,Pue),M(gy,Pue,null),e(gd,LKo),e(gd,Bue),e(Bue,xKo),b(f,SNe,_),b(f,Oo,_),M(hy,Oo,null),e(Oo,$Ko),e(Oo,hd),e(hd,kKo),e(hd,QX),e(QX,SKo),e(hd,RKo),e(hd,HX),e(HX,PKo),e(hd,BKo),e(Oo,IKo),e(Oo,py),e(py,qKo),e(py,Iue),e(Iue,NKo),e(py,jKo),e(Oo,DKo),e(Oo,bt),M(uy,bt,null),e(bt,GKo),e(bt,que),e(que,OKo),e(bt,VKo),e(bt,pd),e(pd,XKo),e(pd,Nue),e(Nue,zKo),e(pd,WKo),e(pd,UX),e(UX,QKo),e(pd,HKo),e(bt,UKo),M(B3,bt,null),e(Oo,JKo),e(Oo,fo),M(_y,fo,null),e(fo,YKo),e(fo,jue),e(jue,KKo),e(fo,ZKo),e(fo,Oa),e(Oa,eZo),e(Oa,Due),e(Due,oZo),e(Oa,rZo),e(Oa,Gue),e(Gue,tZo),e(Oa,aZo),e(Oa,Oue),e(Oue,nZo),e(Oa,sZo),e(fo,lZo),e(fo,Kr),e(Kr,I3),e(I3,Vue),e(Vue,iZo),e(I3,dZo),e(I3,JX),e(JX,cZo),e(I3,fZo),e(Kr,mZo),e(Kr,q3),e(q3,Xue),e(Xue,gZo),e(q3,hZo),e(q3,YX),e(YX,pZo),e(q3,uZo),e(Kr,_Zo),e(Kr,N3),e(N3,zue),e(zue,bZo),e(N3,vZo),e(N3,KX),e(KX,FZo),e(N3,TZo),e(Kr,MZo),e(Kr,j3),e(j3,Wue),e(Wue,EZo),e(j3,CZo),e(j3,ZX),e(ZX,wZo),e(j3,AZo),e(Kr,yZo),e(Kr,D3),e(D3,Que),e(Que,LZo),e(D3,xZo),e(D3,ez),e(ez,$Zo),e(D3,kZo),e(fo,SZo),e(fo,G3),e(G3,RZo),e(G3,Hue),e(Hue,PZo),e(G3,BZo),e(G3,Uue),e(Uue,IZo),e(fo,qZo),M(O3,fo,null),b(f,RNe,_),b(f,ud,_),e(ud,V3),e(V3,Jue),M(by,Jue,null),e(ud,NZo),e(ud,Yue),e(Yue,jZo),b(f,PNe,_),b(f,Vo,_),M(vy,Vo,null),e(Vo,DZo),e(Vo,_d),e(_d,GZo),e(_d,oz),e(oz,OZo),e(_d,VZo),e(_d,rz),e(rz,XZo),e(_d,zZo),e(Vo,WZo),e(Vo,Fy),e(Fy,QZo),e(Fy,Kue),e(Kue,HZo),e(Fy,UZo),e(Vo,JZo),e(Vo,vt),M(Ty,vt,null),e(vt,YZo),e(vt,Zue),e(Zue,KZo),e(vt,ZZo),e(vt,bd),e(bd,eer),e(bd,e_e),e(e_e,oer),e(bd,rer),e(bd,tz),e(tz,ter),e(bd,aer),e(vt,ner),M(X3,vt,null),e(Vo,ser),e(Vo,mo),M(My,mo,null),e(mo,ler),e(mo,o_e),e(o_e,ier),e(mo,der),e(mo,Va),e(Va,cer),e(Va,r_e),e(r_e,fer),e(Va,mer),e(Va,t_e),e(t_e,ger),e(Va,her),e(Va,a_e),e(a_e,per),e(Va,uer),e(mo,_er),e(mo,Re),e(Re,z3),e(z3,n_e),e(n_e,ber),e(z3,ver),e(z3,az),e(az,Fer),e(z3,Ter),e(Re,Mer),e(Re,W3),e(W3,s_e),e(s_e,Eer),e(W3,Cer),e(W3,nz),e(nz,wer),e(W3,Aer),e(Re,yer),e(Re,Q3),e(Q3,l_e),e(l_e,Ler),e(Q3,xer),e(Q3,sz),e(sz,$er),e(Q3,ker),e(Re,Ser),e(Re,H3),e(H3,i_e),e(i_e,Rer),e(H3,Per),e(H3,lz),e(lz,Ber),e(H3,Ier),e(Re,qer),e(Re,U3),e(U3,d_e),e(d_e,Ner),e(U3,jer),e(U3,iz),e(iz,Der),e(U3,Ger),e(Re,Oer),e(Re,J3),e(J3,c_e),e(c_e,Ver),e(J3,Xer),e(J3,dz),e(dz,zer),e(J3,Wer),e(Re,Qer),e(Re,Y3),e(Y3,f_e),e(f_e,Her),e(Y3,Uer),e(Y3,cz),e(cz,Jer),e(Y3,Yer),e(Re,Ker),e(Re,K3),e(K3,m_e),e(m_e,Zer),e(K3,eor),e(K3,fz),e(fz,oor),e(K3,ror),e(Re,tor),e(Re,Z3),e(Z3,g_e),e(g_e,aor),e(Z3,nor),e(Z3,mz),e(mz,sor),e(Z3,lor),e(mo,ior),e(mo,eF),e(eF,dor),e(eF,h_e),e(h_e,cor),e(eF,mor),e(eF,p_e),e(p_e,gor),e(mo,hor),M(oF,mo,null),b(f,BNe,_),b(f,vd,_),e(vd,rF),e(rF,u_e),M(Ey,u_e,null),e(vd,por),e(vd,__e),e(__e,uor),b(f,INe,_),b(f,Xo,_),M(Cy,Xo,null),e(Xo,_or),e(Xo,Fd),e(Fd,bor),e(Fd,gz),e(gz,vor),e(Fd,For),e(Fd,hz),e(hz,Tor),e(Fd,Mor),e(Xo,Eor),e(Xo,wy),e(wy,Cor),e(wy,b_e),e(b_e,wor),e(wy,Aor),e(Xo,yor),e(Xo,Ft),M(Ay,Ft,null),e(Ft,Lor),e(Ft,v_e),e(v_e,xor),e(Ft,$or),e(Ft,Td),e(Td,kor),e(Td,F_e),e(F_e,Sor),e(Td,Ror),e(Td,pz),e(pz,Por),e(Td,Bor),e(Ft,Ior),M(tF,Ft,null),e(Xo,qor),e(Xo,go),M(yy,go,null),e(go,Nor),e(go,T_e),e(T_e,jor),e(go,Dor),e(go,Xa),e(Xa,Gor),e(Xa,M_e),e(M_e,Oor),e(Xa,Vor),e(Xa,E_e),e(E_e,Xor),e(Xa,zor),e(Xa,C_e),e(C_e,Wor),e(Xa,Qor),e(go,Hor),e(go,Ly),e(Ly,aF),e(aF,w_e),e(w_e,Uor),e(aF,Jor),e(aF,uz),e(uz,Yor),e(aF,Kor),e(Ly,Zor),e(Ly,nF),e(nF,A_e),e(A_e,err),e(nF,orr),e(nF,_z),e(_z,rrr),e(nF,trr),e(go,arr),e(go,sF),e(sF,nrr),e(sF,y_e),e(y_e,srr),e(sF,lrr),e(sF,L_e),e(L_e,irr),e(go,drr),M(lF,go,null),b(f,qNe,_),b(f,Md,_),e(Md,iF),e(iF,x_e),M(xy,x_e,null),e(Md,crr),e(Md,$_e),e($_e,frr),b(f,NNe,_),b(f,zo,_),M($y,zo,null),e(zo,mrr),e(zo,Ed),e(Ed,grr),e(Ed,bz),e(bz,hrr),e(Ed,prr),e(Ed,vz),e(vz,urr),e(Ed,_rr),e(zo,brr),e(zo,ky),e(ky,vrr),e(ky,k_e),e(k_e,Frr),e(ky,Trr),e(zo,Mrr),e(zo,Tt),M(Sy,Tt,null),e(Tt,Err),e(Tt,S_e),e(S_e,Crr),e(Tt,wrr),e(Tt,Cd),e(Cd,Arr),e(Cd,R_e),e(R_e,yrr),e(Cd,Lrr),e(Cd,Fz),e(Fz,xrr),e(Cd,$rr),e(Tt,krr),M(dF,Tt,null),e(zo,Srr),e(zo,ho),M(Ry,ho,null),e(ho,Rrr),e(ho,P_e),e(P_e,Prr),e(ho,Brr),e(ho,za),e(za,Irr),e(za,B_e),e(B_e,qrr),e(za,Nrr),e(za,I_e),e(I_e,jrr),e(za,Drr),e(za,q_e),e(q_e,Grr),e(za,Orr),e(ho,Vrr),e(ho,Zr),e(Zr,cF),e(cF,N_e),e(N_e,Xrr),e(cF,zrr),e(cF,Tz),e(Tz,Wrr),e(cF,Qrr),e(Zr,Hrr),e(Zr,fF),e(fF,j_e),e(j_e,Urr),e(fF,Jrr),e(fF,Mz),e(Mz,Yrr),e(fF,Krr),e(Zr,Zrr),e(Zr,mF),e(mF,D_e),e(D_e,etr),e(mF,otr),e(mF,Ez),e(Ez,rtr),e(mF,ttr),e(Zr,atr),e(Zr,gF),e(gF,G_e),e(G_e,ntr),e(gF,str),e(gF,Cz),e(Cz,ltr),e(gF,itr),e(Zr,dtr),e(Zr,hF),e(hF,O_e),e(O_e,ctr),e(hF,ftr),e(hF,wz),e(wz,mtr),e(hF,gtr),e(ho,htr),e(ho,pF),e(pF,ptr),e(pF,V_e),e(V_e,utr),e(pF,_tr),e(pF,X_e),e(X_e,btr),e(ho,vtr),M(uF,ho,null),b(f,jNe,_),b(f,wd,_),e(wd,_F),e(_F,z_e),M(Py,z_e,null),e(wd,Ftr),e(wd,W_e),e(W_e,Ttr),b(f,DNe,_),b(f,Wo,_),M(By,Wo,null),e(Wo,Mtr),e(Wo,Ad),e(Ad,Etr),e(Ad,Az),e(Az,Ctr),e(Ad,wtr),e(Ad,yz),e(yz,Atr),e(Ad,ytr),e(Wo,Ltr),e(Wo,Iy),e(Iy,xtr),e(Iy,Q_e),e(Q_e,$tr),e(Iy,ktr),e(Wo,Str),e(Wo,Mt),M(qy,Mt,null),e(Mt,Rtr),e(Mt,H_e),e(H_e,Ptr),e(Mt,Btr),e(Mt,yd),e(yd,Itr),e(yd,U_e),e(U_e,qtr),e(yd,Ntr),e(yd,Lz),e(Lz,jtr),e(yd,Dtr),e(Mt,Gtr),M(bF,Mt,null),e(Wo,Otr),e(Wo,po),M(Ny,po,null),e(po,Vtr),e(po,J_e),e(J_e,Xtr),e(po,ztr),e(po,Wa),e(Wa,Wtr),e(Wa,Y_e),e(Y_e,Qtr),e(Wa,Htr),e(Wa,K_e),e(K_e,Utr),e(Wa,Jtr),e(Wa,Z_e),e(Z_e,Ytr),e(Wa,Ktr),e(po,Ztr),e(po,Ld),e(Ld,vF),e(vF,e1e),e(e1e,ear),e(vF,oar),e(vF,xz),e(xz,rar),e(vF,tar),e(Ld,aar),e(Ld,FF),e(FF,o1e),e(o1e,nar),e(FF,sar),e(FF,$z),e($z,lar),e(FF,iar),e(Ld,dar),e(Ld,TF),e(TF,r1e),e(r1e,car),e(TF,far),e(TF,kz),e(kz,mar),e(TF,gar),e(po,har),e(po,MF),e(MF,par),e(MF,t1e),e(t1e,uar),e(MF,_ar),e(MF,a1e),e(a1e,bar),e(po,Far),M(EF,po,null),b(f,GNe,_),b(f,xd,_),e(xd,CF),e(CF,n1e),M(jy,n1e,null),e(xd,Tar),e(xd,s1e),e(s1e,Mar),b(f,ONe,_),b(f,Qo,_),M(Dy,Qo,null),e(Qo,Ear),e(Qo,$d),e($d,Car),e($d,Sz),e(Sz,war),e($d,Aar),e($d,Rz),e(Rz,yar),e($d,Lar),e(Qo,xar),e(Qo,Gy),e(Gy,$ar),e(Gy,l1e),e(l1e,kar),e(Gy,Sar),e(Qo,Rar),e(Qo,Et),M(Oy,Et,null),e(Et,Par),e(Et,i1e),e(i1e,Bar),e(Et,Iar),e(Et,kd),e(kd,qar),e(kd,d1e),e(d1e,Nar),e(kd,jar),e(kd,Pz),e(Pz,Dar),e(kd,Gar),e(Et,Oar),M(wF,Et,null),e(Qo,Var),e(Qo,uo),M(Vy,uo,null),e(uo,Xar),e(uo,c1e),e(c1e,zar),e(uo,War),e(uo,Qa),e(Qa,Qar),e(Qa,f1e),e(f1e,Har),e(Qa,Uar),e(Qa,m1e),e(m1e,Jar),e(Qa,Yar),e(Qa,g1e),e(g1e,Kar),e(Qa,Zar),e(uo,enr),e(uo,Xy),e(Xy,AF),e(AF,h1e),e(h1e,onr),e(AF,rnr),e(AF,Bz),e(Bz,tnr),e(AF,anr),e(Xy,nnr),e(Xy,yF),e(yF,p1e),e(p1e,snr),e(yF,lnr),e(yF,Iz),e(Iz,inr),e(yF,dnr),e(uo,cnr),e(uo,LF),e(LF,fnr),e(LF,u1e),e(u1e,mnr),e(LF,gnr),e(LF,_1e),e(_1e,hnr),e(uo,pnr),M(xF,uo,null),b(f,VNe,_),b(f,Sd,_),e(Sd,$F),e($F,b1e),M(zy,b1e,null),e(Sd,unr),e(Sd,v1e),e(v1e,_nr),b(f,XNe,_),b(f,Ho,_),M(Wy,Ho,null),e(Ho,bnr),e(Ho,Rd),e(Rd,vnr),e(Rd,qz),e(qz,Fnr),e(Rd,Tnr),e(Rd,Nz),e(Nz,Mnr),e(Rd,Enr),e(Ho,Cnr),e(Ho,Qy),e(Qy,wnr),e(Qy,F1e),e(F1e,Anr),e(Qy,ynr),e(Ho,Lnr),e(Ho,Ct),M(Hy,Ct,null),e(Ct,xnr),e(Ct,T1e),e(T1e,$nr),e(Ct,knr),e(Ct,Pd),e(Pd,Snr),e(Pd,M1e),e(M1e,Rnr),e(Pd,Pnr),e(Pd,jz),e(jz,Bnr),e(Pd,Inr),e(Ct,qnr),M(kF,Ct,null),e(Ho,Nnr),e(Ho,_o),M(Uy,_o,null),e(_o,jnr),e(_o,E1e),e(E1e,Dnr),e(_o,Gnr),e(_o,Ha),e(Ha,Onr),e(Ha,C1e),e(C1e,Vnr),e(Ha,Xnr),e(Ha,w1e),e(w1e,znr),e(Ha,Wnr),e(Ha,A1e),e(A1e,Qnr),e(Ha,Hnr),e(_o,Unr),e(_o,y1e),e(y1e,SF),e(SF,L1e),e(L1e,Jnr),e(SF,Ynr),e(SF,Dz),e(Dz,Knr),e(SF,Znr),e(_o,esr),e(_o,RF),e(RF,osr),e(RF,x1e),e(x1e,rsr),e(RF,tsr),e(RF,$1e),e($1e,asr),e(_o,nsr),M(PF,_o,null),b(f,zNe,_),b(f,Bd,_),e(Bd,BF),e(BF,k1e),M(Jy,k1e,null),e(Bd,ssr),e(Bd,S1e),e(S1e,lsr),b(f,WNe,_),b(f,Uo,_),M(Yy,Uo,null),e(Uo,isr),e(Uo,Id),e(Id,dsr),e(Id,Gz),e(Gz,csr),e(Id,fsr),e(Id,Oz),e(Oz,msr),e(Id,gsr),e(Uo,hsr),e(Uo,Ky),e(Ky,psr),e(Ky,R1e),e(R1e,usr),e(Ky,_sr),e(Uo,bsr),e(Uo,wt),M(Zy,wt,null),e(wt,vsr),e(wt,P1e),e(P1e,Fsr),e(wt,Tsr),e(wt,qd),e(qd,Msr),e(qd,B1e),e(B1e,Esr),e(qd,Csr),e(qd,Vz),e(Vz,wsr),e(qd,Asr),e(wt,ysr),M(IF,wt,null),e(Uo,Lsr),e(Uo,bo),M(eL,bo,null),e(bo,xsr),e(bo,I1e),e(I1e,$sr),e(bo,ksr),e(bo,Ua),e(Ua,Ssr),e(Ua,q1e),e(q1e,Rsr),e(Ua,Psr),e(Ua,N1e),e(N1e,Bsr),e(Ua,Isr),e(Ua,j1e),e(j1e,qsr),e(Ua,Nsr),e(bo,jsr),e(bo,Ja),e(Ja,qF),e(qF,D1e),e(D1e,Dsr),e(qF,Gsr),e(qF,Xz),e(Xz,Osr),e(qF,Vsr),e(Ja,Xsr),e(Ja,NF),e(NF,G1e),e(G1e,zsr),e(NF,Wsr),e(NF,zz),e(zz,Qsr),e(NF,Hsr),e(Ja,Usr),e(Ja,jF),e(jF,O1e),e(O1e,Jsr),e(jF,Ysr),e(jF,Wz),e(Wz,Ksr),e(jF,Zsr),e(Ja,elr),e(Ja,DF),e(DF,V1e),e(V1e,olr),e(DF,rlr),e(DF,Qz),e(Qz,tlr),e(DF,alr),e(bo,nlr),e(bo,GF),e(GF,slr),e(GF,X1e),e(X1e,llr),e(GF,ilr),e(GF,z1e),e(z1e,dlr),e(bo,clr),M(OF,bo,null),b(f,QNe,_),b(f,Nd,_),e(Nd,VF),e(VF,W1e),M(oL,W1e,null),e(Nd,flr),e(Nd,Q1e),e(Q1e,mlr),b(f,HNe,_),b(f,Jo,_),M(rL,Jo,null),e(Jo,glr),e(Jo,jd),e(jd,hlr),e(jd,Hz),e(Hz,plr),e(jd,ulr),e(jd,Uz),e(Uz,_lr),e(jd,blr),e(Jo,vlr),e(Jo,tL),e(tL,Flr),e(tL,H1e),e(H1e,Tlr),e(tL,Mlr),e(Jo,Elr),e(Jo,At),M(aL,At,null),e(At,Clr),e(At,U1e),e(U1e,wlr),e(At,Alr),e(At,Dd),e(Dd,ylr),e(Dd,J1e),e(J1e,Llr),e(Dd,xlr),e(Dd,Jz),e(Jz,$lr),e(Dd,klr),e(At,Slr),M(XF,At,null),e(Jo,Rlr),e(Jo,vo),M(nL,vo,null),e(vo,Plr),e(vo,Y1e),e(Y1e,Blr),e(vo,Ilr),e(vo,Ya),e(Ya,qlr),e(Ya,K1e),e(K1e,Nlr),e(Ya,jlr),e(Ya,Z1e),e(Z1e,Dlr),e(Ya,Glr),e(Ya,e8e),e(e8e,Olr),e(Ya,Vlr),e(vo,Xlr),e(vo,o8e),e(o8e,zF),e(zF,r8e),e(r8e,zlr),e(zF,Wlr),e(zF,Yz),e(Yz,Qlr),e(zF,Hlr),e(vo,Ulr),e(vo,WF),e(WF,Jlr),e(WF,t8e),e(t8e,Ylr),e(WF,Klr),e(WF,a8e),e(a8e,Zlr),e(vo,eir),M(QF,vo,null),b(f,UNe,_),b(f,Gd,_),e(Gd,HF),e(HF,n8e),M(sL,n8e,null),e(Gd,oir),e(Gd,s8e),e(s8e,rir),b(f,JNe,_),b(f,Yo,_),M(lL,Yo,null),e(Yo,tir),e(Yo,Od),e(Od,air),e(Od,Kz),e(Kz,nir),e(Od,sir),e(Od,Zz),e(Zz,lir),e(Od,iir),e(Yo,dir),e(Yo,iL),e(iL,cir),e(iL,l8e),e(l8e,fir),e(iL,mir),e(Yo,gir),e(Yo,yt),M(dL,yt,null),e(yt,hir),e(yt,i8e),e(i8e,pir),e(yt,uir),e(yt,Vd),e(Vd,_ir),e(Vd,d8e),e(d8e,bir),e(Vd,vir),e(Vd,eW),e(eW,Fir),e(Vd,Tir),e(yt,Mir),M(UF,yt,null),e(Yo,Eir),e(Yo,wr),M(cL,wr,null),e(wr,Cir),e(wr,c8e),e(c8e,wir),e(wr,Air),e(wr,Ka),e(Ka,yir),e(Ka,f8e),e(f8e,Lir),e(Ka,xir),e(Ka,m8e),e(m8e,$ir),e(Ka,kir),e(Ka,g8e),e(g8e,Sir),e(Ka,Rir),e(wr,Pir),e(wr,N),e(N,JF),e(JF,h8e),e(h8e,Bir),e(JF,Iir),e(JF,oW),e(oW,qir),e(JF,Nir),e(N,jir),e(N,YF),e(YF,p8e),e(p8e,Dir),e(YF,Gir),e(YF,rW),e(rW,Oir),e(YF,Vir),e(N,Xir),e(N,KF),e(KF,u8e),e(u8e,zir),e(KF,Wir),e(KF,tW),e(tW,Qir),e(KF,Hir),e(N,Uir),e(N,ZF),e(ZF,_8e),e(_8e,Jir),e(ZF,Yir),e(ZF,aW),e(aW,Kir),e(ZF,Zir),e(N,edr),e(N,eT),e(eT,b8e),e(b8e,odr),e(eT,rdr),e(eT,nW),e(nW,tdr),e(eT,adr),e(N,ndr),e(N,oT),e(oT,v8e),e(v8e,sdr),e(oT,ldr),e(oT,sW),e(sW,idr),e(oT,ddr),e(N,cdr),e(N,rT),e(rT,F8e),e(F8e,fdr),e(rT,mdr),e(rT,lW),e(lW,gdr),e(rT,hdr),e(N,pdr),e(N,tT),e(tT,T8e),e(T8e,udr),e(tT,_dr),e(tT,iW),e(iW,bdr),e(tT,vdr),e(N,Fdr),e(N,aT),e(aT,M8e),e(M8e,Tdr),e(aT,Mdr),e(aT,dW),e(dW,Edr),e(aT,Cdr),e(N,wdr),e(N,nT),e(nT,E8e),e(E8e,Adr),e(nT,ydr),e(nT,cW),e(cW,Ldr),e(nT,xdr),e(N,$dr),e(N,sT),e(sT,C8e),e(C8e,kdr),e(sT,Sdr),e(sT,fW),e(fW,Rdr),e(sT,Pdr),e(N,Bdr),e(N,lT),e(lT,w8e),e(w8e,Idr),e(lT,qdr),e(lT,mW),e(mW,Ndr),e(lT,jdr),e(N,Ddr),e(N,iT),e(iT,A8e),e(A8e,Gdr),e(iT,Odr),e(iT,gW),e(gW,Vdr),e(iT,Xdr),e(N,zdr),e(N,dT),e(dT,y8e),e(y8e,Wdr),e(dT,Qdr),e(dT,hW),e(hW,Hdr),e(dT,Udr),e(N,Jdr),e(N,cT),e(cT,L8e),e(L8e,Ydr),e(cT,Kdr),e(cT,pW),e(pW,Zdr),e(cT,ecr),e(N,ocr),e(N,fT),e(fT,x8e),e(x8e,rcr),e(fT,tcr),e(fT,uW),e(uW,acr),e(fT,ncr),e(N,scr),e(N,mT),e(mT,$8e),e($8e,lcr),e(mT,icr),e(mT,_W),e(_W,dcr),e(mT,ccr),e(N,fcr),e(N,Is),e(Is,k8e),e(k8e,mcr),e(Is,gcr),e(Is,bW),e(bW,hcr),e(Is,pcr),e(Is,vW),e(vW,ucr),e(Is,_cr),e(N,bcr),e(N,gT),e(gT,S8e),e(S8e,vcr),e(gT,Fcr),e(gT,FW),e(FW,Tcr),e(gT,Mcr),e(N,Ecr),e(N,hT),e(hT,R8e),e(R8e,Ccr),e(hT,wcr),e(hT,TW),e(TW,Acr),e(hT,ycr),e(N,Lcr),e(N,pT),e(pT,P8e),e(P8e,xcr),e(pT,$cr),e(pT,MW),e(MW,kcr),e(pT,Scr),e(N,Rcr),e(N,uT),e(uT,B8e),e(B8e,Pcr),e(uT,Bcr),e(uT,EW),e(EW,Icr),e(uT,qcr),e(N,Ncr),e(N,_T),e(_T,I8e),e(I8e,jcr),e(_T,Dcr),e(_T,CW),e(CW,Gcr),e(_T,Ocr),e(N,Vcr),e(N,bT),e(bT,q8e),e(q8e,Xcr),e(bT,zcr),e(bT,wW),e(wW,Wcr),e(bT,Qcr),e(N,Hcr),e(N,vT),e(vT,N8e),e(N8e,Ucr),e(vT,Jcr),e(vT,AW),e(AW,Ycr),e(vT,Kcr),e(N,Zcr),e(N,FT),e(FT,j8e),e(j8e,efr),e(FT,ofr),e(FT,yW),e(yW,rfr),e(FT,tfr),e(N,afr),e(N,TT),e(TT,D8e),e(D8e,nfr),e(TT,sfr),e(TT,LW),e(LW,lfr),e(TT,ifr),e(N,dfr),e(N,MT),e(MT,G8e),e(G8e,cfr),e(MT,ffr),e(MT,xW),e(xW,mfr),e(MT,gfr),e(N,hfr),e(N,ET),e(ET,O8e),e(O8e,pfr),e(ET,ufr),e(ET,$W),e($W,_fr),e(ET,bfr),e(N,vfr),e(N,CT),e(CT,V8e),e(V8e,Ffr),e(CT,Tfr),e(CT,kW),e(kW,Mfr),e(CT,Efr),e(N,Cfr),e(N,wT),e(wT,X8e),e(X8e,wfr),e(wT,Afr),e(wT,SW),e(SW,yfr),e(wT,Lfr),e(N,xfr),e(N,AT),e(AT,z8e),e(z8e,$fr),e(AT,kfr),e(AT,RW),e(RW,Sfr),e(AT,Rfr),e(N,Pfr),e(N,yT),e(yT,W8e),e(W8e,Bfr),e(yT,Ifr),e(yT,PW),e(PW,qfr),e(yT,Nfr),e(N,jfr),e(N,LT),e(LT,Q8e),e(Q8e,Dfr),e(LT,Gfr),e(LT,BW),e(BW,Ofr),e(LT,Vfr),e(N,Xfr),e(N,xT),e(xT,H8e),e(H8e,zfr),e(xT,Wfr),e(xT,IW),e(IW,Qfr),e(xT,Hfr),e(N,Ufr),e(N,$T),e($T,U8e),e(U8e,Jfr),e($T,Yfr),e($T,qW),e(qW,Kfr),e($T,Zfr),e(N,emr),e(N,kT),e(kT,J8e),e(J8e,omr),e(kT,rmr),e(kT,NW),e(NW,tmr),e(kT,amr),e(N,nmr),e(N,ST),e(ST,Y8e),e(Y8e,smr),e(ST,lmr),e(ST,jW),e(jW,imr),e(ST,dmr),e(N,cmr),e(N,RT),e(RT,K8e),e(K8e,fmr),e(RT,mmr),e(RT,DW),e(DW,gmr),e(RT,hmr),e(N,pmr),e(N,PT),e(PT,Z8e),e(Z8e,umr),e(PT,_mr),e(PT,GW),e(GW,bmr),e(PT,vmr),e(N,Fmr),e(N,BT),e(BT,ebe),e(ebe,Tmr),e(BT,Mmr),e(BT,OW),e(OW,Emr),e(BT,Cmr),e(N,wmr),e(N,IT),e(IT,obe),e(obe,Amr),e(IT,ymr),e(IT,VW),e(VW,Lmr),e(IT,xmr),e(N,$mr),e(N,qT),e(qT,rbe),e(rbe,kmr),e(qT,Smr),e(qT,XW),e(XW,Rmr),e(qT,Pmr),e(N,Bmr),e(N,NT),e(NT,tbe),e(tbe,Imr),e(NT,qmr),e(NT,zW),e(zW,Nmr),e(NT,jmr),e(N,Dmr),e(N,jT),e(jT,abe),e(abe,Gmr),e(jT,Omr),e(jT,WW),e(WW,Vmr),e(jT,Xmr),e(N,zmr),e(N,DT),e(DT,nbe),e(nbe,Wmr),e(DT,Qmr),e(DT,QW),e(QW,Hmr),e(DT,Umr),e(N,Jmr),e(N,GT),e(GT,sbe),e(sbe,Ymr),e(GT,Kmr),e(GT,HW),e(HW,Zmr),e(GT,egr),e(wr,ogr),M(OT,wr,null),b(f,YNe,_),b(f,Xd,_),e(Xd,VT),e(VT,lbe),M(fL,lbe,null),e(Xd,rgr),e(Xd,ibe),e(ibe,tgr),b(f,KNe,_),b(f,Ko,_),M(mL,Ko,null),e(Ko,agr),e(Ko,zd),e(zd,ngr),e(zd,UW),e(UW,sgr),e(zd,lgr),e(zd,JW),e(JW,igr),e(zd,dgr),e(Ko,cgr),e(Ko,gL),e(gL,fgr),e(gL,dbe),e(dbe,mgr),e(gL,ggr),e(Ko,hgr),e(Ko,Lt),M(hL,Lt,null),e(Lt,pgr),e(Lt,cbe),e(cbe,ugr),e(Lt,_gr),e(Lt,Wd),e(Wd,bgr),e(Wd,fbe),e(fbe,vgr),e(Wd,Fgr),e(Wd,YW),e(YW,Tgr),e(Wd,Mgr),e(Lt,Egr),M(XT,Lt,null),e(Ko,Cgr),e(Ko,Ar),M(pL,Ar,null),e(Ar,wgr),e(Ar,mbe),e(mbe,Agr),e(Ar,ygr),e(Ar,Za),e(Za,Lgr),e(Za,gbe),e(gbe,xgr),e(Za,$gr),e(Za,hbe),e(hbe,kgr),e(Za,Sgr),e(Za,pbe),e(pbe,Rgr),e(Za,Pgr),e(Ar,Bgr),e(Ar,se),e(se,zT),e(zT,ube),e(ube,Igr),e(zT,qgr),e(zT,KW),e(KW,Ngr),e(zT,jgr),e(se,Dgr),e(se,WT),e(WT,_be),e(_be,Ggr),e(WT,Ogr),e(WT,ZW),e(ZW,Vgr),e(WT,Xgr),e(se,zgr),e(se,QT),e(QT,bbe),e(bbe,Wgr),e(QT,Qgr),e(QT,eQ),e(eQ,Hgr),e(QT,Ugr),e(se,Jgr),e(se,HT),e(HT,vbe),e(vbe,Ygr),e(HT,Kgr),e(HT,oQ),e(oQ,Zgr),e(HT,ehr),e(se,ohr),e(se,UT),e(UT,Fbe),e(Fbe,rhr),e(UT,thr),e(UT,rQ),e(rQ,ahr),e(UT,nhr),e(se,shr),e(se,JT),e(JT,Tbe),e(Tbe,lhr),e(JT,ihr),e(JT,tQ),e(tQ,dhr),e(JT,chr),e(se,fhr),e(se,YT),e(YT,Mbe),e(Mbe,mhr),e(YT,ghr),e(YT,aQ),e(aQ,hhr),e(YT,phr),e(se,uhr),e(se,KT),e(KT,Ebe),e(Ebe,_hr),e(KT,bhr),e(KT,nQ),e(nQ,vhr),e(KT,Fhr),e(se,Thr),e(se,ZT),e(ZT,Cbe),e(Cbe,Mhr),e(ZT,Ehr),e(ZT,sQ),e(sQ,Chr),e(ZT,whr),e(se,Ahr),e(se,e7),e(e7,wbe),e(wbe,yhr),e(e7,Lhr),e(e7,lQ),e(lQ,xhr),e(e7,$hr),e(se,khr),e(se,o7),e(o7,Abe),e(Abe,Shr),e(o7,Rhr),e(o7,iQ),e(iQ,Phr),e(o7,Bhr),e(se,Ihr),e(se,r7),e(r7,ybe),e(ybe,qhr),e(r7,Nhr),e(r7,dQ),e(dQ,jhr),e(r7,Dhr),e(se,Ghr),e(se,t7),e(t7,Lbe),e(Lbe,Ohr),e(t7,Vhr),e(t7,cQ),e(cQ,Xhr),e(t7,zhr),e(se,Whr),e(se,a7),e(a7,xbe),e(xbe,Qhr),e(a7,Hhr),e(a7,fQ),e(fQ,Uhr),e(a7,Jhr),e(se,Yhr),e(se,n7),e(n7,$be),e($be,Khr),e(n7,Zhr),e(n7,mQ),e(mQ,epr),e(n7,opr),e(se,rpr),e(se,s7),e(s7,kbe),e(kbe,tpr),e(s7,apr),e(s7,gQ),e(gQ,npr),e(s7,spr),e(se,lpr),e(se,l7),e(l7,Sbe),e(Sbe,ipr),e(l7,dpr),e(l7,hQ),e(hQ,cpr),e(l7,fpr),e(se,mpr),e(se,i7),e(i7,Rbe),e(Rbe,gpr),e(i7,hpr),e(i7,pQ),e(pQ,ppr),e(i7,upr),e(se,_pr),e(se,d7),e(d7,Pbe),e(Pbe,bpr),e(d7,vpr),e(d7,uQ),e(uQ,Fpr),e(d7,Tpr),e(se,Mpr),e(se,c7),e(c7,Bbe),e(Bbe,Epr),e(c7,Cpr),e(c7,_Q),e(_Q,wpr),e(c7,Apr),e(se,ypr),e(se,f7),e(f7,Ibe),e(Ibe,Lpr),e(f7,xpr),e(f7,bQ),e(bQ,$pr),e(f7,kpr),e(se,Spr),e(se,m7),e(m7,qbe),e(qbe,Rpr),e(m7,Ppr),e(m7,vQ),e(vQ,Bpr),e(m7,Ipr),e(se,qpr),e(se,g7),e(g7,Nbe),e(Nbe,Npr),e(g7,jpr),e(g7,FQ),e(FQ,Dpr),e(g7,Gpr),e(Ar,Opr),M(h7,Ar,null),b(f,ZNe,_),b(f,Qd,_),e(Qd,p7),e(p7,jbe),M(uL,jbe,null),e(Qd,Vpr),e(Qd,Dbe),e(Dbe,Xpr),b(f,eje,_),b(f,Zo,_),M(_L,Zo,null),e(Zo,zpr),e(Zo,Hd),e(Hd,Wpr),e(Hd,TQ),e(TQ,Qpr),e(Hd,Hpr),e(Hd,MQ),e(MQ,Upr),e(Hd,Jpr),e(Zo,Ypr),e(Zo,bL),e(bL,Kpr),e(bL,Gbe),e(Gbe,Zpr),e(bL,eur),e(Zo,our),e(Zo,xt),M(vL,xt,null),e(xt,rur),e(xt,Obe),e(Obe,tur),e(xt,aur),e(xt,Ud),e(Ud,nur),e(Ud,Vbe),e(Vbe,sur),e(Ud,lur),e(Ud,EQ),e(EQ,iur),e(Ud,dur),e(xt,cur),M(u7,xt,null),e(Zo,fur),e(Zo,yr),M(FL,yr,null),e(yr,mur),e(yr,Xbe),e(Xbe,gur),e(yr,hur),e(yr,en),e(en,pur),e(en,zbe),e(zbe,uur),e(en,_ur),e(en,Wbe),e(Wbe,bur),e(en,vur),e(en,Qbe),e(Qbe,Fur),e(en,Tur),e(yr,Mur),e(yr,Me),e(Me,_7),e(_7,Hbe),e(Hbe,Eur),e(_7,Cur),e(_7,CQ),e(CQ,wur),e(_7,Aur),e(Me,yur),e(Me,b7),e(b7,Ube),e(Ube,Lur),e(b7,xur),e(b7,wQ),e(wQ,$ur),e(b7,kur),e(Me,Sur),e(Me,v7),e(v7,Jbe),e(Jbe,Rur),e(v7,Pur),e(v7,AQ),e(AQ,Bur),e(v7,Iur),e(Me,qur),e(Me,F7),e(F7,Ybe),e(Ybe,Nur),e(F7,jur),e(F7,yQ),e(yQ,Dur),e(F7,Gur),e(Me,Our),e(Me,T7),e(T7,Kbe),e(Kbe,Vur),e(T7,Xur),e(T7,LQ),e(LQ,zur),e(T7,Wur),e(Me,Qur),e(Me,M7),e(M7,Zbe),e(Zbe,Hur),e(M7,Uur),e(M7,xQ),e(xQ,Jur),e(M7,Yur),e(Me,Kur),e(Me,E7),e(E7,e2e),e(e2e,Zur),e(E7,e_r),e(E7,$Q),e($Q,o_r),e(E7,r_r),e(Me,t_r),e(Me,C7),e(C7,o2e),e(o2e,a_r),e(C7,n_r),e(C7,kQ),e(kQ,s_r),e(C7,l_r),e(Me,i_r),e(Me,w7),e(w7,r2e),e(r2e,d_r),e(w7,c_r),e(w7,SQ),e(SQ,f_r),e(w7,m_r),e(Me,g_r),e(Me,A7),e(A7,t2e),e(t2e,h_r),e(A7,p_r),e(A7,RQ),e(RQ,u_r),e(A7,__r),e(Me,b_r),e(Me,y7),e(y7,a2e),e(a2e,v_r),e(y7,F_r),e(y7,PQ),e(PQ,T_r),e(y7,M_r),e(Me,E_r),e(Me,L7),e(L7,n2e),e(n2e,C_r),e(L7,w_r),e(L7,BQ),e(BQ,A_r),e(L7,y_r),e(yr,L_r),M(x7,yr,null),b(f,oje,_),b(f,Jd,_),e(Jd,$7),e($7,s2e),M(TL,s2e,null),e(Jd,x_r),e(Jd,l2e),e(l2e,$_r),b(f,rje,_),b(f,er,_),M(ML,er,null),e(er,k_r),e(er,Yd),e(Yd,S_r),e(Yd,IQ),e(IQ,R_r),e(Yd,P_r),e(Yd,qQ),e(qQ,B_r),e(Yd,I_r),e(er,q_r),e(er,EL),e(EL,N_r),e(EL,i2e),e(i2e,j_r),e(EL,D_r),e(er,G_r),e(er,$t),M(CL,$t,null),e($t,O_r),e($t,d2e),e(d2e,V_r),e($t,X_r),e($t,Kd),e(Kd,z_r),e(Kd,c2e),e(c2e,W_r),e(Kd,Q_r),e(Kd,NQ),e(NQ,H_r),e(Kd,U_r),e($t,J_r),M(k7,$t,null),e(er,Y_r),e(er,Lr),M(wL,Lr,null),e(Lr,K_r),e(Lr,f2e),e(f2e,Z_r),e(Lr,e1r),e(Lr,on),e(on,o1r),e(on,m2e),e(m2e,r1r),e(on,t1r),e(on,g2e),e(g2e,a1r),e(on,n1r),e(on,h2e),e(h2e,s1r),e(on,l1r),e(Lr,i1r),e(Lr,rn),e(rn,S7),e(S7,p2e),e(p2e,d1r),e(S7,c1r),e(S7,jQ),e(jQ,f1r),e(S7,m1r),e(rn,g1r),e(rn,R7),e(R7,u2e),e(u2e,h1r),e(R7,p1r),e(R7,DQ),e(DQ,u1r),e(R7,_1r),e(rn,b1r),e(rn,P7),e(P7,_2e),e(_2e,v1r),e(P7,F1r),e(P7,GQ),e(GQ,T1r),e(P7,M1r),e(rn,E1r),e(rn,B7),e(B7,b2e),e(b2e,C1r),e(B7,w1r),e(B7,OQ),e(OQ,A1r),e(B7,y1r),e(Lr,L1r),M(I7,Lr,null),b(f,tje,_),b(f,Zd,_),e(Zd,q7),e(q7,v2e),M(AL,v2e,null),e(Zd,x1r),e(Zd,F2e),e(F2e,$1r),b(f,aje,_),b(f,or,_),M(yL,or,null),e(or,k1r),e(or,ec),e(ec,S1r),e(ec,VQ),e(VQ,R1r),e(ec,P1r),e(ec,XQ),e(XQ,B1r),e(ec,I1r),e(or,q1r),e(or,LL),e(LL,N1r),e(LL,T2e),e(T2e,j1r),e(LL,D1r),e(or,G1r),e(or,kt),M(xL,kt,null),e(kt,O1r),e(kt,M2e),e(M2e,V1r),e(kt,X1r),e(kt,oc),e(oc,z1r),e(oc,E2e),e(E2e,W1r),e(oc,Q1r),e(oc,zQ),e(zQ,H1r),e(oc,U1r),e(kt,J1r),M(N7,kt,null),e(or,Y1r),e(or,xr),M($L,xr,null),e(xr,K1r),e(xr,C2e),e(C2e,Z1r),e(xr,e8r),e(xr,tn),e(tn,o8r),e(tn,w2e),e(w2e,r8r),e(tn,t8r),e(tn,A2e),e(A2e,a8r),e(tn,n8r),e(tn,y2e),e(y2e,s8r),e(tn,l8r),e(xr,i8r),e(xr,ie),e(ie,j7),e(j7,L2e),e(L2e,d8r),e(j7,c8r),e(j7,WQ),e(WQ,f8r),e(j7,m8r),e(ie,g8r),e(ie,D7),e(D7,x2e),e(x2e,h8r),e(D7,p8r),e(D7,QQ),e(QQ,u8r),e(D7,_8r),e(ie,b8r),e(ie,G7),e(G7,$2e),e($2e,v8r),e(G7,F8r),e(G7,HQ),e(HQ,T8r),e(G7,M8r),e(ie,E8r),e(ie,O7),e(O7,k2e),e(k2e,C8r),e(O7,w8r),e(O7,UQ),e(UQ,A8r),e(O7,y8r),e(ie,L8r),e(ie,V7),e(V7,S2e),e(S2e,x8r),e(V7,$8r),e(V7,JQ),e(JQ,k8r),e(V7,S8r),e(ie,R8r),e(ie,X7),e(X7,R2e),e(R2e,P8r),e(X7,B8r),e(X7,YQ),e(YQ,I8r),e(X7,q8r),e(ie,N8r),e(ie,z7),e(z7,P2e),e(P2e,j8r),e(z7,D8r),e(z7,KQ),e(KQ,G8r),e(z7,O8r),e(ie,V8r),e(ie,W7),e(W7,B2e),e(B2e,X8r),e(W7,z8r),e(W7,ZQ),e(ZQ,W8r),e(W7,Q8r),e(ie,H8r),e(ie,Q7),e(Q7,I2e),e(I2e,U8r),e(Q7,J8r),e(Q7,eH),e(eH,Y8r),e(Q7,K8r),e(ie,Z8r),e(ie,H7),e(H7,q2e),e(q2e,ebr),e(H7,obr),e(H7,oH),e(oH,rbr),e(H7,tbr),e(ie,abr),e(ie,U7),e(U7,N2e),e(N2e,nbr),e(U7,sbr),e(U7,rH),e(rH,lbr),e(U7,ibr),e(ie,dbr),e(ie,J7),e(J7,j2e),e(j2e,cbr),e(J7,fbr),e(J7,tH),e(tH,mbr),e(J7,gbr),e(ie,hbr),e(ie,Y7),e(Y7,D2e),e(D2e,pbr),e(Y7,ubr),e(Y7,aH),e(aH,_br),e(Y7,bbr),e(ie,vbr),e(ie,K7),e(K7,G2e),e(G2e,Fbr),e(K7,Tbr),e(K7,nH),e(nH,Mbr),e(K7,Ebr),e(ie,Cbr),e(ie,Z7),e(Z7,O2e),e(O2e,wbr),e(Z7,Abr),e(Z7,sH),e(sH,ybr),e(Z7,Lbr),e(ie,xbr),e(ie,eM),e(eM,V2e),e(V2e,$br),e(eM,kbr),e(eM,lH),e(lH,Sbr),e(eM,Rbr),e(ie,Pbr),e(ie,oM),e(oM,X2e),e(X2e,Bbr),e(oM,Ibr),e(oM,iH),e(iH,qbr),e(oM,Nbr),e(ie,jbr),e(ie,rM),e(rM,z2e),e(z2e,Dbr),e(rM,Gbr),e(rM,dH),e(dH,Obr),e(rM,Vbr),e(ie,Xbr),e(ie,tM),e(tM,W2e),e(W2e,zbr),e(tM,Wbr),e(tM,cH),e(cH,Qbr),e(tM,Hbr),e(ie,Ubr),e(ie,aM),e(aM,Q2e),e(Q2e,Jbr),e(aM,Ybr),e(aM,fH),e(fH,Kbr),e(aM,Zbr),e(xr,e2r),M(nM,xr,null),b(f,nje,_),b(f,rc,_),e(rc,sM),e(sM,H2e),M(kL,H2e,null),e(rc,o2r),e(rc,U2e),e(U2e,r2r),b(f,sje,_),b(f,rr,_),M(SL,rr,null),e(rr,t2r),e(rr,tc),e(tc,a2r),e(tc,mH),e(mH,n2r),e(tc,s2r),e(tc,gH),e(gH,l2r),e(tc,i2r),e(rr,d2r),e(rr,RL),e(RL,c2r),e(RL,J2e),e(J2e,f2r),e(RL,m2r),e(rr,g2r),e(rr,St),M(PL,St,null),e(St,h2r),e(St,Y2e),e(Y2e,p2r),e(St,u2r),e(St,ac),e(ac,_2r),e(ac,K2e),e(K2e,b2r),e(ac,v2r),e(ac,hH),e(hH,F2r),e(ac,T2r),e(St,M2r),M(lM,St,null),e(rr,E2r),e(rr,$r),M(BL,$r,null),e($r,C2r),e($r,Z2e),e(Z2e,w2r),e($r,A2r),e($r,an),e(an,y2r),e(an,eve),e(eve,L2r),e(an,x2r),e(an,ove),e(ove,$2r),e(an,k2r),e(an,rve),e(rve,S2r),e(an,R2r),e($r,P2r),e($r,ye),e(ye,iM),e(iM,tve),e(tve,B2r),e(iM,I2r),e(iM,pH),e(pH,q2r),e(iM,N2r),e(ye,j2r),e(ye,dM),e(dM,ave),e(ave,D2r),e(dM,G2r),e(dM,uH),e(uH,O2r),e(dM,V2r),e(ye,X2r),e(ye,cM),e(cM,nve),e(nve,z2r),e(cM,W2r),e(cM,_H),e(_H,Q2r),e(cM,H2r),e(ye,U2r),e(ye,fM),e(fM,sve),e(sve,J2r),e(fM,Y2r),e(fM,bH),e(bH,K2r),e(fM,Z2r),e(ye,evr),e(ye,mM),e(mM,lve),e(lve,ovr),e(mM,rvr),e(mM,vH),e(vH,tvr),e(mM,avr),e(ye,nvr),e(ye,gM),e(gM,ive),e(ive,svr),e(gM,lvr),e(gM,FH),e(FH,ivr),e(gM,dvr),e(ye,cvr),e(ye,hM),e(hM,dve),e(dve,fvr),e(hM,mvr),e(hM,TH),e(TH,gvr),e(hM,hvr),e(ye,pvr),e(ye,pM),e(pM,cve),e(cve,uvr),e(pM,_vr),e(pM,MH),e(MH,bvr),e(pM,vvr),e(ye,Fvr),e(ye,uM),e(uM,fve),e(fve,Tvr),e(uM,Mvr),e(uM,EH),e(EH,Evr),e(uM,Cvr),e(ye,wvr),e(ye,_M),e(_M,mve),e(mve,Avr),e(_M,yvr),e(_M,CH),e(CH,Lvr),e(_M,xvr),e($r,$vr),M(bM,$r,null),b(f,lje,_),b(f,nc,_),e(nc,vM),e(vM,gve),M(IL,gve,null),e(nc,kvr),e(nc,hve),e(hve,Svr),b(f,ije,_),b(f,tr,_),M(qL,tr,null),e(tr,Rvr),e(tr,sc),e(sc,Pvr),e(sc,wH),e(wH,Bvr),e(sc,Ivr),e(sc,AH),e(AH,qvr),e(sc,Nvr),e(tr,jvr),e(tr,NL),e(NL,Dvr),e(NL,pve),e(pve,Gvr),e(NL,Ovr),e(tr,Vvr),e(tr,Rt),M(jL,Rt,null),e(Rt,Xvr),e(Rt,uve),e(uve,zvr),e(Rt,Wvr),e(Rt,lc),e(lc,Qvr),e(lc,_ve),e(_ve,Hvr),e(lc,Uvr),e(lc,yH),e(yH,Jvr),e(lc,Yvr),e(Rt,Kvr),M(FM,Rt,null),e(tr,Zvr),e(tr,kr),M(DL,kr,null),e(kr,e3r),e(kr,bve),e(bve,o3r),e(kr,r3r),e(kr,nn),e(nn,t3r),e(nn,vve),e(vve,a3r),e(nn,n3r),e(nn,Fve),e(Fve,s3r),e(nn,l3r),e(nn,Tve),e(Tve,i3r),e(nn,d3r),e(kr,c3r),e(kr,oe),e(oe,TM),e(TM,Mve),e(Mve,f3r),e(TM,m3r),e(TM,LH),e(LH,g3r),e(TM,h3r),e(oe,p3r),e(oe,MM),e(MM,Eve),e(Eve,u3r),e(MM,_3r),e(MM,xH),e(xH,b3r),e(MM,v3r),e(oe,F3r),e(oe,EM),e(EM,Cve),e(Cve,T3r),e(EM,M3r),e(EM,$H),e($H,E3r),e(EM,C3r),e(oe,w3r),e(oe,CM),e(CM,wve),e(wve,A3r),e(CM,y3r),e(CM,kH),e(kH,L3r),e(CM,x3r),e(oe,$3r),e(oe,wM),e(wM,Ave),e(Ave,k3r),e(wM,S3r),e(wM,SH),e(SH,R3r),e(wM,P3r),e(oe,B3r),e(oe,AM),e(AM,yve),e(yve,I3r),e(AM,q3r),e(AM,RH),e(RH,N3r),e(AM,j3r),e(oe,D3r),e(oe,yM),e(yM,Lve),e(Lve,G3r),e(yM,O3r),e(yM,PH),e(PH,V3r),e(yM,X3r),e(oe,z3r),e(oe,LM),e(LM,xve),e(xve,W3r),e(LM,Q3r),e(LM,BH),e(BH,H3r),e(LM,U3r),e(oe,J3r),e(oe,xM),e(xM,$ve),e($ve,Y3r),e(xM,K3r),e(xM,IH),e(IH,Z3r),e(xM,eFr),e(oe,oFr),e(oe,$M),e($M,kve),e(kve,rFr),e($M,tFr),e($M,qH),e(qH,aFr),e($M,nFr),e(oe,sFr),e(oe,kM),e(kM,Sve),e(Sve,lFr),e(kM,iFr),e(kM,NH),e(NH,dFr),e(kM,cFr),e(oe,fFr),e(oe,SM),e(SM,Rve),e(Rve,mFr),e(SM,gFr),e(SM,jH),e(jH,hFr),e(SM,pFr),e(oe,uFr),e(oe,RM),e(RM,Pve),e(Pve,_Fr),e(RM,bFr),e(RM,DH),e(DH,vFr),e(RM,FFr),e(oe,TFr),e(oe,PM),e(PM,Bve),e(Bve,MFr),e(PM,EFr),e(PM,GH),e(GH,CFr),e(PM,wFr),e(oe,AFr),e(oe,BM),e(BM,Ive),e(Ive,yFr),e(BM,LFr),e(BM,OH),e(OH,xFr),e(BM,$Fr),e(oe,kFr),e(oe,IM),e(IM,qve),e(qve,SFr),e(IM,RFr),e(IM,VH),e(VH,PFr),e(IM,BFr),e(oe,IFr),e(oe,qM),e(qM,Nve),e(Nve,qFr),e(qM,NFr),e(qM,XH),e(XH,jFr),e(qM,DFr),e(oe,GFr),e(oe,NM),e(NM,jve),e(jve,OFr),e(NM,VFr),e(NM,zH),e(zH,XFr),e(NM,zFr),e(oe,WFr),e(oe,jM),e(jM,Dve),e(Dve,QFr),e(jM,HFr),e(jM,WH),e(WH,UFr),e(jM,JFr),e(oe,YFr),e(oe,DM),e(DM,Gve),e(Gve,KFr),e(DM,ZFr),e(DM,QH),e(QH,eTr),e(DM,oTr),e(oe,rTr),e(oe,GM),e(GM,Ove),e(Ove,tTr),e(GM,aTr),e(GM,HH),e(HH,nTr),e(GM,sTr),e(oe,lTr),e(oe,OM),e(OM,Vve),e(Vve,iTr),e(OM,dTr),e(OM,UH),e(UH,cTr),e(OM,fTr),e(oe,mTr),e(oe,VM),e(VM,Xve),e(Xve,gTr),e(VM,hTr),e(VM,JH),e(JH,pTr),e(VM,uTr),e(oe,_Tr),e(oe,XM),e(XM,zve),e(zve,bTr),e(XM,vTr),e(XM,YH),e(YH,FTr),e(XM,TTr),e(oe,MTr),e(oe,zM),e(zM,Wve),e(Wve,ETr),e(zM,CTr),e(zM,KH),e(KH,wTr),e(zM,ATr),e(oe,yTr),e(oe,WM),e(WM,Qve),e(Qve,LTr),e(WM,xTr),e(WM,ZH),e(ZH,$Tr),e(WM,kTr),e(kr,STr),M(QM,kr,null),b(f,dje,_),b(f,ic,_),e(ic,HM),e(HM,Hve),M(GL,Hve,null),e(ic,RTr),e(ic,Uve),e(Uve,PTr),b(f,cje,_),b(f,ar,_),M(OL,ar,null),e(ar,BTr),e(ar,dc),e(dc,ITr),e(dc,eU),e(eU,qTr),e(dc,NTr),e(dc,oU),e(oU,jTr),e(dc,DTr),e(ar,GTr),e(ar,VL),e(VL,OTr),e(VL,Jve),e(Jve,VTr),e(VL,XTr),e(ar,zTr),e(ar,Pt),M(XL,Pt,null),e(Pt,WTr),e(Pt,Yve),e(Yve,QTr),e(Pt,HTr),e(Pt,cc),e(cc,UTr),e(cc,Kve),e(Kve,JTr),e(cc,YTr),e(cc,rU),e(rU,KTr),e(cc,ZTr),e(Pt,e7r),M(UM,Pt,null),e(ar,o7r),e(ar,Sr),M(zL,Sr,null),e(Sr,r7r),e(Sr,Zve),e(Zve,t7r),e(Sr,a7r),e(Sr,sn),e(sn,n7r),e(sn,e3e),e(e3e,s7r),e(sn,l7r),e(sn,o3e),e(o3e,i7r),e(sn,d7r),e(sn,r3e),e(r3e,c7r),e(sn,f7r),e(Sr,m7r),e(Sr,pe),e(pe,JM),e(JM,t3e),e(t3e,g7r),e(JM,h7r),e(JM,tU),e(tU,p7r),e(JM,u7r),e(pe,_7r),e(pe,YM),e(YM,a3e),e(a3e,b7r),e(YM,v7r),e(YM,aU),e(aU,F7r),e(YM,T7r),e(pe,M7r),e(pe,KM),e(KM,n3e),e(n3e,E7r),e(KM,C7r),e(KM,nU),e(nU,w7r),e(KM,A7r),e(pe,y7r),e(pe,ZM),e(ZM,s3e),e(s3e,L7r),e(ZM,x7r),e(ZM,sU),e(sU,$7r),e(ZM,k7r),e(pe,S7r),e(pe,e4),e(e4,l3e),e(l3e,R7r),e(e4,P7r),e(e4,lU),e(lU,B7r),e(e4,I7r),e(pe,q7r),e(pe,o4),e(o4,i3e),e(i3e,N7r),e(o4,j7r),e(o4,iU),e(iU,D7r),e(o4,G7r),e(pe,O7r),e(pe,r4),e(r4,d3e),e(d3e,V7r),e(r4,X7r),e(r4,dU),e(dU,z7r),e(r4,W7r),e(pe,Q7r),e(pe,t4),e(t4,c3e),e(c3e,H7r),e(t4,U7r),e(t4,cU),e(cU,J7r),e(t4,Y7r),e(pe,K7r),e(pe,a4),e(a4,f3e),e(f3e,Z7r),e(a4,eMr),e(a4,fU),e(fU,oMr),e(a4,rMr),e(pe,tMr),e(pe,n4),e(n4,m3e),e(m3e,aMr),e(n4,nMr),e(n4,mU),e(mU,sMr),e(n4,lMr),e(pe,iMr),e(pe,s4),e(s4,g3e),e(g3e,dMr),e(s4,cMr),e(s4,gU),e(gU,fMr),e(s4,mMr),e(pe,gMr),e(pe,l4),e(l4,h3e),e(h3e,hMr),e(l4,pMr),e(l4,hU),e(hU,uMr),e(l4,_Mr),e(pe,bMr),e(pe,i4),e(i4,p3e),e(p3e,vMr),e(i4,FMr),e(i4,pU),e(pU,TMr),e(i4,MMr),e(pe,EMr),e(pe,d4),e(d4,u3e),e(u3e,CMr),e(d4,wMr),e(d4,uU),e(uU,AMr),e(d4,yMr),e(pe,LMr),e(pe,c4),e(c4,_3e),e(_3e,xMr),e(c4,$Mr),e(c4,_U),e(_U,kMr),e(c4,SMr),e(pe,RMr),e(pe,f4),e(f4,b3e),e(b3e,PMr),e(f4,BMr),e(f4,bU),e(bU,IMr),e(f4,qMr),e(pe,NMr),e(pe,m4),e(m4,v3e),e(v3e,jMr),e(m4,DMr),e(m4,vU),e(vU,GMr),e(m4,OMr),e(Sr,VMr),M(g4,Sr,null),b(f,fje,_),b(f,fc,_),e(fc,h4),e(h4,F3e),M(WL,F3e,null),e(fc,XMr),e(fc,T3e),e(T3e,zMr),b(f,mje,_),b(f,nr,_),M(QL,nr,null),e(nr,WMr),e(nr,mc),e(mc,QMr),e(mc,FU),e(FU,HMr),e(mc,UMr),e(mc,TU),e(TU,JMr),e(mc,YMr),e(nr,KMr),e(nr,HL),e(HL,ZMr),e(HL,M3e),e(M3e,e4r),e(HL,o4r),e(nr,r4r),e(nr,Bt),M(UL,Bt,null),e(Bt,t4r),e(Bt,E3e),e(E3e,a4r),e(Bt,n4r),e(Bt,gc),e(gc,s4r),e(gc,C3e),e(C3e,l4r),e(gc,i4r),e(gc,MU),e(MU,d4r),e(gc,c4r),e(Bt,f4r),M(p4,Bt,null),e(nr,m4r),e(nr,Rr),M(JL,Rr,null),e(Rr,g4r),e(Rr,w3e),e(w3e,h4r),e(Rr,p4r),e(Rr,ln),e(ln,u4r),e(ln,A3e),e(A3e,_4r),e(ln,b4r),e(ln,y3e),e(y3e,v4r),e(ln,F4r),e(ln,L3e),e(L3e,T4r),e(ln,M4r),e(Rr,E4r),e(Rr,YL),e(YL,u4),e(u4,x3e),e(x3e,C4r),e(u4,w4r),e(u4,EU),e(EU,A4r),e(u4,y4r),e(YL,L4r),e(YL,_4),e(_4,$3e),e($3e,x4r),e(_4,$4r),e(_4,CU),e(CU,k4r),e(_4,S4r),e(Rr,R4r),M(b4,Rr,null),b(f,gje,_),b(f,hc,_),e(hc,v4),e(v4,k3e),M(KL,k3e,null),e(hc,P4r),e(hc,S3e),e(S3e,B4r),b(f,hje,_),b(f,sr,_),M(ZL,sr,null),e(sr,I4r),e(sr,pc),e(pc,q4r),e(pc,wU),e(wU,N4r),e(pc,j4r),e(pc,AU),e(AU,D4r),e(pc,G4r),e(sr,O4r),e(sr,e9),e(e9,V4r),e(e9,R3e),e(R3e,X4r),e(e9,z4r),e(sr,W4r),e(sr,It),M(o9,It,null),e(It,Q4r),e(It,P3e),e(P3e,H4r),e(It,U4r),e(It,uc),e(uc,J4r),e(uc,B3e),e(B3e,Y4r),e(uc,K4r),e(uc,yU),e(yU,Z4r),e(uc,eEr),e(It,oEr),M(F4,It,null),e(sr,rEr),e(sr,Pr),M(r9,Pr,null),e(Pr,tEr),e(Pr,I3e),e(I3e,aEr),e(Pr,nEr),e(Pr,dn),e(dn,sEr),e(dn,q3e),e(q3e,lEr),e(dn,iEr),e(dn,N3e),e(N3e,dEr),e(dn,cEr),e(dn,j3e),e(j3e,fEr),e(dn,mEr),e(Pr,gEr),e(Pr,D3e),e(D3e,T4),e(T4,G3e),e(G3e,hEr),e(T4,pEr),e(T4,LU),e(LU,uEr),e(T4,_Er),e(Pr,bEr),M(M4,Pr,null),b(f,pje,_),b(f,_c,_),e(_c,E4),e(E4,O3e),M(t9,O3e,null),e(_c,vEr),e(_c,V3e),e(V3e,FEr),b(f,uje,_),b(f,lr,_),M(a9,lr,null),e(lr,TEr),e(lr,bc),e(bc,MEr),e(bc,xU),e(xU,EEr),e(bc,CEr),e(bc,$U),e($U,wEr),e(bc,AEr),e(lr,yEr),e(lr,n9),e(n9,LEr),e(n9,X3e),e(X3e,xEr),e(n9,$Er),e(lr,kEr),e(lr,qt),M(s9,qt,null),e(qt,SEr),e(qt,z3e),e(z3e,REr),e(qt,PEr),e(qt,vc),e(vc,BEr),e(vc,W3e),e(W3e,IEr),e(vc,qEr),e(vc,kU),e(kU,NEr),e(vc,jEr),e(qt,DEr),M(C4,qt,null),e(lr,GEr),e(lr,Br),M(l9,Br,null),e(Br,OEr),e(Br,Q3e),e(Q3e,VEr),e(Br,XEr),e(Br,cn),e(cn,zEr),e(cn,H3e),e(H3e,WEr),e(cn,QEr),e(cn,U3e),e(U3e,HEr),e(cn,UEr),e(cn,J3e),e(J3e,JEr),e(cn,YEr),e(Br,KEr),e(Br,de),e(de,w4),e(w4,Y3e),e(Y3e,ZEr),e(w4,eCr),e(w4,SU),e(SU,oCr),e(w4,rCr),e(de,tCr),e(de,A4),e(A4,K3e),e(K3e,aCr),e(A4,nCr),e(A4,RU),e(RU,sCr),e(A4,lCr),e(de,iCr),e(de,y4),e(y4,Z3e),e(Z3e,dCr),e(y4,cCr),e(y4,PU),e(PU,fCr),e(y4,mCr),e(de,gCr),e(de,L4),e(L4,eFe),e(eFe,hCr),e(L4,pCr),e(L4,BU),e(BU,uCr),e(L4,_Cr),e(de,bCr),e(de,x4),e(x4,oFe),e(oFe,vCr),e(x4,FCr),e(x4,IU),e(IU,TCr),e(x4,MCr),e(de,ECr),e(de,$4),e($4,rFe),e(rFe,CCr),e($4,wCr),e($4,qU),e(qU,ACr),e($4,yCr),e(de,LCr),e(de,k4),e(k4,tFe),e(tFe,xCr),e(k4,$Cr),e(k4,NU),e(NU,kCr),e(k4,SCr),e(de,RCr),e(de,S4),e(S4,aFe),e(aFe,PCr),e(S4,BCr),e(S4,jU),e(jU,ICr),e(S4,qCr),e(de,NCr),e(de,R4),e(R4,nFe),e(nFe,jCr),e(R4,DCr),e(R4,DU),e(DU,GCr),e(R4,OCr),e(de,VCr),e(de,P4),e(P4,sFe),e(sFe,XCr),e(P4,zCr),e(P4,GU),e(GU,WCr),e(P4,QCr),e(de,HCr),e(de,B4),e(B4,lFe),e(lFe,UCr),e(B4,JCr),e(B4,OU),e(OU,YCr),e(B4,KCr),e(de,ZCr),e(de,I4),e(I4,iFe),e(iFe,e5r),e(I4,o5r),e(I4,VU),e(VU,r5r),e(I4,t5r),e(de,a5r),e(de,q4),e(q4,dFe),e(dFe,n5r),e(q4,s5r),e(q4,XU),e(XU,l5r),e(q4,i5r),e(de,d5r),e(de,N4),e(N4,cFe),e(cFe,c5r),e(N4,f5r),e(N4,zU),e(zU,m5r),e(N4,g5r),e(de,h5r),e(de,j4),e(j4,fFe),e(fFe,p5r),e(j4,u5r),e(j4,WU),e(WU,_5r),e(j4,b5r),e(de,v5r),e(de,D4),e(D4,mFe),e(mFe,F5r),e(D4,T5r),e(D4,QU),e(QU,M5r),e(D4,E5r),e(de,C5r),e(de,G4),e(G4,gFe),e(gFe,w5r),e(G4,A5r),e(G4,HU),e(HU,y5r),e(G4,L5r),e(de,x5r),e(de,O4),e(O4,hFe),e(hFe,$5r),e(O4,k5r),e(O4,UU),e(UU,S5r),e(O4,R5r),e(de,P5r),e(de,V4),e(V4,pFe),e(pFe,B5r),e(V4,I5r),e(V4,JU),e(JU,q5r),e(V4,N5r),e(de,j5r),e(de,X4),e(X4,uFe),e(uFe,D5r),e(X4,G5r),e(X4,YU),e(YU,O5r),e(X4,V5r),e(Br,X5r),M(z4,Br,null),b(f,_je,_),b(f,Fc,_),e(Fc,W4),e(W4,_Fe),M(i9,_Fe,null),e(Fc,z5r),e(Fc,bFe),e(bFe,W5r),b(f,bje,_),b(f,ir,_),M(d9,ir,null),e(ir,Q5r),e(ir,Tc),e(Tc,H5r),e(Tc,KU),e(KU,U5r),e(Tc,J5r),e(Tc,ZU),e(ZU,Y5r),e(Tc,K5r),e(ir,Z5r),e(ir,c9),e(c9,ewr),e(c9,vFe),e(vFe,owr),e(c9,rwr),e(ir,twr),e(ir,Nt),M(f9,Nt,null),e(Nt,awr),e(Nt,FFe),e(FFe,nwr),e(Nt,swr),e(Nt,Mc),e(Mc,lwr),e(Mc,TFe),e(TFe,iwr),e(Mc,dwr),e(Mc,eJ),e(eJ,cwr),e(Mc,fwr),e(Nt,mwr),M(Q4,Nt,null),e(ir,gwr),e(ir,Ir),M(m9,Ir,null),e(Ir,hwr),e(Ir,MFe),e(MFe,pwr),e(Ir,uwr),e(Ir,fn),e(fn,_wr),e(fn,EFe),e(EFe,bwr),e(fn,vwr),e(fn,CFe),e(CFe,Fwr),e(fn,Twr),e(fn,wFe),e(wFe,Mwr),e(fn,Ewr),e(Ir,Cwr),e(Ir,ce),e(ce,H4),e(H4,AFe),e(AFe,wwr),e(H4,Awr),e(H4,oJ),e(oJ,ywr),e(H4,Lwr),e(ce,xwr),e(ce,U4),e(U4,yFe),e(yFe,$wr),e(U4,kwr),e(U4,rJ),e(rJ,Swr),e(U4,Rwr),e(ce,Pwr),e(ce,J4),e(J4,LFe),e(LFe,Bwr),e(J4,Iwr),e(J4,tJ),e(tJ,qwr),e(J4,Nwr),e(ce,jwr),e(ce,Y4),e(Y4,xFe),e(xFe,Dwr),e(Y4,Gwr),e(Y4,aJ),e(aJ,Owr),e(Y4,Vwr),e(ce,Xwr),e(ce,K4),e(K4,$Fe),e($Fe,zwr),e(K4,Wwr),e(K4,nJ),e(nJ,Qwr),e(K4,Hwr),e(ce,Uwr),e(ce,Z4),e(Z4,kFe),e(kFe,Jwr),e(Z4,Ywr),e(Z4,sJ),e(sJ,Kwr),e(Z4,Zwr),e(ce,e0r),e(ce,eE),e(eE,SFe),e(SFe,o0r),e(eE,r0r),e(eE,lJ),e(lJ,t0r),e(eE,a0r),e(ce,n0r),e(ce,oE),e(oE,RFe),e(RFe,s0r),e(oE,l0r),e(oE,iJ),e(iJ,i0r),e(oE,d0r),e(ce,c0r),e(ce,rE),e(rE,PFe),e(PFe,f0r),e(rE,m0r),e(rE,dJ),e(dJ,g0r),e(rE,h0r),e(ce,p0r),e(ce,tE),e(tE,BFe),e(BFe,u0r),e(tE,_0r),e(tE,cJ),e(cJ,b0r),e(tE,v0r),e(ce,F0r),e(ce,aE),e(aE,IFe),e(IFe,T0r),e(aE,M0r),e(aE,fJ),e(fJ,E0r),e(aE,C0r),e(ce,w0r),e(ce,nE),e(nE,qFe),e(qFe,A0r),e(nE,y0r),e(nE,mJ),e(mJ,L0r),e(nE,x0r),e(ce,$0r),e(ce,sE),e(sE,NFe),e(NFe,k0r),e(sE,S0r),e(sE,gJ),e(gJ,R0r),e(sE,P0r),e(ce,B0r),e(ce,lE),e(lE,jFe),e(jFe,I0r),e(lE,q0r),e(lE,hJ),e(hJ,N0r),e(lE,j0r),e(ce,D0r),e(ce,iE),e(iE,DFe),e(DFe,G0r),e(iE,O0r),e(iE,pJ),e(pJ,V0r),e(iE,X0r),e(ce,z0r),e(ce,dE),e(dE,GFe),e(GFe,W0r),e(dE,Q0r),e(dE,uJ),e(uJ,H0r),e(dE,U0r),e(ce,J0r),e(ce,cE),e(cE,OFe),e(OFe,Y0r),e(cE,K0r),e(cE,_J),e(_J,Z0r),e(cE,eAr),e(ce,oAr),e(ce,fE),e(fE,VFe),e(VFe,rAr),e(fE,tAr),e(fE,bJ),e(bJ,aAr),e(fE,nAr),e(ce,sAr),e(ce,mE),e(mE,XFe),e(XFe,lAr),e(mE,iAr),e(mE,vJ),e(vJ,dAr),e(mE,cAr),e(ce,fAr),e(ce,gE),e(gE,zFe),e(zFe,mAr),e(gE,gAr),e(gE,FJ),e(FJ,hAr),e(gE,pAr),e(Ir,uAr),M(hE,Ir,null),b(f,vje,_),b(f,Ec,_),e(Ec,pE),e(pE,WFe),M(g9,WFe,null),e(Ec,_Ar),e(Ec,QFe),e(QFe,bAr),b(f,Fje,_),b(f,dr,_),M(h9,dr,null),e(dr,vAr),e(dr,Cc),e(Cc,FAr),e(Cc,TJ),e(TJ,TAr),e(Cc,MAr),e(Cc,MJ),e(MJ,EAr),e(Cc,CAr),e(dr,wAr),e(dr,p9),e(p9,AAr),e(p9,HFe),e(HFe,yAr),e(p9,LAr),e(dr,xAr),e(dr,jt),M(u9,jt,null),e(jt,$Ar),e(jt,UFe),e(UFe,kAr),e(jt,SAr),e(jt,wc),e(wc,RAr),e(wc,JFe),e(JFe,PAr),e(wc,BAr),e(wc,EJ),e(EJ,IAr),e(wc,qAr),e(jt,NAr),M(uE,jt,null),e(dr,jAr),e(dr,qr),M(_9,qr,null),e(qr,DAr),e(qr,YFe),e(YFe,GAr),e(qr,OAr),e(qr,mn),e(mn,VAr),e(mn,KFe),e(KFe,XAr),e(mn,zAr),e(mn,ZFe),e(ZFe,WAr),e(mn,QAr),e(mn,eTe),e(eTe,HAr),e(mn,UAr),e(qr,JAr),e(qr,oTe),e(oTe,_E),e(_E,rTe),e(rTe,YAr),e(_E,KAr),e(_E,CJ),e(CJ,ZAr),e(_E,e6r),e(qr,o6r),M(bE,qr,null),b(f,Tje,_),b(f,Ac,_),e(Ac,vE),e(vE,tTe),M(b9,tTe,null),e(Ac,r6r),e(Ac,aTe),e(aTe,t6r),b(f,Mje,_),b(f,cr,_),M(v9,cr,null),e(cr,a6r),e(cr,yc),e(yc,n6r),e(yc,wJ),e(wJ,s6r),e(yc,l6r),e(yc,AJ),e(AJ,i6r),e(yc,d6r),e(cr,c6r),e(cr,F9),e(F9,f6r),e(F9,nTe),e(nTe,m6r),e(F9,g6r),e(cr,h6r),e(cr,Dt),M(T9,Dt,null),e(Dt,p6r),e(Dt,sTe),e(sTe,u6r),e(Dt,_6r),e(Dt,Lc),e(Lc,b6r),e(Lc,lTe),e(lTe,v6r),e(Lc,F6r),e(Lc,yJ),e(yJ,T6r),e(Lc,M6r),e(Dt,E6r),M(FE,Dt,null),e(cr,C6r),e(cr,Nr),M(M9,Nr,null),e(Nr,w6r),e(Nr,iTe),e(iTe,A6r),e(Nr,y6r),e(Nr,gn),e(gn,L6r),e(gn,dTe),e(dTe,x6r),e(gn,$6r),e(gn,cTe),e(cTe,k6r),e(gn,S6r),e(gn,fTe),e(fTe,R6r),e(gn,P6r),e(Nr,B6r),e(Nr,mTe),e(mTe,TE),e(TE,gTe),e(gTe,I6r),e(TE,q6r),e(TE,LJ),e(LJ,N6r),e(TE,j6r),e(Nr,D6r),M(ME,Nr,null),b(f,Eje,_),b(f,xc,_),e(xc,EE),e(EE,hTe),M(E9,hTe,null),e(xc,G6r),e(xc,pTe),e(pTe,O6r),b(f,Cje,_),b(f,fr,_),M(C9,fr,null),e(fr,V6r),e(fr,$c),e($c,X6r),e($c,xJ),e(xJ,z6r),e($c,W6r),e($c,$J),e($J,Q6r),e($c,H6r),e(fr,U6r),e(fr,w9),e(w9,J6r),e(w9,uTe),e(uTe,Y6r),e(w9,K6r),e(fr,Z6r),e(fr,Gt),M(A9,Gt,null),e(Gt,eyr),e(Gt,_Te),e(_Te,oyr),e(Gt,ryr),e(Gt,kc),e(kc,tyr),e(kc,bTe),e(bTe,ayr),e(kc,nyr),e(kc,kJ),e(kJ,syr),e(kc,lyr),e(Gt,iyr),M(CE,Gt,null),e(fr,dyr),e(fr,jr),M(y9,jr,null),e(jr,cyr),e(jr,vTe),e(vTe,fyr),e(jr,myr),e(jr,hn),e(hn,gyr),e(hn,FTe),e(FTe,hyr),e(hn,pyr),e(hn,TTe),e(TTe,uyr),e(hn,_yr),e(hn,MTe),e(MTe,byr),e(hn,vyr),e(jr,Fyr),e(jr,re),e(re,wE),e(wE,ETe),e(ETe,Tyr),e(wE,Myr),e(wE,SJ),e(SJ,Eyr),e(wE,Cyr),e(re,wyr),e(re,AE),e(AE,CTe),e(CTe,Ayr),e(AE,yyr),e(AE,RJ),e(RJ,Lyr),e(AE,xyr),e(re,$yr),e(re,yE),e(yE,wTe),e(wTe,kyr),e(yE,Syr),e(yE,PJ),e(PJ,Ryr),e(yE,Pyr),e(re,Byr),e(re,LE),e(LE,ATe),e(ATe,Iyr),e(LE,qyr),e(LE,BJ),e(BJ,Nyr),e(LE,jyr),e(re,Dyr),e(re,xE),e(xE,yTe),e(yTe,Gyr),e(xE,Oyr),e(xE,IJ),e(IJ,Vyr),e(xE,Xyr),e(re,zyr),e(re,$E),e($E,LTe),e(LTe,Wyr),e($E,Qyr),e($E,qJ),e(qJ,Hyr),e($E,Uyr),e(re,Jyr),e(re,kE),e(kE,xTe),e(xTe,Yyr),e(kE,Kyr),e(kE,NJ),e(NJ,Zyr),e(kE,eLr),e(re,oLr),e(re,SE),e(SE,$Te),e($Te,rLr),e(SE,tLr),e(SE,jJ),e(jJ,aLr),e(SE,nLr),e(re,sLr),e(re,RE),e(RE,kTe),e(kTe,lLr),e(RE,iLr),e(RE,DJ),e(DJ,dLr),e(RE,cLr),e(re,fLr),e(re,PE),e(PE,STe),e(STe,mLr),e(PE,gLr),e(PE,GJ),e(GJ,hLr),e(PE,pLr),e(re,uLr),e(re,BE),e(BE,RTe),e(RTe,_Lr),e(BE,bLr),e(BE,OJ),e(OJ,vLr),e(BE,FLr),e(re,TLr),e(re,IE),e(IE,PTe),e(PTe,MLr),e(IE,ELr),e(IE,VJ),e(VJ,CLr),e(IE,wLr),e(re,ALr),e(re,qE),e(qE,BTe),e(BTe,yLr),e(qE,LLr),e(qE,XJ),e(XJ,xLr),e(qE,$Lr),e(re,kLr),e(re,NE),e(NE,ITe),e(ITe,SLr),e(NE,RLr),e(NE,zJ),e(zJ,PLr),e(NE,BLr),e(re,ILr),e(re,jE),e(jE,qTe),e(qTe,qLr),e(jE,NLr),e(jE,WJ),e(WJ,jLr),e(jE,DLr),e(re,GLr),e(re,DE),e(DE,NTe),e(NTe,OLr),e(DE,VLr),e(DE,QJ),e(QJ,XLr),e(DE,zLr),e(re,WLr),e(re,GE),e(GE,jTe),e(jTe,QLr),e(GE,HLr),e(GE,HJ),e(HJ,ULr),e(GE,JLr),e(re,YLr),e(re,OE),e(OE,DTe),e(DTe,KLr),e(OE,ZLr),e(OE,UJ),e(UJ,e9r),e(OE,o9r),e(re,r9r),e(re,VE),e(VE,GTe),e(GTe,t9r),e(VE,a9r),e(VE,JJ),e(JJ,n9r),e(VE,s9r),e(re,l9r),e(re,XE),e(XE,OTe),e(OTe,i9r),e(XE,d9r),e(XE,YJ),e(YJ,c9r),e(XE,f9r),e(re,m9r),e(re,zE),e(zE,VTe),e(VTe,g9r),e(zE,h9r),e(zE,KJ),e(KJ,p9r),e(zE,u9r),e(re,_9r),e(re,WE),e(WE,XTe),e(XTe,b9r),e(WE,v9r),e(WE,ZJ),e(ZJ,F9r),e(WE,T9r),e(re,M9r),e(re,QE),e(QE,zTe),e(zTe,E9r),e(QE,C9r),e(QE,eY),e(eY,w9r),e(QE,A9r),e(re,y9r),e(re,HE),e(HE,WTe),e(WTe,L9r),e(HE,x9r),e(HE,oY),e(oY,$9r),e(HE,k9r),e(re,S9r),e(re,UE),e(UE,QTe),e(QTe,R9r),e(UE,P9r),e(UE,rY),e(rY,B9r),e(UE,I9r),e(re,q9r),e(re,JE),e(JE,HTe),e(HTe,N9r),e(JE,j9r),e(JE,tY),e(tY,D9r),e(JE,G9r),e(jr,O9r),M(YE,jr,null),b(f,wje,_),b(f,Sc,_),e(Sc,KE),e(KE,UTe),M(L9,UTe,null),e(Sc,V9r),e(Sc,JTe),e(JTe,X9r),b(f,Aje,_),b(f,mr,_),M(x9,mr,null),e(mr,z9r),e(mr,Rc),e(Rc,W9r),e(Rc,aY),e(aY,Q9r),e(Rc,H9r),e(Rc,nY),e(nY,U9r),e(Rc,J9r),e(mr,Y9r),e(mr,$9),e($9,K9r),e($9,YTe),e(YTe,Z9r),e($9,exr),e(mr,oxr),e(mr,Ot),M(k9,Ot,null),e(Ot,rxr),e(Ot,KTe),e(KTe,txr),e(Ot,axr),e(Ot,Pc),e(Pc,nxr),e(Pc,ZTe),e(ZTe,sxr),e(Pc,lxr),e(Pc,sY),e(sY,ixr),e(Pc,dxr),e(Ot,cxr),M(ZE,Ot,null),e(mr,fxr),e(mr,Dr),M(S9,Dr,null),e(Dr,mxr),e(Dr,e7e),e(e7e,gxr),e(Dr,hxr),e(Dr,pn),e(pn,pxr),e(pn,o7e),e(o7e,uxr),e(pn,_xr),e(pn,r7e),e(r7e,bxr),e(pn,vxr),e(pn,t7e),e(t7e,Fxr),e(pn,Txr),e(Dr,Mxr),e(Dr,Le),e(Le,eC),e(eC,a7e),e(a7e,Exr),e(eC,Cxr),e(eC,lY),e(lY,wxr),e(eC,Axr),e(Le,yxr),e(Le,oC),e(oC,n7e),e(n7e,Lxr),e(oC,xxr),e(oC,iY),e(iY,$xr),e(oC,kxr),e(Le,Sxr),e(Le,rC),e(rC,s7e),e(s7e,Rxr),e(rC,Pxr),e(rC,dY),e(dY,Bxr),e(rC,Ixr),e(Le,qxr),e(Le,tC),e(tC,l7e),e(l7e,Nxr),e(tC,jxr),e(tC,cY),e(cY,Dxr),e(tC,Gxr),e(Le,Oxr),e(Le,aC),e(aC,i7e),e(i7e,Vxr),e(aC,Xxr),e(aC,fY),e(fY,zxr),e(aC,Wxr),e(Le,Qxr),e(Le,nC),e(nC,d7e),e(d7e,Hxr),e(nC,Uxr),e(nC,mY),e(mY,Jxr),e(nC,Yxr),e(Le,Kxr),e(Le,sC),e(sC,c7e),e(c7e,Zxr),e(sC,e$r),e(sC,gY),e(gY,o$r),e(sC,r$r),e(Le,t$r),e(Le,lC),e(lC,f7e),e(f7e,a$r),e(lC,n$r),e(lC,hY),e(hY,s$r),e(lC,l$r),e(Le,i$r),e(Le,iC),e(iC,m7e),e(m7e,d$r),e(iC,c$r),e(iC,pY),e(pY,f$r),e(iC,m$r),e(Le,g$r),e(Le,dC),e(dC,g7e),e(g7e,h$r),e(dC,p$r),e(dC,uY),e(uY,u$r),e(dC,_$r),e(Dr,b$r),M(cC,Dr,null),b(f,yje,_),b(f,Bc,_),e(Bc,fC),e(fC,h7e),M(R9,h7e,null),e(Bc,v$r),e(Bc,p7e),e(p7e,F$r),b(f,Lje,_),b(f,gr,_),M(P9,gr,null),e(gr,T$r),e(gr,Ic),e(Ic,M$r),e(Ic,_Y),e(_Y,E$r),e(Ic,C$r),e(Ic,bY),e(bY,w$r),e(Ic,A$r),e(gr,y$r),e(gr,B9),e(B9,L$r),e(B9,u7e),e(u7e,x$r),e(B9,$$r),e(gr,k$r),e(gr,Vt),M(I9,Vt,null),e(Vt,S$r),e(Vt,_7e),e(_7e,R$r),e(Vt,P$r),e(Vt,qc),e(qc,B$r),e(qc,b7e),e(b7e,I$r),e(qc,q$r),e(qc,vY),e(vY,N$r),e(qc,j$r),e(Vt,D$r),M(mC,Vt,null),e(gr,G$r),e(gr,Gr),M(q9,Gr,null),e(Gr,O$r),e(Gr,v7e),e(v7e,V$r),e(Gr,X$r),e(Gr,un),e(un,z$r),e(un,F7e),e(F7e,W$r),e(un,Q$r),e(un,T7e),e(T7e,H$r),e(un,U$r),e(un,M7e),e(M7e,J$r),e(un,Y$r),e(Gr,K$r),e(Gr,Ee),e(Ee,gC),e(gC,E7e),e(E7e,Z$r),e(gC,ekr),e(gC,FY),e(FY,okr),e(gC,rkr),e(Ee,tkr),e(Ee,hC),e(hC,C7e),e(C7e,akr),e(hC,nkr),e(hC,TY),e(TY,skr),e(hC,lkr),e(Ee,ikr),e(Ee,pC),e(pC,w7e),e(w7e,dkr),e(pC,ckr),e(pC,MY),e(MY,fkr),e(pC,mkr),e(Ee,gkr),e(Ee,uC),e(uC,A7e),e(A7e,hkr),e(uC,pkr),e(uC,EY),e(EY,ukr),e(uC,_kr),e(Ee,bkr),e(Ee,_C),e(_C,y7e),e(y7e,vkr),e(_C,Fkr),e(_C,CY),e(CY,Tkr),e(_C,Mkr),e(Ee,Ekr),e(Ee,bC),e(bC,L7e),e(L7e,Ckr),e(bC,wkr),e(bC,wY),e(wY,Akr),e(bC,ykr),e(Ee,Lkr),e(Ee,vC),e(vC,x7e),e(x7e,xkr),e(vC,$kr),e(vC,AY),e(AY,kkr),e(vC,Skr),e(Ee,Rkr),e(Ee,FC),e(FC,$7e),e($7e,Pkr),e(FC,Bkr),e(FC,yY),e(yY,Ikr),e(FC,qkr),e(Ee,Nkr),e(Ee,TC),e(TC,k7e),e(k7e,jkr),e(TC,Dkr),e(TC,LY),e(LY,Gkr),e(TC,Okr),e(Ee,Vkr),e(Ee,MC),e(MC,S7e),e(S7e,Xkr),e(MC,zkr),e(MC,xY),e(xY,Wkr),e(MC,Qkr),e(Ee,Hkr),e(Ee,EC),e(EC,R7e),e(R7e,Ukr),e(EC,Jkr),e(EC,$Y),e($Y,Ykr),e(EC,Kkr),e(Ee,Zkr),e(Ee,CC),e(CC,P7e),e(P7e,eSr),e(CC,oSr),e(CC,kY),e(kY,rSr),e(CC,tSr),e(Gr,aSr),M(wC,Gr,null),b(f,xje,_),b(f,Nc,_),e(Nc,AC),e(AC,B7e),M(N9,B7e,null),e(Nc,nSr),e(Nc,I7e),e(I7e,sSr),b(f,$je,_),b(f,hr,_),M(j9,hr,null),e(hr,lSr),e(hr,jc),e(jc,iSr),e(jc,SY),e(SY,dSr),e(jc,cSr),e(jc,RY),e(RY,fSr),e(jc,mSr),e(hr,gSr),e(hr,D9),e(D9,hSr),e(D9,q7e),e(q7e,pSr),e(D9,uSr),e(hr,_Sr),e(hr,Xt),M(G9,Xt,null),e(Xt,bSr),e(Xt,N7e),e(N7e,vSr),e(Xt,FSr),e(Xt,Dc),e(Dc,TSr),e(Dc,j7e),e(j7e,MSr),e(Dc,ESr),e(Dc,PY),e(PY,CSr),e(Dc,wSr),e(Xt,ASr),M(yC,Xt,null),e(hr,ySr),e(hr,Or),M(O9,Or,null),e(Or,LSr),e(Or,D7e),e(D7e,xSr),e(Or,$Sr),e(Or,_n),e(_n,kSr),e(_n,G7e),e(G7e,SSr),e(_n,RSr),e(_n,O7e),e(O7e,PSr),e(_n,BSr),e(_n,V7e),e(V7e,ISr),e(_n,qSr),e(Or,NSr),e(Or,xe),e(xe,LC),e(LC,X7e),e(X7e,jSr),e(LC,DSr),e(LC,BY),e(BY,GSr),e(LC,OSr),e(xe,VSr),e(xe,xC),e(xC,z7e),e(z7e,XSr),e(xC,zSr),e(xC,IY),e(IY,WSr),e(xC,QSr),e(xe,HSr),e(xe,$C),e($C,W7e),e(W7e,USr),e($C,JSr),e($C,qY),e(qY,YSr),e($C,KSr),e(xe,ZSr),e(xe,kC),e(kC,Q7e),e(Q7e,eRr),e(kC,oRr),e(kC,NY),e(NY,rRr),e(kC,tRr),e(xe,aRr),e(xe,SC),e(SC,H7e),e(H7e,nRr),e(SC,sRr),e(SC,jY),e(jY,lRr),e(SC,iRr),e(xe,dRr),e(xe,RC),e(RC,U7e),e(U7e,cRr),e(RC,fRr),e(RC,DY),e(DY,mRr),e(RC,gRr),e(xe,hRr),e(xe,PC),e(PC,J7e),e(J7e,pRr),e(PC,uRr),e(PC,GY),e(GY,_Rr),e(PC,bRr),e(xe,vRr),e(xe,BC),e(BC,Y7e),e(Y7e,FRr),e(BC,TRr),e(BC,OY),e(OY,MRr),e(BC,ERr),e(xe,CRr),e(xe,IC),e(IC,K7e),e(K7e,wRr),e(IC,ARr),e(IC,VY),e(VY,yRr),e(IC,LRr),e(xe,xRr),e(xe,qC),e(qC,Z7e),e(Z7e,$Rr),e(qC,kRr),e(qC,XY),e(XY,SRr),e(qC,RRr),e(Or,PRr),M(NC,Or,null),b(f,kje,_),b(f,Gc,_),e(Gc,jC),e(jC,eMe),M(V9,eMe,null),e(Gc,BRr),e(Gc,oMe),e(oMe,IRr),b(f,Sje,_),b(f,pr,_),M(X9,pr,null),e(pr,qRr),e(pr,Oc),e(Oc,NRr),e(Oc,zY),e(zY,jRr),e(Oc,DRr),e(Oc,WY),e(WY,GRr),e(Oc,ORr),e(pr,VRr),e(pr,z9),e(z9,XRr),e(z9,rMe),e(rMe,zRr),e(z9,WRr),e(pr,QRr),e(pr,zt),M(W9,zt,null),e(zt,HRr),e(zt,tMe),e(tMe,URr),e(zt,JRr),e(zt,Vc),e(Vc,YRr),e(Vc,aMe),e(aMe,KRr),e(Vc,ZRr),e(Vc,QY),e(QY,ePr),e(Vc,oPr),e(zt,rPr),M(DC,zt,null),e(pr,tPr),e(pr,Vr),M(Q9,Vr,null),e(Vr,aPr),e(Vr,nMe),e(nMe,nPr),e(Vr,sPr),e(Vr,bn),e(bn,lPr),e(bn,sMe),e(sMe,iPr),e(bn,dPr),e(bn,lMe),e(lMe,cPr),e(bn,fPr),e(bn,iMe),e(iMe,mPr),e(bn,gPr),e(Vr,hPr),e(Vr,Pe),e(Pe,GC),e(GC,dMe),e(dMe,pPr),e(GC,uPr),e(GC,HY),e(HY,_Pr),e(GC,bPr),e(Pe,vPr),e(Pe,OC),e(OC,cMe),e(cMe,FPr),e(OC,TPr),e(OC,UY),e(UY,MPr),e(OC,EPr),e(Pe,CPr),e(Pe,VC),e(VC,fMe),e(fMe,wPr),e(VC,APr),e(VC,JY),e(JY,yPr),e(VC,LPr),e(Pe,xPr),e(Pe,XC),e(XC,mMe),e(mMe,$Pr),e(XC,kPr),e(XC,YY),e(YY,SPr),e(XC,RPr),e(Pe,PPr),e(Pe,zC),e(zC,gMe),e(gMe,BPr),e(zC,IPr),e(zC,KY),e(KY,qPr),e(zC,NPr),e(Pe,jPr),e(Pe,WC),e(WC,hMe),e(hMe,DPr),e(WC,GPr),e(WC,ZY),e(ZY,OPr),e(WC,VPr),e(Pe,XPr),e(Pe,QC),e(QC,pMe),e(pMe,zPr),e(QC,WPr),e(QC,eK),e(eK,QPr),e(QC,HPr),e(Pe,UPr),e(Pe,HC),e(HC,uMe),e(uMe,JPr),e(HC,YPr),e(HC,oK),e(oK,KPr),e(HC,ZPr),e(Pe,eBr),e(Pe,UC),e(UC,_Me),e(_Me,oBr),e(UC,rBr),e(UC,rK),e(rK,tBr),e(UC,aBr),e(Vr,nBr),M(JC,Vr,null),b(f,Rje,_),b(f,Xc,_),e(Xc,YC),e(YC,bMe),M(H9,bMe,null),e(Xc,sBr),e(Xc,vMe),e(vMe,lBr),b(f,Pje,_),b(f,ur,_),M(U9,ur,null),e(ur,iBr),e(ur,zc),e(zc,dBr),e(zc,tK),e(tK,cBr),e(zc,fBr),e(zc,aK),e(aK,mBr),e(zc,gBr),e(ur,hBr),e(ur,J9),e(J9,pBr),e(J9,FMe),e(FMe,uBr),e(J9,_Br),e(ur,bBr),e(ur,Wt),M(Y9,Wt,null),e(Wt,vBr),e(Wt,TMe),e(TMe,FBr),e(Wt,TBr),e(Wt,Wc),e(Wc,MBr),e(Wc,MMe),e(MMe,EBr),e(Wc,CBr),e(Wc,nK),e(nK,wBr),e(Wc,ABr),e(Wt,yBr),M(KC,Wt,null),e(ur,LBr),e(ur,Xr),M(K9,Xr,null),e(Xr,xBr),e(Xr,EMe),e(EMe,$Br),e(Xr,kBr),e(Xr,vn),e(vn,SBr),e(vn,CMe),e(CMe,RBr),e(vn,PBr),e(vn,wMe),e(wMe,BBr),e(vn,IBr),e(vn,AMe),e(AMe,qBr),e(vn,NBr),e(Xr,jBr),e(Xr,$e),e($e,ZC),e(ZC,yMe),e(yMe,DBr),e(ZC,GBr),e(ZC,sK),e(sK,OBr),e(ZC,VBr),e($e,XBr),e($e,e5),e(e5,LMe),e(LMe,zBr),e(e5,WBr),e(e5,lK),e(lK,QBr),e(e5,HBr),e($e,UBr),e($e,o5),e(o5,xMe),e(xMe,JBr),e(o5,YBr),e(o5,iK),e(iK,KBr),e(o5,ZBr),e($e,eIr),e($e,r5),e(r5,$Me),e($Me,oIr),e(r5,rIr),e(r5,dK),e(dK,tIr),e(r5,aIr),e($e,nIr),e($e,t5),e(t5,kMe),e(kMe,sIr),e(t5,lIr),e(t5,cK),e(cK,iIr),e(t5,dIr),e($e,cIr),e($e,a5),e(a5,SMe),e(SMe,fIr),e(a5,mIr),e(a5,fK),e(fK,gIr),e(a5,hIr),e($e,pIr),e($e,n5),e(n5,RMe),e(RMe,uIr),e(n5,_Ir),e(n5,mK),e(mK,bIr),e(n5,vIr),e($e,FIr),e($e,s5),e(s5,PMe),e(PMe,TIr),e(s5,MIr),e(s5,gK),e(gK,EIr),e(s5,CIr),e($e,wIr),e($e,l5),e(l5,BMe),e(BMe,AIr),e(l5,yIr),e(l5,hK),e(hK,LIr),e(l5,xIr),e($e,$Ir),e($e,i5),e(i5,IMe),e(IMe,kIr),e(i5,SIr),e(i5,pK),e(pK,RIr),e(i5,PIr),e(Xr,BIr),M(d5,Xr,null),b(f,Bje,_),b(f,Qc,_),e(Qc,c5),e(c5,qMe),M(Z9,qMe,null),e(Qc,IIr),e(Qc,NMe),e(NMe,qIr),b(f,Ije,_),b(f,_r,_),M(ex,_r,null),e(_r,NIr),e(_r,Hc),e(Hc,jIr),e(Hc,uK),e(uK,DIr),e(Hc,GIr),e(Hc,_K),e(_K,OIr),e(Hc,VIr),e(_r,XIr),e(_r,ox),e(ox,zIr),e(ox,jMe),e(jMe,WIr),e(ox,QIr),e(_r,HIr),e(_r,Qt),M(rx,Qt,null),e(Qt,UIr),e(Qt,DMe),e(DMe,JIr),e(Qt,YIr),e(Qt,Uc),e(Uc,KIr),e(Uc,GMe),e(GMe,ZIr),e(Uc,eqr),e(Uc,bK),e(bK,oqr),e(Uc,rqr),e(Qt,tqr),M(f5,Qt,null),e(_r,aqr),e(_r,zr),M(tx,zr,null),e(zr,nqr),e(zr,OMe),e(OMe,sqr),e(zr,lqr),e(zr,Fn),e(Fn,iqr),e(Fn,VMe),e(VMe,dqr),e(Fn,cqr),e(Fn,XMe),e(XMe,fqr),e(Fn,mqr),e(Fn,zMe),e(zMe,gqr),e(Fn,hqr),e(zr,pqr),e(zr,ke),e(ke,m5),e(m5,WMe),e(WMe,uqr),e(m5,_qr),e(m5,vK),e(vK,bqr),e(m5,vqr),e(ke,Fqr),e(ke,g5),e(g5,QMe),e(QMe,Tqr),e(g5,Mqr),e(g5,FK),e(FK,Eqr),e(g5,Cqr),e(ke,wqr),e(ke,h5),e(h5,HMe),e(HMe,Aqr),e(h5,yqr),e(h5,TK),e(TK,Lqr),e(h5,xqr),e(ke,$qr),e(ke,p5),e(p5,UMe),e(UMe,kqr),e(p5,Sqr),e(p5,MK),e(MK,Rqr),e(p5,Pqr),e(ke,Bqr),e(ke,u5),e(u5,JMe),e(JMe,Iqr),e(u5,qqr),e(u5,EK),e(EK,Nqr),e(u5,jqr),e(ke,Dqr),e(ke,_5),e(_5,YMe),e(YMe,Gqr),e(_5,Oqr),e(_5,CK),e(CK,Vqr),e(_5,Xqr),e(ke,zqr),e(ke,b5),e(b5,KMe),e(KMe,Wqr),e(b5,Qqr),e(b5,wK),e(wK,Hqr),e(b5,Uqr),e(ke,Jqr),e(ke,v5),e(v5,ZMe),e(ZMe,Yqr),e(v5,Kqr),e(v5,AK),e(AK,Zqr),e(v5,eNr),e(ke,oNr),e(ke,F5),e(F5,e4e),e(e4e,rNr),e(F5,tNr),e(F5,yK),e(yK,aNr),e(F5,nNr),e(ke,sNr),e(ke,T5),e(T5,o4e),e(o4e,lNr),e(T5,iNr),e(T5,LK),e(LK,dNr),e(T5,cNr),e(zr,fNr),M(M5,zr,null),b(f,qje,_),b(f,Jc,_),e(Jc,E5),e(E5,r4e),M(ax,r4e,null),e(Jc,mNr),e(Jc,t4e),e(t4e,gNr),b(f,Nje,_),b(f,br,_),M(nx,br,null),e(br,hNr),e(br,Yc),e(Yc,pNr),e(Yc,xK),e(xK,uNr),e(Yc,_Nr),e(Yc,$K),e($K,bNr),e(Yc,vNr),e(br,FNr),e(br,sx),e(sx,TNr),e(sx,a4e),e(a4e,MNr),e(sx,ENr),e(br,CNr),e(br,Ht),M(lx,Ht,null),e(Ht,wNr),e(Ht,n4e),e(n4e,ANr),e(Ht,yNr),e(Ht,Kc),e(Kc,LNr),e(Kc,s4e),e(s4e,xNr),e(Kc,$Nr),e(Kc,kK),e(kK,kNr),e(Kc,SNr),e(Ht,RNr),M(C5,Ht,null),e(br,PNr),e(br,Wr),M(ix,Wr,null),e(Wr,BNr),e(Wr,l4e),e(l4e,INr),e(Wr,qNr),e(Wr,Tn),e(Tn,NNr),e(Tn,i4e),e(i4e,jNr),e(Tn,DNr),e(Tn,d4e),e(d4e,GNr),e(Tn,ONr),e(Tn,c4e),e(c4e,VNr),e(Tn,XNr),e(Wr,zNr),e(Wr,Ge),e(Ge,w5),e(w5,f4e),e(f4e,WNr),e(w5,QNr),e(w5,SK),e(SK,HNr),e(w5,UNr),e(Ge,JNr),e(Ge,A5),e(A5,m4e),e(m4e,YNr),e(A5,KNr),e(A5,RK),e(RK,ZNr),e(A5,ejr),e(Ge,ojr),e(Ge,y5),e(y5,g4e),e(g4e,rjr),e(y5,tjr),e(y5,PK),e(PK,ajr),e(y5,njr),e(Ge,sjr),e(Ge,L5),e(L5,h4e),e(h4e,ljr),e(L5,ijr),e(L5,BK),e(BK,djr),e(L5,cjr),e(Ge,fjr),e(Ge,x5),e(x5,p4e),e(p4e,mjr),e(x5,gjr),e(x5,IK),e(IK,hjr),e(x5,pjr),e(Ge,ujr),e(Ge,$5),e($5,u4e),e(u4e,_jr),e($5,bjr),e($5,qK),e(qK,vjr),e($5,Fjr),e(Ge,Tjr),e(Ge,k5),e(k5,_4e),e(_4e,Mjr),e(k5,Ejr),e(k5,NK),e(NK,Cjr),e(k5,wjr),e(Ge,Ajr),e(Ge,S5),e(S5,b4e),e(b4e,yjr),e(S5,Ljr),e(S5,jK),e(jK,xjr),e(S5,$jr),e(Wr,kjr),M(R5,Wr,null),b(f,jje,_),b(f,Zc,_),e(Zc,P5),e(P5,v4e),M(dx,v4e,null),e(Zc,Sjr),e(Zc,F4e),e(F4e,Rjr),b(f,Dje,_),b(f,vr,_),M(cx,vr,null),e(vr,Pjr),e(vr,ef),e(ef,Bjr),e(ef,DK),e(DK,Ijr),e(ef,qjr),e(ef,GK),e(GK,Njr),e(ef,jjr),e(vr,Djr),e(vr,fx),e(fx,Gjr),e(fx,T4e),e(T4e,Ojr),e(fx,Vjr),e(vr,Xjr),e(vr,Ut),M(mx,Ut,null),e(Ut,zjr),e(Ut,M4e),e(M4e,Wjr),e(Ut,Qjr),e(Ut,of),e(of,Hjr),e(of,E4e),e(E4e,Ujr),e(of,Jjr),e(of,OK),e(OK,Yjr),e(of,Kjr),e(Ut,Zjr),M(B5,Ut,null),e(vr,eDr),e(vr,Qr),M(gx,Qr,null),e(Qr,oDr),e(Qr,C4e),e(C4e,rDr),e(Qr,tDr),e(Qr,Mn),e(Mn,aDr),e(Mn,w4e),e(w4e,nDr),e(Mn,sDr),e(Mn,A4e),e(A4e,lDr),e(Mn,iDr),e(Mn,y4e),e(y4e,dDr),e(Mn,cDr),e(Qr,fDr),e(Qr,Oe),e(Oe,I5),e(I5,L4e),e(L4e,mDr),e(I5,gDr),e(I5,VK),e(VK,hDr),e(I5,pDr),e(Oe,uDr),e(Oe,q5),e(q5,x4e),e(x4e,_Dr),e(q5,bDr),e(q5,XK),e(XK,vDr),e(q5,FDr),e(Oe,TDr),e(Oe,N5),e(N5,$4e),e($4e,MDr),e(N5,EDr),e(N5,zK),e(zK,CDr),e(N5,wDr),e(Oe,ADr),e(Oe,j5),e(j5,k4e),e(k4e,yDr),e(j5,LDr),e(j5,WK),e(WK,xDr),e(j5,$Dr),e(Oe,kDr),e(Oe,D5),e(D5,S4e),e(S4e,SDr),e(D5,RDr),e(D5,QK),e(QK,PDr),e(D5,BDr),e(Oe,IDr),e(Oe,G5),e(G5,R4e),e(R4e,qDr),e(G5,NDr),e(G5,HK),e(HK,jDr),e(G5,DDr),e(Oe,GDr),e(Oe,O5),e(O5,P4e),e(P4e,ODr),e(O5,VDr),e(O5,UK),e(UK,XDr),e(O5,zDr),e(Oe,WDr),e(Oe,V5),e(V5,B4e),e(B4e,QDr),e(V5,HDr),e(V5,JK),e(JK,UDr),e(V5,JDr),e(Qr,YDr),M(X5,Qr,null),b(f,Gje,_),b(f,rf,_),e(rf,z5),e(z5,I4e),M(hx,I4e,null),e(rf,KDr),e(rf,q4e),e(q4e,ZDr),b(f,Oje,_),b(f,Fr,_),M(px,Fr,null),e(Fr,eGr),e(Fr,tf),e(tf,oGr),e(tf,YK),e(YK,rGr),e(tf,tGr),e(tf,KK),e(KK,aGr),e(tf,nGr),e(Fr,sGr),e(Fr,ux),e(ux,lGr),e(ux,N4e),e(N4e,iGr),e(ux,dGr),e(Fr,cGr),e(Fr,Jt),M(_x,Jt,null),e(Jt,fGr),e(Jt,j4e),e(j4e,mGr),e(Jt,gGr),e(Jt,af),e(af,hGr),e(af,D4e),e(D4e,pGr),e(af,uGr),e(af,ZK),e(ZK,_Gr),e(af,bGr),e(Jt,vGr),M(W5,Jt,null),e(Fr,FGr),e(Fr,Hr),M(bx,Hr,null),e(Hr,TGr),e(Hr,G4e),e(G4e,MGr),e(Hr,EGr),e(Hr,En),e(En,CGr),e(En,O4e),e(O4e,wGr),e(En,AGr),e(En,V4e),e(V4e,yGr),e(En,LGr),e(En,X4e),e(X4e,xGr),e(En,$Gr),e(Hr,kGr),e(Hr,z4e),e(z4e,Q5),e(Q5,W4e),e(W4e,SGr),e(Q5,RGr),e(Q5,eZ),e(eZ,PGr),e(Q5,BGr),e(Hr,IGr),M(H5,Hr,null),b(f,Vje,_),b(f,nf,_),e(nf,U5),e(U5,Q4e),M(vx,Q4e,null),e(nf,qGr),e(nf,H4e),e(H4e,NGr),b(f,Xje,_),b(f,Tr,_),M(Fx,Tr,null),e(Tr,jGr),e(Tr,sf),e(sf,DGr),e(sf,oZ),e(oZ,GGr),e(sf,OGr),e(sf,rZ),e(rZ,VGr),e(sf,XGr),e(Tr,zGr),e(Tr,Tx),e(Tx,WGr),e(Tx,U4e),e(U4e,QGr),e(Tx,HGr),e(Tr,UGr),e(Tr,Yt),M(Mx,Yt,null),e(Yt,JGr),e(Yt,J4e),e(J4e,YGr),e(Yt,KGr),e(Yt,lf),e(lf,ZGr),e(lf,Y4e),e(Y4e,eOr),e(lf,oOr),e(lf,tZ),e(tZ,rOr),e(lf,tOr),e(Yt,aOr),M(J5,Yt,null),e(Tr,nOr),e(Tr,Ur),M(Ex,Ur,null),e(Ur,sOr),e(Ur,K4e),e(K4e,lOr),e(Ur,iOr),e(Ur,Cn),e(Cn,dOr),e(Cn,Z4e),e(Z4e,cOr),e(Cn,fOr),e(Cn,eEe),e(eEe,mOr),e(Cn,gOr),e(Cn,oEe),e(oEe,hOr),e(Cn,pOr),e(Ur,uOr),e(Ur,Cx),e(Cx,Y5),e(Y5,rEe),e(rEe,_Or),e(Y5,bOr),e(Y5,aZ),e(aZ,vOr),e(Y5,FOr),e(Cx,TOr),e(Cx,K5),e(K5,tEe),e(tEe,MOr),e(K5,EOr),e(K5,nZ),e(nZ,COr),e(K5,wOr),e(Ur,AOr),M(Z5,Ur,null),b(f,zje,_),b(f,df,_),e(df,ew),e(ew,aEe),M(wx,aEe,null),e(df,yOr),e(df,nEe),e(nEe,LOr),b(f,Wje,_),b(f,Mr,_),M(Ax,Mr,null),e(Mr,xOr),e(Mr,cf),e(cf,$Or),e(cf,sZ),e(sZ,kOr),e(cf,SOr),e(cf,lZ),e(lZ,ROr),e(cf,POr),e(Mr,BOr),e(Mr,yx),e(yx,IOr),e(yx,sEe),e(sEe,qOr),e(yx,NOr),e(Mr,jOr),e(Mr,Kt),M(Lx,Kt,null),e(Kt,DOr),e(Kt,lEe),e(lEe,GOr),e(Kt,OOr),e(Kt,ff),e(ff,VOr),e(ff,iEe),e(iEe,XOr),e(ff,zOr),e(ff,iZ),e(iZ,WOr),e(ff,QOr),e(Kt,HOr),M(ow,Kt,null),e(Mr,UOr),e(Mr,Jr),M(xx,Jr,null),e(Jr,JOr),e(Jr,dEe),e(dEe,YOr),e(Jr,KOr),e(Jr,wn),e(wn,ZOr),e(wn,cEe),e(cEe,eVr),e(wn,oVr),e(wn,fEe),e(fEe,rVr),e(wn,tVr),e(wn,mEe),e(mEe,aVr),e(wn,nVr),e(Jr,sVr),e(Jr,gEe),e(gEe,rw),e(rw,hEe),e(hEe,lVr),e(rw,iVr),e(rw,dZ),e(dZ,dVr),e(rw,cVr),e(Jr,fVr),M(tw,Jr,null),Qje=!0},p(f,[_]){const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),Ff.$set($x);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),Mg.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),rh.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),Rh.$set(_Ee);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),Ph.$set(kx);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),ep.$set(bEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),op.$set(An);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),ap.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Ku.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),e_.$set(TEe);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),X_.$set(Sx);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),W_.$set(MEe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),$1.$set(Rx);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),S1.$set(EEe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),p8.$set(Px);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),_8.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),B8.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),q8.$set(AEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Sb.$set(mf);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),Pb.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),f2.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),g2.$set(xEe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),F2.$set(Bx);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),M2.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),av.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),sv.$set(SEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Hv.$set(et);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),Jv.$set(Ix);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),Zv.$set(REe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),o3.$set(qx);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),p3.$set(PEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),_3.$set(ot);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),F3.$set(BEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),M3.$set(gf);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),R3.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),B3.$set(qEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),O3.$set(y);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),X3.$set(aw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),oF.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),tF.$set(jEe);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),lF.$set(nw);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),dF.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),uF.$set(GEe);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),bF.$set(sw);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),EF.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),wF.$set(VEe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),xF.$set(lw);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),kF.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),PF.$set(zEe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),IF.$set(iw);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),OF.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),XF.$set(QEe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),QF.$set(dw);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),UF.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),OT.$set(UEe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),XT.$set(cw);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),h7.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),u7.$set(YEe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),x7.$set(fw);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),k7.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),I7.$set(ZEe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),N7.$set(mw);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),nM.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),lM.$set(oCe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),bM.$set(gw);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),FM.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),QM.$set(tCe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),UM.$set(hw);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),g4.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),p4.$set(nCe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),b4.$set(pw);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),F4.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),M4.$set(lCe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),C4.$set(uw);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),z4.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),Q4.$set(dCe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),hE.$set(_w);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),uE.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),bE.$set(fCe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),FE.$set(bw);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),ME.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),CE.$set(gCe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),YE.$set(vw);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),ZE.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),cC.$set(pCe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),mC.$set(Fw);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),wC.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),yC.$set(_Ce);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),NC.$set(Tw);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),DC.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),JC.$set(vCe);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),KC.$set(Mw);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),d5.$set(FCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),f5.$set(TCe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),M5.$set(Ew);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),C5.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),R5.$set(ECe);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),B5.$set(Cw);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),X5.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),W5.$set(wCe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),H5.$set(ww);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),J5.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),Z5.$set(yCe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),ow.$set(Aw);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),tw.$set(LCe)},i(f){Qje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(Ff.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(kA.$$.fragment,f),E(Mg.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(rh.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(VA.$$.fragment,f),E(Rh.$$.fragment,f),E(Ph.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(ep.$$.fragment,f),E(op.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e6.$$.fragment,f),E(ap.$$.fragment,f),E(o6.$$.fragment,f),E(Ku.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(n6.$$.fragment,f),E(e_.$$.fragment,f),E(s6.$$.fragment,f),E(X_.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(c6.$$.fragment,f),E(W_.$$.fragment,f),E(f6.$$.fragment,f),E($1.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(p6.$$.fragment,f),E(S1.$$.fragment,f),E(u6.$$.fragment,f),E(p8.$$.fragment,f),E(_6.$$.fragment,f),E(b6.$$.fragment,f),E(F6.$$.fragment,f),E(_8.$$.fragment,f),E(T6.$$.fragment,f),E(B8.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(w6.$$.fragment,f),E(q8.$$.fragment,f),E(A6.$$.fragment,f),E(Sb.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Pb.$$.fragment,f),E(k6.$$.fragment,f),E(f2.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(g2.$$.fragment,f),E(I6.$$.fragment,f),E(F2.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(M2.$$.fragment,f),E(G6.$$.fragment,f),E(av.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(sv.$$.fragment,f),E(W6.$$.fragment,f),E(Hv.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(Jv.$$.fragment,f),E(Y6.$$.fragment,f),E(Zv.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(o3.$$.fragment,f),E(ry.$$.fragment,f),E(p3.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(_3.$$.fragment,f),E(ly.$$.fragment,f),E(F3.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(M3.$$.fragment,f),E(my.$$.fragment,f),E(R3.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(B3.$$.fragment,f),E(_y.$$.fragment,f),E(O3.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(X3.$$.fragment,f),E(My.$$.fragment,f),E(oF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(tF.$$.fragment,f),E(yy.$$.fragment,f),E(lF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(dF.$$.fragment,f),E(Ry.$$.fragment,f),E(uF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(bF.$$.fragment,f),E(Ny.$$.fragment,f),E(EF.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(wF.$$.fragment,f),E(Vy.$$.fragment,f),E(xF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(kF.$$.fragment,f),E(Uy.$$.fragment,f),E(PF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(IF.$$.fragment,f),E(eL.$$.fragment,f),E(OF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(XF.$$.fragment,f),E(nL.$$.fragment,f),E(QF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(UF.$$.fragment,f),E(cL.$$.fragment,f),E(OT.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(XT.$$.fragment,f),E(pL.$$.fragment,f),E(h7.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(u7.$$.fragment,f),E(FL.$$.fragment,f),E(x7.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(k7.$$.fragment,f),E(wL.$$.fragment,f),E(I7.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(N7.$$.fragment,f),E($L.$$.fragment,f),E(nM.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(lM.$$.fragment,f),E(BL.$$.fragment,f),E(bM.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(FM.$$.fragment,f),E(DL.$$.fragment,f),E(QM.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(UM.$$.fragment,f),E(zL.$$.fragment,f),E(g4.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(p4.$$.fragment,f),E(JL.$$.fragment,f),E(b4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o9.$$.fragment,f),E(F4.$$.fragment,f),E(r9.$$.fragment,f),E(M4.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(C4.$$.fragment,f),E(l9.$$.fragment,f),E(z4.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(Q4.$$.fragment,f),E(m9.$$.fragment,f),E(hE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(u9.$$.fragment,f),E(uE.$$.fragment,f),E(_9.$$.fragment,f),E(bE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(FE.$$.fragment,f),E(M9.$$.fragment,f),E(ME.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(CE.$$.fragment,f),E(y9.$$.fragment,f),E(YE.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(ZE.$$.fragment,f),E(S9.$$.fragment,f),E(cC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(mC.$$.fragment,f),E(q9.$$.fragment,f),E(wC.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(yC.$$.fragment,f),E(O9.$$.fragment,f),E(NC.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(DC.$$.fragment,f),E(Q9.$$.fragment,f),E(JC.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(KC.$$.fragment,f),E(K9.$$.fragment,f),E(d5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(f5.$$.fragment,f),E(tx.$$.fragment,f),E(M5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(C5.$$.fragment,f),E(ix.$$.fragment,f),E(R5.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(B5.$$.fragment,f),E(gx.$$.fragment,f),E(X5.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(W5.$$.fragment,f),E(bx.$$.fragment,f),E(H5.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(J5.$$.fragment,f),E(Ex.$$.fragment,f),E(Z5.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(ow.$$.fragment,f),E(xx.$$.fragment,f),E(tw.$$.fragment,f),Qje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(Ff.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(kA.$$.fragment,f),C(Mg.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(rh.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(VA.$$.fragment,f),C(Rh.$$.fragment,f),C(Ph.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(ep.$$.fragment,f),C(op.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e6.$$.fragment,f),C(ap.$$.fragment,f),C(o6.$$.fragment,f),C(Ku.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(n6.$$.fragment,f),C(e_.$$.fragment,f),C(s6.$$.fragment,f),C(X_.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(c6.$$.fragment,f),C(W_.$$.fragment,f),C(f6.$$.fragment,f),C($1.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(p6.$$.fragment,f),C(S1.$$.fragment,f),C(u6.$$.fragment,f),C(p8.$$.fragment,f),C(_6.$$.fragment,f),C(b6.$$.fragment,f),C(F6.$$.fragment,f),C(_8.$$.fragment,f),C(T6.$$.fragment,f),C(B8.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(w6.$$.fragment,f),C(q8.$$.fragment,f),C(A6.$$.fragment,f),C(Sb.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Pb.$$.fragment,f),C(k6.$$.fragment,f),C(f2.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(g2.$$.fragment,f),C(I6.$$.fragment,f),C(F2.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(M2.$$.fragment,f),C(G6.$$.fragment,f),C(av.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(sv.$$.fragment,f),C(W6.$$.fragment,f),C(Hv.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(Jv.$$.fragment,f),C(Y6.$$.fragment,f),C(Zv.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(o3.$$.fragment,f),C(ry.$$.fragment,f),C(p3.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(_3.$$.fragment,f),C(ly.$$.fragment,f),C(F3.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(M3.$$.fragment,f),C(my.$$.fragment,f),C(R3.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(B3.$$.fragment,f),C(_y.$$.fragment,f),C(O3.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(X3.$$.fragment,f),C(My.$$.fragment,f),C(oF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(tF.$$.fragment,f),C(yy.$$.fragment,f),C(lF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(dF.$$.fragment,f),C(Ry.$$.fragment,f),C(uF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(bF.$$.fragment,f),C(Ny.$$.fragment,f),C(EF.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(wF.$$.fragment,f),C(Vy.$$.fragment,f),C(xF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(kF.$$.fragment,f),C(Uy.$$.fragment,f),C(PF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(IF.$$.fragment,f),C(eL.$$.fragment,f),C(OF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(XF.$$.fragment,f),C(nL.$$.fragment,f),C(QF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(UF.$$.fragment,f),C(cL.$$.fragment,f),C(OT.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(XT.$$.fragment,f),C(pL.$$.fragment,f),C(h7.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(u7.$$.fragment,f),C(FL.$$.fragment,f),C(x7.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(k7.$$.fragment,f),C(wL.$$.fragment,f),C(I7.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(N7.$$.fragment,f),C($L.$$.fragment,f),C(nM.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(lM.$$.fragment,f),C(BL.$$.fragment,f),C(bM.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(FM.$$.fragment,f),C(DL.$$.fragment,f),C(QM.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(UM.$$.fragment,f),C(zL.$$.fragment,f),C(g4.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(p4.$$.fragment,f),C(JL.$$.fragment,f),C(b4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o9.$$.fragment,f),C(F4.$$.fragment,f),C(r9.$$.fragment,f),C(M4.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(C4.$$.fragment,f),C(l9.$$.fragment,f),C(z4.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(Q4.$$.fragment,f),C(m9.$$.fragment,f),C(hE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(u9.$$.fragment,f),C(uE.$$.fragment,f),C(_9.$$.fragment,f),C(bE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(FE.$$.fragment,f),C(M9.$$.fragment,f),C(ME.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(CE.$$.fragment,f),C(y9.$$.fragment,f),C(YE.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(ZE.$$.fragment,f),C(S9.$$.fragment,f),C(cC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(mC.$$.fragment,f),C(q9.$$.fragment,f),C(wC.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(yC.$$.fragment,f),C(O9.$$.fragment,f),C(NC.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(DC.$$.fragment,f),C(Q9.$$.fragment,f),C(JC.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(KC.$$.fragment,f),C(K9.$$.fragment,f),C(d5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(f5.$$.fragment,f),C(tx.$$.fragment,f),C(M5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(C5.$$.fragment,f),C(ix.$$.fragment,f),C(R5.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(B5.$$.fragment,f),C(gx.$$.fragment,f),C(X5.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(W5.$$.fragment,f),C(bx.$$.fragment,f),C(H5.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(J5.$$.fragment,f),C(Ex.$$.fragment,f),C(Z5.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(ow.$$.fragment,f),C(xx.$$.fragment,f),C(tw.$$.fragment,f),Qje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Xqe),f&&t(bi),w(wA),f&&t(zqe),f&&t(kn),f&&t(Wqe),w(AA,f),f&&t(Qqe),f&&t(H$),f&&t(Hqe),w(Ff,f),f&&t(Uqe),f&&t(vi),w(yA),f&&t(Jqe),f&&t(Co),w(LA),w(kA),w(Mg),w(SA),f&&t(Yqe),f&&t(Ti),w(RA),f&&t(Kqe),f&&t(wo),w(PA),w(qA),w(rh),w(NA),f&&t(Zqe),f&&t(Mi),w(jA),f&&t(eNe),f&&t(Ao),w(DA),w(VA),w(Rh),w(Ph),w(XA),f&&t(oNe),f&&t(Ei),w(zA),f&&t(rNe),f&&t(yo),w(WA),w(UA),w(ep),w(op),w(JA),f&&t(tNe),f&&t(wi),w(YA),f&&t(aNe),f&&t(Lo),w(KA),w(e6),w(ap),w(o6),w(Ku),f&&t(nNe),f&&t(Li),w(r6),f&&t(sNe),f&&t(xo),w(t6),w(n6),w(e_),w(s6),w(X_),f&&t(lNe),f&&t(ki),w(l6),f&&t(iNe),f&&t($o),w(i6),w(c6),w(W_),w(f6),w($1),f&&t(dNe),f&&t(Pi),w(m6),f&&t(cNe),f&&t(ko),w(g6),w(p6),w(S1),w(u6),w(p8),f&&t(fNe),f&&t(qi),w(_6),f&&t(mNe),f&&t(So),w(b6),w(F6),w(_8),w(T6),w(B8),f&&t(gNe),f&&t(Di),w(M6),f&&t(hNe),f&&t(Ro),w(E6),w(w6),w(q8),w(A6),w(Sb),f&&t(pNe),f&&t(Vi),w(y6),f&&t(uNe),f&&t(Po),w(L6),w($6),w(Pb),w(k6),w(f2),f&&t(_Ne),f&&t(Wi),w(S6),f&&t(bNe),f&&t(Bo),w(R6),w(B6),w(g2),w(I6),w(F2),f&&t(vNe),f&&t(Ui),w(q6),f&&t(FNe),f&&t(Io),w(N6),w(D6),w(M2),w(G6),w(av),f&&t(TNe),f&&t(Ki),w(O6),f&&t(MNe),f&&t(qo),w(V6),w(z6),w(sv),w(W6),w(Hv),f&&t(ENe),f&&t(od),w(Q6),f&&t(CNe),f&&t(No),w(H6),w(J6),w(Jv),w(Y6),w(Zv),f&&t(wNe),f&&t(ad),w(K6),f&&t(ANe),f&&t(jo),w(Z6),w(oy),w(o3),w(ry),w(p3),f&&t(yNe),f&&t(ld),w(ty),f&&t(LNe),f&&t(Do),w(ay),w(sy),w(_3),w(ly),w(F3),f&&t(xNe),f&&t(cd),w(iy),f&&t($Ne),f&&t(Go),w(dy),w(fy),w(M3),w(my),w(R3),f&&t(kNe),f&&t(gd),w(gy),f&&t(SNe),f&&t(Oo),w(hy),w(uy),w(B3),w(_y),w(O3),f&&t(RNe),f&&t(ud),w(by),f&&t(PNe),f&&t(Vo),w(vy),w(Ty),w(X3),w(My),w(oF),f&&t(BNe),f&&t(vd),w(Ey),f&&t(INe),f&&t(Xo),w(Cy),w(Ay),w(tF),w(yy),w(lF),f&&t(qNe),f&&t(Md),w(xy),f&&t(NNe),f&&t(zo),w($y),w(Sy),w(dF),w(Ry),w(uF),f&&t(jNe),f&&t(wd),w(Py),f&&t(DNe),f&&t(Wo),w(By),w(qy),w(bF),w(Ny),w(EF),f&&t(GNe),f&&t(xd),w(jy),f&&t(ONe),f&&t(Qo),w(Dy),w(Oy),w(wF),w(Vy),w(xF),f&&t(VNe),f&&t(Sd),w(zy),f&&t(XNe),f&&t(Ho),w(Wy),w(Hy),w(kF),w(Uy),w(PF),f&&t(zNe),f&&t(Bd),w(Jy),f&&t(WNe),f&&t(Uo),w(Yy),w(Zy),w(IF),w(eL),w(OF),f&&t(QNe),f&&t(Nd),w(oL),f&&t(HNe),f&&t(Jo),w(rL),w(aL),w(XF),w(nL),w(QF),f&&t(UNe),f&&t(Gd),w(sL),f&&t(JNe),f&&t(Yo),w(lL),w(dL),w(UF),w(cL),w(OT),f&&t(YNe),f&&t(Xd),w(fL),f&&t(KNe),f&&t(Ko),w(mL),w(hL),w(XT),w(pL),w(h7),f&&t(ZNe),f&&t(Qd),w(uL),f&&t(eje),f&&t(Zo),w(_L),w(vL),w(u7),w(FL),w(x7),f&&t(oje),f&&t(Jd),w(TL),f&&t(rje),f&&t(er),w(ML),w(CL),w(k7),w(wL),w(I7),f&&t(tje),f&&t(Zd),w(AL),f&&t(aje),f&&t(or),w(yL),w(xL),w(N7),w($L),w(nM),f&&t(nje),f&&t(rc),w(kL),f&&t(sje),f&&t(rr),w(SL),w(PL),w(lM),w(BL),w(bM),f&&t(lje),f&&t(nc),w(IL),f&&t(ije),f&&t(tr),w(qL),w(jL),w(FM),w(DL),w(QM),f&&t(dje),f&&t(ic),w(GL),f&&t(cje),f&&t(ar),w(OL),w(XL),w(UM),w(zL),w(g4),f&&t(fje),f&&t(fc),w(WL),f&&t(mje),f&&t(nr),w(QL),w(UL),w(p4),w(JL),w(b4),f&&t(gje),f&&t(hc),w(KL),f&&t(hje),f&&t(sr),w(ZL),w(o9),w(F4),w(r9),w(M4),f&&t(pje),f&&t(_c),w(t9),f&&t(uje),f&&t(lr),w(a9),w(s9),w(C4),w(l9),w(z4),f&&t(_je),f&&t(Fc),w(i9),f&&t(bje),f&&t(ir),w(d9),w(f9),w(Q4),w(m9),w(hE),f&&t(vje),f&&t(Ec),w(g9),f&&t(Fje),f&&t(dr),w(h9),w(u9),w(uE),w(_9),w(bE),f&&t(Tje),f&&t(Ac),w(b9),f&&t(Mje),f&&t(cr),w(v9),w(T9),w(FE),w(M9),w(ME),f&&t(Eje),f&&t(xc),w(E9),f&&t(Cje),f&&t(fr),w(C9),w(A9),w(CE),w(y9),w(YE),f&&t(wje),f&&t(Sc),w(L9),f&&t(Aje),f&&t(mr),w(x9),w(k9),w(ZE),w(S9),w(cC),f&&t(yje),f&&t(Bc),w(R9),f&&t(Lje),f&&t(gr),w(P9),w(I9),w(mC),w(q9),w(wC),f&&t(xje),f&&t(Nc),w(N9),f&&t($je),f&&t(hr),w(j9),w(G9),w(yC),w(O9),w(NC),f&&t(kje),f&&t(Gc),w(V9),f&&t(Sje),f&&t(pr),w(X9),w(W9),w(DC),w(Q9),w(JC),f&&t(Rje),f&&t(Xc),w(H9),f&&t(Pje),f&&t(ur),w(U9),w(Y9),w(KC),w(K9),w(d5),f&&t(Bje),f&&t(Qc),w(Z9),f&&t(Ije),f&&t(_r),w(ex),w(rx),w(f5),w(tx),w(M5),f&&t(qje),f&&t(Jc),w(ax),f&&t(Nje),f&&t(br),w(nx),w(lx),w(C5),w(ix),w(R5),f&&t(jje),f&&t(Zc),w(dx),f&&t(Dje),f&&t(vr),w(cx),w(mx),w(B5),w(gx),w(X5),f&&t(Gje),f&&t(rf),w(hx),f&&t(Oje),f&&t(Fr),w(px),w(_x),w(W5),w(bx),w(H5),f&&t(Vje),f&&t(nf),w(vx),f&&t(Xje),f&&t(Tr),w(Fx),w(Mx),w(J5),w(Ex),w(Z5),f&&t(zje),f&&t(df),w(wx),f&&t(Wje),f&&t(Mr),w(Ax),w(Lx),w(ow),w(xx),w(tw)}}}const Gkt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Okt(L){return Oxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ukt extends Nxt{constructor(g){super();jxt(this,g,Okt,Dkt,Dxt,{})}}export{Ukt as default,Gkt as metadata};
