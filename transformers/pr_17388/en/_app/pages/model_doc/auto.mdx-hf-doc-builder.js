import{S as Uxt,i as Jxt,s as Yxt,e as a,k as l,w as F,t as o,M as Kxt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Zxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function e$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,MA,uf,De,We,hi,yn,EA,Ln,xn,CA,pi,$n,wA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),MA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),EA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),CA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),wA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var X$=s(p);m=r(X$,"NewModelConfig"),X$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var z$=s(fi);pf=r(z$,"model_type"),z$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var W$=s(mi);gi=r(W$,'"new-model"'),W$.forEach(t),MA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),EA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Q$=s(Ln);xn=r(Q$,"PreTrainedModel"),Q$.forEach(t),CA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),wA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var H$=s(ui);_f=r(H$,"NewModelConfig"),H$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,MA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,EA),e(De,Ln),e(Ln,xn),e(De,CA),e(De,pi),e(pi,$n),e(De,wA),e(De,ui),e(ui,_f),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function o$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,MA,uf,De,We,hi,yn,EA,Ln,xn,CA,pi,$n,wA,ui,_f,Ca,Qe,Ae,X$,_i,z$,W$,Eo,wa,Q$,bf,H$,nOe,Hqe,bi,vf,aoe,AA,sOe,noe,lOe,Uqe,kn,iOe,soe,dOe,cOe,loe,fOe,mOe,Jqe,yA,Yqe,U$,gOe,Kqe,Ff,Zqe,vi,Tf,ioe,LA,hOe,doe,pOe,eNe,Co,xA,uOe,$A,_Oe,J$,bOe,vOe,FOe,kA,TOe,coe,MOe,EOe,COe,Er,SA,wOe,foe,AOe,yOe,Fi,LOe,moe,xOe,$Oe,goe,kOe,SOe,ROe,A,Mf,hoe,POe,BOe,Y$,IOe,qOe,NOe,Ef,poe,jOe,DOe,K$,GOe,OOe,VOe,Cf,uoe,XOe,zOe,Z$,WOe,QOe,HOe,wf,_oe,UOe,JOe,ek,YOe,KOe,ZOe,Af,boe,eVe,oVe,ok,rVe,tVe,aVe,yf,voe,nVe,sVe,rk,lVe,iVe,dVe,Lf,Foe,cVe,fVe,tk,mVe,gVe,hVe,xf,Toe,pVe,uVe,ak,_Ve,bVe,vVe,$f,Moe,FVe,TVe,nk,MVe,EVe,CVe,kf,Eoe,wVe,AVe,sk,yVe,LVe,xVe,Sf,Coe,$Ve,kVe,lk,SVe,RVe,PVe,Rf,woe,BVe,IVe,ik,qVe,NVe,jVe,Pf,Aoe,DVe,GVe,dk,OVe,VVe,XVe,Bf,yoe,zVe,WVe,ck,QVe,HVe,UVe,If,Loe,JVe,YVe,fk,KVe,ZVe,eXe,qf,xoe,oXe,rXe,mk,tXe,aXe,nXe,Nf,$oe,sXe,lXe,gk,iXe,dXe,cXe,jf,koe,fXe,mXe,hk,gXe,hXe,pXe,Df,Soe,uXe,_Xe,pk,bXe,vXe,FXe,Gf,Roe,TXe,MXe,uk,EXe,CXe,wXe,Of,Poe,AXe,yXe,_k,LXe,xXe,$Xe,Vf,Boe,kXe,SXe,bk,RXe,PXe,BXe,Xf,Ioe,IXe,qXe,vk,NXe,jXe,DXe,zf,qoe,GXe,OXe,Fk,VXe,XXe,zXe,Wf,Noe,WXe,QXe,Tk,HXe,UXe,JXe,Qf,joe,YXe,KXe,Mk,ZXe,eze,oze,Hf,Doe,rze,tze,Ek,aze,nze,sze,Uf,Goe,lze,ize,Ck,dze,cze,fze,Jf,Ooe,mze,gze,wk,hze,pze,uze,Yf,Voe,_ze,bze,Ak,vze,Fze,Tze,Kf,Xoe,Mze,Eze,yk,Cze,wze,Aze,Zf,zoe,yze,Lze,Lk,xze,$ze,kze,em,Woe,Sze,Rze,xk,Pze,Bze,Ize,om,Qoe,qze,Nze,$k,jze,Dze,Gze,rm,Hoe,Oze,Vze,kk,Xze,zze,Wze,tm,Uoe,Qze,Hze,Sk,Uze,Jze,Yze,am,Joe,Kze,Zze,Rk,eWe,oWe,rWe,nm,Yoe,tWe,aWe,Pk,nWe,sWe,lWe,sm,Koe,iWe,dWe,Bk,cWe,fWe,mWe,lm,Zoe,gWe,hWe,Ik,pWe,uWe,_We,im,ere,bWe,vWe,qk,FWe,TWe,MWe,dm,ore,EWe,CWe,Nk,wWe,AWe,yWe,cm,rre,LWe,xWe,jk,$We,kWe,SWe,fm,tre,RWe,PWe,Dk,BWe,IWe,qWe,mm,are,NWe,jWe,Gk,DWe,GWe,OWe,gm,nre,VWe,XWe,Ok,zWe,WWe,QWe,hm,sre,HWe,UWe,Vk,JWe,YWe,KWe,pm,lre,ZWe,eQe,Xk,oQe,rQe,tQe,um,ire,aQe,nQe,zk,sQe,lQe,iQe,_m,dre,dQe,cQe,Wk,fQe,mQe,gQe,bm,cre,hQe,pQe,Qk,uQe,_Qe,bQe,vm,fre,vQe,FQe,Hk,TQe,MQe,EQe,Fm,mre,CQe,wQe,Uk,AQe,yQe,LQe,Tm,gre,xQe,$Qe,Jk,kQe,SQe,RQe,Mm,hre,PQe,BQe,Yk,IQe,qQe,NQe,Em,pre,jQe,DQe,Kk,GQe,OQe,VQe,Cm,ure,XQe,zQe,Zk,WQe,QQe,HQe,wm,_re,UQe,JQe,eS,YQe,KQe,ZQe,Am,bre,eHe,oHe,oS,rHe,tHe,aHe,ym,vre,nHe,sHe,rS,lHe,iHe,dHe,Lm,Fre,cHe,fHe,tS,mHe,gHe,hHe,xm,Tre,pHe,uHe,aS,_He,bHe,vHe,$m,Mre,FHe,THe,nS,MHe,EHe,CHe,km,Ere,wHe,AHe,sS,yHe,LHe,xHe,Sm,Cre,$He,kHe,lS,SHe,RHe,PHe,Rm,wre,BHe,IHe,iS,qHe,NHe,jHe,Pm,Are,DHe,GHe,dS,OHe,VHe,XHe,Bm,yre,zHe,WHe,cS,QHe,HHe,UHe,Im,Lre,JHe,YHe,fS,KHe,ZHe,eUe,qm,xre,oUe,rUe,mS,tUe,aUe,nUe,Nm,$re,sUe,lUe,gS,iUe,dUe,cUe,jm,kre,fUe,mUe,hS,gUe,hUe,pUe,Dm,Sre,uUe,_Ue,pS,bUe,vUe,FUe,Gm,Rre,TUe,MUe,uS,EUe,CUe,wUe,Om,Pre,AUe,yUe,_S,LUe,xUe,$Ue,Vm,Bre,kUe,SUe,bS,RUe,PUe,BUe,Xm,Ire,IUe,qUe,vS,NUe,jUe,DUe,zm,qre,GUe,OUe,FS,VUe,XUe,zUe,Wm,Nre,WUe,QUe,TS,HUe,UUe,JUe,Qm,jre,YUe,KUe,MS,ZUe,eJe,oJe,Hm,Dre,rJe,tJe,ES,aJe,nJe,sJe,Um,Gre,lJe,iJe,CS,dJe,cJe,fJe,Jm,Ore,mJe,gJe,wS,hJe,pJe,uJe,Ym,Vre,_Je,bJe,AS,vJe,FJe,TJe,Km,Xre,MJe,EJe,yS,CJe,wJe,AJe,Zm,zre,yJe,LJe,LS,xJe,$Je,kJe,eg,Wre,SJe,RJe,xS,PJe,BJe,IJe,og,Qre,qJe,NJe,$S,jJe,DJe,GJe,rg,Hre,OJe,VJe,kS,XJe,zJe,WJe,tg,Ure,QJe,HJe,SS,UJe,JJe,YJe,ag,Jre,KJe,ZJe,RS,eYe,oYe,rYe,ng,Yre,tYe,aYe,PS,nYe,sYe,lYe,sg,Kre,iYe,dYe,BS,cYe,fYe,mYe,lg,Zre,gYe,hYe,IS,pYe,uYe,_Ye,ig,ete,bYe,vYe,qS,FYe,TYe,MYe,dg,ote,EYe,CYe,NS,wYe,AYe,yYe,cg,rte,LYe,xYe,jS,$Ye,kYe,SYe,fg,tte,RYe,PYe,DS,BYe,IYe,qYe,mg,ate,NYe,jYe,GS,DYe,GYe,OYe,gg,nte,VYe,XYe,OS,zYe,WYe,QYe,hg,ste,HYe,UYe,VS,JYe,YYe,KYe,pg,lte,ZYe,eKe,XS,oKe,rKe,tKe,ug,ite,aKe,nKe,zS,sKe,lKe,iKe,_g,dte,dKe,cKe,WS,fKe,mKe,gKe,bg,cte,hKe,pKe,QS,uKe,_Ke,bKe,vg,fte,vKe,FKe,HS,TKe,MKe,EKe,Fg,mte,CKe,wKe,US,AKe,yKe,LKe,Tg,gte,xKe,$Ke,JS,kKe,SKe,RKe,Mg,PKe,Eg,RA,BKe,hte,IKe,oNe,Ti,Cg,pte,PA,qKe,ute,NKe,rNe,wo,BA,jKe,IA,DKe,YS,GKe,OKe,VKe,qA,XKe,_te,zKe,WKe,QKe,Cr,NA,HKe,bte,UKe,JKe,Aa,YKe,vte,KKe,ZKe,Fte,eZe,oZe,Tte,rZe,tZe,aZe,k,Sn,Mte,nZe,sZe,KS,lZe,iZe,ZS,dZe,cZe,fZe,Rn,Ete,mZe,gZe,eR,hZe,pZe,oR,uZe,_Ze,bZe,Pn,Cte,vZe,FZe,rR,TZe,MZe,tR,EZe,CZe,wZe,wg,wte,AZe,yZe,aR,LZe,xZe,$Ze,Bn,Ate,kZe,SZe,nR,RZe,PZe,sR,BZe,IZe,qZe,Ag,yte,NZe,jZe,lR,DZe,GZe,OZe,yg,Lte,VZe,XZe,iR,zZe,WZe,QZe,Lg,xte,HZe,UZe,dR,JZe,YZe,KZe,In,$te,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,qn,kte,seo,leo,mR,ieo,deo,gR,ceo,feo,meo,Nn,Ste,geo,heo,hR,peo,ueo,pR,_eo,beo,veo,xg,Rte,Feo,Teo,uR,Meo,Eeo,Ceo,$g,Pte,weo,Aeo,_R,yeo,Leo,xeo,jn,Bte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,kg,Ite,qeo,Neo,FR,jeo,Deo,Geo,Dn,qte,Oeo,Veo,TR,Xeo,zeo,MR,Weo,Qeo,Heo,Gn,Nte,Ueo,Jeo,ER,Yeo,Keo,CR,Zeo,eoo,ooo,On,jte,roo,too,wR,aoo,noo,AR,soo,loo,ioo,Sg,Dte,doo,coo,yR,foo,moo,goo,Vn,Gte,hoo,poo,LR,uoo,_oo,xR,boo,voo,Foo,Xn,Ote,Too,Moo,$R,Eoo,Coo,kR,woo,Aoo,yoo,zn,Vte,Loo,xoo,SR,$oo,koo,RR,Soo,Roo,Poo,Wn,Xte,Boo,Ioo,PR,qoo,Noo,BR,joo,Doo,Goo,Qn,zte,Ooo,Voo,IR,Xoo,zoo,qR,Woo,Qoo,Hoo,Hn,Wte,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,Rg,Qte,rro,tro,DR,aro,nro,sro,Un,Hte,lro,iro,GR,dro,cro,OR,fro,mro,gro,Pg,Ute,hro,pro,VR,uro,_ro,bro,Jn,Jte,vro,Fro,XR,Tro,Mro,zR,Ero,Cro,wro,Yn,Yte,Aro,yro,WR,Lro,xro,QR,$ro,kro,Sro,Kn,Kte,Rro,Pro,HR,Bro,Iro,UR,qro,Nro,jro,Zn,Zte,Dro,Gro,JR,Oro,Vro,YR,Xro,zro,Wro,es,eae,Qro,Hro,KR,Uro,Jro,ZR,Yro,Kro,Zro,Bg,oae,eto,oto,eP,rto,tto,ato,os,rae,nto,sto,oP,lto,ito,rP,dto,cto,fto,rs,tae,mto,gto,tP,hto,pto,aP,uto,_to,bto,ts,aae,vto,Fto,nP,Tto,Mto,sP,Eto,Cto,wto,as,nae,Ato,yto,lP,Lto,xto,iP,$to,kto,Sto,ns,sae,Rto,Pto,dP,Bto,Ito,cP,qto,Nto,jto,ss,lae,Dto,Gto,fP,Oto,Vto,mP,Xto,zto,Wto,ls,iae,Qto,Hto,gP,Uto,Jto,hP,Yto,Kto,Zto,Ig,dae,eao,oao,pP,rao,tao,aao,is,cae,nao,sao,uP,lao,iao,_P,dao,cao,fao,qg,fae,mao,gao,bP,hao,pao,uao,Ng,mae,_ao,bao,vP,vao,Fao,Tao,ds,gae,Mao,Eao,FP,Cao,wao,TP,Aao,yao,Lao,cs,hae,xao,$ao,MP,kao,Sao,EP,Rao,Pao,Bao,fs,pae,Iao,qao,CP,Nao,jao,wP,Dao,Gao,Oao,jg,uae,Vao,Xao,AP,zao,Wao,Qao,ms,_ae,Hao,Uao,yP,Jao,Yao,LP,Kao,Zao,eno,gs,bae,ono,rno,xP,tno,ano,$P,nno,sno,lno,hs,vae,ino,dno,kP,cno,fno,SP,mno,gno,hno,ps,Fae,pno,uno,RP,_no,bno,PP,vno,Fno,Tno,us,Tae,Mno,Eno,BP,Cno,wno,IP,Ano,yno,Lno,Dg,Mae,xno,$no,qP,kno,Sno,Rno,_s,Eae,Pno,Bno,NP,Ino,qno,jP,Nno,jno,Dno,Gg,Cae,Gno,Ono,DP,Vno,Xno,zno,Og,wae,Wno,Qno,GP,Hno,Uno,Jno,Vg,Aae,Yno,Kno,OP,Zno,eso,oso,Xg,yae,rso,tso,VP,aso,nso,sso,bs,Lae,lso,iso,XP,dso,cso,zP,fso,mso,gso,zg,xae,hso,pso,WP,uso,_so,bso,vs,$ae,vso,Fso,QP,Tso,Mso,HP,Eso,Cso,wso,Fs,kae,Aso,yso,UP,Lso,xso,JP,$so,kso,Sso,Ts,Sae,Rso,Pso,YP,Bso,Iso,KP,qso,Nso,jso,Ms,Rae,Dso,Gso,ZP,Oso,Vso,eB,Xso,zso,Wso,Es,Pae,Qso,Hso,oB,Uso,Jso,rB,Yso,Kso,Zso,Cs,Bae,elo,olo,tB,rlo,tlo,aB,alo,nlo,slo,Wg,Iae,llo,ilo,nB,dlo,clo,flo,Qg,qae,mlo,glo,sB,hlo,plo,ulo,ws,Nae,_lo,blo,lB,vlo,Flo,iB,Tlo,Mlo,Elo,As,jae,Clo,wlo,dB,Alo,ylo,cB,Llo,xlo,$lo,ys,Dae,klo,Slo,fB,Rlo,Plo,mB,Blo,Ilo,qlo,Hg,Gae,Nlo,jlo,gB,Dlo,Glo,Olo,Ug,Oae,Vlo,Xlo,hB,zlo,Wlo,Qlo,Jg,Vae,Hlo,Ulo,pB,Jlo,Ylo,Klo,Ls,Xae,Zlo,eio,uB,oio,rio,_B,tio,aio,nio,Yg,zae,sio,lio,bB,iio,dio,cio,Kg,Wae,fio,mio,vB,gio,hio,pio,Zg,Qae,uio,_io,FB,bio,vio,Fio,xs,Hae,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,yio,eh,Uae,Lio,xio,EB,$io,kio,Sio,oh,Jae,Rio,Pio,CB,Bio,Iio,qio,$s,Yae,Nio,jio,wB,Dio,Gio,AB,Oio,Vio,Xio,ks,Kae,zio,Wio,yB,Qio,Hio,LB,Uio,Jio,Yio,Ss,Zae,Kio,Zio,xB,edo,odo,$B,rdo,tdo,ado,Rs,ene,ndo,sdo,kB,ldo,ido,SB,ddo,cdo,fdo,rh,mdo,th,jA,gdo,one,hdo,tNe,Mi,ah,rne,DA,pdo,tne,udo,aNe,Ao,GA,_do,OA,bdo,RB,vdo,Fdo,Tdo,VA,Mdo,ane,Edo,Cdo,wdo,He,XA,Ado,nne,ydo,Ldo,ya,xdo,sne,$do,kdo,lne,Sdo,Rdo,ine,Pdo,Bdo,Ido,K,nh,dne,qdo,Ndo,PB,jdo,Ddo,Gdo,sh,cne,Odo,Vdo,BB,Xdo,zdo,Wdo,lh,fne,Qdo,Hdo,IB,Udo,Jdo,Ydo,ih,mne,Kdo,Zdo,qB,eco,oco,rco,dh,gne,tco,aco,NB,nco,sco,lco,ch,hne,ico,dco,jB,cco,fco,mco,fh,pne,gco,hco,DB,pco,uco,_co,mh,une,bco,vco,GB,Fco,Tco,Mco,gh,_ne,Eco,Cco,OB,wco,Aco,yco,hh,bne,Lco,xco,VB,$co,kco,Sco,ph,vne,Rco,Pco,XB,Bco,Ico,qco,uh,Fne,Nco,jco,zB,Dco,Gco,Oco,_h,Tne,Vco,Xco,WB,zco,Wco,Qco,bh,Mne,Hco,Uco,QB,Jco,Yco,Kco,vh,Ene,Zco,efo,HB,ofo,rfo,tfo,Fh,Cne,afo,nfo,UB,sfo,lfo,ifo,Th,wne,dfo,cfo,JB,ffo,mfo,gfo,Mh,Ane,hfo,pfo,YB,ufo,_fo,bfo,Eh,yne,vfo,Ffo,KB,Tfo,Mfo,Efo,Ch,Lne,Cfo,wfo,ZB,Afo,yfo,Lfo,wh,xne,xfo,$fo,eI,kfo,Sfo,Rfo,Ah,$ne,Pfo,Bfo,oI,Ifo,qfo,Nfo,yh,kne,jfo,Dfo,rI,Gfo,Ofo,Vfo,Lh,Sne,Xfo,zfo,tI,Wfo,Qfo,Hfo,xh,Rne,Ufo,Jfo,aI,Yfo,Kfo,Zfo,$h,Pne,emo,omo,nI,rmo,tmo,amo,kh,Bne,nmo,smo,sI,lmo,imo,dmo,Sh,Ine,cmo,fmo,lI,mmo,gmo,hmo,Rh,pmo,Ph,umo,Bh,zA,_mo,qne,bmo,nNe,Ei,Ih,Nne,WA,vmo,jne,Fmo,sNe,yo,QA,Tmo,HA,Mmo,iI,Emo,Cmo,wmo,UA,Amo,Dne,ymo,Lmo,xmo,Ue,JA,$mo,Gne,kmo,Smo,Ci,Rmo,One,Pmo,Bmo,Vne,Imo,qmo,Nmo,he,qh,Xne,jmo,Dmo,dI,Gmo,Omo,Vmo,Nh,zne,Xmo,zmo,Wne,Wmo,Qmo,Hmo,jh,Qne,Umo,Jmo,cI,Ymo,Kmo,Zmo,Dh,Hne,ego,ogo,fI,rgo,tgo,ago,Gh,Une,ngo,sgo,mI,lgo,igo,dgo,Oh,Jne,cgo,fgo,gI,mgo,ggo,hgo,Vh,Yne,pgo,ugo,hI,_go,bgo,vgo,Xh,Kne,Fgo,Tgo,pI,Mgo,Ego,Cgo,zh,Zne,wgo,Ago,uI,ygo,Lgo,xgo,Wh,ese,$go,kgo,_I,Sgo,Rgo,Pgo,Qh,ose,Bgo,Igo,bI,qgo,Ngo,jgo,Hh,rse,Dgo,Ggo,vI,Ogo,Vgo,Xgo,Uh,tse,zgo,Wgo,FI,Qgo,Hgo,Ugo,Jh,ase,Jgo,Ygo,TI,Kgo,Zgo,eho,Yh,nse,oho,rho,MI,tho,aho,nho,Kh,sse,sho,lho,EI,iho,dho,cho,Zh,lse,fho,mho,CI,gho,hho,pho,ep,uho,op,_ho,rp,YA,bho,ise,vho,lNe,wi,tp,dse,KA,Fho,cse,Tho,iNe,Lo,ZA,Mho,Ai,Eho,wI,Cho,who,AI,Aho,yho,Lho,e6,xho,fse,$ho,kho,Sho,tt,o6,Rho,mse,Pho,Bho,yi,Iho,gse,qho,Nho,yI,jho,Dho,Gho,ap,Oho,Je,r6,Vho,hse,Xho,zho,La,Who,pse,Qho,Hho,use,Uho,Jho,_se,Yho,Kho,Zho,x,np,bse,epo,opo,LI,rpo,tpo,apo,sp,vse,npo,spo,xI,lpo,ipo,dpo,lp,Fse,cpo,fpo,$I,mpo,gpo,hpo,ip,Tse,ppo,upo,kI,_po,bpo,vpo,dp,Mse,Fpo,Tpo,SI,Mpo,Epo,Cpo,cp,Ese,wpo,Apo,RI,ypo,Lpo,xpo,fp,Cse,$po,kpo,PI,Spo,Rpo,Ppo,mp,wse,Bpo,Ipo,BI,qpo,Npo,jpo,gp,Ase,Dpo,Gpo,II,Opo,Vpo,Xpo,hp,yse,zpo,Wpo,qI,Qpo,Hpo,Upo,pp,Lse,Jpo,Ypo,NI,Kpo,Zpo,euo,up,xse,ouo,ruo,jI,tuo,auo,nuo,_p,$se,suo,luo,DI,iuo,duo,cuo,bp,kse,fuo,muo,GI,guo,huo,puo,vp,Sse,uuo,_uo,OI,buo,vuo,Fuo,Fp,Rse,Tuo,Muo,VI,Euo,Cuo,wuo,Tp,Pse,Auo,yuo,XI,Luo,xuo,$uo,Mp,Bse,kuo,Suo,zI,Ruo,Puo,Buo,Ep,Ise,Iuo,quo,WI,Nuo,juo,Duo,Cp,qse,Guo,Ouo,QI,Vuo,Xuo,zuo,wp,Nse,Wuo,Quo,HI,Huo,Uuo,Juo,Ap,jse,Yuo,Kuo,UI,Zuo,e_o,o_o,yp,Dse,r_o,t_o,JI,a_o,n_o,s_o,Lp,Gse,l_o,i_o,YI,d_o,c_o,f_o,xp,Ose,m_o,g_o,KI,h_o,p_o,u_o,$p,Vse,__o,b_o,ZI,v_o,F_o,T_o,kp,Xse,M_o,E_o,eq,C_o,w_o,A_o,Sp,zse,y_o,L_o,oq,x_o,$_o,k_o,Rp,Wse,S_o,R_o,rq,P_o,B_o,I_o,Pp,Qse,q_o,N_o,tq,j_o,D_o,G_o,Bp,Hse,O_o,V_o,aq,X_o,z_o,W_o,Ip,Use,Q_o,H_o,nq,U_o,J_o,Y_o,Ps,Jse,K_o,Z_o,sq,e1o,o1o,lq,r1o,t1o,a1o,qp,Yse,n1o,s1o,iq,l1o,i1o,d1o,Np,Kse,c1o,f1o,dq,m1o,g1o,h1o,jp,Zse,p1o,u1o,cq,_1o,b1o,v1o,Dp,ele,F1o,T1o,fq,M1o,E1o,C1o,Gp,ole,w1o,A1o,mq,y1o,L1o,x1o,Op,rle,$1o,k1o,gq,S1o,R1o,P1o,Vp,tle,B1o,I1o,hq,q1o,N1o,j1o,Xp,ale,D1o,G1o,pq,O1o,V1o,X1o,zp,nle,z1o,W1o,uq,Q1o,H1o,U1o,Wp,sle,J1o,Y1o,_q,K1o,Z1o,e8o,Qp,lle,o8o,r8o,bq,t8o,a8o,n8o,Hp,ile,s8o,l8o,vq,i8o,d8o,c8o,Up,dle,f8o,m8o,Fq,g8o,h8o,p8o,Jp,cle,u8o,_8o,Tq,b8o,v8o,F8o,Yp,fle,T8o,M8o,Mq,E8o,C8o,w8o,Kp,mle,A8o,y8o,Eq,L8o,x8o,$8o,Zp,gle,k8o,S8o,Cq,R8o,P8o,B8o,eu,hle,I8o,q8o,wq,N8o,j8o,D8o,ou,ple,G8o,O8o,Aq,V8o,X8o,z8o,ru,ule,W8o,Q8o,yq,H8o,U8o,J8o,tu,_le,Y8o,K8o,Lq,Z8o,ebo,obo,au,ble,rbo,tbo,xq,abo,nbo,sbo,nu,vle,lbo,ibo,$q,dbo,cbo,fbo,su,Fle,mbo,gbo,kq,hbo,pbo,ubo,lu,Tle,_bo,bbo,Sq,vbo,Fbo,Tbo,iu,Mle,Mbo,Ebo,Rq,Cbo,wbo,Abo,du,Ele,ybo,Lbo,Pq,xbo,$bo,kbo,cu,Cle,Sbo,Rbo,Bq,Pbo,Bbo,Ibo,fu,wle,qbo,Nbo,Iq,jbo,Dbo,Gbo,mu,Ale,Obo,Vbo,qq,Xbo,zbo,Wbo,gu,yle,Qbo,Hbo,Nq,Ubo,Jbo,Ybo,hu,Lle,Kbo,Zbo,jq,e2o,o2o,r2o,pu,xle,t2o,a2o,Dq,n2o,s2o,l2o,uu,$le,i2o,d2o,Gq,c2o,f2o,m2o,_u,kle,g2o,h2o,Oq,p2o,u2o,_2o,bu,Sle,b2o,v2o,Vq,F2o,T2o,M2o,vu,Rle,E2o,C2o,Xq,w2o,A2o,y2o,Fu,Ple,L2o,x2o,zq,$2o,k2o,S2o,Tu,Ble,R2o,P2o,Wq,B2o,I2o,q2o,Mu,Ile,N2o,j2o,Qq,D2o,G2o,O2o,Eu,qle,V2o,X2o,Hq,z2o,W2o,Q2o,Cu,Nle,H2o,U2o,Uq,J2o,Y2o,K2o,wu,jle,Z2o,evo,Jq,ovo,rvo,tvo,Au,Dle,avo,nvo,Yq,svo,lvo,ivo,yu,Gle,dvo,cvo,Kq,fvo,mvo,gvo,Lu,Ole,hvo,pvo,Zq,uvo,_vo,bvo,xu,Vle,vvo,Fvo,eN,Tvo,Mvo,Evo,$u,Xle,Cvo,wvo,oN,Avo,yvo,Lvo,ku,zle,xvo,$vo,rN,kvo,Svo,Rvo,Su,Wle,Pvo,Bvo,tN,Ivo,qvo,Nvo,Ru,Qle,jvo,Dvo,aN,Gvo,Ovo,Vvo,Pu,Hle,Xvo,zvo,nN,Wvo,Qvo,Hvo,Bu,Ule,Uvo,Jvo,sN,Yvo,Kvo,Zvo,Iu,Jle,e3o,o3o,lN,r3o,t3o,a3o,qu,Yle,n3o,s3o,iN,l3o,i3o,d3o,Nu,Kle,c3o,f3o,dN,m3o,g3o,h3o,ju,Zle,p3o,u3o,cN,_3o,b3o,v3o,Du,eie,F3o,T3o,fN,M3o,E3o,C3o,Gu,oie,w3o,A3o,mN,y3o,L3o,x3o,Ou,rie,$3o,k3o,gN,S3o,R3o,P3o,Vu,tie,B3o,I3o,hN,q3o,N3o,j3o,Xu,aie,D3o,G3o,pN,O3o,V3o,X3o,zu,nie,z3o,W3o,uN,Q3o,H3o,U3o,Wu,sie,J3o,Y3o,_N,K3o,Z3o,eFo,Qu,lie,oFo,rFo,bN,tFo,aFo,nFo,Hu,iie,sFo,lFo,vN,iFo,dFo,cFo,Uu,die,fFo,mFo,FN,gFo,hFo,pFo,Ju,cie,uFo,_Fo,TN,bFo,vFo,FFo,Yu,TFo,fie,MFo,EFo,mie,CFo,wFo,Ku,dNe,Li,Zu,gie,t6,AFo,hie,yFo,cNe,xo,a6,LFo,xi,xFo,MN,$Fo,kFo,EN,SFo,RFo,PFo,n6,BFo,pie,IFo,qFo,NFo,at,s6,jFo,uie,DFo,GFo,$i,OFo,_ie,VFo,XFo,CN,zFo,WFo,QFo,e_,HFo,Ye,l6,UFo,bie,JFo,YFo,xa,KFo,vie,ZFo,eTo,Fie,oTo,rTo,Tie,tTo,aTo,nTo,G,o_,Mie,sTo,lTo,wN,iTo,dTo,cTo,r_,Eie,fTo,mTo,AN,gTo,hTo,pTo,t_,Cie,uTo,_To,yN,bTo,vTo,FTo,a_,wie,TTo,MTo,LN,ETo,CTo,wTo,n_,Aie,ATo,yTo,xN,LTo,xTo,$To,s_,yie,kTo,STo,$N,RTo,PTo,BTo,l_,Lie,ITo,qTo,kN,NTo,jTo,DTo,i_,xie,GTo,OTo,SN,VTo,XTo,zTo,d_,$ie,WTo,QTo,RN,HTo,UTo,JTo,c_,kie,YTo,KTo,PN,ZTo,e7o,o7o,f_,Sie,r7o,t7o,BN,a7o,n7o,s7o,m_,Rie,l7o,i7o,IN,d7o,c7o,f7o,g_,Pie,m7o,g7o,qN,h7o,p7o,u7o,h_,Bie,_7o,b7o,NN,v7o,F7o,T7o,p_,Iie,M7o,E7o,jN,C7o,w7o,A7o,u_,qie,y7o,L7o,DN,x7o,$7o,k7o,__,Nie,S7o,R7o,GN,P7o,B7o,I7o,b_,jie,q7o,N7o,ON,j7o,D7o,G7o,v_,Die,O7o,V7o,VN,X7o,z7o,W7o,F_,Gie,Q7o,H7o,XN,U7o,J7o,Y7o,T_,Oie,K7o,Z7o,zN,eMo,oMo,rMo,M_,Vie,tMo,aMo,WN,nMo,sMo,lMo,E_,Xie,iMo,dMo,QN,cMo,fMo,mMo,C_,zie,gMo,hMo,HN,pMo,uMo,_Mo,w_,Wie,bMo,vMo,UN,FMo,TMo,MMo,A_,Qie,EMo,CMo,JN,wMo,AMo,yMo,y_,Hie,LMo,xMo,YN,$Mo,kMo,SMo,L_,Uie,RMo,PMo,KN,BMo,IMo,qMo,x_,Jie,NMo,jMo,ZN,DMo,GMo,OMo,$_,Yie,VMo,XMo,ej,zMo,WMo,QMo,k_,Kie,HMo,UMo,oj,JMo,YMo,KMo,S_,Zie,ZMo,e4o,rj,o4o,r4o,t4o,R_,ede,a4o,n4o,tj,s4o,l4o,i4o,P_,ode,d4o,c4o,aj,f4o,m4o,g4o,B_,rde,h4o,p4o,nj,u4o,_4o,b4o,I_,tde,v4o,F4o,sj,T4o,M4o,E4o,q_,ade,C4o,w4o,lj,A4o,y4o,L4o,N_,nde,x4o,$4o,ij,k4o,S4o,R4o,j_,sde,P4o,B4o,dj,I4o,q4o,N4o,D_,lde,j4o,D4o,cj,G4o,O4o,V4o,G_,ide,X4o,z4o,fj,W4o,Q4o,H4o,O_,dde,U4o,J4o,mj,Y4o,K4o,Z4o,V_,eEo,cde,oEo,rEo,fde,tEo,aEo,X_,fNe,ki,z_,mde,i6,nEo,gde,sEo,mNe,$o,d6,lEo,Si,iEo,gj,dEo,cEo,hj,fEo,mEo,gEo,c6,hEo,hde,pEo,uEo,_Eo,nt,f6,bEo,pde,vEo,FEo,Ri,TEo,ude,MEo,EEo,pj,CEo,wEo,AEo,W_,yEo,Ke,m6,LEo,_de,xEo,$Eo,$a,kEo,bde,SEo,REo,vde,PEo,BEo,Fde,IEo,qEo,NEo,z,Q_,Tde,jEo,DEo,uj,GEo,OEo,VEo,H_,Mde,XEo,zEo,_j,WEo,QEo,HEo,U_,Ede,UEo,JEo,bj,YEo,KEo,ZEo,J_,Cde,eCo,oCo,vj,rCo,tCo,aCo,Y_,wde,nCo,sCo,Fj,lCo,iCo,dCo,K_,Ade,cCo,fCo,Tj,mCo,gCo,hCo,Z_,yde,pCo,uCo,Mj,_Co,bCo,vCo,e1,Lde,FCo,TCo,Ej,MCo,ECo,CCo,o1,xde,wCo,ACo,Cj,yCo,LCo,xCo,r1,$de,$Co,kCo,wj,SCo,RCo,PCo,t1,kde,BCo,ICo,Aj,qCo,NCo,jCo,a1,Sde,DCo,GCo,yj,OCo,VCo,XCo,n1,Rde,zCo,WCo,Lj,QCo,HCo,UCo,s1,Pde,JCo,YCo,xj,KCo,ZCo,e5o,l1,Bde,o5o,r5o,$j,t5o,a5o,n5o,i1,Ide,s5o,l5o,kj,i5o,d5o,c5o,d1,qde,f5o,m5o,Sj,g5o,h5o,p5o,c1,Nde,u5o,_5o,Rj,b5o,v5o,F5o,f1,jde,T5o,M5o,Pj,E5o,C5o,w5o,m1,Dde,A5o,y5o,Bj,L5o,x5o,$5o,g1,Gde,k5o,S5o,Ij,R5o,P5o,B5o,h1,Ode,I5o,q5o,qj,N5o,j5o,D5o,p1,Vde,G5o,O5o,Nj,V5o,X5o,z5o,u1,Xde,W5o,Q5o,jj,H5o,U5o,J5o,_1,zde,Y5o,K5o,Dj,Z5o,ewo,owo,b1,Wde,rwo,two,Gj,awo,nwo,swo,v1,Qde,lwo,iwo,Oj,dwo,cwo,fwo,F1,Hde,mwo,gwo,Vj,hwo,pwo,uwo,T1,Ude,_wo,bwo,Xj,vwo,Fwo,Two,M1,Jde,Mwo,Ewo,zj,Cwo,wwo,Awo,E1,Yde,ywo,Lwo,Wj,xwo,$wo,kwo,C1,Kde,Swo,Rwo,Qj,Pwo,Bwo,Iwo,w1,Zde,qwo,Nwo,Hj,jwo,Dwo,Gwo,A1,ece,Owo,Vwo,Uj,Xwo,zwo,Wwo,y1,oce,Qwo,Hwo,Jj,Uwo,Jwo,Ywo,L1,rce,Kwo,Zwo,Yj,e0o,o0o,r0o,x1,t0o,tce,a0o,n0o,ace,s0o,l0o,$1,gNe,Pi,k1,nce,g6,i0o,sce,d0o,hNe,ko,h6,c0o,Bi,f0o,Kj,m0o,g0o,Zj,h0o,p0o,u0o,p6,_0o,lce,b0o,v0o,F0o,st,u6,T0o,ice,M0o,E0o,Ii,C0o,dce,w0o,A0o,eD,y0o,L0o,x0o,S1,$0o,Ze,_6,k0o,cce,S0o,R0o,ka,P0o,fce,B0o,I0o,mce,q0o,N0o,gce,j0o,D0o,G0o,W,R1,hce,O0o,V0o,oD,X0o,z0o,W0o,P1,pce,Q0o,H0o,rD,U0o,J0o,Y0o,B1,uce,K0o,Z0o,tD,eAo,oAo,rAo,I1,_ce,tAo,aAo,aD,nAo,sAo,lAo,q1,bce,iAo,dAo,nD,cAo,fAo,mAo,N1,vce,gAo,hAo,sD,pAo,uAo,_Ao,j1,Fce,bAo,vAo,lD,FAo,TAo,MAo,D1,Tce,EAo,CAo,iD,wAo,AAo,yAo,G1,Mce,LAo,xAo,dD,$Ao,kAo,SAo,O1,Ece,RAo,PAo,cD,BAo,IAo,qAo,V1,Cce,NAo,jAo,fD,DAo,GAo,OAo,X1,wce,VAo,XAo,mD,zAo,WAo,QAo,z1,Ace,HAo,UAo,gD,JAo,YAo,KAo,W1,yce,ZAo,e6o,hD,o6o,r6o,t6o,Q1,Lce,a6o,n6o,pD,s6o,l6o,i6o,H1,xce,d6o,c6o,uD,f6o,m6o,g6o,U1,$ce,h6o,p6o,_D,u6o,_6o,b6o,J1,kce,v6o,F6o,bD,T6o,M6o,E6o,Y1,Sce,C6o,w6o,vD,A6o,y6o,L6o,K1,Rce,x6o,$6o,FD,k6o,S6o,R6o,Z1,Pce,P6o,B6o,TD,I6o,q6o,N6o,e8,Bce,j6o,D6o,MD,G6o,O6o,V6o,o8,Ice,X6o,z6o,ED,W6o,Q6o,H6o,r8,qce,U6o,J6o,CD,Y6o,K6o,Z6o,t8,Nce,eyo,oyo,wD,ryo,tyo,ayo,a8,jce,nyo,syo,AD,lyo,iyo,dyo,n8,Dce,cyo,fyo,yD,myo,gyo,hyo,s8,Gce,pyo,uyo,LD,_yo,byo,vyo,l8,Oce,Fyo,Tyo,xD,Myo,Eyo,Cyo,i8,Vce,wyo,Ayo,$D,yyo,Lyo,xyo,d8,Xce,$yo,kyo,zce,Syo,Ryo,Pyo,c8,Wce,Byo,Iyo,kD,qyo,Nyo,jyo,f8,Qce,Dyo,Gyo,SD,Oyo,Vyo,Xyo,m8,Hce,zyo,Wyo,RD,Qyo,Hyo,Uyo,g8,Uce,Jyo,Yyo,PD,Kyo,Zyo,eLo,h8,oLo,Jce,rLo,tLo,Yce,aLo,nLo,p8,pNe,qi,u8,Kce,b6,sLo,Zce,lLo,uNe,So,v6,iLo,Ni,dLo,BD,cLo,fLo,ID,mLo,gLo,hLo,F6,pLo,efe,uLo,_Lo,bLo,lt,T6,vLo,ofe,FLo,TLo,ji,MLo,rfe,ELo,CLo,qD,wLo,ALo,yLo,_8,LLo,eo,M6,xLo,tfe,$Lo,kLo,Sa,SLo,afe,RLo,PLo,nfe,BLo,ILo,sfe,qLo,NLo,jLo,ue,b8,lfe,DLo,GLo,ND,OLo,VLo,XLo,v8,ife,zLo,WLo,jD,QLo,HLo,ULo,F8,dfe,JLo,YLo,DD,KLo,ZLo,e9o,T8,cfe,o9o,r9o,GD,t9o,a9o,n9o,M8,ffe,s9o,l9o,OD,i9o,d9o,c9o,E8,mfe,f9o,m9o,VD,g9o,h9o,p9o,C8,gfe,u9o,_9o,XD,b9o,v9o,F9o,w8,hfe,T9o,M9o,zD,E9o,C9o,w9o,A8,pfe,A9o,y9o,WD,L9o,x9o,$9o,y8,ufe,k9o,S9o,QD,R9o,P9o,B9o,L8,_fe,I9o,q9o,HD,N9o,j9o,D9o,x8,bfe,G9o,O9o,UD,V9o,X9o,z9o,$8,vfe,W9o,Q9o,JD,H9o,U9o,J9o,k8,Ffe,Y9o,K9o,YD,Z9o,exo,oxo,S8,Tfe,rxo,txo,KD,axo,nxo,sxo,R8,Mfe,lxo,ixo,ZD,dxo,cxo,fxo,P8,mxo,Efe,gxo,hxo,Cfe,pxo,uxo,B8,_Ne,Di,I8,wfe,E6,_xo,Afe,bxo,bNe,Ro,C6,vxo,Gi,Fxo,eG,Txo,Mxo,oG,Exo,Cxo,wxo,w6,Axo,yfe,yxo,Lxo,xxo,it,A6,$xo,Lfe,kxo,Sxo,Oi,Rxo,xfe,Pxo,Bxo,rG,Ixo,qxo,Nxo,q8,jxo,oo,y6,Dxo,$fe,Gxo,Oxo,Ra,Vxo,kfe,Xxo,zxo,Sfe,Wxo,Qxo,Rfe,Hxo,Uxo,Jxo,q,N8,Pfe,Yxo,Kxo,tG,Zxo,e$o,o$o,j8,Bfe,r$o,t$o,aG,a$o,n$o,s$o,D8,Ife,l$o,i$o,nG,d$o,c$o,f$o,G8,qfe,m$o,g$o,sG,h$o,p$o,u$o,O8,Nfe,_$o,b$o,lG,v$o,F$o,T$o,V8,jfe,M$o,E$o,iG,C$o,w$o,A$o,X8,Dfe,y$o,L$o,dG,x$o,$$o,k$o,z8,Gfe,S$o,R$o,cG,P$o,B$o,I$o,W8,Ofe,q$o,N$o,fG,j$o,D$o,G$o,Q8,Vfe,O$o,V$o,mG,X$o,z$o,W$o,H8,Xfe,Q$o,H$o,gG,U$o,J$o,Y$o,U8,zfe,K$o,Z$o,hG,eko,oko,rko,J8,Wfe,tko,ako,pG,nko,sko,lko,Y8,Qfe,iko,dko,uG,cko,fko,mko,K8,Hfe,gko,hko,_G,pko,uko,_ko,Z8,Ufe,bko,vko,bG,Fko,Tko,Mko,eb,Jfe,Eko,Cko,vG,wko,Ako,yko,ob,Yfe,Lko,xko,FG,$ko,kko,Sko,rb,Kfe,Rko,Pko,TG,Bko,Iko,qko,tb,Zfe,Nko,jko,MG,Dko,Gko,Oko,ab,eme,Vko,Xko,EG,zko,Wko,Qko,nb,ome,Hko,Uko,CG,Jko,Yko,Kko,sb,rme,Zko,eSo,wG,oSo,rSo,tSo,lb,tme,aSo,nSo,AG,sSo,lSo,iSo,ib,ame,dSo,cSo,yG,fSo,mSo,gSo,db,nme,hSo,pSo,LG,uSo,_So,bSo,cb,sme,vSo,FSo,xG,TSo,MSo,ESo,fb,lme,CSo,wSo,$G,ASo,ySo,LSo,mb,ime,xSo,$So,kG,kSo,SSo,RSo,gb,dme,PSo,BSo,SG,ISo,qSo,NSo,hb,cme,jSo,DSo,RG,GSo,OSo,VSo,pb,fme,XSo,zSo,PG,WSo,QSo,HSo,ub,mme,USo,JSo,BG,YSo,KSo,ZSo,_b,gme,eRo,oRo,IG,rRo,tRo,aRo,bb,hme,nRo,sRo,qG,lRo,iRo,dRo,vb,pme,cRo,fRo,NG,mRo,gRo,hRo,Fb,ume,pRo,uRo,jG,_Ro,bRo,vRo,Tb,_me,FRo,TRo,DG,MRo,ERo,CRo,Mb,bme,wRo,ARo,GG,yRo,LRo,xRo,Eb,vme,$Ro,kRo,OG,SRo,RRo,PRo,Cb,Fme,BRo,IRo,VG,qRo,NRo,jRo,wb,Tme,DRo,GRo,XG,ORo,VRo,XRo,Ab,Mme,zRo,WRo,zG,QRo,HRo,URo,yb,Eme,JRo,YRo,WG,KRo,ZRo,ePo,Lb,Cme,oPo,rPo,QG,tPo,aPo,nPo,xb,wme,sPo,lPo,HG,iPo,dPo,cPo,$b,Ame,fPo,mPo,UG,gPo,hPo,pPo,kb,uPo,yme,_Po,bPo,Lme,vPo,FPo,Sb,vNe,Vi,Rb,xme,L6,TPo,$me,MPo,FNe,Po,x6,EPo,Xi,CPo,JG,wPo,APo,YG,yPo,LPo,xPo,$6,$Po,kme,kPo,SPo,RPo,dt,k6,PPo,Sme,BPo,IPo,zi,qPo,Rme,NPo,jPo,KG,DPo,GPo,OPo,Pb,VPo,ro,S6,XPo,Pme,zPo,WPo,Pa,QPo,Bme,HPo,UPo,Ime,JPo,YPo,qme,KPo,ZPo,eBo,Y,Bb,Nme,oBo,rBo,ZG,tBo,aBo,nBo,Ib,jme,sBo,lBo,eO,iBo,dBo,cBo,qb,Dme,fBo,mBo,oO,gBo,hBo,pBo,Nb,Gme,uBo,_Bo,rO,bBo,vBo,FBo,jb,Ome,TBo,MBo,tO,EBo,CBo,wBo,Db,Vme,ABo,yBo,aO,LBo,xBo,$Bo,Gb,Xme,kBo,SBo,nO,RBo,PBo,BBo,Ob,zme,IBo,qBo,sO,NBo,jBo,DBo,Vb,Wme,GBo,OBo,lO,VBo,XBo,zBo,Xb,Qme,WBo,QBo,iO,HBo,UBo,JBo,zb,Hme,YBo,KBo,dO,ZBo,eIo,oIo,Wb,Ume,rIo,tIo,cO,aIo,nIo,sIo,Qb,Jme,lIo,iIo,fO,dIo,cIo,fIo,Hb,Yme,mIo,gIo,mO,hIo,pIo,uIo,Ub,Kme,_Io,bIo,gO,vIo,FIo,TIo,Jb,Zme,MIo,EIo,hO,CIo,wIo,AIo,Yb,ege,yIo,LIo,pO,xIo,$Io,kIo,Kb,oge,SIo,RIo,uO,PIo,BIo,IIo,Zb,rge,qIo,NIo,_O,jIo,DIo,GIo,e2,tge,OIo,VIo,bO,XIo,zIo,WIo,o2,age,QIo,HIo,vO,UIo,JIo,YIo,r2,nge,KIo,ZIo,FO,eqo,oqo,rqo,t2,sge,tqo,aqo,TO,nqo,sqo,lqo,a2,lge,iqo,dqo,MO,cqo,fqo,mqo,n2,ige,gqo,hqo,EO,pqo,uqo,_qo,s2,dge,bqo,vqo,CO,Fqo,Tqo,Mqo,l2,cge,Eqo,Cqo,wO,wqo,Aqo,yqo,i2,fge,Lqo,xqo,AO,$qo,kqo,Sqo,d2,mge,Rqo,Pqo,yO,Bqo,Iqo,qqo,c2,Nqo,gge,jqo,Dqo,hge,Gqo,Oqo,f2,TNe,Wi,m2,pge,R6,Vqo,uge,Xqo,MNe,Bo,P6,zqo,Qi,Wqo,LO,Qqo,Hqo,xO,Uqo,Jqo,Yqo,B6,Kqo,_ge,Zqo,eNo,oNo,ct,I6,rNo,bge,tNo,aNo,Hi,nNo,vge,sNo,lNo,$O,iNo,dNo,cNo,g2,fNo,to,q6,mNo,Fge,gNo,hNo,Ba,pNo,Tge,uNo,_No,Mge,bNo,vNo,Ege,FNo,TNo,MNo,Yr,h2,Cge,ENo,CNo,kO,wNo,ANo,yNo,p2,wge,LNo,xNo,SO,$No,kNo,SNo,u2,Age,RNo,PNo,RO,BNo,INo,qNo,_2,yge,NNo,jNo,PO,DNo,GNo,ONo,b2,Lge,VNo,XNo,BO,zNo,WNo,QNo,v2,HNo,xge,UNo,JNo,$ge,YNo,KNo,F2,ENe,Ui,T2,kge,N6,ZNo,Sge,ejo,CNe,Io,j6,ojo,Ji,rjo,IO,tjo,ajo,qO,njo,sjo,ljo,D6,ijo,Rge,djo,cjo,fjo,ft,G6,mjo,Pge,gjo,hjo,Yi,pjo,Bge,ujo,_jo,NO,bjo,vjo,Fjo,M2,Tjo,ao,O6,Mjo,Ige,Ejo,Cjo,Ia,wjo,qge,Ajo,yjo,Nge,Ljo,xjo,jge,$jo,kjo,Sjo,H,E2,Dge,Rjo,Pjo,jO,Bjo,Ijo,qjo,C2,Gge,Njo,jjo,DO,Djo,Gjo,Ojo,w2,Oge,Vjo,Xjo,GO,zjo,Wjo,Qjo,A2,Vge,Hjo,Ujo,OO,Jjo,Yjo,Kjo,y2,Xge,Zjo,eDo,VO,oDo,rDo,tDo,L2,zge,aDo,nDo,XO,sDo,lDo,iDo,x2,Wge,dDo,cDo,zO,fDo,mDo,gDo,$2,Qge,hDo,pDo,WO,uDo,_Do,bDo,k2,Hge,vDo,FDo,QO,TDo,MDo,EDo,S2,Uge,CDo,wDo,HO,ADo,yDo,LDo,R2,Jge,xDo,$Do,UO,kDo,SDo,RDo,P2,Yge,PDo,BDo,JO,IDo,qDo,NDo,B2,Kge,jDo,DDo,YO,GDo,ODo,VDo,I2,Zge,XDo,zDo,KO,WDo,QDo,HDo,q2,ehe,UDo,JDo,ZO,YDo,KDo,ZDo,N2,ohe,eGo,oGo,eV,rGo,tGo,aGo,j2,rhe,nGo,sGo,oV,lGo,iGo,dGo,D2,the,cGo,fGo,rV,mGo,gGo,hGo,G2,ahe,pGo,uGo,tV,_Go,bGo,vGo,O2,nhe,FGo,TGo,aV,MGo,EGo,CGo,V2,she,wGo,AGo,nV,yGo,LGo,xGo,X2,lhe,$Go,kGo,sV,SGo,RGo,PGo,z2,ihe,BGo,IGo,lV,qGo,NGo,jGo,W2,dhe,DGo,GGo,iV,OGo,VGo,XGo,Q2,che,zGo,WGo,dV,QGo,HGo,UGo,H2,fhe,JGo,YGo,cV,KGo,ZGo,eOo,U2,mhe,oOo,rOo,fV,tOo,aOo,nOo,J2,ghe,sOo,lOo,mV,iOo,dOo,cOo,Y2,hhe,fOo,mOo,gV,gOo,hOo,pOo,K2,phe,uOo,_Oo,hV,bOo,vOo,FOo,Z2,uhe,TOo,MOo,pV,EOo,COo,wOo,ev,_he,AOo,yOo,uV,LOo,xOo,$Oo,ov,bhe,kOo,SOo,_V,ROo,POo,BOo,rv,vhe,IOo,qOo,bV,NOo,jOo,DOo,tv,GOo,Fhe,OOo,VOo,The,XOo,zOo,av,wNe,Ki,nv,Mhe,V6,WOo,Ehe,QOo,ANe,qo,X6,HOo,Zi,UOo,vV,JOo,YOo,FV,KOo,ZOo,eVo,z6,oVo,Che,rVo,tVo,aVo,mt,W6,nVo,whe,sVo,lVo,ed,iVo,Ahe,dVo,cVo,TV,fVo,mVo,gVo,sv,hVo,no,Q6,pVo,yhe,uVo,_Vo,qa,bVo,Lhe,vVo,FVo,xhe,TVo,MVo,$he,EVo,CVo,wVo,V,lv,khe,AVo,yVo,MV,LVo,xVo,$Vo,iv,She,kVo,SVo,EV,RVo,PVo,BVo,dv,Rhe,IVo,qVo,CV,NVo,jVo,DVo,cv,Phe,GVo,OVo,wV,VVo,XVo,zVo,fv,Bhe,WVo,QVo,AV,HVo,UVo,JVo,mv,Ihe,YVo,KVo,yV,ZVo,eXo,oXo,gv,qhe,rXo,tXo,LV,aXo,nXo,sXo,hv,Nhe,lXo,iXo,xV,dXo,cXo,fXo,pv,jhe,mXo,gXo,$V,hXo,pXo,uXo,uv,Dhe,_Xo,bXo,kV,vXo,FXo,TXo,_v,Ghe,MXo,EXo,SV,CXo,wXo,AXo,bv,Ohe,yXo,LXo,RV,xXo,$Xo,kXo,vv,Vhe,SXo,RXo,PV,PXo,BXo,IXo,Fv,Xhe,qXo,NXo,BV,jXo,DXo,GXo,Tv,zhe,OXo,VXo,IV,XXo,zXo,WXo,Mv,Whe,QXo,HXo,qV,UXo,JXo,YXo,Ev,Qhe,KXo,ZXo,NV,ezo,ozo,rzo,Cv,Hhe,tzo,azo,jV,nzo,szo,lzo,wv,Uhe,izo,dzo,DV,czo,fzo,mzo,Av,Jhe,gzo,hzo,GV,pzo,uzo,_zo,yv,Yhe,bzo,vzo,OV,Fzo,Tzo,Mzo,Lv,Khe,Ezo,Czo,VV,wzo,Azo,yzo,xv,Zhe,Lzo,xzo,XV,$zo,kzo,Szo,$v,epe,Rzo,Pzo,zV,Bzo,Izo,qzo,kv,ope,Nzo,jzo,WV,Dzo,Gzo,Ozo,Sv,rpe,Vzo,Xzo,QV,zzo,Wzo,Qzo,Rv,tpe,Hzo,Uzo,HV,Jzo,Yzo,Kzo,Pv,ape,Zzo,eWo,UV,oWo,rWo,tWo,Bv,npe,aWo,nWo,JV,sWo,lWo,iWo,Iv,spe,dWo,cWo,YV,fWo,mWo,gWo,qv,lpe,hWo,pWo,KV,uWo,_Wo,bWo,Nv,ipe,vWo,FWo,ZV,TWo,MWo,EWo,jv,dpe,CWo,wWo,eX,AWo,yWo,LWo,Dv,cpe,xWo,$Wo,oX,kWo,SWo,RWo,Gv,fpe,PWo,BWo,rX,IWo,qWo,NWo,Ov,mpe,jWo,DWo,tX,GWo,OWo,VWo,Vv,gpe,XWo,zWo,aX,WWo,QWo,HWo,Xv,hpe,UWo,JWo,nX,YWo,KWo,ZWo,zv,ppe,eQo,oQo,sX,rQo,tQo,aQo,Wv,upe,nQo,sQo,lX,lQo,iQo,dQo,Qv,cQo,_pe,fQo,mQo,bpe,gQo,hQo,Hv,yNe,od,Uv,vpe,H6,pQo,Fpe,uQo,LNe,No,U6,_Qo,rd,bQo,iX,vQo,FQo,dX,TQo,MQo,EQo,J6,CQo,Tpe,wQo,AQo,yQo,gt,Y6,LQo,Mpe,xQo,$Qo,td,kQo,Epe,SQo,RQo,cX,PQo,BQo,IQo,Jv,qQo,so,K6,NQo,Cpe,jQo,DQo,Na,GQo,wpe,OQo,VQo,Ape,XQo,zQo,ype,WQo,QQo,HQo,Lpe,Yv,xpe,UQo,JQo,fX,YQo,KQo,ZQo,Kv,eHo,$pe,oHo,rHo,kpe,tHo,aHo,Zv,xNe,ad,e3,Spe,Z6,nHo,Rpe,sHo,$Ne,jo,ey,lHo,nd,iHo,mX,dHo,cHo,gX,fHo,mHo,gHo,oy,hHo,Ppe,pHo,uHo,_Ho,ht,ry,bHo,Bpe,vHo,FHo,sd,THo,Ipe,MHo,EHo,hX,CHo,wHo,AHo,o3,yHo,lo,ty,LHo,qpe,xHo,$Ho,ja,kHo,Npe,SHo,RHo,jpe,PHo,BHo,Dpe,IHo,qHo,NHo,Fe,r3,Gpe,jHo,DHo,pX,GHo,OHo,VHo,t3,Ope,XHo,zHo,uX,WHo,QHo,HHo,a3,Vpe,UHo,JHo,_X,YHo,KHo,ZHo,n3,Xpe,eUo,oUo,bX,rUo,tUo,aUo,Bs,zpe,nUo,sUo,vX,lUo,iUo,FX,dUo,cUo,fUo,s3,Wpe,mUo,gUo,TX,hUo,pUo,uUo,pt,Qpe,_Uo,bUo,MX,vUo,FUo,EX,TUo,MUo,CX,EUo,CUo,wUo,l3,Hpe,AUo,yUo,wX,LUo,xUo,$Uo,i3,Upe,kUo,SUo,AX,RUo,PUo,BUo,d3,Jpe,IUo,qUo,yX,NUo,jUo,DUo,c3,Ype,GUo,OUo,LX,VUo,XUo,zUo,f3,Kpe,WUo,QUo,xX,HUo,UUo,JUo,m3,Zpe,YUo,KUo,$X,ZUo,eJo,oJo,g3,eue,rJo,tJo,kX,aJo,nJo,sJo,h3,lJo,oue,iJo,dJo,rue,cJo,fJo,p3,kNe,ld,u3,tue,ay,mJo,aue,gJo,SNe,Do,ny,hJo,id,pJo,SX,uJo,_Jo,RX,bJo,vJo,FJo,sy,TJo,nue,MJo,EJo,CJo,ut,ly,wJo,sue,AJo,yJo,dd,LJo,lue,xJo,$Jo,PX,kJo,SJo,RJo,_3,PJo,io,iy,BJo,iue,IJo,qJo,Da,NJo,due,jJo,DJo,cue,GJo,OJo,fue,VJo,XJo,zJo,mue,b3,gue,WJo,QJo,BX,HJo,UJo,JJo,v3,YJo,hue,KJo,ZJo,pue,eYo,oYo,F3,RNe,cd,T3,uue,dy,rYo,_ue,tYo,PNe,Go,cy,aYo,fd,nYo,IX,sYo,lYo,qX,iYo,dYo,cYo,fy,fYo,bue,mYo,gYo,hYo,_t,my,pYo,vue,uYo,_Yo,md,bYo,Fue,vYo,FYo,NX,TYo,MYo,EYo,M3,CYo,co,gy,wYo,Tue,AYo,yYo,Ga,LYo,Mue,xYo,$Yo,Eue,kYo,SYo,Cue,RYo,PYo,BYo,Se,E3,wue,IYo,qYo,jX,NYo,jYo,DYo,C3,Aue,GYo,OYo,DX,VYo,XYo,zYo,w3,yue,WYo,QYo,GX,HYo,UYo,JYo,A3,Lue,YYo,KYo,OX,ZYo,eKo,oKo,y3,xue,rKo,tKo,VX,aKo,nKo,sKo,L3,$ue,lKo,iKo,XX,dKo,cKo,fKo,x3,kue,mKo,gKo,zX,hKo,pKo,uKo,$3,Sue,_Ko,bKo,WX,vKo,FKo,TKo,k3,Rue,MKo,EKo,QX,CKo,wKo,AKo,S3,yKo,Pue,LKo,xKo,Bue,$Ko,kKo,R3,BNe,gd,P3,Iue,hy,SKo,que,RKo,INe,Oo,py,PKo,hd,BKo,HX,IKo,qKo,UX,NKo,jKo,DKo,uy,GKo,Nue,OKo,VKo,XKo,bt,_y,zKo,jue,WKo,QKo,pd,HKo,Due,UKo,JKo,JX,YKo,KKo,ZKo,B3,eZo,fo,by,oZo,Gue,rZo,tZo,Oa,aZo,Oue,nZo,sZo,Vue,lZo,iZo,Xue,dZo,cZo,fZo,Kr,I3,zue,mZo,gZo,YX,hZo,pZo,uZo,q3,Wue,_Zo,bZo,KX,vZo,FZo,TZo,N3,Que,MZo,EZo,ZX,CZo,wZo,AZo,j3,Hue,yZo,LZo,ez,xZo,$Zo,kZo,D3,Uue,SZo,RZo,oz,PZo,BZo,IZo,G3,qZo,Jue,NZo,jZo,Yue,DZo,GZo,O3,qNe,ud,V3,Kue,vy,OZo,Zue,VZo,NNe,Vo,Fy,XZo,_d,zZo,rz,WZo,QZo,tz,HZo,UZo,JZo,Ty,YZo,e_e,KZo,ZZo,eer,vt,My,oer,o_e,rer,ter,bd,aer,r_e,ner,ser,az,ler,ier,der,X3,cer,mo,Ey,fer,t_e,mer,ger,Va,her,a_e,per,uer,n_e,_er,ber,s_e,ver,Fer,Ter,Re,z3,l_e,Mer,Eer,nz,Cer,wer,Aer,W3,i_e,yer,Ler,sz,xer,$er,ker,Q3,d_e,Ser,Rer,lz,Per,Ber,Ier,H3,c_e,qer,Ner,iz,jer,Der,Ger,U3,f_e,Oer,Ver,dz,Xer,zer,Wer,J3,m_e,Qer,Her,cz,Uer,Jer,Yer,Y3,g_e,Ker,Zer,fz,eor,oor,ror,K3,h_e,tor,aor,mz,nor,sor,lor,Z3,p_e,ior,dor,gz,cor,mor,gor,eF,hor,u_e,por,uor,__e,_or,bor,oF,jNe,vd,rF,b_e,Cy,vor,v_e,For,DNe,Xo,wy,Tor,Fd,Mor,hz,Eor,Cor,pz,wor,Aor,yor,Ay,Lor,F_e,xor,$or,kor,Ft,yy,Sor,T_e,Ror,Por,Td,Bor,M_e,Ior,qor,uz,Nor,jor,Dor,tF,Gor,go,Ly,Oor,E_e,Vor,Xor,Xa,zor,C_e,Wor,Qor,w_e,Hor,Uor,A_e,Jor,Yor,Kor,xy,aF,y_e,Zor,err,_z,orr,rrr,trr,nF,L_e,arr,nrr,bz,srr,lrr,irr,sF,drr,x_e,crr,frr,$_e,mrr,grr,lF,GNe,Md,iF,k_e,$y,hrr,S_e,prr,ONe,zo,ky,urr,Ed,_rr,vz,brr,vrr,Fz,Frr,Trr,Mrr,Sy,Err,R_e,Crr,wrr,Arr,Tt,Ry,yrr,P_e,Lrr,xrr,Cd,$rr,B_e,krr,Srr,Tz,Rrr,Prr,Brr,dF,Irr,ho,Py,qrr,I_e,Nrr,jrr,za,Drr,q_e,Grr,Orr,N_e,Vrr,Xrr,j_e,zrr,Wrr,Qrr,Zr,cF,D_e,Hrr,Urr,Mz,Jrr,Yrr,Krr,fF,G_e,Zrr,etr,Ez,otr,rtr,ttr,mF,O_e,atr,ntr,Cz,str,ltr,itr,gF,V_e,dtr,ctr,wz,ftr,mtr,gtr,hF,X_e,htr,ptr,Az,utr,_tr,btr,pF,vtr,z_e,Ftr,Ttr,W_e,Mtr,Etr,uF,VNe,wd,_F,Q_e,By,Ctr,H_e,wtr,XNe,Wo,Iy,Atr,Ad,ytr,yz,Ltr,xtr,Lz,$tr,ktr,Str,qy,Rtr,U_e,Ptr,Btr,Itr,Mt,Ny,qtr,J_e,Ntr,jtr,yd,Dtr,Y_e,Gtr,Otr,xz,Vtr,Xtr,ztr,bF,Wtr,po,jy,Qtr,K_e,Htr,Utr,Wa,Jtr,Z_e,Ytr,Ktr,e1e,Ztr,ear,o1e,oar,rar,tar,Ld,vF,r1e,aar,nar,$z,sar,lar,iar,FF,t1e,dar,car,kz,far,mar,gar,TF,a1e,har,par,Sz,uar,_ar,bar,MF,Far,n1e,Tar,Mar,s1e,Ear,Car,EF,zNe,xd,CF,l1e,Dy,war,i1e,Aar,WNe,Qo,Gy,yar,$d,Lar,Rz,xar,$ar,Pz,kar,Sar,Rar,Oy,Par,d1e,Bar,Iar,qar,Et,Vy,Nar,c1e,jar,Dar,kd,Gar,f1e,Oar,Var,Bz,Xar,zar,War,wF,Qar,uo,Xy,Har,m1e,Uar,Jar,Qa,Yar,g1e,Kar,Zar,h1e,enr,onr,p1e,rnr,tnr,anr,zy,AF,u1e,nnr,snr,Iz,lnr,inr,dnr,yF,_1e,cnr,fnr,qz,mnr,gnr,hnr,LF,pnr,b1e,unr,_nr,v1e,bnr,vnr,xF,QNe,Sd,$F,F1e,Wy,Fnr,T1e,Tnr,HNe,Ho,Qy,Mnr,Rd,Enr,Nz,Cnr,wnr,jz,Anr,ynr,Lnr,Hy,xnr,M1e,$nr,knr,Snr,Ct,Uy,Rnr,E1e,Pnr,Bnr,Pd,Inr,C1e,qnr,Nnr,Dz,jnr,Dnr,Gnr,kF,Onr,_o,Jy,Vnr,w1e,Xnr,znr,Ha,Wnr,A1e,Qnr,Hnr,y1e,Unr,Jnr,L1e,Ynr,Knr,Znr,x1e,SF,$1e,esr,osr,Gz,rsr,tsr,asr,RF,nsr,k1e,ssr,lsr,S1e,isr,dsr,PF,UNe,Bd,BF,R1e,Yy,csr,P1e,fsr,JNe,Uo,Ky,msr,Id,gsr,Oz,hsr,psr,Vz,usr,_sr,bsr,Zy,vsr,B1e,Fsr,Tsr,Msr,wt,eL,Esr,I1e,Csr,wsr,qd,Asr,q1e,ysr,Lsr,Xz,xsr,$sr,ksr,IF,Ssr,bo,oL,Rsr,N1e,Psr,Bsr,Ua,Isr,j1e,qsr,Nsr,D1e,jsr,Dsr,G1e,Gsr,Osr,Vsr,Ja,qF,O1e,Xsr,zsr,zz,Wsr,Qsr,Hsr,NF,V1e,Usr,Jsr,Wz,Ysr,Ksr,Zsr,jF,X1e,elr,olr,Qz,rlr,tlr,alr,DF,z1e,nlr,slr,Hz,llr,ilr,dlr,GF,clr,W1e,flr,mlr,Q1e,glr,hlr,OF,YNe,Nd,VF,H1e,rL,plr,U1e,ulr,KNe,Jo,tL,_lr,jd,blr,Uz,vlr,Flr,Jz,Tlr,Mlr,Elr,aL,Clr,J1e,wlr,Alr,ylr,At,nL,Llr,Y1e,xlr,$lr,Dd,klr,K1e,Slr,Rlr,Yz,Plr,Blr,Ilr,XF,qlr,vo,sL,Nlr,Z1e,jlr,Dlr,Ya,Glr,e8e,Olr,Vlr,o8e,Xlr,zlr,r8e,Wlr,Qlr,Hlr,t8e,zF,a8e,Ulr,Jlr,Kz,Ylr,Klr,Zlr,WF,eir,n8e,oir,rir,s8e,tir,air,QF,ZNe,Gd,HF,l8e,lL,nir,i8e,sir,eje,Yo,iL,lir,Od,iir,Zz,dir,cir,eW,fir,mir,gir,dL,hir,d8e,pir,uir,_ir,yt,cL,bir,c8e,vir,Fir,Vd,Tir,f8e,Mir,Eir,oW,Cir,wir,Air,UF,yir,wr,fL,Lir,m8e,xir,$ir,Ka,kir,g8e,Sir,Rir,h8e,Pir,Bir,p8e,Iir,qir,Nir,N,JF,u8e,jir,Dir,rW,Gir,Oir,Vir,YF,_8e,Xir,zir,tW,Wir,Qir,Hir,KF,b8e,Uir,Jir,aW,Yir,Kir,Zir,ZF,v8e,edr,odr,nW,rdr,tdr,adr,eT,F8e,ndr,sdr,sW,ldr,idr,ddr,oT,T8e,cdr,fdr,lW,mdr,gdr,hdr,rT,M8e,pdr,udr,iW,_dr,bdr,vdr,tT,E8e,Fdr,Tdr,dW,Mdr,Edr,Cdr,aT,C8e,wdr,Adr,cW,ydr,Ldr,xdr,nT,w8e,$dr,kdr,fW,Sdr,Rdr,Pdr,sT,A8e,Bdr,Idr,mW,qdr,Ndr,jdr,lT,y8e,Ddr,Gdr,gW,Odr,Vdr,Xdr,iT,L8e,zdr,Wdr,hW,Qdr,Hdr,Udr,dT,x8e,Jdr,Ydr,pW,Kdr,Zdr,ecr,cT,$8e,ocr,rcr,uW,tcr,acr,ncr,fT,k8e,scr,lcr,_W,icr,dcr,ccr,mT,S8e,fcr,mcr,bW,gcr,hcr,pcr,Is,R8e,ucr,_cr,vW,bcr,vcr,FW,Fcr,Tcr,Mcr,gT,P8e,Ecr,Ccr,TW,wcr,Acr,ycr,hT,B8e,Lcr,xcr,MW,$cr,kcr,Scr,pT,I8e,Rcr,Pcr,EW,Bcr,Icr,qcr,uT,q8e,Ncr,jcr,CW,Dcr,Gcr,Ocr,_T,N8e,Vcr,Xcr,wW,zcr,Wcr,Qcr,bT,j8e,Hcr,Ucr,AW,Jcr,Ycr,Kcr,vT,D8e,Zcr,efr,yW,ofr,rfr,tfr,FT,G8e,afr,nfr,LW,sfr,lfr,ifr,TT,O8e,dfr,cfr,xW,ffr,mfr,gfr,MT,V8e,hfr,pfr,$W,ufr,_fr,bfr,ET,X8e,vfr,Ffr,kW,Tfr,Mfr,Efr,CT,z8e,Cfr,wfr,SW,Afr,yfr,Lfr,wT,W8e,xfr,$fr,RW,kfr,Sfr,Rfr,AT,Q8e,Pfr,Bfr,PW,Ifr,qfr,Nfr,yT,H8e,jfr,Dfr,BW,Gfr,Ofr,Vfr,LT,U8e,Xfr,zfr,IW,Wfr,Qfr,Hfr,xT,J8e,Ufr,Jfr,qW,Yfr,Kfr,Zfr,$T,Y8e,emr,omr,NW,rmr,tmr,amr,kT,K8e,nmr,smr,jW,lmr,imr,dmr,ST,Z8e,cmr,fmr,DW,mmr,gmr,hmr,RT,ebe,pmr,umr,GW,_mr,bmr,vmr,PT,obe,Fmr,Tmr,OW,Mmr,Emr,Cmr,BT,rbe,wmr,Amr,VW,ymr,Lmr,xmr,IT,tbe,$mr,kmr,XW,Smr,Rmr,Pmr,qT,abe,Bmr,Imr,zW,qmr,Nmr,jmr,NT,nbe,Dmr,Gmr,WW,Omr,Vmr,Xmr,jT,sbe,zmr,Wmr,QW,Qmr,Hmr,Umr,DT,lbe,Jmr,Ymr,HW,Kmr,Zmr,egr,GT,ibe,ogr,rgr,UW,tgr,agr,ngr,OT,oje,Xd,VT,dbe,mL,sgr,cbe,lgr,rje,Ko,gL,igr,zd,dgr,JW,cgr,fgr,YW,mgr,ggr,hgr,hL,pgr,fbe,ugr,_gr,bgr,Lt,pL,vgr,mbe,Fgr,Tgr,Wd,Mgr,gbe,Egr,Cgr,KW,wgr,Agr,ygr,XT,Lgr,Ar,uL,xgr,hbe,$gr,kgr,Za,Sgr,pbe,Rgr,Pgr,ube,Bgr,Igr,_be,qgr,Ngr,jgr,se,zT,bbe,Dgr,Ggr,ZW,Ogr,Vgr,Xgr,WT,vbe,zgr,Wgr,eQ,Qgr,Hgr,Ugr,QT,Fbe,Jgr,Ygr,oQ,Kgr,Zgr,ehr,HT,Tbe,ohr,rhr,rQ,thr,ahr,nhr,UT,Mbe,shr,lhr,tQ,ihr,dhr,chr,JT,Ebe,fhr,mhr,aQ,ghr,hhr,phr,YT,Cbe,uhr,_hr,nQ,bhr,vhr,Fhr,KT,wbe,Thr,Mhr,sQ,Ehr,Chr,whr,ZT,Abe,Ahr,yhr,lQ,Lhr,xhr,$hr,e7,ybe,khr,Shr,iQ,Rhr,Phr,Bhr,o7,Lbe,Ihr,qhr,dQ,Nhr,jhr,Dhr,r7,xbe,Ghr,Ohr,cQ,Vhr,Xhr,zhr,t7,$be,Whr,Qhr,fQ,Hhr,Uhr,Jhr,a7,kbe,Yhr,Khr,mQ,Zhr,epr,opr,n7,Sbe,rpr,tpr,gQ,apr,npr,spr,s7,Rbe,lpr,ipr,hQ,dpr,cpr,fpr,l7,Pbe,mpr,gpr,pQ,hpr,ppr,upr,i7,Bbe,_pr,bpr,uQ,vpr,Fpr,Tpr,d7,Ibe,Mpr,Epr,_Q,Cpr,wpr,Apr,c7,qbe,ypr,Lpr,bQ,xpr,$pr,kpr,f7,Nbe,Spr,Rpr,vQ,Ppr,Bpr,Ipr,m7,jbe,qpr,Npr,FQ,jpr,Dpr,Gpr,g7,Dbe,Opr,Vpr,TQ,Xpr,zpr,Wpr,h7,tje,Qd,p7,Gbe,_L,Qpr,Obe,Hpr,aje,Zo,bL,Upr,Hd,Jpr,MQ,Ypr,Kpr,EQ,Zpr,eur,our,vL,rur,Vbe,tur,aur,nur,xt,FL,sur,Xbe,lur,iur,Ud,dur,zbe,cur,fur,CQ,mur,gur,hur,u7,pur,yr,TL,uur,Wbe,_ur,bur,en,vur,Qbe,Fur,Tur,Hbe,Mur,Eur,Ube,Cur,wur,Aur,Te,_7,Jbe,yur,Lur,wQ,xur,$ur,kur,b7,Ybe,Sur,Rur,AQ,Pur,Bur,Iur,v7,Kbe,qur,Nur,yQ,jur,Dur,Gur,F7,Zbe,Our,Vur,LQ,Xur,zur,Wur,T7,e2e,Qur,Hur,xQ,Uur,Jur,Yur,M7,o2e,Kur,Zur,$Q,e_r,o_r,r_r,E7,r2e,t_r,a_r,kQ,n_r,s_r,l_r,C7,t2e,i_r,d_r,SQ,c_r,f_r,m_r,w7,a2e,g_r,h_r,RQ,p_r,u_r,__r,A7,n2e,b_r,v_r,PQ,F_r,T_r,M_r,y7,s2e,E_r,C_r,BQ,w_r,A_r,y_r,L7,l2e,L_r,x_r,IQ,$_r,k_r,S_r,x7,i2e,R_r,P_r,qQ,B_r,I_r,q_r,$7,nje,Jd,k7,d2e,ML,N_r,c2e,j_r,sje,er,EL,D_r,Yd,G_r,NQ,O_r,V_r,jQ,X_r,z_r,W_r,CL,Q_r,f2e,H_r,U_r,J_r,$t,wL,Y_r,m2e,K_r,Z_r,Kd,e1r,g2e,o1r,r1r,DQ,t1r,a1r,n1r,S7,s1r,Lr,AL,l1r,h2e,i1r,d1r,on,c1r,p2e,f1r,m1r,u2e,g1r,h1r,_2e,p1r,u1r,_1r,rn,R7,b2e,b1r,v1r,GQ,F1r,T1r,M1r,P7,v2e,E1r,C1r,OQ,w1r,A1r,y1r,B7,F2e,L1r,x1r,VQ,$1r,k1r,S1r,I7,T2e,R1r,P1r,XQ,B1r,I1r,q1r,q7,lje,Zd,N7,M2e,yL,N1r,E2e,j1r,ije,or,LL,D1r,ec,G1r,zQ,O1r,V1r,WQ,X1r,z1r,W1r,xL,Q1r,C2e,H1r,U1r,J1r,kt,$L,Y1r,w2e,K1r,Z1r,oc,e8r,A2e,o8r,r8r,QQ,t8r,a8r,n8r,j7,s8r,xr,kL,l8r,y2e,i8r,d8r,tn,c8r,L2e,f8r,m8r,x2e,g8r,h8r,$2e,p8r,u8r,_8r,ie,D7,k2e,b8r,v8r,HQ,F8r,T8r,M8r,G7,S2e,E8r,C8r,UQ,w8r,A8r,y8r,O7,R2e,L8r,x8r,JQ,$8r,k8r,S8r,V7,P2e,R8r,P8r,YQ,B8r,I8r,q8r,X7,B2e,N8r,j8r,KQ,D8r,G8r,O8r,z7,I2e,V8r,X8r,ZQ,z8r,W8r,Q8r,W7,q2e,H8r,U8r,eH,J8r,Y8r,K8r,Q7,N2e,Z8r,ebr,oH,obr,rbr,tbr,H7,j2e,abr,nbr,rH,sbr,lbr,ibr,U7,D2e,dbr,cbr,tH,fbr,mbr,gbr,J7,G2e,hbr,pbr,aH,ubr,_br,bbr,Y7,O2e,vbr,Fbr,nH,Tbr,Mbr,Ebr,K7,V2e,Cbr,wbr,sH,Abr,ybr,Lbr,Z7,X2e,xbr,$br,lH,kbr,Sbr,Rbr,eM,z2e,Pbr,Bbr,iH,Ibr,qbr,Nbr,oM,W2e,jbr,Dbr,dH,Gbr,Obr,Vbr,rM,Q2e,Xbr,zbr,cH,Wbr,Qbr,Hbr,tM,H2e,Ubr,Jbr,fH,Ybr,Kbr,Zbr,aM,U2e,e2r,o2r,mH,r2r,t2r,a2r,nM,J2e,n2r,s2r,gH,l2r,i2r,d2r,sM,dje,rc,lM,Y2e,SL,c2r,K2e,f2r,cje,rr,RL,m2r,tc,g2r,hH,h2r,p2r,pH,u2r,_2r,b2r,PL,v2r,Z2e,F2r,T2r,M2r,St,BL,E2r,eve,C2r,w2r,ac,A2r,ove,y2r,L2r,uH,x2r,$2r,k2r,iM,S2r,$r,IL,R2r,rve,P2r,B2r,an,I2r,tve,q2r,N2r,ave,j2r,D2r,nve,G2r,O2r,V2r,ye,dM,sve,X2r,z2r,_H,W2r,Q2r,H2r,cM,lve,U2r,J2r,bH,Y2r,K2r,Z2r,fM,ive,evr,ovr,vH,rvr,tvr,avr,mM,dve,nvr,svr,FH,lvr,ivr,dvr,gM,cve,cvr,fvr,TH,mvr,gvr,hvr,hM,fve,pvr,uvr,MH,_vr,bvr,vvr,pM,mve,Fvr,Tvr,EH,Mvr,Evr,Cvr,uM,gve,wvr,Avr,CH,yvr,Lvr,xvr,_M,hve,$vr,kvr,wH,Svr,Rvr,Pvr,bM,pve,Bvr,Ivr,AH,qvr,Nvr,jvr,vM,fje,nc,FM,uve,qL,Dvr,_ve,Gvr,mje,tr,NL,Ovr,sc,Vvr,yH,Xvr,zvr,LH,Wvr,Qvr,Hvr,jL,Uvr,bve,Jvr,Yvr,Kvr,Rt,DL,Zvr,vve,e3r,o3r,lc,r3r,Fve,t3r,a3r,xH,n3r,s3r,l3r,TM,i3r,kr,GL,d3r,Tve,c3r,f3r,nn,m3r,Mve,g3r,h3r,Eve,p3r,u3r,Cve,_3r,b3r,v3r,oe,MM,wve,F3r,T3r,$H,M3r,E3r,C3r,EM,Ave,w3r,A3r,kH,y3r,L3r,x3r,CM,yve,$3r,k3r,SH,S3r,R3r,P3r,wM,Lve,B3r,I3r,RH,q3r,N3r,j3r,AM,xve,D3r,G3r,PH,O3r,V3r,X3r,yM,$ve,z3r,W3r,BH,Q3r,H3r,U3r,LM,kve,J3r,Y3r,IH,K3r,Z3r,eFr,xM,Sve,oFr,rFr,qH,tFr,aFr,nFr,$M,Rve,sFr,lFr,NH,iFr,dFr,cFr,kM,Pve,fFr,mFr,jH,gFr,hFr,pFr,SM,Bve,uFr,_Fr,DH,bFr,vFr,FFr,RM,Ive,TFr,MFr,GH,EFr,CFr,wFr,PM,qve,AFr,yFr,OH,LFr,xFr,$Fr,BM,Nve,kFr,SFr,VH,RFr,PFr,BFr,IM,jve,IFr,qFr,XH,NFr,jFr,DFr,qM,Dve,GFr,OFr,zH,VFr,XFr,zFr,NM,Gve,WFr,QFr,WH,HFr,UFr,JFr,jM,Ove,YFr,KFr,QH,ZFr,eTr,oTr,DM,Vve,rTr,tTr,HH,aTr,nTr,sTr,GM,Xve,lTr,iTr,UH,dTr,cTr,fTr,OM,zve,mTr,gTr,JH,hTr,pTr,uTr,VM,Wve,_Tr,bTr,YH,vTr,FTr,TTr,XM,Qve,MTr,ETr,KH,CTr,wTr,ATr,zM,Hve,yTr,LTr,ZH,xTr,$Tr,kTr,WM,Uve,STr,RTr,eU,PTr,BTr,ITr,QM,Jve,qTr,NTr,oU,jTr,DTr,GTr,HM,gje,ic,UM,Yve,OL,OTr,Kve,VTr,hje,ar,VL,XTr,dc,zTr,rU,WTr,QTr,tU,HTr,UTr,JTr,XL,YTr,Zve,KTr,ZTr,e7r,Pt,zL,o7r,e3e,r7r,t7r,cc,a7r,o3e,n7r,s7r,aU,l7r,i7r,d7r,JM,c7r,Sr,WL,f7r,r3e,m7r,g7r,sn,h7r,t3e,p7r,u7r,a3e,_7r,b7r,n3e,v7r,F7r,T7r,pe,YM,s3e,M7r,E7r,nU,C7r,w7r,A7r,KM,l3e,y7r,L7r,sU,x7r,$7r,k7r,ZM,i3e,S7r,R7r,lU,P7r,B7r,I7r,e4,d3e,q7r,N7r,iU,j7r,D7r,G7r,o4,c3e,O7r,V7r,dU,X7r,z7r,W7r,r4,f3e,Q7r,H7r,cU,U7r,J7r,Y7r,t4,m3e,K7r,Z7r,fU,eMr,oMr,rMr,a4,g3e,tMr,aMr,mU,nMr,sMr,lMr,n4,h3e,iMr,dMr,gU,cMr,fMr,mMr,s4,p3e,gMr,hMr,hU,pMr,uMr,_Mr,l4,u3e,bMr,vMr,pU,FMr,TMr,MMr,i4,_3e,EMr,CMr,uU,wMr,AMr,yMr,d4,b3e,LMr,xMr,_U,$Mr,kMr,SMr,c4,v3e,RMr,PMr,bU,BMr,IMr,qMr,f4,F3e,NMr,jMr,vU,DMr,GMr,OMr,m4,T3e,VMr,XMr,FU,zMr,WMr,QMr,g4,M3e,HMr,UMr,TU,JMr,YMr,KMr,h4,pje,fc,p4,E3e,QL,ZMr,C3e,e4r,uje,nr,HL,o4r,mc,r4r,MU,t4r,a4r,EU,n4r,s4r,l4r,UL,i4r,w3e,d4r,c4r,f4r,Bt,JL,m4r,A3e,g4r,h4r,gc,p4r,y3e,u4r,_4r,CU,b4r,v4r,F4r,u4,T4r,Rr,YL,M4r,L3e,E4r,C4r,ln,w4r,x3e,A4r,y4r,$3e,L4r,x4r,k3e,$4r,k4r,S4r,KL,_4,S3e,R4r,P4r,wU,B4r,I4r,q4r,b4,R3e,N4r,j4r,AU,D4r,G4r,O4r,v4,_je,hc,F4,P3e,ZL,V4r,B3e,X4r,bje,sr,e9,z4r,pc,W4r,yU,Q4r,H4r,LU,U4r,J4r,Y4r,o9,K4r,I3e,Z4r,eEr,oEr,It,r9,rEr,q3e,tEr,aEr,uc,nEr,N3e,sEr,lEr,xU,iEr,dEr,cEr,T4,fEr,Pr,t9,mEr,j3e,gEr,hEr,dn,pEr,D3e,uEr,_Er,G3e,bEr,vEr,O3e,FEr,TEr,MEr,V3e,M4,X3e,EEr,CEr,$U,wEr,AEr,yEr,E4,vje,_c,C4,z3e,a9,LEr,W3e,xEr,Fje,lr,n9,$Er,bc,kEr,kU,SEr,REr,SU,PEr,BEr,IEr,s9,qEr,Q3e,NEr,jEr,DEr,qt,l9,GEr,H3e,OEr,VEr,vc,XEr,U3e,zEr,WEr,RU,QEr,HEr,UEr,w4,JEr,Br,i9,YEr,J3e,KEr,ZEr,cn,eCr,Y3e,oCr,rCr,K3e,tCr,aCr,Z3e,nCr,sCr,lCr,de,A4,eFe,iCr,dCr,PU,cCr,fCr,mCr,y4,oFe,gCr,hCr,BU,pCr,uCr,_Cr,L4,rFe,bCr,vCr,IU,FCr,TCr,MCr,x4,tFe,ECr,CCr,qU,wCr,ACr,yCr,$4,aFe,LCr,xCr,NU,$Cr,kCr,SCr,k4,nFe,RCr,PCr,jU,BCr,ICr,qCr,S4,sFe,NCr,jCr,DU,DCr,GCr,OCr,R4,lFe,VCr,XCr,GU,zCr,WCr,QCr,P4,iFe,HCr,UCr,OU,JCr,YCr,KCr,B4,dFe,ZCr,e5r,VU,o5r,r5r,t5r,I4,cFe,a5r,n5r,XU,s5r,l5r,i5r,q4,fFe,d5r,c5r,zU,f5r,m5r,g5r,N4,mFe,h5r,p5r,WU,u5r,_5r,b5r,j4,gFe,v5r,F5r,QU,T5r,M5r,E5r,D4,hFe,C5r,w5r,HU,A5r,y5r,L5r,G4,pFe,x5r,$5r,UU,k5r,S5r,R5r,O4,uFe,P5r,B5r,JU,I5r,q5r,N5r,V4,_Fe,j5r,D5r,YU,G5r,O5r,V5r,X4,bFe,X5r,z5r,KU,W5r,Q5r,H5r,z4,vFe,U5r,J5r,ZU,Y5r,K5r,Z5r,W4,Tje,Fc,Q4,FFe,d9,ewr,TFe,owr,Mje,ir,c9,rwr,Tc,twr,eJ,awr,nwr,oJ,swr,lwr,iwr,f9,dwr,MFe,cwr,fwr,mwr,Nt,m9,gwr,EFe,hwr,pwr,Mc,uwr,CFe,_wr,bwr,rJ,vwr,Fwr,Twr,H4,Mwr,Ir,g9,Ewr,wFe,Cwr,wwr,fn,Awr,AFe,ywr,Lwr,yFe,xwr,$wr,LFe,kwr,Swr,Rwr,ce,U4,xFe,Pwr,Bwr,tJ,Iwr,qwr,Nwr,J4,$Fe,jwr,Dwr,aJ,Gwr,Owr,Vwr,Y4,kFe,Xwr,zwr,nJ,Wwr,Qwr,Hwr,K4,SFe,Uwr,Jwr,sJ,Ywr,Kwr,Zwr,Z4,RFe,e0r,o0r,lJ,r0r,t0r,a0r,eE,PFe,n0r,s0r,iJ,l0r,i0r,d0r,oE,BFe,c0r,f0r,dJ,m0r,g0r,h0r,rE,IFe,p0r,u0r,cJ,_0r,b0r,v0r,tE,qFe,F0r,T0r,fJ,M0r,E0r,C0r,aE,NFe,w0r,A0r,mJ,y0r,L0r,x0r,nE,jFe,$0r,k0r,gJ,S0r,R0r,P0r,sE,DFe,B0r,I0r,hJ,q0r,N0r,j0r,lE,GFe,D0r,G0r,pJ,O0r,V0r,X0r,iE,OFe,z0r,W0r,uJ,Q0r,H0r,U0r,dE,VFe,J0r,Y0r,_J,K0r,Z0r,eAr,cE,XFe,oAr,rAr,bJ,tAr,aAr,nAr,fE,zFe,sAr,lAr,vJ,iAr,dAr,cAr,mE,WFe,fAr,mAr,FJ,gAr,hAr,pAr,gE,QFe,uAr,_Ar,TJ,bAr,vAr,FAr,hE,HFe,TAr,MAr,MJ,EAr,CAr,wAr,pE,Eje,Ec,uE,UFe,h9,AAr,JFe,yAr,Cje,dr,p9,LAr,Cc,xAr,EJ,$Ar,kAr,CJ,SAr,RAr,PAr,u9,BAr,YFe,IAr,qAr,NAr,jt,_9,jAr,KFe,DAr,GAr,wc,OAr,ZFe,VAr,XAr,wJ,zAr,WAr,QAr,_E,HAr,qr,b9,UAr,eTe,JAr,YAr,mn,KAr,oTe,ZAr,e6r,rTe,o6r,r6r,tTe,t6r,a6r,n6r,aTe,bE,nTe,s6r,l6r,AJ,i6r,d6r,c6r,vE,wje,Ac,FE,sTe,v9,f6r,lTe,m6r,Aje,cr,F9,g6r,yc,h6r,yJ,p6r,u6r,LJ,_6r,b6r,v6r,T9,F6r,iTe,T6r,M6r,E6r,Dt,M9,C6r,dTe,w6r,A6r,Lc,y6r,cTe,L6r,x6r,xJ,$6r,k6r,S6r,TE,R6r,Nr,E9,P6r,fTe,B6r,I6r,gn,q6r,mTe,N6r,j6r,gTe,D6r,G6r,hTe,O6r,V6r,X6r,pTe,ME,uTe,z6r,W6r,$J,Q6r,H6r,U6r,EE,yje,xc,CE,_Te,C9,J6r,bTe,Y6r,Lje,fr,w9,K6r,$c,Z6r,kJ,eyr,oyr,SJ,ryr,tyr,ayr,A9,nyr,vTe,syr,lyr,iyr,Gt,y9,dyr,FTe,cyr,fyr,kc,myr,TTe,gyr,hyr,RJ,pyr,uyr,_yr,wE,byr,jr,L9,vyr,MTe,Fyr,Tyr,hn,Myr,ETe,Eyr,Cyr,CTe,wyr,Ayr,wTe,yyr,Lyr,xyr,re,AE,ATe,$yr,kyr,PJ,Syr,Ryr,Pyr,yE,yTe,Byr,Iyr,BJ,qyr,Nyr,jyr,LE,LTe,Dyr,Gyr,IJ,Oyr,Vyr,Xyr,xE,xTe,zyr,Wyr,qJ,Qyr,Hyr,Uyr,$E,$Te,Jyr,Yyr,NJ,Kyr,Zyr,eLr,kE,kTe,oLr,rLr,jJ,tLr,aLr,nLr,SE,STe,sLr,lLr,DJ,iLr,dLr,cLr,RE,RTe,fLr,mLr,GJ,gLr,hLr,pLr,PE,PTe,uLr,_Lr,OJ,bLr,vLr,FLr,BE,BTe,TLr,MLr,VJ,ELr,CLr,wLr,IE,ITe,ALr,yLr,XJ,LLr,xLr,$Lr,qE,qTe,kLr,SLr,zJ,RLr,PLr,BLr,NE,NTe,ILr,qLr,WJ,NLr,jLr,DLr,jE,jTe,GLr,OLr,QJ,VLr,XLr,zLr,DE,DTe,WLr,QLr,HJ,HLr,ULr,JLr,GE,GTe,YLr,KLr,UJ,ZLr,e9r,o9r,OE,OTe,r9r,t9r,JJ,a9r,n9r,s9r,VE,VTe,l9r,i9r,YJ,d9r,c9r,f9r,XE,XTe,m9r,g9r,KJ,h9r,p9r,u9r,zE,zTe,_9r,b9r,ZJ,v9r,F9r,T9r,WE,WTe,M9r,E9r,eY,C9r,w9r,A9r,QE,QTe,y9r,L9r,oY,x9r,$9r,k9r,HE,HTe,S9r,R9r,rY,P9r,B9r,I9r,UE,UTe,q9r,N9r,tY,j9r,D9r,G9r,JE,JTe,O9r,V9r,aY,X9r,z9r,W9r,YE,YTe,Q9r,H9r,nY,U9r,J9r,Y9r,KE,xje,Sc,ZE,KTe,x9,K9r,ZTe,Z9r,$je,mr,$9,exr,Rc,oxr,sY,rxr,txr,lY,axr,nxr,sxr,k9,lxr,e7e,ixr,dxr,cxr,Ot,S9,fxr,o7e,mxr,gxr,Pc,hxr,r7e,pxr,uxr,iY,_xr,bxr,vxr,eC,Fxr,Dr,R9,Txr,t7e,Mxr,Exr,pn,Cxr,a7e,wxr,Axr,n7e,yxr,Lxr,s7e,xxr,$xr,kxr,Le,oC,l7e,Sxr,Rxr,dY,Pxr,Bxr,Ixr,rC,i7e,qxr,Nxr,cY,jxr,Dxr,Gxr,tC,d7e,Oxr,Vxr,fY,Xxr,zxr,Wxr,aC,c7e,Qxr,Hxr,mY,Uxr,Jxr,Yxr,nC,f7e,Kxr,Zxr,gY,e$r,o$r,r$r,sC,m7e,t$r,a$r,hY,n$r,s$r,l$r,lC,g7e,i$r,d$r,pY,c$r,f$r,m$r,iC,h7e,g$r,h$r,uY,p$r,u$r,_$r,dC,p7e,b$r,v$r,_Y,F$r,T$r,M$r,cC,u7e,E$r,C$r,bY,w$r,A$r,y$r,fC,kje,Bc,mC,_7e,P9,L$r,b7e,x$r,Sje,gr,B9,$$r,Ic,k$r,vY,S$r,R$r,FY,P$r,B$r,I$r,I9,q$r,v7e,N$r,j$r,D$r,Vt,q9,G$r,F7e,O$r,V$r,qc,X$r,T7e,z$r,W$r,TY,Q$r,H$r,U$r,gC,J$r,Gr,N9,Y$r,M7e,K$r,Z$r,un,ekr,E7e,okr,rkr,C7e,tkr,akr,w7e,nkr,skr,lkr,Ee,hC,A7e,ikr,dkr,MY,ckr,fkr,mkr,pC,y7e,gkr,hkr,EY,pkr,ukr,_kr,uC,L7e,bkr,vkr,CY,Fkr,Tkr,Mkr,_C,x7e,Ekr,Ckr,wY,wkr,Akr,ykr,bC,$7e,Lkr,xkr,AY,$kr,kkr,Skr,vC,k7e,Rkr,Pkr,yY,Bkr,Ikr,qkr,FC,S7e,Nkr,jkr,LY,Dkr,Gkr,Okr,TC,R7e,Vkr,Xkr,xY,zkr,Wkr,Qkr,MC,P7e,Hkr,Ukr,$Y,Jkr,Ykr,Kkr,EC,B7e,Zkr,eSr,kY,oSr,rSr,tSr,CC,I7e,aSr,nSr,SY,sSr,lSr,iSr,wC,q7e,dSr,cSr,RY,fSr,mSr,gSr,AC,Rje,Nc,yC,N7e,j9,hSr,j7e,pSr,Pje,hr,D9,uSr,jc,_Sr,PY,bSr,vSr,BY,FSr,TSr,MSr,G9,ESr,D7e,CSr,wSr,ASr,Xt,O9,ySr,G7e,LSr,xSr,Dc,$Sr,O7e,kSr,SSr,IY,RSr,PSr,BSr,LC,ISr,Or,V9,qSr,V7e,NSr,jSr,_n,DSr,X7e,GSr,OSr,z7e,VSr,XSr,W7e,zSr,WSr,QSr,xe,xC,Q7e,HSr,USr,qY,JSr,YSr,KSr,$C,H7e,ZSr,eRr,NY,oRr,rRr,tRr,kC,U7e,aRr,nRr,jY,sRr,lRr,iRr,SC,J7e,dRr,cRr,DY,fRr,mRr,gRr,RC,Y7e,hRr,pRr,GY,uRr,_Rr,bRr,PC,K7e,vRr,FRr,OY,TRr,MRr,ERr,BC,Z7e,CRr,wRr,VY,ARr,yRr,LRr,IC,eMe,xRr,$Rr,XY,kRr,SRr,RRr,qC,oMe,PRr,BRr,zY,IRr,qRr,NRr,NC,rMe,jRr,DRr,WY,GRr,ORr,VRr,jC,Bje,Gc,DC,tMe,X9,XRr,aMe,zRr,Ije,pr,z9,WRr,Oc,QRr,QY,HRr,URr,HY,JRr,YRr,KRr,W9,ZRr,nMe,ePr,oPr,rPr,zt,Q9,tPr,sMe,aPr,nPr,Vc,sPr,lMe,lPr,iPr,UY,dPr,cPr,fPr,GC,mPr,Vr,H9,gPr,iMe,hPr,pPr,bn,uPr,dMe,_Pr,bPr,cMe,vPr,FPr,fMe,TPr,MPr,EPr,Pe,OC,mMe,CPr,wPr,JY,APr,yPr,LPr,VC,gMe,xPr,$Pr,YY,kPr,SPr,RPr,XC,hMe,PPr,BPr,KY,IPr,qPr,NPr,zC,pMe,jPr,DPr,ZY,GPr,OPr,VPr,WC,uMe,XPr,zPr,eK,WPr,QPr,HPr,QC,_Me,UPr,JPr,oK,YPr,KPr,ZPr,HC,bMe,eBr,oBr,rK,rBr,tBr,aBr,UC,vMe,nBr,sBr,tK,lBr,iBr,dBr,JC,FMe,cBr,fBr,aK,mBr,gBr,hBr,YC,qje,Xc,KC,TMe,U9,pBr,MMe,uBr,Nje,ur,J9,_Br,zc,bBr,nK,vBr,FBr,sK,TBr,MBr,EBr,Y9,CBr,EMe,wBr,ABr,yBr,Wt,K9,LBr,CMe,xBr,$Br,Wc,kBr,wMe,SBr,RBr,lK,PBr,BBr,IBr,ZC,qBr,Xr,Z9,NBr,AMe,jBr,DBr,vn,GBr,yMe,OBr,VBr,LMe,XBr,zBr,xMe,WBr,QBr,HBr,$e,e5,$Me,UBr,JBr,iK,YBr,KBr,ZBr,o5,kMe,eIr,oIr,dK,rIr,tIr,aIr,r5,SMe,nIr,sIr,cK,lIr,iIr,dIr,t5,RMe,cIr,fIr,fK,mIr,gIr,hIr,a5,PMe,pIr,uIr,mK,_Ir,bIr,vIr,n5,BMe,FIr,TIr,gK,MIr,EIr,CIr,s5,IMe,wIr,AIr,hK,yIr,LIr,xIr,l5,qMe,$Ir,kIr,pK,SIr,RIr,PIr,i5,NMe,BIr,IIr,uK,qIr,NIr,jIr,d5,jMe,DIr,GIr,_K,OIr,VIr,XIr,c5,jje,Qc,f5,DMe,ex,zIr,GMe,WIr,Dje,_r,ox,QIr,Hc,HIr,bK,UIr,JIr,vK,YIr,KIr,ZIr,rx,eqr,OMe,oqr,rqr,tqr,Qt,tx,aqr,VMe,nqr,sqr,Uc,lqr,XMe,iqr,dqr,FK,cqr,fqr,mqr,m5,gqr,zr,ax,hqr,zMe,pqr,uqr,Fn,_qr,WMe,bqr,vqr,QMe,Fqr,Tqr,HMe,Mqr,Eqr,Cqr,ke,g5,UMe,wqr,Aqr,TK,yqr,Lqr,xqr,h5,JMe,$qr,kqr,MK,Sqr,Rqr,Pqr,p5,YMe,Bqr,Iqr,EK,qqr,Nqr,jqr,u5,KMe,Dqr,Gqr,CK,Oqr,Vqr,Xqr,_5,ZMe,zqr,Wqr,wK,Qqr,Hqr,Uqr,b5,e4e,Jqr,Yqr,AK,Kqr,Zqr,eNr,v5,o4e,oNr,rNr,yK,tNr,aNr,nNr,F5,r4e,sNr,lNr,LK,iNr,dNr,cNr,T5,t4e,fNr,mNr,xK,gNr,hNr,pNr,M5,a4e,uNr,_Nr,$K,bNr,vNr,FNr,E5,Gje,Jc,C5,n4e,nx,TNr,s4e,MNr,Oje,br,sx,ENr,Yc,CNr,kK,wNr,ANr,SK,yNr,LNr,xNr,lx,$Nr,l4e,kNr,SNr,RNr,Ht,ix,PNr,i4e,BNr,INr,Kc,qNr,d4e,NNr,jNr,RK,DNr,GNr,ONr,w5,VNr,Wr,dx,XNr,c4e,zNr,WNr,Tn,QNr,f4e,HNr,UNr,m4e,JNr,YNr,g4e,KNr,ZNr,ejr,Ge,A5,h4e,ojr,rjr,PK,tjr,ajr,njr,y5,p4e,sjr,ljr,BK,ijr,djr,cjr,L5,u4e,fjr,mjr,IK,gjr,hjr,pjr,x5,_4e,ujr,_jr,qK,bjr,vjr,Fjr,$5,b4e,Tjr,Mjr,NK,Ejr,Cjr,wjr,k5,v4e,Ajr,yjr,jK,Ljr,xjr,$jr,S5,F4e,kjr,Sjr,DK,Rjr,Pjr,Bjr,R5,T4e,Ijr,qjr,GK,Njr,jjr,Djr,P5,Vje,Zc,B5,M4e,cx,Gjr,E4e,Ojr,Xje,vr,fx,Vjr,ef,Xjr,OK,zjr,Wjr,VK,Qjr,Hjr,Ujr,mx,Jjr,C4e,Yjr,Kjr,Zjr,Ut,gx,eDr,w4e,oDr,rDr,of,tDr,A4e,aDr,nDr,XK,sDr,lDr,iDr,I5,dDr,Qr,hx,cDr,y4e,fDr,mDr,Mn,gDr,L4e,hDr,pDr,x4e,uDr,_Dr,$4e,bDr,vDr,FDr,Oe,q5,k4e,TDr,MDr,zK,EDr,CDr,wDr,N5,S4e,ADr,yDr,WK,LDr,xDr,$Dr,j5,R4e,kDr,SDr,QK,RDr,PDr,BDr,D5,P4e,IDr,qDr,HK,NDr,jDr,DDr,G5,B4e,GDr,ODr,UK,VDr,XDr,zDr,O5,I4e,WDr,QDr,JK,HDr,UDr,JDr,V5,q4e,YDr,KDr,YK,ZDr,eGr,oGr,X5,N4e,rGr,tGr,KK,aGr,nGr,sGr,z5,zje,rf,W5,j4e,px,lGr,D4e,iGr,Wje,Fr,ux,dGr,tf,cGr,ZK,fGr,mGr,eZ,gGr,hGr,pGr,_x,uGr,G4e,_Gr,bGr,vGr,Jt,bx,FGr,O4e,TGr,MGr,af,EGr,V4e,CGr,wGr,oZ,AGr,yGr,LGr,Q5,xGr,Hr,vx,$Gr,X4e,kGr,SGr,En,RGr,z4e,PGr,BGr,W4e,IGr,qGr,Q4e,NGr,jGr,DGr,H4e,H5,U4e,GGr,OGr,rZ,VGr,XGr,zGr,U5,Qje,nf,J5,J4e,Fx,WGr,Y4e,QGr,Hje,Tr,Tx,HGr,sf,UGr,tZ,JGr,YGr,aZ,KGr,ZGr,eOr,Mx,oOr,K4e,rOr,tOr,aOr,Yt,Ex,nOr,Z4e,sOr,lOr,lf,iOr,eEe,dOr,cOr,nZ,fOr,mOr,gOr,Y5,hOr,Ur,Cx,pOr,oEe,uOr,_Or,Cn,bOr,rEe,vOr,FOr,tEe,TOr,MOr,aEe,EOr,COr,wOr,wx,K5,nEe,AOr,yOr,sZ,LOr,xOr,$Or,Z5,sEe,kOr,SOr,lZ,ROr,POr,BOr,ew,Uje,df,ow,lEe,Ax,IOr,iEe,qOr,Jje,Mr,yx,NOr,cf,jOr,iZ,DOr,GOr,dZ,OOr,VOr,XOr,Lx,zOr,dEe,WOr,QOr,HOr,Kt,xx,UOr,cEe,JOr,YOr,ff,KOr,fEe,ZOr,eVr,cZ,oVr,rVr,tVr,rw,aVr,Jr,$x,nVr,mEe,sVr,lVr,wn,iVr,gEe,dVr,cVr,hEe,fVr,mVr,pEe,gVr,hVr,pVr,uEe,tw,_Ee,uVr,_Vr,fZ,bVr,vVr,FVr,aw,Yje;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),AA=new te({}),yA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new TVr({props:{warning:!0,$$slots:{default:[e$t]},$$scope:{ctx:L}}}),LA=new te({}),xA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L581"}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),RA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/configuration_auto.py#L727"}}),PA=new te({}),BA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L389"}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17388/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/tokenization_auto.py#L599"}}),DA=new te({}),GA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17388/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new TVr({props:{$$slots:{default:[t$t]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),WA=new te({}),QA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L88"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L102"}}),ep=new TVr({props:{$$slots:{default:[n$t]},$$scope:{ctx:L}}}),op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/processing_auto.py#L255"}}),KA=new te({}),ZA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L733"}}),o6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),ap=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),r6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),t6=new te({}),a6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L740"}}),s6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),l6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),i6=new te({}),d6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L755"}}),f6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),g6=new te({}),h6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L762"}}),u6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),_6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),b6=new te({}),v6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L769"}}),T6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),M6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),E6=new te({}),C6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L778"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),L6=new te({}),x6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L812"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Pb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),f2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),R6=new te({}),P6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L819"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),g2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),N6=new te({}),j6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L805"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),V6=new te({}),X6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L787"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),H6=new te({}),U6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L794"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),Z6=new te({}),ey=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L828"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L867"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L874"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L897"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L881"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L888"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),$y=new te({}),ky=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L906"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),By=new te({}),Iy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L913"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L860"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),Wy=new te({}),Qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L835"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),Yy=new te({}),Ky=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L842"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),rL=new te({}),tL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_auto.py#L851"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),lL=new te({}),iL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),cL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),mL=new te({}),gL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),_L=new te({}),bL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),ML=new te({}),EL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),yL=new te({}),LL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),SL=new te({}),RL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),qL=new te({}),NL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),OL=new te({}),VL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),QL=new te({}),HL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),ZL=new te({}),e9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),a9=new te({}),n9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),l9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),C9=new te({}),w9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),x9=new te({}),$9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),S9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),P9=new te({}),B9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),px=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),Ax=new te({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17388/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17388/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17388/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),MA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),EA=o("AutoConfig"),Ln=o(", "),xn=a("a"),CA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),wA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),X$=o("will create a model that is an instance of "),_i=a("a"),z$=o("BertModel"),W$=o("."),Eo=l(),wa=a("p"),Q$=o("There is one class of "),bf=a("code"),H$=o("AutoModel"),nOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Hqe=l(),bi=a("h2"),vf=a("a"),aoe=a("span"),F(AA.$$.fragment),sOe=l(),noe=a("span"),lOe=o("Extending the Auto Classes"),Uqe=l(),kn=a("p"),iOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),soe=a("code"),dOe=o("NewModel"),cOe=o(", make sure you have a "),loe=a("code"),fOe=o("NewModelConfig"),mOe=o(` then you can add those to the auto
classes like this:`),Jqe=l(),F(yA.$$.fragment),Yqe=l(),U$=a("p"),gOe=o("You will then be able to use the auto classes like you would usually do!"),Kqe=l(),F(Ff.$$.fragment),Zqe=l(),vi=a("h2"),Tf=a("a"),ioe=a("span"),F(LA.$$.fragment),hOe=l(),doe=a("span"),pOe=o("AutoConfig"),eNe=l(),Co=a("div"),F(xA.$$.fragment),uOe=l(),$A=a("p"),_Oe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J$=a("a"),bOe=o("from_pretrained()"),vOe=o(" class method."),FOe=l(),kA=a("p"),TOe=o("This class cannot be instantiated directly using "),coe=a("code"),MOe=o("__init__()"),EOe=o(" (throws an error)."),COe=l(),Er=a("div"),F(SA.$$.fragment),wOe=l(),foe=a("p"),AOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),yOe=l(),Fi=a("p"),LOe=o("The configuration class to instantiate is selected based on the "),moe=a("code"),xOe=o("model_type"),$Oe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),goe=a("code"),kOe=o("pretrained_model_name_or_path"),SOe=o(":"),ROe=l(),A=a("ul"),Mf=a("li"),hoe=a("strong"),POe=o("albert"),BOe=o(" \u2014 "),Y$=a("a"),IOe=o("AlbertConfig"),qOe=o(" (ALBERT model)"),NOe=l(),Ef=a("li"),poe=a("strong"),jOe=o("bart"),DOe=o(" \u2014 "),K$=a("a"),GOe=o("BartConfig"),OOe=o(" (BART model)"),VOe=l(),Cf=a("li"),uoe=a("strong"),XOe=o("beit"),zOe=o(" \u2014 "),Z$=a("a"),WOe=o("BeitConfig"),QOe=o(" (BEiT model)"),HOe=l(),wf=a("li"),_oe=a("strong"),UOe=o("bert"),JOe=o(" \u2014 "),ek=a("a"),YOe=o("BertConfig"),KOe=o(" (BERT model)"),ZOe=l(),Af=a("li"),boe=a("strong"),eVe=o("bert-generation"),oVe=o(" \u2014 "),ok=a("a"),rVe=o("BertGenerationConfig"),tVe=o(" (Bert Generation model)"),aVe=l(),yf=a("li"),voe=a("strong"),nVe=o("big_bird"),sVe=o(" \u2014 "),rk=a("a"),lVe=o("BigBirdConfig"),iVe=o(" (BigBird model)"),dVe=l(),Lf=a("li"),Foe=a("strong"),cVe=o("bigbird_pegasus"),fVe=o(" \u2014 "),tk=a("a"),mVe=o("BigBirdPegasusConfig"),gVe=o(" (BigBirdPegasus model)"),hVe=l(),xf=a("li"),Toe=a("strong"),pVe=o("blenderbot"),uVe=o(" \u2014 "),ak=a("a"),_Ve=o("BlenderbotConfig"),bVe=o(" (Blenderbot model)"),vVe=l(),$f=a("li"),Moe=a("strong"),FVe=o("blenderbot-small"),TVe=o(" \u2014 "),nk=a("a"),MVe=o("BlenderbotSmallConfig"),EVe=o(" (BlenderbotSmall model)"),CVe=l(),kf=a("li"),Eoe=a("strong"),wVe=o("camembert"),AVe=o(" \u2014 "),sk=a("a"),yVe=o("CamembertConfig"),LVe=o(" (CamemBERT model)"),xVe=l(),Sf=a("li"),Coe=a("strong"),$Ve=o("canine"),kVe=o(" \u2014 "),lk=a("a"),SVe=o("CanineConfig"),RVe=o(" (Canine model)"),PVe=l(),Rf=a("li"),woe=a("strong"),BVe=o("clip"),IVe=o(" \u2014 "),ik=a("a"),qVe=o("CLIPConfig"),NVe=o(" (CLIP model)"),jVe=l(),Pf=a("li"),Aoe=a("strong"),DVe=o("convbert"),GVe=o(" \u2014 "),dk=a("a"),OVe=o("ConvBertConfig"),VVe=o(" (ConvBERT model)"),XVe=l(),Bf=a("li"),yoe=a("strong"),zVe=o("convnext"),WVe=o(" \u2014 "),ck=a("a"),QVe=o("ConvNextConfig"),HVe=o(" (ConvNext model)"),UVe=l(),If=a("li"),Loe=a("strong"),JVe=o("ctrl"),YVe=o(" \u2014 "),fk=a("a"),KVe=o("CTRLConfig"),ZVe=o(" (CTRL model)"),eXe=l(),qf=a("li"),xoe=a("strong"),oXe=o("cvt"),rXe=o(" \u2014 "),mk=a("a"),tXe=o("CvtConfig"),aXe=o(" (CvT model)"),nXe=l(),Nf=a("li"),$oe=a("strong"),sXe=o("data2vec-audio"),lXe=o(" \u2014 "),gk=a("a"),iXe=o("Data2VecAudioConfig"),dXe=o(" (Data2VecAudio model)"),cXe=l(),jf=a("li"),koe=a("strong"),fXe=o("data2vec-text"),mXe=o(" \u2014 "),hk=a("a"),gXe=o("Data2VecTextConfig"),hXe=o(" (Data2VecText model)"),pXe=l(),Df=a("li"),Soe=a("strong"),uXe=o("data2vec-vision"),_Xe=o(" \u2014 "),pk=a("a"),bXe=o("Data2VecVisionConfig"),vXe=o(" (Data2VecVision model)"),FXe=l(),Gf=a("li"),Roe=a("strong"),TXe=o("deberta"),MXe=o(" \u2014 "),uk=a("a"),EXe=o("DebertaConfig"),CXe=o(" (DeBERTa model)"),wXe=l(),Of=a("li"),Poe=a("strong"),AXe=o("deberta-v2"),yXe=o(" \u2014 "),_k=a("a"),LXe=o("DebertaV2Config"),xXe=o(" (DeBERTa-v2 model)"),$Xe=l(),Vf=a("li"),Boe=a("strong"),kXe=o("decision_transformer"),SXe=o(" \u2014 "),bk=a("a"),RXe=o("DecisionTransformerConfig"),PXe=o(" (Decision Transformer model)"),BXe=l(),Xf=a("li"),Ioe=a("strong"),IXe=o("deit"),qXe=o(" \u2014 "),vk=a("a"),NXe=o("DeiTConfig"),jXe=o(" (DeiT model)"),DXe=l(),zf=a("li"),qoe=a("strong"),GXe=o("detr"),OXe=o(" \u2014 "),Fk=a("a"),VXe=o("DetrConfig"),XXe=o(" (DETR model)"),zXe=l(),Wf=a("li"),Noe=a("strong"),WXe=o("distilbert"),QXe=o(" \u2014 "),Tk=a("a"),HXe=o("DistilBertConfig"),UXe=o(" (DistilBERT model)"),JXe=l(),Qf=a("li"),joe=a("strong"),YXe=o("dpr"),KXe=o(" \u2014 "),Mk=a("a"),ZXe=o("DPRConfig"),eze=o(" (DPR model)"),oze=l(),Hf=a("li"),Doe=a("strong"),rze=o("dpt"),tze=o(" \u2014 "),Ek=a("a"),aze=o("DPTConfig"),nze=o(" (DPT model)"),sze=l(),Uf=a("li"),Goe=a("strong"),lze=o("electra"),ize=o(" \u2014 "),Ck=a("a"),dze=o("ElectraConfig"),cze=o(" (ELECTRA model)"),fze=l(),Jf=a("li"),Ooe=a("strong"),mze=o("encoder-decoder"),gze=o(" \u2014 "),wk=a("a"),hze=o("EncoderDecoderConfig"),pze=o(" (Encoder decoder model)"),uze=l(),Yf=a("li"),Voe=a("strong"),_ze=o("flaubert"),bze=o(" \u2014 "),Ak=a("a"),vze=o("FlaubertConfig"),Fze=o(" (FlauBERT model)"),Tze=l(),Kf=a("li"),Xoe=a("strong"),Mze=o("flava"),Eze=o(" \u2014 "),yk=a("a"),Cze=o("FlavaConfig"),wze=o(" (Flava model)"),Aze=l(),Zf=a("li"),zoe=a("strong"),yze=o("fnet"),Lze=o(" \u2014 "),Lk=a("a"),xze=o("FNetConfig"),$ze=o(" (FNet model)"),kze=l(),em=a("li"),Woe=a("strong"),Sze=o("fsmt"),Rze=o(" \u2014 "),xk=a("a"),Pze=o("FSMTConfig"),Bze=o(" (FairSeq Machine-Translation model)"),Ize=l(),om=a("li"),Qoe=a("strong"),qze=o("funnel"),Nze=o(" \u2014 "),$k=a("a"),jze=o("FunnelConfig"),Dze=o(" (Funnel Transformer model)"),Gze=l(),rm=a("li"),Hoe=a("strong"),Oze=o("glpn"),Vze=o(" \u2014 "),kk=a("a"),Xze=o("GLPNConfig"),zze=o(" (GLPN model)"),Wze=l(),tm=a("li"),Uoe=a("strong"),Qze=o("gpt2"),Hze=o(" \u2014 "),Sk=a("a"),Uze=o("GPT2Config"),Jze=o(" (OpenAI GPT-2 model)"),Yze=l(),am=a("li"),Joe=a("strong"),Kze=o("gpt_neo"),Zze=o(" \u2014 "),Rk=a("a"),eWe=o("GPTNeoConfig"),oWe=o(" (GPT Neo model)"),rWe=l(),nm=a("li"),Yoe=a("strong"),tWe=o("gptj"),aWe=o(" \u2014 "),Pk=a("a"),nWe=o("GPTJConfig"),sWe=o(" (GPT-J model)"),lWe=l(),sm=a("li"),Koe=a("strong"),iWe=o("hubert"),dWe=o(" \u2014 "),Bk=a("a"),cWe=o("HubertConfig"),fWe=o(" (Hubert model)"),mWe=l(),lm=a("li"),Zoe=a("strong"),gWe=o("ibert"),hWe=o(" \u2014 "),Ik=a("a"),pWe=o("IBertConfig"),uWe=o(" (I-BERT model)"),_We=l(),im=a("li"),ere=a("strong"),bWe=o("imagegpt"),vWe=o(" \u2014 "),qk=a("a"),FWe=o("ImageGPTConfig"),TWe=o(" (ImageGPT model)"),MWe=l(),dm=a("li"),ore=a("strong"),EWe=o("layoutlm"),CWe=o(" \u2014 "),Nk=a("a"),wWe=o("LayoutLMConfig"),AWe=o(" (LayoutLM model)"),yWe=l(),cm=a("li"),rre=a("strong"),LWe=o("layoutlmv2"),xWe=o(" \u2014 "),jk=a("a"),$We=o("LayoutLMv2Config"),kWe=o(" (LayoutLMv2 model)"),SWe=l(),fm=a("li"),tre=a("strong"),RWe=o("layoutlmv3"),PWe=o(" \u2014 "),Dk=a("a"),BWe=o("LayoutLMv3Config"),IWe=o(" (LayoutLMv3 model)"),qWe=l(),mm=a("li"),are=a("strong"),NWe=o("led"),jWe=o(" \u2014 "),Gk=a("a"),DWe=o("LEDConfig"),GWe=o(" (LED model)"),OWe=l(),gm=a("li"),nre=a("strong"),VWe=o("longformer"),XWe=o(" \u2014 "),Ok=a("a"),zWe=o("LongformerConfig"),WWe=o(" (Longformer model)"),QWe=l(),hm=a("li"),sre=a("strong"),HWe=o("luke"),UWe=o(" \u2014 "),Vk=a("a"),JWe=o("LukeConfig"),YWe=o(" (LUKE model)"),KWe=l(),pm=a("li"),lre=a("strong"),ZWe=o("lxmert"),eQe=o(" \u2014 "),Xk=a("a"),oQe=o("LxmertConfig"),rQe=o(" (LXMERT model)"),tQe=l(),um=a("li"),ire=a("strong"),aQe=o("m2m_100"),nQe=o(" \u2014 "),zk=a("a"),sQe=o("M2M100Config"),lQe=o(" (M2M100 model)"),iQe=l(),_m=a("li"),dre=a("strong"),dQe=o("marian"),cQe=o(" \u2014 "),Wk=a("a"),fQe=o("MarianConfig"),mQe=o(" (Marian model)"),gQe=l(),bm=a("li"),cre=a("strong"),hQe=o("maskformer"),pQe=o(" \u2014 "),Qk=a("a"),uQe=o("MaskFormerConfig"),_Qe=o(" (MaskFormer model)"),bQe=l(),vm=a("li"),fre=a("strong"),vQe=o("mbart"),FQe=o(" \u2014 "),Hk=a("a"),TQe=o("MBartConfig"),MQe=o(" (mBART model)"),EQe=l(),Fm=a("li"),mre=a("strong"),CQe=o("megatron-bert"),wQe=o(" \u2014 "),Uk=a("a"),AQe=o("MegatronBertConfig"),yQe=o(" (MegatronBert model)"),LQe=l(),Tm=a("li"),gre=a("strong"),xQe=o("mobilebert"),$Qe=o(" \u2014 "),Jk=a("a"),kQe=o("MobileBertConfig"),SQe=o(" (MobileBERT model)"),RQe=l(),Mm=a("li"),hre=a("strong"),PQe=o("mpnet"),BQe=o(" \u2014 "),Yk=a("a"),IQe=o("MPNetConfig"),qQe=o(" (MPNet model)"),NQe=l(),Em=a("li"),pre=a("strong"),jQe=o("mt5"),DQe=o(" \u2014 "),Kk=a("a"),GQe=o("MT5Config"),OQe=o(" (mT5 model)"),VQe=l(),Cm=a("li"),ure=a("strong"),XQe=o("nystromformer"),zQe=o(" \u2014 "),Zk=a("a"),WQe=o("NystromformerConfig"),QQe=o(" (Nystromformer model)"),HQe=l(),wm=a("li"),_re=a("strong"),UQe=o("openai-gpt"),JQe=o(" \u2014 "),eS=a("a"),YQe=o("OpenAIGPTConfig"),KQe=o(" (OpenAI GPT model)"),ZQe=l(),Am=a("li"),bre=a("strong"),eHe=o("opt"),oHe=o(" \u2014 "),oS=a("a"),rHe=o("OPTConfig"),tHe=o(" (OPT model)"),aHe=l(),ym=a("li"),vre=a("strong"),nHe=o("pegasus"),sHe=o(" \u2014 "),rS=a("a"),lHe=o("PegasusConfig"),iHe=o(" (Pegasus model)"),dHe=l(),Lm=a("li"),Fre=a("strong"),cHe=o("perceiver"),fHe=o(" \u2014 "),tS=a("a"),mHe=o("PerceiverConfig"),gHe=o(" (Perceiver model)"),hHe=l(),xm=a("li"),Tre=a("strong"),pHe=o("plbart"),uHe=o(" \u2014 "),aS=a("a"),_He=o("PLBartConfig"),bHe=o(" (PLBart model)"),vHe=l(),$m=a("li"),Mre=a("strong"),FHe=o("poolformer"),THe=o(" \u2014 "),nS=a("a"),MHe=o("PoolFormerConfig"),EHe=o(" (PoolFormer model)"),CHe=l(),km=a("li"),Ere=a("strong"),wHe=o("prophetnet"),AHe=o(" \u2014 "),sS=a("a"),yHe=o("ProphetNetConfig"),LHe=o(" (ProphetNet model)"),xHe=l(),Sm=a("li"),Cre=a("strong"),$He=o("qdqbert"),kHe=o(" \u2014 "),lS=a("a"),SHe=o("QDQBertConfig"),RHe=o(" (QDQBert model)"),PHe=l(),Rm=a("li"),wre=a("strong"),BHe=o("rag"),IHe=o(" \u2014 "),iS=a("a"),qHe=o("RagConfig"),NHe=o(" (RAG model)"),jHe=l(),Pm=a("li"),Are=a("strong"),DHe=o("realm"),GHe=o(" \u2014 "),dS=a("a"),OHe=o("RealmConfig"),VHe=o(" (Realm model)"),XHe=l(),Bm=a("li"),yre=a("strong"),zHe=o("reformer"),WHe=o(" \u2014 "),cS=a("a"),QHe=o("ReformerConfig"),HHe=o(" (Reformer model)"),UHe=l(),Im=a("li"),Lre=a("strong"),JHe=o("regnet"),YHe=o(" \u2014 "),fS=a("a"),KHe=o("RegNetConfig"),ZHe=o(" (RegNet model)"),eUe=l(),qm=a("li"),xre=a("strong"),oUe=o("rembert"),rUe=o(" \u2014 "),mS=a("a"),tUe=o("RemBertConfig"),aUe=o(" (RemBERT model)"),nUe=l(),Nm=a("li"),$re=a("strong"),sUe=o("resnet"),lUe=o(" \u2014 "),gS=a("a"),iUe=o("ResNetConfig"),dUe=o(" (ResNet model)"),cUe=l(),jm=a("li"),kre=a("strong"),fUe=o("retribert"),mUe=o(" \u2014 "),hS=a("a"),gUe=o("RetriBertConfig"),hUe=o(" (RetriBERT model)"),pUe=l(),Dm=a("li"),Sre=a("strong"),uUe=o("roberta"),_Ue=o(" \u2014 "),pS=a("a"),bUe=o("RobertaConfig"),vUe=o(" (RoBERTa model)"),FUe=l(),Gm=a("li"),Rre=a("strong"),TUe=o("roformer"),MUe=o(" \u2014 "),uS=a("a"),EUe=o("RoFormerConfig"),CUe=o(" (RoFormer model)"),wUe=l(),Om=a("li"),Pre=a("strong"),AUe=o("segformer"),yUe=o(" \u2014 "),_S=a("a"),LUe=o("SegformerConfig"),xUe=o(" (SegFormer model)"),$Ue=l(),Vm=a("li"),Bre=a("strong"),kUe=o("sew"),SUe=o(" \u2014 "),bS=a("a"),RUe=o("SEWConfig"),PUe=o(" (SEW model)"),BUe=l(),Xm=a("li"),Ire=a("strong"),IUe=o("sew-d"),qUe=o(" \u2014 "),vS=a("a"),NUe=o("SEWDConfig"),jUe=o(" (SEW-D model)"),DUe=l(),zm=a("li"),qre=a("strong"),GUe=o("speech-encoder-decoder"),OUe=o(" \u2014 "),FS=a("a"),VUe=o("SpeechEncoderDecoderConfig"),XUe=o(" (Speech Encoder decoder model)"),zUe=l(),Wm=a("li"),Nre=a("strong"),WUe=o("speech_to_text"),QUe=o(" \u2014 "),TS=a("a"),HUe=o("Speech2TextConfig"),UUe=o(" (Speech2Text model)"),JUe=l(),Qm=a("li"),jre=a("strong"),YUe=o("speech_to_text_2"),KUe=o(" \u2014 "),MS=a("a"),ZUe=o("Speech2Text2Config"),eJe=o(" (Speech2Text2 model)"),oJe=l(),Hm=a("li"),Dre=a("strong"),rJe=o("splinter"),tJe=o(" \u2014 "),ES=a("a"),aJe=o("SplinterConfig"),nJe=o(" (Splinter model)"),sJe=l(),Um=a("li"),Gre=a("strong"),lJe=o("squeezebert"),iJe=o(" \u2014 "),CS=a("a"),dJe=o("SqueezeBertConfig"),cJe=o(" (SqueezeBERT model)"),fJe=l(),Jm=a("li"),Ore=a("strong"),mJe=o("swin"),gJe=o(" \u2014 "),wS=a("a"),hJe=o("SwinConfig"),pJe=o(" (Swin model)"),uJe=l(),Ym=a("li"),Vre=a("strong"),_Je=o("t5"),bJe=o(" \u2014 "),AS=a("a"),vJe=o("T5Config"),FJe=o(" (T5 model)"),TJe=l(),Km=a("li"),Xre=a("strong"),MJe=o("tapas"),EJe=o(" \u2014 "),yS=a("a"),CJe=o("TapasConfig"),wJe=o(" (TAPAS model)"),AJe=l(),Zm=a("li"),zre=a("strong"),yJe=o("trajectory_transformer"),LJe=o(" \u2014 "),LS=a("a"),xJe=o("TrajectoryTransformerConfig"),$Je=o(" (Trajectory Transformer model)"),kJe=l(),eg=a("li"),Wre=a("strong"),SJe=o("transfo-xl"),RJe=o(" \u2014 "),xS=a("a"),PJe=o("TransfoXLConfig"),BJe=o(" (Transformer-XL model)"),IJe=l(),og=a("li"),Qre=a("strong"),qJe=o("trocr"),NJe=o(" \u2014 "),$S=a("a"),jJe=o("TrOCRConfig"),DJe=o(" (TrOCR model)"),GJe=l(),rg=a("li"),Hre=a("strong"),OJe=o("unispeech"),VJe=o(" \u2014 "),kS=a("a"),XJe=o("UniSpeechConfig"),zJe=o(" (UniSpeech model)"),WJe=l(),tg=a("li"),Ure=a("strong"),QJe=o("unispeech-sat"),HJe=o(" \u2014 "),SS=a("a"),UJe=o("UniSpeechSatConfig"),JJe=o(" (UniSpeechSat model)"),YJe=l(),ag=a("li"),Jre=a("strong"),KJe=o("van"),ZJe=o(" \u2014 "),RS=a("a"),eYe=o("VanConfig"),oYe=o(" (VAN model)"),rYe=l(),ng=a("li"),Yre=a("strong"),tYe=o("vilt"),aYe=o(" \u2014 "),PS=a("a"),nYe=o("ViltConfig"),sYe=o(" (ViLT model)"),lYe=l(),sg=a("li"),Kre=a("strong"),iYe=o("vision-encoder-decoder"),dYe=o(" \u2014 "),BS=a("a"),cYe=o("VisionEncoderDecoderConfig"),fYe=o(" (Vision Encoder decoder model)"),mYe=l(),lg=a("li"),Zre=a("strong"),gYe=o("vision-text-dual-encoder"),hYe=o(" \u2014 "),IS=a("a"),pYe=o("VisionTextDualEncoderConfig"),uYe=o(" (VisionTextDualEncoder model)"),_Ye=l(),ig=a("li"),ete=a("strong"),bYe=o("visual_bert"),vYe=o(" \u2014 "),qS=a("a"),FYe=o("VisualBertConfig"),TYe=o(" (VisualBert model)"),MYe=l(),dg=a("li"),ote=a("strong"),EYe=o("vit"),CYe=o(" \u2014 "),NS=a("a"),wYe=o("ViTConfig"),AYe=o(" (ViT model)"),yYe=l(),cg=a("li"),rte=a("strong"),LYe=o("vit_mae"),xYe=o(" \u2014 "),jS=a("a"),$Ye=o("ViTMAEConfig"),kYe=o(" (ViTMAE model)"),SYe=l(),fg=a("li"),tte=a("strong"),RYe=o("wav2vec2"),PYe=o(" \u2014 "),DS=a("a"),BYe=o("Wav2Vec2Config"),IYe=o(" (Wav2Vec2 model)"),qYe=l(),mg=a("li"),ate=a("strong"),NYe=o("wav2vec2-conformer"),jYe=o(" \u2014 "),GS=a("a"),DYe=o("Wav2Vec2ConformerConfig"),GYe=o(" (Wav2Vec2-Conformer model)"),OYe=l(),gg=a("li"),nte=a("strong"),VYe=o("wavlm"),XYe=o(" \u2014 "),OS=a("a"),zYe=o("WavLMConfig"),WYe=o(" (WavLM model)"),QYe=l(),hg=a("li"),ste=a("strong"),HYe=o("xglm"),UYe=o(" \u2014 "),VS=a("a"),JYe=o("XGLMConfig"),YYe=o(" (XGLM model)"),KYe=l(),pg=a("li"),lte=a("strong"),ZYe=o("xlm"),eKe=o(" \u2014 "),XS=a("a"),oKe=o("XLMConfig"),rKe=o(" (XLM model)"),tKe=l(),ug=a("li"),ite=a("strong"),aKe=o("xlm-prophetnet"),nKe=o(" \u2014 "),zS=a("a"),sKe=o("XLMProphetNetConfig"),lKe=o(" (XLMProphetNet model)"),iKe=l(),_g=a("li"),dte=a("strong"),dKe=o("xlm-roberta"),cKe=o(" \u2014 "),WS=a("a"),fKe=o("XLMRobertaConfig"),mKe=o(" (XLM-RoBERTa model)"),gKe=l(),bg=a("li"),cte=a("strong"),hKe=o("xlm-roberta-xl"),pKe=o(" \u2014 "),QS=a("a"),uKe=o("XLMRobertaXLConfig"),_Ke=o(" (XLM-RoBERTa-XL model)"),bKe=l(),vg=a("li"),fte=a("strong"),vKe=o("xlnet"),FKe=o(" \u2014 "),HS=a("a"),TKe=o("XLNetConfig"),MKe=o(" (XLNet model)"),EKe=l(),Fg=a("li"),mte=a("strong"),CKe=o("yolos"),wKe=o(" \u2014 "),US=a("a"),AKe=o("YolosConfig"),yKe=o(" (YOLOS model)"),LKe=l(),Tg=a("li"),gte=a("strong"),xKe=o("yoso"),$Ke=o(" \u2014 "),JS=a("a"),kKe=o("YosoConfig"),SKe=o(" (YOSO model)"),RKe=l(),F(Mg.$$.fragment),PKe=l(),Eg=a("div"),F(RA.$$.fragment),BKe=l(),hte=a("p"),IKe=o("Register a new configuration for this class."),oNe=l(),Ti=a("h2"),Cg=a("a"),pte=a("span"),F(PA.$$.fragment),qKe=l(),ute=a("span"),NKe=o("AutoTokenizer"),rNe=l(),wo=a("div"),F(BA.$$.fragment),jKe=l(),IA=a("p"),DKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YS=a("a"),GKe=o("AutoTokenizer.from_pretrained()"),OKe=o(" class method."),VKe=l(),qA=a("p"),XKe=o("This class cannot be instantiated directly using "),_te=a("code"),zKe=o("__init__()"),WKe=o(" (throws an error)."),QKe=l(),Cr=a("div"),F(NA.$$.fragment),HKe=l(),bte=a("p"),UKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JKe=l(),Aa=a("p"),YKe=o("The tokenizer class to instantiate is selected based on the "),vte=a("code"),KKe=o("model_type"),ZKe=o(` property of the config object (either
passed as an argument or loaded from `),Fte=a("code"),eZe=o("pretrained_model_name_or_path"),oZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tte=a("code"),rZe=o("pretrained_model_name_or_path"),tZe=o(":"),aZe=l(),k=a("ul"),Sn=a("li"),Mte=a("strong"),nZe=o("albert"),sZe=o(" \u2014 "),KS=a("a"),lZe=o("AlbertTokenizer"),iZe=o(" or "),ZS=a("a"),dZe=o("AlbertTokenizerFast"),cZe=o(" (ALBERT model)"),fZe=l(),Rn=a("li"),Ete=a("strong"),mZe=o("bart"),gZe=o(" \u2014 "),eR=a("a"),hZe=o("BartTokenizer"),pZe=o(" or "),oR=a("a"),uZe=o("BartTokenizerFast"),_Ze=o(" (BART model)"),bZe=l(),Pn=a("li"),Cte=a("strong"),vZe=o("barthez"),FZe=o(" \u2014 "),rR=a("a"),TZe=o("BarthezTokenizer"),MZe=o(" or "),tR=a("a"),EZe=o("BarthezTokenizerFast"),CZe=o(" (BARThez model)"),wZe=l(),wg=a("li"),wte=a("strong"),AZe=o("bartpho"),yZe=o(" \u2014 "),aR=a("a"),LZe=o("BartphoTokenizer"),xZe=o(" (BARTpho model)"),$Ze=l(),Bn=a("li"),Ate=a("strong"),kZe=o("bert"),SZe=o(" \u2014 "),nR=a("a"),RZe=o("BertTokenizer"),PZe=o(" or "),sR=a("a"),BZe=o("BertTokenizerFast"),IZe=o(" (BERT model)"),qZe=l(),Ag=a("li"),yte=a("strong"),NZe=o("bert-generation"),jZe=o(" \u2014 "),lR=a("a"),DZe=o("BertGenerationTokenizer"),GZe=o(" (Bert Generation model)"),OZe=l(),yg=a("li"),Lte=a("strong"),VZe=o("bert-japanese"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("BertJapaneseTokenizer"),WZe=o(" (BertJapanese model)"),QZe=l(),Lg=a("li"),xte=a("strong"),HZe=o("bertweet"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BertweetTokenizer"),YZe=o(" (Bertweet model)"),KZe=l(),In=a("li"),$te=a("strong"),ZZe=o("big_bird"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("BigBirdTokenizer"),reo=o(" or "),fR=a("a"),teo=o("BigBirdTokenizerFast"),aeo=o(" (BigBird model)"),neo=l(),qn=a("li"),kte=a("strong"),seo=o("bigbird_pegasus"),leo=o(" \u2014 "),mR=a("a"),ieo=o("PegasusTokenizer"),deo=o(" or "),gR=a("a"),ceo=o("PegasusTokenizerFast"),feo=o(" (BigBirdPegasus model)"),meo=l(),Nn=a("li"),Ste=a("strong"),geo=o("blenderbot"),heo=o(" \u2014 "),hR=a("a"),peo=o("BlenderbotTokenizer"),ueo=o(" or "),pR=a("a"),_eo=o("BlenderbotTokenizerFast"),beo=o(" (Blenderbot model)"),veo=l(),xg=a("li"),Rte=a("strong"),Feo=o("blenderbot-small"),Teo=o(" \u2014 "),uR=a("a"),Meo=o("BlenderbotSmallTokenizer"),Eeo=o(" (BlenderbotSmall model)"),Ceo=l(),$g=a("li"),Pte=a("strong"),weo=o("byt5"),Aeo=o(" \u2014 "),_R=a("a"),yeo=o("ByT5Tokenizer"),Leo=o(" (ByT5 model)"),xeo=l(),jn=a("li"),Bte=a("strong"),$eo=o("camembert"),keo=o(" \u2014 "),bR=a("a"),Seo=o("CamembertTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("CamembertTokenizerFast"),Beo=o(" (CamemBERT model)"),Ieo=l(),kg=a("li"),Ite=a("strong"),qeo=o("canine"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("CanineTokenizer"),Deo=o(" (Canine model)"),Geo=l(),Dn=a("li"),qte=a("strong"),Oeo=o("clip"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("CLIPTokenizer"),zeo=o(" or "),MR=a("a"),Weo=o("CLIPTokenizerFast"),Qeo=o(" (CLIP model)"),Heo=l(),Gn=a("li"),Nte=a("strong"),Ueo=o("convbert"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("ConvBertTokenizer"),Keo=o(" or "),CR=a("a"),Zeo=o("ConvBertTokenizerFast"),eoo=o(" (ConvBERT model)"),ooo=l(),On=a("li"),jte=a("strong"),roo=o("cpm"),too=o(" \u2014 "),wR=a("a"),aoo=o("CpmTokenizer"),noo=o(" or "),AR=a("a"),soo=o("CpmTokenizerFast"),loo=o(" (CPM model)"),ioo=l(),Sg=a("li"),Dte=a("strong"),doo=o("ctrl"),coo=o(" \u2014 "),yR=a("a"),foo=o("CTRLTokenizer"),moo=o(" (CTRL model)"),goo=l(),Vn=a("li"),Gte=a("strong"),hoo=o("data2vec-text"),poo=o(" \u2014 "),LR=a("a"),uoo=o("RobertaTokenizer"),_oo=o(" or "),xR=a("a"),boo=o("RobertaTokenizerFast"),voo=o(" (Data2VecText model)"),Foo=l(),Xn=a("li"),Ote=a("strong"),Too=o("deberta"),Moo=o(" \u2014 "),$R=a("a"),Eoo=o("DebertaTokenizer"),Coo=o(" or "),kR=a("a"),woo=o("DebertaTokenizerFast"),Aoo=o(" (DeBERTa model)"),yoo=l(),zn=a("li"),Vte=a("strong"),Loo=o("deberta-v2"),xoo=o(" \u2014 "),SR=a("a"),$oo=o("DebertaV2Tokenizer"),koo=o(" or "),RR=a("a"),Soo=o("DebertaV2TokenizerFast"),Roo=o(" (DeBERTa-v2 model)"),Poo=l(),Wn=a("li"),Xte=a("strong"),Boo=o("distilbert"),Ioo=o(" \u2014 "),PR=a("a"),qoo=o("DistilBertTokenizer"),Noo=o(" or "),BR=a("a"),joo=o("DistilBertTokenizerFast"),Doo=o(" (DistilBERT model)"),Goo=l(),Qn=a("li"),zte=a("strong"),Ooo=o("dpr"),Voo=o(" \u2014 "),IR=a("a"),Xoo=o("DPRQuestionEncoderTokenizer"),zoo=o(" or "),qR=a("a"),Woo=o("DPRQuestionEncoderTokenizerFast"),Qoo=o(" (DPR model)"),Hoo=l(),Hn=a("li"),Wte=a("strong"),Uoo=o("electra"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("ElectraTokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("ElectraTokenizerFast"),ero=o(" (ELECTRA model)"),oro=l(),Rg=a("li"),Qte=a("strong"),rro=o("flaubert"),tro=o(" \u2014 "),DR=a("a"),aro=o("FlaubertTokenizer"),nro=o(" (FlauBERT model)"),sro=l(),Un=a("li"),Hte=a("strong"),lro=o("fnet"),iro=o(" \u2014 "),GR=a("a"),dro=o("FNetTokenizer"),cro=o(" or "),OR=a("a"),fro=o("FNetTokenizerFast"),mro=o(" (FNet model)"),gro=l(),Pg=a("li"),Ute=a("strong"),hro=o("fsmt"),pro=o(" \u2014 "),VR=a("a"),uro=o("FSMTTokenizer"),_ro=o(" (FairSeq Machine-Translation model)"),bro=l(),Jn=a("li"),Jte=a("strong"),vro=o("funnel"),Fro=o(" \u2014 "),XR=a("a"),Tro=o("FunnelTokenizer"),Mro=o(" or "),zR=a("a"),Ero=o("FunnelTokenizerFast"),Cro=o(" (Funnel Transformer model)"),wro=l(),Yn=a("li"),Yte=a("strong"),Aro=o("gpt2"),yro=o(" \u2014 "),WR=a("a"),Lro=o("GPT2Tokenizer"),xro=o(" or "),QR=a("a"),$ro=o("GPT2TokenizerFast"),kro=o(" (OpenAI GPT-2 model)"),Sro=l(),Kn=a("li"),Kte=a("strong"),Rro=o("gpt_neo"),Pro=o(" \u2014 "),HR=a("a"),Bro=o("GPT2Tokenizer"),Iro=o(" or "),UR=a("a"),qro=o("GPT2TokenizerFast"),Nro=o(" (GPT Neo model)"),jro=l(),Zn=a("li"),Zte=a("strong"),Dro=o("gptj"),Gro=o(" \u2014 "),JR=a("a"),Oro=o("GPT2Tokenizer"),Vro=o(" or "),YR=a("a"),Xro=o("GPT2TokenizerFast"),zro=o(" (GPT-J model)"),Wro=l(),es=a("li"),eae=a("strong"),Qro=o("herbert"),Hro=o(" \u2014 "),KR=a("a"),Uro=o("HerbertTokenizer"),Jro=o(" or "),ZR=a("a"),Yro=o("HerbertTokenizerFast"),Kro=o(" (HerBERT model)"),Zro=l(),Bg=a("li"),oae=a("strong"),eto=o("hubert"),oto=o(" \u2014 "),eP=a("a"),rto=o("Wav2Vec2CTCTokenizer"),tto=o(" (Hubert model)"),ato=l(),os=a("li"),rae=a("strong"),nto=o("ibert"),sto=o(" \u2014 "),oP=a("a"),lto=o("RobertaTokenizer"),ito=o(" or "),rP=a("a"),dto=o("RobertaTokenizerFast"),cto=o(" (I-BERT model)"),fto=l(),rs=a("li"),tae=a("strong"),mto=o("layoutlm"),gto=o(" \u2014 "),tP=a("a"),hto=o("LayoutLMTokenizer"),pto=o(" or "),aP=a("a"),uto=o("LayoutLMTokenizerFast"),_to=o(" (LayoutLM model)"),bto=l(),ts=a("li"),aae=a("strong"),vto=o("layoutlmv2"),Fto=o(" \u2014 "),nP=a("a"),Tto=o("LayoutLMv2Tokenizer"),Mto=o(" or "),sP=a("a"),Eto=o("LayoutLMv2TokenizerFast"),Cto=o(" (LayoutLMv2 model)"),wto=l(),as=a("li"),nae=a("strong"),Ato=o("layoutlmv3"),yto=o(" \u2014 "),lP=a("a"),Lto=o("LayoutLMv3Tokenizer"),xto=o(" or "),iP=a("a"),$to=o("LayoutLMv3TokenizerFast"),kto=o(" (LayoutLMv3 model)"),Sto=l(),ns=a("li"),sae=a("strong"),Rto=o("layoutxlm"),Pto=o(" \u2014 "),dP=a("a"),Bto=o("LayoutXLMTokenizer"),Ito=o(" or "),cP=a("a"),qto=o("LayoutXLMTokenizerFast"),Nto=o(" (LayoutXLM model)"),jto=l(),ss=a("li"),lae=a("strong"),Dto=o("led"),Gto=o(" \u2014 "),fP=a("a"),Oto=o("LEDTokenizer"),Vto=o(" or "),mP=a("a"),Xto=o("LEDTokenizerFast"),zto=o(" (LED model)"),Wto=l(),ls=a("li"),iae=a("strong"),Qto=o("longformer"),Hto=o(" \u2014 "),gP=a("a"),Uto=o("LongformerTokenizer"),Jto=o(" or "),hP=a("a"),Yto=o("LongformerTokenizerFast"),Kto=o(" (Longformer model)"),Zto=l(),Ig=a("li"),dae=a("strong"),eao=o("luke"),oao=o(" \u2014 "),pP=a("a"),rao=o("LukeTokenizer"),tao=o(" (LUKE model)"),aao=l(),is=a("li"),cae=a("strong"),nao=o("lxmert"),sao=o(" \u2014 "),uP=a("a"),lao=o("LxmertTokenizer"),iao=o(" or "),_P=a("a"),dao=o("LxmertTokenizerFast"),cao=o(" (LXMERT model)"),fao=l(),qg=a("li"),fae=a("strong"),mao=o("m2m_100"),gao=o(" \u2014 "),bP=a("a"),hao=o("M2M100Tokenizer"),pao=o(" (M2M100 model)"),uao=l(),Ng=a("li"),mae=a("strong"),_ao=o("marian"),bao=o(" \u2014 "),vP=a("a"),vao=o("MarianTokenizer"),Fao=o(" (Marian model)"),Tao=l(),ds=a("li"),gae=a("strong"),Mao=o("mbart"),Eao=o(" \u2014 "),FP=a("a"),Cao=o("MBartTokenizer"),wao=o(" or "),TP=a("a"),Aao=o("MBartTokenizerFast"),yao=o(" (mBART model)"),Lao=l(),cs=a("li"),hae=a("strong"),xao=o("mbart50"),$ao=o(" \u2014 "),MP=a("a"),kao=o("MBart50Tokenizer"),Sao=o(" or "),EP=a("a"),Rao=o("MBart50TokenizerFast"),Pao=o(" (mBART-50 model)"),Bao=l(),fs=a("li"),pae=a("strong"),Iao=o("megatron-bert"),qao=o(" \u2014 "),CP=a("a"),Nao=o("BertTokenizer"),jao=o(" or "),wP=a("a"),Dao=o("BertTokenizerFast"),Gao=o(" (MegatronBert model)"),Oao=l(),jg=a("li"),uae=a("strong"),Vao=o("mluke"),Xao=o(" \u2014 "),AP=a("a"),zao=o("MLukeTokenizer"),Wao=o(" (mLUKE model)"),Qao=l(),ms=a("li"),_ae=a("strong"),Hao=o("mobilebert"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("MobileBertTokenizer"),Yao=o(" or "),LP=a("a"),Kao=o("MobileBertTokenizerFast"),Zao=o(" (MobileBERT model)"),eno=l(),gs=a("li"),bae=a("strong"),ono=o("mpnet"),rno=o(" \u2014 "),xP=a("a"),tno=o("MPNetTokenizer"),ano=o(" or "),$P=a("a"),nno=o("MPNetTokenizerFast"),sno=o(" (MPNet model)"),lno=l(),hs=a("li"),vae=a("strong"),ino=o("mt5"),dno=o(" \u2014 "),kP=a("a"),cno=o("MT5Tokenizer"),fno=o(" or "),SP=a("a"),mno=o("MT5TokenizerFast"),gno=o(" (mT5 model)"),hno=l(),ps=a("li"),Fae=a("strong"),pno=o("nystromformer"),uno=o(" \u2014 "),RP=a("a"),_no=o("AlbertTokenizer"),bno=o(" or "),PP=a("a"),vno=o("AlbertTokenizerFast"),Fno=o(" (Nystromformer model)"),Tno=l(),us=a("li"),Tae=a("strong"),Mno=o("openai-gpt"),Eno=o(" \u2014 "),BP=a("a"),Cno=o("OpenAIGPTTokenizer"),wno=o(" or "),IP=a("a"),Ano=o("OpenAIGPTTokenizerFast"),yno=o(" (OpenAI GPT model)"),Lno=l(),Dg=a("li"),Mae=a("strong"),xno=o("opt"),$no=o(" \u2014 "),qP=a("a"),kno=o("GPT2Tokenizer"),Sno=o(" (OPT model)"),Rno=l(),_s=a("li"),Eae=a("strong"),Pno=o("pegasus"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("PegasusTokenizer"),qno=o(" or "),jP=a("a"),Nno=o("PegasusTokenizerFast"),jno=o(" (Pegasus model)"),Dno=l(),Gg=a("li"),Cae=a("strong"),Gno=o("perceiver"),Ono=o(" \u2014 "),DP=a("a"),Vno=o("PerceiverTokenizer"),Xno=o(" (Perceiver model)"),zno=l(),Og=a("li"),wae=a("strong"),Wno=o("phobert"),Qno=o(" \u2014 "),GP=a("a"),Hno=o("PhobertTokenizer"),Uno=o(" (PhoBERT model)"),Jno=l(),Vg=a("li"),Aae=a("strong"),Yno=o("plbart"),Kno=o(" \u2014 "),OP=a("a"),Zno=o("PLBartTokenizer"),eso=o(" (PLBart model)"),oso=l(),Xg=a("li"),yae=a("strong"),rso=o("prophetnet"),tso=o(" \u2014 "),VP=a("a"),aso=o("ProphetNetTokenizer"),nso=o(" (ProphetNet model)"),sso=l(),bs=a("li"),Lae=a("strong"),lso=o("qdqbert"),iso=o(" \u2014 "),XP=a("a"),dso=o("BertTokenizer"),cso=o(" or "),zP=a("a"),fso=o("BertTokenizerFast"),mso=o(" (QDQBert model)"),gso=l(),zg=a("li"),xae=a("strong"),hso=o("rag"),pso=o(" \u2014 "),WP=a("a"),uso=o("RagTokenizer"),_so=o(" (RAG model)"),bso=l(),vs=a("li"),$ae=a("strong"),vso=o("realm"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("RealmTokenizer"),Mso=o(" or "),HP=a("a"),Eso=o("RealmTokenizerFast"),Cso=o(" (Realm model)"),wso=l(),Fs=a("li"),kae=a("strong"),Aso=o("reformer"),yso=o(" \u2014 "),UP=a("a"),Lso=o("ReformerTokenizer"),xso=o(" or "),JP=a("a"),$so=o("ReformerTokenizerFast"),kso=o(" (Reformer model)"),Sso=l(),Ts=a("li"),Sae=a("strong"),Rso=o("rembert"),Pso=o(" \u2014 "),YP=a("a"),Bso=o("RemBertTokenizer"),Iso=o(" or "),KP=a("a"),qso=o("RemBertTokenizerFast"),Nso=o(" (RemBERT model)"),jso=l(),Ms=a("li"),Rae=a("strong"),Dso=o("retribert"),Gso=o(" \u2014 "),ZP=a("a"),Oso=o("RetriBertTokenizer"),Vso=o(" or "),eB=a("a"),Xso=o("RetriBertTokenizerFast"),zso=o(" (RetriBERT model)"),Wso=l(),Es=a("li"),Pae=a("strong"),Qso=o("roberta"),Hso=o(" \u2014 "),oB=a("a"),Uso=o("RobertaTokenizer"),Jso=o(" or "),rB=a("a"),Yso=o("RobertaTokenizerFast"),Kso=o(" (RoBERTa model)"),Zso=l(),Cs=a("li"),Bae=a("strong"),elo=o("roformer"),olo=o(" \u2014 "),tB=a("a"),rlo=o("RoFormerTokenizer"),tlo=o(" or "),aB=a("a"),alo=o("RoFormerTokenizerFast"),nlo=o(" (RoFormer model)"),slo=l(),Wg=a("li"),Iae=a("strong"),llo=o("speech_to_text"),ilo=o(" \u2014 "),nB=a("a"),dlo=o("Speech2TextTokenizer"),clo=o(" (Speech2Text model)"),flo=l(),Qg=a("li"),qae=a("strong"),mlo=o("speech_to_text_2"),glo=o(" \u2014 "),sB=a("a"),hlo=o("Speech2Text2Tokenizer"),plo=o(" (Speech2Text2 model)"),ulo=l(),ws=a("li"),Nae=a("strong"),_lo=o("splinter"),blo=o(" \u2014 "),lB=a("a"),vlo=o("SplinterTokenizer"),Flo=o(" or "),iB=a("a"),Tlo=o("SplinterTokenizerFast"),Mlo=o(" (Splinter model)"),Elo=l(),As=a("li"),jae=a("strong"),Clo=o("squeezebert"),wlo=o(" \u2014 "),dB=a("a"),Alo=o("SqueezeBertTokenizer"),ylo=o(" or "),cB=a("a"),Llo=o("SqueezeBertTokenizerFast"),xlo=o(" (SqueezeBERT model)"),$lo=l(),ys=a("li"),Dae=a("strong"),klo=o("t5"),Slo=o(" \u2014 "),fB=a("a"),Rlo=o("T5Tokenizer"),Plo=o(" or "),mB=a("a"),Blo=o("T5TokenizerFast"),Ilo=o(" (T5 model)"),qlo=l(),Hg=a("li"),Gae=a("strong"),Nlo=o("tapas"),jlo=o(" \u2014 "),gB=a("a"),Dlo=o("TapasTokenizer"),Glo=o(" (TAPAS model)"),Olo=l(),Ug=a("li"),Oae=a("strong"),Vlo=o("tapex"),Xlo=o(" \u2014 "),hB=a("a"),zlo=o("TapexTokenizer"),Wlo=o(" (TAPEX model)"),Qlo=l(),Jg=a("li"),Vae=a("strong"),Hlo=o("transfo-xl"),Ulo=o(" \u2014 "),pB=a("a"),Jlo=o("TransfoXLTokenizer"),Ylo=o(" (Transformer-XL model)"),Klo=l(),Ls=a("li"),Xae=a("strong"),Zlo=o("visual_bert"),eio=o(" \u2014 "),uB=a("a"),oio=o("BertTokenizer"),rio=o(" or "),_B=a("a"),tio=o("BertTokenizerFast"),aio=o(" (VisualBert model)"),nio=l(),Yg=a("li"),zae=a("strong"),sio=o("wav2vec2"),lio=o(" \u2014 "),bB=a("a"),iio=o("Wav2Vec2CTCTokenizer"),dio=o(" (Wav2Vec2 model)"),cio=l(),Kg=a("li"),Wae=a("strong"),fio=o("wav2vec2-conformer"),mio=o(" \u2014 "),vB=a("a"),gio=o("Wav2Vec2CTCTokenizer"),hio=o(" (Wav2Vec2-Conformer model)"),pio=l(),Zg=a("li"),Qae=a("strong"),uio=o("wav2vec2_phoneme"),_io=o(" \u2014 "),FB=a("a"),bio=o("Wav2Vec2PhonemeCTCTokenizer"),vio=o(" (Wav2Vec2Phoneme model)"),Fio=l(),xs=a("li"),Hae=a("strong"),Tio=o("xglm"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("XGLMTokenizer"),Cio=o(" or "),MB=a("a"),wio=o("XGLMTokenizerFast"),Aio=o(" (XGLM model)"),yio=l(),eh=a("li"),Uae=a("strong"),Lio=o("xlm"),xio=o(" \u2014 "),EB=a("a"),$io=o("XLMTokenizer"),kio=o(" (XLM model)"),Sio=l(),oh=a("li"),Jae=a("strong"),Rio=o("xlm-prophetnet"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("XLMProphetNetTokenizer"),Iio=o(" (XLMProphetNet model)"),qio=l(),$s=a("li"),Yae=a("strong"),Nio=o("xlm-roberta"),jio=o(" \u2014 "),wB=a("a"),Dio=o("XLMRobertaTokenizer"),Gio=o(" or "),AB=a("a"),Oio=o("XLMRobertaTokenizerFast"),Vio=o(" (XLM-RoBERTa model)"),Xio=l(),ks=a("li"),Kae=a("strong"),zio=o("xlm-roberta-xl"),Wio=o(" \u2014 "),yB=a("a"),Qio=o("RobertaTokenizer"),Hio=o(" or "),LB=a("a"),Uio=o("RobertaTokenizerFast"),Jio=o(" (XLM-RoBERTa-XL model)"),Yio=l(),Ss=a("li"),Zae=a("strong"),Kio=o("xlnet"),Zio=o(" \u2014 "),xB=a("a"),edo=o("XLNetTokenizer"),odo=o(" or "),$B=a("a"),rdo=o("XLNetTokenizerFast"),tdo=o(" (XLNet model)"),ado=l(),Rs=a("li"),ene=a("strong"),ndo=o("yoso"),sdo=o(" \u2014 "),kB=a("a"),ldo=o("AlbertTokenizer"),ido=o(" or "),SB=a("a"),ddo=o("AlbertTokenizerFast"),cdo=o(" (YOSO model)"),fdo=l(),F(rh.$$.fragment),mdo=l(),th=a("div"),F(jA.$$.fragment),gdo=l(),one=a("p"),hdo=o("Register a new tokenizer in this mapping."),tNe=l(),Mi=a("h2"),ah=a("a"),rne=a("span"),F(DA.$$.fragment),pdo=l(),tne=a("span"),udo=o("AutoFeatureExtractor"),aNe=l(),Ao=a("div"),F(GA.$$.fragment),_do=l(),OA=a("p"),bdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),RB=a("a"),vdo=o("AutoFeatureExtractor.from_pretrained()"),Fdo=o(" class method."),Tdo=l(),VA=a("p"),Mdo=o("This class cannot be instantiated directly using "),ane=a("code"),Edo=o("__init__()"),Cdo=o(" (throws an error)."),wdo=l(),He=a("div"),F(XA.$$.fragment),Ado=l(),nne=a("p"),ydo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ldo=l(),ya=a("p"),xdo=o("The feature extractor class to instantiate is selected based on the "),sne=a("code"),$do=o("model_type"),kdo=o(` property of the config object
(either passed as an argument or loaded from `),lne=a("code"),Sdo=o("pretrained_model_name_or_path"),Rdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ine=a("code"),Pdo=o("pretrained_model_name_or_path"),Bdo=o(":"),Ido=l(),K=a("ul"),nh=a("li"),dne=a("strong"),qdo=o("beit"),Ndo=o(" \u2014 "),PB=a("a"),jdo=o("BeitFeatureExtractor"),Ddo=o(" (BEiT model)"),Gdo=l(),sh=a("li"),cne=a("strong"),Odo=o("clip"),Vdo=o(" \u2014 "),BB=a("a"),Xdo=o("CLIPFeatureExtractor"),zdo=o(" (CLIP model)"),Wdo=l(),lh=a("li"),fne=a("strong"),Qdo=o("convnext"),Hdo=o(" \u2014 "),IB=a("a"),Udo=o("ConvNextFeatureExtractor"),Jdo=o(" (ConvNext model)"),Ydo=l(),ih=a("li"),mne=a("strong"),Kdo=o("cvt"),Zdo=o(" \u2014 "),qB=a("a"),eco=o("ConvNextFeatureExtractor"),oco=o(" (CvT model)"),rco=l(),dh=a("li"),gne=a("strong"),tco=o("data2vec-audio"),aco=o(" \u2014 "),NB=a("a"),nco=o("Wav2Vec2FeatureExtractor"),sco=o(" (Data2VecAudio model)"),lco=l(),ch=a("li"),hne=a("strong"),ico=o("data2vec-vision"),dco=o(" \u2014 "),jB=a("a"),cco=o("BeitFeatureExtractor"),fco=o(" (Data2VecVision model)"),mco=l(),fh=a("li"),pne=a("strong"),gco=o("deit"),hco=o(" \u2014 "),DB=a("a"),pco=o("DeiTFeatureExtractor"),uco=o(" (DeiT model)"),_co=l(),mh=a("li"),une=a("strong"),bco=o("detr"),vco=o(" \u2014 "),GB=a("a"),Fco=o("DetrFeatureExtractor"),Tco=o(" (DETR model)"),Mco=l(),gh=a("li"),_ne=a("strong"),Eco=o("dpt"),Cco=o(" \u2014 "),OB=a("a"),wco=o("DPTFeatureExtractor"),Aco=o(" (DPT model)"),yco=l(),hh=a("li"),bne=a("strong"),Lco=o("flava"),xco=o(" \u2014 "),VB=a("a"),$co=o("FlavaFeatureExtractor"),kco=o(" (Flava model)"),Sco=l(),ph=a("li"),vne=a("strong"),Rco=o("glpn"),Pco=o(" \u2014 "),XB=a("a"),Bco=o("GLPNFeatureExtractor"),Ico=o(" (GLPN model)"),qco=l(),uh=a("li"),Fne=a("strong"),Nco=o("hubert"),jco=o(" \u2014 "),zB=a("a"),Dco=o("Wav2Vec2FeatureExtractor"),Gco=o(" (Hubert model)"),Oco=l(),_h=a("li"),Tne=a("strong"),Vco=o("layoutlmv2"),Xco=o(" \u2014 "),WB=a("a"),zco=o("LayoutLMv2FeatureExtractor"),Wco=o(" (LayoutLMv2 model)"),Qco=l(),bh=a("li"),Mne=a("strong"),Hco=o("layoutlmv3"),Uco=o(" \u2014 "),QB=a("a"),Jco=o("LayoutLMv3FeatureExtractor"),Yco=o(" (LayoutLMv3 model)"),Kco=l(),vh=a("li"),Ene=a("strong"),Zco=o("maskformer"),efo=o(" \u2014 "),HB=a("a"),ofo=o("MaskFormerFeatureExtractor"),rfo=o(" (MaskFormer model)"),tfo=l(),Fh=a("li"),Cne=a("strong"),afo=o("perceiver"),nfo=o(" \u2014 "),UB=a("a"),sfo=o("PerceiverFeatureExtractor"),lfo=o(" (Perceiver model)"),ifo=l(),Th=a("li"),wne=a("strong"),dfo=o("poolformer"),cfo=o(" \u2014 "),JB=a("a"),ffo=o("PoolFormerFeatureExtractor"),mfo=o(" (PoolFormer model)"),gfo=l(),Mh=a("li"),Ane=a("strong"),hfo=o("regnet"),pfo=o(" \u2014 "),YB=a("a"),ufo=o("ConvNextFeatureExtractor"),_fo=o(" (RegNet model)"),bfo=l(),Eh=a("li"),yne=a("strong"),vfo=o("resnet"),Ffo=o(" \u2014 "),KB=a("a"),Tfo=o("ConvNextFeatureExtractor"),Mfo=o(" (ResNet model)"),Efo=l(),Ch=a("li"),Lne=a("strong"),Cfo=o("segformer"),wfo=o(" \u2014 "),ZB=a("a"),Afo=o("SegformerFeatureExtractor"),yfo=o(" (SegFormer model)"),Lfo=l(),wh=a("li"),xne=a("strong"),xfo=o("speech_to_text"),$fo=o(" \u2014 "),eI=a("a"),kfo=o("Speech2TextFeatureExtractor"),Sfo=o(" (Speech2Text model)"),Rfo=l(),Ah=a("li"),$ne=a("strong"),Pfo=o("swin"),Bfo=o(" \u2014 "),oI=a("a"),Ifo=o("ViTFeatureExtractor"),qfo=o(" (Swin model)"),Nfo=l(),yh=a("li"),kne=a("strong"),jfo=o("van"),Dfo=o(" \u2014 "),rI=a("a"),Gfo=o("ConvNextFeatureExtractor"),Ofo=o(" (VAN model)"),Vfo=l(),Lh=a("li"),Sne=a("strong"),Xfo=o("vit"),zfo=o(" \u2014 "),tI=a("a"),Wfo=o("ViTFeatureExtractor"),Qfo=o(" (ViT model)"),Hfo=l(),xh=a("li"),Rne=a("strong"),Ufo=o("vit_mae"),Jfo=o(" \u2014 "),aI=a("a"),Yfo=o("ViTFeatureExtractor"),Kfo=o(" (ViTMAE model)"),Zfo=l(),$h=a("li"),Pne=a("strong"),emo=o("wav2vec2"),omo=o(" \u2014 "),nI=a("a"),rmo=o("Wav2Vec2FeatureExtractor"),tmo=o(" (Wav2Vec2 model)"),amo=l(),kh=a("li"),Bne=a("strong"),nmo=o("wav2vec2-conformer"),smo=o(" \u2014 "),sI=a("a"),lmo=o("Wav2Vec2FeatureExtractor"),imo=o(" (Wav2Vec2-Conformer model)"),dmo=l(),Sh=a("li"),Ine=a("strong"),cmo=o("yolos"),fmo=o(" \u2014 "),lI=a("a"),mmo=o("YolosFeatureExtractor"),gmo=o(" (YOLOS model)"),hmo=l(),F(Rh.$$.fragment),pmo=l(),F(Ph.$$.fragment),umo=l(),Bh=a("div"),F(zA.$$.fragment),_mo=l(),qne=a("p"),bmo=o("Register a new feature extractor for this class."),nNe=l(),Ei=a("h2"),Ih=a("a"),Nne=a("span"),F(WA.$$.fragment),vmo=l(),jne=a("span"),Fmo=o("AutoProcessor"),sNe=l(),yo=a("div"),F(QA.$$.fragment),Tmo=l(),HA=a("p"),Mmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),iI=a("a"),Emo=o("AutoProcessor.from_pretrained()"),Cmo=o(" class method."),wmo=l(),UA=a("p"),Amo=o("This class cannot be instantiated directly using "),Dne=a("code"),ymo=o("__init__()"),Lmo=o(" (throws an error)."),xmo=l(),Ue=a("div"),F(JA.$$.fragment),$mo=l(),Gne=a("p"),kmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Smo=l(),Ci=a("p"),Rmo=o("The processor class to instantiate is selected based on the "),One=a("code"),Pmo=o("model_type"),Bmo=o(` property of the config object (either
passed as an argument or loaded from `),Vne=a("code"),Imo=o("pretrained_model_name_or_path"),qmo=o(" if possible):"),Nmo=l(),he=a("ul"),qh=a("li"),Xne=a("strong"),jmo=o("clip"),Dmo=o(" \u2014 "),dI=a("a"),Gmo=o("CLIPProcessor"),Omo=o(" (CLIP model)"),Vmo=l(),Nh=a("li"),zne=a("strong"),Xmo=o("flava"),zmo=o(" \u2014 "),Wne=a("code"),Wmo=o("FLAVAProcessor"),Qmo=o(" (Flava model)"),Hmo=l(),jh=a("li"),Qne=a("strong"),Umo=o("layoutlmv2"),Jmo=o(" \u2014 "),cI=a("a"),Ymo=o("LayoutLMv2Processor"),Kmo=o(" (LayoutLMv2 model)"),Zmo=l(),Dh=a("li"),Hne=a("strong"),ego=o("layoutlmv3"),ogo=o(" \u2014 "),fI=a("a"),rgo=o("LayoutLMv3Processor"),tgo=o(" (LayoutLMv3 model)"),ago=l(),Gh=a("li"),Une=a("strong"),ngo=o("layoutxlm"),sgo=o(" \u2014 "),mI=a("a"),lgo=o("LayoutXLMProcessor"),igo=o(" (LayoutXLM model)"),dgo=l(),Oh=a("li"),Jne=a("strong"),cgo=o("sew"),fgo=o(" \u2014 "),gI=a("a"),mgo=o("Wav2Vec2Processor"),ggo=o(" (SEW model)"),hgo=l(),Vh=a("li"),Yne=a("strong"),pgo=o("sew-d"),ugo=o(" \u2014 "),hI=a("a"),_go=o("Wav2Vec2Processor"),bgo=o(" (SEW-D model)"),vgo=l(),Xh=a("li"),Kne=a("strong"),Fgo=o("speech_to_text"),Tgo=o(" \u2014 "),pI=a("a"),Mgo=o("Speech2TextProcessor"),Ego=o(" (Speech2Text model)"),Cgo=l(),zh=a("li"),Zne=a("strong"),wgo=o("speech_to_text_2"),Ago=o(" \u2014 "),uI=a("a"),ygo=o("Speech2Text2Processor"),Lgo=o(" (Speech2Text2 model)"),xgo=l(),Wh=a("li"),ese=a("strong"),$go=o("trocr"),kgo=o(" \u2014 "),_I=a("a"),Sgo=o("TrOCRProcessor"),Rgo=o(" (TrOCR model)"),Pgo=l(),Qh=a("li"),ose=a("strong"),Bgo=o("unispeech"),Igo=o(" \u2014 "),bI=a("a"),qgo=o("Wav2Vec2Processor"),Ngo=o(" (UniSpeech model)"),jgo=l(),Hh=a("li"),rse=a("strong"),Dgo=o("unispeech-sat"),Ggo=o(" \u2014 "),vI=a("a"),Ogo=o("Wav2Vec2Processor"),Vgo=o(" (UniSpeechSat model)"),Xgo=l(),Uh=a("li"),tse=a("strong"),zgo=o("vilt"),Wgo=o(" \u2014 "),FI=a("a"),Qgo=o("ViltProcessor"),Hgo=o(" (ViLT model)"),Ugo=l(),Jh=a("li"),ase=a("strong"),Jgo=o("vision-text-dual-encoder"),Ygo=o(" \u2014 "),TI=a("a"),Kgo=o("VisionTextDualEncoderProcessor"),Zgo=o(" (VisionTextDualEncoder model)"),eho=l(),Yh=a("li"),nse=a("strong"),oho=o("wav2vec2"),rho=o(" \u2014 "),MI=a("a"),tho=o("Wav2Vec2Processor"),aho=o(" (Wav2Vec2 model)"),nho=l(),Kh=a("li"),sse=a("strong"),sho=o("wav2vec2-conformer"),lho=o(" \u2014 "),EI=a("a"),iho=o("Wav2Vec2Processor"),dho=o(" (Wav2Vec2-Conformer model)"),cho=l(),Zh=a("li"),lse=a("strong"),fho=o("wavlm"),mho=o(" \u2014 "),CI=a("a"),gho=o("Wav2Vec2Processor"),hho=o(" (WavLM model)"),pho=l(),F(ep.$$.fragment),uho=l(),F(op.$$.fragment),_ho=l(),rp=a("div"),F(YA.$$.fragment),bho=l(),ise=a("p"),vho=o("Register a new processor for this class."),lNe=l(),wi=a("h2"),tp=a("a"),dse=a("span"),F(KA.$$.fragment),Fho=l(),cse=a("span"),Tho=o("AutoModel"),iNe=l(),Lo=a("div"),F(ZA.$$.fragment),Mho=l(),Ai=a("p"),Eho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wI=a("a"),Cho=o("from_pretrained()"),who=o(" class method or the "),AI=a("a"),Aho=o("from_config()"),yho=o(` class
method.`),Lho=l(),e6=a("p"),xho=o("This class cannot be instantiated directly using "),fse=a("code"),$ho=o("__init__()"),kho=o(" (throws an error)."),Sho=l(),tt=a("div"),F(o6.$$.fragment),Rho=l(),mse=a("p"),Pho=o("Instantiates one of the base model classes of the library from a configuration."),Bho=l(),yi=a("p"),Iho=o(`Note:
Loading a model from its configuration file does `),gse=a("strong"),qho=o("not"),Nho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=a("a"),jho=o("from_pretrained()"),Dho=o(" to load the model weights."),Gho=l(),F(ap.$$.fragment),Oho=l(),Je=a("div"),F(r6.$$.fragment),Vho=l(),hse=a("p"),Xho=o("Instantiate one of the base model classes of the library from a pretrained model."),zho=l(),La=a("p"),Who=o("The model class to instantiate is selected based on the "),pse=a("code"),Qho=o("model_type"),Hho=o(` property of the config object (either
passed as an argument or loaded from `),use=a("code"),Uho=o("pretrained_model_name_or_path"),Jho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_se=a("code"),Yho=o("pretrained_model_name_or_path"),Kho=o(":"),Zho=l(),x=a("ul"),np=a("li"),bse=a("strong"),epo=o("albert"),opo=o(" \u2014 "),LI=a("a"),rpo=o("AlbertModel"),tpo=o(" (ALBERT model)"),apo=l(),sp=a("li"),vse=a("strong"),npo=o("bart"),spo=o(" \u2014 "),xI=a("a"),lpo=o("BartModel"),ipo=o(" (BART model)"),dpo=l(),lp=a("li"),Fse=a("strong"),cpo=o("beit"),fpo=o(" \u2014 "),$I=a("a"),mpo=o("BeitModel"),gpo=o(" (BEiT model)"),hpo=l(),ip=a("li"),Tse=a("strong"),ppo=o("bert"),upo=o(" \u2014 "),kI=a("a"),_po=o("BertModel"),bpo=o(" (BERT model)"),vpo=l(),dp=a("li"),Mse=a("strong"),Fpo=o("bert-generation"),Tpo=o(" \u2014 "),SI=a("a"),Mpo=o("BertGenerationEncoder"),Epo=o(" (Bert Generation model)"),Cpo=l(),cp=a("li"),Ese=a("strong"),wpo=o("big_bird"),Apo=o(" \u2014 "),RI=a("a"),ypo=o("BigBirdModel"),Lpo=o(" (BigBird model)"),xpo=l(),fp=a("li"),Cse=a("strong"),$po=o("bigbird_pegasus"),kpo=o(" \u2014 "),PI=a("a"),Spo=o("BigBirdPegasusModel"),Rpo=o(" (BigBirdPegasus model)"),Ppo=l(),mp=a("li"),wse=a("strong"),Bpo=o("blenderbot"),Ipo=o(" \u2014 "),BI=a("a"),qpo=o("BlenderbotModel"),Npo=o(" (Blenderbot model)"),jpo=l(),gp=a("li"),Ase=a("strong"),Dpo=o("blenderbot-small"),Gpo=o(" \u2014 "),II=a("a"),Opo=o("BlenderbotSmallModel"),Vpo=o(" (BlenderbotSmall model)"),Xpo=l(),hp=a("li"),yse=a("strong"),zpo=o("camembert"),Wpo=o(" \u2014 "),qI=a("a"),Qpo=o("CamembertModel"),Hpo=o(" (CamemBERT model)"),Upo=l(),pp=a("li"),Lse=a("strong"),Jpo=o("canine"),Ypo=o(" \u2014 "),NI=a("a"),Kpo=o("CanineModel"),Zpo=o(" (Canine model)"),euo=l(),up=a("li"),xse=a("strong"),ouo=o("clip"),ruo=o(" \u2014 "),jI=a("a"),tuo=o("CLIPModel"),auo=o(" (CLIP model)"),nuo=l(),_p=a("li"),$se=a("strong"),suo=o("convbert"),luo=o(" \u2014 "),DI=a("a"),iuo=o("ConvBertModel"),duo=o(" (ConvBERT model)"),cuo=l(),bp=a("li"),kse=a("strong"),fuo=o("convnext"),muo=o(" \u2014 "),GI=a("a"),guo=o("ConvNextModel"),huo=o(" (ConvNext model)"),puo=l(),vp=a("li"),Sse=a("strong"),uuo=o("ctrl"),_uo=o(" \u2014 "),OI=a("a"),buo=o("CTRLModel"),vuo=o(" (CTRL model)"),Fuo=l(),Fp=a("li"),Rse=a("strong"),Tuo=o("cvt"),Muo=o(" \u2014 "),VI=a("a"),Euo=o("CvtModel"),Cuo=o(" (CvT model)"),wuo=l(),Tp=a("li"),Pse=a("strong"),Auo=o("data2vec-audio"),yuo=o(" \u2014 "),XI=a("a"),Luo=o("Data2VecAudioModel"),xuo=o(" (Data2VecAudio model)"),$uo=l(),Mp=a("li"),Bse=a("strong"),kuo=o("data2vec-text"),Suo=o(" \u2014 "),zI=a("a"),Ruo=o("Data2VecTextModel"),Puo=o(" (Data2VecText model)"),Buo=l(),Ep=a("li"),Ise=a("strong"),Iuo=o("data2vec-vision"),quo=o(" \u2014 "),WI=a("a"),Nuo=o("Data2VecVisionModel"),juo=o(" (Data2VecVision model)"),Duo=l(),Cp=a("li"),qse=a("strong"),Guo=o("deberta"),Ouo=o(" \u2014 "),QI=a("a"),Vuo=o("DebertaModel"),Xuo=o(" (DeBERTa model)"),zuo=l(),wp=a("li"),Nse=a("strong"),Wuo=o("deberta-v2"),Quo=o(" \u2014 "),HI=a("a"),Huo=o("DebertaV2Model"),Uuo=o(" (DeBERTa-v2 model)"),Juo=l(),Ap=a("li"),jse=a("strong"),Yuo=o("decision_transformer"),Kuo=o(" \u2014 "),UI=a("a"),Zuo=o("DecisionTransformerModel"),e_o=o(" (Decision Transformer model)"),o_o=l(),yp=a("li"),Dse=a("strong"),r_o=o("deit"),t_o=o(" \u2014 "),JI=a("a"),a_o=o("DeiTModel"),n_o=o(" (DeiT model)"),s_o=l(),Lp=a("li"),Gse=a("strong"),l_o=o("detr"),i_o=o(" \u2014 "),YI=a("a"),d_o=o("DetrModel"),c_o=o(" (DETR model)"),f_o=l(),xp=a("li"),Ose=a("strong"),m_o=o("distilbert"),g_o=o(" \u2014 "),KI=a("a"),h_o=o("DistilBertModel"),p_o=o(" (DistilBERT model)"),u_o=l(),$p=a("li"),Vse=a("strong"),__o=o("dpr"),b_o=o(" \u2014 "),ZI=a("a"),v_o=o("DPRQuestionEncoder"),F_o=o(" (DPR model)"),T_o=l(),kp=a("li"),Xse=a("strong"),M_o=o("dpt"),E_o=o(" \u2014 "),eq=a("a"),C_o=o("DPTModel"),w_o=o(" (DPT model)"),A_o=l(),Sp=a("li"),zse=a("strong"),y_o=o("electra"),L_o=o(" \u2014 "),oq=a("a"),x_o=o("ElectraModel"),$_o=o(" (ELECTRA model)"),k_o=l(),Rp=a("li"),Wse=a("strong"),S_o=o("flaubert"),R_o=o(" \u2014 "),rq=a("a"),P_o=o("FlaubertModel"),B_o=o(" (FlauBERT model)"),I_o=l(),Pp=a("li"),Qse=a("strong"),q_o=o("flava"),N_o=o(" \u2014 "),tq=a("a"),j_o=o("FlavaModel"),D_o=o(" (Flava model)"),G_o=l(),Bp=a("li"),Hse=a("strong"),O_o=o("fnet"),V_o=o(" \u2014 "),aq=a("a"),X_o=o("FNetModel"),z_o=o(" (FNet model)"),W_o=l(),Ip=a("li"),Use=a("strong"),Q_o=o("fsmt"),H_o=o(" \u2014 "),nq=a("a"),U_o=o("FSMTModel"),J_o=o(" (FairSeq Machine-Translation model)"),Y_o=l(),Ps=a("li"),Jse=a("strong"),K_o=o("funnel"),Z_o=o(" \u2014 "),sq=a("a"),e1o=o("FunnelModel"),o1o=o(" or "),lq=a("a"),r1o=o("FunnelBaseModel"),t1o=o(" (Funnel Transformer model)"),a1o=l(),qp=a("li"),Yse=a("strong"),n1o=o("glpn"),s1o=o(" \u2014 "),iq=a("a"),l1o=o("GLPNModel"),i1o=o(" (GLPN model)"),d1o=l(),Np=a("li"),Kse=a("strong"),c1o=o("gpt2"),f1o=o(" \u2014 "),dq=a("a"),m1o=o("GPT2Model"),g1o=o(" (OpenAI GPT-2 model)"),h1o=l(),jp=a("li"),Zse=a("strong"),p1o=o("gpt_neo"),u1o=o(" \u2014 "),cq=a("a"),_1o=o("GPTNeoModel"),b1o=o(" (GPT Neo model)"),v1o=l(),Dp=a("li"),ele=a("strong"),F1o=o("gptj"),T1o=o(" \u2014 "),fq=a("a"),M1o=o("GPTJModel"),E1o=o(" (GPT-J model)"),C1o=l(),Gp=a("li"),ole=a("strong"),w1o=o("hubert"),A1o=o(" \u2014 "),mq=a("a"),y1o=o("HubertModel"),L1o=o(" (Hubert model)"),x1o=l(),Op=a("li"),rle=a("strong"),$1o=o("ibert"),k1o=o(" \u2014 "),gq=a("a"),S1o=o("IBertModel"),R1o=o(" (I-BERT model)"),P1o=l(),Vp=a("li"),tle=a("strong"),B1o=o("imagegpt"),I1o=o(" \u2014 "),hq=a("a"),q1o=o("ImageGPTModel"),N1o=o(" (ImageGPT model)"),j1o=l(),Xp=a("li"),ale=a("strong"),D1o=o("layoutlm"),G1o=o(" \u2014 "),pq=a("a"),O1o=o("LayoutLMModel"),V1o=o(" (LayoutLM model)"),X1o=l(),zp=a("li"),nle=a("strong"),z1o=o("layoutlmv2"),W1o=o(" \u2014 "),uq=a("a"),Q1o=o("LayoutLMv2Model"),H1o=o(" (LayoutLMv2 model)"),U1o=l(),Wp=a("li"),sle=a("strong"),J1o=o("layoutlmv3"),Y1o=o(" \u2014 "),_q=a("a"),K1o=o("LayoutLMv3Model"),Z1o=o(" (LayoutLMv3 model)"),e8o=l(),Qp=a("li"),lle=a("strong"),o8o=o("led"),r8o=o(" \u2014 "),bq=a("a"),t8o=o("LEDModel"),a8o=o(" (LED model)"),n8o=l(),Hp=a("li"),ile=a("strong"),s8o=o("longformer"),l8o=o(" \u2014 "),vq=a("a"),i8o=o("LongformerModel"),d8o=o(" (Longformer model)"),c8o=l(),Up=a("li"),dle=a("strong"),f8o=o("luke"),m8o=o(" \u2014 "),Fq=a("a"),g8o=o("LukeModel"),h8o=o(" (LUKE model)"),p8o=l(),Jp=a("li"),cle=a("strong"),u8o=o("lxmert"),_8o=o(" \u2014 "),Tq=a("a"),b8o=o("LxmertModel"),v8o=o(" (LXMERT model)"),F8o=l(),Yp=a("li"),fle=a("strong"),T8o=o("m2m_100"),M8o=o(" \u2014 "),Mq=a("a"),E8o=o("M2M100Model"),C8o=o(" (M2M100 model)"),w8o=l(),Kp=a("li"),mle=a("strong"),A8o=o("marian"),y8o=o(" \u2014 "),Eq=a("a"),L8o=o("MarianModel"),x8o=o(" (Marian model)"),$8o=l(),Zp=a("li"),gle=a("strong"),k8o=o("maskformer"),S8o=o(" \u2014 "),Cq=a("a"),R8o=o("MaskFormerModel"),P8o=o(" (MaskFormer model)"),B8o=l(),eu=a("li"),hle=a("strong"),I8o=o("mbart"),q8o=o(" \u2014 "),wq=a("a"),N8o=o("MBartModel"),j8o=o(" (mBART model)"),D8o=l(),ou=a("li"),ple=a("strong"),G8o=o("megatron-bert"),O8o=o(" \u2014 "),Aq=a("a"),V8o=o("MegatronBertModel"),X8o=o(" (MegatronBert model)"),z8o=l(),ru=a("li"),ule=a("strong"),W8o=o("mobilebert"),Q8o=o(" \u2014 "),yq=a("a"),H8o=o("MobileBertModel"),U8o=o(" (MobileBERT model)"),J8o=l(),tu=a("li"),_le=a("strong"),Y8o=o("mpnet"),K8o=o(" \u2014 "),Lq=a("a"),Z8o=o("MPNetModel"),ebo=o(" (MPNet model)"),obo=l(),au=a("li"),ble=a("strong"),rbo=o("mt5"),tbo=o(" \u2014 "),xq=a("a"),abo=o("MT5Model"),nbo=o(" (mT5 model)"),sbo=l(),nu=a("li"),vle=a("strong"),lbo=o("nystromformer"),ibo=o(" \u2014 "),$q=a("a"),dbo=o("NystromformerModel"),cbo=o(" (Nystromformer model)"),fbo=l(),su=a("li"),Fle=a("strong"),mbo=o("openai-gpt"),gbo=o(" \u2014 "),kq=a("a"),hbo=o("OpenAIGPTModel"),pbo=o(" (OpenAI GPT model)"),ubo=l(),lu=a("li"),Tle=a("strong"),_bo=o("opt"),bbo=o(" \u2014 "),Sq=a("a"),vbo=o("OPTModel"),Fbo=o(" (OPT model)"),Tbo=l(),iu=a("li"),Mle=a("strong"),Mbo=o("pegasus"),Ebo=o(" \u2014 "),Rq=a("a"),Cbo=o("PegasusModel"),wbo=o(" (Pegasus model)"),Abo=l(),du=a("li"),Ele=a("strong"),ybo=o("perceiver"),Lbo=o(" \u2014 "),Pq=a("a"),xbo=o("PerceiverModel"),$bo=o(" (Perceiver model)"),kbo=l(),cu=a("li"),Cle=a("strong"),Sbo=o("plbart"),Rbo=o(" \u2014 "),Bq=a("a"),Pbo=o("PLBartModel"),Bbo=o(" (PLBart model)"),Ibo=l(),fu=a("li"),wle=a("strong"),qbo=o("poolformer"),Nbo=o(" \u2014 "),Iq=a("a"),jbo=o("PoolFormerModel"),Dbo=o(" (PoolFormer model)"),Gbo=l(),mu=a("li"),Ale=a("strong"),Obo=o("prophetnet"),Vbo=o(" \u2014 "),qq=a("a"),Xbo=o("ProphetNetModel"),zbo=o(" (ProphetNet model)"),Wbo=l(),gu=a("li"),yle=a("strong"),Qbo=o("qdqbert"),Hbo=o(" \u2014 "),Nq=a("a"),Ubo=o("QDQBertModel"),Jbo=o(" (QDQBert model)"),Ybo=l(),hu=a("li"),Lle=a("strong"),Kbo=o("reformer"),Zbo=o(" \u2014 "),jq=a("a"),e2o=o("ReformerModel"),o2o=o(" (Reformer model)"),r2o=l(),pu=a("li"),xle=a("strong"),t2o=o("regnet"),a2o=o(" \u2014 "),Dq=a("a"),n2o=o("RegNetModel"),s2o=o(" (RegNet model)"),l2o=l(),uu=a("li"),$le=a("strong"),i2o=o("rembert"),d2o=o(" \u2014 "),Gq=a("a"),c2o=o("RemBertModel"),f2o=o(" (RemBERT model)"),m2o=l(),_u=a("li"),kle=a("strong"),g2o=o("resnet"),h2o=o(" \u2014 "),Oq=a("a"),p2o=o("ResNetModel"),u2o=o(" (ResNet model)"),_2o=l(),bu=a("li"),Sle=a("strong"),b2o=o("retribert"),v2o=o(" \u2014 "),Vq=a("a"),F2o=o("RetriBertModel"),T2o=o(" (RetriBERT model)"),M2o=l(),vu=a("li"),Rle=a("strong"),E2o=o("roberta"),C2o=o(" \u2014 "),Xq=a("a"),w2o=o("RobertaModel"),A2o=o(" (RoBERTa model)"),y2o=l(),Fu=a("li"),Ple=a("strong"),L2o=o("roformer"),x2o=o(" \u2014 "),zq=a("a"),$2o=o("RoFormerModel"),k2o=o(" (RoFormer model)"),S2o=l(),Tu=a("li"),Ble=a("strong"),R2o=o("segformer"),P2o=o(" \u2014 "),Wq=a("a"),B2o=o("SegformerModel"),I2o=o(" (SegFormer model)"),q2o=l(),Mu=a("li"),Ile=a("strong"),N2o=o("sew"),j2o=o(" \u2014 "),Qq=a("a"),D2o=o("SEWModel"),G2o=o(" (SEW model)"),O2o=l(),Eu=a("li"),qle=a("strong"),V2o=o("sew-d"),X2o=o(" \u2014 "),Hq=a("a"),z2o=o("SEWDModel"),W2o=o(" (SEW-D model)"),Q2o=l(),Cu=a("li"),Nle=a("strong"),H2o=o("speech_to_text"),U2o=o(" \u2014 "),Uq=a("a"),J2o=o("Speech2TextModel"),Y2o=o(" (Speech2Text model)"),K2o=l(),wu=a("li"),jle=a("strong"),Z2o=o("splinter"),evo=o(" \u2014 "),Jq=a("a"),ovo=o("SplinterModel"),rvo=o(" (Splinter model)"),tvo=l(),Au=a("li"),Dle=a("strong"),avo=o("squeezebert"),nvo=o(" \u2014 "),Yq=a("a"),svo=o("SqueezeBertModel"),lvo=o(" (SqueezeBERT model)"),ivo=l(),yu=a("li"),Gle=a("strong"),dvo=o("swin"),cvo=o(" \u2014 "),Kq=a("a"),fvo=o("SwinModel"),mvo=o(" (Swin model)"),gvo=l(),Lu=a("li"),Ole=a("strong"),hvo=o("t5"),pvo=o(" \u2014 "),Zq=a("a"),uvo=o("T5Model"),_vo=o(" (T5 model)"),bvo=l(),xu=a("li"),Vle=a("strong"),vvo=o("tapas"),Fvo=o(" \u2014 "),eN=a("a"),Tvo=o("TapasModel"),Mvo=o(" (TAPAS model)"),Evo=l(),$u=a("li"),Xle=a("strong"),Cvo=o("trajectory_transformer"),wvo=o(" \u2014 "),oN=a("a"),Avo=o("TrajectoryTransformerModel"),yvo=o(" (Trajectory Transformer model)"),Lvo=l(),ku=a("li"),zle=a("strong"),xvo=o("transfo-xl"),$vo=o(" \u2014 "),rN=a("a"),kvo=o("TransfoXLModel"),Svo=o(" (Transformer-XL model)"),Rvo=l(),Su=a("li"),Wle=a("strong"),Pvo=o("unispeech"),Bvo=o(" \u2014 "),tN=a("a"),Ivo=o("UniSpeechModel"),qvo=o(" (UniSpeech model)"),Nvo=l(),Ru=a("li"),Qle=a("strong"),jvo=o("unispeech-sat"),Dvo=o(" \u2014 "),aN=a("a"),Gvo=o("UniSpeechSatModel"),Ovo=o(" (UniSpeechSat model)"),Vvo=l(),Pu=a("li"),Hle=a("strong"),Xvo=o("van"),zvo=o(" \u2014 "),nN=a("a"),Wvo=o("VanModel"),Qvo=o(" (VAN model)"),Hvo=l(),Bu=a("li"),Ule=a("strong"),Uvo=o("vilt"),Jvo=o(" \u2014 "),sN=a("a"),Yvo=o("ViltModel"),Kvo=o(" (ViLT model)"),Zvo=l(),Iu=a("li"),Jle=a("strong"),e3o=o("vision-text-dual-encoder"),o3o=o(" \u2014 "),lN=a("a"),r3o=o("VisionTextDualEncoderModel"),t3o=o(" (VisionTextDualEncoder model)"),a3o=l(),qu=a("li"),Yle=a("strong"),n3o=o("visual_bert"),s3o=o(" \u2014 "),iN=a("a"),l3o=o("VisualBertModel"),i3o=o(" (VisualBert model)"),d3o=l(),Nu=a("li"),Kle=a("strong"),c3o=o("vit"),f3o=o(" \u2014 "),dN=a("a"),m3o=o("ViTModel"),g3o=o(" (ViT model)"),h3o=l(),ju=a("li"),Zle=a("strong"),p3o=o("vit_mae"),u3o=o(" \u2014 "),cN=a("a"),_3o=o("ViTMAEModel"),b3o=o(" (ViTMAE model)"),v3o=l(),Du=a("li"),eie=a("strong"),F3o=o("wav2vec2"),T3o=o(" \u2014 "),fN=a("a"),M3o=o("Wav2Vec2Model"),E3o=o(" (Wav2Vec2 model)"),C3o=l(),Gu=a("li"),oie=a("strong"),w3o=o("wav2vec2-conformer"),A3o=o(" \u2014 "),mN=a("a"),y3o=o("Wav2Vec2ConformerModel"),L3o=o(" (Wav2Vec2-Conformer model)"),x3o=l(),Ou=a("li"),rie=a("strong"),$3o=o("wavlm"),k3o=o(" \u2014 "),gN=a("a"),S3o=o("WavLMModel"),R3o=o(" (WavLM model)"),P3o=l(),Vu=a("li"),tie=a("strong"),B3o=o("xglm"),I3o=o(" \u2014 "),hN=a("a"),q3o=o("XGLMModel"),N3o=o(" (XGLM model)"),j3o=l(),Xu=a("li"),aie=a("strong"),D3o=o("xlm"),G3o=o(" \u2014 "),pN=a("a"),O3o=o("XLMModel"),V3o=o(" (XLM model)"),X3o=l(),zu=a("li"),nie=a("strong"),z3o=o("xlm-prophetnet"),W3o=o(" \u2014 "),uN=a("a"),Q3o=o("XLMProphetNetModel"),H3o=o(" (XLMProphetNet model)"),U3o=l(),Wu=a("li"),sie=a("strong"),J3o=o("xlm-roberta"),Y3o=o(" \u2014 "),_N=a("a"),K3o=o("XLMRobertaModel"),Z3o=o(" (XLM-RoBERTa model)"),eFo=l(),Qu=a("li"),lie=a("strong"),oFo=o("xlm-roberta-xl"),rFo=o(" \u2014 "),bN=a("a"),tFo=o("XLMRobertaXLModel"),aFo=o(" (XLM-RoBERTa-XL model)"),nFo=l(),Hu=a("li"),iie=a("strong"),sFo=o("xlnet"),lFo=o(" \u2014 "),vN=a("a"),iFo=o("XLNetModel"),dFo=o(" (XLNet model)"),cFo=l(),Uu=a("li"),die=a("strong"),fFo=o("yolos"),mFo=o(" \u2014 "),FN=a("a"),gFo=o("YolosModel"),hFo=o(" (YOLOS model)"),pFo=l(),Ju=a("li"),cie=a("strong"),uFo=o("yoso"),_Fo=o(" \u2014 "),TN=a("a"),bFo=o("YosoModel"),vFo=o(" (YOSO model)"),FFo=l(),Yu=a("p"),TFo=o("The model is set in evaluation mode by default using "),fie=a("code"),MFo=o("model.eval()"),EFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),CFo=o("model.train()"),wFo=l(),F(Ku.$$.fragment),dNe=l(),Li=a("h2"),Zu=a("a"),gie=a("span"),F(t6.$$.fragment),AFo=l(),hie=a("span"),yFo=o("AutoModelForPreTraining"),cNe=l(),xo=a("div"),F(a6.$$.fragment),LFo=l(),xi=a("p"),xFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MN=a("a"),$Fo=o("from_pretrained()"),kFo=o(" class method or the "),EN=a("a"),SFo=o("from_config()"),RFo=o(` class
method.`),PFo=l(),n6=a("p"),BFo=o("This class cannot be instantiated directly using "),pie=a("code"),IFo=o("__init__()"),qFo=o(" (throws an error)."),NFo=l(),at=a("div"),F(s6.$$.fragment),jFo=l(),uie=a("p"),DFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GFo=l(),$i=a("p"),OFo=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),VFo=o("not"),XFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=a("a"),zFo=o("from_pretrained()"),WFo=o(" to load the model weights."),QFo=l(),F(e_.$$.fragment),HFo=l(),Ye=a("div"),F(l6.$$.fragment),UFo=l(),bie=a("p"),JFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YFo=l(),xa=a("p"),KFo=o("The model class to instantiate is selected based on the "),vie=a("code"),ZFo=o("model_type"),eTo=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),oTo=o("pretrained_model_name_or_path"),rTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),tTo=o("pretrained_model_name_or_path"),aTo=o(":"),nTo=l(),G=a("ul"),o_=a("li"),Mie=a("strong"),sTo=o("albert"),lTo=o(" \u2014 "),wN=a("a"),iTo=o("AlbertForPreTraining"),dTo=o(" (ALBERT model)"),cTo=l(),r_=a("li"),Eie=a("strong"),fTo=o("bart"),mTo=o(" \u2014 "),AN=a("a"),gTo=o("BartForConditionalGeneration"),hTo=o(" (BART model)"),pTo=l(),t_=a("li"),Cie=a("strong"),uTo=o("bert"),_To=o(" \u2014 "),yN=a("a"),bTo=o("BertForPreTraining"),vTo=o(" (BERT model)"),FTo=l(),a_=a("li"),wie=a("strong"),TTo=o("big_bird"),MTo=o(" \u2014 "),LN=a("a"),ETo=o("BigBirdForPreTraining"),CTo=o(" (BigBird model)"),wTo=l(),n_=a("li"),Aie=a("strong"),ATo=o("camembert"),yTo=o(" \u2014 "),xN=a("a"),LTo=o("CamembertForMaskedLM"),xTo=o(" (CamemBERT model)"),$To=l(),s_=a("li"),yie=a("strong"),kTo=o("ctrl"),STo=o(" \u2014 "),$N=a("a"),RTo=o("CTRLLMHeadModel"),PTo=o(" (CTRL model)"),BTo=l(),l_=a("li"),Lie=a("strong"),ITo=o("data2vec-text"),qTo=o(" \u2014 "),kN=a("a"),NTo=o("Data2VecTextForMaskedLM"),jTo=o(" (Data2VecText model)"),DTo=l(),i_=a("li"),xie=a("strong"),GTo=o("deberta"),OTo=o(" \u2014 "),SN=a("a"),VTo=o("DebertaForMaskedLM"),XTo=o(" (DeBERTa model)"),zTo=l(),d_=a("li"),$ie=a("strong"),WTo=o("deberta-v2"),QTo=o(" \u2014 "),RN=a("a"),HTo=o("DebertaV2ForMaskedLM"),UTo=o(" (DeBERTa-v2 model)"),JTo=l(),c_=a("li"),kie=a("strong"),YTo=o("distilbert"),KTo=o(" \u2014 "),PN=a("a"),ZTo=o("DistilBertForMaskedLM"),e7o=o(" (DistilBERT model)"),o7o=l(),f_=a("li"),Sie=a("strong"),r7o=o("electra"),t7o=o(" \u2014 "),BN=a("a"),a7o=o("ElectraForPreTraining"),n7o=o(" (ELECTRA model)"),s7o=l(),m_=a("li"),Rie=a("strong"),l7o=o("flaubert"),i7o=o(" \u2014 "),IN=a("a"),d7o=o("FlaubertWithLMHeadModel"),c7o=o(" (FlauBERT model)"),f7o=l(),g_=a("li"),Pie=a("strong"),m7o=o("flava"),g7o=o(" \u2014 "),qN=a("a"),h7o=o("FlavaForPreTraining"),p7o=o(" (Flava model)"),u7o=l(),h_=a("li"),Bie=a("strong"),_7o=o("fnet"),b7o=o(" \u2014 "),NN=a("a"),v7o=o("FNetForPreTraining"),F7o=o(" (FNet model)"),T7o=l(),p_=a("li"),Iie=a("strong"),M7o=o("fsmt"),E7o=o(" \u2014 "),jN=a("a"),C7o=o("FSMTForConditionalGeneration"),w7o=o(" (FairSeq Machine-Translation model)"),A7o=l(),u_=a("li"),qie=a("strong"),y7o=o("funnel"),L7o=o(" \u2014 "),DN=a("a"),x7o=o("FunnelForPreTraining"),$7o=o(" (Funnel Transformer model)"),k7o=l(),__=a("li"),Nie=a("strong"),S7o=o("gpt2"),R7o=o(" \u2014 "),GN=a("a"),P7o=o("GPT2LMHeadModel"),B7o=o(" (OpenAI GPT-2 model)"),I7o=l(),b_=a("li"),jie=a("strong"),q7o=o("ibert"),N7o=o(" \u2014 "),ON=a("a"),j7o=o("IBertForMaskedLM"),D7o=o(" (I-BERT model)"),G7o=l(),v_=a("li"),Die=a("strong"),O7o=o("layoutlm"),V7o=o(" \u2014 "),VN=a("a"),X7o=o("LayoutLMForMaskedLM"),z7o=o(" (LayoutLM model)"),W7o=l(),F_=a("li"),Gie=a("strong"),Q7o=o("longformer"),H7o=o(" \u2014 "),XN=a("a"),U7o=o("LongformerForMaskedLM"),J7o=o(" (Longformer model)"),Y7o=l(),T_=a("li"),Oie=a("strong"),K7o=o("lxmert"),Z7o=o(" \u2014 "),zN=a("a"),eMo=o("LxmertForPreTraining"),oMo=o(" (LXMERT model)"),rMo=l(),M_=a("li"),Vie=a("strong"),tMo=o("megatron-bert"),aMo=o(" \u2014 "),WN=a("a"),nMo=o("MegatronBertForPreTraining"),sMo=o(" (MegatronBert model)"),lMo=l(),E_=a("li"),Xie=a("strong"),iMo=o("mobilebert"),dMo=o(" \u2014 "),QN=a("a"),cMo=o("MobileBertForPreTraining"),fMo=o(" (MobileBERT model)"),mMo=l(),C_=a("li"),zie=a("strong"),gMo=o("mpnet"),hMo=o(" \u2014 "),HN=a("a"),pMo=o("MPNetForMaskedLM"),uMo=o(" (MPNet model)"),_Mo=l(),w_=a("li"),Wie=a("strong"),bMo=o("openai-gpt"),vMo=o(" \u2014 "),UN=a("a"),FMo=o("OpenAIGPTLMHeadModel"),TMo=o(" (OpenAI GPT model)"),MMo=l(),A_=a("li"),Qie=a("strong"),EMo=o("retribert"),CMo=o(" \u2014 "),JN=a("a"),wMo=o("RetriBertModel"),AMo=o(" (RetriBERT model)"),yMo=l(),y_=a("li"),Hie=a("strong"),LMo=o("roberta"),xMo=o(" \u2014 "),YN=a("a"),$Mo=o("RobertaForMaskedLM"),kMo=o(" (RoBERTa model)"),SMo=l(),L_=a("li"),Uie=a("strong"),RMo=o("splinter"),PMo=o(" \u2014 "),KN=a("a"),BMo=o("SplinterForPreTraining"),IMo=o(" (Splinter model)"),qMo=l(),x_=a("li"),Jie=a("strong"),NMo=o("squeezebert"),jMo=o(" \u2014 "),ZN=a("a"),DMo=o("SqueezeBertForMaskedLM"),GMo=o(" (SqueezeBERT model)"),OMo=l(),$_=a("li"),Yie=a("strong"),VMo=o("t5"),XMo=o(" \u2014 "),ej=a("a"),zMo=o("T5ForConditionalGeneration"),WMo=o(" (T5 model)"),QMo=l(),k_=a("li"),Kie=a("strong"),HMo=o("tapas"),UMo=o(" \u2014 "),oj=a("a"),JMo=o("TapasForMaskedLM"),YMo=o(" (TAPAS model)"),KMo=l(),S_=a("li"),Zie=a("strong"),ZMo=o("transfo-xl"),e4o=o(" \u2014 "),rj=a("a"),o4o=o("TransfoXLLMHeadModel"),r4o=o(" (Transformer-XL model)"),t4o=l(),R_=a("li"),ede=a("strong"),a4o=o("unispeech"),n4o=o(" \u2014 "),tj=a("a"),s4o=o("UniSpeechForPreTraining"),l4o=o(" (UniSpeech model)"),i4o=l(),P_=a("li"),ode=a("strong"),d4o=o("unispeech-sat"),c4o=o(" \u2014 "),aj=a("a"),f4o=o("UniSpeechSatForPreTraining"),m4o=o(" (UniSpeechSat model)"),g4o=l(),B_=a("li"),rde=a("strong"),h4o=o("visual_bert"),p4o=o(" \u2014 "),nj=a("a"),u4o=o("VisualBertForPreTraining"),_4o=o(" (VisualBert model)"),b4o=l(),I_=a("li"),tde=a("strong"),v4o=o("vit_mae"),F4o=o(" \u2014 "),sj=a("a"),T4o=o("ViTMAEForPreTraining"),M4o=o(" (ViTMAE model)"),E4o=l(),q_=a("li"),ade=a("strong"),C4o=o("wav2vec2"),w4o=o(" \u2014 "),lj=a("a"),A4o=o("Wav2Vec2ForPreTraining"),y4o=o(" (Wav2Vec2 model)"),L4o=l(),N_=a("li"),nde=a("strong"),x4o=o("wav2vec2-conformer"),$4o=o(" \u2014 "),ij=a("a"),k4o=o("Wav2Vec2ConformerForPreTraining"),S4o=o(" (Wav2Vec2-Conformer model)"),R4o=l(),j_=a("li"),sde=a("strong"),P4o=o("xlm"),B4o=o(" \u2014 "),dj=a("a"),I4o=o("XLMWithLMHeadModel"),q4o=o(" (XLM model)"),N4o=l(),D_=a("li"),lde=a("strong"),j4o=o("xlm-roberta"),D4o=o(" \u2014 "),cj=a("a"),G4o=o("XLMRobertaForMaskedLM"),O4o=o(" (XLM-RoBERTa model)"),V4o=l(),G_=a("li"),ide=a("strong"),X4o=o("xlm-roberta-xl"),z4o=o(" \u2014 "),fj=a("a"),W4o=o("XLMRobertaXLForMaskedLM"),Q4o=o(" (XLM-RoBERTa-XL model)"),H4o=l(),O_=a("li"),dde=a("strong"),U4o=o("xlnet"),J4o=o(" \u2014 "),mj=a("a"),Y4o=o("XLNetLMHeadModel"),K4o=o(" (XLNet model)"),Z4o=l(),V_=a("p"),eEo=o("The model is set in evaluation mode by default using "),cde=a("code"),oEo=o("model.eval()"),rEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),tEo=o("model.train()"),aEo=l(),F(X_.$$.fragment),fNe=l(),ki=a("h2"),z_=a("a"),mde=a("span"),F(i6.$$.fragment),nEo=l(),gde=a("span"),sEo=o("AutoModelForCausalLM"),mNe=l(),$o=a("div"),F(d6.$$.fragment),lEo=l(),Si=a("p"),iEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gj=a("a"),dEo=o("from_pretrained()"),cEo=o(" class method or the "),hj=a("a"),fEo=o("from_config()"),mEo=o(` class
method.`),gEo=l(),c6=a("p"),hEo=o("This class cannot be instantiated directly using "),hde=a("code"),pEo=o("__init__()"),uEo=o(" (throws an error)."),_Eo=l(),nt=a("div"),F(f6.$$.fragment),bEo=l(),pde=a("p"),vEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FEo=l(),Ri=a("p"),TEo=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),MEo=o("not"),EEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=a("a"),CEo=o("from_pretrained()"),wEo=o(" to load the model weights."),AEo=l(),F(W_.$$.fragment),yEo=l(),Ke=a("div"),F(m6.$$.fragment),LEo=l(),_de=a("p"),xEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Eo=l(),$a=a("p"),kEo=o("The model class to instantiate is selected based on the "),bde=a("code"),SEo=o("model_type"),REo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),PEo=o("pretrained_model_name_or_path"),BEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),IEo=o("pretrained_model_name_or_path"),qEo=o(":"),NEo=l(),z=a("ul"),Q_=a("li"),Tde=a("strong"),jEo=o("bart"),DEo=o(" \u2014 "),uj=a("a"),GEo=o("BartForCausalLM"),OEo=o(" (BART model)"),VEo=l(),H_=a("li"),Mde=a("strong"),XEo=o("bert"),zEo=o(" \u2014 "),_j=a("a"),WEo=o("BertLMHeadModel"),QEo=o(" (BERT model)"),HEo=l(),U_=a("li"),Ede=a("strong"),UEo=o("bert-generation"),JEo=o(" \u2014 "),bj=a("a"),YEo=o("BertGenerationDecoder"),KEo=o(" (Bert Generation model)"),ZEo=l(),J_=a("li"),Cde=a("strong"),eCo=o("big_bird"),oCo=o(" \u2014 "),vj=a("a"),rCo=o("BigBirdForCausalLM"),tCo=o(" (BigBird model)"),aCo=l(),Y_=a("li"),wde=a("strong"),nCo=o("bigbird_pegasus"),sCo=o(" \u2014 "),Fj=a("a"),lCo=o("BigBirdPegasusForCausalLM"),iCo=o(" (BigBirdPegasus model)"),dCo=l(),K_=a("li"),Ade=a("strong"),cCo=o("blenderbot"),fCo=o(" \u2014 "),Tj=a("a"),mCo=o("BlenderbotForCausalLM"),gCo=o(" (Blenderbot model)"),hCo=l(),Z_=a("li"),yde=a("strong"),pCo=o("blenderbot-small"),uCo=o(" \u2014 "),Mj=a("a"),_Co=o("BlenderbotSmallForCausalLM"),bCo=o(" (BlenderbotSmall model)"),vCo=l(),e1=a("li"),Lde=a("strong"),FCo=o("camembert"),TCo=o(" \u2014 "),Ej=a("a"),MCo=o("CamembertForCausalLM"),ECo=o(" (CamemBERT model)"),CCo=l(),o1=a("li"),xde=a("strong"),wCo=o("ctrl"),ACo=o(" \u2014 "),Cj=a("a"),yCo=o("CTRLLMHeadModel"),LCo=o(" (CTRL model)"),xCo=l(),r1=a("li"),$de=a("strong"),$Co=o("data2vec-text"),kCo=o(" \u2014 "),wj=a("a"),SCo=o("Data2VecTextForCausalLM"),RCo=o(" (Data2VecText model)"),PCo=l(),t1=a("li"),kde=a("strong"),BCo=o("electra"),ICo=o(" \u2014 "),Aj=a("a"),qCo=o("ElectraForCausalLM"),NCo=o(" (ELECTRA model)"),jCo=l(),a1=a("li"),Sde=a("strong"),DCo=o("gpt2"),GCo=o(" \u2014 "),yj=a("a"),OCo=o("GPT2LMHeadModel"),VCo=o(" (OpenAI GPT-2 model)"),XCo=l(),n1=a("li"),Rde=a("strong"),zCo=o("gpt_neo"),WCo=o(" \u2014 "),Lj=a("a"),QCo=o("GPTNeoForCausalLM"),HCo=o(" (GPT Neo model)"),UCo=l(),s1=a("li"),Pde=a("strong"),JCo=o("gptj"),YCo=o(" \u2014 "),xj=a("a"),KCo=o("GPTJForCausalLM"),ZCo=o(" (GPT-J model)"),e5o=l(),l1=a("li"),Bde=a("strong"),o5o=o("marian"),r5o=o(" \u2014 "),$j=a("a"),t5o=o("MarianForCausalLM"),a5o=o(" (Marian model)"),n5o=l(),i1=a("li"),Ide=a("strong"),s5o=o("mbart"),l5o=o(" \u2014 "),kj=a("a"),i5o=o("MBartForCausalLM"),d5o=o(" (mBART model)"),c5o=l(),d1=a("li"),qde=a("strong"),f5o=o("megatron-bert"),m5o=o(" \u2014 "),Sj=a("a"),g5o=o("MegatronBertForCausalLM"),h5o=o(" (MegatronBert model)"),p5o=l(),c1=a("li"),Nde=a("strong"),u5o=o("openai-gpt"),_5o=o(" \u2014 "),Rj=a("a"),b5o=o("OpenAIGPTLMHeadModel"),v5o=o(" (OpenAI GPT model)"),F5o=l(),f1=a("li"),jde=a("strong"),T5o=o("opt"),M5o=o(" \u2014 "),Pj=a("a"),E5o=o("OPTForCausalLM"),C5o=o(" (OPT model)"),w5o=l(),m1=a("li"),Dde=a("strong"),A5o=o("pegasus"),y5o=o(" \u2014 "),Bj=a("a"),L5o=o("PegasusForCausalLM"),x5o=o(" (Pegasus model)"),$5o=l(),g1=a("li"),Gde=a("strong"),k5o=o("plbart"),S5o=o(" \u2014 "),Ij=a("a"),R5o=o("PLBartForCausalLM"),P5o=o(" (PLBart model)"),B5o=l(),h1=a("li"),Ode=a("strong"),I5o=o("prophetnet"),q5o=o(" \u2014 "),qj=a("a"),N5o=o("ProphetNetForCausalLM"),j5o=o(" (ProphetNet model)"),D5o=l(),p1=a("li"),Vde=a("strong"),G5o=o("qdqbert"),O5o=o(" \u2014 "),Nj=a("a"),V5o=o("QDQBertLMHeadModel"),X5o=o(" (QDQBert model)"),z5o=l(),u1=a("li"),Xde=a("strong"),W5o=o("reformer"),Q5o=o(" \u2014 "),jj=a("a"),H5o=o("ReformerModelWithLMHead"),U5o=o(" (Reformer model)"),J5o=l(),_1=a("li"),zde=a("strong"),Y5o=o("rembert"),K5o=o(" \u2014 "),Dj=a("a"),Z5o=o("RemBertForCausalLM"),ewo=o(" (RemBERT model)"),owo=l(),b1=a("li"),Wde=a("strong"),rwo=o("roberta"),two=o(" \u2014 "),Gj=a("a"),awo=o("RobertaForCausalLM"),nwo=o(" (RoBERTa model)"),swo=l(),v1=a("li"),Qde=a("strong"),lwo=o("roformer"),iwo=o(" \u2014 "),Oj=a("a"),dwo=o("RoFormerForCausalLM"),cwo=o(" (RoFormer model)"),fwo=l(),F1=a("li"),Hde=a("strong"),mwo=o("speech_to_text_2"),gwo=o(" \u2014 "),Vj=a("a"),hwo=o("Speech2Text2ForCausalLM"),pwo=o(" (Speech2Text2 model)"),uwo=l(),T1=a("li"),Ude=a("strong"),_wo=o("transfo-xl"),bwo=o(" \u2014 "),Xj=a("a"),vwo=o("TransfoXLLMHeadModel"),Fwo=o(" (Transformer-XL model)"),Two=l(),M1=a("li"),Jde=a("strong"),Mwo=o("trocr"),Ewo=o(" \u2014 "),zj=a("a"),Cwo=o("TrOCRForCausalLM"),wwo=o(" (TrOCR model)"),Awo=l(),E1=a("li"),Yde=a("strong"),ywo=o("xglm"),Lwo=o(" \u2014 "),Wj=a("a"),xwo=o("XGLMForCausalLM"),$wo=o(" (XGLM model)"),kwo=l(),C1=a("li"),Kde=a("strong"),Swo=o("xlm"),Rwo=o(" \u2014 "),Qj=a("a"),Pwo=o("XLMWithLMHeadModel"),Bwo=o(" (XLM model)"),Iwo=l(),w1=a("li"),Zde=a("strong"),qwo=o("xlm-prophetnet"),Nwo=o(" \u2014 "),Hj=a("a"),jwo=o("XLMProphetNetForCausalLM"),Dwo=o(" (XLMProphetNet model)"),Gwo=l(),A1=a("li"),ece=a("strong"),Owo=o("xlm-roberta"),Vwo=o(" \u2014 "),Uj=a("a"),Xwo=o("XLMRobertaForCausalLM"),zwo=o(" (XLM-RoBERTa model)"),Wwo=l(),y1=a("li"),oce=a("strong"),Qwo=o("xlm-roberta-xl"),Hwo=o(" \u2014 "),Jj=a("a"),Uwo=o("XLMRobertaXLForCausalLM"),Jwo=o(" (XLM-RoBERTa-XL model)"),Ywo=l(),L1=a("li"),rce=a("strong"),Kwo=o("xlnet"),Zwo=o(" \u2014 "),Yj=a("a"),e0o=o("XLNetLMHeadModel"),o0o=o(" (XLNet model)"),r0o=l(),x1=a("p"),t0o=o("The model is set in evaluation mode by default using "),tce=a("code"),a0o=o("model.eval()"),n0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),s0o=o("model.train()"),l0o=l(),F($1.$$.fragment),gNe=l(),Pi=a("h2"),k1=a("a"),nce=a("span"),F(g6.$$.fragment),i0o=l(),sce=a("span"),d0o=o("AutoModelForMaskedLM"),hNe=l(),ko=a("div"),F(h6.$$.fragment),c0o=l(),Bi=a("p"),f0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kj=a("a"),m0o=o("from_pretrained()"),g0o=o(" class method or the "),Zj=a("a"),h0o=o("from_config()"),p0o=o(` class
method.`),u0o=l(),p6=a("p"),_0o=o("This class cannot be instantiated directly using "),lce=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),F0o=l(),st=a("div"),F(u6.$$.fragment),T0o=l(),ice=a("p"),M0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E0o=l(),Ii=a("p"),C0o=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),w0o=o("not"),A0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=a("a"),y0o=o("from_pretrained()"),L0o=o(" to load the model weights."),x0o=l(),F(S1.$$.fragment),$0o=l(),Ze=a("div"),F(_6.$$.fragment),k0o=l(),cce=a("p"),S0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R0o=l(),ka=a("p"),P0o=o("The model class to instantiate is selected based on the "),fce=a("code"),B0o=o("model_type"),I0o=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),q0o=o("pretrained_model_name_or_path"),N0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),j0o=o("pretrained_model_name_or_path"),D0o=o(":"),G0o=l(),W=a("ul"),R1=a("li"),hce=a("strong"),O0o=o("albert"),V0o=o(" \u2014 "),oD=a("a"),X0o=o("AlbertForMaskedLM"),z0o=o(" (ALBERT model)"),W0o=l(),P1=a("li"),pce=a("strong"),Q0o=o("bart"),H0o=o(" \u2014 "),rD=a("a"),U0o=o("BartForConditionalGeneration"),J0o=o(" (BART model)"),Y0o=l(),B1=a("li"),uce=a("strong"),K0o=o("bert"),Z0o=o(" \u2014 "),tD=a("a"),eAo=o("BertForMaskedLM"),oAo=o(" (BERT model)"),rAo=l(),I1=a("li"),_ce=a("strong"),tAo=o("big_bird"),aAo=o(" \u2014 "),aD=a("a"),nAo=o("BigBirdForMaskedLM"),sAo=o(" (BigBird model)"),lAo=l(),q1=a("li"),bce=a("strong"),iAo=o("camembert"),dAo=o(" \u2014 "),nD=a("a"),cAo=o("CamembertForMaskedLM"),fAo=o(" (CamemBERT model)"),mAo=l(),N1=a("li"),vce=a("strong"),gAo=o("convbert"),hAo=o(" \u2014 "),sD=a("a"),pAo=o("ConvBertForMaskedLM"),uAo=o(" (ConvBERT model)"),_Ao=l(),j1=a("li"),Fce=a("strong"),bAo=o("data2vec-text"),vAo=o(" \u2014 "),lD=a("a"),FAo=o("Data2VecTextForMaskedLM"),TAo=o(" (Data2VecText model)"),MAo=l(),D1=a("li"),Tce=a("strong"),EAo=o("deberta"),CAo=o(" \u2014 "),iD=a("a"),wAo=o("DebertaForMaskedLM"),AAo=o(" (DeBERTa model)"),yAo=l(),G1=a("li"),Mce=a("strong"),LAo=o("deberta-v2"),xAo=o(" \u2014 "),dD=a("a"),$Ao=o("DebertaV2ForMaskedLM"),kAo=o(" (DeBERTa-v2 model)"),SAo=l(),O1=a("li"),Ece=a("strong"),RAo=o("distilbert"),PAo=o(" \u2014 "),cD=a("a"),BAo=o("DistilBertForMaskedLM"),IAo=o(" (DistilBERT model)"),qAo=l(),V1=a("li"),Cce=a("strong"),NAo=o("electra"),jAo=o(" \u2014 "),fD=a("a"),DAo=o("ElectraForMaskedLM"),GAo=o(" (ELECTRA model)"),OAo=l(),X1=a("li"),wce=a("strong"),VAo=o("flaubert"),XAo=o(" \u2014 "),mD=a("a"),zAo=o("FlaubertWithLMHeadModel"),WAo=o(" (FlauBERT model)"),QAo=l(),z1=a("li"),Ace=a("strong"),HAo=o("fnet"),UAo=o(" \u2014 "),gD=a("a"),JAo=o("FNetForMaskedLM"),YAo=o(" (FNet model)"),KAo=l(),W1=a("li"),yce=a("strong"),ZAo=o("funnel"),e6o=o(" \u2014 "),hD=a("a"),o6o=o("FunnelForMaskedLM"),r6o=o(" (Funnel Transformer model)"),t6o=l(),Q1=a("li"),Lce=a("strong"),a6o=o("ibert"),n6o=o(" \u2014 "),pD=a("a"),s6o=o("IBertForMaskedLM"),l6o=o(" (I-BERT model)"),i6o=l(),H1=a("li"),xce=a("strong"),d6o=o("layoutlm"),c6o=o(" \u2014 "),uD=a("a"),f6o=o("LayoutLMForMaskedLM"),m6o=o(" (LayoutLM model)"),g6o=l(),U1=a("li"),$ce=a("strong"),h6o=o("longformer"),p6o=o(" \u2014 "),_D=a("a"),u6o=o("LongformerForMaskedLM"),_6o=o(" (Longformer model)"),b6o=l(),J1=a("li"),kce=a("strong"),v6o=o("mbart"),F6o=o(" \u2014 "),bD=a("a"),T6o=o("MBartForConditionalGeneration"),M6o=o(" (mBART model)"),E6o=l(),Y1=a("li"),Sce=a("strong"),C6o=o("megatron-bert"),w6o=o(" \u2014 "),vD=a("a"),A6o=o("MegatronBertForMaskedLM"),y6o=o(" (MegatronBert model)"),L6o=l(),K1=a("li"),Rce=a("strong"),x6o=o("mobilebert"),$6o=o(" \u2014 "),FD=a("a"),k6o=o("MobileBertForMaskedLM"),S6o=o(" (MobileBERT model)"),R6o=l(),Z1=a("li"),Pce=a("strong"),P6o=o("mpnet"),B6o=o(" \u2014 "),TD=a("a"),I6o=o("MPNetForMaskedLM"),q6o=o(" (MPNet model)"),N6o=l(),e8=a("li"),Bce=a("strong"),j6o=o("nystromformer"),D6o=o(" \u2014 "),MD=a("a"),G6o=o("NystromformerForMaskedLM"),O6o=o(" (Nystromformer model)"),V6o=l(),o8=a("li"),Ice=a("strong"),X6o=o("perceiver"),z6o=o(" \u2014 "),ED=a("a"),W6o=o("PerceiverForMaskedLM"),Q6o=o(" (Perceiver model)"),H6o=l(),r8=a("li"),qce=a("strong"),U6o=o("qdqbert"),J6o=o(" \u2014 "),CD=a("a"),Y6o=o("QDQBertForMaskedLM"),K6o=o(" (QDQBert model)"),Z6o=l(),t8=a("li"),Nce=a("strong"),eyo=o("reformer"),oyo=o(" \u2014 "),wD=a("a"),ryo=o("ReformerForMaskedLM"),tyo=o(" (Reformer model)"),ayo=l(),a8=a("li"),jce=a("strong"),nyo=o("rembert"),syo=o(" \u2014 "),AD=a("a"),lyo=o("RemBertForMaskedLM"),iyo=o(" (RemBERT model)"),dyo=l(),n8=a("li"),Dce=a("strong"),cyo=o("roberta"),fyo=o(" \u2014 "),yD=a("a"),myo=o("RobertaForMaskedLM"),gyo=o(" (RoBERTa model)"),hyo=l(),s8=a("li"),Gce=a("strong"),pyo=o("roformer"),uyo=o(" \u2014 "),LD=a("a"),_yo=o("RoFormerForMaskedLM"),byo=o(" (RoFormer model)"),vyo=l(),l8=a("li"),Oce=a("strong"),Fyo=o("squeezebert"),Tyo=o(" \u2014 "),xD=a("a"),Myo=o("SqueezeBertForMaskedLM"),Eyo=o(" (SqueezeBERT model)"),Cyo=l(),i8=a("li"),Vce=a("strong"),wyo=o("tapas"),Ayo=o(" \u2014 "),$D=a("a"),yyo=o("TapasForMaskedLM"),Lyo=o(" (TAPAS model)"),xyo=l(),d8=a("li"),Xce=a("strong"),$yo=o("wav2vec2"),kyo=o(" \u2014 "),zce=a("code"),Syo=o("Wav2Vec2ForMaskedLM"),Ryo=o(" (Wav2Vec2 model)"),Pyo=l(),c8=a("li"),Wce=a("strong"),Byo=o("xlm"),Iyo=o(" \u2014 "),kD=a("a"),qyo=o("XLMWithLMHeadModel"),Nyo=o(" (XLM model)"),jyo=l(),f8=a("li"),Qce=a("strong"),Dyo=o("xlm-roberta"),Gyo=o(" \u2014 "),SD=a("a"),Oyo=o("XLMRobertaForMaskedLM"),Vyo=o(" (XLM-RoBERTa model)"),Xyo=l(),m8=a("li"),Hce=a("strong"),zyo=o("xlm-roberta-xl"),Wyo=o(" \u2014 "),RD=a("a"),Qyo=o("XLMRobertaXLForMaskedLM"),Hyo=o(" (XLM-RoBERTa-XL model)"),Uyo=l(),g8=a("li"),Uce=a("strong"),Jyo=o("yoso"),Yyo=o(" \u2014 "),PD=a("a"),Kyo=o("YosoForMaskedLM"),Zyo=o(" (YOSO model)"),eLo=l(),h8=a("p"),oLo=o("The model is set in evaluation mode by default using "),Jce=a("code"),rLo=o("model.eval()"),tLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),aLo=o("model.train()"),nLo=l(),F(p8.$$.fragment),pNe=l(),qi=a("h2"),u8=a("a"),Kce=a("span"),F(b6.$$.fragment),sLo=l(),Zce=a("span"),lLo=o("AutoModelForSeq2SeqLM"),uNe=l(),So=a("div"),F(v6.$$.fragment),iLo=l(),Ni=a("p"),dLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BD=a("a"),cLo=o("from_pretrained()"),fLo=o(" class method or the "),ID=a("a"),mLo=o("from_config()"),gLo=o(` class
method.`),hLo=l(),F6=a("p"),pLo=o("This class cannot be instantiated directly using "),efe=a("code"),uLo=o("__init__()"),_Lo=o(" (throws an error)."),bLo=l(),lt=a("div"),F(T6.$$.fragment),vLo=l(),ofe=a("p"),FLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TLo=l(),ji=a("p"),MLo=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),ELo=o("not"),CLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),wLo=o("from_pretrained()"),ALo=o(" to load the model weights."),yLo=l(),F(_8.$$.fragment),LLo=l(),eo=a("div"),F(M6.$$.fragment),xLo=l(),tfe=a("p"),$Lo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kLo=l(),Sa=a("p"),SLo=o("The model class to instantiate is selected based on the "),afe=a("code"),RLo=o("model_type"),PLo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),BLo=o("pretrained_model_name_or_path"),ILo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),qLo=o("pretrained_model_name_or_path"),NLo=o(":"),jLo=l(),ue=a("ul"),b8=a("li"),lfe=a("strong"),DLo=o("bart"),GLo=o(" \u2014 "),ND=a("a"),OLo=o("BartForConditionalGeneration"),VLo=o(" (BART model)"),XLo=l(),v8=a("li"),ife=a("strong"),zLo=o("bigbird_pegasus"),WLo=o(" \u2014 "),jD=a("a"),QLo=o("BigBirdPegasusForConditionalGeneration"),HLo=o(" (BigBirdPegasus model)"),ULo=l(),F8=a("li"),dfe=a("strong"),JLo=o("blenderbot"),YLo=o(" \u2014 "),DD=a("a"),KLo=o("BlenderbotForConditionalGeneration"),ZLo=o(" (Blenderbot model)"),e9o=l(),T8=a("li"),cfe=a("strong"),o9o=o("blenderbot-small"),r9o=o(" \u2014 "),GD=a("a"),t9o=o("BlenderbotSmallForConditionalGeneration"),a9o=o(" (BlenderbotSmall model)"),n9o=l(),M8=a("li"),ffe=a("strong"),s9o=o("encoder-decoder"),l9o=o(" \u2014 "),OD=a("a"),i9o=o("EncoderDecoderModel"),d9o=o(" (Encoder decoder model)"),c9o=l(),E8=a("li"),mfe=a("strong"),f9o=o("fsmt"),m9o=o(" \u2014 "),VD=a("a"),g9o=o("FSMTForConditionalGeneration"),h9o=o(" (FairSeq Machine-Translation model)"),p9o=l(),C8=a("li"),gfe=a("strong"),u9o=o("led"),_9o=o(" \u2014 "),XD=a("a"),b9o=o("LEDForConditionalGeneration"),v9o=o(" (LED model)"),F9o=l(),w8=a("li"),hfe=a("strong"),T9o=o("m2m_100"),M9o=o(" \u2014 "),zD=a("a"),E9o=o("M2M100ForConditionalGeneration"),C9o=o(" (M2M100 model)"),w9o=l(),A8=a("li"),pfe=a("strong"),A9o=o("marian"),y9o=o(" \u2014 "),WD=a("a"),L9o=o("MarianMTModel"),x9o=o(" (Marian model)"),$9o=l(),y8=a("li"),ufe=a("strong"),k9o=o("mbart"),S9o=o(" \u2014 "),QD=a("a"),R9o=o("MBartForConditionalGeneration"),P9o=o(" (mBART model)"),B9o=l(),L8=a("li"),_fe=a("strong"),I9o=o("mt5"),q9o=o(" \u2014 "),HD=a("a"),N9o=o("MT5ForConditionalGeneration"),j9o=o(" (mT5 model)"),D9o=l(),x8=a("li"),bfe=a("strong"),G9o=o("pegasus"),O9o=o(" \u2014 "),UD=a("a"),V9o=o("PegasusForConditionalGeneration"),X9o=o(" (Pegasus model)"),z9o=l(),$8=a("li"),vfe=a("strong"),W9o=o("plbart"),Q9o=o(" \u2014 "),JD=a("a"),H9o=o("PLBartForConditionalGeneration"),U9o=o(" (PLBart model)"),J9o=l(),k8=a("li"),Ffe=a("strong"),Y9o=o("prophetnet"),K9o=o(" \u2014 "),YD=a("a"),Z9o=o("ProphetNetForConditionalGeneration"),exo=o(" (ProphetNet model)"),oxo=l(),S8=a("li"),Tfe=a("strong"),rxo=o("t5"),txo=o(" \u2014 "),KD=a("a"),axo=o("T5ForConditionalGeneration"),nxo=o(" (T5 model)"),sxo=l(),R8=a("li"),Mfe=a("strong"),lxo=o("xlm-prophetnet"),ixo=o(" \u2014 "),ZD=a("a"),dxo=o("XLMProphetNetForConditionalGeneration"),cxo=o(" (XLMProphetNet model)"),fxo=l(),P8=a("p"),mxo=o("The model is set in evaluation mode by default using "),Efe=a("code"),gxo=o("model.eval()"),hxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),pxo=o("model.train()"),uxo=l(),F(B8.$$.fragment),_Ne=l(),Di=a("h2"),I8=a("a"),wfe=a("span"),F(E6.$$.fragment),_xo=l(),Afe=a("span"),bxo=o("AutoModelForSequenceClassification"),bNe=l(),Ro=a("div"),F(C6.$$.fragment),vxo=l(),Gi=a("p"),Fxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eG=a("a"),Txo=o("from_pretrained()"),Mxo=o(" class method or the "),oG=a("a"),Exo=o("from_config()"),Cxo=o(` class
method.`),wxo=l(),w6=a("p"),Axo=o("This class cannot be instantiated directly using "),yfe=a("code"),yxo=o("__init__()"),Lxo=o(" (throws an error)."),xxo=l(),it=a("div"),F(A6.$$.fragment),$xo=l(),Lfe=a("p"),kxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sxo=l(),Oi=a("p"),Rxo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),Pxo=o("not"),Bxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),Ixo=o("from_pretrained()"),qxo=o(" to load the model weights."),Nxo=l(),F(q8.$$.fragment),jxo=l(),oo=a("div"),F(y6.$$.fragment),Dxo=l(),$fe=a("p"),Gxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oxo=l(),Ra=a("p"),Vxo=o("The model class to instantiate is selected based on the "),kfe=a("code"),Xxo=o("model_type"),zxo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),Wxo=o("pretrained_model_name_or_path"),Qxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),Hxo=o("pretrained_model_name_or_path"),Uxo=o(":"),Jxo=l(),q=a("ul"),N8=a("li"),Pfe=a("strong"),Yxo=o("albert"),Kxo=o(" \u2014 "),tG=a("a"),Zxo=o("AlbertForSequenceClassification"),e$o=o(" (ALBERT model)"),o$o=l(),j8=a("li"),Bfe=a("strong"),r$o=o("bart"),t$o=o(" \u2014 "),aG=a("a"),a$o=o("BartForSequenceClassification"),n$o=o(" (BART model)"),s$o=l(),D8=a("li"),Ife=a("strong"),l$o=o("bert"),i$o=o(" \u2014 "),nG=a("a"),d$o=o("BertForSequenceClassification"),c$o=o(" (BERT model)"),f$o=l(),G8=a("li"),qfe=a("strong"),m$o=o("big_bird"),g$o=o(" \u2014 "),sG=a("a"),h$o=o("BigBirdForSequenceClassification"),p$o=o(" (BigBird model)"),u$o=l(),O8=a("li"),Nfe=a("strong"),_$o=o("bigbird_pegasus"),b$o=o(" \u2014 "),lG=a("a"),v$o=o("BigBirdPegasusForSequenceClassification"),F$o=o(" (BigBirdPegasus model)"),T$o=l(),V8=a("li"),jfe=a("strong"),M$o=o("camembert"),E$o=o(" \u2014 "),iG=a("a"),C$o=o("CamembertForSequenceClassification"),w$o=o(" (CamemBERT model)"),A$o=l(),X8=a("li"),Dfe=a("strong"),y$o=o("canine"),L$o=o(" \u2014 "),dG=a("a"),x$o=o("CanineForSequenceClassification"),$$o=o(" (Canine model)"),k$o=l(),z8=a("li"),Gfe=a("strong"),S$o=o("convbert"),R$o=o(" \u2014 "),cG=a("a"),P$o=o("ConvBertForSequenceClassification"),B$o=o(" (ConvBERT model)"),I$o=l(),W8=a("li"),Ofe=a("strong"),q$o=o("ctrl"),N$o=o(" \u2014 "),fG=a("a"),j$o=o("CTRLForSequenceClassification"),D$o=o(" (CTRL model)"),G$o=l(),Q8=a("li"),Vfe=a("strong"),O$o=o("data2vec-text"),V$o=o(" \u2014 "),mG=a("a"),X$o=o("Data2VecTextForSequenceClassification"),z$o=o(" (Data2VecText model)"),W$o=l(),H8=a("li"),Xfe=a("strong"),Q$o=o("deberta"),H$o=o(" \u2014 "),gG=a("a"),U$o=o("DebertaForSequenceClassification"),J$o=o(" (DeBERTa model)"),Y$o=l(),U8=a("li"),zfe=a("strong"),K$o=o("deberta-v2"),Z$o=o(" \u2014 "),hG=a("a"),eko=o("DebertaV2ForSequenceClassification"),oko=o(" (DeBERTa-v2 model)"),rko=l(),J8=a("li"),Wfe=a("strong"),tko=o("distilbert"),ako=o(" \u2014 "),pG=a("a"),nko=o("DistilBertForSequenceClassification"),sko=o(" (DistilBERT model)"),lko=l(),Y8=a("li"),Qfe=a("strong"),iko=o("electra"),dko=o(" \u2014 "),uG=a("a"),cko=o("ElectraForSequenceClassification"),fko=o(" (ELECTRA model)"),mko=l(),K8=a("li"),Hfe=a("strong"),gko=o("flaubert"),hko=o(" \u2014 "),_G=a("a"),pko=o("FlaubertForSequenceClassification"),uko=o(" (FlauBERT model)"),_ko=l(),Z8=a("li"),Ufe=a("strong"),bko=o("fnet"),vko=o(" \u2014 "),bG=a("a"),Fko=o("FNetForSequenceClassification"),Tko=o(" (FNet model)"),Mko=l(),eb=a("li"),Jfe=a("strong"),Eko=o("funnel"),Cko=o(" \u2014 "),vG=a("a"),wko=o("FunnelForSequenceClassification"),Ako=o(" (Funnel Transformer model)"),yko=l(),ob=a("li"),Yfe=a("strong"),Lko=o("gpt2"),xko=o(" \u2014 "),FG=a("a"),$ko=o("GPT2ForSequenceClassification"),kko=o(" (OpenAI GPT-2 model)"),Sko=l(),rb=a("li"),Kfe=a("strong"),Rko=o("gpt_neo"),Pko=o(" \u2014 "),TG=a("a"),Bko=o("GPTNeoForSequenceClassification"),Iko=o(" (GPT Neo model)"),qko=l(),tb=a("li"),Zfe=a("strong"),Nko=o("gptj"),jko=o(" \u2014 "),MG=a("a"),Dko=o("GPTJForSequenceClassification"),Gko=o(" (GPT-J model)"),Oko=l(),ab=a("li"),eme=a("strong"),Vko=o("ibert"),Xko=o(" \u2014 "),EG=a("a"),zko=o("IBertForSequenceClassification"),Wko=o(" (I-BERT model)"),Qko=l(),nb=a("li"),ome=a("strong"),Hko=o("layoutlm"),Uko=o(" \u2014 "),CG=a("a"),Jko=o("LayoutLMForSequenceClassification"),Yko=o(" (LayoutLM model)"),Kko=l(),sb=a("li"),rme=a("strong"),Zko=o("layoutlmv2"),eSo=o(" \u2014 "),wG=a("a"),oSo=o("LayoutLMv2ForSequenceClassification"),rSo=o(" (LayoutLMv2 model)"),tSo=l(),lb=a("li"),tme=a("strong"),aSo=o("layoutlmv3"),nSo=o(" \u2014 "),AG=a("a"),sSo=o("LayoutLMv3ForSequenceClassification"),lSo=o(" (LayoutLMv3 model)"),iSo=l(),ib=a("li"),ame=a("strong"),dSo=o("led"),cSo=o(" \u2014 "),yG=a("a"),fSo=o("LEDForSequenceClassification"),mSo=o(" (LED model)"),gSo=l(),db=a("li"),nme=a("strong"),hSo=o("longformer"),pSo=o(" \u2014 "),LG=a("a"),uSo=o("LongformerForSequenceClassification"),_So=o(" (Longformer model)"),bSo=l(),cb=a("li"),sme=a("strong"),vSo=o("mbart"),FSo=o(" \u2014 "),xG=a("a"),TSo=o("MBartForSequenceClassification"),MSo=o(" (mBART model)"),ESo=l(),fb=a("li"),lme=a("strong"),CSo=o("megatron-bert"),wSo=o(" \u2014 "),$G=a("a"),ASo=o("MegatronBertForSequenceClassification"),ySo=o(" (MegatronBert model)"),LSo=l(),mb=a("li"),ime=a("strong"),xSo=o("mobilebert"),$So=o(" \u2014 "),kG=a("a"),kSo=o("MobileBertForSequenceClassification"),SSo=o(" (MobileBERT model)"),RSo=l(),gb=a("li"),dme=a("strong"),PSo=o("mpnet"),BSo=o(" \u2014 "),SG=a("a"),ISo=o("MPNetForSequenceClassification"),qSo=o(" (MPNet model)"),NSo=l(),hb=a("li"),cme=a("strong"),jSo=o("nystromformer"),DSo=o(" \u2014 "),RG=a("a"),GSo=o("NystromformerForSequenceClassification"),OSo=o(" (Nystromformer model)"),VSo=l(),pb=a("li"),fme=a("strong"),XSo=o("openai-gpt"),zSo=o(" \u2014 "),PG=a("a"),WSo=o("OpenAIGPTForSequenceClassification"),QSo=o(" (OpenAI GPT model)"),HSo=l(),ub=a("li"),mme=a("strong"),USo=o("perceiver"),JSo=o(" \u2014 "),BG=a("a"),YSo=o("PerceiverForSequenceClassification"),KSo=o(" (Perceiver model)"),ZSo=l(),_b=a("li"),gme=a("strong"),eRo=o("plbart"),oRo=o(" \u2014 "),IG=a("a"),rRo=o("PLBartForSequenceClassification"),tRo=o(" (PLBart model)"),aRo=l(),bb=a("li"),hme=a("strong"),nRo=o("qdqbert"),sRo=o(" \u2014 "),qG=a("a"),lRo=o("QDQBertForSequenceClassification"),iRo=o(" (QDQBert model)"),dRo=l(),vb=a("li"),pme=a("strong"),cRo=o("reformer"),fRo=o(" \u2014 "),NG=a("a"),mRo=o("ReformerForSequenceClassification"),gRo=o(" (Reformer model)"),hRo=l(),Fb=a("li"),ume=a("strong"),pRo=o("rembert"),uRo=o(" \u2014 "),jG=a("a"),_Ro=o("RemBertForSequenceClassification"),bRo=o(" (RemBERT model)"),vRo=l(),Tb=a("li"),_me=a("strong"),FRo=o("roberta"),TRo=o(" \u2014 "),DG=a("a"),MRo=o("RobertaForSequenceClassification"),ERo=o(" (RoBERTa model)"),CRo=l(),Mb=a("li"),bme=a("strong"),wRo=o("roformer"),ARo=o(" \u2014 "),GG=a("a"),yRo=o("RoFormerForSequenceClassification"),LRo=o(" (RoFormer model)"),xRo=l(),Eb=a("li"),vme=a("strong"),$Ro=o("squeezebert"),kRo=o(" \u2014 "),OG=a("a"),SRo=o("SqueezeBertForSequenceClassification"),RRo=o(" (SqueezeBERT model)"),PRo=l(),Cb=a("li"),Fme=a("strong"),BRo=o("tapas"),IRo=o(" \u2014 "),VG=a("a"),qRo=o("TapasForSequenceClassification"),NRo=o(" (TAPAS model)"),jRo=l(),wb=a("li"),Tme=a("strong"),DRo=o("transfo-xl"),GRo=o(" \u2014 "),XG=a("a"),ORo=o("TransfoXLForSequenceClassification"),VRo=o(" (Transformer-XL model)"),XRo=l(),Ab=a("li"),Mme=a("strong"),zRo=o("xlm"),WRo=o(" \u2014 "),zG=a("a"),QRo=o("XLMForSequenceClassification"),HRo=o(" (XLM model)"),URo=l(),yb=a("li"),Eme=a("strong"),JRo=o("xlm-roberta"),YRo=o(" \u2014 "),WG=a("a"),KRo=o("XLMRobertaForSequenceClassification"),ZRo=o(" (XLM-RoBERTa model)"),ePo=l(),Lb=a("li"),Cme=a("strong"),oPo=o("xlm-roberta-xl"),rPo=o(" \u2014 "),QG=a("a"),tPo=o("XLMRobertaXLForSequenceClassification"),aPo=o(" (XLM-RoBERTa-XL model)"),nPo=l(),xb=a("li"),wme=a("strong"),sPo=o("xlnet"),lPo=o(" \u2014 "),HG=a("a"),iPo=o("XLNetForSequenceClassification"),dPo=o(" (XLNet model)"),cPo=l(),$b=a("li"),Ame=a("strong"),fPo=o("yoso"),mPo=o(" \u2014 "),UG=a("a"),gPo=o("YosoForSequenceClassification"),hPo=o(" (YOSO model)"),pPo=l(),kb=a("p"),uPo=o("The model is set in evaluation mode by default using "),yme=a("code"),_Po=o("model.eval()"),bPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),vPo=o("model.train()"),FPo=l(),F(Sb.$$.fragment),vNe=l(),Vi=a("h2"),Rb=a("a"),xme=a("span"),F(L6.$$.fragment),TPo=l(),$me=a("span"),MPo=o("AutoModelForMultipleChoice"),FNe=l(),Po=a("div"),F(x6.$$.fragment),EPo=l(),Xi=a("p"),CPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JG=a("a"),wPo=o("from_pretrained()"),APo=o(" class method or the "),YG=a("a"),yPo=o("from_config()"),LPo=o(` class
method.`),xPo=l(),$6=a("p"),$Po=o("This class cannot be instantiated directly using "),kme=a("code"),kPo=o("__init__()"),SPo=o(" (throws an error)."),RPo=l(),dt=a("div"),F(k6.$$.fragment),PPo=l(),Sme=a("p"),BPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IPo=l(),zi=a("p"),qPo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),NPo=o("not"),jPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),DPo=o("from_pretrained()"),GPo=o(" to load the model weights."),OPo=l(),F(Pb.$$.fragment),VPo=l(),ro=a("div"),F(S6.$$.fragment),XPo=l(),Pme=a("p"),zPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WPo=l(),Pa=a("p"),QPo=o("The model class to instantiate is selected based on the "),Bme=a("code"),HPo=o("model_type"),UPo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),JPo=o("pretrained_model_name_or_path"),YPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),KPo=o("pretrained_model_name_or_path"),ZPo=o(":"),eBo=l(),Y=a("ul"),Bb=a("li"),Nme=a("strong"),oBo=o("albert"),rBo=o(" \u2014 "),ZG=a("a"),tBo=o("AlbertForMultipleChoice"),aBo=o(" (ALBERT model)"),nBo=l(),Ib=a("li"),jme=a("strong"),sBo=o("bert"),lBo=o(" \u2014 "),eO=a("a"),iBo=o("BertForMultipleChoice"),dBo=o(" (BERT model)"),cBo=l(),qb=a("li"),Dme=a("strong"),fBo=o("big_bird"),mBo=o(" \u2014 "),oO=a("a"),gBo=o("BigBirdForMultipleChoice"),hBo=o(" (BigBird model)"),pBo=l(),Nb=a("li"),Gme=a("strong"),uBo=o("camembert"),_Bo=o(" \u2014 "),rO=a("a"),bBo=o("CamembertForMultipleChoice"),vBo=o(" (CamemBERT model)"),FBo=l(),jb=a("li"),Ome=a("strong"),TBo=o("canine"),MBo=o(" \u2014 "),tO=a("a"),EBo=o("CanineForMultipleChoice"),CBo=o(" (Canine model)"),wBo=l(),Db=a("li"),Vme=a("strong"),ABo=o("convbert"),yBo=o(" \u2014 "),aO=a("a"),LBo=o("ConvBertForMultipleChoice"),xBo=o(" (ConvBERT model)"),$Bo=l(),Gb=a("li"),Xme=a("strong"),kBo=o("data2vec-text"),SBo=o(" \u2014 "),nO=a("a"),RBo=o("Data2VecTextForMultipleChoice"),PBo=o(" (Data2VecText model)"),BBo=l(),Ob=a("li"),zme=a("strong"),IBo=o("deberta-v2"),qBo=o(" \u2014 "),sO=a("a"),NBo=o("DebertaV2ForMultipleChoice"),jBo=o(" (DeBERTa-v2 model)"),DBo=l(),Vb=a("li"),Wme=a("strong"),GBo=o("distilbert"),OBo=o(" \u2014 "),lO=a("a"),VBo=o("DistilBertForMultipleChoice"),XBo=o(" (DistilBERT model)"),zBo=l(),Xb=a("li"),Qme=a("strong"),WBo=o("electra"),QBo=o(" \u2014 "),iO=a("a"),HBo=o("ElectraForMultipleChoice"),UBo=o(" (ELECTRA model)"),JBo=l(),zb=a("li"),Hme=a("strong"),YBo=o("flaubert"),KBo=o(" \u2014 "),dO=a("a"),ZBo=o("FlaubertForMultipleChoice"),eIo=o(" (FlauBERT model)"),oIo=l(),Wb=a("li"),Ume=a("strong"),rIo=o("fnet"),tIo=o(" \u2014 "),cO=a("a"),aIo=o("FNetForMultipleChoice"),nIo=o(" (FNet model)"),sIo=l(),Qb=a("li"),Jme=a("strong"),lIo=o("funnel"),iIo=o(" \u2014 "),fO=a("a"),dIo=o("FunnelForMultipleChoice"),cIo=o(" (Funnel Transformer model)"),fIo=l(),Hb=a("li"),Yme=a("strong"),mIo=o("ibert"),gIo=o(" \u2014 "),mO=a("a"),hIo=o("IBertForMultipleChoice"),pIo=o(" (I-BERT model)"),uIo=l(),Ub=a("li"),Kme=a("strong"),_Io=o("longformer"),bIo=o(" \u2014 "),gO=a("a"),vIo=o("LongformerForMultipleChoice"),FIo=o(" (Longformer model)"),TIo=l(),Jb=a("li"),Zme=a("strong"),MIo=o("megatron-bert"),EIo=o(" \u2014 "),hO=a("a"),CIo=o("MegatronBertForMultipleChoice"),wIo=o(" (MegatronBert model)"),AIo=l(),Yb=a("li"),ege=a("strong"),yIo=o("mobilebert"),LIo=o(" \u2014 "),pO=a("a"),xIo=o("MobileBertForMultipleChoice"),$Io=o(" (MobileBERT model)"),kIo=l(),Kb=a("li"),oge=a("strong"),SIo=o("mpnet"),RIo=o(" \u2014 "),uO=a("a"),PIo=o("MPNetForMultipleChoice"),BIo=o(" (MPNet model)"),IIo=l(),Zb=a("li"),rge=a("strong"),qIo=o("nystromformer"),NIo=o(" \u2014 "),_O=a("a"),jIo=o("NystromformerForMultipleChoice"),DIo=o(" (Nystromformer model)"),GIo=l(),e2=a("li"),tge=a("strong"),OIo=o("qdqbert"),VIo=o(" \u2014 "),bO=a("a"),XIo=o("QDQBertForMultipleChoice"),zIo=o(" (QDQBert model)"),WIo=l(),o2=a("li"),age=a("strong"),QIo=o("rembert"),HIo=o(" \u2014 "),vO=a("a"),UIo=o("RemBertForMultipleChoice"),JIo=o(" (RemBERT model)"),YIo=l(),r2=a("li"),nge=a("strong"),KIo=o("roberta"),ZIo=o(" \u2014 "),FO=a("a"),eqo=o("RobertaForMultipleChoice"),oqo=o(" (RoBERTa model)"),rqo=l(),t2=a("li"),sge=a("strong"),tqo=o("roformer"),aqo=o(" \u2014 "),TO=a("a"),nqo=o("RoFormerForMultipleChoice"),sqo=o(" (RoFormer model)"),lqo=l(),a2=a("li"),lge=a("strong"),iqo=o("squeezebert"),dqo=o(" \u2014 "),MO=a("a"),cqo=o("SqueezeBertForMultipleChoice"),fqo=o(" (SqueezeBERT model)"),mqo=l(),n2=a("li"),ige=a("strong"),gqo=o("xlm"),hqo=o(" \u2014 "),EO=a("a"),pqo=o("XLMForMultipleChoice"),uqo=o(" (XLM model)"),_qo=l(),s2=a("li"),dge=a("strong"),bqo=o("xlm-roberta"),vqo=o(" \u2014 "),CO=a("a"),Fqo=o("XLMRobertaForMultipleChoice"),Tqo=o(" (XLM-RoBERTa model)"),Mqo=l(),l2=a("li"),cge=a("strong"),Eqo=o("xlm-roberta-xl"),Cqo=o(" \u2014 "),wO=a("a"),wqo=o("XLMRobertaXLForMultipleChoice"),Aqo=o(" (XLM-RoBERTa-XL model)"),yqo=l(),i2=a("li"),fge=a("strong"),Lqo=o("xlnet"),xqo=o(" \u2014 "),AO=a("a"),$qo=o("XLNetForMultipleChoice"),kqo=o(" (XLNet model)"),Sqo=l(),d2=a("li"),mge=a("strong"),Rqo=o("yoso"),Pqo=o(" \u2014 "),yO=a("a"),Bqo=o("YosoForMultipleChoice"),Iqo=o(" (YOSO model)"),qqo=l(),c2=a("p"),Nqo=o("The model is set in evaluation mode by default using "),gge=a("code"),jqo=o("model.eval()"),Dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),Gqo=o("model.train()"),Oqo=l(),F(f2.$$.fragment),TNe=l(),Wi=a("h2"),m2=a("a"),pge=a("span"),F(R6.$$.fragment),Vqo=l(),uge=a("span"),Xqo=o("AutoModelForNextSentencePrediction"),MNe=l(),Bo=a("div"),F(P6.$$.fragment),zqo=l(),Qi=a("p"),Wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LO=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" class method or the "),xO=a("a"),Uqo=o("from_config()"),Jqo=o(` class
method.`),Yqo=l(),B6=a("p"),Kqo=o("This class cannot be instantiated directly using "),_ge=a("code"),Zqo=o("__init__()"),eNo=o(" (throws an error)."),oNo=l(),ct=a("div"),F(I6.$$.fragment),rNo=l(),bge=a("p"),tNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aNo=l(),Hi=a("p"),nNo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),sNo=o("not"),lNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),iNo=o("from_pretrained()"),dNo=o(" to load the model weights."),cNo=l(),F(g2.$$.fragment),fNo=l(),to=a("div"),F(q6.$$.fragment),mNo=l(),Fge=a("p"),gNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hNo=l(),Ba=a("p"),pNo=o("The model class to instantiate is selected based on the "),Tge=a("code"),uNo=o("model_type"),_No=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),FNo=o("pretrained_model_name_or_path"),TNo=o(":"),MNo=l(),Yr=a("ul"),h2=a("li"),Cge=a("strong"),ENo=o("bert"),CNo=o(" \u2014 "),kO=a("a"),wNo=o("BertForNextSentencePrediction"),ANo=o(" (BERT model)"),yNo=l(),p2=a("li"),wge=a("strong"),LNo=o("fnet"),xNo=o(" \u2014 "),SO=a("a"),$No=o("FNetForNextSentencePrediction"),kNo=o(" (FNet model)"),SNo=l(),u2=a("li"),Age=a("strong"),RNo=o("megatron-bert"),PNo=o(" \u2014 "),RO=a("a"),BNo=o("MegatronBertForNextSentencePrediction"),INo=o(" (MegatronBert model)"),qNo=l(),_2=a("li"),yge=a("strong"),NNo=o("mobilebert"),jNo=o(" \u2014 "),PO=a("a"),DNo=o("MobileBertForNextSentencePrediction"),GNo=o(" (MobileBERT model)"),ONo=l(),b2=a("li"),Lge=a("strong"),VNo=o("qdqbert"),XNo=o(" \u2014 "),BO=a("a"),zNo=o("QDQBertForNextSentencePrediction"),WNo=o(" (QDQBert model)"),QNo=l(),v2=a("p"),HNo=o("The model is set in evaluation mode by default using "),xge=a("code"),UNo=o("model.eval()"),JNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=a("code"),YNo=o("model.train()"),KNo=l(),F(F2.$$.fragment),ENe=l(),Ui=a("h2"),T2=a("a"),kge=a("span"),F(N6.$$.fragment),ZNo=l(),Sge=a("span"),ejo=o("AutoModelForTokenClassification"),CNe=l(),Io=a("div"),F(j6.$$.fragment),ojo=l(),Ji=a("p"),rjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IO=a("a"),tjo=o("from_pretrained()"),ajo=o(" class method or the "),qO=a("a"),njo=o("from_config()"),sjo=o(` class
method.`),ljo=l(),D6=a("p"),ijo=o("This class cannot be instantiated directly using "),Rge=a("code"),djo=o("__init__()"),cjo=o(" (throws an error)."),fjo=l(),ft=a("div"),F(G6.$$.fragment),mjo=l(),Pge=a("p"),gjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hjo=l(),Yi=a("p"),pjo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),ujo=o("not"),_jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),bjo=o("from_pretrained()"),vjo=o(" to load the model weights."),Fjo=l(),F(M2.$$.fragment),Tjo=l(),ao=a("div"),F(O6.$$.fragment),Mjo=l(),Ige=a("p"),Ejo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cjo=l(),Ia=a("p"),wjo=o("The model class to instantiate is selected based on the "),qge=a("code"),Ajo=o("model_type"),yjo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),Ljo=o("pretrained_model_name_or_path"),xjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),$jo=o("pretrained_model_name_or_path"),kjo=o(":"),Sjo=l(),H=a("ul"),E2=a("li"),Dge=a("strong"),Rjo=o("albert"),Pjo=o(" \u2014 "),jO=a("a"),Bjo=o("AlbertForTokenClassification"),Ijo=o(" (ALBERT model)"),qjo=l(),C2=a("li"),Gge=a("strong"),Njo=o("bert"),jjo=o(" \u2014 "),DO=a("a"),Djo=o("BertForTokenClassification"),Gjo=o(" (BERT model)"),Ojo=l(),w2=a("li"),Oge=a("strong"),Vjo=o("big_bird"),Xjo=o(" \u2014 "),GO=a("a"),zjo=o("BigBirdForTokenClassification"),Wjo=o(" (BigBird model)"),Qjo=l(),A2=a("li"),Vge=a("strong"),Hjo=o("camembert"),Ujo=o(" \u2014 "),OO=a("a"),Jjo=o("CamembertForTokenClassification"),Yjo=o(" (CamemBERT model)"),Kjo=l(),y2=a("li"),Xge=a("strong"),Zjo=o("canine"),eDo=o(" \u2014 "),VO=a("a"),oDo=o("CanineForTokenClassification"),rDo=o(" (Canine model)"),tDo=l(),L2=a("li"),zge=a("strong"),aDo=o("convbert"),nDo=o(" \u2014 "),XO=a("a"),sDo=o("ConvBertForTokenClassification"),lDo=o(" (ConvBERT model)"),iDo=l(),x2=a("li"),Wge=a("strong"),dDo=o("data2vec-text"),cDo=o(" \u2014 "),zO=a("a"),fDo=o("Data2VecTextForTokenClassification"),mDo=o(" (Data2VecText model)"),gDo=l(),$2=a("li"),Qge=a("strong"),hDo=o("deberta"),pDo=o(" \u2014 "),WO=a("a"),uDo=o("DebertaForTokenClassification"),_Do=o(" (DeBERTa model)"),bDo=l(),k2=a("li"),Hge=a("strong"),vDo=o("deberta-v2"),FDo=o(" \u2014 "),QO=a("a"),TDo=o("DebertaV2ForTokenClassification"),MDo=o(" (DeBERTa-v2 model)"),EDo=l(),S2=a("li"),Uge=a("strong"),CDo=o("distilbert"),wDo=o(" \u2014 "),HO=a("a"),ADo=o("DistilBertForTokenClassification"),yDo=o(" (DistilBERT model)"),LDo=l(),R2=a("li"),Jge=a("strong"),xDo=o("electra"),$Do=o(" \u2014 "),UO=a("a"),kDo=o("ElectraForTokenClassification"),SDo=o(" (ELECTRA model)"),RDo=l(),P2=a("li"),Yge=a("strong"),PDo=o("flaubert"),BDo=o(" \u2014 "),JO=a("a"),IDo=o("FlaubertForTokenClassification"),qDo=o(" (FlauBERT model)"),NDo=l(),B2=a("li"),Kge=a("strong"),jDo=o("fnet"),DDo=o(" \u2014 "),YO=a("a"),GDo=o("FNetForTokenClassification"),ODo=o(" (FNet model)"),VDo=l(),I2=a("li"),Zge=a("strong"),XDo=o("funnel"),zDo=o(" \u2014 "),KO=a("a"),WDo=o("FunnelForTokenClassification"),QDo=o(" (Funnel Transformer model)"),HDo=l(),q2=a("li"),ehe=a("strong"),UDo=o("gpt2"),JDo=o(" \u2014 "),ZO=a("a"),YDo=o("GPT2ForTokenClassification"),KDo=o(" (OpenAI GPT-2 model)"),ZDo=l(),N2=a("li"),ohe=a("strong"),eGo=o("ibert"),oGo=o(" \u2014 "),eV=a("a"),rGo=o("IBertForTokenClassification"),tGo=o(" (I-BERT model)"),aGo=l(),j2=a("li"),rhe=a("strong"),nGo=o("layoutlm"),sGo=o(" \u2014 "),oV=a("a"),lGo=o("LayoutLMForTokenClassification"),iGo=o(" (LayoutLM model)"),dGo=l(),D2=a("li"),the=a("strong"),cGo=o("layoutlmv2"),fGo=o(" \u2014 "),rV=a("a"),mGo=o("LayoutLMv2ForTokenClassification"),gGo=o(" (LayoutLMv2 model)"),hGo=l(),G2=a("li"),ahe=a("strong"),pGo=o("layoutlmv3"),uGo=o(" \u2014 "),tV=a("a"),_Go=o("LayoutLMv3ForTokenClassification"),bGo=o(" (LayoutLMv3 model)"),vGo=l(),O2=a("li"),nhe=a("strong"),FGo=o("longformer"),TGo=o(" \u2014 "),aV=a("a"),MGo=o("LongformerForTokenClassification"),EGo=o(" (Longformer model)"),CGo=l(),V2=a("li"),she=a("strong"),wGo=o("megatron-bert"),AGo=o(" \u2014 "),nV=a("a"),yGo=o("MegatronBertForTokenClassification"),LGo=o(" (MegatronBert model)"),xGo=l(),X2=a("li"),lhe=a("strong"),$Go=o("mobilebert"),kGo=o(" \u2014 "),sV=a("a"),SGo=o("MobileBertForTokenClassification"),RGo=o(" (MobileBERT model)"),PGo=l(),z2=a("li"),ihe=a("strong"),BGo=o("mpnet"),IGo=o(" \u2014 "),lV=a("a"),qGo=o("MPNetForTokenClassification"),NGo=o(" (MPNet model)"),jGo=l(),W2=a("li"),dhe=a("strong"),DGo=o("nystromformer"),GGo=o(" \u2014 "),iV=a("a"),OGo=o("NystromformerForTokenClassification"),VGo=o(" (Nystromformer model)"),XGo=l(),Q2=a("li"),che=a("strong"),zGo=o("qdqbert"),WGo=o(" \u2014 "),dV=a("a"),QGo=o("QDQBertForTokenClassification"),HGo=o(" (QDQBert model)"),UGo=l(),H2=a("li"),fhe=a("strong"),JGo=o("rembert"),YGo=o(" \u2014 "),cV=a("a"),KGo=o("RemBertForTokenClassification"),ZGo=o(" (RemBERT model)"),eOo=l(),U2=a("li"),mhe=a("strong"),oOo=o("roberta"),rOo=o(" \u2014 "),fV=a("a"),tOo=o("RobertaForTokenClassification"),aOo=o(" (RoBERTa model)"),nOo=l(),J2=a("li"),ghe=a("strong"),sOo=o("roformer"),lOo=o(" \u2014 "),mV=a("a"),iOo=o("RoFormerForTokenClassification"),dOo=o(" (RoFormer model)"),cOo=l(),Y2=a("li"),hhe=a("strong"),fOo=o("squeezebert"),mOo=o(" \u2014 "),gV=a("a"),gOo=o("SqueezeBertForTokenClassification"),hOo=o(" (SqueezeBERT model)"),pOo=l(),K2=a("li"),phe=a("strong"),uOo=o("xlm"),_Oo=o(" \u2014 "),hV=a("a"),bOo=o("XLMForTokenClassification"),vOo=o(" (XLM model)"),FOo=l(),Z2=a("li"),uhe=a("strong"),TOo=o("xlm-roberta"),MOo=o(" \u2014 "),pV=a("a"),EOo=o("XLMRobertaForTokenClassification"),COo=o(" (XLM-RoBERTa model)"),wOo=l(),ev=a("li"),_he=a("strong"),AOo=o("xlm-roberta-xl"),yOo=o(" \u2014 "),uV=a("a"),LOo=o("XLMRobertaXLForTokenClassification"),xOo=o(" (XLM-RoBERTa-XL model)"),$Oo=l(),ov=a("li"),bhe=a("strong"),kOo=o("xlnet"),SOo=o(" \u2014 "),_V=a("a"),ROo=o("XLNetForTokenClassification"),POo=o(" (XLNet model)"),BOo=l(),rv=a("li"),vhe=a("strong"),IOo=o("yoso"),qOo=o(" \u2014 "),bV=a("a"),NOo=o("YosoForTokenClassification"),jOo=o(" (YOSO model)"),DOo=l(),tv=a("p"),GOo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),OOo=o("model.eval()"),VOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),XOo=o("model.train()"),zOo=l(),F(av.$$.fragment),wNe=l(),Ki=a("h2"),nv=a("a"),Mhe=a("span"),F(V6.$$.fragment),WOo=l(),Ehe=a("span"),QOo=o("AutoModelForQuestionAnswering"),ANe=l(),qo=a("div"),F(X6.$$.fragment),HOo=l(),Zi=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vV=a("a"),JOo=o("from_pretrained()"),YOo=o(" class method or the "),FV=a("a"),KOo=o("from_config()"),ZOo=o(` class
method.`),eVo=l(),z6=a("p"),oVo=o("This class cannot be instantiated directly using "),Che=a("code"),rVo=o("__init__()"),tVo=o(" (throws an error)."),aVo=l(),mt=a("div"),F(W6.$$.fragment),nVo=l(),whe=a("p"),sVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lVo=l(),ed=a("p"),iVo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),dVo=o("not"),cVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),fVo=o("from_pretrained()"),mVo=o(" to load the model weights."),gVo=l(),F(sv.$$.fragment),hVo=l(),no=a("div"),F(Q6.$$.fragment),pVo=l(),yhe=a("p"),uVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Vo=l(),qa=a("p"),bVo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),vVo=o("model_type"),FVo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),TVo=o("pretrained_model_name_or_path"),MVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),EVo=o("pretrained_model_name_or_path"),CVo=o(":"),wVo=l(),V=a("ul"),lv=a("li"),khe=a("strong"),AVo=o("albert"),yVo=o(" \u2014 "),MV=a("a"),LVo=o("AlbertForQuestionAnswering"),xVo=o(" (ALBERT model)"),$Vo=l(),iv=a("li"),She=a("strong"),kVo=o("bart"),SVo=o(" \u2014 "),EV=a("a"),RVo=o("BartForQuestionAnswering"),PVo=o(" (BART model)"),BVo=l(),dv=a("li"),Rhe=a("strong"),IVo=o("bert"),qVo=o(" \u2014 "),CV=a("a"),NVo=o("BertForQuestionAnswering"),jVo=o(" (BERT model)"),DVo=l(),cv=a("li"),Phe=a("strong"),GVo=o("big_bird"),OVo=o(" \u2014 "),wV=a("a"),VVo=o("BigBirdForQuestionAnswering"),XVo=o(" (BigBird model)"),zVo=l(),fv=a("li"),Bhe=a("strong"),WVo=o("bigbird_pegasus"),QVo=o(" \u2014 "),AV=a("a"),HVo=o("BigBirdPegasusForQuestionAnswering"),UVo=o(" (BigBirdPegasus model)"),JVo=l(),mv=a("li"),Ihe=a("strong"),YVo=o("camembert"),KVo=o(" \u2014 "),yV=a("a"),ZVo=o("CamembertForQuestionAnswering"),eXo=o(" (CamemBERT model)"),oXo=l(),gv=a("li"),qhe=a("strong"),rXo=o("canine"),tXo=o(" \u2014 "),LV=a("a"),aXo=o("CanineForQuestionAnswering"),nXo=o(" (Canine model)"),sXo=l(),hv=a("li"),Nhe=a("strong"),lXo=o("convbert"),iXo=o(" \u2014 "),xV=a("a"),dXo=o("ConvBertForQuestionAnswering"),cXo=o(" (ConvBERT model)"),fXo=l(),pv=a("li"),jhe=a("strong"),mXo=o("data2vec-text"),gXo=o(" \u2014 "),$V=a("a"),hXo=o("Data2VecTextForQuestionAnswering"),pXo=o(" (Data2VecText model)"),uXo=l(),uv=a("li"),Dhe=a("strong"),_Xo=o("deberta"),bXo=o(" \u2014 "),kV=a("a"),vXo=o("DebertaForQuestionAnswering"),FXo=o(" (DeBERTa model)"),TXo=l(),_v=a("li"),Ghe=a("strong"),MXo=o("deberta-v2"),EXo=o(" \u2014 "),SV=a("a"),CXo=o("DebertaV2ForQuestionAnswering"),wXo=o(" (DeBERTa-v2 model)"),AXo=l(),bv=a("li"),Ohe=a("strong"),yXo=o("distilbert"),LXo=o(" \u2014 "),RV=a("a"),xXo=o("DistilBertForQuestionAnswering"),$Xo=o(" (DistilBERT model)"),kXo=l(),vv=a("li"),Vhe=a("strong"),SXo=o("electra"),RXo=o(" \u2014 "),PV=a("a"),PXo=o("ElectraForQuestionAnswering"),BXo=o(" (ELECTRA model)"),IXo=l(),Fv=a("li"),Xhe=a("strong"),qXo=o("flaubert"),NXo=o(" \u2014 "),BV=a("a"),jXo=o("FlaubertForQuestionAnsweringSimple"),DXo=o(" (FlauBERT model)"),GXo=l(),Tv=a("li"),zhe=a("strong"),OXo=o("fnet"),VXo=o(" \u2014 "),IV=a("a"),XXo=o("FNetForQuestionAnswering"),zXo=o(" (FNet model)"),WXo=l(),Mv=a("li"),Whe=a("strong"),QXo=o("funnel"),HXo=o(" \u2014 "),qV=a("a"),UXo=o("FunnelForQuestionAnswering"),JXo=o(" (Funnel Transformer model)"),YXo=l(),Ev=a("li"),Qhe=a("strong"),KXo=o("gptj"),ZXo=o(" \u2014 "),NV=a("a"),ezo=o("GPTJForQuestionAnswering"),ozo=o(" (GPT-J model)"),rzo=l(),Cv=a("li"),Hhe=a("strong"),tzo=o("ibert"),azo=o(" \u2014 "),jV=a("a"),nzo=o("IBertForQuestionAnswering"),szo=o(" (I-BERT model)"),lzo=l(),wv=a("li"),Uhe=a("strong"),izo=o("layoutlmv2"),dzo=o(" \u2014 "),DV=a("a"),czo=o("LayoutLMv2ForQuestionAnswering"),fzo=o(" (LayoutLMv2 model)"),mzo=l(),Av=a("li"),Jhe=a("strong"),gzo=o("layoutlmv3"),hzo=o(" \u2014 "),GV=a("a"),pzo=o("LayoutLMv3ForQuestionAnswering"),uzo=o(" (LayoutLMv3 model)"),_zo=l(),yv=a("li"),Yhe=a("strong"),bzo=o("led"),vzo=o(" \u2014 "),OV=a("a"),Fzo=o("LEDForQuestionAnswering"),Tzo=o(" (LED model)"),Mzo=l(),Lv=a("li"),Khe=a("strong"),Ezo=o("longformer"),Czo=o(" \u2014 "),VV=a("a"),wzo=o("LongformerForQuestionAnswering"),Azo=o(" (Longformer model)"),yzo=l(),xv=a("li"),Zhe=a("strong"),Lzo=o("lxmert"),xzo=o(" \u2014 "),XV=a("a"),$zo=o("LxmertForQuestionAnswering"),kzo=o(" (LXMERT model)"),Szo=l(),$v=a("li"),epe=a("strong"),Rzo=o("mbart"),Pzo=o(" \u2014 "),zV=a("a"),Bzo=o("MBartForQuestionAnswering"),Izo=o(" (mBART model)"),qzo=l(),kv=a("li"),ope=a("strong"),Nzo=o("megatron-bert"),jzo=o(" \u2014 "),WV=a("a"),Dzo=o("MegatronBertForQuestionAnswering"),Gzo=o(" (MegatronBert model)"),Ozo=l(),Sv=a("li"),rpe=a("strong"),Vzo=o("mobilebert"),Xzo=o(" \u2014 "),QV=a("a"),zzo=o("MobileBertForQuestionAnswering"),Wzo=o(" (MobileBERT model)"),Qzo=l(),Rv=a("li"),tpe=a("strong"),Hzo=o("mpnet"),Uzo=o(" \u2014 "),HV=a("a"),Jzo=o("MPNetForQuestionAnswering"),Yzo=o(" (MPNet model)"),Kzo=l(),Pv=a("li"),ape=a("strong"),Zzo=o("nystromformer"),eWo=o(" \u2014 "),UV=a("a"),oWo=o("NystromformerForQuestionAnswering"),rWo=o(" (Nystromformer model)"),tWo=l(),Bv=a("li"),npe=a("strong"),aWo=o("qdqbert"),nWo=o(" \u2014 "),JV=a("a"),sWo=o("QDQBertForQuestionAnswering"),lWo=o(" (QDQBert model)"),iWo=l(),Iv=a("li"),spe=a("strong"),dWo=o("reformer"),cWo=o(" \u2014 "),YV=a("a"),fWo=o("ReformerForQuestionAnswering"),mWo=o(" (Reformer model)"),gWo=l(),qv=a("li"),lpe=a("strong"),hWo=o("rembert"),pWo=o(" \u2014 "),KV=a("a"),uWo=o("RemBertForQuestionAnswering"),_Wo=o(" (RemBERT model)"),bWo=l(),Nv=a("li"),ipe=a("strong"),vWo=o("roberta"),FWo=o(" \u2014 "),ZV=a("a"),TWo=o("RobertaForQuestionAnswering"),MWo=o(" (RoBERTa model)"),EWo=l(),jv=a("li"),dpe=a("strong"),CWo=o("roformer"),wWo=o(" \u2014 "),eX=a("a"),AWo=o("RoFormerForQuestionAnswering"),yWo=o(" (RoFormer model)"),LWo=l(),Dv=a("li"),cpe=a("strong"),xWo=o("splinter"),$Wo=o(" \u2014 "),oX=a("a"),kWo=o("SplinterForQuestionAnswering"),SWo=o(" (Splinter model)"),RWo=l(),Gv=a("li"),fpe=a("strong"),PWo=o("squeezebert"),BWo=o(" \u2014 "),rX=a("a"),IWo=o("SqueezeBertForQuestionAnswering"),qWo=o(" (SqueezeBERT model)"),NWo=l(),Ov=a("li"),mpe=a("strong"),jWo=o("xlm"),DWo=o(" \u2014 "),tX=a("a"),GWo=o("XLMForQuestionAnsweringSimple"),OWo=o(" (XLM model)"),VWo=l(),Vv=a("li"),gpe=a("strong"),XWo=o("xlm-roberta"),zWo=o(" \u2014 "),aX=a("a"),WWo=o("XLMRobertaForQuestionAnswering"),QWo=o(" (XLM-RoBERTa model)"),HWo=l(),Xv=a("li"),hpe=a("strong"),UWo=o("xlm-roberta-xl"),JWo=o(" \u2014 "),nX=a("a"),YWo=o("XLMRobertaXLForQuestionAnswering"),KWo=o(" (XLM-RoBERTa-XL model)"),ZWo=l(),zv=a("li"),ppe=a("strong"),eQo=o("xlnet"),oQo=o(" \u2014 "),sX=a("a"),rQo=o("XLNetForQuestionAnsweringSimple"),tQo=o(" (XLNet model)"),aQo=l(),Wv=a("li"),upe=a("strong"),nQo=o("yoso"),sQo=o(" \u2014 "),lX=a("a"),lQo=o("YosoForQuestionAnswering"),iQo=o(" (YOSO model)"),dQo=l(),Qv=a("p"),cQo=o("The model is set in evaluation mode by default using "),_pe=a("code"),fQo=o("model.eval()"),mQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),gQo=o("model.train()"),hQo=l(),F(Hv.$$.fragment),yNe=l(),od=a("h2"),Uv=a("a"),vpe=a("span"),F(H6.$$.fragment),pQo=l(),Fpe=a("span"),uQo=o("AutoModelForTableQuestionAnswering"),LNe=l(),No=a("div"),F(U6.$$.fragment),_Qo=l(),rd=a("p"),bQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iX=a("a"),vQo=o("from_pretrained()"),FQo=o(" class method or the "),dX=a("a"),TQo=o("from_config()"),MQo=o(` class
method.`),EQo=l(),J6=a("p"),CQo=o("This class cannot be instantiated directly using "),Tpe=a("code"),wQo=o("__init__()"),AQo=o(" (throws an error)."),yQo=l(),gt=a("div"),F(Y6.$$.fragment),LQo=l(),Mpe=a("p"),xQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Qo=l(),td=a("p"),kQo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),SQo=o("not"),RQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),PQo=o("from_pretrained()"),BQo=o(" to load the model weights."),IQo=l(),F(Jv.$$.fragment),qQo=l(),so=a("div"),F(K6.$$.fragment),NQo=l(),Cpe=a("p"),jQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DQo=l(),Na=a("p"),GQo=o("The model class to instantiate is selected based on the "),wpe=a("code"),OQo=o("model_type"),VQo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),WQo=o("pretrained_model_name_or_path"),QQo=o(":"),HQo=l(),Lpe=a("ul"),Yv=a("li"),xpe=a("strong"),UQo=o("tapas"),JQo=o(" \u2014 "),fX=a("a"),YQo=o("TapasForQuestionAnswering"),KQo=o(" (TAPAS model)"),ZQo=l(),Kv=a("p"),eHo=o("The model is set in evaluation mode by default using "),$pe=a("code"),oHo=o("model.eval()"),rHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),tHo=o("model.train()"),aHo=l(),F(Zv.$$.fragment),xNe=l(),ad=a("h2"),e3=a("a"),Spe=a("span"),F(Z6.$$.fragment),nHo=l(),Rpe=a("span"),sHo=o("AutoModelForImageClassification"),$Ne=l(),jo=a("div"),F(ey.$$.fragment),lHo=l(),nd=a("p"),iHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mX=a("a"),dHo=o("from_pretrained()"),cHo=o(" class method or the "),gX=a("a"),fHo=o("from_config()"),mHo=o(` class
method.`),gHo=l(),oy=a("p"),hHo=o("This class cannot be instantiated directly using "),Ppe=a("code"),pHo=o("__init__()"),uHo=o(" (throws an error)."),_Ho=l(),ht=a("div"),F(ry.$$.fragment),bHo=l(),Bpe=a("p"),vHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FHo=l(),sd=a("p"),THo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),MHo=o("not"),EHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),CHo=o("from_pretrained()"),wHo=o(" to load the model weights."),AHo=l(),F(o3.$$.fragment),yHo=l(),lo=a("div"),F(ty.$$.fragment),LHo=l(),qpe=a("p"),xHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Ho=l(),ja=a("p"),kHo=o("The model class to instantiate is selected based on the "),Npe=a("code"),SHo=o("model_type"),RHo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),PHo=o("pretrained_model_name_or_path"),BHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),IHo=o("pretrained_model_name_or_path"),qHo=o(":"),NHo=l(),Fe=a("ul"),r3=a("li"),Gpe=a("strong"),jHo=o("beit"),DHo=o(" \u2014 "),pX=a("a"),GHo=o("BeitForImageClassification"),OHo=o(" (BEiT model)"),VHo=l(),t3=a("li"),Ope=a("strong"),XHo=o("convnext"),zHo=o(" \u2014 "),uX=a("a"),WHo=o("ConvNextForImageClassification"),QHo=o(" (ConvNext model)"),HHo=l(),a3=a("li"),Vpe=a("strong"),UHo=o("cvt"),JHo=o(" \u2014 "),_X=a("a"),YHo=o("CvtForImageClassification"),KHo=o(" (CvT model)"),ZHo=l(),n3=a("li"),Xpe=a("strong"),eUo=o("data2vec-vision"),oUo=o(" \u2014 "),bX=a("a"),rUo=o("Data2VecVisionForImageClassification"),tUo=o(" (Data2VecVision model)"),aUo=l(),Bs=a("li"),zpe=a("strong"),nUo=o("deit"),sUo=o(" \u2014 "),vX=a("a"),lUo=o("DeiTForImageClassification"),iUo=o(" or "),FX=a("a"),dUo=o("DeiTForImageClassificationWithTeacher"),cUo=o(" (DeiT model)"),fUo=l(),s3=a("li"),Wpe=a("strong"),mUo=o("imagegpt"),gUo=o(" \u2014 "),TX=a("a"),hUo=o("ImageGPTForImageClassification"),pUo=o(" (ImageGPT model)"),uUo=l(),pt=a("li"),Qpe=a("strong"),_Uo=o("perceiver"),bUo=o(" \u2014 "),MX=a("a"),vUo=o("PerceiverForImageClassificationLearned"),FUo=o(" or "),EX=a("a"),TUo=o("PerceiverForImageClassificationFourier"),MUo=o(" or "),CX=a("a"),EUo=o("PerceiverForImageClassificationConvProcessing"),CUo=o(" (Perceiver model)"),wUo=l(),l3=a("li"),Hpe=a("strong"),AUo=o("poolformer"),yUo=o(" \u2014 "),wX=a("a"),LUo=o("PoolFormerForImageClassification"),xUo=o(" (PoolFormer model)"),$Uo=l(),i3=a("li"),Upe=a("strong"),kUo=o("regnet"),SUo=o(" \u2014 "),AX=a("a"),RUo=o("RegNetForImageClassification"),PUo=o(" (RegNet model)"),BUo=l(),d3=a("li"),Jpe=a("strong"),IUo=o("resnet"),qUo=o(" \u2014 "),yX=a("a"),NUo=o("ResNetForImageClassification"),jUo=o(" (ResNet model)"),DUo=l(),c3=a("li"),Ype=a("strong"),GUo=o("segformer"),OUo=o(" \u2014 "),LX=a("a"),VUo=o("SegformerForImageClassification"),XUo=o(" (SegFormer model)"),zUo=l(),f3=a("li"),Kpe=a("strong"),WUo=o("swin"),QUo=o(" \u2014 "),xX=a("a"),HUo=o("SwinForImageClassification"),UUo=o(" (Swin model)"),JUo=l(),m3=a("li"),Zpe=a("strong"),YUo=o("van"),KUo=o(" \u2014 "),$X=a("a"),ZUo=o("VanForImageClassification"),eJo=o(" (VAN model)"),oJo=l(),g3=a("li"),eue=a("strong"),rJo=o("vit"),tJo=o(" \u2014 "),kX=a("a"),aJo=o("ViTForImageClassification"),nJo=o(" (ViT model)"),sJo=l(),h3=a("p"),lJo=o("The model is set in evaluation mode by default using "),oue=a("code"),iJo=o("model.eval()"),dJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),cJo=o("model.train()"),fJo=l(),F(p3.$$.fragment),kNe=l(),ld=a("h2"),u3=a("a"),tue=a("span"),F(ay.$$.fragment),mJo=l(),aue=a("span"),gJo=o("AutoModelForVision2Seq"),SNe=l(),Do=a("div"),F(ny.$$.fragment),hJo=l(),id=a("p"),pJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SX=a("a"),uJo=o("from_pretrained()"),_Jo=o(" class method or the "),RX=a("a"),bJo=o("from_config()"),vJo=o(` class
method.`),FJo=l(),sy=a("p"),TJo=o("This class cannot be instantiated directly using "),nue=a("code"),MJo=o("__init__()"),EJo=o(" (throws an error)."),CJo=l(),ut=a("div"),F(ly.$$.fragment),wJo=l(),sue=a("p"),AJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yJo=l(),dd=a("p"),LJo=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),xJo=o("not"),$Jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),kJo=o("from_pretrained()"),SJo=o(" to load the model weights."),RJo=l(),F(_3.$$.fragment),PJo=l(),io=a("div"),F(iy.$$.fragment),BJo=l(),iue=a("p"),IJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qJo=l(),Da=a("p"),NJo=o("The model class to instantiate is selected based on the "),due=a("code"),jJo=o("model_type"),DJo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(":"),zJo=l(),mue=a("ul"),b3=a("li"),gue=a("strong"),WJo=o("vision-encoder-decoder"),QJo=o(" \u2014 "),BX=a("a"),HJo=o("VisionEncoderDecoderModel"),UJo=o(" (Vision Encoder decoder model)"),JJo=l(),v3=a("p"),YJo=o("The model is set in evaluation mode by default using "),hue=a("code"),KJo=o("model.eval()"),ZJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),eYo=o("model.train()"),oYo=l(),F(F3.$$.fragment),RNe=l(),cd=a("h2"),T3=a("a"),uue=a("span"),F(dy.$$.fragment),rYo=l(),_ue=a("span"),tYo=o("AutoModelForAudioClassification"),PNe=l(),Go=a("div"),F(cy.$$.fragment),aYo=l(),fd=a("p"),nYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),IX=a("a"),sYo=o("from_pretrained()"),lYo=o(" class method or the "),qX=a("a"),iYo=o("from_config()"),dYo=o(` class
method.`),cYo=l(),fy=a("p"),fYo=o("This class cannot be instantiated directly using "),bue=a("code"),mYo=o("__init__()"),gYo=o(" (throws an error)."),hYo=l(),_t=a("div"),F(my.$$.fragment),pYo=l(),vue=a("p"),uYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Yo=l(),md=a("p"),bYo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),vYo=o("not"),FYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),TYo=o("from_pretrained()"),MYo=o(" to load the model weights."),EYo=l(),F(M3.$$.fragment),CYo=l(),co=a("div"),F(gy.$$.fragment),wYo=l(),Tue=a("p"),AYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yYo=l(),Ga=a("p"),LYo=o("The model class to instantiate is selected based on the "),Mue=a("code"),xYo=o("model_type"),$Yo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),RYo=o("pretrained_model_name_or_path"),PYo=o(":"),BYo=l(),Se=a("ul"),E3=a("li"),wue=a("strong"),IYo=o("data2vec-audio"),qYo=o(" \u2014 "),jX=a("a"),NYo=o("Data2VecAudioForSequenceClassification"),jYo=o(" (Data2VecAudio model)"),DYo=l(),C3=a("li"),Aue=a("strong"),GYo=o("hubert"),OYo=o(" \u2014 "),DX=a("a"),VYo=o("HubertForSequenceClassification"),XYo=o(" (Hubert model)"),zYo=l(),w3=a("li"),yue=a("strong"),WYo=o("sew"),QYo=o(" \u2014 "),GX=a("a"),HYo=o("SEWForSequenceClassification"),UYo=o(" (SEW model)"),JYo=l(),A3=a("li"),Lue=a("strong"),YYo=o("sew-d"),KYo=o(" \u2014 "),OX=a("a"),ZYo=o("SEWDForSequenceClassification"),eKo=o(" (SEW-D model)"),oKo=l(),y3=a("li"),xue=a("strong"),rKo=o("unispeech"),tKo=o(" \u2014 "),VX=a("a"),aKo=o("UniSpeechForSequenceClassification"),nKo=o(" (UniSpeech model)"),sKo=l(),L3=a("li"),$ue=a("strong"),lKo=o("unispeech-sat"),iKo=o(" \u2014 "),XX=a("a"),dKo=o("UniSpeechSatForSequenceClassification"),cKo=o(" (UniSpeechSat model)"),fKo=l(),x3=a("li"),kue=a("strong"),mKo=o("wav2vec2"),gKo=o(" \u2014 "),zX=a("a"),hKo=o("Wav2Vec2ForSequenceClassification"),pKo=o(" (Wav2Vec2 model)"),uKo=l(),$3=a("li"),Sue=a("strong"),_Ko=o("wav2vec2-conformer"),bKo=o(" \u2014 "),WX=a("a"),vKo=o("Wav2Vec2ConformerForSequenceClassification"),FKo=o(" (Wav2Vec2-Conformer model)"),TKo=l(),k3=a("li"),Rue=a("strong"),MKo=o("wavlm"),EKo=o(" \u2014 "),QX=a("a"),CKo=o("WavLMForSequenceClassification"),wKo=o(" (WavLM model)"),AKo=l(),S3=a("p"),yKo=o("The model is set in evaluation mode by default using "),Pue=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),$Ko=o("model.train()"),kKo=l(),F(R3.$$.fragment),BNe=l(),gd=a("h2"),P3=a("a"),Iue=a("span"),F(hy.$$.fragment),SKo=l(),que=a("span"),RKo=o("AutoModelForAudioFrameClassification"),INe=l(),Oo=a("div"),F(py.$$.fragment),PKo=l(),hd=a("p"),BKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HX=a("a"),IKo=o("from_pretrained()"),qKo=o(" class method or the "),UX=a("a"),NKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),uy=a("p"),GKo=o("This class cannot be instantiated directly using "),Nue=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),bt=a("div"),F(_y.$$.fragment),zKo=l(),jue=a("p"),WKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QKo=l(),pd=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),F(B3.$$.fragment),eZo=l(),fo=a("div"),F(by.$$.fragment),oZo=l(),Gue=a("p"),rZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tZo=l(),Oa=a("p"),aZo=o("The model class to instantiate is selected based on the "),Oue=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),Kr=a("ul"),I3=a("li"),zue=a("strong"),mZo=o("data2vec-audio"),gZo=o(" \u2014 "),YX=a("a"),hZo=o("Data2VecAudioForAudioFrameClassification"),pZo=o(" (Data2VecAudio model)"),uZo=l(),q3=a("li"),Wue=a("strong"),_Zo=o("unispeech-sat"),bZo=o(" \u2014 "),KX=a("a"),vZo=o("UniSpeechSatForAudioFrameClassification"),FZo=o(" (UniSpeechSat model)"),TZo=l(),N3=a("li"),Que=a("strong"),MZo=o("wav2vec2"),EZo=o(" \u2014 "),ZX=a("a"),CZo=o("Wav2Vec2ForAudioFrameClassification"),wZo=o(" (Wav2Vec2 model)"),AZo=l(),j3=a("li"),Hue=a("strong"),yZo=o("wav2vec2-conformer"),LZo=o(" \u2014 "),ez=a("a"),xZo=o("Wav2Vec2ConformerForAudioFrameClassification"),$Zo=o(" (Wav2Vec2-Conformer model)"),kZo=l(),D3=a("li"),Uue=a("strong"),SZo=o("wavlm"),RZo=o(" \u2014 "),oz=a("a"),PZo=o("WavLMForAudioFrameClassification"),BZo=o(" (WavLM model)"),IZo=l(),G3=a("p"),qZo=o("The model is set in evaluation mode by default using "),Jue=a("code"),NZo=o("model.eval()"),jZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),DZo=o("model.train()"),GZo=l(),F(O3.$$.fragment),qNe=l(),ud=a("h2"),V3=a("a"),Kue=a("span"),F(vy.$$.fragment),OZo=l(),Zue=a("span"),VZo=o("AutoModelForCTC"),NNe=l(),Vo=a("div"),F(Fy.$$.fragment),XZo=l(),_d=a("p"),zZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rz=a("a"),WZo=o("from_pretrained()"),QZo=o(" class method or the "),tz=a("a"),HZo=o("from_config()"),UZo=o(` class
method.`),JZo=l(),Ty=a("p"),YZo=o("This class cannot be instantiated directly using "),e_e=a("code"),KZo=o("__init__()"),ZZo=o(" (throws an error)."),eer=l(),vt=a("div"),F(My.$$.fragment),oer=l(),o_e=a("p"),rer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ter=l(),bd=a("p"),aer=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),ner=o("not"),ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),ler=o("from_pretrained()"),ier=o(" to load the model weights."),der=l(),F(X3.$$.fragment),cer=l(),mo=a("div"),F(Ey.$$.fragment),fer=l(),t_e=a("p"),mer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ger=l(),Va=a("p"),her=o("The model class to instantiate is selected based on the "),a_e=a("code"),per=o("model_type"),uer=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),_er=o("pretrained_model_name_or_path"),ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(":"),Ter=l(),Re=a("ul"),z3=a("li"),l_e=a("strong"),Mer=o("data2vec-audio"),Eer=o(" \u2014 "),nz=a("a"),Cer=o("Data2VecAudioForCTC"),wer=o(" (Data2VecAudio model)"),Aer=l(),W3=a("li"),i_e=a("strong"),yer=o("hubert"),Ler=o(" \u2014 "),sz=a("a"),xer=o("HubertForCTC"),$er=o(" (Hubert model)"),ker=l(),Q3=a("li"),d_e=a("strong"),Ser=o("sew"),Rer=o(" \u2014 "),lz=a("a"),Per=o("SEWForCTC"),Ber=o(" (SEW model)"),Ier=l(),H3=a("li"),c_e=a("strong"),qer=o("sew-d"),Ner=o(" \u2014 "),iz=a("a"),jer=o("SEWDForCTC"),Der=o(" (SEW-D model)"),Ger=l(),U3=a("li"),f_e=a("strong"),Oer=o("unispeech"),Ver=o(" \u2014 "),dz=a("a"),Xer=o("UniSpeechForCTC"),zer=o(" (UniSpeech model)"),Wer=l(),J3=a("li"),m_e=a("strong"),Qer=o("unispeech-sat"),Her=o(" \u2014 "),cz=a("a"),Uer=o("UniSpeechSatForCTC"),Jer=o(" (UniSpeechSat model)"),Yer=l(),Y3=a("li"),g_e=a("strong"),Ker=o("wav2vec2"),Zer=o(" \u2014 "),fz=a("a"),eor=o("Wav2Vec2ForCTC"),oor=o(" (Wav2Vec2 model)"),ror=l(),K3=a("li"),h_e=a("strong"),tor=o("wav2vec2-conformer"),aor=o(" \u2014 "),mz=a("a"),nor=o("Wav2Vec2ConformerForCTC"),sor=o(" (Wav2Vec2-Conformer model)"),lor=l(),Z3=a("li"),p_e=a("strong"),ior=o("wavlm"),dor=o(" \u2014 "),gz=a("a"),cor=o("WavLMForCTC"),mor=o(" (WavLM model)"),gor=l(),eF=a("p"),hor=o("The model is set in evaluation mode by default using "),u_e=a("code"),por=o("model.eval()"),uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=a("code"),_or=o("model.train()"),bor=l(),F(oF.$$.fragment),jNe=l(),vd=a("h2"),rF=a("a"),b_e=a("span"),F(Cy.$$.fragment),vor=l(),v_e=a("span"),For=o("AutoModelForSpeechSeq2Seq"),DNe=l(),Xo=a("div"),F(wy.$$.fragment),Tor=l(),Fd=a("p"),Mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hz=a("a"),Eor=o("from_pretrained()"),Cor=o(" class method or the "),pz=a("a"),wor=o("from_config()"),Aor=o(` class
method.`),yor=l(),Ay=a("p"),Lor=o("This class cannot be instantiated directly using "),F_e=a("code"),xor=o("__init__()"),$or=o(" (throws an error)."),kor=l(),Ft=a("div"),F(yy.$$.fragment),Sor=l(),T_e=a("p"),Ror=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Por=l(),Td=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),Ior=o("not"),qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Nor=o("from_pretrained()"),jor=o(" to load the model weights."),Dor=l(),F(tF.$$.fragment),Gor=l(),go=a("div"),F(Ly.$$.fragment),Oor=l(),E_e=a("p"),Vor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xor=l(),Xa=a("p"),zor=o("The model class to instantiate is selected based on the "),C_e=a("code"),Wor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),Hor=o("pretrained_model_name_or_path"),Uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(":"),Kor=l(),xy=a("ul"),aF=a("li"),y_e=a("strong"),Zor=o("speech-encoder-decoder"),err=o(" \u2014 "),_z=a("a"),orr=o("SpeechEncoderDecoderModel"),rrr=o(" (Speech Encoder decoder model)"),trr=l(),nF=a("li"),L_e=a("strong"),arr=o("speech_to_text"),nrr=o(" \u2014 "),bz=a("a"),srr=o("Speech2TextForConditionalGeneration"),lrr=o(" (Speech2Text model)"),irr=l(),sF=a("p"),drr=o("The model is set in evaluation mode by default using "),x_e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),mrr=o("model.train()"),grr=l(),F(lF.$$.fragment),GNe=l(),Md=a("h2"),iF=a("a"),k_e=a("span"),F($y.$$.fragment),hrr=l(),S_e=a("span"),prr=o("AutoModelForAudioXVector"),ONe=l(),zo=a("div"),F(ky.$$.fragment),urr=l(),Ed=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),Fz=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),Sy=a("p"),Err=o("This class cannot be instantiated directly using "),R_e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Tt=a("div"),F(Ry.$$.fragment),yrr=l(),P_e=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xrr=l(),Cd=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(dF.$$.fragment),Irr=l(),ho=a("div"),F(Py.$$.fragment),qrr=l(),I_e=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jrr=l(),za=a("p"),Drr=o("The model class to instantiate is selected based on the "),q_e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),Zr=a("ul"),cF=a("li"),D_e=a("strong"),Hrr=o("data2vec-audio"),Urr=o(" \u2014 "),Mz=a("a"),Jrr=o("Data2VecAudioForXVector"),Yrr=o(" (Data2VecAudio model)"),Krr=l(),fF=a("li"),G_e=a("strong"),Zrr=o("unispeech-sat"),etr=o(" \u2014 "),Ez=a("a"),otr=o("UniSpeechSatForXVector"),rtr=o(" (UniSpeechSat model)"),ttr=l(),mF=a("li"),O_e=a("strong"),atr=o("wav2vec2"),ntr=o(" \u2014 "),Cz=a("a"),str=o("Wav2Vec2ForXVector"),ltr=o(" (Wav2Vec2 model)"),itr=l(),gF=a("li"),V_e=a("strong"),dtr=o("wav2vec2-conformer"),ctr=o(" \u2014 "),wz=a("a"),ftr=o("Wav2Vec2ConformerForXVector"),mtr=o(" (Wav2Vec2-Conformer model)"),gtr=l(),hF=a("li"),X_e=a("strong"),htr=o("wavlm"),ptr=o(" \u2014 "),Az=a("a"),utr=o("WavLMForXVector"),_tr=o(" (WavLM model)"),btr=l(),pF=a("p"),vtr=o("The model is set in evaluation mode by default using "),z_e=a("code"),Ftr=o("model.eval()"),Ttr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Mtr=o("model.train()"),Etr=l(),F(uF.$$.fragment),VNe=l(),wd=a("h2"),_F=a("a"),Q_e=a("span"),F(By.$$.fragment),Ctr=l(),H_e=a("span"),wtr=o("AutoModelForMaskedImageModeling"),XNe=l(),Wo=a("div"),F(Iy.$$.fragment),Atr=l(),Ad=a("p"),ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yz=a("a"),Ltr=o("from_pretrained()"),xtr=o(" class method or the "),Lz=a("a"),$tr=o("from_config()"),ktr=o(` class
method.`),Str=l(),qy=a("p"),Rtr=o("This class cannot be instantiated directly using "),U_e=a("code"),Ptr=o("__init__()"),Btr=o(" (throws an error)."),Itr=l(),Mt=a("div"),F(Ny.$$.fragment),qtr=l(),J_e=a("p"),Ntr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),jtr=l(),yd=a("p"),Dtr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Gtr=o("not"),Otr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Vtr=o("from_pretrained()"),Xtr=o(" to load the model weights."),ztr=l(),F(bF.$$.fragment),Wtr=l(),po=a("div"),F(jy.$$.fragment),Qtr=l(),K_e=a("p"),Htr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Utr=l(),Wa=a("p"),Jtr=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Ytr=o("model_type"),Ktr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Ztr=o("pretrained_model_name_or_path"),ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),oar=o("pretrained_model_name_or_path"),rar=o(":"),tar=l(),Ld=a("ul"),vF=a("li"),r1e=a("strong"),aar=o("deit"),nar=o(" \u2014 "),$z=a("a"),sar=o("DeiTForMaskedImageModeling"),lar=o(" (DeiT model)"),iar=l(),FF=a("li"),t1e=a("strong"),dar=o("swin"),car=o(" \u2014 "),kz=a("a"),far=o("SwinForMaskedImageModeling"),mar=o(" (Swin model)"),gar=l(),TF=a("li"),a1e=a("strong"),har=o("vit"),par=o(" \u2014 "),Sz=a("a"),uar=o("ViTForMaskedImageModeling"),_ar=o(" (ViT model)"),bar=l(),MF=a("p"),Far=o("The model is set in evaluation mode by default using "),n1e=a("code"),Tar=o("model.eval()"),Mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s1e=a("code"),Ear=o("model.train()"),Car=l(),F(EF.$$.fragment),zNe=l(),xd=a("h2"),CF=a("a"),l1e=a("span"),F(Dy.$$.fragment),war=l(),i1e=a("span"),Aar=o("AutoModelForObjectDetection"),WNe=l(),Qo=a("div"),F(Gy.$$.fragment),yar=l(),$d=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Rz=a("a"),xar=o("from_pretrained()"),$ar=o(" class method or the "),Pz=a("a"),kar=o("from_config()"),Sar=o(` class
method.`),Rar=l(),Oy=a("p"),Par=o("This class cannot be instantiated directly using "),d1e=a("code"),Bar=o("__init__()"),Iar=o(" (throws an error)."),qar=l(),Et=a("div"),F(Vy.$$.fragment),Nar=l(),c1e=a("p"),jar=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Dar=l(),kd=a("p"),Gar=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),Oar=o("not"),Var=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Xar=o("from_pretrained()"),zar=o(" to load the model weights."),War=l(),F(wF.$$.fragment),Qar=l(),uo=a("div"),F(Xy.$$.fragment),Har=l(),m1e=a("p"),Uar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jar=l(),Qa=a("p"),Yar=o("The model class to instantiate is selected based on the "),g1e=a("code"),Kar=o("model_type"),Zar=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(":"),anr=l(),zy=a("ul"),AF=a("li"),u1e=a("strong"),nnr=o("detr"),snr=o(" \u2014 "),Iz=a("a"),lnr=o("DetrForObjectDetection"),inr=o(" (DETR model)"),dnr=l(),yF=a("li"),_1e=a("strong"),cnr=o("yolos"),fnr=o(" \u2014 "),qz=a("a"),mnr=o("YolosForObjectDetection"),gnr=o(" (YOLOS model)"),hnr=l(),LF=a("p"),pnr=o("The model is set in evaluation mode by default using "),b1e=a("code"),unr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=a("code"),bnr=o("model.train()"),vnr=l(),F(xF.$$.fragment),QNe=l(),Sd=a("h2"),$F=a("a"),F1e=a("span"),F(Wy.$$.fragment),Fnr=l(),T1e=a("span"),Tnr=o("AutoModelForImageSegmentation"),HNe=l(),Ho=a("div"),F(Qy.$$.fragment),Mnr=l(),Rd=a("p"),Enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Nz=a("a"),Cnr=o("from_pretrained()"),wnr=o(" class method or the "),jz=a("a"),Anr=o("from_config()"),ynr=o(` class
method.`),Lnr=l(),Hy=a("p"),xnr=o("This class cannot be instantiated directly using "),M1e=a("code"),$nr=o("__init__()"),knr=o(" (throws an error)."),Snr=l(),Ct=a("div"),F(Uy.$$.fragment),Rnr=l(),E1e=a("p"),Pnr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Bnr=l(),Pd=a("p"),Inr=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),qnr=o("not"),Nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),jnr=o("from_pretrained()"),Dnr=o(" to load the model weights."),Gnr=l(),F(kF.$$.fragment),Onr=l(),_o=a("div"),F(Jy.$$.fragment),Vnr=l(),w1e=a("p"),Xnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),znr=l(),Ha=a("p"),Wnr=o("The model class to instantiate is selected based on the "),A1e=a("code"),Qnr=o("model_type"),Hnr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(":"),Znr=l(),x1e=a("ul"),SF=a("li"),$1e=a("strong"),esr=o("detr"),osr=o(" \u2014 "),Gz=a("a"),rsr=o("DetrForSegmentation"),tsr=o(" (DETR model)"),asr=l(),RF=a("p"),nsr=o("The model is set in evaluation mode by default using "),k1e=a("code"),ssr=o("model.eval()"),lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=a("code"),isr=o("model.train()"),dsr=l(),F(PF.$$.fragment),UNe=l(),Bd=a("h2"),BF=a("a"),R1e=a("span"),F(Yy.$$.fragment),csr=l(),P1e=a("span"),fsr=o("AutoModelForSemanticSegmentation"),JNe=l(),Uo=a("div"),F(Ky.$$.fragment),msr=l(),Id=a("p"),gsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Oz=a("a"),hsr=o("from_pretrained()"),psr=o(" class method or the "),Vz=a("a"),usr=o("from_config()"),_sr=o(` class
method.`),bsr=l(),Zy=a("p"),vsr=o("This class cannot be instantiated directly using "),B1e=a("code"),Fsr=o("__init__()"),Tsr=o(" (throws an error)."),Msr=l(),wt=a("div"),F(eL.$$.fragment),Esr=l(),I1e=a("p"),Csr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wsr=l(),qd=a("p"),Asr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),ysr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),xsr=o("from_pretrained()"),$sr=o(" to load the model weights."),ksr=l(),F(IF.$$.fragment),Ssr=l(),bo=a("div"),F(oL.$$.fragment),Rsr=l(),N1e=a("p"),Psr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bsr=l(),Ua=a("p"),Isr=o("The model class to instantiate is selected based on the "),j1e=a("code"),qsr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(":"),Vsr=l(),Ja=a("ul"),qF=a("li"),O1e=a("strong"),Xsr=o("beit"),zsr=o(" \u2014 "),zz=a("a"),Wsr=o("BeitForSemanticSegmentation"),Qsr=o(" (BEiT model)"),Hsr=l(),NF=a("li"),V1e=a("strong"),Usr=o("data2vec-vision"),Jsr=o(" \u2014 "),Wz=a("a"),Ysr=o("Data2VecVisionForSemanticSegmentation"),Ksr=o(" (Data2VecVision model)"),Zsr=l(),jF=a("li"),X1e=a("strong"),elr=o("dpt"),olr=o(" \u2014 "),Qz=a("a"),rlr=o("DPTForSemanticSegmentation"),tlr=o(" (DPT model)"),alr=l(),DF=a("li"),z1e=a("strong"),nlr=o("segformer"),slr=o(" \u2014 "),Hz=a("a"),llr=o("SegformerForSemanticSegmentation"),ilr=o(" (SegFormer model)"),dlr=l(),GF=a("p"),clr=o("The model is set in evaluation mode by default using "),W1e=a("code"),flr=o("model.eval()"),mlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=a("code"),glr=o("model.train()"),hlr=l(),F(OF.$$.fragment),YNe=l(),Nd=a("h2"),VF=a("a"),H1e=a("span"),F(rL.$$.fragment),plr=l(),U1e=a("span"),ulr=o("AutoModelForInstanceSegmentation"),KNe=l(),Jo=a("div"),F(tL.$$.fragment),_lr=l(),jd=a("p"),blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Uz=a("a"),vlr=o("from_pretrained()"),Flr=o(" class method or the "),Jz=a("a"),Tlr=o("from_config()"),Mlr=o(` class
method.`),Elr=l(),aL=a("p"),Clr=o("This class cannot be instantiated directly using "),J1e=a("code"),wlr=o("__init__()"),Alr=o(" (throws an error)."),ylr=l(),At=a("div"),F(nL.$$.fragment),Llr=l(),Y1e=a("p"),xlr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$lr=l(),Dd=a("p"),klr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),Slr=o("not"),Rlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),Plr=o("from_pretrained()"),Blr=o(" to load the model weights."),Ilr=l(),F(XF.$$.fragment),qlr=l(),vo=a("div"),F(sL.$$.fragment),Nlr=l(),Z1e=a("p"),jlr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dlr=l(),Ya=a("p"),Glr=o("The model class to instantiate is selected based on the "),e8e=a("code"),Olr=o("model_type"),Vlr=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),Wlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Hlr=l(),t8e=a("ul"),zF=a("li"),a8e=a("strong"),Ulr=o("maskformer"),Jlr=o(" \u2014 "),Kz=a("a"),Ylr=o("MaskFormerForInstanceSegmentation"),Klr=o(" (MaskFormer model)"),Zlr=l(),WF=a("p"),eir=o("The model is set in evaluation mode by default using "),n8e=a("code"),oir=o("model.eval()"),rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s8e=a("code"),tir=o("model.train()"),air=l(),F(QF.$$.fragment),ZNe=l(),Gd=a("h2"),HF=a("a"),l8e=a("span"),F(lL.$$.fragment),nir=l(),i8e=a("span"),sir=o("TFAutoModel"),eje=l(),Yo=a("div"),F(iL.$$.fragment),lir=l(),Od=a("p"),iir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zz=a("a"),dir=o("from_pretrained()"),cir=o(" class method or the "),eW=a("a"),fir=o("from_config()"),mir=o(` class
method.`),gir=l(),dL=a("p"),hir=o("This class cannot be instantiated directly using "),d8e=a("code"),pir=o("__init__()"),uir=o(" (throws an error)."),_ir=l(),yt=a("div"),F(cL.$$.fragment),bir=l(),c8e=a("p"),vir=o("Instantiates one of the base model classes of the library from a configuration."),Fir=l(),Vd=a("p"),Tir=o(`Note:
Loading a model from its configuration file does `),f8e=a("strong"),Mir=o("not"),Eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Cir=o("from_pretrained()"),wir=o(" to load the model weights."),Air=l(),F(UF.$$.fragment),yir=l(),wr=a("div"),F(fL.$$.fragment),Lir=l(),m8e=a("p"),xir=o("Instantiate one of the base model classes of the library from a pretrained model."),$ir=l(),Ka=a("p"),kir=o("The model class to instantiate is selected based on the "),g8e=a("code"),Sir=o("model_type"),Rir=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=a("code"),Iir=o("pretrained_model_name_or_path"),qir=o(":"),Nir=l(),N=a("ul"),JF=a("li"),u8e=a("strong"),jir=o("albert"),Dir=o(" \u2014 "),rW=a("a"),Gir=o("TFAlbertModel"),Oir=o(" (ALBERT model)"),Vir=l(),YF=a("li"),_8e=a("strong"),Xir=o("bart"),zir=o(" \u2014 "),tW=a("a"),Wir=o("TFBartModel"),Qir=o(" (BART model)"),Hir=l(),KF=a("li"),b8e=a("strong"),Uir=o("bert"),Jir=o(" \u2014 "),aW=a("a"),Yir=o("TFBertModel"),Kir=o(" (BERT model)"),Zir=l(),ZF=a("li"),v8e=a("strong"),edr=o("blenderbot"),odr=o(" \u2014 "),nW=a("a"),rdr=o("TFBlenderbotModel"),tdr=o(" (Blenderbot model)"),adr=l(),eT=a("li"),F8e=a("strong"),ndr=o("blenderbot-small"),sdr=o(" \u2014 "),sW=a("a"),ldr=o("TFBlenderbotSmallModel"),idr=o(" (BlenderbotSmall model)"),ddr=l(),oT=a("li"),T8e=a("strong"),cdr=o("camembert"),fdr=o(" \u2014 "),lW=a("a"),mdr=o("TFCamembertModel"),gdr=o(" (CamemBERT model)"),hdr=l(),rT=a("li"),M8e=a("strong"),pdr=o("clip"),udr=o(" \u2014 "),iW=a("a"),_dr=o("TFCLIPModel"),bdr=o(" (CLIP model)"),vdr=l(),tT=a("li"),E8e=a("strong"),Fdr=o("convbert"),Tdr=o(" \u2014 "),dW=a("a"),Mdr=o("TFConvBertModel"),Edr=o(" (ConvBERT model)"),Cdr=l(),aT=a("li"),C8e=a("strong"),wdr=o("convnext"),Adr=o(" \u2014 "),cW=a("a"),ydr=o("TFConvNextModel"),Ldr=o(" (ConvNext model)"),xdr=l(),nT=a("li"),w8e=a("strong"),$dr=o("ctrl"),kdr=o(" \u2014 "),fW=a("a"),Sdr=o("TFCTRLModel"),Rdr=o(" (CTRL model)"),Pdr=l(),sT=a("li"),A8e=a("strong"),Bdr=o("data2vec-vision"),Idr=o(" \u2014 "),mW=a("a"),qdr=o("TFData2VecVisionModel"),Ndr=o(" (Data2VecVision model)"),jdr=l(),lT=a("li"),y8e=a("strong"),Ddr=o("deberta"),Gdr=o(" \u2014 "),gW=a("a"),Odr=o("TFDebertaModel"),Vdr=o(" (DeBERTa model)"),Xdr=l(),iT=a("li"),L8e=a("strong"),zdr=o("deberta-v2"),Wdr=o(" \u2014 "),hW=a("a"),Qdr=o("TFDebertaV2Model"),Hdr=o(" (DeBERTa-v2 model)"),Udr=l(),dT=a("li"),x8e=a("strong"),Jdr=o("distilbert"),Ydr=o(" \u2014 "),pW=a("a"),Kdr=o("TFDistilBertModel"),Zdr=o(" (DistilBERT model)"),ecr=l(),cT=a("li"),$8e=a("strong"),ocr=o("dpr"),rcr=o(" \u2014 "),uW=a("a"),tcr=o("TFDPRQuestionEncoder"),acr=o(" (DPR model)"),ncr=l(),fT=a("li"),k8e=a("strong"),scr=o("electra"),lcr=o(" \u2014 "),_W=a("a"),icr=o("TFElectraModel"),dcr=o(" (ELECTRA model)"),ccr=l(),mT=a("li"),S8e=a("strong"),fcr=o("flaubert"),mcr=o(" \u2014 "),bW=a("a"),gcr=o("TFFlaubertModel"),hcr=o(" (FlauBERT model)"),pcr=l(),Is=a("li"),R8e=a("strong"),ucr=o("funnel"),_cr=o(" \u2014 "),vW=a("a"),bcr=o("TFFunnelModel"),vcr=o(" or "),FW=a("a"),Fcr=o("TFFunnelBaseModel"),Tcr=o(" (Funnel Transformer model)"),Mcr=l(),gT=a("li"),P8e=a("strong"),Ecr=o("gpt2"),Ccr=o(" \u2014 "),TW=a("a"),wcr=o("TFGPT2Model"),Acr=o(" (OpenAI GPT-2 model)"),ycr=l(),hT=a("li"),B8e=a("strong"),Lcr=o("gptj"),xcr=o(" \u2014 "),MW=a("a"),$cr=o("TFGPTJModel"),kcr=o(" (GPT-J model)"),Scr=l(),pT=a("li"),I8e=a("strong"),Rcr=o("hubert"),Pcr=o(" \u2014 "),EW=a("a"),Bcr=o("TFHubertModel"),Icr=o(" (Hubert model)"),qcr=l(),uT=a("li"),q8e=a("strong"),Ncr=o("layoutlm"),jcr=o(" \u2014 "),CW=a("a"),Dcr=o("TFLayoutLMModel"),Gcr=o(" (LayoutLM model)"),Ocr=l(),_T=a("li"),N8e=a("strong"),Vcr=o("led"),Xcr=o(" \u2014 "),wW=a("a"),zcr=o("TFLEDModel"),Wcr=o(" (LED model)"),Qcr=l(),bT=a("li"),j8e=a("strong"),Hcr=o("longformer"),Ucr=o(" \u2014 "),AW=a("a"),Jcr=o("TFLongformerModel"),Ycr=o(" (Longformer model)"),Kcr=l(),vT=a("li"),D8e=a("strong"),Zcr=o("lxmert"),efr=o(" \u2014 "),yW=a("a"),ofr=o("TFLxmertModel"),rfr=o(" (LXMERT model)"),tfr=l(),FT=a("li"),G8e=a("strong"),afr=o("marian"),nfr=o(" \u2014 "),LW=a("a"),sfr=o("TFMarianModel"),lfr=o(" (Marian model)"),ifr=l(),TT=a("li"),O8e=a("strong"),dfr=o("mbart"),cfr=o(" \u2014 "),xW=a("a"),ffr=o("TFMBartModel"),mfr=o(" (mBART model)"),gfr=l(),MT=a("li"),V8e=a("strong"),hfr=o("mobilebert"),pfr=o(" \u2014 "),$W=a("a"),ufr=o("TFMobileBertModel"),_fr=o(" (MobileBERT model)"),bfr=l(),ET=a("li"),X8e=a("strong"),vfr=o("mpnet"),Ffr=o(" \u2014 "),kW=a("a"),Tfr=o("TFMPNetModel"),Mfr=o(" (MPNet model)"),Efr=l(),CT=a("li"),z8e=a("strong"),Cfr=o("mt5"),wfr=o(" \u2014 "),SW=a("a"),Afr=o("TFMT5Model"),yfr=o(" (mT5 model)"),Lfr=l(),wT=a("li"),W8e=a("strong"),xfr=o("openai-gpt"),$fr=o(" \u2014 "),RW=a("a"),kfr=o("TFOpenAIGPTModel"),Sfr=o(" (OpenAI GPT model)"),Rfr=l(),AT=a("li"),Q8e=a("strong"),Pfr=o("opt"),Bfr=o(" \u2014 "),PW=a("a"),Ifr=o("TFOPTModel"),qfr=o(" (OPT model)"),Nfr=l(),yT=a("li"),H8e=a("strong"),jfr=o("pegasus"),Dfr=o(" \u2014 "),BW=a("a"),Gfr=o("TFPegasusModel"),Ofr=o(" (Pegasus model)"),Vfr=l(),LT=a("li"),U8e=a("strong"),Xfr=o("rembert"),zfr=o(" \u2014 "),IW=a("a"),Wfr=o("TFRemBertModel"),Qfr=o(" (RemBERT model)"),Hfr=l(),xT=a("li"),J8e=a("strong"),Ufr=o("roberta"),Jfr=o(" \u2014 "),qW=a("a"),Yfr=o("TFRobertaModel"),Kfr=o(" (RoBERTa model)"),Zfr=l(),$T=a("li"),Y8e=a("strong"),emr=o("roformer"),omr=o(" \u2014 "),NW=a("a"),rmr=o("TFRoFormerModel"),tmr=o(" (RoFormer model)"),amr=l(),kT=a("li"),K8e=a("strong"),nmr=o("speech_to_text"),smr=o(" \u2014 "),jW=a("a"),lmr=o("TFSpeech2TextModel"),imr=o(" (Speech2Text model)"),dmr=l(),ST=a("li"),Z8e=a("strong"),cmr=o("swin"),fmr=o(" \u2014 "),DW=a("a"),mmr=o("TFSwinModel"),gmr=o(" (Swin model)"),hmr=l(),RT=a("li"),ebe=a("strong"),pmr=o("t5"),umr=o(" \u2014 "),GW=a("a"),_mr=o("TFT5Model"),bmr=o(" (T5 model)"),vmr=l(),PT=a("li"),obe=a("strong"),Fmr=o("tapas"),Tmr=o(" \u2014 "),OW=a("a"),Mmr=o("TFTapasModel"),Emr=o(" (TAPAS model)"),Cmr=l(),BT=a("li"),rbe=a("strong"),wmr=o("transfo-xl"),Amr=o(" \u2014 "),VW=a("a"),ymr=o("TFTransfoXLModel"),Lmr=o(" (Transformer-XL model)"),xmr=l(),IT=a("li"),tbe=a("strong"),$mr=o("vit"),kmr=o(" \u2014 "),XW=a("a"),Smr=o("TFViTModel"),Rmr=o(" (ViT model)"),Pmr=l(),qT=a("li"),abe=a("strong"),Bmr=o("vit_mae"),Imr=o(" \u2014 "),zW=a("a"),qmr=o("TFViTMAEModel"),Nmr=o(" (ViTMAE model)"),jmr=l(),NT=a("li"),nbe=a("strong"),Dmr=o("wav2vec2"),Gmr=o(" \u2014 "),WW=a("a"),Omr=o("TFWav2Vec2Model"),Vmr=o(" (Wav2Vec2 model)"),Xmr=l(),jT=a("li"),sbe=a("strong"),zmr=o("xlm"),Wmr=o(" \u2014 "),QW=a("a"),Qmr=o("TFXLMModel"),Hmr=o(" (XLM model)"),Umr=l(),DT=a("li"),lbe=a("strong"),Jmr=o("xlm-roberta"),Ymr=o(" \u2014 "),HW=a("a"),Kmr=o("TFXLMRobertaModel"),Zmr=o(" (XLM-RoBERTa model)"),egr=l(),GT=a("li"),ibe=a("strong"),ogr=o("xlnet"),rgr=o(" \u2014 "),UW=a("a"),tgr=o("TFXLNetModel"),agr=o(" (XLNet model)"),ngr=l(),F(OT.$$.fragment),oje=l(),Xd=a("h2"),VT=a("a"),dbe=a("span"),F(mL.$$.fragment),sgr=l(),cbe=a("span"),lgr=o("TFAutoModelForPreTraining"),rje=l(),Ko=a("div"),F(gL.$$.fragment),igr=l(),zd=a("p"),dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JW=a("a"),cgr=o("from_pretrained()"),fgr=o(" class method or the "),YW=a("a"),mgr=o("from_config()"),ggr=o(` class
method.`),hgr=l(),hL=a("p"),pgr=o("This class cannot be instantiated directly using "),fbe=a("code"),ugr=o("__init__()"),_gr=o(" (throws an error)."),bgr=l(),Lt=a("div"),F(pL.$$.fragment),vgr=l(),mbe=a("p"),Fgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tgr=l(),Wd=a("p"),Mgr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),Egr=o("not"),Cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),wgr=o("from_pretrained()"),Agr=o(" to load the model weights."),ygr=l(),F(XT.$$.fragment),Lgr=l(),Ar=a("div"),F(uL.$$.fragment),xgr=l(),hbe=a("p"),$gr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kgr=l(),Za=a("p"),Sgr=o("The model class to instantiate is selected based on the "),pbe=a("code"),Rgr=o("model_type"),Pgr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Bgr=o("pretrained_model_name_or_path"),Igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),qgr=o("pretrained_model_name_or_path"),Ngr=o(":"),jgr=l(),se=a("ul"),zT=a("li"),bbe=a("strong"),Dgr=o("albert"),Ggr=o(" \u2014 "),ZW=a("a"),Ogr=o("TFAlbertForPreTraining"),Vgr=o(" (ALBERT model)"),Xgr=l(),WT=a("li"),vbe=a("strong"),zgr=o("bart"),Wgr=o(" \u2014 "),eQ=a("a"),Qgr=o("TFBartForConditionalGeneration"),Hgr=o(" (BART model)"),Ugr=l(),QT=a("li"),Fbe=a("strong"),Jgr=o("bert"),Ygr=o(" \u2014 "),oQ=a("a"),Kgr=o("TFBertForPreTraining"),Zgr=o(" (BERT model)"),ehr=l(),HT=a("li"),Tbe=a("strong"),ohr=o("camembert"),rhr=o(" \u2014 "),rQ=a("a"),thr=o("TFCamembertForMaskedLM"),ahr=o(" (CamemBERT model)"),nhr=l(),UT=a("li"),Mbe=a("strong"),shr=o("ctrl"),lhr=o(" \u2014 "),tQ=a("a"),ihr=o("TFCTRLLMHeadModel"),dhr=o(" (CTRL model)"),chr=l(),JT=a("li"),Ebe=a("strong"),fhr=o("distilbert"),mhr=o(" \u2014 "),aQ=a("a"),ghr=o("TFDistilBertForMaskedLM"),hhr=o(" (DistilBERT model)"),phr=l(),YT=a("li"),Cbe=a("strong"),uhr=o("electra"),_hr=o(" \u2014 "),nQ=a("a"),bhr=o("TFElectraForPreTraining"),vhr=o(" (ELECTRA model)"),Fhr=l(),KT=a("li"),wbe=a("strong"),Thr=o("flaubert"),Mhr=o(" \u2014 "),sQ=a("a"),Ehr=o("TFFlaubertWithLMHeadModel"),Chr=o(" (FlauBERT model)"),whr=l(),ZT=a("li"),Abe=a("strong"),Ahr=o("funnel"),yhr=o(" \u2014 "),lQ=a("a"),Lhr=o("TFFunnelForPreTraining"),xhr=o(" (Funnel Transformer model)"),$hr=l(),e7=a("li"),ybe=a("strong"),khr=o("gpt2"),Shr=o(" \u2014 "),iQ=a("a"),Rhr=o("TFGPT2LMHeadModel"),Phr=o(" (OpenAI GPT-2 model)"),Bhr=l(),o7=a("li"),Lbe=a("strong"),Ihr=o("layoutlm"),qhr=o(" \u2014 "),dQ=a("a"),Nhr=o("TFLayoutLMForMaskedLM"),jhr=o(" (LayoutLM model)"),Dhr=l(),r7=a("li"),xbe=a("strong"),Ghr=o("lxmert"),Ohr=o(" \u2014 "),cQ=a("a"),Vhr=o("TFLxmertForPreTraining"),Xhr=o(" (LXMERT model)"),zhr=l(),t7=a("li"),$be=a("strong"),Whr=o("mobilebert"),Qhr=o(" \u2014 "),fQ=a("a"),Hhr=o("TFMobileBertForPreTraining"),Uhr=o(" (MobileBERT model)"),Jhr=l(),a7=a("li"),kbe=a("strong"),Yhr=o("mpnet"),Khr=o(" \u2014 "),mQ=a("a"),Zhr=o("TFMPNetForMaskedLM"),epr=o(" (MPNet model)"),opr=l(),n7=a("li"),Sbe=a("strong"),rpr=o("openai-gpt"),tpr=o(" \u2014 "),gQ=a("a"),apr=o("TFOpenAIGPTLMHeadModel"),npr=o(" (OpenAI GPT model)"),spr=l(),s7=a("li"),Rbe=a("strong"),lpr=o("roberta"),ipr=o(" \u2014 "),hQ=a("a"),dpr=o("TFRobertaForMaskedLM"),cpr=o(" (RoBERTa model)"),fpr=l(),l7=a("li"),Pbe=a("strong"),mpr=o("t5"),gpr=o(" \u2014 "),pQ=a("a"),hpr=o("TFT5ForConditionalGeneration"),ppr=o(" (T5 model)"),upr=l(),i7=a("li"),Bbe=a("strong"),_pr=o("tapas"),bpr=o(" \u2014 "),uQ=a("a"),vpr=o("TFTapasForMaskedLM"),Fpr=o(" (TAPAS model)"),Tpr=l(),d7=a("li"),Ibe=a("strong"),Mpr=o("transfo-xl"),Epr=o(" \u2014 "),_Q=a("a"),Cpr=o("TFTransfoXLLMHeadModel"),wpr=o(" (Transformer-XL model)"),Apr=l(),c7=a("li"),qbe=a("strong"),ypr=o("vit_mae"),Lpr=o(" \u2014 "),bQ=a("a"),xpr=o("TFViTMAEForPreTraining"),$pr=o(" (ViTMAE model)"),kpr=l(),f7=a("li"),Nbe=a("strong"),Spr=o("xlm"),Rpr=o(" \u2014 "),vQ=a("a"),Ppr=o("TFXLMWithLMHeadModel"),Bpr=o(" (XLM model)"),Ipr=l(),m7=a("li"),jbe=a("strong"),qpr=o("xlm-roberta"),Npr=o(" \u2014 "),FQ=a("a"),jpr=o("TFXLMRobertaForMaskedLM"),Dpr=o(" (XLM-RoBERTa model)"),Gpr=l(),g7=a("li"),Dbe=a("strong"),Opr=o("xlnet"),Vpr=o(" \u2014 "),TQ=a("a"),Xpr=o("TFXLNetLMHeadModel"),zpr=o(" (XLNet model)"),Wpr=l(),F(h7.$$.fragment),tje=l(),Qd=a("h2"),p7=a("a"),Gbe=a("span"),F(_L.$$.fragment),Qpr=l(),Obe=a("span"),Hpr=o("TFAutoModelForCausalLM"),aje=l(),Zo=a("div"),F(bL.$$.fragment),Upr=l(),Hd=a("p"),Jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=a("a"),Ypr=o("from_pretrained()"),Kpr=o(" class method or the "),EQ=a("a"),Zpr=o("from_config()"),eur=o(` class
method.`),our=l(),vL=a("p"),rur=o("This class cannot be instantiated directly using "),Vbe=a("code"),tur=o("__init__()"),aur=o(" (throws an error)."),nur=l(),xt=a("div"),F(FL.$$.fragment),sur=l(),Xbe=a("p"),lur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iur=l(),Ud=a("p"),dur=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),cur=o("not"),fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),mur=o("from_pretrained()"),gur=o(" to load the model weights."),hur=l(),F(u7.$$.fragment),pur=l(),yr=a("div"),F(TL.$$.fragment),uur=l(),Wbe=a("p"),_ur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bur=l(),en=a("p"),vur=o("The model class to instantiate is selected based on the "),Qbe=a("code"),Fur=o("model_type"),Tur=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(":"),Aur=l(),Te=a("ul"),_7=a("li"),Jbe=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),wQ=a("a"),xur=o("TFBertLMHeadModel"),$ur=o(" (BERT model)"),kur=l(),b7=a("li"),Ybe=a("strong"),Sur=o("camembert"),Rur=o(" \u2014 "),AQ=a("a"),Pur=o("TFCamembertForCausalLM"),Bur=o(" (CamemBERT model)"),Iur=l(),v7=a("li"),Kbe=a("strong"),qur=o("ctrl"),Nur=o(" \u2014 "),yQ=a("a"),jur=o("TFCTRLLMHeadModel"),Dur=o(" (CTRL model)"),Gur=l(),F7=a("li"),Zbe=a("strong"),Our=o("gpt2"),Vur=o(" \u2014 "),LQ=a("a"),Xur=o("TFGPT2LMHeadModel"),zur=o(" (OpenAI GPT-2 model)"),Wur=l(),T7=a("li"),e2e=a("strong"),Qur=o("gptj"),Hur=o(" \u2014 "),xQ=a("a"),Uur=o("TFGPTJForCausalLM"),Jur=o(" (GPT-J model)"),Yur=l(),M7=a("li"),o2e=a("strong"),Kur=o("openai-gpt"),Zur=o(" \u2014 "),$Q=a("a"),e_r=o("TFOpenAIGPTLMHeadModel"),o_r=o(" (OpenAI GPT model)"),r_r=l(),E7=a("li"),r2e=a("strong"),t_r=o("opt"),a_r=o(" \u2014 "),kQ=a("a"),n_r=o("TFOPTForCausalLM"),s_r=o(" (OPT model)"),l_r=l(),C7=a("li"),t2e=a("strong"),i_r=o("rembert"),d_r=o(" \u2014 "),SQ=a("a"),c_r=o("TFRemBertForCausalLM"),f_r=o(" (RemBERT model)"),m_r=l(),w7=a("li"),a2e=a("strong"),g_r=o("roberta"),h_r=o(" \u2014 "),RQ=a("a"),p_r=o("TFRobertaForCausalLM"),u_r=o(" (RoBERTa model)"),__r=l(),A7=a("li"),n2e=a("strong"),b_r=o("roformer"),v_r=o(" \u2014 "),PQ=a("a"),F_r=o("TFRoFormerForCausalLM"),T_r=o(" (RoFormer model)"),M_r=l(),y7=a("li"),s2e=a("strong"),E_r=o("transfo-xl"),C_r=o(" \u2014 "),BQ=a("a"),w_r=o("TFTransfoXLLMHeadModel"),A_r=o(" (Transformer-XL model)"),y_r=l(),L7=a("li"),l2e=a("strong"),L_r=o("xlm"),x_r=o(" \u2014 "),IQ=a("a"),$_r=o("TFXLMWithLMHeadModel"),k_r=o(" (XLM model)"),S_r=l(),x7=a("li"),i2e=a("strong"),R_r=o("xlnet"),P_r=o(" \u2014 "),qQ=a("a"),B_r=o("TFXLNetLMHeadModel"),I_r=o(" (XLNet model)"),q_r=l(),F($7.$$.fragment),nje=l(),Jd=a("h2"),k7=a("a"),d2e=a("span"),F(ML.$$.fragment),N_r=l(),c2e=a("span"),j_r=o("TFAutoModelForImageClassification"),sje=l(),er=a("div"),F(EL.$$.fragment),D_r=l(),Yd=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),jQ=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),W_r=l(),CL=a("p"),Q_r=o("This class cannot be instantiated directly using "),f2e=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),$t=a("div"),F(wL.$$.fragment),Y_r=l(),m2e=a("p"),K_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Z_r=l(),Kd=a("p"),e1r=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),o1r=o("not"),r1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),t1r=o("from_pretrained()"),a1r=o(" to load the model weights."),n1r=l(),F(S7.$$.fragment),s1r=l(),Lr=a("div"),F(AL.$$.fragment),l1r=l(),h2e=a("p"),i1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),d1r=l(),on=a("p"),c1r=o("The model class to instantiate is selected based on the "),p2e=a("code"),f1r=o("model_type"),m1r=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),p1r=o("pretrained_model_name_or_path"),u1r=o(":"),_1r=l(),rn=a("ul"),R7=a("li"),b2e=a("strong"),b1r=o("convnext"),v1r=o(" \u2014 "),GQ=a("a"),F1r=o("TFConvNextForImageClassification"),T1r=o(" (ConvNext model)"),M1r=l(),P7=a("li"),v2e=a("strong"),E1r=o("data2vec-vision"),C1r=o(" \u2014 "),OQ=a("a"),w1r=o("TFData2VecVisionForImageClassification"),A1r=o(" (Data2VecVision model)"),y1r=l(),B7=a("li"),F2e=a("strong"),L1r=o("swin"),x1r=o(" \u2014 "),VQ=a("a"),$1r=o("TFSwinForImageClassification"),k1r=o(" (Swin model)"),S1r=l(),I7=a("li"),T2e=a("strong"),R1r=o("vit"),P1r=o(" \u2014 "),XQ=a("a"),B1r=o("TFViTForImageClassification"),I1r=o(" (ViT model)"),q1r=l(),F(q7.$$.fragment),lje=l(),Zd=a("h2"),N7=a("a"),M2e=a("span"),F(yL.$$.fragment),N1r=l(),E2e=a("span"),j1r=o("TFAutoModelForMaskedLM"),ije=l(),or=a("div"),F(LL.$$.fragment),D1r=l(),ec=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zQ=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),WQ=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),W1r=l(),xL=a("p"),Q1r=o("This class cannot be instantiated directly using "),C2e=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),kt=a("div"),F($L.$$.fragment),Y1r=l(),w2e=a("p"),K1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z1r=l(),oc=a("p"),e8r=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),o8r=o("not"),r8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),t8r=o("from_pretrained()"),a8r=o(" to load the model weights."),n8r=l(),F(j7.$$.fragment),s8r=l(),xr=a("div"),F(kL.$$.fragment),l8r=l(),y2e=a("p"),i8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d8r=l(),tn=a("p"),c8r=o("The model class to instantiate is selected based on the "),L2e=a("code"),f8r=o("model_type"),m8r=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),g8r=o("pretrained_model_name_or_path"),h8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),p8r=o("pretrained_model_name_or_path"),u8r=o(":"),_8r=l(),ie=a("ul"),D7=a("li"),k2e=a("strong"),b8r=o("albert"),v8r=o(" \u2014 "),HQ=a("a"),F8r=o("TFAlbertForMaskedLM"),T8r=o(" (ALBERT model)"),M8r=l(),G7=a("li"),S2e=a("strong"),E8r=o("bert"),C8r=o(" \u2014 "),UQ=a("a"),w8r=o("TFBertForMaskedLM"),A8r=o(" (BERT model)"),y8r=l(),O7=a("li"),R2e=a("strong"),L8r=o("camembert"),x8r=o(" \u2014 "),JQ=a("a"),$8r=o("TFCamembertForMaskedLM"),k8r=o(" (CamemBERT model)"),S8r=l(),V7=a("li"),P2e=a("strong"),R8r=o("convbert"),P8r=o(" \u2014 "),YQ=a("a"),B8r=o("TFConvBertForMaskedLM"),I8r=o(" (ConvBERT model)"),q8r=l(),X7=a("li"),B2e=a("strong"),N8r=o("deberta"),j8r=o(" \u2014 "),KQ=a("a"),D8r=o("TFDebertaForMaskedLM"),G8r=o(" (DeBERTa model)"),O8r=l(),z7=a("li"),I2e=a("strong"),V8r=o("deberta-v2"),X8r=o(" \u2014 "),ZQ=a("a"),z8r=o("TFDebertaV2ForMaskedLM"),W8r=o(" (DeBERTa-v2 model)"),Q8r=l(),W7=a("li"),q2e=a("strong"),H8r=o("distilbert"),U8r=o(" \u2014 "),eH=a("a"),J8r=o("TFDistilBertForMaskedLM"),Y8r=o(" (DistilBERT model)"),K8r=l(),Q7=a("li"),N2e=a("strong"),Z8r=o("electra"),ebr=o(" \u2014 "),oH=a("a"),obr=o("TFElectraForMaskedLM"),rbr=o(" (ELECTRA model)"),tbr=l(),H7=a("li"),j2e=a("strong"),abr=o("flaubert"),nbr=o(" \u2014 "),rH=a("a"),sbr=o("TFFlaubertWithLMHeadModel"),lbr=o(" (FlauBERT model)"),ibr=l(),U7=a("li"),D2e=a("strong"),dbr=o("funnel"),cbr=o(" \u2014 "),tH=a("a"),fbr=o("TFFunnelForMaskedLM"),mbr=o(" (Funnel Transformer model)"),gbr=l(),J7=a("li"),G2e=a("strong"),hbr=o("layoutlm"),pbr=o(" \u2014 "),aH=a("a"),ubr=o("TFLayoutLMForMaskedLM"),_br=o(" (LayoutLM model)"),bbr=l(),Y7=a("li"),O2e=a("strong"),vbr=o("longformer"),Fbr=o(" \u2014 "),nH=a("a"),Tbr=o("TFLongformerForMaskedLM"),Mbr=o(" (Longformer model)"),Ebr=l(),K7=a("li"),V2e=a("strong"),Cbr=o("mobilebert"),wbr=o(" \u2014 "),sH=a("a"),Abr=o("TFMobileBertForMaskedLM"),ybr=o(" (MobileBERT model)"),Lbr=l(),Z7=a("li"),X2e=a("strong"),xbr=o("mpnet"),$br=o(" \u2014 "),lH=a("a"),kbr=o("TFMPNetForMaskedLM"),Sbr=o(" (MPNet model)"),Rbr=l(),eM=a("li"),z2e=a("strong"),Pbr=o("rembert"),Bbr=o(" \u2014 "),iH=a("a"),Ibr=o("TFRemBertForMaskedLM"),qbr=o(" (RemBERT model)"),Nbr=l(),oM=a("li"),W2e=a("strong"),jbr=o("roberta"),Dbr=o(" \u2014 "),dH=a("a"),Gbr=o("TFRobertaForMaskedLM"),Obr=o(" (RoBERTa model)"),Vbr=l(),rM=a("li"),Q2e=a("strong"),Xbr=o("roformer"),zbr=o(" \u2014 "),cH=a("a"),Wbr=o("TFRoFormerForMaskedLM"),Qbr=o(" (RoFormer model)"),Hbr=l(),tM=a("li"),H2e=a("strong"),Ubr=o("tapas"),Jbr=o(" \u2014 "),fH=a("a"),Ybr=o("TFTapasForMaskedLM"),Kbr=o(" (TAPAS model)"),Zbr=l(),aM=a("li"),U2e=a("strong"),e2r=o("xlm"),o2r=o(" \u2014 "),mH=a("a"),r2r=o("TFXLMWithLMHeadModel"),t2r=o(" (XLM model)"),a2r=l(),nM=a("li"),J2e=a("strong"),n2r=o("xlm-roberta"),s2r=o(" \u2014 "),gH=a("a"),l2r=o("TFXLMRobertaForMaskedLM"),i2r=o(" (XLM-RoBERTa model)"),d2r=l(),F(sM.$$.fragment),dje=l(),rc=a("h2"),lM=a("a"),Y2e=a("span"),F(SL.$$.fragment),c2r=l(),K2e=a("span"),f2r=o("TFAutoModelForSeq2SeqLM"),cje=l(),rr=a("div"),F(RL.$$.fragment),m2r=l(),tc=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hH=a("a"),h2r=o("from_pretrained()"),p2r=o(" class method or the "),pH=a("a"),u2r=o("from_config()"),_2r=o(` class
method.`),b2r=l(),PL=a("p"),v2r=o("This class cannot be instantiated directly using "),Z2e=a("code"),F2r=o("__init__()"),T2r=o(" (throws an error)."),M2r=l(),St=a("div"),F(BL.$$.fragment),E2r=l(),eve=a("p"),C2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w2r=l(),ac=a("p"),A2r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),y2r=o("not"),L2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),x2r=o("from_pretrained()"),$2r=o(" to load the model weights."),k2r=l(),F(iM.$$.fragment),S2r=l(),$r=a("div"),F(IL.$$.fragment),R2r=l(),rve=a("p"),P2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B2r=l(),an=a("p"),I2r=o("The model class to instantiate is selected based on the "),tve=a("code"),q2r=o("model_type"),N2r=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(":"),V2r=l(),ye=a("ul"),dM=a("li"),sve=a("strong"),X2r=o("bart"),z2r=o(" \u2014 "),_H=a("a"),W2r=o("TFBartForConditionalGeneration"),Q2r=o(" (BART model)"),H2r=l(),cM=a("li"),lve=a("strong"),U2r=o("blenderbot"),J2r=o(" \u2014 "),bH=a("a"),Y2r=o("TFBlenderbotForConditionalGeneration"),K2r=o(" (Blenderbot model)"),Z2r=l(),fM=a("li"),ive=a("strong"),evr=o("blenderbot-small"),ovr=o(" \u2014 "),vH=a("a"),rvr=o("TFBlenderbotSmallForConditionalGeneration"),tvr=o(" (BlenderbotSmall model)"),avr=l(),mM=a("li"),dve=a("strong"),nvr=o("encoder-decoder"),svr=o(" \u2014 "),FH=a("a"),lvr=o("TFEncoderDecoderModel"),ivr=o(" (Encoder decoder model)"),dvr=l(),gM=a("li"),cve=a("strong"),cvr=o("led"),fvr=o(" \u2014 "),TH=a("a"),mvr=o("TFLEDForConditionalGeneration"),gvr=o(" (LED model)"),hvr=l(),hM=a("li"),fve=a("strong"),pvr=o("marian"),uvr=o(" \u2014 "),MH=a("a"),_vr=o("TFMarianMTModel"),bvr=o(" (Marian model)"),vvr=l(),pM=a("li"),mve=a("strong"),Fvr=o("mbart"),Tvr=o(" \u2014 "),EH=a("a"),Mvr=o("TFMBartForConditionalGeneration"),Evr=o(" (mBART model)"),Cvr=l(),uM=a("li"),gve=a("strong"),wvr=o("mt5"),Avr=o(" \u2014 "),CH=a("a"),yvr=o("TFMT5ForConditionalGeneration"),Lvr=o(" (mT5 model)"),xvr=l(),_M=a("li"),hve=a("strong"),$vr=o("pegasus"),kvr=o(" \u2014 "),wH=a("a"),Svr=o("TFPegasusForConditionalGeneration"),Rvr=o(" (Pegasus model)"),Pvr=l(),bM=a("li"),pve=a("strong"),Bvr=o("t5"),Ivr=o(" \u2014 "),AH=a("a"),qvr=o("TFT5ForConditionalGeneration"),Nvr=o(" (T5 model)"),jvr=l(),F(vM.$$.fragment),fje=l(),nc=a("h2"),FM=a("a"),uve=a("span"),F(qL.$$.fragment),Dvr=l(),_ve=a("span"),Gvr=o("TFAutoModelForSequenceClassification"),mje=l(),tr=a("div"),F(NL.$$.fragment),Ovr=l(),sc=a("p"),Vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yH=a("a"),Xvr=o("from_pretrained()"),zvr=o(" class method or the "),LH=a("a"),Wvr=o("from_config()"),Qvr=o(` class
method.`),Hvr=l(),jL=a("p"),Uvr=o("This class cannot be instantiated directly using "),bve=a("code"),Jvr=o("__init__()"),Yvr=o(" (throws an error)."),Kvr=l(),Rt=a("div"),F(DL.$$.fragment),Zvr=l(),vve=a("p"),e3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o3r=l(),lc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(TM.$$.fragment),i3r=l(),kr=a("div"),F(GL.$$.fragment),d3r=l(),Tve=a("p"),c3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f3r=l(),nn=a("p"),m3r=o("The model class to instantiate is selected based on the "),Mve=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),p3r=o("pretrained_model_name_or_path"),u3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),oe=a("ul"),MM=a("li"),wve=a("strong"),F3r=o("albert"),T3r=o(" \u2014 "),$H=a("a"),M3r=o("TFAlbertForSequenceClassification"),E3r=o(" (ALBERT model)"),C3r=l(),EM=a("li"),Ave=a("strong"),w3r=o("bert"),A3r=o(" \u2014 "),kH=a("a"),y3r=o("TFBertForSequenceClassification"),L3r=o(" (BERT model)"),x3r=l(),CM=a("li"),yve=a("strong"),$3r=o("camembert"),k3r=o(" \u2014 "),SH=a("a"),S3r=o("TFCamembertForSequenceClassification"),R3r=o(" (CamemBERT model)"),P3r=l(),wM=a("li"),Lve=a("strong"),B3r=o("convbert"),I3r=o(" \u2014 "),RH=a("a"),q3r=o("TFConvBertForSequenceClassification"),N3r=o(" (ConvBERT model)"),j3r=l(),AM=a("li"),xve=a("strong"),D3r=o("ctrl"),G3r=o(" \u2014 "),PH=a("a"),O3r=o("TFCTRLForSequenceClassification"),V3r=o(" (CTRL model)"),X3r=l(),yM=a("li"),$ve=a("strong"),z3r=o("deberta"),W3r=o(" \u2014 "),BH=a("a"),Q3r=o("TFDebertaForSequenceClassification"),H3r=o(" (DeBERTa model)"),U3r=l(),LM=a("li"),kve=a("strong"),J3r=o("deberta-v2"),Y3r=o(" \u2014 "),IH=a("a"),K3r=o("TFDebertaV2ForSequenceClassification"),Z3r=o(" (DeBERTa-v2 model)"),eFr=l(),xM=a("li"),Sve=a("strong"),oFr=o("distilbert"),rFr=o(" \u2014 "),qH=a("a"),tFr=o("TFDistilBertForSequenceClassification"),aFr=o(" (DistilBERT model)"),nFr=l(),$M=a("li"),Rve=a("strong"),sFr=o("electra"),lFr=o(" \u2014 "),NH=a("a"),iFr=o("TFElectraForSequenceClassification"),dFr=o(" (ELECTRA model)"),cFr=l(),kM=a("li"),Pve=a("strong"),fFr=o("flaubert"),mFr=o(" \u2014 "),jH=a("a"),gFr=o("TFFlaubertForSequenceClassification"),hFr=o(" (FlauBERT model)"),pFr=l(),SM=a("li"),Bve=a("strong"),uFr=o("funnel"),_Fr=o(" \u2014 "),DH=a("a"),bFr=o("TFFunnelForSequenceClassification"),vFr=o(" (Funnel Transformer model)"),FFr=l(),RM=a("li"),Ive=a("strong"),TFr=o("gpt2"),MFr=o(" \u2014 "),GH=a("a"),EFr=o("TFGPT2ForSequenceClassification"),CFr=o(" (OpenAI GPT-2 model)"),wFr=l(),PM=a("li"),qve=a("strong"),AFr=o("gptj"),yFr=o(" \u2014 "),OH=a("a"),LFr=o("TFGPTJForSequenceClassification"),xFr=o(" (GPT-J model)"),$Fr=l(),BM=a("li"),Nve=a("strong"),kFr=o("layoutlm"),SFr=o(" \u2014 "),VH=a("a"),RFr=o("TFLayoutLMForSequenceClassification"),PFr=o(" (LayoutLM model)"),BFr=l(),IM=a("li"),jve=a("strong"),IFr=o("longformer"),qFr=o(" \u2014 "),XH=a("a"),NFr=o("TFLongformerForSequenceClassification"),jFr=o(" (Longformer model)"),DFr=l(),qM=a("li"),Dve=a("strong"),GFr=o("mobilebert"),OFr=o(" \u2014 "),zH=a("a"),VFr=o("TFMobileBertForSequenceClassification"),XFr=o(" (MobileBERT model)"),zFr=l(),NM=a("li"),Gve=a("strong"),WFr=o("mpnet"),QFr=o(" \u2014 "),WH=a("a"),HFr=o("TFMPNetForSequenceClassification"),UFr=o(" (MPNet model)"),JFr=l(),jM=a("li"),Ove=a("strong"),YFr=o("openai-gpt"),KFr=o(" \u2014 "),QH=a("a"),ZFr=o("TFOpenAIGPTForSequenceClassification"),eTr=o(" (OpenAI GPT model)"),oTr=l(),DM=a("li"),Vve=a("strong"),rTr=o("rembert"),tTr=o(" \u2014 "),HH=a("a"),aTr=o("TFRemBertForSequenceClassification"),nTr=o(" (RemBERT model)"),sTr=l(),GM=a("li"),Xve=a("strong"),lTr=o("roberta"),iTr=o(" \u2014 "),UH=a("a"),dTr=o("TFRobertaForSequenceClassification"),cTr=o(" (RoBERTa model)"),fTr=l(),OM=a("li"),zve=a("strong"),mTr=o("roformer"),gTr=o(" \u2014 "),JH=a("a"),hTr=o("TFRoFormerForSequenceClassification"),pTr=o(" (RoFormer model)"),uTr=l(),VM=a("li"),Wve=a("strong"),_Tr=o("tapas"),bTr=o(" \u2014 "),YH=a("a"),vTr=o("TFTapasForSequenceClassification"),FTr=o(" (TAPAS model)"),TTr=l(),XM=a("li"),Qve=a("strong"),MTr=o("transfo-xl"),ETr=o(" \u2014 "),KH=a("a"),CTr=o("TFTransfoXLForSequenceClassification"),wTr=o(" (Transformer-XL model)"),ATr=l(),zM=a("li"),Hve=a("strong"),yTr=o("xlm"),LTr=o(" \u2014 "),ZH=a("a"),xTr=o("TFXLMForSequenceClassification"),$Tr=o(" (XLM model)"),kTr=l(),WM=a("li"),Uve=a("strong"),STr=o("xlm-roberta"),RTr=o(" \u2014 "),eU=a("a"),PTr=o("TFXLMRobertaForSequenceClassification"),BTr=o(" (XLM-RoBERTa model)"),ITr=l(),QM=a("li"),Jve=a("strong"),qTr=o("xlnet"),NTr=o(" \u2014 "),oU=a("a"),jTr=o("TFXLNetForSequenceClassification"),DTr=o(" (XLNet model)"),GTr=l(),F(HM.$$.fragment),gje=l(),ic=a("h2"),UM=a("a"),Yve=a("span"),F(OL.$$.fragment),OTr=l(),Kve=a("span"),VTr=o("TFAutoModelForMultipleChoice"),hje=l(),ar=a("div"),F(VL.$$.fragment),XTr=l(),dc=a("p"),zTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rU=a("a"),WTr=o("from_pretrained()"),QTr=o(" class method or the "),tU=a("a"),HTr=o("from_config()"),UTr=o(` class
method.`),JTr=l(),XL=a("p"),YTr=o("This class cannot be instantiated directly using "),Zve=a("code"),KTr=o("__init__()"),ZTr=o(" (throws an error)."),e7r=l(),Pt=a("div"),F(zL.$$.fragment),o7r=l(),e3e=a("p"),r7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t7r=l(),cc=a("p"),a7r=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),n7r=o("not"),s7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),l7r=o("from_pretrained()"),i7r=o(" to load the model weights."),d7r=l(),F(JM.$$.fragment),c7r=l(),Sr=a("div"),F(WL.$$.fragment),f7r=l(),r3e=a("p"),m7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g7r=l(),sn=a("p"),h7r=o("The model class to instantiate is selected based on the "),t3e=a("code"),p7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),_7r=o("pretrained_model_name_or_path"),b7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),v7r=o("pretrained_model_name_or_path"),F7r=o(":"),T7r=l(),pe=a("ul"),YM=a("li"),s3e=a("strong"),M7r=o("albert"),E7r=o(" \u2014 "),nU=a("a"),C7r=o("TFAlbertForMultipleChoice"),w7r=o(" (ALBERT model)"),A7r=l(),KM=a("li"),l3e=a("strong"),y7r=o("bert"),L7r=o(" \u2014 "),sU=a("a"),x7r=o("TFBertForMultipleChoice"),$7r=o(" (BERT model)"),k7r=l(),ZM=a("li"),i3e=a("strong"),S7r=o("camembert"),R7r=o(" \u2014 "),lU=a("a"),P7r=o("TFCamembertForMultipleChoice"),B7r=o(" (CamemBERT model)"),I7r=l(),e4=a("li"),d3e=a("strong"),q7r=o("convbert"),N7r=o(" \u2014 "),iU=a("a"),j7r=o("TFConvBertForMultipleChoice"),D7r=o(" (ConvBERT model)"),G7r=l(),o4=a("li"),c3e=a("strong"),O7r=o("distilbert"),V7r=o(" \u2014 "),dU=a("a"),X7r=o("TFDistilBertForMultipleChoice"),z7r=o(" (DistilBERT model)"),W7r=l(),r4=a("li"),f3e=a("strong"),Q7r=o("electra"),H7r=o(" \u2014 "),cU=a("a"),U7r=o("TFElectraForMultipleChoice"),J7r=o(" (ELECTRA model)"),Y7r=l(),t4=a("li"),m3e=a("strong"),K7r=o("flaubert"),Z7r=o(" \u2014 "),fU=a("a"),eMr=o("TFFlaubertForMultipleChoice"),oMr=o(" (FlauBERT model)"),rMr=l(),a4=a("li"),g3e=a("strong"),tMr=o("funnel"),aMr=o(" \u2014 "),mU=a("a"),nMr=o("TFFunnelForMultipleChoice"),sMr=o(" (Funnel Transformer model)"),lMr=l(),n4=a("li"),h3e=a("strong"),iMr=o("longformer"),dMr=o(" \u2014 "),gU=a("a"),cMr=o("TFLongformerForMultipleChoice"),fMr=o(" (Longformer model)"),mMr=l(),s4=a("li"),p3e=a("strong"),gMr=o("mobilebert"),hMr=o(" \u2014 "),hU=a("a"),pMr=o("TFMobileBertForMultipleChoice"),uMr=o(" (MobileBERT model)"),_Mr=l(),l4=a("li"),u3e=a("strong"),bMr=o("mpnet"),vMr=o(" \u2014 "),pU=a("a"),FMr=o("TFMPNetForMultipleChoice"),TMr=o(" (MPNet model)"),MMr=l(),i4=a("li"),_3e=a("strong"),EMr=o("rembert"),CMr=o(" \u2014 "),uU=a("a"),wMr=o("TFRemBertForMultipleChoice"),AMr=o(" (RemBERT model)"),yMr=l(),d4=a("li"),b3e=a("strong"),LMr=o("roberta"),xMr=o(" \u2014 "),_U=a("a"),$Mr=o("TFRobertaForMultipleChoice"),kMr=o(" (RoBERTa model)"),SMr=l(),c4=a("li"),v3e=a("strong"),RMr=o("roformer"),PMr=o(" \u2014 "),bU=a("a"),BMr=o("TFRoFormerForMultipleChoice"),IMr=o(" (RoFormer model)"),qMr=l(),f4=a("li"),F3e=a("strong"),NMr=o("xlm"),jMr=o(" \u2014 "),vU=a("a"),DMr=o("TFXLMForMultipleChoice"),GMr=o(" (XLM model)"),OMr=l(),m4=a("li"),T3e=a("strong"),VMr=o("xlm-roberta"),XMr=o(" \u2014 "),FU=a("a"),zMr=o("TFXLMRobertaForMultipleChoice"),WMr=o(" (XLM-RoBERTa model)"),QMr=l(),g4=a("li"),M3e=a("strong"),HMr=o("xlnet"),UMr=o(" \u2014 "),TU=a("a"),JMr=o("TFXLNetForMultipleChoice"),YMr=o(" (XLNet model)"),KMr=l(),F(h4.$$.fragment),pje=l(),fc=a("h2"),p4=a("a"),E3e=a("span"),F(QL.$$.fragment),ZMr=l(),C3e=a("span"),e4r=o("TFAutoModelForNextSentencePrediction"),uje=l(),nr=a("div"),F(HL.$$.fragment),o4r=l(),mc=a("p"),r4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=a("a"),t4r=o("from_pretrained()"),a4r=o(" class method or the "),EU=a("a"),n4r=o("from_config()"),s4r=o(` class
method.`),l4r=l(),UL=a("p"),i4r=o("This class cannot be instantiated directly using "),w3e=a("code"),d4r=o("__init__()"),c4r=o(" (throws an error)."),f4r=l(),Bt=a("div"),F(JL.$$.fragment),m4r=l(),A3e=a("p"),g4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h4r=l(),gc=a("p"),p4r=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),u4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),b4r=o("from_pretrained()"),v4r=o(" to load the model weights."),F4r=l(),F(u4.$$.fragment),T4r=l(),Rr=a("div"),F(YL.$$.fragment),M4r=l(),L3e=a("p"),E4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),C4r=l(),ln=a("p"),w4r=o("The model class to instantiate is selected based on the "),x3e=a("code"),A4r=o("model_type"),y4r=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),L4r=o("pretrained_model_name_or_path"),x4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),$4r=o("pretrained_model_name_or_path"),k4r=o(":"),S4r=l(),KL=a("ul"),_4=a("li"),S3e=a("strong"),R4r=o("bert"),P4r=o(" \u2014 "),wU=a("a"),B4r=o("TFBertForNextSentencePrediction"),I4r=o(" (BERT model)"),q4r=l(),b4=a("li"),R3e=a("strong"),N4r=o("mobilebert"),j4r=o(" \u2014 "),AU=a("a"),D4r=o("TFMobileBertForNextSentencePrediction"),G4r=o(" (MobileBERT model)"),O4r=l(),F(v4.$$.fragment),_je=l(),hc=a("h2"),F4=a("a"),P3e=a("span"),F(ZL.$$.fragment),V4r=l(),B3e=a("span"),X4r=o("TFAutoModelForTableQuestionAnswering"),bje=l(),sr=a("div"),F(e9.$$.fragment),z4r=l(),pc=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yU=a("a"),Q4r=o("from_pretrained()"),H4r=o(" class method or the "),LU=a("a"),U4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),o9=a("p"),K4r=o("This class cannot be instantiated directly using "),I3e=a("code"),Z4r=o("__init__()"),eEr=o(" (throws an error)."),oEr=l(),It=a("div"),F(r9.$$.fragment),rEr=l(),q3e=a("p"),tEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aEr=l(),uc=a("p"),nEr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),sEr=o("not"),lEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),iEr=o("from_pretrained()"),dEr=o(" to load the model weights."),cEr=l(),F(T4.$$.fragment),fEr=l(),Pr=a("div"),F(t9.$$.fragment),mEr=l(),j3e=a("p"),gEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hEr=l(),dn=a("p"),pEr=o("The model class to instantiate is selected based on the "),D3e=a("code"),uEr=o("model_type"),_Er=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(":"),MEr=l(),V3e=a("ul"),M4=a("li"),X3e=a("strong"),EEr=o("tapas"),CEr=o(" \u2014 "),$U=a("a"),wEr=o("TFTapasForQuestionAnswering"),AEr=o(" (TAPAS model)"),yEr=l(),F(E4.$$.fragment),vje=l(),_c=a("h2"),C4=a("a"),z3e=a("span"),F(a9.$$.fragment),LEr=l(),W3e=a("span"),xEr=o("TFAutoModelForTokenClassification"),Fje=l(),lr=a("div"),F(n9.$$.fragment),$Er=l(),bc=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kU=a("a"),SEr=o("from_pretrained()"),REr=o(" class method or the "),SU=a("a"),PEr=o("from_config()"),BEr=o(` class
method.`),IEr=l(),s9=a("p"),qEr=o("This class cannot be instantiated directly using "),Q3e=a("code"),NEr=o("__init__()"),jEr=o(" (throws an error)."),DEr=l(),qt=a("div"),F(l9.$$.fragment),GEr=l(),H3e=a("p"),OEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VEr=l(),vc=a("p"),XEr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),QEr=o("from_pretrained()"),HEr=o(" to load the model weights."),UEr=l(),F(w4.$$.fragment),JEr=l(),Br=a("div"),F(i9.$$.fragment),YEr=l(),J3e=a("p"),KEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZEr=l(),cn=a("p"),eCr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),oCr=o("model_type"),rCr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(":"),lCr=l(),de=a("ul"),A4=a("li"),eFe=a("strong"),iCr=o("albert"),dCr=o(" \u2014 "),PU=a("a"),cCr=o("TFAlbertForTokenClassification"),fCr=o(" (ALBERT model)"),mCr=l(),y4=a("li"),oFe=a("strong"),gCr=o("bert"),hCr=o(" \u2014 "),BU=a("a"),pCr=o("TFBertForTokenClassification"),uCr=o(" (BERT model)"),_Cr=l(),L4=a("li"),rFe=a("strong"),bCr=o("camembert"),vCr=o(" \u2014 "),IU=a("a"),FCr=o("TFCamembertForTokenClassification"),TCr=o(" (CamemBERT model)"),MCr=l(),x4=a("li"),tFe=a("strong"),ECr=o("convbert"),CCr=o(" \u2014 "),qU=a("a"),wCr=o("TFConvBertForTokenClassification"),ACr=o(" (ConvBERT model)"),yCr=l(),$4=a("li"),aFe=a("strong"),LCr=o("deberta"),xCr=o(" \u2014 "),NU=a("a"),$Cr=o("TFDebertaForTokenClassification"),kCr=o(" (DeBERTa model)"),SCr=l(),k4=a("li"),nFe=a("strong"),RCr=o("deberta-v2"),PCr=o(" \u2014 "),jU=a("a"),BCr=o("TFDebertaV2ForTokenClassification"),ICr=o(" (DeBERTa-v2 model)"),qCr=l(),S4=a("li"),sFe=a("strong"),NCr=o("distilbert"),jCr=o(" \u2014 "),DU=a("a"),DCr=o("TFDistilBertForTokenClassification"),GCr=o(" (DistilBERT model)"),OCr=l(),R4=a("li"),lFe=a("strong"),VCr=o("electra"),XCr=o(" \u2014 "),GU=a("a"),zCr=o("TFElectraForTokenClassification"),WCr=o(" (ELECTRA model)"),QCr=l(),P4=a("li"),iFe=a("strong"),HCr=o("flaubert"),UCr=o(" \u2014 "),OU=a("a"),JCr=o("TFFlaubertForTokenClassification"),YCr=o(" (FlauBERT model)"),KCr=l(),B4=a("li"),dFe=a("strong"),ZCr=o("funnel"),e5r=o(" \u2014 "),VU=a("a"),o5r=o("TFFunnelForTokenClassification"),r5r=o(" (Funnel Transformer model)"),t5r=l(),I4=a("li"),cFe=a("strong"),a5r=o("layoutlm"),n5r=o(" \u2014 "),XU=a("a"),s5r=o("TFLayoutLMForTokenClassification"),l5r=o(" (LayoutLM model)"),i5r=l(),q4=a("li"),fFe=a("strong"),d5r=o("longformer"),c5r=o(" \u2014 "),zU=a("a"),f5r=o("TFLongformerForTokenClassification"),m5r=o(" (Longformer model)"),g5r=l(),N4=a("li"),mFe=a("strong"),h5r=o("mobilebert"),p5r=o(" \u2014 "),WU=a("a"),u5r=o("TFMobileBertForTokenClassification"),_5r=o(" (MobileBERT model)"),b5r=l(),j4=a("li"),gFe=a("strong"),v5r=o("mpnet"),F5r=o(" \u2014 "),QU=a("a"),T5r=o("TFMPNetForTokenClassification"),M5r=o(" (MPNet model)"),E5r=l(),D4=a("li"),hFe=a("strong"),C5r=o("rembert"),w5r=o(" \u2014 "),HU=a("a"),A5r=o("TFRemBertForTokenClassification"),y5r=o(" (RemBERT model)"),L5r=l(),G4=a("li"),pFe=a("strong"),x5r=o("roberta"),$5r=o(" \u2014 "),UU=a("a"),k5r=o("TFRobertaForTokenClassification"),S5r=o(" (RoBERTa model)"),R5r=l(),O4=a("li"),uFe=a("strong"),P5r=o("roformer"),B5r=o(" \u2014 "),JU=a("a"),I5r=o("TFRoFormerForTokenClassification"),q5r=o(" (RoFormer model)"),N5r=l(),V4=a("li"),_Fe=a("strong"),j5r=o("xlm"),D5r=o(" \u2014 "),YU=a("a"),G5r=o("TFXLMForTokenClassification"),O5r=o(" (XLM model)"),V5r=l(),X4=a("li"),bFe=a("strong"),X5r=o("xlm-roberta"),z5r=o(" \u2014 "),KU=a("a"),W5r=o("TFXLMRobertaForTokenClassification"),Q5r=o(" (XLM-RoBERTa model)"),H5r=l(),z4=a("li"),vFe=a("strong"),U5r=o("xlnet"),J5r=o(" \u2014 "),ZU=a("a"),Y5r=o("TFXLNetForTokenClassification"),K5r=o(" (XLNet model)"),Z5r=l(),F(W4.$$.fragment),Tje=l(),Fc=a("h2"),Q4=a("a"),FFe=a("span"),F(d9.$$.fragment),ewr=l(),TFe=a("span"),owr=o("TFAutoModelForQuestionAnswering"),Mje=l(),ir=a("div"),F(c9.$$.fragment),rwr=l(),Tc=a("p"),twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eJ=a("a"),awr=o("from_pretrained()"),nwr=o(" class method or the "),oJ=a("a"),swr=o("from_config()"),lwr=o(` class
method.`),iwr=l(),f9=a("p"),dwr=o("This class cannot be instantiated directly using "),MFe=a("code"),cwr=o("__init__()"),fwr=o(" (throws an error)."),mwr=l(),Nt=a("div"),F(m9.$$.fragment),gwr=l(),EFe=a("p"),hwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pwr=l(),Mc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),_wr=o("not"),bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),vwr=o("from_pretrained()"),Fwr=o(" to load the model weights."),Twr=l(),F(H4.$$.fragment),Mwr=l(),Ir=a("div"),F(g9.$$.fragment),Ewr=l(),wFe=a("p"),Cwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wwr=l(),fn=a("p"),Awr=o("The model class to instantiate is selected based on the "),AFe=a("code"),ywr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),xwr=o("pretrained_model_name_or_path"),$wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),kwr=o("pretrained_model_name_or_path"),Swr=o(":"),Rwr=l(),ce=a("ul"),U4=a("li"),xFe=a("strong"),Pwr=o("albert"),Bwr=o(" \u2014 "),tJ=a("a"),Iwr=o("TFAlbertForQuestionAnswering"),qwr=o(" (ALBERT model)"),Nwr=l(),J4=a("li"),$Fe=a("strong"),jwr=o("bert"),Dwr=o(" \u2014 "),aJ=a("a"),Gwr=o("TFBertForQuestionAnswering"),Owr=o(" (BERT model)"),Vwr=l(),Y4=a("li"),kFe=a("strong"),Xwr=o("camembert"),zwr=o(" \u2014 "),nJ=a("a"),Wwr=o("TFCamembertForQuestionAnswering"),Qwr=o(" (CamemBERT model)"),Hwr=l(),K4=a("li"),SFe=a("strong"),Uwr=o("convbert"),Jwr=o(" \u2014 "),sJ=a("a"),Ywr=o("TFConvBertForQuestionAnswering"),Kwr=o(" (ConvBERT model)"),Zwr=l(),Z4=a("li"),RFe=a("strong"),e0r=o("deberta"),o0r=o(" \u2014 "),lJ=a("a"),r0r=o("TFDebertaForQuestionAnswering"),t0r=o(" (DeBERTa model)"),a0r=l(),eE=a("li"),PFe=a("strong"),n0r=o("deberta-v2"),s0r=o(" \u2014 "),iJ=a("a"),l0r=o("TFDebertaV2ForQuestionAnswering"),i0r=o(" (DeBERTa-v2 model)"),d0r=l(),oE=a("li"),BFe=a("strong"),c0r=o("distilbert"),f0r=o(" \u2014 "),dJ=a("a"),m0r=o("TFDistilBertForQuestionAnswering"),g0r=o(" (DistilBERT model)"),h0r=l(),rE=a("li"),IFe=a("strong"),p0r=o("electra"),u0r=o(" \u2014 "),cJ=a("a"),_0r=o("TFElectraForQuestionAnswering"),b0r=o(" (ELECTRA model)"),v0r=l(),tE=a("li"),qFe=a("strong"),F0r=o("flaubert"),T0r=o(" \u2014 "),fJ=a("a"),M0r=o("TFFlaubertForQuestionAnsweringSimple"),E0r=o(" (FlauBERT model)"),C0r=l(),aE=a("li"),NFe=a("strong"),w0r=o("funnel"),A0r=o(" \u2014 "),mJ=a("a"),y0r=o("TFFunnelForQuestionAnswering"),L0r=o(" (Funnel Transformer model)"),x0r=l(),nE=a("li"),jFe=a("strong"),$0r=o("gptj"),k0r=o(" \u2014 "),gJ=a("a"),S0r=o("TFGPTJForQuestionAnswering"),R0r=o(" (GPT-J model)"),P0r=l(),sE=a("li"),DFe=a("strong"),B0r=o("longformer"),I0r=o(" \u2014 "),hJ=a("a"),q0r=o("TFLongformerForQuestionAnswering"),N0r=o(" (Longformer model)"),j0r=l(),lE=a("li"),GFe=a("strong"),D0r=o("mobilebert"),G0r=o(" \u2014 "),pJ=a("a"),O0r=o("TFMobileBertForQuestionAnswering"),V0r=o(" (MobileBERT model)"),X0r=l(),iE=a("li"),OFe=a("strong"),z0r=o("mpnet"),W0r=o(" \u2014 "),uJ=a("a"),Q0r=o("TFMPNetForQuestionAnswering"),H0r=o(" (MPNet model)"),U0r=l(),dE=a("li"),VFe=a("strong"),J0r=o("rembert"),Y0r=o(" \u2014 "),_J=a("a"),K0r=o("TFRemBertForQuestionAnswering"),Z0r=o(" (RemBERT model)"),eAr=l(),cE=a("li"),XFe=a("strong"),oAr=o("roberta"),rAr=o(" \u2014 "),bJ=a("a"),tAr=o("TFRobertaForQuestionAnswering"),aAr=o(" (RoBERTa model)"),nAr=l(),fE=a("li"),zFe=a("strong"),sAr=o("roformer"),lAr=o(" \u2014 "),vJ=a("a"),iAr=o("TFRoFormerForQuestionAnswering"),dAr=o(" (RoFormer model)"),cAr=l(),mE=a("li"),WFe=a("strong"),fAr=o("xlm"),mAr=o(" \u2014 "),FJ=a("a"),gAr=o("TFXLMForQuestionAnsweringSimple"),hAr=o(" (XLM model)"),pAr=l(),gE=a("li"),QFe=a("strong"),uAr=o("xlm-roberta"),_Ar=o(" \u2014 "),TJ=a("a"),bAr=o("TFXLMRobertaForQuestionAnswering"),vAr=o(" (XLM-RoBERTa model)"),FAr=l(),hE=a("li"),HFe=a("strong"),TAr=o("xlnet"),MAr=o(" \u2014 "),MJ=a("a"),EAr=o("TFXLNetForQuestionAnsweringSimple"),CAr=o(" (XLNet model)"),wAr=l(),F(pE.$$.fragment),Eje=l(),Ec=a("h2"),uE=a("a"),UFe=a("span"),F(h9.$$.fragment),AAr=l(),JFe=a("span"),yAr=o("TFAutoModelForVision2Seq"),Cje=l(),dr=a("div"),F(p9.$$.fragment),LAr=l(),Cc=a("p"),xAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EJ=a("a"),$Ar=o("from_pretrained()"),kAr=o(" class method or the "),CJ=a("a"),SAr=o("from_config()"),RAr=o(` class
method.`),PAr=l(),u9=a("p"),BAr=o("This class cannot be instantiated directly using "),YFe=a("code"),IAr=o("__init__()"),qAr=o(" (throws an error)."),NAr=l(),jt=a("div"),F(_9.$$.fragment),jAr=l(),KFe=a("p"),DAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GAr=l(),wc=a("p"),OAr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),VAr=o("not"),XAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),zAr=o("from_pretrained()"),WAr=o(" to load the model weights."),QAr=l(),F(_E.$$.fragment),HAr=l(),qr=a("div"),F(b9.$$.fragment),UAr=l(),eTe=a("p"),JAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YAr=l(),mn=a("p"),KAr=o("The model class to instantiate is selected based on the "),oTe=a("code"),ZAr=o("model_type"),e6r=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(":"),n6r=l(),aTe=a("ul"),bE=a("li"),nTe=a("strong"),s6r=o("vision-encoder-decoder"),l6r=o(" \u2014 "),AJ=a("a"),i6r=o("TFVisionEncoderDecoderModel"),d6r=o(" (Vision Encoder decoder model)"),c6r=l(),F(vE.$$.fragment),wje=l(),Ac=a("h2"),FE=a("a"),sTe=a("span"),F(v9.$$.fragment),f6r=l(),lTe=a("span"),m6r=o("TFAutoModelForSpeechSeq2Seq"),Aje=l(),cr=a("div"),F(F9.$$.fragment),g6r=l(),yc=a("p"),h6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=a("a"),p6r=o("from_pretrained()"),u6r=o(" class method or the "),LJ=a("a"),_6r=o("from_config()"),b6r=o(` class
method.`),v6r=l(),T9=a("p"),F6r=o("This class cannot be instantiated directly using "),iTe=a("code"),T6r=o("__init__()"),M6r=o(" (throws an error)."),E6r=l(),Dt=a("div"),F(M9.$$.fragment),C6r=l(),dTe=a("p"),w6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A6r=l(),Lc=a("p"),y6r=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),L6r=o("not"),x6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),$6r=o("from_pretrained()"),k6r=o(" to load the model weights."),S6r=l(),F(TE.$$.fragment),R6r=l(),Nr=a("div"),F(E9.$$.fragment),P6r=l(),fTe=a("p"),B6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I6r=l(),gn=a("p"),q6r=o("The model class to instantiate is selected based on the "),mTe=a("code"),N6r=o("model_type"),j6r=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),O6r=o("pretrained_model_name_or_path"),V6r=o(":"),X6r=l(),pTe=a("ul"),ME=a("li"),uTe=a("strong"),z6r=o("speech_to_text"),W6r=o(" \u2014 "),$J=a("a"),Q6r=o("TFSpeech2TextForConditionalGeneration"),H6r=o(" (Speech2Text model)"),U6r=l(),F(EE.$$.fragment),yje=l(),xc=a("h2"),CE=a("a"),_Te=a("span"),F(C9.$$.fragment),J6r=l(),bTe=a("span"),Y6r=o("FlaxAutoModel"),Lje=l(),fr=a("div"),F(w9.$$.fragment),K6r=l(),$c=a("p"),Z6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kJ=a("a"),eyr=o("from_pretrained()"),oyr=o(" class method or the "),SJ=a("a"),ryr=o("from_config()"),tyr=o(` class
method.`),ayr=l(),A9=a("p"),nyr=o("This class cannot be instantiated directly using "),vTe=a("code"),syr=o("__init__()"),lyr=o(" (throws an error)."),iyr=l(),Gt=a("div"),F(y9.$$.fragment),dyr=l(),FTe=a("p"),cyr=o("Instantiates one of the base model classes of the library from a configuration."),fyr=l(),kc=a("p"),myr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),gyr=o("not"),hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),pyr=o("from_pretrained()"),uyr=o(" to load the model weights."),_yr=l(),F(wE.$$.fragment),byr=l(),jr=a("div"),F(L9.$$.fragment),vyr=l(),MTe=a("p"),Fyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Tyr=l(),hn=a("p"),Myr=o("The model class to instantiate is selected based on the "),ETe=a("code"),Eyr=o("model_type"),Cyr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),yyr=o("pretrained_model_name_or_path"),Lyr=o(":"),xyr=l(),re=a("ul"),AE=a("li"),ATe=a("strong"),$yr=o("albert"),kyr=o(" \u2014 "),PJ=a("a"),Syr=o("FlaxAlbertModel"),Ryr=o(" (ALBERT model)"),Pyr=l(),yE=a("li"),yTe=a("strong"),Byr=o("bart"),Iyr=o(" \u2014 "),BJ=a("a"),qyr=o("FlaxBartModel"),Nyr=o(" (BART model)"),jyr=l(),LE=a("li"),LTe=a("strong"),Dyr=o("beit"),Gyr=o(" \u2014 "),IJ=a("a"),Oyr=o("FlaxBeitModel"),Vyr=o(" (BEiT model)"),Xyr=l(),xE=a("li"),xTe=a("strong"),zyr=o("bert"),Wyr=o(" \u2014 "),qJ=a("a"),Qyr=o("FlaxBertModel"),Hyr=o(" (BERT model)"),Uyr=l(),$E=a("li"),$Te=a("strong"),Jyr=o("big_bird"),Yyr=o(" \u2014 "),NJ=a("a"),Kyr=o("FlaxBigBirdModel"),Zyr=o(" (BigBird model)"),eLr=l(),kE=a("li"),kTe=a("strong"),oLr=o("blenderbot"),rLr=o(" \u2014 "),jJ=a("a"),tLr=o("FlaxBlenderbotModel"),aLr=o(" (Blenderbot model)"),nLr=l(),SE=a("li"),STe=a("strong"),sLr=o("blenderbot-small"),lLr=o(" \u2014 "),DJ=a("a"),iLr=o("FlaxBlenderbotSmallModel"),dLr=o(" (BlenderbotSmall model)"),cLr=l(),RE=a("li"),RTe=a("strong"),fLr=o("clip"),mLr=o(" \u2014 "),GJ=a("a"),gLr=o("FlaxCLIPModel"),hLr=o(" (CLIP model)"),pLr=l(),PE=a("li"),PTe=a("strong"),uLr=o("distilbert"),_Lr=o(" \u2014 "),OJ=a("a"),bLr=o("FlaxDistilBertModel"),vLr=o(" (DistilBERT model)"),FLr=l(),BE=a("li"),BTe=a("strong"),TLr=o("electra"),MLr=o(" \u2014 "),VJ=a("a"),ELr=o("FlaxElectraModel"),CLr=o(" (ELECTRA model)"),wLr=l(),IE=a("li"),ITe=a("strong"),ALr=o("gpt2"),yLr=o(" \u2014 "),XJ=a("a"),LLr=o("FlaxGPT2Model"),xLr=o(" (OpenAI GPT-2 model)"),$Lr=l(),qE=a("li"),qTe=a("strong"),kLr=o("gpt_neo"),SLr=o(" \u2014 "),zJ=a("a"),RLr=o("FlaxGPTNeoModel"),PLr=o(" (GPT Neo model)"),BLr=l(),NE=a("li"),NTe=a("strong"),ILr=o("gptj"),qLr=o(" \u2014 "),WJ=a("a"),NLr=o("FlaxGPTJModel"),jLr=o(" (GPT-J model)"),DLr=l(),jE=a("li"),jTe=a("strong"),GLr=o("marian"),OLr=o(" \u2014 "),QJ=a("a"),VLr=o("FlaxMarianModel"),XLr=o(" (Marian model)"),zLr=l(),DE=a("li"),DTe=a("strong"),WLr=o("mbart"),QLr=o(" \u2014 "),HJ=a("a"),HLr=o("FlaxMBartModel"),ULr=o(" (mBART model)"),JLr=l(),GE=a("li"),GTe=a("strong"),YLr=o("mt5"),KLr=o(" \u2014 "),UJ=a("a"),ZLr=o("FlaxMT5Model"),e9r=o(" (mT5 model)"),o9r=l(),OE=a("li"),OTe=a("strong"),r9r=o("opt"),t9r=o(" \u2014 "),JJ=a("a"),a9r=o("FlaxOPTModel"),n9r=o(" (OPT model)"),s9r=l(),VE=a("li"),VTe=a("strong"),l9r=o("pegasus"),i9r=o(" \u2014 "),YJ=a("a"),d9r=o("FlaxPegasusModel"),c9r=o(" (Pegasus model)"),f9r=l(),XE=a("li"),XTe=a("strong"),m9r=o("roberta"),g9r=o(" \u2014 "),KJ=a("a"),h9r=o("FlaxRobertaModel"),p9r=o(" (RoBERTa model)"),u9r=l(),zE=a("li"),zTe=a("strong"),_9r=o("roformer"),b9r=o(" \u2014 "),ZJ=a("a"),v9r=o("FlaxRoFormerModel"),F9r=o(" (RoFormer model)"),T9r=l(),WE=a("li"),WTe=a("strong"),M9r=o("t5"),E9r=o(" \u2014 "),eY=a("a"),C9r=o("FlaxT5Model"),w9r=o(" (T5 model)"),A9r=l(),QE=a("li"),QTe=a("strong"),y9r=o("vision-text-dual-encoder"),L9r=o(" \u2014 "),oY=a("a"),x9r=o("FlaxVisionTextDualEncoderModel"),$9r=o(" (VisionTextDualEncoder model)"),k9r=l(),HE=a("li"),HTe=a("strong"),S9r=o("vit"),R9r=o(" \u2014 "),rY=a("a"),P9r=o("FlaxViTModel"),B9r=o(" (ViT model)"),I9r=l(),UE=a("li"),UTe=a("strong"),q9r=o("wav2vec2"),N9r=o(" \u2014 "),tY=a("a"),j9r=o("FlaxWav2Vec2Model"),D9r=o(" (Wav2Vec2 model)"),G9r=l(),JE=a("li"),JTe=a("strong"),O9r=o("xglm"),V9r=o(" \u2014 "),aY=a("a"),X9r=o("FlaxXGLMModel"),z9r=o(" (XGLM model)"),W9r=l(),YE=a("li"),YTe=a("strong"),Q9r=o("xlm-roberta"),H9r=o(" \u2014 "),nY=a("a"),U9r=o("FlaxXLMRobertaModel"),J9r=o(" (XLM-RoBERTa model)"),Y9r=l(),F(KE.$$.fragment),xje=l(),Sc=a("h2"),ZE=a("a"),KTe=a("span"),F(x9.$$.fragment),K9r=l(),ZTe=a("span"),Z9r=o("FlaxAutoModelForCausalLM"),$je=l(),mr=a("div"),F($9.$$.fragment),exr=l(),Rc=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sY=a("a"),rxr=o("from_pretrained()"),txr=o(" class method or the "),lY=a("a"),axr=o("from_config()"),nxr=o(` class
method.`),sxr=l(),k9=a("p"),lxr=o("This class cannot be instantiated directly using "),e7e=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),Ot=a("div"),F(S9.$$.fragment),fxr=l(),o7e=a("p"),mxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gxr=l(),Pc=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),pxr=o("not"),uxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),_xr=o("from_pretrained()"),bxr=o(" to load the model weights."),vxr=l(),F(eC.$$.fragment),Fxr=l(),Dr=a("div"),F(R9.$$.fragment),Txr=l(),t7e=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Exr=l(),pn=a("p"),Cxr=o("The model class to instantiate is selected based on the "),a7e=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),xxr=o("pretrained_model_name_or_path"),$xr=o(":"),kxr=l(),Le=a("ul"),oC=a("li"),l7e=a("strong"),Sxr=o("bart"),Rxr=o(" \u2014 "),dY=a("a"),Pxr=o("FlaxBartForCausalLM"),Bxr=o(" (BART model)"),Ixr=l(),rC=a("li"),i7e=a("strong"),qxr=o("bert"),Nxr=o(" \u2014 "),cY=a("a"),jxr=o("FlaxBertForCausalLM"),Dxr=o(" (BERT model)"),Gxr=l(),tC=a("li"),d7e=a("strong"),Oxr=o("big_bird"),Vxr=o(" \u2014 "),fY=a("a"),Xxr=o("FlaxBigBirdForCausalLM"),zxr=o(" (BigBird model)"),Wxr=l(),aC=a("li"),c7e=a("strong"),Qxr=o("electra"),Hxr=o(" \u2014 "),mY=a("a"),Uxr=o("FlaxElectraForCausalLM"),Jxr=o(" (ELECTRA model)"),Yxr=l(),nC=a("li"),f7e=a("strong"),Kxr=o("gpt2"),Zxr=o(" \u2014 "),gY=a("a"),e$r=o("FlaxGPT2LMHeadModel"),o$r=o(" (OpenAI GPT-2 model)"),r$r=l(),sC=a("li"),m7e=a("strong"),t$r=o("gpt_neo"),a$r=o(" \u2014 "),hY=a("a"),n$r=o("FlaxGPTNeoForCausalLM"),s$r=o(" (GPT Neo model)"),l$r=l(),lC=a("li"),g7e=a("strong"),i$r=o("gptj"),d$r=o(" \u2014 "),pY=a("a"),c$r=o("FlaxGPTJForCausalLM"),f$r=o(" (GPT-J model)"),m$r=l(),iC=a("li"),h7e=a("strong"),g$r=o("opt"),h$r=o(" \u2014 "),uY=a("a"),p$r=o("FlaxOPTForCausalLM"),u$r=o(" (OPT model)"),_$r=l(),dC=a("li"),p7e=a("strong"),b$r=o("roberta"),v$r=o(" \u2014 "),_Y=a("a"),F$r=o("FlaxRobertaForCausalLM"),T$r=o(" (RoBERTa model)"),M$r=l(),cC=a("li"),u7e=a("strong"),E$r=o("xglm"),C$r=o(" \u2014 "),bY=a("a"),w$r=o("FlaxXGLMForCausalLM"),A$r=o(" (XGLM model)"),y$r=l(),F(fC.$$.fragment),kje=l(),Bc=a("h2"),mC=a("a"),_7e=a("span"),F(P9.$$.fragment),L$r=l(),b7e=a("span"),x$r=o("FlaxAutoModelForPreTraining"),Sje=l(),gr=a("div"),F(B9.$$.fragment),$$r=l(),Ic=a("p"),k$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vY=a("a"),S$r=o("from_pretrained()"),R$r=o(" class method or the "),FY=a("a"),P$r=o("from_config()"),B$r=o(` class
method.`),I$r=l(),I9=a("p"),q$r=o("This class cannot be instantiated directly using "),v7e=a("code"),N$r=o("__init__()"),j$r=o(" (throws an error)."),D$r=l(),Vt=a("div"),F(q9.$$.fragment),G$r=l(),F7e=a("p"),O$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V$r=l(),qc=a("p"),X$r=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),z$r=o("not"),W$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),Q$r=o("from_pretrained()"),H$r=o(" to load the model weights."),U$r=l(),F(gC.$$.fragment),J$r=l(),Gr=a("div"),F(N9.$$.fragment),Y$r=l(),M7e=a("p"),K$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z$r=l(),un=a("p"),ekr=o("The model class to instantiate is selected based on the "),E7e=a("code"),okr=o("model_type"),rkr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(":"),lkr=l(),Ee=a("ul"),hC=a("li"),A7e=a("strong"),ikr=o("albert"),dkr=o(" \u2014 "),MY=a("a"),ckr=o("FlaxAlbertForPreTraining"),fkr=o(" (ALBERT model)"),mkr=l(),pC=a("li"),y7e=a("strong"),gkr=o("bart"),hkr=o(" \u2014 "),EY=a("a"),pkr=o("FlaxBartForConditionalGeneration"),ukr=o(" (BART model)"),_kr=l(),uC=a("li"),L7e=a("strong"),bkr=o("bert"),vkr=o(" \u2014 "),CY=a("a"),Fkr=o("FlaxBertForPreTraining"),Tkr=o(" (BERT model)"),Mkr=l(),_C=a("li"),x7e=a("strong"),Ekr=o("big_bird"),Ckr=o(" \u2014 "),wY=a("a"),wkr=o("FlaxBigBirdForPreTraining"),Akr=o(" (BigBird model)"),ykr=l(),bC=a("li"),$7e=a("strong"),Lkr=o("electra"),xkr=o(" \u2014 "),AY=a("a"),$kr=o("FlaxElectraForPreTraining"),kkr=o(" (ELECTRA model)"),Skr=l(),vC=a("li"),k7e=a("strong"),Rkr=o("mbart"),Pkr=o(" \u2014 "),yY=a("a"),Bkr=o("FlaxMBartForConditionalGeneration"),Ikr=o(" (mBART model)"),qkr=l(),FC=a("li"),S7e=a("strong"),Nkr=o("mt5"),jkr=o(" \u2014 "),LY=a("a"),Dkr=o("FlaxMT5ForConditionalGeneration"),Gkr=o(" (mT5 model)"),Okr=l(),TC=a("li"),R7e=a("strong"),Vkr=o("roberta"),Xkr=o(" \u2014 "),xY=a("a"),zkr=o("FlaxRobertaForMaskedLM"),Wkr=o(" (RoBERTa model)"),Qkr=l(),MC=a("li"),P7e=a("strong"),Hkr=o("roformer"),Ukr=o(" \u2014 "),$Y=a("a"),Jkr=o("FlaxRoFormerForMaskedLM"),Ykr=o(" (RoFormer model)"),Kkr=l(),EC=a("li"),B7e=a("strong"),Zkr=o("t5"),eSr=o(" \u2014 "),kY=a("a"),oSr=o("FlaxT5ForConditionalGeneration"),rSr=o(" (T5 model)"),tSr=l(),CC=a("li"),I7e=a("strong"),aSr=o("wav2vec2"),nSr=o(" \u2014 "),SY=a("a"),sSr=o("FlaxWav2Vec2ForPreTraining"),lSr=o(" (Wav2Vec2 model)"),iSr=l(),wC=a("li"),q7e=a("strong"),dSr=o("xlm-roberta"),cSr=o(" \u2014 "),RY=a("a"),fSr=o("FlaxXLMRobertaForMaskedLM"),mSr=o(" (XLM-RoBERTa model)"),gSr=l(),F(AC.$$.fragment),Rje=l(),Nc=a("h2"),yC=a("a"),N7e=a("span"),F(j9.$$.fragment),hSr=l(),j7e=a("span"),pSr=o("FlaxAutoModelForMaskedLM"),Pje=l(),hr=a("div"),F(D9.$$.fragment),uSr=l(),jc=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PY=a("a"),bSr=o("from_pretrained()"),vSr=o(" class method or the "),BY=a("a"),FSr=o("from_config()"),TSr=o(` class
method.`),MSr=l(),G9=a("p"),ESr=o("This class cannot be instantiated directly using "),D7e=a("code"),CSr=o("__init__()"),wSr=o(" (throws an error)."),ASr=l(),Xt=a("div"),F(O9.$$.fragment),ySr=l(),G7e=a("p"),LSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xSr=l(),Dc=a("p"),$Sr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),kSr=o("not"),SSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),RSr=o("from_pretrained()"),PSr=o(" to load the model weights."),BSr=l(),F(LC.$$.fragment),ISr=l(),Or=a("div"),F(V9.$$.fragment),qSr=l(),V7e=a("p"),NSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jSr=l(),_n=a("p"),DSr=o("The model class to instantiate is selected based on the "),X7e=a("code"),GSr=o("model_type"),OSr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),zSr=o("pretrained_model_name_or_path"),WSr=o(":"),QSr=l(),xe=a("ul"),xC=a("li"),Q7e=a("strong"),HSr=o("albert"),USr=o(" \u2014 "),qY=a("a"),JSr=o("FlaxAlbertForMaskedLM"),YSr=o(" (ALBERT model)"),KSr=l(),$C=a("li"),H7e=a("strong"),ZSr=o("bart"),eRr=o(" \u2014 "),NY=a("a"),oRr=o("FlaxBartForConditionalGeneration"),rRr=o(" (BART model)"),tRr=l(),kC=a("li"),U7e=a("strong"),aRr=o("bert"),nRr=o(" \u2014 "),jY=a("a"),sRr=o("FlaxBertForMaskedLM"),lRr=o(" (BERT model)"),iRr=l(),SC=a("li"),J7e=a("strong"),dRr=o("big_bird"),cRr=o(" \u2014 "),DY=a("a"),fRr=o("FlaxBigBirdForMaskedLM"),mRr=o(" (BigBird model)"),gRr=l(),RC=a("li"),Y7e=a("strong"),hRr=o("distilbert"),pRr=o(" \u2014 "),GY=a("a"),uRr=o("FlaxDistilBertForMaskedLM"),_Rr=o(" (DistilBERT model)"),bRr=l(),PC=a("li"),K7e=a("strong"),vRr=o("electra"),FRr=o(" \u2014 "),OY=a("a"),TRr=o("FlaxElectraForMaskedLM"),MRr=o(" (ELECTRA model)"),ERr=l(),BC=a("li"),Z7e=a("strong"),CRr=o("mbart"),wRr=o(" \u2014 "),VY=a("a"),ARr=o("FlaxMBartForConditionalGeneration"),yRr=o(" (mBART model)"),LRr=l(),IC=a("li"),eMe=a("strong"),xRr=o("roberta"),$Rr=o(" \u2014 "),XY=a("a"),kRr=o("FlaxRobertaForMaskedLM"),SRr=o(" (RoBERTa model)"),RRr=l(),qC=a("li"),oMe=a("strong"),PRr=o("roformer"),BRr=o(" \u2014 "),zY=a("a"),IRr=o("FlaxRoFormerForMaskedLM"),qRr=o(" (RoFormer model)"),NRr=l(),NC=a("li"),rMe=a("strong"),jRr=o("xlm-roberta"),DRr=o(" \u2014 "),WY=a("a"),GRr=o("FlaxXLMRobertaForMaskedLM"),ORr=o(" (XLM-RoBERTa model)"),VRr=l(),F(jC.$$.fragment),Bje=l(),Gc=a("h2"),DC=a("a"),tMe=a("span"),F(X9.$$.fragment),XRr=l(),aMe=a("span"),zRr=o("FlaxAutoModelForSeq2SeqLM"),Ije=l(),pr=a("div"),F(z9.$$.fragment),WRr=l(),Oc=a("p"),QRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QY=a("a"),HRr=o("from_pretrained()"),URr=o(" class method or the "),HY=a("a"),JRr=o("from_config()"),YRr=o(` class
method.`),KRr=l(),W9=a("p"),ZRr=o("This class cannot be instantiated directly using "),nMe=a("code"),ePr=o("__init__()"),oPr=o(" (throws an error)."),rPr=l(),zt=a("div"),F(Q9.$$.fragment),tPr=l(),sMe=a("p"),aPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nPr=l(),Vc=a("p"),sPr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),lPr=o("not"),iPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),dPr=o("from_pretrained()"),cPr=o(" to load the model weights."),fPr=l(),F(GC.$$.fragment),mPr=l(),Vr=a("div"),F(H9.$$.fragment),gPr=l(),iMe=a("p"),hPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pPr=l(),bn=a("p"),uPr=o("The model class to instantiate is selected based on the "),dMe=a("code"),_Pr=o("model_type"),bPr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),TPr=o("pretrained_model_name_or_path"),MPr=o(":"),EPr=l(),Pe=a("ul"),OC=a("li"),mMe=a("strong"),CPr=o("bart"),wPr=o(" \u2014 "),JY=a("a"),APr=o("FlaxBartForConditionalGeneration"),yPr=o(" (BART model)"),LPr=l(),VC=a("li"),gMe=a("strong"),xPr=o("blenderbot"),$Pr=o(" \u2014 "),YY=a("a"),kPr=o("FlaxBlenderbotForConditionalGeneration"),SPr=o(" (Blenderbot model)"),RPr=l(),XC=a("li"),hMe=a("strong"),PPr=o("blenderbot-small"),BPr=o(" \u2014 "),KY=a("a"),IPr=o("FlaxBlenderbotSmallForConditionalGeneration"),qPr=o(" (BlenderbotSmall model)"),NPr=l(),zC=a("li"),pMe=a("strong"),jPr=o("encoder-decoder"),DPr=o(" \u2014 "),ZY=a("a"),GPr=o("FlaxEncoderDecoderModel"),OPr=o(" (Encoder decoder model)"),VPr=l(),WC=a("li"),uMe=a("strong"),XPr=o("marian"),zPr=o(" \u2014 "),eK=a("a"),WPr=o("FlaxMarianMTModel"),QPr=o(" (Marian model)"),HPr=l(),QC=a("li"),_Me=a("strong"),UPr=o("mbart"),JPr=o(" \u2014 "),oK=a("a"),YPr=o("FlaxMBartForConditionalGeneration"),KPr=o(" (mBART model)"),ZPr=l(),HC=a("li"),bMe=a("strong"),eBr=o("mt5"),oBr=o(" \u2014 "),rK=a("a"),rBr=o("FlaxMT5ForConditionalGeneration"),tBr=o(" (mT5 model)"),aBr=l(),UC=a("li"),vMe=a("strong"),nBr=o("pegasus"),sBr=o(" \u2014 "),tK=a("a"),lBr=o("FlaxPegasusForConditionalGeneration"),iBr=o(" (Pegasus model)"),dBr=l(),JC=a("li"),FMe=a("strong"),cBr=o("t5"),fBr=o(" \u2014 "),aK=a("a"),mBr=o("FlaxT5ForConditionalGeneration"),gBr=o(" (T5 model)"),hBr=l(),F(YC.$$.fragment),qje=l(),Xc=a("h2"),KC=a("a"),TMe=a("span"),F(U9.$$.fragment),pBr=l(),MMe=a("span"),uBr=o("FlaxAutoModelForSequenceClassification"),Nje=l(),ur=a("div"),F(J9.$$.fragment),_Br=l(),zc=a("p"),bBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nK=a("a"),vBr=o("from_pretrained()"),FBr=o(" class method or the "),sK=a("a"),TBr=o("from_config()"),MBr=o(` class
method.`),EBr=l(),Y9=a("p"),CBr=o("This class cannot be instantiated directly using "),EMe=a("code"),wBr=o("__init__()"),ABr=o(" (throws an error)."),yBr=l(),Wt=a("div"),F(K9.$$.fragment),LBr=l(),CMe=a("p"),xBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Br=l(),Wc=a("p"),kBr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),SBr=o("not"),RBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),PBr=o("from_pretrained()"),BBr=o(" to load the model weights."),IBr=l(),F(ZC.$$.fragment),qBr=l(),Xr=a("div"),F(Z9.$$.fragment),NBr=l(),AMe=a("p"),jBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DBr=l(),vn=a("p"),GBr=o("The model class to instantiate is selected based on the "),yMe=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),WBr=o("pretrained_model_name_or_path"),QBr=o(":"),HBr=l(),$e=a("ul"),e5=a("li"),$Me=a("strong"),UBr=o("albert"),JBr=o(" \u2014 "),iK=a("a"),YBr=o("FlaxAlbertForSequenceClassification"),KBr=o(" (ALBERT model)"),ZBr=l(),o5=a("li"),kMe=a("strong"),eIr=o("bart"),oIr=o(" \u2014 "),dK=a("a"),rIr=o("FlaxBartForSequenceClassification"),tIr=o(" (BART model)"),aIr=l(),r5=a("li"),SMe=a("strong"),nIr=o("bert"),sIr=o(" \u2014 "),cK=a("a"),lIr=o("FlaxBertForSequenceClassification"),iIr=o(" (BERT model)"),dIr=l(),t5=a("li"),RMe=a("strong"),cIr=o("big_bird"),fIr=o(" \u2014 "),fK=a("a"),mIr=o("FlaxBigBirdForSequenceClassification"),gIr=o(" (BigBird model)"),hIr=l(),a5=a("li"),PMe=a("strong"),pIr=o("distilbert"),uIr=o(" \u2014 "),mK=a("a"),_Ir=o("FlaxDistilBertForSequenceClassification"),bIr=o(" (DistilBERT model)"),vIr=l(),n5=a("li"),BMe=a("strong"),FIr=o("electra"),TIr=o(" \u2014 "),gK=a("a"),MIr=o("FlaxElectraForSequenceClassification"),EIr=o(" (ELECTRA model)"),CIr=l(),s5=a("li"),IMe=a("strong"),wIr=o("mbart"),AIr=o(" \u2014 "),hK=a("a"),yIr=o("FlaxMBartForSequenceClassification"),LIr=o(" (mBART model)"),xIr=l(),l5=a("li"),qMe=a("strong"),$Ir=o("roberta"),kIr=o(" \u2014 "),pK=a("a"),SIr=o("FlaxRobertaForSequenceClassification"),RIr=o(" (RoBERTa model)"),PIr=l(),i5=a("li"),NMe=a("strong"),BIr=o("roformer"),IIr=o(" \u2014 "),uK=a("a"),qIr=o("FlaxRoFormerForSequenceClassification"),NIr=o(" (RoFormer model)"),jIr=l(),d5=a("li"),jMe=a("strong"),DIr=o("xlm-roberta"),GIr=o(" \u2014 "),_K=a("a"),OIr=o("FlaxXLMRobertaForSequenceClassification"),VIr=o(" (XLM-RoBERTa model)"),XIr=l(),F(c5.$$.fragment),jje=l(),Qc=a("h2"),f5=a("a"),DMe=a("span"),F(ex.$$.fragment),zIr=l(),GMe=a("span"),WIr=o("FlaxAutoModelForQuestionAnswering"),Dje=l(),_r=a("div"),F(ox.$$.fragment),QIr=l(),Hc=a("p"),HIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bK=a("a"),UIr=o("from_pretrained()"),JIr=o(" class method or the "),vK=a("a"),YIr=o("from_config()"),KIr=o(` class
method.`),ZIr=l(),rx=a("p"),eqr=o("This class cannot be instantiated directly using "),OMe=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(tx.$$.fragment),aqr=l(),VMe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Uc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(m5.$$.fragment),gqr=l(),zr=a("div"),F(ax.$$.fragment),hqr=l(),zMe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uqr=l(),Fn=a("p"),_qr=o("The model class to instantiate is selected based on the "),WMe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),ke=a("ul"),g5=a("li"),UMe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),TK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),h5=a("li"),JMe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),MK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),p5=a("li"),YMe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),EK=a("a"),qqr=o("FlaxBertForQuestionAnswering"),Nqr=o(" (BERT model)"),jqr=l(),u5=a("li"),KMe=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),CK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),_5=a("li"),ZMe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),wK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),b5=a("li"),e4e=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),AK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),eNr=l(),v5=a("li"),o4e=a("strong"),oNr=o("mbart"),rNr=o(" \u2014 "),yK=a("a"),tNr=o("FlaxMBartForQuestionAnswering"),aNr=o(" (mBART model)"),nNr=l(),F5=a("li"),r4e=a("strong"),sNr=o("roberta"),lNr=o(" \u2014 "),LK=a("a"),iNr=o("FlaxRobertaForQuestionAnswering"),dNr=o(" (RoBERTa model)"),cNr=l(),T5=a("li"),t4e=a("strong"),fNr=o("roformer"),mNr=o(" \u2014 "),xK=a("a"),gNr=o("FlaxRoFormerForQuestionAnswering"),hNr=o(" (RoFormer model)"),pNr=l(),M5=a("li"),a4e=a("strong"),uNr=o("xlm-roberta"),_Nr=o(" \u2014 "),$K=a("a"),bNr=o("FlaxXLMRobertaForQuestionAnswering"),vNr=o(" (XLM-RoBERTa model)"),FNr=l(),F(E5.$$.fragment),Gje=l(),Jc=a("h2"),C5=a("a"),n4e=a("span"),F(nx.$$.fragment),TNr=l(),s4e=a("span"),MNr=o("FlaxAutoModelForTokenClassification"),Oje=l(),br=a("div"),F(sx.$$.fragment),ENr=l(),Yc=a("p"),CNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kK=a("a"),wNr=o("from_pretrained()"),ANr=o(" class method or the "),SK=a("a"),yNr=o("from_config()"),LNr=o(` class
method.`),xNr=l(),lx=a("p"),$Nr=o("This class cannot be instantiated directly using "),l4e=a("code"),kNr=o("__init__()"),SNr=o(" (throws an error)."),RNr=l(),Ht=a("div"),F(ix.$$.fragment),PNr=l(),i4e=a("p"),BNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),INr=l(),Kc=a("p"),qNr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),NNr=o("not"),jNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),DNr=o("from_pretrained()"),GNr=o(" to load the model weights."),ONr=l(),F(w5.$$.fragment),VNr=l(),Wr=a("div"),F(dx.$$.fragment),XNr=l(),c4e=a("p"),zNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WNr=l(),Tn=a("p"),QNr=o("The model class to instantiate is selected based on the "),f4e=a("code"),HNr=o("model_type"),UNr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),JNr=o("pretrained_model_name_or_path"),YNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),KNr=o("pretrained_model_name_or_path"),ZNr=o(":"),ejr=l(),Ge=a("ul"),A5=a("li"),h4e=a("strong"),ojr=o("albert"),rjr=o(" \u2014 "),PK=a("a"),tjr=o("FlaxAlbertForTokenClassification"),ajr=o(" (ALBERT model)"),njr=l(),y5=a("li"),p4e=a("strong"),sjr=o("bert"),ljr=o(" \u2014 "),BK=a("a"),ijr=o("FlaxBertForTokenClassification"),djr=o(" (BERT model)"),cjr=l(),L5=a("li"),u4e=a("strong"),fjr=o("big_bird"),mjr=o(" \u2014 "),IK=a("a"),gjr=o("FlaxBigBirdForTokenClassification"),hjr=o(" (BigBird model)"),pjr=l(),x5=a("li"),_4e=a("strong"),ujr=o("distilbert"),_jr=o(" \u2014 "),qK=a("a"),bjr=o("FlaxDistilBertForTokenClassification"),vjr=o(" (DistilBERT model)"),Fjr=l(),$5=a("li"),b4e=a("strong"),Tjr=o("electra"),Mjr=o(" \u2014 "),NK=a("a"),Ejr=o("FlaxElectraForTokenClassification"),Cjr=o(" (ELECTRA model)"),wjr=l(),k5=a("li"),v4e=a("strong"),Ajr=o("roberta"),yjr=o(" \u2014 "),jK=a("a"),Ljr=o("FlaxRobertaForTokenClassification"),xjr=o(" (RoBERTa model)"),$jr=l(),S5=a("li"),F4e=a("strong"),kjr=o("roformer"),Sjr=o(" \u2014 "),DK=a("a"),Rjr=o("FlaxRoFormerForTokenClassification"),Pjr=o(" (RoFormer model)"),Bjr=l(),R5=a("li"),T4e=a("strong"),Ijr=o("xlm-roberta"),qjr=o(" \u2014 "),GK=a("a"),Njr=o("FlaxXLMRobertaForTokenClassification"),jjr=o(" (XLM-RoBERTa model)"),Djr=l(),F(P5.$$.fragment),Vje=l(),Zc=a("h2"),B5=a("a"),M4e=a("span"),F(cx.$$.fragment),Gjr=l(),E4e=a("span"),Ojr=o("FlaxAutoModelForMultipleChoice"),Xje=l(),vr=a("div"),F(fx.$$.fragment),Vjr=l(),ef=a("p"),Xjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OK=a("a"),zjr=o("from_pretrained()"),Wjr=o(" class method or the "),VK=a("a"),Qjr=o("from_config()"),Hjr=o(` class
method.`),Ujr=l(),mx=a("p"),Jjr=o("This class cannot be instantiated directly using "),C4e=a("code"),Yjr=o("__init__()"),Kjr=o(" (throws an error)."),Zjr=l(),Ut=a("div"),F(gx.$$.fragment),eDr=l(),w4e=a("p"),oDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rDr=l(),of=a("p"),tDr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),aDr=o("not"),nDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),sDr=o("from_pretrained()"),lDr=o(" to load the model weights."),iDr=l(),F(I5.$$.fragment),dDr=l(),Qr=a("div"),F(hx.$$.fragment),cDr=l(),y4e=a("p"),fDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mDr=l(),Mn=a("p"),gDr=o("The model class to instantiate is selected based on the "),L4e=a("code"),hDr=o("model_type"),pDr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),uDr=o("pretrained_model_name_or_path"),_Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(":"),FDr=l(),Oe=a("ul"),q5=a("li"),k4e=a("strong"),TDr=o("albert"),MDr=o(" \u2014 "),zK=a("a"),EDr=o("FlaxAlbertForMultipleChoice"),CDr=o(" (ALBERT model)"),wDr=l(),N5=a("li"),S4e=a("strong"),ADr=o("bert"),yDr=o(" \u2014 "),WK=a("a"),LDr=o("FlaxBertForMultipleChoice"),xDr=o(" (BERT model)"),$Dr=l(),j5=a("li"),R4e=a("strong"),kDr=o("big_bird"),SDr=o(" \u2014 "),QK=a("a"),RDr=o("FlaxBigBirdForMultipleChoice"),PDr=o(" (BigBird model)"),BDr=l(),D5=a("li"),P4e=a("strong"),IDr=o("distilbert"),qDr=o(" \u2014 "),HK=a("a"),NDr=o("FlaxDistilBertForMultipleChoice"),jDr=o(" (DistilBERT model)"),DDr=l(),G5=a("li"),B4e=a("strong"),GDr=o("electra"),ODr=o(" \u2014 "),UK=a("a"),VDr=o("FlaxElectraForMultipleChoice"),XDr=o(" (ELECTRA model)"),zDr=l(),O5=a("li"),I4e=a("strong"),WDr=o("roberta"),QDr=o(" \u2014 "),JK=a("a"),HDr=o("FlaxRobertaForMultipleChoice"),UDr=o(" (RoBERTa model)"),JDr=l(),V5=a("li"),q4e=a("strong"),YDr=o("roformer"),KDr=o(" \u2014 "),YK=a("a"),ZDr=o("FlaxRoFormerForMultipleChoice"),eGr=o(" (RoFormer model)"),oGr=l(),X5=a("li"),N4e=a("strong"),rGr=o("xlm-roberta"),tGr=o(" \u2014 "),KK=a("a"),aGr=o("FlaxXLMRobertaForMultipleChoice"),nGr=o(" (XLM-RoBERTa model)"),sGr=l(),F(z5.$$.fragment),zje=l(),rf=a("h2"),W5=a("a"),j4e=a("span"),F(px.$$.fragment),lGr=l(),D4e=a("span"),iGr=o("FlaxAutoModelForNextSentencePrediction"),Wje=l(),Fr=a("div"),F(ux.$$.fragment),dGr=l(),tf=a("p"),cGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZK=a("a"),fGr=o("from_pretrained()"),mGr=o(" class method or the "),eZ=a("a"),gGr=o("from_config()"),hGr=o(` class
method.`),pGr=l(),_x=a("p"),uGr=o("This class cannot be instantiated directly using "),G4e=a("code"),_Gr=o("__init__()"),bGr=o(" (throws an error)."),vGr=l(),Jt=a("div"),F(bx.$$.fragment),FGr=l(),O4e=a("p"),TGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MGr=l(),af=a("p"),EGr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),CGr=o("not"),wGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),AGr=o("from_pretrained()"),yGr=o(" to load the model weights."),LGr=l(),F(Q5.$$.fragment),xGr=l(),Hr=a("div"),F(vx.$$.fragment),$Gr=l(),X4e=a("p"),kGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SGr=l(),En=a("p"),RGr=o("The model class to instantiate is selected based on the "),z4e=a("code"),PGr=o("model_type"),BGr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),IGr=o("pretrained_model_name_or_path"),qGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),NGr=o("pretrained_model_name_or_path"),jGr=o(":"),DGr=l(),H4e=a("ul"),H5=a("li"),U4e=a("strong"),GGr=o("bert"),OGr=o(" \u2014 "),rZ=a("a"),VGr=o("FlaxBertForNextSentencePrediction"),XGr=o(" (BERT model)"),zGr=l(),F(U5.$$.fragment),Qje=l(),nf=a("h2"),J5=a("a"),J4e=a("span"),F(Fx.$$.fragment),WGr=l(),Y4e=a("span"),QGr=o("FlaxAutoModelForImageClassification"),Hje=l(),Tr=a("div"),F(Tx.$$.fragment),HGr=l(),sf=a("p"),UGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tZ=a("a"),JGr=o("from_pretrained()"),YGr=o(" class method or the "),aZ=a("a"),KGr=o("from_config()"),ZGr=o(` class
method.`),eOr=l(),Mx=a("p"),oOr=o("This class cannot be instantiated directly using "),K4e=a("code"),rOr=o("__init__()"),tOr=o(" (throws an error)."),aOr=l(),Yt=a("div"),F(Ex.$$.fragment),nOr=l(),Z4e=a("p"),sOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lOr=l(),lf=a("p"),iOr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),dOr=o("not"),cOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" to load the model weights."),gOr=l(),F(Y5.$$.fragment),hOr=l(),Ur=a("div"),F(Cx.$$.fragment),pOr=l(),oEe=a("p"),uOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Or=l(),Cn=a("p"),bOr=o("The model class to instantiate is selected based on the "),rEe=a("code"),vOr=o("model_type"),FOr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),TOr=o("pretrained_model_name_or_path"),MOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),EOr=o("pretrained_model_name_or_path"),COr=o(":"),wOr=l(),wx=a("ul"),K5=a("li"),nEe=a("strong"),AOr=o("beit"),yOr=o(" \u2014 "),sZ=a("a"),LOr=o("FlaxBeitForImageClassification"),xOr=o(" (BEiT model)"),$Or=l(),Z5=a("li"),sEe=a("strong"),kOr=o("vit"),SOr=o(" \u2014 "),lZ=a("a"),ROr=o("FlaxViTForImageClassification"),POr=o(" (ViT model)"),BOr=l(),F(ew.$$.fragment),Uje=l(),df=a("h2"),ow=a("a"),lEe=a("span"),F(Ax.$$.fragment),IOr=l(),iEe=a("span"),qOr=o("FlaxAutoModelForVision2Seq"),Jje=l(),Mr=a("div"),F(yx.$$.fragment),NOr=l(),cf=a("p"),jOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iZ=a("a"),DOr=o("from_pretrained()"),GOr=o(" class method or the "),dZ=a("a"),OOr=o("from_config()"),VOr=o(` class
method.`),XOr=l(),Lx=a("p"),zOr=o("This class cannot be instantiated directly using "),dEe=a("code"),WOr=o("__init__()"),QOr=o(" (throws an error)."),HOr=l(),Kt=a("div"),F(xx.$$.fragment),UOr=l(),cEe=a("p"),JOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YOr=l(),ff=a("p"),KOr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),ZOr=o("not"),eVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),oVr=o("from_pretrained()"),rVr=o(" to load the model weights."),tVr=l(),F(rw.$$.fragment),aVr=l(),Jr=a("div"),F($x.$$.fragment),nVr=l(),mEe=a("p"),sVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lVr=l(),wn=a("p"),iVr=o("The model class to instantiate is selected based on the "),gEe=a("code"),dVr=o("model_type"),cVr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),fVr=o("pretrained_model_name_or_path"),mVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),gVr=o("pretrained_model_name_or_path"),hVr=o(":"),pVr=l(),uEe=a("ul"),tw=a("li"),_Ee=a("strong"),uVr=o("vision-encoder-decoder"),_Vr=o(" \u2014 "),fZ=a("a"),bVr=o("FlaxVisionEncoderDecoderModel"),vVr=o(" (Vision Encoder decoder model)"),FVr=l(),F(aw.$$.fragment),this.h()},l(f){const _=Kxt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var kx=s(p);m=n(kx,"A",{id:!0,class:!0,href:!0});var bEe=s(m);u=n(bEe,"SPAN",{});var vEe=s(u);T(d.$$.fragment,vEe),vEe.forEach(t),bEe.forEach(t),h=i(kx),Mo=n(kx,"SPAN",{});var FEe=s(Mo);fi=r(FEe,"Auto Classes"),FEe.forEach(t),kx.forEach(t),pf=i(f),rt=n(f,"P",{});var Sx=s(rt);mi=r(Sx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Sx,"CODE",{});var TEe=s(gi);MA=r(TEe,"from_pretrained()"),TEe.forEach(t),uf=r(Sx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Sx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var MEe=s(yn);EA=r(MEe,"AutoConfig"),MEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var EEe=s(xn);CA=r(EEe,"AutoModel"),EEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var CEe=s($n);wA=r(CEe,"AutoTokenizer"),CEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Rx=s(Ae);X$=r(Rx,"will create a model that is an instance of "),_i=n(Rx,"A",{href:!0});var wEe=s(_i);z$=r(wEe,"BertModel"),wEe.forEach(t),W$=r(Rx,"."),Rx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Px=s(wa);Q$=r(Px,"There is one class of "),bf=n(Px,"CODE",{});var AEe=s(bf);H$=r(AEe,"AutoModel"),AEe.forEach(t),nOe=r(Px," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Px.forEach(t),Hqe=i(f),bi=n(f,"H2",{class:!0});var Bx=s(bi);vf=n(Bx,"A",{id:!0,class:!0,href:!0});var yEe=s(vf);aoe=n(yEe,"SPAN",{});var LEe=s(aoe);T(AA.$$.fragment,LEe),LEe.forEach(t),yEe.forEach(t),sOe=i(Bx),noe=n(Bx,"SPAN",{});var xEe=s(noe);lOe=r(xEe,"Extending the Auto Classes"),xEe.forEach(t),Bx.forEach(t),Uqe=i(f),kn=n(f,"P",{});var mf=s(kn);iOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),soe=n(mf,"CODE",{});var $Ee=s(soe);dOe=r($Ee,"NewModel"),$Ee.forEach(t),cOe=r(mf,", make sure you have a "),loe=n(mf,"CODE",{});var kEe=s(loe);fOe=r(kEe,"NewModelConfig"),kEe.forEach(t),mOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Jqe=i(f),T(yA.$$.fragment,f),Yqe=i(f),U$=n(f,"P",{});var SEe=s(U$);gOe=r(SEe,"You will then be able to use the auto classes like you would usually do!"),SEe.forEach(t),Kqe=i(f),T(Ff.$$.fragment,f),Zqe=i(f),vi=n(f,"H2",{class:!0});var Ix=s(vi);Tf=n(Ix,"A",{id:!0,class:!0,href:!0});var REe=s(Tf);ioe=n(REe,"SPAN",{});var PEe=s(ioe);T(LA.$$.fragment,PEe),PEe.forEach(t),REe.forEach(t),hOe=i(Ix),doe=n(Ix,"SPAN",{});var BEe=s(doe);pOe=r(BEe,"AutoConfig"),BEe.forEach(t),Ix.forEach(t),eNe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(xA.$$.fragment,et),uOe=i(et),$A=n(et,"P",{});var qx=s($A);_Oe=r(qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J$=n(qx,"A",{href:!0});var IEe=s(J$);bOe=r(IEe,"from_pretrained()"),IEe.forEach(t),vOe=r(qx," class method."),qx.forEach(t),FOe=i(et),kA=n(et,"P",{});var Nx=s(kA);TOe=r(Nx,"This class cannot be instantiated directly using "),coe=n(Nx,"CODE",{});var qEe=s(coe);MOe=r(qEe,"__init__()"),qEe.forEach(t),EOe=r(Nx," (throws an error)."),Nx.forEach(t),COe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(SA.$$.fragment,ot),wOe=i(ot),foe=n(ot,"P",{});var NEe=s(foe);AOe=r(NEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),NEe.forEach(t),yOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);LOe=r(gf,"The configuration class to instantiate is selected based on the "),moe=n(gf,"CODE",{});var jEe=s(moe);xOe=r(jEe,"model_type"),jEe.forEach(t),$Oe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),goe=n(gf,"CODE",{});var DEe=s(goe);kOe=r(DEe,"pretrained_model_name_or_path"),DEe.forEach(t),SOe=r(gf,":"),gf.forEach(t),ROe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var nw=s(Mf);hoe=n(nw,"STRONG",{});var GEe=s(hoe);POe=r(GEe,"albert"),GEe.forEach(t),BOe=r(nw," \u2014 "),Y$=n(nw,"A",{href:!0});var OEe=s(Y$);IOe=r(OEe,"AlbertConfig"),OEe.forEach(t),qOe=r(nw," (ALBERT model)"),nw.forEach(t),NOe=i(y),Ef=n(y,"LI",{});var sw=s(Ef);poe=n(sw,"STRONG",{});var VEe=s(poe);jOe=r(VEe,"bart"),VEe.forEach(t),DOe=r(sw," \u2014 "),K$=n(sw,"A",{href:!0});var XEe=s(K$);GOe=r(XEe,"BartConfig"),XEe.forEach(t),OOe=r(sw," (BART model)"),sw.forEach(t),VOe=i(y),Cf=n(y,"LI",{});var lw=s(Cf);uoe=n(lw,"STRONG",{});var zEe=s(uoe);XOe=r(zEe,"beit"),zEe.forEach(t),zOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var WEe=s(Z$);WOe=r(WEe,"BeitConfig"),WEe.forEach(t),QOe=r(lw," (BEiT model)"),lw.forEach(t),HOe=i(y),wf=n(y,"LI",{});var iw=s(wf);_oe=n(iw,"STRONG",{});var QEe=s(_oe);UOe=r(QEe,"bert"),QEe.forEach(t),JOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var HEe=s(ek);YOe=r(HEe,"BertConfig"),HEe.forEach(t),KOe=r(iw," (BERT model)"),iw.forEach(t),ZOe=i(y),Af=n(y,"LI",{});var dw=s(Af);boe=n(dw,"STRONG",{});var UEe=s(boe);eVe=r(UEe,"bert-generation"),UEe.forEach(t),oVe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var JEe=s(ok);rVe=r(JEe,"BertGenerationConfig"),JEe.forEach(t),tVe=r(dw," (Bert Generation model)"),dw.forEach(t),aVe=i(y),yf=n(y,"LI",{});var cw=s(yf);voe=n(cw,"STRONG",{});var YEe=s(voe);nVe=r(YEe,"big_bird"),YEe.forEach(t),sVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var KEe=s(rk);lVe=r(KEe,"BigBirdConfig"),KEe.forEach(t),iVe=r(cw," (BigBird model)"),cw.forEach(t),dVe=i(y),Lf=n(y,"LI",{});var fw=s(Lf);Foe=n(fw,"STRONG",{});var ZEe=s(Foe);cVe=r(ZEe,"bigbird_pegasus"),ZEe.forEach(t),fVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var eCe=s(tk);mVe=r(eCe,"BigBirdPegasusConfig"),eCe.forEach(t),gVe=r(fw," (BigBirdPegasus model)"),fw.forEach(t),hVe=i(y),xf=n(y,"LI",{});var mw=s(xf);Toe=n(mw,"STRONG",{});var oCe=s(Toe);pVe=r(oCe,"blenderbot"),oCe.forEach(t),uVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var rCe=s(ak);_Ve=r(rCe,"BlenderbotConfig"),rCe.forEach(t),bVe=r(mw," (Blenderbot model)"),mw.forEach(t),vVe=i(y),$f=n(y,"LI",{});var gw=s($f);Moe=n(gw,"STRONG",{});var tCe=s(Moe);FVe=r(tCe,"blenderbot-small"),tCe.forEach(t),TVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var aCe=s(nk);MVe=r(aCe,"BlenderbotSmallConfig"),aCe.forEach(t),EVe=r(gw," (BlenderbotSmall model)"),gw.forEach(t),CVe=i(y),kf=n(y,"LI",{});var hw=s(kf);Eoe=n(hw,"STRONG",{});var nCe=s(Eoe);wVe=r(nCe,"camembert"),nCe.forEach(t),AVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var sCe=s(sk);yVe=r(sCe,"CamembertConfig"),sCe.forEach(t),LVe=r(hw," (CamemBERT model)"),hw.forEach(t),xVe=i(y),Sf=n(y,"LI",{});var pw=s(Sf);Coe=n(pw,"STRONG",{});var lCe=s(Coe);$Ve=r(lCe,"canine"),lCe.forEach(t),kVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var iCe=s(lk);SVe=r(iCe,"CanineConfig"),iCe.forEach(t),RVe=r(pw," (Canine model)"),pw.forEach(t),PVe=i(y),Rf=n(y,"LI",{});var uw=s(Rf);woe=n(uw,"STRONG",{});var dCe=s(woe);BVe=r(dCe,"clip"),dCe.forEach(t),IVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var cCe=s(ik);qVe=r(cCe,"CLIPConfig"),cCe.forEach(t),NVe=r(uw," (CLIP model)"),uw.forEach(t),jVe=i(y),Pf=n(y,"LI",{});var _w=s(Pf);Aoe=n(_w,"STRONG",{});var fCe=s(Aoe);DVe=r(fCe,"convbert"),fCe.forEach(t),GVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var mCe=s(dk);OVe=r(mCe,"ConvBertConfig"),mCe.forEach(t),VVe=r(_w," (ConvBERT model)"),_w.forEach(t),XVe=i(y),Bf=n(y,"LI",{});var bw=s(Bf);yoe=n(bw,"STRONG",{});var gCe=s(yoe);zVe=r(gCe,"convnext"),gCe.forEach(t),WVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var hCe=s(ck);QVe=r(hCe,"ConvNextConfig"),hCe.forEach(t),HVe=r(bw," (ConvNext model)"),bw.forEach(t),UVe=i(y),If=n(y,"LI",{});var vw=s(If);Loe=n(vw,"STRONG",{});var pCe=s(Loe);JVe=r(pCe,"ctrl"),pCe.forEach(t),YVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var uCe=s(fk);KVe=r(uCe,"CTRLConfig"),uCe.forEach(t),ZVe=r(vw," (CTRL model)"),vw.forEach(t),eXe=i(y),qf=n(y,"LI",{});var Fw=s(qf);xoe=n(Fw,"STRONG",{});var _Ce=s(xoe);oXe=r(_Ce,"cvt"),_Ce.forEach(t),rXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var bCe=s(mk);tXe=r(bCe,"CvtConfig"),bCe.forEach(t),aXe=r(Fw," (CvT model)"),Fw.forEach(t),nXe=i(y),Nf=n(y,"LI",{});var Tw=s(Nf);$oe=n(Tw,"STRONG",{});var vCe=s($oe);sXe=r(vCe,"data2vec-audio"),vCe.forEach(t),lXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var FCe=s(gk);iXe=r(FCe,"Data2VecAudioConfig"),FCe.forEach(t),dXe=r(Tw," (Data2VecAudio model)"),Tw.forEach(t),cXe=i(y),jf=n(y,"LI",{});var Mw=s(jf);koe=n(Mw,"STRONG",{});var TCe=s(koe);fXe=r(TCe,"data2vec-text"),TCe.forEach(t),mXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var MCe=s(hk);gXe=r(MCe,"Data2VecTextConfig"),MCe.forEach(t),hXe=r(Mw," (Data2VecText model)"),Mw.forEach(t),pXe=i(y),Df=n(y,"LI",{});var Ew=s(Df);Soe=n(Ew,"STRONG",{});var ECe=s(Soe);uXe=r(ECe,"data2vec-vision"),ECe.forEach(t),_Xe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var CCe=s(pk);bXe=r(CCe,"Data2VecVisionConfig"),CCe.forEach(t),vXe=r(Ew," (Data2VecVision model)"),Ew.forEach(t),FXe=i(y),Gf=n(y,"LI",{});var Cw=s(Gf);Roe=n(Cw,"STRONG",{});var wCe=s(Roe);TXe=r(wCe,"deberta"),wCe.forEach(t),MXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var ACe=s(uk);EXe=r(ACe,"DebertaConfig"),ACe.forEach(t),CXe=r(Cw," (DeBERTa model)"),Cw.forEach(t),wXe=i(y),Of=n(y,"LI",{});var ww=s(Of);Poe=n(ww,"STRONG",{});var yCe=s(Poe);AXe=r(yCe,"deberta-v2"),yCe.forEach(t),yXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var LCe=s(_k);LXe=r(LCe,"DebertaV2Config"),LCe.forEach(t),xXe=r(ww," (DeBERTa-v2 model)"),ww.forEach(t),$Xe=i(y),Vf=n(y,"LI",{});var Aw=s(Vf);Boe=n(Aw,"STRONG",{});var xCe=s(Boe);kXe=r(xCe,"decision_transformer"),xCe.forEach(t),SXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var $Ce=s(bk);RXe=r($Ce,"DecisionTransformerConfig"),$Ce.forEach(t),PXe=r(Aw," (Decision Transformer model)"),Aw.forEach(t),BXe=i(y),Xf=n(y,"LI",{});var yw=s(Xf);Ioe=n(yw,"STRONG",{});var kCe=s(Ioe);IXe=r(kCe,"deit"),kCe.forEach(t),qXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var MVr=s(vk);NXe=r(MVr,"DeiTConfig"),MVr.forEach(t),jXe=r(yw," (DeiT model)"),yw.forEach(t),DXe=i(y),zf=n(y,"LI",{});var SCe=s(zf);qoe=n(SCe,"STRONG",{});var EVr=s(qoe);GXe=r(EVr,"detr"),EVr.forEach(t),OXe=r(SCe," \u2014 "),Fk=n(SCe,"A",{href:!0});var CVr=s(Fk);VXe=r(CVr,"DetrConfig"),CVr.forEach(t),XXe=r(SCe," (DETR model)"),SCe.forEach(t),zXe=i(y),Wf=n(y,"LI",{});var RCe=s(Wf);Noe=n(RCe,"STRONG",{});var wVr=s(Noe);WXe=r(wVr,"distilbert"),wVr.forEach(t),QXe=r(RCe," \u2014 "),Tk=n(RCe,"A",{href:!0});var AVr=s(Tk);HXe=r(AVr,"DistilBertConfig"),AVr.forEach(t),UXe=r(RCe," (DistilBERT model)"),RCe.forEach(t),JXe=i(y),Qf=n(y,"LI",{});var PCe=s(Qf);joe=n(PCe,"STRONG",{});var yVr=s(joe);YXe=r(yVr,"dpr"),yVr.forEach(t),KXe=r(PCe," \u2014 "),Mk=n(PCe,"A",{href:!0});var LVr=s(Mk);ZXe=r(LVr,"DPRConfig"),LVr.forEach(t),eze=r(PCe," (DPR model)"),PCe.forEach(t),oze=i(y),Hf=n(y,"LI",{});var BCe=s(Hf);Doe=n(BCe,"STRONG",{});var xVr=s(Doe);rze=r(xVr,"dpt"),xVr.forEach(t),tze=r(BCe," \u2014 "),Ek=n(BCe,"A",{href:!0});var $Vr=s(Ek);aze=r($Vr,"DPTConfig"),$Vr.forEach(t),nze=r(BCe," (DPT model)"),BCe.forEach(t),sze=i(y),Uf=n(y,"LI",{});var ICe=s(Uf);Goe=n(ICe,"STRONG",{});var kVr=s(Goe);lze=r(kVr,"electra"),kVr.forEach(t),ize=r(ICe," \u2014 "),Ck=n(ICe,"A",{href:!0});var SVr=s(Ck);dze=r(SVr,"ElectraConfig"),SVr.forEach(t),cze=r(ICe," (ELECTRA model)"),ICe.forEach(t),fze=i(y),Jf=n(y,"LI",{});var qCe=s(Jf);Ooe=n(qCe,"STRONG",{});var RVr=s(Ooe);mze=r(RVr,"encoder-decoder"),RVr.forEach(t),gze=r(qCe," \u2014 "),wk=n(qCe,"A",{href:!0});var PVr=s(wk);hze=r(PVr,"EncoderDecoderConfig"),PVr.forEach(t),pze=r(qCe," (Encoder decoder model)"),qCe.forEach(t),uze=i(y),Yf=n(y,"LI",{});var NCe=s(Yf);Voe=n(NCe,"STRONG",{});var BVr=s(Voe);_ze=r(BVr,"flaubert"),BVr.forEach(t),bze=r(NCe," \u2014 "),Ak=n(NCe,"A",{href:!0});var IVr=s(Ak);vze=r(IVr,"FlaubertConfig"),IVr.forEach(t),Fze=r(NCe," (FlauBERT model)"),NCe.forEach(t),Tze=i(y),Kf=n(y,"LI",{});var jCe=s(Kf);Xoe=n(jCe,"STRONG",{});var qVr=s(Xoe);Mze=r(qVr,"flava"),qVr.forEach(t),Eze=r(jCe," \u2014 "),yk=n(jCe,"A",{href:!0});var NVr=s(yk);Cze=r(NVr,"FlavaConfig"),NVr.forEach(t),wze=r(jCe," (Flava model)"),jCe.forEach(t),Aze=i(y),Zf=n(y,"LI",{});var DCe=s(Zf);zoe=n(DCe,"STRONG",{});var jVr=s(zoe);yze=r(jVr,"fnet"),jVr.forEach(t),Lze=r(DCe," \u2014 "),Lk=n(DCe,"A",{href:!0});var DVr=s(Lk);xze=r(DVr,"FNetConfig"),DVr.forEach(t),$ze=r(DCe," (FNet model)"),DCe.forEach(t),kze=i(y),em=n(y,"LI",{});var GCe=s(em);Woe=n(GCe,"STRONG",{});var GVr=s(Woe);Sze=r(GVr,"fsmt"),GVr.forEach(t),Rze=r(GCe," \u2014 "),xk=n(GCe,"A",{href:!0});var OVr=s(xk);Pze=r(OVr,"FSMTConfig"),OVr.forEach(t),Bze=r(GCe," (FairSeq Machine-Translation model)"),GCe.forEach(t),Ize=i(y),om=n(y,"LI",{});var OCe=s(om);Qoe=n(OCe,"STRONG",{});var VVr=s(Qoe);qze=r(VVr,"funnel"),VVr.forEach(t),Nze=r(OCe," \u2014 "),$k=n(OCe,"A",{href:!0});var XVr=s($k);jze=r(XVr,"FunnelConfig"),XVr.forEach(t),Dze=r(OCe," (Funnel Transformer model)"),OCe.forEach(t),Gze=i(y),rm=n(y,"LI",{});var VCe=s(rm);Hoe=n(VCe,"STRONG",{});var zVr=s(Hoe);Oze=r(zVr,"glpn"),zVr.forEach(t),Vze=r(VCe," \u2014 "),kk=n(VCe,"A",{href:!0});var WVr=s(kk);Xze=r(WVr,"GLPNConfig"),WVr.forEach(t),zze=r(VCe," (GLPN model)"),VCe.forEach(t),Wze=i(y),tm=n(y,"LI",{});var XCe=s(tm);Uoe=n(XCe,"STRONG",{});var QVr=s(Uoe);Qze=r(QVr,"gpt2"),QVr.forEach(t),Hze=r(XCe," \u2014 "),Sk=n(XCe,"A",{href:!0});var HVr=s(Sk);Uze=r(HVr,"GPT2Config"),HVr.forEach(t),Jze=r(XCe," (OpenAI GPT-2 model)"),XCe.forEach(t),Yze=i(y),am=n(y,"LI",{});var zCe=s(am);Joe=n(zCe,"STRONG",{});var UVr=s(Joe);Kze=r(UVr,"gpt_neo"),UVr.forEach(t),Zze=r(zCe," \u2014 "),Rk=n(zCe,"A",{href:!0});var JVr=s(Rk);eWe=r(JVr,"GPTNeoConfig"),JVr.forEach(t),oWe=r(zCe," (GPT Neo model)"),zCe.forEach(t),rWe=i(y),nm=n(y,"LI",{});var WCe=s(nm);Yoe=n(WCe,"STRONG",{});var YVr=s(Yoe);tWe=r(YVr,"gptj"),YVr.forEach(t),aWe=r(WCe," \u2014 "),Pk=n(WCe,"A",{href:!0});var KVr=s(Pk);nWe=r(KVr,"GPTJConfig"),KVr.forEach(t),sWe=r(WCe," (GPT-J model)"),WCe.forEach(t),lWe=i(y),sm=n(y,"LI",{});var QCe=s(sm);Koe=n(QCe,"STRONG",{});var ZVr=s(Koe);iWe=r(ZVr,"hubert"),ZVr.forEach(t),dWe=r(QCe," \u2014 "),Bk=n(QCe,"A",{href:!0});var eXr=s(Bk);cWe=r(eXr,"HubertConfig"),eXr.forEach(t),fWe=r(QCe," (Hubert model)"),QCe.forEach(t),mWe=i(y),lm=n(y,"LI",{});var HCe=s(lm);Zoe=n(HCe,"STRONG",{});var oXr=s(Zoe);gWe=r(oXr,"ibert"),oXr.forEach(t),hWe=r(HCe," \u2014 "),Ik=n(HCe,"A",{href:!0});var rXr=s(Ik);pWe=r(rXr,"IBertConfig"),rXr.forEach(t),uWe=r(HCe," (I-BERT model)"),HCe.forEach(t),_We=i(y),im=n(y,"LI",{});var UCe=s(im);ere=n(UCe,"STRONG",{});var tXr=s(ere);bWe=r(tXr,"imagegpt"),tXr.forEach(t),vWe=r(UCe," \u2014 "),qk=n(UCe,"A",{href:!0});var aXr=s(qk);FWe=r(aXr,"ImageGPTConfig"),aXr.forEach(t),TWe=r(UCe," (ImageGPT model)"),UCe.forEach(t),MWe=i(y),dm=n(y,"LI",{});var JCe=s(dm);ore=n(JCe,"STRONG",{});var nXr=s(ore);EWe=r(nXr,"layoutlm"),nXr.forEach(t),CWe=r(JCe," \u2014 "),Nk=n(JCe,"A",{href:!0});var sXr=s(Nk);wWe=r(sXr,"LayoutLMConfig"),sXr.forEach(t),AWe=r(JCe," (LayoutLM model)"),JCe.forEach(t),yWe=i(y),cm=n(y,"LI",{});var YCe=s(cm);rre=n(YCe,"STRONG",{});var lXr=s(rre);LWe=r(lXr,"layoutlmv2"),lXr.forEach(t),xWe=r(YCe," \u2014 "),jk=n(YCe,"A",{href:!0});var iXr=s(jk);$We=r(iXr,"LayoutLMv2Config"),iXr.forEach(t),kWe=r(YCe," (LayoutLMv2 model)"),YCe.forEach(t),SWe=i(y),fm=n(y,"LI",{});var KCe=s(fm);tre=n(KCe,"STRONG",{});var dXr=s(tre);RWe=r(dXr,"layoutlmv3"),dXr.forEach(t),PWe=r(KCe," \u2014 "),Dk=n(KCe,"A",{href:!0});var cXr=s(Dk);BWe=r(cXr,"LayoutLMv3Config"),cXr.forEach(t),IWe=r(KCe," (LayoutLMv3 model)"),KCe.forEach(t),qWe=i(y),mm=n(y,"LI",{});var ZCe=s(mm);are=n(ZCe,"STRONG",{});var fXr=s(are);NWe=r(fXr,"led"),fXr.forEach(t),jWe=r(ZCe," \u2014 "),Gk=n(ZCe,"A",{href:!0});var mXr=s(Gk);DWe=r(mXr,"LEDConfig"),mXr.forEach(t),GWe=r(ZCe," (LED model)"),ZCe.forEach(t),OWe=i(y),gm=n(y,"LI",{});var e5e=s(gm);nre=n(e5e,"STRONG",{});var gXr=s(nre);VWe=r(gXr,"longformer"),gXr.forEach(t),XWe=r(e5e," \u2014 "),Ok=n(e5e,"A",{href:!0});var hXr=s(Ok);zWe=r(hXr,"LongformerConfig"),hXr.forEach(t),WWe=r(e5e," (Longformer model)"),e5e.forEach(t),QWe=i(y),hm=n(y,"LI",{});var o5e=s(hm);sre=n(o5e,"STRONG",{});var pXr=s(sre);HWe=r(pXr,"luke"),pXr.forEach(t),UWe=r(o5e," \u2014 "),Vk=n(o5e,"A",{href:!0});var uXr=s(Vk);JWe=r(uXr,"LukeConfig"),uXr.forEach(t),YWe=r(o5e," (LUKE model)"),o5e.forEach(t),KWe=i(y),pm=n(y,"LI",{});var r5e=s(pm);lre=n(r5e,"STRONG",{});var _Xr=s(lre);ZWe=r(_Xr,"lxmert"),_Xr.forEach(t),eQe=r(r5e," \u2014 "),Xk=n(r5e,"A",{href:!0});var bXr=s(Xk);oQe=r(bXr,"LxmertConfig"),bXr.forEach(t),rQe=r(r5e," (LXMERT model)"),r5e.forEach(t),tQe=i(y),um=n(y,"LI",{});var t5e=s(um);ire=n(t5e,"STRONG",{});var vXr=s(ire);aQe=r(vXr,"m2m_100"),vXr.forEach(t),nQe=r(t5e," \u2014 "),zk=n(t5e,"A",{href:!0});var FXr=s(zk);sQe=r(FXr,"M2M100Config"),FXr.forEach(t),lQe=r(t5e," (M2M100 model)"),t5e.forEach(t),iQe=i(y),_m=n(y,"LI",{});var a5e=s(_m);dre=n(a5e,"STRONG",{});var TXr=s(dre);dQe=r(TXr,"marian"),TXr.forEach(t),cQe=r(a5e," \u2014 "),Wk=n(a5e,"A",{href:!0});var MXr=s(Wk);fQe=r(MXr,"MarianConfig"),MXr.forEach(t),mQe=r(a5e," (Marian model)"),a5e.forEach(t),gQe=i(y),bm=n(y,"LI",{});var n5e=s(bm);cre=n(n5e,"STRONG",{});var EXr=s(cre);hQe=r(EXr,"maskformer"),EXr.forEach(t),pQe=r(n5e," \u2014 "),Qk=n(n5e,"A",{href:!0});var CXr=s(Qk);uQe=r(CXr,"MaskFormerConfig"),CXr.forEach(t),_Qe=r(n5e," (MaskFormer model)"),n5e.forEach(t),bQe=i(y),vm=n(y,"LI",{});var s5e=s(vm);fre=n(s5e,"STRONG",{});var wXr=s(fre);vQe=r(wXr,"mbart"),wXr.forEach(t),FQe=r(s5e," \u2014 "),Hk=n(s5e,"A",{href:!0});var AXr=s(Hk);TQe=r(AXr,"MBartConfig"),AXr.forEach(t),MQe=r(s5e," (mBART model)"),s5e.forEach(t),EQe=i(y),Fm=n(y,"LI",{});var l5e=s(Fm);mre=n(l5e,"STRONG",{});var yXr=s(mre);CQe=r(yXr,"megatron-bert"),yXr.forEach(t),wQe=r(l5e," \u2014 "),Uk=n(l5e,"A",{href:!0});var LXr=s(Uk);AQe=r(LXr,"MegatronBertConfig"),LXr.forEach(t),yQe=r(l5e," (MegatronBert model)"),l5e.forEach(t),LQe=i(y),Tm=n(y,"LI",{});var i5e=s(Tm);gre=n(i5e,"STRONG",{});var xXr=s(gre);xQe=r(xXr,"mobilebert"),xXr.forEach(t),$Qe=r(i5e," \u2014 "),Jk=n(i5e,"A",{href:!0});var $Xr=s(Jk);kQe=r($Xr,"MobileBertConfig"),$Xr.forEach(t),SQe=r(i5e," (MobileBERT model)"),i5e.forEach(t),RQe=i(y),Mm=n(y,"LI",{});var d5e=s(Mm);hre=n(d5e,"STRONG",{});var kXr=s(hre);PQe=r(kXr,"mpnet"),kXr.forEach(t),BQe=r(d5e," \u2014 "),Yk=n(d5e,"A",{href:!0});var SXr=s(Yk);IQe=r(SXr,"MPNetConfig"),SXr.forEach(t),qQe=r(d5e," (MPNet model)"),d5e.forEach(t),NQe=i(y),Em=n(y,"LI",{});var c5e=s(Em);pre=n(c5e,"STRONG",{});var RXr=s(pre);jQe=r(RXr,"mt5"),RXr.forEach(t),DQe=r(c5e," \u2014 "),Kk=n(c5e,"A",{href:!0});var PXr=s(Kk);GQe=r(PXr,"MT5Config"),PXr.forEach(t),OQe=r(c5e," (mT5 model)"),c5e.forEach(t),VQe=i(y),Cm=n(y,"LI",{});var f5e=s(Cm);ure=n(f5e,"STRONG",{});var BXr=s(ure);XQe=r(BXr,"nystromformer"),BXr.forEach(t),zQe=r(f5e," \u2014 "),Zk=n(f5e,"A",{href:!0});var IXr=s(Zk);WQe=r(IXr,"NystromformerConfig"),IXr.forEach(t),QQe=r(f5e," (Nystromformer model)"),f5e.forEach(t),HQe=i(y),wm=n(y,"LI",{});var m5e=s(wm);_re=n(m5e,"STRONG",{});var qXr=s(_re);UQe=r(qXr,"openai-gpt"),qXr.forEach(t),JQe=r(m5e," \u2014 "),eS=n(m5e,"A",{href:!0});var NXr=s(eS);YQe=r(NXr,"OpenAIGPTConfig"),NXr.forEach(t),KQe=r(m5e," (OpenAI GPT model)"),m5e.forEach(t),ZQe=i(y),Am=n(y,"LI",{});var g5e=s(Am);bre=n(g5e,"STRONG",{});var jXr=s(bre);eHe=r(jXr,"opt"),jXr.forEach(t),oHe=r(g5e," \u2014 "),oS=n(g5e,"A",{href:!0});var DXr=s(oS);rHe=r(DXr,"OPTConfig"),DXr.forEach(t),tHe=r(g5e," (OPT model)"),g5e.forEach(t),aHe=i(y),ym=n(y,"LI",{});var h5e=s(ym);vre=n(h5e,"STRONG",{});var GXr=s(vre);nHe=r(GXr,"pegasus"),GXr.forEach(t),sHe=r(h5e," \u2014 "),rS=n(h5e,"A",{href:!0});var OXr=s(rS);lHe=r(OXr,"PegasusConfig"),OXr.forEach(t),iHe=r(h5e," (Pegasus model)"),h5e.forEach(t),dHe=i(y),Lm=n(y,"LI",{});var p5e=s(Lm);Fre=n(p5e,"STRONG",{});var VXr=s(Fre);cHe=r(VXr,"perceiver"),VXr.forEach(t),fHe=r(p5e," \u2014 "),tS=n(p5e,"A",{href:!0});var XXr=s(tS);mHe=r(XXr,"PerceiverConfig"),XXr.forEach(t),gHe=r(p5e," (Perceiver model)"),p5e.forEach(t),hHe=i(y),xm=n(y,"LI",{});var u5e=s(xm);Tre=n(u5e,"STRONG",{});var zXr=s(Tre);pHe=r(zXr,"plbart"),zXr.forEach(t),uHe=r(u5e," \u2014 "),aS=n(u5e,"A",{href:!0});var WXr=s(aS);_He=r(WXr,"PLBartConfig"),WXr.forEach(t),bHe=r(u5e," (PLBart model)"),u5e.forEach(t),vHe=i(y),$m=n(y,"LI",{});var _5e=s($m);Mre=n(_5e,"STRONG",{});var QXr=s(Mre);FHe=r(QXr,"poolformer"),QXr.forEach(t),THe=r(_5e," \u2014 "),nS=n(_5e,"A",{href:!0});var HXr=s(nS);MHe=r(HXr,"PoolFormerConfig"),HXr.forEach(t),EHe=r(_5e," (PoolFormer model)"),_5e.forEach(t),CHe=i(y),km=n(y,"LI",{});var b5e=s(km);Ere=n(b5e,"STRONG",{});var UXr=s(Ere);wHe=r(UXr,"prophetnet"),UXr.forEach(t),AHe=r(b5e," \u2014 "),sS=n(b5e,"A",{href:!0});var JXr=s(sS);yHe=r(JXr,"ProphetNetConfig"),JXr.forEach(t),LHe=r(b5e," (ProphetNet model)"),b5e.forEach(t),xHe=i(y),Sm=n(y,"LI",{});var v5e=s(Sm);Cre=n(v5e,"STRONG",{});var YXr=s(Cre);$He=r(YXr,"qdqbert"),YXr.forEach(t),kHe=r(v5e," \u2014 "),lS=n(v5e,"A",{href:!0});var KXr=s(lS);SHe=r(KXr,"QDQBertConfig"),KXr.forEach(t),RHe=r(v5e," (QDQBert model)"),v5e.forEach(t),PHe=i(y),Rm=n(y,"LI",{});var F5e=s(Rm);wre=n(F5e,"STRONG",{});var ZXr=s(wre);BHe=r(ZXr,"rag"),ZXr.forEach(t),IHe=r(F5e," \u2014 "),iS=n(F5e,"A",{href:!0});var ezr=s(iS);qHe=r(ezr,"RagConfig"),ezr.forEach(t),NHe=r(F5e," (RAG model)"),F5e.forEach(t),jHe=i(y),Pm=n(y,"LI",{});var T5e=s(Pm);Are=n(T5e,"STRONG",{});var ozr=s(Are);DHe=r(ozr,"realm"),ozr.forEach(t),GHe=r(T5e," \u2014 "),dS=n(T5e,"A",{href:!0});var rzr=s(dS);OHe=r(rzr,"RealmConfig"),rzr.forEach(t),VHe=r(T5e," (Realm model)"),T5e.forEach(t),XHe=i(y),Bm=n(y,"LI",{});var M5e=s(Bm);yre=n(M5e,"STRONG",{});var tzr=s(yre);zHe=r(tzr,"reformer"),tzr.forEach(t),WHe=r(M5e," \u2014 "),cS=n(M5e,"A",{href:!0});var azr=s(cS);QHe=r(azr,"ReformerConfig"),azr.forEach(t),HHe=r(M5e," (Reformer model)"),M5e.forEach(t),UHe=i(y),Im=n(y,"LI",{});var E5e=s(Im);Lre=n(E5e,"STRONG",{});var nzr=s(Lre);JHe=r(nzr,"regnet"),nzr.forEach(t),YHe=r(E5e," \u2014 "),fS=n(E5e,"A",{href:!0});var szr=s(fS);KHe=r(szr,"RegNetConfig"),szr.forEach(t),ZHe=r(E5e," (RegNet model)"),E5e.forEach(t),eUe=i(y),qm=n(y,"LI",{});var C5e=s(qm);xre=n(C5e,"STRONG",{});var lzr=s(xre);oUe=r(lzr,"rembert"),lzr.forEach(t),rUe=r(C5e," \u2014 "),mS=n(C5e,"A",{href:!0});var izr=s(mS);tUe=r(izr,"RemBertConfig"),izr.forEach(t),aUe=r(C5e," (RemBERT model)"),C5e.forEach(t),nUe=i(y),Nm=n(y,"LI",{});var w5e=s(Nm);$re=n(w5e,"STRONG",{});var dzr=s($re);sUe=r(dzr,"resnet"),dzr.forEach(t),lUe=r(w5e," \u2014 "),gS=n(w5e,"A",{href:!0});var czr=s(gS);iUe=r(czr,"ResNetConfig"),czr.forEach(t),dUe=r(w5e," (ResNet model)"),w5e.forEach(t),cUe=i(y),jm=n(y,"LI",{});var A5e=s(jm);kre=n(A5e,"STRONG",{});var fzr=s(kre);fUe=r(fzr,"retribert"),fzr.forEach(t),mUe=r(A5e," \u2014 "),hS=n(A5e,"A",{href:!0});var mzr=s(hS);gUe=r(mzr,"RetriBertConfig"),mzr.forEach(t),hUe=r(A5e," (RetriBERT model)"),A5e.forEach(t),pUe=i(y),Dm=n(y,"LI",{});var y5e=s(Dm);Sre=n(y5e,"STRONG",{});var gzr=s(Sre);uUe=r(gzr,"roberta"),gzr.forEach(t),_Ue=r(y5e," \u2014 "),pS=n(y5e,"A",{href:!0});var hzr=s(pS);bUe=r(hzr,"RobertaConfig"),hzr.forEach(t),vUe=r(y5e," (RoBERTa model)"),y5e.forEach(t),FUe=i(y),Gm=n(y,"LI",{});var L5e=s(Gm);Rre=n(L5e,"STRONG",{});var pzr=s(Rre);TUe=r(pzr,"roformer"),pzr.forEach(t),MUe=r(L5e," \u2014 "),uS=n(L5e,"A",{href:!0});var uzr=s(uS);EUe=r(uzr,"RoFormerConfig"),uzr.forEach(t),CUe=r(L5e," (RoFormer model)"),L5e.forEach(t),wUe=i(y),Om=n(y,"LI",{});var x5e=s(Om);Pre=n(x5e,"STRONG",{});var _zr=s(Pre);AUe=r(_zr,"segformer"),_zr.forEach(t),yUe=r(x5e," \u2014 "),_S=n(x5e,"A",{href:!0});var bzr=s(_S);LUe=r(bzr,"SegformerConfig"),bzr.forEach(t),xUe=r(x5e," (SegFormer model)"),x5e.forEach(t),$Ue=i(y),Vm=n(y,"LI",{});var $5e=s(Vm);Bre=n($5e,"STRONG",{});var vzr=s(Bre);kUe=r(vzr,"sew"),vzr.forEach(t),SUe=r($5e," \u2014 "),bS=n($5e,"A",{href:!0});var Fzr=s(bS);RUe=r(Fzr,"SEWConfig"),Fzr.forEach(t),PUe=r($5e," (SEW model)"),$5e.forEach(t),BUe=i(y),Xm=n(y,"LI",{});var k5e=s(Xm);Ire=n(k5e,"STRONG",{});var Tzr=s(Ire);IUe=r(Tzr,"sew-d"),Tzr.forEach(t),qUe=r(k5e," \u2014 "),vS=n(k5e,"A",{href:!0});var Mzr=s(vS);NUe=r(Mzr,"SEWDConfig"),Mzr.forEach(t),jUe=r(k5e," (SEW-D model)"),k5e.forEach(t),DUe=i(y),zm=n(y,"LI",{});var S5e=s(zm);qre=n(S5e,"STRONG",{});var Ezr=s(qre);GUe=r(Ezr,"speech-encoder-decoder"),Ezr.forEach(t),OUe=r(S5e," \u2014 "),FS=n(S5e,"A",{href:!0});var Czr=s(FS);VUe=r(Czr,"SpeechEncoderDecoderConfig"),Czr.forEach(t),XUe=r(S5e," (Speech Encoder decoder model)"),S5e.forEach(t),zUe=i(y),Wm=n(y,"LI",{});var R5e=s(Wm);Nre=n(R5e,"STRONG",{});var wzr=s(Nre);WUe=r(wzr,"speech_to_text"),wzr.forEach(t),QUe=r(R5e," \u2014 "),TS=n(R5e,"A",{href:!0});var Azr=s(TS);HUe=r(Azr,"Speech2TextConfig"),Azr.forEach(t),UUe=r(R5e," (Speech2Text model)"),R5e.forEach(t),JUe=i(y),Qm=n(y,"LI",{});var P5e=s(Qm);jre=n(P5e,"STRONG",{});var yzr=s(jre);YUe=r(yzr,"speech_to_text_2"),yzr.forEach(t),KUe=r(P5e," \u2014 "),MS=n(P5e,"A",{href:!0});var Lzr=s(MS);ZUe=r(Lzr,"Speech2Text2Config"),Lzr.forEach(t),eJe=r(P5e," (Speech2Text2 model)"),P5e.forEach(t),oJe=i(y),Hm=n(y,"LI",{});var B5e=s(Hm);Dre=n(B5e,"STRONG",{});var xzr=s(Dre);rJe=r(xzr,"splinter"),xzr.forEach(t),tJe=r(B5e," \u2014 "),ES=n(B5e,"A",{href:!0});var $zr=s(ES);aJe=r($zr,"SplinterConfig"),$zr.forEach(t),nJe=r(B5e," (Splinter model)"),B5e.forEach(t),sJe=i(y),Um=n(y,"LI",{});var I5e=s(Um);Gre=n(I5e,"STRONG",{});var kzr=s(Gre);lJe=r(kzr,"squeezebert"),kzr.forEach(t),iJe=r(I5e," \u2014 "),CS=n(I5e,"A",{href:!0});var Szr=s(CS);dJe=r(Szr,"SqueezeBertConfig"),Szr.forEach(t),cJe=r(I5e," (SqueezeBERT model)"),I5e.forEach(t),fJe=i(y),Jm=n(y,"LI",{});var q5e=s(Jm);Ore=n(q5e,"STRONG",{});var Rzr=s(Ore);mJe=r(Rzr,"swin"),Rzr.forEach(t),gJe=r(q5e," \u2014 "),wS=n(q5e,"A",{href:!0});var Pzr=s(wS);hJe=r(Pzr,"SwinConfig"),Pzr.forEach(t),pJe=r(q5e," (Swin model)"),q5e.forEach(t),uJe=i(y),Ym=n(y,"LI",{});var N5e=s(Ym);Vre=n(N5e,"STRONG",{});var Bzr=s(Vre);_Je=r(Bzr,"t5"),Bzr.forEach(t),bJe=r(N5e," \u2014 "),AS=n(N5e,"A",{href:!0});var Izr=s(AS);vJe=r(Izr,"T5Config"),Izr.forEach(t),FJe=r(N5e," (T5 model)"),N5e.forEach(t),TJe=i(y),Km=n(y,"LI",{});var j5e=s(Km);Xre=n(j5e,"STRONG",{});var qzr=s(Xre);MJe=r(qzr,"tapas"),qzr.forEach(t),EJe=r(j5e," \u2014 "),yS=n(j5e,"A",{href:!0});var Nzr=s(yS);CJe=r(Nzr,"TapasConfig"),Nzr.forEach(t),wJe=r(j5e," (TAPAS model)"),j5e.forEach(t),AJe=i(y),Zm=n(y,"LI",{});var D5e=s(Zm);zre=n(D5e,"STRONG",{});var jzr=s(zre);yJe=r(jzr,"trajectory_transformer"),jzr.forEach(t),LJe=r(D5e," \u2014 "),LS=n(D5e,"A",{href:!0});var Dzr=s(LS);xJe=r(Dzr,"TrajectoryTransformerConfig"),Dzr.forEach(t),$Je=r(D5e," (Trajectory Transformer model)"),D5e.forEach(t),kJe=i(y),eg=n(y,"LI",{});var G5e=s(eg);Wre=n(G5e,"STRONG",{});var Gzr=s(Wre);SJe=r(Gzr,"transfo-xl"),Gzr.forEach(t),RJe=r(G5e," \u2014 "),xS=n(G5e,"A",{href:!0});var Ozr=s(xS);PJe=r(Ozr,"TransfoXLConfig"),Ozr.forEach(t),BJe=r(G5e," (Transformer-XL model)"),G5e.forEach(t),IJe=i(y),og=n(y,"LI",{});var O5e=s(og);Qre=n(O5e,"STRONG",{});var Vzr=s(Qre);qJe=r(Vzr,"trocr"),Vzr.forEach(t),NJe=r(O5e," \u2014 "),$S=n(O5e,"A",{href:!0});var Xzr=s($S);jJe=r(Xzr,"TrOCRConfig"),Xzr.forEach(t),DJe=r(O5e," (TrOCR model)"),O5e.forEach(t),GJe=i(y),rg=n(y,"LI",{});var V5e=s(rg);Hre=n(V5e,"STRONG",{});var zzr=s(Hre);OJe=r(zzr,"unispeech"),zzr.forEach(t),VJe=r(V5e," \u2014 "),kS=n(V5e,"A",{href:!0});var Wzr=s(kS);XJe=r(Wzr,"UniSpeechConfig"),Wzr.forEach(t),zJe=r(V5e," (UniSpeech model)"),V5e.forEach(t),WJe=i(y),tg=n(y,"LI",{});var X5e=s(tg);Ure=n(X5e,"STRONG",{});var Qzr=s(Ure);QJe=r(Qzr,"unispeech-sat"),Qzr.forEach(t),HJe=r(X5e," \u2014 "),SS=n(X5e,"A",{href:!0});var Hzr=s(SS);UJe=r(Hzr,"UniSpeechSatConfig"),Hzr.forEach(t),JJe=r(X5e," (UniSpeechSat model)"),X5e.forEach(t),YJe=i(y),ag=n(y,"LI",{});var z5e=s(ag);Jre=n(z5e,"STRONG",{});var Uzr=s(Jre);KJe=r(Uzr,"van"),Uzr.forEach(t),ZJe=r(z5e," \u2014 "),RS=n(z5e,"A",{href:!0});var Jzr=s(RS);eYe=r(Jzr,"VanConfig"),Jzr.forEach(t),oYe=r(z5e," (VAN model)"),z5e.forEach(t),rYe=i(y),ng=n(y,"LI",{});var W5e=s(ng);Yre=n(W5e,"STRONG",{});var Yzr=s(Yre);tYe=r(Yzr,"vilt"),Yzr.forEach(t),aYe=r(W5e," \u2014 "),PS=n(W5e,"A",{href:!0});var Kzr=s(PS);nYe=r(Kzr,"ViltConfig"),Kzr.forEach(t),sYe=r(W5e," (ViLT model)"),W5e.forEach(t),lYe=i(y),sg=n(y,"LI",{});var Q5e=s(sg);Kre=n(Q5e,"STRONG",{});var Zzr=s(Kre);iYe=r(Zzr,"vision-encoder-decoder"),Zzr.forEach(t),dYe=r(Q5e," \u2014 "),BS=n(Q5e,"A",{href:!0});var eWr=s(BS);cYe=r(eWr,"VisionEncoderDecoderConfig"),eWr.forEach(t),fYe=r(Q5e," (Vision Encoder decoder model)"),Q5e.forEach(t),mYe=i(y),lg=n(y,"LI",{});var H5e=s(lg);Zre=n(H5e,"STRONG",{});var oWr=s(Zre);gYe=r(oWr,"vision-text-dual-encoder"),oWr.forEach(t),hYe=r(H5e," \u2014 "),IS=n(H5e,"A",{href:!0});var rWr=s(IS);pYe=r(rWr,"VisionTextDualEncoderConfig"),rWr.forEach(t),uYe=r(H5e," (VisionTextDualEncoder model)"),H5e.forEach(t),_Ye=i(y),ig=n(y,"LI",{});var U5e=s(ig);ete=n(U5e,"STRONG",{});var tWr=s(ete);bYe=r(tWr,"visual_bert"),tWr.forEach(t),vYe=r(U5e," \u2014 "),qS=n(U5e,"A",{href:!0});var aWr=s(qS);FYe=r(aWr,"VisualBertConfig"),aWr.forEach(t),TYe=r(U5e," (VisualBert model)"),U5e.forEach(t),MYe=i(y),dg=n(y,"LI",{});var J5e=s(dg);ote=n(J5e,"STRONG",{});var nWr=s(ote);EYe=r(nWr,"vit"),nWr.forEach(t),CYe=r(J5e," \u2014 "),NS=n(J5e,"A",{href:!0});var sWr=s(NS);wYe=r(sWr,"ViTConfig"),sWr.forEach(t),AYe=r(J5e," (ViT model)"),J5e.forEach(t),yYe=i(y),cg=n(y,"LI",{});var Y5e=s(cg);rte=n(Y5e,"STRONG",{});var lWr=s(rte);LYe=r(lWr,"vit_mae"),lWr.forEach(t),xYe=r(Y5e," \u2014 "),jS=n(Y5e,"A",{href:!0});var iWr=s(jS);$Ye=r(iWr,"ViTMAEConfig"),iWr.forEach(t),kYe=r(Y5e," (ViTMAE model)"),Y5e.forEach(t),SYe=i(y),fg=n(y,"LI",{});var K5e=s(fg);tte=n(K5e,"STRONG",{});var dWr=s(tte);RYe=r(dWr,"wav2vec2"),dWr.forEach(t),PYe=r(K5e," \u2014 "),DS=n(K5e,"A",{href:!0});var cWr=s(DS);BYe=r(cWr,"Wav2Vec2Config"),cWr.forEach(t),IYe=r(K5e," (Wav2Vec2 model)"),K5e.forEach(t),qYe=i(y),mg=n(y,"LI",{});var Z5e=s(mg);ate=n(Z5e,"STRONG",{});var fWr=s(ate);NYe=r(fWr,"wav2vec2-conformer"),fWr.forEach(t),jYe=r(Z5e," \u2014 "),GS=n(Z5e,"A",{href:!0});var mWr=s(GS);DYe=r(mWr,"Wav2Vec2ConformerConfig"),mWr.forEach(t),GYe=r(Z5e," (Wav2Vec2-Conformer model)"),Z5e.forEach(t),OYe=i(y),gg=n(y,"LI",{});var ewe=s(gg);nte=n(ewe,"STRONG",{});var gWr=s(nte);VYe=r(gWr,"wavlm"),gWr.forEach(t),XYe=r(ewe," \u2014 "),OS=n(ewe,"A",{href:!0});var hWr=s(OS);zYe=r(hWr,"WavLMConfig"),hWr.forEach(t),WYe=r(ewe," (WavLM model)"),ewe.forEach(t),QYe=i(y),hg=n(y,"LI",{});var owe=s(hg);ste=n(owe,"STRONG",{});var pWr=s(ste);HYe=r(pWr,"xglm"),pWr.forEach(t),UYe=r(owe," \u2014 "),VS=n(owe,"A",{href:!0});var uWr=s(VS);JYe=r(uWr,"XGLMConfig"),uWr.forEach(t),YYe=r(owe," (XGLM model)"),owe.forEach(t),KYe=i(y),pg=n(y,"LI",{});var rwe=s(pg);lte=n(rwe,"STRONG",{});var _Wr=s(lte);ZYe=r(_Wr,"xlm"),_Wr.forEach(t),eKe=r(rwe," \u2014 "),XS=n(rwe,"A",{href:!0});var bWr=s(XS);oKe=r(bWr,"XLMConfig"),bWr.forEach(t),rKe=r(rwe," (XLM model)"),rwe.forEach(t),tKe=i(y),ug=n(y,"LI",{});var twe=s(ug);ite=n(twe,"STRONG",{});var vWr=s(ite);aKe=r(vWr,"xlm-prophetnet"),vWr.forEach(t),nKe=r(twe," \u2014 "),zS=n(twe,"A",{href:!0});var FWr=s(zS);sKe=r(FWr,"XLMProphetNetConfig"),FWr.forEach(t),lKe=r(twe," (XLMProphetNet model)"),twe.forEach(t),iKe=i(y),_g=n(y,"LI",{});var awe=s(_g);dte=n(awe,"STRONG",{});var TWr=s(dte);dKe=r(TWr,"xlm-roberta"),TWr.forEach(t),cKe=r(awe," \u2014 "),WS=n(awe,"A",{href:!0});var MWr=s(WS);fKe=r(MWr,"XLMRobertaConfig"),MWr.forEach(t),mKe=r(awe," (XLM-RoBERTa model)"),awe.forEach(t),gKe=i(y),bg=n(y,"LI",{});var nwe=s(bg);cte=n(nwe,"STRONG",{});var EWr=s(cte);hKe=r(EWr,"xlm-roberta-xl"),EWr.forEach(t),pKe=r(nwe," \u2014 "),QS=n(nwe,"A",{href:!0});var CWr=s(QS);uKe=r(CWr,"XLMRobertaXLConfig"),CWr.forEach(t),_Ke=r(nwe," (XLM-RoBERTa-XL model)"),nwe.forEach(t),bKe=i(y),vg=n(y,"LI",{});var swe=s(vg);fte=n(swe,"STRONG",{});var wWr=s(fte);vKe=r(wWr,"xlnet"),wWr.forEach(t),FKe=r(swe," \u2014 "),HS=n(swe,"A",{href:!0});var AWr=s(HS);TKe=r(AWr,"XLNetConfig"),AWr.forEach(t),MKe=r(swe," (XLNet model)"),swe.forEach(t),EKe=i(y),Fg=n(y,"LI",{});var lwe=s(Fg);mte=n(lwe,"STRONG",{});var yWr=s(mte);CKe=r(yWr,"yolos"),yWr.forEach(t),wKe=r(lwe," \u2014 "),US=n(lwe,"A",{href:!0});var LWr=s(US);AKe=r(LWr,"YolosConfig"),LWr.forEach(t),yKe=r(lwe," (YOLOS model)"),lwe.forEach(t),LKe=i(y),Tg=n(y,"LI",{});var iwe=s(Tg);gte=n(iwe,"STRONG",{});var xWr=s(gte);xKe=r(xWr,"yoso"),xWr.forEach(t),$Ke=r(iwe," \u2014 "),JS=n(iwe,"A",{href:!0});var $Wr=s(JS);kKe=r($Wr,"YosoConfig"),$Wr.forEach(t),SKe=r(iwe," (YOSO model)"),iwe.forEach(t),y.forEach(t),RKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),PKe=i(et),Eg=n(et,"DIV",{class:!0});var Kje=s(Eg);T(RA.$$.fragment,Kje),BKe=i(Kje),hte=n(Kje,"P",{});var kWr=s(hte);IKe=r(kWr,"Register a new configuration for this class."),kWr.forEach(t),Kje.forEach(t),et.forEach(t),oNe=i(f),Ti=n(f,"H2",{class:!0});var Zje=s(Ti);Cg=n(Zje,"A",{id:!0,class:!0,href:!0});var SWr=s(Cg);pte=n(SWr,"SPAN",{});var RWr=s(pte);T(PA.$$.fragment,RWr),RWr.forEach(t),SWr.forEach(t),qKe=i(Zje),ute=n(Zje,"SPAN",{});var PWr=s(ute);NKe=r(PWr,"AutoTokenizer"),PWr.forEach(t),Zje.forEach(t),rNe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(BA.$$.fragment,qs),jKe=i(qs),IA=n(qs,"P",{});var eDe=s(IA);DKe=r(eDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YS=n(eDe,"A",{href:!0});var BWr=s(YS);GKe=r(BWr,"AutoTokenizer.from_pretrained()"),BWr.forEach(t),OKe=r(eDe," class method."),eDe.forEach(t),VKe=i(qs),qA=n(qs,"P",{});var oDe=s(qA);XKe=r(oDe,"This class cannot be instantiated directly using "),_te=n(oDe,"CODE",{});var IWr=s(_te);zKe=r(IWr,"__init__()"),IWr.forEach(t),WKe=r(oDe," (throws an error)."),oDe.forEach(t),QKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(NA.$$.fragment,Ns),HKe=i(Ns),bte=n(Ns,"P",{});var qWr=s(bte);UKe=r(qWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qWr.forEach(t),JKe=i(Ns),Aa=n(Ns,"P",{});var Lw=s(Aa);YKe=r(Lw,"The tokenizer class to instantiate is selected based on the "),vte=n(Lw,"CODE",{});var NWr=s(vte);KKe=r(NWr,"model_type"),NWr.forEach(t),ZKe=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Fte=n(Lw,"CODE",{});var jWr=s(Fte);eZe=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),oZe=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tte=n(Lw,"CODE",{});var DWr=s(Tte);rZe=r(DWr,"pretrained_model_name_or_path"),DWr.forEach(t),tZe=r(Lw,":"),Lw.forEach(t),aZe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var jx=s(Sn);Mte=n(jx,"STRONG",{});var GWr=s(Mte);nZe=r(GWr,"albert"),GWr.forEach(t),sZe=r(jx," \u2014 "),KS=n(jx,"A",{href:!0});var OWr=s(KS);lZe=r(OWr,"AlbertTokenizer"),OWr.forEach(t),iZe=r(jx," or "),ZS=n(jx,"A",{href:!0});var VWr=s(ZS);dZe=r(VWr,"AlbertTokenizerFast"),VWr.forEach(t),cZe=r(jx," (ALBERT model)"),jx.forEach(t),fZe=i(S),Rn=n(S,"LI",{});var Dx=s(Rn);Ete=n(Dx,"STRONG",{});var XWr=s(Ete);mZe=r(XWr,"bart"),XWr.forEach(t),gZe=r(Dx," \u2014 "),eR=n(Dx,"A",{href:!0});var zWr=s(eR);hZe=r(zWr,"BartTokenizer"),zWr.forEach(t),pZe=r(Dx," or "),oR=n(Dx,"A",{href:!0});var WWr=s(oR);uZe=r(WWr,"BartTokenizerFast"),WWr.forEach(t),_Ze=r(Dx," (BART model)"),Dx.forEach(t),bZe=i(S),Pn=n(S,"LI",{});var Gx=s(Pn);Cte=n(Gx,"STRONG",{});var QWr=s(Cte);vZe=r(QWr,"barthez"),QWr.forEach(t),FZe=r(Gx," \u2014 "),rR=n(Gx,"A",{href:!0});var HWr=s(rR);TZe=r(HWr,"BarthezTokenizer"),HWr.forEach(t),MZe=r(Gx," or "),tR=n(Gx,"A",{href:!0});var UWr=s(tR);EZe=r(UWr,"BarthezTokenizerFast"),UWr.forEach(t),CZe=r(Gx," (BARThez model)"),Gx.forEach(t),wZe=i(S),wg=n(S,"LI",{});var dwe=s(wg);wte=n(dwe,"STRONG",{});var JWr=s(wte);AZe=r(JWr,"bartpho"),JWr.forEach(t),yZe=r(dwe," \u2014 "),aR=n(dwe,"A",{href:!0});var YWr=s(aR);LZe=r(YWr,"BartphoTokenizer"),YWr.forEach(t),xZe=r(dwe," (BARTpho model)"),dwe.forEach(t),$Ze=i(S),Bn=n(S,"LI",{});var Ox=s(Bn);Ate=n(Ox,"STRONG",{});var KWr=s(Ate);kZe=r(KWr,"bert"),KWr.forEach(t),SZe=r(Ox," \u2014 "),nR=n(Ox,"A",{href:!0});var ZWr=s(nR);RZe=r(ZWr,"BertTokenizer"),ZWr.forEach(t),PZe=r(Ox," or "),sR=n(Ox,"A",{href:!0});var eQr=s(sR);BZe=r(eQr,"BertTokenizerFast"),eQr.forEach(t),IZe=r(Ox," (BERT model)"),Ox.forEach(t),qZe=i(S),Ag=n(S,"LI",{});var cwe=s(Ag);yte=n(cwe,"STRONG",{});var oQr=s(yte);NZe=r(oQr,"bert-generation"),oQr.forEach(t),jZe=r(cwe," \u2014 "),lR=n(cwe,"A",{href:!0});var rQr=s(lR);DZe=r(rQr,"BertGenerationTokenizer"),rQr.forEach(t),GZe=r(cwe," (Bert Generation model)"),cwe.forEach(t),OZe=i(S),yg=n(S,"LI",{});var fwe=s(yg);Lte=n(fwe,"STRONG",{});var tQr=s(Lte);VZe=r(tQr,"bert-japanese"),tQr.forEach(t),XZe=r(fwe," \u2014 "),iR=n(fwe,"A",{href:!0});var aQr=s(iR);zZe=r(aQr,"BertJapaneseTokenizer"),aQr.forEach(t),WZe=r(fwe," (BertJapanese model)"),fwe.forEach(t),QZe=i(S),Lg=n(S,"LI",{});var mwe=s(Lg);xte=n(mwe,"STRONG",{});var nQr=s(xte);HZe=r(nQr,"bertweet"),nQr.forEach(t),UZe=r(mwe," \u2014 "),dR=n(mwe,"A",{href:!0});var sQr=s(dR);JZe=r(sQr,"BertweetTokenizer"),sQr.forEach(t),YZe=r(mwe," (Bertweet model)"),mwe.forEach(t),KZe=i(S),In=n(S,"LI",{});var Vx=s(In);$te=n(Vx,"STRONG",{});var lQr=s($te);ZZe=r(lQr,"big_bird"),lQr.forEach(t),eeo=r(Vx," \u2014 "),cR=n(Vx,"A",{href:!0});var iQr=s(cR);oeo=r(iQr,"BigBirdTokenizer"),iQr.forEach(t),reo=r(Vx," or "),fR=n(Vx,"A",{href:!0});var dQr=s(fR);teo=r(dQr,"BigBirdTokenizerFast"),dQr.forEach(t),aeo=r(Vx," (BigBird model)"),Vx.forEach(t),neo=i(S),qn=n(S,"LI",{});var Xx=s(qn);kte=n(Xx,"STRONG",{});var cQr=s(kte);seo=r(cQr,"bigbird_pegasus"),cQr.forEach(t),leo=r(Xx," \u2014 "),mR=n(Xx,"A",{href:!0});var fQr=s(mR);ieo=r(fQr,"PegasusTokenizer"),fQr.forEach(t),deo=r(Xx," or "),gR=n(Xx,"A",{href:!0});var mQr=s(gR);ceo=r(mQr,"PegasusTokenizerFast"),mQr.forEach(t),feo=r(Xx," (BigBirdPegasus model)"),Xx.forEach(t),meo=i(S),Nn=n(S,"LI",{});var zx=s(Nn);Ste=n(zx,"STRONG",{});var gQr=s(Ste);geo=r(gQr,"blenderbot"),gQr.forEach(t),heo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var hQr=s(hR);peo=r(hQr,"BlenderbotTokenizer"),hQr.forEach(t),ueo=r(zx," or "),pR=n(zx,"A",{href:!0});var pQr=s(pR);_eo=r(pQr,"BlenderbotTokenizerFast"),pQr.forEach(t),beo=r(zx," (Blenderbot model)"),zx.forEach(t),veo=i(S),xg=n(S,"LI",{});var gwe=s(xg);Rte=n(gwe,"STRONG",{});var uQr=s(Rte);Feo=r(uQr,"blenderbot-small"),uQr.forEach(t),Teo=r(gwe," \u2014 "),uR=n(gwe,"A",{href:!0});var _Qr=s(uR);Meo=r(_Qr,"BlenderbotSmallTokenizer"),_Qr.forEach(t),Eeo=r(gwe," (BlenderbotSmall model)"),gwe.forEach(t),Ceo=i(S),$g=n(S,"LI",{});var hwe=s($g);Pte=n(hwe,"STRONG",{});var bQr=s(Pte);weo=r(bQr,"byt5"),bQr.forEach(t),Aeo=r(hwe," \u2014 "),_R=n(hwe,"A",{href:!0});var vQr=s(_R);yeo=r(vQr,"ByT5Tokenizer"),vQr.forEach(t),Leo=r(hwe," (ByT5 model)"),hwe.forEach(t),xeo=i(S),jn=n(S,"LI",{});var Wx=s(jn);Bte=n(Wx,"STRONG",{});var FQr=s(Bte);$eo=r(FQr,"camembert"),FQr.forEach(t),keo=r(Wx," \u2014 "),bR=n(Wx,"A",{href:!0});var TQr=s(bR);Seo=r(TQr,"CamembertTokenizer"),TQr.forEach(t),Reo=r(Wx," or "),vR=n(Wx,"A",{href:!0});var MQr=s(vR);Peo=r(MQr,"CamembertTokenizerFast"),MQr.forEach(t),Beo=r(Wx," (CamemBERT model)"),Wx.forEach(t),Ieo=i(S),kg=n(S,"LI",{});var pwe=s(kg);Ite=n(pwe,"STRONG",{});var EQr=s(Ite);qeo=r(EQr,"canine"),EQr.forEach(t),Neo=r(pwe," \u2014 "),FR=n(pwe,"A",{href:!0});var CQr=s(FR);jeo=r(CQr,"CanineTokenizer"),CQr.forEach(t),Deo=r(pwe," (Canine model)"),pwe.forEach(t),Geo=i(S),Dn=n(S,"LI",{});var Qx=s(Dn);qte=n(Qx,"STRONG",{});var wQr=s(qte);Oeo=r(wQr,"clip"),wQr.forEach(t),Veo=r(Qx," \u2014 "),TR=n(Qx,"A",{href:!0});var AQr=s(TR);Xeo=r(AQr,"CLIPTokenizer"),AQr.forEach(t),zeo=r(Qx," or "),MR=n(Qx,"A",{href:!0});var yQr=s(MR);Weo=r(yQr,"CLIPTokenizerFast"),yQr.forEach(t),Qeo=r(Qx," (CLIP model)"),Qx.forEach(t),Heo=i(S),Gn=n(S,"LI",{});var Hx=s(Gn);Nte=n(Hx,"STRONG",{});var LQr=s(Nte);Ueo=r(LQr,"convbert"),LQr.forEach(t),Jeo=r(Hx," \u2014 "),ER=n(Hx,"A",{href:!0});var xQr=s(ER);Yeo=r(xQr,"ConvBertTokenizer"),xQr.forEach(t),Keo=r(Hx," or "),CR=n(Hx,"A",{href:!0});var $Qr=s(CR);Zeo=r($Qr,"ConvBertTokenizerFast"),$Qr.forEach(t),eoo=r(Hx," (ConvBERT model)"),Hx.forEach(t),ooo=i(S),On=n(S,"LI",{});var Ux=s(On);jte=n(Ux,"STRONG",{});var kQr=s(jte);roo=r(kQr,"cpm"),kQr.forEach(t),too=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var SQr=s(wR);aoo=r(SQr,"CpmTokenizer"),SQr.forEach(t),noo=r(Ux," or "),AR=n(Ux,"A",{href:!0});var RQr=s(AR);soo=r(RQr,"CpmTokenizerFast"),RQr.forEach(t),loo=r(Ux," (CPM model)"),Ux.forEach(t),ioo=i(S),Sg=n(S,"LI",{});var uwe=s(Sg);Dte=n(uwe,"STRONG",{});var PQr=s(Dte);doo=r(PQr,"ctrl"),PQr.forEach(t),coo=r(uwe," \u2014 "),yR=n(uwe,"A",{href:!0});var BQr=s(yR);foo=r(BQr,"CTRLTokenizer"),BQr.forEach(t),moo=r(uwe," (CTRL model)"),uwe.forEach(t),goo=i(S),Vn=n(S,"LI",{});var Jx=s(Vn);Gte=n(Jx,"STRONG",{});var IQr=s(Gte);hoo=r(IQr,"data2vec-text"),IQr.forEach(t),poo=r(Jx," \u2014 "),LR=n(Jx,"A",{href:!0});var qQr=s(LR);uoo=r(qQr,"RobertaTokenizer"),qQr.forEach(t),_oo=r(Jx," or "),xR=n(Jx,"A",{href:!0});var NQr=s(xR);boo=r(NQr,"RobertaTokenizerFast"),NQr.forEach(t),voo=r(Jx," (Data2VecText model)"),Jx.forEach(t),Foo=i(S),Xn=n(S,"LI",{});var Yx=s(Xn);Ote=n(Yx,"STRONG",{});var jQr=s(Ote);Too=r(jQr,"deberta"),jQr.forEach(t),Moo=r(Yx," \u2014 "),$R=n(Yx,"A",{href:!0});var DQr=s($R);Eoo=r(DQr,"DebertaTokenizer"),DQr.forEach(t),Coo=r(Yx," or "),kR=n(Yx,"A",{href:!0});var GQr=s(kR);woo=r(GQr,"DebertaTokenizerFast"),GQr.forEach(t),Aoo=r(Yx," (DeBERTa model)"),Yx.forEach(t),yoo=i(S),zn=n(S,"LI",{});var Kx=s(zn);Vte=n(Kx,"STRONG",{});var OQr=s(Vte);Loo=r(OQr,"deberta-v2"),OQr.forEach(t),xoo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var VQr=s(SR);$oo=r(VQr,"DebertaV2Tokenizer"),VQr.forEach(t),koo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var XQr=s(RR);Soo=r(XQr,"DebertaV2TokenizerFast"),XQr.forEach(t),Roo=r(Kx," (DeBERTa-v2 model)"),Kx.forEach(t),Poo=i(S),Wn=n(S,"LI",{});var Zx=s(Wn);Xte=n(Zx,"STRONG",{});var zQr=s(Xte);Boo=r(zQr,"distilbert"),zQr.forEach(t),Ioo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var WQr=s(PR);qoo=r(WQr,"DistilBertTokenizer"),WQr.forEach(t),Noo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var QQr=s(BR);joo=r(QQr,"DistilBertTokenizerFast"),QQr.forEach(t),Doo=r(Zx," (DistilBERT model)"),Zx.forEach(t),Goo=i(S),Qn=n(S,"LI",{});var e$=s(Qn);zte=n(e$,"STRONG",{});var HQr=s(zte);Ooo=r(HQr,"dpr"),HQr.forEach(t),Voo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var UQr=s(IR);Xoo=r(UQr,"DPRQuestionEncoderTokenizer"),UQr.forEach(t),zoo=r(e$," or "),qR=n(e$,"A",{href:!0});var JQr=s(qR);Woo=r(JQr,"DPRQuestionEncoderTokenizerFast"),JQr.forEach(t),Qoo=r(e$," (DPR model)"),e$.forEach(t),Hoo=i(S),Hn=n(S,"LI",{});var o$=s(Hn);Wte=n(o$,"STRONG",{});var YQr=s(Wte);Uoo=r(YQr,"electra"),YQr.forEach(t),Joo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var KQr=s(NR);Yoo=r(KQr,"ElectraTokenizer"),KQr.forEach(t),Koo=r(o$," or "),jR=n(o$,"A",{href:!0});var ZQr=s(jR);Zoo=r(ZQr,"ElectraTokenizerFast"),ZQr.forEach(t),ero=r(o$," (ELECTRA model)"),o$.forEach(t),oro=i(S),Rg=n(S,"LI",{});var _we=s(Rg);Qte=n(_we,"STRONG",{});var eHr=s(Qte);rro=r(eHr,"flaubert"),eHr.forEach(t),tro=r(_we," \u2014 "),DR=n(_we,"A",{href:!0});var oHr=s(DR);aro=r(oHr,"FlaubertTokenizer"),oHr.forEach(t),nro=r(_we," (FlauBERT model)"),_we.forEach(t),sro=i(S),Un=n(S,"LI",{});var r$=s(Un);Hte=n(r$,"STRONG",{});var rHr=s(Hte);lro=r(rHr,"fnet"),rHr.forEach(t),iro=r(r$," \u2014 "),GR=n(r$,"A",{href:!0});var tHr=s(GR);dro=r(tHr,"FNetTokenizer"),tHr.forEach(t),cro=r(r$," or "),OR=n(r$,"A",{href:!0});var aHr=s(OR);fro=r(aHr,"FNetTokenizerFast"),aHr.forEach(t),mro=r(r$," (FNet model)"),r$.forEach(t),gro=i(S),Pg=n(S,"LI",{});var bwe=s(Pg);Ute=n(bwe,"STRONG",{});var nHr=s(Ute);hro=r(nHr,"fsmt"),nHr.forEach(t),pro=r(bwe," \u2014 "),VR=n(bwe,"A",{href:!0});var sHr=s(VR);uro=r(sHr,"FSMTTokenizer"),sHr.forEach(t),_ro=r(bwe," (FairSeq Machine-Translation model)"),bwe.forEach(t),bro=i(S),Jn=n(S,"LI",{});var t$=s(Jn);Jte=n(t$,"STRONG",{});var lHr=s(Jte);vro=r(lHr,"funnel"),lHr.forEach(t),Fro=r(t$," \u2014 "),XR=n(t$,"A",{href:!0});var iHr=s(XR);Tro=r(iHr,"FunnelTokenizer"),iHr.forEach(t),Mro=r(t$," or "),zR=n(t$,"A",{href:!0});var dHr=s(zR);Ero=r(dHr,"FunnelTokenizerFast"),dHr.forEach(t),Cro=r(t$," (Funnel Transformer model)"),t$.forEach(t),wro=i(S),Yn=n(S,"LI",{});var a$=s(Yn);Yte=n(a$,"STRONG",{});var cHr=s(Yte);Aro=r(cHr,"gpt2"),cHr.forEach(t),yro=r(a$," \u2014 "),WR=n(a$,"A",{href:!0});var fHr=s(WR);Lro=r(fHr,"GPT2Tokenizer"),fHr.forEach(t),xro=r(a$," or "),QR=n(a$,"A",{href:!0});var mHr=s(QR);$ro=r(mHr,"GPT2TokenizerFast"),mHr.forEach(t),kro=r(a$," (OpenAI GPT-2 model)"),a$.forEach(t),Sro=i(S),Kn=n(S,"LI",{});var n$=s(Kn);Kte=n(n$,"STRONG",{});var gHr=s(Kte);Rro=r(gHr,"gpt_neo"),gHr.forEach(t),Pro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var hHr=s(HR);Bro=r(hHr,"GPT2Tokenizer"),hHr.forEach(t),Iro=r(n$," or "),UR=n(n$,"A",{href:!0});var pHr=s(UR);qro=r(pHr,"GPT2TokenizerFast"),pHr.forEach(t),Nro=r(n$," (GPT Neo model)"),n$.forEach(t),jro=i(S),Zn=n(S,"LI",{});var s$=s(Zn);Zte=n(s$,"STRONG",{});var uHr=s(Zte);Dro=r(uHr,"gptj"),uHr.forEach(t),Gro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var _Hr=s(JR);Oro=r(_Hr,"GPT2Tokenizer"),_Hr.forEach(t),Vro=r(s$," or "),YR=n(s$,"A",{href:!0});var bHr=s(YR);Xro=r(bHr,"GPT2TokenizerFast"),bHr.forEach(t),zro=r(s$," (GPT-J model)"),s$.forEach(t),Wro=i(S),es=n(S,"LI",{});var l$=s(es);eae=n(l$,"STRONG",{});var vHr=s(eae);Qro=r(vHr,"herbert"),vHr.forEach(t),Hro=r(l$," \u2014 "),KR=n(l$,"A",{href:!0});var FHr=s(KR);Uro=r(FHr,"HerbertTokenizer"),FHr.forEach(t),Jro=r(l$," or "),ZR=n(l$,"A",{href:!0});var THr=s(ZR);Yro=r(THr,"HerbertTokenizerFast"),THr.forEach(t),Kro=r(l$," (HerBERT model)"),l$.forEach(t),Zro=i(S),Bg=n(S,"LI",{});var vwe=s(Bg);oae=n(vwe,"STRONG",{});var MHr=s(oae);eto=r(MHr,"hubert"),MHr.forEach(t),oto=r(vwe," \u2014 "),eP=n(vwe,"A",{href:!0});var EHr=s(eP);rto=r(EHr,"Wav2Vec2CTCTokenizer"),EHr.forEach(t),tto=r(vwe," (Hubert model)"),vwe.forEach(t),ato=i(S),os=n(S,"LI",{});var i$=s(os);rae=n(i$,"STRONG",{});var CHr=s(rae);nto=r(CHr,"ibert"),CHr.forEach(t),sto=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var wHr=s(oP);lto=r(wHr,"RobertaTokenizer"),wHr.forEach(t),ito=r(i$," or "),rP=n(i$,"A",{href:!0});var AHr=s(rP);dto=r(AHr,"RobertaTokenizerFast"),AHr.forEach(t),cto=r(i$," (I-BERT model)"),i$.forEach(t),fto=i(S),rs=n(S,"LI",{});var d$=s(rs);tae=n(d$,"STRONG",{});var yHr=s(tae);mto=r(yHr,"layoutlm"),yHr.forEach(t),gto=r(d$," \u2014 "),tP=n(d$,"A",{href:!0});var LHr=s(tP);hto=r(LHr,"LayoutLMTokenizer"),LHr.forEach(t),pto=r(d$," or "),aP=n(d$,"A",{href:!0});var xHr=s(aP);uto=r(xHr,"LayoutLMTokenizerFast"),xHr.forEach(t),_to=r(d$," (LayoutLM model)"),d$.forEach(t),bto=i(S),ts=n(S,"LI",{});var c$=s(ts);aae=n(c$,"STRONG",{});var $Hr=s(aae);vto=r($Hr,"layoutlmv2"),$Hr.forEach(t),Fto=r(c$," \u2014 "),nP=n(c$,"A",{href:!0});var kHr=s(nP);Tto=r(kHr,"LayoutLMv2Tokenizer"),kHr.forEach(t),Mto=r(c$," or "),sP=n(c$,"A",{href:!0});var SHr=s(sP);Eto=r(SHr,"LayoutLMv2TokenizerFast"),SHr.forEach(t),Cto=r(c$," (LayoutLMv2 model)"),c$.forEach(t),wto=i(S),as=n(S,"LI",{});var f$=s(as);nae=n(f$,"STRONG",{});var RHr=s(nae);Ato=r(RHr,"layoutlmv3"),RHr.forEach(t),yto=r(f$," \u2014 "),lP=n(f$,"A",{href:!0});var PHr=s(lP);Lto=r(PHr,"LayoutLMv3Tokenizer"),PHr.forEach(t),xto=r(f$," or "),iP=n(f$,"A",{href:!0});var BHr=s(iP);$to=r(BHr,"LayoutLMv3TokenizerFast"),BHr.forEach(t),kto=r(f$," (LayoutLMv3 model)"),f$.forEach(t),Sto=i(S),ns=n(S,"LI",{});var m$=s(ns);sae=n(m$,"STRONG",{});var IHr=s(sae);Rto=r(IHr,"layoutxlm"),IHr.forEach(t),Pto=r(m$," \u2014 "),dP=n(m$,"A",{href:!0});var qHr=s(dP);Bto=r(qHr,"LayoutXLMTokenizer"),qHr.forEach(t),Ito=r(m$," or "),cP=n(m$,"A",{href:!0});var NHr=s(cP);qto=r(NHr,"LayoutXLMTokenizerFast"),NHr.forEach(t),Nto=r(m$," (LayoutXLM model)"),m$.forEach(t),jto=i(S),ss=n(S,"LI",{});var g$=s(ss);lae=n(g$,"STRONG",{});var jHr=s(lae);Dto=r(jHr,"led"),jHr.forEach(t),Gto=r(g$," \u2014 "),fP=n(g$,"A",{href:!0});var DHr=s(fP);Oto=r(DHr,"LEDTokenizer"),DHr.forEach(t),Vto=r(g$," or "),mP=n(g$,"A",{href:!0});var GHr=s(mP);Xto=r(GHr,"LEDTokenizerFast"),GHr.forEach(t),zto=r(g$," (LED model)"),g$.forEach(t),Wto=i(S),ls=n(S,"LI",{});var h$=s(ls);iae=n(h$,"STRONG",{});var OHr=s(iae);Qto=r(OHr,"longformer"),OHr.forEach(t),Hto=r(h$," \u2014 "),gP=n(h$,"A",{href:!0});var VHr=s(gP);Uto=r(VHr,"LongformerTokenizer"),VHr.forEach(t),Jto=r(h$," or "),hP=n(h$,"A",{href:!0});var XHr=s(hP);Yto=r(XHr,"LongformerTokenizerFast"),XHr.forEach(t),Kto=r(h$," (Longformer model)"),h$.forEach(t),Zto=i(S),Ig=n(S,"LI",{});var Fwe=s(Ig);dae=n(Fwe,"STRONG",{});var zHr=s(dae);eao=r(zHr,"luke"),zHr.forEach(t),oao=r(Fwe," \u2014 "),pP=n(Fwe,"A",{href:!0});var WHr=s(pP);rao=r(WHr,"LukeTokenizer"),WHr.forEach(t),tao=r(Fwe," (LUKE model)"),Fwe.forEach(t),aao=i(S),is=n(S,"LI",{});var p$=s(is);cae=n(p$,"STRONG",{});var QHr=s(cae);nao=r(QHr,"lxmert"),QHr.forEach(t),sao=r(p$," \u2014 "),uP=n(p$,"A",{href:!0});var HHr=s(uP);lao=r(HHr,"LxmertTokenizer"),HHr.forEach(t),iao=r(p$," or "),_P=n(p$,"A",{href:!0});var UHr=s(_P);dao=r(UHr,"LxmertTokenizerFast"),UHr.forEach(t),cao=r(p$," (LXMERT model)"),p$.forEach(t),fao=i(S),qg=n(S,"LI",{});var Twe=s(qg);fae=n(Twe,"STRONG",{});var JHr=s(fae);mao=r(JHr,"m2m_100"),JHr.forEach(t),gao=r(Twe," \u2014 "),bP=n(Twe,"A",{href:!0});var YHr=s(bP);hao=r(YHr,"M2M100Tokenizer"),YHr.forEach(t),pao=r(Twe," (M2M100 model)"),Twe.forEach(t),uao=i(S),Ng=n(S,"LI",{});var Mwe=s(Ng);mae=n(Mwe,"STRONG",{});var KHr=s(mae);_ao=r(KHr,"marian"),KHr.forEach(t),bao=r(Mwe," \u2014 "),vP=n(Mwe,"A",{href:!0});var ZHr=s(vP);vao=r(ZHr,"MarianTokenizer"),ZHr.forEach(t),Fao=r(Mwe," (Marian model)"),Mwe.forEach(t),Tao=i(S),ds=n(S,"LI",{});var u$=s(ds);gae=n(u$,"STRONG",{});var eUr=s(gae);Mao=r(eUr,"mbart"),eUr.forEach(t),Eao=r(u$," \u2014 "),FP=n(u$,"A",{href:!0});var oUr=s(FP);Cao=r(oUr,"MBartTokenizer"),oUr.forEach(t),wao=r(u$," or "),TP=n(u$,"A",{href:!0});var rUr=s(TP);Aao=r(rUr,"MBartTokenizerFast"),rUr.forEach(t),yao=r(u$," (mBART model)"),u$.forEach(t),Lao=i(S),cs=n(S,"LI",{});var _$=s(cs);hae=n(_$,"STRONG",{});var tUr=s(hae);xao=r(tUr,"mbart50"),tUr.forEach(t),$ao=r(_$," \u2014 "),MP=n(_$,"A",{href:!0});var aUr=s(MP);kao=r(aUr,"MBart50Tokenizer"),aUr.forEach(t),Sao=r(_$," or "),EP=n(_$,"A",{href:!0});var nUr=s(EP);Rao=r(nUr,"MBart50TokenizerFast"),nUr.forEach(t),Pao=r(_$," (mBART-50 model)"),_$.forEach(t),Bao=i(S),fs=n(S,"LI",{});var b$=s(fs);pae=n(b$,"STRONG",{});var sUr=s(pae);Iao=r(sUr,"megatron-bert"),sUr.forEach(t),qao=r(b$," \u2014 "),CP=n(b$,"A",{href:!0});var lUr=s(CP);Nao=r(lUr,"BertTokenizer"),lUr.forEach(t),jao=r(b$," or "),wP=n(b$,"A",{href:!0});var iUr=s(wP);Dao=r(iUr,"BertTokenizerFast"),iUr.forEach(t),Gao=r(b$," (MegatronBert model)"),b$.forEach(t),Oao=i(S),jg=n(S,"LI",{});var Ewe=s(jg);uae=n(Ewe,"STRONG",{});var dUr=s(uae);Vao=r(dUr,"mluke"),dUr.forEach(t),Xao=r(Ewe," \u2014 "),AP=n(Ewe,"A",{href:!0});var cUr=s(AP);zao=r(cUr,"MLukeTokenizer"),cUr.forEach(t),Wao=r(Ewe," (mLUKE model)"),Ewe.forEach(t),Qao=i(S),ms=n(S,"LI",{});var v$=s(ms);_ae=n(v$,"STRONG",{});var fUr=s(_ae);Hao=r(fUr,"mobilebert"),fUr.forEach(t),Uao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var mUr=s(yP);Jao=r(mUr,"MobileBertTokenizer"),mUr.forEach(t),Yao=r(v$," or "),LP=n(v$,"A",{href:!0});var gUr=s(LP);Kao=r(gUr,"MobileBertTokenizerFast"),gUr.forEach(t),Zao=r(v$," (MobileBERT model)"),v$.forEach(t),eno=i(S),gs=n(S,"LI",{});var F$=s(gs);bae=n(F$,"STRONG",{});var hUr=s(bae);ono=r(hUr,"mpnet"),hUr.forEach(t),rno=r(F$," \u2014 "),xP=n(F$,"A",{href:!0});var pUr=s(xP);tno=r(pUr,"MPNetTokenizer"),pUr.forEach(t),ano=r(F$," or "),$P=n(F$,"A",{href:!0});var uUr=s($P);nno=r(uUr,"MPNetTokenizerFast"),uUr.forEach(t),sno=r(F$," (MPNet model)"),F$.forEach(t),lno=i(S),hs=n(S,"LI",{});var T$=s(hs);vae=n(T$,"STRONG",{});var _Ur=s(vae);ino=r(_Ur,"mt5"),_Ur.forEach(t),dno=r(T$," \u2014 "),kP=n(T$,"A",{href:!0});var bUr=s(kP);cno=r(bUr,"MT5Tokenizer"),bUr.forEach(t),fno=r(T$," or "),SP=n(T$,"A",{href:!0});var vUr=s(SP);mno=r(vUr,"MT5TokenizerFast"),vUr.forEach(t),gno=r(T$," (mT5 model)"),T$.forEach(t),hno=i(S),ps=n(S,"LI",{});var M$=s(ps);Fae=n(M$,"STRONG",{});var FUr=s(Fae);pno=r(FUr,"nystromformer"),FUr.forEach(t),uno=r(M$," \u2014 "),RP=n(M$,"A",{href:!0});var TUr=s(RP);_no=r(TUr,"AlbertTokenizer"),TUr.forEach(t),bno=r(M$," or "),PP=n(M$,"A",{href:!0});var MUr=s(PP);vno=r(MUr,"AlbertTokenizerFast"),MUr.forEach(t),Fno=r(M$," (Nystromformer model)"),M$.forEach(t),Tno=i(S),us=n(S,"LI",{});var E$=s(us);Tae=n(E$,"STRONG",{});var EUr=s(Tae);Mno=r(EUr,"openai-gpt"),EUr.forEach(t),Eno=r(E$," \u2014 "),BP=n(E$,"A",{href:!0});var CUr=s(BP);Cno=r(CUr,"OpenAIGPTTokenizer"),CUr.forEach(t),wno=r(E$," or "),IP=n(E$,"A",{href:!0});var wUr=s(IP);Ano=r(wUr,"OpenAIGPTTokenizerFast"),wUr.forEach(t),yno=r(E$," (OpenAI GPT model)"),E$.forEach(t),Lno=i(S),Dg=n(S,"LI",{});var Cwe=s(Dg);Mae=n(Cwe,"STRONG",{});var AUr=s(Mae);xno=r(AUr,"opt"),AUr.forEach(t),$no=r(Cwe," \u2014 "),qP=n(Cwe,"A",{href:!0});var yUr=s(qP);kno=r(yUr,"GPT2Tokenizer"),yUr.forEach(t),Sno=r(Cwe," (OPT model)"),Cwe.forEach(t),Rno=i(S),_s=n(S,"LI",{});var C$=s(_s);Eae=n(C$,"STRONG",{});var LUr=s(Eae);Pno=r(LUr,"pegasus"),LUr.forEach(t),Bno=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var xUr=s(NP);Ino=r(xUr,"PegasusTokenizer"),xUr.forEach(t),qno=r(C$," or "),jP=n(C$,"A",{href:!0});var $Ur=s(jP);Nno=r($Ur,"PegasusTokenizerFast"),$Ur.forEach(t),jno=r(C$," (Pegasus model)"),C$.forEach(t),Dno=i(S),Gg=n(S,"LI",{});var wwe=s(Gg);Cae=n(wwe,"STRONG",{});var kUr=s(Cae);Gno=r(kUr,"perceiver"),kUr.forEach(t),Ono=r(wwe," \u2014 "),DP=n(wwe,"A",{href:!0});var SUr=s(DP);Vno=r(SUr,"PerceiverTokenizer"),SUr.forEach(t),Xno=r(wwe," (Perceiver model)"),wwe.forEach(t),zno=i(S),Og=n(S,"LI",{});var Awe=s(Og);wae=n(Awe,"STRONG",{});var RUr=s(wae);Wno=r(RUr,"phobert"),RUr.forEach(t),Qno=r(Awe," \u2014 "),GP=n(Awe,"A",{href:!0});var PUr=s(GP);Hno=r(PUr,"PhobertTokenizer"),PUr.forEach(t),Uno=r(Awe," (PhoBERT model)"),Awe.forEach(t),Jno=i(S),Vg=n(S,"LI",{});var ywe=s(Vg);Aae=n(ywe,"STRONG",{});var BUr=s(Aae);Yno=r(BUr,"plbart"),BUr.forEach(t),Kno=r(ywe," \u2014 "),OP=n(ywe,"A",{href:!0});var IUr=s(OP);Zno=r(IUr,"PLBartTokenizer"),IUr.forEach(t),eso=r(ywe," (PLBart model)"),ywe.forEach(t),oso=i(S),Xg=n(S,"LI",{});var Lwe=s(Xg);yae=n(Lwe,"STRONG",{});var qUr=s(yae);rso=r(qUr,"prophetnet"),qUr.forEach(t),tso=r(Lwe," \u2014 "),VP=n(Lwe,"A",{href:!0});var NUr=s(VP);aso=r(NUr,"ProphetNetTokenizer"),NUr.forEach(t),nso=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),sso=i(S),bs=n(S,"LI",{});var w$=s(bs);Lae=n(w$,"STRONG",{});var jUr=s(Lae);lso=r(jUr,"qdqbert"),jUr.forEach(t),iso=r(w$," \u2014 "),XP=n(w$,"A",{href:!0});var DUr=s(XP);dso=r(DUr,"BertTokenizer"),DUr.forEach(t),cso=r(w$," or "),zP=n(w$,"A",{href:!0});var GUr=s(zP);fso=r(GUr,"BertTokenizerFast"),GUr.forEach(t),mso=r(w$," (QDQBert model)"),w$.forEach(t),gso=i(S),zg=n(S,"LI",{});var xwe=s(zg);xae=n(xwe,"STRONG",{});var OUr=s(xae);hso=r(OUr,"rag"),OUr.forEach(t),pso=r(xwe," \u2014 "),WP=n(xwe,"A",{href:!0});var VUr=s(WP);uso=r(VUr,"RagTokenizer"),VUr.forEach(t),_so=r(xwe," (RAG model)"),xwe.forEach(t),bso=i(S),vs=n(S,"LI",{});var A$=s(vs);$ae=n(A$,"STRONG",{});var XUr=s($ae);vso=r(XUr,"realm"),XUr.forEach(t),Fso=r(A$," \u2014 "),QP=n(A$,"A",{href:!0});var zUr=s(QP);Tso=r(zUr,"RealmTokenizer"),zUr.forEach(t),Mso=r(A$," or "),HP=n(A$,"A",{href:!0});var WUr=s(HP);Eso=r(WUr,"RealmTokenizerFast"),WUr.forEach(t),Cso=r(A$," (Realm model)"),A$.forEach(t),wso=i(S),Fs=n(S,"LI",{});var y$=s(Fs);kae=n(y$,"STRONG",{});var QUr=s(kae);Aso=r(QUr,"reformer"),QUr.forEach(t),yso=r(y$," \u2014 "),UP=n(y$,"A",{href:!0});var HUr=s(UP);Lso=r(HUr,"ReformerTokenizer"),HUr.forEach(t),xso=r(y$," or "),JP=n(y$,"A",{href:!0});var UUr=s(JP);$so=r(UUr,"ReformerTokenizerFast"),UUr.forEach(t),kso=r(y$," (Reformer model)"),y$.forEach(t),Sso=i(S),Ts=n(S,"LI",{});var L$=s(Ts);Sae=n(L$,"STRONG",{});var JUr=s(Sae);Rso=r(JUr,"rembert"),JUr.forEach(t),Pso=r(L$," \u2014 "),YP=n(L$,"A",{href:!0});var YUr=s(YP);Bso=r(YUr,"RemBertTokenizer"),YUr.forEach(t),Iso=r(L$," or "),KP=n(L$,"A",{href:!0});var KUr=s(KP);qso=r(KUr,"RemBertTokenizerFast"),KUr.forEach(t),Nso=r(L$," (RemBERT model)"),L$.forEach(t),jso=i(S),Ms=n(S,"LI",{});var x$=s(Ms);Rae=n(x$,"STRONG",{});var ZUr=s(Rae);Dso=r(ZUr,"retribert"),ZUr.forEach(t),Gso=r(x$," \u2014 "),ZP=n(x$,"A",{href:!0});var eJr=s(ZP);Oso=r(eJr,"RetriBertTokenizer"),eJr.forEach(t),Vso=r(x$," or "),eB=n(x$,"A",{href:!0});var oJr=s(eB);Xso=r(oJr,"RetriBertTokenizerFast"),oJr.forEach(t),zso=r(x$," (RetriBERT model)"),x$.forEach(t),Wso=i(S),Es=n(S,"LI",{});var $$=s(Es);Pae=n($$,"STRONG",{});var rJr=s(Pae);Qso=r(rJr,"roberta"),rJr.forEach(t),Hso=r($$," \u2014 "),oB=n($$,"A",{href:!0});var tJr=s(oB);Uso=r(tJr,"RobertaTokenizer"),tJr.forEach(t),Jso=r($$," or "),rB=n($$,"A",{href:!0});var aJr=s(rB);Yso=r(aJr,"RobertaTokenizerFast"),aJr.forEach(t),Kso=r($$," (RoBERTa model)"),$$.forEach(t),Zso=i(S),Cs=n(S,"LI",{});var k$=s(Cs);Bae=n(k$,"STRONG",{});var nJr=s(Bae);elo=r(nJr,"roformer"),nJr.forEach(t),olo=r(k$," \u2014 "),tB=n(k$,"A",{href:!0});var sJr=s(tB);rlo=r(sJr,"RoFormerTokenizer"),sJr.forEach(t),tlo=r(k$," or "),aB=n(k$,"A",{href:!0});var lJr=s(aB);alo=r(lJr,"RoFormerTokenizerFast"),lJr.forEach(t),nlo=r(k$," (RoFormer model)"),k$.forEach(t),slo=i(S),Wg=n(S,"LI",{});var $we=s(Wg);Iae=n($we,"STRONG",{});var iJr=s(Iae);llo=r(iJr,"speech_to_text"),iJr.forEach(t),ilo=r($we," \u2014 "),nB=n($we,"A",{href:!0});var dJr=s(nB);dlo=r(dJr,"Speech2TextTokenizer"),dJr.forEach(t),clo=r($we," (Speech2Text model)"),$we.forEach(t),flo=i(S),Qg=n(S,"LI",{});var kwe=s(Qg);qae=n(kwe,"STRONG",{});var cJr=s(qae);mlo=r(cJr,"speech_to_text_2"),cJr.forEach(t),glo=r(kwe," \u2014 "),sB=n(kwe,"A",{href:!0});var fJr=s(sB);hlo=r(fJr,"Speech2Text2Tokenizer"),fJr.forEach(t),plo=r(kwe," (Speech2Text2 model)"),kwe.forEach(t),ulo=i(S),ws=n(S,"LI",{});var S$=s(ws);Nae=n(S$,"STRONG",{});var mJr=s(Nae);_lo=r(mJr,"splinter"),mJr.forEach(t),blo=r(S$," \u2014 "),lB=n(S$,"A",{href:!0});var gJr=s(lB);vlo=r(gJr,"SplinterTokenizer"),gJr.forEach(t),Flo=r(S$," or "),iB=n(S$,"A",{href:!0});var hJr=s(iB);Tlo=r(hJr,"SplinterTokenizerFast"),hJr.forEach(t),Mlo=r(S$," (Splinter model)"),S$.forEach(t),Elo=i(S),As=n(S,"LI",{});var R$=s(As);jae=n(R$,"STRONG",{});var pJr=s(jae);Clo=r(pJr,"squeezebert"),pJr.forEach(t),wlo=r(R$," \u2014 "),dB=n(R$,"A",{href:!0});var uJr=s(dB);Alo=r(uJr,"SqueezeBertTokenizer"),uJr.forEach(t),ylo=r(R$," or "),cB=n(R$,"A",{href:!0});var _Jr=s(cB);Llo=r(_Jr,"SqueezeBertTokenizerFast"),_Jr.forEach(t),xlo=r(R$," (SqueezeBERT model)"),R$.forEach(t),$lo=i(S),ys=n(S,"LI",{});var P$=s(ys);Dae=n(P$,"STRONG",{});var bJr=s(Dae);klo=r(bJr,"t5"),bJr.forEach(t),Slo=r(P$," \u2014 "),fB=n(P$,"A",{href:!0});var vJr=s(fB);Rlo=r(vJr,"T5Tokenizer"),vJr.forEach(t),Plo=r(P$," or "),mB=n(P$,"A",{href:!0});var FJr=s(mB);Blo=r(FJr,"T5TokenizerFast"),FJr.forEach(t),Ilo=r(P$," (T5 model)"),P$.forEach(t),qlo=i(S),Hg=n(S,"LI",{});var Swe=s(Hg);Gae=n(Swe,"STRONG",{});var TJr=s(Gae);Nlo=r(TJr,"tapas"),TJr.forEach(t),jlo=r(Swe," \u2014 "),gB=n(Swe,"A",{href:!0});var MJr=s(gB);Dlo=r(MJr,"TapasTokenizer"),MJr.forEach(t),Glo=r(Swe," (TAPAS model)"),Swe.forEach(t),Olo=i(S),Ug=n(S,"LI",{});var Rwe=s(Ug);Oae=n(Rwe,"STRONG",{});var EJr=s(Oae);Vlo=r(EJr,"tapex"),EJr.forEach(t),Xlo=r(Rwe," \u2014 "),hB=n(Rwe,"A",{href:!0});var CJr=s(hB);zlo=r(CJr,"TapexTokenizer"),CJr.forEach(t),Wlo=r(Rwe," (TAPEX model)"),Rwe.forEach(t),Qlo=i(S),Jg=n(S,"LI",{});var Pwe=s(Jg);Vae=n(Pwe,"STRONG",{});var wJr=s(Vae);Hlo=r(wJr,"transfo-xl"),wJr.forEach(t),Ulo=r(Pwe," \u2014 "),pB=n(Pwe,"A",{href:!0});var AJr=s(pB);Jlo=r(AJr,"TransfoXLTokenizer"),AJr.forEach(t),Ylo=r(Pwe," (Transformer-XL model)"),Pwe.forEach(t),Klo=i(S),Ls=n(S,"LI",{});var B$=s(Ls);Xae=n(B$,"STRONG",{});var yJr=s(Xae);Zlo=r(yJr,"visual_bert"),yJr.forEach(t),eio=r(B$," \u2014 "),uB=n(B$,"A",{href:!0});var LJr=s(uB);oio=r(LJr,"BertTokenizer"),LJr.forEach(t),rio=r(B$," or "),_B=n(B$,"A",{href:!0});var xJr=s(_B);tio=r(xJr,"BertTokenizerFast"),xJr.forEach(t),aio=r(B$," (VisualBert model)"),B$.forEach(t),nio=i(S),Yg=n(S,"LI",{});var Bwe=s(Yg);zae=n(Bwe,"STRONG",{});var $Jr=s(zae);sio=r($Jr,"wav2vec2"),$Jr.forEach(t),lio=r(Bwe," \u2014 "),bB=n(Bwe,"A",{href:!0});var kJr=s(bB);iio=r(kJr,"Wav2Vec2CTCTokenizer"),kJr.forEach(t),dio=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),cio=i(S),Kg=n(S,"LI",{});var Iwe=s(Kg);Wae=n(Iwe,"STRONG",{});var SJr=s(Wae);fio=r(SJr,"wav2vec2-conformer"),SJr.forEach(t),mio=r(Iwe," \u2014 "),vB=n(Iwe,"A",{href:!0});var RJr=s(vB);gio=r(RJr,"Wav2Vec2CTCTokenizer"),RJr.forEach(t),hio=r(Iwe," (Wav2Vec2-Conformer model)"),Iwe.forEach(t),pio=i(S),Zg=n(S,"LI",{});var qwe=s(Zg);Qae=n(qwe,"STRONG",{});var PJr=s(Qae);uio=r(PJr,"wav2vec2_phoneme"),PJr.forEach(t),_io=r(qwe," \u2014 "),FB=n(qwe,"A",{href:!0});var BJr=s(FB);bio=r(BJr,"Wav2Vec2PhonemeCTCTokenizer"),BJr.forEach(t),vio=r(qwe," (Wav2Vec2Phoneme model)"),qwe.forEach(t),Fio=i(S),xs=n(S,"LI",{});var I$=s(xs);Hae=n(I$,"STRONG",{});var IJr=s(Hae);Tio=r(IJr,"xglm"),IJr.forEach(t),Mio=r(I$," \u2014 "),TB=n(I$,"A",{href:!0});var qJr=s(TB);Eio=r(qJr,"XGLMTokenizer"),qJr.forEach(t),Cio=r(I$," or "),MB=n(I$,"A",{href:!0});var NJr=s(MB);wio=r(NJr,"XGLMTokenizerFast"),NJr.forEach(t),Aio=r(I$," (XGLM model)"),I$.forEach(t),yio=i(S),eh=n(S,"LI",{});var Nwe=s(eh);Uae=n(Nwe,"STRONG",{});var jJr=s(Uae);Lio=r(jJr,"xlm"),jJr.forEach(t),xio=r(Nwe," \u2014 "),EB=n(Nwe,"A",{href:!0});var DJr=s(EB);$io=r(DJr,"XLMTokenizer"),DJr.forEach(t),kio=r(Nwe," (XLM model)"),Nwe.forEach(t),Sio=i(S),oh=n(S,"LI",{});var jwe=s(oh);Jae=n(jwe,"STRONG",{});var GJr=s(Jae);Rio=r(GJr,"xlm-prophetnet"),GJr.forEach(t),Pio=r(jwe," \u2014 "),CB=n(jwe,"A",{href:!0});var OJr=s(CB);Bio=r(OJr,"XLMProphetNetTokenizer"),OJr.forEach(t),Iio=r(jwe," (XLMProphetNet model)"),jwe.forEach(t),qio=i(S),$s=n(S,"LI",{});var q$=s($s);Yae=n(q$,"STRONG",{});var VJr=s(Yae);Nio=r(VJr,"xlm-roberta"),VJr.forEach(t),jio=r(q$," \u2014 "),wB=n(q$,"A",{href:!0});var XJr=s(wB);Dio=r(XJr,"XLMRobertaTokenizer"),XJr.forEach(t),Gio=r(q$," or "),AB=n(q$,"A",{href:!0});var zJr=s(AB);Oio=r(zJr,"XLMRobertaTokenizerFast"),zJr.forEach(t),Vio=r(q$," (XLM-RoBERTa model)"),q$.forEach(t),Xio=i(S),ks=n(S,"LI",{});var N$=s(ks);Kae=n(N$,"STRONG",{});var WJr=s(Kae);zio=r(WJr,"xlm-roberta-xl"),WJr.forEach(t),Wio=r(N$," \u2014 "),yB=n(N$,"A",{href:!0});var QJr=s(yB);Qio=r(QJr,"RobertaTokenizer"),QJr.forEach(t),Hio=r(N$," or "),LB=n(N$,"A",{href:!0});var HJr=s(LB);Uio=r(HJr,"RobertaTokenizerFast"),HJr.forEach(t),Jio=r(N$," (XLM-RoBERTa-XL model)"),N$.forEach(t),Yio=i(S),Ss=n(S,"LI",{});var j$=s(Ss);Zae=n(j$,"STRONG",{});var UJr=s(Zae);Kio=r(UJr,"xlnet"),UJr.forEach(t),Zio=r(j$," \u2014 "),xB=n(j$,"A",{href:!0});var JJr=s(xB);edo=r(JJr,"XLNetTokenizer"),JJr.forEach(t),odo=r(j$," or "),$B=n(j$,"A",{href:!0});var YJr=s($B);rdo=r(YJr,"XLNetTokenizerFast"),YJr.forEach(t),tdo=r(j$," (XLNet model)"),j$.forEach(t),ado=i(S),Rs=n(S,"LI",{});var D$=s(Rs);ene=n(D$,"STRONG",{});var KJr=s(ene);ndo=r(KJr,"yoso"),KJr.forEach(t),sdo=r(D$," \u2014 "),kB=n(D$,"A",{href:!0});var ZJr=s(kB);ldo=r(ZJr,"AlbertTokenizer"),ZJr.forEach(t),ido=r(D$," or "),SB=n(D$,"A",{href:!0});var eYr=s(SB);ddo=r(eYr,"AlbertTokenizerFast"),eYr.forEach(t),cdo=r(D$," (YOSO model)"),D$.forEach(t),S.forEach(t),fdo=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),mdo=i(qs),th=n(qs,"DIV",{class:!0});var rDe=s(th);T(jA.$$.fragment,rDe),gdo=i(rDe),one=n(rDe,"P",{});var oYr=s(one);hdo=r(oYr,"Register a new tokenizer in this mapping."),oYr.forEach(t),rDe.forEach(t),qs.forEach(t),tNe=i(f),Mi=n(f,"H2",{class:!0});var tDe=s(Mi);ah=n(tDe,"A",{id:!0,class:!0,href:!0});var rYr=s(ah);rne=n(rYr,"SPAN",{});var tYr=s(rne);T(DA.$$.fragment,tYr),tYr.forEach(t),rYr.forEach(t),pdo=i(tDe),tne=n(tDe,"SPAN",{});var aYr=s(tne);udo=r(aYr,"AutoFeatureExtractor"),aYr.forEach(t),tDe.forEach(t),aNe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(GA.$$.fragment,js),_do=i(js),OA=n(js,"P",{});var aDe=s(OA);bdo=r(aDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),RB=n(aDe,"A",{href:!0});var nYr=s(RB);vdo=r(nYr,"AutoFeatureExtractor.from_pretrained()"),nYr.forEach(t),Fdo=r(aDe," class method."),aDe.forEach(t),Tdo=i(js),VA=n(js,"P",{});var nDe=s(VA);Mdo=r(nDe,"This class cannot be instantiated directly using "),ane=n(nDe,"CODE",{});var sYr=s(ane);Edo=r(sYr,"__init__()"),sYr.forEach(t),Cdo=r(nDe," (throws an error)."),nDe.forEach(t),wdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(XA.$$.fragment,Zt),Ado=i(Zt),nne=n(Zt,"P",{});var lYr=s(nne);ydo=r(lYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lYr.forEach(t),Ldo=i(Zt),ya=n(Zt,"P",{});var xw=s(ya);xdo=r(xw,"The feature extractor class to instantiate is selected based on the "),sne=n(xw,"CODE",{});var iYr=s(sne);$do=r(iYr,"model_type"),iYr.forEach(t),kdo=r(xw,` property of the config object
(either passed as an argument or loaded from `),lne=n(xw,"CODE",{});var dYr=s(lne);Sdo=r(dYr,"pretrained_model_name_or_path"),dYr.forEach(t),Rdo=r(xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ine=n(xw,"CODE",{});var cYr=s(ine);Pdo=r(cYr,"pretrained_model_name_or_path"),cYr.forEach(t),Bdo=r(xw,":"),xw.forEach(t),Ido=i(Zt),K=n(Zt,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var Dwe=s(nh);dne=n(Dwe,"STRONG",{});var fYr=s(dne);qdo=r(fYr,"beit"),fYr.forEach(t),Ndo=r(Dwe," \u2014 "),PB=n(Dwe,"A",{href:!0});var mYr=s(PB);jdo=r(mYr,"BeitFeatureExtractor"),mYr.forEach(t),Ddo=r(Dwe," (BEiT model)"),Dwe.forEach(t),Gdo=i(ee),sh=n(ee,"LI",{});var Gwe=s(sh);cne=n(Gwe,"STRONG",{});var gYr=s(cne);Odo=r(gYr,"clip"),gYr.forEach(t),Vdo=r(Gwe," \u2014 "),BB=n(Gwe,"A",{href:!0});var hYr=s(BB);Xdo=r(hYr,"CLIPFeatureExtractor"),hYr.forEach(t),zdo=r(Gwe," (CLIP model)"),Gwe.forEach(t),Wdo=i(ee),lh=n(ee,"LI",{});var Owe=s(lh);fne=n(Owe,"STRONG",{});var pYr=s(fne);Qdo=r(pYr,"convnext"),pYr.forEach(t),Hdo=r(Owe," \u2014 "),IB=n(Owe,"A",{href:!0});var uYr=s(IB);Udo=r(uYr,"ConvNextFeatureExtractor"),uYr.forEach(t),Jdo=r(Owe," (ConvNext model)"),Owe.forEach(t),Ydo=i(ee),ih=n(ee,"LI",{});var Vwe=s(ih);mne=n(Vwe,"STRONG",{});var _Yr=s(mne);Kdo=r(_Yr,"cvt"),_Yr.forEach(t),Zdo=r(Vwe," \u2014 "),qB=n(Vwe,"A",{href:!0});var bYr=s(qB);eco=r(bYr,"ConvNextFeatureExtractor"),bYr.forEach(t),oco=r(Vwe," (CvT model)"),Vwe.forEach(t),rco=i(ee),dh=n(ee,"LI",{});var Xwe=s(dh);gne=n(Xwe,"STRONG",{});var vYr=s(gne);tco=r(vYr,"data2vec-audio"),vYr.forEach(t),aco=r(Xwe," \u2014 "),NB=n(Xwe,"A",{href:!0});var FYr=s(NB);nco=r(FYr,"Wav2Vec2FeatureExtractor"),FYr.forEach(t),sco=r(Xwe," (Data2VecAudio model)"),Xwe.forEach(t),lco=i(ee),ch=n(ee,"LI",{});var zwe=s(ch);hne=n(zwe,"STRONG",{});var TYr=s(hne);ico=r(TYr,"data2vec-vision"),TYr.forEach(t),dco=r(zwe," \u2014 "),jB=n(zwe,"A",{href:!0});var MYr=s(jB);cco=r(MYr,"BeitFeatureExtractor"),MYr.forEach(t),fco=r(zwe," (Data2VecVision model)"),zwe.forEach(t),mco=i(ee),fh=n(ee,"LI",{});var Wwe=s(fh);pne=n(Wwe,"STRONG",{});var EYr=s(pne);gco=r(EYr,"deit"),EYr.forEach(t),hco=r(Wwe," \u2014 "),DB=n(Wwe,"A",{href:!0});var CYr=s(DB);pco=r(CYr,"DeiTFeatureExtractor"),CYr.forEach(t),uco=r(Wwe," (DeiT model)"),Wwe.forEach(t),_co=i(ee),mh=n(ee,"LI",{});var Qwe=s(mh);une=n(Qwe,"STRONG",{});var wYr=s(une);bco=r(wYr,"detr"),wYr.forEach(t),vco=r(Qwe," \u2014 "),GB=n(Qwe,"A",{href:!0});var AYr=s(GB);Fco=r(AYr,"DetrFeatureExtractor"),AYr.forEach(t),Tco=r(Qwe," (DETR model)"),Qwe.forEach(t),Mco=i(ee),gh=n(ee,"LI",{});var Hwe=s(gh);_ne=n(Hwe,"STRONG",{});var yYr=s(_ne);Eco=r(yYr,"dpt"),yYr.forEach(t),Cco=r(Hwe," \u2014 "),OB=n(Hwe,"A",{href:!0});var LYr=s(OB);wco=r(LYr,"DPTFeatureExtractor"),LYr.forEach(t),Aco=r(Hwe," (DPT model)"),Hwe.forEach(t),yco=i(ee),hh=n(ee,"LI",{});var Uwe=s(hh);bne=n(Uwe,"STRONG",{});var xYr=s(bne);Lco=r(xYr,"flava"),xYr.forEach(t),xco=r(Uwe," \u2014 "),VB=n(Uwe,"A",{href:!0});var $Yr=s(VB);$co=r($Yr,"FlavaFeatureExtractor"),$Yr.forEach(t),kco=r(Uwe," (Flava model)"),Uwe.forEach(t),Sco=i(ee),ph=n(ee,"LI",{});var Jwe=s(ph);vne=n(Jwe,"STRONG",{});var kYr=s(vne);Rco=r(kYr,"glpn"),kYr.forEach(t),Pco=r(Jwe," \u2014 "),XB=n(Jwe,"A",{href:!0});var SYr=s(XB);Bco=r(SYr,"GLPNFeatureExtractor"),SYr.forEach(t),Ico=r(Jwe," (GLPN model)"),Jwe.forEach(t),qco=i(ee),uh=n(ee,"LI",{});var Ywe=s(uh);Fne=n(Ywe,"STRONG",{});var RYr=s(Fne);Nco=r(RYr,"hubert"),RYr.forEach(t),jco=r(Ywe," \u2014 "),zB=n(Ywe,"A",{href:!0});var PYr=s(zB);Dco=r(PYr,"Wav2Vec2FeatureExtractor"),PYr.forEach(t),Gco=r(Ywe," (Hubert model)"),Ywe.forEach(t),Oco=i(ee),_h=n(ee,"LI",{});var Kwe=s(_h);Tne=n(Kwe,"STRONG",{});var BYr=s(Tne);Vco=r(BYr,"layoutlmv2"),BYr.forEach(t),Xco=r(Kwe," \u2014 "),WB=n(Kwe,"A",{href:!0});var IYr=s(WB);zco=r(IYr,"LayoutLMv2FeatureExtractor"),IYr.forEach(t),Wco=r(Kwe," (LayoutLMv2 model)"),Kwe.forEach(t),Qco=i(ee),bh=n(ee,"LI",{});var Zwe=s(bh);Mne=n(Zwe,"STRONG",{});var qYr=s(Mne);Hco=r(qYr,"layoutlmv3"),qYr.forEach(t),Uco=r(Zwe," \u2014 "),QB=n(Zwe,"A",{href:!0});var NYr=s(QB);Jco=r(NYr,"LayoutLMv3FeatureExtractor"),NYr.forEach(t),Yco=r(Zwe," (LayoutLMv3 model)"),Zwe.forEach(t),Kco=i(ee),vh=n(ee,"LI",{});var e0e=s(vh);Ene=n(e0e,"STRONG",{});var jYr=s(Ene);Zco=r(jYr,"maskformer"),jYr.forEach(t),efo=r(e0e," \u2014 "),HB=n(e0e,"A",{href:!0});var DYr=s(HB);ofo=r(DYr,"MaskFormerFeatureExtractor"),DYr.forEach(t),rfo=r(e0e," (MaskFormer model)"),e0e.forEach(t),tfo=i(ee),Fh=n(ee,"LI",{});var o0e=s(Fh);Cne=n(o0e,"STRONG",{});var GYr=s(Cne);afo=r(GYr,"perceiver"),GYr.forEach(t),nfo=r(o0e," \u2014 "),UB=n(o0e,"A",{href:!0});var OYr=s(UB);sfo=r(OYr,"PerceiverFeatureExtractor"),OYr.forEach(t),lfo=r(o0e," (Perceiver model)"),o0e.forEach(t),ifo=i(ee),Th=n(ee,"LI",{});var r0e=s(Th);wne=n(r0e,"STRONG",{});var VYr=s(wne);dfo=r(VYr,"poolformer"),VYr.forEach(t),cfo=r(r0e," \u2014 "),JB=n(r0e,"A",{href:!0});var XYr=s(JB);ffo=r(XYr,"PoolFormerFeatureExtractor"),XYr.forEach(t),mfo=r(r0e," (PoolFormer model)"),r0e.forEach(t),gfo=i(ee),Mh=n(ee,"LI",{});var t0e=s(Mh);Ane=n(t0e,"STRONG",{});var zYr=s(Ane);hfo=r(zYr,"regnet"),zYr.forEach(t),pfo=r(t0e," \u2014 "),YB=n(t0e,"A",{href:!0});var WYr=s(YB);ufo=r(WYr,"ConvNextFeatureExtractor"),WYr.forEach(t),_fo=r(t0e," (RegNet model)"),t0e.forEach(t),bfo=i(ee),Eh=n(ee,"LI",{});var a0e=s(Eh);yne=n(a0e,"STRONG",{});var QYr=s(yne);vfo=r(QYr,"resnet"),QYr.forEach(t),Ffo=r(a0e," \u2014 "),KB=n(a0e,"A",{href:!0});var HYr=s(KB);Tfo=r(HYr,"ConvNextFeatureExtractor"),HYr.forEach(t),Mfo=r(a0e," (ResNet model)"),a0e.forEach(t),Efo=i(ee),Ch=n(ee,"LI",{});var n0e=s(Ch);Lne=n(n0e,"STRONG",{});var UYr=s(Lne);Cfo=r(UYr,"segformer"),UYr.forEach(t),wfo=r(n0e," \u2014 "),ZB=n(n0e,"A",{href:!0});var JYr=s(ZB);Afo=r(JYr,"SegformerFeatureExtractor"),JYr.forEach(t),yfo=r(n0e," (SegFormer model)"),n0e.forEach(t),Lfo=i(ee),wh=n(ee,"LI",{});var s0e=s(wh);xne=n(s0e,"STRONG",{});var YYr=s(xne);xfo=r(YYr,"speech_to_text"),YYr.forEach(t),$fo=r(s0e," \u2014 "),eI=n(s0e,"A",{href:!0});var KYr=s(eI);kfo=r(KYr,"Speech2TextFeatureExtractor"),KYr.forEach(t),Sfo=r(s0e," (Speech2Text model)"),s0e.forEach(t),Rfo=i(ee),Ah=n(ee,"LI",{});var l0e=s(Ah);$ne=n(l0e,"STRONG",{});var ZYr=s($ne);Pfo=r(ZYr,"swin"),ZYr.forEach(t),Bfo=r(l0e," \u2014 "),oI=n(l0e,"A",{href:!0});var eKr=s(oI);Ifo=r(eKr,"ViTFeatureExtractor"),eKr.forEach(t),qfo=r(l0e," (Swin model)"),l0e.forEach(t),Nfo=i(ee),yh=n(ee,"LI",{});var i0e=s(yh);kne=n(i0e,"STRONG",{});var oKr=s(kne);jfo=r(oKr,"van"),oKr.forEach(t),Dfo=r(i0e," \u2014 "),rI=n(i0e,"A",{href:!0});var rKr=s(rI);Gfo=r(rKr,"ConvNextFeatureExtractor"),rKr.forEach(t),Ofo=r(i0e," (VAN model)"),i0e.forEach(t),Vfo=i(ee),Lh=n(ee,"LI",{});var d0e=s(Lh);Sne=n(d0e,"STRONG",{});var tKr=s(Sne);Xfo=r(tKr,"vit"),tKr.forEach(t),zfo=r(d0e," \u2014 "),tI=n(d0e,"A",{href:!0});var aKr=s(tI);Wfo=r(aKr,"ViTFeatureExtractor"),aKr.forEach(t),Qfo=r(d0e," (ViT model)"),d0e.forEach(t),Hfo=i(ee),xh=n(ee,"LI",{});var c0e=s(xh);Rne=n(c0e,"STRONG",{});var nKr=s(Rne);Ufo=r(nKr,"vit_mae"),nKr.forEach(t),Jfo=r(c0e," \u2014 "),aI=n(c0e,"A",{href:!0});var sKr=s(aI);Yfo=r(sKr,"ViTFeatureExtractor"),sKr.forEach(t),Kfo=r(c0e," (ViTMAE model)"),c0e.forEach(t),Zfo=i(ee),$h=n(ee,"LI",{});var f0e=s($h);Pne=n(f0e,"STRONG",{});var lKr=s(Pne);emo=r(lKr,"wav2vec2"),lKr.forEach(t),omo=r(f0e," \u2014 "),nI=n(f0e,"A",{href:!0});var iKr=s(nI);rmo=r(iKr,"Wav2Vec2FeatureExtractor"),iKr.forEach(t),tmo=r(f0e," (Wav2Vec2 model)"),f0e.forEach(t),amo=i(ee),kh=n(ee,"LI",{});var m0e=s(kh);Bne=n(m0e,"STRONG",{});var dKr=s(Bne);nmo=r(dKr,"wav2vec2-conformer"),dKr.forEach(t),smo=r(m0e," \u2014 "),sI=n(m0e,"A",{href:!0});var cKr=s(sI);lmo=r(cKr,"Wav2Vec2FeatureExtractor"),cKr.forEach(t),imo=r(m0e," (Wav2Vec2-Conformer model)"),m0e.forEach(t),dmo=i(ee),Sh=n(ee,"LI",{});var g0e=s(Sh);Ine=n(g0e,"STRONG",{});var fKr=s(Ine);cmo=r(fKr,"yolos"),fKr.forEach(t),fmo=r(g0e," \u2014 "),lI=n(g0e,"A",{href:!0});var mKr=s(lI);mmo=r(mKr,"YolosFeatureExtractor"),mKr.forEach(t),gmo=r(g0e," (YOLOS model)"),g0e.forEach(t),ee.forEach(t),hmo=i(Zt),T(Rh.$$.fragment,Zt),pmo=i(Zt),T(Ph.$$.fragment,Zt),Zt.forEach(t),umo=i(js),Bh=n(js,"DIV",{class:!0});var sDe=s(Bh);T(zA.$$.fragment,sDe),_mo=i(sDe),qne=n(sDe,"P",{});var gKr=s(qne);bmo=r(gKr,"Register a new feature extractor for this class."),gKr.forEach(t),sDe.forEach(t),js.forEach(t),nNe=i(f),Ei=n(f,"H2",{class:!0});var lDe=s(Ei);Ih=n(lDe,"A",{id:!0,class:!0,href:!0});var hKr=s(Ih);Nne=n(hKr,"SPAN",{});var pKr=s(Nne);T(WA.$$.fragment,pKr),pKr.forEach(t),hKr.forEach(t),vmo=i(lDe),jne=n(lDe,"SPAN",{});var uKr=s(jne);Fmo=r(uKr,"AutoProcessor"),uKr.forEach(t),lDe.forEach(t),sNe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(QA.$$.fragment,Ds),Tmo=i(Ds),HA=n(Ds,"P",{});var iDe=s(HA);Mmo=r(iDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),iI=n(iDe,"A",{href:!0});var _Kr=s(iI);Emo=r(_Kr,"AutoProcessor.from_pretrained()"),_Kr.forEach(t),Cmo=r(iDe," class method."),iDe.forEach(t),wmo=i(Ds),UA=n(Ds,"P",{});var dDe=s(UA);Amo=r(dDe,"This class cannot be instantiated directly using "),Dne=n(dDe,"CODE",{});var bKr=s(Dne);ymo=r(bKr,"__init__()"),bKr.forEach(t),Lmo=r(dDe," (throws an error)."),dDe.forEach(t),xmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(JA.$$.fragment,ea),$mo=i(ea),Gne=n(ea,"P",{});var vKr=s(Gne);kmo=r(vKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vKr.forEach(t),Smo=i(ea),Ci=n(ea,"P",{});var mZ=s(Ci);Rmo=r(mZ,"The processor class to instantiate is selected based on the "),One=n(mZ,"CODE",{});var FKr=s(One);Pmo=r(FKr,"model_type"),FKr.forEach(t),Bmo=r(mZ,` property of the config object (either
passed as an argument or loaded from `),Vne=n(mZ,"CODE",{});var TKr=s(Vne);Imo=r(TKr,"pretrained_model_name_or_path"),TKr.forEach(t),qmo=r(mZ," if possible):"),mZ.forEach(t),Nmo=i(ea),he=n(ea,"UL",{});var _e=s(he);qh=n(_e,"LI",{});var h0e=s(qh);Xne=n(h0e,"STRONG",{});var MKr=s(Xne);jmo=r(MKr,"clip"),MKr.forEach(t),Dmo=r(h0e," \u2014 "),dI=n(h0e,"A",{href:!0});var EKr=s(dI);Gmo=r(EKr,"CLIPProcessor"),EKr.forEach(t),Omo=r(h0e," (CLIP model)"),h0e.forEach(t),Vmo=i(_e),Nh=n(_e,"LI",{});var p0e=s(Nh);zne=n(p0e,"STRONG",{});var CKr=s(zne);Xmo=r(CKr,"flava"),CKr.forEach(t),zmo=r(p0e," \u2014 "),Wne=n(p0e,"CODE",{});var wKr=s(Wne);Wmo=r(wKr,"FLAVAProcessor"),wKr.forEach(t),Qmo=r(p0e," (Flava model)"),p0e.forEach(t),Hmo=i(_e),jh=n(_e,"LI",{});var u0e=s(jh);Qne=n(u0e,"STRONG",{});var AKr=s(Qne);Umo=r(AKr,"layoutlmv2"),AKr.forEach(t),Jmo=r(u0e," \u2014 "),cI=n(u0e,"A",{href:!0});var yKr=s(cI);Ymo=r(yKr,"LayoutLMv2Processor"),yKr.forEach(t),Kmo=r(u0e," (LayoutLMv2 model)"),u0e.forEach(t),Zmo=i(_e),Dh=n(_e,"LI",{});var _0e=s(Dh);Hne=n(_0e,"STRONG",{});var LKr=s(Hne);ego=r(LKr,"layoutlmv3"),LKr.forEach(t),ogo=r(_0e," \u2014 "),fI=n(_0e,"A",{href:!0});var xKr=s(fI);rgo=r(xKr,"LayoutLMv3Processor"),xKr.forEach(t),tgo=r(_0e," (LayoutLMv3 model)"),_0e.forEach(t),ago=i(_e),Gh=n(_e,"LI",{});var b0e=s(Gh);Une=n(b0e,"STRONG",{});var $Kr=s(Une);ngo=r($Kr,"layoutxlm"),$Kr.forEach(t),sgo=r(b0e," \u2014 "),mI=n(b0e,"A",{href:!0});var kKr=s(mI);lgo=r(kKr,"LayoutXLMProcessor"),kKr.forEach(t),igo=r(b0e," (LayoutXLM model)"),b0e.forEach(t),dgo=i(_e),Oh=n(_e,"LI",{});var v0e=s(Oh);Jne=n(v0e,"STRONG",{});var SKr=s(Jne);cgo=r(SKr,"sew"),SKr.forEach(t),fgo=r(v0e," \u2014 "),gI=n(v0e,"A",{href:!0});var RKr=s(gI);mgo=r(RKr,"Wav2Vec2Processor"),RKr.forEach(t),ggo=r(v0e," (SEW model)"),v0e.forEach(t),hgo=i(_e),Vh=n(_e,"LI",{});var F0e=s(Vh);Yne=n(F0e,"STRONG",{});var PKr=s(Yne);pgo=r(PKr,"sew-d"),PKr.forEach(t),ugo=r(F0e," \u2014 "),hI=n(F0e,"A",{href:!0});var BKr=s(hI);_go=r(BKr,"Wav2Vec2Processor"),BKr.forEach(t),bgo=r(F0e," (SEW-D model)"),F0e.forEach(t),vgo=i(_e),Xh=n(_e,"LI",{});var T0e=s(Xh);Kne=n(T0e,"STRONG",{});var IKr=s(Kne);Fgo=r(IKr,"speech_to_text"),IKr.forEach(t),Tgo=r(T0e," \u2014 "),pI=n(T0e,"A",{href:!0});var qKr=s(pI);Mgo=r(qKr,"Speech2TextProcessor"),qKr.forEach(t),Ego=r(T0e," (Speech2Text model)"),T0e.forEach(t),Cgo=i(_e),zh=n(_e,"LI",{});var M0e=s(zh);Zne=n(M0e,"STRONG",{});var NKr=s(Zne);wgo=r(NKr,"speech_to_text_2"),NKr.forEach(t),Ago=r(M0e," \u2014 "),uI=n(M0e,"A",{href:!0});var jKr=s(uI);ygo=r(jKr,"Speech2Text2Processor"),jKr.forEach(t),Lgo=r(M0e," (Speech2Text2 model)"),M0e.forEach(t),xgo=i(_e),Wh=n(_e,"LI",{});var E0e=s(Wh);ese=n(E0e,"STRONG",{});var DKr=s(ese);$go=r(DKr,"trocr"),DKr.forEach(t),kgo=r(E0e," \u2014 "),_I=n(E0e,"A",{href:!0});var GKr=s(_I);Sgo=r(GKr,"TrOCRProcessor"),GKr.forEach(t),Rgo=r(E0e," (TrOCR model)"),E0e.forEach(t),Pgo=i(_e),Qh=n(_e,"LI",{});var C0e=s(Qh);ose=n(C0e,"STRONG",{});var OKr=s(ose);Bgo=r(OKr,"unispeech"),OKr.forEach(t),Igo=r(C0e," \u2014 "),bI=n(C0e,"A",{href:!0});var VKr=s(bI);qgo=r(VKr,"Wav2Vec2Processor"),VKr.forEach(t),Ngo=r(C0e," (UniSpeech model)"),C0e.forEach(t),jgo=i(_e),Hh=n(_e,"LI",{});var w0e=s(Hh);rse=n(w0e,"STRONG",{});var XKr=s(rse);Dgo=r(XKr,"unispeech-sat"),XKr.forEach(t),Ggo=r(w0e," \u2014 "),vI=n(w0e,"A",{href:!0});var zKr=s(vI);Ogo=r(zKr,"Wav2Vec2Processor"),zKr.forEach(t),Vgo=r(w0e," (UniSpeechSat model)"),w0e.forEach(t),Xgo=i(_e),Uh=n(_e,"LI",{});var A0e=s(Uh);tse=n(A0e,"STRONG",{});var WKr=s(tse);zgo=r(WKr,"vilt"),WKr.forEach(t),Wgo=r(A0e," \u2014 "),FI=n(A0e,"A",{href:!0});var QKr=s(FI);Qgo=r(QKr,"ViltProcessor"),QKr.forEach(t),Hgo=r(A0e," (ViLT model)"),A0e.forEach(t),Ugo=i(_e),Jh=n(_e,"LI",{});var y0e=s(Jh);ase=n(y0e,"STRONG",{});var HKr=s(ase);Jgo=r(HKr,"vision-text-dual-encoder"),HKr.forEach(t),Ygo=r(y0e," \u2014 "),TI=n(y0e,"A",{href:!0});var UKr=s(TI);Kgo=r(UKr,"VisionTextDualEncoderProcessor"),UKr.forEach(t),Zgo=r(y0e," (VisionTextDualEncoder model)"),y0e.forEach(t),eho=i(_e),Yh=n(_e,"LI",{});var L0e=s(Yh);nse=n(L0e,"STRONG",{});var JKr=s(nse);oho=r(JKr,"wav2vec2"),JKr.forEach(t),rho=r(L0e," \u2014 "),MI=n(L0e,"A",{href:!0});var YKr=s(MI);tho=r(YKr,"Wav2Vec2Processor"),YKr.forEach(t),aho=r(L0e," (Wav2Vec2 model)"),L0e.forEach(t),nho=i(_e),Kh=n(_e,"LI",{});var x0e=s(Kh);sse=n(x0e,"STRONG",{});var KKr=s(sse);sho=r(KKr,"wav2vec2-conformer"),KKr.forEach(t),lho=r(x0e," \u2014 "),EI=n(x0e,"A",{href:!0});var ZKr=s(EI);iho=r(ZKr,"Wav2Vec2Processor"),ZKr.forEach(t),dho=r(x0e," (Wav2Vec2-Conformer model)"),x0e.forEach(t),cho=i(_e),Zh=n(_e,"LI",{});var $0e=s(Zh);lse=n($0e,"STRONG",{});var eZr=s(lse);fho=r(eZr,"wavlm"),eZr.forEach(t),mho=r($0e," \u2014 "),CI=n($0e,"A",{href:!0});var oZr=s(CI);gho=r(oZr,"Wav2Vec2Processor"),oZr.forEach(t),hho=r($0e," (WavLM model)"),$0e.forEach(t),_e.forEach(t),pho=i(ea),T(ep.$$.fragment,ea),uho=i(ea),T(op.$$.fragment,ea),ea.forEach(t),_ho=i(Ds),rp=n(Ds,"DIV",{class:!0});var cDe=s(rp);T(YA.$$.fragment,cDe),bho=i(cDe),ise=n(cDe,"P",{});var rZr=s(ise);vho=r(rZr,"Register a new processor for this class."),rZr.forEach(t),cDe.forEach(t),Ds.forEach(t),lNe=i(f),wi=n(f,"H2",{class:!0});var fDe=s(wi);tp=n(fDe,"A",{id:!0,class:!0,href:!0});var tZr=s(tp);dse=n(tZr,"SPAN",{});var aZr=s(dse);T(KA.$$.fragment,aZr),aZr.forEach(t),tZr.forEach(t),Fho=i(fDe),cse=n(fDe,"SPAN",{});var nZr=s(cse);Tho=r(nZr,"AutoModel"),nZr.forEach(t),fDe.forEach(t),iNe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ZA.$$.fragment,Gs),Mho=i(Gs),Ai=n(Gs,"P",{});var gZ=s(Ai);Eho=r(gZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wI=n(gZ,"A",{href:!0});var sZr=s(wI);Cho=r(sZr,"from_pretrained()"),sZr.forEach(t),who=r(gZ," class method or the "),AI=n(gZ,"A",{href:!0});var lZr=s(AI);Aho=r(lZr,"from_config()"),lZr.forEach(t),yho=r(gZ,` class
method.`),gZ.forEach(t),Lho=i(Gs),e6=n(Gs,"P",{});var mDe=s(e6);xho=r(mDe,"This class cannot be instantiated directly using "),fse=n(mDe,"CODE",{});var iZr=s(fse);$ho=r(iZr,"__init__()"),iZr.forEach(t),kho=r(mDe," (throws an error)."),mDe.forEach(t),Sho=i(Gs),tt=n(Gs,"DIV",{class:!0});var $w=s(tt);T(o6.$$.fragment,$w),Rho=i($w),mse=n($w,"P",{});var dZr=s(mse);Pho=r(dZr,"Instantiates one of the base model classes of the library from a configuration."),dZr.forEach(t),Bho=i($w),yi=n($w,"P",{});var hZ=s(yi);Iho=r(hZ,`Note:
Loading a model from its configuration file does `),gse=n(hZ,"STRONG",{});var cZr=s(gse);qho=r(cZr,"not"),cZr.forEach(t),Nho=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=n(hZ,"A",{href:!0});var fZr=s(yI);jho=r(fZr,"from_pretrained()"),fZr.forEach(t),Dho=r(hZ," to load the model weights."),hZ.forEach(t),Gho=i($w),T(ap.$$.fragment,$w),$w.forEach(t),Oho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(r6.$$.fragment,oa),Vho=i(oa),hse=n(oa,"P",{});var mZr=s(hse);Xho=r(mZr,"Instantiate one of the base model classes of the library from a pretrained model."),mZr.forEach(t),zho=i(oa),La=n(oa,"P",{});var kw=s(La);Who=r(kw,"The model class to instantiate is selected based on the "),pse=n(kw,"CODE",{});var gZr=s(pse);Qho=r(gZr,"model_type"),gZr.forEach(t),Hho=r(kw,` property of the config object (either
passed as an argument or loaded from `),use=n(kw,"CODE",{});var hZr=s(use);Uho=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),Jho=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_se=n(kw,"CODE",{});var pZr=s(_se);Yho=r(pZr,"pretrained_model_name_or_path"),pZr.forEach(t),Kho=r(kw,":"),kw.forEach(t),Zho=i(oa),x=n(oa,"UL",{});var $=s(x);np=n($,"LI",{});var k0e=s(np);bse=n(k0e,"STRONG",{});var uZr=s(bse);epo=r(uZr,"albert"),uZr.forEach(t),opo=r(k0e," \u2014 "),LI=n(k0e,"A",{href:!0});var _Zr=s(LI);rpo=r(_Zr,"AlbertModel"),_Zr.forEach(t),tpo=r(k0e," (ALBERT model)"),k0e.forEach(t),apo=i($),sp=n($,"LI",{});var S0e=s(sp);vse=n(S0e,"STRONG",{});var bZr=s(vse);npo=r(bZr,"bart"),bZr.forEach(t),spo=r(S0e," \u2014 "),xI=n(S0e,"A",{href:!0});var vZr=s(xI);lpo=r(vZr,"BartModel"),vZr.forEach(t),ipo=r(S0e," (BART model)"),S0e.forEach(t),dpo=i($),lp=n($,"LI",{});var R0e=s(lp);Fse=n(R0e,"STRONG",{});var FZr=s(Fse);cpo=r(FZr,"beit"),FZr.forEach(t),fpo=r(R0e," \u2014 "),$I=n(R0e,"A",{href:!0});var TZr=s($I);mpo=r(TZr,"BeitModel"),TZr.forEach(t),gpo=r(R0e," (BEiT model)"),R0e.forEach(t),hpo=i($),ip=n($,"LI",{});var P0e=s(ip);Tse=n(P0e,"STRONG",{});var MZr=s(Tse);ppo=r(MZr,"bert"),MZr.forEach(t),upo=r(P0e," \u2014 "),kI=n(P0e,"A",{href:!0});var EZr=s(kI);_po=r(EZr,"BertModel"),EZr.forEach(t),bpo=r(P0e," (BERT model)"),P0e.forEach(t),vpo=i($),dp=n($,"LI",{});var B0e=s(dp);Mse=n(B0e,"STRONG",{});var CZr=s(Mse);Fpo=r(CZr,"bert-generation"),CZr.forEach(t),Tpo=r(B0e," \u2014 "),SI=n(B0e,"A",{href:!0});var wZr=s(SI);Mpo=r(wZr,"BertGenerationEncoder"),wZr.forEach(t),Epo=r(B0e," (Bert Generation model)"),B0e.forEach(t),Cpo=i($),cp=n($,"LI",{});var I0e=s(cp);Ese=n(I0e,"STRONG",{});var AZr=s(Ese);wpo=r(AZr,"big_bird"),AZr.forEach(t),Apo=r(I0e," \u2014 "),RI=n(I0e,"A",{href:!0});var yZr=s(RI);ypo=r(yZr,"BigBirdModel"),yZr.forEach(t),Lpo=r(I0e," (BigBird model)"),I0e.forEach(t),xpo=i($),fp=n($,"LI",{});var q0e=s(fp);Cse=n(q0e,"STRONG",{});var LZr=s(Cse);$po=r(LZr,"bigbird_pegasus"),LZr.forEach(t),kpo=r(q0e," \u2014 "),PI=n(q0e,"A",{href:!0});var xZr=s(PI);Spo=r(xZr,"BigBirdPegasusModel"),xZr.forEach(t),Rpo=r(q0e," (BigBirdPegasus model)"),q0e.forEach(t),Ppo=i($),mp=n($,"LI",{});var N0e=s(mp);wse=n(N0e,"STRONG",{});var $Zr=s(wse);Bpo=r($Zr,"blenderbot"),$Zr.forEach(t),Ipo=r(N0e," \u2014 "),BI=n(N0e,"A",{href:!0});var kZr=s(BI);qpo=r(kZr,"BlenderbotModel"),kZr.forEach(t),Npo=r(N0e," (Blenderbot model)"),N0e.forEach(t),jpo=i($),gp=n($,"LI",{});var j0e=s(gp);Ase=n(j0e,"STRONG",{});var SZr=s(Ase);Dpo=r(SZr,"blenderbot-small"),SZr.forEach(t),Gpo=r(j0e," \u2014 "),II=n(j0e,"A",{href:!0});var RZr=s(II);Opo=r(RZr,"BlenderbotSmallModel"),RZr.forEach(t),Vpo=r(j0e," (BlenderbotSmall model)"),j0e.forEach(t),Xpo=i($),hp=n($,"LI",{});var D0e=s(hp);yse=n(D0e,"STRONG",{});var PZr=s(yse);zpo=r(PZr,"camembert"),PZr.forEach(t),Wpo=r(D0e," \u2014 "),qI=n(D0e,"A",{href:!0});var BZr=s(qI);Qpo=r(BZr,"CamembertModel"),BZr.forEach(t),Hpo=r(D0e," (CamemBERT model)"),D0e.forEach(t),Upo=i($),pp=n($,"LI",{});var G0e=s(pp);Lse=n(G0e,"STRONG",{});var IZr=s(Lse);Jpo=r(IZr,"canine"),IZr.forEach(t),Ypo=r(G0e," \u2014 "),NI=n(G0e,"A",{href:!0});var qZr=s(NI);Kpo=r(qZr,"CanineModel"),qZr.forEach(t),Zpo=r(G0e," (Canine model)"),G0e.forEach(t),euo=i($),up=n($,"LI",{});var O0e=s(up);xse=n(O0e,"STRONG",{});var NZr=s(xse);ouo=r(NZr,"clip"),NZr.forEach(t),ruo=r(O0e," \u2014 "),jI=n(O0e,"A",{href:!0});var jZr=s(jI);tuo=r(jZr,"CLIPModel"),jZr.forEach(t),auo=r(O0e," (CLIP model)"),O0e.forEach(t),nuo=i($),_p=n($,"LI",{});var V0e=s(_p);$se=n(V0e,"STRONG",{});var DZr=s($se);suo=r(DZr,"convbert"),DZr.forEach(t),luo=r(V0e," \u2014 "),DI=n(V0e,"A",{href:!0});var GZr=s(DI);iuo=r(GZr,"ConvBertModel"),GZr.forEach(t),duo=r(V0e," (ConvBERT model)"),V0e.forEach(t),cuo=i($),bp=n($,"LI",{});var X0e=s(bp);kse=n(X0e,"STRONG",{});var OZr=s(kse);fuo=r(OZr,"convnext"),OZr.forEach(t),muo=r(X0e," \u2014 "),GI=n(X0e,"A",{href:!0});var VZr=s(GI);guo=r(VZr,"ConvNextModel"),VZr.forEach(t),huo=r(X0e," (ConvNext model)"),X0e.forEach(t),puo=i($),vp=n($,"LI",{});var z0e=s(vp);Sse=n(z0e,"STRONG",{});var XZr=s(Sse);uuo=r(XZr,"ctrl"),XZr.forEach(t),_uo=r(z0e," \u2014 "),OI=n(z0e,"A",{href:!0});var zZr=s(OI);buo=r(zZr,"CTRLModel"),zZr.forEach(t),vuo=r(z0e," (CTRL model)"),z0e.forEach(t),Fuo=i($),Fp=n($,"LI",{});var W0e=s(Fp);Rse=n(W0e,"STRONG",{});var WZr=s(Rse);Tuo=r(WZr,"cvt"),WZr.forEach(t),Muo=r(W0e," \u2014 "),VI=n(W0e,"A",{href:!0});var QZr=s(VI);Euo=r(QZr,"CvtModel"),QZr.forEach(t),Cuo=r(W0e," (CvT model)"),W0e.forEach(t),wuo=i($),Tp=n($,"LI",{});var Q0e=s(Tp);Pse=n(Q0e,"STRONG",{});var HZr=s(Pse);Auo=r(HZr,"data2vec-audio"),HZr.forEach(t),yuo=r(Q0e," \u2014 "),XI=n(Q0e,"A",{href:!0});var UZr=s(XI);Luo=r(UZr,"Data2VecAudioModel"),UZr.forEach(t),xuo=r(Q0e," (Data2VecAudio model)"),Q0e.forEach(t),$uo=i($),Mp=n($,"LI",{});var H0e=s(Mp);Bse=n(H0e,"STRONG",{});var JZr=s(Bse);kuo=r(JZr,"data2vec-text"),JZr.forEach(t),Suo=r(H0e," \u2014 "),zI=n(H0e,"A",{href:!0});var YZr=s(zI);Ruo=r(YZr,"Data2VecTextModel"),YZr.forEach(t),Puo=r(H0e," (Data2VecText model)"),H0e.forEach(t),Buo=i($),Ep=n($,"LI",{});var U0e=s(Ep);Ise=n(U0e,"STRONG",{});var KZr=s(Ise);Iuo=r(KZr,"data2vec-vision"),KZr.forEach(t),quo=r(U0e," \u2014 "),WI=n(U0e,"A",{href:!0});var ZZr=s(WI);Nuo=r(ZZr,"Data2VecVisionModel"),ZZr.forEach(t),juo=r(U0e," (Data2VecVision model)"),U0e.forEach(t),Duo=i($),Cp=n($,"LI",{});var J0e=s(Cp);qse=n(J0e,"STRONG",{});var eet=s(qse);Guo=r(eet,"deberta"),eet.forEach(t),Ouo=r(J0e," \u2014 "),QI=n(J0e,"A",{href:!0});var oet=s(QI);Vuo=r(oet,"DebertaModel"),oet.forEach(t),Xuo=r(J0e," (DeBERTa model)"),J0e.forEach(t),zuo=i($),wp=n($,"LI",{});var Y0e=s(wp);Nse=n(Y0e,"STRONG",{});var ret=s(Nse);Wuo=r(ret,"deberta-v2"),ret.forEach(t),Quo=r(Y0e," \u2014 "),HI=n(Y0e,"A",{href:!0});var tet=s(HI);Huo=r(tet,"DebertaV2Model"),tet.forEach(t),Uuo=r(Y0e," (DeBERTa-v2 model)"),Y0e.forEach(t),Juo=i($),Ap=n($,"LI",{});var K0e=s(Ap);jse=n(K0e,"STRONG",{});var aet=s(jse);Yuo=r(aet,"decision_transformer"),aet.forEach(t),Kuo=r(K0e," \u2014 "),UI=n(K0e,"A",{href:!0});var net=s(UI);Zuo=r(net,"DecisionTransformerModel"),net.forEach(t),e_o=r(K0e," (Decision Transformer model)"),K0e.forEach(t),o_o=i($),yp=n($,"LI",{});var Z0e=s(yp);Dse=n(Z0e,"STRONG",{});var set=s(Dse);r_o=r(set,"deit"),set.forEach(t),t_o=r(Z0e," \u2014 "),JI=n(Z0e,"A",{href:!0});var iet=s(JI);a_o=r(iet,"DeiTModel"),iet.forEach(t),n_o=r(Z0e," (DeiT model)"),Z0e.forEach(t),s_o=i($),Lp=n($,"LI",{});var eAe=s(Lp);Gse=n(eAe,"STRONG",{});var det=s(Gse);l_o=r(det,"detr"),det.forEach(t),i_o=r(eAe," \u2014 "),YI=n(eAe,"A",{href:!0});var cet=s(YI);d_o=r(cet,"DetrModel"),cet.forEach(t),c_o=r(eAe," (DETR model)"),eAe.forEach(t),f_o=i($),xp=n($,"LI",{});var oAe=s(xp);Ose=n(oAe,"STRONG",{});var fet=s(Ose);m_o=r(fet,"distilbert"),fet.forEach(t),g_o=r(oAe," \u2014 "),KI=n(oAe,"A",{href:!0});var met=s(KI);h_o=r(met,"DistilBertModel"),met.forEach(t),p_o=r(oAe," (DistilBERT model)"),oAe.forEach(t),u_o=i($),$p=n($,"LI",{});var rAe=s($p);Vse=n(rAe,"STRONG",{});var get=s(Vse);__o=r(get,"dpr"),get.forEach(t),b_o=r(rAe," \u2014 "),ZI=n(rAe,"A",{href:!0});var het=s(ZI);v_o=r(het,"DPRQuestionEncoder"),het.forEach(t),F_o=r(rAe," (DPR model)"),rAe.forEach(t),T_o=i($),kp=n($,"LI",{});var tAe=s(kp);Xse=n(tAe,"STRONG",{});var pet=s(Xse);M_o=r(pet,"dpt"),pet.forEach(t),E_o=r(tAe," \u2014 "),eq=n(tAe,"A",{href:!0});var uet=s(eq);C_o=r(uet,"DPTModel"),uet.forEach(t),w_o=r(tAe," (DPT model)"),tAe.forEach(t),A_o=i($),Sp=n($,"LI",{});var aAe=s(Sp);zse=n(aAe,"STRONG",{});var _et=s(zse);y_o=r(_et,"electra"),_et.forEach(t),L_o=r(aAe," \u2014 "),oq=n(aAe,"A",{href:!0});var bet=s(oq);x_o=r(bet,"ElectraModel"),bet.forEach(t),$_o=r(aAe," (ELECTRA model)"),aAe.forEach(t),k_o=i($),Rp=n($,"LI",{});var nAe=s(Rp);Wse=n(nAe,"STRONG",{});var vet=s(Wse);S_o=r(vet,"flaubert"),vet.forEach(t),R_o=r(nAe," \u2014 "),rq=n(nAe,"A",{href:!0});var Fet=s(rq);P_o=r(Fet,"FlaubertModel"),Fet.forEach(t),B_o=r(nAe," (FlauBERT model)"),nAe.forEach(t),I_o=i($),Pp=n($,"LI",{});var sAe=s(Pp);Qse=n(sAe,"STRONG",{});var Tet=s(Qse);q_o=r(Tet,"flava"),Tet.forEach(t),N_o=r(sAe," \u2014 "),tq=n(sAe,"A",{href:!0});var Met=s(tq);j_o=r(Met,"FlavaModel"),Met.forEach(t),D_o=r(sAe," (Flava model)"),sAe.forEach(t),G_o=i($),Bp=n($,"LI",{});var lAe=s(Bp);Hse=n(lAe,"STRONG",{});var Eet=s(Hse);O_o=r(Eet,"fnet"),Eet.forEach(t),V_o=r(lAe," \u2014 "),aq=n(lAe,"A",{href:!0});var Cet=s(aq);X_o=r(Cet,"FNetModel"),Cet.forEach(t),z_o=r(lAe," (FNet model)"),lAe.forEach(t),W_o=i($),Ip=n($,"LI",{});var iAe=s(Ip);Use=n(iAe,"STRONG",{});var wet=s(Use);Q_o=r(wet,"fsmt"),wet.forEach(t),H_o=r(iAe," \u2014 "),nq=n(iAe,"A",{href:!0});var Aet=s(nq);U_o=r(Aet,"FSMTModel"),Aet.forEach(t),J_o=r(iAe," (FairSeq Machine-Translation model)"),iAe.forEach(t),Y_o=i($),Ps=n($,"LI",{});var G$=s(Ps);Jse=n(G$,"STRONG",{});var yet=s(Jse);K_o=r(yet,"funnel"),yet.forEach(t),Z_o=r(G$," \u2014 "),sq=n(G$,"A",{href:!0});var Let=s(sq);e1o=r(Let,"FunnelModel"),Let.forEach(t),o1o=r(G$," or "),lq=n(G$,"A",{href:!0});var xet=s(lq);r1o=r(xet,"FunnelBaseModel"),xet.forEach(t),t1o=r(G$," (Funnel Transformer model)"),G$.forEach(t),a1o=i($),qp=n($,"LI",{});var dAe=s(qp);Yse=n(dAe,"STRONG",{});var $et=s(Yse);n1o=r($et,"glpn"),$et.forEach(t),s1o=r(dAe," \u2014 "),iq=n(dAe,"A",{href:!0});var ket=s(iq);l1o=r(ket,"GLPNModel"),ket.forEach(t),i1o=r(dAe," (GLPN model)"),dAe.forEach(t),d1o=i($),Np=n($,"LI",{});var cAe=s(Np);Kse=n(cAe,"STRONG",{});var Set=s(Kse);c1o=r(Set,"gpt2"),Set.forEach(t),f1o=r(cAe," \u2014 "),dq=n(cAe,"A",{href:!0});var Ret=s(dq);m1o=r(Ret,"GPT2Model"),Ret.forEach(t),g1o=r(cAe," (OpenAI GPT-2 model)"),cAe.forEach(t),h1o=i($),jp=n($,"LI",{});var fAe=s(jp);Zse=n(fAe,"STRONG",{});var Pet=s(Zse);p1o=r(Pet,"gpt_neo"),Pet.forEach(t),u1o=r(fAe," \u2014 "),cq=n(fAe,"A",{href:!0});var Bet=s(cq);_1o=r(Bet,"GPTNeoModel"),Bet.forEach(t),b1o=r(fAe," (GPT Neo model)"),fAe.forEach(t),v1o=i($),Dp=n($,"LI",{});var mAe=s(Dp);ele=n(mAe,"STRONG",{});var Iet=s(ele);F1o=r(Iet,"gptj"),Iet.forEach(t),T1o=r(mAe," \u2014 "),fq=n(mAe,"A",{href:!0});var qet=s(fq);M1o=r(qet,"GPTJModel"),qet.forEach(t),E1o=r(mAe," (GPT-J model)"),mAe.forEach(t),C1o=i($),Gp=n($,"LI",{});var gAe=s(Gp);ole=n(gAe,"STRONG",{});var Net=s(ole);w1o=r(Net,"hubert"),Net.forEach(t),A1o=r(gAe," \u2014 "),mq=n(gAe,"A",{href:!0});var jet=s(mq);y1o=r(jet,"HubertModel"),jet.forEach(t),L1o=r(gAe," (Hubert model)"),gAe.forEach(t),x1o=i($),Op=n($,"LI",{});var hAe=s(Op);rle=n(hAe,"STRONG",{});var Det=s(rle);$1o=r(Det,"ibert"),Det.forEach(t),k1o=r(hAe," \u2014 "),gq=n(hAe,"A",{href:!0});var Get=s(gq);S1o=r(Get,"IBertModel"),Get.forEach(t),R1o=r(hAe," (I-BERT model)"),hAe.forEach(t),P1o=i($),Vp=n($,"LI",{});var pAe=s(Vp);tle=n(pAe,"STRONG",{});var Oet=s(tle);B1o=r(Oet,"imagegpt"),Oet.forEach(t),I1o=r(pAe," \u2014 "),hq=n(pAe,"A",{href:!0});var Vet=s(hq);q1o=r(Vet,"ImageGPTModel"),Vet.forEach(t),N1o=r(pAe," (ImageGPT model)"),pAe.forEach(t),j1o=i($),Xp=n($,"LI",{});var uAe=s(Xp);ale=n(uAe,"STRONG",{});var Xet=s(ale);D1o=r(Xet,"layoutlm"),Xet.forEach(t),G1o=r(uAe," \u2014 "),pq=n(uAe,"A",{href:!0});var zet=s(pq);O1o=r(zet,"LayoutLMModel"),zet.forEach(t),V1o=r(uAe," (LayoutLM model)"),uAe.forEach(t),X1o=i($),zp=n($,"LI",{});var _Ae=s(zp);nle=n(_Ae,"STRONG",{});var Wet=s(nle);z1o=r(Wet,"layoutlmv2"),Wet.forEach(t),W1o=r(_Ae," \u2014 "),uq=n(_Ae,"A",{href:!0});var Qet=s(uq);Q1o=r(Qet,"LayoutLMv2Model"),Qet.forEach(t),H1o=r(_Ae," (LayoutLMv2 model)"),_Ae.forEach(t),U1o=i($),Wp=n($,"LI",{});var bAe=s(Wp);sle=n(bAe,"STRONG",{});var Het=s(sle);J1o=r(Het,"layoutlmv3"),Het.forEach(t),Y1o=r(bAe," \u2014 "),_q=n(bAe,"A",{href:!0});var Uet=s(_q);K1o=r(Uet,"LayoutLMv3Model"),Uet.forEach(t),Z1o=r(bAe," (LayoutLMv3 model)"),bAe.forEach(t),e8o=i($),Qp=n($,"LI",{});var vAe=s(Qp);lle=n(vAe,"STRONG",{});var Jet=s(lle);o8o=r(Jet,"led"),Jet.forEach(t),r8o=r(vAe," \u2014 "),bq=n(vAe,"A",{href:!0});var Yet=s(bq);t8o=r(Yet,"LEDModel"),Yet.forEach(t),a8o=r(vAe," (LED model)"),vAe.forEach(t),n8o=i($),Hp=n($,"LI",{});var FAe=s(Hp);ile=n(FAe,"STRONG",{});var Ket=s(ile);s8o=r(Ket,"longformer"),Ket.forEach(t),l8o=r(FAe," \u2014 "),vq=n(FAe,"A",{href:!0});var Zet=s(vq);i8o=r(Zet,"LongformerModel"),Zet.forEach(t),d8o=r(FAe," (Longformer model)"),FAe.forEach(t),c8o=i($),Up=n($,"LI",{});var TAe=s(Up);dle=n(TAe,"STRONG",{});var eot=s(dle);f8o=r(eot,"luke"),eot.forEach(t),m8o=r(TAe," \u2014 "),Fq=n(TAe,"A",{href:!0});var oot=s(Fq);g8o=r(oot,"LukeModel"),oot.forEach(t),h8o=r(TAe," (LUKE model)"),TAe.forEach(t),p8o=i($),Jp=n($,"LI",{});var MAe=s(Jp);cle=n(MAe,"STRONG",{});var rot=s(cle);u8o=r(rot,"lxmert"),rot.forEach(t),_8o=r(MAe," \u2014 "),Tq=n(MAe,"A",{href:!0});var tot=s(Tq);b8o=r(tot,"LxmertModel"),tot.forEach(t),v8o=r(MAe," (LXMERT model)"),MAe.forEach(t),F8o=i($),Yp=n($,"LI",{});var EAe=s(Yp);fle=n(EAe,"STRONG",{});var aot=s(fle);T8o=r(aot,"m2m_100"),aot.forEach(t),M8o=r(EAe," \u2014 "),Mq=n(EAe,"A",{href:!0});var not=s(Mq);E8o=r(not,"M2M100Model"),not.forEach(t),C8o=r(EAe," (M2M100 model)"),EAe.forEach(t),w8o=i($),Kp=n($,"LI",{});var CAe=s(Kp);mle=n(CAe,"STRONG",{});var sot=s(mle);A8o=r(sot,"marian"),sot.forEach(t),y8o=r(CAe," \u2014 "),Eq=n(CAe,"A",{href:!0});var lot=s(Eq);L8o=r(lot,"MarianModel"),lot.forEach(t),x8o=r(CAe," (Marian model)"),CAe.forEach(t),$8o=i($),Zp=n($,"LI",{});var wAe=s(Zp);gle=n(wAe,"STRONG",{});var iot=s(gle);k8o=r(iot,"maskformer"),iot.forEach(t),S8o=r(wAe," \u2014 "),Cq=n(wAe,"A",{href:!0});var dot=s(Cq);R8o=r(dot,"MaskFormerModel"),dot.forEach(t),P8o=r(wAe," (MaskFormer model)"),wAe.forEach(t),B8o=i($),eu=n($,"LI",{});var AAe=s(eu);hle=n(AAe,"STRONG",{});var cot=s(hle);I8o=r(cot,"mbart"),cot.forEach(t),q8o=r(AAe," \u2014 "),wq=n(AAe,"A",{href:!0});var fot=s(wq);N8o=r(fot,"MBartModel"),fot.forEach(t),j8o=r(AAe," (mBART model)"),AAe.forEach(t),D8o=i($),ou=n($,"LI",{});var yAe=s(ou);ple=n(yAe,"STRONG",{});var mot=s(ple);G8o=r(mot,"megatron-bert"),mot.forEach(t),O8o=r(yAe," \u2014 "),Aq=n(yAe,"A",{href:!0});var got=s(Aq);V8o=r(got,"MegatronBertModel"),got.forEach(t),X8o=r(yAe," (MegatronBert model)"),yAe.forEach(t),z8o=i($),ru=n($,"LI",{});var LAe=s(ru);ule=n(LAe,"STRONG",{});var hot=s(ule);W8o=r(hot,"mobilebert"),hot.forEach(t),Q8o=r(LAe," \u2014 "),yq=n(LAe,"A",{href:!0});var pot=s(yq);H8o=r(pot,"MobileBertModel"),pot.forEach(t),U8o=r(LAe," (MobileBERT model)"),LAe.forEach(t),J8o=i($),tu=n($,"LI",{});var xAe=s(tu);_le=n(xAe,"STRONG",{});var uot=s(_le);Y8o=r(uot,"mpnet"),uot.forEach(t),K8o=r(xAe," \u2014 "),Lq=n(xAe,"A",{href:!0});var _ot=s(Lq);Z8o=r(_ot,"MPNetModel"),_ot.forEach(t),ebo=r(xAe," (MPNet model)"),xAe.forEach(t),obo=i($),au=n($,"LI",{});var $Ae=s(au);ble=n($Ae,"STRONG",{});var bot=s(ble);rbo=r(bot,"mt5"),bot.forEach(t),tbo=r($Ae," \u2014 "),xq=n($Ae,"A",{href:!0});var vot=s(xq);abo=r(vot,"MT5Model"),vot.forEach(t),nbo=r($Ae," (mT5 model)"),$Ae.forEach(t),sbo=i($),nu=n($,"LI",{});var kAe=s(nu);vle=n(kAe,"STRONG",{});var Fot=s(vle);lbo=r(Fot,"nystromformer"),Fot.forEach(t),ibo=r(kAe," \u2014 "),$q=n(kAe,"A",{href:!0});var Tot=s($q);dbo=r(Tot,"NystromformerModel"),Tot.forEach(t),cbo=r(kAe," (Nystromformer model)"),kAe.forEach(t),fbo=i($),su=n($,"LI",{});var SAe=s(su);Fle=n(SAe,"STRONG",{});var Mot=s(Fle);mbo=r(Mot,"openai-gpt"),Mot.forEach(t),gbo=r(SAe," \u2014 "),kq=n(SAe,"A",{href:!0});var Eot=s(kq);hbo=r(Eot,"OpenAIGPTModel"),Eot.forEach(t),pbo=r(SAe," (OpenAI GPT model)"),SAe.forEach(t),ubo=i($),lu=n($,"LI",{});var RAe=s(lu);Tle=n(RAe,"STRONG",{});var Cot=s(Tle);_bo=r(Cot,"opt"),Cot.forEach(t),bbo=r(RAe," \u2014 "),Sq=n(RAe,"A",{href:!0});var wot=s(Sq);vbo=r(wot,"OPTModel"),wot.forEach(t),Fbo=r(RAe," (OPT model)"),RAe.forEach(t),Tbo=i($),iu=n($,"LI",{});var PAe=s(iu);Mle=n(PAe,"STRONG",{});var Aot=s(Mle);Mbo=r(Aot,"pegasus"),Aot.forEach(t),Ebo=r(PAe," \u2014 "),Rq=n(PAe,"A",{href:!0});var yot=s(Rq);Cbo=r(yot,"PegasusModel"),yot.forEach(t),wbo=r(PAe," (Pegasus model)"),PAe.forEach(t),Abo=i($),du=n($,"LI",{});var BAe=s(du);Ele=n(BAe,"STRONG",{});var Lot=s(Ele);ybo=r(Lot,"perceiver"),Lot.forEach(t),Lbo=r(BAe," \u2014 "),Pq=n(BAe,"A",{href:!0});var xot=s(Pq);xbo=r(xot,"PerceiverModel"),xot.forEach(t),$bo=r(BAe," (Perceiver model)"),BAe.forEach(t),kbo=i($),cu=n($,"LI",{});var IAe=s(cu);Cle=n(IAe,"STRONG",{});var $ot=s(Cle);Sbo=r($ot,"plbart"),$ot.forEach(t),Rbo=r(IAe," \u2014 "),Bq=n(IAe,"A",{href:!0});var kot=s(Bq);Pbo=r(kot,"PLBartModel"),kot.forEach(t),Bbo=r(IAe," (PLBart model)"),IAe.forEach(t),Ibo=i($),fu=n($,"LI",{});var qAe=s(fu);wle=n(qAe,"STRONG",{});var Sot=s(wle);qbo=r(Sot,"poolformer"),Sot.forEach(t),Nbo=r(qAe," \u2014 "),Iq=n(qAe,"A",{href:!0});var Rot=s(Iq);jbo=r(Rot,"PoolFormerModel"),Rot.forEach(t),Dbo=r(qAe," (PoolFormer model)"),qAe.forEach(t),Gbo=i($),mu=n($,"LI",{});var NAe=s(mu);Ale=n(NAe,"STRONG",{});var Pot=s(Ale);Obo=r(Pot,"prophetnet"),Pot.forEach(t),Vbo=r(NAe," \u2014 "),qq=n(NAe,"A",{href:!0});var Bot=s(qq);Xbo=r(Bot,"ProphetNetModel"),Bot.forEach(t),zbo=r(NAe," (ProphetNet model)"),NAe.forEach(t),Wbo=i($),gu=n($,"LI",{});var jAe=s(gu);yle=n(jAe,"STRONG",{});var Iot=s(yle);Qbo=r(Iot,"qdqbert"),Iot.forEach(t),Hbo=r(jAe," \u2014 "),Nq=n(jAe,"A",{href:!0});var qot=s(Nq);Ubo=r(qot,"QDQBertModel"),qot.forEach(t),Jbo=r(jAe," (QDQBert model)"),jAe.forEach(t),Ybo=i($),hu=n($,"LI",{});var DAe=s(hu);Lle=n(DAe,"STRONG",{});var Not=s(Lle);Kbo=r(Not,"reformer"),Not.forEach(t),Zbo=r(DAe," \u2014 "),jq=n(DAe,"A",{href:!0});var jot=s(jq);e2o=r(jot,"ReformerModel"),jot.forEach(t),o2o=r(DAe," (Reformer model)"),DAe.forEach(t),r2o=i($),pu=n($,"LI",{});var GAe=s(pu);xle=n(GAe,"STRONG",{});var Dot=s(xle);t2o=r(Dot,"regnet"),Dot.forEach(t),a2o=r(GAe," \u2014 "),Dq=n(GAe,"A",{href:!0});var Got=s(Dq);n2o=r(Got,"RegNetModel"),Got.forEach(t),s2o=r(GAe," (RegNet model)"),GAe.forEach(t),l2o=i($),uu=n($,"LI",{});var OAe=s(uu);$le=n(OAe,"STRONG",{});var Oot=s($le);i2o=r(Oot,"rembert"),Oot.forEach(t),d2o=r(OAe," \u2014 "),Gq=n(OAe,"A",{href:!0});var Vot=s(Gq);c2o=r(Vot,"RemBertModel"),Vot.forEach(t),f2o=r(OAe," (RemBERT model)"),OAe.forEach(t),m2o=i($),_u=n($,"LI",{});var VAe=s(_u);kle=n(VAe,"STRONG",{});var Xot=s(kle);g2o=r(Xot,"resnet"),Xot.forEach(t),h2o=r(VAe," \u2014 "),Oq=n(VAe,"A",{href:!0});var zot=s(Oq);p2o=r(zot,"ResNetModel"),zot.forEach(t),u2o=r(VAe," (ResNet model)"),VAe.forEach(t),_2o=i($),bu=n($,"LI",{});var XAe=s(bu);Sle=n(XAe,"STRONG",{});var Wot=s(Sle);b2o=r(Wot,"retribert"),Wot.forEach(t),v2o=r(XAe," \u2014 "),Vq=n(XAe,"A",{href:!0});var Qot=s(Vq);F2o=r(Qot,"RetriBertModel"),Qot.forEach(t),T2o=r(XAe," (RetriBERT model)"),XAe.forEach(t),M2o=i($),vu=n($,"LI",{});var zAe=s(vu);Rle=n(zAe,"STRONG",{});var Hot=s(Rle);E2o=r(Hot,"roberta"),Hot.forEach(t),C2o=r(zAe," \u2014 "),Xq=n(zAe,"A",{href:!0});var Uot=s(Xq);w2o=r(Uot,"RobertaModel"),Uot.forEach(t),A2o=r(zAe," (RoBERTa model)"),zAe.forEach(t),y2o=i($),Fu=n($,"LI",{});var WAe=s(Fu);Ple=n(WAe,"STRONG",{});var Jot=s(Ple);L2o=r(Jot,"roformer"),Jot.forEach(t),x2o=r(WAe," \u2014 "),zq=n(WAe,"A",{href:!0});var Yot=s(zq);$2o=r(Yot,"RoFormerModel"),Yot.forEach(t),k2o=r(WAe," (RoFormer model)"),WAe.forEach(t),S2o=i($),Tu=n($,"LI",{});var QAe=s(Tu);Ble=n(QAe,"STRONG",{});var Kot=s(Ble);R2o=r(Kot,"segformer"),Kot.forEach(t),P2o=r(QAe," \u2014 "),Wq=n(QAe,"A",{href:!0});var Zot=s(Wq);B2o=r(Zot,"SegformerModel"),Zot.forEach(t),I2o=r(QAe," (SegFormer model)"),QAe.forEach(t),q2o=i($),Mu=n($,"LI",{});var HAe=s(Mu);Ile=n(HAe,"STRONG",{});var ert=s(Ile);N2o=r(ert,"sew"),ert.forEach(t),j2o=r(HAe," \u2014 "),Qq=n(HAe,"A",{href:!0});var ort=s(Qq);D2o=r(ort,"SEWModel"),ort.forEach(t),G2o=r(HAe," (SEW model)"),HAe.forEach(t),O2o=i($),Eu=n($,"LI",{});var UAe=s(Eu);qle=n(UAe,"STRONG",{});var rrt=s(qle);V2o=r(rrt,"sew-d"),rrt.forEach(t),X2o=r(UAe," \u2014 "),Hq=n(UAe,"A",{href:!0});var trt=s(Hq);z2o=r(trt,"SEWDModel"),trt.forEach(t),W2o=r(UAe," (SEW-D model)"),UAe.forEach(t),Q2o=i($),Cu=n($,"LI",{});var JAe=s(Cu);Nle=n(JAe,"STRONG",{});var art=s(Nle);H2o=r(art,"speech_to_text"),art.forEach(t),U2o=r(JAe," \u2014 "),Uq=n(JAe,"A",{href:!0});var nrt=s(Uq);J2o=r(nrt,"Speech2TextModel"),nrt.forEach(t),Y2o=r(JAe," (Speech2Text model)"),JAe.forEach(t),K2o=i($),wu=n($,"LI",{});var YAe=s(wu);jle=n(YAe,"STRONG",{});var srt=s(jle);Z2o=r(srt,"splinter"),srt.forEach(t),evo=r(YAe," \u2014 "),Jq=n(YAe,"A",{href:!0});var lrt=s(Jq);ovo=r(lrt,"SplinterModel"),lrt.forEach(t),rvo=r(YAe," (Splinter model)"),YAe.forEach(t),tvo=i($),Au=n($,"LI",{});var KAe=s(Au);Dle=n(KAe,"STRONG",{});var irt=s(Dle);avo=r(irt,"squeezebert"),irt.forEach(t),nvo=r(KAe," \u2014 "),Yq=n(KAe,"A",{href:!0});var drt=s(Yq);svo=r(drt,"SqueezeBertModel"),drt.forEach(t),lvo=r(KAe," (SqueezeBERT model)"),KAe.forEach(t),ivo=i($),yu=n($,"LI",{});var ZAe=s(yu);Gle=n(ZAe,"STRONG",{});var crt=s(Gle);dvo=r(crt,"swin"),crt.forEach(t),cvo=r(ZAe," \u2014 "),Kq=n(ZAe,"A",{href:!0});var frt=s(Kq);fvo=r(frt,"SwinModel"),frt.forEach(t),mvo=r(ZAe," (Swin model)"),ZAe.forEach(t),gvo=i($),Lu=n($,"LI",{});var e6e=s(Lu);Ole=n(e6e,"STRONG",{});var mrt=s(Ole);hvo=r(mrt,"t5"),mrt.forEach(t),pvo=r(e6e," \u2014 "),Zq=n(e6e,"A",{href:!0});var grt=s(Zq);uvo=r(grt,"T5Model"),grt.forEach(t),_vo=r(e6e," (T5 model)"),e6e.forEach(t),bvo=i($),xu=n($,"LI",{});var o6e=s(xu);Vle=n(o6e,"STRONG",{});var hrt=s(Vle);vvo=r(hrt,"tapas"),hrt.forEach(t),Fvo=r(o6e," \u2014 "),eN=n(o6e,"A",{href:!0});var prt=s(eN);Tvo=r(prt,"TapasModel"),prt.forEach(t),Mvo=r(o6e," (TAPAS model)"),o6e.forEach(t),Evo=i($),$u=n($,"LI",{});var r6e=s($u);Xle=n(r6e,"STRONG",{});var urt=s(Xle);Cvo=r(urt,"trajectory_transformer"),urt.forEach(t),wvo=r(r6e," \u2014 "),oN=n(r6e,"A",{href:!0});var _rt=s(oN);Avo=r(_rt,"TrajectoryTransformerModel"),_rt.forEach(t),yvo=r(r6e," (Trajectory Transformer model)"),r6e.forEach(t),Lvo=i($),ku=n($,"LI",{});var t6e=s(ku);zle=n(t6e,"STRONG",{});var brt=s(zle);xvo=r(brt,"transfo-xl"),brt.forEach(t),$vo=r(t6e," \u2014 "),rN=n(t6e,"A",{href:!0});var vrt=s(rN);kvo=r(vrt,"TransfoXLModel"),vrt.forEach(t),Svo=r(t6e," (Transformer-XL model)"),t6e.forEach(t),Rvo=i($),Su=n($,"LI",{});var a6e=s(Su);Wle=n(a6e,"STRONG",{});var Frt=s(Wle);Pvo=r(Frt,"unispeech"),Frt.forEach(t),Bvo=r(a6e," \u2014 "),tN=n(a6e,"A",{href:!0});var Trt=s(tN);Ivo=r(Trt,"UniSpeechModel"),Trt.forEach(t),qvo=r(a6e," (UniSpeech model)"),a6e.forEach(t),Nvo=i($),Ru=n($,"LI",{});var n6e=s(Ru);Qle=n(n6e,"STRONG",{});var Mrt=s(Qle);jvo=r(Mrt,"unispeech-sat"),Mrt.forEach(t),Dvo=r(n6e," \u2014 "),aN=n(n6e,"A",{href:!0});var Ert=s(aN);Gvo=r(Ert,"UniSpeechSatModel"),Ert.forEach(t),Ovo=r(n6e," (UniSpeechSat model)"),n6e.forEach(t),Vvo=i($),Pu=n($,"LI",{});var s6e=s(Pu);Hle=n(s6e,"STRONG",{});var Crt=s(Hle);Xvo=r(Crt,"van"),Crt.forEach(t),zvo=r(s6e," \u2014 "),nN=n(s6e,"A",{href:!0});var wrt=s(nN);Wvo=r(wrt,"VanModel"),wrt.forEach(t),Qvo=r(s6e," (VAN model)"),s6e.forEach(t),Hvo=i($),Bu=n($,"LI",{});var l6e=s(Bu);Ule=n(l6e,"STRONG",{});var Art=s(Ule);Uvo=r(Art,"vilt"),Art.forEach(t),Jvo=r(l6e," \u2014 "),sN=n(l6e,"A",{href:!0});var yrt=s(sN);Yvo=r(yrt,"ViltModel"),yrt.forEach(t),Kvo=r(l6e," (ViLT model)"),l6e.forEach(t),Zvo=i($),Iu=n($,"LI",{});var i6e=s(Iu);Jle=n(i6e,"STRONG",{});var Lrt=s(Jle);e3o=r(Lrt,"vision-text-dual-encoder"),Lrt.forEach(t),o3o=r(i6e," \u2014 "),lN=n(i6e,"A",{href:!0});var xrt=s(lN);r3o=r(xrt,"VisionTextDualEncoderModel"),xrt.forEach(t),t3o=r(i6e," (VisionTextDualEncoder model)"),i6e.forEach(t),a3o=i($),qu=n($,"LI",{});var d6e=s(qu);Yle=n(d6e,"STRONG",{});var $rt=s(Yle);n3o=r($rt,"visual_bert"),$rt.forEach(t),s3o=r(d6e," \u2014 "),iN=n(d6e,"A",{href:!0});var krt=s(iN);l3o=r(krt,"VisualBertModel"),krt.forEach(t),i3o=r(d6e," (VisualBert model)"),d6e.forEach(t),d3o=i($),Nu=n($,"LI",{});var c6e=s(Nu);Kle=n(c6e,"STRONG",{});var Srt=s(Kle);c3o=r(Srt,"vit"),Srt.forEach(t),f3o=r(c6e," \u2014 "),dN=n(c6e,"A",{href:!0});var Rrt=s(dN);m3o=r(Rrt,"ViTModel"),Rrt.forEach(t),g3o=r(c6e," (ViT model)"),c6e.forEach(t),h3o=i($),ju=n($,"LI",{});var f6e=s(ju);Zle=n(f6e,"STRONG",{});var Prt=s(Zle);p3o=r(Prt,"vit_mae"),Prt.forEach(t),u3o=r(f6e," \u2014 "),cN=n(f6e,"A",{href:!0});var Brt=s(cN);_3o=r(Brt,"ViTMAEModel"),Brt.forEach(t),b3o=r(f6e," (ViTMAE model)"),f6e.forEach(t),v3o=i($),Du=n($,"LI",{});var m6e=s(Du);eie=n(m6e,"STRONG",{});var Irt=s(eie);F3o=r(Irt,"wav2vec2"),Irt.forEach(t),T3o=r(m6e," \u2014 "),fN=n(m6e,"A",{href:!0});var qrt=s(fN);M3o=r(qrt,"Wav2Vec2Model"),qrt.forEach(t),E3o=r(m6e," (Wav2Vec2 model)"),m6e.forEach(t),C3o=i($),Gu=n($,"LI",{});var g6e=s(Gu);oie=n(g6e,"STRONG",{});var Nrt=s(oie);w3o=r(Nrt,"wav2vec2-conformer"),Nrt.forEach(t),A3o=r(g6e," \u2014 "),mN=n(g6e,"A",{href:!0});var jrt=s(mN);y3o=r(jrt,"Wav2Vec2ConformerModel"),jrt.forEach(t),L3o=r(g6e," (Wav2Vec2-Conformer model)"),g6e.forEach(t),x3o=i($),Ou=n($,"LI",{});var h6e=s(Ou);rie=n(h6e,"STRONG",{});var Drt=s(rie);$3o=r(Drt,"wavlm"),Drt.forEach(t),k3o=r(h6e," \u2014 "),gN=n(h6e,"A",{href:!0});var Grt=s(gN);S3o=r(Grt,"WavLMModel"),Grt.forEach(t),R3o=r(h6e," (WavLM model)"),h6e.forEach(t),P3o=i($),Vu=n($,"LI",{});var p6e=s(Vu);tie=n(p6e,"STRONG",{});var Ort=s(tie);B3o=r(Ort,"xglm"),Ort.forEach(t),I3o=r(p6e," \u2014 "),hN=n(p6e,"A",{href:!0});var Vrt=s(hN);q3o=r(Vrt,"XGLMModel"),Vrt.forEach(t),N3o=r(p6e," (XGLM model)"),p6e.forEach(t),j3o=i($),Xu=n($,"LI",{});var u6e=s(Xu);aie=n(u6e,"STRONG",{});var Xrt=s(aie);D3o=r(Xrt,"xlm"),Xrt.forEach(t),G3o=r(u6e," \u2014 "),pN=n(u6e,"A",{href:!0});var zrt=s(pN);O3o=r(zrt,"XLMModel"),zrt.forEach(t),V3o=r(u6e," (XLM model)"),u6e.forEach(t),X3o=i($),zu=n($,"LI",{});var _6e=s(zu);nie=n(_6e,"STRONG",{});var Wrt=s(nie);z3o=r(Wrt,"xlm-prophetnet"),Wrt.forEach(t),W3o=r(_6e," \u2014 "),uN=n(_6e,"A",{href:!0});var Qrt=s(uN);Q3o=r(Qrt,"XLMProphetNetModel"),Qrt.forEach(t),H3o=r(_6e," (XLMProphetNet model)"),_6e.forEach(t),U3o=i($),Wu=n($,"LI",{});var b6e=s(Wu);sie=n(b6e,"STRONG",{});var Hrt=s(sie);J3o=r(Hrt,"xlm-roberta"),Hrt.forEach(t),Y3o=r(b6e," \u2014 "),_N=n(b6e,"A",{href:!0});var Urt=s(_N);K3o=r(Urt,"XLMRobertaModel"),Urt.forEach(t),Z3o=r(b6e," (XLM-RoBERTa model)"),b6e.forEach(t),eFo=i($),Qu=n($,"LI",{});var v6e=s(Qu);lie=n(v6e,"STRONG",{});var Jrt=s(lie);oFo=r(Jrt,"xlm-roberta-xl"),Jrt.forEach(t),rFo=r(v6e," \u2014 "),bN=n(v6e,"A",{href:!0});var Yrt=s(bN);tFo=r(Yrt,"XLMRobertaXLModel"),Yrt.forEach(t),aFo=r(v6e," (XLM-RoBERTa-XL model)"),v6e.forEach(t),nFo=i($),Hu=n($,"LI",{});var F6e=s(Hu);iie=n(F6e,"STRONG",{});var Krt=s(iie);sFo=r(Krt,"xlnet"),Krt.forEach(t),lFo=r(F6e," \u2014 "),vN=n(F6e,"A",{href:!0});var Zrt=s(vN);iFo=r(Zrt,"XLNetModel"),Zrt.forEach(t),dFo=r(F6e," (XLNet model)"),F6e.forEach(t),cFo=i($),Uu=n($,"LI",{});var T6e=s(Uu);die=n(T6e,"STRONG",{});var ett=s(die);fFo=r(ett,"yolos"),ett.forEach(t),mFo=r(T6e," \u2014 "),FN=n(T6e,"A",{href:!0});var ott=s(FN);gFo=r(ott,"YolosModel"),ott.forEach(t),hFo=r(T6e," (YOLOS model)"),T6e.forEach(t),pFo=i($),Ju=n($,"LI",{});var M6e=s(Ju);cie=n(M6e,"STRONG",{});var rtt=s(cie);uFo=r(rtt,"yoso"),rtt.forEach(t),_Fo=r(M6e," \u2014 "),TN=n(M6e,"A",{href:!0});var ttt=s(TN);bFo=r(ttt,"YosoModel"),ttt.forEach(t),vFo=r(M6e," (YOSO model)"),M6e.forEach(t),$.forEach(t),FFo=i(oa),Yu=n(oa,"P",{});var E6e=s(Yu);TFo=r(E6e,"The model is set in evaluation mode by default using "),fie=n(E6e,"CODE",{});var att=s(fie);MFo=r(att,"model.eval()"),att.forEach(t),EFo=r(E6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(E6e,"CODE",{});var ntt=s(mie);CFo=r(ntt,"model.train()"),ntt.forEach(t),E6e.forEach(t),wFo=i(oa),T(Ku.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),dNe=i(f),Li=n(f,"H2",{class:!0});var gDe=s(Li);Zu=n(gDe,"A",{id:!0,class:!0,href:!0});var stt=s(Zu);gie=n(stt,"SPAN",{});var ltt=s(gie);T(t6.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),AFo=i(gDe),hie=n(gDe,"SPAN",{});var itt=s(hie);yFo=r(itt,"AutoModelForPreTraining"),itt.forEach(t),gDe.forEach(t),cNe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(a6.$$.fragment,Os),LFo=i(Os),xi=n(Os,"P",{});var pZ=s(xi);xFo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MN=n(pZ,"A",{href:!0});var dtt=s(MN);$Fo=r(dtt,"from_pretrained()"),dtt.forEach(t),kFo=r(pZ," class method or the "),EN=n(pZ,"A",{href:!0});var ctt=s(EN);SFo=r(ctt,"from_config()"),ctt.forEach(t),RFo=r(pZ,` class
method.`),pZ.forEach(t),PFo=i(Os),n6=n(Os,"P",{});var hDe=s(n6);BFo=r(hDe,"This class cannot be instantiated directly using "),pie=n(hDe,"CODE",{});var ftt=s(pie);IFo=r(ftt,"__init__()"),ftt.forEach(t),qFo=r(hDe," (throws an error)."),hDe.forEach(t),NFo=i(Os),at=n(Os,"DIV",{class:!0});var Sw=s(at);T(s6.$$.fragment,Sw),jFo=i(Sw),uie=n(Sw,"P",{});var mtt=s(uie);DFo=r(mtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mtt.forEach(t),GFo=i(Sw),$i=n(Sw,"P",{});var uZ=s($i);OFo=r(uZ,`Note:
Loading a model from its configuration file does `),_ie=n(uZ,"STRONG",{});var gtt=s(_ie);VFo=r(gtt,"not"),gtt.forEach(t),XFo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=n(uZ,"A",{href:!0});var htt=s(CN);zFo=r(htt,"from_pretrained()"),htt.forEach(t),WFo=r(uZ," to load the model weights."),uZ.forEach(t),QFo=i(Sw),T(e_.$$.fragment,Sw),Sw.forEach(t),HFo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(l6.$$.fragment,ra),UFo=i(ra),bie=n(ra,"P",{});var ptt=s(bie);JFo=r(ptt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ptt.forEach(t),YFo=i(ra),xa=n(ra,"P",{});var Rw=s(xa);KFo=r(Rw,"The model class to instantiate is selected based on the "),vie=n(Rw,"CODE",{});var utt=s(vie);ZFo=r(utt,"model_type"),utt.forEach(t),eTo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Fie=n(Rw,"CODE",{});var _tt=s(Fie);oTo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),rTo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=n(Rw,"CODE",{});var btt=s(Tie);tTo=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),aTo=r(Rw,":"),Rw.forEach(t),nTo=i(ra),G=n(ra,"UL",{});var O=s(G);o_=n(O,"LI",{});var C6e=s(o_);Mie=n(C6e,"STRONG",{});var vtt=s(Mie);sTo=r(vtt,"albert"),vtt.forEach(t),lTo=r(C6e," \u2014 "),wN=n(C6e,"A",{href:!0});var Ftt=s(wN);iTo=r(Ftt,"AlbertForPreTraining"),Ftt.forEach(t),dTo=r(C6e," (ALBERT model)"),C6e.forEach(t),cTo=i(O),r_=n(O,"LI",{});var w6e=s(r_);Eie=n(w6e,"STRONG",{});var Ttt=s(Eie);fTo=r(Ttt,"bart"),Ttt.forEach(t),mTo=r(w6e," \u2014 "),AN=n(w6e,"A",{href:!0});var Mtt=s(AN);gTo=r(Mtt,"BartForConditionalGeneration"),Mtt.forEach(t),hTo=r(w6e," (BART model)"),w6e.forEach(t),pTo=i(O),t_=n(O,"LI",{});var A6e=s(t_);Cie=n(A6e,"STRONG",{});var Ett=s(Cie);uTo=r(Ett,"bert"),Ett.forEach(t),_To=r(A6e," \u2014 "),yN=n(A6e,"A",{href:!0});var Ctt=s(yN);bTo=r(Ctt,"BertForPreTraining"),Ctt.forEach(t),vTo=r(A6e," (BERT model)"),A6e.forEach(t),FTo=i(O),a_=n(O,"LI",{});var y6e=s(a_);wie=n(y6e,"STRONG",{});var wtt=s(wie);TTo=r(wtt,"big_bird"),wtt.forEach(t),MTo=r(y6e," \u2014 "),LN=n(y6e,"A",{href:!0});var Att=s(LN);ETo=r(Att,"BigBirdForPreTraining"),Att.forEach(t),CTo=r(y6e," (BigBird model)"),y6e.forEach(t),wTo=i(O),n_=n(O,"LI",{});var L6e=s(n_);Aie=n(L6e,"STRONG",{});var ytt=s(Aie);ATo=r(ytt,"camembert"),ytt.forEach(t),yTo=r(L6e," \u2014 "),xN=n(L6e,"A",{href:!0});var Ltt=s(xN);LTo=r(Ltt,"CamembertForMaskedLM"),Ltt.forEach(t),xTo=r(L6e," (CamemBERT model)"),L6e.forEach(t),$To=i(O),s_=n(O,"LI",{});var x6e=s(s_);yie=n(x6e,"STRONG",{});var xtt=s(yie);kTo=r(xtt,"ctrl"),xtt.forEach(t),STo=r(x6e," \u2014 "),$N=n(x6e,"A",{href:!0});var $tt=s($N);RTo=r($tt,"CTRLLMHeadModel"),$tt.forEach(t),PTo=r(x6e," (CTRL model)"),x6e.forEach(t),BTo=i(O),l_=n(O,"LI",{});var $6e=s(l_);Lie=n($6e,"STRONG",{});var ktt=s(Lie);ITo=r(ktt,"data2vec-text"),ktt.forEach(t),qTo=r($6e," \u2014 "),kN=n($6e,"A",{href:!0});var Stt=s(kN);NTo=r(Stt,"Data2VecTextForMaskedLM"),Stt.forEach(t),jTo=r($6e," (Data2VecText model)"),$6e.forEach(t),DTo=i(O),i_=n(O,"LI",{});var k6e=s(i_);xie=n(k6e,"STRONG",{});var Rtt=s(xie);GTo=r(Rtt,"deberta"),Rtt.forEach(t),OTo=r(k6e," \u2014 "),SN=n(k6e,"A",{href:!0});var Ptt=s(SN);VTo=r(Ptt,"DebertaForMaskedLM"),Ptt.forEach(t),XTo=r(k6e," (DeBERTa model)"),k6e.forEach(t),zTo=i(O),d_=n(O,"LI",{});var S6e=s(d_);$ie=n(S6e,"STRONG",{});var Btt=s($ie);WTo=r(Btt,"deberta-v2"),Btt.forEach(t),QTo=r(S6e," \u2014 "),RN=n(S6e,"A",{href:!0});var Itt=s(RN);HTo=r(Itt,"DebertaV2ForMaskedLM"),Itt.forEach(t),UTo=r(S6e," (DeBERTa-v2 model)"),S6e.forEach(t),JTo=i(O),c_=n(O,"LI",{});var R6e=s(c_);kie=n(R6e,"STRONG",{});var qtt=s(kie);YTo=r(qtt,"distilbert"),qtt.forEach(t),KTo=r(R6e," \u2014 "),PN=n(R6e,"A",{href:!0});var Ntt=s(PN);ZTo=r(Ntt,"DistilBertForMaskedLM"),Ntt.forEach(t),e7o=r(R6e," (DistilBERT model)"),R6e.forEach(t),o7o=i(O),f_=n(O,"LI",{});var P6e=s(f_);Sie=n(P6e,"STRONG",{});var jtt=s(Sie);r7o=r(jtt,"electra"),jtt.forEach(t),t7o=r(P6e," \u2014 "),BN=n(P6e,"A",{href:!0});var Dtt=s(BN);a7o=r(Dtt,"ElectraForPreTraining"),Dtt.forEach(t),n7o=r(P6e," (ELECTRA model)"),P6e.forEach(t),s7o=i(O),m_=n(O,"LI",{});var B6e=s(m_);Rie=n(B6e,"STRONG",{});var Gtt=s(Rie);l7o=r(Gtt,"flaubert"),Gtt.forEach(t),i7o=r(B6e," \u2014 "),IN=n(B6e,"A",{href:!0});var Ott=s(IN);d7o=r(Ott,"FlaubertWithLMHeadModel"),Ott.forEach(t),c7o=r(B6e," (FlauBERT model)"),B6e.forEach(t),f7o=i(O),g_=n(O,"LI",{});var I6e=s(g_);Pie=n(I6e,"STRONG",{});var Vtt=s(Pie);m7o=r(Vtt,"flava"),Vtt.forEach(t),g7o=r(I6e," \u2014 "),qN=n(I6e,"A",{href:!0});var Xtt=s(qN);h7o=r(Xtt,"FlavaForPreTraining"),Xtt.forEach(t),p7o=r(I6e," (Flava model)"),I6e.forEach(t),u7o=i(O),h_=n(O,"LI",{});var q6e=s(h_);Bie=n(q6e,"STRONG",{});var ztt=s(Bie);_7o=r(ztt,"fnet"),ztt.forEach(t),b7o=r(q6e," \u2014 "),NN=n(q6e,"A",{href:!0});var Wtt=s(NN);v7o=r(Wtt,"FNetForPreTraining"),Wtt.forEach(t),F7o=r(q6e," (FNet model)"),q6e.forEach(t),T7o=i(O),p_=n(O,"LI",{});var N6e=s(p_);Iie=n(N6e,"STRONG",{});var Qtt=s(Iie);M7o=r(Qtt,"fsmt"),Qtt.forEach(t),E7o=r(N6e," \u2014 "),jN=n(N6e,"A",{href:!0});var Htt=s(jN);C7o=r(Htt,"FSMTForConditionalGeneration"),Htt.forEach(t),w7o=r(N6e," (FairSeq Machine-Translation model)"),N6e.forEach(t),A7o=i(O),u_=n(O,"LI",{});var j6e=s(u_);qie=n(j6e,"STRONG",{});var Utt=s(qie);y7o=r(Utt,"funnel"),Utt.forEach(t),L7o=r(j6e," \u2014 "),DN=n(j6e,"A",{href:!0});var Jtt=s(DN);x7o=r(Jtt,"FunnelForPreTraining"),Jtt.forEach(t),$7o=r(j6e," (Funnel Transformer model)"),j6e.forEach(t),k7o=i(O),__=n(O,"LI",{});var D6e=s(__);Nie=n(D6e,"STRONG",{});var Ytt=s(Nie);S7o=r(Ytt,"gpt2"),Ytt.forEach(t),R7o=r(D6e," \u2014 "),GN=n(D6e,"A",{href:!0});var Ktt=s(GN);P7o=r(Ktt,"GPT2LMHeadModel"),Ktt.forEach(t),B7o=r(D6e," (OpenAI GPT-2 model)"),D6e.forEach(t),I7o=i(O),b_=n(O,"LI",{});var G6e=s(b_);jie=n(G6e,"STRONG",{});var Ztt=s(jie);q7o=r(Ztt,"ibert"),Ztt.forEach(t),N7o=r(G6e," \u2014 "),ON=n(G6e,"A",{href:!0});var eat=s(ON);j7o=r(eat,"IBertForMaskedLM"),eat.forEach(t),D7o=r(G6e," (I-BERT model)"),G6e.forEach(t),G7o=i(O),v_=n(O,"LI",{});var O6e=s(v_);Die=n(O6e,"STRONG",{});var oat=s(Die);O7o=r(oat,"layoutlm"),oat.forEach(t),V7o=r(O6e," \u2014 "),VN=n(O6e,"A",{href:!0});var rat=s(VN);X7o=r(rat,"LayoutLMForMaskedLM"),rat.forEach(t),z7o=r(O6e," (LayoutLM model)"),O6e.forEach(t),W7o=i(O),F_=n(O,"LI",{});var V6e=s(F_);Gie=n(V6e,"STRONG",{});var tat=s(Gie);Q7o=r(tat,"longformer"),tat.forEach(t),H7o=r(V6e," \u2014 "),XN=n(V6e,"A",{href:!0});var aat=s(XN);U7o=r(aat,"LongformerForMaskedLM"),aat.forEach(t),J7o=r(V6e," (Longformer model)"),V6e.forEach(t),Y7o=i(O),T_=n(O,"LI",{});var X6e=s(T_);Oie=n(X6e,"STRONG",{});var nat=s(Oie);K7o=r(nat,"lxmert"),nat.forEach(t),Z7o=r(X6e," \u2014 "),zN=n(X6e,"A",{href:!0});var sat=s(zN);eMo=r(sat,"LxmertForPreTraining"),sat.forEach(t),oMo=r(X6e," (LXMERT model)"),X6e.forEach(t),rMo=i(O),M_=n(O,"LI",{});var z6e=s(M_);Vie=n(z6e,"STRONG",{});var lat=s(Vie);tMo=r(lat,"megatron-bert"),lat.forEach(t),aMo=r(z6e," \u2014 "),WN=n(z6e,"A",{href:!0});var iat=s(WN);nMo=r(iat,"MegatronBertForPreTraining"),iat.forEach(t),sMo=r(z6e," (MegatronBert model)"),z6e.forEach(t),lMo=i(O),E_=n(O,"LI",{});var W6e=s(E_);Xie=n(W6e,"STRONG",{});var dat=s(Xie);iMo=r(dat,"mobilebert"),dat.forEach(t),dMo=r(W6e," \u2014 "),QN=n(W6e,"A",{href:!0});var cat=s(QN);cMo=r(cat,"MobileBertForPreTraining"),cat.forEach(t),fMo=r(W6e," (MobileBERT model)"),W6e.forEach(t),mMo=i(O),C_=n(O,"LI",{});var Q6e=s(C_);zie=n(Q6e,"STRONG",{});var fat=s(zie);gMo=r(fat,"mpnet"),fat.forEach(t),hMo=r(Q6e," \u2014 "),HN=n(Q6e,"A",{href:!0});var mat=s(HN);pMo=r(mat,"MPNetForMaskedLM"),mat.forEach(t),uMo=r(Q6e," (MPNet model)"),Q6e.forEach(t),_Mo=i(O),w_=n(O,"LI",{});var H6e=s(w_);Wie=n(H6e,"STRONG",{});var gat=s(Wie);bMo=r(gat,"openai-gpt"),gat.forEach(t),vMo=r(H6e," \u2014 "),UN=n(H6e,"A",{href:!0});var hat=s(UN);FMo=r(hat,"OpenAIGPTLMHeadModel"),hat.forEach(t),TMo=r(H6e," (OpenAI GPT model)"),H6e.forEach(t),MMo=i(O),A_=n(O,"LI",{});var U6e=s(A_);Qie=n(U6e,"STRONG",{});var pat=s(Qie);EMo=r(pat,"retribert"),pat.forEach(t),CMo=r(U6e," \u2014 "),JN=n(U6e,"A",{href:!0});var uat=s(JN);wMo=r(uat,"RetriBertModel"),uat.forEach(t),AMo=r(U6e," (RetriBERT model)"),U6e.forEach(t),yMo=i(O),y_=n(O,"LI",{});var J6e=s(y_);Hie=n(J6e,"STRONG",{});var _at=s(Hie);LMo=r(_at,"roberta"),_at.forEach(t),xMo=r(J6e," \u2014 "),YN=n(J6e,"A",{href:!0});var bat=s(YN);$Mo=r(bat,"RobertaForMaskedLM"),bat.forEach(t),kMo=r(J6e," (RoBERTa model)"),J6e.forEach(t),SMo=i(O),L_=n(O,"LI",{});var Y6e=s(L_);Uie=n(Y6e,"STRONG",{});var vat=s(Uie);RMo=r(vat,"splinter"),vat.forEach(t),PMo=r(Y6e," \u2014 "),KN=n(Y6e,"A",{href:!0});var Fat=s(KN);BMo=r(Fat,"SplinterForPreTraining"),Fat.forEach(t),IMo=r(Y6e," (Splinter model)"),Y6e.forEach(t),qMo=i(O),x_=n(O,"LI",{});var K6e=s(x_);Jie=n(K6e,"STRONG",{});var Tat=s(Jie);NMo=r(Tat,"squeezebert"),Tat.forEach(t),jMo=r(K6e," \u2014 "),ZN=n(K6e,"A",{href:!0});var Mat=s(ZN);DMo=r(Mat,"SqueezeBertForMaskedLM"),Mat.forEach(t),GMo=r(K6e," (SqueezeBERT model)"),K6e.forEach(t),OMo=i(O),$_=n(O,"LI",{});var Z6e=s($_);Yie=n(Z6e,"STRONG",{});var Eat=s(Yie);VMo=r(Eat,"t5"),Eat.forEach(t),XMo=r(Z6e," \u2014 "),ej=n(Z6e,"A",{href:!0});var Cat=s(ej);zMo=r(Cat,"T5ForConditionalGeneration"),Cat.forEach(t),WMo=r(Z6e," (T5 model)"),Z6e.forEach(t),QMo=i(O),k_=n(O,"LI",{});var eye=s(k_);Kie=n(eye,"STRONG",{});var wat=s(Kie);HMo=r(wat,"tapas"),wat.forEach(t),UMo=r(eye," \u2014 "),oj=n(eye,"A",{href:!0});var Aat=s(oj);JMo=r(Aat,"TapasForMaskedLM"),Aat.forEach(t),YMo=r(eye," (TAPAS model)"),eye.forEach(t),KMo=i(O),S_=n(O,"LI",{});var oye=s(S_);Zie=n(oye,"STRONG",{});var yat=s(Zie);ZMo=r(yat,"transfo-xl"),yat.forEach(t),e4o=r(oye," \u2014 "),rj=n(oye,"A",{href:!0});var Lat=s(rj);o4o=r(Lat,"TransfoXLLMHeadModel"),Lat.forEach(t),r4o=r(oye," (Transformer-XL model)"),oye.forEach(t),t4o=i(O),R_=n(O,"LI",{});var rye=s(R_);ede=n(rye,"STRONG",{});var xat=s(ede);a4o=r(xat,"unispeech"),xat.forEach(t),n4o=r(rye," \u2014 "),tj=n(rye,"A",{href:!0});var $at=s(tj);s4o=r($at,"UniSpeechForPreTraining"),$at.forEach(t),l4o=r(rye," (UniSpeech model)"),rye.forEach(t),i4o=i(O),P_=n(O,"LI",{});var tye=s(P_);ode=n(tye,"STRONG",{});var kat=s(ode);d4o=r(kat,"unispeech-sat"),kat.forEach(t),c4o=r(tye," \u2014 "),aj=n(tye,"A",{href:!0});var Sat=s(aj);f4o=r(Sat,"UniSpeechSatForPreTraining"),Sat.forEach(t),m4o=r(tye," (UniSpeechSat model)"),tye.forEach(t),g4o=i(O),B_=n(O,"LI",{});var aye=s(B_);rde=n(aye,"STRONG",{});var Rat=s(rde);h4o=r(Rat,"visual_bert"),Rat.forEach(t),p4o=r(aye," \u2014 "),nj=n(aye,"A",{href:!0});var Pat=s(nj);u4o=r(Pat,"VisualBertForPreTraining"),Pat.forEach(t),_4o=r(aye," (VisualBert model)"),aye.forEach(t),b4o=i(O),I_=n(O,"LI",{});var nye=s(I_);tde=n(nye,"STRONG",{});var Bat=s(tde);v4o=r(Bat,"vit_mae"),Bat.forEach(t),F4o=r(nye," \u2014 "),sj=n(nye,"A",{href:!0});var Iat=s(sj);T4o=r(Iat,"ViTMAEForPreTraining"),Iat.forEach(t),M4o=r(nye," (ViTMAE model)"),nye.forEach(t),E4o=i(O),q_=n(O,"LI",{});var sye=s(q_);ade=n(sye,"STRONG",{});var qat=s(ade);C4o=r(qat,"wav2vec2"),qat.forEach(t),w4o=r(sye," \u2014 "),lj=n(sye,"A",{href:!0});var Nat=s(lj);A4o=r(Nat,"Wav2Vec2ForPreTraining"),Nat.forEach(t),y4o=r(sye," (Wav2Vec2 model)"),sye.forEach(t),L4o=i(O),N_=n(O,"LI",{});var lye=s(N_);nde=n(lye,"STRONG",{});var jat=s(nde);x4o=r(jat,"wav2vec2-conformer"),jat.forEach(t),$4o=r(lye," \u2014 "),ij=n(lye,"A",{href:!0});var Dat=s(ij);k4o=r(Dat,"Wav2Vec2ConformerForPreTraining"),Dat.forEach(t),S4o=r(lye," (Wav2Vec2-Conformer model)"),lye.forEach(t),R4o=i(O),j_=n(O,"LI",{});var iye=s(j_);sde=n(iye,"STRONG",{});var Gat=s(sde);P4o=r(Gat,"xlm"),Gat.forEach(t),B4o=r(iye," \u2014 "),dj=n(iye,"A",{href:!0});var Oat=s(dj);I4o=r(Oat,"XLMWithLMHeadModel"),Oat.forEach(t),q4o=r(iye," (XLM model)"),iye.forEach(t),N4o=i(O),D_=n(O,"LI",{});var dye=s(D_);lde=n(dye,"STRONG",{});var Vat=s(lde);j4o=r(Vat,"xlm-roberta"),Vat.forEach(t),D4o=r(dye," \u2014 "),cj=n(dye,"A",{href:!0});var Xat=s(cj);G4o=r(Xat,"XLMRobertaForMaskedLM"),Xat.forEach(t),O4o=r(dye," (XLM-RoBERTa model)"),dye.forEach(t),V4o=i(O),G_=n(O,"LI",{});var cye=s(G_);ide=n(cye,"STRONG",{});var zat=s(ide);X4o=r(zat,"xlm-roberta-xl"),zat.forEach(t),z4o=r(cye," \u2014 "),fj=n(cye,"A",{href:!0});var Wat=s(fj);W4o=r(Wat,"XLMRobertaXLForMaskedLM"),Wat.forEach(t),Q4o=r(cye," (XLM-RoBERTa-XL model)"),cye.forEach(t),H4o=i(O),O_=n(O,"LI",{});var fye=s(O_);dde=n(fye,"STRONG",{});var Qat=s(dde);U4o=r(Qat,"xlnet"),Qat.forEach(t),J4o=r(fye," \u2014 "),mj=n(fye,"A",{href:!0});var Hat=s(mj);Y4o=r(Hat,"XLNetLMHeadModel"),Hat.forEach(t),K4o=r(fye," (XLNet model)"),fye.forEach(t),O.forEach(t),Z4o=i(ra),V_=n(ra,"P",{});var mye=s(V_);eEo=r(mye,"The model is set in evaluation mode by default using "),cde=n(mye,"CODE",{});var Uat=s(cde);oEo=r(Uat,"model.eval()"),Uat.forEach(t),rEo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(mye,"CODE",{});var Jat=s(fde);tEo=r(Jat,"model.train()"),Jat.forEach(t),mye.forEach(t),aEo=i(ra),T(X_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),fNe=i(f),ki=n(f,"H2",{class:!0});var pDe=s(ki);z_=n(pDe,"A",{id:!0,class:!0,href:!0});var Yat=s(z_);mde=n(Yat,"SPAN",{});var Kat=s(mde);T(i6.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),nEo=i(pDe),gde=n(pDe,"SPAN",{});var Zat=s(gde);sEo=r(Zat,"AutoModelForCausalLM"),Zat.forEach(t),pDe.forEach(t),mNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(d6.$$.fragment,Vs),lEo=i(Vs),Si=n(Vs,"P",{});var _Z=s(Si);iEo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gj=n(_Z,"A",{href:!0});var ent=s(gj);dEo=r(ent,"from_pretrained()"),ent.forEach(t),cEo=r(_Z," class method or the "),hj=n(_Z,"A",{href:!0});var ont=s(hj);fEo=r(ont,"from_config()"),ont.forEach(t),mEo=r(_Z,` class
method.`),_Z.forEach(t),gEo=i(Vs),c6=n(Vs,"P",{});var uDe=s(c6);hEo=r(uDe,"This class cannot be instantiated directly using "),hde=n(uDe,"CODE",{});var rnt=s(hde);pEo=r(rnt,"__init__()"),rnt.forEach(t),uEo=r(uDe," (throws an error)."),uDe.forEach(t),_Eo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Pw=s(nt);T(f6.$$.fragment,Pw),bEo=i(Pw),pde=n(Pw,"P",{});var tnt=s(pde);vEo=r(tnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tnt.forEach(t),FEo=i(Pw),Ri=n(Pw,"P",{});var bZ=s(Ri);TEo=r(bZ,`Note:
Loading a model from its configuration file does `),ude=n(bZ,"STRONG",{});var ant=s(ude);MEo=r(ant,"not"),ant.forEach(t),EEo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=n(bZ,"A",{href:!0});var nnt=s(pj);CEo=r(nnt,"from_pretrained()"),nnt.forEach(t),wEo=r(bZ," to load the model weights."),bZ.forEach(t),AEo=i(Pw),T(W_.$$.fragment,Pw),Pw.forEach(t),yEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(m6.$$.fragment,ta),LEo=i(ta),_de=n(ta,"P",{});var snt=s(_de);xEo=r(snt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),snt.forEach(t),$Eo=i(ta),$a=n(ta,"P",{});var Bw=s($a);kEo=r(Bw,"The model class to instantiate is selected based on the "),bde=n(Bw,"CODE",{});var lnt=s(bde);SEo=r(lnt,"model_type"),lnt.forEach(t),REo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),vde=n(Bw,"CODE",{});var int=s(vde);PEo=r(int,"pretrained_model_name_or_path"),int.forEach(t),BEo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(Bw,"CODE",{});var dnt=s(Fde);IEo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),qEo=r(Bw,":"),Bw.forEach(t),NEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Q_=n(Q,"LI",{});var gye=s(Q_);Tde=n(gye,"STRONG",{});var cnt=s(Tde);jEo=r(cnt,"bart"),cnt.forEach(t),DEo=r(gye," \u2014 "),uj=n(gye,"A",{href:!0});var fnt=s(uj);GEo=r(fnt,"BartForCausalLM"),fnt.forEach(t),OEo=r(gye," (BART model)"),gye.forEach(t),VEo=i(Q),H_=n(Q,"LI",{});var hye=s(H_);Mde=n(hye,"STRONG",{});var mnt=s(Mde);XEo=r(mnt,"bert"),mnt.forEach(t),zEo=r(hye," \u2014 "),_j=n(hye,"A",{href:!0});var gnt=s(_j);WEo=r(gnt,"BertLMHeadModel"),gnt.forEach(t),QEo=r(hye," (BERT model)"),hye.forEach(t),HEo=i(Q),U_=n(Q,"LI",{});var pye=s(U_);Ede=n(pye,"STRONG",{});var hnt=s(Ede);UEo=r(hnt,"bert-generation"),hnt.forEach(t),JEo=r(pye," \u2014 "),bj=n(pye,"A",{href:!0});var pnt=s(bj);YEo=r(pnt,"BertGenerationDecoder"),pnt.forEach(t),KEo=r(pye," (Bert Generation model)"),pye.forEach(t),ZEo=i(Q),J_=n(Q,"LI",{});var uye=s(J_);Cde=n(uye,"STRONG",{});var unt=s(Cde);eCo=r(unt,"big_bird"),unt.forEach(t),oCo=r(uye," \u2014 "),vj=n(uye,"A",{href:!0});var _nt=s(vj);rCo=r(_nt,"BigBirdForCausalLM"),_nt.forEach(t),tCo=r(uye," (BigBird model)"),uye.forEach(t),aCo=i(Q),Y_=n(Q,"LI",{});var _ye=s(Y_);wde=n(_ye,"STRONG",{});var bnt=s(wde);nCo=r(bnt,"bigbird_pegasus"),bnt.forEach(t),sCo=r(_ye," \u2014 "),Fj=n(_ye,"A",{href:!0});var vnt=s(Fj);lCo=r(vnt,"BigBirdPegasusForCausalLM"),vnt.forEach(t),iCo=r(_ye," (BigBirdPegasus model)"),_ye.forEach(t),dCo=i(Q),K_=n(Q,"LI",{});var bye=s(K_);Ade=n(bye,"STRONG",{});var Fnt=s(Ade);cCo=r(Fnt,"blenderbot"),Fnt.forEach(t),fCo=r(bye," \u2014 "),Tj=n(bye,"A",{href:!0});var Tnt=s(Tj);mCo=r(Tnt,"BlenderbotForCausalLM"),Tnt.forEach(t),gCo=r(bye," (Blenderbot model)"),bye.forEach(t),hCo=i(Q),Z_=n(Q,"LI",{});var vye=s(Z_);yde=n(vye,"STRONG",{});var Mnt=s(yde);pCo=r(Mnt,"blenderbot-small"),Mnt.forEach(t),uCo=r(vye," \u2014 "),Mj=n(vye,"A",{href:!0});var Ent=s(Mj);_Co=r(Ent,"BlenderbotSmallForCausalLM"),Ent.forEach(t),bCo=r(vye," (BlenderbotSmall model)"),vye.forEach(t),vCo=i(Q),e1=n(Q,"LI",{});var Fye=s(e1);Lde=n(Fye,"STRONG",{});var Cnt=s(Lde);FCo=r(Cnt,"camembert"),Cnt.forEach(t),TCo=r(Fye," \u2014 "),Ej=n(Fye,"A",{href:!0});var wnt=s(Ej);MCo=r(wnt,"CamembertForCausalLM"),wnt.forEach(t),ECo=r(Fye," (CamemBERT model)"),Fye.forEach(t),CCo=i(Q),o1=n(Q,"LI",{});var Tye=s(o1);xde=n(Tye,"STRONG",{});var Ant=s(xde);wCo=r(Ant,"ctrl"),Ant.forEach(t),ACo=r(Tye," \u2014 "),Cj=n(Tye,"A",{href:!0});var ynt=s(Cj);yCo=r(ynt,"CTRLLMHeadModel"),ynt.forEach(t),LCo=r(Tye," (CTRL model)"),Tye.forEach(t),xCo=i(Q),r1=n(Q,"LI",{});var Mye=s(r1);$de=n(Mye,"STRONG",{});var Lnt=s($de);$Co=r(Lnt,"data2vec-text"),Lnt.forEach(t),kCo=r(Mye," \u2014 "),wj=n(Mye,"A",{href:!0});var xnt=s(wj);SCo=r(xnt,"Data2VecTextForCausalLM"),xnt.forEach(t),RCo=r(Mye," (Data2VecText model)"),Mye.forEach(t),PCo=i(Q),t1=n(Q,"LI",{});var Eye=s(t1);kde=n(Eye,"STRONG",{});var $nt=s(kde);BCo=r($nt,"electra"),$nt.forEach(t),ICo=r(Eye," \u2014 "),Aj=n(Eye,"A",{href:!0});var knt=s(Aj);qCo=r(knt,"ElectraForCausalLM"),knt.forEach(t),NCo=r(Eye," (ELECTRA model)"),Eye.forEach(t),jCo=i(Q),a1=n(Q,"LI",{});var Cye=s(a1);Sde=n(Cye,"STRONG",{});var Snt=s(Sde);DCo=r(Snt,"gpt2"),Snt.forEach(t),GCo=r(Cye," \u2014 "),yj=n(Cye,"A",{href:!0});var Rnt=s(yj);OCo=r(Rnt,"GPT2LMHeadModel"),Rnt.forEach(t),VCo=r(Cye," (OpenAI GPT-2 model)"),Cye.forEach(t),XCo=i(Q),n1=n(Q,"LI",{});var wye=s(n1);Rde=n(wye,"STRONG",{});var Pnt=s(Rde);zCo=r(Pnt,"gpt_neo"),Pnt.forEach(t),WCo=r(wye," \u2014 "),Lj=n(wye,"A",{href:!0});var Bnt=s(Lj);QCo=r(Bnt,"GPTNeoForCausalLM"),Bnt.forEach(t),HCo=r(wye," (GPT Neo model)"),wye.forEach(t),UCo=i(Q),s1=n(Q,"LI",{});var Aye=s(s1);Pde=n(Aye,"STRONG",{});var Int=s(Pde);JCo=r(Int,"gptj"),Int.forEach(t),YCo=r(Aye," \u2014 "),xj=n(Aye,"A",{href:!0});var qnt=s(xj);KCo=r(qnt,"GPTJForCausalLM"),qnt.forEach(t),ZCo=r(Aye," (GPT-J model)"),Aye.forEach(t),e5o=i(Q),l1=n(Q,"LI",{});var yye=s(l1);Bde=n(yye,"STRONG",{});var Nnt=s(Bde);o5o=r(Nnt,"marian"),Nnt.forEach(t),r5o=r(yye," \u2014 "),$j=n(yye,"A",{href:!0});var jnt=s($j);t5o=r(jnt,"MarianForCausalLM"),jnt.forEach(t),a5o=r(yye," (Marian model)"),yye.forEach(t),n5o=i(Q),i1=n(Q,"LI",{});var Lye=s(i1);Ide=n(Lye,"STRONG",{});var Dnt=s(Ide);s5o=r(Dnt,"mbart"),Dnt.forEach(t),l5o=r(Lye," \u2014 "),kj=n(Lye,"A",{href:!0});var Gnt=s(kj);i5o=r(Gnt,"MBartForCausalLM"),Gnt.forEach(t),d5o=r(Lye," (mBART model)"),Lye.forEach(t),c5o=i(Q),d1=n(Q,"LI",{});var xye=s(d1);qde=n(xye,"STRONG",{});var Ont=s(qde);f5o=r(Ont,"megatron-bert"),Ont.forEach(t),m5o=r(xye," \u2014 "),Sj=n(xye,"A",{href:!0});var Vnt=s(Sj);g5o=r(Vnt,"MegatronBertForCausalLM"),Vnt.forEach(t),h5o=r(xye," (MegatronBert model)"),xye.forEach(t),p5o=i(Q),c1=n(Q,"LI",{});var $ye=s(c1);Nde=n($ye,"STRONG",{});var Xnt=s(Nde);u5o=r(Xnt,"openai-gpt"),Xnt.forEach(t),_5o=r($ye," \u2014 "),Rj=n($ye,"A",{href:!0});var znt=s(Rj);b5o=r(znt,"OpenAIGPTLMHeadModel"),znt.forEach(t),v5o=r($ye," (OpenAI GPT model)"),$ye.forEach(t),F5o=i(Q),f1=n(Q,"LI",{});var kye=s(f1);jde=n(kye,"STRONG",{});var Wnt=s(jde);T5o=r(Wnt,"opt"),Wnt.forEach(t),M5o=r(kye," \u2014 "),Pj=n(kye,"A",{href:!0});var Qnt=s(Pj);E5o=r(Qnt,"OPTForCausalLM"),Qnt.forEach(t),C5o=r(kye," (OPT model)"),kye.forEach(t),w5o=i(Q),m1=n(Q,"LI",{});var Sye=s(m1);Dde=n(Sye,"STRONG",{});var Hnt=s(Dde);A5o=r(Hnt,"pegasus"),Hnt.forEach(t),y5o=r(Sye," \u2014 "),Bj=n(Sye,"A",{href:!0});var Unt=s(Bj);L5o=r(Unt,"PegasusForCausalLM"),Unt.forEach(t),x5o=r(Sye," (Pegasus model)"),Sye.forEach(t),$5o=i(Q),g1=n(Q,"LI",{});var Rye=s(g1);Gde=n(Rye,"STRONG",{});var Jnt=s(Gde);k5o=r(Jnt,"plbart"),Jnt.forEach(t),S5o=r(Rye," \u2014 "),Ij=n(Rye,"A",{href:!0});var Ynt=s(Ij);R5o=r(Ynt,"PLBartForCausalLM"),Ynt.forEach(t),P5o=r(Rye," (PLBart model)"),Rye.forEach(t),B5o=i(Q),h1=n(Q,"LI",{});var Pye=s(h1);Ode=n(Pye,"STRONG",{});var Knt=s(Ode);I5o=r(Knt,"prophetnet"),Knt.forEach(t),q5o=r(Pye," \u2014 "),qj=n(Pye,"A",{href:!0});var Znt=s(qj);N5o=r(Znt,"ProphetNetForCausalLM"),Znt.forEach(t),j5o=r(Pye," (ProphetNet model)"),Pye.forEach(t),D5o=i(Q),p1=n(Q,"LI",{});var Bye=s(p1);Vde=n(Bye,"STRONG",{});var est=s(Vde);G5o=r(est,"qdqbert"),est.forEach(t),O5o=r(Bye," \u2014 "),Nj=n(Bye,"A",{href:!0});var ost=s(Nj);V5o=r(ost,"QDQBertLMHeadModel"),ost.forEach(t),X5o=r(Bye," (QDQBert model)"),Bye.forEach(t),z5o=i(Q),u1=n(Q,"LI",{});var Iye=s(u1);Xde=n(Iye,"STRONG",{});var rst=s(Xde);W5o=r(rst,"reformer"),rst.forEach(t),Q5o=r(Iye," \u2014 "),jj=n(Iye,"A",{href:!0});var tst=s(jj);H5o=r(tst,"ReformerModelWithLMHead"),tst.forEach(t),U5o=r(Iye," (Reformer model)"),Iye.forEach(t),J5o=i(Q),_1=n(Q,"LI",{});var qye=s(_1);zde=n(qye,"STRONG",{});var ast=s(zde);Y5o=r(ast,"rembert"),ast.forEach(t),K5o=r(qye," \u2014 "),Dj=n(qye,"A",{href:!0});var nst=s(Dj);Z5o=r(nst,"RemBertForCausalLM"),nst.forEach(t),ewo=r(qye," (RemBERT model)"),qye.forEach(t),owo=i(Q),b1=n(Q,"LI",{});var Nye=s(b1);Wde=n(Nye,"STRONG",{});var sst=s(Wde);rwo=r(sst,"roberta"),sst.forEach(t),two=r(Nye," \u2014 "),Gj=n(Nye,"A",{href:!0});var lst=s(Gj);awo=r(lst,"RobertaForCausalLM"),lst.forEach(t),nwo=r(Nye," (RoBERTa model)"),Nye.forEach(t),swo=i(Q),v1=n(Q,"LI",{});var jye=s(v1);Qde=n(jye,"STRONG",{});var ist=s(Qde);lwo=r(ist,"roformer"),ist.forEach(t),iwo=r(jye," \u2014 "),Oj=n(jye,"A",{href:!0});var dst=s(Oj);dwo=r(dst,"RoFormerForCausalLM"),dst.forEach(t),cwo=r(jye," (RoFormer model)"),jye.forEach(t),fwo=i(Q),F1=n(Q,"LI",{});var Dye=s(F1);Hde=n(Dye,"STRONG",{});var cst=s(Hde);mwo=r(cst,"speech_to_text_2"),cst.forEach(t),gwo=r(Dye," \u2014 "),Vj=n(Dye,"A",{href:!0});var fst=s(Vj);hwo=r(fst,"Speech2Text2ForCausalLM"),fst.forEach(t),pwo=r(Dye," (Speech2Text2 model)"),Dye.forEach(t),uwo=i(Q),T1=n(Q,"LI",{});var Gye=s(T1);Ude=n(Gye,"STRONG",{});var mst=s(Ude);_wo=r(mst,"transfo-xl"),mst.forEach(t),bwo=r(Gye," \u2014 "),Xj=n(Gye,"A",{href:!0});var gst=s(Xj);vwo=r(gst,"TransfoXLLMHeadModel"),gst.forEach(t),Fwo=r(Gye," (Transformer-XL model)"),Gye.forEach(t),Two=i(Q),M1=n(Q,"LI",{});var Oye=s(M1);Jde=n(Oye,"STRONG",{});var hst=s(Jde);Mwo=r(hst,"trocr"),hst.forEach(t),Ewo=r(Oye," \u2014 "),zj=n(Oye,"A",{href:!0});var pst=s(zj);Cwo=r(pst,"TrOCRForCausalLM"),pst.forEach(t),wwo=r(Oye," (TrOCR model)"),Oye.forEach(t),Awo=i(Q),E1=n(Q,"LI",{});var Vye=s(E1);Yde=n(Vye,"STRONG",{});var ust=s(Yde);ywo=r(ust,"xglm"),ust.forEach(t),Lwo=r(Vye," \u2014 "),Wj=n(Vye,"A",{href:!0});var _st=s(Wj);xwo=r(_st,"XGLMForCausalLM"),_st.forEach(t),$wo=r(Vye," (XGLM model)"),Vye.forEach(t),kwo=i(Q),C1=n(Q,"LI",{});var Xye=s(C1);Kde=n(Xye,"STRONG",{});var bst=s(Kde);Swo=r(bst,"xlm"),bst.forEach(t),Rwo=r(Xye," \u2014 "),Qj=n(Xye,"A",{href:!0});var vst=s(Qj);Pwo=r(vst,"XLMWithLMHeadModel"),vst.forEach(t),Bwo=r(Xye," (XLM model)"),Xye.forEach(t),Iwo=i(Q),w1=n(Q,"LI",{});var zye=s(w1);Zde=n(zye,"STRONG",{});var Fst=s(Zde);qwo=r(Fst,"xlm-prophetnet"),Fst.forEach(t),Nwo=r(zye," \u2014 "),Hj=n(zye,"A",{href:!0});var Tst=s(Hj);jwo=r(Tst,"XLMProphetNetForCausalLM"),Tst.forEach(t),Dwo=r(zye," (XLMProphetNet model)"),zye.forEach(t),Gwo=i(Q),A1=n(Q,"LI",{});var Wye=s(A1);ece=n(Wye,"STRONG",{});var Mst=s(ece);Owo=r(Mst,"xlm-roberta"),Mst.forEach(t),Vwo=r(Wye," \u2014 "),Uj=n(Wye,"A",{href:!0});var Est=s(Uj);Xwo=r(Est,"XLMRobertaForCausalLM"),Est.forEach(t),zwo=r(Wye," (XLM-RoBERTa model)"),Wye.forEach(t),Wwo=i(Q),y1=n(Q,"LI",{});var Qye=s(y1);oce=n(Qye,"STRONG",{});var Cst=s(oce);Qwo=r(Cst,"xlm-roberta-xl"),Cst.forEach(t),Hwo=r(Qye," \u2014 "),Jj=n(Qye,"A",{href:!0});var wst=s(Jj);Uwo=r(wst,"XLMRobertaXLForCausalLM"),wst.forEach(t),Jwo=r(Qye," (XLM-RoBERTa-XL model)"),Qye.forEach(t),Ywo=i(Q),L1=n(Q,"LI",{});var Hye=s(L1);rce=n(Hye,"STRONG",{});var Ast=s(rce);Kwo=r(Ast,"xlnet"),Ast.forEach(t),Zwo=r(Hye," \u2014 "),Yj=n(Hye,"A",{href:!0});var yst=s(Yj);e0o=r(yst,"XLNetLMHeadModel"),yst.forEach(t),o0o=r(Hye," (XLNet model)"),Hye.forEach(t),Q.forEach(t),r0o=i(ta),x1=n(ta,"P",{});var Uye=s(x1);t0o=r(Uye,"The model is set in evaluation mode by default using "),tce=n(Uye,"CODE",{});var Lst=s(tce);a0o=r(Lst,"model.eval()"),Lst.forEach(t),n0o=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(Uye,"CODE",{});var xst=s(ace);s0o=r(xst,"model.train()"),xst.forEach(t),Uye.forEach(t),l0o=i(ta),T($1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),gNe=i(f),Pi=n(f,"H2",{class:!0});var _De=s(Pi);k1=n(_De,"A",{id:!0,class:!0,href:!0});var $st=s(k1);nce=n($st,"SPAN",{});var kst=s(nce);T(g6.$$.fragment,kst),kst.forEach(t),$st.forEach(t),i0o=i(_De),sce=n(_De,"SPAN",{});var Sst=s(sce);d0o=r(Sst,"AutoModelForMaskedLM"),Sst.forEach(t),_De.forEach(t),hNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(h6.$$.fragment,Xs),c0o=i(Xs),Bi=n(Xs,"P",{});var vZ=s(Bi);f0o=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Kj=n(vZ,"A",{href:!0});var Rst=s(Kj);m0o=r(Rst,"from_pretrained()"),Rst.forEach(t),g0o=r(vZ," class method or the "),Zj=n(vZ,"A",{href:!0});var Pst=s(Zj);h0o=r(Pst,"from_config()"),Pst.forEach(t),p0o=r(vZ,` class
method.`),vZ.forEach(t),u0o=i(Xs),p6=n(Xs,"P",{});var bDe=s(p6);_0o=r(bDe,"This class cannot be instantiated directly using "),lce=n(bDe,"CODE",{});var Bst=s(lce);b0o=r(Bst,"__init__()"),Bst.forEach(t),v0o=r(bDe," (throws an error)."),bDe.forEach(t),F0o=i(Xs),st=n(Xs,"DIV",{class:!0});var Iw=s(st);T(u6.$$.fragment,Iw),T0o=i(Iw),ice=n(Iw,"P",{});var Ist=s(ice);M0o=r(Ist,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ist.forEach(t),E0o=i(Iw),Ii=n(Iw,"P",{});var FZ=s(Ii);C0o=r(FZ,`Note:
Loading a model from its configuration file does `),dce=n(FZ,"STRONG",{});var qst=s(dce);w0o=r(qst,"not"),qst.forEach(t),A0o=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=n(FZ,"A",{href:!0});var Nst=s(eD);y0o=r(Nst,"from_pretrained()"),Nst.forEach(t),L0o=r(FZ," to load the model weights."),FZ.forEach(t),x0o=i(Iw),T(S1.$$.fragment,Iw),Iw.forEach(t),$0o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(_6.$$.fragment,aa),k0o=i(aa),cce=n(aa,"P",{});var jst=s(cce);S0o=r(jst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jst.forEach(t),R0o=i(aa),ka=n(aa,"P",{});var qw=s(ka);P0o=r(qw,"The model class to instantiate is selected based on the "),fce=n(qw,"CODE",{});var Dst=s(fce);B0o=r(Dst,"model_type"),Dst.forEach(t),I0o=r(qw,` property of the config object (either
passed as an argument or loaded from `),mce=n(qw,"CODE",{});var Gst=s(mce);q0o=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),N0o=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(qw,"CODE",{});var Ost=s(gce);j0o=r(Ost,"pretrained_model_name_or_path"),Ost.forEach(t),D0o=r(qw,":"),qw.forEach(t),G0o=i(aa),W=n(aa,"UL",{});var U=s(W);R1=n(U,"LI",{});var Jye=s(R1);hce=n(Jye,"STRONG",{});var Vst=s(hce);O0o=r(Vst,"albert"),Vst.forEach(t),V0o=r(Jye," \u2014 "),oD=n(Jye,"A",{href:!0});var Xst=s(oD);X0o=r(Xst,"AlbertForMaskedLM"),Xst.forEach(t),z0o=r(Jye," (ALBERT model)"),Jye.forEach(t),W0o=i(U),P1=n(U,"LI",{});var Yye=s(P1);pce=n(Yye,"STRONG",{});var zst=s(pce);Q0o=r(zst,"bart"),zst.forEach(t),H0o=r(Yye," \u2014 "),rD=n(Yye,"A",{href:!0});var Wst=s(rD);U0o=r(Wst,"BartForConditionalGeneration"),Wst.forEach(t),J0o=r(Yye," (BART model)"),Yye.forEach(t),Y0o=i(U),B1=n(U,"LI",{});var Kye=s(B1);uce=n(Kye,"STRONG",{});var Qst=s(uce);K0o=r(Qst,"bert"),Qst.forEach(t),Z0o=r(Kye," \u2014 "),tD=n(Kye,"A",{href:!0});var Hst=s(tD);eAo=r(Hst,"BertForMaskedLM"),Hst.forEach(t),oAo=r(Kye," (BERT model)"),Kye.forEach(t),rAo=i(U),I1=n(U,"LI",{});var Zye=s(I1);_ce=n(Zye,"STRONG",{});var Ust=s(_ce);tAo=r(Ust,"big_bird"),Ust.forEach(t),aAo=r(Zye," \u2014 "),aD=n(Zye,"A",{href:!0});var Jst=s(aD);nAo=r(Jst,"BigBirdForMaskedLM"),Jst.forEach(t),sAo=r(Zye," (BigBird model)"),Zye.forEach(t),lAo=i(U),q1=n(U,"LI",{});var eLe=s(q1);bce=n(eLe,"STRONG",{});var Yst=s(bce);iAo=r(Yst,"camembert"),Yst.forEach(t),dAo=r(eLe," \u2014 "),nD=n(eLe,"A",{href:!0});var Kst=s(nD);cAo=r(Kst,"CamembertForMaskedLM"),Kst.forEach(t),fAo=r(eLe," (CamemBERT model)"),eLe.forEach(t),mAo=i(U),N1=n(U,"LI",{});var oLe=s(N1);vce=n(oLe,"STRONG",{});var Zst=s(vce);gAo=r(Zst,"convbert"),Zst.forEach(t),hAo=r(oLe," \u2014 "),sD=n(oLe,"A",{href:!0});var elt=s(sD);pAo=r(elt,"ConvBertForMaskedLM"),elt.forEach(t),uAo=r(oLe," (ConvBERT model)"),oLe.forEach(t),_Ao=i(U),j1=n(U,"LI",{});var rLe=s(j1);Fce=n(rLe,"STRONG",{});var olt=s(Fce);bAo=r(olt,"data2vec-text"),olt.forEach(t),vAo=r(rLe," \u2014 "),lD=n(rLe,"A",{href:!0});var rlt=s(lD);FAo=r(rlt,"Data2VecTextForMaskedLM"),rlt.forEach(t),TAo=r(rLe," (Data2VecText model)"),rLe.forEach(t),MAo=i(U),D1=n(U,"LI",{});var tLe=s(D1);Tce=n(tLe,"STRONG",{});var tlt=s(Tce);EAo=r(tlt,"deberta"),tlt.forEach(t),CAo=r(tLe," \u2014 "),iD=n(tLe,"A",{href:!0});var alt=s(iD);wAo=r(alt,"DebertaForMaskedLM"),alt.forEach(t),AAo=r(tLe," (DeBERTa model)"),tLe.forEach(t),yAo=i(U),G1=n(U,"LI",{});var aLe=s(G1);Mce=n(aLe,"STRONG",{});var nlt=s(Mce);LAo=r(nlt,"deberta-v2"),nlt.forEach(t),xAo=r(aLe," \u2014 "),dD=n(aLe,"A",{href:!0});var slt=s(dD);$Ao=r(slt,"DebertaV2ForMaskedLM"),slt.forEach(t),kAo=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),SAo=i(U),O1=n(U,"LI",{});var nLe=s(O1);Ece=n(nLe,"STRONG",{});var llt=s(Ece);RAo=r(llt,"distilbert"),llt.forEach(t),PAo=r(nLe," \u2014 "),cD=n(nLe,"A",{href:!0});var ilt=s(cD);BAo=r(ilt,"DistilBertForMaskedLM"),ilt.forEach(t),IAo=r(nLe," (DistilBERT model)"),nLe.forEach(t),qAo=i(U),V1=n(U,"LI",{});var sLe=s(V1);Cce=n(sLe,"STRONG",{});var dlt=s(Cce);NAo=r(dlt,"electra"),dlt.forEach(t),jAo=r(sLe," \u2014 "),fD=n(sLe,"A",{href:!0});var clt=s(fD);DAo=r(clt,"ElectraForMaskedLM"),clt.forEach(t),GAo=r(sLe," (ELECTRA model)"),sLe.forEach(t),OAo=i(U),X1=n(U,"LI",{});var lLe=s(X1);wce=n(lLe,"STRONG",{});var flt=s(wce);VAo=r(flt,"flaubert"),flt.forEach(t),XAo=r(lLe," \u2014 "),mD=n(lLe,"A",{href:!0});var mlt=s(mD);zAo=r(mlt,"FlaubertWithLMHeadModel"),mlt.forEach(t),WAo=r(lLe," (FlauBERT model)"),lLe.forEach(t),QAo=i(U),z1=n(U,"LI",{});var iLe=s(z1);Ace=n(iLe,"STRONG",{});var glt=s(Ace);HAo=r(glt,"fnet"),glt.forEach(t),UAo=r(iLe," \u2014 "),gD=n(iLe,"A",{href:!0});var hlt=s(gD);JAo=r(hlt,"FNetForMaskedLM"),hlt.forEach(t),YAo=r(iLe," (FNet model)"),iLe.forEach(t),KAo=i(U),W1=n(U,"LI",{});var dLe=s(W1);yce=n(dLe,"STRONG",{});var plt=s(yce);ZAo=r(plt,"funnel"),plt.forEach(t),e6o=r(dLe," \u2014 "),hD=n(dLe,"A",{href:!0});var ult=s(hD);o6o=r(ult,"FunnelForMaskedLM"),ult.forEach(t),r6o=r(dLe," (Funnel Transformer model)"),dLe.forEach(t),t6o=i(U),Q1=n(U,"LI",{});var cLe=s(Q1);Lce=n(cLe,"STRONG",{});var _lt=s(Lce);a6o=r(_lt,"ibert"),_lt.forEach(t),n6o=r(cLe," \u2014 "),pD=n(cLe,"A",{href:!0});var blt=s(pD);s6o=r(blt,"IBertForMaskedLM"),blt.forEach(t),l6o=r(cLe," (I-BERT model)"),cLe.forEach(t),i6o=i(U),H1=n(U,"LI",{});var fLe=s(H1);xce=n(fLe,"STRONG",{});var vlt=s(xce);d6o=r(vlt,"layoutlm"),vlt.forEach(t),c6o=r(fLe," \u2014 "),uD=n(fLe,"A",{href:!0});var Flt=s(uD);f6o=r(Flt,"LayoutLMForMaskedLM"),Flt.forEach(t),m6o=r(fLe," (LayoutLM model)"),fLe.forEach(t),g6o=i(U),U1=n(U,"LI",{});var mLe=s(U1);$ce=n(mLe,"STRONG",{});var Tlt=s($ce);h6o=r(Tlt,"longformer"),Tlt.forEach(t),p6o=r(mLe," \u2014 "),_D=n(mLe,"A",{href:!0});var Mlt=s(_D);u6o=r(Mlt,"LongformerForMaskedLM"),Mlt.forEach(t),_6o=r(mLe," (Longformer model)"),mLe.forEach(t),b6o=i(U),J1=n(U,"LI",{});var gLe=s(J1);kce=n(gLe,"STRONG",{});var Elt=s(kce);v6o=r(Elt,"mbart"),Elt.forEach(t),F6o=r(gLe," \u2014 "),bD=n(gLe,"A",{href:!0});var Clt=s(bD);T6o=r(Clt,"MBartForConditionalGeneration"),Clt.forEach(t),M6o=r(gLe," (mBART model)"),gLe.forEach(t),E6o=i(U),Y1=n(U,"LI",{});var hLe=s(Y1);Sce=n(hLe,"STRONG",{});var wlt=s(Sce);C6o=r(wlt,"megatron-bert"),wlt.forEach(t),w6o=r(hLe," \u2014 "),vD=n(hLe,"A",{href:!0});var Alt=s(vD);A6o=r(Alt,"MegatronBertForMaskedLM"),Alt.forEach(t),y6o=r(hLe," (MegatronBert model)"),hLe.forEach(t),L6o=i(U),K1=n(U,"LI",{});var pLe=s(K1);Rce=n(pLe,"STRONG",{});var ylt=s(Rce);x6o=r(ylt,"mobilebert"),ylt.forEach(t),$6o=r(pLe," \u2014 "),FD=n(pLe,"A",{href:!0});var Llt=s(FD);k6o=r(Llt,"MobileBertForMaskedLM"),Llt.forEach(t),S6o=r(pLe," (MobileBERT model)"),pLe.forEach(t),R6o=i(U),Z1=n(U,"LI",{});var uLe=s(Z1);Pce=n(uLe,"STRONG",{});var xlt=s(Pce);P6o=r(xlt,"mpnet"),xlt.forEach(t),B6o=r(uLe," \u2014 "),TD=n(uLe,"A",{href:!0});var $lt=s(TD);I6o=r($lt,"MPNetForMaskedLM"),$lt.forEach(t),q6o=r(uLe," (MPNet model)"),uLe.forEach(t),N6o=i(U),e8=n(U,"LI",{});var _Le=s(e8);Bce=n(_Le,"STRONG",{});var klt=s(Bce);j6o=r(klt,"nystromformer"),klt.forEach(t),D6o=r(_Le," \u2014 "),MD=n(_Le,"A",{href:!0});var Slt=s(MD);G6o=r(Slt,"NystromformerForMaskedLM"),Slt.forEach(t),O6o=r(_Le," (Nystromformer model)"),_Le.forEach(t),V6o=i(U),o8=n(U,"LI",{});var bLe=s(o8);Ice=n(bLe,"STRONG",{});var Rlt=s(Ice);X6o=r(Rlt,"perceiver"),Rlt.forEach(t),z6o=r(bLe," \u2014 "),ED=n(bLe,"A",{href:!0});var Plt=s(ED);W6o=r(Plt,"PerceiverForMaskedLM"),Plt.forEach(t),Q6o=r(bLe," (Perceiver model)"),bLe.forEach(t),H6o=i(U),r8=n(U,"LI",{});var vLe=s(r8);qce=n(vLe,"STRONG",{});var Blt=s(qce);U6o=r(Blt,"qdqbert"),Blt.forEach(t),J6o=r(vLe," \u2014 "),CD=n(vLe,"A",{href:!0});var Ilt=s(CD);Y6o=r(Ilt,"QDQBertForMaskedLM"),Ilt.forEach(t),K6o=r(vLe," (QDQBert model)"),vLe.forEach(t),Z6o=i(U),t8=n(U,"LI",{});var FLe=s(t8);Nce=n(FLe,"STRONG",{});var qlt=s(Nce);eyo=r(qlt,"reformer"),qlt.forEach(t),oyo=r(FLe," \u2014 "),wD=n(FLe,"A",{href:!0});var Nlt=s(wD);ryo=r(Nlt,"ReformerForMaskedLM"),Nlt.forEach(t),tyo=r(FLe," (Reformer model)"),FLe.forEach(t),ayo=i(U),a8=n(U,"LI",{});var TLe=s(a8);jce=n(TLe,"STRONG",{});var jlt=s(jce);nyo=r(jlt,"rembert"),jlt.forEach(t),syo=r(TLe," \u2014 "),AD=n(TLe,"A",{href:!0});var Dlt=s(AD);lyo=r(Dlt,"RemBertForMaskedLM"),Dlt.forEach(t),iyo=r(TLe," (RemBERT model)"),TLe.forEach(t),dyo=i(U),n8=n(U,"LI",{});var MLe=s(n8);Dce=n(MLe,"STRONG",{});var Glt=s(Dce);cyo=r(Glt,"roberta"),Glt.forEach(t),fyo=r(MLe," \u2014 "),yD=n(MLe,"A",{href:!0});var Olt=s(yD);myo=r(Olt,"RobertaForMaskedLM"),Olt.forEach(t),gyo=r(MLe," (RoBERTa model)"),MLe.forEach(t),hyo=i(U),s8=n(U,"LI",{});var ELe=s(s8);Gce=n(ELe,"STRONG",{});var Vlt=s(Gce);pyo=r(Vlt,"roformer"),Vlt.forEach(t),uyo=r(ELe," \u2014 "),LD=n(ELe,"A",{href:!0});var Xlt=s(LD);_yo=r(Xlt,"RoFormerForMaskedLM"),Xlt.forEach(t),byo=r(ELe," (RoFormer model)"),ELe.forEach(t),vyo=i(U),l8=n(U,"LI",{});var CLe=s(l8);Oce=n(CLe,"STRONG",{});var zlt=s(Oce);Fyo=r(zlt,"squeezebert"),zlt.forEach(t),Tyo=r(CLe," \u2014 "),xD=n(CLe,"A",{href:!0});var Wlt=s(xD);Myo=r(Wlt,"SqueezeBertForMaskedLM"),Wlt.forEach(t),Eyo=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),Cyo=i(U),i8=n(U,"LI",{});var wLe=s(i8);Vce=n(wLe,"STRONG",{});var Qlt=s(Vce);wyo=r(Qlt,"tapas"),Qlt.forEach(t),Ayo=r(wLe," \u2014 "),$D=n(wLe,"A",{href:!0});var Hlt=s($D);yyo=r(Hlt,"TapasForMaskedLM"),Hlt.forEach(t),Lyo=r(wLe," (TAPAS model)"),wLe.forEach(t),xyo=i(U),d8=n(U,"LI",{});var ALe=s(d8);Xce=n(ALe,"STRONG",{});var Ult=s(Xce);$yo=r(Ult,"wav2vec2"),Ult.forEach(t),kyo=r(ALe," \u2014 "),zce=n(ALe,"CODE",{});var Jlt=s(zce);Syo=r(Jlt,"Wav2Vec2ForMaskedLM"),Jlt.forEach(t),Ryo=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),Pyo=i(U),c8=n(U,"LI",{});var yLe=s(c8);Wce=n(yLe,"STRONG",{});var Ylt=s(Wce);Byo=r(Ylt,"xlm"),Ylt.forEach(t),Iyo=r(yLe," \u2014 "),kD=n(yLe,"A",{href:!0});var Klt=s(kD);qyo=r(Klt,"XLMWithLMHeadModel"),Klt.forEach(t),Nyo=r(yLe," (XLM model)"),yLe.forEach(t),jyo=i(U),f8=n(U,"LI",{});var LLe=s(f8);Qce=n(LLe,"STRONG",{});var Zlt=s(Qce);Dyo=r(Zlt,"xlm-roberta"),Zlt.forEach(t),Gyo=r(LLe," \u2014 "),SD=n(LLe,"A",{href:!0});var eit=s(SD);Oyo=r(eit,"XLMRobertaForMaskedLM"),eit.forEach(t),Vyo=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),Xyo=i(U),m8=n(U,"LI",{});var xLe=s(m8);Hce=n(xLe,"STRONG",{});var oit=s(Hce);zyo=r(oit,"xlm-roberta-xl"),oit.forEach(t),Wyo=r(xLe," \u2014 "),RD=n(xLe,"A",{href:!0});var rit=s(RD);Qyo=r(rit,"XLMRobertaXLForMaskedLM"),rit.forEach(t),Hyo=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),Uyo=i(U),g8=n(U,"LI",{});var $Le=s(g8);Uce=n($Le,"STRONG",{});var tit=s(Uce);Jyo=r(tit,"yoso"),tit.forEach(t),Yyo=r($Le," \u2014 "),PD=n($Le,"A",{href:!0});var ait=s(PD);Kyo=r(ait,"YosoForMaskedLM"),ait.forEach(t),Zyo=r($Le," (YOSO model)"),$Le.forEach(t),U.forEach(t),eLo=i(aa),h8=n(aa,"P",{});var kLe=s(h8);oLo=r(kLe,"The model is set in evaluation mode by default using "),Jce=n(kLe,"CODE",{});var nit=s(Jce);rLo=r(nit,"model.eval()"),nit.forEach(t),tLo=r(kLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(kLe,"CODE",{});var sit=s(Yce);aLo=r(sit,"model.train()"),sit.forEach(t),kLe.forEach(t),nLo=i(aa),T(p8.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),pNe=i(f),qi=n(f,"H2",{class:!0});var vDe=s(qi);u8=n(vDe,"A",{id:!0,class:!0,href:!0});var lit=s(u8);Kce=n(lit,"SPAN",{});var iit=s(Kce);T(b6.$$.fragment,iit),iit.forEach(t),lit.forEach(t),sLo=i(vDe),Zce=n(vDe,"SPAN",{});var dit=s(Zce);lLo=r(dit,"AutoModelForSeq2SeqLM"),dit.forEach(t),vDe.forEach(t),uNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(v6.$$.fragment,zs),iLo=i(zs),Ni=n(zs,"P",{});var TZ=s(Ni);dLo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BD=n(TZ,"A",{href:!0});var cit=s(BD);cLo=r(cit,"from_pretrained()"),cit.forEach(t),fLo=r(TZ," class method or the "),ID=n(TZ,"A",{href:!0});var fit=s(ID);mLo=r(fit,"from_config()"),fit.forEach(t),gLo=r(TZ,` class
method.`),TZ.forEach(t),hLo=i(zs),F6=n(zs,"P",{});var FDe=s(F6);pLo=r(FDe,"This class cannot be instantiated directly using "),efe=n(FDe,"CODE",{});var mit=s(efe);uLo=r(mit,"__init__()"),mit.forEach(t),_Lo=r(FDe," (throws an error)."),FDe.forEach(t),bLo=i(zs),lt=n(zs,"DIV",{class:!0});var Nw=s(lt);T(T6.$$.fragment,Nw),vLo=i(Nw),ofe=n(Nw,"P",{});var git=s(ofe);FLo=r(git,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),git.forEach(t),TLo=i(Nw),ji=n(Nw,"P",{});var MZ=s(ji);MLo=r(MZ,`Note:
Loading a model from its configuration file does `),rfe=n(MZ,"STRONG",{});var hit=s(rfe);ELo=r(hit,"not"),hit.forEach(t),CLo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(MZ,"A",{href:!0});var pit=s(qD);wLo=r(pit,"from_pretrained()"),pit.forEach(t),ALo=r(MZ," to load the model weights."),MZ.forEach(t),yLo=i(Nw),T(_8.$$.fragment,Nw),Nw.forEach(t),LLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(M6.$$.fragment,na),xLo=i(na),tfe=n(na,"P",{});var uit=s(tfe);$Lo=r(uit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uit.forEach(t),kLo=i(na),Sa=n(na,"P",{});var jw=s(Sa);SLo=r(jw,"The model class to instantiate is selected based on the "),afe=n(jw,"CODE",{});var _it=s(afe);RLo=r(_it,"model_type"),_it.forEach(t),PLo=r(jw,` property of the config object (either
passed as an argument or loaded from `),nfe=n(jw,"CODE",{});var bit=s(nfe);BLo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),ILo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(jw,"CODE",{});var vit=s(sfe);qLo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),NLo=r(jw,":"),jw.forEach(t),jLo=i(na),ue=n(na,"UL",{});var ve=s(ue);b8=n(ve,"LI",{});var SLe=s(b8);lfe=n(SLe,"STRONG",{});var Fit=s(lfe);DLo=r(Fit,"bart"),Fit.forEach(t),GLo=r(SLe," \u2014 "),ND=n(SLe,"A",{href:!0});var Tit=s(ND);OLo=r(Tit,"BartForConditionalGeneration"),Tit.forEach(t),VLo=r(SLe," (BART model)"),SLe.forEach(t),XLo=i(ve),v8=n(ve,"LI",{});var RLe=s(v8);ife=n(RLe,"STRONG",{});var Mit=s(ife);zLo=r(Mit,"bigbird_pegasus"),Mit.forEach(t),WLo=r(RLe," \u2014 "),jD=n(RLe,"A",{href:!0});var Eit=s(jD);QLo=r(Eit,"BigBirdPegasusForConditionalGeneration"),Eit.forEach(t),HLo=r(RLe," (BigBirdPegasus model)"),RLe.forEach(t),ULo=i(ve),F8=n(ve,"LI",{});var PLe=s(F8);dfe=n(PLe,"STRONG",{});var Cit=s(dfe);JLo=r(Cit,"blenderbot"),Cit.forEach(t),YLo=r(PLe," \u2014 "),DD=n(PLe,"A",{href:!0});var wit=s(DD);KLo=r(wit,"BlenderbotForConditionalGeneration"),wit.forEach(t),ZLo=r(PLe," (Blenderbot model)"),PLe.forEach(t),e9o=i(ve),T8=n(ve,"LI",{});var BLe=s(T8);cfe=n(BLe,"STRONG",{});var Ait=s(cfe);o9o=r(Ait,"blenderbot-small"),Ait.forEach(t),r9o=r(BLe," \u2014 "),GD=n(BLe,"A",{href:!0});var yit=s(GD);t9o=r(yit,"BlenderbotSmallForConditionalGeneration"),yit.forEach(t),a9o=r(BLe," (BlenderbotSmall model)"),BLe.forEach(t),n9o=i(ve),M8=n(ve,"LI",{});var ILe=s(M8);ffe=n(ILe,"STRONG",{});var Lit=s(ffe);s9o=r(Lit,"encoder-decoder"),Lit.forEach(t),l9o=r(ILe," \u2014 "),OD=n(ILe,"A",{href:!0});var xit=s(OD);i9o=r(xit,"EncoderDecoderModel"),xit.forEach(t),d9o=r(ILe," (Encoder decoder model)"),ILe.forEach(t),c9o=i(ve),E8=n(ve,"LI",{});var qLe=s(E8);mfe=n(qLe,"STRONG",{});var $it=s(mfe);f9o=r($it,"fsmt"),$it.forEach(t),m9o=r(qLe," \u2014 "),VD=n(qLe,"A",{href:!0});var kit=s(VD);g9o=r(kit,"FSMTForConditionalGeneration"),kit.forEach(t),h9o=r(qLe," (FairSeq Machine-Translation model)"),qLe.forEach(t),p9o=i(ve),C8=n(ve,"LI",{});var NLe=s(C8);gfe=n(NLe,"STRONG",{});var Sit=s(gfe);u9o=r(Sit,"led"),Sit.forEach(t),_9o=r(NLe," \u2014 "),XD=n(NLe,"A",{href:!0});var Rit=s(XD);b9o=r(Rit,"LEDForConditionalGeneration"),Rit.forEach(t),v9o=r(NLe," (LED model)"),NLe.forEach(t),F9o=i(ve),w8=n(ve,"LI",{});var jLe=s(w8);hfe=n(jLe,"STRONG",{});var Pit=s(hfe);T9o=r(Pit,"m2m_100"),Pit.forEach(t),M9o=r(jLe," \u2014 "),zD=n(jLe,"A",{href:!0});var Bit=s(zD);E9o=r(Bit,"M2M100ForConditionalGeneration"),Bit.forEach(t),C9o=r(jLe," (M2M100 model)"),jLe.forEach(t),w9o=i(ve),A8=n(ve,"LI",{});var DLe=s(A8);pfe=n(DLe,"STRONG",{});var Iit=s(pfe);A9o=r(Iit,"marian"),Iit.forEach(t),y9o=r(DLe," \u2014 "),WD=n(DLe,"A",{href:!0});var qit=s(WD);L9o=r(qit,"MarianMTModel"),qit.forEach(t),x9o=r(DLe," (Marian model)"),DLe.forEach(t),$9o=i(ve),y8=n(ve,"LI",{});var GLe=s(y8);ufe=n(GLe,"STRONG",{});var Nit=s(ufe);k9o=r(Nit,"mbart"),Nit.forEach(t),S9o=r(GLe," \u2014 "),QD=n(GLe,"A",{href:!0});var jit=s(QD);R9o=r(jit,"MBartForConditionalGeneration"),jit.forEach(t),P9o=r(GLe," (mBART model)"),GLe.forEach(t),B9o=i(ve),L8=n(ve,"LI",{});var OLe=s(L8);_fe=n(OLe,"STRONG",{});var Dit=s(_fe);I9o=r(Dit,"mt5"),Dit.forEach(t),q9o=r(OLe," \u2014 "),HD=n(OLe,"A",{href:!0});var Git=s(HD);N9o=r(Git,"MT5ForConditionalGeneration"),Git.forEach(t),j9o=r(OLe," (mT5 model)"),OLe.forEach(t),D9o=i(ve),x8=n(ve,"LI",{});var VLe=s(x8);bfe=n(VLe,"STRONG",{});var Oit=s(bfe);G9o=r(Oit,"pegasus"),Oit.forEach(t),O9o=r(VLe," \u2014 "),UD=n(VLe,"A",{href:!0});var Vit=s(UD);V9o=r(Vit,"PegasusForConditionalGeneration"),Vit.forEach(t),X9o=r(VLe," (Pegasus model)"),VLe.forEach(t),z9o=i(ve),$8=n(ve,"LI",{});var XLe=s($8);vfe=n(XLe,"STRONG",{});var Xit=s(vfe);W9o=r(Xit,"plbart"),Xit.forEach(t),Q9o=r(XLe," \u2014 "),JD=n(XLe,"A",{href:!0});var zit=s(JD);H9o=r(zit,"PLBartForConditionalGeneration"),zit.forEach(t),U9o=r(XLe," (PLBart model)"),XLe.forEach(t),J9o=i(ve),k8=n(ve,"LI",{});var zLe=s(k8);Ffe=n(zLe,"STRONG",{});var Wit=s(Ffe);Y9o=r(Wit,"prophetnet"),Wit.forEach(t),K9o=r(zLe," \u2014 "),YD=n(zLe,"A",{href:!0});var Qit=s(YD);Z9o=r(Qit,"ProphetNetForConditionalGeneration"),Qit.forEach(t),exo=r(zLe," (ProphetNet model)"),zLe.forEach(t),oxo=i(ve),S8=n(ve,"LI",{});var WLe=s(S8);Tfe=n(WLe,"STRONG",{});var Hit=s(Tfe);rxo=r(Hit,"t5"),Hit.forEach(t),txo=r(WLe," \u2014 "),KD=n(WLe,"A",{href:!0});var Uit=s(KD);axo=r(Uit,"T5ForConditionalGeneration"),Uit.forEach(t),nxo=r(WLe," (T5 model)"),WLe.forEach(t),sxo=i(ve),R8=n(ve,"LI",{});var QLe=s(R8);Mfe=n(QLe,"STRONG",{});var Jit=s(Mfe);lxo=r(Jit,"xlm-prophetnet"),Jit.forEach(t),ixo=r(QLe," \u2014 "),ZD=n(QLe,"A",{href:!0});var Yit=s(ZD);dxo=r(Yit,"XLMProphetNetForConditionalGeneration"),Yit.forEach(t),cxo=r(QLe," (XLMProphetNet model)"),QLe.forEach(t),ve.forEach(t),fxo=i(na),P8=n(na,"P",{});var HLe=s(P8);mxo=r(HLe,"The model is set in evaluation mode by default using "),Efe=n(HLe,"CODE",{});var Kit=s(Efe);gxo=r(Kit,"model.eval()"),Kit.forEach(t),hxo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(HLe,"CODE",{});var Zit=s(Cfe);pxo=r(Zit,"model.train()"),Zit.forEach(t),HLe.forEach(t),uxo=i(na),T(B8.$$.fragment,na),na.forEach(t),zs.forEach(t),_Ne=i(f),Di=n(f,"H2",{class:!0});var TDe=s(Di);I8=n(TDe,"A",{id:!0,class:!0,href:!0});var edt=s(I8);wfe=n(edt,"SPAN",{});var odt=s(wfe);T(E6.$$.fragment,odt),odt.forEach(t),edt.forEach(t),_xo=i(TDe),Afe=n(TDe,"SPAN",{});var rdt=s(Afe);bxo=r(rdt,"AutoModelForSequenceClassification"),rdt.forEach(t),TDe.forEach(t),bNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(C6.$$.fragment,Ws),vxo=i(Ws),Gi=n(Ws,"P",{});var EZ=s(Gi);Fxo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eG=n(EZ,"A",{href:!0});var tdt=s(eG);Txo=r(tdt,"from_pretrained()"),tdt.forEach(t),Mxo=r(EZ," class method or the "),oG=n(EZ,"A",{href:!0});var adt=s(oG);Exo=r(adt,"from_config()"),adt.forEach(t),Cxo=r(EZ,` class
method.`),EZ.forEach(t),wxo=i(Ws),w6=n(Ws,"P",{});var MDe=s(w6);Axo=r(MDe,"This class cannot be instantiated directly using "),yfe=n(MDe,"CODE",{});var ndt=s(yfe);yxo=r(ndt,"__init__()"),ndt.forEach(t),Lxo=r(MDe," (throws an error)."),MDe.forEach(t),xxo=i(Ws),it=n(Ws,"DIV",{class:!0});var Dw=s(it);T(A6.$$.fragment,Dw),$xo=i(Dw),Lfe=n(Dw,"P",{});var sdt=s(Lfe);kxo=r(sdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sdt.forEach(t),Sxo=i(Dw),Oi=n(Dw,"P",{});var CZ=s(Oi);Rxo=r(CZ,`Note:
Loading a model from its configuration file does `),xfe=n(CZ,"STRONG",{});var ldt=s(xfe);Pxo=r(ldt,"not"),ldt.forEach(t),Bxo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(CZ,"A",{href:!0});var idt=s(rG);Ixo=r(idt,"from_pretrained()"),idt.forEach(t),qxo=r(CZ," to load the model weights."),CZ.forEach(t),Nxo=i(Dw),T(q8.$$.fragment,Dw),Dw.forEach(t),jxo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(y6.$$.fragment,sa),Dxo=i(sa),$fe=n(sa,"P",{});var ddt=s($fe);Gxo=r(ddt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ddt.forEach(t),Oxo=i(sa),Ra=n(sa,"P",{});var Gw=s(Ra);Vxo=r(Gw,"The model class to instantiate is selected based on the "),kfe=n(Gw,"CODE",{});var cdt=s(kfe);Xxo=r(cdt,"model_type"),cdt.forEach(t),zxo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(Gw,"CODE",{});var fdt=s(Sfe);Wxo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),Qxo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(Gw,"CODE",{});var mdt=s(Rfe);Hxo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),Uxo=r(Gw,":"),Gw.forEach(t),Jxo=i(sa),q=n(sa,"UL",{});var j=s(q);N8=n(j,"LI",{});var ULe=s(N8);Pfe=n(ULe,"STRONG",{});var gdt=s(Pfe);Yxo=r(gdt,"albert"),gdt.forEach(t),Kxo=r(ULe," \u2014 "),tG=n(ULe,"A",{href:!0});var hdt=s(tG);Zxo=r(hdt,"AlbertForSequenceClassification"),hdt.forEach(t),e$o=r(ULe," (ALBERT model)"),ULe.forEach(t),o$o=i(j),j8=n(j,"LI",{});var JLe=s(j8);Bfe=n(JLe,"STRONG",{});var pdt=s(Bfe);r$o=r(pdt,"bart"),pdt.forEach(t),t$o=r(JLe," \u2014 "),aG=n(JLe,"A",{href:!0});var udt=s(aG);a$o=r(udt,"BartForSequenceClassification"),udt.forEach(t),n$o=r(JLe," (BART model)"),JLe.forEach(t),s$o=i(j),D8=n(j,"LI",{});var YLe=s(D8);Ife=n(YLe,"STRONG",{});var _dt=s(Ife);l$o=r(_dt,"bert"),_dt.forEach(t),i$o=r(YLe," \u2014 "),nG=n(YLe,"A",{href:!0});var bdt=s(nG);d$o=r(bdt,"BertForSequenceClassification"),bdt.forEach(t),c$o=r(YLe," (BERT model)"),YLe.forEach(t),f$o=i(j),G8=n(j,"LI",{});var KLe=s(G8);qfe=n(KLe,"STRONG",{});var vdt=s(qfe);m$o=r(vdt,"big_bird"),vdt.forEach(t),g$o=r(KLe," \u2014 "),sG=n(KLe,"A",{href:!0});var Fdt=s(sG);h$o=r(Fdt,"BigBirdForSequenceClassification"),Fdt.forEach(t),p$o=r(KLe," (BigBird model)"),KLe.forEach(t),u$o=i(j),O8=n(j,"LI",{});var ZLe=s(O8);Nfe=n(ZLe,"STRONG",{});var Tdt=s(Nfe);_$o=r(Tdt,"bigbird_pegasus"),Tdt.forEach(t),b$o=r(ZLe," \u2014 "),lG=n(ZLe,"A",{href:!0});var Mdt=s(lG);v$o=r(Mdt,"BigBirdPegasusForSequenceClassification"),Mdt.forEach(t),F$o=r(ZLe," (BigBirdPegasus model)"),ZLe.forEach(t),T$o=i(j),V8=n(j,"LI",{});var e9e=s(V8);jfe=n(e9e,"STRONG",{});var Edt=s(jfe);M$o=r(Edt,"camembert"),Edt.forEach(t),E$o=r(e9e," \u2014 "),iG=n(e9e,"A",{href:!0});var Cdt=s(iG);C$o=r(Cdt,"CamembertForSequenceClassification"),Cdt.forEach(t),w$o=r(e9e," (CamemBERT model)"),e9e.forEach(t),A$o=i(j),X8=n(j,"LI",{});var o9e=s(X8);Dfe=n(o9e,"STRONG",{});var wdt=s(Dfe);y$o=r(wdt,"canine"),wdt.forEach(t),L$o=r(o9e," \u2014 "),dG=n(o9e,"A",{href:!0});var Adt=s(dG);x$o=r(Adt,"CanineForSequenceClassification"),Adt.forEach(t),$$o=r(o9e," (Canine model)"),o9e.forEach(t),k$o=i(j),z8=n(j,"LI",{});var r9e=s(z8);Gfe=n(r9e,"STRONG",{});var ydt=s(Gfe);S$o=r(ydt,"convbert"),ydt.forEach(t),R$o=r(r9e," \u2014 "),cG=n(r9e,"A",{href:!0});var Ldt=s(cG);P$o=r(Ldt,"ConvBertForSequenceClassification"),Ldt.forEach(t),B$o=r(r9e," (ConvBERT model)"),r9e.forEach(t),I$o=i(j),W8=n(j,"LI",{});var t9e=s(W8);Ofe=n(t9e,"STRONG",{});var xdt=s(Ofe);q$o=r(xdt,"ctrl"),xdt.forEach(t),N$o=r(t9e," \u2014 "),fG=n(t9e,"A",{href:!0});var $dt=s(fG);j$o=r($dt,"CTRLForSequenceClassification"),$dt.forEach(t),D$o=r(t9e," (CTRL model)"),t9e.forEach(t),G$o=i(j),Q8=n(j,"LI",{});var a9e=s(Q8);Vfe=n(a9e,"STRONG",{});var kdt=s(Vfe);O$o=r(kdt,"data2vec-text"),kdt.forEach(t),V$o=r(a9e," \u2014 "),mG=n(a9e,"A",{href:!0});var Sdt=s(mG);X$o=r(Sdt,"Data2VecTextForSequenceClassification"),Sdt.forEach(t),z$o=r(a9e," (Data2VecText model)"),a9e.forEach(t),W$o=i(j),H8=n(j,"LI",{});var n9e=s(H8);Xfe=n(n9e,"STRONG",{});var Rdt=s(Xfe);Q$o=r(Rdt,"deberta"),Rdt.forEach(t),H$o=r(n9e," \u2014 "),gG=n(n9e,"A",{href:!0});var Pdt=s(gG);U$o=r(Pdt,"DebertaForSequenceClassification"),Pdt.forEach(t),J$o=r(n9e," (DeBERTa model)"),n9e.forEach(t),Y$o=i(j),U8=n(j,"LI",{});var s9e=s(U8);zfe=n(s9e,"STRONG",{});var Bdt=s(zfe);K$o=r(Bdt,"deberta-v2"),Bdt.forEach(t),Z$o=r(s9e," \u2014 "),hG=n(s9e,"A",{href:!0});var Idt=s(hG);eko=r(Idt,"DebertaV2ForSequenceClassification"),Idt.forEach(t),oko=r(s9e," (DeBERTa-v2 model)"),s9e.forEach(t),rko=i(j),J8=n(j,"LI",{});var l9e=s(J8);Wfe=n(l9e,"STRONG",{});var qdt=s(Wfe);tko=r(qdt,"distilbert"),qdt.forEach(t),ako=r(l9e," \u2014 "),pG=n(l9e,"A",{href:!0});var Ndt=s(pG);nko=r(Ndt,"DistilBertForSequenceClassification"),Ndt.forEach(t),sko=r(l9e," (DistilBERT model)"),l9e.forEach(t),lko=i(j),Y8=n(j,"LI",{});var i9e=s(Y8);Qfe=n(i9e,"STRONG",{});var jdt=s(Qfe);iko=r(jdt,"electra"),jdt.forEach(t),dko=r(i9e," \u2014 "),uG=n(i9e,"A",{href:!0});var Ddt=s(uG);cko=r(Ddt,"ElectraForSequenceClassification"),Ddt.forEach(t),fko=r(i9e," (ELECTRA model)"),i9e.forEach(t),mko=i(j),K8=n(j,"LI",{});var d9e=s(K8);Hfe=n(d9e,"STRONG",{});var Gdt=s(Hfe);gko=r(Gdt,"flaubert"),Gdt.forEach(t),hko=r(d9e," \u2014 "),_G=n(d9e,"A",{href:!0});var Odt=s(_G);pko=r(Odt,"FlaubertForSequenceClassification"),Odt.forEach(t),uko=r(d9e," (FlauBERT model)"),d9e.forEach(t),_ko=i(j),Z8=n(j,"LI",{});var c9e=s(Z8);Ufe=n(c9e,"STRONG",{});var Vdt=s(Ufe);bko=r(Vdt,"fnet"),Vdt.forEach(t),vko=r(c9e," \u2014 "),bG=n(c9e,"A",{href:!0});var Xdt=s(bG);Fko=r(Xdt,"FNetForSequenceClassification"),Xdt.forEach(t),Tko=r(c9e," (FNet model)"),c9e.forEach(t),Mko=i(j),eb=n(j,"LI",{});var f9e=s(eb);Jfe=n(f9e,"STRONG",{});var zdt=s(Jfe);Eko=r(zdt,"funnel"),zdt.forEach(t),Cko=r(f9e," \u2014 "),vG=n(f9e,"A",{href:!0});var Wdt=s(vG);wko=r(Wdt,"FunnelForSequenceClassification"),Wdt.forEach(t),Ako=r(f9e," (Funnel Transformer model)"),f9e.forEach(t),yko=i(j),ob=n(j,"LI",{});var m9e=s(ob);Yfe=n(m9e,"STRONG",{});var Qdt=s(Yfe);Lko=r(Qdt,"gpt2"),Qdt.forEach(t),xko=r(m9e," \u2014 "),FG=n(m9e,"A",{href:!0});var Hdt=s(FG);$ko=r(Hdt,"GPT2ForSequenceClassification"),Hdt.forEach(t),kko=r(m9e," (OpenAI GPT-2 model)"),m9e.forEach(t),Sko=i(j),rb=n(j,"LI",{});var g9e=s(rb);Kfe=n(g9e,"STRONG",{});var Udt=s(Kfe);Rko=r(Udt,"gpt_neo"),Udt.forEach(t),Pko=r(g9e," \u2014 "),TG=n(g9e,"A",{href:!0});var Jdt=s(TG);Bko=r(Jdt,"GPTNeoForSequenceClassification"),Jdt.forEach(t),Iko=r(g9e," (GPT Neo model)"),g9e.forEach(t),qko=i(j),tb=n(j,"LI",{});var h9e=s(tb);Zfe=n(h9e,"STRONG",{});var Ydt=s(Zfe);Nko=r(Ydt,"gptj"),Ydt.forEach(t),jko=r(h9e," \u2014 "),MG=n(h9e,"A",{href:!0});var Kdt=s(MG);Dko=r(Kdt,"GPTJForSequenceClassification"),Kdt.forEach(t),Gko=r(h9e," (GPT-J model)"),h9e.forEach(t),Oko=i(j),ab=n(j,"LI",{});var p9e=s(ab);eme=n(p9e,"STRONG",{});var Zdt=s(eme);Vko=r(Zdt,"ibert"),Zdt.forEach(t),Xko=r(p9e," \u2014 "),EG=n(p9e,"A",{href:!0});var ect=s(EG);zko=r(ect,"IBertForSequenceClassification"),ect.forEach(t),Wko=r(p9e," (I-BERT model)"),p9e.forEach(t),Qko=i(j),nb=n(j,"LI",{});var u9e=s(nb);ome=n(u9e,"STRONG",{});var oct=s(ome);Hko=r(oct,"layoutlm"),oct.forEach(t),Uko=r(u9e," \u2014 "),CG=n(u9e,"A",{href:!0});var rct=s(CG);Jko=r(rct,"LayoutLMForSequenceClassification"),rct.forEach(t),Yko=r(u9e," (LayoutLM model)"),u9e.forEach(t),Kko=i(j),sb=n(j,"LI",{});var _9e=s(sb);rme=n(_9e,"STRONG",{});var tct=s(rme);Zko=r(tct,"layoutlmv2"),tct.forEach(t),eSo=r(_9e," \u2014 "),wG=n(_9e,"A",{href:!0});var act=s(wG);oSo=r(act,"LayoutLMv2ForSequenceClassification"),act.forEach(t),rSo=r(_9e," (LayoutLMv2 model)"),_9e.forEach(t),tSo=i(j),lb=n(j,"LI",{});var b9e=s(lb);tme=n(b9e,"STRONG",{});var nct=s(tme);aSo=r(nct,"layoutlmv3"),nct.forEach(t),nSo=r(b9e," \u2014 "),AG=n(b9e,"A",{href:!0});var sct=s(AG);sSo=r(sct,"LayoutLMv3ForSequenceClassification"),sct.forEach(t),lSo=r(b9e," (LayoutLMv3 model)"),b9e.forEach(t),iSo=i(j),ib=n(j,"LI",{});var v9e=s(ib);ame=n(v9e,"STRONG",{});var lct=s(ame);dSo=r(lct,"led"),lct.forEach(t),cSo=r(v9e," \u2014 "),yG=n(v9e,"A",{href:!0});var ict=s(yG);fSo=r(ict,"LEDForSequenceClassification"),ict.forEach(t),mSo=r(v9e," (LED model)"),v9e.forEach(t),gSo=i(j),db=n(j,"LI",{});var F9e=s(db);nme=n(F9e,"STRONG",{});var dct=s(nme);hSo=r(dct,"longformer"),dct.forEach(t),pSo=r(F9e," \u2014 "),LG=n(F9e,"A",{href:!0});var cct=s(LG);uSo=r(cct,"LongformerForSequenceClassification"),cct.forEach(t),_So=r(F9e," (Longformer model)"),F9e.forEach(t),bSo=i(j),cb=n(j,"LI",{});var T9e=s(cb);sme=n(T9e,"STRONG",{});var fct=s(sme);vSo=r(fct,"mbart"),fct.forEach(t),FSo=r(T9e," \u2014 "),xG=n(T9e,"A",{href:!0});var mct=s(xG);TSo=r(mct,"MBartForSequenceClassification"),mct.forEach(t),MSo=r(T9e," (mBART model)"),T9e.forEach(t),ESo=i(j),fb=n(j,"LI",{});var M9e=s(fb);lme=n(M9e,"STRONG",{});var gct=s(lme);CSo=r(gct,"megatron-bert"),gct.forEach(t),wSo=r(M9e," \u2014 "),$G=n(M9e,"A",{href:!0});var hct=s($G);ASo=r(hct,"MegatronBertForSequenceClassification"),hct.forEach(t),ySo=r(M9e," (MegatronBert model)"),M9e.forEach(t),LSo=i(j),mb=n(j,"LI",{});var E9e=s(mb);ime=n(E9e,"STRONG",{});var pct=s(ime);xSo=r(pct,"mobilebert"),pct.forEach(t),$So=r(E9e," \u2014 "),kG=n(E9e,"A",{href:!0});var uct=s(kG);kSo=r(uct,"MobileBertForSequenceClassification"),uct.forEach(t),SSo=r(E9e," (MobileBERT model)"),E9e.forEach(t),RSo=i(j),gb=n(j,"LI",{});var C9e=s(gb);dme=n(C9e,"STRONG",{});var _ct=s(dme);PSo=r(_ct,"mpnet"),_ct.forEach(t),BSo=r(C9e," \u2014 "),SG=n(C9e,"A",{href:!0});var bct=s(SG);ISo=r(bct,"MPNetForSequenceClassification"),bct.forEach(t),qSo=r(C9e," (MPNet model)"),C9e.forEach(t),NSo=i(j),hb=n(j,"LI",{});var w9e=s(hb);cme=n(w9e,"STRONG",{});var vct=s(cme);jSo=r(vct,"nystromformer"),vct.forEach(t),DSo=r(w9e," \u2014 "),RG=n(w9e,"A",{href:!0});var Fct=s(RG);GSo=r(Fct,"NystromformerForSequenceClassification"),Fct.forEach(t),OSo=r(w9e," (Nystromformer model)"),w9e.forEach(t),VSo=i(j),pb=n(j,"LI",{});var A9e=s(pb);fme=n(A9e,"STRONG",{});var Tct=s(fme);XSo=r(Tct,"openai-gpt"),Tct.forEach(t),zSo=r(A9e," \u2014 "),PG=n(A9e,"A",{href:!0});var Mct=s(PG);WSo=r(Mct,"OpenAIGPTForSequenceClassification"),Mct.forEach(t),QSo=r(A9e," (OpenAI GPT model)"),A9e.forEach(t),HSo=i(j),ub=n(j,"LI",{});var y9e=s(ub);mme=n(y9e,"STRONG",{});var Ect=s(mme);USo=r(Ect,"perceiver"),Ect.forEach(t),JSo=r(y9e," \u2014 "),BG=n(y9e,"A",{href:!0});var Cct=s(BG);YSo=r(Cct,"PerceiverForSequenceClassification"),Cct.forEach(t),KSo=r(y9e," (Perceiver model)"),y9e.forEach(t),ZSo=i(j),_b=n(j,"LI",{});var L9e=s(_b);gme=n(L9e,"STRONG",{});var wct=s(gme);eRo=r(wct,"plbart"),wct.forEach(t),oRo=r(L9e," \u2014 "),IG=n(L9e,"A",{href:!0});var Act=s(IG);rRo=r(Act,"PLBartForSequenceClassification"),Act.forEach(t),tRo=r(L9e," (PLBart model)"),L9e.forEach(t),aRo=i(j),bb=n(j,"LI",{});var x9e=s(bb);hme=n(x9e,"STRONG",{});var yct=s(hme);nRo=r(yct,"qdqbert"),yct.forEach(t),sRo=r(x9e," \u2014 "),qG=n(x9e,"A",{href:!0});var Lct=s(qG);lRo=r(Lct,"QDQBertForSequenceClassification"),Lct.forEach(t),iRo=r(x9e," (QDQBert model)"),x9e.forEach(t),dRo=i(j),vb=n(j,"LI",{});var $9e=s(vb);pme=n($9e,"STRONG",{});var xct=s(pme);cRo=r(xct,"reformer"),xct.forEach(t),fRo=r($9e," \u2014 "),NG=n($9e,"A",{href:!0});var $ct=s(NG);mRo=r($ct,"ReformerForSequenceClassification"),$ct.forEach(t),gRo=r($9e," (Reformer model)"),$9e.forEach(t),hRo=i(j),Fb=n(j,"LI",{});var k9e=s(Fb);ume=n(k9e,"STRONG",{});var kct=s(ume);pRo=r(kct,"rembert"),kct.forEach(t),uRo=r(k9e," \u2014 "),jG=n(k9e,"A",{href:!0});var Sct=s(jG);_Ro=r(Sct,"RemBertForSequenceClassification"),Sct.forEach(t),bRo=r(k9e," (RemBERT model)"),k9e.forEach(t),vRo=i(j),Tb=n(j,"LI",{});var S9e=s(Tb);_me=n(S9e,"STRONG",{});var Rct=s(_me);FRo=r(Rct,"roberta"),Rct.forEach(t),TRo=r(S9e," \u2014 "),DG=n(S9e,"A",{href:!0});var Pct=s(DG);MRo=r(Pct,"RobertaForSequenceClassification"),Pct.forEach(t),ERo=r(S9e," (RoBERTa model)"),S9e.forEach(t),CRo=i(j),Mb=n(j,"LI",{});var R9e=s(Mb);bme=n(R9e,"STRONG",{});var Bct=s(bme);wRo=r(Bct,"roformer"),Bct.forEach(t),ARo=r(R9e," \u2014 "),GG=n(R9e,"A",{href:!0});var Ict=s(GG);yRo=r(Ict,"RoFormerForSequenceClassification"),Ict.forEach(t),LRo=r(R9e," (RoFormer model)"),R9e.forEach(t),xRo=i(j),Eb=n(j,"LI",{});var P9e=s(Eb);vme=n(P9e,"STRONG",{});var qct=s(vme);$Ro=r(qct,"squeezebert"),qct.forEach(t),kRo=r(P9e," \u2014 "),OG=n(P9e,"A",{href:!0});var Nct=s(OG);SRo=r(Nct,"SqueezeBertForSequenceClassification"),Nct.forEach(t),RRo=r(P9e," (SqueezeBERT model)"),P9e.forEach(t),PRo=i(j),Cb=n(j,"LI",{});var B9e=s(Cb);Fme=n(B9e,"STRONG",{});var jct=s(Fme);BRo=r(jct,"tapas"),jct.forEach(t),IRo=r(B9e," \u2014 "),VG=n(B9e,"A",{href:!0});var Dct=s(VG);qRo=r(Dct,"TapasForSequenceClassification"),Dct.forEach(t),NRo=r(B9e," (TAPAS model)"),B9e.forEach(t),jRo=i(j),wb=n(j,"LI",{});var I9e=s(wb);Tme=n(I9e,"STRONG",{});var Gct=s(Tme);DRo=r(Gct,"transfo-xl"),Gct.forEach(t),GRo=r(I9e," \u2014 "),XG=n(I9e,"A",{href:!0});var Oct=s(XG);ORo=r(Oct,"TransfoXLForSequenceClassification"),Oct.forEach(t),VRo=r(I9e," (Transformer-XL model)"),I9e.forEach(t),XRo=i(j),Ab=n(j,"LI",{});var q9e=s(Ab);Mme=n(q9e,"STRONG",{});var Vct=s(Mme);zRo=r(Vct,"xlm"),Vct.forEach(t),WRo=r(q9e," \u2014 "),zG=n(q9e,"A",{href:!0});var Xct=s(zG);QRo=r(Xct,"XLMForSequenceClassification"),Xct.forEach(t),HRo=r(q9e," (XLM model)"),q9e.forEach(t),URo=i(j),yb=n(j,"LI",{});var N9e=s(yb);Eme=n(N9e,"STRONG",{});var zct=s(Eme);JRo=r(zct,"xlm-roberta"),zct.forEach(t),YRo=r(N9e," \u2014 "),WG=n(N9e,"A",{href:!0});var Wct=s(WG);KRo=r(Wct,"XLMRobertaForSequenceClassification"),Wct.forEach(t),ZRo=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),ePo=i(j),Lb=n(j,"LI",{});var j9e=s(Lb);Cme=n(j9e,"STRONG",{});var Qct=s(Cme);oPo=r(Qct,"xlm-roberta-xl"),Qct.forEach(t),rPo=r(j9e," \u2014 "),QG=n(j9e,"A",{href:!0});var Hct=s(QG);tPo=r(Hct,"XLMRobertaXLForSequenceClassification"),Hct.forEach(t),aPo=r(j9e," (XLM-RoBERTa-XL model)"),j9e.forEach(t),nPo=i(j),xb=n(j,"LI",{});var D9e=s(xb);wme=n(D9e,"STRONG",{});var Uct=s(wme);sPo=r(Uct,"xlnet"),Uct.forEach(t),lPo=r(D9e," \u2014 "),HG=n(D9e,"A",{href:!0});var Jct=s(HG);iPo=r(Jct,"XLNetForSequenceClassification"),Jct.forEach(t),dPo=r(D9e," (XLNet model)"),D9e.forEach(t),cPo=i(j),$b=n(j,"LI",{});var G9e=s($b);Ame=n(G9e,"STRONG",{});var Yct=s(Ame);fPo=r(Yct,"yoso"),Yct.forEach(t),mPo=r(G9e," \u2014 "),UG=n(G9e,"A",{href:!0});var Kct=s(UG);gPo=r(Kct,"YosoForSequenceClassification"),Kct.forEach(t),hPo=r(G9e," (YOSO model)"),G9e.forEach(t),j.forEach(t),pPo=i(sa),kb=n(sa,"P",{});var O9e=s(kb);uPo=r(O9e,"The model is set in evaluation mode by default using "),yme=n(O9e,"CODE",{});var Zct=s(yme);_Po=r(Zct,"model.eval()"),Zct.forEach(t),bPo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(O9e,"CODE",{});var eft=s(Lme);vPo=r(eft,"model.train()"),eft.forEach(t),O9e.forEach(t),FPo=i(sa),T(Sb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),vNe=i(f),Vi=n(f,"H2",{class:!0});var EDe=s(Vi);Rb=n(EDe,"A",{id:!0,class:!0,href:!0});var oft=s(Rb);xme=n(oft,"SPAN",{});var rft=s(xme);T(L6.$$.fragment,rft),rft.forEach(t),oft.forEach(t),TPo=i(EDe),$me=n(EDe,"SPAN",{});var tft=s($me);MPo=r(tft,"AutoModelForMultipleChoice"),tft.forEach(t),EDe.forEach(t),FNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(x6.$$.fragment,Qs),EPo=i(Qs),Xi=n(Qs,"P",{});var wZ=s(Xi);CPo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JG=n(wZ,"A",{href:!0});var aft=s(JG);wPo=r(aft,"from_pretrained()"),aft.forEach(t),APo=r(wZ," class method or the "),YG=n(wZ,"A",{href:!0});var nft=s(YG);yPo=r(nft,"from_config()"),nft.forEach(t),LPo=r(wZ,` class
method.`),wZ.forEach(t),xPo=i(Qs),$6=n(Qs,"P",{});var CDe=s($6);$Po=r(CDe,"This class cannot be instantiated directly using "),kme=n(CDe,"CODE",{});var sft=s(kme);kPo=r(sft,"__init__()"),sft.forEach(t),SPo=r(CDe," (throws an error)."),CDe.forEach(t),RPo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Ow=s(dt);T(k6.$$.fragment,Ow),PPo=i(Ow),Sme=n(Ow,"P",{});var lft=s(Sme);BPo=r(lft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lft.forEach(t),IPo=i(Ow),zi=n(Ow,"P",{});var AZ=s(zi);qPo=r(AZ,`Note:
Loading a model from its configuration file does `),Rme=n(AZ,"STRONG",{});var ift=s(Rme);NPo=r(ift,"not"),ift.forEach(t),jPo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(AZ,"A",{href:!0});var dft=s(KG);DPo=r(dft,"from_pretrained()"),dft.forEach(t),GPo=r(AZ," to load the model weights."),AZ.forEach(t),OPo=i(Ow),T(Pb.$$.fragment,Ow),Ow.forEach(t),VPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(S6.$$.fragment,la),XPo=i(la),Pme=n(la,"P",{});var cft=s(Pme);zPo=r(cft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cft.forEach(t),WPo=i(la),Pa=n(la,"P",{});var Vw=s(Pa);QPo=r(Vw,"The model class to instantiate is selected based on the "),Bme=n(Vw,"CODE",{});var fft=s(Bme);HPo=r(fft,"model_type"),fft.forEach(t),UPo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Ime=n(Vw,"CODE",{});var mft=s(Ime);JPo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),YPo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(Vw,"CODE",{});var gft=s(qme);KPo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),ZPo=r(Vw,":"),Vw.forEach(t),eBo=i(la),Y=n(la,"UL",{});var Z=s(Y);Bb=n(Z,"LI",{});var V9e=s(Bb);Nme=n(V9e,"STRONG",{});var hft=s(Nme);oBo=r(hft,"albert"),hft.forEach(t),rBo=r(V9e," \u2014 "),ZG=n(V9e,"A",{href:!0});var pft=s(ZG);tBo=r(pft,"AlbertForMultipleChoice"),pft.forEach(t),aBo=r(V9e," (ALBERT model)"),V9e.forEach(t),nBo=i(Z),Ib=n(Z,"LI",{});var X9e=s(Ib);jme=n(X9e,"STRONG",{});var uft=s(jme);sBo=r(uft,"bert"),uft.forEach(t),lBo=r(X9e," \u2014 "),eO=n(X9e,"A",{href:!0});var _ft=s(eO);iBo=r(_ft,"BertForMultipleChoice"),_ft.forEach(t),dBo=r(X9e," (BERT model)"),X9e.forEach(t),cBo=i(Z),qb=n(Z,"LI",{});var z9e=s(qb);Dme=n(z9e,"STRONG",{});var bft=s(Dme);fBo=r(bft,"big_bird"),bft.forEach(t),mBo=r(z9e," \u2014 "),oO=n(z9e,"A",{href:!0});var vft=s(oO);gBo=r(vft,"BigBirdForMultipleChoice"),vft.forEach(t),hBo=r(z9e," (BigBird model)"),z9e.forEach(t),pBo=i(Z),Nb=n(Z,"LI",{});var W9e=s(Nb);Gme=n(W9e,"STRONG",{});var Fft=s(Gme);uBo=r(Fft,"camembert"),Fft.forEach(t),_Bo=r(W9e," \u2014 "),rO=n(W9e,"A",{href:!0});var Tft=s(rO);bBo=r(Tft,"CamembertForMultipleChoice"),Tft.forEach(t),vBo=r(W9e," (CamemBERT model)"),W9e.forEach(t),FBo=i(Z),jb=n(Z,"LI",{});var Q9e=s(jb);Ome=n(Q9e,"STRONG",{});var Mft=s(Ome);TBo=r(Mft,"canine"),Mft.forEach(t),MBo=r(Q9e," \u2014 "),tO=n(Q9e,"A",{href:!0});var Eft=s(tO);EBo=r(Eft,"CanineForMultipleChoice"),Eft.forEach(t),CBo=r(Q9e," (Canine model)"),Q9e.forEach(t),wBo=i(Z),Db=n(Z,"LI",{});var H9e=s(Db);Vme=n(H9e,"STRONG",{});var Cft=s(Vme);ABo=r(Cft,"convbert"),Cft.forEach(t),yBo=r(H9e," \u2014 "),aO=n(H9e,"A",{href:!0});var wft=s(aO);LBo=r(wft,"ConvBertForMultipleChoice"),wft.forEach(t),xBo=r(H9e," (ConvBERT model)"),H9e.forEach(t),$Bo=i(Z),Gb=n(Z,"LI",{});var U9e=s(Gb);Xme=n(U9e,"STRONG",{});var Aft=s(Xme);kBo=r(Aft,"data2vec-text"),Aft.forEach(t),SBo=r(U9e," \u2014 "),nO=n(U9e,"A",{href:!0});var yft=s(nO);RBo=r(yft,"Data2VecTextForMultipleChoice"),yft.forEach(t),PBo=r(U9e," (Data2VecText model)"),U9e.forEach(t),BBo=i(Z),Ob=n(Z,"LI",{});var J9e=s(Ob);zme=n(J9e,"STRONG",{});var Lft=s(zme);IBo=r(Lft,"deberta-v2"),Lft.forEach(t),qBo=r(J9e," \u2014 "),sO=n(J9e,"A",{href:!0});var xft=s(sO);NBo=r(xft,"DebertaV2ForMultipleChoice"),xft.forEach(t),jBo=r(J9e," (DeBERTa-v2 model)"),J9e.forEach(t),DBo=i(Z),Vb=n(Z,"LI",{});var Y9e=s(Vb);Wme=n(Y9e,"STRONG",{});var $ft=s(Wme);GBo=r($ft,"distilbert"),$ft.forEach(t),OBo=r(Y9e," \u2014 "),lO=n(Y9e,"A",{href:!0});var kft=s(lO);VBo=r(kft,"DistilBertForMultipleChoice"),kft.forEach(t),XBo=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),zBo=i(Z),Xb=n(Z,"LI",{});var K9e=s(Xb);Qme=n(K9e,"STRONG",{});var Sft=s(Qme);WBo=r(Sft,"electra"),Sft.forEach(t),QBo=r(K9e," \u2014 "),iO=n(K9e,"A",{href:!0});var Rft=s(iO);HBo=r(Rft,"ElectraForMultipleChoice"),Rft.forEach(t),UBo=r(K9e," (ELECTRA model)"),K9e.forEach(t),JBo=i(Z),zb=n(Z,"LI",{});var Z9e=s(zb);Hme=n(Z9e,"STRONG",{});var Pft=s(Hme);YBo=r(Pft,"flaubert"),Pft.forEach(t),KBo=r(Z9e," \u2014 "),dO=n(Z9e,"A",{href:!0});var Bft=s(dO);ZBo=r(Bft,"FlaubertForMultipleChoice"),Bft.forEach(t),eIo=r(Z9e," (FlauBERT model)"),Z9e.forEach(t),oIo=i(Z),Wb=n(Z,"LI",{});var exe=s(Wb);Ume=n(exe,"STRONG",{});var Ift=s(Ume);rIo=r(Ift,"fnet"),Ift.forEach(t),tIo=r(exe," \u2014 "),cO=n(exe,"A",{href:!0});var qft=s(cO);aIo=r(qft,"FNetForMultipleChoice"),qft.forEach(t),nIo=r(exe," (FNet model)"),exe.forEach(t),sIo=i(Z),Qb=n(Z,"LI",{});var oxe=s(Qb);Jme=n(oxe,"STRONG",{});var Nft=s(Jme);lIo=r(Nft,"funnel"),Nft.forEach(t),iIo=r(oxe," \u2014 "),fO=n(oxe,"A",{href:!0});var jft=s(fO);dIo=r(jft,"FunnelForMultipleChoice"),jft.forEach(t),cIo=r(oxe," (Funnel Transformer model)"),oxe.forEach(t),fIo=i(Z),Hb=n(Z,"LI",{});var rxe=s(Hb);Yme=n(rxe,"STRONG",{});var Dft=s(Yme);mIo=r(Dft,"ibert"),Dft.forEach(t),gIo=r(rxe," \u2014 "),mO=n(rxe,"A",{href:!0});var Gft=s(mO);hIo=r(Gft,"IBertForMultipleChoice"),Gft.forEach(t),pIo=r(rxe," (I-BERT model)"),rxe.forEach(t),uIo=i(Z),Ub=n(Z,"LI",{});var txe=s(Ub);Kme=n(txe,"STRONG",{});var Oft=s(Kme);_Io=r(Oft,"longformer"),Oft.forEach(t),bIo=r(txe," \u2014 "),gO=n(txe,"A",{href:!0});var Vft=s(gO);vIo=r(Vft,"LongformerForMultipleChoice"),Vft.forEach(t),FIo=r(txe," (Longformer model)"),txe.forEach(t),TIo=i(Z),Jb=n(Z,"LI",{});var axe=s(Jb);Zme=n(axe,"STRONG",{});var Xft=s(Zme);MIo=r(Xft,"megatron-bert"),Xft.forEach(t),EIo=r(axe," \u2014 "),hO=n(axe,"A",{href:!0});var zft=s(hO);CIo=r(zft,"MegatronBertForMultipleChoice"),zft.forEach(t),wIo=r(axe," (MegatronBert model)"),axe.forEach(t),AIo=i(Z),Yb=n(Z,"LI",{});var nxe=s(Yb);ege=n(nxe,"STRONG",{});var Wft=s(ege);yIo=r(Wft,"mobilebert"),Wft.forEach(t),LIo=r(nxe," \u2014 "),pO=n(nxe,"A",{href:!0});var Qft=s(pO);xIo=r(Qft,"MobileBertForMultipleChoice"),Qft.forEach(t),$Io=r(nxe," (MobileBERT model)"),nxe.forEach(t),kIo=i(Z),Kb=n(Z,"LI",{});var sxe=s(Kb);oge=n(sxe,"STRONG",{});var Hft=s(oge);SIo=r(Hft,"mpnet"),Hft.forEach(t),RIo=r(sxe," \u2014 "),uO=n(sxe,"A",{href:!0});var Uft=s(uO);PIo=r(Uft,"MPNetForMultipleChoice"),Uft.forEach(t),BIo=r(sxe," (MPNet model)"),sxe.forEach(t),IIo=i(Z),Zb=n(Z,"LI",{});var lxe=s(Zb);rge=n(lxe,"STRONG",{});var Jft=s(rge);qIo=r(Jft,"nystromformer"),Jft.forEach(t),NIo=r(lxe," \u2014 "),_O=n(lxe,"A",{href:!0});var Yft=s(_O);jIo=r(Yft,"NystromformerForMultipleChoice"),Yft.forEach(t),DIo=r(lxe," (Nystromformer model)"),lxe.forEach(t),GIo=i(Z),e2=n(Z,"LI",{});var ixe=s(e2);tge=n(ixe,"STRONG",{});var Kft=s(tge);OIo=r(Kft,"qdqbert"),Kft.forEach(t),VIo=r(ixe," \u2014 "),bO=n(ixe,"A",{href:!0});var Zft=s(bO);XIo=r(Zft,"QDQBertForMultipleChoice"),Zft.forEach(t),zIo=r(ixe," (QDQBert model)"),ixe.forEach(t),WIo=i(Z),o2=n(Z,"LI",{});var dxe=s(o2);age=n(dxe,"STRONG",{});var emt=s(age);QIo=r(emt,"rembert"),emt.forEach(t),HIo=r(dxe," \u2014 "),vO=n(dxe,"A",{href:!0});var omt=s(vO);UIo=r(omt,"RemBertForMultipleChoice"),omt.forEach(t),JIo=r(dxe," (RemBERT model)"),dxe.forEach(t),YIo=i(Z),r2=n(Z,"LI",{});var cxe=s(r2);nge=n(cxe,"STRONG",{});var rmt=s(nge);KIo=r(rmt,"roberta"),rmt.forEach(t),ZIo=r(cxe," \u2014 "),FO=n(cxe,"A",{href:!0});var tmt=s(FO);eqo=r(tmt,"RobertaForMultipleChoice"),tmt.forEach(t),oqo=r(cxe," (RoBERTa model)"),cxe.forEach(t),rqo=i(Z),t2=n(Z,"LI",{});var fxe=s(t2);sge=n(fxe,"STRONG",{});var amt=s(sge);tqo=r(amt,"roformer"),amt.forEach(t),aqo=r(fxe," \u2014 "),TO=n(fxe,"A",{href:!0});var nmt=s(TO);nqo=r(nmt,"RoFormerForMultipleChoice"),nmt.forEach(t),sqo=r(fxe," (RoFormer model)"),fxe.forEach(t),lqo=i(Z),a2=n(Z,"LI",{});var mxe=s(a2);lge=n(mxe,"STRONG",{});var smt=s(lge);iqo=r(smt,"squeezebert"),smt.forEach(t),dqo=r(mxe," \u2014 "),MO=n(mxe,"A",{href:!0});var lmt=s(MO);cqo=r(lmt,"SqueezeBertForMultipleChoice"),lmt.forEach(t),fqo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),mqo=i(Z),n2=n(Z,"LI",{});var gxe=s(n2);ige=n(gxe,"STRONG",{});var imt=s(ige);gqo=r(imt,"xlm"),imt.forEach(t),hqo=r(gxe," \u2014 "),EO=n(gxe,"A",{href:!0});var dmt=s(EO);pqo=r(dmt,"XLMForMultipleChoice"),dmt.forEach(t),uqo=r(gxe," (XLM model)"),gxe.forEach(t),_qo=i(Z),s2=n(Z,"LI",{});var hxe=s(s2);dge=n(hxe,"STRONG",{});var cmt=s(dge);bqo=r(cmt,"xlm-roberta"),cmt.forEach(t),vqo=r(hxe," \u2014 "),CO=n(hxe,"A",{href:!0});var fmt=s(CO);Fqo=r(fmt,"XLMRobertaForMultipleChoice"),fmt.forEach(t),Tqo=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),Mqo=i(Z),l2=n(Z,"LI",{});var pxe=s(l2);cge=n(pxe,"STRONG",{});var mmt=s(cge);Eqo=r(mmt,"xlm-roberta-xl"),mmt.forEach(t),Cqo=r(pxe," \u2014 "),wO=n(pxe,"A",{href:!0});var gmt=s(wO);wqo=r(gmt,"XLMRobertaXLForMultipleChoice"),gmt.forEach(t),Aqo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),yqo=i(Z),i2=n(Z,"LI",{});var uxe=s(i2);fge=n(uxe,"STRONG",{});var hmt=s(fge);Lqo=r(hmt,"xlnet"),hmt.forEach(t),xqo=r(uxe," \u2014 "),AO=n(uxe,"A",{href:!0});var pmt=s(AO);$qo=r(pmt,"XLNetForMultipleChoice"),pmt.forEach(t),kqo=r(uxe," (XLNet model)"),uxe.forEach(t),Sqo=i(Z),d2=n(Z,"LI",{});var _xe=s(d2);mge=n(_xe,"STRONG",{});var umt=s(mge);Rqo=r(umt,"yoso"),umt.forEach(t),Pqo=r(_xe," \u2014 "),yO=n(_xe,"A",{href:!0});var _mt=s(yO);Bqo=r(_mt,"YosoForMultipleChoice"),_mt.forEach(t),Iqo=r(_xe," (YOSO model)"),_xe.forEach(t),Z.forEach(t),qqo=i(la),c2=n(la,"P",{});var bxe=s(c2);Nqo=r(bxe,"The model is set in evaluation mode by default using "),gge=n(bxe,"CODE",{});var bmt=s(gge);jqo=r(bmt,"model.eval()"),bmt.forEach(t),Dqo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(bxe,"CODE",{});var vmt=s(hge);Gqo=r(vmt,"model.train()"),vmt.forEach(t),bxe.forEach(t),Oqo=i(la),T(f2.$$.fragment,la),la.forEach(t),Qs.forEach(t),TNe=i(f),Wi=n(f,"H2",{class:!0});var wDe=s(Wi);m2=n(wDe,"A",{id:!0,class:!0,href:!0});var Fmt=s(m2);pge=n(Fmt,"SPAN",{});var Tmt=s(pge);T(R6.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),Vqo=i(wDe),uge=n(wDe,"SPAN",{});var Mmt=s(uge);Xqo=r(Mmt,"AutoModelForNextSentencePrediction"),Mmt.forEach(t),wDe.forEach(t),MNe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(P6.$$.fragment,Hs),zqo=i(Hs),Qi=n(Hs,"P",{});var yZ=s(Qi);Wqo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LO=n(yZ,"A",{href:!0});var Emt=s(LO);Qqo=r(Emt,"from_pretrained()"),Emt.forEach(t),Hqo=r(yZ," class method or the "),xO=n(yZ,"A",{href:!0});var Cmt=s(xO);Uqo=r(Cmt,"from_config()"),Cmt.forEach(t),Jqo=r(yZ,` class
method.`),yZ.forEach(t),Yqo=i(Hs),B6=n(Hs,"P",{});var ADe=s(B6);Kqo=r(ADe,"This class cannot be instantiated directly using "),_ge=n(ADe,"CODE",{});var wmt=s(_ge);Zqo=r(wmt,"__init__()"),wmt.forEach(t),eNo=r(ADe," (throws an error)."),ADe.forEach(t),oNo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Xw=s(ct);T(I6.$$.fragment,Xw),rNo=i(Xw),bge=n(Xw,"P",{});var Amt=s(bge);tNo=r(Amt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Amt.forEach(t),aNo=i(Xw),Hi=n(Xw,"P",{});var LZ=s(Hi);nNo=r(LZ,`Note:
Loading a model from its configuration file does `),vge=n(LZ,"STRONG",{});var ymt=s(vge);sNo=r(ymt,"not"),ymt.forEach(t),lNo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(LZ,"A",{href:!0});var Lmt=s($O);iNo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),dNo=r(LZ," to load the model weights."),LZ.forEach(t),cNo=i(Xw),T(g2.$$.fragment,Xw),Xw.forEach(t),fNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(q6.$$.fragment,ia),mNo=i(ia),Fge=n(ia,"P",{});var xmt=s(Fge);gNo=r(xmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xmt.forEach(t),hNo=i(ia),Ba=n(ia,"P",{});var zw=s(Ba);pNo=r(zw,"The model class to instantiate is selected based on the "),Tge=n(zw,"CODE",{});var $mt=s(Tge);uNo=r($mt,"model_type"),$mt.forEach(t),_No=r(zw,` property of the config object (either
passed as an argument or loaded from `),Mge=n(zw,"CODE",{});var kmt=s(Mge);bNo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),vNo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(zw,"CODE",{});var Smt=s(Ege);FNo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),TNo=r(zw,":"),zw.forEach(t),MNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);h2=n(Us,"LI",{});var vxe=s(h2);Cge=n(vxe,"STRONG",{});var Rmt=s(Cge);ENo=r(Rmt,"bert"),Rmt.forEach(t),CNo=r(vxe," \u2014 "),kO=n(vxe,"A",{href:!0});var Pmt=s(kO);wNo=r(Pmt,"BertForNextSentencePrediction"),Pmt.forEach(t),ANo=r(vxe," (BERT model)"),vxe.forEach(t),yNo=i(Us),p2=n(Us,"LI",{});var Fxe=s(p2);wge=n(Fxe,"STRONG",{});var Bmt=s(wge);LNo=r(Bmt,"fnet"),Bmt.forEach(t),xNo=r(Fxe," \u2014 "),SO=n(Fxe,"A",{href:!0});var Imt=s(SO);$No=r(Imt,"FNetForNextSentencePrediction"),Imt.forEach(t),kNo=r(Fxe," (FNet model)"),Fxe.forEach(t),SNo=i(Us),u2=n(Us,"LI",{});var Txe=s(u2);Age=n(Txe,"STRONG",{});var qmt=s(Age);RNo=r(qmt,"megatron-bert"),qmt.forEach(t),PNo=r(Txe," \u2014 "),RO=n(Txe,"A",{href:!0});var Nmt=s(RO);BNo=r(Nmt,"MegatronBertForNextSentencePrediction"),Nmt.forEach(t),INo=r(Txe," (MegatronBert model)"),Txe.forEach(t),qNo=i(Us),_2=n(Us,"LI",{});var Mxe=s(_2);yge=n(Mxe,"STRONG",{});var jmt=s(yge);NNo=r(jmt,"mobilebert"),jmt.forEach(t),jNo=r(Mxe," \u2014 "),PO=n(Mxe,"A",{href:!0});var Dmt=s(PO);DNo=r(Dmt,"MobileBertForNextSentencePrediction"),Dmt.forEach(t),GNo=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),ONo=i(Us),b2=n(Us,"LI",{});var Exe=s(b2);Lge=n(Exe,"STRONG",{});var Gmt=s(Lge);VNo=r(Gmt,"qdqbert"),Gmt.forEach(t),XNo=r(Exe," \u2014 "),BO=n(Exe,"A",{href:!0});var Omt=s(BO);zNo=r(Omt,"QDQBertForNextSentencePrediction"),Omt.forEach(t),WNo=r(Exe," (QDQBert model)"),Exe.forEach(t),Us.forEach(t),QNo=i(ia),v2=n(ia,"P",{});var Cxe=s(v2);HNo=r(Cxe,"The model is set in evaluation mode by default using "),xge=n(Cxe,"CODE",{});var Vmt=s(xge);UNo=r(Vmt,"model.eval()"),Vmt.forEach(t),JNo=r(Cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=n(Cxe,"CODE",{});var Xmt=s($ge);YNo=r(Xmt,"model.train()"),Xmt.forEach(t),Cxe.forEach(t),KNo=i(ia),T(F2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),ENe=i(f),Ui=n(f,"H2",{class:!0});var yDe=s(Ui);T2=n(yDe,"A",{id:!0,class:!0,href:!0});var zmt=s(T2);kge=n(zmt,"SPAN",{});var Wmt=s(kge);T(N6.$$.fragment,Wmt),Wmt.forEach(t),zmt.forEach(t),ZNo=i(yDe),Sge=n(yDe,"SPAN",{});var Qmt=s(Sge);ejo=r(Qmt,"AutoModelForTokenClassification"),Qmt.forEach(t),yDe.forEach(t),CNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(j6.$$.fragment,Js),ojo=i(Js),Ji=n(Js,"P",{});var xZ=s(Ji);rjo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IO=n(xZ,"A",{href:!0});var Hmt=s(IO);tjo=r(Hmt,"from_pretrained()"),Hmt.forEach(t),ajo=r(xZ," class method or the "),qO=n(xZ,"A",{href:!0});var Umt=s(qO);njo=r(Umt,"from_config()"),Umt.forEach(t),sjo=r(xZ,` class
method.`),xZ.forEach(t),ljo=i(Js),D6=n(Js,"P",{});var LDe=s(D6);ijo=r(LDe,"This class cannot be instantiated directly using "),Rge=n(LDe,"CODE",{});var Jmt=s(Rge);djo=r(Jmt,"__init__()"),Jmt.forEach(t),cjo=r(LDe," (throws an error)."),LDe.forEach(t),fjo=i(Js),ft=n(Js,"DIV",{class:!0});var Ww=s(ft);T(G6.$$.fragment,Ww),mjo=i(Ww),Pge=n(Ww,"P",{});var Ymt=s(Pge);gjo=r(Ymt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ymt.forEach(t),hjo=i(Ww),Yi=n(Ww,"P",{});var $Z=s(Yi);pjo=r($Z,`Note:
Loading a model from its configuration file does `),Bge=n($Z,"STRONG",{});var Kmt=s(Bge);ujo=r(Kmt,"not"),Kmt.forEach(t),_jo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n($Z,"A",{href:!0});var Zmt=s(NO);bjo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),vjo=r($Z," to load the model weights."),$Z.forEach(t),Fjo=i(Ww),T(M2.$$.fragment,Ww),Ww.forEach(t),Tjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(O6.$$.fragment,da),Mjo=i(da),Ige=n(da,"P",{});var egt=s(Ige);Ejo=r(egt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),egt.forEach(t),Cjo=i(da),Ia=n(da,"P",{});var Qw=s(Ia);wjo=r(Qw,"The model class to instantiate is selected based on the "),qge=n(Qw,"CODE",{});var ogt=s(qge);Ajo=r(ogt,"model_type"),ogt.forEach(t),yjo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Nge=n(Qw,"CODE",{});var rgt=s(Nge);Ljo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),xjo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(Qw,"CODE",{});var tgt=s(jge);$jo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),kjo=r(Qw,":"),Qw.forEach(t),Sjo=i(da),H=n(da,"UL",{});var J=s(H);E2=n(J,"LI",{});var wxe=s(E2);Dge=n(wxe,"STRONG",{});var agt=s(Dge);Rjo=r(agt,"albert"),agt.forEach(t),Pjo=r(wxe," \u2014 "),jO=n(wxe,"A",{href:!0});var ngt=s(jO);Bjo=r(ngt,"AlbertForTokenClassification"),ngt.forEach(t),Ijo=r(wxe," (ALBERT model)"),wxe.forEach(t),qjo=i(J),C2=n(J,"LI",{});var Axe=s(C2);Gge=n(Axe,"STRONG",{});var sgt=s(Gge);Njo=r(sgt,"bert"),sgt.forEach(t),jjo=r(Axe," \u2014 "),DO=n(Axe,"A",{href:!0});var lgt=s(DO);Djo=r(lgt,"BertForTokenClassification"),lgt.forEach(t),Gjo=r(Axe," (BERT model)"),Axe.forEach(t),Ojo=i(J),w2=n(J,"LI",{});var yxe=s(w2);Oge=n(yxe,"STRONG",{});var igt=s(Oge);Vjo=r(igt,"big_bird"),igt.forEach(t),Xjo=r(yxe," \u2014 "),GO=n(yxe,"A",{href:!0});var dgt=s(GO);zjo=r(dgt,"BigBirdForTokenClassification"),dgt.forEach(t),Wjo=r(yxe," (BigBird model)"),yxe.forEach(t),Qjo=i(J),A2=n(J,"LI",{});var Lxe=s(A2);Vge=n(Lxe,"STRONG",{});var cgt=s(Vge);Hjo=r(cgt,"camembert"),cgt.forEach(t),Ujo=r(Lxe," \u2014 "),OO=n(Lxe,"A",{href:!0});var fgt=s(OO);Jjo=r(fgt,"CamembertForTokenClassification"),fgt.forEach(t),Yjo=r(Lxe," (CamemBERT model)"),Lxe.forEach(t),Kjo=i(J),y2=n(J,"LI",{});var xxe=s(y2);Xge=n(xxe,"STRONG",{});var mgt=s(Xge);Zjo=r(mgt,"canine"),mgt.forEach(t),eDo=r(xxe," \u2014 "),VO=n(xxe,"A",{href:!0});var ggt=s(VO);oDo=r(ggt,"CanineForTokenClassification"),ggt.forEach(t),rDo=r(xxe," (Canine model)"),xxe.forEach(t),tDo=i(J),L2=n(J,"LI",{});var $xe=s(L2);zge=n($xe,"STRONG",{});var hgt=s(zge);aDo=r(hgt,"convbert"),hgt.forEach(t),nDo=r($xe," \u2014 "),XO=n($xe,"A",{href:!0});var pgt=s(XO);sDo=r(pgt,"ConvBertForTokenClassification"),pgt.forEach(t),lDo=r($xe," (ConvBERT model)"),$xe.forEach(t),iDo=i(J),x2=n(J,"LI",{});var kxe=s(x2);Wge=n(kxe,"STRONG",{});var ugt=s(Wge);dDo=r(ugt,"data2vec-text"),ugt.forEach(t),cDo=r(kxe," \u2014 "),zO=n(kxe,"A",{href:!0});var _gt=s(zO);fDo=r(_gt,"Data2VecTextForTokenClassification"),_gt.forEach(t),mDo=r(kxe," (Data2VecText model)"),kxe.forEach(t),gDo=i(J),$2=n(J,"LI",{});var Sxe=s($2);Qge=n(Sxe,"STRONG",{});var bgt=s(Qge);hDo=r(bgt,"deberta"),bgt.forEach(t),pDo=r(Sxe," \u2014 "),WO=n(Sxe,"A",{href:!0});var vgt=s(WO);uDo=r(vgt,"DebertaForTokenClassification"),vgt.forEach(t),_Do=r(Sxe," (DeBERTa model)"),Sxe.forEach(t),bDo=i(J),k2=n(J,"LI",{});var Rxe=s(k2);Hge=n(Rxe,"STRONG",{});var Fgt=s(Hge);vDo=r(Fgt,"deberta-v2"),Fgt.forEach(t),FDo=r(Rxe," \u2014 "),QO=n(Rxe,"A",{href:!0});var Tgt=s(QO);TDo=r(Tgt,"DebertaV2ForTokenClassification"),Tgt.forEach(t),MDo=r(Rxe," (DeBERTa-v2 model)"),Rxe.forEach(t),EDo=i(J),S2=n(J,"LI",{});var Pxe=s(S2);Uge=n(Pxe,"STRONG",{});var Mgt=s(Uge);CDo=r(Mgt,"distilbert"),Mgt.forEach(t),wDo=r(Pxe," \u2014 "),HO=n(Pxe,"A",{href:!0});var Egt=s(HO);ADo=r(Egt,"DistilBertForTokenClassification"),Egt.forEach(t),yDo=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),LDo=i(J),R2=n(J,"LI",{});var Bxe=s(R2);Jge=n(Bxe,"STRONG",{});var Cgt=s(Jge);xDo=r(Cgt,"electra"),Cgt.forEach(t),$Do=r(Bxe," \u2014 "),UO=n(Bxe,"A",{href:!0});var wgt=s(UO);kDo=r(wgt,"ElectraForTokenClassification"),wgt.forEach(t),SDo=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),RDo=i(J),P2=n(J,"LI",{});var Ixe=s(P2);Yge=n(Ixe,"STRONG",{});var Agt=s(Yge);PDo=r(Agt,"flaubert"),Agt.forEach(t),BDo=r(Ixe," \u2014 "),JO=n(Ixe,"A",{href:!0});var ygt=s(JO);IDo=r(ygt,"FlaubertForTokenClassification"),ygt.forEach(t),qDo=r(Ixe," (FlauBERT model)"),Ixe.forEach(t),NDo=i(J),B2=n(J,"LI",{});var qxe=s(B2);Kge=n(qxe,"STRONG",{});var Lgt=s(Kge);jDo=r(Lgt,"fnet"),Lgt.forEach(t),DDo=r(qxe," \u2014 "),YO=n(qxe,"A",{href:!0});var xgt=s(YO);GDo=r(xgt,"FNetForTokenClassification"),xgt.forEach(t),ODo=r(qxe," (FNet model)"),qxe.forEach(t),VDo=i(J),I2=n(J,"LI",{});var Nxe=s(I2);Zge=n(Nxe,"STRONG",{});var $gt=s(Zge);XDo=r($gt,"funnel"),$gt.forEach(t),zDo=r(Nxe," \u2014 "),KO=n(Nxe,"A",{href:!0});var kgt=s(KO);WDo=r(kgt,"FunnelForTokenClassification"),kgt.forEach(t),QDo=r(Nxe," (Funnel Transformer model)"),Nxe.forEach(t),HDo=i(J),q2=n(J,"LI",{});var jxe=s(q2);ehe=n(jxe,"STRONG",{});var Sgt=s(ehe);UDo=r(Sgt,"gpt2"),Sgt.forEach(t),JDo=r(jxe," \u2014 "),ZO=n(jxe,"A",{href:!0});var Rgt=s(ZO);YDo=r(Rgt,"GPT2ForTokenClassification"),Rgt.forEach(t),KDo=r(jxe," (OpenAI GPT-2 model)"),jxe.forEach(t),ZDo=i(J),N2=n(J,"LI",{});var Dxe=s(N2);ohe=n(Dxe,"STRONG",{});var Pgt=s(ohe);eGo=r(Pgt,"ibert"),Pgt.forEach(t),oGo=r(Dxe," \u2014 "),eV=n(Dxe,"A",{href:!0});var Bgt=s(eV);rGo=r(Bgt,"IBertForTokenClassification"),Bgt.forEach(t),tGo=r(Dxe," (I-BERT model)"),Dxe.forEach(t),aGo=i(J),j2=n(J,"LI",{});var Gxe=s(j2);rhe=n(Gxe,"STRONG",{});var Igt=s(rhe);nGo=r(Igt,"layoutlm"),Igt.forEach(t),sGo=r(Gxe," \u2014 "),oV=n(Gxe,"A",{href:!0});var qgt=s(oV);lGo=r(qgt,"LayoutLMForTokenClassification"),qgt.forEach(t),iGo=r(Gxe," (LayoutLM model)"),Gxe.forEach(t),dGo=i(J),D2=n(J,"LI",{});var Oxe=s(D2);the=n(Oxe,"STRONG",{});var Ngt=s(the);cGo=r(Ngt,"layoutlmv2"),Ngt.forEach(t),fGo=r(Oxe," \u2014 "),rV=n(Oxe,"A",{href:!0});var jgt=s(rV);mGo=r(jgt,"LayoutLMv2ForTokenClassification"),jgt.forEach(t),gGo=r(Oxe," (LayoutLMv2 model)"),Oxe.forEach(t),hGo=i(J),G2=n(J,"LI",{});var Vxe=s(G2);ahe=n(Vxe,"STRONG",{});var Dgt=s(ahe);pGo=r(Dgt,"layoutlmv3"),Dgt.forEach(t),uGo=r(Vxe," \u2014 "),tV=n(Vxe,"A",{href:!0});var Ggt=s(tV);_Go=r(Ggt,"LayoutLMv3ForTokenClassification"),Ggt.forEach(t),bGo=r(Vxe," (LayoutLMv3 model)"),Vxe.forEach(t),vGo=i(J),O2=n(J,"LI",{});var Xxe=s(O2);nhe=n(Xxe,"STRONG",{});var Ogt=s(nhe);FGo=r(Ogt,"longformer"),Ogt.forEach(t),TGo=r(Xxe," \u2014 "),aV=n(Xxe,"A",{href:!0});var Vgt=s(aV);MGo=r(Vgt,"LongformerForTokenClassification"),Vgt.forEach(t),EGo=r(Xxe," (Longformer model)"),Xxe.forEach(t),CGo=i(J),V2=n(J,"LI",{});var zxe=s(V2);she=n(zxe,"STRONG",{});var Xgt=s(she);wGo=r(Xgt,"megatron-bert"),Xgt.forEach(t),AGo=r(zxe," \u2014 "),nV=n(zxe,"A",{href:!0});var zgt=s(nV);yGo=r(zgt,"MegatronBertForTokenClassification"),zgt.forEach(t),LGo=r(zxe," (MegatronBert model)"),zxe.forEach(t),xGo=i(J),X2=n(J,"LI",{});var Wxe=s(X2);lhe=n(Wxe,"STRONG",{});var Wgt=s(lhe);$Go=r(Wgt,"mobilebert"),Wgt.forEach(t),kGo=r(Wxe," \u2014 "),sV=n(Wxe,"A",{href:!0});var Qgt=s(sV);SGo=r(Qgt,"MobileBertForTokenClassification"),Qgt.forEach(t),RGo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),PGo=i(J),z2=n(J,"LI",{});var Qxe=s(z2);ihe=n(Qxe,"STRONG",{});var Hgt=s(ihe);BGo=r(Hgt,"mpnet"),Hgt.forEach(t),IGo=r(Qxe," \u2014 "),lV=n(Qxe,"A",{href:!0});var Ugt=s(lV);qGo=r(Ugt,"MPNetForTokenClassification"),Ugt.forEach(t),NGo=r(Qxe," (MPNet model)"),Qxe.forEach(t),jGo=i(J),W2=n(J,"LI",{});var Hxe=s(W2);dhe=n(Hxe,"STRONG",{});var Jgt=s(dhe);DGo=r(Jgt,"nystromformer"),Jgt.forEach(t),GGo=r(Hxe," \u2014 "),iV=n(Hxe,"A",{href:!0});var Ygt=s(iV);OGo=r(Ygt,"NystromformerForTokenClassification"),Ygt.forEach(t),VGo=r(Hxe," (Nystromformer model)"),Hxe.forEach(t),XGo=i(J),Q2=n(J,"LI",{});var Uxe=s(Q2);che=n(Uxe,"STRONG",{});var Kgt=s(che);zGo=r(Kgt,"qdqbert"),Kgt.forEach(t),WGo=r(Uxe," \u2014 "),dV=n(Uxe,"A",{href:!0});var Zgt=s(dV);QGo=r(Zgt,"QDQBertForTokenClassification"),Zgt.forEach(t),HGo=r(Uxe," (QDQBert model)"),Uxe.forEach(t),UGo=i(J),H2=n(J,"LI",{});var Jxe=s(H2);fhe=n(Jxe,"STRONG",{});var eht=s(fhe);JGo=r(eht,"rembert"),eht.forEach(t),YGo=r(Jxe," \u2014 "),cV=n(Jxe,"A",{href:!0});var oht=s(cV);KGo=r(oht,"RemBertForTokenClassification"),oht.forEach(t),ZGo=r(Jxe," (RemBERT model)"),Jxe.forEach(t),eOo=i(J),U2=n(J,"LI",{});var Yxe=s(U2);mhe=n(Yxe,"STRONG",{});var rht=s(mhe);oOo=r(rht,"roberta"),rht.forEach(t),rOo=r(Yxe," \u2014 "),fV=n(Yxe,"A",{href:!0});var tht=s(fV);tOo=r(tht,"RobertaForTokenClassification"),tht.forEach(t),aOo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),nOo=i(J),J2=n(J,"LI",{});var Kxe=s(J2);ghe=n(Kxe,"STRONG",{});var aht=s(ghe);sOo=r(aht,"roformer"),aht.forEach(t),lOo=r(Kxe," \u2014 "),mV=n(Kxe,"A",{href:!0});var nht=s(mV);iOo=r(nht,"RoFormerForTokenClassification"),nht.forEach(t),dOo=r(Kxe," (RoFormer model)"),Kxe.forEach(t),cOo=i(J),Y2=n(J,"LI",{});var Zxe=s(Y2);hhe=n(Zxe,"STRONG",{});var sht=s(hhe);fOo=r(sht,"squeezebert"),sht.forEach(t),mOo=r(Zxe," \u2014 "),gV=n(Zxe,"A",{href:!0});var lht=s(gV);gOo=r(lht,"SqueezeBertForTokenClassification"),lht.forEach(t),hOo=r(Zxe," (SqueezeBERT model)"),Zxe.forEach(t),pOo=i(J),K2=n(J,"LI",{});var e$e=s(K2);phe=n(e$e,"STRONG",{});var iht=s(phe);uOo=r(iht,"xlm"),iht.forEach(t),_Oo=r(e$e," \u2014 "),hV=n(e$e,"A",{href:!0});var dht=s(hV);bOo=r(dht,"XLMForTokenClassification"),dht.forEach(t),vOo=r(e$e," (XLM model)"),e$e.forEach(t),FOo=i(J),Z2=n(J,"LI",{});var o$e=s(Z2);uhe=n(o$e,"STRONG",{});var cht=s(uhe);TOo=r(cht,"xlm-roberta"),cht.forEach(t),MOo=r(o$e," \u2014 "),pV=n(o$e,"A",{href:!0});var fht=s(pV);EOo=r(fht,"XLMRobertaForTokenClassification"),fht.forEach(t),COo=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),wOo=i(J),ev=n(J,"LI",{});var r$e=s(ev);_he=n(r$e,"STRONG",{});var mht=s(_he);AOo=r(mht,"xlm-roberta-xl"),mht.forEach(t),yOo=r(r$e," \u2014 "),uV=n(r$e,"A",{href:!0});var ght=s(uV);LOo=r(ght,"XLMRobertaXLForTokenClassification"),ght.forEach(t),xOo=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),$Oo=i(J),ov=n(J,"LI",{});var t$e=s(ov);bhe=n(t$e,"STRONG",{});var hht=s(bhe);kOo=r(hht,"xlnet"),hht.forEach(t),SOo=r(t$e," \u2014 "),_V=n(t$e,"A",{href:!0});var pht=s(_V);ROo=r(pht,"XLNetForTokenClassification"),pht.forEach(t),POo=r(t$e," (XLNet model)"),t$e.forEach(t),BOo=i(J),rv=n(J,"LI",{});var a$e=s(rv);vhe=n(a$e,"STRONG",{});var uht=s(vhe);IOo=r(uht,"yoso"),uht.forEach(t),qOo=r(a$e," \u2014 "),bV=n(a$e,"A",{href:!0});var _ht=s(bV);NOo=r(_ht,"YosoForTokenClassification"),_ht.forEach(t),jOo=r(a$e," (YOSO model)"),a$e.forEach(t),J.forEach(t),DOo=i(da),tv=n(da,"P",{});var n$e=s(tv);GOo=r(n$e,"The model is set in evaluation mode by default using "),Fhe=n(n$e,"CODE",{});var bht=s(Fhe);OOo=r(bht,"model.eval()"),bht.forEach(t),VOo=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(n$e,"CODE",{});var vht=s(The);XOo=r(vht,"model.train()"),vht.forEach(t),n$e.forEach(t),zOo=i(da),T(av.$$.fragment,da),da.forEach(t),Js.forEach(t),wNe=i(f),Ki=n(f,"H2",{class:!0});var xDe=s(Ki);nv=n(xDe,"A",{id:!0,class:!0,href:!0});var Fht=s(nv);Mhe=n(Fht,"SPAN",{});var Tht=s(Mhe);T(V6.$$.fragment,Tht),Tht.forEach(t),Fht.forEach(t),WOo=i(xDe),Ehe=n(xDe,"SPAN",{});var Mht=s(Ehe);QOo=r(Mht,"AutoModelForQuestionAnswering"),Mht.forEach(t),xDe.forEach(t),ANe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(X6.$$.fragment,Ys),HOo=i(Ys),Zi=n(Ys,"P",{});var kZ=s(Zi);UOo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vV=n(kZ,"A",{href:!0});var Eht=s(vV);JOo=r(Eht,"from_pretrained()"),Eht.forEach(t),YOo=r(kZ," class method or the "),FV=n(kZ,"A",{href:!0});var Cht=s(FV);KOo=r(Cht,"from_config()"),Cht.forEach(t),ZOo=r(kZ,` class
method.`),kZ.forEach(t),eVo=i(Ys),z6=n(Ys,"P",{});var $De=s(z6);oVo=r($De,"This class cannot be instantiated directly using "),Che=n($De,"CODE",{});var wht=s(Che);rVo=r(wht,"__init__()"),wht.forEach(t),tVo=r($De," (throws an error)."),$De.forEach(t),aVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Hw=s(mt);T(W6.$$.fragment,Hw),nVo=i(Hw),whe=n(Hw,"P",{});var Aht=s(whe);sVo=r(Aht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Aht.forEach(t),lVo=i(Hw),ed=n(Hw,"P",{});var SZ=s(ed);iVo=r(SZ,`Note:
Loading a model from its configuration file does `),Ahe=n(SZ,"STRONG",{});var yht=s(Ahe);dVo=r(yht,"not"),yht.forEach(t),cVo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(SZ,"A",{href:!0});var Lht=s(TV);fVo=r(Lht,"from_pretrained()"),Lht.forEach(t),mVo=r(SZ," to load the model weights."),SZ.forEach(t),gVo=i(Hw),T(sv.$$.fragment,Hw),Hw.forEach(t),hVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Q6.$$.fragment,ca),pVo=i(ca),yhe=n(ca,"P",{});var xht=s(yhe);uVo=r(xht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xht.forEach(t),_Vo=i(ca),qa=n(ca,"P",{});var Uw=s(qa);bVo=r(Uw,"The model class to instantiate is selected based on the "),Lhe=n(Uw,"CODE",{});var $ht=s(Lhe);vVo=r($ht,"model_type"),$ht.forEach(t),FVo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),xhe=n(Uw,"CODE",{});var kht=s(xhe);TVo=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),MVo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(Uw,"CODE",{});var Sht=s($he);EVo=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),CVo=r(Uw,":"),Uw.forEach(t),wVo=i(ca),V=n(ca,"UL",{});var X=s(V);lv=n(X,"LI",{});var s$e=s(lv);khe=n(s$e,"STRONG",{});var Rht=s(khe);AVo=r(Rht,"albert"),Rht.forEach(t),yVo=r(s$e," \u2014 "),MV=n(s$e,"A",{href:!0});var Pht=s(MV);LVo=r(Pht,"AlbertForQuestionAnswering"),Pht.forEach(t),xVo=r(s$e," (ALBERT model)"),s$e.forEach(t),$Vo=i(X),iv=n(X,"LI",{});var l$e=s(iv);She=n(l$e,"STRONG",{});var Bht=s(She);kVo=r(Bht,"bart"),Bht.forEach(t),SVo=r(l$e," \u2014 "),EV=n(l$e,"A",{href:!0});var Iht=s(EV);RVo=r(Iht,"BartForQuestionAnswering"),Iht.forEach(t),PVo=r(l$e," (BART model)"),l$e.forEach(t),BVo=i(X),dv=n(X,"LI",{});var i$e=s(dv);Rhe=n(i$e,"STRONG",{});var qht=s(Rhe);IVo=r(qht,"bert"),qht.forEach(t),qVo=r(i$e," \u2014 "),CV=n(i$e,"A",{href:!0});var Nht=s(CV);NVo=r(Nht,"BertForQuestionAnswering"),Nht.forEach(t),jVo=r(i$e," (BERT model)"),i$e.forEach(t),DVo=i(X),cv=n(X,"LI",{});var d$e=s(cv);Phe=n(d$e,"STRONG",{});var jht=s(Phe);GVo=r(jht,"big_bird"),jht.forEach(t),OVo=r(d$e," \u2014 "),wV=n(d$e,"A",{href:!0});var Dht=s(wV);VVo=r(Dht,"BigBirdForQuestionAnswering"),Dht.forEach(t),XVo=r(d$e," (BigBird model)"),d$e.forEach(t),zVo=i(X),fv=n(X,"LI",{});var c$e=s(fv);Bhe=n(c$e,"STRONG",{});var Ght=s(Bhe);WVo=r(Ght,"bigbird_pegasus"),Ght.forEach(t),QVo=r(c$e," \u2014 "),AV=n(c$e,"A",{href:!0});var Oht=s(AV);HVo=r(Oht,"BigBirdPegasusForQuestionAnswering"),Oht.forEach(t),UVo=r(c$e," (BigBirdPegasus model)"),c$e.forEach(t),JVo=i(X),mv=n(X,"LI",{});var f$e=s(mv);Ihe=n(f$e,"STRONG",{});var Vht=s(Ihe);YVo=r(Vht,"camembert"),Vht.forEach(t),KVo=r(f$e," \u2014 "),yV=n(f$e,"A",{href:!0});var Xht=s(yV);ZVo=r(Xht,"CamembertForQuestionAnswering"),Xht.forEach(t),eXo=r(f$e," (CamemBERT model)"),f$e.forEach(t),oXo=i(X),gv=n(X,"LI",{});var m$e=s(gv);qhe=n(m$e,"STRONG",{});var zht=s(qhe);rXo=r(zht,"canine"),zht.forEach(t),tXo=r(m$e," \u2014 "),LV=n(m$e,"A",{href:!0});var Wht=s(LV);aXo=r(Wht,"CanineForQuestionAnswering"),Wht.forEach(t),nXo=r(m$e," (Canine model)"),m$e.forEach(t),sXo=i(X),hv=n(X,"LI",{});var g$e=s(hv);Nhe=n(g$e,"STRONG",{});var Qht=s(Nhe);lXo=r(Qht,"convbert"),Qht.forEach(t),iXo=r(g$e," \u2014 "),xV=n(g$e,"A",{href:!0});var Hht=s(xV);dXo=r(Hht,"ConvBertForQuestionAnswering"),Hht.forEach(t),cXo=r(g$e," (ConvBERT model)"),g$e.forEach(t),fXo=i(X),pv=n(X,"LI",{});var h$e=s(pv);jhe=n(h$e,"STRONG",{});var Uht=s(jhe);mXo=r(Uht,"data2vec-text"),Uht.forEach(t),gXo=r(h$e," \u2014 "),$V=n(h$e,"A",{href:!0});var Jht=s($V);hXo=r(Jht,"Data2VecTextForQuestionAnswering"),Jht.forEach(t),pXo=r(h$e," (Data2VecText model)"),h$e.forEach(t),uXo=i(X),uv=n(X,"LI",{});var p$e=s(uv);Dhe=n(p$e,"STRONG",{});var Yht=s(Dhe);_Xo=r(Yht,"deberta"),Yht.forEach(t),bXo=r(p$e," \u2014 "),kV=n(p$e,"A",{href:!0});var Kht=s(kV);vXo=r(Kht,"DebertaForQuestionAnswering"),Kht.forEach(t),FXo=r(p$e," (DeBERTa model)"),p$e.forEach(t),TXo=i(X),_v=n(X,"LI",{});var u$e=s(_v);Ghe=n(u$e,"STRONG",{});var Zht=s(Ghe);MXo=r(Zht,"deberta-v2"),Zht.forEach(t),EXo=r(u$e," \u2014 "),SV=n(u$e,"A",{href:!0});var ept=s(SV);CXo=r(ept,"DebertaV2ForQuestionAnswering"),ept.forEach(t),wXo=r(u$e," (DeBERTa-v2 model)"),u$e.forEach(t),AXo=i(X),bv=n(X,"LI",{});var _$e=s(bv);Ohe=n(_$e,"STRONG",{});var opt=s(Ohe);yXo=r(opt,"distilbert"),opt.forEach(t),LXo=r(_$e," \u2014 "),RV=n(_$e,"A",{href:!0});var rpt=s(RV);xXo=r(rpt,"DistilBertForQuestionAnswering"),rpt.forEach(t),$Xo=r(_$e," (DistilBERT model)"),_$e.forEach(t),kXo=i(X),vv=n(X,"LI",{});var b$e=s(vv);Vhe=n(b$e,"STRONG",{});var tpt=s(Vhe);SXo=r(tpt,"electra"),tpt.forEach(t),RXo=r(b$e," \u2014 "),PV=n(b$e,"A",{href:!0});var apt=s(PV);PXo=r(apt,"ElectraForQuestionAnswering"),apt.forEach(t),BXo=r(b$e," (ELECTRA model)"),b$e.forEach(t),IXo=i(X),Fv=n(X,"LI",{});var v$e=s(Fv);Xhe=n(v$e,"STRONG",{});var npt=s(Xhe);qXo=r(npt,"flaubert"),npt.forEach(t),NXo=r(v$e," \u2014 "),BV=n(v$e,"A",{href:!0});var spt=s(BV);jXo=r(spt,"FlaubertForQuestionAnsweringSimple"),spt.forEach(t),DXo=r(v$e," (FlauBERT model)"),v$e.forEach(t),GXo=i(X),Tv=n(X,"LI",{});var F$e=s(Tv);zhe=n(F$e,"STRONG",{});var lpt=s(zhe);OXo=r(lpt,"fnet"),lpt.forEach(t),VXo=r(F$e," \u2014 "),IV=n(F$e,"A",{href:!0});var ipt=s(IV);XXo=r(ipt,"FNetForQuestionAnswering"),ipt.forEach(t),zXo=r(F$e," (FNet model)"),F$e.forEach(t),WXo=i(X),Mv=n(X,"LI",{});var T$e=s(Mv);Whe=n(T$e,"STRONG",{});var dpt=s(Whe);QXo=r(dpt,"funnel"),dpt.forEach(t),HXo=r(T$e," \u2014 "),qV=n(T$e,"A",{href:!0});var cpt=s(qV);UXo=r(cpt,"FunnelForQuestionAnswering"),cpt.forEach(t),JXo=r(T$e," (Funnel Transformer model)"),T$e.forEach(t),YXo=i(X),Ev=n(X,"LI",{});var M$e=s(Ev);Qhe=n(M$e,"STRONG",{});var fpt=s(Qhe);KXo=r(fpt,"gptj"),fpt.forEach(t),ZXo=r(M$e," \u2014 "),NV=n(M$e,"A",{href:!0});var mpt=s(NV);ezo=r(mpt,"GPTJForQuestionAnswering"),mpt.forEach(t),ozo=r(M$e," (GPT-J model)"),M$e.forEach(t),rzo=i(X),Cv=n(X,"LI",{});var E$e=s(Cv);Hhe=n(E$e,"STRONG",{});var gpt=s(Hhe);tzo=r(gpt,"ibert"),gpt.forEach(t),azo=r(E$e," \u2014 "),jV=n(E$e,"A",{href:!0});var hpt=s(jV);nzo=r(hpt,"IBertForQuestionAnswering"),hpt.forEach(t),szo=r(E$e," (I-BERT model)"),E$e.forEach(t),lzo=i(X),wv=n(X,"LI",{});var C$e=s(wv);Uhe=n(C$e,"STRONG",{});var ppt=s(Uhe);izo=r(ppt,"layoutlmv2"),ppt.forEach(t),dzo=r(C$e," \u2014 "),DV=n(C$e,"A",{href:!0});var upt=s(DV);czo=r(upt,"LayoutLMv2ForQuestionAnswering"),upt.forEach(t),fzo=r(C$e," (LayoutLMv2 model)"),C$e.forEach(t),mzo=i(X),Av=n(X,"LI",{});var w$e=s(Av);Jhe=n(w$e,"STRONG",{});var _pt=s(Jhe);gzo=r(_pt,"layoutlmv3"),_pt.forEach(t),hzo=r(w$e," \u2014 "),GV=n(w$e,"A",{href:!0});var bpt=s(GV);pzo=r(bpt,"LayoutLMv3ForQuestionAnswering"),bpt.forEach(t),uzo=r(w$e," (LayoutLMv3 model)"),w$e.forEach(t),_zo=i(X),yv=n(X,"LI",{});var A$e=s(yv);Yhe=n(A$e,"STRONG",{});var vpt=s(Yhe);bzo=r(vpt,"led"),vpt.forEach(t),vzo=r(A$e," \u2014 "),OV=n(A$e,"A",{href:!0});var Fpt=s(OV);Fzo=r(Fpt,"LEDForQuestionAnswering"),Fpt.forEach(t),Tzo=r(A$e," (LED model)"),A$e.forEach(t),Mzo=i(X),Lv=n(X,"LI",{});var y$e=s(Lv);Khe=n(y$e,"STRONG",{});var Tpt=s(Khe);Ezo=r(Tpt,"longformer"),Tpt.forEach(t),Czo=r(y$e," \u2014 "),VV=n(y$e,"A",{href:!0});var Mpt=s(VV);wzo=r(Mpt,"LongformerForQuestionAnswering"),Mpt.forEach(t),Azo=r(y$e," (Longformer model)"),y$e.forEach(t),yzo=i(X),xv=n(X,"LI",{});var L$e=s(xv);Zhe=n(L$e,"STRONG",{});var Ept=s(Zhe);Lzo=r(Ept,"lxmert"),Ept.forEach(t),xzo=r(L$e," \u2014 "),XV=n(L$e,"A",{href:!0});var Cpt=s(XV);$zo=r(Cpt,"LxmertForQuestionAnswering"),Cpt.forEach(t),kzo=r(L$e," (LXMERT model)"),L$e.forEach(t),Szo=i(X),$v=n(X,"LI",{});var x$e=s($v);epe=n(x$e,"STRONG",{});var wpt=s(epe);Rzo=r(wpt,"mbart"),wpt.forEach(t),Pzo=r(x$e," \u2014 "),zV=n(x$e,"A",{href:!0});var Apt=s(zV);Bzo=r(Apt,"MBartForQuestionAnswering"),Apt.forEach(t),Izo=r(x$e," (mBART model)"),x$e.forEach(t),qzo=i(X),kv=n(X,"LI",{});var $$e=s(kv);ope=n($$e,"STRONG",{});var ypt=s(ope);Nzo=r(ypt,"megatron-bert"),ypt.forEach(t),jzo=r($$e," \u2014 "),WV=n($$e,"A",{href:!0});var Lpt=s(WV);Dzo=r(Lpt,"MegatronBertForQuestionAnswering"),Lpt.forEach(t),Gzo=r($$e," (MegatronBert model)"),$$e.forEach(t),Ozo=i(X),Sv=n(X,"LI",{});var k$e=s(Sv);rpe=n(k$e,"STRONG",{});var xpt=s(rpe);Vzo=r(xpt,"mobilebert"),xpt.forEach(t),Xzo=r(k$e," \u2014 "),QV=n(k$e,"A",{href:!0});var $pt=s(QV);zzo=r($pt,"MobileBertForQuestionAnswering"),$pt.forEach(t),Wzo=r(k$e," (MobileBERT model)"),k$e.forEach(t),Qzo=i(X),Rv=n(X,"LI",{});var S$e=s(Rv);tpe=n(S$e,"STRONG",{});var kpt=s(tpe);Hzo=r(kpt,"mpnet"),kpt.forEach(t),Uzo=r(S$e," \u2014 "),HV=n(S$e,"A",{href:!0});var Spt=s(HV);Jzo=r(Spt,"MPNetForQuestionAnswering"),Spt.forEach(t),Yzo=r(S$e," (MPNet model)"),S$e.forEach(t),Kzo=i(X),Pv=n(X,"LI",{});var R$e=s(Pv);ape=n(R$e,"STRONG",{});var Rpt=s(ape);Zzo=r(Rpt,"nystromformer"),Rpt.forEach(t),eWo=r(R$e," \u2014 "),UV=n(R$e,"A",{href:!0});var Ppt=s(UV);oWo=r(Ppt,"NystromformerForQuestionAnswering"),Ppt.forEach(t),rWo=r(R$e," (Nystromformer model)"),R$e.forEach(t),tWo=i(X),Bv=n(X,"LI",{});var P$e=s(Bv);npe=n(P$e,"STRONG",{});var Bpt=s(npe);aWo=r(Bpt,"qdqbert"),Bpt.forEach(t),nWo=r(P$e," \u2014 "),JV=n(P$e,"A",{href:!0});var Ipt=s(JV);sWo=r(Ipt,"QDQBertForQuestionAnswering"),Ipt.forEach(t),lWo=r(P$e," (QDQBert model)"),P$e.forEach(t),iWo=i(X),Iv=n(X,"LI",{});var B$e=s(Iv);spe=n(B$e,"STRONG",{});var qpt=s(spe);dWo=r(qpt,"reformer"),qpt.forEach(t),cWo=r(B$e," \u2014 "),YV=n(B$e,"A",{href:!0});var Npt=s(YV);fWo=r(Npt,"ReformerForQuestionAnswering"),Npt.forEach(t),mWo=r(B$e," (Reformer model)"),B$e.forEach(t),gWo=i(X),qv=n(X,"LI",{});var I$e=s(qv);lpe=n(I$e,"STRONG",{});var jpt=s(lpe);hWo=r(jpt,"rembert"),jpt.forEach(t),pWo=r(I$e," \u2014 "),KV=n(I$e,"A",{href:!0});var Dpt=s(KV);uWo=r(Dpt,"RemBertForQuestionAnswering"),Dpt.forEach(t),_Wo=r(I$e," (RemBERT model)"),I$e.forEach(t),bWo=i(X),Nv=n(X,"LI",{});var q$e=s(Nv);ipe=n(q$e,"STRONG",{});var Gpt=s(ipe);vWo=r(Gpt,"roberta"),Gpt.forEach(t),FWo=r(q$e," \u2014 "),ZV=n(q$e,"A",{href:!0});var Opt=s(ZV);TWo=r(Opt,"RobertaForQuestionAnswering"),Opt.forEach(t),MWo=r(q$e," (RoBERTa model)"),q$e.forEach(t),EWo=i(X),jv=n(X,"LI",{});var N$e=s(jv);dpe=n(N$e,"STRONG",{});var Vpt=s(dpe);CWo=r(Vpt,"roformer"),Vpt.forEach(t),wWo=r(N$e," \u2014 "),eX=n(N$e,"A",{href:!0});var Xpt=s(eX);AWo=r(Xpt,"RoFormerForQuestionAnswering"),Xpt.forEach(t),yWo=r(N$e," (RoFormer model)"),N$e.forEach(t),LWo=i(X),Dv=n(X,"LI",{});var j$e=s(Dv);cpe=n(j$e,"STRONG",{});var zpt=s(cpe);xWo=r(zpt,"splinter"),zpt.forEach(t),$Wo=r(j$e," \u2014 "),oX=n(j$e,"A",{href:!0});var Wpt=s(oX);kWo=r(Wpt,"SplinterForQuestionAnswering"),Wpt.forEach(t),SWo=r(j$e," (Splinter model)"),j$e.forEach(t),RWo=i(X),Gv=n(X,"LI",{});var D$e=s(Gv);fpe=n(D$e,"STRONG",{});var Qpt=s(fpe);PWo=r(Qpt,"squeezebert"),Qpt.forEach(t),BWo=r(D$e," \u2014 "),rX=n(D$e,"A",{href:!0});var Hpt=s(rX);IWo=r(Hpt,"SqueezeBertForQuestionAnswering"),Hpt.forEach(t),qWo=r(D$e," (SqueezeBERT model)"),D$e.forEach(t),NWo=i(X),Ov=n(X,"LI",{});var G$e=s(Ov);mpe=n(G$e,"STRONG",{});var Upt=s(mpe);jWo=r(Upt,"xlm"),Upt.forEach(t),DWo=r(G$e," \u2014 "),tX=n(G$e,"A",{href:!0});var Jpt=s(tX);GWo=r(Jpt,"XLMForQuestionAnsweringSimple"),Jpt.forEach(t),OWo=r(G$e," (XLM model)"),G$e.forEach(t),VWo=i(X),Vv=n(X,"LI",{});var O$e=s(Vv);gpe=n(O$e,"STRONG",{});var Ypt=s(gpe);XWo=r(Ypt,"xlm-roberta"),Ypt.forEach(t),zWo=r(O$e," \u2014 "),aX=n(O$e,"A",{href:!0});var Kpt=s(aX);WWo=r(Kpt,"XLMRobertaForQuestionAnswering"),Kpt.forEach(t),QWo=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),HWo=i(X),Xv=n(X,"LI",{});var V$e=s(Xv);hpe=n(V$e,"STRONG",{});var Zpt=s(hpe);UWo=r(Zpt,"xlm-roberta-xl"),Zpt.forEach(t),JWo=r(V$e," \u2014 "),nX=n(V$e,"A",{href:!0});var eut=s(nX);YWo=r(eut,"XLMRobertaXLForQuestionAnswering"),eut.forEach(t),KWo=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),ZWo=i(X),zv=n(X,"LI",{});var X$e=s(zv);ppe=n(X$e,"STRONG",{});var out=s(ppe);eQo=r(out,"xlnet"),out.forEach(t),oQo=r(X$e," \u2014 "),sX=n(X$e,"A",{href:!0});var rut=s(sX);rQo=r(rut,"XLNetForQuestionAnsweringSimple"),rut.forEach(t),tQo=r(X$e," (XLNet model)"),X$e.forEach(t),aQo=i(X),Wv=n(X,"LI",{});var z$e=s(Wv);upe=n(z$e,"STRONG",{});var tut=s(upe);nQo=r(tut,"yoso"),tut.forEach(t),sQo=r(z$e," \u2014 "),lX=n(z$e,"A",{href:!0});var aut=s(lX);lQo=r(aut,"YosoForQuestionAnswering"),aut.forEach(t),iQo=r(z$e," (YOSO model)"),z$e.forEach(t),X.forEach(t),dQo=i(ca),Qv=n(ca,"P",{});var W$e=s(Qv);cQo=r(W$e,"The model is set in evaluation mode by default using "),_pe=n(W$e,"CODE",{});var nut=s(_pe);fQo=r(nut,"model.eval()"),nut.forEach(t),mQo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(W$e,"CODE",{});var sut=s(bpe);gQo=r(sut,"model.train()"),sut.forEach(t),W$e.forEach(t),hQo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),yNe=i(f),od=n(f,"H2",{class:!0});var kDe=s(od);Uv=n(kDe,"A",{id:!0,class:!0,href:!0});var lut=s(Uv);vpe=n(lut,"SPAN",{});var iut=s(vpe);T(H6.$$.fragment,iut),iut.forEach(t),lut.forEach(t),pQo=i(kDe),Fpe=n(kDe,"SPAN",{});var dut=s(Fpe);uQo=r(dut,"AutoModelForTableQuestionAnswering"),dut.forEach(t),kDe.forEach(t),LNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(U6.$$.fragment,Ks),_Qo=i(Ks),rd=n(Ks,"P",{});var RZ=s(rd);bQo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iX=n(RZ,"A",{href:!0});var cut=s(iX);vQo=r(cut,"from_pretrained()"),cut.forEach(t),FQo=r(RZ," class method or the "),dX=n(RZ,"A",{href:!0});var fut=s(dX);TQo=r(fut,"from_config()"),fut.forEach(t),MQo=r(RZ,` class
method.`),RZ.forEach(t),EQo=i(Ks),J6=n(Ks,"P",{});var SDe=s(J6);CQo=r(SDe,"This class cannot be instantiated directly using "),Tpe=n(SDe,"CODE",{});var mut=s(Tpe);wQo=r(mut,"__init__()"),mut.forEach(t),AQo=r(SDe," (throws an error)."),SDe.forEach(t),yQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Jw=s(gt);T(Y6.$$.fragment,Jw),LQo=i(Jw),Mpe=n(Jw,"P",{});var gut=s(Mpe);xQo=r(gut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gut.forEach(t),$Qo=i(Jw),td=n(Jw,"P",{});var PZ=s(td);kQo=r(PZ,`Note:
Loading a model from its configuration file does `),Epe=n(PZ,"STRONG",{});var hut=s(Epe);SQo=r(hut,"not"),hut.forEach(t),RQo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(PZ,"A",{href:!0});var put=s(cX);PQo=r(put,"from_pretrained()"),put.forEach(t),BQo=r(PZ," to load the model weights."),PZ.forEach(t),IQo=i(Jw),T(Jv.$$.fragment,Jw),Jw.forEach(t),qQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(K6.$$.fragment,fa),NQo=i(fa),Cpe=n(fa,"P",{});var uut=s(Cpe);jQo=r(uut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uut.forEach(t),DQo=i(fa),Na=n(fa,"P",{});var Yw=s(Na);GQo=r(Yw,"The model class to instantiate is selected based on the "),wpe=n(Yw,"CODE",{});var _ut=s(wpe);OQo=r(_ut,"model_type"),_ut.forEach(t),VQo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Ape=n(Yw,"CODE",{});var but=s(Ape);XQo=r(but,"pretrained_model_name_or_path"),but.forEach(t),zQo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(Yw,"CODE",{});var vut=s(ype);WQo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),QQo=r(Yw,":"),Yw.forEach(t),HQo=i(fa),Lpe=n(fa,"UL",{});var Fut=s(Lpe);Yv=n(Fut,"LI",{});var Q$e=s(Yv);xpe=n(Q$e,"STRONG",{});var Tut=s(xpe);UQo=r(Tut,"tapas"),Tut.forEach(t),JQo=r(Q$e," \u2014 "),fX=n(Q$e,"A",{href:!0});var Mut=s(fX);YQo=r(Mut,"TapasForQuestionAnswering"),Mut.forEach(t),KQo=r(Q$e," (TAPAS model)"),Q$e.forEach(t),Fut.forEach(t),ZQo=i(fa),Kv=n(fa,"P",{});var H$e=s(Kv);eHo=r(H$e,"The model is set in evaluation mode by default using "),$pe=n(H$e,"CODE",{});var Eut=s($pe);oHo=r(Eut,"model.eval()"),Eut.forEach(t),rHo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(H$e,"CODE",{});var Cut=s(kpe);tHo=r(Cut,"model.train()"),Cut.forEach(t),H$e.forEach(t),aHo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),xNe=i(f),ad=n(f,"H2",{class:!0});var RDe=s(ad);e3=n(RDe,"A",{id:!0,class:!0,href:!0});var wut=s(e3);Spe=n(wut,"SPAN",{});var Aut=s(Spe);T(Z6.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),nHo=i(RDe),Rpe=n(RDe,"SPAN",{});var yut=s(Rpe);sHo=r(yut,"AutoModelForImageClassification"),yut.forEach(t),RDe.forEach(t),$Ne=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(ey.$$.fragment,Zs),lHo=i(Zs),nd=n(Zs,"P",{});var BZ=s(nd);iHo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mX=n(BZ,"A",{href:!0});var Lut=s(mX);dHo=r(Lut,"from_pretrained()"),Lut.forEach(t),cHo=r(BZ," class method or the "),gX=n(BZ,"A",{href:!0});var xut=s(gX);fHo=r(xut,"from_config()"),xut.forEach(t),mHo=r(BZ,` class
method.`),BZ.forEach(t),gHo=i(Zs),oy=n(Zs,"P",{});var PDe=s(oy);hHo=r(PDe,"This class cannot be instantiated directly using "),Ppe=n(PDe,"CODE",{});var $ut=s(Ppe);pHo=r($ut,"__init__()"),$ut.forEach(t),uHo=r(PDe," (throws an error)."),PDe.forEach(t),_Ho=i(Zs),ht=n(Zs,"DIV",{class:!0});var Kw=s(ht);T(ry.$$.fragment,Kw),bHo=i(Kw),Bpe=n(Kw,"P",{});var kut=s(Bpe);vHo=r(kut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kut.forEach(t),FHo=i(Kw),sd=n(Kw,"P",{});var IZ=s(sd);THo=r(IZ,`Note:
Loading a model from its configuration file does `),Ipe=n(IZ,"STRONG",{});var Sut=s(Ipe);MHo=r(Sut,"not"),Sut.forEach(t),EHo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(IZ,"A",{href:!0});var Rut=s(hX);CHo=r(Rut,"from_pretrained()"),Rut.forEach(t),wHo=r(IZ," to load the model weights."),IZ.forEach(t),AHo=i(Kw),T(o3.$$.fragment,Kw),Kw.forEach(t),yHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(ty.$$.fragment,ma),LHo=i(ma),qpe=n(ma,"P",{});var Put=s(qpe);xHo=r(Put,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Put.forEach(t),$Ho=i(ma),ja=n(ma,"P",{});var Zw=s(ja);kHo=r(Zw,"The model class to instantiate is selected based on the "),Npe=n(Zw,"CODE",{});var But=s(Npe);SHo=r(But,"model_type"),But.forEach(t),RHo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),jpe=n(Zw,"CODE",{});var Iut=s(jpe);PHo=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),BHo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(Zw,"CODE",{});var qut=s(Dpe);IHo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),qHo=r(Zw,":"),Zw.forEach(t),NHo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);r3=n(Me,"LI",{});var U$e=s(r3);Gpe=n(U$e,"STRONG",{});var Nut=s(Gpe);jHo=r(Nut,"beit"),Nut.forEach(t),DHo=r(U$e," \u2014 "),pX=n(U$e,"A",{href:!0});var jut=s(pX);GHo=r(jut,"BeitForImageClassification"),jut.forEach(t),OHo=r(U$e," (BEiT model)"),U$e.forEach(t),VHo=i(Me),t3=n(Me,"LI",{});var J$e=s(t3);Ope=n(J$e,"STRONG",{});var Dut=s(Ope);XHo=r(Dut,"convnext"),Dut.forEach(t),zHo=r(J$e," \u2014 "),uX=n(J$e,"A",{href:!0});var Gut=s(uX);WHo=r(Gut,"ConvNextForImageClassification"),Gut.forEach(t),QHo=r(J$e," (ConvNext model)"),J$e.forEach(t),HHo=i(Me),a3=n(Me,"LI",{});var Y$e=s(a3);Vpe=n(Y$e,"STRONG",{});var Out=s(Vpe);UHo=r(Out,"cvt"),Out.forEach(t),JHo=r(Y$e," \u2014 "),_X=n(Y$e,"A",{href:!0});var Vut=s(_X);YHo=r(Vut,"CvtForImageClassification"),Vut.forEach(t),KHo=r(Y$e," (CvT model)"),Y$e.forEach(t),ZHo=i(Me),n3=n(Me,"LI",{});var K$e=s(n3);Xpe=n(K$e,"STRONG",{});var Xut=s(Xpe);eUo=r(Xut,"data2vec-vision"),Xut.forEach(t),oUo=r(K$e," \u2014 "),bX=n(K$e,"A",{href:!0});var zut=s(bX);rUo=r(zut,"Data2VecVisionForImageClassification"),zut.forEach(t),tUo=r(K$e," (Data2VecVision model)"),K$e.forEach(t),aUo=i(Me),Bs=n(Me,"LI",{});var O$=s(Bs);zpe=n(O$,"STRONG",{});var Wut=s(zpe);nUo=r(Wut,"deit"),Wut.forEach(t),sUo=r(O$," \u2014 "),vX=n(O$,"A",{href:!0});var Qut=s(vX);lUo=r(Qut,"DeiTForImageClassification"),Qut.forEach(t),iUo=r(O$," or "),FX=n(O$,"A",{href:!0});var Hut=s(FX);dUo=r(Hut,"DeiTForImageClassificationWithTeacher"),Hut.forEach(t),cUo=r(O$," (DeiT model)"),O$.forEach(t),fUo=i(Me),s3=n(Me,"LI",{});var Z$e=s(s3);Wpe=n(Z$e,"STRONG",{});var Uut=s(Wpe);mUo=r(Uut,"imagegpt"),Uut.forEach(t),gUo=r(Z$e," \u2014 "),TX=n(Z$e,"A",{href:!0});var Jut=s(TX);hUo=r(Jut,"ImageGPTForImageClassification"),Jut.forEach(t),pUo=r(Z$e," (ImageGPT model)"),Z$e.forEach(t),uUo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);Qpe=n(hf,"STRONG",{});var Yut=s(Qpe);_Uo=r(Yut,"perceiver"),Yut.forEach(t),bUo=r(hf," \u2014 "),MX=n(hf,"A",{href:!0});var Kut=s(MX);vUo=r(Kut,"PerceiverForImageClassificationLearned"),Kut.forEach(t),FUo=r(hf," or "),EX=n(hf,"A",{href:!0});var Zut=s(EX);TUo=r(Zut,"PerceiverForImageClassificationFourier"),Zut.forEach(t),MUo=r(hf," or "),CX=n(hf,"A",{href:!0});var e_t=s(CX);EUo=r(e_t,"PerceiverForImageClassificationConvProcessing"),e_t.forEach(t),CUo=r(hf," (Perceiver model)"),hf.forEach(t),wUo=i(Me),l3=n(Me,"LI",{});var eke=s(l3);Hpe=n(eke,"STRONG",{});var o_t=s(Hpe);AUo=r(o_t,"poolformer"),o_t.forEach(t),yUo=r(eke," \u2014 "),wX=n(eke,"A",{href:!0});var r_t=s(wX);LUo=r(r_t,"PoolFormerForImageClassification"),r_t.forEach(t),xUo=r(eke," (PoolFormer model)"),eke.forEach(t),$Uo=i(Me),i3=n(Me,"LI",{});var oke=s(i3);Upe=n(oke,"STRONG",{});var t_t=s(Upe);kUo=r(t_t,"regnet"),t_t.forEach(t),SUo=r(oke," \u2014 "),AX=n(oke,"A",{href:!0});var a_t=s(AX);RUo=r(a_t,"RegNetForImageClassification"),a_t.forEach(t),PUo=r(oke," (RegNet model)"),oke.forEach(t),BUo=i(Me),d3=n(Me,"LI",{});var rke=s(d3);Jpe=n(rke,"STRONG",{});var n_t=s(Jpe);IUo=r(n_t,"resnet"),n_t.forEach(t),qUo=r(rke," \u2014 "),yX=n(rke,"A",{href:!0});var s_t=s(yX);NUo=r(s_t,"ResNetForImageClassification"),s_t.forEach(t),jUo=r(rke," (ResNet model)"),rke.forEach(t),DUo=i(Me),c3=n(Me,"LI",{});var tke=s(c3);Ype=n(tke,"STRONG",{});var l_t=s(Ype);GUo=r(l_t,"segformer"),l_t.forEach(t),OUo=r(tke," \u2014 "),LX=n(tke,"A",{href:!0});var i_t=s(LX);VUo=r(i_t,"SegformerForImageClassification"),i_t.forEach(t),XUo=r(tke," (SegFormer model)"),tke.forEach(t),zUo=i(Me),f3=n(Me,"LI",{});var ake=s(f3);Kpe=n(ake,"STRONG",{});var d_t=s(Kpe);WUo=r(d_t,"swin"),d_t.forEach(t),QUo=r(ake," \u2014 "),xX=n(ake,"A",{href:!0});var c_t=s(xX);HUo=r(c_t,"SwinForImageClassification"),c_t.forEach(t),UUo=r(ake," (Swin model)"),ake.forEach(t),JUo=i(Me),m3=n(Me,"LI",{});var nke=s(m3);Zpe=n(nke,"STRONG",{});var f_t=s(Zpe);YUo=r(f_t,"van"),f_t.forEach(t),KUo=r(nke," \u2014 "),$X=n(nke,"A",{href:!0});var m_t=s($X);ZUo=r(m_t,"VanForImageClassification"),m_t.forEach(t),eJo=r(nke," (VAN model)"),nke.forEach(t),oJo=i(Me),g3=n(Me,"LI",{});var ske=s(g3);eue=n(ske,"STRONG",{});var g_t=s(eue);rJo=r(g_t,"vit"),g_t.forEach(t),tJo=r(ske," \u2014 "),kX=n(ske,"A",{href:!0});var h_t=s(kX);aJo=r(h_t,"ViTForImageClassification"),h_t.forEach(t),nJo=r(ske," (ViT model)"),ske.forEach(t),Me.forEach(t),sJo=i(ma),h3=n(ma,"P",{});var lke=s(h3);lJo=r(lke,"The model is set in evaluation mode by default using "),oue=n(lke,"CODE",{});var p_t=s(oue);iJo=r(p_t,"model.eval()"),p_t.forEach(t),dJo=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(lke,"CODE",{});var u_t=s(rue);cJo=r(u_t,"model.train()"),u_t.forEach(t),lke.forEach(t),fJo=i(ma),T(p3.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),kNe=i(f),ld=n(f,"H2",{class:!0});var BDe=s(ld);u3=n(BDe,"A",{id:!0,class:!0,href:!0});var __t=s(u3);tue=n(__t,"SPAN",{});var b_t=s(tue);T(ay.$$.fragment,b_t),b_t.forEach(t),__t.forEach(t),mJo=i(BDe),aue=n(BDe,"SPAN",{});var v_t=s(aue);gJo=r(v_t,"AutoModelForVision2Seq"),v_t.forEach(t),BDe.forEach(t),SNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(ny.$$.fragment,el),hJo=i(el),id=n(el,"P",{});var qZ=s(id);pJo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SX=n(qZ,"A",{href:!0});var F_t=s(SX);uJo=r(F_t,"from_pretrained()"),F_t.forEach(t),_Jo=r(qZ," class method or the "),RX=n(qZ,"A",{href:!0});var T_t=s(RX);bJo=r(T_t,"from_config()"),T_t.forEach(t),vJo=r(qZ,` class
method.`),qZ.forEach(t),FJo=i(el),sy=n(el,"P",{});var IDe=s(sy);TJo=r(IDe,"This class cannot be instantiated directly using "),nue=n(IDe,"CODE",{});var M_t=s(nue);MJo=r(M_t,"__init__()"),M_t.forEach(t),EJo=r(IDe," (throws an error)."),IDe.forEach(t),CJo=i(el),ut=n(el,"DIV",{class:!0});var e0=s(ut);T(ly.$$.fragment,e0),wJo=i(e0),sue=n(e0,"P",{});var E_t=s(sue);AJo=r(E_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E_t.forEach(t),yJo=i(e0),dd=n(e0,"P",{});var NZ=s(dd);LJo=r(NZ,`Note:
Loading a model from its configuration file does `),lue=n(NZ,"STRONG",{});var C_t=s(lue);xJo=r(C_t,"not"),C_t.forEach(t),$Jo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(NZ,"A",{href:!0});var w_t=s(PX);kJo=r(w_t,"from_pretrained()"),w_t.forEach(t),SJo=r(NZ," to load the model weights."),NZ.forEach(t),RJo=i(e0),T(_3.$$.fragment,e0),e0.forEach(t),PJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(iy.$$.fragment,ga),BJo=i(ga),iue=n(ga,"P",{});var A_t=s(iue);IJo=r(A_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A_t.forEach(t),qJo=i(ga),Da=n(ga,"P",{});var o0=s(Da);NJo=r(o0,"The model class to instantiate is selected based on the "),due=n(o0,"CODE",{});var y_t=s(due);jJo=r(y_t,"model_type"),y_t.forEach(t),DJo=r(o0,` property of the config object (either
passed as an argument or loaded from `),cue=n(o0,"CODE",{});var L_t=s(cue);GJo=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),OJo=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(o0,"CODE",{});var x_t=s(fue);VJo=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),XJo=r(o0,":"),o0.forEach(t),zJo=i(ga),mue=n(ga,"UL",{});var $_t=s(mue);b3=n($_t,"LI",{});var ike=s(b3);gue=n(ike,"STRONG",{});var k_t=s(gue);WJo=r(k_t,"vision-encoder-decoder"),k_t.forEach(t),QJo=r(ike," \u2014 "),BX=n(ike,"A",{href:!0});var S_t=s(BX);HJo=r(S_t,"VisionEncoderDecoderModel"),S_t.forEach(t),UJo=r(ike," (Vision Encoder decoder model)"),ike.forEach(t),$_t.forEach(t),JJo=i(ga),v3=n(ga,"P",{});var dke=s(v3);YJo=r(dke,"The model is set in evaluation mode by default using "),hue=n(dke,"CODE",{});var R_t=s(hue);KJo=r(R_t,"model.eval()"),R_t.forEach(t),ZJo=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(dke,"CODE",{});var P_t=s(pue);eYo=r(P_t,"model.train()"),P_t.forEach(t),dke.forEach(t),oYo=i(ga),T(F3.$$.fragment,ga),ga.forEach(t),el.forEach(t),RNe=i(f),cd=n(f,"H2",{class:!0});var qDe=s(cd);T3=n(qDe,"A",{id:!0,class:!0,href:!0});var B_t=s(T3);uue=n(B_t,"SPAN",{});var I_t=s(uue);T(dy.$$.fragment,I_t),I_t.forEach(t),B_t.forEach(t),rYo=i(qDe),_ue=n(qDe,"SPAN",{});var q_t=s(_ue);tYo=r(q_t,"AutoModelForAudioClassification"),q_t.forEach(t),qDe.forEach(t),PNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(cy.$$.fragment,ol),aYo=i(ol),fd=n(ol,"P",{});var jZ=s(fd);nYo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),IX=n(jZ,"A",{href:!0});var N_t=s(IX);sYo=r(N_t,"from_pretrained()"),N_t.forEach(t),lYo=r(jZ," class method or the "),qX=n(jZ,"A",{href:!0});var j_t=s(qX);iYo=r(j_t,"from_config()"),j_t.forEach(t),dYo=r(jZ,` class
method.`),jZ.forEach(t),cYo=i(ol),fy=n(ol,"P",{});var NDe=s(fy);fYo=r(NDe,"This class cannot be instantiated directly using "),bue=n(NDe,"CODE",{});var D_t=s(bue);mYo=r(D_t,"__init__()"),D_t.forEach(t),gYo=r(NDe," (throws an error)."),NDe.forEach(t),hYo=i(ol),_t=n(ol,"DIV",{class:!0});var r0=s(_t);T(my.$$.fragment,r0),pYo=i(r0),vue=n(r0,"P",{});var G_t=s(vue);uYo=r(G_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),G_t.forEach(t),_Yo=i(r0),md=n(r0,"P",{});var DZ=s(md);bYo=r(DZ,`Note:
Loading a model from its configuration file does `),Fue=n(DZ,"STRONG",{});var O_t=s(Fue);vYo=r(O_t,"not"),O_t.forEach(t),FYo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(DZ,"A",{href:!0});var V_t=s(NX);TYo=r(V_t,"from_pretrained()"),V_t.forEach(t),MYo=r(DZ," to load the model weights."),DZ.forEach(t),EYo=i(r0),T(M3.$$.fragment,r0),r0.forEach(t),CYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(gy.$$.fragment,ha),wYo=i(ha),Tue=n(ha,"P",{});var X_t=s(Tue);AYo=r(X_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),X_t.forEach(t),yYo=i(ha),Ga=n(ha,"P",{});var t0=s(Ga);LYo=r(t0,"The model class to instantiate is selected based on the "),Mue=n(t0,"CODE",{});var z_t=s(Mue);xYo=r(z_t,"model_type"),z_t.forEach(t),$Yo=r(t0,` property of the config object (either
passed as an argument or loaded from `),Eue=n(t0,"CODE",{});var W_t=s(Eue);kYo=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),SYo=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(t0,"CODE",{});var Q_t=s(Cue);RYo=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),PYo=r(t0,":"),t0.forEach(t),BYo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);E3=n(Ve,"LI",{});var cke=s(E3);wue=n(cke,"STRONG",{});var H_t=s(wue);IYo=r(H_t,"data2vec-audio"),H_t.forEach(t),qYo=r(cke," \u2014 "),jX=n(cke,"A",{href:!0});var U_t=s(jX);NYo=r(U_t,"Data2VecAudioForSequenceClassification"),U_t.forEach(t),jYo=r(cke," (Data2VecAudio model)"),cke.forEach(t),DYo=i(Ve),C3=n(Ve,"LI",{});var fke=s(C3);Aue=n(fke,"STRONG",{});var J_t=s(Aue);GYo=r(J_t,"hubert"),J_t.forEach(t),OYo=r(fke," \u2014 "),DX=n(fke,"A",{href:!0});var Y_t=s(DX);VYo=r(Y_t,"HubertForSequenceClassification"),Y_t.forEach(t),XYo=r(fke," (Hubert model)"),fke.forEach(t),zYo=i(Ve),w3=n(Ve,"LI",{});var mke=s(w3);yue=n(mke,"STRONG",{});var K_t=s(yue);WYo=r(K_t,"sew"),K_t.forEach(t),QYo=r(mke," \u2014 "),GX=n(mke,"A",{href:!0});var Z_t=s(GX);HYo=r(Z_t,"SEWForSequenceClassification"),Z_t.forEach(t),UYo=r(mke," (SEW model)"),mke.forEach(t),JYo=i(Ve),A3=n(Ve,"LI",{});var gke=s(A3);Lue=n(gke,"STRONG",{});var e1t=s(Lue);YYo=r(e1t,"sew-d"),e1t.forEach(t),KYo=r(gke," \u2014 "),OX=n(gke,"A",{href:!0});var o1t=s(OX);ZYo=r(o1t,"SEWDForSequenceClassification"),o1t.forEach(t),eKo=r(gke," (SEW-D model)"),gke.forEach(t),oKo=i(Ve),y3=n(Ve,"LI",{});var hke=s(y3);xue=n(hke,"STRONG",{});var r1t=s(xue);rKo=r(r1t,"unispeech"),r1t.forEach(t),tKo=r(hke," \u2014 "),VX=n(hke,"A",{href:!0});var t1t=s(VX);aKo=r(t1t,"UniSpeechForSequenceClassification"),t1t.forEach(t),nKo=r(hke," (UniSpeech model)"),hke.forEach(t),sKo=i(Ve),L3=n(Ve,"LI",{});var pke=s(L3);$ue=n(pke,"STRONG",{});var a1t=s($ue);lKo=r(a1t,"unispeech-sat"),a1t.forEach(t),iKo=r(pke," \u2014 "),XX=n(pke,"A",{href:!0});var n1t=s(XX);dKo=r(n1t,"UniSpeechSatForSequenceClassification"),n1t.forEach(t),cKo=r(pke," (UniSpeechSat model)"),pke.forEach(t),fKo=i(Ve),x3=n(Ve,"LI",{});var uke=s(x3);kue=n(uke,"STRONG",{});var s1t=s(kue);mKo=r(s1t,"wav2vec2"),s1t.forEach(t),gKo=r(uke," \u2014 "),zX=n(uke,"A",{href:!0});var l1t=s(zX);hKo=r(l1t,"Wav2Vec2ForSequenceClassification"),l1t.forEach(t),pKo=r(uke," (Wav2Vec2 model)"),uke.forEach(t),uKo=i(Ve),$3=n(Ve,"LI",{});var _ke=s($3);Sue=n(_ke,"STRONG",{});var i1t=s(Sue);_Ko=r(i1t,"wav2vec2-conformer"),i1t.forEach(t),bKo=r(_ke," \u2014 "),WX=n(_ke,"A",{href:!0});var d1t=s(WX);vKo=r(d1t,"Wav2Vec2ConformerForSequenceClassification"),d1t.forEach(t),FKo=r(_ke," (Wav2Vec2-Conformer model)"),_ke.forEach(t),TKo=i(Ve),k3=n(Ve,"LI",{});var bke=s(k3);Rue=n(bke,"STRONG",{});var c1t=s(Rue);MKo=r(c1t,"wavlm"),c1t.forEach(t),EKo=r(bke," \u2014 "),QX=n(bke,"A",{href:!0});var f1t=s(QX);CKo=r(f1t,"WavLMForSequenceClassification"),f1t.forEach(t),wKo=r(bke," (WavLM model)"),bke.forEach(t),Ve.forEach(t),AKo=i(ha),S3=n(ha,"P",{});var vke=s(S3);yKo=r(vke,"The model is set in evaluation mode by default using "),Pue=n(vke,"CODE",{});var m1t=s(Pue);LKo=r(m1t,"model.eval()"),m1t.forEach(t),xKo=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(vke,"CODE",{});var g1t=s(Bue);$Ko=r(g1t,"model.train()"),g1t.forEach(t),vke.forEach(t),kKo=i(ha),T(R3.$$.fragment,ha),ha.forEach(t),ol.forEach(t),BNe=i(f),gd=n(f,"H2",{class:!0});var jDe=s(gd);P3=n(jDe,"A",{id:!0,class:!0,href:!0});var h1t=s(P3);Iue=n(h1t,"SPAN",{});var p1t=s(Iue);T(hy.$$.fragment,p1t),p1t.forEach(t),h1t.forEach(t),SKo=i(jDe),que=n(jDe,"SPAN",{});var u1t=s(que);RKo=r(u1t,"AutoModelForAudioFrameClassification"),u1t.forEach(t),jDe.forEach(t),INe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(py.$$.fragment,rl),PKo=i(rl),hd=n(rl,"P",{});var GZ=s(hd);BKo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HX=n(GZ,"A",{href:!0});var _1t=s(HX);IKo=r(_1t,"from_pretrained()"),_1t.forEach(t),qKo=r(GZ," class method or the "),UX=n(GZ,"A",{href:!0});var b1t=s(UX);NKo=r(b1t,"from_config()"),b1t.forEach(t),jKo=r(GZ,` class
method.`),GZ.forEach(t),DKo=i(rl),uy=n(rl,"P",{});var DDe=s(uy);GKo=r(DDe,"This class cannot be instantiated directly using "),Nue=n(DDe,"CODE",{});var v1t=s(Nue);OKo=r(v1t,"__init__()"),v1t.forEach(t),VKo=r(DDe," (throws an error)."),DDe.forEach(t),XKo=i(rl),bt=n(rl,"DIV",{class:!0});var a0=s(bt);T(_y.$$.fragment,a0),zKo=i(a0),jue=n(a0,"P",{});var F1t=s(jue);WKo=r(F1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),F1t.forEach(t),QKo=i(a0),pd=n(a0,"P",{});var OZ=s(pd);HKo=r(OZ,`Note:
Loading a model from its configuration file does `),Due=n(OZ,"STRONG",{});var T1t=s(Due);UKo=r(T1t,"not"),T1t.forEach(t),JKo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(OZ,"A",{href:!0});var M1t=s(JX);YKo=r(M1t,"from_pretrained()"),M1t.forEach(t),KKo=r(OZ," to load the model weights."),OZ.forEach(t),ZKo=i(a0),T(B3.$$.fragment,a0),a0.forEach(t),eZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(by.$$.fragment,pa),oZo=i(pa),Gue=n(pa,"P",{});var E1t=s(Gue);rZo=r(E1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),E1t.forEach(t),tZo=i(pa),Oa=n(pa,"P",{});var n0=s(Oa);aZo=r(n0,"The model class to instantiate is selected based on the "),Oue=n(n0,"CODE",{});var C1t=s(Oue);nZo=r(C1t,"model_type"),C1t.forEach(t),sZo=r(n0,` property of the config object (either
passed as an argument or loaded from `),Vue=n(n0,"CODE",{});var w1t=s(Vue);lZo=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),iZo=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(n0,"CODE",{});var A1t=s(Xue);dZo=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),cZo=r(n0,":"),n0.forEach(t),fZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);I3=n(tl,"LI",{});var Fke=s(I3);zue=n(Fke,"STRONG",{});var y1t=s(zue);mZo=r(y1t,"data2vec-audio"),y1t.forEach(t),gZo=r(Fke," \u2014 "),YX=n(Fke,"A",{href:!0});var L1t=s(YX);hZo=r(L1t,"Data2VecAudioForAudioFrameClassification"),L1t.forEach(t),pZo=r(Fke," (Data2VecAudio model)"),Fke.forEach(t),uZo=i(tl),q3=n(tl,"LI",{});var Tke=s(q3);Wue=n(Tke,"STRONG",{});var x1t=s(Wue);_Zo=r(x1t,"unispeech-sat"),x1t.forEach(t),bZo=r(Tke," \u2014 "),KX=n(Tke,"A",{href:!0});var $1t=s(KX);vZo=r($1t,"UniSpeechSatForAudioFrameClassification"),$1t.forEach(t),FZo=r(Tke," (UniSpeechSat model)"),Tke.forEach(t),TZo=i(tl),N3=n(tl,"LI",{});var Mke=s(N3);Que=n(Mke,"STRONG",{});var k1t=s(Que);MZo=r(k1t,"wav2vec2"),k1t.forEach(t),EZo=r(Mke," \u2014 "),ZX=n(Mke,"A",{href:!0});var S1t=s(ZX);CZo=r(S1t,"Wav2Vec2ForAudioFrameClassification"),S1t.forEach(t),wZo=r(Mke," (Wav2Vec2 model)"),Mke.forEach(t),AZo=i(tl),j3=n(tl,"LI",{});var Eke=s(j3);Hue=n(Eke,"STRONG",{});var R1t=s(Hue);yZo=r(R1t,"wav2vec2-conformer"),R1t.forEach(t),LZo=r(Eke," \u2014 "),ez=n(Eke,"A",{href:!0});var P1t=s(ez);xZo=r(P1t,"Wav2Vec2ConformerForAudioFrameClassification"),P1t.forEach(t),$Zo=r(Eke," (Wav2Vec2-Conformer model)"),Eke.forEach(t),kZo=i(tl),D3=n(tl,"LI",{});var Cke=s(D3);Uue=n(Cke,"STRONG",{});var B1t=s(Uue);SZo=r(B1t,"wavlm"),B1t.forEach(t),RZo=r(Cke," \u2014 "),oz=n(Cke,"A",{href:!0});var I1t=s(oz);PZo=r(I1t,"WavLMForAudioFrameClassification"),I1t.forEach(t),BZo=r(Cke," (WavLM model)"),Cke.forEach(t),tl.forEach(t),IZo=i(pa),G3=n(pa,"P",{});var wke=s(G3);qZo=r(wke,"The model is set in evaluation mode by default using "),Jue=n(wke,"CODE",{});var q1t=s(Jue);NZo=r(q1t,"model.eval()"),q1t.forEach(t),jZo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(wke,"CODE",{});var N1t=s(Yue);DZo=r(N1t,"model.train()"),N1t.forEach(t),wke.forEach(t),GZo=i(pa),T(O3.$$.fragment,pa),pa.forEach(t),rl.forEach(t),qNe=i(f),ud=n(f,"H2",{class:!0});var GDe=s(ud);V3=n(GDe,"A",{id:!0,class:!0,href:!0});var j1t=s(V3);Kue=n(j1t,"SPAN",{});var D1t=s(Kue);T(vy.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),OZo=i(GDe),Zue=n(GDe,"SPAN",{});var G1t=s(Zue);VZo=r(G1t,"AutoModelForCTC"),G1t.forEach(t),GDe.forEach(t),NNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(Fy.$$.fragment,al),XZo=i(al),_d=n(al,"P",{});var VZ=s(_d);zZo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rz=n(VZ,"A",{href:!0});var O1t=s(rz);WZo=r(O1t,"from_pretrained()"),O1t.forEach(t),QZo=r(VZ," class method or the "),tz=n(VZ,"A",{href:!0});var V1t=s(tz);HZo=r(V1t,"from_config()"),V1t.forEach(t),UZo=r(VZ,` class
method.`),VZ.forEach(t),JZo=i(al),Ty=n(al,"P",{});var ODe=s(Ty);YZo=r(ODe,"This class cannot be instantiated directly using "),e_e=n(ODe,"CODE",{});var X1t=s(e_e);KZo=r(X1t,"__init__()"),X1t.forEach(t),ZZo=r(ODe," (throws an error)."),ODe.forEach(t),eer=i(al),vt=n(al,"DIV",{class:!0});var s0=s(vt);T(My.$$.fragment,s0),oer=i(s0),o_e=n(s0,"P",{});var z1t=s(o_e);rer=r(z1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),z1t.forEach(t),ter=i(s0),bd=n(s0,"P",{});var XZ=s(bd);aer=r(XZ,`Note:
Loading a model from its configuration file does `),r_e=n(XZ,"STRONG",{});var W1t=s(r_e);ner=r(W1t,"not"),W1t.forEach(t),ser=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(XZ,"A",{href:!0});var Q1t=s(az);ler=r(Q1t,"from_pretrained()"),Q1t.forEach(t),ier=r(XZ," to load the model weights."),XZ.forEach(t),der=i(s0),T(X3.$$.fragment,s0),s0.forEach(t),cer=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(Ey.$$.fragment,ua),fer=i(ua),t_e=n(ua,"P",{});var H1t=s(t_e);mer=r(H1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),H1t.forEach(t),ger=i(ua),Va=n(ua,"P",{});var l0=s(Va);her=r(l0,"The model class to instantiate is selected based on the "),a_e=n(l0,"CODE",{});var U1t=s(a_e);per=r(U1t,"model_type"),U1t.forEach(t),uer=r(l0,` property of the config object (either
passed as an argument or loaded from `),n_e=n(l0,"CODE",{});var J1t=s(n_e);_er=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),ber=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(l0,"CODE",{});var Y1t=s(s_e);ver=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Fer=r(l0,":"),l0.forEach(t),Ter=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);z3=n(Xe,"LI",{});var Ake=s(z3);l_e=n(Ake,"STRONG",{});var K1t=s(l_e);Mer=r(K1t,"data2vec-audio"),K1t.forEach(t),Eer=r(Ake," \u2014 "),nz=n(Ake,"A",{href:!0});var Z1t=s(nz);Cer=r(Z1t,"Data2VecAudioForCTC"),Z1t.forEach(t),wer=r(Ake," (Data2VecAudio model)"),Ake.forEach(t),Aer=i(Xe),W3=n(Xe,"LI",{});var yke=s(W3);i_e=n(yke,"STRONG",{});var e8t=s(i_e);yer=r(e8t,"hubert"),e8t.forEach(t),Ler=r(yke," \u2014 "),sz=n(yke,"A",{href:!0});var o8t=s(sz);xer=r(o8t,"HubertForCTC"),o8t.forEach(t),$er=r(yke," (Hubert model)"),yke.forEach(t),ker=i(Xe),Q3=n(Xe,"LI",{});var Lke=s(Q3);d_e=n(Lke,"STRONG",{});var r8t=s(d_e);Ser=r(r8t,"sew"),r8t.forEach(t),Rer=r(Lke," \u2014 "),lz=n(Lke,"A",{href:!0});var t8t=s(lz);Per=r(t8t,"SEWForCTC"),t8t.forEach(t),Ber=r(Lke," (SEW model)"),Lke.forEach(t),Ier=i(Xe),H3=n(Xe,"LI",{});var xke=s(H3);c_e=n(xke,"STRONG",{});var a8t=s(c_e);qer=r(a8t,"sew-d"),a8t.forEach(t),Ner=r(xke," \u2014 "),iz=n(xke,"A",{href:!0});var n8t=s(iz);jer=r(n8t,"SEWDForCTC"),n8t.forEach(t),Der=r(xke," (SEW-D model)"),xke.forEach(t),Ger=i(Xe),U3=n(Xe,"LI",{});var $ke=s(U3);f_e=n($ke,"STRONG",{});var s8t=s(f_e);Oer=r(s8t,"unispeech"),s8t.forEach(t),Ver=r($ke," \u2014 "),dz=n($ke,"A",{href:!0});var l8t=s(dz);Xer=r(l8t,"UniSpeechForCTC"),l8t.forEach(t),zer=r($ke," (UniSpeech model)"),$ke.forEach(t),Wer=i(Xe),J3=n(Xe,"LI",{});var kke=s(J3);m_e=n(kke,"STRONG",{});var i8t=s(m_e);Qer=r(i8t,"unispeech-sat"),i8t.forEach(t),Her=r(kke," \u2014 "),cz=n(kke,"A",{href:!0});var d8t=s(cz);Uer=r(d8t,"UniSpeechSatForCTC"),d8t.forEach(t),Jer=r(kke," (UniSpeechSat model)"),kke.forEach(t),Yer=i(Xe),Y3=n(Xe,"LI",{});var Ske=s(Y3);g_e=n(Ske,"STRONG",{});var c8t=s(g_e);Ker=r(c8t,"wav2vec2"),c8t.forEach(t),Zer=r(Ske," \u2014 "),fz=n(Ske,"A",{href:!0});var f8t=s(fz);eor=r(f8t,"Wav2Vec2ForCTC"),f8t.forEach(t),oor=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),ror=i(Xe),K3=n(Xe,"LI",{});var Rke=s(K3);h_e=n(Rke,"STRONG",{});var m8t=s(h_e);tor=r(m8t,"wav2vec2-conformer"),m8t.forEach(t),aor=r(Rke," \u2014 "),mz=n(Rke,"A",{href:!0});var g8t=s(mz);nor=r(g8t,"Wav2Vec2ConformerForCTC"),g8t.forEach(t),sor=r(Rke," (Wav2Vec2-Conformer model)"),Rke.forEach(t),lor=i(Xe),Z3=n(Xe,"LI",{});var Pke=s(Z3);p_e=n(Pke,"STRONG",{});var h8t=s(p_e);ior=r(h8t,"wavlm"),h8t.forEach(t),dor=r(Pke," \u2014 "),gz=n(Pke,"A",{href:!0});var p8t=s(gz);cor=r(p8t,"WavLMForCTC"),p8t.forEach(t),mor=r(Pke," (WavLM model)"),Pke.forEach(t),Xe.forEach(t),gor=i(ua),eF=n(ua,"P",{});var Bke=s(eF);hor=r(Bke,"The model is set in evaluation mode by default using "),u_e=n(Bke,"CODE",{});var u8t=s(u_e);por=r(u8t,"model.eval()"),u8t.forEach(t),uor=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=n(Bke,"CODE",{});var _8t=s(__e);_or=r(_8t,"model.train()"),_8t.forEach(t),Bke.forEach(t),bor=i(ua),T(oF.$$.fragment,ua),ua.forEach(t),al.forEach(t),jNe=i(f),vd=n(f,"H2",{class:!0});var VDe=s(vd);rF=n(VDe,"A",{id:!0,class:!0,href:!0});var b8t=s(rF);b_e=n(b8t,"SPAN",{});var v8t=s(b_e);T(Cy.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),vor=i(VDe),v_e=n(VDe,"SPAN",{});var F8t=s(v_e);For=r(F8t,"AutoModelForSpeechSeq2Seq"),F8t.forEach(t),VDe.forEach(t),DNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(wy.$$.fragment,nl),Tor=i(nl),Fd=n(nl,"P",{});var zZ=s(Fd);Mor=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hz=n(zZ,"A",{href:!0});var T8t=s(hz);Eor=r(T8t,"from_pretrained()"),T8t.forEach(t),Cor=r(zZ," class method or the "),pz=n(zZ,"A",{href:!0});var M8t=s(pz);wor=r(M8t,"from_config()"),M8t.forEach(t),Aor=r(zZ,` class
method.`),zZ.forEach(t),yor=i(nl),Ay=n(nl,"P",{});var XDe=s(Ay);Lor=r(XDe,"This class cannot be instantiated directly using "),F_e=n(XDe,"CODE",{});var E8t=s(F_e);xor=r(E8t,"__init__()"),E8t.forEach(t),$or=r(XDe," (throws an error)."),XDe.forEach(t),kor=i(nl),Ft=n(nl,"DIV",{class:!0});var i0=s(Ft);T(yy.$$.fragment,i0),Sor=i(i0),T_e=n(i0,"P",{});var C8t=s(T_e);Ror=r(C8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C8t.forEach(t),Por=i(i0),Td=n(i0,"P",{});var WZ=s(Td);Bor=r(WZ,`Note:
Loading a model from its configuration file does `),M_e=n(WZ,"STRONG",{});var w8t=s(M_e);Ior=r(w8t,"not"),w8t.forEach(t),qor=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(WZ,"A",{href:!0});var A8t=s(uz);Nor=r(A8t,"from_pretrained()"),A8t.forEach(t),jor=r(WZ," to load the model weights."),WZ.forEach(t),Dor=i(i0),T(tF.$$.fragment,i0),i0.forEach(t),Gor=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(Ly.$$.fragment,_a),Oor=i(_a),E_e=n(_a,"P",{});var y8t=s(E_e);Vor=r(y8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y8t.forEach(t),Xor=i(_a),Xa=n(_a,"P",{});var d0=s(Xa);zor=r(d0,"The model class to instantiate is selected based on the "),C_e=n(d0,"CODE",{});var L8t=s(C_e);Wor=r(L8t,"model_type"),L8t.forEach(t),Qor=r(d0,` property of the config object (either
passed as an argument or loaded from `),w_e=n(d0,"CODE",{});var x8t=s(w_e);Hor=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),Uor=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n(d0,"CODE",{});var $8t=s(A_e);Jor=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),Yor=r(d0,":"),d0.forEach(t),Kor=i(_a),xy=n(_a,"UL",{});var zDe=s(xy);aF=n(zDe,"LI",{});var Ike=s(aF);y_e=n(Ike,"STRONG",{});var k8t=s(y_e);Zor=r(k8t,"speech-encoder-decoder"),k8t.forEach(t),err=r(Ike," \u2014 "),_z=n(Ike,"A",{href:!0});var S8t=s(_z);orr=r(S8t,"SpeechEncoderDecoderModel"),S8t.forEach(t),rrr=r(Ike," (Speech Encoder decoder model)"),Ike.forEach(t),trr=i(zDe),nF=n(zDe,"LI",{});var qke=s(nF);L_e=n(qke,"STRONG",{});var R8t=s(L_e);arr=r(R8t,"speech_to_text"),R8t.forEach(t),nrr=r(qke," \u2014 "),bz=n(qke,"A",{href:!0});var P8t=s(bz);srr=r(P8t,"Speech2TextForConditionalGeneration"),P8t.forEach(t),lrr=r(qke," (Speech2Text model)"),qke.forEach(t),zDe.forEach(t),irr=i(_a),sF=n(_a,"P",{});var Nke=s(sF);drr=r(Nke,"The model is set in evaluation mode by default using "),x_e=n(Nke,"CODE",{});var B8t=s(x_e);crr=r(B8t,"model.eval()"),B8t.forEach(t),frr=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(Nke,"CODE",{});var I8t=s($_e);mrr=r(I8t,"model.train()"),I8t.forEach(t),Nke.forEach(t),grr=i(_a),T(lF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),GNe=i(f),Md=n(f,"H2",{class:!0});var WDe=s(Md);iF=n(WDe,"A",{id:!0,class:!0,href:!0});var q8t=s(iF);k_e=n(q8t,"SPAN",{});var N8t=s(k_e);T($y.$$.fragment,N8t),N8t.forEach(t),q8t.forEach(t),hrr=i(WDe),S_e=n(WDe,"SPAN",{});var j8t=s(S_e);prr=r(j8t,"AutoModelForAudioXVector"),j8t.forEach(t),WDe.forEach(t),ONe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(ky.$$.fragment,sl),urr=i(sl),Ed=n(sl,"P",{});var QZ=s(Ed);_rr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vz=n(QZ,"A",{href:!0});var D8t=s(vz);brr=r(D8t,"from_pretrained()"),D8t.forEach(t),vrr=r(QZ," class method or the "),Fz=n(QZ,"A",{href:!0});var G8t=s(Fz);Frr=r(G8t,"from_config()"),G8t.forEach(t),Trr=r(QZ,` class
method.`),QZ.forEach(t),Mrr=i(sl),Sy=n(sl,"P",{});var QDe=s(Sy);Err=r(QDe,"This class cannot be instantiated directly using "),R_e=n(QDe,"CODE",{});var O8t=s(R_e);Crr=r(O8t,"__init__()"),O8t.forEach(t),wrr=r(QDe," (throws an error)."),QDe.forEach(t),Arr=i(sl),Tt=n(sl,"DIV",{class:!0});var c0=s(Tt);T(Ry.$$.fragment,c0),yrr=i(c0),P_e=n(c0,"P",{});var V8t=s(P_e);Lrr=r(V8t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),V8t.forEach(t),xrr=i(c0),Cd=n(c0,"P",{});var HZ=s(Cd);$rr=r(HZ,`Note:
Loading a model from its configuration file does `),B_e=n(HZ,"STRONG",{});var X8t=s(B_e);krr=r(X8t,"not"),X8t.forEach(t),Srr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(HZ,"A",{href:!0});var z8t=s(Tz);Rrr=r(z8t,"from_pretrained()"),z8t.forEach(t),Prr=r(HZ," to load the model weights."),HZ.forEach(t),Brr=i(c0),T(dF.$$.fragment,c0),c0.forEach(t),Irr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(Py.$$.fragment,ba),qrr=i(ba),I_e=n(ba,"P",{});var W8t=s(I_e);Nrr=r(W8t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),W8t.forEach(t),jrr=i(ba),za=n(ba,"P",{});var f0=s(za);Drr=r(f0,"The model class to instantiate is selected based on the "),q_e=n(f0,"CODE",{});var Q8t=s(q_e);Grr=r(Q8t,"model_type"),Q8t.forEach(t),Orr=r(f0,` property of the config object (either
passed as an argument or loaded from `),N_e=n(f0,"CODE",{});var H8t=s(N_e);Vrr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),Xrr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(f0,"CODE",{});var U8t=s(j_e);zrr=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),Wrr=r(f0,":"),f0.forEach(t),Qrr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);cF=n(ll,"LI",{});var jke=s(cF);D_e=n(jke,"STRONG",{});var J8t=s(D_e);Hrr=r(J8t,"data2vec-audio"),J8t.forEach(t),Urr=r(jke," \u2014 "),Mz=n(jke,"A",{href:!0});var Y8t=s(Mz);Jrr=r(Y8t,"Data2VecAudioForXVector"),Y8t.forEach(t),Yrr=r(jke," (Data2VecAudio model)"),jke.forEach(t),Krr=i(ll),fF=n(ll,"LI",{});var Dke=s(fF);G_e=n(Dke,"STRONG",{});var K8t=s(G_e);Zrr=r(K8t,"unispeech-sat"),K8t.forEach(t),etr=r(Dke," \u2014 "),Ez=n(Dke,"A",{href:!0});var Z8t=s(Ez);otr=r(Z8t,"UniSpeechSatForXVector"),Z8t.forEach(t),rtr=r(Dke," (UniSpeechSat model)"),Dke.forEach(t),ttr=i(ll),mF=n(ll,"LI",{});var Gke=s(mF);O_e=n(Gke,"STRONG",{});var ebt=s(O_e);atr=r(ebt,"wav2vec2"),ebt.forEach(t),ntr=r(Gke," \u2014 "),Cz=n(Gke,"A",{href:!0});var obt=s(Cz);str=r(obt,"Wav2Vec2ForXVector"),obt.forEach(t),ltr=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),itr=i(ll),gF=n(ll,"LI",{});var Oke=s(gF);V_e=n(Oke,"STRONG",{});var rbt=s(V_e);dtr=r(rbt,"wav2vec2-conformer"),rbt.forEach(t),ctr=r(Oke," \u2014 "),wz=n(Oke,"A",{href:!0});var tbt=s(wz);ftr=r(tbt,"Wav2Vec2ConformerForXVector"),tbt.forEach(t),mtr=r(Oke," (Wav2Vec2-Conformer model)"),Oke.forEach(t),gtr=i(ll),hF=n(ll,"LI",{});var Vke=s(hF);X_e=n(Vke,"STRONG",{});var abt=s(X_e);htr=r(abt,"wavlm"),abt.forEach(t),ptr=r(Vke," \u2014 "),Az=n(Vke,"A",{href:!0});var nbt=s(Az);utr=r(nbt,"WavLMForXVector"),nbt.forEach(t),_tr=r(Vke," (WavLM model)"),Vke.forEach(t),ll.forEach(t),btr=i(ba),pF=n(ba,"P",{});var Xke=s(pF);vtr=r(Xke,"The model is set in evaluation mode by default using "),z_e=n(Xke,"CODE",{});var sbt=s(z_e);Ftr=r(sbt,"model.eval()"),sbt.forEach(t),Ttr=r(Xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(Xke,"CODE",{});var lbt=s(W_e);Mtr=r(lbt,"model.train()"),lbt.forEach(t),Xke.forEach(t),Etr=i(ba),T(uF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),VNe=i(f),wd=n(f,"H2",{class:!0});var HDe=s(wd);_F=n(HDe,"A",{id:!0,class:!0,href:!0});var ibt=s(_F);Q_e=n(ibt,"SPAN",{});var dbt=s(Q_e);T(By.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),Ctr=i(HDe),H_e=n(HDe,"SPAN",{});var cbt=s(H_e);wtr=r(cbt,"AutoModelForMaskedImageModeling"),cbt.forEach(t),HDe.forEach(t),XNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(Iy.$$.fragment,il),Atr=i(il),Ad=n(il,"P",{});var UZ=s(Ad);ytr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yz=n(UZ,"A",{href:!0});var fbt=s(yz);Ltr=r(fbt,"from_pretrained()"),fbt.forEach(t),xtr=r(UZ," class method or the "),Lz=n(UZ,"A",{href:!0});var mbt=s(Lz);$tr=r(mbt,"from_config()"),mbt.forEach(t),ktr=r(UZ,` class
method.`),UZ.forEach(t),Str=i(il),qy=n(il,"P",{});var UDe=s(qy);Rtr=r(UDe,"This class cannot be instantiated directly using "),U_e=n(UDe,"CODE",{});var gbt=s(U_e);Ptr=r(gbt,"__init__()"),gbt.forEach(t),Btr=r(UDe," (throws an error)."),UDe.forEach(t),Itr=i(il),Mt=n(il,"DIV",{class:!0});var m0=s(Mt);T(Ny.$$.fragment,m0),qtr=i(m0),J_e=n(m0,"P",{});var hbt=s(J_e);Ntr=r(hbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hbt.forEach(t),jtr=i(m0),yd=n(m0,"P",{});var JZ=s(yd);Dtr=r(JZ,`Note:
Loading a model from its configuration file does `),Y_e=n(JZ,"STRONG",{});var pbt=s(Y_e);Gtr=r(pbt,"not"),pbt.forEach(t),Otr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(JZ,"A",{href:!0});var ubt=s(xz);Vtr=r(ubt,"from_pretrained()"),ubt.forEach(t),Xtr=r(JZ," to load the model weights."),JZ.forEach(t),ztr=i(m0),T(bF.$$.fragment,m0),m0.forEach(t),Wtr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(jy.$$.fragment,va),Qtr=i(va),K_e=n(va,"P",{});var _bt=s(K_e);Htr=r(_bt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_bt.forEach(t),Utr=i(va),Wa=n(va,"P",{});var g0=s(Wa);Jtr=r(g0,"The model class to instantiate is selected based on the "),Z_e=n(g0,"CODE",{});var bbt=s(Z_e);Ytr=r(bbt,"model_type"),bbt.forEach(t),Ktr=r(g0,` property of the config object (either
passed as an argument or loaded from `),e1e=n(g0,"CODE",{});var vbt=s(e1e);Ztr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),ear=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(g0,"CODE",{});var Fbt=s(o1e);oar=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),rar=r(g0,":"),g0.forEach(t),tar=i(va),Ld=n(va,"UL",{});var YZ=s(Ld);vF=n(YZ,"LI",{});var zke=s(vF);r1e=n(zke,"STRONG",{});var Tbt=s(r1e);aar=r(Tbt,"deit"),Tbt.forEach(t),nar=r(zke," \u2014 "),$z=n(zke,"A",{href:!0});var Mbt=s($z);sar=r(Mbt,"DeiTForMaskedImageModeling"),Mbt.forEach(t),lar=r(zke," (DeiT model)"),zke.forEach(t),iar=i(YZ),FF=n(YZ,"LI",{});var Wke=s(FF);t1e=n(Wke,"STRONG",{});var Ebt=s(t1e);dar=r(Ebt,"swin"),Ebt.forEach(t),car=r(Wke," \u2014 "),kz=n(Wke,"A",{href:!0});var Cbt=s(kz);far=r(Cbt,"SwinForMaskedImageModeling"),Cbt.forEach(t),mar=r(Wke," (Swin model)"),Wke.forEach(t),gar=i(YZ),TF=n(YZ,"LI",{});var Qke=s(TF);a1e=n(Qke,"STRONG",{});var wbt=s(a1e);har=r(wbt,"vit"),wbt.forEach(t),par=r(Qke," \u2014 "),Sz=n(Qke,"A",{href:!0});var Abt=s(Sz);uar=r(Abt,"ViTForMaskedImageModeling"),Abt.forEach(t),_ar=r(Qke," (ViT model)"),Qke.forEach(t),YZ.forEach(t),bar=i(va),MF=n(va,"P",{});var Hke=s(MF);Far=r(Hke,"The model is set in evaluation mode by default using "),n1e=n(Hke,"CODE",{});var ybt=s(n1e);Tar=r(ybt,"model.eval()"),ybt.forEach(t),Mar=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s1e=n(Hke,"CODE",{});var Lbt=s(s1e);Ear=r(Lbt,"model.train()"),Lbt.forEach(t),Hke.forEach(t),Car=i(va),T(EF.$$.fragment,va),va.forEach(t),il.forEach(t),zNe=i(f),xd=n(f,"H2",{class:!0});var JDe=s(xd);CF=n(JDe,"A",{id:!0,class:!0,href:!0});var xbt=s(CF);l1e=n(xbt,"SPAN",{});var $bt=s(l1e);T(Dy.$$.fragment,$bt),$bt.forEach(t),xbt.forEach(t),war=i(JDe),i1e=n(JDe,"SPAN",{});var kbt=s(i1e);Aar=r(kbt,"AutoModelForObjectDetection"),kbt.forEach(t),JDe.forEach(t),WNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(Gy.$$.fragment,dl),yar=i(dl),$d=n(dl,"P",{});var KZ=s($d);Lar=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Rz=n(KZ,"A",{href:!0});var Sbt=s(Rz);xar=r(Sbt,"from_pretrained()"),Sbt.forEach(t),$ar=r(KZ," class method or the "),Pz=n(KZ,"A",{href:!0});var Rbt=s(Pz);kar=r(Rbt,"from_config()"),Rbt.forEach(t),Sar=r(KZ,` class
method.`),KZ.forEach(t),Rar=i(dl),Oy=n(dl,"P",{});var YDe=s(Oy);Par=r(YDe,"This class cannot be instantiated directly using "),d1e=n(YDe,"CODE",{});var Pbt=s(d1e);Bar=r(Pbt,"__init__()"),Pbt.forEach(t),Iar=r(YDe," (throws an error)."),YDe.forEach(t),qar=i(dl),Et=n(dl,"DIV",{class:!0});var h0=s(Et);T(Vy.$$.fragment,h0),Nar=i(h0),c1e=n(h0,"P",{});var Bbt=s(c1e);jar=r(Bbt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bbt.forEach(t),Dar=i(h0),kd=n(h0,"P",{});var ZZ=s(kd);Gar=r(ZZ,`Note:
Loading a model from its configuration file does `),f1e=n(ZZ,"STRONG",{});var Ibt=s(f1e);Oar=r(Ibt,"not"),Ibt.forEach(t),Var=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(ZZ,"A",{href:!0});var qbt=s(Bz);Xar=r(qbt,"from_pretrained()"),qbt.forEach(t),zar=r(ZZ," to load the model weights."),ZZ.forEach(t),War=i(h0),T(wF.$$.fragment,h0),h0.forEach(t),Qar=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(Xy.$$.fragment,Fa),Har=i(Fa),m1e=n(Fa,"P",{});var Nbt=s(m1e);Uar=r(Nbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Nbt.forEach(t),Jar=i(Fa),Qa=n(Fa,"P",{});var p0=s(Qa);Yar=r(p0,"The model class to instantiate is selected based on the "),g1e=n(p0,"CODE",{});var jbt=s(g1e);Kar=r(jbt,"model_type"),jbt.forEach(t),Zar=r(p0,` property of the config object (either
passed as an argument or loaded from `),h1e=n(p0,"CODE",{});var Dbt=s(h1e);enr=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),onr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(p0,"CODE",{});var Gbt=s(p1e);rnr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),tnr=r(p0,":"),p0.forEach(t),anr=i(Fa),zy=n(Fa,"UL",{});var KDe=s(zy);AF=n(KDe,"LI",{});var Uke=s(AF);u1e=n(Uke,"STRONG",{});var Obt=s(u1e);nnr=r(Obt,"detr"),Obt.forEach(t),snr=r(Uke," \u2014 "),Iz=n(Uke,"A",{href:!0});var Vbt=s(Iz);lnr=r(Vbt,"DetrForObjectDetection"),Vbt.forEach(t),inr=r(Uke," (DETR model)"),Uke.forEach(t),dnr=i(KDe),yF=n(KDe,"LI",{});var Jke=s(yF);_1e=n(Jke,"STRONG",{});var Xbt=s(_1e);cnr=r(Xbt,"yolos"),Xbt.forEach(t),fnr=r(Jke," \u2014 "),qz=n(Jke,"A",{href:!0});var zbt=s(qz);mnr=r(zbt,"YolosForObjectDetection"),zbt.forEach(t),gnr=r(Jke," (YOLOS model)"),Jke.forEach(t),KDe.forEach(t),hnr=i(Fa),LF=n(Fa,"P",{});var Yke=s(LF);pnr=r(Yke,"The model is set in evaluation mode by default using "),b1e=n(Yke,"CODE",{});var Wbt=s(b1e);unr=r(Wbt,"model.eval()"),Wbt.forEach(t),_nr=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=n(Yke,"CODE",{});var Qbt=s(v1e);bnr=r(Qbt,"model.train()"),Qbt.forEach(t),Yke.forEach(t),vnr=i(Fa),T(xF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),QNe=i(f),Sd=n(f,"H2",{class:!0});var ZDe=s(Sd);$F=n(ZDe,"A",{id:!0,class:!0,href:!0});var Hbt=s($F);F1e=n(Hbt,"SPAN",{});var Ubt=s(F1e);T(Wy.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),Fnr=i(ZDe),T1e=n(ZDe,"SPAN",{});var Jbt=s(T1e);Tnr=r(Jbt,"AutoModelForImageSegmentation"),Jbt.forEach(t),ZDe.forEach(t),HNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Qy.$$.fragment,cl),Mnr=i(cl),Rd=n(cl,"P",{});var eee=s(Rd);Enr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Nz=n(eee,"A",{href:!0});var Ybt=s(Nz);Cnr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),wnr=r(eee," class method or the "),jz=n(eee,"A",{href:!0});var Kbt=s(jz);Anr=r(Kbt,"from_config()"),Kbt.forEach(t),ynr=r(eee,` class
method.`),eee.forEach(t),Lnr=i(cl),Hy=n(cl,"P",{});var eGe=s(Hy);xnr=r(eGe,"This class cannot be instantiated directly using "),M1e=n(eGe,"CODE",{});var Zbt=s(M1e);$nr=r(Zbt,"__init__()"),Zbt.forEach(t),knr=r(eGe," (throws an error)."),eGe.forEach(t),Snr=i(cl),Ct=n(cl,"DIV",{class:!0});var u0=s(Ct);T(Uy.$$.fragment,u0),Rnr=i(u0),E1e=n(u0,"P",{});var e2t=s(E1e);Pnr=r(e2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),e2t.forEach(t),Bnr=i(u0),Pd=n(u0,"P",{});var oee=s(Pd);Inr=r(oee,`Note:
Loading a model from its configuration file does `),C1e=n(oee,"STRONG",{});var o2t=s(C1e);qnr=r(o2t,"not"),o2t.forEach(t),Nnr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(oee,"A",{href:!0});var r2t=s(Dz);jnr=r(r2t,"from_pretrained()"),r2t.forEach(t),Dnr=r(oee," to load the model weights."),oee.forEach(t),Gnr=i(u0),T(kF.$$.fragment,u0),u0.forEach(t),Onr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Jy.$$.fragment,Ta),Vnr=i(Ta),w1e=n(Ta,"P",{});var t2t=s(w1e);Xnr=r(t2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),t2t.forEach(t),znr=i(Ta),Ha=n(Ta,"P",{});var _0=s(Ha);Wnr=r(_0,"The model class to instantiate is selected based on the "),A1e=n(_0,"CODE",{});var a2t=s(A1e);Qnr=r(a2t,"model_type"),a2t.forEach(t),Hnr=r(_0,` property of the config object (either
passed as an argument or loaded from `),y1e=n(_0,"CODE",{});var n2t=s(y1e);Unr=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),Jnr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(_0,"CODE",{});var s2t=s(L1e);Ynr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),Knr=r(_0,":"),_0.forEach(t),Znr=i(Ta),x1e=n(Ta,"UL",{});var l2t=s(x1e);SF=n(l2t,"LI",{});var Kke=s(SF);$1e=n(Kke,"STRONG",{});var i2t=s($1e);esr=r(i2t,"detr"),i2t.forEach(t),osr=r(Kke," \u2014 "),Gz=n(Kke,"A",{href:!0});var d2t=s(Gz);rsr=r(d2t,"DetrForSegmentation"),d2t.forEach(t),tsr=r(Kke," (DETR model)"),Kke.forEach(t),l2t.forEach(t),asr=i(Ta),RF=n(Ta,"P",{});var Zke=s(RF);nsr=r(Zke,"The model is set in evaluation mode by default using "),k1e=n(Zke,"CODE",{});var c2t=s(k1e);ssr=r(c2t,"model.eval()"),c2t.forEach(t),lsr=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=n(Zke,"CODE",{});var f2t=s(S1e);isr=r(f2t,"model.train()"),f2t.forEach(t),Zke.forEach(t),dsr=i(Ta),T(PF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),UNe=i(f),Bd=n(f,"H2",{class:!0});var oGe=s(Bd);BF=n(oGe,"A",{id:!0,class:!0,href:!0});var m2t=s(BF);R1e=n(m2t,"SPAN",{});var g2t=s(R1e);T(Yy.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),csr=i(oGe),P1e=n(oGe,"SPAN",{});var h2t=s(P1e);fsr=r(h2t,"AutoModelForSemanticSegmentation"),h2t.forEach(t),oGe.forEach(t),JNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Ky.$$.fragment,fl),msr=i(fl),Id=n(fl,"P",{});var ree=s(Id);gsr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Oz=n(ree,"A",{href:!0});var p2t=s(Oz);hsr=r(p2t,"from_pretrained()"),p2t.forEach(t),psr=r(ree," class method or the "),Vz=n(ree,"A",{href:!0});var u2t=s(Vz);usr=r(u2t,"from_config()"),u2t.forEach(t),_sr=r(ree,` class
method.`),ree.forEach(t),bsr=i(fl),Zy=n(fl,"P",{});var rGe=s(Zy);vsr=r(rGe,"This class cannot be instantiated directly using "),B1e=n(rGe,"CODE",{});var _2t=s(B1e);Fsr=r(_2t,"__init__()"),_2t.forEach(t),Tsr=r(rGe," (throws an error)."),rGe.forEach(t),Msr=i(fl),wt=n(fl,"DIV",{class:!0});var b0=s(wt);T(eL.$$.fragment,b0),Esr=i(b0),I1e=n(b0,"P",{});var b2t=s(I1e);Csr=r(b2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),b2t.forEach(t),wsr=i(b0),qd=n(b0,"P",{});var tee=s(qd);Asr=r(tee,`Note:
Loading a model from its configuration file does `),q1e=n(tee,"STRONG",{});var v2t=s(q1e);ysr=r(v2t,"not"),v2t.forEach(t),Lsr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(tee,"A",{href:!0});var F2t=s(Xz);xsr=r(F2t,"from_pretrained()"),F2t.forEach(t),$sr=r(tee," to load the model weights."),tee.forEach(t),ksr=i(b0),T(IF.$$.fragment,b0),b0.forEach(t),Ssr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(oL.$$.fragment,Ma),Rsr=i(Ma),N1e=n(Ma,"P",{});var T2t=s(N1e);Psr=r(T2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),T2t.forEach(t),Bsr=i(Ma),Ua=n(Ma,"P",{});var v0=s(Ua);Isr=r(v0,"The model class to instantiate is selected based on the "),j1e=n(v0,"CODE",{});var M2t=s(j1e);qsr=r(M2t,"model_type"),M2t.forEach(t),Nsr=r(v0,` property of the config object (either
passed as an argument or loaded from `),D1e=n(v0,"CODE",{});var E2t=s(D1e);jsr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),Dsr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(v0,"CODE",{});var C2t=s(G1e);Gsr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),Osr=r(v0,":"),v0.forEach(t),Vsr=i(Ma),Ja=n(Ma,"UL",{});var F0=s(Ja);qF=n(F0,"LI",{});var eSe=s(qF);O1e=n(eSe,"STRONG",{});var w2t=s(O1e);Xsr=r(w2t,"beit"),w2t.forEach(t),zsr=r(eSe," \u2014 "),zz=n(eSe,"A",{href:!0});var A2t=s(zz);Wsr=r(A2t,"BeitForSemanticSegmentation"),A2t.forEach(t),Qsr=r(eSe," (BEiT model)"),eSe.forEach(t),Hsr=i(F0),NF=n(F0,"LI",{});var oSe=s(NF);V1e=n(oSe,"STRONG",{});var y2t=s(V1e);Usr=r(y2t,"data2vec-vision"),y2t.forEach(t),Jsr=r(oSe," \u2014 "),Wz=n(oSe,"A",{href:!0});var L2t=s(Wz);Ysr=r(L2t,"Data2VecVisionForSemanticSegmentation"),L2t.forEach(t),Ksr=r(oSe," (Data2VecVision model)"),oSe.forEach(t),Zsr=i(F0),jF=n(F0,"LI",{});var rSe=s(jF);X1e=n(rSe,"STRONG",{});var x2t=s(X1e);elr=r(x2t,"dpt"),x2t.forEach(t),olr=r(rSe," \u2014 "),Qz=n(rSe,"A",{href:!0});var $2t=s(Qz);rlr=r($2t,"DPTForSemanticSegmentation"),$2t.forEach(t),tlr=r(rSe," (DPT model)"),rSe.forEach(t),alr=i(F0),DF=n(F0,"LI",{});var tSe=s(DF);z1e=n(tSe,"STRONG",{});var k2t=s(z1e);nlr=r(k2t,"segformer"),k2t.forEach(t),slr=r(tSe," \u2014 "),Hz=n(tSe,"A",{href:!0});var S2t=s(Hz);llr=r(S2t,"SegformerForSemanticSegmentation"),S2t.forEach(t),ilr=r(tSe," (SegFormer model)"),tSe.forEach(t),F0.forEach(t),dlr=i(Ma),GF=n(Ma,"P",{});var aSe=s(GF);clr=r(aSe,"The model is set in evaluation mode by default using "),W1e=n(aSe,"CODE",{});var R2t=s(W1e);flr=r(R2t,"model.eval()"),R2t.forEach(t),mlr=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q1e=n(aSe,"CODE",{});var P2t=s(Q1e);glr=r(P2t,"model.train()"),P2t.forEach(t),aSe.forEach(t),hlr=i(Ma),T(OF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),YNe=i(f),Nd=n(f,"H2",{class:!0});var tGe=s(Nd);VF=n(tGe,"A",{id:!0,class:!0,href:!0});var B2t=s(VF);H1e=n(B2t,"SPAN",{});var I2t=s(H1e);T(rL.$$.fragment,I2t),I2t.forEach(t),B2t.forEach(t),plr=i(tGe),U1e=n(tGe,"SPAN",{});var q2t=s(U1e);ulr=r(q2t,"AutoModelForInstanceSegmentation"),q2t.forEach(t),tGe.forEach(t),KNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(tL.$$.fragment,ml),_lr=i(ml),jd=n(ml,"P",{});var aee=s(jd);blr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Uz=n(aee,"A",{href:!0});var N2t=s(Uz);vlr=r(N2t,"from_pretrained()"),N2t.forEach(t),Flr=r(aee," class method or the "),Jz=n(aee,"A",{href:!0});var j2t=s(Jz);Tlr=r(j2t,"from_config()"),j2t.forEach(t),Mlr=r(aee,` class
method.`),aee.forEach(t),Elr=i(ml),aL=n(ml,"P",{});var aGe=s(aL);Clr=r(aGe,"This class cannot be instantiated directly using "),J1e=n(aGe,"CODE",{});var D2t=s(J1e);wlr=r(D2t,"__init__()"),D2t.forEach(t),Alr=r(aGe," (throws an error)."),aGe.forEach(t),ylr=i(ml),At=n(ml,"DIV",{class:!0});var T0=s(At);T(nL.$$.fragment,T0),Llr=i(T0),Y1e=n(T0,"P",{});var G2t=s(Y1e);xlr=r(G2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),G2t.forEach(t),$lr=i(T0),Dd=n(T0,"P",{});var nee=s(Dd);klr=r(nee,`Note:
Loading a model from its configuration file does `),K1e=n(nee,"STRONG",{});var O2t=s(K1e);Slr=r(O2t,"not"),O2t.forEach(t),Rlr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(nee,"A",{href:!0});var V2t=s(Yz);Plr=r(V2t,"from_pretrained()"),V2t.forEach(t),Blr=r(nee," to load the model weights."),nee.forEach(t),Ilr=i(T0),T(XF.$$.fragment,T0),T0.forEach(t),qlr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(sL.$$.fragment,Ea),Nlr=i(Ea),Z1e=n(Ea,"P",{});var X2t=s(Z1e);jlr=r(X2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),X2t.forEach(t),Dlr=i(Ea),Ya=n(Ea,"P",{});var M0=s(Ya);Glr=r(M0,"The model class to instantiate is selected based on the "),e8e=n(M0,"CODE",{});var z2t=s(e8e);Olr=r(z2t,"model_type"),z2t.forEach(t),Vlr=r(M0,` property of the config object (either
passed as an argument or loaded from `),o8e=n(M0,"CODE",{});var W2t=s(o8e);Xlr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),zlr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(M0,"CODE",{});var Q2t=s(r8e);Wlr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),Qlr=r(M0,":"),M0.forEach(t),Hlr=i(Ea),t8e=n(Ea,"UL",{});var H2t=s(t8e);zF=n(H2t,"LI",{});var nSe=s(zF);a8e=n(nSe,"STRONG",{});var U2t=s(a8e);Ulr=r(U2t,"maskformer"),U2t.forEach(t),Jlr=r(nSe," \u2014 "),Kz=n(nSe,"A",{href:!0});var J2t=s(Kz);Ylr=r(J2t,"MaskFormerForInstanceSegmentation"),J2t.forEach(t),Klr=r(nSe," (MaskFormer model)"),nSe.forEach(t),H2t.forEach(t),Zlr=i(Ea),WF=n(Ea,"P",{});var sSe=s(WF);eir=r(sSe,"The model is set in evaluation mode by default using "),n8e=n(sSe,"CODE",{});var Y2t=s(n8e);oir=r(Y2t,"model.eval()"),Y2t.forEach(t),rir=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s8e=n(sSe,"CODE",{});var K2t=s(s8e);tir=r(K2t,"model.train()"),K2t.forEach(t),sSe.forEach(t),air=i(Ea),T(QF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),ZNe=i(f),Gd=n(f,"H2",{class:!0});var nGe=s(Gd);HF=n(nGe,"A",{id:!0,class:!0,href:!0});var Z2t=s(HF);l8e=n(Z2t,"SPAN",{});var evt=s(l8e);T(lL.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),nir=i(nGe),i8e=n(nGe,"SPAN",{});var ovt=s(i8e);sir=r(ovt,"TFAutoModel"),ovt.forEach(t),nGe.forEach(t),eje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(iL.$$.fragment,gl),lir=i(gl),Od=n(gl,"P",{});var see=s(Od);iir=r(see,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zz=n(see,"A",{href:!0});var rvt=s(Zz);dir=r(rvt,"from_pretrained()"),rvt.forEach(t),cir=r(see," class method or the "),eW=n(see,"A",{href:!0});var tvt=s(eW);fir=r(tvt,"from_config()"),tvt.forEach(t),mir=r(see,` class
method.`),see.forEach(t),gir=i(gl),dL=n(gl,"P",{});var sGe=s(dL);hir=r(sGe,"This class cannot be instantiated directly using "),d8e=n(sGe,"CODE",{});var avt=s(d8e);pir=r(avt,"__init__()"),avt.forEach(t),uir=r(sGe," (throws an error)."),sGe.forEach(t),_ir=i(gl),yt=n(gl,"DIV",{class:!0});var E0=s(yt);T(cL.$$.fragment,E0),bir=i(E0),c8e=n(E0,"P",{});var nvt=s(c8e);vir=r(nvt,"Instantiates one of the base model classes of the library from a configuration."),nvt.forEach(t),Fir=i(E0),Vd=n(E0,"P",{});var lee=s(Vd);Tir=r(lee,`Note:
Loading a model from its configuration file does `),f8e=n(lee,"STRONG",{});var svt=s(f8e);Mir=r(svt,"not"),svt.forEach(t),Eir=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(lee,"A",{href:!0});var lvt=s(oW);Cir=r(lvt,"from_pretrained()"),lvt.forEach(t),wir=r(lee," to load the model weights."),lee.forEach(t),Air=i(E0),T(UF.$$.fragment,E0),E0.forEach(t),yir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(fL.$$.fragment,hl),Lir=i(hl),m8e=n(hl,"P",{});var ivt=s(m8e);xir=r(ivt,"Instantiate one of the base model classes of the library from a pretrained model."),ivt.forEach(t),$ir=i(hl),Ka=n(hl,"P",{});var C0=s(Ka);kir=r(C0,"The model class to instantiate is selected based on the "),g8e=n(C0,"CODE",{});var dvt=s(g8e);Sir=r(dvt,"model_type"),dvt.forEach(t),Rir=r(C0,` property of the config object (either
passed as an argument or loaded from `),h8e=n(C0,"CODE",{});var cvt=s(h8e);Pir=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),Bir=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=n(C0,"CODE",{});var fvt=s(p8e);Iir=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),qir=r(C0,":"),C0.forEach(t),Nir=i(hl),N=n(hl,"UL",{});var D=s(N);JF=n(D,"LI",{});var lSe=s(JF);u8e=n(lSe,"STRONG",{});var mvt=s(u8e);jir=r(mvt,"albert"),mvt.forEach(t),Dir=r(lSe," \u2014 "),rW=n(lSe,"A",{href:!0});var gvt=s(rW);Gir=r(gvt,"TFAlbertModel"),gvt.forEach(t),Oir=r(lSe," (ALBERT model)"),lSe.forEach(t),Vir=i(D),YF=n(D,"LI",{});var iSe=s(YF);_8e=n(iSe,"STRONG",{});var hvt=s(_8e);Xir=r(hvt,"bart"),hvt.forEach(t),zir=r(iSe," \u2014 "),tW=n(iSe,"A",{href:!0});var pvt=s(tW);Wir=r(pvt,"TFBartModel"),pvt.forEach(t),Qir=r(iSe," (BART model)"),iSe.forEach(t),Hir=i(D),KF=n(D,"LI",{});var dSe=s(KF);b8e=n(dSe,"STRONG",{});var uvt=s(b8e);Uir=r(uvt,"bert"),uvt.forEach(t),Jir=r(dSe," \u2014 "),aW=n(dSe,"A",{href:!0});var _vt=s(aW);Yir=r(_vt,"TFBertModel"),_vt.forEach(t),Kir=r(dSe," (BERT model)"),dSe.forEach(t),Zir=i(D),ZF=n(D,"LI",{});var cSe=s(ZF);v8e=n(cSe,"STRONG",{});var bvt=s(v8e);edr=r(bvt,"blenderbot"),bvt.forEach(t),odr=r(cSe," \u2014 "),nW=n(cSe,"A",{href:!0});var vvt=s(nW);rdr=r(vvt,"TFBlenderbotModel"),vvt.forEach(t),tdr=r(cSe," (Blenderbot model)"),cSe.forEach(t),adr=i(D),eT=n(D,"LI",{});var fSe=s(eT);F8e=n(fSe,"STRONG",{});var Fvt=s(F8e);ndr=r(Fvt,"blenderbot-small"),Fvt.forEach(t),sdr=r(fSe," \u2014 "),sW=n(fSe,"A",{href:!0});var Tvt=s(sW);ldr=r(Tvt,"TFBlenderbotSmallModel"),Tvt.forEach(t),idr=r(fSe," (BlenderbotSmall model)"),fSe.forEach(t),ddr=i(D),oT=n(D,"LI",{});var mSe=s(oT);T8e=n(mSe,"STRONG",{});var Mvt=s(T8e);cdr=r(Mvt,"camembert"),Mvt.forEach(t),fdr=r(mSe," \u2014 "),lW=n(mSe,"A",{href:!0});var Evt=s(lW);mdr=r(Evt,"TFCamembertModel"),Evt.forEach(t),gdr=r(mSe," (CamemBERT model)"),mSe.forEach(t),hdr=i(D),rT=n(D,"LI",{});var gSe=s(rT);M8e=n(gSe,"STRONG",{});var Cvt=s(M8e);pdr=r(Cvt,"clip"),Cvt.forEach(t),udr=r(gSe," \u2014 "),iW=n(gSe,"A",{href:!0});var wvt=s(iW);_dr=r(wvt,"TFCLIPModel"),wvt.forEach(t),bdr=r(gSe," (CLIP model)"),gSe.forEach(t),vdr=i(D),tT=n(D,"LI",{});var hSe=s(tT);E8e=n(hSe,"STRONG",{});var Avt=s(E8e);Fdr=r(Avt,"convbert"),Avt.forEach(t),Tdr=r(hSe," \u2014 "),dW=n(hSe,"A",{href:!0});var yvt=s(dW);Mdr=r(yvt,"TFConvBertModel"),yvt.forEach(t),Edr=r(hSe," (ConvBERT model)"),hSe.forEach(t),Cdr=i(D),aT=n(D,"LI",{});var pSe=s(aT);C8e=n(pSe,"STRONG",{});var Lvt=s(C8e);wdr=r(Lvt,"convnext"),Lvt.forEach(t),Adr=r(pSe," \u2014 "),cW=n(pSe,"A",{href:!0});var xvt=s(cW);ydr=r(xvt,"TFConvNextModel"),xvt.forEach(t),Ldr=r(pSe," (ConvNext model)"),pSe.forEach(t),xdr=i(D),nT=n(D,"LI",{});var uSe=s(nT);w8e=n(uSe,"STRONG",{});var $vt=s(w8e);$dr=r($vt,"ctrl"),$vt.forEach(t),kdr=r(uSe," \u2014 "),fW=n(uSe,"A",{href:!0});var kvt=s(fW);Sdr=r(kvt,"TFCTRLModel"),kvt.forEach(t),Rdr=r(uSe," (CTRL model)"),uSe.forEach(t),Pdr=i(D),sT=n(D,"LI",{});var _Se=s(sT);A8e=n(_Se,"STRONG",{});var Svt=s(A8e);Bdr=r(Svt,"data2vec-vision"),Svt.forEach(t),Idr=r(_Se," \u2014 "),mW=n(_Se,"A",{href:!0});var Rvt=s(mW);qdr=r(Rvt,"TFData2VecVisionModel"),Rvt.forEach(t),Ndr=r(_Se," (Data2VecVision model)"),_Se.forEach(t),jdr=i(D),lT=n(D,"LI",{});var bSe=s(lT);y8e=n(bSe,"STRONG",{});var Pvt=s(y8e);Ddr=r(Pvt,"deberta"),Pvt.forEach(t),Gdr=r(bSe," \u2014 "),gW=n(bSe,"A",{href:!0});var Bvt=s(gW);Odr=r(Bvt,"TFDebertaModel"),Bvt.forEach(t),Vdr=r(bSe," (DeBERTa model)"),bSe.forEach(t),Xdr=i(D),iT=n(D,"LI",{});var vSe=s(iT);L8e=n(vSe,"STRONG",{});var Ivt=s(L8e);zdr=r(Ivt,"deberta-v2"),Ivt.forEach(t),Wdr=r(vSe," \u2014 "),hW=n(vSe,"A",{href:!0});var qvt=s(hW);Qdr=r(qvt,"TFDebertaV2Model"),qvt.forEach(t),Hdr=r(vSe," (DeBERTa-v2 model)"),vSe.forEach(t),Udr=i(D),dT=n(D,"LI",{});var FSe=s(dT);x8e=n(FSe,"STRONG",{});var Nvt=s(x8e);Jdr=r(Nvt,"distilbert"),Nvt.forEach(t),Ydr=r(FSe," \u2014 "),pW=n(FSe,"A",{href:!0});var jvt=s(pW);Kdr=r(jvt,"TFDistilBertModel"),jvt.forEach(t),Zdr=r(FSe," (DistilBERT model)"),FSe.forEach(t),ecr=i(D),cT=n(D,"LI",{});var TSe=s(cT);$8e=n(TSe,"STRONG",{});var Dvt=s($8e);ocr=r(Dvt,"dpr"),Dvt.forEach(t),rcr=r(TSe," \u2014 "),uW=n(TSe,"A",{href:!0});var Gvt=s(uW);tcr=r(Gvt,"TFDPRQuestionEncoder"),Gvt.forEach(t),acr=r(TSe," (DPR model)"),TSe.forEach(t),ncr=i(D),fT=n(D,"LI",{});var MSe=s(fT);k8e=n(MSe,"STRONG",{});var Ovt=s(k8e);scr=r(Ovt,"electra"),Ovt.forEach(t),lcr=r(MSe," \u2014 "),_W=n(MSe,"A",{href:!0});var Vvt=s(_W);icr=r(Vvt,"TFElectraModel"),Vvt.forEach(t),dcr=r(MSe," (ELECTRA model)"),MSe.forEach(t),ccr=i(D),mT=n(D,"LI",{});var ESe=s(mT);S8e=n(ESe,"STRONG",{});var Xvt=s(S8e);fcr=r(Xvt,"flaubert"),Xvt.forEach(t),mcr=r(ESe," \u2014 "),bW=n(ESe,"A",{href:!0});var zvt=s(bW);gcr=r(zvt,"TFFlaubertModel"),zvt.forEach(t),hcr=r(ESe," (FlauBERT model)"),ESe.forEach(t),pcr=i(D),Is=n(D,"LI",{});var V$=s(Is);R8e=n(V$,"STRONG",{});var Wvt=s(R8e);ucr=r(Wvt,"funnel"),Wvt.forEach(t),_cr=r(V$," \u2014 "),vW=n(V$,"A",{href:!0});var Qvt=s(vW);bcr=r(Qvt,"TFFunnelModel"),Qvt.forEach(t),vcr=r(V$," or "),FW=n(V$,"A",{href:!0});var Hvt=s(FW);Fcr=r(Hvt,"TFFunnelBaseModel"),Hvt.forEach(t),Tcr=r(V$," (Funnel Transformer model)"),V$.forEach(t),Mcr=i(D),gT=n(D,"LI",{});var CSe=s(gT);P8e=n(CSe,"STRONG",{});var Uvt=s(P8e);Ecr=r(Uvt,"gpt2"),Uvt.forEach(t),Ccr=r(CSe," \u2014 "),TW=n(CSe,"A",{href:!0});var Jvt=s(TW);wcr=r(Jvt,"TFGPT2Model"),Jvt.forEach(t),Acr=r(CSe," (OpenAI GPT-2 model)"),CSe.forEach(t),ycr=i(D),hT=n(D,"LI",{});var wSe=s(hT);B8e=n(wSe,"STRONG",{});var Yvt=s(B8e);Lcr=r(Yvt,"gptj"),Yvt.forEach(t),xcr=r(wSe," \u2014 "),MW=n(wSe,"A",{href:!0});var Kvt=s(MW);$cr=r(Kvt,"TFGPTJModel"),Kvt.forEach(t),kcr=r(wSe," (GPT-J model)"),wSe.forEach(t),Scr=i(D),pT=n(D,"LI",{});var ASe=s(pT);I8e=n(ASe,"STRONG",{});var Zvt=s(I8e);Rcr=r(Zvt,"hubert"),Zvt.forEach(t),Pcr=r(ASe," \u2014 "),EW=n(ASe,"A",{href:!0});var e3t=s(EW);Bcr=r(e3t,"TFHubertModel"),e3t.forEach(t),Icr=r(ASe," (Hubert model)"),ASe.forEach(t),qcr=i(D),uT=n(D,"LI",{});var ySe=s(uT);q8e=n(ySe,"STRONG",{});var o3t=s(q8e);Ncr=r(o3t,"layoutlm"),o3t.forEach(t),jcr=r(ySe," \u2014 "),CW=n(ySe,"A",{href:!0});var r3t=s(CW);Dcr=r(r3t,"TFLayoutLMModel"),r3t.forEach(t),Gcr=r(ySe," (LayoutLM model)"),ySe.forEach(t),Ocr=i(D),_T=n(D,"LI",{});var LSe=s(_T);N8e=n(LSe,"STRONG",{});var t3t=s(N8e);Vcr=r(t3t,"led"),t3t.forEach(t),Xcr=r(LSe," \u2014 "),wW=n(LSe,"A",{href:!0});var a3t=s(wW);zcr=r(a3t,"TFLEDModel"),a3t.forEach(t),Wcr=r(LSe," (LED model)"),LSe.forEach(t),Qcr=i(D),bT=n(D,"LI",{});var xSe=s(bT);j8e=n(xSe,"STRONG",{});var n3t=s(j8e);Hcr=r(n3t,"longformer"),n3t.forEach(t),Ucr=r(xSe," \u2014 "),AW=n(xSe,"A",{href:!0});var s3t=s(AW);Jcr=r(s3t,"TFLongformerModel"),s3t.forEach(t),Ycr=r(xSe," (Longformer model)"),xSe.forEach(t),Kcr=i(D),vT=n(D,"LI",{});var $Se=s(vT);D8e=n($Se,"STRONG",{});var l3t=s(D8e);Zcr=r(l3t,"lxmert"),l3t.forEach(t),efr=r($Se," \u2014 "),yW=n($Se,"A",{href:!0});var i3t=s(yW);ofr=r(i3t,"TFLxmertModel"),i3t.forEach(t),rfr=r($Se," (LXMERT model)"),$Se.forEach(t),tfr=i(D),FT=n(D,"LI",{});var kSe=s(FT);G8e=n(kSe,"STRONG",{});var d3t=s(G8e);afr=r(d3t,"marian"),d3t.forEach(t),nfr=r(kSe," \u2014 "),LW=n(kSe,"A",{href:!0});var c3t=s(LW);sfr=r(c3t,"TFMarianModel"),c3t.forEach(t),lfr=r(kSe," (Marian model)"),kSe.forEach(t),ifr=i(D),TT=n(D,"LI",{});var SSe=s(TT);O8e=n(SSe,"STRONG",{});var f3t=s(O8e);dfr=r(f3t,"mbart"),f3t.forEach(t),cfr=r(SSe," \u2014 "),xW=n(SSe,"A",{href:!0});var m3t=s(xW);ffr=r(m3t,"TFMBartModel"),m3t.forEach(t),mfr=r(SSe," (mBART model)"),SSe.forEach(t),gfr=i(D),MT=n(D,"LI",{});var RSe=s(MT);V8e=n(RSe,"STRONG",{});var g3t=s(V8e);hfr=r(g3t,"mobilebert"),g3t.forEach(t),pfr=r(RSe," \u2014 "),$W=n(RSe,"A",{href:!0});var h3t=s($W);ufr=r(h3t,"TFMobileBertModel"),h3t.forEach(t),_fr=r(RSe," (MobileBERT model)"),RSe.forEach(t),bfr=i(D),ET=n(D,"LI",{});var PSe=s(ET);X8e=n(PSe,"STRONG",{});var p3t=s(X8e);vfr=r(p3t,"mpnet"),p3t.forEach(t),Ffr=r(PSe," \u2014 "),kW=n(PSe,"A",{href:!0});var u3t=s(kW);Tfr=r(u3t,"TFMPNetModel"),u3t.forEach(t),Mfr=r(PSe," (MPNet model)"),PSe.forEach(t),Efr=i(D),CT=n(D,"LI",{});var BSe=s(CT);z8e=n(BSe,"STRONG",{});var _3t=s(z8e);Cfr=r(_3t,"mt5"),_3t.forEach(t),wfr=r(BSe," \u2014 "),SW=n(BSe,"A",{href:!0});var b3t=s(SW);Afr=r(b3t,"TFMT5Model"),b3t.forEach(t),yfr=r(BSe," (mT5 model)"),BSe.forEach(t),Lfr=i(D),wT=n(D,"LI",{});var ISe=s(wT);W8e=n(ISe,"STRONG",{});var v3t=s(W8e);xfr=r(v3t,"openai-gpt"),v3t.forEach(t),$fr=r(ISe," \u2014 "),RW=n(ISe,"A",{href:!0});var F3t=s(RW);kfr=r(F3t,"TFOpenAIGPTModel"),F3t.forEach(t),Sfr=r(ISe," (OpenAI GPT model)"),ISe.forEach(t),Rfr=i(D),AT=n(D,"LI",{});var qSe=s(AT);Q8e=n(qSe,"STRONG",{});var T3t=s(Q8e);Pfr=r(T3t,"opt"),T3t.forEach(t),Bfr=r(qSe," \u2014 "),PW=n(qSe,"A",{href:!0});var M3t=s(PW);Ifr=r(M3t,"TFOPTModel"),M3t.forEach(t),qfr=r(qSe," (OPT model)"),qSe.forEach(t),Nfr=i(D),yT=n(D,"LI",{});var NSe=s(yT);H8e=n(NSe,"STRONG",{});var E3t=s(H8e);jfr=r(E3t,"pegasus"),E3t.forEach(t),Dfr=r(NSe," \u2014 "),BW=n(NSe,"A",{href:!0});var C3t=s(BW);Gfr=r(C3t,"TFPegasusModel"),C3t.forEach(t),Ofr=r(NSe," (Pegasus model)"),NSe.forEach(t),Vfr=i(D),LT=n(D,"LI",{});var jSe=s(LT);U8e=n(jSe,"STRONG",{});var w3t=s(U8e);Xfr=r(w3t,"rembert"),w3t.forEach(t),zfr=r(jSe," \u2014 "),IW=n(jSe,"A",{href:!0});var A3t=s(IW);Wfr=r(A3t,"TFRemBertModel"),A3t.forEach(t),Qfr=r(jSe," (RemBERT model)"),jSe.forEach(t),Hfr=i(D),xT=n(D,"LI",{});var DSe=s(xT);J8e=n(DSe,"STRONG",{});var y3t=s(J8e);Ufr=r(y3t,"roberta"),y3t.forEach(t),Jfr=r(DSe," \u2014 "),qW=n(DSe,"A",{href:!0});var L3t=s(qW);Yfr=r(L3t,"TFRobertaModel"),L3t.forEach(t),Kfr=r(DSe," (RoBERTa model)"),DSe.forEach(t),Zfr=i(D),$T=n(D,"LI",{});var GSe=s($T);Y8e=n(GSe,"STRONG",{});var x3t=s(Y8e);emr=r(x3t,"roformer"),x3t.forEach(t),omr=r(GSe," \u2014 "),NW=n(GSe,"A",{href:!0});var $3t=s(NW);rmr=r($3t,"TFRoFormerModel"),$3t.forEach(t),tmr=r(GSe," (RoFormer model)"),GSe.forEach(t),amr=i(D),kT=n(D,"LI",{});var OSe=s(kT);K8e=n(OSe,"STRONG",{});var k3t=s(K8e);nmr=r(k3t,"speech_to_text"),k3t.forEach(t),smr=r(OSe," \u2014 "),jW=n(OSe,"A",{href:!0});var S3t=s(jW);lmr=r(S3t,"TFSpeech2TextModel"),S3t.forEach(t),imr=r(OSe," (Speech2Text model)"),OSe.forEach(t),dmr=i(D),ST=n(D,"LI",{});var VSe=s(ST);Z8e=n(VSe,"STRONG",{});var R3t=s(Z8e);cmr=r(R3t,"swin"),R3t.forEach(t),fmr=r(VSe," \u2014 "),DW=n(VSe,"A",{href:!0});var P3t=s(DW);mmr=r(P3t,"TFSwinModel"),P3t.forEach(t),gmr=r(VSe," (Swin model)"),VSe.forEach(t),hmr=i(D),RT=n(D,"LI",{});var XSe=s(RT);ebe=n(XSe,"STRONG",{});var B3t=s(ebe);pmr=r(B3t,"t5"),B3t.forEach(t),umr=r(XSe," \u2014 "),GW=n(XSe,"A",{href:!0});var I3t=s(GW);_mr=r(I3t,"TFT5Model"),I3t.forEach(t),bmr=r(XSe," (T5 model)"),XSe.forEach(t),vmr=i(D),PT=n(D,"LI",{});var zSe=s(PT);obe=n(zSe,"STRONG",{});var q3t=s(obe);Fmr=r(q3t,"tapas"),q3t.forEach(t),Tmr=r(zSe," \u2014 "),OW=n(zSe,"A",{href:!0});var N3t=s(OW);Mmr=r(N3t,"TFTapasModel"),N3t.forEach(t),Emr=r(zSe," (TAPAS model)"),zSe.forEach(t),Cmr=i(D),BT=n(D,"LI",{});var WSe=s(BT);rbe=n(WSe,"STRONG",{});var j3t=s(rbe);wmr=r(j3t,"transfo-xl"),j3t.forEach(t),Amr=r(WSe," \u2014 "),VW=n(WSe,"A",{href:!0});var D3t=s(VW);ymr=r(D3t,"TFTransfoXLModel"),D3t.forEach(t),Lmr=r(WSe," (Transformer-XL model)"),WSe.forEach(t),xmr=i(D),IT=n(D,"LI",{});var QSe=s(IT);tbe=n(QSe,"STRONG",{});var G3t=s(tbe);$mr=r(G3t,"vit"),G3t.forEach(t),kmr=r(QSe," \u2014 "),XW=n(QSe,"A",{href:!0});var O3t=s(XW);Smr=r(O3t,"TFViTModel"),O3t.forEach(t),Rmr=r(QSe," (ViT model)"),QSe.forEach(t),Pmr=i(D),qT=n(D,"LI",{});var HSe=s(qT);abe=n(HSe,"STRONG",{});var V3t=s(abe);Bmr=r(V3t,"vit_mae"),V3t.forEach(t),Imr=r(HSe," \u2014 "),zW=n(HSe,"A",{href:!0});var X3t=s(zW);qmr=r(X3t,"TFViTMAEModel"),X3t.forEach(t),Nmr=r(HSe," (ViTMAE model)"),HSe.forEach(t),jmr=i(D),NT=n(D,"LI",{});var USe=s(NT);nbe=n(USe,"STRONG",{});var z3t=s(nbe);Dmr=r(z3t,"wav2vec2"),z3t.forEach(t),Gmr=r(USe," \u2014 "),WW=n(USe,"A",{href:!0});var W3t=s(WW);Omr=r(W3t,"TFWav2Vec2Model"),W3t.forEach(t),Vmr=r(USe," (Wav2Vec2 model)"),USe.forEach(t),Xmr=i(D),jT=n(D,"LI",{});var JSe=s(jT);sbe=n(JSe,"STRONG",{});var Q3t=s(sbe);zmr=r(Q3t,"xlm"),Q3t.forEach(t),Wmr=r(JSe," \u2014 "),QW=n(JSe,"A",{href:!0});var H3t=s(QW);Qmr=r(H3t,"TFXLMModel"),H3t.forEach(t),Hmr=r(JSe," (XLM model)"),JSe.forEach(t),Umr=i(D),DT=n(D,"LI",{});var YSe=s(DT);lbe=n(YSe,"STRONG",{});var U3t=s(lbe);Jmr=r(U3t,"xlm-roberta"),U3t.forEach(t),Ymr=r(YSe," \u2014 "),HW=n(YSe,"A",{href:!0});var J3t=s(HW);Kmr=r(J3t,"TFXLMRobertaModel"),J3t.forEach(t),Zmr=r(YSe," (XLM-RoBERTa model)"),YSe.forEach(t),egr=i(D),GT=n(D,"LI",{});var KSe=s(GT);ibe=n(KSe,"STRONG",{});var Y3t=s(ibe);ogr=r(Y3t,"xlnet"),Y3t.forEach(t),rgr=r(KSe," \u2014 "),UW=n(KSe,"A",{href:!0});var K3t=s(UW);tgr=r(K3t,"TFXLNetModel"),K3t.forEach(t),agr=r(KSe," (XLNet model)"),KSe.forEach(t),D.forEach(t),ngr=i(hl),T(OT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),oje=i(f),Xd=n(f,"H2",{class:!0});var lGe=s(Xd);VT=n(lGe,"A",{id:!0,class:!0,href:!0});var Z3t=s(VT);dbe=n(Z3t,"SPAN",{});var eFt=s(dbe);T(mL.$$.fragment,eFt),eFt.forEach(t),Z3t.forEach(t),sgr=i(lGe),cbe=n(lGe,"SPAN",{});var oFt=s(cbe);lgr=r(oFt,"TFAutoModelForPreTraining"),oFt.forEach(t),lGe.forEach(t),rje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(gL.$$.fragment,pl),igr=i(pl),zd=n(pl,"P",{});var iee=s(zd);dgr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JW=n(iee,"A",{href:!0});var rFt=s(JW);cgr=r(rFt,"from_pretrained()"),rFt.forEach(t),fgr=r(iee," class method or the "),YW=n(iee,"A",{href:!0});var tFt=s(YW);mgr=r(tFt,"from_config()"),tFt.forEach(t),ggr=r(iee,` class
method.`),iee.forEach(t),hgr=i(pl),hL=n(pl,"P",{});var iGe=s(hL);pgr=r(iGe,"This class cannot be instantiated directly using "),fbe=n(iGe,"CODE",{});var aFt=s(fbe);ugr=r(aFt,"__init__()"),aFt.forEach(t),_gr=r(iGe," (throws an error)."),iGe.forEach(t),bgr=i(pl),Lt=n(pl,"DIV",{class:!0});var w0=s(Lt);T(pL.$$.fragment,w0),vgr=i(w0),mbe=n(w0,"P",{});var nFt=s(mbe);Fgr=r(nFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nFt.forEach(t),Tgr=i(w0),Wd=n(w0,"P",{});var dee=s(Wd);Mgr=r(dee,`Note:
Loading a model from its configuration file does `),gbe=n(dee,"STRONG",{});var sFt=s(gbe);Egr=r(sFt,"not"),sFt.forEach(t),Cgr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(dee,"A",{href:!0});var lFt=s(KW);wgr=r(lFt,"from_pretrained()"),lFt.forEach(t),Agr=r(dee," to load the model weights."),dee.forEach(t),ygr=i(w0),T(XT.$$.fragment,w0),w0.forEach(t),Lgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(uL.$$.fragment,ul),xgr=i(ul),hbe=n(ul,"P",{});var iFt=s(hbe);$gr=r(iFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iFt.forEach(t),kgr=i(ul),Za=n(ul,"P",{});var A0=s(Za);Sgr=r(A0,"The model class to instantiate is selected based on the "),pbe=n(A0,"CODE",{});var dFt=s(pbe);Rgr=r(dFt,"model_type"),dFt.forEach(t),Pgr=r(A0,` property of the config object (either
passed as an argument or loaded from `),ube=n(A0,"CODE",{});var cFt=s(ube);Bgr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),Igr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(A0,"CODE",{});var fFt=s(_be);qgr=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),Ngr=r(A0,":"),A0.forEach(t),jgr=i(ul),se=n(ul,"UL",{});var le=s(se);zT=n(le,"LI",{});var ZSe=s(zT);bbe=n(ZSe,"STRONG",{});var mFt=s(bbe);Dgr=r(mFt,"albert"),mFt.forEach(t),Ggr=r(ZSe," \u2014 "),ZW=n(ZSe,"A",{href:!0});var gFt=s(ZW);Ogr=r(gFt,"TFAlbertForPreTraining"),gFt.forEach(t),Vgr=r(ZSe," (ALBERT model)"),ZSe.forEach(t),Xgr=i(le),WT=n(le,"LI",{});var eRe=s(WT);vbe=n(eRe,"STRONG",{});var hFt=s(vbe);zgr=r(hFt,"bart"),hFt.forEach(t),Wgr=r(eRe," \u2014 "),eQ=n(eRe,"A",{href:!0});var pFt=s(eQ);Qgr=r(pFt,"TFBartForConditionalGeneration"),pFt.forEach(t),Hgr=r(eRe," (BART model)"),eRe.forEach(t),Ugr=i(le),QT=n(le,"LI",{});var oRe=s(QT);Fbe=n(oRe,"STRONG",{});var uFt=s(Fbe);Jgr=r(uFt,"bert"),uFt.forEach(t),Ygr=r(oRe," \u2014 "),oQ=n(oRe,"A",{href:!0});var _Ft=s(oQ);Kgr=r(_Ft,"TFBertForPreTraining"),_Ft.forEach(t),Zgr=r(oRe," (BERT model)"),oRe.forEach(t),ehr=i(le),HT=n(le,"LI",{});var rRe=s(HT);Tbe=n(rRe,"STRONG",{});var bFt=s(Tbe);ohr=r(bFt,"camembert"),bFt.forEach(t),rhr=r(rRe," \u2014 "),rQ=n(rRe,"A",{href:!0});var vFt=s(rQ);thr=r(vFt,"TFCamembertForMaskedLM"),vFt.forEach(t),ahr=r(rRe," (CamemBERT model)"),rRe.forEach(t),nhr=i(le),UT=n(le,"LI",{});var tRe=s(UT);Mbe=n(tRe,"STRONG",{});var FFt=s(Mbe);shr=r(FFt,"ctrl"),FFt.forEach(t),lhr=r(tRe," \u2014 "),tQ=n(tRe,"A",{href:!0});var TFt=s(tQ);ihr=r(TFt,"TFCTRLLMHeadModel"),TFt.forEach(t),dhr=r(tRe," (CTRL model)"),tRe.forEach(t),chr=i(le),JT=n(le,"LI",{});var aRe=s(JT);Ebe=n(aRe,"STRONG",{});var MFt=s(Ebe);fhr=r(MFt,"distilbert"),MFt.forEach(t),mhr=r(aRe," \u2014 "),aQ=n(aRe,"A",{href:!0});var EFt=s(aQ);ghr=r(EFt,"TFDistilBertForMaskedLM"),EFt.forEach(t),hhr=r(aRe," (DistilBERT model)"),aRe.forEach(t),phr=i(le),YT=n(le,"LI",{});var nRe=s(YT);Cbe=n(nRe,"STRONG",{});var CFt=s(Cbe);uhr=r(CFt,"electra"),CFt.forEach(t),_hr=r(nRe," \u2014 "),nQ=n(nRe,"A",{href:!0});var wFt=s(nQ);bhr=r(wFt,"TFElectraForPreTraining"),wFt.forEach(t),vhr=r(nRe," (ELECTRA model)"),nRe.forEach(t),Fhr=i(le),KT=n(le,"LI",{});var sRe=s(KT);wbe=n(sRe,"STRONG",{});var AFt=s(wbe);Thr=r(AFt,"flaubert"),AFt.forEach(t),Mhr=r(sRe," \u2014 "),sQ=n(sRe,"A",{href:!0});var yFt=s(sQ);Ehr=r(yFt,"TFFlaubertWithLMHeadModel"),yFt.forEach(t),Chr=r(sRe," (FlauBERT model)"),sRe.forEach(t),whr=i(le),ZT=n(le,"LI",{});var lRe=s(ZT);Abe=n(lRe,"STRONG",{});var LFt=s(Abe);Ahr=r(LFt,"funnel"),LFt.forEach(t),yhr=r(lRe," \u2014 "),lQ=n(lRe,"A",{href:!0});var xFt=s(lQ);Lhr=r(xFt,"TFFunnelForPreTraining"),xFt.forEach(t),xhr=r(lRe," (Funnel Transformer model)"),lRe.forEach(t),$hr=i(le),e7=n(le,"LI",{});var iRe=s(e7);ybe=n(iRe,"STRONG",{});var $Ft=s(ybe);khr=r($Ft,"gpt2"),$Ft.forEach(t),Shr=r(iRe," \u2014 "),iQ=n(iRe,"A",{href:!0});var kFt=s(iQ);Rhr=r(kFt,"TFGPT2LMHeadModel"),kFt.forEach(t),Phr=r(iRe," (OpenAI GPT-2 model)"),iRe.forEach(t),Bhr=i(le),o7=n(le,"LI",{});var dRe=s(o7);Lbe=n(dRe,"STRONG",{});var SFt=s(Lbe);Ihr=r(SFt,"layoutlm"),SFt.forEach(t),qhr=r(dRe," \u2014 "),dQ=n(dRe,"A",{href:!0});var RFt=s(dQ);Nhr=r(RFt,"TFLayoutLMForMaskedLM"),RFt.forEach(t),jhr=r(dRe," (LayoutLM model)"),dRe.forEach(t),Dhr=i(le),r7=n(le,"LI",{});var cRe=s(r7);xbe=n(cRe,"STRONG",{});var PFt=s(xbe);Ghr=r(PFt,"lxmert"),PFt.forEach(t),Ohr=r(cRe," \u2014 "),cQ=n(cRe,"A",{href:!0});var BFt=s(cQ);Vhr=r(BFt,"TFLxmertForPreTraining"),BFt.forEach(t),Xhr=r(cRe," (LXMERT model)"),cRe.forEach(t),zhr=i(le),t7=n(le,"LI",{});var fRe=s(t7);$be=n(fRe,"STRONG",{});var IFt=s($be);Whr=r(IFt,"mobilebert"),IFt.forEach(t),Qhr=r(fRe," \u2014 "),fQ=n(fRe,"A",{href:!0});var qFt=s(fQ);Hhr=r(qFt,"TFMobileBertForPreTraining"),qFt.forEach(t),Uhr=r(fRe," (MobileBERT model)"),fRe.forEach(t),Jhr=i(le),a7=n(le,"LI",{});var mRe=s(a7);kbe=n(mRe,"STRONG",{});var NFt=s(kbe);Yhr=r(NFt,"mpnet"),NFt.forEach(t),Khr=r(mRe," \u2014 "),mQ=n(mRe,"A",{href:!0});var jFt=s(mQ);Zhr=r(jFt,"TFMPNetForMaskedLM"),jFt.forEach(t),epr=r(mRe," (MPNet model)"),mRe.forEach(t),opr=i(le),n7=n(le,"LI",{});var gRe=s(n7);Sbe=n(gRe,"STRONG",{});var DFt=s(Sbe);rpr=r(DFt,"openai-gpt"),DFt.forEach(t),tpr=r(gRe," \u2014 "),gQ=n(gRe,"A",{href:!0});var GFt=s(gQ);apr=r(GFt,"TFOpenAIGPTLMHeadModel"),GFt.forEach(t),npr=r(gRe," (OpenAI GPT model)"),gRe.forEach(t),spr=i(le),s7=n(le,"LI",{});var hRe=s(s7);Rbe=n(hRe,"STRONG",{});var OFt=s(Rbe);lpr=r(OFt,"roberta"),OFt.forEach(t),ipr=r(hRe," \u2014 "),hQ=n(hRe,"A",{href:!0});var VFt=s(hQ);dpr=r(VFt,"TFRobertaForMaskedLM"),VFt.forEach(t),cpr=r(hRe," (RoBERTa model)"),hRe.forEach(t),fpr=i(le),l7=n(le,"LI",{});var pRe=s(l7);Pbe=n(pRe,"STRONG",{});var XFt=s(Pbe);mpr=r(XFt,"t5"),XFt.forEach(t),gpr=r(pRe," \u2014 "),pQ=n(pRe,"A",{href:!0});var zFt=s(pQ);hpr=r(zFt,"TFT5ForConditionalGeneration"),zFt.forEach(t),ppr=r(pRe," (T5 model)"),pRe.forEach(t),upr=i(le),i7=n(le,"LI",{});var uRe=s(i7);Bbe=n(uRe,"STRONG",{});var WFt=s(Bbe);_pr=r(WFt,"tapas"),WFt.forEach(t),bpr=r(uRe," \u2014 "),uQ=n(uRe,"A",{href:!0});var QFt=s(uQ);vpr=r(QFt,"TFTapasForMaskedLM"),QFt.forEach(t),Fpr=r(uRe," (TAPAS model)"),uRe.forEach(t),Tpr=i(le),d7=n(le,"LI",{});var _Re=s(d7);Ibe=n(_Re,"STRONG",{});var HFt=s(Ibe);Mpr=r(HFt,"transfo-xl"),HFt.forEach(t),Epr=r(_Re," \u2014 "),_Q=n(_Re,"A",{href:!0});var UFt=s(_Q);Cpr=r(UFt,"TFTransfoXLLMHeadModel"),UFt.forEach(t),wpr=r(_Re," (Transformer-XL model)"),_Re.forEach(t),Apr=i(le),c7=n(le,"LI",{});var bRe=s(c7);qbe=n(bRe,"STRONG",{});var JFt=s(qbe);ypr=r(JFt,"vit_mae"),JFt.forEach(t),Lpr=r(bRe," \u2014 "),bQ=n(bRe,"A",{href:!0});var YFt=s(bQ);xpr=r(YFt,"TFViTMAEForPreTraining"),YFt.forEach(t),$pr=r(bRe," (ViTMAE model)"),bRe.forEach(t),kpr=i(le),f7=n(le,"LI",{});var vRe=s(f7);Nbe=n(vRe,"STRONG",{});var KFt=s(Nbe);Spr=r(KFt,"xlm"),KFt.forEach(t),Rpr=r(vRe," \u2014 "),vQ=n(vRe,"A",{href:!0});var ZFt=s(vQ);Ppr=r(ZFt,"TFXLMWithLMHeadModel"),ZFt.forEach(t),Bpr=r(vRe," (XLM model)"),vRe.forEach(t),Ipr=i(le),m7=n(le,"LI",{});var FRe=s(m7);jbe=n(FRe,"STRONG",{});var eTt=s(jbe);qpr=r(eTt,"xlm-roberta"),eTt.forEach(t),Npr=r(FRe," \u2014 "),FQ=n(FRe,"A",{href:!0});var oTt=s(FQ);jpr=r(oTt,"TFXLMRobertaForMaskedLM"),oTt.forEach(t),Dpr=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),Gpr=i(le),g7=n(le,"LI",{});var TRe=s(g7);Dbe=n(TRe,"STRONG",{});var rTt=s(Dbe);Opr=r(rTt,"xlnet"),rTt.forEach(t),Vpr=r(TRe," \u2014 "),TQ=n(TRe,"A",{href:!0});var tTt=s(TQ);Xpr=r(tTt,"TFXLNetLMHeadModel"),tTt.forEach(t),zpr=r(TRe," (XLNet model)"),TRe.forEach(t),le.forEach(t),Wpr=i(ul),T(h7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),tje=i(f),Qd=n(f,"H2",{class:!0});var dGe=s(Qd);p7=n(dGe,"A",{id:!0,class:!0,href:!0});var aTt=s(p7);Gbe=n(aTt,"SPAN",{});var nTt=s(Gbe);T(_L.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),Qpr=i(dGe),Obe=n(dGe,"SPAN",{});var sTt=s(Obe);Hpr=r(sTt,"TFAutoModelForCausalLM"),sTt.forEach(t),dGe.forEach(t),aje=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(bL.$$.fragment,_l),Upr=i(_l),Hd=n(_l,"P",{});var cee=s(Hd);Jpr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=n(cee,"A",{href:!0});var lTt=s(MQ);Ypr=r(lTt,"from_pretrained()"),lTt.forEach(t),Kpr=r(cee," class method or the "),EQ=n(cee,"A",{href:!0});var iTt=s(EQ);Zpr=r(iTt,"from_config()"),iTt.forEach(t),eur=r(cee,` class
method.`),cee.forEach(t),our=i(_l),vL=n(_l,"P",{});var cGe=s(vL);rur=r(cGe,"This class cannot be instantiated directly using "),Vbe=n(cGe,"CODE",{});var dTt=s(Vbe);tur=r(dTt,"__init__()"),dTt.forEach(t),aur=r(cGe," (throws an error)."),cGe.forEach(t),nur=i(_l),xt=n(_l,"DIV",{class:!0});var y0=s(xt);T(FL.$$.fragment,y0),sur=i(y0),Xbe=n(y0,"P",{});var cTt=s(Xbe);lur=r(cTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cTt.forEach(t),iur=i(y0),Ud=n(y0,"P",{});var fee=s(Ud);dur=r(fee,`Note:
Loading a model from its configuration file does `),zbe=n(fee,"STRONG",{});var fTt=s(zbe);cur=r(fTt,"not"),fTt.forEach(t),fur=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(fee,"A",{href:!0});var mTt=s(CQ);mur=r(mTt,"from_pretrained()"),mTt.forEach(t),gur=r(fee," to load the model weights."),fee.forEach(t),hur=i(y0),T(u7.$$.fragment,y0),y0.forEach(t),pur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(TL.$$.fragment,bl),uur=i(bl),Wbe=n(bl,"P",{});var gTt=s(Wbe);_ur=r(gTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gTt.forEach(t),bur=i(bl),en=n(bl,"P",{});var L0=s(en);vur=r(L0,"The model class to instantiate is selected based on the "),Qbe=n(L0,"CODE",{});var hTt=s(Qbe);Fur=r(hTt,"model_type"),hTt.forEach(t),Tur=r(L0,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(L0,"CODE",{});var pTt=s(Hbe);Mur=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),Eur=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(L0,"CODE",{});var uTt=s(Ube);Cur=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),wur=r(L0,":"),L0.forEach(t),Aur=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);_7=n(Ce,"LI",{});var MRe=s(_7);Jbe=n(MRe,"STRONG",{});var _Tt=s(Jbe);yur=r(_Tt,"bert"),_Tt.forEach(t),Lur=r(MRe," \u2014 "),wQ=n(MRe,"A",{href:!0});var bTt=s(wQ);xur=r(bTt,"TFBertLMHeadModel"),bTt.forEach(t),$ur=r(MRe," (BERT model)"),MRe.forEach(t),kur=i(Ce),b7=n(Ce,"LI",{});var ERe=s(b7);Ybe=n(ERe,"STRONG",{});var vTt=s(Ybe);Sur=r(vTt,"camembert"),vTt.forEach(t),Rur=r(ERe," \u2014 "),AQ=n(ERe,"A",{href:!0});var FTt=s(AQ);Pur=r(FTt,"TFCamembertForCausalLM"),FTt.forEach(t),Bur=r(ERe," (CamemBERT model)"),ERe.forEach(t),Iur=i(Ce),v7=n(Ce,"LI",{});var CRe=s(v7);Kbe=n(CRe,"STRONG",{});var TTt=s(Kbe);qur=r(TTt,"ctrl"),TTt.forEach(t),Nur=r(CRe," \u2014 "),yQ=n(CRe,"A",{href:!0});var MTt=s(yQ);jur=r(MTt,"TFCTRLLMHeadModel"),MTt.forEach(t),Dur=r(CRe," (CTRL model)"),CRe.forEach(t),Gur=i(Ce),F7=n(Ce,"LI",{});var wRe=s(F7);Zbe=n(wRe,"STRONG",{});var ETt=s(Zbe);Our=r(ETt,"gpt2"),ETt.forEach(t),Vur=r(wRe," \u2014 "),LQ=n(wRe,"A",{href:!0});var CTt=s(LQ);Xur=r(CTt,"TFGPT2LMHeadModel"),CTt.forEach(t),zur=r(wRe," (OpenAI GPT-2 model)"),wRe.forEach(t),Wur=i(Ce),T7=n(Ce,"LI",{});var ARe=s(T7);e2e=n(ARe,"STRONG",{});var wTt=s(e2e);Qur=r(wTt,"gptj"),wTt.forEach(t),Hur=r(ARe," \u2014 "),xQ=n(ARe,"A",{href:!0});var ATt=s(xQ);Uur=r(ATt,"TFGPTJForCausalLM"),ATt.forEach(t),Jur=r(ARe," (GPT-J model)"),ARe.forEach(t),Yur=i(Ce),M7=n(Ce,"LI",{});var yRe=s(M7);o2e=n(yRe,"STRONG",{});var yTt=s(o2e);Kur=r(yTt,"openai-gpt"),yTt.forEach(t),Zur=r(yRe," \u2014 "),$Q=n(yRe,"A",{href:!0});var LTt=s($Q);e_r=r(LTt,"TFOpenAIGPTLMHeadModel"),LTt.forEach(t),o_r=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),r_r=i(Ce),E7=n(Ce,"LI",{});var LRe=s(E7);r2e=n(LRe,"STRONG",{});var xTt=s(r2e);t_r=r(xTt,"opt"),xTt.forEach(t),a_r=r(LRe," \u2014 "),kQ=n(LRe,"A",{href:!0});var $Tt=s(kQ);n_r=r($Tt,"TFOPTForCausalLM"),$Tt.forEach(t),s_r=r(LRe," (OPT model)"),LRe.forEach(t),l_r=i(Ce),C7=n(Ce,"LI",{});var xRe=s(C7);t2e=n(xRe,"STRONG",{});var kTt=s(t2e);i_r=r(kTt,"rembert"),kTt.forEach(t),d_r=r(xRe," \u2014 "),SQ=n(xRe,"A",{href:!0});var STt=s(SQ);c_r=r(STt,"TFRemBertForCausalLM"),STt.forEach(t),f_r=r(xRe," (RemBERT model)"),xRe.forEach(t),m_r=i(Ce),w7=n(Ce,"LI",{});var $Re=s(w7);a2e=n($Re,"STRONG",{});var RTt=s(a2e);g_r=r(RTt,"roberta"),RTt.forEach(t),h_r=r($Re," \u2014 "),RQ=n($Re,"A",{href:!0});var PTt=s(RQ);p_r=r(PTt,"TFRobertaForCausalLM"),PTt.forEach(t),u_r=r($Re," (RoBERTa model)"),$Re.forEach(t),__r=i(Ce),A7=n(Ce,"LI",{});var kRe=s(A7);n2e=n(kRe,"STRONG",{});var BTt=s(n2e);b_r=r(BTt,"roformer"),BTt.forEach(t),v_r=r(kRe," \u2014 "),PQ=n(kRe,"A",{href:!0});var ITt=s(PQ);F_r=r(ITt,"TFRoFormerForCausalLM"),ITt.forEach(t),T_r=r(kRe," (RoFormer model)"),kRe.forEach(t),M_r=i(Ce),y7=n(Ce,"LI",{});var SRe=s(y7);s2e=n(SRe,"STRONG",{});var qTt=s(s2e);E_r=r(qTt,"transfo-xl"),qTt.forEach(t),C_r=r(SRe," \u2014 "),BQ=n(SRe,"A",{href:!0});var NTt=s(BQ);w_r=r(NTt,"TFTransfoXLLMHeadModel"),NTt.forEach(t),A_r=r(SRe," (Transformer-XL model)"),SRe.forEach(t),y_r=i(Ce),L7=n(Ce,"LI",{});var RRe=s(L7);l2e=n(RRe,"STRONG",{});var jTt=s(l2e);L_r=r(jTt,"xlm"),jTt.forEach(t),x_r=r(RRe," \u2014 "),IQ=n(RRe,"A",{href:!0});var DTt=s(IQ);$_r=r(DTt,"TFXLMWithLMHeadModel"),DTt.forEach(t),k_r=r(RRe," (XLM model)"),RRe.forEach(t),S_r=i(Ce),x7=n(Ce,"LI",{});var PRe=s(x7);i2e=n(PRe,"STRONG",{});var GTt=s(i2e);R_r=r(GTt,"xlnet"),GTt.forEach(t),P_r=r(PRe," \u2014 "),qQ=n(PRe,"A",{href:!0});var OTt=s(qQ);B_r=r(OTt,"TFXLNetLMHeadModel"),OTt.forEach(t),I_r=r(PRe," (XLNet model)"),PRe.forEach(t),Ce.forEach(t),q_r=i(bl),T($7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),nje=i(f),Jd=n(f,"H2",{class:!0});var fGe=s(Jd);k7=n(fGe,"A",{id:!0,class:!0,href:!0});var VTt=s(k7);d2e=n(VTt,"SPAN",{});var XTt=s(d2e);T(ML.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),N_r=i(fGe),c2e=n(fGe,"SPAN",{});var zTt=s(c2e);j_r=r(zTt,"TFAutoModelForImageClassification"),zTt.forEach(t),fGe.forEach(t),sje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(EL.$$.fragment,vl),D_r=i(vl),Yd=n(vl,"P",{});var mee=s(Yd);G_r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=n(mee,"A",{href:!0});var WTt=s(NQ);O_r=r(WTt,"from_pretrained()"),WTt.forEach(t),V_r=r(mee," class method or the "),jQ=n(mee,"A",{href:!0});var QTt=s(jQ);X_r=r(QTt,"from_config()"),QTt.forEach(t),z_r=r(mee,` class
method.`),mee.forEach(t),W_r=i(vl),CL=n(vl,"P",{});var mGe=s(CL);Q_r=r(mGe,"This class cannot be instantiated directly using "),f2e=n(mGe,"CODE",{});var HTt=s(f2e);H_r=r(HTt,"__init__()"),HTt.forEach(t),U_r=r(mGe," (throws an error)."),mGe.forEach(t),J_r=i(vl),$t=n(vl,"DIV",{class:!0});var x0=s($t);T(wL.$$.fragment,x0),Y_r=i(x0),m2e=n(x0,"P",{});var UTt=s(m2e);K_r=r(UTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UTt.forEach(t),Z_r=i(x0),Kd=n(x0,"P",{});var gee=s(Kd);e1r=r(gee,`Note:
Loading a model from its configuration file does `),g2e=n(gee,"STRONG",{});var JTt=s(g2e);o1r=r(JTt,"not"),JTt.forEach(t),r1r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(gee,"A",{href:!0});var YTt=s(DQ);t1r=r(YTt,"from_pretrained()"),YTt.forEach(t),a1r=r(gee," to load the model weights."),gee.forEach(t),n1r=i(x0),T(S7.$$.fragment,x0),x0.forEach(t),s1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(AL.$$.fragment,Fl),l1r=i(Fl),h2e=n(Fl,"P",{});var KTt=s(h2e);i1r=r(KTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KTt.forEach(t),d1r=i(Fl),on=n(Fl,"P",{});var $0=s(on);c1r=r($0,"The model class to instantiate is selected based on the "),p2e=n($0,"CODE",{});var ZTt=s(p2e);f1r=r(ZTt,"model_type"),ZTt.forEach(t),m1r=r($0,` property of the config object (either
passed as an argument or loaded from `),u2e=n($0,"CODE",{});var e7t=s(u2e);g1r=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),h1r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n($0,"CODE",{});var o7t=s(_2e);p1r=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),u1r=r($0,":"),$0.forEach(t),_1r=i(Fl),rn=n(Fl,"UL",{});var k0=s(rn);R7=n(k0,"LI",{});var BRe=s(R7);b2e=n(BRe,"STRONG",{});var r7t=s(b2e);b1r=r(r7t,"convnext"),r7t.forEach(t),v1r=r(BRe," \u2014 "),GQ=n(BRe,"A",{href:!0});var t7t=s(GQ);F1r=r(t7t,"TFConvNextForImageClassification"),t7t.forEach(t),T1r=r(BRe," (ConvNext model)"),BRe.forEach(t),M1r=i(k0),P7=n(k0,"LI",{});var IRe=s(P7);v2e=n(IRe,"STRONG",{});var a7t=s(v2e);E1r=r(a7t,"data2vec-vision"),a7t.forEach(t),C1r=r(IRe," \u2014 "),OQ=n(IRe,"A",{href:!0});var n7t=s(OQ);w1r=r(n7t,"TFData2VecVisionForImageClassification"),n7t.forEach(t),A1r=r(IRe," (Data2VecVision model)"),IRe.forEach(t),y1r=i(k0),B7=n(k0,"LI",{});var qRe=s(B7);F2e=n(qRe,"STRONG",{});var s7t=s(F2e);L1r=r(s7t,"swin"),s7t.forEach(t),x1r=r(qRe," \u2014 "),VQ=n(qRe,"A",{href:!0});var l7t=s(VQ);$1r=r(l7t,"TFSwinForImageClassification"),l7t.forEach(t),k1r=r(qRe," (Swin model)"),qRe.forEach(t),S1r=i(k0),I7=n(k0,"LI",{});var NRe=s(I7);T2e=n(NRe,"STRONG",{});var i7t=s(T2e);R1r=r(i7t,"vit"),i7t.forEach(t),P1r=r(NRe," \u2014 "),XQ=n(NRe,"A",{href:!0});var d7t=s(XQ);B1r=r(d7t,"TFViTForImageClassification"),d7t.forEach(t),I1r=r(NRe," (ViT model)"),NRe.forEach(t),k0.forEach(t),q1r=i(Fl),T(q7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),lje=i(f),Zd=n(f,"H2",{class:!0});var gGe=s(Zd);N7=n(gGe,"A",{id:!0,class:!0,href:!0});var c7t=s(N7);M2e=n(c7t,"SPAN",{});var f7t=s(M2e);T(yL.$$.fragment,f7t),f7t.forEach(t),c7t.forEach(t),N1r=i(gGe),E2e=n(gGe,"SPAN",{});var m7t=s(E2e);j1r=r(m7t,"TFAutoModelForMaskedLM"),m7t.forEach(t),gGe.forEach(t),ije=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(LL.$$.fragment,Tl),D1r=i(Tl),ec=n(Tl,"P",{});var hee=s(ec);G1r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zQ=n(hee,"A",{href:!0});var g7t=s(zQ);O1r=r(g7t,"from_pretrained()"),g7t.forEach(t),V1r=r(hee," class method or the "),WQ=n(hee,"A",{href:!0});var h7t=s(WQ);X1r=r(h7t,"from_config()"),h7t.forEach(t),z1r=r(hee,` class
method.`),hee.forEach(t),W1r=i(Tl),xL=n(Tl,"P",{});var hGe=s(xL);Q1r=r(hGe,"This class cannot be instantiated directly using "),C2e=n(hGe,"CODE",{});var p7t=s(C2e);H1r=r(p7t,"__init__()"),p7t.forEach(t),U1r=r(hGe," (throws an error)."),hGe.forEach(t),J1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var S0=s(kt);T($L.$$.fragment,S0),Y1r=i(S0),w2e=n(S0,"P",{});var u7t=s(w2e);K1r=r(u7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u7t.forEach(t),Z1r=i(S0),oc=n(S0,"P",{});var pee=s(oc);e8r=r(pee,`Note:
Loading a model from its configuration file does `),A2e=n(pee,"STRONG",{});var _7t=s(A2e);o8r=r(_7t,"not"),_7t.forEach(t),r8r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(pee,"A",{href:!0});var b7t=s(QQ);t8r=r(b7t,"from_pretrained()"),b7t.forEach(t),a8r=r(pee," to load the model weights."),pee.forEach(t),n8r=i(S0),T(j7.$$.fragment,S0),S0.forEach(t),s8r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(kL.$$.fragment,Ml),l8r=i(Ml),y2e=n(Ml,"P",{});var v7t=s(y2e);i8r=r(v7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v7t.forEach(t),d8r=i(Ml),tn=n(Ml,"P",{});var R0=s(tn);c8r=r(R0,"The model class to instantiate is selected based on the "),L2e=n(R0,"CODE",{});var F7t=s(L2e);f8r=r(F7t,"model_type"),F7t.forEach(t),m8r=r(R0,` property of the config object (either
passed as an argument or loaded from `),x2e=n(R0,"CODE",{});var T7t=s(x2e);g8r=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),h8r=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(R0,"CODE",{});var M7t=s($2e);p8r=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),u8r=r(R0,":"),R0.forEach(t),_8r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);D7=n(fe,"LI",{});var jRe=s(D7);k2e=n(jRe,"STRONG",{});var E7t=s(k2e);b8r=r(E7t,"albert"),E7t.forEach(t),v8r=r(jRe," \u2014 "),HQ=n(jRe,"A",{href:!0});var C7t=s(HQ);F8r=r(C7t,"TFAlbertForMaskedLM"),C7t.forEach(t),T8r=r(jRe," (ALBERT model)"),jRe.forEach(t),M8r=i(fe),G7=n(fe,"LI",{});var DRe=s(G7);S2e=n(DRe,"STRONG",{});var w7t=s(S2e);E8r=r(w7t,"bert"),w7t.forEach(t),C8r=r(DRe," \u2014 "),UQ=n(DRe,"A",{href:!0});var A7t=s(UQ);w8r=r(A7t,"TFBertForMaskedLM"),A7t.forEach(t),A8r=r(DRe," (BERT model)"),DRe.forEach(t),y8r=i(fe),O7=n(fe,"LI",{});var GRe=s(O7);R2e=n(GRe,"STRONG",{});var y7t=s(R2e);L8r=r(y7t,"camembert"),y7t.forEach(t),x8r=r(GRe," \u2014 "),JQ=n(GRe,"A",{href:!0});var L7t=s(JQ);$8r=r(L7t,"TFCamembertForMaskedLM"),L7t.forEach(t),k8r=r(GRe," (CamemBERT model)"),GRe.forEach(t),S8r=i(fe),V7=n(fe,"LI",{});var ORe=s(V7);P2e=n(ORe,"STRONG",{});var x7t=s(P2e);R8r=r(x7t,"convbert"),x7t.forEach(t),P8r=r(ORe," \u2014 "),YQ=n(ORe,"A",{href:!0});var $7t=s(YQ);B8r=r($7t,"TFConvBertForMaskedLM"),$7t.forEach(t),I8r=r(ORe," (ConvBERT model)"),ORe.forEach(t),q8r=i(fe),X7=n(fe,"LI",{});var VRe=s(X7);B2e=n(VRe,"STRONG",{});var k7t=s(B2e);N8r=r(k7t,"deberta"),k7t.forEach(t),j8r=r(VRe," \u2014 "),KQ=n(VRe,"A",{href:!0});var S7t=s(KQ);D8r=r(S7t,"TFDebertaForMaskedLM"),S7t.forEach(t),G8r=r(VRe," (DeBERTa model)"),VRe.forEach(t),O8r=i(fe),z7=n(fe,"LI",{});var XRe=s(z7);I2e=n(XRe,"STRONG",{});var R7t=s(I2e);V8r=r(R7t,"deberta-v2"),R7t.forEach(t),X8r=r(XRe," \u2014 "),ZQ=n(XRe,"A",{href:!0});var P7t=s(ZQ);z8r=r(P7t,"TFDebertaV2ForMaskedLM"),P7t.forEach(t),W8r=r(XRe," (DeBERTa-v2 model)"),XRe.forEach(t),Q8r=i(fe),W7=n(fe,"LI",{});var zRe=s(W7);q2e=n(zRe,"STRONG",{});var B7t=s(q2e);H8r=r(B7t,"distilbert"),B7t.forEach(t),U8r=r(zRe," \u2014 "),eH=n(zRe,"A",{href:!0});var I7t=s(eH);J8r=r(I7t,"TFDistilBertForMaskedLM"),I7t.forEach(t),Y8r=r(zRe," (DistilBERT model)"),zRe.forEach(t),K8r=i(fe),Q7=n(fe,"LI",{});var WRe=s(Q7);N2e=n(WRe,"STRONG",{});var q7t=s(N2e);Z8r=r(q7t,"electra"),q7t.forEach(t),ebr=r(WRe," \u2014 "),oH=n(WRe,"A",{href:!0});var N7t=s(oH);obr=r(N7t,"TFElectraForMaskedLM"),N7t.forEach(t),rbr=r(WRe," (ELECTRA model)"),WRe.forEach(t),tbr=i(fe),H7=n(fe,"LI",{});var QRe=s(H7);j2e=n(QRe,"STRONG",{});var j7t=s(j2e);abr=r(j7t,"flaubert"),j7t.forEach(t),nbr=r(QRe," \u2014 "),rH=n(QRe,"A",{href:!0});var D7t=s(rH);sbr=r(D7t,"TFFlaubertWithLMHeadModel"),D7t.forEach(t),lbr=r(QRe," (FlauBERT model)"),QRe.forEach(t),ibr=i(fe),U7=n(fe,"LI",{});var HRe=s(U7);D2e=n(HRe,"STRONG",{});var G7t=s(D2e);dbr=r(G7t,"funnel"),G7t.forEach(t),cbr=r(HRe," \u2014 "),tH=n(HRe,"A",{href:!0});var O7t=s(tH);fbr=r(O7t,"TFFunnelForMaskedLM"),O7t.forEach(t),mbr=r(HRe," (Funnel Transformer model)"),HRe.forEach(t),gbr=i(fe),J7=n(fe,"LI",{});var URe=s(J7);G2e=n(URe,"STRONG",{});var V7t=s(G2e);hbr=r(V7t,"layoutlm"),V7t.forEach(t),pbr=r(URe," \u2014 "),aH=n(URe,"A",{href:!0});var X7t=s(aH);ubr=r(X7t,"TFLayoutLMForMaskedLM"),X7t.forEach(t),_br=r(URe," (LayoutLM model)"),URe.forEach(t),bbr=i(fe),Y7=n(fe,"LI",{});var JRe=s(Y7);O2e=n(JRe,"STRONG",{});var z7t=s(O2e);vbr=r(z7t,"longformer"),z7t.forEach(t),Fbr=r(JRe," \u2014 "),nH=n(JRe,"A",{href:!0});var W7t=s(nH);Tbr=r(W7t,"TFLongformerForMaskedLM"),W7t.forEach(t),Mbr=r(JRe," (Longformer model)"),JRe.forEach(t),Ebr=i(fe),K7=n(fe,"LI",{});var YRe=s(K7);V2e=n(YRe,"STRONG",{});var Q7t=s(V2e);Cbr=r(Q7t,"mobilebert"),Q7t.forEach(t),wbr=r(YRe," \u2014 "),sH=n(YRe,"A",{href:!0});var H7t=s(sH);Abr=r(H7t,"TFMobileBertForMaskedLM"),H7t.forEach(t),ybr=r(YRe," (MobileBERT model)"),YRe.forEach(t),Lbr=i(fe),Z7=n(fe,"LI",{});var KRe=s(Z7);X2e=n(KRe,"STRONG",{});var U7t=s(X2e);xbr=r(U7t,"mpnet"),U7t.forEach(t),$br=r(KRe," \u2014 "),lH=n(KRe,"A",{href:!0});var J7t=s(lH);kbr=r(J7t,"TFMPNetForMaskedLM"),J7t.forEach(t),Sbr=r(KRe," (MPNet model)"),KRe.forEach(t),Rbr=i(fe),eM=n(fe,"LI",{});var ZRe=s(eM);z2e=n(ZRe,"STRONG",{});var Y7t=s(z2e);Pbr=r(Y7t,"rembert"),Y7t.forEach(t),Bbr=r(ZRe," \u2014 "),iH=n(ZRe,"A",{href:!0});var K7t=s(iH);Ibr=r(K7t,"TFRemBertForMaskedLM"),K7t.forEach(t),qbr=r(ZRe," (RemBERT model)"),ZRe.forEach(t),Nbr=i(fe),oM=n(fe,"LI",{});var ePe=s(oM);W2e=n(ePe,"STRONG",{});var Z7t=s(W2e);jbr=r(Z7t,"roberta"),Z7t.forEach(t),Dbr=r(ePe," \u2014 "),dH=n(ePe,"A",{href:!0});var eMt=s(dH);Gbr=r(eMt,"TFRobertaForMaskedLM"),eMt.forEach(t),Obr=r(ePe," (RoBERTa model)"),ePe.forEach(t),Vbr=i(fe),rM=n(fe,"LI",{});var oPe=s(rM);Q2e=n(oPe,"STRONG",{});var oMt=s(Q2e);Xbr=r(oMt,"roformer"),oMt.forEach(t),zbr=r(oPe," \u2014 "),cH=n(oPe,"A",{href:!0});var rMt=s(cH);Wbr=r(rMt,"TFRoFormerForMaskedLM"),rMt.forEach(t),Qbr=r(oPe," (RoFormer model)"),oPe.forEach(t),Hbr=i(fe),tM=n(fe,"LI",{});var rPe=s(tM);H2e=n(rPe,"STRONG",{});var tMt=s(H2e);Ubr=r(tMt,"tapas"),tMt.forEach(t),Jbr=r(rPe," \u2014 "),fH=n(rPe,"A",{href:!0});var aMt=s(fH);Ybr=r(aMt,"TFTapasForMaskedLM"),aMt.forEach(t),Kbr=r(rPe," (TAPAS model)"),rPe.forEach(t),Zbr=i(fe),aM=n(fe,"LI",{});var tPe=s(aM);U2e=n(tPe,"STRONG",{});var nMt=s(U2e);e2r=r(nMt,"xlm"),nMt.forEach(t),o2r=r(tPe," \u2014 "),mH=n(tPe,"A",{href:!0});var sMt=s(mH);r2r=r(sMt,"TFXLMWithLMHeadModel"),sMt.forEach(t),t2r=r(tPe," (XLM model)"),tPe.forEach(t),a2r=i(fe),nM=n(fe,"LI",{});var aPe=s(nM);J2e=n(aPe,"STRONG",{});var lMt=s(J2e);n2r=r(lMt,"xlm-roberta"),lMt.forEach(t),s2r=r(aPe," \u2014 "),gH=n(aPe,"A",{href:!0});var iMt=s(gH);l2r=r(iMt,"TFXLMRobertaForMaskedLM"),iMt.forEach(t),i2r=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),fe.forEach(t),d2r=i(Ml),T(sM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),dje=i(f),rc=n(f,"H2",{class:!0});var pGe=s(rc);lM=n(pGe,"A",{id:!0,class:!0,href:!0});var dMt=s(lM);Y2e=n(dMt,"SPAN",{});var cMt=s(Y2e);T(SL.$$.fragment,cMt),cMt.forEach(t),dMt.forEach(t),c2r=i(pGe),K2e=n(pGe,"SPAN",{});var fMt=s(K2e);f2r=r(fMt,"TFAutoModelForSeq2SeqLM"),fMt.forEach(t),pGe.forEach(t),cje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(RL.$$.fragment,El),m2r=i(El),tc=n(El,"P",{});var uee=s(tc);g2r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hH=n(uee,"A",{href:!0});var mMt=s(hH);h2r=r(mMt,"from_pretrained()"),mMt.forEach(t),p2r=r(uee," class method or the "),pH=n(uee,"A",{href:!0});var gMt=s(pH);u2r=r(gMt,"from_config()"),gMt.forEach(t),_2r=r(uee,` class
method.`),uee.forEach(t),b2r=i(El),PL=n(El,"P",{});var uGe=s(PL);v2r=r(uGe,"This class cannot be instantiated directly using "),Z2e=n(uGe,"CODE",{});var hMt=s(Z2e);F2r=r(hMt,"__init__()"),hMt.forEach(t),T2r=r(uGe," (throws an error)."),uGe.forEach(t),M2r=i(El),St=n(El,"DIV",{class:!0});var P0=s(St);T(BL.$$.fragment,P0),E2r=i(P0),eve=n(P0,"P",{});var pMt=s(eve);C2r=r(pMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pMt.forEach(t),w2r=i(P0),ac=n(P0,"P",{});var _ee=s(ac);A2r=r(_ee,`Note:
Loading a model from its configuration file does `),ove=n(_ee,"STRONG",{});var uMt=s(ove);y2r=r(uMt,"not"),uMt.forEach(t),L2r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(_ee,"A",{href:!0});var _Mt=s(uH);x2r=r(_Mt,"from_pretrained()"),_Mt.forEach(t),$2r=r(_ee," to load the model weights."),_ee.forEach(t),k2r=i(P0),T(iM.$$.fragment,P0),P0.forEach(t),S2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(IL.$$.fragment,Cl),R2r=i(Cl),rve=n(Cl,"P",{});var bMt=s(rve);P2r=r(bMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bMt.forEach(t),B2r=i(Cl),an=n(Cl,"P",{});var B0=s(an);I2r=r(B0,"The model class to instantiate is selected based on the "),tve=n(B0,"CODE",{});var vMt=s(tve);q2r=r(vMt,"model_type"),vMt.forEach(t),N2r=r(B0,` property of the config object (either
passed as an argument or loaded from `),ave=n(B0,"CODE",{});var FMt=s(ave);j2r=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),D2r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(B0,"CODE",{});var TMt=s(nve);G2r=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),O2r=r(B0,":"),B0.forEach(t),V2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);dM=n(Be,"LI",{});var nPe=s(dM);sve=n(nPe,"STRONG",{});var MMt=s(sve);X2r=r(MMt,"bart"),MMt.forEach(t),z2r=r(nPe," \u2014 "),_H=n(nPe,"A",{href:!0});var EMt=s(_H);W2r=r(EMt,"TFBartForConditionalGeneration"),EMt.forEach(t),Q2r=r(nPe," (BART model)"),nPe.forEach(t),H2r=i(Be),cM=n(Be,"LI",{});var sPe=s(cM);lve=n(sPe,"STRONG",{});var CMt=s(lve);U2r=r(CMt,"blenderbot"),CMt.forEach(t),J2r=r(sPe," \u2014 "),bH=n(sPe,"A",{href:!0});var wMt=s(bH);Y2r=r(wMt,"TFBlenderbotForConditionalGeneration"),wMt.forEach(t),K2r=r(sPe," (Blenderbot model)"),sPe.forEach(t),Z2r=i(Be),fM=n(Be,"LI",{});var lPe=s(fM);ive=n(lPe,"STRONG",{});var AMt=s(ive);evr=r(AMt,"blenderbot-small"),AMt.forEach(t),ovr=r(lPe," \u2014 "),vH=n(lPe,"A",{href:!0});var yMt=s(vH);rvr=r(yMt,"TFBlenderbotSmallForConditionalGeneration"),yMt.forEach(t),tvr=r(lPe," (BlenderbotSmall model)"),lPe.forEach(t),avr=i(Be),mM=n(Be,"LI",{});var iPe=s(mM);dve=n(iPe,"STRONG",{});var LMt=s(dve);nvr=r(LMt,"encoder-decoder"),LMt.forEach(t),svr=r(iPe," \u2014 "),FH=n(iPe,"A",{href:!0});var xMt=s(FH);lvr=r(xMt,"TFEncoderDecoderModel"),xMt.forEach(t),ivr=r(iPe," (Encoder decoder model)"),iPe.forEach(t),dvr=i(Be),gM=n(Be,"LI",{});var dPe=s(gM);cve=n(dPe,"STRONG",{});var $Mt=s(cve);cvr=r($Mt,"led"),$Mt.forEach(t),fvr=r(dPe," \u2014 "),TH=n(dPe,"A",{href:!0});var kMt=s(TH);mvr=r(kMt,"TFLEDForConditionalGeneration"),kMt.forEach(t),gvr=r(dPe," (LED model)"),dPe.forEach(t),hvr=i(Be),hM=n(Be,"LI",{});var cPe=s(hM);fve=n(cPe,"STRONG",{});var SMt=s(fve);pvr=r(SMt,"marian"),SMt.forEach(t),uvr=r(cPe," \u2014 "),MH=n(cPe,"A",{href:!0});var RMt=s(MH);_vr=r(RMt,"TFMarianMTModel"),RMt.forEach(t),bvr=r(cPe," (Marian model)"),cPe.forEach(t),vvr=i(Be),pM=n(Be,"LI",{});var fPe=s(pM);mve=n(fPe,"STRONG",{});var PMt=s(mve);Fvr=r(PMt,"mbart"),PMt.forEach(t),Tvr=r(fPe," \u2014 "),EH=n(fPe,"A",{href:!0});var BMt=s(EH);Mvr=r(BMt,"TFMBartForConditionalGeneration"),BMt.forEach(t),Evr=r(fPe," (mBART model)"),fPe.forEach(t),Cvr=i(Be),uM=n(Be,"LI",{});var mPe=s(uM);gve=n(mPe,"STRONG",{});var IMt=s(gve);wvr=r(IMt,"mt5"),IMt.forEach(t),Avr=r(mPe," \u2014 "),CH=n(mPe,"A",{href:!0});var qMt=s(CH);yvr=r(qMt,"TFMT5ForConditionalGeneration"),qMt.forEach(t),Lvr=r(mPe," (mT5 model)"),mPe.forEach(t),xvr=i(Be),_M=n(Be,"LI",{});var gPe=s(_M);hve=n(gPe,"STRONG",{});var NMt=s(hve);$vr=r(NMt,"pegasus"),NMt.forEach(t),kvr=r(gPe," \u2014 "),wH=n(gPe,"A",{href:!0});var jMt=s(wH);Svr=r(jMt,"TFPegasusForConditionalGeneration"),jMt.forEach(t),Rvr=r(gPe," (Pegasus model)"),gPe.forEach(t),Pvr=i(Be),bM=n(Be,"LI",{});var hPe=s(bM);pve=n(hPe,"STRONG",{});var DMt=s(pve);Bvr=r(DMt,"t5"),DMt.forEach(t),Ivr=r(hPe," \u2014 "),AH=n(hPe,"A",{href:!0});var GMt=s(AH);qvr=r(GMt,"TFT5ForConditionalGeneration"),GMt.forEach(t),Nvr=r(hPe," (T5 model)"),hPe.forEach(t),Be.forEach(t),jvr=i(Cl),T(vM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),fje=i(f),nc=n(f,"H2",{class:!0});var _Ge=s(nc);FM=n(_Ge,"A",{id:!0,class:!0,href:!0});var OMt=s(FM);uve=n(OMt,"SPAN",{});var VMt=s(uve);T(qL.$$.fragment,VMt),VMt.forEach(t),OMt.forEach(t),Dvr=i(_Ge),_ve=n(_Ge,"SPAN",{});var XMt=s(_ve);Gvr=r(XMt,"TFAutoModelForSequenceClassification"),XMt.forEach(t),_Ge.forEach(t),mje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(NL.$$.fragment,wl),Ovr=i(wl),sc=n(wl,"P",{});var bee=s(sc);Vvr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yH=n(bee,"A",{href:!0});var zMt=s(yH);Xvr=r(zMt,"from_pretrained()"),zMt.forEach(t),zvr=r(bee," class method or the "),LH=n(bee,"A",{href:!0});var WMt=s(LH);Wvr=r(WMt,"from_config()"),WMt.forEach(t),Qvr=r(bee,` class
method.`),bee.forEach(t),Hvr=i(wl),jL=n(wl,"P",{});var bGe=s(jL);Uvr=r(bGe,"This class cannot be instantiated directly using "),bve=n(bGe,"CODE",{});var QMt=s(bve);Jvr=r(QMt,"__init__()"),QMt.forEach(t),Yvr=r(bGe," (throws an error)."),bGe.forEach(t),Kvr=i(wl),Rt=n(wl,"DIV",{class:!0});var I0=s(Rt);T(DL.$$.fragment,I0),Zvr=i(I0),vve=n(I0,"P",{});var HMt=s(vve);e3r=r(HMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HMt.forEach(t),o3r=i(I0),lc=n(I0,"P",{});var vee=s(lc);r3r=r(vee,`Note:
Loading a model from its configuration file does `),Fve=n(vee,"STRONG",{});var UMt=s(Fve);t3r=r(UMt,"not"),UMt.forEach(t),a3r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(vee,"A",{href:!0});var JMt=s(xH);n3r=r(JMt,"from_pretrained()"),JMt.forEach(t),s3r=r(vee," to load the model weights."),vee.forEach(t),l3r=i(I0),T(TM.$$.fragment,I0),I0.forEach(t),i3r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(GL.$$.fragment,Al),d3r=i(Al),Tve=n(Al,"P",{});var YMt=s(Tve);c3r=r(YMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YMt.forEach(t),f3r=i(Al),nn=n(Al,"P",{});var q0=s(nn);m3r=r(q0,"The model class to instantiate is selected based on the "),Mve=n(q0,"CODE",{});var KMt=s(Mve);g3r=r(KMt,"model_type"),KMt.forEach(t),h3r=r(q0,` property of the config object (either
passed as an argument or loaded from `),Eve=n(q0,"CODE",{});var ZMt=s(Eve);p3r=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),u3r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(q0,"CODE",{});var e4t=s(Cve);_3r=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),b3r=r(q0,":"),q0.forEach(t),v3r=i(Al),oe=n(Al,"UL",{});var ae=s(oe);MM=n(ae,"LI",{});var pPe=s(MM);wve=n(pPe,"STRONG",{});var o4t=s(wve);F3r=r(o4t,"albert"),o4t.forEach(t),T3r=r(pPe," \u2014 "),$H=n(pPe,"A",{href:!0});var r4t=s($H);M3r=r(r4t,"TFAlbertForSequenceClassification"),r4t.forEach(t),E3r=r(pPe," (ALBERT model)"),pPe.forEach(t),C3r=i(ae),EM=n(ae,"LI",{});var uPe=s(EM);Ave=n(uPe,"STRONG",{});var t4t=s(Ave);w3r=r(t4t,"bert"),t4t.forEach(t),A3r=r(uPe," \u2014 "),kH=n(uPe,"A",{href:!0});var a4t=s(kH);y3r=r(a4t,"TFBertForSequenceClassification"),a4t.forEach(t),L3r=r(uPe," (BERT model)"),uPe.forEach(t),x3r=i(ae),CM=n(ae,"LI",{});var _Pe=s(CM);yve=n(_Pe,"STRONG",{});var n4t=s(yve);$3r=r(n4t,"camembert"),n4t.forEach(t),k3r=r(_Pe," \u2014 "),SH=n(_Pe,"A",{href:!0});var s4t=s(SH);S3r=r(s4t,"TFCamembertForSequenceClassification"),s4t.forEach(t),R3r=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),P3r=i(ae),wM=n(ae,"LI",{});var bPe=s(wM);Lve=n(bPe,"STRONG",{});var l4t=s(Lve);B3r=r(l4t,"convbert"),l4t.forEach(t),I3r=r(bPe," \u2014 "),RH=n(bPe,"A",{href:!0});var i4t=s(RH);q3r=r(i4t,"TFConvBertForSequenceClassification"),i4t.forEach(t),N3r=r(bPe," (ConvBERT model)"),bPe.forEach(t),j3r=i(ae),AM=n(ae,"LI",{});var vPe=s(AM);xve=n(vPe,"STRONG",{});var d4t=s(xve);D3r=r(d4t,"ctrl"),d4t.forEach(t),G3r=r(vPe," \u2014 "),PH=n(vPe,"A",{href:!0});var c4t=s(PH);O3r=r(c4t,"TFCTRLForSequenceClassification"),c4t.forEach(t),V3r=r(vPe," (CTRL model)"),vPe.forEach(t),X3r=i(ae),yM=n(ae,"LI",{});var FPe=s(yM);$ve=n(FPe,"STRONG",{});var f4t=s($ve);z3r=r(f4t,"deberta"),f4t.forEach(t),W3r=r(FPe," \u2014 "),BH=n(FPe,"A",{href:!0});var m4t=s(BH);Q3r=r(m4t,"TFDebertaForSequenceClassification"),m4t.forEach(t),H3r=r(FPe," (DeBERTa model)"),FPe.forEach(t),U3r=i(ae),LM=n(ae,"LI",{});var TPe=s(LM);kve=n(TPe,"STRONG",{});var g4t=s(kve);J3r=r(g4t,"deberta-v2"),g4t.forEach(t),Y3r=r(TPe," \u2014 "),IH=n(TPe,"A",{href:!0});var h4t=s(IH);K3r=r(h4t,"TFDebertaV2ForSequenceClassification"),h4t.forEach(t),Z3r=r(TPe," (DeBERTa-v2 model)"),TPe.forEach(t),eFr=i(ae),xM=n(ae,"LI",{});var MPe=s(xM);Sve=n(MPe,"STRONG",{});var p4t=s(Sve);oFr=r(p4t,"distilbert"),p4t.forEach(t),rFr=r(MPe," \u2014 "),qH=n(MPe,"A",{href:!0});var u4t=s(qH);tFr=r(u4t,"TFDistilBertForSequenceClassification"),u4t.forEach(t),aFr=r(MPe," (DistilBERT model)"),MPe.forEach(t),nFr=i(ae),$M=n(ae,"LI",{});var EPe=s($M);Rve=n(EPe,"STRONG",{});var _4t=s(Rve);sFr=r(_4t,"electra"),_4t.forEach(t),lFr=r(EPe," \u2014 "),NH=n(EPe,"A",{href:!0});var b4t=s(NH);iFr=r(b4t,"TFElectraForSequenceClassification"),b4t.forEach(t),dFr=r(EPe," (ELECTRA model)"),EPe.forEach(t),cFr=i(ae),kM=n(ae,"LI",{});var CPe=s(kM);Pve=n(CPe,"STRONG",{});var v4t=s(Pve);fFr=r(v4t,"flaubert"),v4t.forEach(t),mFr=r(CPe," \u2014 "),jH=n(CPe,"A",{href:!0});var F4t=s(jH);gFr=r(F4t,"TFFlaubertForSequenceClassification"),F4t.forEach(t),hFr=r(CPe," (FlauBERT model)"),CPe.forEach(t),pFr=i(ae),SM=n(ae,"LI",{});var wPe=s(SM);Bve=n(wPe,"STRONG",{});var T4t=s(Bve);uFr=r(T4t,"funnel"),T4t.forEach(t),_Fr=r(wPe," \u2014 "),DH=n(wPe,"A",{href:!0});var M4t=s(DH);bFr=r(M4t,"TFFunnelForSequenceClassification"),M4t.forEach(t),vFr=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),FFr=i(ae),RM=n(ae,"LI",{});var APe=s(RM);Ive=n(APe,"STRONG",{});var E4t=s(Ive);TFr=r(E4t,"gpt2"),E4t.forEach(t),MFr=r(APe," \u2014 "),GH=n(APe,"A",{href:!0});var C4t=s(GH);EFr=r(C4t,"TFGPT2ForSequenceClassification"),C4t.forEach(t),CFr=r(APe," (OpenAI GPT-2 model)"),APe.forEach(t),wFr=i(ae),PM=n(ae,"LI",{});var yPe=s(PM);qve=n(yPe,"STRONG",{});var w4t=s(qve);AFr=r(w4t,"gptj"),w4t.forEach(t),yFr=r(yPe," \u2014 "),OH=n(yPe,"A",{href:!0});var A4t=s(OH);LFr=r(A4t,"TFGPTJForSequenceClassification"),A4t.forEach(t),xFr=r(yPe," (GPT-J model)"),yPe.forEach(t),$Fr=i(ae),BM=n(ae,"LI",{});var LPe=s(BM);Nve=n(LPe,"STRONG",{});var y4t=s(Nve);kFr=r(y4t,"layoutlm"),y4t.forEach(t),SFr=r(LPe," \u2014 "),VH=n(LPe,"A",{href:!0});var L4t=s(VH);RFr=r(L4t,"TFLayoutLMForSequenceClassification"),L4t.forEach(t),PFr=r(LPe," (LayoutLM model)"),LPe.forEach(t),BFr=i(ae),IM=n(ae,"LI",{});var xPe=s(IM);jve=n(xPe,"STRONG",{});var x4t=s(jve);IFr=r(x4t,"longformer"),x4t.forEach(t),qFr=r(xPe," \u2014 "),XH=n(xPe,"A",{href:!0});var $4t=s(XH);NFr=r($4t,"TFLongformerForSequenceClassification"),$4t.forEach(t),jFr=r(xPe," (Longformer model)"),xPe.forEach(t),DFr=i(ae),qM=n(ae,"LI",{});var $Pe=s(qM);Dve=n($Pe,"STRONG",{});var k4t=s(Dve);GFr=r(k4t,"mobilebert"),k4t.forEach(t),OFr=r($Pe," \u2014 "),zH=n($Pe,"A",{href:!0});var S4t=s(zH);VFr=r(S4t,"TFMobileBertForSequenceClassification"),S4t.forEach(t),XFr=r($Pe," (MobileBERT model)"),$Pe.forEach(t),zFr=i(ae),NM=n(ae,"LI",{});var kPe=s(NM);Gve=n(kPe,"STRONG",{});var R4t=s(Gve);WFr=r(R4t,"mpnet"),R4t.forEach(t),QFr=r(kPe," \u2014 "),WH=n(kPe,"A",{href:!0});var P4t=s(WH);HFr=r(P4t,"TFMPNetForSequenceClassification"),P4t.forEach(t),UFr=r(kPe," (MPNet model)"),kPe.forEach(t),JFr=i(ae),jM=n(ae,"LI",{});var SPe=s(jM);Ove=n(SPe,"STRONG",{});var B4t=s(Ove);YFr=r(B4t,"openai-gpt"),B4t.forEach(t),KFr=r(SPe," \u2014 "),QH=n(SPe,"A",{href:!0});var I4t=s(QH);ZFr=r(I4t,"TFOpenAIGPTForSequenceClassification"),I4t.forEach(t),eTr=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),oTr=i(ae),DM=n(ae,"LI",{});var RPe=s(DM);Vve=n(RPe,"STRONG",{});var q4t=s(Vve);rTr=r(q4t,"rembert"),q4t.forEach(t),tTr=r(RPe," \u2014 "),HH=n(RPe,"A",{href:!0});var N4t=s(HH);aTr=r(N4t,"TFRemBertForSequenceClassification"),N4t.forEach(t),nTr=r(RPe," (RemBERT model)"),RPe.forEach(t),sTr=i(ae),GM=n(ae,"LI",{});var PPe=s(GM);Xve=n(PPe,"STRONG",{});var j4t=s(Xve);lTr=r(j4t,"roberta"),j4t.forEach(t),iTr=r(PPe," \u2014 "),UH=n(PPe,"A",{href:!0});var D4t=s(UH);dTr=r(D4t,"TFRobertaForSequenceClassification"),D4t.forEach(t),cTr=r(PPe," (RoBERTa model)"),PPe.forEach(t),fTr=i(ae),OM=n(ae,"LI",{});var BPe=s(OM);zve=n(BPe,"STRONG",{});var G4t=s(zve);mTr=r(G4t,"roformer"),G4t.forEach(t),gTr=r(BPe," \u2014 "),JH=n(BPe,"A",{href:!0});var O4t=s(JH);hTr=r(O4t,"TFRoFormerForSequenceClassification"),O4t.forEach(t),pTr=r(BPe," (RoFormer model)"),BPe.forEach(t),uTr=i(ae),VM=n(ae,"LI",{});var IPe=s(VM);Wve=n(IPe,"STRONG",{});var V4t=s(Wve);_Tr=r(V4t,"tapas"),V4t.forEach(t),bTr=r(IPe," \u2014 "),YH=n(IPe,"A",{href:!0});var X4t=s(YH);vTr=r(X4t,"TFTapasForSequenceClassification"),X4t.forEach(t),FTr=r(IPe," (TAPAS model)"),IPe.forEach(t),TTr=i(ae),XM=n(ae,"LI",{});var qPe=s(XM);Qve=n(qPe,"STRONG",{});var z4t=s(Qve);MTr=r(z4t,"transfo-xl"),z4t.forEach(t),ETr=r(qPe," \u2014 "),KH=n(qPe,"A",{href:!0});var W4t=s(KH);CTr=r(W4t,"TFTransfoXLForSequenceClassification"),W4t.forEach(t),wTr=r(qPe," (Transformer-XL model)"),qPe.forEach(t),ATr=i(ae),zM=n(ae,"LI",{});var NPe=s(zM);Hve=n(NPe,"STRONG",{});var Q4t=s(Hve);yTr=r(Q4t,"xlm"),Q4t.forEach(t),LTr=r(NPe," \u2014 "),ZH=n(NPe,"A",{href:!0});var H4t=s(ZH);xTr=r(H4t,"TFXLMForSequenceClassification"),H4t.forEach(t),$Tr=r(NPe," (XLM model)"),NPe.forEach(t),kTr=i(ae),WM=n(ae,"LI",{});var jPe=s(WM);Uve=n(jPe,"STRONG",{});var U4t=s(Uve);STr=r(U4t,"xlm-roberta"),U4t.forEach(t),RTr=r(jPe," \u2014 "),eU=n(jPe,"A",{href:!0});var J4t=s(eU);PTr=r(J4t,"TFXLMRobertaForSequenceClassification"),J4t.forEach(t),BTr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),ITr=i(ae),QM=n(ae,"LI",{});var DPe=s(QM);Jve=n(DPe,"STRONG",{});var Y4t=s(Jve);qTr=r(Y4t,"xlnet"),Y4t.forEach(t),NTr=r(DPe," \u2014 "),oU=n(DPe,"A",{href:!0});var K4t=s(oU);jTr=r(K4t,"TFXLNetForSequenceClassification"),K4t.forEach(t),DTr=r(DPe," (XLNet model)"),DPe.forEach(t),ae.forEach(t),GTr=i(Al),T(HM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),gje=i(f),ic=n(f,"H2",{class:!0});var vGe=s(ic);UM=n(vGe,"A",{id:!0,class:!0,href:!0});var Z4t=s(UM);Yve=n(Z4t,"SPAN",{});var eEt=s(Yve);T(OL.$$.fragment,eEt),eEt.forEach(t),Z4t.forEach(t),OTr=i(vGe),Kve=n(vGe,"SPAN",{});var oEt=s(Kve);VTr=r(oEt,"TFAutoModelForMultipleChoice"),oEt.forEach(t),vGe.forEach(t),hje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(VL.$$.fragment,yl),XTr=i(yl),dc=n(yl,"P",{});var Fee=s(dc);zTr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rU=n(Fee,"A",{href:!0});var rEt=s(rU);WTr=r(rEt,"from_pretrained()"),rEt.forEach(t),QTr=r(Fee," class method or the "),tU=n(Fee,"A",{href:!0});var tEt=s(tU);HTr=r(tEt,"from_config()"),tEt.forEach(t),UTr=r(Fee,` class
method.`),Fee.forEach(t),JTr=i(yl),XL=n(yl,"P",{});var FGe=s(XL);YTr=r(FGe,"This class cannot be instantiated directly using "),Zve=n(FGe,"CODE",{});var aEt=s(Zve);KTr=r(aEt,"__init__()"),aEt.forEach(t),ZTr=r(FGe," (throws an error)."),FGe.forEach(t),e7r=i(yl),Pt=n(yl,"DIV",{class:!0});var N0=s(Pt);T(zL.$$.fragment,N0),o7r=i(N0),e3e=n(N0,"P",{});var nEt=s(e3e);r7r=r(nEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nEt.forEach(t),t7r=i(N0),cc=n(N0,"P",{});var Tee=s(cc);a7r=r(Tee,`Note:
Loading a model from its configuration file does `),o3e=n(Tee,"STRONG",{});var sEt=s(o3e);n7r=r(sEt,"not"),sEt.forEach(t),s7r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Tee,"A",{href:!0});var lEt=s(aU);l7r=r(lEt,"from_pretrained()"),lEt.forEach(t),i7r=r(Tee," to load the model weights."),Tee.forEach(t),d7r=i(N0),T(JM.$$.fragment,N0),N0.forEach(t),c7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(WL.$$.fragment,Ll),f7r=i(Ll),r3e=n(Ll,"P",{});var iEt=s(r3e);m7r=r(iEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iEt.forEach(t),g7r=i(Ll),sn=n(Ll,"P",{});var j0=s(sn);h7r=r(j0,"The model class to instantiate is selected based on the "),t3e=n(j0,"CODE",{});var dEt=s(t3e);p7r=r(dEt,"model_type"),dEt.forEach(t),u7r=r(j0,` property of the config object (either
passed as an argument or loaded from `),a3e=n(j0,"CODE",{});var cEt=s(a3e);_7r=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),b7r=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(j0,"CODE",{});var fEt=s(n3e);v7r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),F7r=r(j0,":"),j0.forEach(t),T7r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);YM=n(be,"LI",{});var GPe=s(YM);s3e=n(GPe,"STRONG",{});var mEt=s(s3e);M7r=r(mEt,"albert"),mEt.forEach(t),E7r=r(GPe," \u2014 "),nU=n(GPe,"A",{href:!0});var gEt=s(nU);C7r=r(gEt,"TFAlbertForMultipleChoice"),gEt.forEach(t),w7r=r(GPe," (ALBERT model)"),GPe.forEach(t),A7r=i(be),KM=n(be,"LI",{});var OPe=s(KM);l3e=n(OPe,"STRONG",{});var hEt=s(l3e);y7r=r(hEt,"bert"),hEt.forEach(t),L7r=r(OPe," \u2014 "),sU=n(OPe,"A",{href:!0});var pEt=s(sU);x7r=r(pEt,"TFBertForMultipleChoice"),pEt.forEach(t),$7r=r(OPe," (BERT model)"),OPe.forEach(t),k7r=i(be),ZM=n(be,"LI",{});var VPe=s(ZM);i3e=n(VPe,"STRONG",{});var uEt=s(i3e);S7r=r(uEt,"camembert"),uEt.forEach(t),R7r=r(VPe," \u2014 "),lU=n(VPe,"A",{href:!0});var _Et=s(lU);P7r=r(_Et,"TFCamembertForMultipleChoice"),_Et.forEach(t),B7r=r(VPe," (CamemBERT model)"),VPe.forEach(t),I7r=i(be),e4=n(be,"LI",{});var XPe=s(e4);d3e=n(XPe,"STRONG",{});var bEt=s(d3e);q7r=r(bEt,"convbert"),bEt.forEach(t),N7r=r(XPe," \u2014 "),iU=n(XPe,"A",{href:!0});var vEt=s(iU);j7r=r(vEt,"TFConvBertForMultipleChoice"),vEt.forEach(t),D7r=r(XPe," (ConvBERT model)"),XPe.forEach(t),G7r=i(be),o4=n(be,"LI",{});var zPe=s(o4);c3e=n(zPe,"STRONG",{});var FEt=s(c3e);O7r=r(FEt,"distilbert"),FEt.forEach(t),V7r=r(zPe," \u2014 "),dU=n(zPe,"A",{href:!0});var TEt=s(dU);X7r=r(TEt,"TFDistilBertForMultipleChoice"),TEt.forEach(t),z7r=r(zPe," (DistilBERT model)"),zPe.forEach(t),W7r=i(be),r4=n(be,"LI",{});var WPe=s(r4);f3e=n(WPe,"STRONG",{});var MEt=s(f3e);Q7r=r(MEt,"electra"),MEt.forEach(t),H7r=r(WPe," \u2014 "),cU=n(WPe,"A",{href:!0});var EEt=s(cU);U7r=r(EEt,"TFElectraForMultipleChoice"),EEt.forEach(t),J7r=r(WPe," (ELECTRA model)"),WPe.forEach(t),Y7r=i(be),t4=n(be,"LI",{});var QPe=s(t4);m3e=n(QPe,"STRONG",{});var CEt=s(m3e);K7r=r(CEt,"flaubert"),CEt.forEach(t),Z7r=r(QPe," \u2014 "),fU=n(QPe,"A",{href:!0});var wEt=s(fU);eMr=r(wEt,"TFFlaubertForMultipleChoice"),wEt.forEach(t),oMr=r(QPe," (FlauBERT model)"),QPe.forEach(t),rMr=i(be),a4=n(be,"LI",{});var HPe=s(a4);g3e=n(HPe,"STRONG",{});var AEt=s(g3e);tMr=r(AEt,"funnel"),AEt.forEach(t),aMr=r(HPe," \u2014 "),mU=n(HPe,"A",{href:!0});var yEt=s(mU);nMr=r(yEt,"TFFunnelForMultipleChoice"),yEt.forEach(t),sMr=r(HPe," (Funnel Transformer model)"),HPe.forEach(t),lMr=i(be),n4=n(be,"LI",{});var UPe=s(n4);h3e=n(UPe,"STRONG",{});var LEt=s(h3e);iMr=r(LEt,"longformer"),LEt.forEach(t),dMr=r(UPe," \u2014 "),gU=n(UPe,"A",{href:!0});var xEt=s(gU);cMr=r(xEt,"TFLongformerForMultipleChoice"),xEt.forEach(t),fMr=r(UPe," (Longformer model)"),UPe.forEach(t),mMr=i(be),s4=n(be,"LI",{});var JPe=s(s4);p3e=n(JPe,"STRONG",{});var $Et=s(p3e);gMr=r($Et,"mobilebert"),$Et.forEach(t),hMr=r(JPe," \u2014 "),hU=n(JPe,"A",{href:!0});var kEt=s(hU);pMr=r(kEt,"TFMobileBertForMultipleChoice"),kEt.forEach(t),uMr=r(JPe," (MobileBERT model)"),JPe.forEach(t),_Mr=i(be),l4=n(be,"LI",{});var YPe=s(l4);u3e=n(YPe,"STRONG",{});var SEt=s(u3e);bMr=r(SEt,"mpnet"),SEt.forEach(t),vMr=r(YPe," \u2014 "),pU=n(YPe,"A",{href:!0});var REt=s(pU);FMr=r(REt,"TFMPNetForMultipleChoice"),REt.forEach(t),TMr=r(YPe," (MPNet model)"),YPe.forEach(t),MMr=i(be),i4=n(be,"LI",{});var KPe=s(i4);_3e=n(KPe,"STRONG",{});var PEt=s(_3e);EMr=r(PEt,"rembert"),PEt.forEach(t),CMr=r(KPe," \u2014 "),uU=n(KPe,"A",{href:!0});var BEt=s(uU);wMr=r(BEt,"TFRemBertForMultipleChoice"),BEt.forEach(t),AMr=r(KPe," (RemBERT model)"),KPe.forEach(t),yMr=i(be),d4=n(be,"LI",{});var ZPe=s(d4);b3e=n(ZPe,"STRONG",{});var IEt=s(b3e);LMr=r(IEt,"roberta"),IEt.forEach(t),xMr=r(ZPe," \u2014 "),_U=n(ZPe,"A",{href:!0});var qEt=s(_U);$Mr=r(qEt,"TFRobertaForMultipleChoice"),qEt.forEach(t),kMr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),SMr=i(be),c4=n(be,"LI",{});var eBe=s(c4);v3e=n(eBe,"STRONG",{});var NEt=s(v3e);RMr=r(NEt,"roformer"),NEt.forEach(t),PMr=r(eBe," \u2014 "),bU=n(eBe,"A",{href:!0});var jEt=s(bU);BMr=r(jEt,"TFRoFormerForMultipleChoice"),jEt.forEach(t),IMr=r(eBe," (RoFormer model)"),eBe.forEach(t),qMr=i(be),f4=n(be,"LI",{});var oBe=s(f4);F3e=n(oBe,"STRONG",{});var DEt=s(F3e);NMr=r(DEt,"xlm"),DEt.forEach(t),jMr=r(oBe," \u2014 "),vU=n(oBe,"A",{href:!0});var GEt=s(vU);DMr=r(GEt,"TFXLMForMultipleChoice"),GEt.forEach(t),GMr=r(oBe," (XLM model)"),oBe.forEach(t),OMr=i(be),m4=n(be,"LI",{});var rBe=s(m4);T3e=n(rBe,"STRONG",{});var OEt=s(T3e);VMr=r(OEt,"xlm-roberta"),OEt.forEach(t),XMr=r(rBe," \u2014 "),FU=n(rBe,"A",{href:!0});var VEt=s(FU);zMr=r(VEt,"TFXLMRobertaForMultipleChoice"),VEt.forEach(t),WMr=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),QMr=i(be),g4=n(be,"LI",{});var tBe=s(g4);M3e=n(tBe,"STRONG",{});var XEt=s(M3e);HMr=r(XEt,"xlnet"),XEt.forEach(t),UMr=r(tBe," \u2014 "),TU=n(tBe,"A",{href:!0});var zEt=s(TU);JMr=r(zEt,"TFXLNetForMultipleChoice"),zEt.forEach(t),YMr=r(tBe," (XLNet model)"),tBe.forEach(t),be.forEach(t),KMr=i(Ll),T(h4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),pje=i(f),fc=n(f,"H2",{class:!0});var TGe=s(fc);p4=n(TGe,"A",{id:!0,class:!0,href:!0});var WEt=s(p4);E3e=n(WEt,"SPAN",{});var QEt=s(E3e);T(QL.$$.fragment,QEt),QEt.forEach(t),WEt.forEach(t),ZMr=i(TGe),C3e=n(TGe,"SPAN",{});var HEt=s(C3e);e4r=r(HEt,"TFAutoModelForNextSentencePrediction"),HEt.forEach(t),TGe.forEach(t),uje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(HL.$$.fragment,xl),o4r=i(xl),mc=n(xl,"P",{});var Mee=s(mc);r4r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=n(Mee,"A",{href:!0});var UEt=s(MU);t4r=r(UEt,"from_pretrained()"),UEt.forEach(t),a4r=r(Mee," class method or the "),EU=n(Mee,"A",{href:!0});var JEt=s(EU);n4r=r(JEt,"from_config()"),JEt.forEach(t),s4r=r(Mee,` class
method.`),Mee.forEach(t),l4r=i(xl),UL=n(xl,"P",{});var MGe=s(UL);i4r=r(MGe,"This class cannot be instantiated directly using "),w3e=n(MGe,"CODE",{});var YEt=s(w3e);d4r=r(YEt,"__init__()"),YEt.forEach(t),c4r=r(MGe," (throws an error)."),MGe.forEach(t),f4r=i(xl),Bt=n(xl,"DIV",{class:!0});var D0=s(Bt);T(JL.$$.fragment,D0),m4r=i(D0),A3e=n(D0,"P",{});var KEt=s(A3e);g4r=r(KEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KEt.forEach(t),h4r=i(D0),gc=n(D0,"P",{});var Eee=s(gc);p4r=r(Eee,`Note:
Loading a model from its configuration file does `),y3e=n(Eee,"STRONG",{});var ZEt=s(y3e);u4r=r(ZEt,"not"),ZEt.forEach(t),_4r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Eee,"A",{href:!0});var eCt=s(CU);b4r=r(eCt,"from_pretrained()"),eCt.forEach(t),v4r=r(Eee," to load the model weights."),Eee.forEach(t),F4r=i(D0),T(u4.$$.fragment,D0),D0.forEach(t),T4r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(YL.$$.fragment,$l),M4r=i($l),L3e=n($l,"P",{});var oCt=s(L3e);E4r=r(oCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oCt.forEach(t),C4r=i($l),ln=n($l,"P",{});var G0=s(ln);w4r=r(G0,"The model class to instantiate is selected based on the "),x3e=n(G0,"CODE",{});var rCt=s(x3e);A4r=r(rCt,"model_type"),rCt.forEach(t),y4r=r(G0,` property of the config object (either
passed as an argument or loaded from `),$3e=n(G0,"CODE",{});var tCt=s($3e);L4r=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),x4r=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(G0,"CODE",{});var aCt=s(k3e);$4r=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),k4r=r(G0,":"),G0.forEach(t),S4r=i($l),KL=n($l,"UL",{});var EGe=s(KL);_4=n(EGe,"LI",{});var aBe=s(_4);S3e=n(aBe,"STRONG",{});var nCt=s(S3e);R4r=r(nCt,"bert"),nCt.forEach(t),P4r=r(aBe," \u2014 "),wU=n(aBe,"A",{href:!0});var sCt=s(wU);B4r=r(sCt,"TFBertForNextSentencePrediction"),sCt.forEach(t),I4r=r(aBe," (BERT model)"),aBe.forEach(t),q4r=i(EGe),b4=n(EGe,"LI",{});var nBe=s(b4);R3e=n(nBe,"STRONG",{});var lCt=s(R3e);N4r=r(lCt,"mobilebert"),lCt.forEach(t),j4r=r(nBe," \u2014 "),AU=n(nBe,"A",{href:!0});var iCt=s(AU);D4r=r(iCt,"TFMobileBertForNextSentencePrediction"),iCt.forEach(t),G4r=r(nBe," (MobileBERT model)"),nBe.forEach(t),EGe.forEach(t),O4r=i($l),T(v4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),_je=i(f),hc=n(f,"H2",{class:!0});var CGe=s(hc);F4=n(CGe,"A",{id:!0,class:!0,href:!0});var dCt=s(F4);P3e=n(dCt,"SPAN",{});var cCt=s(P3e);T(ZL.$$.fragment,cCt),cCt.forEach(t),dCt.forEach(t),V4r=i(CGe),B3e=n(CGe,"SPAN",{});var fCt=s(B3e);X4r=r(fCt,"TFAutoModelForTableQuestionAnswering"),fCt.forEach(t),CGe.forEach(t),bje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(e9.$$.fragment,kl),z4r=i(kl),pc=n(kl,"P",{});var Cee=s(pc);W4r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yU=n(Cee,"A",{href:!0});var mCt=s(yU);Q4r=r(mCt,"from_pretrained()"),mCt.forEach(t),H4r=r(Cee," class method or the "),LU=n(Cee,"A",{href:!0});var gCt=s(LU);U4r=r(gCt,"from_config()"),gCt.forEach(t),J4r=r(Cee,` class
method.`),Cee.forEach(t),Y4r=i(kl),o9=n(kl,"P",{});var wGe=s(o9);K4r=r(wGe,"This class cannot be instantiated directly using "),I3e=n(wGe,"CODE",{});var hCt=s(I3e);Z4r=r(hCt,"__init__()"),hCt.forEach(t),eEr=r(wGe," (throws an error)."),wGe.forEach(t),oEr=i(kl),It=n(kl,"DIV",{class:!0});var O0=s(It);T(r9.$$.fragment,O0),rEr=i(O0),q3e=n(O0,"P",{});var pCt=s(q3e);tEr=r(pCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pCt.forEach(t),aEr=i(O0),uc=n(O0,"P",{});var wee=s(uc);nEr=r(wee,`Note:
Loading a model from its configuration file does `),N3e=n(wee,"STRONG",{});var uCt=s(N3e);sEr=r(uCt,"not"),uCt.forEach(t),lEr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(wee,"A",{href:!0});var _Ct=s(xU);iEr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),dEr=r(wee," to load the model weights."),wee.forEach(t),cEr=i(O0),T(T4.$$.fragment,O0),O0.forEach(t),fEr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(t9.$$.fragment,Sl),mEr=i(Sl),j3e=n(Sl,"P",{});var bCt=s(j3e);gEr=r(bCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bCt.forEach(t),hEr=i(Sl),dn=n(Sl,"P",{});var V0=s(dn);pEr=r(V0,"The model class to instantiate is selected based on the "),D3e=n(V0,"CODE",{});var vCt=s(D3e);uEr=r(vCt,"model_type"),vCt.forEach(t),_Er=r(V0,` property of the config object (either
passed as an argument or loaded from `),G3e=n(V0,"CODE",{});var FCt=s(G3e);bEr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),vEr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(V0,"CODE",{});var TCt=s(O3e);FEr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),TEr=r(V0,":"),V0.forEach(t),MEr=i(Sl),V3e=n(Sl,"UL",{});var MCt=s(V3e);M4=n(MCt,"LI",{});var sBe=s(M4);X3e=n(sBe,"STRONG",{});var ECt=s(X3e);EEr=r(ECt,"tapas"),ECt.forEach(t),CEr=r(sBe," \u2014 "),$U=n(sBe,"A",{href:!0});var CCt=s($U);wEr=r(CCt,"TFTapasForQuestionAnswering"),CCt.forEach(t),AEr=r(sBe," (TAPAS model)"),sBe.forEach(t),MCt.forEach(t),yEr=i(Sl),T(E4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),vje=i(f),_c=n(f,"H2",{class:!0});var AGe=s(_c);C4=n(AGe,"A",{id:!0,class:!0,href:!0});var wCt=s(C4);z3e=n(wCt,"SPAN",{});var ACt=s(z3e);T(a9.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),LEr=i(AGe),W3e=n(AGe,"SPAN",{});var yCt=s(W3e);xEr=r(yCt,"TFAutoModelForTokenClassification"),yCt.forEach(t),AGe.forEach(t),Fje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(n9.$$.fragment,Rl),$Er=i(Rl),bc=n(Rl,"P",{});var Aee=s(bc);kEr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kU=n(Aee,"A",{href:!0});var LCt=s(kU);SEr=r(LCt,"from_pretrained()"),LCt.forEach(t),REr=r(Aee," class method or the "),SU=n(Aee,"A",{href:!0});var xCt=s(SU);PEr=r(xCt,"from_config()"),xCt.forEach(t),BEr=r(Aee,` class
method.`),Aee.forEach(t),IEr=i(Rl),s9=n(Rl,"P",{});var yGe=s(s9);qEr=r(yGe,"This class cannot be instantiated directly using "),Q3e=n(yGe,"CODE",{});var $Ct=s(Q3e);NEr=r($Ct,"__init__()"),$Ct.forEach(t),jEr=r(yGe," (throws an error)."),yGe.forEach(t),DEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var X0=s(qt);T(l9.$$.fragment,X0),GEr=i(X0),H3e=n(X0,"P",{});var kCt=s(H3e);OEr=r(kCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kCt.forEach(t),VEr=i(X0),vc=n(X0,"P",{});var yee=s(vc);XEr=r(yee,`Note:
Loading a model from its configuration file does `),U3e=n(yee,"STRONG",{});var SCt=s(U3e);zEr=r(SCt,"not"),SCt.forEach(t),WEr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(yee,"A",{href:!0});var RCt=s(RU);QEr=r(RCt,"from_pretrained()"),RCt.forEach(t),HEr=r(yee," to load the model weights."),yee.forEach(t),UEr=i(X0),T(w4.$$.fragment,X0),X0.forEach(t),JEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(i9.$$.fragment,Pl),YEr=i(Pl),J3e=n(Pl,"P",{});var PCt=s(J3e);KEr=r(PCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PCt.forEach(t),ZEr=i(Pl),cn=n(Pl,"P",{});var z0=s(cn);eCr=r(z0,"The model class to instantiate is selected based on the "),Y3e=n(z0,"CODE",{});var BCt=s(Y3e);oCr=r(BCt,"model_type"),BCt.forEach(t),rCr=r(z0,` property of the config object (either
passed as an argument or loaded from `),K3e=n(z0,"CODE",{});var ICt=s(K3e);tCr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),aCr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(z0,"CODE",{});var qCt=s(Z3e);nCr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),sCr=r(z0,":"),z0.forEach(t),lCr=i(Pl),de=n(Pl,"UL",{});var me=s(de);A4=n(me,"LI",{});var lBe=s(A4);eFe=n(lBe,"STRONG",{});var NCt=s(eFe);iCr=r(NCt,"albert"),NCt.forEach(t),dCr=r(lBe," \u2014 "),PU=n(lBe,"A",{href:!0});var jCt=s(PU);cCr=r(jCt,"TFAlbertForTokenClassification"),jCt.forEach(t),fCr=r(lBe," (ALBERT model)"),lBe.forEach(t),mCr=i(me),y4=n(me,"LI",{});var iBe=s(y4);oFe=n(iBe,"STRONG",{});var DCt=s(oFe);gCr=r(DCt,"bert"),DCt.forEach(t),hCr=r(iBe," \u2014 "),BU=n(iBe,"A",{href:!0});var GCt=s(BU);pCr=r(GCt,"TFBertForTokenClassification"),GCt.forEach(t),uCr=r(iBe," (BERT model)"),iBe.forEach(t),_Cr=i(me),L4=n(me,"LI",{});var dBe=s(L4);rFe=n(dBe,"STRONG",{});var OCt=s(rFe);bCr=r(OCt,"camembert"),OCt.forEach(t),vCr=r(dBe," \u2014 "),IU=n(dBe,"A",{href:!0});var VCt=s(IU);FCr=r(VCt,"TFCamembertForTokenClassification"),VCt.forEach(t),TCr=r(dBe," (CamemBERT model)"),dBe.forEach(t),MCr=i(me),x4=n(me,"LI",{});var cBe=s(x4);tFe=n(cBe,"STRONG",{});var XCt=s(tFe);ECr=r(XCt,"convbert"),XCt.forEach(t),CCr=r(cBe," \u2014 "),qU=n(cBe,"A",{href:!0});var zCt=s(qU);wCr=r(zCt,"TFConvBertForTokenClassification"),zCt.forEach(t),ACr=r(cBe," (ConvBERT model)"),cBe.forEach(t),yCr=i(me),$4=n(me,"LI",{});var fBe=s($4);aFe=n(fBe,"STRONG",{});var WCt=s(aFe);LCr=r(WCt,"deberta"),WCt.forEach(t),xCr=r(fBe," \u2014 "),NU=n(fBe,"A",{href:!0});var QCt=s(NU);$Cr=r(QCt,"TFDebertaForTokenClassification"),QCt.forEach(t),kCr=r(fBe," (DeBERTa model)"),fBe.forEach(t),SCr=i(me),k4=n(me,"LI",{});var mBe=s(k4);nFe=n(mBe,"STRONG",{});var HCt=s(nFe);RCr=r(HCt,"deberta-v2"),HCt.forEach(t),PCr=r(mBe," \u2014 "),jU=n(mBe,"A",{href:!0});var UCt=s(jU);BCr=r(UCt,"TFDebertaV2ForTokenClassification"),UCt.forEach(t),ICr=r(mBe," (DeBERTa-v2 model)"),mBe.forEach(t),qCr=i(me),S4=n(me,"LI",{});var gBe=s(S4);sFe=n(gBe,"STRONG",{});var JCt=s(sFe);NCr=r(JCt,"distilbert"),JCt.forEach(t),jCr=r(gBe," \u2014 "),DU=n(gBe,"A",{href:!0});var YCt=s(DU);DCr=r(YCt,"TFDistilBertForTokenClassification"),YCt.forEach(t),GCr=r(gBe," (DistilBERT model)"),gBe.forEach(t),OCr=i(me),R4=n(me,"LI",{});var hBe=s(R4);lFe=n(hBe,"STRONG",{});var KCt=s(lFe);VCr=r(KCt,"electra"),KCt.forEach(t),XCr=r(hBe," \u2014 "),GU=n(hBe,"A",{href:!0});var ZCt=s(GU);zCr=r(ZCt,"TFElectraForTokenClassification"),ZCt.forEach(t),WCr=r(hBe," (ELECTRA model)"),hBe.forEach(t),QCr=i(me),P4=n(me,"LI",{});var pBe=s(P4);iFe=n(pBe,"STRONG",{});var e5t=s(iFe);HCr=r(e5t,"flaubert"),e5t.forEach(t),UCr=r(pBe," \u2014 "),OU=n(pBe,"A",{href:!0});var o5t=s(OU);JCr=r(o5t,"TFFlaubertForTokenClassification"),o5t.forEach(t),YCr=r(pBe," (FlauBERT model)"),pBe.forEach(t),KCr=i(me),B4=n(me,"LI",{});var uBe=s(B4);dFe=n(uBe,"STRONG",{});var r5t=s(dFe);ZCr=r(r5t,"funnel"),r5t.forEach(t),e5r=r(uBe," \u2014 "),VU=n(uBe,"A",{href:!0});var t5t=s(VU);o5r=r(t5t,"TFFunnelForTokenClassification"),t5t.forEach(t),r5r=r(uBe," (Funnel Transformer model)"),uBe.forEach(t),t5r=i(me),I4=n(me,"LI",{});var _Be=s(I4);cFe=n(_Be,"STRONG",{});var a5t=s(cFe);a5r=r(a5t,"layoutlm"),a5t.forEach(t),n5r=r(_Be," \u2014 "),XU=n(_Be,"A",{href:!0});var n5t=s(XU);s5r=r(n5t,"TFLayoutLMForTokenClassification"),n5t.forEach(t),l5r=r(_Be," (LayoutLM model)"),_Be.forEach(t),i5r=i(me),q4=n(me,"LI",{});var bBe=s(q4);fFe=n(bBe,"STRONG",{});var s5t=s(fFe);d5r=r(s5t,"longformer"),s5t.forEach(t),c5r=r(bBe," \u2014 "),zU=n(bBe,"A",{href:!0});var l5t=s(zU);f5r=r(l5t,"TFLongformerForTokenClassification"),l5t.forEach(t),m5r=r(bBe," (Longformer model)"),bBe.forEach(t),g5r=i(me),N4=n(me,"LI",{});var vBe=s(N4);mFe=n(vBe,"STRONG",{});var i5t=s(mFe);h5r=r(i5t,"mobilebert"),i5t.forEach(t),p5r=r(vBe," \u2014 "),WU=n(vBe,"A",{href:!0});var d5t=s(WU);u5r=r(d5t,"TFMobileBertForTokenClassification"),d5t.forEach(t),_5r=r(vBe," (MobileBERT model)"),vBe.forEach(t),b5r=i(me),j4=n(me,"LI",{});var FBe=s(j4);gFe=n(FBe,"STRONG",{});var c5t=s(gFe);v5r=r(c5t,"mpnet"),c5t.forEach(t),F5r=r(FBe," \u2014 "),QU=n(FBe,"A",{href:!0});var f5t=s(QU);T5r=r(f5t,"TFMPNetForTokenClassification"),f5t.forEach(t),M5r=r(FBe," (MPNet model)"),FBe.forEach(t),E5r=i(me),D4=n(me,"LI",{});var TBe=s(D4);hFe=n(TBe,"STRONG",{});var m5t=s(hFe);C5r=r(m5t,"rembert"),m5t.forEach(t),w5r=r(TBe," \u2014 "),HU=n(TBe,"A",{href:!0});var g5t=s(HU);A5r=r(g5t,"TFRemBertForTokenClassification"),g5t.forEach(t),y5r=r(TBe," (RemBERT model)"),TBe.forEach(t),L5r=i(me),G4=n(me,"LI",{});var MBe=s(G4);pFe=n(MBe,"STRONG",{});var h5t=s(pFe);x5r=r(h5t,"roberta"),h5t.forEach(t),$5r=r(MBe," \u2014 "),UU=n(MBe,"A",{href:!0});var p5t=s(UU);k5r=r(p5t,"TFRobertaForTokenClassification"),p5t.forEach(t),S5r=r(MBe," (RoBERTa model)"),MBe.forEach(t),R5r=i(me),O4=n(me,"LI",{});var EBe=s(O4);uFe=n(EBe,"STRONG",{});var u5t=s(uFe);P5r=r(u5t,"roformer"),u5t.forEach(t),B5r=r(EBe," \u2014 "),JU=n(EBe,"A",{href:!0});var _5t=s(JU);I5r=r(_5t,"TFRoFormerForTokenClassification"),_5t.forEach(t),q5r=r(EBe," (RoFormer model)"),EBe.forEach(t),N5r=i(me),V4=n(me,"LI",{});var CBe=s(V4);_Fe=n(CBe,"STRONG",{});var b5t=s(_Fe);j5r=r(b5t,"xlm"),b5t.forEach(t),D5r=r(CBe," \u2014 "),YU=n(CBe,"A",{href:!0});var v5t=s(YU);G5r=r(v5t,"TFXLMForTokenClassification"),v5t.forEach(t),O5r=r(CBe," (XLM model)"),CBe.forEach(t),V5r=i(me),X4=n(me,"LI",{});var wBe=s(X4);bFe=n(wBe,"STRONG",{});var F5t=s(bFe);X5r=r(F5t,"xlm-roberta"),F5t.forEach(t),z5r=r(wBe," \u2014 "),KU=n(wBe,"A",{href:!0});var T5t=s(KU);W5r=r(T5t,"TFXLMRobertaForTokenClassification"),T5t.forEach(t),Q5r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),H5r=i(me),z4=n(me,"LI",{});var ABe=s(z4);vFe=n(ABe,"STRONG",{});var M5t=s(vFe);U5r=r(M5t,"xlnet"),M5t.forEach(t),J5r=r(ABe," \u2014 "),ZU=n(ABe,"A",{href:!0});var E5t=s(ZU);Y5r=r(E5t,"TFXLNetForTokenClassification"),E5t.forEach(t),K5r=r(ABe," (XLNet model)"),ABe.forEach(t),me.forEach(t),Z5r=i(Pl),T(W4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Tje=i(f),Fc=n(f,"H2",{class:!0});var LGe=s(Fc);Q4=n(LGe,"A",{id:!0,class:!0,href:!0});var C5t=s(Q4);FFe=n(C5t,"SPAN",{});var w5t=s(FFe);T(d9.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),ewr=i(LGe),TFe=n(LGe,"SPAN",{});var A5t=s(TFe);owr=r(A5t,"TFAutoModelForQuestionAnswering"),A5t.forEach(t),LGe.forEach(t),Mje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(c9.$$.fragment,Bl),rwr=i(Bl),Tc=n(Bl,"P",{});var Lee=s(Tc);twr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eJ=n(Lee,"A",{href:!0});var y5t=s(eJ);awr=r(y5t,"from_pretrained()"),y5t.forEach(t),nwr=r(Lee," class method or the "),oJ=n(Lee,"A",{href:!0});var L5t=s(oJ);swr=r(L5t,"from_config()"),L5t.forEach(t),lwr=r(Lee,` class
method.`),Lee.forEach(t),iwr=i(Bl),f9=n(Bl,"P",{});var xGe=s(f9);dwr=r(xGe,"This class cannot be instantiated directly using "),MFe=n(xGe,"CODE",{});var x5t=s(MFe);cwr=r(x5t,"__init__()"),x5t.forEach(t),fwr=r(xGe," (throws an error)."),xGe.forEach(t),mwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var W0=s(Nt);T(m9.$$.fragment,W0),gwr=i(W0),EFe=n(W0,"P",{});var $5t=s(EFe);hwr=r($5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$5t.forEach(t),pwr=i(W0),Mc=n(W0,"P",{});var xee=s(Mc);uwr=r(xee,`Note:
Loading a model from its configuration file does `),CFe=n(xee,"STRONG",{});var k5t=s(CFe);_wr=r(k5t,"not"),k5t.forEach(t),bwr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(xee,"A",{href:!0});var S5t=s(rJ);vwr=r(S5t,"from_pretrained()"),S5t.forEach(t),Fwr=r(xee," to load the model weights."),xee.forEach(t),Twr=i(W0),T(H4.$$.fragment,W0),W0.forEach(t),Mwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(g9.$$.fragment,Il),Ewr=i(Il),wFe=n(Il,"P",{});var R5t=s(wFe);Cwr=r(R5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R5t.forEach(t),wwr=i(Il),fn=n(Il,"P",{});var Q0=s(fn);Awr=r(Q0,"The model class to instantiate is selected based on the "),AFe=n(Q0,"CODE",{});var P5t=s(AFe);ywr=r(P5t,"model_type"),P5t.forEach(t),Lwr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),yFe=n(Q0,"CODE",{});var B5t=s(yFe);xwr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),$wr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(Q0,"CODE",{});var I5t=s(LFe);kwr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),Swr=r(Q0,":"),Q0.forEach(t),Rwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);U4=n(ge,"LI",{});var yBe=s(U4);xFe=n(yBe,"STRONG",{});var q5t=s(xFe);Pwr=r(q5t,"albert"),q5t.forEach(t),Bwr=r(yBe," \u2014 "),tJ=n(yBe,"A",{href:!0});var N5t=s(tJ);Iwr=r(N5t,"TFAlbertForQuestionAnswering"),N5t.forEach(t),qwr=r(yBe," (ALBERT model)"),yBe.forEach(t),Nwr=i(ge),J4=n(ge,"LI",{});var LBe=s(J4);$Fe=n(LBe,"STRONG",{});var j5t=s($Fe);jwr=r(j5t,"bert"),j5t.forEach(t),Dwr=r(LBe," \u2014 "),aJ=n(LBe,"A",{href:!0});var D5t=s(aJ);Gwr=r(D5t,"TFBertForQuestionAnswering"),D5t.forEach(t),Owr=r(LBe," (BERT model)"),LBe.forEach(t),Vwr=i(ge),Y4=n(ge,"LI",{});var xBe=s(Y4);kFe=n(xBe,"STRONG",{});var G5t=s(kFe);Xwr=r(G5t,"camembert"),G5t.forEach(t),zwr=r(xBe," \u2014 "),nJ=n(xBe,"A",{href:!0});var O5t=s(nJ);Wwr=r(O5t,"TFCamembertForQuestionAnswering"),O5t.forEach(t),Qwr=r(xBe," (CamemBERT model)"),xBe.forEach(t),Hwr=i(ge),K4=n(ge,"LI",{});var $Be=s(K4);SFe=n($Be,"STRONG",{});var V5t=s(SFe);Uwr=r(V5t,"convbert"),V5t.forEach(t),Jwr=r($Be," \u2014 "),sJ=n($Be,"A",{href:!0});var X5t=s(sJ);Ywr=r(X5t,"TFConvBertForQuestionAnswering"),X5t.forEach(t),Kwr=r($Be," (ConvBERT model)"),$Be.forEach(t),Zwr=i(ge),Z4=n(ge,"LI",{});var kBe=s(Z4);RFe=n(kBe,"STRONG",{});var z5t=s(RFe);e0r=r(z5t,"deberta"),z5t.forEach(t),o0r=r(kBe," \u2014 "),lJ=n(kBe,"A",{href:!0});var W5t=s(lJ);r0r=r(W5t,"TFDebertaForQuestionAnswering"),W5t.forEach(t),t0r=r(kBe," (DeBERTa model)"),kBe.forEach(t),a0r=i(ge),eE=n(ge,"LI",{});var SBe=s(eE);PFe=n(SBe,"STRONG",{});var Q5t=s(PFe);n0r=r(Q5t,"deberta-v2"),Q5t.forEach(t),s0r=r(SBe," \u2014 "),iJ=n(SBe,"A",{href:!0});var H5t=s(iJ);l0r=r(H5t,"TFDebertaV2ForQuestionAnswering"),H5t.forEach(t),i0r=r(SBe," (DeBERTa-v2 model)"),SBe.forEach(t),d0r=i(ge),oE=n(ge,"LI",{});var RBe=s(oE);BFe=n(RBe,"STRONG",{});var U5t=s(BFe);c0r=r(U5t,"distilbert"),U5t.forEach(t),f0r=r(RBe," \u2014 "),dJ=n(RBe,"A",{href:!0});var J5t=s(dJ);m0r=r(J5t,"TFDistilBertForQuestionAnswering"),J5t.forEach(t),g0r=r(RBe," (DistilBERT model)"),RBe.forEach(t),h0r=i(ge),rE=n(ge,"LI",{});var PBe=s(rE);IFe=n(PBe,"STRONG",{});var Y5t=s(IFe);p0r=r(Y5t,"electra"),Y5t.forEach(t),u0r=r(PBe," \u2014 "),cJ=n(PBe,"A",{href:!0});var K5t=s(cJ);_0r=r(K5t,"TFElectraForQuestionAnswering"),K5t.forEach(t),b0r=r(PBe," (ELECTRA model)"),PBe.forEach(t),v0r=i(ge),tE=n(ge,"LI",{});var BBe=s(tE);qFe=n(BBe,"STRONG",{});var Z5t=s(qFe);F0r=r(Z5t,"flaubert"),Z5t.forEach(t),T0r=r(BBe," \u2014 "),fJ=n(BBe,"A",{href:!0});var ewt=s(fJ);M0r=r(ewt,"TFFlaubertForQuestionAnsweringSimple"),ewt.forEach(t),E0r=r(BBe," (FlauBERT model)"),BBe.forEach(t),C0r=i(ge),aE=n(ge,"LI",{});var IBe=s(aE);NFe=n(IBe,"STRONG",{});var owt=s(NFe);w0r=r(owt,"funnel"),owt.forEach(t),A0r=r(IBe," \u2014 "),mJ=n(IBe,"A",{href:!0});var rwt=s(mJ);y0r=r(rwt,"TFFunnelForQuestionAnswering"),rwt.forEach(t),L0r=r(IBe," (Funnel Transformer model)"),IBe.forEach(t),x0r=i(ge),nE=n(ge,"LI",{});var qBe=s(nE);jFe=n(qBe,"STRONG",{});var twt=s(jFe);$0r=r(twt,"gptj"),twt.forEach(t),k0r=r(qBe," \u2014 "),gJ=n(qBe,"A",{href:!0});var awt=s(gJ);S0r=r(awt,"TFGPTJForQuestionAnswering"),awt.forEach(t),R0r=r(qBe," (GPT-J model)"),qBe.forEach(t),P0r=i(ge),sE=n(ge,"LI",{});var NBe=s(sE);DFe=n(NBe,"STRONG",{});var nwt=s(DFe);B0r=r(nwt,"longformer"),nwt.forEach(t),I0r=r(NBe," \u2014 "),hJ=n(NBe,"A",{href:!0});var swt=s(hJ);q0r=r(swt,"TFLongformerForQuestionAnswering"),swt.forEach(t),N0r=r(NBe," (Longformer model)"),NBe.forEach(t),j0r=i(ge),lE=n(ge,"LI",{});var jBe=s(lE);GFe=n(jBe,"STRONG",{});var lwt=s(GFe);D0r=r(lwt,"mobilebert"),lwt.forEach(t),G0r=r(jBe," \u2014 "),pJ=n(jBe,"A",{href:!0});var iwt=s(pJ);O0r=r(iwt,"TFMobileBertForQuestionAnswering"),iwt.forEach(t),V0r=r(jBe," (MobileBERT model)"),jBe.forEach(t),X0r=i(ge),iE=n(ge,"LI",{});var DBe=s(iE);OFe=n(DBe,"STRONG",{});var dwt=s(OFe);z0r=r(dwt,"mpnet"),dwt.forEach(t),W0r=r(DBe," \u2014 "),uJ=n(DBe,"A",{href:!0});var cwt=s(uJ);Q0r=r(cwt,"TFMPNetForQuestionAnswering"),cwt.forEach(t),H0r=r(DBe," (MPNet model)"),DBe.forEach(t),U0r=i(ge),dE=n(ge,"LI",{});var GBe=s(dE);VFe=n(GBe,"STRONG",{});var fwt=s(VFe);J0r=r(fwt,"rembert"),fwt.forEach(t),Y0r=r(GBe," \u2014 "),_J=n(GBe,"A",{href:!0});var mwt=s(_J);K0r=r(mwt,"TFRemBertForQuestionAnswering"),mwt.forEach(t),Z0r=r(GBe," (RemBERT model)"),GBe.forEach(t),eAr=i(ge),cE=n(ge,"LI",{});var OBe=s(cE);XFe=n(OBe,"STRONG",{});var gwt=s(XFe);oAr=r(gwt,"roberta"),gwt.forEach(t),rAr=r(OBe," \u2014 "),bJ=n(OBe,"A",{href:!0});var hwt=s(bJ);tAr=r(hwt,"TFRobertaForQuestionAnswering"),hwt.forEach(t),aAr=r(OBe," (RoBERTa model)"),OBe.forEach(t),nAr=i(ge),fE=n(ge,"LI",{});var VBe=s(fE);zFe=n(VBe,"STRONG",{});var pwt=s(zFe);sAr=r(pwt,"roformer"),pwt.forEach(t),lAr=r(VBe," \u2014 "),vJ=n(VBe,"A",{href:!0});var uwt=s(vJ);iAr=r(uwt,"TFRoFormerForQuestionAnswering"),uwt.forEach(t),dAr=r(VBe," (RoFormer model)"),VBe.forEach(t),cAr=i(ge),mE=n(ge,"LI",{});var XBe=s(mE);WFe=n(XBe,"STRONG",{});var _wt=s(WFe);fAr=r(_wt,"xlm"),_wt.forEach(t),mAr=r(XBe," \u2014 "),FJ=n(XBe,"A",{href:!0});var bwt=s(FJ);gAr=r(bwt,"TFXLMForQuestionAnsweringSimple"),bwt.forEach(t),hAr=r(XBe," (XLM model)"),XBe.forEach(t),pAr=i(ge),gE=n(ge,"LI",{});var zBe=s(gE);QFe=n(zBe,"STRONG",{});var vwt=s(QFe);uAr=r(vwt,"xlm-roberta"),vwt.forEach(t),_Ar=r(zBe," \u2014 "),TJ=n(zBe,"A",{href:!0});var Fwt=s(TJ);bAr=r(Fwt,"TFXLMRobertaForQuestionAnswering"),Fwt.forEach(t),vAr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),FAr=i(ge),hE=n(ge,"LI",{});var WBe=s(hE);HFe=n(WBe,"STRONG",{});var Twt=s(HFe);TAr=r(Twt,"xlnet"),Twt.forEach(t),MAr=r(WBe," \u2014 "),MJ=n(WBe,"A",{href:!0});var Mwt=s(MJ);EAr=r(Mwt,"TFXLNetForQuestionAnsweringSimple"),Mwt.forEach(t),CAr=r(WBe," (XLNet model)"),WBe.forEach(t),ge.forEach(t),wAr=i(Il),T(pE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Eje=i(f),Ec=n(f,"H2",{class:!0});var $Ge=s(Ec);uE=n($Ge,"A",{id:!0,class:!0,href:!0});var Ewt=s(uE);UFe=n(Ewt,"SPAN",{});var Cwt=s(UFe);T(h9.$$.fragment,Cwt),Cwt.forEach(t),Ewt.forEach(t),AAr=i($Ge),JFe=n($Ge,"SPAN",{});var wwt=s(JFe);yAr=r(wwt,"TFAutoModelForVision2Seq"),wwt.forEach(t),$Ge.forEach(t),Cje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(p9.$$.fragment,ql),LAr=i(ql),Cc=n(ql,"P",{});var $ee=s(Cc);xAr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EJ=n($ee,"A",{href:!0});var Awt=s(EJ);$Ar=r(Awt,"from_pretrained()"),Awt.forEach(t),kAr=r($ee," class method or the "),CJ=n($ee,"A",{href:!0});var ywt=s(CJ);SAr=r(ywt,"from_config()"),ywt.forEach(t),RAr=r($ee,` class
method.`),$ee.forEach(t),PAr=i(ql),u9=n(ql,"P",{});var kGe=s(u9);BAr=r(kGe,"This class cannot be instantiated directly using "),YFe=n(kGe,"CODE",{});var Lwt=s(YFe);IAr=r(Lwt,"__init__()"),Lwt.forEach(t),qAr=r(kGe," (throws an error)."),kGe.forEach(t),NAr=i(ql),jt=n(ql,"DIV",{class:!0});var H0=s(jt);T(_9.$$.fragment,H0),jAr=i(H0),KFe=n(H0,"P",{});var xwt=s(KFe);DAr=r(xwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xwt.forEach(t),GAr=i(H0),wc=n(H0,"P",{});var kee=s(wc);OAr=r(kee,`Note:
Loading a model from its configuration file does `),ZFe=n(kee,"STRONG",{});var $wt=s(ZFe);VAr=r($wt,"not"),$wt.forEach(t),XAr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(kee,"A",{href:!0});var kwt=s(wJ);zAr=r(kwt,"from_pretrained()"),kwt.forEach(t),WAr=r(kee," to load the model weights."),kee.forEach(t),QAr=i(H0),T(_E.$$.fragment,H0),H0.forEach(t),HAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(b9.$$.fragment,Nl),UAr=i(Nl),eTe=n(Nl,"P",{});var Swt=s(eTe);JAr=r(Swt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Swt.forEach(t),YAr=i(Nl),mn=n(Nl,"P",{});var U0=s(mn);KAr=r(U0,"The model class to instantiate is selected based on the "),oTe=n(U0,"CODE",{});var Rwt=s(oTe);ZAr=r(Rwt,"model_type"),Rwt.forEach(t),e6r=r(U0,` property of the config object (either
passed as an argument or loaded from `),rTe=n(U0,"CODE",{});var Pwt=s(rTe);o6r=r(Pwt,"pretrained_model_name_or_path"),Pwt.forEach(t),r6r=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(U0,"CODE",{});var Bwt=s(tTe);t6r=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),a6r=r(U0,":"),U0.forEach(t),n6r=i(Nl),aTe=n(Nl,"UL",{});var Iwt=s(aTe);bE=n(Iwt,"LI",{});var QBe=s(bE);nTe=n(QBe,"STRONG",{});var qwt=s(nTe);s6r=r(qwt,"vision-encoder-decoder"),qwt.forEach(t),l6r=r(QBe," \u2014 "),AJ=n(QBe,"A",{href:!0});var Nwt=s(AJ);i6r=r(Nwt,"TFVisionEncoderDecoderModel"),Nwt.forEach(t),d6r=r(QBe," (Vision Encoder decoder model)"),QBe.forEach(t),Iwt.forEach(t),c6r=i(Nl),T(vE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),wje=i(f),Ac=n(f,"H2",{class:!0});var SGe=s(Ac);FE=n(SGe,"A",{id:!0,class:!0,href:!0});var jwt=s(FE);sTe=n(jwt,"SPAN",{});var Dwt=s(sTe);T(v9.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),f6r=i(SGe),lTe=n(SGe,"SPAN",{});var Gwt=s(lTe);m6r=r(Gwt,"TFAutoModelForSpeechSeq2Seq"),Gwt.forEach(t),SGe.forEach(t),Aje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(F9.$$.fragment,jl),g6r=i(jl),yc=n(jl,"P",{});var See=s(yc);h6r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=n(See,"A",{href:!0});var Owt=s(yJ);p6r=r(Owt,"from_pretrained()"),Owt.forEach(t),u6r=r(See," class method or the "),LJ=n(See,"A",{href:!0});var Vwt=s(LJ);_6r=r(Vwt,"from_config()"),Vwt.forEach(t),b6r=r(See,` class
method.`),See.forEach(t),v6r=i(jl),T9=n(jl,"P",{});var RGe=s(T9);F6r=r(RGe,"This class cannot be instantiated directly using "),iTe=n(RGe,"CODE",{});var Xwt=s(iTe);T6r=r(Xwt,"__init__()"),Xwt.forEach(t),M6r=r(RGe," (throws an error)."),RGe.forEach(t),E6r=i(jl),Dt=n(jl,"DIV",{class:!0});var J0=s(Dt);T(M9.$$.fragment,J0),C6r=i(J0),dTe=n(J0,"P",{});var zwt=s(dTe);w6r=r(zwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zwt.forEach(t),A6r=i(J0),Lc=n(J0,"P",{});var Ree=s(Lc);y6r=r(Ree,`Note:
Loading a model from its configuration file does `),cTe=n(Ree,"STRONG",{});var Wwt=s(cTe);L6r=r(Wwt,"not"),Wwt.forEach(t),x6r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ree,"A",{href:!0});var Qwt=s(xJ);$6r=r(Qwt,"from_pretrained()"),Qwt.forEach(t),k6r=r(Ree," to load the model weights."),Ree.forEach(t),S6r=i(J0),T(TE.$$.fragment,J0),J0.forEach(t),R6r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(E9.$$.fragment,Dl),P6r=i(Dl),fTe=n(Dl,"P",{});var Hwt=s(fTe);B6r=r(Hwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hwt.forEach(t),I6r=i(Dl),gn=n(Dl,"P",{});var Y0=s(gn);q6r=r(Y0,"The model class to instantiate is selected based on the "),mTe=n(Y0,"CODE",{});var Uwt=s(mTe);N6r=r(Uwt,"model_type"),Uwt.forEach(t),j6r=r(Y0,` property of the config object (either
passed as an argument or loaded from `),gTe=n(Y0,"CODE",{});var Jwt=s(gTe);D6r=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),G6r=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(Y0,"CODE",{});var Ywt=s(hTe);O6r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),V6r=r(Y0,":"),Y0.forEach(t),X6r=i(Dl),pTe=n(Dl,"UL",{});var Kwt=s(pTe);ME=n(Kwt,"LI",{});var HBe=s(ME);uTe=n(HBe,"STRONG",{});var Zwt=s(uTe);z6r=r(Zwt,"speech_to_text"),Zwt.forEach(t),W6r=r(HBe," \u2014 "),$J=n(HBe,"A",{href:!0});var e0t=s($J);Q6r=r(e0t,"TFSpeech2TextForConditionalGeneration"),e0t.forEach(t),H6r=r(HBe," (Speech2Text model)"),HBe.forEach(t),Kwt.forEach(t),U6r=i(Dl),T(EE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),yje=i(f),xc=n(f,"H2",{class:!0});var PGe=s(xc);CE=n(PGe,"A",{id:!0,class:!0,href:!0});var o0t=s(CE);_Te=n(o0t,"SPAN",{});var r0t=s(_Te);T(C9.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),J6r=i(PGe),bTe=n(PGe,"SPAN",{});var t0t=s(bTe);Y6r=r(t0t,"FlaxAutoModel"),t0t.forEach(t),PGe.forEach(t),Lje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(w9.$$.fragment,Gl),K6r=i(Gl),$c=n(Gl,"P",{});var Pee=s($c);Z6r=r(Pee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kJ=n(Pee,"A",{href:!0});var a0t=s(kJ);eyr=r(a0t,"from_pretrained()"),a0t.forEach(t),oyr=r(Pee," class method or the "),SJ=n(Pee,"A",{href:!0});var n0t=s(SJ);ryr=r(n0t,"from_config()"),n0t.forEach(t),tyr=r(Pee,` class
method.`),Pee.forEach(t),ayr=i(Gl),A9=n(Gl,"P",{});var BGe=s(A9);nyr=r(BGe,"This class cannot be instantiated directly using "),vTe=n(BGe,"CODE",{});var s0t=s(vTe);syr=r(s0t,"__init__()"),s0t.forEach(t),lyr=r(BGe," (throws an error)."),BGe.forEach(t),iyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var K0=s(Gt);T(y9.$$.fragment,K0),dyr=i(K0),FTe=n(K0,"P",{});var l0t=s(FTe);cyr=r(l0t,"Instantiates one of the base model classes of the library from a configuration."),l0t.forEach(t),fyr=i(K0),kc=n(K0,"P",{});var Bee=s(kc);myr=r(Bee,`Note:
Loading a model from its configuration file does `),TTe=n(Bee,"STRONG",{});var i0t=s(TTe);gyr=r(i0t,"not"),i0t.forEach(t),hyr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Bee,"A",{href:!0});var d0t=s(RJ);pyr=r(d0t,"from_pretrained()"),d0t.forEach(t),uyr=r(Bee," to load the model weights."),Bee.forEach(t),_yr=i(K0),T(wE.$$.fragment,K0),K0.forEach(t),byr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(L9.$$.fragment,Ol),vyr=i(Ol),MTe=n(Ol,"P",{});var c0t=s(MTe);Fyr=r(c0t,"Instantiate one of the base model classes of the library from a pretrained model."),c0t.forEach(t),Tyr=i(Ol),hn=n(Ol,"P",{});var Z0=s(hn);Myr=r(Z0,"The model class to instantiate is selected based on the "),ETe=n(Z0,"CODE",{});var f0t=s(ETe);Eyr=r(f0t,"model_type"),f0t.forEach(t),Cyr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),CTe=n(Z0,"CODE",{});var m0t=s(CTe);wyr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),Ayr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(Z0,"CODE",{});var g0t=s(wTe);yyr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),Lyr=r(Z0,":"),Z0.forEach(t),xyr=i(Ol),re=n(Ol,"UL",{});var ne=s(re);AE=n(ne,"LI",{});var UBe=s(AE);ATe=n(UBe,"STRONG",{});var h0t=s(ATe);$yr=r(h0t,"albert"),h0t.forEach(t),kyr=r(UBe," \u2014 "),PJ=n(UBe,"A",{href:!0});var p0t=s(PJ);Syr=r(p0t,"FlaxAlbertModel"),p0t.forEach(t),Ryr=r(UBe," (ALBERT model)"),UBe.forEach(t),Pyr=i(ne),yE=n(ne,"LI",{});var JBe=s(yE);yTe=n(JBe,"STRONG",{});var u0t=s(yTe);Byr=r(u0t,"bart"),u0t.forEach(t),Iyr=r(JBe," \u2014 "),BJ=n(JBe,"A",{href:!0});var _0t=s(BJ);qyr=r(_0t,"FlaxBartModel"),_0t.forEach(t),Nyr=r(JBe," (BART model)"),JBe.forEach(t),jyr=i(ne),LE=n(ne,"LI",{});var YBe=s(LE);LTe=n(YBe,"STRONG",{});var b0t=s(LTe);Dyr=r(b0t,"beit"),b0t.forEach(t),Gyr=r(YBe," \u2014 "),IJ=n(YBe,"A",{href:!0});var v0t=s(IJ);Oyr=r(v0t,"FlaxBeitModel"),v0t.forEach(t),Vyr=r(YBe," (BEiT model)"),YBe.forEach(t),Xyr=i(ne),xE=n(ne,"LI",{});var KBe=s(xE);xTe=n(KBe,"STRONG",{});var F0t=s(xTe);zyr=r(F0t,"bert"),F0t.forEach(t),Wyr=r(KBe," \u2014 "),qJ=n(KBe,"A",{href:!0});var T0t=s(qJ);Qyr=r(T0t,"FlaxBertModel"),T0t.forEach(t),Hyr=r(KBe," (BERT model)"),KBe.forEach(t),Uyr=i(ne),$E=n(ne,"LI",{});var ZBe=s($E);$Te=n(ZBe,"STRONG",{});var M0t=s($Te);Jyr=r(M0t,"big_bird"),M0t.forEach(t),Yyr=r(ZBe," \u2014 "),NJ=n(ZBe,"A",{href:!0});var E0t=s(NJ);Kyr=r(E0t,"FlaxBigBirdModel"),E0t.forEach(t),Zyr=r(ZBe," (BigBird model)"),ZBe.forEach(t),eLr=i(ne),kE=n(ne,"LI",{});var eIe=s(kE);kTe=n(eIe,"STRONG",{});var C0t=s(kTe);oLr=r(C0t,"blenderbot"),C0t.forEach(t),rLr=r(eIe," \u2014 "),jJ=n(eIe,"A",{href:!0});var w0t=s(jJ);tLr=r(w0t,"FlaxBlenderbotModel"),w0t.forEach(t),aLr=r(eIe," (Blenderbot model)"),eIe.forEach(t),nLr=i(ne),SE=n(ne,"LI",{});var oIe=s(SE);STe=n(oIe,"STRONG",{});var A0t=s(STe);sLr=r(A0t,"blenderbot-small"),A0t.forEach(t),lLr=r(oIe," \u2014 "),DJ=n(oIe,"A",{href:!0});var y0t=s(DJ);iLr=r(y0t,"FlaxBlenderbotSmallModel"),y0t.forEach(t),dLr=r(oIe," (BlenderbotSmall model)"),oIe.forEach(t),cLr=i(ne),RE=n(ne,"LI",{});var rIe=s(RE);RTe=n(rIe,"STRONG",{});var L0t=s(RTe);fLr=r(L0t,"clip"),L0t.forEach(t),mLr=r(rIe," \u2014 "),GJ=n(rIe,"A",{href:!0});var x0t=s(GJ);gLr=r(x0t,"FlaxCLIPModel"),x0t.forEach(t),hLr=r(rIe," (CLIP model)"),rIe.forEach(t),pLr=i(ne),PE=n(ne,"LI",{});var tIe=s(PE);PTe=n(tIe,"STRONG",{});var $0t=s(PTe);uLr=r($0t,"distilbert"),$0t.forEach(t),_Lr=r(tIe," \u2014 "),OJ=n(tIe,"A",{href:!0});var k0t=s(OJ);bLr=r(k0t,"FlaxDistilBertModel"),k0t.forEach(t),vLr=r(tIe," (DistilBERT model)"),tIe.forEach(t),FLr=i(ne),BE=n(ne,"LI",{});var aIe=s(BE);BTe=n(aIe,"STRONG",{});var S0t=s(BTe);TLr=r(S0t,"electra"),S0t.forEach(t),MLr=r(aIe," \u2014 "),VJ=n(aIe,"A",{href:!0});var R0t=s(VJ);ELr=r(R0t,"FlaxElectraModel"),R0t.forEach(t),CLr=r(aIe," (ELECTRA model)"),aIe.forEach(t),wLr=i(ne),IE=n(ne,"LI",{});var nIe=s(IE);ITe=n(nIe,"STRONG",{});var P0t=s(ITe);ALr=r(P0t,"gpt2"),P0t.forEach(t),yLr=r(nIe," \u2014 "),XJ=n(nIe,"A",{href:!0});var B0t=s(XJ);LLr=r(B0t,"FlaxGPT2Model"),B0t.forEach(t),xLr=r(nIe," (OpenAI GPT-2 model)"),nIe.forEach(t),$Lr=i(ne),qE=n(ne,"LI",{});var sIe=s(qE);qTe=n(sIe,"STRONG",{});var I0t=s(qTe);kLr=r(I0t,"gpt_neo"),I0t.forEach(t),SLr=r(sIe," \u2014 "),zJ=n(sIe,"A",{href:!0});var q0t=s(zJ);RLr=r(q0t,"FlaxGPTNeoModel"),q0t.forEach(t),PLr=r(sIe," (GPT Neo model)"),sIe.forEach(t),BLr=i(ne),NE=n(ne,"LI",{});var lIe=s(NE);NTe=n(lIe,"STRONG",{});var N0t=s(NTe);ILr=r(N0t,"gptj"),N0t.forEach(t),qLr=r(lIe," \u2014 "),WJ=n(lIe,"A",{href:!0});var j0t=s(WJ);NLr=r(j0t,"FlaxGPTJModel"),j0t.forEach(t),jLr=r(lIe," (GPT-J model)"),lIe.forEach(t),DLr=i(ne),jE=n(ne,"LI",{});var iIe=s(jE);jTe=n(iIe,"STRONG",{});var D0t=s(jTe);GLr=r(D0t,"marian"),D0t.forEach(t),OLr=r(iIe," \u2014 "),QJ=n(iIe,"A",{href:!0});var G0t=s(QJ);VLr=r(G0t,"FlaxMarianModel"),G0t.forEach(t),XLr=r(iIe," (Marian model)"),iIe.forEach(t),zLr=i(ne),DE=n(ne,"LI",{});var dIe=s(DE);DTe=n(dIe,"STRONG",{});var O0t=s(DTe);WLr=r(O0t,"mbart"),O0t.forEach(t),QLr=r(dIe," \u2014 "),HJ=n(dIe,"A",{href:!0});var V0t=s(HJ);HLr=r(V0t,"FlaxMBartModel"),V0t.forEach(t),ULr=r(dIe," (mBART model)"),dIe.forEach(t),JLr=i(ne),GE=n(ne,"LI",{});var cIe=s(GE);GTe=n(cIe,"STRONG",{});var X0t=s(GTe);YLr=r(X0t,"mt5"),X0t.forEach(t),KLr=r(cIe," \u2014 "),UJ=n(cIe,"A",{href:!0});var z0t=s(UJ);ZLr=r(z0t,"FlaxMT5Model"),z0t.forEach(t),e9r=r(cIe," (mT5 model)"),cIe.forEach(t),o9r=i(ne),OE=n(ne,"LI",{});var fIe=s(OE);OTe=n(fIe,"STRONG",{});var W0t=s(OTe);r9r=r(W0t,"opt"),W0t.forEach(t),t9r=r(fIe," \u2014 "),JJ=n(fIe,"A",{href:!0});var Q0t=s(JJ);a9r=r(Q0t,"FlaxOPTModel"),Q0t.forEach(t),n9r=r(fIe," (OPT model)"),fIe.forEach(t),s9r=i(ne),VE=n(ne,"LI",{});var mIe=s(VE);VTe=n(mIe,"STRONG",{});var H0t=s(VTe);l9r=r(H0t,"pegasus"),H0t.forEach(t),i9r=r(mIe," \u2014 "),YJ=n(mIe,"A",{href:!0});var U0t=s(YJ);d9r=r(U0t,"FlaxPegasusModel"),U0t.forEach(t),c9r=r(mIe," (Pegasus model)"),mIe.forEach(t),f9r=i(ne),XE=n(ne,"LI",{});var gIe=s(XE);XTe=n(gIe,"STRONG",{});var J0t=s(XTe);m9r=r(J0t,"roberta"),J0t.forEach(t),g9r=r(gIe," \u2014 "),KJ=n(gIe,"A",{href:!0});var Y0t=s(KJ);h9r=r(Y0t,"FlaxRobertaModel"),Y0t.forEach(t),p9r=r(gIe," (RoBERTa model)"),gIe.forEach(t),u9r=i(ne),zE=n(ne,"LI",{});var hIe=s(zE);zTe=n(hIe,"STRONG",{});var K0t=s(zTe);_9r=r(K0t,"roformer"),K0t.forEach(t),b9r=r(hIe," \u2014 "),ZJ=n(hIe,"A",{href:!0});var Z0t=s(ZJ);v9r=r(Z0t,"FlaxRoFormerModel"),Z0t.forEach(t),F9r=r(hIe," (RoFormer model)"),hIe.forEach(t),T9r=i(ne),WE=n(ne,"LI",{});var pIe=s(WE);WTe=n(pIe,"STRONG",{});var eAt=s(WTe);M9r=r(eAt,"t5"),eAt.forEach(t),E9r=r(pIe," \u2014 "),eY=n(pIe,"A",{href:!0});var oAt=s(eY);C9r=r(oAt,"FlaxT5Model"),oAt.forEach(t),w9r=r(pIe," (T5 model)"),pIe.forEach(t),A9r=i(ne),QE=n(ne,"LI",{});var uIe=s(QE);QTe=n(uIe,"STRONG",{});var rAt=s(QTe);y9r=r(rAt,"vision-text-dual-encoder"),rAt.forEach(t),L9r=r(uIe," \u2014 "),oY=n(uIe,"A",{href:!0});var tAt=s(oY);x9r=r(tAt,"FlaxVisionTextDualEncoderModel"),tAt.forEach(t),$9r=r(uIe," (VisionTextDualEncoder model)"),uIe.forEach(t),k9r=i(ne),HE=n(ne,"LI",{});var _Ie=s(HE);HTe=n(_Ie,"STRONG",{});var aAt=s(HTe);S9r=r(aAt,"vit"),aAt.forEach(t),R9r=r(_Ie," \u2014 "),rY=n(_Ie,"A",{href:!0});var nAt=s(rY);P9r=r(nAt,"FlaxViTModel"),nAt.forEach(t),B9r=r(_Ie," (ViT model)"),_Ie.forEach(t),I9r=i(ne),UE=n(ne,"LI",{});var bIe=s(UE);UTe=n(bIe,"STRONG",{});var sAt=s(UTe);q9r=r(sAt,"wav2vec2"),sAt.forEach(t),N9r=r(bIe," \u2014 "),tY=n(bIe,"A",{href:!0});var lAt=s(tY);j9r=r(lAt,"FlaxWav2Vec2Model"),lAt.forEach(t),D9r=r(bIe," (Wav2Vec2 model)"),bIe.forEach(t),G9r=i(ne),JE=n(ne,"LI",{});var vIe=s(JE);JTe=n(vIe,"STRONG",{});var iAt=s(JTe);O9r=r(iAt,"xglm"),iAt.forEach(t),V9r=r(vIe," \u2014 "),aY=n(vIe,"A",{href:!0});var dAt=s(aY);X9r=r(dAt,"FlaxXGLMModel"),dAt.forEach(t),z9r=r(vIe," (XGLM model)"),vIe.forEach(t),W9r=i(ne),YE=n(ne,"LI",{});var FIe=s(YE);YTe=n(FIe,"STRONG",{});var cAt=s(YTe);Q9r=r(cAt,"xlm-roberta"),cAt.forEach(t),H9r=r(FIe," \u2014 "),nY=n(FIe,"A",{href:!0});var fAt=s(nY);U9r=r(fAt,"FlaxXLMRobertaModel"),fAt.forEach(t),J9r=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),ne.forEach(t),Y9r=i(Ol),T(KE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),xje=i(f),Sc=n(f,"H2",{class:!0});var IGe=s(Sc);ZE=n(IGe,"A",{id:!0,class:!0,href:!0});var mAt=s(ZE);KTe=n(mAt,"SPAN",{});var gAt=s(KTe);T(x9.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),K9r=i(IGe),ZTe=n(IGe,"SPAN",{});var hAt=s(ZTe);Z9r=r(hAt,"FlaxAutoModelForCausalLM"),hAt.forEach(t),IGe.forEach(t),$je=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T($9.$$.fragment,Vl),exr=i(Vl),Rc=n(Vl,"P",{});var Iee=s(Rc);oxr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sY=n(Iee,"A",{href:!0});var pAt=s(sY);rxr=r(pAt,"from_pretrained()"),pAt.forEach(t),txr=r(Iee," class method or the "),lY=n(Iee,"A",{href:!0});var uAt=s(lY);axr=r(uAt,"from_config()"),uAt.forEach(t),nxr=r(Iee,` class
method.`),Iee.forEach(t),sxr=i(Vl),k9=n(Vl,"P",{});var qGe=s(k9);lxr=r(qGe,"This class cannot be instantiated directly using "),e7e=n(qGe,"CODE",{});var _At=s(e7e);ixr=r(_At,"__init__()"),_At.forEach(t),dxr=r(qGe," (throws an error)."),qGe.forEach(t),cxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var eA=s(Ot);T(S9.$$.fragment,eA),fxr=i(eA),o7e=n(eA,"P",{});var bAt=s(o7e);mxr=r(bAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bAt.forEach(t),gxr=i(eA),Pc=n(eA,"P",{});var qee=s(Pc);hxr=r(qee,`Note:
Loading a model from its configuration file does `),r7e=n(qee,"STRONG",{});var vAt=s(r7e);pxr=r(vAt,"not"),vAt.forEach(t),uxr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(qee,"A",{href:!0});var FAt=s(iY);_xr=r(FAt,"from_pretrained()"),FAt.forEach(t),bxr=r(qee," to load the model weights."),qee.forEach(t),vxr=i(eA),T(eC.$$.fragment,eA),eA.forEach(t),Fxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(R9.$$.fragment,Xl),Txr=i(Xl),t7e=n(Xl,"P",{});var TAt=s(t7e);Mxr=r(TAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TAt.forEach(t),Exr=i(Xl),pn=n(Xl,"P",{});var oA=s(pn);Cxr=r(oA,"The model class to instantiate is selected based on the "),a7e=n(oA,"CODE",{});var MAt=s(a7e);wxr=r(MAt,"model_type"),MAt.forEach(t),Axr=r(oA,` property of the config object (either
passed as an argument or loaded from `),n7e=n(oA,"CODE",{});var EAt=s(n7e);yxr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),Lxr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(oA,"CODE",{});var CAt=s(s7e);xxr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),$xr=r(oA,":"),oA.forEach(t),kxr=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);oC=n(Ie,"LI",{});var TIe=s(oC);l7e=n(TIe,"STRONG",{});var wAt=s(l7e);Sxr=r(wAt,"bart"),wAt.forEach(t),Rxr=r(TIe," \u2014 "),dY=n(TIe,"A",{href:!0});var AAt=s(dY);Pxr=r(AAt,"FlaxBartForCausalLM"),AAt.forEach(t),Bxr=r(TIe," (BART model)"),TIe.forEach(t),Ixr=i(Ie),rC=n(Ie,"LI",{});var MIe=s(rC);i7e=n(MIe,"STRONG",{});var yAt=s(i7e);qxr=r(yAt,"bert"),yAt.forEach(t),Nxr=r(MIe," \u2014 "),cY=n(MIe,"A",{href:!0});var LAt=s(cY);jxr=r(LAt,"FlaxBertForCausalLM"),LAt.forEach(t),Dxr=r(MIe," (BERT model)"),MIe.forEach(t),Gxr=i(Ie),tC=n(Ie,"LI",{});var EIe=s(tC);d7e=n(EIe,"STRONG",{});var xAt=s(d7e);Oxr=r(xAt,"big_bird"),xAt.forEach(t),Vxr=r(EIe," \u2014 "),fY=n(EIe,"A",{href:!0});var $At=s(fY);Xxr=r($At,"FlaxBigBirdForCausalLM"),$At.forEach(t),zxr=r(EIe," (BigBird model)"),EIe.forEach(t),Wxr=i(Ie),aC=n(Ie,"LI",{});var CIe=s(aC);c7e=n(CIe,"STRONG",{});var kAt=s(c7e);Qxr=r(kAt,"electra"),kAt.forEach(t),Hxr=r(CIe," \u2014 "),mY=n(CIe,"A",{href:!0});var SAt=s(mY);Uxr=r(SAt,"FlaxElectraForCausalLM"),SAt.forEach(t),Jxr=r(CIe," (ELECTRA model)"),CIe.forEach(t),Yxr=i(Ie),nC=n(Ie,"LI",{});var wIe=s(nC);f7e=n(wIe,"STRONG",{});var RAt=s(f7e);Kxr=r(RAt,"gpt2"),RAt.forEach(t),Zxr=r(wIe," \u2014 "),gY=n(wIe,"A",{href:!0});var PAt=s(gY);e$r=r(PAt,"FlaxGPT2LMHeadModel"),PAt.forEach(t),o$r=r(wIe," (OpenAI GPT-2 model)"),wIe.forEach(t),r$r=i(Ie),sC=n(Ie,"LI",{});var AIe=s(sC);m7e=n(AIe,"STRONG",{});var BAt=s(m7e);t$r=r(BAt,"gpt_neo"),BAt.forEach(t),a$r=r(AIe," \u2014 "),hY=n(AIe,"A",{href:!0});var IAt=s(hY);n$r=r(IAt,"FlaxGPTNeoForCausalLM"),IAt.forEach(t),s$r=r(AIe," (GPT Neo model)"),AIe.forEach(t),l$r=i(Ie),lC=n(Ie,"LI",{});var yIe=s(lC);g7e=n(yIe,"STRONG",{});var qAt=s(g7e);i$r=r(qAt,"gptj"),qAt.forEach(t),d$r=r(yIe," \u2014 "),pY=n(yIe,"A",{href:!0});var NAt=s(pY);c$r=r(NAt,"FlaxGPTJForCausalLM"),NAt.forEach(t),f$r=r(yIe," (GPT-J model)"),yIe.forEach(t),m$r=i(Ie),iC=n(Ie,"LI",{});var LIe=s(iC);h7e=n(LIe,"STRONG",{});var jAt=s(h7e);g$r=r(jAt,"opt"),jAt.forEach(t),h$r=r(LIe," \u2014 "),uY=n(LIe,"A",{href:!0});var DAt=s(uY);p$r=r(DAt,"FlaxOPTForCausalLM"),DAt.forEach(t),u$r=r(LIe," (OPT model)"),LIe.forEach(t),_$r=i(Ie),dC=n(Ie,"LI",{});var xIe=s(dC);p7e=n(xIe,"STRONG",{});var GAt=s(p7e);b$r=r(GAt,"roberta"),GAt.forEach(t),v$r=r(xIe," \u2014 "),_Y=n(xIe,"A",{href:!0});var OAt=s(_Y);F$r=r(OAt,"FlaxRobertaForCausalLM"),OAt.forEach(t),T$r=r(xIe," (RoBERTa model)"),xIe.forEach(t),M$r=i(Ie),cC=n(Ie,"LI",{});var $Ie=s(cC);u7e=n($Ie,"STRONG",{});var VAt=s(u7e);E$r=r(VAt,"xglm"),VAt.forEach(t),C$r=r($Ie," \u2014 "),bY=n($Ie,"A",{href:!0});var XAt=s(bY);w$r=r(XAt,"FlaxXGLMForCausalLM"),XAt.forEach(t),A$r=r($Ie," (XGLM model)"),$Ie.forEach(t),Ie.forEach(t),y$r=i(Xl),T(fC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),kje=i(f),Bc=n(f,"H2",{class:!0});var NGe=s(Bc);mC=n(NGe,"A",{id:!0,class:!0,href:!0});var zAt=s(mC);_7e=n(zAt,"SPAN",{});var WAt=s(_7e);T(P9.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),L$r=i(NGe),b7e=n(NGe,"SPAN",{});var QAt=s(b7e);x$r=r(QAt,"FlaxAutoModelForPreTraining"),QAt.forEach(t),NGe.forEach(t),Sje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(B9.$$.fragment,zl),$$r=i(zl),Ic=n(zl,"P",{});var Nee=s(Ic);k$r=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vY=n(Nee,"A",{href:!0});var HAt=s(vY);S$r=r(HAt,"from_pretrained()"),HAt.forEach(t),R$r=r(Nee," class method or the "),FY=n(Nee,"A",{href:!0});var UAt=s(FY);P$r=r(UAt,"from_config()"),UAt.forEach(t),B$r=r(Nee,` class
method.`),Nee.forEach(t),I$r=i(zl),I9=n(zl,"P",{});var jGe=s(I9);q$r=r(jGe,"This class cannot be instantiated directly using "),v7e=n(jGe,"CODE",{});var JAt=s(v7e);N$r=r(JAt,"__init__()"),JAt.forEach(t),j$r=r(jGe," (throws an error)."),jGe.forEach(t),D$r=i(zl),Vt=n(zl,"DIV",{class:!0});var rA=s(Vt);T(q9.$$.fragment,rA),G$r=i(rA),F7e=n(rA,"P",{});var YAt=s(F7e);O$r=r(YAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YAt.forEach(t),V$r=i(rA),qc=n(rA,"P",{});var jee=s(qc);X$r=r(jee,`Note:
Loading a model from its configuration file does `),T7e=n(jee,"STRONG",{});var KAt=s(T7e);z$r=r(KAt,"not"),KAt.forEach(t),W$r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(jee,"A",{href:!0});var ZAt=s(TY);Q$r=r(ZAt,"from_pretrained()"),ZAt.forEach(t),H$r=r(jee," to load the model weights."),jee.forEach(t),U$r=i(rA),T(gC.$$.fragment,rA),rA.forEach(t),J$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(N9.$$.fragment,Wl),Y$r=i(Wl),M7e=n(Wl,"P",{});var e6t=s(M7e);K$r=r(e6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e6t.forEach(t),Z$r=i(Wl),un=n(Wl,"P",{});var tA=s(un);ekr=r(tA,"The model class to instantiate is selected based on the "),E7e=n(tA,"CODE",{});var o6t=s(E7e);okr=r(o6t,"model_type"),o6t.forEach(t),rkr=r(tA,` property of the config object (either
passed as an argument or loaded from `),C7e=n(tA,"CODE",{});var r6t=s(C7e);tkr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),akr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(tA,"CODE",{});var t6t=s(w7e);nkr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),skr=r(tA,":"),tA.forEach(t),lkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);hC=n(we,"LI",{});var kIe=s(hC);A7e=n(kIe,"STRONG",{});var a6t=s(A7e);ikr=r(a6t,"albert"),a6t.forEach(t),dkr=r(kIe," \u2014 "),MY=n(kIe,"A",{href:!0});var n6t=s(MY);ckr=r(n6t,"FlaxAlbertForPreTraining"),n6t.forEach(t),fkr=r(kIe," (ALBERT model)"),kIe.forEach(t),mkr=i(we),pC=n(we,"LI",{});var SIe=s(pC);y7e=n(SIe,"STRONG",{});var s6t=s(y7e);gkr=r(s6t,"bart"),s6t.forEach(t),hkr=r(SIe," \u2014 "),EY=n(SIe,"A",{href:!0});var l6t=s(EY);pkr=r(l6t,"FlaxBartForConditionalGeneration"),l6t.forEach(t),ukr=r(SIe," (BART model)"),SIe.forEach(t),_kr=i(we),uC=n(we,"LI",{});var RIe=s(uC);L7e=n(RIe,"STRONG",{});var i6t=s(L7e);bkr=r(i6t,"bert"),i6t.forEach(t),vkr=r(RIe," \u2014 "),CY=n(RIe,"A",{href:!0});var d6t=s(CY);Fkr=r(d6t,"FlaxBertForPreTraining"),d6t.forEach(t),Tkr=r(RIe," (BERT model)"),RIe.forEach(t),Mkr=i(we),_C=n(we,"LI",{});var PIe=s(_C);x7e=n(PIe,"STRONG",{});var c6t=s(x7e);Ekr=r(c6t,"big_bird"),c6t.forEach(t),Ckr=r(PIe," \u2014 "),wY=n(PIe,"A",{href:!0});var f6t=s(wY);wkr=r(f6t,"FlaxBigBirdForPreTraining"),f6t.forEach(t),Akr=r(PIe," (BigBird model)"),PIe.forEach(t),ykr=i(we),bC=n(we,"LI",{});var BIe=s(bC);$7e=n(BIe,"STRONG",{});var m6t=s($7e);Lkr=r(m6t,"electra"),m6t.forEach(t),xkr=r(BIe," \u2014 "),AY=n(BIe,"A",{href:!0});var g6t=s(AY);$kr=r(g6t,"FlaxElectraForPreTraining"),g6t.forEach(t),kkr=r(BIe," (ELECTRA model)"),BIe.forEach(t),Skr=i(we),vC=n(we,"LI",{});var IIe=s(vC);k7e=n(IIe,"STRONG",{});var h6t=s(k7e);Rkr=r(h6t,"mbart"),h6t.forEach(t),Pkr=r(IIe," \u2014 "),yY=n(IIe,"A",{href:!0});var p6t=s(yY);Bkr=r(p6t,"FlaxMBartForConditionalGeneration"),p6t.forEach(t),Ikr=r(IIe," (mBART model)"),IIe.forEach(t),qkr=i(we),FC=n(we,"LI",{});var qIe=s(FC);S7e=n(qIe,"STRONG",{});var u6t=s(S7e);Nkr=r(u6t,"mt5"),u6t.forEach(t),jkr=r(qIe," \u2014 "),LY=n(qIe,"A",{href:!0});var _6t=s(LY);Dkr=r(_6t,"FlaxMT5ForConditionalGeneration"),_6t.forEach(t),Gkr=r(qIe," (mT5 model)"),qIe.forEach(t),Okr=i(we),TC=n(we,"LI",{});var NIe=s(TC);R7e=n(NIe,"STRONG",{});var b6t=s(R7e);Vkr=r(b6t,"roberta"),b6t.forEach(t),Xkr=r(NIe," \u2014 "),xY=n(NIe,"A",{href:!0});var v6t=s(xY);zkr=r(v6t,"FlaxRobertaForMaskedLM"),v6t.forEach(t),Wkr=r(NIe," (RoBERTa model)"),NIe.forEach(t),Qkr=i(we),MC=n(we,"LI",{});var jIe=s(MC);P7e=n(jIe,"STRONG",{});var F6t=s(P7e);Hkr=r(F6t,"roformer"),F6t.forEach(t),Ukr=r(jIe," \u2014 "),$Y=n(jIe,"A",{href:!0});var T6t=s($Y);Jkr=r(T6t,"FlaxRoFormerForMaskedLM"),T6t.forEach(t),Ykr=r(jIe," (RoFormer model)"),jIe.forEach(t),Kkr=i(we),EC=n(we,"LI",{});var DIe=s(EC);B7e=n(DIe,"STRONG",{});var M6t=s(B7e);Zkr=r(M6t,"t5"),M6t.forEach(t),eSr=r(DIe," \u2014 "),kY=n(DIe,"A",{href:!0});var E6t=s(kY);oSr=r(E6t,"FlaxT5ForConditionalGeneration"),E6t.forEach(t),rSr=r(DIe," (T5 model)"),DIe.forEach(t),tSr=i(we),CC=n(we,"LI",{});var GIe=s(CC);I7e=n(GIe,"STRONG",{});var C6t=s(I7e);aSr=r(C6t,"wav2vec2"),C6t.forEach(t),nSr=r(GIe," \u2014 "),SY=n(GIe,"A",{href:!0});var w6t=s(SY);sSr=r(w6t,"FlaxWav2Vec2ForPreTraining"),w6t.forEach(t),lSr=r(GIe," (Wav2Vec2 model)"),GIe.forEach(t),iSr=i(we),wC=n(we,"LI",{});var OIe=s(wC);q7e=n(OIe,"STRONG",{});var A6t=s(q7e);dSr=r(A6t,"xlm-roberta"),A6t.forEach(t),cSr=r(OIe," \u2014 "),RY=n(OIe,"A",{href:!0});var y6t=s(RY);fSr=r(y6t,"FlaxXLMRobertaForMaskedLM"),y6t.forEach(t),mSr=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),we.forEach(t),gSr=i(Wl),T(AC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Rje=i(f),Nc=n(f,"H2",{class:!0});var DGe=s(Nc);yC=n(DGe,"A",{id:!0,class:!0,href:!0});var L6t=s(yC);N7e=n(L6t,"SPAN",{});var x6t=s(N7e);T(j9.$$.fragment,x6t),x6t.forEach(t),L6t.forEach(t),hSr=i(DGe),j7e=n(DGe,"SPAN",{});var $6t=s(j7e);pSr=r($6t,"FlaxAutoModelForMaskedLM"),$6t.forEach(t),DGe.forEach(t),Pje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(D9.$$.fragment,Ql),uSr=i(Ql),jc=n(Ql,"P",{});var Dee=s(jc);_Sr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PY=n(Dee,"A",{href:!0});var k6t=s(PY);bSr=r(k6t,"from_pretrained()"),k6t.forEach(t),vSr=r(Dee," class method or the "),BY=n(Dee,"A",{href:!0});var S6t=s(BY);FSr=r(S6t,"from_config()"),S6t.forEach(t),TSr=r(Dee,` class
method.`),Dee.forEach(t),MSr=i(Ql),G9=n(Ql,"P",{});var GGe=s(G9);ESr=r(GGe,"This class cannot be instantiated directly using "),D7e=n(GGe,"CODE",{});var R6t=s(D7e);CSr=r(R6t,"__init__()"),R6t.forEach(t),wSr=r(GGe," (throws an error)."),GGe.forEach(t),ASr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var aA=s(Xt);T(O9.$$.fragment,aA),ySr=i(aA),G7e=n(aA,"P",{});var P6t=s(G7e);LSr=r(P6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P6t.forEach(t),xSr=i(aA),Dc=n(aA,"P",{});var Gee=s(Dc);$Sr=r(Gee,`Note:
Loading a model from its configuration file does `),O7e=n(Gee,"STRONG",{});var B6t=s(O7e);kSr=r(B6t,"not"),B6t.forEach(t),SSr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(Gee,"A",{href:!0});var I6t=s(IY);RSr=r(I6t,"from_pretrained()"),I6t.forEach(t),PSr=r(Gee," to load the model weights."),Gee.forEach(t),BSr=i(aA),T(LC.$$.fragment,aA),aA.forEach(t),ISr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(V9.$$.fragment,Hl),qSr=i(Hl),V7e=n(Hl,"P",{});var q6t=s(V7e);NSr=r(q6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q6t.forEach(t),jSr=i(Hl),_n=n(Hl,"P",{});var nA=s(_n);DSr=r(nA,"The model class to instantiate is selected based on the "),X7e=n(nA,"CODE",{});var N6t=s(X7e);GSr=r(N6t,"model_type"),N6t.forEach(t),OSr=r(nA,` property of the config object (either
passed as an argument or loaded from `),z7e=n(nA,"CODE",{});var j6t=s(z7e);VSr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),XSr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(nA,"CODE",{});var D6t=s(W7e);zSr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),WSr=r(nA,":"),nA.forEach(t),QSr=i(Hl),xe=n(Hl,"UL",{});var qe=s(xe);xC=n(qe,"LI",{});var VIe=s(xC);Q7e=n(VIe,"STRONG",{});var G6t=s(Q7e);HSr=r(G6t,"albert"),G6t.forEach(t),USr=r(VIe," \u2014 "),qY=n(VIe,"A",{href:!0});var O6t=s(qY);JSr=r(O6t,"FlaxAlbertForMaskedLM"),O6t.forEach(t),YSr=r(VIe," (ALBERT model)"),VIe.forEach(t),KSr=i(qe),$C=n(qe,"LI",{});var XIe=s($C);H7e=n(XIe,"STRONG",{});var V6t=s(H7e);ZSr=r(V6t,"bart"),V6t.forEach(t),eRr=r(XIe," \u2014 "),NY=n(XIe,"A",{href:!0});var X6t=s(NY);oRr=r(X6t,"FlaxBartForConditionalGeneration"),X6t.forEach(t),rRr=r(XIe," (BART model)"),XIe.forEach(t),tRr=i(qe),kC=n(qe,"LI",{});var zIe=s(kC);U7e=n(zIe,"STRONG",{});var z6t=s(U7e);aRr=r(z6t,"bert"),z6t.forEach(t),nRr=r(zIe," \u2014 "),jY=n(zIe,"A",{href:!0});var W6t=s(jY);sRr=r(W6t,"FlaxBertForMaskedLM"),W6t.forEach(t),lRr=r(zIe," (BERT model)"),zIe.forEach(t),iRr=i(qe),SC=n(qe,"LI",{});var WIe=s(SC);J7e=n(WIe,"STRONG",{});var Q6t=s(J7e);dRr=r(Q6t,"big_bird"),Q6t.forEach(t),cRr=r(WIe," \u2014 "),DY=n(WIe,"A",{href:!0});var H6t=s(DY);fRr=r(H6t,"FlaxBigBirdForMaskedLM"),H6t.forEach(t),mRr=r(WIe," (BigBird model)"),WIe.forEach(t),gRr=i(qe),RC=n(qe,"LI",{});var QIe=s(RC);Y7e=n(QIe,"STRONG",{});var U6t=s(Y7e);hRr=r(U6t,"distilbert"),U6t.forEach(t),pRr=r(QIe," \u2014 "),GY=n(QIe,"A",{href:!0});var J6t=s(GY);uRr=r(J6t,"FlaxDistilBertForMaskedLM"),J6t.forEach(t),_Rr=r(QIe," (DistilBERT model)"),QIe.forEach(t),bRr=i(qe),PC=n(qe,"LI",{});var HIe=s(PC);K7e=n(HIe,"STRONG",{});var Y6t=s(K7e);vRr=r(Y6t,"electra"),Y6t.forEach(t),FRr=r(HIe," \u2014 "),OY=n(HIe,"A",{href:!0});var K6t=s(OY);TRr=r(K6t,"FlaxElectraForMaskedLM"),K6t.forEach(t),MRr=r(HIe," (ELECTRA model)"),HIe.forEach(t),ERr=i(qe),BC=n(qe,"LI",{});var UIe=s(BC);Z7e=n(UIe,"STRONG",{});var Z6t=s(Z7e);CRr=r(Z6t,"mbart"),Z6t.forEach(t),wRr=r(UIe," \u2014 "),VY=n(UIe,"A",{href:!0});var eyt=s(VY);ARr=r(eyt,"FlaxMBartForConditionalGeneration"),eyt.forEach(t),yRr=r(UIe," (mBART model)"),UIe.forEach(t),LRr=i(qe),IC=n(qe,"LI",{});var JIe=s(IC);eMe=n(JIe,"STRONG",{});var oyt=s(eMe);xRr=r(oyt,"roberta"),oyt.forEach(t),$Rr=r(JIe," \u2014 "),XY=n(JIe,"A",{href:!0});var ryt=s(XY);kRr=r(ryt,"FlaxRobertaForMaskedLM"),ryt.forEach(t),SRr=r(JIe," (RoBERTa model)"),JIe.forEach(t),RRr=i(qe),qC=n(qe,"LI",{});var YIe=s(qC);oMe=n(YIe,"STRONG",{});var tyt=s(oMe);PRr=r(tyt,"roformer"),tyt.forEach(t),BRr=r(YIe," \u2014 "),zY=n(YIe,"A",{href:!0});var ayt=s(zY);IRr=r(ayt,"FlaxRoFormerForMaskedLM"),ayt.forEach(t),qRr=r(YIe," (RoFormer model)"),YIe.forEach(t),NRr=i(qe),NC=n(qe,"LI",{});var KIe=s(NC);rMe=n(KIe,"STRONG",{});var nyt=s(rMe);jRr=r(nyt,"xlm-roberta"),nyt.forEach(t),DRr=r(KIe," \u2014 "),WY=n(KIe,"A",{href:!0});var syt=s(WY);GRr=r(syt,"FlaxXLMRobertaForMaskedLM"),syt.forEach(t),ORr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),qe.forEach(t),VRr=i(Hl),T(jC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Bje=i(f),Gc=n(f,"H2",{class:!0});var OGe=s(Gc);DC=n(OGe,"A",{id:!0,class:!0,href:!0});var lyt=s(DC);tMe=n(lyt,"SPAN",{});var iyt=s(tMe);T(X9.$$.fragment,iyt),iyt.forEach(t),lyt.forEach(t),XRr=i(OGe),aMe=n(OGe,"SPAN",{});var dyt=s(aMe);zRr=r(dyt,"FlaxAutoModelForSeq2SeqLM"),dyt.forEach(t),OGe.forEach(t),Ije=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(z9.$$.fragment,Ul),WRr=i(Ul),Oc=n(Ul,"P",{});var Oee=s(Oc);QRr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QY=n(Oee,"A",{href:!0});var cyt=s(QY);HRr=r(cyt,"from_pretrained()"),cyt.forEach(t),URr=r(Oee," class method or the "),HY=n(Oee,"A",{href:!0});var fyt=s(HY);JRr=r(fyt,"from_config()"),fyt.forEach(t),YRr=r(Oee,` class
method.`),Oee.forEach(t),KRr=i(Ul),W9=n(Ul,"P",{});var VGe=s(W9);ZRr=r(VGe,"This class cannot be instantiated directly using "),nMe=n(VGe,"CODE",{});var myt=s(nMe);ePr=r(myt,"__init__()"),myt.forEach(t),oPr=r(VGe," (throws an error)."),VGe.forEach(t),rPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var sA=s(zt);T(Q9.$$.fragment,sA),tPr=i(sA),sMe=n(sA,"P",{});var gyt=s(sMe);aPr=r(gyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gyt.forEach(t),nPr=i(sA),Vc=n(sA,"P",{});var Vee=s(Vc);sPr=r(Vee,`Note:
Loading a model from its configuration file does `),lMe=n(Vee,"STRONG",{});var hyt=s(lMe);lPr=r(hyt,"not"),hyt.forEach(t),iPr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(Vee,"A",{href:!0});var pyt=s(UY);dPr=r(pyt,"from_pretrained()"),pyt.forEach(t),cPr=r(Vee," to load the model weights."),Vee.forEach(t),fPr=i(sA),T(GC.$$.fragment,sA),sA.forEach(t),mPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(H9.$$.fragment,Jl),gPr=i(Jl),iMe=n(Jl,"P",{});var uyt=s(iMe);hPr=r(uyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uyt.forEach(t),pPr=i(Jl),bn=n(Jl,"P",{});var lA=s(bn);uPr=r(lA,"The model class to instantiate is selected based on the "),dMe=n(lA,"CODE",{});var _yt=s(dMe);_Pr=r(_yt,"model_type"),_yt.forEach(t),bPr=r(lA,` property of the config object (either
passed as an argument or loaded from `),cMe=n(lA,"CODE",{});var byt=s(cMe);vPr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),FPr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(lA,"CODE",{});var vyt=s(fMe);TPr=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),MPr=r(lA,":"),lA.forEach(t),EPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);OC=n(ze,"LI",{});var ZIe=s(OC);mMe=n(ZIe,"STRONG",{});var Fyt=s(mMe);CPr=r(Fyt,"bart"),Fyt.forEach(t),wPr=r(ZIe," \u2014 "),JY=n(ZIe,"A",{href:!0});var Tyt=s(JY);APr=r(Tyt,"FlaxBartForConditionalGeneration"),Tyt.forEach(t),yPr=r(ZIe," (BART model)"),ZIe.forEach(t),LPr=i(ze),VC=n(ze,"LI",{});var eqe=s(VC);gMe=n(eqe,"STRONG",{});var Myt=s(gMe);xPr=r(Myt,"blenderbot"),Myt.forEach(t),$Pr=r(eqe," \u2014 "),YY=n(eqe,"A",{href:!0});var Eyt=s(YY);kPr=r(Eyt,"FlaxBlenderbotForConditionalGeneration"),Eyt.forEach(t),SPr=r(eqe," (Blenderbot model)"),eqe.forEach(t),RPr=i(ze),XC=n(ze,"LI",{});var oqe=s(XC);hMe=n(oqe,"STRONG",{});var Cyt=s(hMe);PPr=r(Cyt,"blenderbot-small"),Cyt.forEach(t),BPr=r(oqe," \u2014 "),KY=n(oqe,"A",{href:!0});var wyt=s(KY);IPr=r(wyt,"FlaxBlenderbotSmallForConditionalGeneration"),wyt.forEach(t),qPr=r(oqe," (BlenderbotSmall model)"),oqe.forEach(t),NPr=i(ze),zC=n(ze,"LI",{});var rqe=s(zC);pMe=n(rqe,"STRONG",{});var Ayt=s(pMe);jPr=r(Ayt,"encoder-decoder"),Ayt.forEach(t),DPr=r(rqe," \u2014 "),ZY=n(rqe,"A",{href:!0});var yyt=s(ZY);GPr=r(yyt,"FlaxEncoderDecoderModel"),yyt.forEach(t),OPr=r(rqe," (Encoder decoder model)"),rqe.forEach(t),VPr=i(ze),WC=n(ze,"LI",{});var tqe=s(WC);uMe=n(tqe,"STRONG",{});var Lyt=s(uMe);XPr=r(Lyt,"marian"),Lyt.forEach(t),zPr=r(tqe," \u2014 "),eK=n(tqe,"A",{href:!0});var xyt=s(eK);WPr=r(xyt,"FlaxMarianMTModel"),xyt.forEach(t),QPr=r(tqe," (Marian model)"),tqe.forEach(t),HPr=i(ze),QC=n(ze,"LI",{});var aqe=s(QC);_Me=n(aqe,"STRONG",{});var $yt=s(_Me);UPr=r($yt,"mbart"),$yt.forEach(t),JPr=r(aqe," \u2014 "),oK=n(aqe,"A",{href:!0});var kyt=s(oK);YPr=r(kyt,"FlaxMBartForConditionalGeneration"),kyt.forEach(t),KPr=r(aqe," (mBART model)"),aqe.forEach(t),ZPr=i(ze),HC=n(ze,"LI",{});var nqe=s(HC);bMe=n(nqe,"STRONG",{});var Syt=s(bMe);eBr=r(Syt,"mt5"),Syt.forEach(t),oBr=r(nqe," \u2014 "),rK=n(nqe,"A",{href:!0});var Ryt=s(rK);rBr=r(Ryt,"FlaxMT5ForConditionalGeneration"),Ryt.forEach(t),tBr=r(nqe," (mT5 model)"),nqe.forEach(t),aBr=i(ze),UC=n(ze,"LI",{});var sqe=s(UC);vMe=n(sqe,"STRONG",{});var Pyt=s(vMe);nBr=r(Pyt,"pegasus"),Pyt.forEach(t),sBr=r(sqe," \u2014 "),tK=n(sqe,"A",{href:!0});var Byt=s(tK);lBr=r(Byt,"FlaxPegasusForConditionalGeneration"),Byt.forEach(t),iBr=r(sqe," (Pegasus model)"),sqe.forEach(t),dBr=i(ze),JC=n(ze,"LI",{});var lqe=s(JC);FMe=n(lqe,"STRONG",{});var Iyt=s(FMe);cBr=r(Iyt,"t5"),Iyt.forEach(t),fBr=r(lqe," \u2014 "),aK=n(lqe,"A",{href:!0});var qyt=s(aK);mBr=r(qyt,"FlaxT5ForConditionalGeneration"),qyt.forEach(t),gBr=r(lqe," (T5 model)"),lqe.forEach(t),ze.forEach(t),hBr=i(Jl),T(YC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),qje=i(f),Xc=n(f,"H2",{class:!0});var XGe=s(Xc);KC=n(XGe,"A",{id:!0,class:!0,href:!0});var Nyt=s(KC);TMe=n(Nyt,"SPAN",{});var jyt=s(TMe);T(U9.$$.fragment,jyt),jyt.forEach(t),Nyt.forEach(t),pBr=i(XGe),MMe=n(XGe,"SPAN",{});var Dyt=s(MMe);uBr=r(Dyt,"FlaxAutoModelForSequenceClassification"),Dyt.forEach(t),XGe.forEach(t),Nje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(J9.$$.fragment,Yl),_Br=i(Yl),zc=n(Yl,"P",{});var Xee=s(zc);bBr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nK=n(Xee,"A",{href:!0});var Gyt=s(nK);vBr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),FBr=r(Xee," class method or the "),sK=n(Xee,"A",{href:!0});var Oyt=s(sK);TBr=r(Oyt,"from_config()"),Oyt.forEach(t),MBr=r(Xee,` class
method.`),Xee.forEach(t),EBr=i(Yl),Y9=n(Yl,"P",{});var zGe=s(Y9);CBr=r(zGe,"This class cannot be instantiated directly using "),EMe=n(zGe,"CODE",{});var Vyt=s(EMe);wBr=r(Vyt,"__init__()"),Vyt.forEach(t),ABr=r(zGe," (throws an error)."),zGe.forEach(t),yBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var iA=s(Wt);T(K9.$$.fragment,iA),LBr=i(iA),CMe=n(iA,"P",{});var Xyt=s(CMe);xBr=r(Xyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xyt.forEach(t),$Br=i(iA),Wc=n(iA,"P",{});var zee=s(Wc);kBr=r(zee,`Note:
Loading a model from its configuration file does `),wMe=n(zee,"STRONG",{});var zyt=s(wMe);SBr=r(zyt,"not"),zyt.forEach(t),RBr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(zee,"A",{href:!0});var Wyt=s(lK);PBr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),BBr=r(zee," to load the model weights."),zee.forEach(t),IBr=i(iA),T(ZC.$$.fragment,iA),iA.forEach(t),qBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(Z9.$$.fragment,Kl),NBr=i(Kl),AMe=n(Kl,"P",{});var Qyt=s(AMe);jBr=r(Qyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qyt.forEach(t),DBr=i(Kl),vn=n(Kl,"P",{});var dA=s(vn);GBr=r(dA,"The model class to instantiate is selected based on the "),yMe=n(dA,"CODE",{});var Hyt=s(yMe);OBr=r(Hyt,"model_type"),Hyt.forEach(t),VBr=r(dA,` property of the config object (either
passed as an argument or loaded from `),LMe=n(dA,"CODE",{});var Uyt=s(LMe);XBr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),zBr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(dA,"CODE",{});var Jyt=s(xMe);WBr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),QBr=r(dA,":"),dA.forEach(t),HBr=i(Kl),$e=n(Kl,"UL",{});var Ne=s($e);e5=n(Ne,"LI",{});var iqe=s(e5);$Me=n(iqe,"STRONG",{});var Yyt=s($Me);UBr=r(Yyt,"albert"),Yyt.forEach(t),JBr=r(iqe," \u2014 "),iK=n(iqe,"A",{href:!0});var Kyt=s(iK);YBr=r(Kyt,"FlaxAlbertForSequenceClassification"),Kyt.forEach(t),KBr=r(iqe," (ALBERT model)"),iqe.forEach(t),ZBr=i(Ne),o5=n(Ne,"LI",{});var dqe=s(o5);kMe=n(dqe,"STRONG",{});var Zyt=s(kMe);eIr=r(Zyt,"bart"),Zyt.forEach(t),oIr=r(dqe," \u2014 "),dK=n(dqe,"A",{href:!0});var eLt=s(dK);rIr=r(eLt,"FlaxBartForSequenceClassification"),eLt.forEach(t),tIr=r(dqe," (BART model)"),dqe.forEach(t),aIr=i(Ne),r5=n(Ne,"LI",{});var cqe=s(r5);SMe=n(cqe,"STRONG",{});var oLt=s(SMe);nIr=r(oLt,"bert"),oLt.forEach(t),sIr=r(cqe," \u2014 "),cK=n(cqe,"A",{href:!0});var rLt=s(cK);lIr=r(rLt,"FlaxBertForSequenceClassification"),rLt.forEach(t),iIr=r(cqe," (BERT model)"),cqe.forEach(t),dIr=i(Ne),t5=n(Ne,"LI",{});var fqe=s(t5);RMe=n(fqe,"STRONG",{});var tLt=s(RMe);cIr=r(tLt,"big_bird"),tLt.forEach(t),fIr=r(fqe," \u2014 "),fK=n(fqe,"A",{href:!0});var aLt=s(fK);mIr=r(aLt,"FlaxBigBirdForSequenceClassification"),aLt.forEach(t),gIr=r(fqe," (BigBird model)"),fqe.forEach(t),hIr=i(Ne),a5=n(Ne,"LI",{});var mqe=s(a5);PMe=n(mqe,"STRONG",{});var nLt=s(PMe);pIr=r(nLt,"distilbert"),nLt.forEach(t),uIr=r(mqe," \u2014 "),mK=n(mqe,"A",{href:!0});var sLt=s(mK);_Ir=r(sLt,"FlaxDistilBertForSequenceClassification"),sLt.forEach(t),bIr=r(mqe," (DistilBERT model)"),mqe.forEach(t),vIr=i(Ne),n5=n(Ne,"LI",{});var gqe=s(n5);BMe=n(gqe,"STRONG",{});var lLt=s(BMe);FIr=r(lLt,"electra"),lLt.forEach(t),TIr=r(gqe," \u2014 "),gK=n(gqe,"A",{href:!0});var iLt=s(gK);MIr=r(iLt,"FlaxElectraForSequenceClassification"),iLt.forEach(t),EIr=r(gqe," (ELECTRA model)"),gqe.forEach(t),CIr=i(Ne),s5=n(Ne,"LI",{});var hqe=s(s5);IMe=n(hqe,"STRONG",{});var dLt=s(IMe);wIr=r(dLt,"mbart"),dLt.forEach(t),AIr=r(hqe," \u2014 "),hK=n(hqe,"A",{href:!0});var cLt=s(hK);yIr=r(cLt,"FlaxMBartForSequenceClassification"),cLt.forEach(t),LIr=r(hqe," (mBART model)"),hqe.forEach(t),xIr=i(Ne),l5=n(Ne,"LI",{});var pqe=s(l5);qMe=n(pqe,"STRONG",{});var fLt=s(qMe);$Ir=r(fLt,"roberta"),fLt.forEach(t),kIr=r(pqe," \u2014 "),pK=n(pqe,"A",{href:!0});var mLt=s(pK);SIr=r(mLt,"FlaxRobertaForSequenceClassification"),mLt.forEach(t),RIr=r(pqe," (RoBERTa model)"),pqe.forEach(t),PIr=i(Ne),i5=n(Ne,"LI",{});var uqe=s(i5);NMe=n(uqe,"STRONG",{});var gLt=s(NMe);BIr=r(gLt,"roformer"),gLt.forEach(t),IIr=r(uqe," \u2014 "),uK=n(uqe,"A",{href:!0});var hLt=s(uK);qIr=r(hLt,"FlaxRoFormerForSequenceClassification"),hLt.forEach(t),NIr=r(uqe," (RoFormer model)"),uqe.forEach(t),jIr=i(Ne),d5=n(Ne,"LI",{});var _qe=s(d5);jMe=n(_qe,"STRONG",{});var pLt=s(jMe);DIr=r(pLt,"xlm-roberta"),pLt.forEach(t),GIr=r(_qe," \u2014 "),_K=n(_qe,"A",{href:!0});var uLt=s(_K);OIr=r(uLt,"FlaxXLMRobertaForSequenceClassification"),uLt.forEach(t),VIr=r(_qe," (XLM-RoBERTa model)"),_qe.forEach(t),Ne.forEach(t),XIr=i(Kl),T(c5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),jje=i(f),Qc=n(f,"H2",{class:!0});var WGe=s(Qc);f5=n(WGe,"A",{id:!0,class:!0,href:!0});var _Lt=s(f5);DMe=n(_Lt,"SPAN",{});var bLt=s(DMe);T(ex.$$.fragment,bLt),bLt.forEach(t),_Lt.forEach(t),zIr=i(WGe),GMe=n(WGe,"SPAN",{});var vLt=s(GMe);WIr=r(vLt,"FlaxAutoModelForQuestionAnswering"),vLt.forEach(t),WGe.forEach(t),Dje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(ox.$$.fragment,Zl),QIr=i(Zl),Hc=n(Zl,"P",{});var Wee=s(Hc);HIr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bK=n(Wee,"A",{href:!0});var FLt=s(bK);UIr=r(FLt,"from_pretrained()"),FLt.forEach(t),JIr=r(Wee," class method or the "),vK=n(Wee,"A",{href:!0});var TLt=s(vK);YIr=r(TLt,"from_config()"),TLt.forEach(t),KIr=r(Wee,` class
method.`),Wee.forEach(t),ZIr=i(Zl),rx=n(Zl,"P",{});var QGe=s(rx);eqr=r(QGe,"This class cannot be instantiated directly using "),OMe=n(QGe,"CODE",{});var MLt=s(OMe);oqr=r(MLt,"__init__()"),MLt.forEach(t),rqr=r(QGe," (throws an error)."),QGe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var cA=s(Qt);T(tx.$$.fragment,cA),aqr=i(cA),VMe=n(cA,"P",{});var ELt=s(VMe);nqr=r(ELt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ELt.forEach(t),sqr=i(cA),Uc=n(cA,"P",{});var Qee=s(Uc);lqr=r(Qee,`Note:
Loading a model from its configuration file does `),XMe=n(Qee,"STRONG",{});var CLt=s(XMe);iqr=r(CLt,"not"),CLt.forEach(t),dqr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(Qee,"A",{href:!0});var wLt=s(FK);cqr=r(wLt,"from_pretrained()"),wLt.forEach(t),fqr=r(Qee," to load the model weights."),Qee.forEach(t),mqr=i(cA),T(m5.$$.fragment,cA),cA.forEach(t),gqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ax.$$.fragment,ei),hqr=i(ei),zMe=n(ei,"P",{});var ALt=s(zMe);pqr=r(ALt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ALt.forEach(t),uqr=i(ei),Fn=n(ei,"P",{});var fA=s(Fn);_qr=r(fA,"The model class to instantiate is selected based on the "),WMe=n(fA,"CODE",{});var yLt=s(WMe);bqr=r(yLt,"model_type"),yLt.forEach(t),vqr=r(fA,` property of the config object (either
passed as an argument or loaded from `),QMe=n(fA,"CODE",{});var LLt=s(QMe);Fqr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),Tqr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(fA,"CODE",{});var xLt=s(HMe);Mqr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),Eqr=r(fA,":"),fA.forEach(t),Cqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);g5=n(je,"LI",{});var bqe=s(g5);UMe=n(bqe,"STRONG",{});var $Lt=s(UMe);wqr=r($Lt,"albert"),$Lt.forEach(t),Aqr=r(bqe," \u2014 "),TK=n(bqe,"A",{href:!0});var kLt=s(TK);yqr=r(kLt,"FlaxAlbertForQuestionAnswering"),kLt.forEach(t),Lqr=r(bqe," (ALBERT model)"),bqe.forEach(t),xqr=i(je),h5=n(je,"LI",{});var vqe=s(h5);JMe=n(vqe,"STRONG",{});var SLt=s(JMe);$qr=r(SLt,"bart"),SLt.forEach(t),kqr=r(vqe," \u2014 "),MK=n(vqe,"A",{href:!0});var RLt=s(MK);Sqr=r(RLt,"FlaxBartForQuestionAnswering"),RLt.forEach(t),Rqr=r(vqe," (BART model)"),vqe.forEach(t),Pqr=i(je),p5=n(je,"LI",{});var Fqe=s(p5);YMe=n(Fqe,"STRONG",{});var PLt=s(YMe);Bqr=r(PLt,"bert"),PLt.forEach(t),Iqr=r(Fqe," \u2014 "),EK=n(Fqe,"A",{href:!0});var BLt=s(EK);qqr=r(BLt,"FlaxBertForQuestionAnswering"),BLt.forEach(t),Nqr=r(Fqe," (BERT model)"),Fqe.forEach(t),jqr=i(je),u5=n(je,"LI",{});var Tqe=s(u5);KMe=n(Tqe,"STRONG",{});var ILt=s(KMe);Dqr=r(ILt,"big_bird"),ILt.forEach(t),Gqr=r(Tqe," \u2014 "),CK=n(Tqe,"A",{href:!0});var qLt=s(CK);Oqr=r(qLt,"FlaxBigBirdForQuestionAnswering"),qLt.forEach(t),Vqr=r(Tqe," (BigBird model)"),Tqe.forEach(t),Xqr=i(je),_5=n(je,"LI",{});var Mqe=s(_5);ZMe=n(Mqe,"STRONG",{});var NLt=s(ZMe);zqr=r(NLt,"distilbert"),NLt.forEach(t),Wqr=r(Mqe," \u2014 "),wK=n(Mqe,"A",{href:!0});var jLt=s(wK);Qqr=r(jLt,"FlaxDistilBertForQuestionAnswering"),jLt.forEach(t),Hqr=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),Uqr=i(je),b5=n(je,"LI",{});var Eqe=s(b5);e4e=n(Eqe,"STRONG",{});var DLt=s(e4e);Jqr=r(DLt,"electra"),DLt.forEach(t),Yqr=r(Eqe," \u2014 "),AK=n(Eqe,"A",{href:!0});var GLt=s(AK);Kqr=r(GLt,"FlaxElectraForQuestionAnswering"),GLt.forEach(t),Zqr=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),eNr=i(je),v5=n(je,"LI",{});var Cqe=s(v5);o4e=n(Cqe,"STRONG",{});var OLt=s(o4e);oNr=r(OLt,"mbart"),OLt.forEach(t),rNr=r(Cqe," \u2014 "),yK=n(Cqe,"A",{href:!0});var VLt=s(yK);tNr=r(VLt,"FlaxMBartForQuestionAnswering"),VLt.forEach(t),aNr=r(Cqe," (mBART model)"),Cqe.forEach(t),nNr=i(je),F5=n(je,"LI",{});var wqe=s(F5);r4e=n(wqe,"STRONG",{});var XLt=s(r4e);sNr=r(XLt,"roberta"),XLt.forEach(t),lNr=r(wqe," \u2014 "),LK=n(wqe,"A",{href:!0});var zLt=s(LK);iNr=r(zLt,"FlaxRobertaForQuestionAnswering"),zLt.forEach(t),dNr=r(wqe," (RoBERTa model)"),wqe.forEach(t),cNr=i(je),T5=n(je,"LI",{});var Aqe=s(T5);t4e=n(Aqe,"STRONG",{});var WLt=s(t4e);fNr=r(WLt,"roformer"),WLt.forEach(t),mNr=r(Aqe," \u2014 "),xK=n(Aqe,"A",{href:!0});var QLt=s(xK);gNr=r(QLt,"FlaxRoFormerForQuestionAnswering"),QLt.forEach(t),hNr=r(Aqe," (RoFormer model)"),Aqe.forEach(t),pNr=i(je),M5=n(je,"LI",{});var yqe=s(M5);a4e=n(yqe,"STRONG",{});var HLt=s(a4e);uNr=r(HLt,"xlm-roberta"),HLt.forEach(t),_Nr=r(yqe," \u2014 "),$K=n(yqe,"A",{href:!0});var ULt=s($K);bNr=r(ULt,"FlaxXLMRobertaForQuestionAnswering"),ULt.forEach(t),vNr=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),je.forEach(t),FNr=i(ei),T(E5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Gje=i(f),Jc=n(f,"H2",{class:!0});var HGe=s(Jc);C5=n(HGe,"A",{id:!0,class:!0,href:!0});var JLt=s(C5);n4e=n(JLt,"SPAN",{});var YLt=s(n4e);T(nx.$$.fragment,YLt),YLt.forEach(t),JLt.forEach(t),TNr=i(HGe),s4e=n(HGe,"SPAN",{});var KLt=s(s4e);MNr=r(KLt,"FlaxAutoModelForTokenClassification"),KLt.forEach(t),HGe.forEach(t),Oje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(sx.$$.fragment,oi),ENr=i(oi),Yc=n(oi,"P",{});var Hee=s(Yc);CNr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kK=n(Hee,"A",{href:!0});var ZLt=s(kK);wNr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),ANr=r(Hee," class method or the "),SK=n(Hee,"A",{href:!0});var e9t=s(SK);yNr=r(e9t,"from_config()"),e9t.forEach(t),LNr=r(Hee,` class
method.`),Hee.forEach(t),xNr=i(oi),lx=n(oi,"P",{});var UGe=s(lx);$Nr=r(UGe,"This class cannot be instantiated directly using "),l4e=n(UGe,"CODE",{});var o9t=s(l4e);kNr=r(o9t,"__init__()"),o9t.forEach(t),SNr=r(UGe," (throws an error)."),UGe.forEach(t),RNr=i(oi),Ht=n(oi,"DIV",{class:!0});var mA=s(Ht);T(ix.$$.fragment,mA),PNr=i(mA),i4e=n(mA,"P",{});var r9t=s(i4e);BNr=r(r9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r9t.forEach(t),INr=i(mA),Kc=n(mA,"P",{});var Uee=s(Kc);qNr=r(Uee,`Note:
Loading a model from its configuration file does `),d4e=n(Uee,"STRONG",{});var t9t=s(d4e);NNr=r(t9t,"not"),t9t.forEach(t),jNr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Uee,"A",{href:!0});var a9t=s(RK);DNr=r(a9t,"from_pretrained()"),a9t.forEach(t),GNr=r(Uee," to load the model weights."),Uee.forEach(t),ONr=i(mA),T(w5.$$.fragment,mA),mA.forEach(t),VNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(dx.$$.fragment,ri),XNr=i(ri),c4e=n(ri,"P",{});var n9t=s(c4e);zNr=r(n9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n9t.forEach(t),WNr=i(ri),Tn=n(ri,"P",{});var gA=s(Tn);QNr=r(gA,"The model class to instantiate is selected based on the "),f4e=n(gA,"CODE",{});var s9t=s(f4e);HNr=r(s9t,"model_type"),s9t.forEach(t),UNr=r(gA,` property of the config object (either
passed as an argument or loaded from `),m4e=n(gA,"CODE",{});var l9t=s(m4e);JNr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),YNr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(gA,"CODE",{});var i9t=s(g4e);KNr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),ZNr=r(gA,":"),gA.forEach(t),ejr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);A5=n(Fo,"LI",{});var Lqe=s(A5);h4e=n(Lqe,"STRONG",{});var d9t=s(h4e);ojr=r(d9t,"albert"),d9t.forEach(t),rjr=r(Lqe," \u2014 "),PK=n(Lqe,"A",{href:!0});var c9t=s(PK);tjr=r(c9t,"FlaxAlbertForTokenClassification"),c9t.forEach(t),ajr=r(Lqe," (ALBERT model)"),Lqe.forEach(t),njr=i(Fo),y5=n(Fo,"LI",{});var xqe=s(y5);p4e=n(xqe,"STRONG",{});var f9t=s(p4e);sjr=r(f9t,"bert"),f9t.forEach(t),ljr=r(xqe," \u2014 "),BK=n(xqe,"A",{href:!0});var m9t=s(BK);ijr=r(m9t,"FlaxBertForTokenClassification"),m9t.forEach(t),djr=r(xqe," (BERT model)"),xqe.forEach(t),cjr=i(Fo),L5=n(Fo,"LI",{});var $qe=s(L5);u4e=n($qe,"STRONG",{});var g9t=s(u4e);fjr=r(g9t,"big_bird"),g9t.forEach(t),mjr=r($qe," \u2014 "),IK=n($qe,"A",{href:!0});var h9t=s(IK);gjr=r(h9t,"FlaxBigBirdForTokenClassification"),h9t.forEach(t),hjr=r($qe," (BigBird model)"),$qe.forEach(t),pjr=i(Fo),x5=n(Fo,"LI",{});var kqe=s(x5);_4e=n(kqe,"STRONG",{});var p9t=s(_4e);ujr=r(p9t,"distilbert"),p9t.forEach(t),_jr=r(kqe," \u2014 "),qK=n(kqe,"A",{href:!0});var u9t=s(qK);bjr=r(u9t,"FlaxDistilBertForTokenClassification"),u9t.forEach(t),vjr=r(kqe," (DistilBERT model)"),kqe.forEach(t),Fjr=i(Fo),$5=n(Fo,"LI",{});var Sqe=s($5);b4e=n(Sqe,"STRONG",{});var _9t=s(b4e);Tjr=r(_9t,"electra"),_9t.forEach(t),Mjr=r(Sqe," \u2014 "),NK=n(Sqe,"A",{href:!0});var b9t=s(NK);Ejr=r(b9t,"FlaxElectraForTokenClassification"),b9t.forEach(t),Cjr=r(Sqe," (ELECTRA model)"),Sqe.forEach(t),wjr=i(Fo),k5=n(Fo,"LI",{});var Rqe=s(k5);v4e=n(Rqe,"STRONG",{});var v9t=s(v4e);Ajr=r(v9t,"roberta"),v9t.forEach(t),yjr=r(Rqe," \u2014 "),jK=n(Rqe,"A",{href:!0});var F9t=s(jK);Ljr=r(F9t,"FlaxRobertaForTokenClassification"),F9t.forEach(t),xjr=r(Rqe," (RoBERTa model)"),Rqe.forEach(t),$jr=i(Fo),S5=n(Fo,"LI",{});var Pqe=s(S5);F4e=n(Pqe,"STRONG",{});var T9t=s(F4e);kjr=r(T9t,"roformer"),T9t.forEach(t),Sjr=r(Pqe," \u2014 "),DK=n(Pqe,"A",{href:!0});var M9t=s(DK);Rjr=r(M9t,"FlaxRoFormerForTokenClassification"),M9t.forEach(t),Pjr=r(Pqe," (RoFormer model)"),Pqe.forEach(t),Bjr=i(Fo),R5=n(Fo,"LI",{});var Bqe=s(R5);T4e=n(Bqe,"STRONG",{});var E9t=s(T4e);Ijr=r(E9t,"xlm-roberta"),E9t.forEach(t),qjr=r(Bqe," \u2014 "),GK=n(Bqe,"A",{href:!0});var C9t=s(GK);Njr=r(C9t,"FlaxXLMRobertaForTokenClassification"),C9t.forEach(t),jjr=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),Fo.forEach(t),Djr=i(ri),T(P5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Vje=i(f),Zc=n(f,"H2",{class:!0});var JGe=s(Zc);B5=n(JGe,"A",{id:!0,class:!0,href:!0});var w9t=s(B5);M4e=n(w9t,"SPAN",{});var A9t=s(M4e);T(cx.$$.fragment,A9t),A9t.forEach(t),w9t.forEach(t),Gjr=i(JGe),E4e=n(JGe,"SPAN",{});var y9t=s(E4e);Ojr=r(y9t,"FlaxAutoModelForMultipleChoice"),y9t.forEach(t),JGe.forEach(t),Xje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(fx.$$.fragment,ti),Vjr=i(ti),ef=n(ti,"P",{});var Jee=s(ef);Xjr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OK=n(Jee,"A",{href:!0});var L9t=s(OK);zjr=r(L9t,"from_pretrained()"),L9t.forEach(t),Wjr=r(Jee," class method or the "),VK=n(Jee,"A",{href:!0});var x9t=s(VK);Qjr=r(x9t,"from_config()"),x9t.forEach(t),Hjr=r(Jee,` class
method.`),Jee.forEach(t),Ujr=i(ti),mx=n(ti,"P",{});var YGe=s(mx);Jjr=r(YGe,"This class cannot be instantiated directly using "),C4e=n(YGe,"CODE",{});var $9t=s(C4e);Yjr=r($9t,"__init__()"),$9t.forEach(t),Kjr=r(YGe," (throws an error)."),YGe.forEach(t),Zjr=i(ti),Ut=n(ti,"DIV",{class:!0});var hA=s(Ut);T(gx.$$.fragment,hA),eDr=i(hA),w4e=n(hA,"P",{});var k9t=s(w4e);oDr=r(k9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k9t.forEach(t),rDr=i(hA),of=n(hA,"P",{});var Yee=s(of);tDr=r(Yee,`Note:
Loading a model from its configuration file does `),A4e=n(Yee,"STRONG",{});var S9t=s(A4e);aDr=r(S9t,"not"),S9t.forEach(t),nDr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Yee,"A",{href:!0});var R9t=s(XK);sDr=r(R9t,"from_pretrained()"),R9t.forEach(t),lDr=r(Yee," to load the model weights."),Yee.forEach(t),iDr=i(hA),T(I5.$$.fragment,hA),hA.forEach(t),dDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(hx.$$.fragment,ai),cDr=i(ai),y4e=n(ai,"P",{});var P9t=s(y4e);fDr=r(P9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P9t.forEach(t),mDr=i(ai),Mn=n(ai,"P",{});var pA=s(Mn);gDr=r(pA,"The model class to instantiate is selected based on the "),L4e=n(pA,"CODE",{});var B9t=s(L4e);hDr=r(B9t,"model_type"),B9t.forEach(t),pDr=r(pA,` property of the config object (either
passed as an argument or loaded from `),x4e=n(pA,"CODE",{});var I9t=s(x4e);uDr=r(I9t,"pretrained_model_name_or_path"),I9t.forEach(t),_Dr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(pA,"CODE",{});var q9t=s($4e);bDr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),vDr=r(pA,":"),pA.forEach(t),FDr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);q5=n(To,"LI",{});var Iqe=s(q5);k4e=n(Iqe,"STRONG",{});var N9t=s(k4e);TDr=r(N9t,"albert"),N9t.forEach(t),MDr=r(Iqe," \u2014 "),zK=n(Iqe,"A",{href:!0});var j9t=s(zK);EDr=r(j9t,"FlaxAlbertForMultipleChoice"),j9t.forEach(t),CDr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),wDr=i(To),N5=n(To,"LI",{});var qqe=s(N5);S4e=n(qqe,"STRONG",{});var D9t=s(S4e);ADr=r(D9t,"bert"),D9t.forEach(t),yDr=r(qqe," \u2014 "),WK=n(qqe,"A",{href:!0});var G9t=s(WK);LDr=r(G9t,"FlaxBertForMultipleChoice"),G9t.forEach(t),xDr=r(qqe," (BERT model)"),qqe.forEach(t),$Dr=i(To),j5=n(To,"LI",{});var Nqe=s(j5);R4e=n(Nqe,"STRONG",{});var O9t=s(R4e);kDr=r(O9t,"big_bird"),O9t.forEach(t),SDr=r(Nqe," \u2014 "),QK=n(Nqe,"A",{href:!0});var V9t=s(QK);RDr=r(V9t,"FlaxBigBirdForMultipleChoice"),V9t.forEach(t),PDr=r(Nqe," (BigBird model)"),Nqe.forEach(t),BDr=i(To),D5=n(To,"LI",{});var jqe=s(D5);P4e=n(jqe,"STRONG",{});var X9t=s(P4e);IDr=r(X9t,"distilbert"),X9t.forEach(t),qDr=r(jqe," \u2014 "),HK=n(jqe,"A",{href:!0});var z9t=s(HK);NDr=r(z9t,"FlaxDistilBertForMultipleChoice"),z9t.forEach(t),jDr=r(jqe," (DistilBERT model)"),jqe.forEach(t),DDr=i(To),G5=n(To,"LI",{});var Dqe=s(G5);B4e=n(Dqe,"STRONG",{});var W9t=s(B4e);GDr=r(W9t,"electra"),W9t.forEach(t),ODr=r(Dqe," \u2014 "),UK=n(Dqe,"A",{href:!0});var Q9t=s(UK);VDr=r(Q9t,"FlaxElectraForMultipleChoice"),Q9t.forEach(t),XDr=r(Dqe," (ELECTRA model)"),Dqe.forEach(t),zDr=i(To),O5=n(To,"LI",{});var Gqe=s(O5);I4e=n(Gqe,"STRONG",{});var H9t=s(I4e);WDr=r(H9t,"roberta"),H9t.forEach(t),QDr=r(Gqe," \u2014 "),JK=n(Gqe,"A",{href:!0});var U9t=s(JK);HDr=r(U9t,"FlaxRobertaForMultipleChoice"),U9t.forEach(t),UDr=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),JDr=i(To),V5=n(To,"LI",{});var Oqe=s(V5);q4e=n(Oqe,"STRONG",{});var J9t=s(q4e);YDr=r(J9t,"roformer"),J9t.forEach(t),KDr=r(Oqe," \u2014 "),YK=n(Oqe,"A",{href:!0});var Y9t=s(YK);ZDr=r(Y9t,"FlaxRoFormerForMultipleChoice"),Y9t.forEach(t),eGr=r(Oqe," (RoFormer model)"),Oqe.forEach(t),oGr=i(To),X5=n(To,"LI",{});var Vqe=s(X5);N4e=n(Vqe,"STRONG",{});var K9t=s(N4e);rGr=r(K9t,"xlm-roberta"),K9t.forEach(t),tGr=r(Vqe," \u2014 "),KK=n(Vqe,"A",{href:!0});var Z9t=s(KK);aGr=r(Z9t,"FlaxXLMRobertaForMultipleChoice"),Z9t.forEach(t),nGr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),To.forEach(t),sGr=i(ai),T(z5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),zje=i(f),rf=n(f,"H2",{class:!0});var KGe=s(rf);W5=n(KGe,"A",{id:!0,class:!0,href:!0});var ext=s(W5);j4e=n(ext,"SPAN",{});var oxt=s(j4e);T(px.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),lGr=i(KGe),D4e=n(KGe,"SPAN",{});var rxt=s(D4e);iGr=r(rxt,"FlaxAutoModelForNextSentencePrediction"),rxt.forEach(t),KGe.forEach(t),Wje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(ux.$$.fragment,ni),dGr=i(ni),tf=n(ni,"P",{});var Kee=s(tf);cGr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZK=n(Kee,"A",{href:!0});var txt=s(ZK);fGr=r(txt,"from_pretrained()"),txt.forEach(t),mGr=r(Kee," class method or the "),eZ=n(Kee,"A",{href:!0});var axt=s(eZ);gGr=r(axt,"from_config()"),axt.forEach(t),hGr=r(Kee,` class
method.`),Kee.forEach(t),pGr=i(ni),_x=n(ni,"P",{});var ZGe=s(_x);uGr=r(ZGe,"This class cannot be instantiated directly using "),G4e=n(ZGe,"CODE",{});var nxt=s(G4e);_Gr=r(nxt,"__init__()"),nxt.forEach(t),bGr=r(ZGe," (throws an error)."),ZGe.forEach(t),vGr=i(ni),Jt=n(ni,"DIV",{class:!0});var uA=s(Jt);T(bx.$$.fragment,uA),FGr=i(uA),O4e=n(uA,"P",{});var sxt=s(O4e);TGr=r(sxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sxt.forEach(t),MGr=i(uA),af=n(uA,"P",{});var Zee=s(af);EGr=r(Zee,`Note:
Loading a model from its configuration file does `),V4e=n(Zee,"STRONG",{});var lxt=s(V4e);CGr=r(lxt,"not"),lxt.forEach(t),wGr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(Zee,"A",{href:!0});var ixt=s(oZ);AGr=r(ixt,"from_pretrained()"),ixt.forEach(t),yGr=r(Zee," to load the model weights."),Zee.forEach(t),LGr=i(uA),T(Q5.$$.fragment,uA),uA.forEach(t),xGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(vx.$$.fragment,si),$Gr=i(si),X4e=n(si,"P",{});var dxt=s(X4e);kGr=r(dxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dxt.forEach(t),SGr=i(si),En=n(si,"P",{});var _A=s(En);RGr=r(_A,"The model class to instantiate is selected based on the "),z4e=n(_A,"CODE",{});var cxt=s(z4e);PGr=r(cxt,"model_type"),cxt.forEach(t),BGr=r(_A,` property of the config object (either
passed as an argument or loaded from `),W4e=n(_A,"CODE",{});var fxt=s(W4e);IGr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),qGr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(_A,"CODE",{});var mxt=s(Q4e);NGr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),jGr=r(_A,":"),_A.forEach(t),DGr=i(si),H4e=n(si,"UL",{});var gxt=s(H4e);H5=n(gxt,"LI",{});var Xqe=s(H5);U4e=n(Xqe,"STRONG",{});var hxt=s(U4e);GGr=r(hxt,"bert"),hxt.forEach(t),OGr=r(Xqe," \u2014 "),rZ=n(Xqe,"A",{href:!0});var pxt=s(rZ);VGr=r(pxt,"FlaxBertForNextSentencePrediction"),pxt.forEach(t),XGr=r(Xqe," (BERT model)"),Xqe.forEach(t),gxt.forEach(t),zGr=i(si),T(U5.$$.fragment,si),si.forEach(t),ni.forEach(t),Qje=i(f),nf=n(f,"H2",{class:!0});var eOe=s(nf);J5=n(eOe,"A",{id:!0,class:!0,href:!0});var uxt=s(J5);J4e=n(uxt,"SPAN",{});var _xt=s(J4e);T(Fx.$$.fragment,_xt),_xt.forEach(t),uxt.forEach(t),WGr=i(eOe),Y4e=n(eOe,"SPAN",{});var bxt=s(Y4e);QGr=r(bxt,"FlaxAutoModelForImageClassification"),bxt.forEach(t),eOe.forEach(t),Hje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Tx.$$.fragment,li),HGr=i(li),sf=n(li,"P",{});var eoe=s(sf);UGr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tZ=n(eoe,"A",{href:!0});var vxt=s(tZ);JGr=r(vxt,"from_pretrained()"),vxt.forEach(t),YGr=r(eoe," class method or the "),aZ=n(eoe,"A",{href:!0});var Fxt=s(aZ);KGr=r(Fxt,"from_config()"),Fxt.forEach(t),ZGr=r(eoe,` class
method.`),eoe.forEach(t),eOr=i(li),Mx=n(li,"P",{});var oOe=s(Mx);oOr=r(oOe,"This class cannot be instantiated directly using "),K4e=n(oOe,"CODE",{});var Txt=s(K4e);rOr=r(Txt,"__init__()"),Txt.forEach(t),tOr=r(oOe," (throws an error)."),oOe.forEach(t),aOr=i(li),Yt=n(li,"DIV",{class:!0});var bA=s(Yt);T(Ex.$$.fragment,bA),nOr=i(bA),Z4e=n(bA,"P",{});var Mxt=s(Z4e);sOr=r(Mxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mxt.forEach(t),lOr=i(bA),lf=n(bA,"P",{});var ooe=s(lf);iOr=r(ooe,`Note:
Loading a model from its configuration file does `),eEe=n(ooe,"STRONG",{});var Ext=s(eEe);dOr=r(Ext,"not"),Ext.forEach(t),cOr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(ooe,"A",{href:!0});var Cxt=s(nZ);fOr=r(Cxt,"from_pretrained()"),Cxt.forEach(t),mOr=r(ooe," to load the model weights."),ooe.forEach(t),gOr=i(bA),T(Y5.$$.fragment,bA),bA.forEach(t),hOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Cx.$$.fragment,ii),pOr=i(ii),oEe=n(ii,"P",{});var wxt=s(oEe);uOr=r(wxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wxt.forEach(t),_Or=i(ii),Cn=n(ii,"P",{});var vA=s(Cn);bOr=r(vA,"The model class to instantiate is selected based on the "),rEe=n(vA,"CODE",{});var Axt=s(rEe);vOr=r(Axt,"model_type"),Axt.forEach(t),FOr=r(vA,` property of the config object (either
passed as an argument or loaded from `),tEe=n(vA,"CODE",{});var yxt=s(tEe);TOr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),MOr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(vA,"CODE",{});var Lxt=s(aEe);EOr=r(Lxt,"pretrained_model_name_or_path"),Lxt.forEach(t),COr=r(vA,":"),vA.forEach(t),wOr=i(ii),wx=n(ii,"UL",{});var rOe=s(wx);K5=n(rOe,"LI",{});var zqe=s(K5);nEe=n(zqe,"STRONG",{});var xxt=s(nEe);AOr=r(xxt,"beit"),xxt.forEach(t),yOr=r(zqe," \u2014 "),sZ=n(zqe,"A",{href:!0});var $xt=s(sZ);LOr=r($xt,"FlaxBeitForImageClassification"),$xt.forEach(t),xOr=r(zqe," (BEiT model)"),zqe.forEach(t),$Or=i(rOe),Z5=n(rOe,"LI",{});var Wqe=s(Z5);sEe=n(Wqe,"STRONG",{});var kxt=s(sEe);kOr=r(kxt,"vit"),kxt.forEach(t),SOr=r(Wqe," \u2014 "),lZ=n(Wqe,"A",{href:!0});var Sxt=s(lZ);ROr=r(Sxt,"FlaxViTForImageClassification"),Sxt.forEach(t),POr=r(Wqe," (ViT model)"),Wqe.forEach(t),rOe.forEach(t),BOr=i(ii),T(ew.$$.fragment,ii),ii.forEach(t),li.forEach(t),Uje=i(f),df=n(f,"H2",{class:!0});var tOe=s(df);ow=n(tOe,"A",{id:!0,class:!0,href:!0});var Rxt=s(ow);lEe=n(Rxt,"SPAN",{});var Pxt=s(lEe);T(Ax.$$.fragment,Pxt),Pxt.forEach(t),Rxt.forEach(t),IOr=i(tOe),iEe=n(tOe,"SPAN",{});var Bxt=s(iEe);qOr=r(Bxt,"FlaxAutoModelForVision2Seq"),Bxt.forEach(t),tOe.forEach(t),Jje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(yx.$$.fragment,di),NOr=i(di),cf=n(di,"P",{});var roe=s(cf);jOr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iZ=n(roe,"A",{href:!0});var Ixt=s(iZ);DOr=r(Ixt,"from_pretrained()"),Ixt.forEach(t),GOr=r(roe," class method or the "),dZ=n(roe,"A",{href:!0});var qxt=s(dZ);OOr=r(qxt,"from_config()"),qxt.forEach(t),VOr=r(roe,` class
method.`),roe.forEach(t),XOr=i(di),Lx=n(di,"P",{});var aOe=s(Lx);zOr=r(aOe,"This class cannot be instantiated directly using "),dEe=n(aOe,"CODE",{});var Nxt=s(dEe);WOr=r(Nxt,"__init__()"),Nxt.forEach(t),QOr=r(aOe," (throws an error)."),aOe.forEach(t),HOr=i(di),Kt=n(di,"DIV",{class:!0});var FA=s(Kt);T(xx.$$.fragment,FA),UOr=i(FA),cEe=n(FA,"P",{});var jxt=s(cEe);JOr=r(jxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jxt.forEach(t),YOr=i(FA),ff=n(FA,"P",{});var toe=s(ff);KOr=r(toe,`Note:
Loading a model from its configuration file does `),fEe=n(toe,"STRONG",{});var Dxt=s(fEe);ZOr=r(Dxt,"not"),Dxt.forEach(t),eVr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(toe,"A",{href:!0});var Gxt=s(cZ);oVr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),rVr=r(toe," to load the model weights."),toe.forEach(t),tVr=i(FA),T(rw.$$.fragment,FA),FA.forEach(t),aVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T($x.$$.fragment,ci),nVr=i(ci),mEe=n(ci,"P",{});var Oxt=s(mEe);sVr=r(Oxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Oxt.forEach(t),lVr=i(ci),wn=n(ci,"P",{});var TA=s(wn);iVr=r(TA,"The model class to instantiate is selected based on the "),gEe=n(TA,"CODE",{});var Vxt=s(gEe);dVr=r(Vxt,"model_type"),Vxt.forEach(t),cVr=r(TA,` property of the config object (either
passed as an argument or loaded from `),hEe=n(TA,"CODE",{});var Xxt=s(hEe);fVr=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),mVr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(TA,"CODE",{});var zxt=s(pEe);gVr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),hVr=r(TA,":"),TA.forEach(t),pVr=i(ci),uEe=n(ci,"UL",{});var Wxt=s(uEe);tw=n(Wxt,"LI",{});var Qqe=s(tw);_Ee=n(Qqe,"STRONG",{});var Qxt=s(_Ee);uVr=r(Qxt,"vision-encoder-decoder"),Qxt.forEach(t),_Vr=r(Qqe," \u2014 "),fZ=n(Qqe,"A",{href:!0});var Hxt=s(fZ);bVr=r(Hxt,"FlaxVisionEncoderDecoderModel"),Hxt.forEach(t),vVr=r(Qqe," (Vision Encoder decoder model)"),Qqe.forEach(t),Wxt.forEach(t),FVr=i(ci),T(aw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Kkt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(J$,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Y$,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertConfig"),c(K$,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartConfig"),c(Z$,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitConfig"),c(ek,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertConfig"),c(ok,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(rk,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdConfig"),c(tk,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ak,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(nk,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(sk,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertConfig"),c(lk,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineConfig"),c(ik,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPConfig"),c(dk,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertConfig"),c(ck,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextConfig"),c(fk,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLConfig"),c(mk,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtConfig"),c(gk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pk,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(uk,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaConfig"),c(_k,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bk,"href","/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vk,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTConfig"),c(Fk,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrConfig"),c(Tk,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Mk,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRConfig"),c(Ek,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTConfig"),c(Ck,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraConfig"),c(wk,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ak,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertConfig"),c(yk,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaConfig"),c(Lk,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetConfig"),c(xk,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTConfig"),c($k,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelConfig"),c(kk,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNConfig"),c(Sk,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Config"),c(Rk,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Pk,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJConfig"),c(Bk,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertConfig"),c(Ik,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertConfig"),c(qk,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Nk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(jk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Dk,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Gk,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDConfig"),c(Ok,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerConfig"),c(Vk,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeConfig"),c(Xk,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertConfig"),c(zk,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Config"),c(Wk,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianConfig"),c(Qk,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Hk,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartConfig"),c(Uk,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Jk,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Yk,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetConfig"),c(Kk,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Config"),c(Zk,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(eS,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(oS,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTConfig"),c(rS,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusConfig"),c(tS,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverConfig"),c(aS,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartConfig"),c(nS,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(sS,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(lS,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(iS,"href","/docs/transformers/pr_17388/en/model_doc/rag#transformers.RagConfig"),c(dS,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmConfig"),c(cS,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerConfig"),c(fS,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetConfig"),c(mS,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertConfig"),c(gS,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetConfig"),c(hS,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertConfig"),c(pS,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaConfig"),c(uS,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerConfig"),c(_S,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerConfig"),c(bS,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWConfig"),c(vS,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDConfig"),c(FS,"href","/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(TS,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(MS,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ES,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterConfig"),c(CS,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(wS,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinConfig"),c(AS,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Config"),c(yS,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasConfig"),c(LS,"href","/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(xS,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c($S,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRConfig"),c(kS,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(SS,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(RS,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanConfig"),c(PS,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltConfig"),c(BS,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(IS,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(qS,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(NS,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTConfig"),c(jS,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(DS,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(GS,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(OS,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMConfig"),c(VS,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMConfig"),c(XS,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMConfig"),c(zS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(WS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(QS,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(HS,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetConfig"),c(US,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosConfig"),c(JS,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(YS,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(KS,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZS,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eR,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartTokenizer"),c(oR,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartTokenizerFast"),c(rR,"href","/docs/transformers/pr_17388/en/model_doc/barthez#transformers.BarthezTokenizer"),c(tR,"href","/docs/transformers/pr_17388/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(aR,"href","/docs/transformers/pr_17388/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(nR,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(sR,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(iR,"href","/docs/transformers/pr_17388/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(dR,"href","/docs/transformers/pr_17388/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(cR,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(fR,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(mR,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gR,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(pR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(uR,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(_R,"href","/docs/transformers/pr_17388/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(bR,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertTokenizer"),c(vR,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineTokenizer"),c(TR,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPTokenizer"),c(MR,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ER,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(CR,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17388/en/model_doc/cpm#transformers.CpmTokenizer"),c(AR,"href","/docs/transformers/pr_17388/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(yR,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(LR,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xR,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($R,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaTokenizer"),c(kR,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(RR,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(PR,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(BR,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(qR,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(NR,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraTokenizer"),c(jR,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(DR,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(GR,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetTokenizer"),c(OR,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(VR,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(XR,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelTokenizer"),c(zR,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17388/en/model_doc/herbert#transformers.HerbertTokenizer"),c(ZR,"href","/docs/transformers/pr_17388/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(eP,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oP,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rP,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(aP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(nP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(sP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(iP,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(dP,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(cP,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(fP,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDTokenizer"),c(mP,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDTokenizerFast"),c(gP,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerTokenizer"),c(hP,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(pP,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeTokenizer"),c(uP,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(_P,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(vP,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianTokenizer"),c(FP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartTokenizer"),c(TP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(MP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(EP,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(CP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(wP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17388/en/model_doc/mluke#transformers.MLukeTokenizer"),c(yP,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(LP,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetTokenizer"),c($P,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(kP,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Tokenizer"),c(SP,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5TokenizerFast"),c(RP,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(PP,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(IP,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(qP,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NP,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jP,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DP,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(GP,"href","/docs/transformers/pr_17388/en/model_doc/phobert#transformers.PhobertTokenizer"),c(OP,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartTokenizer"),c(VP,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(XP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(zP,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17388/en/model_doc/rag#transformers.RagTokenizer"),c(QP,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmTokenizer"),c(HP,"href","/docs/transformers/pr_17388/en/model_doc/realm#transformers.RealmTokenizerFast"),c(UP,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerTokenizer"),c(JP,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(YP,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertTokenizer"),c(KP,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(eB,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(aB,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(nB,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(sB,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(lB,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterTokenizer"),c(iB,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(dB,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(cB,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Tokenizer"),c(mB,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5TokenizerFast"),c(gB,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasTokenizer"),c(hB,"href","/docs/transformers/pr_17388/en/model_doc/tapex#transformers.TapexTokenizer"),c(pB,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(uB,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(TB,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMTokenizer"),c(MB,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(EB,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMTokenizer"),c(CB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(wB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(AB,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(yB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LB,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xB,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetTokenizer"),c($B,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(kB,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizer"),c(SB,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(RB,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(PB,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(HB,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(iI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(dI,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPProcessor"),c(cI,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(fI,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(mI,"href","/docs/transformers/pr_17388/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pI,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(uI,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_I,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltProcessor"),c(TI,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(MI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"id","transformers.AutoModel"),c(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(wI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yI,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LI,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertModel"),c(xI,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartModel"),c($I,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitModel"),c(kI,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertModel"),c(SI,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RI,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdModel"),c(PI,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(BI,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(II,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(qI,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertModel"),c(NI,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineModel"),c(jI,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.CLIPModel"),c(DI,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertModel"),c(GI,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextModel"),c(OI,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLModel"),c(VI,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtModel"),c(XI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(zI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(WI,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QI,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaModel"),c(HI,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(UI,"href","/docs/transformers/pr_17388/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(JI,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTModel"),c(YI,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrModel"),c(KI,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertModel"),c(ZI,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(eq,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTModel"),c(oq,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraModel"),c(rq,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertModel"),c(tq,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaModel"),c(aq,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetModel"),c(nq,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTModel"),c(sq,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelModel"),c(lq,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelBaseModel"),c(iq,"href","/docs/transformers/pr_17388/en/model_doc/glpn#transformers.GLPNModel"),c(dq,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2Model"),c(cq,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(fq,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJModel"),c(mq,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertModel"),c(gq,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertModel"),c(hq,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(pq,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uq,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(_q,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(bq,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDModel"),c(vq,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerModel"),c(Fq,"href","/docs/transformers/pr_17388/en/model_doc/luke#transformers.LukeModel"),c(Tq,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertModel"),c(Mq,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100Model"),c(Eq,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianModel"),c(Cq,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerModel"),c(wq,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartModel"),c(Aq,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(yq,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Lq,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetModel"),c(xq,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5Model"),c($q,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerModel"),c(kq,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Sq,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTModel"),c(Rq,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusModel"),c(Pq,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverModel"),c(Bq,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartModel"),c(Iq,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerModel"),c(qq,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Nq,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertModel"),c(jq,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModel"),c(Dq,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetModel"),c(Gq,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertModel"),c(Oq,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetModel"),c(Vq,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel"),c(Xq,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaModel"),c(zq,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerModel"),c(Wq,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerModel"),c(Qq,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWModel"),c(Hq,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDModel"),c(Uq,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Jq,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterModel"),c(Yq,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Kq,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinModel"),c(Zq,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5Model"),c(eN,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasModel"),c(oN,"href","/docs/transformers/pr_17388/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(rN,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(tN,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechModel"),c(aN,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(nN,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanModel"),c(sN,"href","/docs/transformers/pr_17388/en/model_doc/vilt#transformers.ViltModel"),c(lN,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(iN,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertModel"),c(dN,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTModel"),c(cN,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(fN,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(mN,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(gN,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMModel"),c(hN,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMModel"),c(pN,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMModel"),c(uN,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(_N,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(bN,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(vN,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetModel"),c(FN,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosModel"),c(TN,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForPreTraining"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(MN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CN,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wN,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForPreTraining"),c(AN,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yN,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForPreTraining"),c(LN,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(xN,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($N,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kN,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(SN,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(RN,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PN,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForPreTraining"),c(IN,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qN,"href","/docs/transformers/pr_17388/en/model_doc/flava#transformers.FlavaForPreTraining"),c(NN,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForPreTraining"),c(jN,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DN,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(GN,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ON,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(XN,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zN,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(WN,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(QN,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(HN,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UN,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(JN,"href","/docs/transformers/pr_17388/en/model_doc/retribert#transformers.RetriBertModel"),c(YN,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KN,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ZN,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rj,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tj,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(aj,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(nj,"href","/docs/transformers/pr_17388/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(sj,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(lj,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(ij,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(dj,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mj,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForCausalLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(gj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uj,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForCausalLM"),c(_j,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertLMHeadModel"),c(bj,"href","/docs/transformers/pr_17388/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(vj,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Fj,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Tj,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Mj,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Ej,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Cj,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wj,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Aj,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForCausalLM"),c(yj,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Lj,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(xj,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForCausalLM"),c($j,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianForCausalLM"),c(kj,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Sj,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Rj,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.OPTForCausalLM"),c(Bj,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Ij,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(qj,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Nj,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(jj,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Dj,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Gj,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Oj,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Vj,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Xj,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zj,"href","/docs/transformers/pr_17388/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Wj,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Qj,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Hj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Uj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Jj,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Yj,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForMaskedLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Kj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zj,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oD,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(nD,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iD,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dD,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cD,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(mD,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(hD,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(pD,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_D,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bD,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MD,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ED,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(CD,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(AD,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xD,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kD,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PD,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u8,"id","transformers.AutoModelForSeq2SeqLM"),c(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u8,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(BD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(VD,"href","/docs/transformers/pr_17388/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17388/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.MarianMTModel"),c(QD,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17388/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17388/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I8,"id","transformers.AutoModelForSequenceClassification"),c(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I8,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(eG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($G,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17388/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForMultipleChoice"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(JG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForNextSentencePrediction"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(LO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(SO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(RO,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(PO,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(BO,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForTokenClassification"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(IO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(OO,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForTokenClassification"),c(XO,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(WO,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(QO,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(HO,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(JO,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(KO,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eV,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(aV,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nV,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iV,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(dV,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(cV,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(mV,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(gV,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pV,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uV,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_V,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(vV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17388/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17388/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(IV,"href","/docs/transformers/pr_17388/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17388/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17388/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17388/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17388/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17388/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17388/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17388/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17388/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(aX,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(lX,"href","/docs/transformers/pr_17388/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(iX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.AutoModelForImageClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(mX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForImageClassification"),c(uX,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_X,"href","/docs/transformers/pr_17388/en/model_doc/cvt#transformers.CvtForImageClassification"),c(bX,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(vX,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassification"),c(FX,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(TX,"href","/docs/transformers/pr_17388/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(MX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(EX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(CX,"href","/docs/transformers/pr_17388/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(wX,"href","/docs/transformers/pr_17388/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(AX,"href","/docs/transformers/pr_17388/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yX,"href","/docs/transformers/pr_17388/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(LX,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(xX,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForImageClassification"),c($X,"href","/docs/transformers/pr_17388/en/model_doc/van#transformers.VanForImageClassification"),c(kX,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForVision2Seq"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(SX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.AutoModelForAudioClassification"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(IX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForAudioFrameClassification"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(KX,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(ZX,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ez,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(oz,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForCTC"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(rz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sz,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.HubertForCTC"),c(lz,"href","/docs/transformers/pr_17388/en/model_doc/sew#transformers.SEWForCTC"),c(iz,"href","/docs/transformers/pr_17388/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dz,"href","/docs/transformers/pr_17388/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cz,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(gz,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_17388/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bz,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForAudioXVector"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(vz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Ez,"href","/docs/transformers/pr_17388/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Cz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wz,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Az,"href","/docs/transformers/pr_17388/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForMaskedImageModeling"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17388/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kz,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Sz,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForObjectDetection"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForObjectDetection"),c(qz,"href","/docs/transformers/pr_17388/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForImageSegmentation"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17388/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForSemanticSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Wz,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Qz,"href","/docs/transformers/pr_17388/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Hz,"href","/docs/transformers/pr_17388/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForInstanceSegmentation"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17388/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.TFAutoModel"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertModel"),c(tW,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartModel"),c(aW,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertModel"),c(nW,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(sW,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(lW,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertModel"),c(iW,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.TFCLIPModel"),c(dW,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertModel"),c(cW,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextModel"),c(fW,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLModel"),c(mW,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(gW,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaModel"),c(hW,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(pW,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(uW,"href","/docs/transformers/pr_17388/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_W,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraModel"),c(bW,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(vW,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelModel"),c(FW,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(TW,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2Model"),c(MW,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJModel"),c(EW,"href","/docs/transformers/pr_17388/en/model_doc/hubert#transformers.TFHubertModel"),c(CW,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(wW,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDModel"),c(AW,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerModel"),c(yW,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertModel"),c(LW,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianModel"),c(xW,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartModel"),c($W,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(kW,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetModel"),c(SW,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5Model"),c(RW,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(PW,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTModel"),c(BW,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusModel"),c(IW,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertModel"),c(qW,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaModel"),c(NW,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerModel"),c(jW,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(DW,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinModel"),c(GW,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5Model"),c(OW,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasModel"),c(VW,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(XW,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTModel"),c(zW,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(WW,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(QW,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMModel"),c(HW,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(UW,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.TFAutoModelForPreTraining"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(eQ,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForPreTraining"),c(rQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(sQ,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(iQ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dQ,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17388/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(mQ,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17388/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(vQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.TFAutoModelForCausalLM"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(yQ,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c($Q,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(SQ,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(RQ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(PQ,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(BQ,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForImageClassification"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17388/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(OQ,"href","/docs/transformers/pr_17388/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(VQ,"href","/docs/transformers/pr_17388/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(XQ,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.TFAutoModelForMaskedLM"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(zQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(eH,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(rH,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tH,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(aH,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nH,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(sH,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iH,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cH,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(fH,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mH,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gH,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(hH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bH,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(vH,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(FH,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(TH,"href","/docs/transformers/pr_17388/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.TFMarianMTModel"),c(EH,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(wH,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForSequenceClassification"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(yH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17388/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17388/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17388/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForMultipleChoice"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(rU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(AU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(yU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17388/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.TFAutoModelForTokenClassification"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(kU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(IU,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qU,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NU,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jU,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DU,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(OU,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(XU,"href","/docs/transformers/pr_17388/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zU,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(WU,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(HU,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(JU,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(YU,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(KU,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForQuestionAnswering"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17388/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17388/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17388/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17388/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17388/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(mJ,"href","/docs/transformers/pr_17388/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17388/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17388/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17388/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17388/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17388/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(TJ,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17388/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForVision2Seq"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17388/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.FlaxAutoModel"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertModel"),c(BJ,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartModel"),c(IJ,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitModel"),c(qJ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertModel"),c(NJ,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(jJ,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(DJ,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(GJ,"href","/docs/transformers/pr_17388/en/model_doc/clip#transformers.FlaxCLIPModel"),c(OJ,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(VJ,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraModel"),c(XJ,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(zJ,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(WJ,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(QJ,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianModel"),c(HJ,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UJ,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JJ,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTModel"),c(YJ,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(KJ,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(ZJ,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(eY,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5Model"),c(oY,"href","/docs/transformers/pr_17388/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rY,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTModel"),c(tY,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(aY,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.FlaxAutoModelForCausalLM"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gY,"href","/docs/transformers/pr_17388/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hY,"href","/docs/transformers/pr_17388/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pY,"href","/docs/transformers/pr_17388/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(uY,"href","/docs/transformers/pr_17388/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(_Y,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bY,"href","/docs/transformers/pr_17388/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForPreTraining"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(yY,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($Y,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kY,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17388/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(RY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForMaskedLM"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(NY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(DY,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(GY,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(VY,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zY,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WY,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17388/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17388/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(eK,"href","/docs/transformers/pr_17388/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(oK,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17388/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17388/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17388/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17388/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17388/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForTokenClassification"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(kK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(BK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(IK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(qK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(NK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(DK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(GK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17388/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17388/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17388/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17388/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17388/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17388/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17388/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(ZK,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/pr_17388/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForImageClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17388/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lZ,"href","/docs/transformers/pr_17388/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForVision2Seq"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17388/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17388/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,MA),e(rt,uf),b(f,De,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,EA),e(We,Ln),e(We,xn),e(xn,CA),e(We,pi),e(We,$n),e($n,wA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,X$),e(Ae,_i),e(_i,z$),e(Ae,W$),b(f,Eo,_),b(f,wa,_),e(wa,Q$),e(wa,bf),e(bf,H$),e(wa,nOe),b(f,Hqe,_),b(f,bi,_),e(bi,vf),e(vf,aoe),M(AA,aoe,null),e(bi,sOe),e(bi,noe),e(noe,lOe),b(f,Uqe,_),b(f,kn,_),e(kn,iOe),e(kn,soe),e(soe,dOe),e(kn,cOe),e(kn,loe),e(loe,fOe),e(kn,mOe),b(f,Jqe,_),M(yA,f,_),b(f,Yqe,_),b(f,U$,_),e(U$,gOe),b(f,Kqe,_),M(Ff,f,_),b(f,Zqe,_),b(f,vi,_),e(vi,Tf),e(Tf,ioe),M(LA,ioe,null),e(vi,hOe),e(vi,doe),e(doe,pOe),b(f,eNe,_),b(f,Co,_),M(xA,Co,null),e(Co,uOe),e(Co,$A),e($A,_Oe),e($A,J$),e(J$,bOe),e($A,vOe),e(Co,FOe),e(Co,kA),e(kA,TOe),e(kA,coe),e(coe,MOe),e(kA,EOe),e(Co,COe),e(Co,Er),M(SA,Er,null),e(Er,wOe),e(Er,foe),e(foe,AOe),e(Er,yOe),e(Er,Fi),e(Fi,LOe),e(Fi,moe),e(moe,xOe),e(Fi,$Oe),e(Fi,goe),e(goe,kOe),e(Fi,SOe),e(Er,ROe),e(Er,A),e(A,Mf),e(Mf,hoe),e(hoe,POe),e(Mf,BOe),e(Mf,Y$),e(Y$,IOe),e(Mf,qOe),e(A,NOe),e(A,Ef),e(Ef,poe),e(poe,jOe),e(Ef,DOe),e(Ef,K$),e(K$,GOe),e(Ef,OOe),e(A,VOe),e(A,Cf),e(Cf,uoe),e(uoe,XOe),e(Cf,zOe),e(Cf,Z$),e(Z$,WOe),e(Cf,QOe),e(A,HOe),e(A,wf),e(wf,_oe),e(_oe,UOe),e(wf,JOe),e(wf,ek),e(ek,YOe),e(wf,KOe),e(A,ZOe),e(A,Af),e(Af,boe),e(boe,eVe),e(Af,oVe),e(Af,ok),e(ok,rVe),e(Af,tVe),e(A,aVe),e(A,yf),e(yf,voe),e(voe,nVe),e(yf,sVe),e(yf,rk),e(rk,lVe),e(yf,iVe),e(A,dVe),e(A,Lf),e(Lf,Foe),e(Foe,cVe),e(Lf,fVe),e(Lf,tk),e(tk,mVe),e(Lf,gVe),e(A,hVe),e(A,xf),e(xf,Toe),e(Toe,pVe),e(xf,uVe),e(xf,ak),e(ak,_Ve),e(xf,bVe),e(A,vVe),e(A,$f),e($f,Moe),e(Moe,FVe),e($f,TVe),e($f,nk),e(nk,MVe),e($f,EVe),e(A,CVe),e(A,kf),e(kf,Eoe),e(Eoe,wVe),e(kf,AVe),e(kf,sk),e(sk,yVe),e(kf,LVe),e(A,xVe),e(A,Sf),e(Sf,Coe),e(Coe,$Ve),e(Sf,kVe),e(Sf,lk),e(lk,SVe),e(Sf,RVe),e(A,PVe),e(A,Rf),e(Rf,woe),e(woe,BVe),e(Rf,IVe),e(Rf,ik),e(ik,qVe),e(Rf,NVe),e(A,jVe),e(A,Pf),e(Pf,Aoe),e(Aoe,DVe),e(Pf,GVe),e(Pf,dk),e(dk,OVe),e(Pf,VVe),e(A,XVe),e(A,Bf),e(Bf,yoe),e(yoe,zVe),e(Bf,WVe),e(Bf,ck),e(ck,QVe),e(Bf,HVe),e(A,UVe),e(A,If),e(If,Loe),e(Loe,JVe),e(If,YVe),e(If,fk),e(fk,KVe),e(If,ZVe),e(A,eXe),e(A,qf),e(qf,xoe),e(xoe,oXe),e(qf,rXe),e(qf,mk),e(mk,tXe),e(qf,aXe),e(A,nXe),e(A,Nf),e(Nf,$oe),e($oe,sXe),e(Nf,lXe),e(Nf,gk),e(gk,iXe),e(Nf,dXe),e(A,cXe),e(A,jf),e(jf,koe),e(koe,fXe),e(jf,mXe),e(jf,hk),e(hk,gXe),e(jf,hXe),e(A,pXe),e(A,Df),e(Df,Soe),e(Soe,uXe),e(Df,_Xe),e(Df,pk),e(pk,bXe),e(Df,vXe),e(A,FXe),e(A,Gf),e(Gf,Roe),e(Roe,TXe),e(Gf,MXe),e(Gf,uk),e(uk,EXe),e(Gf,CXe),e(A,wXe),e(A,Of),e(Of,Poe),e(Poe,AXe),e(Of,yXe),e(Of,_k),e(_k,LXe),e(Of,xXe),e(A,$Xe),e(A,Vf),e(Vf,Boe),e(Boe,kXe),e(Vf,SXe),e(Vf,bk),e(bk,RXe),e(Vf,PXe),e(A,BXe),e(A,Xf),e(Xf,Ioe),e(Ioe,IXe),e(Xf,qXe),e(Xf,vk),e(vk,NXe),e(Xf,jXe),e(A,DXe),e(A,zf),e(zf,qoe),e(qoe,GXe),e(zf,OXe),e(zf,Fk),e(Fk,VXe),e(zf,XXe),e(A,zXe),e(A,Wf),e(Wf,Noe),e(Noe,WXe),e(Wf,QXe),e(Wf,Tk),e(Tk,HXe),e(Wf,UXe),e(A,JXe),e(A,Qf),e(Qf,joe),e(joe,YXe),e(Qf,KXe),e(Qf,Mk),e(Mk,ZXe),e(Qf,eze),e(A,oze),e(A,Hf),e(Hf,Doe),e(Doe,rze),e(Hf,tze),e(Hf,Ek),e(Ek,aze),e(Hf,nze),e(A,sze),e(A,Uf),e(Uf,Goe),e(Goe,lze),e(Uf,ize),e(Uf,Ck),e(Ck,dze),e(Uf,cze),e(A,fze),e(A,Jf),e(Jf,Ooe),e(Ooe,mze),e(Jf,gze),e(Jf,wk),e(wk,hze),e(Jf,pze),e(A,uze),e(A,Yf),e(Yf,Voe),e(Voe,_ze),e(Yf,bze),e(Yf,Ak),e(Ak,vze),e(Yf,Fze),e(A,Tze),e(A,Kf),e(Kf,Xoe),e(Xoe,Mze),e(Kf,Eze),e(Kf,yk),e(yk,Cze),e(Kf,wze),e(A,Aze),e(A,Zf),e(Zf,zoe),e(zoe,yze),e(Zf,Lze),e(Zf,Lk),e(Lk,xze),e(Zf,$ze),e(A,kze),e(A,em),e(em,Woe),e(Woe,Sze),e(em,Rze),e(em,xk),e(xk,Pze),e(em,Bze),e(A,Ize),e(A,om),e(om,Qoe),e(Qoe,qze),e(om,Nze),e(om,$k),e($k,jze),e(om,Dze),e(A,Gze),e(A,rm),e(rm,Hoe),e(Hoe,Oze),e(rm,Vze),e(rm,kk),e(kk,Xze),e(rm,zze),e(A,Wze),e(A,tm),e(tm,Uoe),e(Uoe,Qze),e(tm,Hze),e(tm,Sk),e(Sk,Uze),e(tm,Jze),e(A,Yze),e(A,am),e(am,Joe),e(Joe,Kze),e(am,Zze),e(am,Rk),e(Rk,eWe),e(am,oWe),e(A,rWe),e(A,nm),e(nm,Yoe),e(Yoe,tWe),e(nm,aWe),e(nm,Pk),e(Pk,nWe),e(nm,sWe),e(A,lWe),e(A,sm),e(sm,Koe),e(Koe,iWe),e(sm,dWe),e(sm,Bk),e(Bk,cWe),e(sm,fWe),e(A,mWe),e(A,lm),e(lm,Zoe),e(Zoe,gWe),e(lm,hWe),e(lm,Ik),e(Ik,pWe),e(lm,uWe),e(A,_We),e(A,im),e(im,ere),e(ere,bWe),e(im,vWe),e(im,qk),e(qk,FWe),e(im,TWe),e(A,MWe),e(A,dm),e(dm,ore),e(ore,EWe),e(dm,CWe),e(dm,Nk),e(Nk,wWe),e(dm,AWe),e(A,yWe),e(A,cm),e(cm,rre),e(rre,LWe),e(cm,xWe),e(cm,jk),e(jk,$We),e(cm,kWe),e(A,SWe),e(A,fm),e(fm,tre),e(tre,RWe),e(fm,PWe),e(fm,Dk),e(Dk,BWe),e(fm,IWe),e(A,qWe),e(A,mm),e(mm,are),e(are,NWe),e(mm,jWe),e(mm,Gk),e(Gk,DWe),e(mm,GWe),e(A,OWe),e(A,gm),e(gm,nre),e(nre,VWe),e(gm,XWe),e(gm,Ok),e(Ok,zWe),e(gm,WWe),e(A,QWe),e(A,hm),e(hm,sre),e(sre,HWe),e(hm,UWe),e(hm,Vk),e(Vk,JWe),e(hm,YWe),e(A,KWe),e(A,pm),e(pm,lre),e(lre,ZWe),e(pm,eQe),e(pm,Xk),e(Xk,oQe),e(pm,rQe),e(A,tQe),e(A,um),e(um,ire),e(ire,aQe),e(um,nQe),e(um,zk),e(zk,sQe),e(um,lQe),e(A,iQe),e(A,_m),e(_m,dre),e(dre,dQe),e(_m,cQe),e(_m,Wk),e(Wk,fQe),e(_m,mQe),e(A,gQe),e(A,bm),e(bm,cre),e(cre,hQe),e(bm,pQe),e(bm,Qk),e(Qk,uQe),e(bm,_Qe),e(A,bQe),e(A,vm),e(vm,fre),e(fre,vQe),e(vm,FQe),e(vm,Hk),e(Hk,TQe),e(vm,MQe),e(A,EQe),e(A,Fm),e(Fm,mre),e(mre,CQe),e(Fm,wQe),e(Fm,Uk),e(Uk,AQe),e(Fm,yQe),e(A,LQe),e(A,Tm),e(Tm,gre),e(gre,xQe),e(Tm,$Qe),e(Tm,Jk),e(Jk,kQe),e(Tm,SQe),e(A,RQe),e(A,Mm),e(Mm,hre),e(hre,PQe),e(Mm,BQe),e(Mm,Yk),e(Yk,IQe),e(Mm,qQe),e(A,NQe),e(A,Em),e(Em,pre),e(pre,jQe),e(Em,DQe),e(Em,Kk),e(Kk,GQe),e(Em,OQe),e(A,VQe),e(A,Cm),e(Cm,ure),e(ure,XQe),e(Cm,zQe),e(Cm,Zk),e(Zk,WQe),e(Cm,QQe),e(A,HQe),e(A,wm),e(wm,_re),e(_re,UQe),e(wm,JQe),e(wm,eS),e(eS,YQe),e(wm,KQe),e(A,ZQe),e(A,Am),e(Am,bre),e(bre,eHe),e(Am,oHe),e(Am,oS),e(oS,rHe),e(Am,tHe),e(A,aHe),e(A,ym),e(ym,vre),e(vre,nHe),e(ym,sHe),e(ym,rS),e(rS,lHe),e(ym,iHe),e(A,dHe),e(A,Lm),e(Lm,Fre),e(Fre,cHe),e(Lm,fHe),e(Lm,tS),e(tS,mHe),e(Lm,gHe),e(A,hHe),e(A,xm),e(xm,Tre),e(Tre,pHe),e(xm,uHe),e(xm,aS),e(aS,_He),e(xm,bHe),e(A,vHe),e(A,$m),e($m,Mre),e(Mre,FHe),e($m,THe),e($m,nS),e(nS,MHe),e($m,EHe),e(A,CHe),e(A,km),e(km,Ere),e(Ere,wHe),e(km,AHe),e(km,sS),e(sS,yHe),e(km,LHe),e(A,xHe),e(A,Sm),e(Sm,Cre),e(Cre,$He),e(Sm,kHe),e(Sm,lS),e(lS,SHe),e(Sm,RHe),e(A,PHe),e(A,Rm),e(Rm,wre),e(wre,BHe),e(Rm,IHe),e(Rm,iS),e(iS,qHe),e(Rm,NHe),e(A,jHe),e(A,Pm),e(Pm,Are),e(Are,DHe),e(Pm,GHe),e(Pm,dS),e(dS,OHe),e(Pm,VHe),e(A,XHe),e(A,Bm),e(Bm,yre),e(yre,zHe),e(Bm,WHe),e(Bm,cS),e(cS,QHe),e(Bm,HHe),e(A,UHe),e(A,Im),e(Im,Lre),e(Lre,JHe),e(Im,YHe),e(Im,fS),e(fS,KHe),e(Im,ZHe),e(A,eUe),e(A,qm),e(qm,xre),e(xre,oUe),e(qm,rUe),e(qm,mS),e(mS,tUe),e(qm,aUe),e(A,nUe),e(A,Nm),e(Nm,$re),e($re,sUe),e(Nm,lUe),e(Nm,gS),e(gS,iUe),e(Nm,dUe),e(A,cUe),e(A,jm),e(jm,kre),e(kre,fUe),e(jm,mUe),e(jm,hS),e(hS,gUe),e(jm,hUe),e(A,pUe),e(A,Dm),e(Dm,Sre),e(Sre,uUe),e(Dm,_Ue),e(Dm,pS),e(pS,bUe),e(Dm,vUe),e(A,FUe),e(A,Gm),e(Gm,Rre),e(Rre,TUe),e(Gm,MUe),e(Gm,uS),e(uS,EUe),e(Gm,CUe),e(A,wUe),e(A,Om),e(Om,Pre),e(Pre,AUe),e(Om,yUe),e(Om,_S),e(_S,LUe),e(Om,xUe),e(A,$Ue),e(A,Vm),e(Vm,Bre),e(Bre,kUe),e(Vm,SUe),e(Vm,bS),e(bS,RUe),e(Vm,PUe),e(A,BUe),e(A,Xm),e(Xm,Ire),e(Ire,IUe),e(Xm,qUe),e(Xm,vS),e(vS,NUe),e(Xm,jUe),e(A,DUe),e(A,zm),e(zm,qre),e(qre,GUe),e(zm,OUe),e(zm,FS),e(FS,VUe),e(zm,XUe),e(A,zUe),e(A,Wm),e(Wm,Nre),e(Nre,WUe),e(Wm,QUe),e(Wm,TS),e(TS,HUe),e(Wm,UUe),e(A,JUe),e(A,Qm),e(Qm,jre),e(jre,YUe),e(Qm,KUe),e(Qm,MS),e(MS,ZUe),e(Qm,eJe),e(A,oJe),e(A,Hm),e(Hm,Dre),e(Dre,rJe),e(Hm,tJe),e(Hm,ES),e(ES,aJe),e(Hm,nJe),e(A,sJe),e(A,Um),e(Um,Gre),e(Gre,lJe),e(Um,iJe),e(Um,CS),e(CS,dJe),e(Um,cJe),e(A,fJe),e(A,Jm),e(Jm,Ore),e(Ore,mJe),e(Jm,gJe),e(Jm,wS),e(wS,hJe),e(Jm,pJe),e(A,uJe),e(A,Ym),e(Ym,Vre),e(Vre,_Je),e(Ym,bJe),e(Ym,AS),e(AS,vJe),e(Ym,FJe),e(A,TJe),e(A,Km),e(Km,Xre),e(Xre,MJe),e(Km,EJe),e(Km,yS),e(yS,CJe),e(Km,wJe),e(A,AJe),e(A,Zm),e(Zm,zre),e(zre,yJe),e(Zm,LJe),e(Zm,LS),e(LS,xJe),e(Zm,$Je),e(A,kJe),e(A,eg),e(eg,Wre),e(Wre,SJe),e(eg,RJe),e(eg,xS),e(xS,PJe),e(eg,BJe),e(A,IJe),e(A,og),e(og,Qre),e(Qre,qJe),e(og,NJe),e(og,$S),e($S,jJe),e(og,DJe),e(A,GJe),e(A,rg),e(rg,Hre),e(Hre,OJe),e(rg,VJe),e(rg,kS),e(kS,XJe),e(rg,zJe),e(A,WJe),e(A,tg),e(tg,Ure),e(Ure,QJe),e(tg,HJe),e(tg,SS),e(SS,UJe),e(tg,JJe),e(A,YJe),e(A,ag),e(ag,Jre),e(Jre,KJe),e(ag,ZJe),e(ag,RS),e(RS,eYe),e(ag,oYe),e(A,rYe),e(A,ng),e(ng,Yre),e(Yre,tYe),e(ng,aYe),e(ng,PS),e(PS,nYe),e(ng,sYe),e(A,lYe),e(A,sg),e(sg,Kre),e(Kre,iYe),e(sg,dYe),e(sg,BS),e(BS,cYe),e(sg,fYe),e(A,mYe),e(A,lg),e(lg,Zre),e(Zre,gYe),e(lg,hYe),e(lg,IS),e(IS,pYe),e(lg,uYe),e(A,_Ye),e(A,ig),e(ig,ete),e(ete,bYe),e(ig,vYe),e(ig,qS),e(qS,FYe),e(ig,TYe),e(A,MYe),e(A,dg),e(dg,ote),e(ote,EYe),e(dg,CYe),e(dg,NS),e(NS,wYe),e(dg,AYe),e(A,yYe),e(A,cg),e(cg,rte),e(rte,LYe),e(cg,xYe),e(cg,jS),e(jS,$Ye),e(cg,kYe),e(A,SYe),e(A,fg),e(fg,tte),e(tte,RYe),e(fg,PYe),e(fg,DS),e(DS,BYe),e(fg,IYe),e(A,qYe),e(A,mg),e(mg,ate),e(ate,NYe),e(mg,jYe),e(mg,GS),e(GS,DYe),e(mg,GYe),e(A,OYe),e(A,gg),e(gg,nte),e(nte,VYe),e(gg,XYe),e(gg,OS),e(OS,zYe),e(gg,WYe),e(A,QYe),e(A,hg),e(hg,ste),e(ste,HYe),e(hg,UYe),e(hg,VS),e(VS,JYe),e(hg,YYe),e(A,KYe),e(A,pg),e(pg,lte),e(lte,ZYe),e(pg,eKe),e(pg,XS),e(XS,oKe),e(pg,rKe),e(A,tKe),e(A,ug),e(ug,ite),e(ite,aKe),e(ug,nKe),e(ug,zS),e(zS,sKe),e(ug,lKe),e(A,iKe),e(A,_g),e(_g,dte),e(dte,dKe),e(_g,cKe),e(_g,WS),e(WS,fKe),e(_g,mKe),e(A,gKe),e(A,bg),e(bg,cte),e(cte,hKe),e(bg,pKe),e(bg,QS),e(QS,uKe),e(bg,_Ke),e(A,bKe),e(A,vg),e(vg,fte),e(fte,vKe),e(vg,FKe),e(vg,HS),e(HS,TKe),e(vg,MKe),e(A,EKe),e(A,Fg),e(Fg,mte),e(mte,CKe),e(Fg,wKe),e(Fg,US),e(US,AKe),e(Fg,yKe),e(A,LKe),e(A,Tg),e(Tg,gte),e(gte,xKe),e(Tg,$Ke),e(Tg,JS),e(JS,kKe),e(Tg,SKe),e(Er,RKe),M(Mg,Er,null),e(Co,PKe),e(Co,Eg),M(RA,Eg,null),e(Eg,BKe),e(Eg,hte),e(hte,IKe),b(f,oNe,_),b(f,Ti,_),e(Ti,Cg),e(Cg,pte),M(PA,pte,null),e(Ti,qKe),e(Ti,ute),e(ute,NKe),b(f,rNe,_),b(f,wo,_),M(BA,wo,null),e(wo,jKe),e(wo,IA),e(IA,DKe),e(IA,YS),e(YS,GKe),e(IA,OKe),e(wo,VKe),e(wo,qA),e(qA,XKe),e(qA,_te),e(_te,zKe),e(qA,WKe),e(wo,QKe),e(wo,Cr),M(NA,Cr,null),e(Cr,HKe),e(Cr,bte),e(bte,UKe),e(Cr,JKe),e(Cr,Aa),e(Aa,YKe),e(Aa,vte),e(vte,KKe),e(Aa,ZKe),e(Aa,Fte),e(Fte,eZe),e(Aa,oZe),e(Aa,Tte),e(Tte,rZe),e(Aa,tZe),e(Cr,aZe),e(Cr,k),e(k,Sn),e(Sn,Mte),e(Mte,nZe),e(Sn,sZe),e(Sn,KS),e(KS,lZe),e(Sn,iZe),e(Sn,ZS),e(ZS,dZe),e(Sn,cZe),e(k,fZe),e(k,Rn),e(Rn,Ete),e(Ete,mZe),e(Rn,gZe),e(Rn,eR),e(eR,hZe),e(Rn,pZe),e(Rn,oR),e(oR,uZe),e(Rn,_Ze),e(k,bZe),e(k,Pn),e(Pn,Cte),e(Cte,vZe),e(Pn,FZe),e(Pn,rR),e(rR,TZe),e(Pn,MZe),e(Pn,tR),e(tR,EZe),e(Pn,CZe),e(k,wZe),e(k,wg),e(wg,wte),e(wte,AZe),e(wg,yZe),e(wg,aR),e(aR,LZe),e(wg,xZe),e(k,$Ze),e(k,Bn),e(Bn,Ate),e(Ate,kZe),e(Bn,SZe),e(Bn,nR),e(nR,RZe),e(Bn,PZe),e(Bn,sR),e(sR,BZe),e(Bn,IZe),e(k,qZe),e(k,Ag),e(Ag,yte),e(yte,NZe),e(Ag,jZe),e(Ag,lR),e(lR,DZe),e(Ag,GZe),e(k,OZe),e(k,yg),e(yg,Lte),e(Lte,VZe),e(yg,XZe),e(yg,iR),e(iR,zZe),e(yg,WZe),e(k,QZe),e(k,Lg),e(Lg,xte),e(xte,HZe),e(Lg,UZe),e(Lg,dR),e(dR,JZe),e(Lg,YZe),e(k,KZe),e(k,In),e(In,$te),e($te,ZZe),e(In,eeo),e(In,cR),e(cR,oeo),e(In,reo),e(In,fR),e(fR,teo),e(In,aeo),e(k,neo),e(k,qn),e(qn,kte),e(kte,seo),e(qn,leo),e(qn,mR),e(mR,ieo),e(qn,deo),e(qn,gR),e(gR,ceo),e(qn,feo),e(k,meo),e(k,Nn),e(Nn,Ste),e(Ste,geo),e(Nn,heo),e(Nn,hR),e(hR,peo),e(Nn,ueo),e(Nn,pR),e(pR,_eo),e(Nn,beo),e(k,veo),e(k,xg),e(xg,Rte),e(Rte,Feo),e(xg,Teo),e(xg,uR),e(uR,Meo),e(xg,Eeo),e(k,Ceo),e(k,$g),e($g,Pte),e(Pte,weo),e($g,Aeo),e($g,_R),e(_R,yeo),e($g,Leo),e(k,xeo),e(k,jn),e(jn,Bte),e(Bte,$eo),e(jn,keo),e(jn,bR),e(bR,Seo),e(jn,Reo),e(jn,vR),e(vR,Peo),e(jn,Beo),e(k,Ieo),e(k,kg),e(kg,Ite),e(Ite,qeo),e(kg,Neo),e(kg,FR),e(FR,jeo),e(kg,Deo),e(k,Geo),e(k,Dn),e(Dn,qte),e(qte,Oeo),e(Dn,Veo),e(Dn,TR),e(TR,Xeo),e(Dn,zeo),e(Dn,MR),e(MR,Weo),e(Dn,Qeo),e(k,Heo),e(k,Gn),e(Gn,Nte),e(Nte,Ueo),e(Gn,Jeo),e(Gn,ER),e(ER,Yeo),e(Gn,Keo),e(Gn,CR),e(CR,Zeo),e(Gn,eoo),e(k,ooo),e(k,On),e(On,jte),e(jte,roo),e(On,too),e(On,wR),e(wR,aoo),e(On,noo),e(On,AR),e(AR,soo),e(On,loo),e(k,ioo),e(k,Sg),e(Sg,Dte),e(Dte,doo),e(Sg,coo),e(Sg,yR),e(yR,foo),e(Sg,moo),e(k,goo),e(k,Vn),e(Vn,Gte),e(Gte,hoo),e(Vn,poo),e(Vn,LR),e(LR,uoo),e(Vn,_oo),e(Vn,xR),e(xR,boo),e(Vn,voo),e(k,Foo),e(k,Xn),e(Xn,Ote),e(Ote,Too),e(Xn,Moo),e(Xn,$R),e($R,Eoo),e(Xn,Coo),e(Xn,kR),e(kR,woo),e(Xn,Aoo),e(k,yoo),e(k,zn),e(zn,Vte),e(Vte,Loo),e(zn,xoo),e(zn,SR),e(SR,$oo),e(zn,koo),e(zn,RR),e(RR,Soo),e(zn,Roo),e(k,Poo),e(k,Wn),e(Wn,Xte),e(Xte,Boo),e(Wn,Ioo),e(Wn,PR),e(PR,qoo),e(Wn,Noo),e(Wn,BR),e(BR,joo),e(Wn,Doo),e(k,Goo),e(k,Qn),e(Qn,zte),e(zte,Ooo),e(Qn,Voo),e(Qn,IR),e(IR,Xoo),e(Qn,zoo),e(Qn,qR),e(qR,Woo),e(Qn,Qoo),e(k,Hoo),e(k,Hn),e(Hn,Wte),e(Wte,Uoo),e(Hn,Joo),e(Hn,NR),e(NR,Yoo),e(Hn,Koo),e(Hn,jR),e(jR,Zoo),e(Hn,ero),e(k,oro),e(k,Rg),e(Rg,Qte),e(Qte,rro),e(Rg,tro),e(Rg,DR),e(DR,aro),e(Rg,nro),e(k,sro),e(k,Un),e(Un,Hte),e(Hte,lro),e(Un,iro),e(Un,GR),e(GR,dro),e(Un,cro),e(Un,OR),e(OR,fro),e(Un,mro),e(k,gro),e(k,Pg),e(Pg,Ute),e(Ute,hro),e(Pg,pro),e(Pg,VR),e(VR,uro),e(Pg,_ro),e(k,bro),e(k,Jn),e(Jn,Jte),e(Jte,vro),e(Jn,Fro),e(Jn,XR),e(XR,Tro),e(Jn,Mro),e(Jn,zR),e(zR,Ero),e(Jn,Cro),e(k,wro),e(k,Yn),e(Yn,Yte),e(Yte,Aro),e(Yn,yro),e(Yn,WR),e(WR,Lro),e(Yn,xro),e(Yn,QR),e(QR,$ro),e(Yn,kro),e(k,Sro),e(k,Kn),e(Kn,Kte),e(Kte,Rro),e(Kn,Pro),e(Kn,HR),e(HR,Bro),e(Kn,Iro),e(Kn,UR),e(UR,qro),e(Kn,Nro),e(k,jro),e(k,Zn),e(Zn,Zte),e(Zte,Dro),e(Zn,Gro),e(Zn,JR),e(JR,Oro),e(Zn,Vro),e(Zn,YR),e(YR,Xro),e(Zn,zro),e(k,Wro),e(k,es),e(es,eae),e(eae,Qro),e(es,Hro),e(es,KR),e(KR,Uro),e(es,Jro),e(es,ZR),e(ZR,Yro),e(es,Kro),e(k,Zro),e(k,Bg),e(Bg,oae),e(oae,eto),e(Bg,oto),e(Bg,eP),e(eP,rto),e(Bg,tto),e(k,ato),e(k,os),e(os,rae),e(rae,nto),e(os,sto),e(os,oP),e(oP,lto),e(os,ito),e(os,rP),e(rP,dto),e(os,cto),e(k,fto),e(k,rs),e(rs,tae),e(tae,mto),e(rs,gto),e(rs,tP),e(tP,hto),e(rs,pto),e(rs,aP),e(aP,uto),e(rs,_to),e(k,bto),e(k,ts),e(ts,aae),e(aae,vto),e(ts,Fto),e(ts,nP),e(nP,Tto),e(ts,Mto),e(ts,sP),e(sP,Eto),e(ts,Cto),e(k,wto),e(k,as),e(as,nae),e(nae,Ato),e(as,yto),e(as,lP),e(lP,Lto),e(as,xto),e(as,iP),e(iP,$to),e(as,kto),e(k,Sto),e(k,ns),e(ns,sae),e(sae,Rto),e(ns,Pto),e(ns,dP),e(dP,Bto),e(ns,Ito),e(ns,cP),e(cP,qto),e(ns,Nto),e(k,jto),e(k,ss),e(ss,lae),e(lae,Dto),e(ss,Gto),e(ss,fP),e(fP,Oto),e(ss,Vto),e(ss,mP),e(mP,Xto),e(ss,zto),e(k,Wto),e(k,ls),e(ls,iae),e(iae,Qto),e(ls,Hto),e(ls,gP),e(gP,Uto),e(ls,Jto),e(ls,hP),e(hP,Yto),e(ls,Kto),e(k,Zto),e(k,Ig),e(Ig,dae),e(dae,eao),e(Ig,oao),e(Ig,pP),e(pP,rao),e(Ig,tao),e(k,aao),e(k,is),e(is,cae),e(cae,nao),e(is,sao),e(is,uP),e(uP,lao),e(is,iao),e(is,_P),e(_P,dao),e(is,cao),e(k,fao),e(k,qg),e(qg,fae),e(fae,mao),e(qg,gao),e(qg,bP),e(bP,hao),e(qg,pao),e(k,uao),e(k,Ng),e(Ng,mae),e(mae,_ao),e(Ng,bao),e(Ng,vP),e(vP,vao),e(Ng,Fao),e(k,Tao),e(k,ds),e(ds,gae),e(gae,Mao),e(ds,Eao),e(ds,FP),e(FP,Cao),e(ds,wao),e(ds,TP),e(TP,Aao),e(ds,yao),e(k,Lao),e(k,cs),e(cs,hae),e(hae,xao),e(cs,$ao),e(cs,MP),e(MP,kao),e(cs,Sao),e(cs,EP),e(EP,Rao),e(cs,Pao),e(k,Bao),e(k,fs),e(fs,pae),e(pae,Iao),e(fs,qao),e(fs,CP),e(CP,Nao),e(fs,jao),e(fs,wP),e(wP,Dao),e(fs,Gao),e(k,Oao),e(k,jg),e(jg,uae),e(uae,Vao),e(jg,Xao),e(jg,AP),e(AP,zao),e(jg,Wao),e(k,Qao),e(k,ms),e(ms,_ae),e(_ae,Hao),e(ms,Uao),e(ms,yP),e(yP,Jao),e(ms,Yao),e(ms,LP),e(LP,Kao),e(ms,Zao),e(k,eno),e(k,gs),e(gs,bae),e(bae,ono),e(gs,rno),e(gs,xP),e(xP,tno),e(gs,ano),e(gs,$P),e($P,nno),e(gs,sno),e(k,lno),e(k,hs),e(hs,vae),e(vae,ino),e(hs,dno),e(hs,kP),e(kP,cno),e(hs,fno),e(hs,SP),e(SP,mno),e(hs,gno),e(k,hno),e(k,ps),e(ps,Fae),e(Fae,pno),e(ps,uno),e(ps,RP),e(RP,_no),e(ps,bno),e(ps,PP),e(PP,vno),e(ps,Fno),e(k,Tno),e(k,us),e(us,Tae),e(Tae,Mno),e(us,Eno),e(us,BP),e(BP,Cno),e(us,wno),e(us,IP),e(IP,Ano),e(us,yno),e(k,Lno),e(k,Dg),e(Dg,Mae),e(Mae,xno),e(Dg,$no),e(Dg,qP),e(qP,kno),e(Dg,Sno),e(k,Rno),e(k,_s),e(_s,Eae),e(Eae,Pno),e(_s,Bno),e(_s,NP),e(NP,Ino),e(_s,qno),e(_s,jP),e(jP,Nno),e(_s,jno),e(k,Dno),e(k,Gg),e(Gg,Cae),e(Cae,Gno),e(Gg,Ono),e(Gg,DP),e(DP,Vno),e(Gg,Xno),e(k,zno),e(k,Og),e(Og,wae),e(wae,Wno),e(Og,Qno),e(Og,GP),e(GP,Hno),e(Og,Uno),e(k,Jno),e(k,Vg),e(Vg,Aae),e(Aae,Yno),e(Vg,Kno),e(Vg,OP),e(OP,Zno),e(Vg,eso),e(k,oso),e(k,Xg),e(Xg,yae),e(yae,rso),e(Xg,tso),e(Xg,VP),e(VP,aso),e(Xg,nso),e(k,sso),e(k,bs),e(bs,Lae),e(Lae,lso),e(bs,iso),e(bs,XP),e(XP,dso),e(bs,cso),e(bs,zP),e(zP,fso),e(bs,mso),e(k,gso),e(k,zg),e(zg,xae),e(xae,hso),e(zg,pso),e(zg,WP),e(WP,uso),e(zg,_so),e(k,bso),e(k,vs),e(vs,$ae),e($ae,vso),e(vs,Fso),e(vs,QP),e(QP,Tso),e(vs,Mso),e(vs,HP),e(HP,Eso),e(vs,Cso),e(k,wso),e(k,Fs),e(Fs,kae),e(kae,Aso),e(Fs,yso),e(Fs,UP),e(UP,Lso),e(Fs,xso),e(Fs,JP),e(JP,$so),e(Fs,kso),e(k,Sso),e(k,Ts),e(Ts,Sae),e(Sae,Rso),e(Ts,Pso),e(Ts,YP),e(YP,Bso),e(Ts,Iso),e(Ts,KP),e(KP,qso),e(Ts,Nso),e(k,jso),e(k,Ms),e(Ms,Rae),e(Rae,Dso),e(Ms,Gso),e(Ms,ZP),e(ZP,Oso),e(Ms,Vso),e(Ms,eB),e(eB,Xso),e(Ms,zso),e(k,Wso),e(k,Es),e(Es,Pae),e(Pae,Qso),e(Es,Hso),e(Es,oB),e(oB,Uso),e(Es,Jso),e(Es,rB),e(rB,Yso),e(Es,Kso),e(k,Zso),e(k,Cs),e(Cs,Bae),e(Bae,elo),e(Cs,olo),e(Cs,tB),e(tB,rlo),e(Cs,tlo),e(Cs,aB),e(aB,alo),e(Cs,nlo),e(k,slo),e(k,Wg),e(Wg,Iae),e(Iae,llo),e(Wg,ilo),e(Wg,nB),e(nB,dlo),e(Wg,clo),e(k,flo),e(k,Qg),e(Qg,qae),e(qae,mlo),e(Qg,glo),e(Qg,sB),e(sB,hlo),e(Qg,plo),e(k,ulo),e(k,ws),e(ws,Nae),e(Nae,_lo),e(ws,blo),e(ws,lB),e(lB,vlo),e(ws,Flo),e(ws,iB),e(iB,Tlo),e(ws,Mlo),e(k,Elo),e(k,As),e(As,jae),e(jae,Clo),e(As,wlo),e(As,dB),e(dB,Alo),e(As,ylo),e(As,cB),e(cB,Llo),e(As,xlo),e(k,$lo),e(k,ys),e(ys,Dae),e(Dae,klo),e(ys,Slo),e(ys,fB),e(fB,Rlo),e(ys,Plo),e(ys,mB),e(mB,Blo),e(ys,Ilo),e(k,qlo),e(k,Hg),e(Hg,Gae),e(Gae,Nlo),e(Hg,jlo),e(Hg,gB),e(gB,Dlo),e(Hg,Glo),e(k,Olo),e(k,Ug),e(Ug,Oae),e(Oae,Vlo),e(Ug,Xlo),e(Ug,hB),e(hB,zlo),e(Ug,Wlo),e(k,Qlo),e(k,Jg),e(Jg,Vae),e(Vae,Hlo),e(Jg,Ulo),e(Jg,pB),e(pB,Jlo),e(Jg,Ylo),e(k,Klo),e(k,Ls),e(Ls,Xae),e(Xae,Zlo),e(Ls,eio),e(Ls,uB),e(uB,oio),e(Ls,rio),e(Ls,_B),e(_B,tio),e(Ls,aio),e(k,nio),e(k,Yg),e(Yg,zae),e(zae,sio),e(Yg,lio),e(Yg,bB),e(bB,iio),e(Yg,dio),e(k,cio),e(k,Kg),e(Kg,Wae),e(Wae,fio),e(Kg,mio),e(Kg,vB),e(vB,gio),e(Kg,hio),e(k,pio),e(k,Zg),e(Zg,Qae),e(Qae,uio),e(Zg,_io),e(Zg,FB),e(FB,bio),e(Zg,vio),e(k,Fio),e(k,xs),e(xs,Hae),e(Hae,Tio),e(xs,Mio),e(xs,TB),e(TB,Eio),e(xs,Cio),e(xs,MB),e(MB,wio),e(xs,Aio),e(k,yio),e(k,eh),e(eh,Uae),e(Uae,Lio),e(eh,xio),e(eh,EB),e(EB,$io),e(eh,kio),e(k,Sio),e(k,oh),e(oh,Jae),e(Jae,Rio),e(oh,Pio),e(oh,CB),e(CB,Bio),e(oh,Iio),e(k,qio),e(k,$s),e($s,Yae),e(Yae,Nio),e($s,jio),e($s,wB),e(wB,Dio),e($s,Gio),e($s,AB),e(AB,Oio),e($s,Vio),e(k,Xio),e(k,ks),e(ks,Kae),e(Kae,zio),e(ks,Wio),e(ks,yB),e(yB,Qio),e(ks,Hio),e(ks,LB),e(LB,Uio),e(ks,Jio),e(k,Yio),e(k,Ss),e(Ss,Zae),e(Zae,Kio),e(Ss,Zio),e(Ss,xB),e(xB,edo),e(Ss,odo),e(Ss,$B),e($B,rdo),e(Ss,tdo),e(k,ado),e(k,Rs),e(Rs,ene),e(ene,ndo),e(Rs,sdo),e(Rs,kB),e(kB,ldo),e(Rs,ido),e(Rs,SB),e(SB,ddo),e(Rs,cdo),e(Cr,fdo),M(rh,Cr,null),e(wo,mdo),e(wo,th),M(jA,th,null),e(th,gdo),e(th,one),e(one,hdo),b(f,tNe,_),b(f,Mi,_),e(Mi,ah),e(ah,rne),M(DA,rne,null),e(Mi,pdo),e(Mi,tne),e(tne,udo),b(f,aNe,_),b(f,Ao,_),M(GA,Ao,null),e(Ao,_do),e(Ao,OA),e(OA,bdo),e(OA,RB),e(RB,vdo),e(OA,Fdo),e(Ao,Tdo),e(Ao,VA),e(VA,Mdo),e(VA,ane),e(ane,Edo),e(VA,Cdo),e(Ao,wdo),e(Ao,He),M(XA,He,null),e(He,Ado),e(He,nne),e(nne,ydo),e(He,Ldo),e(He,ya),e(ya,xdo),e(ya,sne),e(sne,$do),e(ya,kdo),e(ya,lne),e(lne,Sdo),e(ya,Rdo),e(ya,ine),e(ine,Pdo),e(ya,Bdo),e(He,Ido),e(He,K),e(K,nh),e(nh,dne),e(dne,qdo),e(nh,Ndo),e(nh,PB),e(PB,jdo),e(nh,Ddo),e(K,Gdo),e(K,sh),e(sh,cne),e(cne,Odo),e(sh,Vdo),e(sh,BB),e(BB,Xdo),e(sh,zdo),e(K,Wdo),e(K,lh),e(lh,fne),e(fne,Qdo),e(lh,Hdo),e(lh,IB),e(IB,Udo),e(lh,Jdo),e(K,Ydo),e(K,ih),e(ih,mne),e(mne,Kdo),e(ih,Zdo),e(ih,qB),e(qB,eco),e(ih,oco),e(K,rco),e(K,dh),e(dh,gne),e(gne,tco),e(dh,aco),e(dh,NB),e(NB,nco),e(dh,sco),e(K,lco),e(K,ch),e(ch,hne),e(hne,ico),e(ch,dco),e(ch,jB),e(jB,cco),e(ch,fco),e(K,mco),e(K,fh),e(fh,pne),e(pne,gco),e(fh,hco),e(fh,DB),e(DB,pco),e(fh,uco),e(K,_co),e(K,mh),e(mh,une),e(une,bco),e(mh,vco),e(mh,GB),e(GB,Fco),e(mh,Tco),e(K,Mco),e(K,gh),e(gh,_ne),e(_ne,Eco),e(gh,Cco),e(gh,OB),e(OB,wco),e(gh,Aco),e(K,yco),e(K,hh),e(hh,bne),e(bne,Lco),e(hh,xco),e(hh,VB),e(VB,$co),e(hh,kco),e(K,Sco),e(K,ph),e(ph,vne),e(vne,Rco),e(ph,Pco),e(ph,XB),e(XB,Bco),e(ph,Ico),e(K,qco),e(K,uh),e(uh,Fne),e(Fne,Nco),e(uh,jco),e(uh,zB),e(zB,Dco),e(uh,Gco),e(K,Oco),e(K,_h),e(_h,Tne),e(Tne,Vco),e(_h,Xco),e(_h,WB),e(WB,zco),e(_h,Wco),e(K,Qco),e(K,bh),e(bh,Mne),e(Mne,Hco),e(bh,Uco),e(bh,QB),e(QB,Jco),e(bh,Yco),e(K,Kco),e(K,vh),e(vh,Ene),e(Ene,Zco),e(vh,efo),e(vh,HB),e(HB,ofo),e(vh,rfo),e(K,tfo),e(K,Fh),e(Fh,Cne),e(Cne,afo),e(Fh,nfo),e(Fh,UB),e(UB,sfo),e(Fh,lfo),e(K,ifo),e(K,Th),e(Th,wne),e(wne,dfo),e(Th,cfo),e(Th,JB),e(JB,ffo),e(Th,mfo),e(K,gfo),e(K,Mh),e(Mh,Ane),e(Ane,hfo),e(Mh,pfo),e(Mh,YB),e(YB,ufo),e(Mh,_fo),e(K,bfo),e(K,Eh),e(Eh,yne),e(yne,vfo),e(Eh,Ffo),e(Eh,KB),e(KB,Tfo),e(Eh,Mfo),e(K,Efo),e(K,Ch),e(Ch,Lne),e(Lne,Cfo),e(Ch,wfo),e(Ch,ZB),e(ZB,Afo),e(Ch,yfo),e(K,Lfo),e(K,wh),e(wh,xne),e(xne,xfo),e(wh,$fo),e(wh,eI),e(eI,kfo),e(wh,Sfo),e(K,Rfo),e(K,Ah),e(Ah,$ne),e($ne,Pfo),e(Ah,Bfo),e(Ah,oI),e(oI,Ifo),e(Ah,qfo),e(K,Nfo),e(K,yh),e(yh,kne),e(kne,jfo),e(yh,Dfo),e(yh,rI),e(rI,Gfo),e(yh,Ofo),e(K,Vfo),e(K,Lh),e(Lh,Sne),e(Sne,Xfo),e(Lh,zfo),e(Lh,tI),e(tI,Wfo),e(Lh,Qfo),e(K,Hfo),e(K,xh),e(xh,Rne),e(Rne,Ufo),e(xh,Jfo),e(xh,aI),e(aI,Yfo),e(xh,Kfo),e(K,Zfo),e(K,$h),e($h,Pne),e(Pne,emo),e($h,omo),e($h,nI),e(nI,rmo),e($h,tmo),e(K,amo),e(K,kh),e(kh,Bne),e(Bne,nmo),e(kh,smo),e(kh,sI),e(sI,lmo),e(kh,imo),e(K,dmo),e(K,Sh),e(Sh,Ine),e(Ine,cmo),e(Sh,fmo),e(Sh,lI),e(lI,mmo),e(Sh,gmo),e(He,hmo),M(Rh,He,null),e(He,pmo),M(Ph,He,null),e(Ao,umo),e(Ao,Bh),M(zA,Bh,null),e(Bh,_mo),e(Bh,qne),e(qne,bmo),b(f,nNe,_),b(f,Ei,_),e(Ei,Ih),e(Ih,Nne),M(WA,Nne,null),e(Ei,vmo),e(Ei,jne),e(jne,Fmo),b(f,sNe,_),b(f,yo,_),M(QA,yo,null),e(yo,Tmo),e(yo,HA),e(HA,Mmo),e(HA,iI),e(iI,Emo),e(HA,Cmo),e(yo,wmo),e(yo,UA),e(UA,Amo),e(UA,Dne),e(Dne,ymo),e(UA,Lmo),e(yo,xmo),e(yo,Ue),M(JA,Ue,null),e(Ue,$mo),e(Ue,Gne),e(Gne,kmo),e(Ue,Smo),e(Ue,Ci),e(Ci,Rmo),e(Ci,One),e(One,Pmo),e(Ci,Bmo),e(Ci,Vne),e(Vne,Imo),e(Ci,qmo),e(Ue,Nmo),e(Ue,he),e(he,qh),e(qh,Xne),e(Xne,jmo),e(qh,Dmo),e(qh,dI),e(dI,Gmo),e(qh,Omo),e(he,Vmo),e(he,Nh),e(Nh,zne),e(zne,Xmo),e(Nh,zmo),e(Nh,Wne),e(Wne,Wmo),e(Nh,Qmo),e(he,Hmo),e(he,jh),e(jh,Qne),e(Qne,Umo),e(jh,Jmo),e(jh,cI),e(cI,Ymo),e(jh,Kmo),e(he,Zmo),e(he,Dh),e(Dh,Hne),e(Hne,ego),e(Dh,ogo),e(Dh,fI),e(fI,rgo),e(Dh,tgo),e(he,ago),e(he,Gh),e(Gh,Une),e(Une,ngo),e(Gh,sgo),e(Gh,mI),e(mI,lgo),e(Gh,igo),e(he,dgo),e(he,Oh),e(Oh,Jne),e(Jne,cgo),e(Oh,fgo),e(Oh,gI),e(gI,mgo),e(Oh,ggo),e(he,hgo),e(he,Vh),e(Vh,Yne),e(Yne,pgo),e(Vh,ugo),e(Vh,hI),e(hI,_go),e(Vh,bgo),e(he,vgo),e(he,Xh),e(Xh,Kne),e(Kne,Fgo),e(Xh,Tgo),e(Xh,pI),e(pI,Mgo),e(Xh,Ego),e(he,Cgo),e(he,zh),e(zh,Zne),e(Zne,wgo),e(zh,Ago),e(zh,uI),e(uI,ygo),e(zh,Lgo),e(he,xgo),e(he,Wh),e(Wh,ese),e(ese,$go),e(Wh,kgo),e(Wh,_I),e(_I,Sgo),e(Wh,Rgo),e(he,Pgo),e(he,Qh),e(Qh,ose),e(ose,Bgo),e(Qh,Igo),e(Qh,bI),e(bI,qgo),e(Qh,Ngo),e(he,jgo),e(he,Hh),e(Hh,rse),e(rse,Dgo),e(Hh,Ggo),e(Hh,vI),e(vI,Ogo),e(Hh,Vgo),e(he,Xgo),e(he,Uh),e(Uh,tse),e(tse,zgo),e(Uh,Wgo),e(Uh,FI),e(FI,Qgo),e(Uh,Hgo),e(he,Ugo),e(he,Jh),e(Jh,ase),e(ase,Jgo),e(Jh,Ygo),e(Jh,TI),e(TI,Kgo),e(Jh,Zgo),e(he,eho),e(he,Yh),e(Yh,nse),e(nse,oho),e(Yh,rho),e(Yh,MI),e(MI,tho),e(Yh,aho),e(he,nho),e(he,Kh),e(Kh,sse),e(sse,sho),e(Kh,lho),e(Kh,EI),e(EI,iho),e(Kh,dho),e(he,cho),e(he,Zh),e(Zh,lse),e(lse,fho),e(Zh,mho),e(Zh,CI),e(CI,gho),e(Zh,hho),e(Ue,pho),M(ep,Ue,null),e(Ue,uho),M(op,Ue,null),e(yo,_ho),e(yo,rp),M(YA,rp,null),e(rp,bho),e(rp,ise),e(ise,vho),b(f,lNe,_),b(f,wi,_),e(wi,tp),e(tp,dse),M(KA,dse,null),e(wi,Fho),e(wi,cse),e(cse,Tho),b(f,iNe,_),b(f,Lo,_),M(ZA,Lo,null),e(Lo,Mho),e(Lo,Ai),e(Ai,Eho),e(Ai,wI),e(wI,Cho),e(Ai,who),e(Ai,AI),e(AI,Aho),e(Ai,yho),e(Lo,Lho),e(Lo,e6),e(e6,xho),e(e6,fse),e(fse,$ho),e(e6,kho),e(Lo,Sho),e(Lo,tt),M(o6,tt,null),e(tt,Rho),e(tt,mse),e(mse,Pho),e(tt,Bho),e(tt,yi),e(yi,Iho),e(yi,gse),e(gse,qho),e(yi,Nho),e(yi,yI),e(yI,jho),e(yi,Dho),e(tt,Gho),M(ap,tt,null),e(Lo,Oho),e(Lo,Je),M(r6,Je,null),e(Je,Vho),e(Je,hse),e(hse,Xho),e(Je,zho),e(Je,La),e(La,Who),e(La,pse),e(pse,Qho),e(La,Hho),e(La,use),e(use,Uho),e(La,Jho),e(La,_se),e(_se,Yho),e(La,Kho),e(Je,Zho),e(Je,x),e(x,np),e(np,bse),e(bse,epo),e(np,opo),e(np,LI),e(LI,rpo),e(np,tpo),e(x,apo),e(x,sp),e(sp,vse),e(vse,npo),e(sp,spo),e(sp,xI),e(xI,lpo),e(sp,ipo),e(x,dpo),e(x,lp),e(lp,Fse),e(Fse,cpo),e(lp,fpo),e(lp,$I),e($I,mpo),e(lp,gpo),e(x,hpo),e(x,ip),e(ip,Tse),e(Tse,ppo),e(ip,upo),e(ip,kI),e(kI,_po),e(ip,bpo),e(x,vpo),e(x,dp),e(dp,Mse),e(Mse,Fpo),e(dp,Tpo),e(dp,SI),e(SI,Mpo),e(dp,Epo),e(x,Cpo),e(x,cp),e(cp,Ese),e(Ese,wpo),e(cp,Apo),e(cp,RI),e(RI,ypo),e(cp,Lpo),e(x,xpo),e(x,fp),e(fp,Cse),e(Cse,$po),e(fp,kpo),e(fp,PI),e(PI,Spo),e(fp,Rpo),e(x,Ppo),e(x,mp),e(mp,wse),e(wse,Bpo),e(mp,Ipo),e(mp,BI),e(BI,qpo),e(mp,Npo),e(x,jpo),e(x,gp),e(gp,Ase),e(Ase,Dpo),e(gp,Gpo),e(gp,II),e(II,Opo),e(gp,Vpo),e(x,Xpo),e(x,hp),e(hp,yse),e(yse,zpo),e(hp,Wpo),e(hp,qI),e(qI,Qpo),e(hp,Hpo),e(x,Upo),e(x,pp),e(pp,Lse),e(Lse,Jpo),e(pp,Ypo),e(pp,NI),e(NI,Kpo),e(pp,Zpo),e(x,euo),e(x,up),e(up,xse),e(xse,ouo),e(up,ruo),e(up,jI),e(jI,tuo),e(up,auo),e(x,nuo),e(x,_p),e(_p,$se),e($se,suo),e(_p,luo),e(_p,DI),e(DI,iuo),e(_p,duo),e(x,cuo),e(x,bp),e(bp,kse),e(kse,fuo),e(bp,muo),e(bp,GI),e(GI,guo),e(bp,huo),e(x,puo),e(x,vp),e(vp,Sse),e(Sse,uuo),e(vp,_uo),e(vp,OI),e(OI,buo),e(vp,vuo),e(x,Fuo),e(x,Fp),e(Fp,Rse),e(Rse,Tuo),e(Fp,Muo),e(Fp,VI),e(VI,Euo),e(Fp,Cuo),e(x,wuo),e(x,Tp),e(Tp,Pse),e(Pse,Auo),e(Tp,yuo),e(Tp,XI),e(XI,Luo),e(Tp,xuo),e(x,$uo),e(x,Mp),e(Mp,Bse),e(Bse,kuo),e(Mp,Suo),e(Mp,zI),e(zI,Ruo),e(Mp,Puo),e(x,Buo),e(x,Ep),e(Ep,Ise),e(Ise,Iuo),e(Ep,quo),e(Ep,WI),e(WI,Nuo),e(Ep,juo),e(x,Duo),e(x,Cp),e(Cp,qse),e(qse,Guo),e(Cp,Ouo),e(Cp,QI),e(QI,Vuo),e(Cp,Xuo),e(x,zuo),e(x,wp),e(wp,Nse),e(Nse,Wuo),e(wp,Quo),e(wp,HI),e(HI,Huo),e(wp,Uuo),e(x,Juo),e(x,Ap),e(Ap,jse),e(jse,Yuo),e(Ap,Kuo),e(Ap,UI),e(UI,Zuo),e(Ap,e_o),e(x,o_o),e(x,yp),e(yp,Dse),e(Dse,r_o),e(yp,t_o),e(yp,JI),e(JI,a_o),e(yp,n_o),e(x,s_o),e(x,Lp),e(Lp,Gse),e(Gse,l_o),e(Lp,i_o),e(Lp,YI),e(YI,d_o),e(Lp,c_o),e(x,f_o),e(x,xp),e(xp,Ose),e(Ose,m_o),e(xp,g_o),e(xp,KI),e(KI,h_o),e(xp,p_o),e(x,u_o),e(x,$p),e($p,Vse),e(Vse,__o),e($p,b_o),e($p,ZI),e(ZI,v_o),e($p,F_o),e(x,T_o),e(x,kp),e(kp,Xse),e(Xse,M_o),e(kp,E_o),e(kp,eq),e(eq,C_o),e(kp,w_o),e(x,A_o),e(x,Sp),e(Sp,zse),e(zse,y_o),e(Sp,L_o),e(Sp,oq),e(oq,x_o),e(Sp,$_o),e(x,k_o),e(x,Rp),e(Rp,Wse),e(Wse,S_o),e(Rp,R_o),e(Rp,rq),e(rq,P_o),e(Rp,B_o),e(x,I_o),e(x,Pp),e(Pp,Qse),e(Qse,q_o),e(Pp,N_o),e(Pp,tq),e(tq,j_o),e(Pp,D_o),e(x,G_o),e(x,Bp),e(Bp,Hse),e(Hse,O_o),e(Bp,V_o),e(Bp,aq),e(aq,X_o),e(Bp,z_o),e(x,W_o),e(x,Ip),e(Ip,Use),e(Use,Q_o),e(Ip,H_o),e(Ip,nq),e(nq,U_o),e(Ip,J_o),e(x,Y_o),e(x,Ps),e(Ps,Jse),e(Jse,K_o),e(Ps,Z_o),e(Ps,sq),e(sq,e1o),e(Ps,o1o),e(Ps,lq),e(lq,r1o),e(Ps,t1o),e(x,a1o),e(x,qp),e(qp,Yse),e(Yse,n1o),e(qp,s1o),e(qp,iq),e(iq,l1o),e(qp,i1o),e(x,d1o),e(x,Np),e(Np,Kse),e(Kse,c1o),e(Np,f1o),e(Np,dq),e(dq,m1o),e(Np,g1o),e(x,h1o),e(x,jp),e(jp,Zse),e(Zse,p1o),e(jp,u1o),e(jp,cq),e(cq,_1o),e(jp,b1o),e(x,v1o),e(x,Dp),e(Dp,ele),e(ele,F1o),e(Dp,T1o),e(Dp,fq),e(fq,M1o),e(Dp,E1o),e(x,C1o),e(x,Gp),e(Gp,ole),e(ole,w1o),e(Gp,A1o),e(Gp,mq),e(mq,y1o),e(Gp,L1o),e(x,x1o),e(x,Op),e(Op,rle),e(rle,$1o),e(Op,k1o),e(Op,gq),e(gq,S1o),e(Op,R1o),e(x,P1o),e(x,Vp),e(Vp,tle),e(tle,B1o),e(Vp,I1o),e(Vp,hq),e(hq,q1o),e(Vp,N1o),e(x,j1o),e(x,Xp),e(Xp,ale),e(ale,D1o),e(Xp,G1o),e(Xp,pq),e(pq,O1o),e(Xp,V1o),e(x,X1o),e(x,zp),e(zp,nle),e(nle,z1o),e(zp,W1o),e(zp,uq),e(uq,Q1o),e(zp,H1o),e(x,U1o),e(x,Wp),e(Wp,sle),e(sle,J1o),e(Wp,Y1o),e(Wp,_q),e(_q,K1o),e(Wp,Z1o),e(x,e8o),e(x,Qp),e(Qp,lle),e(lle,o8o),e(Qp,r8o),e(Qp,bq),e(bq,t8o),e(Qp,a8o),e(x,n8o),e(x,Hp),e(Hp,ile),e(ile,s8o),e(Hp,l8o),e(Hp,vq),e(vq,i8o),e(Hp,d8o),e(x,c8o),e(x,Up),e(Up,dle),e(dle,f8o),e(Up,m8o),e(Up,Fq),e(Fq,g8o),e(Up,h8o),e(x,p8o),e(x,Jp),e(Jp,cle),e(cle,u8o),e(Jp,_8o),e(Jp,Tq),e(Tq,b8o),e(Jp,v8o),e(x,F8o),e(x,Yp),e(Yp,fle),e(fle,T8o),e(Yp,M8o),e(Yp,Mq),e(Mq,E8o),e(Yp,C8o),e(x,w8o),e(x,Kp),e(Kp,mle),e(mle,A8o),e(Kp,y8o),e(Kp,Eq),e(Eq,L8o),e(Kp,x8o),e(x,$8o),e(x,Zp),e(Zp,gle),e(gle,k8o),e(Zp,S8o),e(Zp,Cq),e(Cq,R8o),e(Zp,P8o),e(x,B8o),e(x,eu),e(eu,hle),e(hle,I8o),e(eu,q8o),e(eu,wq),e(wq,N8o),e(eu,j8o),e(x,D8o),e(x,ou),e(ou,ple),e(ple,G8o),e(ou,O8o),e(ou,Aq),e(Aq,V8o),e(ou,X8o),e(x,z8o),e(x,ru),e(ru,ule),e(ule,W8o),e(ru,Q8o),e(ru,yq),e(yq,H8o),e(ru,U8o),e(x,J8o),e(x,tu),e(tu,_le),e(_le,Y8o),e(tu,K8o),e(tu,Lq),e(Lq,Z8o),e(tu,ebo),e(x,obo),e(x,au),e(au,ble),e(ble,rbo),e(au,tbo),e(au,xq),e(xq,abo),e(au,nbo),e(x,sbo),e(x,nu),e(nu,vle),e(vle,lbo),e(nu,ibo),e(nu,$q),e($q,dbo),e(nu,cbo),e(x,fbo),e(x,su),e(su,Fle),e(Fle,mbo),e(su,gbo),e(su,kq),e(kq,hbo),e(su,pbo),e(x,ubo),e(x,lu),e(lu,Tle),e(Tle,_bo),e(lu,bbo),e(lu,Sq),e(Sq,vbo),e(lu,Fbo),e(x,Tbo),e(x,iu),e(iu,Mle),e(Mle,Mbo),e(iu,Ebo),e(iu,Rq),e(Rq,Cbo),e(iu,wbo),e(x,Abo),e(x,du),e(du,Ele),e(Ele,ybo),e(du,Lbo),e(du,Pq),e(Pq,xbo),e(du,$bo),e(x,kbo),e(x,cu),e(cu,Cle),e(Cle,Sbo),e(cu,Rbo),e(cu,Bq),e(Bq,Pbo),e(cu,Bbo),e(x,Ibo),e(x,fu),e(fu,wle),e(wle,qbo),e(fu,Nbo),e(fu,Iq),e(Iq,jbo),e(fu,Dbo),e(x,Gbo),e(x,mu),e(mu,Ale),e(Ale,Obo),e(mu,Vbo),e(mu,qq),e(qq,Xbo),e(mu,zbo),e(x,Wbo),e(x,gu),e(gu,yle),e(yle,Qbo),e(gu,Hbo),e(gu,Nq),e(Nq,Ubo),e(gu,Jbo),e(x,Ybo),e(x,hu),e(hu,Lle),e(Lle,Kbo),e(hu,Zbo),e(hu,jq),e(jq,e2o),e(hu,o2o),e(x,r2o),e(x,pu),e(pu,xle),e(xle,t2o),e(pu,a2o),e(pu,Dq),e(Dq,n2o),e(pu,s2o),e(x,l2o),e(x,uu),e(uu,$le),e($le,i2o),e(uu,d2o),e(uu,Gq),e(Gq,c2o),e(uu,f2o),e(x,m2o),e(x,_u),e(_u,kle),e(kle,g2o),e(_u,h2o),e(_u,Oq),e(Oq,p2o),e(_u,u2o),e(x,_2o),e(x,bu),e(bu,Sle),e(Sle,b2o),e(bu,v2o),e(bu,Vq),e(Vq,F2o),e(bu,T2o),e(x,M2o),e(x,vu),e(vu,Rle),e(Rle,E2o),e(vu,C2o),e(vu,Xq),e(Xq,w2o),e(vu,A2o),e(x,y2o),e(x,Fu),e(Fu,Ple),e(Ple,L2o),e(Fu,x2o),e(Fu,zq),e(zq,$2o),e(Fu,k2o),e(x,S2o),e(x,Tu),e(Tu,Ble),e(Ble,R2o),e(Tu,P2o),e(Tu,Wq),e(Wq,B2o),e(Tu,I2o),e(x,q2o),e(x,Mu),e(Mu,Ile),e(Ile,N2o),e(Mu,j2o),e(Mu,Qq),e(Qq,D2o),e(Mu,G2o),e(x,O2o),e(x,Eu),e(Eu,qle),e(qle,V2o),e(Eu,X2o),e(Eu,Hq),e(Hq,z2o),e(Eu,W2o),e(x,Q2o),e(x,Cu),e(Cu,Nle),e(Nle,H2o),e(Cu,U2o),e(Cu,Uq),e(Uq,J2o),e(Cu,Y2o),e(x,K2o),e(x,wu),e(wu,jle),e(jle,Z2o),e(wu,evo),e(wu,Jq),e(Jq,ovo),e(wu,rvo),e(x,tvo),e(x,Au),e(Au,Dle),e(Dle,avo),e(Au,nvo),e(Au,Yq),e(Yq,svo),e(Au,lvo),e(x,ivo),e(x,yu),e(yu,Gle),e(Gle,dvo),e(yu,cvo),e(yu,Kq),e(Kq,fvo),e(yu,mvo),e(x,gvo),e(x,Lu),e(Lu,Ole),e(Ole,hvo),e(Lu,pvo),e(Lu,Zq),e(Zq,uvo),e(Lu,_vo),e(x,bvo),e(x,xu),e(xu,Vle),e(Vle,vvo),e(xu,Fvo),e(xu,eN),e(eN,Tvo),e(xu,Mvo),e(x,Evo),e(x,$u),e($u,Xle),e(Xle,Cvo),e($u,wvo),e($u,oN),e(oN,Avo),e($u,yvo),e(x,Lvo),e(x,ku),e(ku,zle),e(zle,xvo),e(ku,$vo),e(ku,rN),e(rN,kvo),e(ku,Svo),e(x,Rvo),e(x,Su),e(Su,Wle),e(Wle,Pvo),e(Su,Bvo),e(Su,tN),e(tN,Ivo),e(Su,qvo),e(x,Nvo),e(x,Ru),e(Ru,Qle),e(Qle,jvo),e(Ru,Dvo),e(Ru,aN),e(aN,Gvo),e(Ru,Ovo),e(x,Vvo),e(x,Pu),e(Pu,Hle),e(Hle,Xvo),e(Pu,zvo),e(Pu,nN),e(nN,Wvo),e(Pu,Qvo),e(x,Hvo),e(x,Bu),e(Bu,Ule),e(Ule,Uvo),e(Bu,Jvo),e(Bu,sN),e(sN,Yvo),e(Bu,Kvo),e(x,Zvo),e(x,Iu),e(Iu,Jle),e(Jle,e3o),e(Iu,o3o),e(Iu,lN),e(lN,r3o),e(Iu,t3o),e(x,a3o),e(x,qu),e(qu,Yle),e(Yle,n3o),e(qu,s3o),e(qu,iN),e(iN,l3o),e(qu,i3o),e(x,d3o),e(x,Nu),e(Nu,Kle),e(Kle,c3o),e(Nu,f3o),e(Nu,dN),e(dN,m3o),e(Nu,g3o),e(x,h3o),e(x,ju),e(ju,Zle),e(Zle,p3o),e(ju,u3o),e(ju,cN),e(cN,_3o),e(ju,b3o),e(x,v3o),e(x,Du),e(Du,eie),e(eie,F3o),e(Du,T3o),e(Du,fN),e(fN,M3o),e(Du,E3o),e(x,C3o),e(x,Gu),e(Gu,oie),e(oie,w3o),e(Gu,A3o),e(Gu,mN),e(mN,y3o),e(Gu,L3o),e(x,x3o),e(x,Ou),e(Ou,rie),e(rie,$3o),e(Ou,k3o),e(Ou,gN),e(gN,S3o),e(Ou,R3o),e(x,P3o),e(x,Vu),e(Vu,tie),e(tie,B3o),e(Vu,I3o),e(Vu,hN),e(hN,q3o),e(Vu,N3o),e(x,j3o),e(x,Xu),e(Xu,aie),e(aie,D3o),e(Xu,G3o),e(Xu,pN),e(pN,O3o),e(Xu,V3o),e(x,X3o),e(x,zu),e(zu,nie),e(nie,z3o),e(zu,W3o),e(zu,uN),e(uN,Q3o),e(zu,H3o),e(x,U3o),e(x,Wu),e(Wu,sie),e(sie,J3o),e(Wu,Y3o),e(Wu,_N),e(_N,K3o),e(Wu,Z3o),e(x,eFo),e(x,Qu),e(Qu,lie),e(lie,oFo),e(Qu,rFo),e(Qu,bN),e(bN,tFo),e(Qu,aFo),e(x,nFo),e(x,Hu),e(Hu,iie),e(iie,sFo),e(Hu,lFo),e(Hu,vN),e(vN,iFo),e(Hu,dFo),e(x,cFo),e(x,Uu),e(Uu,die),e(die,fFo),e(Uu,mFo),e(Uu,FN),e(FN,gFo),e(Uu,hFo),e(x,pFo),e(x,Ju),e(Ju,cie),e(cie,uFo),e(Ju,_Fo),e(Ju,TN),e(TN,bFo),e(Ju,vFo),e(Je,FFo),e(Je,Yu),e(Yu,TFo),e(Yu,fie),e(fie,MFo),e(Yu,EFo),e(Yu,mie),e(mie,CFo),e(Je,wFo),M(Ku,Je,null),b(f,dNe,_),b(f,Li,_),e(Li,Zu),e(Zu,gie),M(t6,gie,null),e(Li,AFo),e(Li,hie),e(hie,yFo),b(f,cNe,_),b(f,xo,_),M(a6,xo,null),e(xo,LFo),e(xo,xi),e(xi,xFo),e(xi,MN),e(MN,$Fo),e(xi,kFo),e(xi,EN),e(EN,SFo),e(xi,RFo),e(xo,PFo),e(xo,n6),e(n6,BFo),e(n6,pie),e(pie,IFo),e(n6,qFo),e(xo,NFo),e(xo,at),M(s6,at,null),e(at,jFo),e(at,uie),e(uie,DFo),e(at,GFo),e(at,$i),e($i,OFo),e($i,_ie),e(_ie,VFo),e($i,XFo),e($i,CN),e(CN,zFo),e($i,WFo),e(at,QFo),M(e_,at,null),e(xo,HFo),e(xo,Ye),M(l6,Ye,null),e(Ye,UFo),e(Ye,bie),e(bie,JFo),e(Ye,YFo),e(Ye,xa),e(xa,KFo),e(xa,vie),e(vie,ZFo),e(xa,eTo),e(xa,Fie),e(Fie,oTo),e(xa,rTo),e(xa,Tie),e(Tie,tTo),e(xa,aTo),e(Ye,nTo),e(Ye,G),e(G,o_),e(o_,Mie),e(Mie,sTo),e(o_,lTo),e(o_,wN),e(wN,iTo),e(o_,dTo),e(G,cTo),e(G,r_),e(r_,Eie),e(Eie,fTo),e(r_,mTo),e(r_,AN),e(AN,gTo),e(r_,hTo),e(G,pTo),e(G,t_),e(t_,Cie),e(Cie,uTo),e(t_,_To),e(t_,yN),e(yN,bTo),e(t_,vTo),e(G,FTo),e(G,a_),e(a_,wie),e(wie,TTo),e(a_,MTo),e(a_,LN),e(LN,ETo),e(a_,CTo),e(G,wTo),e(G,n_),e(n_,Aie),e(Aie,ATo),e(n_,yTo),e(n_,xN),e(xN,LTo),e(n_,xTo),e(G,$To),e(G,s_),e(s_,yie),e(yie,kTo),e(s_,STo),e(s_,$N),e($N,RTo),e(s_,PTo),e(G,BTo),e(G,l_),e(l_,Lie),e(Lie,ITo),e(l_,qTo),e(l_,kN),e(kN,NTo),e(l_,jTo),e(G,DTo),e(G,i_),e(i_,xie),e(xie,GTo),e(i_,OTo),e(i_,SN),e(SN,VTo),e(i_,XTo),e(G,zTo),e(G,d_),e(d_,$ie),e($ie,WTo),e(d_,QTo),e(d_,RN),e(RN,HTo),e(d_,UTo),e(G,JTo),e(G,c_),e(c_,kie),e(kie,YTo),e(c_,KTo),e(c_,PN),e(PN,ZTo),e(c_,e7o),e(G,o7o),e(G,f_),e(f_,Sie),e(Sie,r7o),e(f_,t7o),e(f_,BN),e(BN,a7o),e(f_,n7o),e(G,s7o),e(G,m_),e(m_,Rie),e(Rie,l7o),e(m_,i7o),e(m_,IN),e(IN,d7o),e(m_,c7o),e(G,f7o),e(G,g_),e(g_,Pie),e(Pie,m7o),e(g_,g7o),e(g_,qN),e(qN,h7o),e(g_,p7o),e(G,u7o),e(G,h_),e(h_,Bie),e(Bie,_7o),e(h_,b7o),e(h_,NN),e(NN,v7o),e(h_,F7o),e(G,T7o),e(G,p_),e(p_,Iie),e(Iie,M7o),e(p_,E7o),e(p_,jN),e(jN,C7o),e(p_,w7o),e(G,A7o),e(G,u_),e(u_,qie),e(qie,y7o),e(u_,L7o),e(u_,DN),e(DN,x7o),e(u_,$7o),e(G,k7o),e(G,__),e(__,Nie),e(Nie,S7o),e(__,R7o),e(__,GN),e(GN,P7o),e(__,B7o),e(G,I7o),e(G,b_),e(b_,jie),e(jie,q7o),e(b_,N7o),e(b_,ON),e(ON,j7o),e(b_,D7o),e(G,G7o),e(G,v_),e(v_,Die),e(Die,O7o),e(v_,V7o),e(v_,VN),e(VN,X7o),e(v_,z7o),e(G,W7o),e(G,F_),e(F_,Gie),e(Gie,Q7o),e(F_,H7o),e(F_,XN),e(XN,U7o),e(F_,J7o),e(G,Y7o),e(G,T_),e(T_,Oie),e(Oie,K7o),e(T_,Z7o),e(T_,zN),e(zN,eMo),e(T_,oMo),e(G,rMo),e(G,M_),e(M_,Vie),e(Vie,tMo),e(M_,aMo),e(M_,WN),e(WN,nMo),e(M_,sMo),e(G,lMo),e(G,E_),e(E_,Xie),e(Xie,iMo),e(E_,dMo),e(E_,QN),e(QN,cMo),e(E_,fMo),e(G,mMo),e(G,C_),e(C_,zie),e(zie,gMo),e(C_,hMo),e(C_,HN),e(HN,pMo),e(C_,uMo),e(G,_Mo),e(G,w_),e(w_,Wie),e(Wie,bMo),e(w_,vMo),e(w_,UN),e(UN,FMo),e(w_,TMo),e(G,MMo),e(G,A_),e(A_,Qie),e(Qie,EMo),e(A_,CMo),e(A_,JN),e(JN,wMo),e(A_,AMo),e(G,yMo),e(G,y_),e(y_,Hie),e(Hie,LMo),e(y_,xMo),e(y_,YN),e(YN,$Mo),e(y_,kMo),e(G,SMo),e(G,L_),e(L_,Uie),e(Uie,RMo),e(L_,PMo),e(L_,KN),e(KN,BMo),e(L_,IMo),e(G,qMo),e(G,x_),e(x_,Jie),e(Jie,NMo),e(x_,jMo),e(x_,ZN),e(ZN,DMo),e(x_,GMo),e(G,OMo),e(G,$_),e($_,Yie),e(Yie,VMo),e($_,XMo),e($_,ej),e(ej,zMo),e($_,WMo),e(G,QMo),e(G,k_),e(k_,Kie),e(Kie,HMo),e(k_,UMo),e(k_,oj),e(oj,JMo),e(k_,YMo),e(G,KMo),e(G,S_),e(S_,Zie),e(Zie,ZMo),e(S_,e4o),e(S_,rj),e(rj,o4o),e(S_,r4o),e(G,t4o),e(G,R_),e(R_,ede),e(ede,a4o),e(R_,n4o),e(R_,tj),e(tj,s4o),e(R_,l4o),e(G,i4o),e(G,P_),e(P_,ode),e(ode,d4o),e(P_,c4o),e(P_,aj),e(aj,f4o),e(P_,m4o),e(G,g4o),e(G,B_),e(B_,rde),e(rde,h4o),e(B_,p4o),e(B_,nj),e(nj,u4o),e(B_,_4o),e(G,b4o),e(G,I_),e(I_,tde),e(tde,v4o),e(I_,F4o),e(I_,sj),e(sj,T4o),e(I_,M4o),e(G,E4o),e(G,q_),e(q_,ade),e(ade,C4o),e(q_,w4o),e(q_,lj),e(lj,A4o),e(q_,y4o),e(G,L4o),e(G,N_),e(N_,nde),e(nde,x4o),e(N_,$4o),e(N_,ij),e(ij,k4o),e(N_,S4o),e(G,R4o),e(G,j_),e(j_,sde),e(sde,P4o),e(j_,B4o),e(j_,dj),e(dj,I4o),e(j_,q4o),e(G,N4o),e(G,D_),e(D_,lde),e(lde,j4o),e(D_,D4o),e(D_,cj),e(cj,G4o),e(D_,O4o),e(G,V4o),e(G,G_),e(G_,ide),e(ide,X4o),e(G_,z4o),e(G_,fj),e(fj,W4o),e(G_,Q4o),e(G,H4o),e(G,O_),e(O_,dde),e(dde,U4o),e(O_,J4o),e(O_,mj),e(mj,Y4o),e(O_,K4o),e(Ye,Z4o),e(Ye,V_),e(V_,eEo),e(V_,cde),e(cde,oEo),e(V_,rEo),e(V_,fde),e(fde,tEo),e(Ye,aEo),M(X_,Ye,null),b(f,fNe,_),b(f,ki,_),e(ki,z_),e(z_,mde),M(i6,mde,null),e(ki,nEo),e(ki,gde),e(gde,sEo),b(f,mNe,_),b(f,$o,_),M(d6,$o,null),e($o,lEo),e($o,Si),e(Si,iEo),e(Si,gj),e(gj,dEo),e(Si,cEo),e(Si,hj),e(hj,fEo),e(Si,mEo),e($o,gEo),e($o,c6),e(c6,hEo),e(c6,hde),e(hde,pEo),e(c6,uEo),e($o,_Eo),e($o,nt),M(f6,nt,null),e(nt,bEo),e(nt,pde),e(pde,vEo),e(nt,FEo),e(nt,Ri),e(Ri,TEo),e(Ri,ude),e(ude,MEo),e(Ri,EEo),e(Ri,pj),e(pj,CEo),e(Ri,wEo),e(nt,AEo),M(W_,nt,null),e($o,yEo),e($o,Ke),M(m6,Ke,null),e(Ke,LEo),e(Ke,_de),e(_de,xEo),e(Ke,$Eo),e(Ke,$a),e($a,kEo),e($a,bde),e(bde,SEo),e($a,REo),e($a,vde),e(vde,PEo),e($a,BEo),e($a,Fde),e(Fde,IEo),e($a,qEo),e(Ke,NEo),e(Ke,z),e(z,Q_),e(Q_,Tde),e(Tde,jEo),e(Q_,DEo),e(Q_,uj),e(uj,GEo),e(Q_,OEo),e(z,VEo),e(z,H_),e(H_,Mde),e(Mde,XEo),e(H_,zEo),e(H_,_j),e(_j,WEo),e(H_,QEo),e(z,HEo),e(z,U_),e(U_,Ede),e(Ede,UEo),e(U_,JEo),e(U_,bj),e(bj,YEo),e(U_,KEo),e(z,ZEo),e(z,J_),e(J_,Cde),e(Cde,eCo),e(J_,oCo),e(J_,vj),e(vj,rCo),e(J_,tCo),e(z,aCo),e(z,Y_),e(Y_,wde),e(wde,nCo),e(Y_,sCo),e(Y_,Fj),e(Fj,lCo),e(Y_,iCo),e(z,dCo),e(z,K_),e(K_,Ade),e(Ade,cCo),e(K_,fCo),e(K_,Tj),e(Tj,mCo),e(K_,gCo),e(z,hCo),e(z,Z_),e(Z_,yde),e(yde,pCo),e(Z_,uCo),e(Z_,Mj),e(Mj,_Co),e(Z_,bCo),e(z,vCo),e(z,e1),e(e1,Lde),e(Lde,FCo),e(e1,TCo),e(e1,Ej),e(Ej,MCo),e(e1,ECo),e(z,CCo),e(z,o1),e(o1,xde),e(xde,wCo),e(o1,ACo),e(o1,Cj),e(Cj,yCo),e(o1,LCo),e(z,xCo),e(z,r1),e(r1,$de),e($de,$Co),e(r1,kCo),e(r1,wj),e(wj,SCo),e(r1,RCo),e(z,PCo),e(z,t1),e(t1,kde),e(kde,BCo),e(t1,ICo),e(t1,Aj),e(Aj,qCo),e(t1,NCo),e(z,jCo),e(z,a1),e(a1,Sde),e(Sde,DCo),e(a1,GCo),e(a1,yj),e(yj,OCo),e(a1,VCo),e(z,XCo),e(z,n1),e(n1,Rde),e(Rde,zCo),e(n1,WCo),e(n1,Lj),e(Lj,QCo),e(n1,HCo),e(z,UCo),e(z,s1),e(s1,Pde),e(Pde,JCo),e(s1,YCo),e(s1,xj),e(xj,KCo),e(s1,ZCo),e(z,e5o),e(z,l1),e(l1,Bde),e(Bde,o5o),e(l1,r5o),e(l1,$j),e($j,t5o),e(l1,a5o),e(z,n5o),e(z,i1),e(i1,Ide),e(Ide,s5o),e(i1,l5o),e(i1,kj),e(kj,i5o),e(i1,d5o),e(z,c5o),e(z,d1),e(d1,qde),e(qde,f5o),e(d1,m5o),e(d1,Sj),e(Sj,g5o),e(d1,h5o),e(z,p5o),e(z,c1),e(c1,Nde),e(Nde,u5o),e(c1,_5o),e(c1,Rj),e(Rj,b5o),e(c1,v5o),e(z,F5o),e(z,f1),e(f1,jde),e(jde,T5o),e(f1,M5o),e(f1,Pj),e(Pj,E5o),e(f1,C5o),e(z,w5o),e(z,m1),e(m1,Dde),e(Dde,A5o),e(m1,y5o),e(m1,Bj),e(Bj,L5o),e(m1,x5o),e(z,$5o),e(z,g1),e(g1,Gde),e(Gde,k5o),e(g1,S5o),e(g1,Ij),e(Ij,R5o),e(g1,P5o),e(z,B5o),e(z,h1),e(h1,Ode),e(Ode,I5o),e(h1,q5o),e(h1,qj),e(qj,N5o),e(h1,j5o),e(z,D5o),e(z,p1),e(p1,Vde),e(Vde,G5o),e(p1,O5o),e(p1,Nj),e(Nj,V5o),e(p1,X5o),e(z,z5o),e(z,u1),e(u1,Xde),e(Xde,W5o),e(u1,Q5o),e(u1,jj),e(jj,H5o),e(u1,U5o),e(z,J5o),e(z,_1),e(_1,zde),e(zde,Y5o),e(_1,K5o),e(_1,Dj),e(Dj,Z5o),e(_1,ewo),e(z,owo),e(z,b1),e(b1,Wde),e(Wde,rwo),e(b1,two),e(b1,Gj),e(Gj,awo),e(b1,nwo),e(z,swo),e(z,v1),e(v1,Qde),e(Qde,lwo),e(v1,iwo),e(v1,Oj),e(Oj,dwo),e(v1,cwo),e(z,fwo),e(z,F1),e(F1,Hde),e(Hde,mwo),e(F1,gwo),e(F1,Vj),e(Vj,hwo),e(F1,pwo),e(z,uwo),e(z,T1),e(T1,Ude),e(Ude,_wo),e(T1,bwo),e(T1,Xj),e(Xj,vwo),e(T1,Fwo),e(z,Two),e(z,M1),e(M1,Jde),e(Jde,Mwo),e(M1,Ewo),e(M1,zj),e(zj,Cwo),e(M1,wwo),e(z,Awo),e(z,E1),e(E1,Yde),e(Yde,ywo),e(E1,Lwo),e(E1,Wj),e(Wj,xwo),e(E1,$wo),e(z,kwo),e(z,C1),e(C1,Kde),e(Kde,Swo),e(C1,Rwo),e(C1,Qj),e(Qj,Pwo),e(C1,Bwo),e(z,Iwo),e(z,w1),e(w1,Zde),e(Zde,qwo),e(w1,Nwo),e(w1,Hj),e(Hj,jwo),e(w1,Dwo),e(z,Gwo),e(z,A1),e(A1,ece),e(ece,Owo),e(A1,Vwo),e(A1,Uj),e(Uj,Xwo),e(A1,zwo),e(z,Wwo),e(z,y1),e(y1,oce),e(oce,Qwo),e(y1,Hwo),e(y1,Jj),e(Jj,Uwo),e(y1,Jwo),e(z,Ywo),e(z,L1),e(L1,rce),e(rce,Kwo),e(L1,Zwo),e(L1,Yj),e(Yj,e0o),e(L1,o0o),e(Ke,r0o),e(Ke,x1),e(x1,t0o),e(x1,tce),e(tce,a0o),e(x1,n0o),e(x1,ace),e(ace,s0o),e(Ke,l0o),M($1,Ke,null),b(f,gNe,_),b(f,Pi,_),e(Pi,k1),e(k1,nce),M(g6,nce,null),e(Pi,i0o),e(Pi,sce),e(sce,d0o),b(f,hNe,_),b(f,ko,_),M(h6,ko,null),e(ko,c0o),e(ko,Bi),e(Bi,f0o),e(Bi,Kj),e(Kj,m0o),e(Bi,g0o),e(Bi,Zj),e(Zj,h0o),e(Bi,p0o),e(ko,u0o),e(ko,p6),e(p6,_0o),e(p6,lce),e(lce,b0o),e(p6,v0o),e(ko,F0o),e(ko,st),M(u6,st,null),e(st,T0o),e(st,ice),e(ice,M0o),e(st,E0o),e(st,Ii),e(Ii,C0o),e(Ii,dce),e(dce,w0o),e(Ii,A0o),e(Ii,eD),e(eD,y0o),e(Ii,L0o),e(st,x0o),M(S1,st,null),e(ko,$0o),e(ko,Ze),M(_6,Ze,null),e(Ze,k0o),e(Ze,cce),e(cce,S0o),e(Ze,R0o),e(Ze,ka),e(ka,P0o),e(ka,fce),e(fce,B0o),e(ka,I0o),e(ka,mce),e(mce,q0o),e(ka,N0o),e(ka,gce),e(gce,j0o),e(ka,D0o),e(Ze,G0o),e(Ze,W),e(W,R1),e(R1,hce),e(hce,O0o),e(R1,V0o),e(R1,oD),e(oD,X0o),e(R1,z0o),e(W,W0o),e(W,P1),e(P1,pce),e(pce,Q0o),e(P1,H0o),e(P1,rD),e(rD,U0o),e(P1,J0o),e(W,Y0o),e(W,B1),e(B1,uce),e(uce,K0o),e(B1,Z0o),e(B1,tD),e(tD,eAo),e(B1,oAo),e(W,rAo),e(W,I1),e(I1,_ce),e(_ce,tAo),e(I1,aAo),e(I1,aD),e(aD,nAo),e(I1,sAo),e(W,lAo),e(W,q1),e(q1,bce),e(bce,iAo),e(q1,dAo),e(q1,nD),e(nD,cAo),e(q1,fAo),e(W,mAo),e(W,N1),e(N1,vce),e(vce,gAo),e(N1,hAo),e(N1,sD),e(sD,pAo),e(N1,uAo),e(W,_Ao),e(W,j1),e(j1,Fce),e(Fce,bAo),e(j1,vAo),e(j1,lD),e(lD,FAo),e(j1,TAo),e(W,MAo),e(W,D1),e(D1,Tce),e(Tce,EAo),e(D1,CAo),e(D1,iD),e(iD,wAo),e(D1,AAo),e(W,yAo),e(W,G1),e(G1,Mce),e(Mce,LAo),e(G1,xAo),e(G1,dD),e(dD,$Ao),e(G1,kAo),e(W,SAo),e(W,O1),e(O1,Ece),e(Ece,RAo),e(O1,PAo),e(O1,cD),e(cD,BAo),e(O1,IAo),e(W,qAo),e(W,V1),e(V1,Cce),e(Cce,NAo),e(V1,jAo),e(V1,fD),e(fD,DAo),e(V1,GAo),e(W,OAo),e(W,X1),e(X1,wce),e(wce,VAo),e(X1,XAo),e(X1,mD),e(mD,zAo),e(X1,WAo),e(W,QAo),e(W,z1),e(z1,Ace),e(Ace,HAo),e(z1,UAo),e(z1,gD),e(gD,JAo),e(z1,YAo),e(W,KAo),e(W,W1),e(W1,yce),e(yce,ZAo),e(W1,e6o),e(W1,hD),e(hD,o6o),e(W1,r6o),e(W,t6o),e(W,Q1),e(Q1,Lce),e(Lce,a6o),e(Q1,n6o),e(Q1,pD),e(pD,s6o),e(Q1,l6o),e(W,i6o),e(W,H1),e(H1,xce),e(xce,d6o),e(H1,c6o),e(H1,uD),e(uD,f6o),e(H1,m6o),e(W,g6o),e(W,U1),e(U1,$ce),e($ce,h6o),e(U1,p6o),e(U1,_D),e(_D,u6o),e(U1,_6o),e(W,b6o),e(W,J1),e(J1,kce),e(kce,v6o),e(J1,F6o),e(J1,bD),e(bD,T6o),e(J1,M6o),e(W,E6o),e(W,Y1),e(Y1,Sce),e(Sce,C6o),e(Y1,w6o),e(Y1,vD),e(vD,A6o),e(Y1,y6o),e(W,L6o),e(W,K1),e(K1,Rce),e(Rce,x6o),e(K1,$6o),e(K1,FD),e(FD,k6o),e(K1,S6o),e(W,R6o),e(W,Z1),e(Z1,Pce),e(Pce,P6o),e(Z1,B6o),e(Z1,TD),e(TD,I6o),e(Z1,q6o),e(W,N6o),e(W,e8),e(e8,Bce),e(Bce,j6o),e(e8,D6o),e(e8,MD),e(MD,G6o),e(e8,O6o),e(W,V6o),e(W,o8),e(o8,Ice),e(Ice,X6o),e(o8,z6o),e(o8,ED),e(ED,W6o),e(o8,Q6o),e(W,H6o),e(W,r8),e(r8,qce),e(qce,U6o),e(r8,J6o),e(r8,CD),e(CD,Y6o),e(r8,K6o),e(W,Z6o),e(W,t8),e(t8,Nce),e(Nce,eyo),e(t8,oyo),e(t8,wD),e(wD,ryo),e(t8,tyo),e(W,ayo),e(W,a8),e(a8,jce),e(jce,nyo),e(a8,syo),e(a8,AD),e(AD,lyo),e(a8,iyo),e(W,dyo),e(W,n8),e(n8,Dce),e(Dce,cyo),e(n8,fyo),e(n8,yD),e(yD,myo),e(n8,gyo),e(W,hyo),e(W,s8),e(s8,Gce),e(Gce,pyo),e(s8,uyo),e(s8,LD),e(LD,_yo),e(s8,byo),e(W,vyo),e(W,l8),e(l8,Oce),e(Oce,Fyo),e(l8,Tyo),e(l8,xD),e(xD,Myo),e(l8,Eyo),e(W,Cyo),e(W,i8),e(i8,Vce),e(Vce,wyo),e(i8,Ayo),e(i8,$D),e($D,yyo),e(i8,Lyo),e(W,xyo),e(W,d8),e(d8,Xce),e(Xce,$yo),e(d8,kyo),e(d8,zce),e(zce,Syo),e(d8,Ryo),e(W,Pyo),e(W,c8),e(c8,Wce),e(Wce,Byo),e(c8,Iyo),e(c8,kD),e(kD,qyo),e(c8,Nyo),e(W,jyo),e(W,f8),e(f8,Qce),e(Qce,Dyo),e(f8,Gyo),e(f8,SD),e(SD,Oyo),e(f8,Vyo),e(W,Xyo),e(W,m8),e(m8,Hce),e(Hce,zyo),e(m8,Wyo),e(m8,RD),e(RD,Qyo),e(m8,Hyo),e(W,Uyo),e(W,g8),e(g8,Uce),e(Uce,Jyo),e(g8,Yyo),e(g8,PD),e(PD,Kyo),e(g8,Zyo),e(Ze,eLo),e(Ze,h8),e(h8,oLo),e(h8,Jce),e(Jce,rLo),e(h8,tLo),e(h8,Yce),e(Yce,aLo),e(Ze,nLo),M(p8,Ze,null),b(f,pNe,_),b(f,qi,_),e(qi,u8),e(u8,Kce),M(b6,Kce,null),e(qi,sLo),e(qi,Zce),e(Zce,lLo),b(f,uNe,_),b(f,So,_),M(v6,So,null),e(So,iLo),e(So,Ni),e(Ni,dLo),e(Ni,BD),e(BD,cLo),e(Ni,fLo),e(Ni,ID),e(ID,mLo),e(Ni,gLo),e(So,hLo),e(So,F6),e(F6,pLo),e(F6,efe),e(efe,uLo),e(F6,_Lo),e(So,bLo),e(So,lt),M(T6,lt,null),e(lt,vLo),e(lt,ofe),e(ofe,FLo),e(lt,TLo),e(lt,ji),e(ji,MLo),e(ji,rfe),e(rfe,ELo),e(ji,CLo),e(ji,qD),e(qD,wLo),e(ji,ALo),e(lt,yLo),M(_8,lt,null),e(So,LLo),e(So,eo),M(M6,eo,null),e(eo,xLo),e(eo,tfe),e(tfe,$Lo),e(eo,kLo),e(eo,Sa),e(Sa,SLo),e(Sa,afe),e(afe,RLo),e(Sa,PLo),e(Sa,nfe),e(nfe,BLo),e(Sa,ILo),e(Sa,sfe),e(sfe,qLo),e(Sa,NLo),e(eo,jLo),e(eo,ue),e(ue,b8),e(b8,lfe),e(lfe,DLo),e(b8,GLo),e(b8,ND),e(ND,OLo),e(b8,VLo),e(ue,XLo),e(ue,v8),e(v8,ife),e(ife,zLo),e(v8,WLo),e(v8,jD),e(jD,QLo),e(v8,HLo),e(ue,ULo),e(ue,F8),e(F8,dfe),e(dfe,JLo),e(F8,YLo),e(F8,DD),e(DD,KLo),e(F8,ZLo),e(ue,e9o),e(ue,T8),e(T8,cfe),e(cfe,o9o),e(T8,r9o),e(T8,GD),e(GD,t9o),e(T8,a9o),e(ue,n9o),e(ue,M8),e(M8,ffe),e(ffe,s9o),e(M8,l9o),e(M8,OD),e(OD,i9o),e(M8,d9o),e(ue,c9o),e(ue,E8),e(E8,mfe),e(mfe,f9o),e(E8,m9o),e(E8,VD),e(VD,g9o),e(E8,h9o),e(ue,p9o),e(ue,C8),e(C8,gfe),e(gfe,u9o),e(C8,_9o),e(C8,XD),e(XD,b9o),e(C8,v9o),e(ue,F9o),e(ue,w8),e(w8,hfe),e(hfe,T9o),e(w8,M9o),e(w8,zD),e(zD,E9o),e(w8,C9o),e(ue,w9o),e(ue,A8),e(A8,pfe),e(pfe,A9o),e(A8,y9o),e(A8,WD),e(WD,L9o),e(A8,x9o),e(ue,$9o),e(ue,y8),e(y8,ufe),e(ufe,k9o),e(y8,S9o),e(y8,QD),e(QD,R9o),e(y8,P9o),e(ue,B9o),e(ue,L8),e(L8,_fe),e(_fe,I9o),e(L8,q9o),e(L8,HD),e(HD,N9o),e(L8,j9o),e(ue,D9o),e(ue,x8),e(x8,bfe),e(bfe,G9o),e(x8,O9o),e(x8,UD),e(UD,V9o),e(x8,X9o),e(ue,z9o),e(ue,$8),e($8,vfe),e(vfe,W9o),e($8,Q9o),e($8,JD),e(JD,H9o),e($8,U9o),e(ue,J9o),e(ue,k8),e(k8,Ffe),e(Ffe,Y9o),e(k8,K9o),e(k8,YD),e(YD,Z9o),e(k8,exo),e(ue,oxo),e(ue,S8),e(S8,Tfe),e(Tfe,rxo),e(S8,txo),e(S8,KD),e(KD,axo),e(S8,nxo),e(ue,sxo),e(ue,R8),e(R8,Mfe),e(Mfe,lxo),e(R8,ixo),e(R8,ZD),e(ZD,dxo),e(R8,cxo),e(eo,fxo),e(eo,P8),e(P8,mxo),e(P8,Efe),e(Efe,gxo),e(P8,hxo),e(P8,Cfe),e(Cfe,pxo),e(eo,uxo),M(B8,eo,null),b(f,_Ne,_),b(f,Di,_),e(Di,I8),e(I8,wfe),M(E6,wfe,null),e(Di,_xo),e(Di,Afe),e(Afe,bxo),b(f,bNe,_),b(f,Ro,_),M(C6,Ro,null),e(Ro,vxo),e(Ro,Gi),e(Gi,Fxo),e(Gi,eG),e(eG,Txo),e(Gi,Mxo),e(Gi,oG),e(oG,Exo),e(Gi,Cxo),e(Ro,wxo),e(Ro,w6),e(w6,Axo),e(w6,yfe),e(yfe,yxo),e(w6,Lxo),e(Ro,xxo),e(Ro,it),M(A6,it,null),e(it,$xo),e(it,Lfe),e(Lfe,kxo),e(it,Sxo),e(it,Oi),e(Oi,Rxo),e(Oi,xfe),e(xfe,Pxo),e(Oi,Bxo),e(Oi,rG),e(rG,Ixo),e(Oi,qxo),e(it,Nxo),M(q8,it,null),e(Ro,jxo),e(Ro,oo),M(y6,oo,null),e(oo,Dxo),e(oo,$fe),e($fe,Gxo),e(oo,Oxo),e(oo,Ra),e(Ra,Vxo),e(Ra,kfe),e(kfe,Xxo),e(Ra,zxo),e(Ra,Sfe),e(Sfe,Wxo),e(Ra,Qxo),e(Ra,Rfe),e(Rfe,Hxo),e(Ra,Uxo),e(oo,Jxo),e(oo,q),e(q,N8),e(N8,Pfe),e(Pfe,Yxo),e(N8,Kxo),e(N8,tG),e(tG,Zxo),e(N8,e$o),e(q,o$o),e(q,j8),e(j8,Bfe),e(Bfe,r$o),e(j8,t$o),e(j8,aG),e(aG,a$o),e(j8,n$o),e(q,s$o),e(q,D8),e(D8,Ife),e(Ife,l$o),e(D8,i$o),e(D8,nG),e(nG,d$o),e(D8,c$o),e(q,f$o),e(q,G8),e(G8,qfe),e(qfe,m$o),e(G8,g$o),e(G8,sG),e(sG,h$o),e(G8,p$o),e(q,u$o),e(q,O8),e(O8,Nfe),e(Nfe,_$o),e(O8,b$o),e(O8,lG),e(lG,v$o),e(O8,F$o),e(q,T$o),e(q,V8),e(V8,jfe),e(jfe,M$o),e(V8,E$o),e(V8,iG),e(iG,C$o),e(V8,w$o),e(q,A$o),e(q,X8),e(X8,Dfe),e(Dfe,y$o),e(X8,L$o),e(X8,dG),e(dG,x$o),e(X8,$$o),e(q,k$o),e(q,z8),e(z8,Gfe),e(Gfe,S$o),e(z8,R$o),e(z8,cG),e(cG,P$o),e(z8,B$o),e(q,I$o),e(q,W8),e(W8,Ofe),e(Ofe,q$o),e(W8,N$o),e(W8,fG),e(fG,j$o),e(W8,D$o),e(q,G$o),e(q,Q8),e(Q8,Vfe),e(Vfe,O$o),e(Q8,V$o),e(Q8,mG),e(mG,X$o),e(Q8,z$o),e(q,W$o),e(q,H8),e(H8,Xfe),e(Xfe,Q$o),e(H8,H$o),e(H8,gG),e(gG,U$o),e(H8,J$o),e(q,Y$o),e(q,U8),e(U8,zfe),e(zfe,K$o),e(U8,Z$o),e(U8,hG),e(hG,eko),e(U8,oko),e(q,rko),e(q,J8),e(J8,Wfe),e(Wfe,tko),e(J8,ako),e(J8,pG),e(pG,nko),e(J8,sko),e(q,lko),e(q,Y8),e(Y8,Qfe),e(Qfe,iko),e(Y8,dko),e(Y8,uG),e(uG,cko),e(Y8,fko),e(q,mko),e(q,K8),e(K8,Hfe),e(Hfe,gko),e(K8,hko),e(K8,_G),e(_G,pko),e(K8,uko),e(q,_ko),e(q,Z8),e(Z8,Ufe),e(Ufe,bko),e(Z8,vko),e(Z8,bG),e(bG,Fko),e(Z8,Tko),e(q,Mko),e(q,eb),e(eb,Jfe),e(Jfe,Eko),e(eb,Cko),e(eb,vG),e(vG,wko),e(eb,Ako),e(q,yko),e(q,ob),e(ob,Yfe),e(Yfe,Lko),e(ob,xko),e(ob,FG),e(FG,$ko),e(ob,kko),e(q,Sko),e(q,rb),e(rb,Kfe),e(Kfe,Rko),e(rb,Pko),e(rb,TG),e(TG,Bko),e(rb,Iko),e(q,qko),e(q,tb),e(tb,Zfe),e(Zfe,Nko),e(tb,jko),e(tb,MG),e(MG,Dko),e(tb,Gko),e(q,Oko),e(q,ab),e(ab,eme),e(eme,Vko),e(ab,Xko),e(ab,EG),e(EG,zko),e(ab,Wko),e(q,Qko),e(q,nb),e(nb,ome),e(ome,Hko),e(nb,Uko),e(nb,CG),e(CG,Jko),e(nb,Yko),e(q,Kko),e(q,sb),e(sb,rme),e(rme,Zko),e(sb,eSo),e(sb,wG),e(wG,oSo),e(sb,rSo),e(q,tSo),e(q,lb),e(lb,tme),e(tme,aSo),e(lb,nSo),e(lb,AG),e(AG,sSo),e(lb,lSo),e(q,iSo),e(q,ib),e(ib,ame),e(ame,dSo),e(ib,cSo),e(ib,yG),e(yG,fSo),e(ib,mSo),e(q,gSo),e(q,db),e(db,nme),e(nme,hSo),e(db,pSo),e(db,LG),e(LG,uSo),e(db,_So),e(q,bSo),e(q,cb),e(cb,sme),e(sme,vSo),e(cb,FSo),e(cb,xG),e(xG,TSo),e(cb,MSo),e(q,ESo),e(q,fb),e(fb,lme),e(lme,CSo),e(fb,wSo),e(fb,$G),e($G,ASo),e(fb,ySo),e(q,LSo),e(q,mb),e(mb,ime),e(ime,xSo),e(mb,$So),e(mb,kG),e(kG,kSo),e(mb,SSo),e(q,RSo),e(q,gb),e(gb,dme),e(dme,PSo),e(gb,BSo),e(gb,SG),e(SG,ISo),e(gb,qSo),e(q,NSo),e(q,hb),e(hb,cme),e(cme,jSo),e(hb,DSo),e(hb,RG),e(RG,GSo),e(hb,OSo),e(q,VSo),e(q,pb),e(pb,fme),e(fme,XSo),e(pb,zSo),e(pb,PG),e(PG,WSo),e(pb,QSo),e(q,HSo),e(q,ub),e(ub,mme),e(mme,USo),e(ub,JSo),e(ub,BG),e(BG,YSo),e(ub,KSo),e(q,ZSo),e(q,_b),e(_b,gme),e(gme,eRo),e(_b,oRo),e(_b,IG),e(IG,rRo),e(_b,tRo),e(q,aRo),e(q,bb),e(bb,hme),e(hme,nRo),e(bb,sRo),e(bb,qG),e(qG,lRo),e(bb,iRo),e(q,dRo),e(q,vb),e(vb,pme),e(pme,cRo),e(vb,fRo),e(vb,NG),e(NG,mRo),e(vb,gRo),e(q,hRo),e(q,Fb),e(Fb,ume),e(ume,pRo),e(Fb,uRo),e(Fb,jG),e(jG,_Ro),e(Fb,bRo),e(q,vRo),e(q,Tb),e(Tb,_me),e(_me,FRo),e(Tb,TRo),e(Tb,DG),e(DG,MRo),e(Tb,ERo),e(q,CRo),e(q,Mb),e(Mb,bme),e(bme,wRo),e(Mb,ARo),e(Mb,GG),e(GG,yRo),e(Mb,LRo),e(q,xRo),e(q,Eb),e(Eb,vme),e(vme,$Ro),e(Eb,kRo),e(Eb,OG),e(OG,SRo),e(Eb,RRo),e(q,PRo),e(q,Cb),e(Cb,Fme),e(Fme,BRo),e(Cb,IRo),e(Cb,VG),e(VG,qRo),e(Cb,NRo),e(q,jRo),e(q,wb),e(wb,Tme),e(Tme,DRo),e(wb,GRo),e(wb,XG),e(XG,ORo),e(wb,VRo),e(q,XRo),e(q,Ab),e(Ab,Mme),e(Mme,zRo),e(Ab,WRo),e(Ab,zG),e(zG,QRo),e(Ab,HRo),e(q,URo),e(q,yb),e(yb,Eme),e(Eme,JRo),e(yb,YRo),e(yb,WG),e(WG,KRo),e(yb,ZRo),e(q,ePo),e(q,Lb),e(Lb,Cme),e(Cme,oPo),e(Lb,rPo),e(Lb,QG),e(QG,tPo),e(Lb,aPo),e(q,nPo),e(q,xb),e(xb,wme),e(wme,sPo),e(xb,lPo),e(xb,HG),e(HG,iPo),e(xb,dPo),e(q,cPo),e(q,$b),e($b,Ame),e(Ame,fPo),e($b,mPo),e($b,UG),e(UG,gPo),e($b,hPo),e(oo,pPo),e(oo,kb),e(kb,uPo),e(kb,yme),e(yme,_Po),e(kb,bPo),e(kb,Lme),e(Lme,vPo),e(oo,FPo),M(Sb,oo,null),b(f,vNe,_),b(f,Vi,_),e(Vi,Rb),e(Rb,xme),M(L6,xme,null),e(Vi,TPo),e(Vi,$me),e($me,MPo),b(f,FNe,_),b(f,Po,_),M(x6,Po,null),e(Po,EPo),e(Po,Xi),e(Xi,CPo),e(Xi,JG),e(JG,wPo),e(Xi,APo),e(Xi,YG),e(YG,yPo),e(Xi,LPo),e(Po,xPo),e(Po,$6),e($6,$Po),e($6,kme),e(kme,kPo),e($6,SPo),e(Po,RPo),e(Po,dt),M(k6,dt,null),e(dt,PPo),e(dt,Sme),e(Sme,BPo),e(dt,IPo),e(dt,zi),e(zi,qPo),e(zi,Rme),e(Rme,NPo),e(zi,jPo),e(zi,KG),e(KG,DPo),e(zi,GPo),e(dt,OPo),M(Pb,dt,null),e(Po,VPo),e(Po,ro),M(S6,ro,null),e(ro,XPo),e(ro,Pme),e(Pme,zPo),e(ro,WPo),e(ro,Pa),e(Pa,QPo),e(Pa,Bme),e(Bme,HPo),e(Pa,UPo),e(Pa,Ime),e(Ime,JPo),e(Pa,YPo),e(Pa,qme),e(qme,KPo),e(Pa,ZPo),e(ro,eBo),e(ro,Y),e(Y,Bb),e(Bb,Nme),e(Nme,oBo),e(Bb,rBo),e(Bb,ZG),e(ZG,tBo),e(Bb,aBo),e(Y,nBo),e(Y,Ib),e(Ib,jme),e(jme,sBo),e(Ib,lBo),e(Ib,eO),e(eO,iBo),e(Ib,dBo),e(Y,cBo),e(Y,qb),e(qb,Dme),e(Dme,fBo),e(qb,mBo),e(qb,oO),e(oO,gBo),e(qb,hBo),e(Y,pBo),e(Y,Nb),e(Nb,Gme),e(Gme,uBo),e(Nb,_Bo),e(Nb,rO),e(rO,bBo),e(Nb,vBo),e(Y,FBo),e(Y,jb),e(jb,Ome),e(Ome,TBo),e(jb,MBo),e(jb,tO),e(tO,EBo),e(jb,CBo),e(Y,wBo),e(Y,Db),e(Db,Vme),e(Vme,ABo),e(Db,yBo),e(Db,aO),e(aO,LBo),e(Db,xBo),e(Y,$Bo),e(Y,Gb),e(Gb,Xme),e(Xme,kBo),e(Gb,SBo),e(Gb,nO),e(nO,RBo),e(Gb,PBo),e(Y,BBo),e(Y,Ob),e(Ob,zme),e(zme,IBo),e(Ob,qBo),e(Ob,sO),e(sO,NBo),e(Ob,jBo),e(Y,DBo),e(Y,Vb),e(Vb,Wme),e(Wme,GBo),e(Vb,OBo),e(Vb,lO),e(lO,VBo),e(Vb,XBo),e(Y,zBo),e(Y,Xb),e(Xb,Qme),e(Qme,WBo),e(Xb,QBo),e(Xb,iO),e(iO,HBo),e(Xb,UBo),e(Y,JBo),e(Y,zb),e(zb,Hme),e(Hme,YBo),e(zb,KBo),e(zb,dO),e(dO,ZBo),e(zb,eIo),e(Y,oIo),e(Y,Wb),e(Wb,Ume),e(Ume,rIo),e(Wb,tIo),e(Wb,cO),e(cO,aIo),e(Wb,nIo),e(Y,sIo),e(Y,Qb),e(Qb,Jme),e(Jme,lIo),e(Qb,iIo),e(Qb,fO),e(fO,dIo),e(Qb,cIo),e(Y,fIo),e(Y,Hb),e(Hb,Yme),e(Yme,mIo),e(Hb,gIo),e(Hb,mO),e(mO,hIo),e(Hb,pIo),e(Y,uIo),e(Y,Ub),e(Ub,Kme),e(Kme,_Io),e(Ub,bIo),e(Ub,gO),e(gO,vIo),e(Ub,FIo),e(Y,TIo),e(Y,Jb),e(Jb,Zme),e(Zme,MIo),e(Jb,EIo),e(Jb,hO),e(hO,CIo),e(Jb,wIo),e(Y,AIo),e(Y,Yb),e(Yb,ege),e(ege,yIo),e(Yb,LIo),e(Yb,pO),e(pO,xIo),e(Yb,$Io),e(Y,kIo),e(Y,Kb),e(Kb,oge),e(oge,SIo),e(Kb,RIo),e(Kb,uO),e(uO,PIo),e(Kb,BIo),e(Y,IIo),e(Y,Zb),e(Zb,rge),e(rge,qIo),e(Zb,NIo),e(Zb,_O),e(_O,jIo),e(Zb,DIo),e(Y,GIo),e(Y,e2),e(e2,tge),e(tge,OIo),e(e2,VIo),e(e2,bO),e(bO,XIo),e(e2,zIo),e(Y,WIo),e(Y,o2),e(o2,age),e(age,QIo),e(o2,HIo),e(o2,vO),e(vO,UIo),e(o2,JIo),e(Y,YIo),e(Y,r2),e(r2,nge),e(nge,KIo),e(r2,ZIo),e(r2,FO),e(FO,eqo),e(r2,oqo),e(Y,rqo),e(Y,t2),e(t2,sge),e(sge,tqo),e(t2,aqo),e(t2,TO),e(TO,nqo),e(t2,sqo),e(Y,lqo),e(Y,a2),e(a2,lge),e(lge,iqo),e(a2,dqo),e(a2,MO),e(MO,cqo),e(a2,fqo),e(Y,mqo),e(Y,n2),e(n2,ige),e(ige,gqo),e(n2,hqo),e(n2,EO),e(EO,pqo),e(n2,uqo),e(Y,_qo),e(Y,s2),e(s2,dge),e(dge,bqo),e(s2,vqo),e(s2,CO),e(CO,Fqo),e(s2,Tqo),e(Y,Mqo),e(Y,l2),e(l2,cge),e(cge,Eqo),e(l2,Cqo),e(l2,wO),e(wO,wqo),e(l2,Aqo),e(Y,yqo),e(Y,i2),e(i2,fge),e(fge,Lqo),e(i2,xqo),e(i2,AO),e(AO,$qo),e(i2,kqo),e(Y,Sqo),e(Y,d2),e(d2,mge),e(mge,Rqo),e(d2,Pqo),e(d2,yO),e(yO,Bqo),e(d2,Iqo),e(ro,qqo),e(ro,c2),e(c2,Nqo),e(c2,gge),e(gge,jqo),e(c2,Dqo),e(c2,hge),e(hge,Gqo),e(ro,Oqo),M(f2,ro,null),b(f,TNe,_),b(f,Wi,_),e(Wi,m2),e(m2,pge),M(R6,pge,null),e(Wi,Vqo),e(Wi,uge),e(uge,Xqo),b(f,MNe,_),b(f,Bo,_),M(P6,Bo,null),e(Bo,zqo),e(Bo,Qi),e(Qi,Wqo),e(Qi,LO),e(LO,Qqo),e(Qi,Hqo),e(Qi,xO),e(xO,Uqo),e(Qi,Jqo),e(Bo,Yqo),e(Bo,B6),e(B6,Kqo),e(B6,_ge),e(_ge,Zqo),e(B6,eNo),e(Bo,oNo),e(Bo,ct),M(I6,ct,null),e(ct,rNo),e(ct,bge),e(bge,tNo),e(ct,aNo),e(ct,Hi),e(Hi,nNo),e(Hi,vge),e(vge,sNo),e(Hi,lNo),e(Hi,$O),e($O,iNo),e(Hi,dNo),e(ct,cNo),M(g2,ct,null),e(Bo,fNo),e(Bo,to),M(q6,to,null),e(to,mNo),e(to,Fge),e(Fge,gNo),e(to,hNo),e(to,Ba),e(Ba,pNo),e(Ba,Tge),e(Tge,uNo),e(Ba,_No),e(Ba,Mge),e(Mge,bNo),e(Ba,vNo),e(Ba,Ege),e(Ege,FNo),e(Ba,TNo),e(to,MNo),e(to,Yr),e(Yr,h2),e(h2,Cge),e(Cge,ENo),e(h2,CNo),e(h2,kO),e(kO,wNo),e(h2,ANo),e(Yr,yNo),e(Yr,p2),e(p2,wge),e(wge,LNo),e(p2,xNo),e(p2,SO),e(SO,$No),e(p2,kNo),e(Yr,SNo),e(Yr,u2),e(u2,Age),e(Age,RNo),e(u2,PNo),e(u2,RO),e(RO,BNo),e(u2,INo),e(Yr,qNo),e(Yr,_2),e(_2,yge),e(yge,NNo),e(_2,jNo),e(_2,PO),e(PO,DNo),e(_2,GNo),e(Yr,ONo),e(Yr,b2),e(b2,Lge),e(Lge,VNo),e(b2,XNo),e(b2,BO),e(BO,zNo),e(b2,WNo),e(to,QNo),e(to,v2),e(v2,HNo),e(v2,xge),e(xge,UNo),e(v2,JNo),e(v2,$ge),e($ge,YNo),e(to,KNo),M(F2,to,null),b(f,ENe,_),b(f,Ui,_),e(Ui,T2),e(T2,kge),M(N6,kge,null),e(Ui,ZNo),e(Ui,Sge),e(Sge,ejo),b(f,CNe,_),b(f,Io,_),M(j6,Io,null),e(Io,ojo),e(Io,Ji),e(Ji,rjo),e(Ji,IO),e(IO,tjo),e(Ji,ajo),e(Ji,qO),e(qO,njo),e(Ji,sjo),e(Io,ljo),e(Io,D6),e(D6,ijo),e(D6,Rge),e(Rge,djo),e(D6,cjo),e(Io,fjo),e(Io,ft),M(G6,ft,null),e(ft,mjo),e(ft,Pge),e(Pge,gjo),e(ft,hjo),e(ft,Yi),e(Yi,pjo),e(Yi,Bge),e(Bge,ujo),e(Yi,_jo),e(Yi,NO),e(NO,bjo),e(Yi,vjo),e(ft,Fjo),M(M2,ft,null),e(Io,Tjo),e(Io,ao),M(O6,ao,null),e(ao,Mjo),e(ao,Ige),e(Ige,Ejo),e(ao,Cjo),e(ao,Ia),e(Ia,wjo),e(Ia,qge),e(qge,Ajo),e(Ia,yjo),e(Ia,Nge),e(Nge,Ljo),e(Ia,xjo),e(Ia,jge),e(jge,$jo),e(Ia,kjo),e(ao,Sjo),e(ao,H),e(H,E2),e(E2,Dge),e(Dge,Rjo),e(E2,Pjo),e(E2,jO),e(jO,Bjo),e(E2,Ijo),e(H,qjo),e(H,C2),e(C2,Gge),e(Gge,Njo),e(C2,jjo),e(C2,DO),e(DO,Djo),e(C2,Gjo),e(H,Ojo),e(H,w2),e(w2,Oge),e(Oge,Vjo),e(w2,Xjo),e(w2,GO),e(GO,zjo),e(w2,Wjo),e(H,Qjo),e(H,A2),e(A2,Vge),e(Vge,Hjo),e(A2,Ujo),e(A2,OO),e(OO,Jjo),e(A2,Yjo),e(H,Kjo),e(H,y2),e(y2,Xge),e(Xge,Zjo),e(y2,eDo),e(y2,VO),e(VO,oDo),e(y2,rDo),e(H,tDo),e(H,L2),e(L2,zge),e(zge,aDo),e(L2,nDo),e(L2,XO),e(XO,sDo),e(L2,lDo),e(H,iDo),e(H,x2),e(x2,Wge),e(Wge,dDo),e(x2,cDo),e(x2,zO),e(zO,fDo),e(x2,mDo),e(H,gDo),e(H,$2),e($2,Qge),e(Qge,hDo),e($2,pDo),e($2,WO),e(WO,uDo),e($2,_Do),e(H,bDo),e(H,k2),e(k2,Hge),e(Hge,vDo),e(k2,FDo),e(k2,QO),e(QO,TDo),e(k2,MDo),e(H,EDo),e(H,S2),e(S2,Uge),e(Uge,CDo),e(S2,wDo),e(S2,HO),e(HO,ADo),e(S2,yDo),e(H,LDo),e(H,R2),e(R2,Jge),e(Jge,xDo),e(R2,$Do),e(R2,UO),e(UO,kDo),e(R2,SDo),e(H,RDo),e(H,P2),e(P2,Yge),e(Yge,PDo),e(P2,BDo),e(P2,JO),e(JO,IDo),e(P2,qDo),e(H,NDo),e(H,B2),e(B2,Kge),e(Kge,jDo),e(B2,DDo),e(B2,YO),e(YO,GDo),e(B2,ODo),e(H,VDo),e(H,I2),e(I2,Zge),e(Zge,XDo),e(I2,zDo),e(I2,KO),e(KO,WDo),e(I2,QDo),e(H,HDo),e(H,q2),e(q2,ehe),e(ehe,UDo),e(q2,JDo),e(q2,ZO),e(ZO,YDo),e(q2,KDo),e(H,ZDo),e(H,N2),e(N2,ohe),e(ohe,eGo),e(N2,oGo),e(N2,eV),e(eV,rGo),e(N2,tGo),e(H,aGo),e(H,j2),e(j2,rhe),e(rhe,nGo),e(j2,sGo),e(j2,oV),e(oV,lGo),e(j2,iGo),e(H,dGo),e(H,D2),e(D2,the),e(the,cGo),e(D2,fGo),e(D2,rV),e(rV,mGo),e(D2,gGo),e(H,hGo),e(H,G2),e(G2,ahe),e(ahe,pGo),e(G2,uGo),e(G2,tV),e(tV,_Go),e(G2,bGo),e(H,vGo),e(H,O2),e(O2,nhe),e(nhe,FGo),e(O2,TGo),e(O2,aV),e(aV,MGo),e(O2,EGo),e(H,CGo),e(H,V2),e(V2,she),e(she,wGo),e(V2,AGo),e(V2,nV),e(nV,yGo),e(V2,LGo),e(H,xGo),e(H,X2),e(X2,lhe),e(lhe,$Go),e(X2,kGo),e(X2,sV),e(sV,SGo),e(X2,RGo),e(H,PGo),e(H,z2),e(z2,ihe),e(ihe,BGo),e(z2,IGo),e(z2,lV),e(lV,qGo),e(z2,NGo),e(H,jGo),e(H,W2),e(W2,dhe),e(dhe,DGo),e(W2,GGo),e(W2,iV),e(iV,OGo),e(W2,VGo),e(H,XGo),e(H,Q2),e(Q2,che),e(che,zGo),e(Q2,WGo),e(Q2,dV),e(dV,QGo),e(Q2,HGo),e(H,UGo),e(H,H2),e(H2,fhe),e(fhe,JGo),e(H2,YGo),e(H2,cV),e(cV,KGo),e(H2,ZGo),e(H,eOo),e(H,U2),e(U2,mhe),e(mhe,oOo),e(U2,rOo),e(U2,fV),e(fV,tOo),e(U2,aOo),e(H,nOo),e(H,J2),e(J2,ghe),e(ghe,sOo),e(J2,lOo),e(J2,mV),e(mV,iOo),e(J2,dOo),e(H,cOo),e(H,Y2),e(Y2,hhe),e(hhe,fOo),e(Y2,mOo),e(Y2,gV),e(gV,gOo),e(Y2,hOo),e(H,pOo),e(H,K2),e(K2,phe),e(phe,uOo),e(K2,_Oo),e(K2,hV),e(hV,bOo),e(K2,vOo),e(H,FOo),e(H,Z2),e(Z2,uhe),e(uhe,TOo),e(Z2,MOo),e(Z2,pV),e(pV,EOo),e(Z2,COo),e(H,wOo),e(H,ev),e(ev,_he),e(_he,AOo),e(ev,yOo),e(ev,uV),e(uV,LOo),e(ev,xOo),e(H,$Oo),e(H,ov),e(ov,bhe),e(bhe,kOo),e(ov,SOo),e(ov,_V),e(_V,ROo),e(ov,POo),e(H,BOo),e(H,rv),e(rv,vhe),e(vhe,IOo),e(rv,qOo),e(rv,bV),e(bV,NOo),e(rv,jOo),e(ao,DOo),e(ao,tv),e(tv,GOo),e(tv,Fhe),e(Fhe,OOo),e(tv,VOo),e(tv,The),e(The,XOo),e(ao,zOo),M(av,ao,null),b(f,wNe,_),b(f,Ki,_),e(Ki,nv),e(nv,Mhe),M(V6,Mhe,null),e(Ki,WOo),e(Ki,Ehe),e(Ehe,QOo),b(f,ANe,_),b(f,qo,_),M(X6,qo,null),e(qo,HOo),e(qo,Zi),e(Zi,UOo),e(Zi,vV),e(vV,JOo),e(Zi,YOo),e(Zi,FV),e(FV,KOo),e(Zi,ZOo),e(qo,eVo),e(qo,z6),e(z6,oVo),e(z6,Che),e(Che,rVo),e(z6,tVo),e(qo,aVo),e(qo,mt),M(W6,mt,null),e(mt,nVo),e(mt,whe),e(whe,sVo),e(mt,lVo),e(mt,ed),e(ed,iVo),e(ed,Ahe),e(Ahe,dVo),e(ed,cVo),e(ed,TV),e(TV,fVo),e(ed,mVo),e(mt,gVo),M(sv,mt,null),e(qo,hVo),e(qo,no),M(Q6,no,null),e(no,pVo),e(no,yhe),e(yhe,uVo),e(no,_Vo),e(no,qa),e(qa,bVo),e(qa,Lhe),e(Lhe,vVo),e(qa,FVo),e(qa,xhe),e(xhe,TVo),e(qa,MVo),e(qa,$he),e($he,EVo),e(qa,CVo),e(no,wVo),e(no,V),e(V,lv),e(lv,khe),e(khe,AVo),e(lv,yVo),e(lv,MV),e(MV,LVo),e(lv,xVo),e(V,$Vo),e(V,iv),e(iv,She),e(She,kVo),e(iv,SVo),e(iv,EV),e(EV,RVo),e(iv,PVo),e(V,BVo),e(V,dv),e(dv,Rhe),e(Rhe,IVo),e(dv,qVo),e(dv,CV),e(CV,NVo),e(dv,jVo),e(V,DVo),e(V,cv),e(cv,Phe),e(Phe,GVo),e(cv,OVo),e(cv,wV),e(wV,VVo),e(cv,XVo),e(V,zVo),e(V,fv),e(fv,Bhe),e(Bhe,WVo),e(fv,QVo),e(fv,AV),e(AV,HVo),e(fv,UVo),e(V,JVo),e(V,mv),e(mv,Ihe),e(Ihe,YVo),e(mv,KVo),e(mv,yV),e(yV,ZVo),e(mv,eXo),e(V,oXo),e(V,gv),e(gv,qhe),e(qhe,rXo),e(gv,tXo),e(gv,LV),e(LV,aXo),e(gv,nXo),e(V,sXo),e(V,hv),e(hv,Nhe),e(Nhe,lXo),e(hv,iXo),e(hv,xV),e(xV,dXo),e(hv,cXo),e(V,fXo),e(V,pv),e(pv,jhe),e(jhe,mXo),e(pv,gXo),e(pv,$V),e($V,hXo),e(pv,pXo),e(V,uXo),e(V,uv),e(uv,Dhe),e(Dhe,_Xo),e(uv,bXo),e(uv,kV),e(kV,vXo),e(uv,FXo),e(V,TXo),e(V,_v),e(_v,Ghe),e(Ghe,MXo),e(_v,EXo),e(_v,SV),e(SV,CXo),e(_v,wXo),e(V,AXo),e(V,bv),e(bv,Ohe),e(Ohe,yXo),e(bv,LXo),e(bv,RV),e(RV,xXo),e(bv,$Xo),e(V,kXo),e(V,vv),e(vv,Vhe),e(Vhe,SXo),e(vv,RXo),e(vv,PV),e(PV,PXo),e(vv,BXo),e(V,IXo),e(V,Fv),e(Fv,Xhe),e(Xhe,qXo),e(Fv,NXo),e(Fv,BV),e(BV,jXo),e(Fv,DXo),e(V,GXo),e(V,Tv),e(Tv,zhe),e(zhe,OXo),e(Tv,VXo),e(Tv,IV),e(IV,XXo),e(Tv,zXo),e(V,WXo),e(V,Mv),e(Mv,Whe),e(Whe,QXo),e(Mv,HXo),e(Mv,qV),e(qV,UXo),e(Mv,JXo),e(V,YXo),e(V,Ev),e(Ev,Qhe),e(Qhe,KXo),e(Ev,ZXo),e(Ev,NV),e(NV,ezo),e(Ev,ozo),e(V,rzo),e(V,Cv),e(Cv,Hhe),e(Hhe,tzo),e(Cv,azo),e(Cv,jV),e(jV,nzo),e(Cv,szo),e(V,lzo),e(V,wv),e(wv,Uhe),e(Uhe,izo),e(wv,dzo),e(wv,DV),e(DV,czo),e(wv,fzo),e(V,mzo),e(V,Av),e(Av,Jhe),e(Jhe,gzo),e(Av,hzo),e(Av,GV),e(GV,pzo),e(Av,uzo),e(V,_zo),e(V,yv),e(yv,Yhe),e(Yhe,bzo),e(yv,vzo),e(yv,OV),e(OV,Fzo),e(yv,Tzo),e(V,Mzo),e(V,Lv),e(Lv,Khe),e(Khe,Ezo),e(Lv,Czo),e(Lv,VV),e(VV,wzo),e(Lv,Azo),e(V,yzo),e(V,xv),e(xv,Zhe),e(Zhe,Lzo),e(xv,xzo),e(xv,XV),e(XV,$zo),e(xv,kzo),e(V,Szo),e(V,$v),e($v,epe),e(epe,Rzo),e($v,Pzo),e($v,zV),e(zV,Bzo),e($v,Izo),e(V,qzo),e(V,kv),e(kv,ope),e(ope,Nzo),e(kv,jzo),e(kv,WV),e(WV,Dzo),e(kv,Gzo),e(V,Ozo),e(V,Sv),e(Sv,rpe),e(rpe,Vzo),e(Sv,Xzo),e(Sv,QV),e(QV,zzo),e(Sv,Wzo),e(V,Qzo),e(V,Rv),e(Rv,tpe),e(tpe,Hzo),e(Rv,Uzo),e(Rv,HV),e(HV,Jzo),e(Rv,Yzo),e(V,Kzo),e(V,Pv),e(Pv,ape),e(ape,Zzo),e(Pv,eWo),e(Pv,UV),e(UV,oWo),e(Pv,rWo),e(V,tWo),e(V,Bv),e(Bv,npe),e(npe,aWo),e(Bv,nWo),e(Bv,JV),e(JV,sWo),e(Bv,lWo),e(V,iWo),e(V,Iv),e(Iv,spe),e(spe,dWo),e(Iv,cWo),e(Iv,YV),e(YV,fWo),e(Iv,mWo),e(V,gWo),e(V,qv),e(qv,lpe),e(lpe,hWo),e(qv,pWo),e(qv,KV),e(KV,uWo),e(qv,_Wo),e(V,bWo),e(V,Nv),e(Nv,ipe),e(ipe,vWo),e(Nv,FWo),e(Nv,ZV),e(ZV,TWo),e(Nv,MWo),e(V,EWo),e(V,jv),e(jv,dpe),e(dpe,CWo),e(jv,wWo),e(jv,eX),e(eX,AWo),e(jv,yWo),e(V,LWo),e(V,Dv),e(Dv,cpe),e(cpe,xWo),e(Dv,$Wo),e(Dv,oX),e(oX,kWo),e(Dv,SWo),e(V,RWo),e(V,Gv),e(Gv,fpe),e(fpe,PWo),e(Gv,BWo),e(Gv,rX),e(rX,IWo),e(Gv,qWo),e(V,NWo),e(V,Ov),e(Ov,mpe),e(mpe,jWo),e(Ov,DWo),e(Ov,tX),e(tX,GWo),e(Ov,OWo),e(V,VWo),e(V,Vv),e(Vv,gpe),e(gpe,XWo),e(Vv,zWo),e(Vv,aX),e(aX,WWo),e(Vv,QWo),e(V,HWo),e(V,Xv),e(Xv,hpe),e(hpe,UWo),e(Xv,JWo),e(Xv,nX),e(nX,YWo),e(Xv,KWo),e(V,ZWo),e(V,zv),e(zv,ppe),e(ppe,eQo),e(zv,oQo),e(zv,sX),e(sX,rQo),e(zv,tQo),e(V,aQo),e(V,Wv),e(Wv,upe),e(upe,nQo),e(Wv,sQo),e(Wv,lX),e(lX,lQo),e(Wv,iQo),e(no,dQo),e(no,Qv),e(Qv,cQo),e(Qv,_pe),e(_pe,fQo),e(Qv,mQo),e(Qv,bpe),e(bpe,gQo),e(no,hQo),M(Hv,no,null),b(f,yNe,_),b(f,od,_),e(od,Uv),e(Uv,vpe),M(H6,vpe,null),e(od,pQo),e(od,Fpe),e(Fpe,uQo),b(f,LNe,_),b(f,No,_),M(U6,No,null),e(No,_Qo),e(No,rd),e(rd,bQo),e(rd,iX),e(iX,vQo),e(rd,FQo),e(rd,dX),e(dX,TQo),e(rd,MQo),e(No,EQo),e(No,J6),e(J6,CQo),e(J6,Tpe),e(Tpe,wQo),e(J6,AQo),e(No,yQo),e(No,gt),M(Y6,gt,null),e(gt,LQo),e(gt,Mpe),e(Mpe,xQo),e(gt,$Qo),e(gt,td),e(td,kQo),e(td,Epe),e(Epe,SQo),e(td,RQo),e(td,cX),e(cX,PQo),e(td,BQo),e(gt,IQo),M(Jv,gt,null),e(No,qQo),e(No,so),M(K6,so,null),e(so,NQo),e(so,Cpe),e(Cpe,jQo),e(so,DQo),e(so,Na),e(Na,GQo),e(Na,wpe),e(wpe,OQo),e(Na,VQo),e(Na,Ape),e(Ape,XQo),e(Na,zQo),e(Na,ype),e(ype,WQo),e(Na,QQo),e(so,HQo),e(so,Lpe),e(Lpe,Yv),e(Yv,xpe),e(xpe,UQo),e(Yv,JQo),e(Yv,fX),e(fX,YQo),e(Yv,KQo),e(so,ZQo),e(so,Kv),e(Kv,eHo),e(Kv,$pe),e($pe,oHo),e(Kv,rHo),e(Kv,kpe),e(kpe,tHo),e(so,aHo),M(Zv,so,null),b(f,xNe,_),b(f,ad,_),e(ad,e3),e(e3,Spe),M(Z6,Spe,null),e(ad,nHo),e(ad,Rpe),e(Rpe,sHo),b(f,$Ne,_),b(f,jo,_),M(ey,jo,null),e(jo,lHo),e(jo,nd),e(nd,iHo),e(nd,mX),e(mX,dHo),e(nd,cHo),e(nd,gX),e(gX,fHo),e(nd,mHo),e(jo,gHo),e(jo,oy),e(oy,hHo),e(oy,Ppe),e(Ppe,pHo),e(oy,uHo),e(jo,_Ho),e(jo,ht),M(ry,ht,null),e(ht,bHo),e(ht,Bpe),e(Bpe,vHo),e(ht,FHo),e(ht,sd),e(sd,THo),e(sd,Ipe),e(Ipe,MHo),e(sd,EHo),e(sd,hX),e(hX,CHo),e(sd,wHo),e(ht,AHo),M(o3,ht,null),e(jo,yHo),e(jo,lo),M(ty,lo,null),e(lo,LHo),e(lo,qpe),e(qpe,xHo),e(lo,$Ho),e(lo,ja),e(ja,kHo),e(ja,Npe),e(Npe,SHo),e(ja,RHo),e(ja,jpe),e(jpe,PHo),e(ja,BHo),e(ja,Dpe),e(Dpe,IHo),e(ja,qHo),e(lo,NHo),e(lo,Fe),e(Fe,r3),e(r3,Gpe),e(Gpe,jHo),e(r3,DHo),e(r3,pX),e(pX,GHo),e(r3,OHo),e(Fe,VHo),e(Fe,t3),e(t3,Ope),e(Ope,XHo),e(t3,zHo),e(t3,uX),e(uX,WHo),e(t3,QHo),e(Fe,HHo),e(Fe,a3),e(a3,Vpe),e(Vpe,UHo),e(a3,JHo),e(a3,_X),e(_X,YHo),e(a3,KHo),e(Fe,ZHo),e(Fe,n3),e(n3,Xpe),e(Xpe,eUo),e(n3,oUo),e(n3,bX),e(bX,rUo),e(n3,tUo),e(Fe,aUo),e(Fe,Bs),e(Bs,zpe),e(zpe,nUo),e(Bs,sUo),e(Bs,vX),e(vX,lUo),e(Bs,iUo),e(Bs,FX),e(FX,dUo),e(Bs,cUo),e(Fe,fUo),e(Fe,s3),e(s3,Wpe),e(Wpe,mUo),e(s3,gUo),e(s3,TX),e(TX,hUo),e(s3,pUo),e(Fe,uUo),e(Fe,pt),e(pt,Qpe),e(Qpe,_Uo),e(pt,bUo),e(pt,MX),e(MX,vUo),e(pt,FUo),e(pt,EX),e(EX,TUo),e(pt,MUo),e(pt,CX),e(CX,EUo),e(pt,CUo),e(Fe,wUo),e(Fe,l3),e(l3,Hpe),e(Hpe,AUo),e(l3,yUo),e(l3,wX),e(wX,LUo),e(l3,xUo),e(Fe,$Uo),e(Fe,i3),e(i3,Upe),e(Upe,kUo),e(i3,SUo),e(i3,AX),e(AX,RUo),e(i3,PUo),e(Fe,BUo),e(Fe,d3),e(d3,Jpe),e(Jpe,IUo),e(d3,qUo),e(d3,yX),e(yX,NUo),e(d3,jUo),e(Fe,DUo),e(Fe,c3),e(c3,Ype),e(Ype,GUo),e(c3,OUo),e(c3,LX),e(LX,VUo),e(c3,XUo),e(Fe,zUo),e(Fe,f3),e(f3,Kpe),e(Kpe,WUo),e(f3,QUo),e(f3,xX),e(xX,HUo),e(f3,UUo),e(Fe,JUo),e(Fe,m3),e(m3,Zpe),e(Zpe,YUo),e(m3,KUo),e(m3,$X),e($X,ZUo),e(m3,eJo),e(Fe,oJo),e(Fe,g3),e(g3,eue),e(eue,rJo),e(g3,tJo),e(g3,kX),e(kX,aJo),e(g3,nJo),e(lo,sJo),e(lo,h3),e(h3,lJo),e(h3,oue),e(oue,iJo),e(h3,dJo),e(h3,rue),e(rue,cJo),e(lo,fJo),M(p3,lo,null),b(f,kNe,_),b(f,ld,_),e(ld,u3),e(u3,tue),M(ay,tue,null),e(ld,mJo),e(ld,aue),e(aue,gJo),b(f,SNe,_),b(f,Do,_),M(ny,Do,null),e(Do,hJo),e(Do,id),e(id,pJo),e(id,SX),e(SX,uJo),e(id,_Jo),e(id,RX),e(RX,bJo),e(id,vJo),e(Do,FJo),e(Do,sy),e(sy,TJo),e(sy,nue),e(nue,MJo),e(sy,EJo),e(Do,CJo),e(Do,ut),M(ly,ut,null),e(ut,wJo),e(ut,sue),e(sue,AJo),e(ut,yJo),e(ut,dd),e(dd,LJo),e(dd,lue),e(lue,xJo),e(dd,$Jo),e(dd,PX),e(PX,kJo),e(dd,SJo),e(ut,RJo),M(_3,ut,null),e(Do,PJo),e(Do,io),M(iy,io,null),e(io,BJo),e(io,iue),e(iue,IJo),e(io,qJo),e(io,Da),e(Da,NJo),e(Da,due),e(due,jJo),e(Da,DJo),e(Da,cue),e(cue,GJo),e(Da,OJo),e(Da,fue),e(fue,VJo),e(Da,XJo),e(io,zJo),e(io,mue),e(mue,b3),e(b3,gue),e(gue,WJo),e(b3,QJo),e(b3,BX),e(BX,HJo),e(b3,UJo),e(io,JJo),e(io,v3),e(v3,YJo),e(v3,hue),e(hue,KJo),e(v3,ZJo),e(v3,pue),e(pue,eYo),e(io,oYo),M(F3,io,null),b(f,RNe,_),b(f,cd,_),e(cd,T3),e(T3,uue),M(dy,uue,null),e(cd,rYo),e(cd,_ue),e(_ue,tYo),b(f,PNe,_),b(f,Go,_),M(cy,Go,null),e(Go,aYo),e(Go,fd),e(fd,nYo),e(fd,IX),e(IX,sYo),e(fd,lYo),e(fd,qX),e(qX,iYo),e(fd,dYo),e(Go,cYo),e(Go,fy),e(fy,fYo),e(fy,bue),e(bue,mYo),e(fy,gYo),e(Go,hYo),e(Go,_t),M(my,_t,null),e(_t,pYo),e(_t,vue),e(vue,uYo),e(_t,_Yo),e(_t,md),e(md,bYo),e(md,Fue),e(Fue,vYo),e(md,FYo),e(md,NX),e(NX,TYo),e(md,MYo),e(_t,EYo),M(M3,_t,null),e(Go,CYo),e(Go,co),M(gy,co,null),e(co,wYo),e(co,Tue),e(Tue,AYo),e(co,yYo),e(co,Ga),e(Ga,LYo),e(Ga,Mue),e(Mue,xYo),e(Ga,$Yo),e(Ga,Eue),e(Eue,kYo),e(Ga,SYo),e(Ga,Cue),e(Cue,RYo),e(Ga,PYo),e(co,BYo),e(co,Se),e(Se,E3),e(E3,wue),e(wue,IYo),e(E3,qYo),e(E3,jX),e(jX,NYo),e(E3,jYo),e(Se,DYo),e(Se,C3),e(C3,Aue),e(Aue,GYo),e(C3,OYo),e(C3,DX),e(DX,VYo),e(C3,XYo),e(Se,zYo),e(Se,w3),e(w3,yue),e(yue,WYo),e(w3,QYo),e(w3,GX),e(GX,HYo),e(w3,UYo),e(Se,JYo),e(Se,A3),e(A3,Lue),e(Lue,YYo),e(A3,KYo),e(A3,OX),e(OX,ZYo),e(A3,eKo),e(Se,oKo),e(Se,y3),e(y3,xue),e(xue,rKo),e(y3,tKo),e(y3,VX),e(VX,aKo),e(y3,nKo),e(Se,sKo),e(Se,L3),e(L3,$ue),e($ue,lKo),e(L3,iKo),e(L3,XX),e(XX,dKo),e(L3,cKo),e(Se,fKo),e(Se,x3),e(x3,kue),e(kue,mKo),e(x3,gKo),e(x3,zX),e(zX,hKo),e(x3,pKo),e(Se,uKo),e(Se,$3),e($3,Sue),e(Sue,_Ko),e($3,bKo),e($3,WX),e(WX,vKo),e($3,FKo),e(Se,TKo),e(Se,k3),e(k3,Rue),e(Rue,MKo),e(k3,EKo),e(k3,QX),e(QX,CKo),e(k3,wKo),e(co,AKo),e(co,S3),e(S3,yKo),e(S3,Pue),e(Pue,LKo),e(S3,xKo),e(S3,Bue),e(Bue,$Ko),e(co,kKo),M(R3,co,null),b(f,BNe,_),b(f,gd,_),e(gd,P3),e(P3,Iue),M(hy,Iue,null),e(gd,SKo),e(gd,que),e(que,RKo),b(f,INe,_),b(f,Oo,_),M(py,Oo,null),e(Oo,PKo),e(Oo,hd),e(hd,BKo),e(hd,HX),e(HX,IKo),e(hd,qKo),e(hd,UX),e(UX,NKo),e(hd,jKo),e(Oo,DKo),e(Oo,uy),e(uy,GKo),e(uy,Nue),e(Nue,OKo),e(uy,VKo),e(Oo,XKo),e(Oo,bt),M(_y,bt,null),e(bt,zKo),e(bt,jue),e(jue,WKo),e(bt,QKo),e(bt,pd),e(pd,HKo),e(pd,Due),e(Due,UKo),e(pd,JKo),e(pd,JX),e(JX,YKo),e(pd,KKo),e(bt,ZKo),M(B3,bt,null),e(Oo,eZo),e(Oo,fo),M(by,fo,null),e(fo,oZo),e(fo,Gue),e(Gue,rZo),e(fo,tZo),e(fo,Oa),e(Oa,aZo),e(Oa,Oue),e(Oue,nZo),e(Oa,sZo),e(Oa,Vue),e(Vue,lZo),e(Oa,iZo),e(Oa,Xue),e(Xue,dZo),e(Oa,cZo),e(fo,fZo),e(fo,Kr),e(Kr,I3),e(I3,zue),e(zue,mZo),e(I3,gZo),e(I3,YX),e(YX,hZo),e(I3,pZo),e(Kr,uZo),e(Kr,q3),e(q3,Wue),e(Wue,_Zo),e(q3,bZo),e(q3,KX),e(KX,vZo),e(q3,FZo),e(Kr,TZo),e(Kr,N3),e(N3,Que),e(Que,MZo),e(N3,EZo),e(N3,ZX),e(ZX,CZo),e(N3,wZo),e(Kr,AZo),e(Kr,j3),e(j3,Hue),e(Hue,yZo),e(j3,LZo),e(j3,ez),e(ez,xZo),e(j3,$Zo),e(Kr,kZo),e(Kr,D3),e(D3,Uue),e(Uue,SZo),e(D3,RZo),e(D3,oz),e(oz,PZo),e(D3,BZo),e(fo,IZo),e(fo,G3),e(G3,qZo),e(G3,Jue),e(Jue,NZo),e(G3,jZo),e(G3,Yue),e(Yue,DZo),e(fo,GZo),M(O3,fo,null),b(f,qNe,_),b(f,ud,_),e(ud,V3),e(V3,Kue),M(vy,Kue,null),e(ud,OZo),e(ud,Zue),e(Zue,VZo),b(f,NNe,_),b(f,Vo,_),M(Fy,Vo,null),e(Vo,XZo),e(Vo,_d),e(_d,zZo),e(_d,rz),e(rz,WZo),e(_d,QZo),e(_d,tz),e(tz,HZo),e(_d,UZo),e(Vo,JZo),e(Vo,Ty),e(Ty,YZo),e(Ty,e_e),e(e_e,KZo),e(Ty,ZZo),e(Vo,eer),e(Vo,vt),M(My,vt,null),e(vt,oer),e(vt,o_e),e(o_e,rer),e(vt,ter),e(vt,bd),e(bd,aer),e(bd,r_e),e(r_e,ner),e(bd,ser),e(bd,az),e(az,ler),e(bd,ier),e(vt,der),M(X3,vt,null),e(Vo,cer),e(Vo,mo),M(Ey,mo,null),e(mo,fer),e(mo,t_e),e(t_e,mer),e(mo,ger),e(mo,Va),e(Va,her),e(Va,a_e),e(a_e,per),e(Va,uer),e(Va,n_e),e(n_e,_er),e(Va,ber),e(Va,s_e),e(s_e,ver),e(Va,Fer),e(mo,Ter),e(mo,Re),e(Re,z3),e(z3,l_e),e(l_e,Mer),e(z3,Eer),e(z3,nz),e(nz,Cer),e(z3,wer),e(Re,Aer),e(Re,W3),e(W3,i_e),e(i_e,yer),e(W3,Ler),e(W3,sz),e(sz,xer),e(W3,$er),e(Re,ker),e(Re,Q3),e(Q3,d_e),e(d_e,Ser),e(Q3,Rer),e(Q3,lz),e(lz,Per),e(Q3,Ber),e(Re,Ier),e(Re,H3),e(H3,c_e),e(c_e,qer),e(H3,Ner),e(H3,iz),e(iz,jer),e(H3,Der),e(Re,Ger),e(Re,U3),e(U3,f_e),e(f_e,Oer),e(U3,Ver),e(U3,dz),e(dz,Xer),e(U3,zer),e(Re,Wer),e(Re,J3),e(J3,m_e),e(m_e,Qer),e(J3,Her),e(J3,cz),e(cz,Uer),e(J3,Jer),e(Re,Yer),e(Re,Y3),e(Y3,g_e),e(g_e,Ker),e(Y3,Zer),e(Y3,fz),e(fz,eor),e(Y3,oor),e(Re,ror),e(Re,K3),e(K3,h_e),e(h_e,tor),e(K3,aor),e(K3,mz),e(mz,nor),e(K3,sor),e(Re,lor),e(Re,Z3),e(Z3,p_e),e(p_e,ior),e(Z3,dor),e(Z3,gz),e(gz,cor),e(Z3,mor),e(mo,gor),e(mo,eF),e(eF,hor),e(eF,u_e),e(u_e,por),e(eF,uor),e(eF,__e),e(__e,_or),e(mo,bor),M(oF,mo,null),b(f,jNe,_),b(f,vd,_),e(vd,rF),e(rF,b_e),M(Cy,b_e,null),e(vd,vor),e(vd,v_e),e(v_e,For),b(f,DNe,_),b(f,Xo,_),M(wy,Xo,null),e(Xo,Tor),e(Xo,Fd),e(Fd,Mor),e(Fd,hz),e(hz,Eor),e(Fd,Cor),e(Fd,pz),e(pz,wor),e(Fd,Aor),e(Xo,yor),e(Xo,Ay),e(Ay,Lor),e(Ay,F_e),e(F_e,xor),e(Ay,$or),e(Xo,kor),e(Xo,Ft),M(yy,Ft,null),e(Ft,Sor),e(Ft,T_e),e(T_e,Ror),e(Ft,Por),e(Ft,Td),e(Td,Bor),e(Td,M_e),e(M_e,Ior),e(Td,qor),e(Td,uz),e(uz,Nor),e(Td,jor),e(Ft,Dor),M(tF,Ft,null),e(Xo,Gor),e(Xo,go),M(Ly,go,null),e(go,Oor),e(go,E_e),e(E_e,Vor),e(go,Xor),e(go,Xa),e(Xa,zor),e(Xa,C_e),e(C_e,Wor),e(Xa,Qor),e(Xa,w_e),e(w_e,Hor),e(Xa,Uor),e(Xa,A_e),e(A_e,Jor),e(Xa,Yor),e(go,Kor),e(go,xy),e(xy,aF),e(aF,y_e),e(y_e,Zor),e(aF,err),e(aF,_z),e(_z,orr),e(aF,rrr),e(xy,trr),e(xy,nF),e(nF,L_e),e(L_e,arr),e(nF,nrr),e(nF,bz),e(bz,srr),e(nF,lrr),e(go,irr),e(go,sF),e(sF,drr),e(sF,x_e),e(x_e,crr),e(sF,frr),e(sF,$_e),e($_e,mrr),e(go,grr),M(lF,go,null),b(f,GNe,_),b(f,Md,_),e(Md,iF),e(iF,k_e),M($y,k_e,null),e(Md,hrr),e(Md,S_e),e(S_e,prr),b(f,ONe,_),b(f,zo,_),M(ky,zo,null),e(zo,urr),e(zo,Ed),e(Ed,_rr),e(Ed,vz),e(vz,brr),e(Ed,vrr),e(Ed,Fz),e(Fz,Frr),e(Ed,Trr),e(zo,Mrr),e(zo,Sy),e(Sy,Err),e(Sy,R_e),e(R_e,Crr),e(Sy,wrr),e(zo,Arr),e(zo,Tt),M(Ry,Tt,null),e(Tt,yrr),e(Tt,P_e),e(P_e,Lrr),e(Tt,xrr),e(Tt,Cd),e(Cd,$rr),e(Cd,B_e),e(B_e,krr),e(Cd,Srr),e(Cd,Tz),e(Tz,Rrr),e(Cd,Prr),e(Tt,Brr),M(dF,Tt,null),e(zo,Irr),e(zo,ho),M(Py,ho,null),e(ho,qrr),e(ho,I_e),e(I_e,Nrr),e(ho,jrr),e(ho,za),e(za,Drr),e(za,q_e),e(q_e,Grr),e(za,Orr),e(za,N_e),e(N_e,Vrr),e(za,Xrr),e(za,j_e),e(j_e,zrr),e(za,Wrr),e(ho,Qrr),e(ho,Zr),e(Zr,cF),e(cF,D_e),e(D_e,Hrr),e(cF,Urr),e(cF,Mz),e(Mz,Jrr),e(cF,Yrr),e(Zr,Krr),e(Zr,fF),e(fF,G_e),e(G_e,Zrr),e(fF,etr),e(fF,Ez),e(Ez,otr),e(fF,rtr),e(Zr,ttr),e(Zr,mF),e(mF,O_e),e(O_e,atr),e(mF,ntr),e(mF,Cz),e(Cz,str),e(mF,ltr),e(Zr,itr),e(Zr,gF),e(gF,V_e),e(V_e,dtr),e(gF,ctr),e(gF,wz),e(wz,ftr),e(gF,mtr),e(Zr,gtr),e(Zr,hF),e(hF,X_e),e(X_e,htr),e(hF,ptr),e(hF,Az),e(Az,utr),e(hF,_tr),e(ho,btr),e(ho,pF),e(pF,vtr),e(pF,z_e),e(z_e,Ftr),e(pF,Ttr),e(pF,W_e),e(W_e,Mtr),e(ho,Etr),M(uF,ho,null),b(f,VNe,_),b(f,wd,_),e(wd,_F),e(_F,Q_e),M(By,Q_e,null),e(wd,Ctr),e(wd,H_e),e(H_e,wtr),b(f,XNe,_),b(f,Wo,_),M(Iy,Wo,null),e(Wo,Atr),e(Wo,Ad),e(Ad,ytr),e(Ad,yz),e(yz,Ltr),e(Ad,xtr),e(Ad,Lz),e(Lz,$tr),e(Ad,ktr),e(Wo,Str),e(Wo,qy),e(qy,Rtr),e(qy,U_e),e(U_e,Ptr),e(qy,Btr),e(Wo,Itr),e(Wo,Mt),M(Ny,Mt,null),e(Mt,qtr),e(Mt,J_e),e(J_e,Ntr),e(Mt,jtr),e(Mt,yd),e(yd,Dtr),e(yd,Y_e),e(Y_e,Gtr),e(yd,Otr),e(yd,xz),e(xz,Vtr),e(yd,Xtr),e(Mt,ztr),M(bF,Mt,null),e(Wo,Wtr),e(Wo,po),M(jy,po,null),e(po,Qtr),e(po,K_e),e(K_e,Htr),e(po,Utr),e(po,Wa),e(Wa,Jtr),e(Wa,Z_e),e(Z_e,Ytr),e(Wa,Ktr),e(Wa,e1e),e(e1e,Ztr),e(Wa,ear),e(Wa,o1e),e(o1e,oar),e(Wa,rar),e(po,tar),e(po,Ld),e(Ld,vF),e(vF,r1e),e(r1e,aar),e(vF,nar),e(vF,$z),e($z,sar),e(vF,lar),e(Ld,iar),e(Ld,FF),e(FF,t1e),e(t1e,dar),e(FF,car),e(FF,kz),e(kz,far),e(FF,mar),e(Ld,gar),e(Ld,TF),e(TF,a1e),e(a1e,har),e(TF,par),e(TF,Sz),e(Sz,uar),e(TF,_ar),e(po,bar),e(po,MF),e(MF,Far),e(MF,n1e),e(n1e,Tar),e(MF,Mar),e(MF,s1e),e(s1e,Ear),e(po,Car),M(EF,po,null),b(f,zNe,_),b(f,xd,_),e(xd,CF),e(CF,l1e),M(Dy,l1e,null),e(xd,war),e(xd,i1e),e(i1e,Aar),b(f,WNe,_),b(f,Qo,_),M(Gy,Qo,null),e(Qo,yar),e(Qo,$d),e($d,Lar),e($d,Rz),e(Rz,xar),e($d,$ar),e($d,Pz),e(Pz,kar),e($d,Sar),e(Qo,Rar),e(Qo,Oy),e(Oy,Par),e(Oy,d1e),e(d1e,Bar),e(Oy,Iar),e(Qo,qar),e(Qo,Et),M(Vy,Et,null),e(Et,Nar),e(Et,c1e),e(c1e,jar),e(Et,Dar),e(Et,kd),e(kd,Gar),e(kd,f1e),e(f1e,Oar),e(kd,Var),e(kd,Bz),e(Bz,Xar),e(kd,zar),e(Et,War),M(wF,Et,null),e(Qo,Qar),e(Qo,uo),M(Xy,uo,null),e(uo,Har),e(uo,m1e),e(m1e,Uar),e(uo,Jar),e(uo,Qa),e(Qa,Yar),e(Qa,g1e),e(g1e,Kar),e(Qa,Zar),e(Qa,h1e),e(h1e,enr),e(Qa,onr),e(Qa,p1e),e(p1e,rnr),e(Qa,tnr),e(uo,anr),e(uo,zy),e(zy,AF),e(AF,u1e),e(u1e,nnr),e(AF,snr),e(AF,Iz),e(Iz,lnr),e(AF,inr),e(zy,dnr),e(zy,yF),e(yF,_1e),e(_1e,cnr),e(yF,fnr),e(yF,qz),e(qz,mnr),e(yF,gnr),e(uo,hnr),e(uo,LF),e(LF,pnr),e(LF,b1e),e(b1e,unr),e(LF,_nr),e(LF,v1e),e(v1e,bnr),e(uo,vnr),M(xF,uo,null),b(f,QNe,_),b(f,Sd,_),e(Sd,$F),e($F,F1e),M(Wy,F1e,null),e(Sd,Fnr),e(Sd,T1e),e(T1e,Tnr),b(f,HNe,_),b(f,Ho,_),M(Qy,Ho,null),e(Ho,Mnr),e(Ho,Rd),e(Rd,Enr),e(Rd,Nz),e(Nz,Cnr),e(Rd,wnr),e(Rd,jz),e(jz,Anr),e(Rd,ynr),e(Ho,Lnr),e(Ho,Hy),e(Hy,xnr),e(Hy,M1e),e(M1e,$nr),e(Hy,knr),e(Ho,Snr),e(Ho,Ct),M(Uy,Ct,null),e(Ct,Rnr),e(Ct,E1e),e(E1e,Pnr),e(Ct,Bnr),e(Ct,Pd),e(Pd,Inr),e(Pd,C1e),e(C1e,qnr),e(Pd,Nnr),e(Pd,Dz),e(Dz,jnr),e(Pd,Dnr),e(Ct,Gnr),M(kF,Ct,null),e(Ho,Onr),e(Ho,_o),M(Jy,_o,null),e(_o,Vnr),e(_o,w1e),e(w1e,Xnr),e(_o,znr),e(_o,Ha),e(Ha,Wnr),e(Ha,A1e),e(A1e,Qnr),e(Ha,Hnr),e(Ha,y1e),e(y1e,Unr),e(Ha,Jnr),e(Ha,L1e),e(L1e,Ynr),e(Ha,Knr),e(_o,Znr),e(_o,x1e),e(x1e,SF),e(SF,$1e),e($1e,esr),e(SF,osr),e(SF,Gz),e(Gz,rsr),e(SF,tsr),e(_o,asr),e(_o,RF),e(RF,nsr),e(RF,k1e),e(k1e,ssr),e(RF,lsr),e(RF,S1e),e(S1e,isr),e(_o,dsr),M(PF,_o,null),b(f,UNe,_),b(f,Bd,_),e(Bd,BF),e(BF,R1e),M(Yy,R1e,null),e(Bd,csr),e(Bd,P1e),e(P1e,fsr),b(f,JNe,_),b(f,Uo,_),M(Ky,Uo,null),e(Uo,msr),e(Uo,Id),e(Id,gsr),e(Id,Oz),e(Oz,hsr),e(Id,psr),e(Id,Vz),e(Vz,usr),e(Id,_sr),e(Uo,bsr),e(Uo,Zy),e(Zy,vsr),e(Zy,B1e),e(B1e,Fsr),e(Zy,Tsr),e(Uo,Msr),e(Uo,wt),M(eL,wt,null),e(wt,Esr),e(wt,I1e),e(I1e,Csr),e(wt,wsr),e(wt,qd),e(qd,Asr),e(qd,q1e),e(q1e,ysr),e(qd,Lsr),e(qd,Xz),e(Xz,xsr),e(qd,$sr),e(wt,ksr),M(IF,wt,null),e(Uo,Ssr),e(Uo,bo),M(oL,bo,null),e(bo,Rsr),e(bo,N1e),e(N1e,Psr),e(bo,Bsr),e(bo,Ua),e(Ua,Isr),e(Ua,j1e),e(j1e,qsr),e(Ua,Nsr),e(Ua,D1e),e(D1e,jsr),e(Ua,Dsr),e(Ua,G1e),e(G1e,Gsr),e(Ua,Osr),e(bo,Vsr),e(bo,Ja),e(Ja,qF),e(qF,O1e),e(O1e,Xsr),e(qF,zsr),e(qF,zz),e(zz,Wsr),e(qF,Qsr),e(Ja,Hsr),e(Ja,NF),e(NF,V1e),e(V1e,Usr),e(NF,Jsr),e(NF,Wz),e(Wz,Ysr),e(NF,Ksr),e(Ja,Zsr),e(Ja,jF),e(jF,X1e),e(X1e,elr),e(jF,olr),e(jF,Qz),e(Qz,rlr),e(jF,tlr),e(Ja,alr),e(Ja,DF),e(DF,z1e),e(z1e,nlr),e(DF,slr),e(DF,Hz),e(Hz,llr),e(DF,ilr),e(bo,dlr),e(bo,GF),e(GF,clr),e(GF,W1e),e(W1e,flr),e(GF,mlr),e(GF,Q1e),e(Q1e,glr),e(bo,hlr),M(OF,bo,null),b(f,YNe,_),b(f,Nd,_),e(Nd,VF),e(VF,H1e),M(rL,H1e,null),e(Nd,plr),e(Nd,U1e),e(U1e,ulr),b(f,KNe,_),b(f,Jo,_),M(tL,Jo,null),e(Jo,_lr),e(Jo,jd),e(jd,blr),e(jd,Uz),e(Uz,vlr),e(jd,Flr),e(jd,Jz),e(Jz,Tlr),e(jd,Mlr),e(Jo,Elr),e(Jo,aL),e(aL,Clr),e(aL,J1e),e(J1e,wlr),e(aL,Alr),e(Jo,ylr),e(Jo,At),M(nL,At,null),e(At,Llr),e(At,Y1e),e(Y1e,xlr),e(At,$lr),e(At,Dd),e(Dd,klr),e(Dd,K1e),e(K1e,Slr),e(Dd,Rlr),e(Dd,Yz),e(Yz,Plr),e(Dd,Blr),e(At,Ilr),M(XF,At,null),e(Jo,qlr),e(Jo,vo),M(sL,vo,null),e(vo,Nlr),e(vo,Z1e),e(Z1e,jlr),e(vo,Dlr),e(vo,Ya),e(Ya,Glr),e(Ya,e8e),e(e8e,Olr),e(Ya,Vlr),e(Ya,o8e),e(o8e,Xlr),e(Ya,zlr),e(Ya,r8e),e(r8e,Wlr),e(Ya,Qlr),e(vo,Hlr),e(vo,t8e),e(t8e,zF),e(zF,a8e),e(a8e,Ulr),e(zF,Jlr),e(zF,Kz),e(Kz,Ylr),e(zF,Klr),e(vo,Zlr),e(vo,WF),e(WF,eir),e(WF,n8e),e(n8e,oir),e(WF,rir),e(WF,s8e),e(s8e,tir),e(vo,air),M(QF,vo,null),b(f,ZNe,_),b(f,Gd,_),e(Gd,HF),e(HF,l8e),M(lL,l8e,null),e(Gd,nir),e(Gd,i8e),e(i8e,sir),b(f,eje,_),b(f,Yo,_),M(iL,Yo,null),e(Yo,lir),e(Yo,Od),e(Od,iir),e(Od,Zz),e(Zz,dir),e(Od,cir),e(Od,eW),e(eW,fir),e(Od,mir),e(Yo,gir),e(Yo,dL),e(dL,hir),e(dL,d8e),e(d8e,pir),e(dL,uir),e(Yo,_ir),e(Yo,yt),M(cL,yt,null),e(yt,bir),e(yt,c8e),e(c8e,vir),e(yt,Fir),e(yt,Vd),e(Vd,Tir),e(Vd,f8e),e(f8e,Mir),e(Vd,Eir),e(Vd,oW),e(oW,Cir),e(Vd,wir),e(yt,Air),M(UF,yt,null),e(Yo,yir),e(Yo,wr),M(fL,wr,null),e(wr,Lir),e(wr,m8e),e(m8e,xir),e(wr,$ir),e(wr,Ka),e(Ka,kir),e(Ka,g8e),e(g8e,Sir),e(Ka,Rir),e(Ka,h8e),e(h8e,Pir),e(Ka,Bir),e(Ka,p8e),e(p8e,Iir),e(Ka,qir),e(wr,Nir),e(wr,N),e(N,JF),e(JF,u8e),e(u8e,jir),e(JF,Dir),e(JF,rW),e(rW,Gir),e(JF,Oir),e(N,Vir),e(N,YF),e(YF,_8e),e(_8e,Xir),e(YF,zir),e(YF,tW),e(tW,Wir),e(YF,Qir),e(N,Hir),e(N,KF),e(KF,b8e),e(b8e,Uir),e(KF,Jir),e(KF,aW),e(aW,Yir),e(KF,Kir),e(N,Zir),e(N,ZF),e(ZF,v8e),e(v8e,edr),e(ZF,odr),e(ZF,nW),e(nW,rdr),e(ZF,tdr),e(N,adr),e(N,eT),e(eT,F8e),e(F8e,ndr),e(eT,sdr),e(eT,sW),e(sW,ldr),e(eT,idr),e(N,ddr),e(N,oT),e(oT,T8e),e(T8e,cdr),e(oT,fdr),e(oT,lW),e(lW,mdr),e(oT,gdr),e(N,hdr),e(N,rT),e(rT,M8e),e(M8e,pdr),e(rT,udr),e(rT,iW),e(iW,_dr),e(rT,bdr),e(N,vdr),e(N,tT),e(tT,E8e),e(E8e,Fdr),e(tT,Tdr),e(tT,dW),e(dW,Mdr),e(tT,Edr),e(N,Cdr),e(N,aT),e(aT,C8e),e(C8e,wdr),e(aT,Adr),e(aT,cW),e(cW,ydr),e(aT,Ldr),e(N,xdr),e(N,nT),e(nT,w8e),e(w8e,$dr),e(nT,kdr),e(nT,fW),e(fW,Sdr),e(nT,Rdr),e(N,Pdr),e(N,sT),e(sT,A8e),e(A8e,Bdr),e(sT,Idr),e(sT,mW),e(mW,qdr),e(sT,Ndr),e(N,jdr),e(N,lT),e(lT,y8e),e(y8e,Ddr),e(lT,Gdr),e(lT,gW),e(gW,Odr),e(lT,Vdr),e(N,Xdr),e(N,iT),e(iT,L8e),e(L8e,zdr),e(iT,Wdr),e(iT,hW),e(hW,Qdr),e(iT,Hdr),e(N,Udr),e(N,dT),e(dT,x8e),e(x8e,Jdr),e(dT,Ydr),e(dT,pW),e(pW,Kdr),e(dT,Zdr),e(N,ecr),e(N,cT),e(cT,$8e),e($8e,ocr),e(cT,rcr),e(cT,uW),e(uW,tcr),e(cT,acr),e(N,ncr),e(N,fT),e(fT,k8e),e(k8e,scr),e(fT,lcr),e(fT,_W),e(_W,icr),e(fT,dcr),e(N,ccr),e(N,mT),e(mT,S8e),e(S8e,fcr),e(mT,mcr),e(mT,bW),e(bW,gcr),e(mT,hcr),e(N,pcr),e(N,Is),e(Is,R8e),e(R8e,ucr),e(Is,_cr),e(Is,vW),e(vW,bcr),e(Is,vcr),e(Is,FW),e(FW,Fcr),e(Is,Tcr),e(N,Mcr),e(N,gT),e(gT,P8e),e(P8e,Ecr),e(gT,Ccr),e(gT,TW),e(TW,wcr),e(gT,Acr),e(N,ycr),e(N,hT),e(hT,B8e),e(B8e,Lcr),e(hT,xcr),e(hT,MW),e(MW,$cr),e(hT,kcr),e(N,Scr),e(N,pT),e(pT,I8e),e(I8e,Rcr),e(pT,Pcr),e(pT,EW),e(EW,Bcr),e(pT,Icr),e(N,qcr),e(N,uT),e(uT,q8e),e(q8e,Ncr),e(uT,jcr),e(uT,CW),e(CW,Dcr),e(uT,Gcr),e(N,Ocr),e(N,_T),e(_T,N8e),e(N8e,Vcr),e(_T,Xcr),e(_T,wW),e(wW,zcr),e(_T,Wcr),e(N,Qcr),e(N,bT),e(bT,j8e),e(j8e,Hcr),e(bT,Ucr),e(bT,AW),e(AW,Jcr),e(bT,Ycr),e(N,Kcr),e(N,vT),e(vT,D8e),e(D8e,Zcr),e(vT,efr),e(vT,yW),e(yW,ofr),e(vT,rfr),e(N,tfr),e(N,FT),e(FT,G8e),e(G8e,afr),e(FT,nfr),e(FT,LW),e(LW,sfr),e(FT,lfr),e(N,ifr),e(N,TT),e(TT,O8e),e(O8e,dfr),e(TT,cfr),e(TT,xW),e(xW,ffr),e(TT,mfr),e(N,gfr),e(N,MT),e(MT,V8e),e(V8e,hfr),e(MT,pfr),e(MT,$W),e($W,ufr),e(MT,_fr),e(N,bfr),e(N,ET),e(ET,X8e),e(X8e,vfr),e(ET,Ffr),e(ET,kW),e(kW,Tfr),e(ET,Mfr),e(N,Efr),e(N,CT),e(CT,z8e),e(z8e,Cfr),e(CT,wfr),e(CT,SW),e(SW,Afr),e(CT,yfr),e(N,Lfr),e(N,wT),e(wT,W8e),e(W8e,xfr),e(wT,$fr),e(wT,RW),e(RW,kfr),e(wT,Sfr),e(N,Rfr),e(N,AT),e(AT,Q8e),e(Q8e,Pfr),e(AT,Bfr),e(AT,PW),e(PW,Ifr),e(AT,qfr),e(N,Nfr),e(N,yT),e(yT,H8e),e(H8e,jfr),e(yT,Dfr),e(yT,BW),e(BW,Gfr),e(yT,Ofr),e(N,Vfr),e(N,LT),e(LT,U8e),e(U8e,Xfr),e(LT,zfr),e(LT,IW),e(IW,Wfr),e(LT,Qfr),e(N,Hfr),e(N,xT),e(xT,J8e),e(J8e,Ufr),e(xT,Jfr),e(xT,qW),e(qW,Yfr),e(xT,Kfr),e(N,Zfr),e(N,$T),e($T,Y8e),e(Y8e,emr),e($T,omr),e($T,NW),e(NW,rmr),e($T,tmr),e(N,amr),e(N,kT),e(kT,K8e),e(K8e,nmr),e(kT,smr),e(kT,jW),e(jW,lmr),e(kT,imr),e(N,dmr),e(N,ST),e(ST,Z8e),e(Z8e,cmr),e(ST,fmr),e(ST,DW),e(DW,mmr),e(ST,gmr),e(N,hmr),e(N,RT),e(RT,ebe),e(ebe,pmr),e(RT,umr),e(RT,GW),e(GW,_mr),e(RT,bmr),e(N,vmr),e(N,PT),e(PT,obe),e(obe,Fmr),e(PT,Tmr),e(PT,OW),e(OW,Mmr),e(PT,Emr),e(N,Cmr),e(N,BT),e(BT,rbe),e(rbe,wmr),e(BT,Amr),e(BT,VW),e(VW,ymr),e(BT,Lmr),e(N,xmr),e(N,IT),e(IT,tbe),e(tbe,$mr),e(IT,kmr),e(IT,XW),e(XW,Smr),e(IT,Rmr),e(N,Pmr),e(N,qT),e(qT,abe),e(abe,Bmr),e(qT,Imr),e(qT,zW),e(zW,qmr),e(qT,Nmr),e(N,jmr),e(N,NT),e(NT,nbe),e(nbe,Dmr),e(NT,Gmr),e(NT,WW),e(WW,Omr),e(NT,Vmr),e(N,Xmr),e(N,jT),e(jT,sbe),e(sbe,zmr),e(jT,Wmr),e(jT,QW),e(QW,Qmr),e(jT,Hmr),e(N,Umr),e(N,DT),e(DT,lbe),e(lbe,Jmr),e(DT,Ymr),e(DT,HW),e(HW,Kmr),e(DT,Zmr),e(N,egr),e(N,GT),e(GT,ibe),e(ibe,ogr),e(GT,rgr),e(GT,UW),e(UW,tgr),e(GT,agr),e(wr,ngr),M(OT,wr,null),b(f,oje,_),b(f,Xd,_),e(Xd,VT),e(VT,dbe),M(mL,dbe,null),e(Xd,sgr),e(Xd,cbe),e(cbe,lgr),b(f,rje,_),b(f,Ko,_),M(gL,Ko,null),e(Ko,igr),e(Ko,zd),e(zd,dgr),e(zd,JW),e(JW,cgr),e(zd,fgr),e(zd,YW),e(YW,mgr),e(zd,ggr),e(Ko,hgr),e(Ko,hL),e(hL,pgr),e(hL,fbe),e(fbe,ugr),e(hL,_gr),e(Ko,bgr),e(Ko,Lt),M(pL,Lt,null),e(Lt,vgr),e(Lt,mbe),e(mbe,Fgr),e(Lt,Tgr),e(Lt,Wd),e(Wd,Mgr),e(Wd,gbe),e(gbe,Egr),e(Wd,Cgr),e(Wd,KW),e(KW,wgr),e(Wd,Agr),e(Lt,ygr),M(XT,Lt,null),e(Ko,Lgr),e(Ko,Ar),M(uL,Ar,null),e(Ar,xgr),e(Ar,hbe),e(hbe,$gr),e(Ar,kgr),e(Ar,Za),e(Za,Sgr),e(Za,pbe),e(pbe,Rgr),e(Za,Pgr),e(Za,ube),e(ube,Bgr),e(Za,Igr),e(Za,_be),e(_be,qgr),e(Za,Ngr),e(Ar,jgr),e(Ar,se),e(se,zT),e(zT,bbe),e(bbe,Dgr),e(zT,Ggr),e(zT,ZW),e(ZW,Ogr),e(zT,Vgr),e(se,Xgr),e(se,WT),e(WT,vbe),e(vbe,zgr),e(WT,Wgr),e(WT,eQ),e(eQ,Qgr),e(WT,Hgr),e(se,Ugr),e(se,QT),e(QT,Fbe),e(Fbe,Jgr),e(QT,Ygr),e(QT,oQ),e(oQ,Kgr),e(QT,Zgr),e(se,ehr),e(se,HT),e(HT,Tbe),e(Tbe,ohr),e(HT,rhr),e(HT,rQ),e(rQ,thr),e(HT,ahr),e(se,nhr),e(se,UT),e(UT,Mbe),e(Mbe,shr),e(UT,lhr),e(UT,tQ),e(tQ,ihr),e(UT,dhr),e(se,chr),e(se,JT),e(JT,Ebe),e(Ebe,fhr),e(JT,mhr),e(JT,aQ),e(aQ,ghr),e(JT,hhr),e(se,phr),e(se,YT),e(YT,Cbe),e(Cbe,uhr),e(YT,_hr),e(YT,nQ),e(nQ,bhr),e(YT,vhr),e(se,Fhr),e(se,KT),e(KT,wbe),e(wbe,Thr),e(KT,Mhr),e(KT,sQ),e(sQ,Ehr),e(KT,Chr),e(se,whr),e(se,ZT),e(ZT,Abe),e(Abe,Ahr),e(ZT,yhr),e(ZT,lQ),e(lQ,Lhr),e(ZT,xhr),e(se,$hr),e(se,e7),e(e7,ybe),e(ybe,khr),e(e7,Shr),e(e7,iQ),e(iQ,Rhr),e(e7,Phr),e(se,Bhr),e(se,o7),e(o7,Lbe),e(Lbe,Ihr),e(o7,qhr),e(o7,dQ),e(dQ,Nhr),e(o7,jhr),e(se,Dhr),e(se,r7),e(r7,xbe),e(xbe,Ghr),e(r7,Ohr),e(r7,cQ),e(cQ,Vhr),e(r7,Xhr),e(se,zhr),e(se,t7),e(t7,$be),e($be,Whr),e(t7,Qhr),e(t7,fQ),e(fQ,Hhr),e(t7,Uhr),e(se,Jhr),e(se,a7),e(a7,kbe),e(kbe,Yhr),e(a7,Khr),e(a7,mQ),e(mQ,Zhr),e(a7,epr),e(se,opr),e(se,n7),e(n7,Sbe),e(Sbe,rpr),e(n7,tpr),e(n7,gQ),e(gQ,apr),e(n7,npr),e(se,spr),e(se,s7),e(s7,Rbe),e(Rbe,lpr),e(s7,ipr),e(s7,hQ),e(hQ,dpr),e(s7,cpr),e(se,fpr),e(se,l7),e(l7,Pbe),e(Pbe,mpr),e(l7,gpr),e(l7,pQ),e(pQ,hpr),e(l7,ppr),e(se,upr),e(se,i7),e(i7,Bbe),e(Bbe,_pr),e(i7,bpr),e(i7,uQ),e(uQ,vpr),e(i7,Fpr),e(se,Tpr),e(se,d7),e(d7,Ibe),e(Ibe,Mpr),e(d7,Epr),e(d7,_Q),e(_Q,Cpr),e(d7,wpr),e(se,Apr),e(se,c7),e(c7,qbe),e(qbe,ypr),e(c7,Lpr),e(c7,bQ),e(bQ,xpr),e(c7,$pr),e(se,kpr),e(se,f7),e(f7,Nbe),e(Nbe,Spr),e(f7,Rpr),e(f7,vQ),e(vQ,Ppr),e(f7,Bpr),e(se,Ipr),e(se,m7),e(m7,jbe),e(jbe,qpr),e(m7,Npr),e(m7,FQ),e(FQ,jpr),e(m7,Dpr),e(se,Gpr),e(se,g7),e(g7,Dbe),e(Dbe,Opr),e(g7,Vpr),e(g7,TQ),e(TQ,Xpr),e(g7,zpr),e(Ar,Wpr),M(h7,Ar,null),b(f,tje,_),b(f,Qd,_),e(Qd,p7),e(p7,Gbe),M(_L,Gbe,null),e(Qd,Qpr),e(Qd,Obe),e(Obe,Hpr),b(f,aje,_),b(f,Zo,_),M(bL,Zo,null),e(Zo,Upr),e(Zo,Hd),e(Hd,Jpr),e(Hd,MQ),e(MQ,Ypr),e(Hd,Kpr),e(Hd,EQ),e(EQ,Zpr),e(Hd,eur),e(Zo,our),e(Zo,vL),e(vL,rur),e(vL,Vbe),e(Vbe,tur),e(vL,aur),e(Zo,nur),e(Zo,xt),M(FL,xt,null),e(xt,sur),e(xt,Xbe),e(Xbe,lur),e(xt,iur),e(xt,Ud),e(Ud,dur),e(Ud,zbe),e(zbe,cur),e(Ud,fur),e(Ud,CQ),e(CQ,mur),e(Ud,gur),e(xt,hur),M(u7,xt,null),e(Zo,pur),e(Zo,yr),M(TL,yr,null),e(yr,uur),e(yr,Wbe),e(Wbe,_ur),e(yr,bur),e(yr,en),e(en,vur),e(en,Qbe),e(Qbe,Fur),e(en,Tur),e(en,Hbe),e(Hbe,Mur),e(en,Eur),e(en,Ube),e(Ube,Cur),e(en,wur),e(yr,Aur),e(yr,Te),e(Te,_7),e(_7,Jbe),e(Jbe,yur),e(_7,Lur),e(_7,wQ),e(wQ,xur),e(_7,$ur),e(Te,kur),e(Te,b7),e(b7,Ybe),e(Ybe,Sur),e(b7,Rur),e(b7,AQ),e(AQ,Pur),e(b7,Bur),e(Te,Iur),e(Te,v7),e(v7,Kbe),e(Kbe,qur),e(v7,Nur),e(v7,yQ),e(yQ,jur),e(v7,Dur),e(Te,Gur),e(Te,F7),e(F7,Zbe),e(Zbe,Our),e(F7,Vur),e(F7,LQ),e(LQ,Xur),e(F7,zur),e(Te,Wur),e(Te,T7),e(T7,e2e),e(e2e,Qur),e(T7,Hur),e(T7,xQ),e(xQ,Uur),e(T7,Jur),e(Te,Yur),e(Te,M7),e(M7,o2e),e(o2e,Kur),e(M7,Zur),e(M7,$Q),e($Q,e_r),e(M7,o_r),e(Te,r_r),e(Te,E7),e(E7,r2e),e(r2e,t_r),e(E7,a_r),e(E7,kQ),e(kQ,n_r),e(E7,s_r),e(Te,l_r),e(Te,C7),e(C7,t2e),e(t2e,i_r),e(C7,d_r),e(C7,SQ),e(SQ,c_r),e(C7,f_r),e(Te,m_r),e(Te,w7),e(w7,a2e),e(a2e,g_r),e(w7,h_r),e(w7,RQ),e(RQ,p_r),e(w7,u_r),e(Te,__r),e(Te,A7),e(A7,n2e),e(n2e,b_r),e(A7,v_r),e(A7,PQ),e(PQ,F_r),e(A7,T_r),e(Te,M_r),e(Te,y7),e(y7,s2e),e(s2e,E_r),e(y7,C_r),e(y7,BQ),e(BQ,w_r),e(y7,A_r),e(Te,y_r),e(Te,L7),e(L7,l2e),e(l2e,L_r),e(L7,x_r),e(L7,IQ),e(IQ,$_r),e(L7,k_r),e(Te,S_r),e(Te,x7),e(x7,i2e),e(i2e,R_r),e(x7,P_r),e(x7,qQ),e(qQ,B_r),e(x7,I_r),e(yr,q_r),M($7,yr,null),b(f,nje,_),b(f,Jd,_),e(Jd,k7),e(k7,d2e),M(ML,d2e,null),e(Jd,N_r),e(Jd,c2e),e(c2e,j_r),b(f,sje,_),b(f,er,_),M(EL,er,null),e(er,D_r),e(er,Yd),e(Yd,G_r),e(Yd,NQ),e(NQ,O_r),e(Yd,V_r),e(Yd,jQ),e(jQ,X_r),e(Yd,z_r),e(er,W_r),e(er,CL),e(CL,Q_r),e(CL,f2e),e(f2e,H_r),e(CL,U_r),e(er,J_r),e(er,$t),M(wL,$t,null),e($t,Y_r),e($t,m2e),e(m2e,K_r),e($t,Z_r),e($t,Kd),e(Kd,e1r),e(Kd,g2e),e(g2e,o1r),e(Kd,r1r),e(Kd,DQ),e(DQ,t1r),e(Kd,a1r),e($t,n1r),M(S7,$t,null),e(er,s1r),e(er,Lr),M(AL,Lr,null),e(Lr,l1r),e(Lr,h2e),e(h2e,i1r),e(Lr,d1r),e(Lr,on),e(on,c1r),e(on,p2e),e(p2e,f1r),e(on,m1r),e(on,u2e),e(u2e,g1r),e(on,h1r),e(on,_2e),e(_2e,p1r),e(on,u1r),e(Lr,_1r),e(Lr,rn),e(rn,R7),e(R7,b2e),e(b2e,b1r),e(R7,v1r),e(R7,GQ),e(GQ,F1r),e(R7,T1r),e(rn,M1r),e(rn,P7),e(P7,v2e),e(v2e,E1r),e(P7,C1r),e(P7,OQ),e(OQ,w1r),e(P7,A1r),e(rn,y1r),e(rn,B7),e(B7,F2e),e(F2e,L1r),e(B7,x1r),e(B7,VQ),e(VQ,$1r),e(B7,k1r),e(rn,S1r),e(rn,I7),e(I7,T2e),e(T2e,R1r),e(I7,P1r),e(I7,XQ),e(XQ,B1r),e(I7,I1r),e(Lr,q1r),M(q7,Lr,null),b(f,lje,_),b(f,Zd,_),e(Zd,N7),e(N7,M2e),M(yL,M2e,null),e(Zd,N1r),e(Zd,E2e),e(E2e,j1r),b(f,ije,_),b(f,or,_),M(LL,or,null),e(or,D1r),e(or,ec),e(ec,G1r),e(ec,zQ),e(zQ,O1r),e(ec,V1r),e(ec,WQ),e(WQ,X1r),e(ec,z1r),e(or,W1r),e(or,xL),e(xL,Q1r),e(xL,C2e),e(C2e,H1r),e(xL,U1r),e(or,J1r),e(or,kt),M($L,kt,null),e(kt,Y1r),e(kt,w2e),e(w2e,K1r),e(kt,Z1r),e(kt,oc),e(oc,e8r),e(oc,A2e),e(A2e,o8r),e(oc,r8r),e(oc,QQ),e(QQ,t8r),e(oc,a8r),e(kt,n8r),M(j7,kt,null),e(or,s8r),e(or,xr),M(kL,xr,null),e(xr,l8r),e(xr,y2e),e(y2e,i8r),e(xr,d8r),e(xr,tn),e(tn,c8r),e(tn,L2e),e(L2e,f8r),e(tn,m8r),e(tn,x2e),e(x2e,g8r),e(tn,h8r),e(tn,$2e),e($2e,p8r),e(tn,u8r),e(xr,_8r),e(xr,ie),e(ie,D7),e(D7,k2e),e(k2e,b8r),e(D7,v8r),e(D7,HQ),e(HQ,F8r),e(D7,T8r),e(ie,M8r),e(ie,G7),e(G7,S2e),e(S2e,E8r),e(G7,C8r),e(G7,UQ),e(UQ,w8r),e(G7,A8r),e(ie,y8r),e(ie,O7),e(O7,R2e),e(R2e,L8r),e(O7,x8r),e(O7,JQ),e(JQ,$8r),e(O7,k8r),e(ie,S8r),e(ie,V7),e(V7,P2e),e(P2e,R8r),e(V7,P8r),e(V7,YQ),e(YQ,B8r),e(V7,I8r),e(ie,q8r),e(ie,X7),e(X7,B2e),e(B2e,N8r),e(X7,j8r),e(X7,KQ),e(KQ,D8r),e(X7,G8r),e(ie,O8r),e(ie,z7),e(z7,I2e),e(I2e,V8r),e(z7,X8r),e(z7,ZQ),e(ZQ,z8r),e(z7,W8r),e(ie,Q8r),e(ie,W7),e(W7,q2e),e(q2e,H8r),e(W7,U8r),e(W7,eH),e(eH,J8r),e(W7,Y8r),e(ie,K8r),e(ie,Q7),e(Q7,N2e),e(N2e,Z8r),e(Q7,ebr),e(Q7,oH),e(oH,obr),e(Q7,rbr),e(ie,tbr),e(ie,H7),e(H7,j2e),e(j2e,abr),e(H7,nbr),e(H7,rH),e(rH,sbr),e(H7,lbr),e(ie,ibr),e(ie,U7),e(U7,D2e),e(D2e,dbr),e(U7,cbr),e(U7,tH),e(tH,fbr),e(U7,mbr),e(ie,gbr),e(ie,J7),e(J7,G2e),e(G2e,hbr),e(J7,pbr),e(J7,aH),e(aH,ubr),e(J7,_br),e(ie,bbr),e(ie,Y7),e(Y7,O2e),e(O2e,vbr),e(Y7,Fbr),e(Y7,nH),e(nH,Tbr),e(Y7,Mbr),e(ie,Ebr),e(ie,K7),e(K7,V2e),e(V2e,Cbr),e(K7,wbr),e(K7,sH),e(sH,Abr),e(K7,ybr),e(ie,Lbr),e(ie,Z7),e(Z7,X2e),e(X2e,xbr),e(Z7,$br),e(Z7,lH),e(lH,kbr),e(Z7,Sbr),e(ie,Rbr),e(ie,eM),e(eM,z2e),e(z2e,Pbr),e(eM,Bbr),e(eM,iH),e(iH,Ibr),e(eM,qbr),e(ie,Nbr),e(ie,oM),e(oM,W2e),e(W2e,jbr),e(oM,Dbr),e(oM,dH),e(dH,Gbr),e(oM,Obr),e(ie,Vbr),e(ie,rM),e(rM,Q2e),e(Q2e,Xbr),e(rM,zbr),e(rM,cH),e(cH,Wbr),e(rM,Qbr),e(ie,Hbr),e(ie,tM),e(tM,H2e),e(H2e,Ubr),e(tM,Jbr),e(tM,fH),e(fH,Ybr),e(tM,Kbr),e(ie,Zbr),e(ie,aM),e(aM,U2e),e(U2e,e2r),e(aM,o2r),e(aM,mH),e(mH,r2r),e(aM,t2r),e(ie,a2r),e(ie,nM),e(nM,J2e),e(J2e,n2r),e(nM,s2r),e(nM,gH),e(gH,l2r),e(nM,i2r),e(xr,d2r),M(sM,xr,null),b(f,dje,_),b(f,rc,_),e(rc,lM),e(lM,Y2e),M(SL,Y2e,null),e(rc,c2r),e(rc,K2e),e(K2e,f2r),b(f,cje,_),b(f,rr,_),M(RL,rr,null),e(rr,m2r),e(rr,tc),e(tc,g2r),e(tc,hH),e(hH,h2r),e(tc,p2r),e(tc,pH),e(pH,u2r),e(tc,_2r),e(rr,b2r),e(rr,PL),e(PL,v2r),e(PL,Z2e),e(Z2e,F2r),e(PL,T2r),e(rr,M2r),e(rr,St),M(BL,St,null),e(St,E2r),e(St,eve),e(eve,C2r),e(St,w2r),e(St,ac),e(ac,A2r),e(ac,ove),e(ove,y2r),e(ac,L2r),e(ac,uH),e(uH,x2r),e(ac,$2r),e(St,k2r),M(iM,St,null),e(rr,S2r),e(rr,$r),M(IL,$r,null),e($r,R2r),e($r,rve),e(rve,P2r),e($r,B2r),e($r,an),e(an,I2r),e(an,tve),e(tve,q2r),e(an,N2r),e(an,ave),e(ave,j2r),e(an,D2r),e(an,nve),e(nve,G2r),e(an,O2r),e($r,V2r),e($r,ye),e(ye,dM),e(dM,sve),e(sve,X2r),e(dM,z2r),e(dM,_H),e(_H,W2r),e(dM,Q2r),e(ye,H2r),e(ye,cM),e(cM,lve),e(lve,U2r),e(cM,J2r),e(cM,bH),e(bH,Y2r),e(cM,K2r),e(ye,Z2r),e(ye,fM),e(fM,ive),e(ive,evr),e(fM,ovr),e(fM,vH),e(vH,rvr),e(fM,tvr),e(ye,avr),e(ye,mM),e(mM,dve),e(dve,nvr),e(mM,svr),e(mM,FH),e(FH,lvr),e(mM,ivr),e(ye,dvr),e(ye,gM),e(gM,cve),e(cve,cvr),e(gM,fvr),e(gM,TH),e(TH,mvr),e(gM,gvr),e(ye,hvr),e(ye,hM),e(hM,fve),e(fve,pvr),e(hM,uvr),e(hM,MH),e(MH,_vr),e(hM,bvr),e(ye,vvr),e(ye,pM),e(pM,mve),e(mve,Fvr),e(pM,Tvr),e(pM,EH),e(EH,Mvr),e(pM,Evr),e(ye,Cvr),e(ye,uM),e(uM,gve),e(gve,wvr),e(uM,Avr),e(uM,CH),e(CH,yvr),e(uM,Lvr),e(ye,xvr),e(ye,_M),e(_M,hve),e(hve,$vr),e(_M,kvr),e(_M,wH),e(wH,Svr),e(_M,Rvr),e(ye,Pvr),e(ye,bM),e(bM,pve),e(pve,Bvr),e(bM,Ivr),e(bM,AH),e(AH,qvr),e(bM,Nvr),e($r,jvr),M(vM,$r,null),b(f,fje,_),b(f,nc,_),e(nc,FM),e(FM,uve),M(qL,uve,null),e(nc,Dvr),e(nc,_ve),e(_ve,Gvr),b(f,mje,_),b(f,tr,_),M(NL,tr,null),e(tr,Ovr),e(tr,sc),e(sc,Vvr),e(sc,yH),e(yH,Xvr),e(sc,zvr),e(sc,LH),e(LH,Wvr),e(sc,Qvr),e(tr,Hvr),e(tr,jL),e(jL,Uvr),e(jL,bve),e(bve,Jvr),e(jL,Yvr),e(tr,Kvr),e(tr,Rt),M(DL,Rt,null),e(Rt,Zvr),e(Rt,vve),e(vve,e3r),e(Rt,o3r),e(Rt,lc),e(lc,r3r),e(lc,Fve),e(Fve,t3r),e(lc,a3r),e(lc,xH),e(xH,n3r),e(lc,s3r),e(Rt,l3r),M(TM,Rt,null),e(tr,i3r),e(tr,kr),M(GL,kr,null),e(kr,d3r),e(kr,Tve),e(Tve,c3r),e(kr,f3r),e(kr,nn),e(nn,m3r),e(nn,Mve),e(Mve,g3r),e(nn,h3r),e(nn,Eve),e(Eve,p3r),e(nn,u3r),e(nn,Cve),e(Cve,_3r),e(nn,b3r),e(kr,v3r),e(kr,oe),e(oe,MM),e(MM,wve),e(wve,F3r),e(MM,T3r),e(MM,$H),e($H,M3r),e(MM,E3r),e(oe,C3r),e(oe,EM),e(EM,Ave),e(Ave,w3r),e(EM,A3r),e(EM,kH),e(kH,y3r),e(EM,L3r),e(oe,x3r),e(oe,CM),e(CM,yve),e(yve,$3r),e(CM,k3r),e(CM,SH),e(SH,S3r),e(CM,R3r),e(oe,P3r),e(oe,wM),e(wM,Lve),e(Lve,B3r),e(wM,I3r),e(wM,RH),e(RH,q3r),e(wM,N3r),e(oe,j3r),e(oe,AM),e(AM,xve),e(xve,D3r),e(AM,G3r),e(AM,PH),e(PH,O3r),e(AM,V3r),e(oe,X3r),e(oe,yM),e(yM,$ve),e($ve,z3r),e(yM,W3r),e(yM,BH),e(BH,Q3r),e(yM,H3r),e(oe,U3r),e(oe,LM),e(LM,kve),e(kve,J3r),e(LM,Y3r),e(LM,IH),e(IH,K3r),e(LM,Z3r),e(oe,eFr),e(oe,xM),e(xM,Sve),e(Sve,oFr),e(xM,rFr),e(xM,qH),e(qH,tFr),e(xM,aFr),e(oe,nFr),e(oe,$M),e($M,Rve),e(Rve,sFr),e($M,lFr),e($M,NH),e(NH,iFr),e($M,dFr),e(oe,cFr),e(oe,kM),e(kM,Pve),e(Pve,fFr),e(kM,mFr),e(kM,jH),e(jH,gFr),e(kM,hFr),e(oe,pFr),e(oe,SM),e(SM,Bve),e(Bve,uFr),e(SM,_Fr),e(SM,DH),e(DH,bFr),e(SM,vFr),e(oe,FFr),e(oe,RM),e(RM,Ive),e(Ive,TFr),e(RM,MFr),e(RM,GH),e(GH,EFr),e(RM,CFr),e(oe,wFr),e(oe,PM),e(PM,qve),e(qve,AFr),e(PM,yFr),e(PM,OH),e(OH,LFr),e(PM,xFr),e(oe,$Fr),e(oe,BM),e(BM,Nve),e(Nve,kFr),e(BM,SFr),e(BM,VH),e(VH,RFr),e(BM,PFr),e(oe,BFr),e(oe,IM),e(IM,jve),e(jve,IFr),e(IM,qFr),e(IM,XH),e(XH,NFr),e(IM,jFr),e(oe,DFr),e(oe,qM),e(qM,Dve),e(Dve,GFr),e(qM,OFr),e(qM,zH),e(zH,VFr),e(qM,XFr),e(oe,zFr),e(oe,NM),e(NM,Gve),e(Gve,WFr),e(NM,QFr),e(NM,WH),e(WH,HFr),e(NM,UFr),e(oe,JFr),e(oe,jM),e(jM,Ove),e(Ove,YFr),e(jM,KFr),e(jM,QH),e(QH,ZFr),e(jM,eTr),e(oe,oTr),e(oe,DM),e(DM,Vve),e(Vve,rTr),e(DM,tTr),e(DM,HH),e(HH,aTr),e(DM,nTr),e(oe,sTr),e(oe,GM),e(GM,Xve),e(Xve,lTr),e(GM,iTr),e(GM,UH),e(UH,dTr),e(GM,cTr),e(oe,fTr),e(oe,OM),e(OM,zve),e(zve,mTr),e(OM,gTr),e(OM,JH),e(JH,hTr),e(OM,pTr),e(oe,uTr),e(oe,VM),e(VM,Wve),e(Wve,_Tr),e(VM,bTr),e(VM,YH),e(YH,vTr),e(VM,FTr),e(oe,TTr),e(oe,XM),e(XM,Qve),e(Qve,MTr),e(XM,ETr),e(XM,KH),e(KH,CTr),e(XM,wTr),e(oe,ATr),e(oe,zM),e(zM,Hve),e(Hve,yTr),e(zM,LTr),e(zM,ZH),e(ZH,xTr),e(zM,$Tr),e(oe,kTr),e(oe,WM),e(WM,Uve),e(Uve,STr),e(WM,RTr),e(WM,eU),e(eU,PTr),e(WM,BTr),e(oe,ITr),e(oe,QM),e(QM,Jve),e(Jve,qTr),e(QM,NTr),e(QM,oU),e(oU,jTr),e(QM,DTr),e(kr,GTr),M(HM,kr,null),b(f,gje,_),b(f,ic,_),e(ic,UM),e(UM,Yve),M(OL,Yve,null),e(ic,OTr),e(ic,Kve),e(Kve,VTr),b(f,hje,_),b(f,ar,_),M(VL,ar,null),e(ar,XTr),e(ar,dc),e(dc,zTr),e(dc,rU),e(rU,WTr),e(dc,QTr),e(dc,tU),e(tU,HTr),e(dc,UTr),e(ar,JTr),e(ar,XL),e(XL,YTr),e(XL,Zve),e(Zve,KTr),e(XL,ZTr),e(ar,e7r),e(ar,Pt),M(zL,Pt,null),e(Pt,o7r),e(Pt,e3e),e(e3e,r7r),e(Pt,t7r),e(Pt,cc),e(cc,a7r),e(cc,o3e),e(o3e,n7r),e(cc,s7r),e(cc,aU),e(aU,l7r),e(cc,i7r),e(Pt,d7r),M(JM,Pt,null),e(ar,c7r),e(ar,Sr),M(WL,Sr,null),e(Sr,f7r),e(Sr,r3e),e(r3e,m7r),e(Sr,g7r),e(Sr,sn),e(sn,h7r),e(sn,t3e),e(t3e,p7r),e(sn,u7r),e(sn,a3e),e(a3e,_7r),e(sn,b7r),e(sn,n3e),e(n3e,v7r),e(sn,F7r),e(Sr,T7r),e(Sr,pe),e(pe,YM),e(YM,s3e),e(s3e,M7r),e(YM,E7r),e(YM,nU),e(nU,C7r),e(YM,w7r),e(pe,A7r),e(pe,KM),e(KM,l3e),e(l3e,y7r),e(KM,L7r),e(KM,sU),e(sU,x7r),e(KM,$7r),e(pe,k7r),e(pe,ZM),e(ZM,i3e),e(i3e,S7r),e(ZM,R7r),e(ZM,lU),e(lU,P7r),e(ZM,B7r),e(pe,I7r),e(pe,e4),e(e4,d3e),e(d3e,q7r),e(e4,N7r),e(e4,iU),e(iU,j7r),e(e4,D7r),e(pe,G7r),e(pe,o4),e(o4,c3e),e(c3e,O7r),e(o4,V7r),e(o4,dU),e(dU,X7r),e(o4,z7r),e(pe,W7r),e(pe,r4),e(r4,f3e),e(f3e,Q7r),e(r4,H7r),e(r4,cU),e(cU,U7r),e(r4,J7r),e(pe,Y7r),e(pe,t4),e(t4,m3e),e(m3e,K7r),e(t4,Z7r),e(t4,fU),e(fU,eMr),e(t4,oMr),e(pe,rMr),e(pe,a4),e(a4,g3e),e(g3e,tMr),e(a4,aMr),e(a4,mU),e(mU,nMr),e(a4,sMr),e(pe,lMr),e(pe,n4),e(n4,h3e),e(h3e,iMr),e(n4,dMr),e(n4,gU),e(gU,cMr),e(n4,fMr),e(pe,mMr),e(pe,s4),e(s4,p3e),e(p3e,gMr),e(s4,hMr),e(s4,hU),e(hU,pMr),e(s4,uMr),e(pe,_Mr),e(pe,l4),e(l4,u3e),e(u3e,bMr),e(l4,vMr),e(l4,pU),e(pU,FMr),e(l4,TMr),e(pe,MMr),e(pe,i4),e(i4,_3e),e(_3e,EMr),e(i4,CMr),e(i4,uU),e(uU,wMr),e(i4,AMr),e(pe,yMr),e(pe,d4),e(d4,b3e),e(b3e,LMr),e(d4,xMr),e(d4,_U),e(_U,$Mr),e(d4,kMr),e(pe,SMr),e(pe,c4),e(c4,v3e),e(v3e,RMr),e(c4,PMr),e(c4,bU),e(bU,BMr),e(c4,IMr),e(pe,qMr),e(pe,f4),e(f4,F3e),e(F3e,NMr),e(f4,jMr),e(f4,vU),e(vU,DMr),e(f4,GMr),e(pe,OMr),e(pe,m4),e(m4,T3e),e(T3e,VMr),e(m4,XMr),e(m4,FU),e(FU,zMr),e(m4,WMr),e(pe,QMr),e(pe,g4),e(g4,M3e),e(M3e,HMr),e(g4,UMr),e(g4,TU),e(TU,JMr),e(g4,YMr),e(Sr,KMr),M(h4,Sr,null),b(f,pje,_),b(f,fc,_),e(fc,p4),e(p4,E3e),M(QL,E3e,null),e(fc,ZMr),e(fc,C3e),e(C3e,e4r),b(f,uje,_),b(f,nr,_),M(HL,nr,null),e(nr,o4r),e(nr,mc),e(mc,r4r),e(mc,MU),e(MU,t4r),e(mc,a4r),e(mc,EU),e(EU,n4r),e(mc,s4r),e(nr,l4r),e(nr,UL),e(UL,i4r),e(UL,w3e),e(w3e,d4r),e(UL,c4r),e(nr,f4r),e(nr,Bt),M(JL,Bt,null),e(Bt,m4r),e(Bt,A3e),e(A3e,g4r),e(Bt,h4r),e(Bt,gc),e(gc,p4r),e(gc,y3e),e(y3e,u4r),e(gc,_4r),e(gc,CU),e(CU,b4r),e(gc,v4r),e(Bt,F4r),M(u4,Bt,null),e(nr,T4r),e(nr,Rr),M(YL,Rr,null),e(Rr,M4r),e(Rr,L3e),e(L3e,E4r),e(Rr,C4r),e(Rr,ln),e(ln,w4r),e(ln,x3e),e(x3e,A4r),e(ln,y4r),e(ln,$3e),e($3e,L4r),e(ln,x4r),e(ln,k3e),e(k3e,$4r),e(ln,k4r),e(Rr,S4r),e(Rr,KL),e(KL,_4),e(_4,S3e),e(S3e,R4r),e(_4,P4r),e(_4,wU),e(wU,B4r),e(_4,I4r),e(KL,q4r),e(KL,b4),e(b4,R3e),e(R3e,N4r),e(b4,j4r),e(b4,AU),e(AU,D4r),e(b4,G4r),e(Rr,O4r),M(v4,Rr,null),b(f,_je,_),b(f,hc,_),e(hc,F4),e(F4,P3e),M(ZL,P3e,null),e(hc,V4r),e(hc,B3e),e(B3e,X4r),b(f,bje,_),b(f,sr,_),M(e9,sr,null),e(sr,z4r),e(sr,pc),e(pc,W4r),e(pc,yU),e(yU,Q4r),e(pc,H4r),e(pc,LU),e(LU,U4r),e(pc,J4r),e(sr,Y4r),e(sr,o9),e(o9,K4r),e(o9,I3e),e(I3e,Z4r),e(o9,eEr),e(sr,oEr),e(sr,It),M(r9,It,null),e(It,rEr),e(It,q3e),e(q3e,tEr),e(It,aEr),e(It,uc),e(uc,nEr),e(uc,N3e),e(N3e,sEr),e(uc,lEr),e(uc,xU),e(xU,iEr),e(uc,dEr),e(It,cEr),M(T4,It,null),e(sr,fEr),e(sr,Pr),M(t9,Pr,null),e(Pr,mEr),e(Pr,j3e),e(j3e,gEr),e(Pr,hEr),e(Pr,dn),e(dn,pEr),e(dn,D3e),e(D3e,uEr),e(dn,_Er),e(dn,G3e),e(G3e,bEr),e(dn,vEr),e(dn,O3e),e(O3e,FEr),e(dn,TEr),e(Pr,MEr),e(Pr,V3e),e(V3e,M4),e(M4,X3e),e(X3e,EEr),e(M4,CEr),e(M4,$U),e($U,wEr),e(M4,AEr),e(Pr,yEr),M(E4,Pr,null),b(f,vje,_),b(f,_c,_),e(_c,C4),e(C4,z3e),M(a9,z3e,null),e(_c,LEr),e(_c,W3e),e(W3e,xEr),b(f,Fje,_),b(f,lr,_),M(n9,lr,null),e(lr,$Er),e(lr,bc),e(bc,kEr),e(bc,kU),e(kU,SEr),e(bc,REr),e(bc,SU),e(SU,PEr),e(bc,BEr),e(lr,IEr),e(lr,s9),e(s9,qEr),e(s9,Q3e),e(Q3e,NEr),e(s9,jEr),e(lr,DEr),e(lr,qt),M(l9,qt,null),e(qt,GEr),e(qt,H3e),e(H3e,OEr),e(qt,VEr),e(qt,vc),e(vc,XEr),e(vc,U3e),e(U3e,zEr),e(vc,WEr),e(vc,RU),e(RU,QEr),e(vc,HEr),e(qt,UEr),M(w4,qt,null),e(lr,JEr),e(lr,Br),M(i9,Br,null),e(Br,YEr),e(Br,J3e),e(J3e,KEr),e(Br,ZEr),e(Br,cn),e(cn,eCr),e(cn,Y3e),e(Y3e,oCr),e(cn,rCr),e(cn,K3e),e(K3e,tCr),e(cn,aCr),e(cn,Z3e),e(Z3e,nCr),e(cn,sCr),e(Br,lCr),e(Br,de),e(de,A4),e(A4,eFe),e(eFe,iCr),e(A4,dCr),e(A4,PU),e(PU,cCr),e(A4,fCr),e(de,mCr),e(de,y4),e(y4,oFe),e(oFe,gCr),e(y4,hCr),e(y4,BU),e(BU,pCr),e(y4,uCr),e(de,_Cr),e(de,L4),e(L4,rFe),e(rFe,bCr),e(L4,vCr),e(L4,IU),e(IU,FCr),e(L4,TCr),e(de,MCr),e(de,x4),e(x4,tFe),e(tFe,ECr),e(x4,CCr),e(x4,qU),e(qU,wCr),e(x4,ACr),e(de,yCr),e(de,$4),e($4,aFe),e(aFe,LCr),e($4,xCr),e($4,NU),e(NU,$Cr),e($4,kCr),e(de,SCr),e(de,k4),e(k4,nFe),e(nFe,RCr),e(k4,PCr),e(k4,jU),e(jU,BCr),e(k4,ICr),e(de,qCr),e(de,S4),e(S4,sFe),e(sFe,NCr),e(S4,jCr),e(S4,DU),e(DU,DCr),e(S4,GCr),e(de,OCr),e(de,R4),e(R4,lFe),e(lFe,VCr),e(R4,XCr),e(R4,GU),e(GU,zCr),e(R4,WCr),e(de,QCr),e(de,P4),e(P4,iFe),e(iFe,HCr),e(P4,UCr),e(P4,OU),e(OU,JCr),e(P4,YCr),e(de,KCr),e(de,B4),e(B4,dFe),e(dFe,ZCr),e(B4,e5r),e(B4,VU),e(VU,o5r),e(B4,r5r),e(de,t5r),e(de,I4),e(I4,cFe),e(cFe,a5r),e(I4,n5r),e(I4,XU),e(XU,s5r),e(I4,l5r),e(de,i5r),e(de,q4),e(q4,fFe),e(fFe,d5r),e(q4,c5r),e(q4,zU),e(zU,f5r),e(q4,m5r),e(de,g5r),e(de,N4),e(N4,mFe),e(mFe,h5r),e(N4,p5r),e(N4,WU),e(WU,u5r),e(N4,_5r),e(de,b5r),e(de,j4),e(j4,gFe),e(gFe,v5r),e(j4,F5r),e(j4,QU),e(QU,T5r),e(j4,M5r),e(de,E5r),e(de,D4),e(D4,hFe),e(hFe,C5r),e(D4,w5r),e(D4,HU),e(HU,A5r),e(D4,y5r),e(de,L5r),e(de,G4),e(G4,pFe),e(pFe,x5r),e(G4,$5r),e(G4,UU),e(UU,k5r),e(G4,S5r),e(de,R5r),e(de,O4),e(O4,uFe),e(uFe,P5r),e(O4,B5r),e(O4,JU),e(JU,I5r),e(O4,q5r),e(de,N5r),e(de,V4),e(V4,_Fe),e(_Fe,j5r),e(V4,D5r),e(V4,YU),e(YU,G5r),e(V4,O5r),e(de,V5r),e(de,X4),e(X4,bFe),e(bFe,X5r),e(X4,z5r),e(X4,KU),e(KU,W5r),e(X4,Q5r),e(de,H5r),e(de,z4),e(z4,vFe),e(vFe,U5r),e(z4,J5r),e(z4,ZU),e(ZU,Y5r),e(z4,K5r),e(Br,Z5r),M(W4,Br,null),b(f,Tje,_),b(f,Fc,_),e(Fc,Q4),e(Q4,FFe),M(d9,FFe,null),e(Fc,ewr),e(Fc,TFe),e(TFe,owr),b(f,Mje,_),b(f,ir,_),M(c9,ir,null),e(ir,rwr),e(ir,Tc),e(Tc,twr),e(Tc,eJ),e(eJ,awr),e(Tc,nwr),e(Tc,oJ),e(oJ,swr),e(Tc,lwr),e(ir,iwr),e(ir,f9),e(f9,dwr),e(f9,MFe),e(MFe,cwr),e(f9,fwr),e(ir,mwr),e(ir,Nt),M(m9,Nt,null),e(Nt,gwr),e(Nt,EFe),e(EFe,hwr),e(Nt,pwr),e(Nt,Mc),e(Mc,uwr),e(Mc,CFe),e(CFe,_wr),e(Mc,bwr),e(Mc,rJ),e(rJ,vwr),e(Mc,Fwr),e(Nt,Twr),M(H4,Nt,null),e(ir,Mwr),e(ir,Ir),M(g9,Ir,null),e(Ir,Ewr),e(Ir,wFe),e(wFe,Cwr),e(Ir,wwr),e(Ir,fn),e(fn,Awr),e(fn,AFe),e(AFe,ywr),e(fn,Lwr),e(fn,yFe),e(yFe,xwr),e(fn,$wr),e(fn,LFe),e(LFe,kwr),e(fn,Swr),e(Ir,Rwr),e(Ir,ce),e(ce,U4),e(U4,xFe),e(xFe,Pwr),e(U4,Bwr),e(U4,tJ),e(tJ,Iwr),e(U4,qwr),e(ce,Nwr),e(ce,J4),e(J4,$Fe),e($Fe,jwr),e(J4,Dwr),e(J4,aJ),e(aJ,Gwr),e(J4,Owr),e(ce,Vwr),e(ce,Y4),e(Y4,kFe),e(kFe,Xwr),e(Y4,zwr),e(Y4,nJ),e(nJ,Wwr),e(Y4,Qwr),e(ce,Hwr),e(ce,K4),e(K4,SFe),e(SFe,Uwr),e(K4,Jwr),e(K4,sJ),e(sJ,Ywr),e(K4,Kwr),e(ce,Zwr),e(ce,Z4),e(Z4,RFe),e(RFe,e0r),e(Z4,o0r),e(Z4,lJ),e(lJ,r0r),e(Z4,t0r),e(ce,a0r),e(ce,eE),e(eE,PFe),e(PFe,n0r),e(eE,s0r),e(eE,iJ),e(iJ,l0r),e(eE,i0r),e(ce,d0r),e(ce,oE),e(oE,BFe),e(BFe,c0r),e(oE,f0r),e(oE,dJ),e(dJ,m0r),e(oE,g0r),e(ce,h0r),e(ce,rE),e(rE,IFe),e(IFe,p0r),e(rE,u0r),e(rE,cJ),e(cJ,_0r),e(rE,b0r),e(ce,v0r),e(ce,tE),e(tE,qFe),e(qFe,F0r),e(tE,T0r),e(tE,fJ),e(fJ,M0r),e(tE,E0r),e(ce,C0r),e(ce,aE),e(aE,NFe),e(NFe,w0r),e(aE,A0r),e(aE,mJ),e(mJ,y0r),e(aE,L0r),e(ce,x0r),e(ce,nE),e(nE,jFe),e(jFe,$0r),e(nE,k0r),e(nE,gJ),e(gJ,S0r),e(nE,R0r),e(ce,P0r),e(ce,sE),e(sE,DFe),e(DFe,B0r),e(sE,I0r),e(sE,hJ),e(hJ,q0r),e(sE,N0r),e(ce,j0r),e(ce,lE),e(lE,GFe),e(GFe,D0r),e(lE,G0r),e(lE,pJ),e(pJ,O0r),e(lE,V0r),e(ce,X0r),e(ce,iE),e(iE,OFe),e(OFe,z0r),e(iE,W0r),e(iE,uJ),e(uJ,Q0r),e(iE,H0r),e(ce,U0r),e(ce,dE),e(dE,VFe),e(VFe,J0r),e(dE,Y0r),e(dE,_J),e(_J,K0r),e(dE,Z0r),e(ce,eAr),e(ce,cE),e(cE,XFe),e(XFe,oAr),e(cE,rAr),e(cE,bJ),e(bJ,tAr),e(cE,aAr),e(ce,nAr),e(ce,fE),e(fE,zFe),e(zFe,sAr),e(fE,lAr),e(fE,vJ),e(vJ,iAr),e(fE,dAr),e(ce,cAr),e(ce,mE),e(mE,WFe),e(WFe,fAr),e(mE,mAr),e(mE,FJ),e(FJ,gAr),e(mE,hAr),e(ce,pAr),e(ce,gE),e(gE,QFe),e(QFe,uAr),e(gE,_Ar),e(gE,TJ),e(TJ,bAr),e(gE,vAr),e(ce,FAr),e(ce,hE),e(hE,HFe),e(HFe,TAr),e(hE,MAr),e(hE,MJ),e(MJ,EAr),e(hE,CAr),e(Ir,wAr),M(pE,Ir,null),b(f,Eje,_),b(f,Ec,_),e(Ec,uE),e(uE,UFe),M(h9,UFe,null),e(Ec,AAr),e(Ec,JFe),e(JFe,yAr),b(f,Cje,_),b(f,dr,_),M(p9,dr,null),e(dr,LAr),e(dr,Cc),e(Cc,xAr),e(Cc,EJ),e(EJ,$Ar),e(Cc,kAr),e(Cc,CJ),e(CJ,SAr),e(Cc,RAr),e(dr,PAr),e(dr,u9),e(u9,BAr),e(u9,YFe),e(YFe,IAr),e(u9,qAr),e(dr,NAr),e(dr,jt),M(_9,jt,null),e(jt,jAr),e(jt,KFe),e(KFe,DAr),e(jt,GAr),e(jt,wc),e(wc,OAr),e(wc,ZFe),e(ZFe,VAr),e(wc,XAr),e(wc,wJ),e(wJ,zAr),e(wc,WAr),e(jt,QAr),M(_E,jt,null),e(dr,HAr),e(dr,qr),M(b9,qr,null),e(qr,UAr),e(qr,eTe),e(eTe,JAr),e(qr,YAr),e(qr,mn),e(mn,KAr),e(mn,oTe),e(oTe,ZAr),e(mn,e6r),e(mn,rTe),e(rTe,o6r),e(mn,r6r),e(mn,tTe),e(tTe,t6r),e(mn,a6r),e(qr,n6r),e(qr,aTe),e(aTe,bE),e(bE,nTe),e(nTe,s6r),e(bE,l6r),e(bE,AJ),e(AJ,i6r),e(bE,d6r),e(qr,c6r),M(vE,qr,null),b(f,wje,_),b(f,Ac,_),e(Ac,FE),e(FE,sTe),M(v9,sTe,null),e(Ac,f6r),e(Ac,lTe),e(lTe,m6r),b(f,Aje,_),b(f,cr,_),M(F9,cr,null),e(cr,g6r),e(cr,yc),e(yc,h6r),e(yc,yJ),e(yJ,p6r),e(yc,u6r),e(yc,LJ),e(LJ,_6r),e(yc,b6r),e(cr,v6r),e(cr,T9),e(T9,F6r),e(T9,iTe),e(iTe,T6r),e(T9,M6r),e(cr,E6r),e(cr,Dt),M(M9,Dt,null),e(Dt,C6r),e(Dt,dTe),e(dTe,w6r),e(Dt,A6r),e(Dt,Lc),e(Lc,y6r),e(Lc,cTe),e(cTe,L6r),e(Lc,x6r),e(Lc,xJ),e(xJ,$6r),e(Lc,k6r),e(Dt,S6r),M(TE,Dt,null),e(cr,R6r),e(cr,Nr),M(E9,Nr,null),e(Nr,P6r),e(Nr,fTe),e(fTe,B6r),e(Nr,I6r),e(Nr,gn),e(gn,q6r),e(gn,mTe),e(mTe,N6r),e(gn,j6r),e(gn,gTe),e(gTe,D6r),e(gn,G6r),e(gn,hTe),e(hTe,O6r),e(gn,V6r),e(Nr,X6r),e(Nr,pTe),e(pTe,ME),e(ME,uTe),e(uTe,z6r),e(ME,W6r),e(ME,$J),e($J,Q6r),e(ME,H6r),e(Nr,U6r),M(EE,Nr,null),b(f,yje,_),b(f,xc,_),e(xc,CE),e(CE,_Te),M(C9,_Te,null),e(xc,J6r),e(xc,bTe),e(bTe,Y6r),b(f,Lje,_),b(f,fr,_),M(w9,fr,null),e(fr,K6r),e(fr,$c),e($c,Z6r),e($c,kJ),e(kJ,eyr),e($c,oyr),e($c,SJ),e(SJ,ryr),e($c,tyr),e(fr,ayr),e(fr,A9),e(A9,nyr),e(A9,vTe),e(vTe,syr),e(A9,lyr),e(fr,iyr),e(fr,Gt),M(y9,Gt,null),e(Gt,dyr),e(Gt,FTe),e(FTe,cyr),e(Gt,fyr),e(Gt,kc),e(kc,myr),e(kc,TTe),e(TTe,gyr),e(kc,hyr),e(kc,RJ),e(RJ,pyr),e(kc,uyr),e(Gt,_yr),M(wE,Gt,null),e(fr,byr),e(fr,jr),M(L9,jr,null),e(jr,vyr),e(jr,MTe),e(MTe,Fyr),e(jr,Tyr),e(jr,hn),e(hn,Myr),e(hn,ETe),e(ETe,Eyr),e(hn,Cyr),e(hn,CTe),e(CTe,wyr),e(hn,Ayr),e(hn,wTe),e(wTe,yyr),e(hn,Lyr),e(jr,xyr),e(jr,re),e(re,AE),e(AE,ATe),e(ATe,$yr),e(AE,kyr),e(AE,PJ),e(PJ,Syr),e(AE,Ryr),e(re,Pyr),e(re,yE),e(yE,yTe),e(yTe,Byr),e(yE,Iyr),e(yE,BJ),e(BJ,qyr),e(yE,Nyr),e(re,jyr),e(re,LE),e(LE,LTe),e(LTe,Dyr),e(LE,Gyr),e(LE,IJ),e(IJ,Oyr),e(LE,Vyr),e(re,Xyr),e(re,xE),e(xE,xTe),e(xTe,zyr),e(xE,Wyr),e(xE,qJ),e(qJ,Qyr),e(xE,Hyr),e(re,Uyr),e(re,$E),e($E,$Te),e($Te,Jyr),e($E,Yyr),e($E,NJ),e(NJ,Kyr),e($E,Zyr),e(re,eLr),e(re,kE),e(kE,kTe),e(kTe,oLr),e(kE,rLr),e(kE,jJ),e(jJ,tLr),e(kE,aLr),e(re,nLr),e(re,SE),e(SE,STe),e(STe,sLr),e(SE,lLr),e(SE,DJ),e(DJ,iLr),e(SE,dLr),e(re,cLr),e(re,RE),e(RE,RTe),e(RTe,fLr),e(RE,mLr),e(RE,GJ),e(GJ,gLr),e(RE,hLr),e(re,pLr),e(re,PE),e(PE,PTe),e(PTe,uLr),e(PE,_Lr),e(PE,OJ),e(OJ,bLr),e(PE,vLr),e(re,FLr),e(re,BE),e(BE,BTe),e(BTe,TLr),e(BE,MLr),e(BE,VJ),e(VJ,ELr),e(BE,CLr),e(re,wLr),e(re,IE),e(IE,ITe),e(ITe,ALr),e(IE,yLr),e(IE,XJ),e(XJ,LLr),e(IE,xLr),e(re,$Lr),e(re,qE),e(qE,qTe),e(qTe,kLr),e(qE,SLr),e(qE,zJ),e(zJ,RLr),e(qE,PLr),e(re,BLr),e(re,NE),e(NE,NTe),e(NTe,ILr),e(NE,qLr),e(NE,WJ),e(WJ,NLr),e(NE,jLr),e(re,DLr),e(re,jE),e(jE,jTe),e(jTe,GLr),e(jE,OLr),e(jE,QJ),e(QJ,VLr),e(jE,XLr),e(re,zLr),e(re,DE),e(DE,DTe),e(DTe,WLr),e(DE,QLr),e(DE,HJ),e(HJ,HLr),e(DE,ULr),e(re,JLr),e(re,GE),e(GE,GTe),e(GTe,YLr),e(GE,KLr),e(GE,UJ),e(UJ,ZLr),e(GE,e9r),e(re,o9r),e(re,OE),e(OE,OTe),e(OTe,r9r),e(OE,t9r),e(OE,JJ),e(JJ,a9r),e(OE,n9r),e(re,s9r),e(re,VE),e(VE,VTe),e(VTe,l9r),e(VE,i9r),e(VE,YJ),e(YJ,d9r),e(VE,c9r),e(re,f9r),e(re,XE),e(XE,XTe),e(XTe,m9r),e(XE,g9r),e(XE,KJ),e(KJ,h9r),e(XE,p9r),e(re,u9r),e(re,zE),e(zE,zTe),e(zTe,_9r),e(zE,b9r),e(zE,ZJ),e(ZJ,v9r),e(zE,F9r),e(re,T9r),e(re,WE),e(WE,WTe),e(WTe,M9r),e(WE,E9r),e(WE,eY),e(eY,C9r),e(WE,w9r),e(re,A9r),e(re,QE),e(QE,QTe),e(QTe,y9r),e(QE,L9r),e(QE,oY),e(oY,x9r),e(QE,$9r),e(re,k9r),e(re,HE),e(HE,HTe),e(HTe,S9r),e(HE,R9r),e(HE,rY),e(rY,P9r),e(HE,B9r),e(re,I9r),e(re,UE),e(UE,UTe),e(UTe,q9r),e(UE,N9r),e(UE,tY),e(tY,j9r),e(UE,D9r),e(re,G9r),e(re,JE),e(JE,JTe),e(JTe,O9r),e(JE,V9r),e(JE,aY),e(aY,X9r),e(JE,z9r),e(re,W9r),e(re,YE),e(YE,YTe),e(YTe,Q9r),e(YE,H9r),e(YE,nY),e(nY,U9r),e(YE,J9r),e(jr,Y9r),M(KE,jr,null),b(f,xje,_),b(f,Sc,_),e(Sc,ZE),e(ZE,KTe),M(x9,KTe,null),e(Sc,K9r),e(Sc,ZTe),e(ZTe,Z9r),b(f,$je,_),b(f,mr,_),M($9,mr,null),e(mr,exr),e(mr,Rc),e(Rc,oxr),e(Rc,sY),e(sY,rxr),e(Rc,txr),e(Rc,lY),e(lY,axr),e(Rc,nxr),e(mr,sxr),e(mr,k9),e(k9,lxr),e(k9,e7e),e(e7e,ixr),e(k9,dxr),e(mr,cxr),e(mr,Ot),M(S9,Ot,null),e(Ot,fxr),e(Ot,o7e),e(o7e,mxr),e(Ot,gxr),e(Ot,Pc),e(Pc,hxr),e(Pc,r7e),e(r7e,pxr),e(Pc,uxr),e(Pc,iY),e(iY,_xr),e(Pc,bxr),e(Ot,vxr),M(eC,Ot,null),e(mr,Fxr),e(mr,Dr),M(R9,Dr,null),e(Dr,Txr),e(Dr,t7e),e(t7e,Mxr),e(Dr,Exr),e(Dr,pn),e(pn,Cxr),e(pn,a7e),e(a7e,wxr),e(pn,Axr),e(pn,n7e),e(n7e,yxr),e(pn,Lxr),e(pn,s7e),e(s7e,xxr),e(pn,$xr),e(Dr,kxr),e(Dr,Le),e(Le,oC),e(oC,l7e),e(l7e,Sxr),e(oC,Rxr),e(oC,dY),e(dY,Pxr),e(oC,Bxr),e(Le,Ixr),e(Le,rC),e(rC,i7e),e(i7e,qxr),e(rC,Nxr),e(rC,cY),e(cY,jxr),e(rC,Dxr),e(Le,Gxr),e(Le,tC),e(tC,d7e),e(d7e,Oxr),e(tC,Vxr),e(tC,fY),e(fY,Xxr),e(tC,zxr),e(Le,Wxr),e(Le,aC),e(aC,c7e),e(c7e,Qxr),e(aC,Hxr),e(aC,mY),e(mY,Uxr),e(aC,Jxr),e(Le,Yxr),e(Le,nC),e(nC,f7e),e(f7e,Kxr),e(nC,Zxr),e(nC,gY),e(gY,e$r),e(nC,o$r),e(Le,r$r),e(Le,sC),e(sC,m7e),e(m7e,t$r),e(sC,a$r),e(sC,hY),e(hY,n$r),e(sC,s$r),e(Le,l$r),e(Le,lC),e(lC,g7e),e(g7e,i$r),e(lC,d$r),e(lC,pY),e(pY,c$r),e(lC,f$r),e(Le,m$r),e(Le,iC),e(iC,h7e),e(h7e,g$r),e(iC,h$r),e(iC,uY),e(uY,p$r),e(iC,u$r),e(Le,_$r),e(Le,dC),e(dC,p7e),e(p7e,b$r),e(dC,v$r),e(dC,_Y),e(_Y,F$r),e(dC,T$r),e(Le,M$r),e(Le,cC),e(cC,u7e),e(u7e,E$r),e(cC,C$r),e(cC,bY),e(bY,w$r),e(cC,A$r),e(Dr,y$r),M(fC,Dr,null),b(f,kje,_),b(f,Bc,_),e(Bc,mC),e(mC,_7e),M(P9,_7e,null),e(Bc,L$r),e(Bc,b7e),e(b7e,x$r),b(f,Sje,_),b(f,gr,_),M(B9,gr,null),e(gr,$$r),e(gr,Ic),e(Ic,k$r),e(Ic,vY),e(vY,S$r),e(Ic,R$r),e(Ic,FY),e(FY,P$r),e(Ic,B$r),e(gr,I$r),e(gr,I9),e(I9,q$r),e(I9,v7e),e(v7e,N$r),e(I9,j$r),e(gr,D$r),e(gr,Vt),M(q9,Vt,null),e(Vt,G$r),e(Vt,F7e),e(F7e,O$r),e(Vt,V$r),e(Vt,qc),e(qc,X$r),e(qc,T7e),e(T7e,z$r),e(qc,W$r),e(qc,TY),e(TY,Q$r),e(qc,H$r),e(Vt,U$r),M(gC,Vt,null),e(gr,J$r),e(gr,Gr),M(N9,Gr,null),e(Gr,Y$r),e(Gr,M7e),e(M7e,K$r),e(Gr,Z$r),e(Gr,un),e(un,ekr),e(un,E7e),e(E7e,okr),e(un,rkr),e(un,C7e),e(C7e,tkr),e(un,akr),e(un,w7e),e(w7e,nkr),e(un,skr),e(Gr,lkr),e(Gr,Ee),e(Ee,hC),e(hC,A7e),e(A7e,ikr),e(hC,dkr),e(hC,MY),e(MY,ckr),e(hC,fkr),e(Ee,mkr),e(Ee,pC),e(pC,y7e),e(y7e,gkr),e(pC,hkr),e(pC,EY),e(EY,pkr),e(pC,ukr),e(Ee,_kr),e(Ee,uC),e(uC,L7e),e(L7e,bkr),e(uC,vkr),e(uC,CY),e(CY,Fkr),e(uC,Tkr),e(Ee,Mkr),e(Ee,_C),e(_C,x7e),e(x7e,Ekr),e(_C,Ckr),e(_C,wY),e(wY,wkr),e(_C,Akr),e(Ee,ykr),e(Ee,bC),e(bC,$7e),e($7e,Lkr),e(bC,xkr),e(bC,AY),e(AY,$kr),e(bC,kkr),e(Ee,Skr),e(Ee,vC),e(vC,k7e),e(k7e,Rkr),e(vC,Pkr),e(vC,yY),e(yY,Bkr),e(vC,Ikr),e(Ee,qkr),e(Ee,FC),e(FC,S7e),e(S7e,Nkr),e(FC,jkr),e(FC,LY),e(LY,Dkr),e(FC,Gkr),e(Ee,Okr),e(Ee,TC),e(TC,R7e),e(R7e,Vkr),e(TC,Xkr),e(TC,xY),e(xY,zkr),e(TC,Wkr),e(Ee,Qkr),e(Ee,MC),e(MC,P7e),e(P7e,Hkr),e(MC,Ukr),e(MC,$Y),e($Y,Jkr),e(MC,Ykr),e(Ee,Kkr),e(Ee,EC),e(EC,B7e),e(B7e,Zkr),e(EC,eSr),e(EC,kY),e(kY,oSr),e(EC,rSr),e(Ee,tSr),e(Ee,CC),e(CC,I7e),e(I7e,aSr),e(CC,nSr),e(CC,SY),e(SY,sSr),e(CC,lSr),e(Ee,iSr),e(Ee,wC),e(wC,q7e),e(q7e,dSr),e(wC,cSr),e(wC,RY),e(RY,fSr),e(wC,mSr),e(Gr,gSr),M(AC,Gr,null),b(f,Rje,_),b(f,Nc,_),e(Nc,yC),e(yC,N7e),M(j9,N7e,null),e(Nc,hSr),e(Nc,j7e),e(j7e,pSr),b(f,Pje,_),b(f,hr,_),M(D9,hr,null),e(hr,uSr),e(hr,jc),e(jc,_Sr),e(jc,PY),e(PY,bSr),e(jc,vSr),e(jc,BY),e(BY,FSr),e(jc,TSr),e(hr,MSr),e(hr,G9),e(G9,ESr),e(G9,D7e),e(D7e,CSr),e(G9,wSr),e(hr,ASr),e(hr,Xt),M(O9,Xt,null),e(Xt,ySr),e(Xt,G7e),e(G7e,LSr),e(Xt,xSr),e(Xt,Dc),e(Dc,$Sr),e(Dc,O7e),e(O7e,kSr),e(Dc,SSr),e(Dc,IY),e(IY,RSr),e(Dc,PSr),e(Xt,BSr),M(LC,Xt,null),e(hr,ISr),e(hr,Or),M(V9,Or,null),e(Or,qSr),e(Or,V7e),e(V7e,NSr),e(Or,jSr),e(Or,_n),e(_n,DSr),e(_n,X7e),e(X7e,GSr),e(_n,OSr),e(_n,z7e),e(z7e,VSr),e(_n,XSr),e(_n,W7e),e(W7e,zSr),e(_n,WSr),e(Or,QSr),e(Or,xe),e(xe,xC),e(xC,Q7e),e(Q7e,HSr),e(xC,USr),e(xC,qY),e(qY,JSr),e(xC,YSr),e(xe,KSr),e(xe,$C),e($C,H7e),e(H7e,ZSr),e($C,eRr),e($C,NY),e(NY,oRr),e($C,rRr),e(xe,tRr),e(xe,kC),e(kC,U7e),e(U7e,aRr),e(kC,nRr),e(kC,jY),e(jY,sRr),e(kC,lRr),e(xe,iRr),e(xe,SC),e(SC,J7e),e(J7e,dRr),e(SC,cRr),e(SC,DY),e(DY,fRr),e(SC,mRr),e(xe,gRr),e(xe,RC),e(RC,Y7e),e(Y7e,hRr),e(RC,pRr),e(RC,GY),e(GY,uRr),e(RC,_Rr),e(xe,bRr),e(xe,PC),e(PC,K7e),e(K7e,vRr),e(PC,FRr),e(PC,OY),e(OY,TRr),e(PC,MRr),e(xe,ERr),e(xe,BC),e(BC,Z7e),e(Z7e,CRr),e(BC,wRr),e(BC,VY),e(VY,ARr),e(BC,yRr),e(xe,LRr),e(xe,IC),e(IC,eMe),e(eMe,xRr),e(IC,$Rr),e(IC,XY),e(XY,kRr),e(IC,SRr),e(xe,RRr),e(xe,qC),e(qC,oMe),e(oMe,PRr),e(qC,BRr),e(qC,zY),e(zY,IRr),e(qC,qRr),e(xe,NRr),e(xe,NC),e(NC,rMe),e(rMe,jRr),e(NC,DRr),e(NC,WY),e(WY,GRr),e(NC,ORr),e(Or,VRr),M(jC,Or,null),b(f,Bje,_),b(f,Gc,_),e(Gc,DC),e(DC,tMe),M(X9,tMe,null),e(Gc,XRr),e(Gc,aMe),e(aMe,zRr),b(f,Ije,_),b(f,pr,_),M(z9,pr,null),e(pr,WRr),e(pr,Oc),e(Oc,QRr),e(Oc,QY),e(QY,HRr),e(Oc,URr),e(Oc,HY),e(HY,JRr),e(Oc,YRr),e(pr,KRr),e(pr,W9),e(W9,ZRr),e(W9,nMe),e(nMe,ePr),e(W9,oPr),e(pr,rPr),e(pr,zt),M(Q9,zt,null),e(zt,tPr),e(zt,sMe),e(sMe,aPr),e(zt,nPr),e(zt,Vc),e(Vc,sPr),e(Vc,lMe),e(lMe,lPr),e(Vc,iPr),e(Vc,UY),e(UY,dPr),e(Vc,cPr),e(zt,fPr),M(GC,zt,null),e(pr,mPr),e(pr,Vr),M(H9,Vr,null),e(Vr,gPr),e(Vr,iMe),e(iMe,hPr),e(Vr,pPr),e(Vr,bn),e(bn,uPr),e(bn,dMe),e(dMe,_Pr),e(bn,bPr),e(bn,cMe),e(cMe,vPr),e(bn,FPr),e(bn,fMe),e(fMe,TPr),e(bn,MPr),e(Vr,EPr),e(Vr,Pe),e(Pe,OC),e(OC,mMe),e(mMe,CPr),e(OC,wPr),e(OC,JY),e(JY,APr),e(OC,yPr),e(Pe,LPr),e(Pe,VC),e(VC,gMe),e(gMe,xPr),e(VC,$Pr),e(VC,YY),e(YY,kPr),e(VC,SPr),e(Pe,RPr),e(Pe,XC),e(XC,hMe),e(hMe,PPr),e(XC,BPr),e(XC,KY),e(KY,IPr),e(XC,qPr),e(Pe,NPr),e(Pe,zC),e(zC,pMe),e(pMe,jPr),e(zC,DPr),e(zC,ZY),e(ZY,GPr),e(zC,OPr),e(Pe,VPr),e(Pe,WC),e(WC,uMe),e(uMe,XPr),e(WC,zPr),e(WC,eK),e(eK,WPr),e(WC,QPr),e(Pe,HPr),e(Pe,QC),e(QC,_Me),e(_Me,UPr),e(QC,JPr),e(QC,oK),e(oK,YPr),e(QC,KPr),e(Pe,ZPr),e(Pe,HC),e(HC,bMe),e(bMe,eBr),e(HC,oBr),e(HC,rK),e(rK,rBr),e(HC,tBr),e(Pe,aBr),e(Pe,UC),e(UC,vMe),e(vMe,nBr),e(UC,sBr),e(UC,tK),e(tK,lBr),e(UC,iBr),e(Pe,dBr),e(Pe,JC),e(JC,FMe),e(FMe,cBr),e(JC,fBr),e(JC,aK),e(aK,mBr),e(JC,gBr),e(Vr,hBr),M(YC,Vr,null),b(f,qje,_),b(f,Xc,_),e(Xc,KC),e(KC,TMe),M(U9,TMe,null),e(Xc,pBr),e(Xc,MMe),e(MMe,uBr),b(f,Nje,_),b(f,ur,_),M(J9,ur,null),e(ur,_Br),e(ur,zc),e(zc,bBr),e(zc,nK),e(nK,vBr),e(zc,FBr),e(zc,sK),e(sK,TBr),e(zc,MBr),e(ur,EBr),e(ur,Y9),e(Y9,CBr),e(Y9,EMe),e(EMe,wBr),e(Y9,ABr),e(ur,yBr),e(ur,Wt),M(K9,Wt,null),e(Wt,LBr),e(Wt,CMe),e(CMe,xBr),e(Wt,$Br),e(Wt,Wc),e(Wc,kBr),e(Wc,wMe),e(wMe,SBr),e(Wc,RBr),e(Wc,lK),e(lK,PBr),e(Wc,BBr),e(Wt,IBr),M(ZC,Wt,null),e(ur,qBr),e(ur,Xr),M(Z9,Xr,null),e(Xr,NBr),e(Xr,AMe),e(AMe,jBr),e(Xr,DBr),e(Xr,vn),e(vn,GBr),e(vn,yMe),e(yMe,OBr),e(vn,VBr),e(vn,LMe),e(LMe,XBr),e(vn,zBr),e(vn,xMe),e(xMe,WBr),e(vn,QBr),e(Xr,HBr),e(Xr,$e),e($e,e5),e(e5,$Me),e($Me,UBr),e(e5,JBr),e(e5,iK),e(iK,YBr),e(e5,KBr),e($e,ZBr),e($e,o5),e(o5,kMe),e(kMe,eIr),e(o5,oIr),e(o5,dK),e(dK,rIr),e(o5,tIr),e($e,aIr),e($e,r5),e(r5,SMe),e(SMe,nIr),e(r5,sIr),e(r5,cK),e(cK,lIr),e(r5,iIr),e($e,dIr),e($e,t5),e(t5,RMe),e(RMe,cIr),e(t5,fIr),e(t5,fK),e(fK,mIr),e(t5,gIr),e($e,hIr),e($e,a5),e(a5,PMe),e(PMe,pIr),e(a5,uIr),e(a5,mK),e(mK,_Ir),e(a5,bIr),e($e,vIr),e($e,n5),e(n5,BMe),e(BMe,FIr),e(n5,TIr),e(n5,gK),e(gK,MIr),e(n5,EIr),e($e,CIr),e($e,s5),e(s5,IMe),e(IMe,wIr),e(s5,AIr),e(s5,hK),e(hK,yIr),e(s5,LIr),e($e,xIr),e($e,l5),e(l5,qMe),e(qMe,$Ir),e(l5,kIr),e(l5,pK),e(pK,SIr),e(l5,RIr),e($e,PIr),e($e,i5),e(i5,NMe),e(NMe,BIr),e(i5,IIr),e(i5,uK),e(uK,qIr),e(i5,NIr),e($e,jIr),e($e,d5),e(d5,jMe),e(jMe,DIr),e(d5,GIr),e(d5,_K),e(_K,OIr),e(d5,VIr),e(Xr,XIr),M(c5,Xr,null),b(f,jje,_),b(f,Qc,_),e(Qc,f5),e(f5,DMe),M(ex,DMe,null),e(Qc,zIr),e(Qc,GMe),e(GMe,WIr),b(f,Dje,_),b(f,_r,_),M(ox,_r,null),e(_r,QIr),e(_r,Hc),e(Hc,HIr),e(Hc,bK),e(bK,UIr),e(Hc,JIr),e(Hc,vK),e(vK,YIr),e(Hc,KIr),e(_r,ZIr),e(_r,rx),e(rx,eqr),e(rx,OMe),e(OMe,oqr),e(rx,rqr),e(_r,tqr),e(_r,Qt),M(tx,Qt,null),e(Qt,aqr),e(Qt,VMe),e(VMe,nqr),e(Qt,sqr),e(Qt,Uc),e(Uc,lqr),e(Uc,XMe),e(XMe,iqr),e(Uc,dqr),e(Uc,FK),e(FK,cqr),e(Uc,fqr),e(Qt,mqr),M(m5,Qt,null),e(_r,gqr),e(_r,zr),M(ax,zr,null),e(zr,hqr),e(zr,zMe),e(zMe,pqr),e(zr,uqr),e(zr,Fn),e(Fn,_qr),e(Fn,WMe),e(WMe,bqr),e(Fn,vqr),e(Fn,QMe),e(QMe,Fqr),e(Fn,Tqr),e(Fn,HMe),e(HMe,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,ke),e(ke,g5),e(g5,UMe),e(UMe,wqr),e(g5,Aqr),e(g5,TK),e(TK,yqr),e(g5,Lqr),e(ke,xqr),e(ke,h5),e(h5,JMe),e(JMe,$qr),e(h5,kqr),e(h5,MK),e(MK,Sqr),e(h5,Rqr),e(ke,Pqr),e(ke,p5),e(p5,YMe),e(YMe,Bqr),e(p5,Iqr),e(p5,EK),e(EK,qqr),e(p5,Nqr),e(ke,jqr),e(ke,u5),e(u5,KMe),e(KMe,Dqr),e(u5,Gqr),e(u5,CK),e(CK,Oqr),e(u5,Vqr),e(ke,Xqr),e(ke,_5),e(_5,ZMe),e(ZMe,zqr),e(_5,Wqr),e(_5,wK),e(wK,Qqr),e(_5,Hqr),e(ke,Uqr),e(ke,b5),e(b5,e4e),e(e4e,Jqr),e(b5,Yqr),e(b5,AK),e(AK,Kqr),e(b5,Zqr),e(ke,eNr),e(ke,v5),e(v5,o4e),e(o4e,oNr),e(v5,rNr),e(v5,yK),e(yK,tNr),e(v5,aNr),e(ke,nNr),e(ke,F5),e(F5,r4e),e(r4e,sNr),e(F5,lNr),e(F5,LK),e(LK,iNr),e(F5,dNr),e(ke,cNr),e(ke,T5),e(T5,t4e),e(t4e,fNr),e(T5,mNr),e(T5,xK),e(xK,gNr),e(T5,hNr),e(ke,pNr),e(ke,M5),e(M5,a4e),e(a4e,uNr),e(M5,_Nr),e(M5,$K),e($K,bNr),e(M5,vNr),e(zr,FNr),M(E5,zr,null),b(f,Gje,_),b(f,Jc,_),e(Jc,C5),e(C5,n4e),M(nx,n4e,null),e(Jc,TNr),e(Jc,s4e),e(s4e,MNr),b(f,Oje,_),b(f,br,_),M(sx,br,null),e(br,ENr),e(br,Yc),e(Yc,CNr),e(Yc,kK),e(kK,wNr),e(Yc,ANr),e(Yc,SK),e(SK,yNr),e(Yc,LNr),e(br,xNr),e(br,lx),e(lx,$Nr),e(lx,l4e),e(l4e,kNr),e(lx,SNr),e(br,RNr),e(br,Ht),M(ix,Ht,null),e(Ht,PNr),e(Ht,i4e),e(i4e,BNr),e(Ht,INr),e(Ht,Kc),e(Kc,qNr),e(Kc,d4e),e(d4e,NNr),e(Kc,jNr),e(Kc,RK),e(RK,DNr),e(Kc,GNr),e(Ht,ONr),M(w5,Ht,null),e(br,VNr),e(br,Wr),M(dx,Wr,null),e(Wr,XNr),e(Wr,c4e),e(c4e,zNr),e(Wr,WNr),e(Wr,Tn),e(Tn,QNr),e(Tn,f4e),e(f4e,HNr),e(Tn,UNr),e(Tn,m4e),e(m4e,JNr),e(Tn,YNr),e(Tn,g4e),e(g4e,KNr),e(Tn,ZNr),e(Wr,ejr),e(Wr,Ge),e(Ge,A5),e(A5,h4e),e(h4e,ojr),e(A5,rjr),e(A5,PK),e(PK,tjr),e(A5,ajr),e(Ge,njr),e(Ge,y5),e(y5,p4e),e(p4e,sjr),e(y5,ljr),e(y5,BK),e(BK,ijr),e(y5,djr),e(Ge,cjr),e(Ge,L5),e(L5,u4e),e(u4e,fjr),e(L5,mjr),e(L5,IK),e(IK,gjr),e(L5,hjr),e(Ge,pjr),e(Ge,x5),e(x5,_4e),e(_4e,ujr),e(x5,_jr),e(x5,qK),e(qK,bjr),e(x5,vjr),e(Ge,Fjr),e(Ge,$5),e($5,b4e),e(b4e,Tjr),e($5,Mjr),e($5,NK),e(NK,Ejr),e($5,Cjr),e(Ge,wjr),e(Ge,k5),e(k5,v4e),e(v4e,Ajr),e(k5,yjr),e(k5,jK),e(jK,Ljr),e(k5,xjr),e(Ge,$jr),e(Ge,S5),e(S5,F4e),e(F4e,kjr),e(S5,Sjr),e(S5,DK),e(DK,Rjr),e(S5,Pjr),e(Ge,Bjr),e(Ge,R5),e(R5,T4e),e(T4e,Ijr),e(R5,qjr),e(R5,GK),e(GK,Njr),e(R5,jjr),e(Wr,Djr),M(P5,Wr,null),b(f,Vje,_),b(f,Zc,_),e(Zc,B5),e(B5,M4e),M(cx,M4e,null),e(Zc,Gjr),e(Zc,E4e),e(E4e,Ojr),b(f,Xje,_),b(f,vr,_),M(fx,vr,null),e(vr,Vjr),e(vr,ef),e(ef,Xjr),e(ef,OK),e(OK,zjr),e(ef,Wjr),e(ef,VK),e(VK,Qjr),e(ef,Hjr),e(vr,Ujr),e(vr,mx),e(mx,Jjr),e(mx,C4e),e(C4e,Yjr),e(mx,Kjr),e(vr,Zjr),e(vr,Ut),M(gx,Ut,null),e(Ut,eDr),e(Ut,w4e),e(w4e,oDr),e(Ut,rDr),e(Ut,of),e(of,tDr),e(of,A4e),e(A4e,aDr),e(of,nDr),e(of,XK),e(XK,sDr),e(of,lDr),e(Ut,iDr),M(I5,Ut,null),e(vr,dDr),e(vr,Qr),M(hx,Qr,null),e(Qr,cDr),e(Qr,y4e),e(y4e,fDr),e(Qr,mDr),e(Qr,Mn),e(Mn,gDr),e(Mn,L4e),e(L4e,hDr),e(Mn,pDr),e(Mn,x4e),e(x4e,uDr),e(Mn,_Dr),e(Mn,$4e),e($4e,bDr),e(Mn,vDr),e(Qr,FDr),e(Qr,Oe),e(Oe,q5),e(q5,k4e),e(k4e,TDr),e(q5,MDr),e(q5,zK),e(zK,EDr),e(q5,CDr),e(Oe,wDr),e(Oe,N5),e(N5,S4e),e(S4e,ADr),e(N5,yDr),e(N5,WK),e(WK,LDr),e(N5,xDr),e(Oe,$Dr),e(Oe,j5),e(j5,R4e),e(R4e,kDr),e(j5,SDr),e(j5,QK),e(QK,RDr),e(j5,PDr),e(Oe,BDr),e(Oe,D5),e(D5,P4e),e(P4e,IDr),e(D5,qDr),e(D5,HK),e(HK,NDr),e(D5,jDr),e(Oe,DDr),e(Oe,G5),e(G5,B4e),e(B4e,GDr),e(G5,ODr),e(G5,UK),e(UK,VDr),e(G5,XDr),e(Oe,zDr),e(Oe,O5),e(O5,I4e),e(I4e,WDr),e(O5,QDr),e(O5,JK),e(JK,HDr),e(O5,UDr),e(Oe,JDr),e(Oe,V5),e(V5,q4e),e(q4e,YDr),e(V5,KDr),e(V5,YK),e(YK,ZDr),e(V5,eGr),e(Oe,oGr),e(Oe,X5),e(X5,N4e),e(N4e,rGr),e(X5,tGr),e(X5,KK),e(KK,aGr),e(X5,nGr),e(Qr,sGr),M(z5,Qr,null),b(f,zje,_),b(f,rf,_),e(rf,W5),e(W5,j4e),M(px,j4e,null),e(rf,lGr),e(rf,D4e),e(D4e,iGr),b(f,Wje,_),b(f,Fr,_),M(ux,Fr,null),e(Fr,dGr),e(Fr,tf),e(tf,cGr),e(tf,ZK),e(ZK,fGr),e(tf,mGr),e(tf,eZ),e(eZ,gGr),e(tf,hGr),e(Fr,pGr),e(Fr,_x),e(_x,uGr),e(_x,G4e),e(G4e,_Gr),e(_x,bGr),e(Fr,vGr),e(Fr,Jt),M(bx,Jt,null),e(Jt,FGr),e(Jt,O4e),e(O4e,TGr),e(Jt,MGr),e(Jt,af),e(af,EGr),e(af,V4e),e(V4e,CGr),e(af,wGr),e(af,oZ),e(oZ,AGr),e(af,yGr),e(Jt,LGr),M(Q5,Jt,null),e(Fr,xGr),e(Fr,Hr),M(vx,Hr,null),e(Hr,$Gr),e(Hr,X4e),e(X4e,kGr),e(Hr,SGr),e(Hr,En),e(En,RGr),e(En,z4e),e(z4e,PGr),e(En,BGr),e(En,W4e),e(W4e,IGr),e(En,qGr),e(En,Q4e),e(Q4e,NGr),e(En,jGr),e(Hr,DGr),e(Hr,H4e),e(H4e,H5),e(H5,U4e),e(U4e,GGr),e(H5,OGr),e(H5,rZ),e(rZ,VGr),e(H5,XGr),e(Hr,zGr),M(U5,Hr,null),b(f,Qje,_),b(f,nf,_),e(nf,J5),e(J5,J4e),M(Fx,J4e,null),e(nf,WGr),e(nf,Y4e),e(Y4e,QGr),b(f,Hje,_),b(f,Tr,_),M(Tx,Tr,null),e(Tr,HGr),e(Tr,sf),e(sf,UGr),e(sf,tZ),e(tZ,JGr),e(sf,YGr),e(sf,aZ),e(aZ,KGr),e(sf,ZGr),e(Tr,eOr),e(Tr,Mx),e(Mx,oOr),e(Mx,K4e),e(K4e,rOr),e(Mx,tOr),e(Tr,aOr),e(Tr,Yt),M(Ex,Yt,null),e(Yt,nOr),e(Yt,Z4e),e(Z4e,sOr),e(Yt,lOr),e(Yt,lf),e(lf,iOr),e(lf,eEe),e(eEe,dOr),e(lf,cOr),e(lf,nZ),e(nZ,fOr),e(lf,mOr),e(Yt,gOr),M(Y5,Yt,null),e(Tr,hOr),e(Tr,Ur),M(Cx,Ur,null),e(Ur,pOr),e(Ur,oEe),e(oEe,uOr),e(Ur,_Or),e(Ur,Cn),e(Cn,bOr),e(Cn,rEe),e(rEe,vOr),e(Cn,FOr),e(Cn,tEe),e(tEe,TOr),e(Cn,MOr),e(Cn,aEe),e(aEe,EOr),e(Cn,COr),e(Ur,wOr),e(Ur,wx),e(wx,K5),e(K5,nEe),e(nEe,AOr),e(K5,yOr),e(K5,sZ),e(sZ,LOr),e(K5,xOr),e(wx,$Or),e(wx,Z5),e(Z5,sEe),e(sEe,kOr),e(Z5,SOr),e(Z5,lZ),e(lZ,ROr),e(Z5,POr),e(Ur,BOr),M(ew,Ur,null),b(f,Uje,_),b(f,df,_),e(df,ow),e(ow,lEe),M(Ax,lEe,null),e(df,IOr),e(df,iEe),e(iEe,qOr),b(f,Jje,_),b(f,Mr,_),M(yx,Mr,null),e(Mr,NOr),e(Mr,cf),e(cf,jOr),e(cf,iZ),e(iZ,DOr),e(cf,GOr),e(cf,dZ),e(dZ,OOr),e(cf,VOr),e(Mr,XOr),e(Mr,Lx),e(Lx,zOr),e(Lx,dEe),e(dEe,WOr),e(Lx,QOr),e(Mr,HOr),e(Mr,Kt),M(xx,Kt,null),e(Kt,UOr),e(Kt,cEe),e(cEe,JOr),e(Kt,YOr),e(Kt,ff),e(ff,KOr),e(ff,fEe),e(fEe,ZOr),e(ff,eVr),e(ff,cZ),e(cZ,oVr),e(ff,rVr),e(Kt,tVr),M(rw,Kt,null),e(Mr,aVr),e(Mr,Jr),M($x,Jr,null),e(Jr,nVr),e(Jr,mEe),e(mEe,sVr),e(Jr,lVr),e(Jr,wn),e(wn,iVr),e(wn,gEe),e(gEe,dVr),e(wn,cVr),e(wn,hEe),e(hEe,fVr),e(wn,mVr),e(wn,pEe),e(pEe,gVr),e(wn,hVr),e(Jr,pVr),e(Jr,uEe),e(uEe,tw),e(tw,_Ee),e(_Ee,uVr),e(tw,_Vr),e(tw,fZ),e(fZ,bVr),e(tw,vVr),e(Jr,FVr),M(aw,Jr,null),Yje=!0},p(f,[_]){const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),Ff.$set(kx);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),Mg.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),rh.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Rh.$set(FEe);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Ph.$set(Sx);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),ep.$set(TEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),op.$set(An);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),ap.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),Ku.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),e_.$set(CEe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),X_.$set(Rx);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),W_.$set(wEe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),$1.$set(Px);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),S1.$set(AEe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),p8.$set(Bx);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),_8.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),B8.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),q8.$set(xEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Sb.$set(mf);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),Pb.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),f2.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),g2.$set(SEe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),F2.$set(Ix);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),M2.$set(REe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),av.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),sv.$set(BEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Hv.$set(et);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),Jv.$set(qx);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),Zv.$set(IEe);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),o3.$set(Nx);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),p3.$set(qEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),_3.$set(ot);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),F3.$set(NEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),M3.$set(gf);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),R3.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),B3.$set(DEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),O3.$set(y);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),X3.$set(nw);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),oF.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),tF.$set(OEe);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),lF.$set(sw);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),dF.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),uF.$set(XEe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),bF.$set(lw);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),EF.$set(zEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),wF.$set(WEe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),xF.$set(iw);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),kF.$set(QEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),PF.$set(HEe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),IF.$set(dw);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),OF.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),XF.$set(JEe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),QF.$set(cw);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),UF.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),OT.$set(KEe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),XT.$set(fw);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),h7.$set(ZEe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),u7.$set(eCe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),$7.$set(mw);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),S7.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),q7.$set(rCe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),j7.$set(gw);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),sM.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),iM.$set(aCe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),vM.$set(hw);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),TM.$set(nCe);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),HM.$set(sCe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),JM.$set(pw);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),h4.$set(lCe);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),u4.$set(iCe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),v4.$set(uw);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),T4.$set(dCe);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),E4.$set(cCe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),w4.$set(_w);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),W4.$set(fCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),H4.$set(mCe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),pE.$set(bw);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),_E.$set(gCe);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),vE.$set(hCe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),TE.$set(vw);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),EE.$set(pCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),wE.$set(uCe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),KE.$set(Fw);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),eC.$set(_Ce);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),fC.$set(bCe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),gC.$set(Tw);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),AC.$set(vCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),LC.$set(FCe);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),jC.$set(Mw);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),GC.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),YC.$set(MCe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),ZC.$set(Ew);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),c5.$set(ECe);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),m5.$set(CCe);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),E5.$set(Cw);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),w5.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),P5.$set(ACe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),I5.$set(ww);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),z5.$set(yCe);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),Q5.$set(LCe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),U5.$set(Aw);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),Y5.$set(xCe);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),ew.$set($Ce);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),rw.$set(yw);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),aw.$set(kCe)},i(f){Yje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(Ff.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(SA.$$.fragment,f),E(Mg.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(NA.$$.fragment,f),E(rh.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(Rh.$$.fragment,f),E(Ph.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(ep.$$.fragment,f),E(op.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(o6.$$.fragment,f),E(ap.$$.fragment,f),E(r6.$$.fragment,f),E(Ku.$$.fragment,f),E(t6.$$.fragment,f),E(a6.$$.fragment,f),E(s6.$$.fragment,f),E(e_.$$.fragment,f),E(l6.$$.fragment,f),E(X_.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(f6.$$.fragment,f),E(W_.$$.fragment,f),E(m6.$$.fragment,f),E($1.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(u6.$$.fragment,f),E(S1.$$.fragment,f),E(_6.$$.fragment,f),E(p8.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(T6.$$.fragment,f),E(_8.$$.fragment,f),E(M6.$$.fragment,f),E(B8.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(q8.$$.fragment,f),E(y6.$$.fragment,f),E(Sb.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(Pb.$$.fragment,f),E(S6.$$.fragment,f),E(f2.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(g2.$$.fragment,f),E(q6.$$.fragment,f),E(F2.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(M2.$$.fragment,f),E(O6.$$.fragment,f),E(av.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(sv.$$.fragment,f),E(Q6.$$.fragment,f),E(Hv.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(Jv.$$.fragment,f),E(K6.$$.fragment,f),E(Zv.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(o3.$$.fragment,f),E(ty.$$.fragment,f),E(p3.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(_3.$$.fragment,f),E(iy.$$.fragment,f),E(F3.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(M3.$$.fragment,f),E(gy.$$.fragment,f),E(R3.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(B3.$$.fragment,f),E(by.$$.fragment,f),E(O3.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(X3.$$.fragment,f),E(Ey.$$.fragment,f),E(oF.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(tF.$$.fragment,f),E(Ly.$$.fragment,f),E(lF.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(dF.$$.fragment,f),E(Py.$$.fragment,f),E(uF.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(bF.$$.fragment,f),E(jy.$$.fragment,f),E(EF.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(wF.$$.fragment,f),E(Xy.$$.fragment,f),E(xF.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(kF.$$.fragment,f),E(Jy.$$.fragment,f),E(PF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(IF.$$.fragment,f),E(oL.$$.fragment,f),E(OF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(XF.$$.fragment,f),E(sL.$$.fragment,f),E(QF.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(UF.$$.fragment,f),E(fL.$$.fragment,f),E(OT.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(XT.$$.fragment,f),E(uL.$$.fragment,f),E(h7.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(u7.$$.fragment,f),E(TL.$$.fragment,f),E($7.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(S7.$$.fragment,f),E(AL.$$.fragment,f),E(q7.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(j7.$$.fragment,f),E(kL.$$.fragment,f),E(sM.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(iM.$$.fragment,f),E(IL.$$.fragment,f),E(vM.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(TM.$$.fragment,f),E(GL.$$.fragment,f),E(HM.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(JM.$$.fragment,f),E(WL.$$.fragment,f),E(h4.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(u4.$$.fragment,f),E(YL.$$.fragment,f),E(v4.$$.fragment,f),E(ZL.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(T4.$$.fragment,f),E(t9.$$.fragment,f),E(E4.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(w4.$$.fragment,f),E(i9.$$.fragment,f),E(W4.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(H4.$$.fragment,f),E(g9.$$.fragment,f),E(pE.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(_E.$$.fragment,f),E(b9.$$.fragment,f),E(vE.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(TE.$$.fragment,f),E(E9.$$.fragment,f),E(EE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(y9.$$.fragment,f),E(wE.$$.fragment,f),E(L9.$$.fragment,f),E(KE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(eC.$$.fragment,f),E(R9.$$.fragment,f),E(fC.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(q9.$$.fragment,f),E(gC.$$.fragment,f),E(N9.$$.fragment,f),E(AC.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(LC.$$.fragment,f),E(V9.$$.fragment,f),E(jC.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(GC.$$.fragment,f),E(H9.$$.fragment,f),E(YC.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(ZC.$$.fragment,f),E(Z9.$$.fragment,f),E(c5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(m5.$$.fragment,f),E(ax.$$.fragment,f),E(E5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(w5.$$.fragment,f),E(dx.$$.fragment,f),E(P5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(I5.$$.fragment,f),E(hx.$$.fragment,f),E(z5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Q5.$$.fragment,f),E(vx.$$.fragment,f),E(U5.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(Y5.$$.fragment,f),E(Cx.$$.fragment,f),E(ew.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(rw.$$.fragment,f),E($x.$$.fragment,f),E(aw.$$.fragment,f),Yje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(Ff.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(SA.$$.fragment,f),C(Mg.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(NA.$$.fragment,f),C(rh.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(Rh.$$.fragment,f),C(Ph.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(ep.$$.fragment,f),C(op.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(o6.$$.fragment,f),C(ap.$$.fragment,f),C(r6.$$.fragment,f),C(Ku.$$.fragment,f),C(t6.$$.fragment,f),C(a6.$$.fragment,f),C(s6.$$.fragment,f),C(e_.$$.fragment,f),C(l6.$$.fragment,f),C(X_.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(f6.$$.fragment,f),C(W_.$$.fragment,f),C(m6.$$.fragment,f),C($1.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(u6.$$.fragment,f),C(S1.$$.fragment,f),C(_6.$$.fragment,f),C(p8.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(T6.$$.fragment,f),C(_8.$$.fragment,f),C(M6.$$.fragment,f),C(B8.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(q8.$$.fragment,f),C(y6.$$.fragment,f),C(Sb.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(Pb.$$.fragment,f),C(S6.$$.fragment,f),C(f2.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(g2.$$.fragment,f),C(q6.$$.fragment,f),C(F2.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(M2.$$.fragment,f),C(O6.$$.fragment,f),C(av.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(sv.$$.fragment,f),C(Q6.$$.fragment,f),C(Hv.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(Jv.$$.fragment,f),C(K6.$$.fragment,f),C(Zv.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(o3.$$.fragment,f),C(ty.$$.fragment,f),C(p3.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(_3.$$.fragment,f),C(iy.$$.fragment,f),C(F3.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(M3.$$.fragment,f),C(gy.$$.fragment,f),C(R3.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(B3.$$.fragment,f),C(by.$$.fragment,f),C(O3.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(X3.$$.fragment,f),C(Ey.$$.fragment,f),C(oF.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(tF.$$.fragment,f),C(Ly.$$.fragment,f),C(lF.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(dF.$$.fragment,f),C(Py.$$.fragment,f),C(uF.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(bF.$$.fragment,f),C(jy.$$.fragment,f),C(EF.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(wF.$$.fragment,f),C(Xy.$$.fragment,f),C(xF.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(kF.$$.fragment,f),C(Jy.$$.fragment,f),C(PF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(IF.$$.fragment,f),C(oL.$$.fragment,f),C(OF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(XF.$$.fragment,f),C(sL.$$.fragment,f),C(QF.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(UF.$$.fragment,f),C(fL.$$.fragment,f),C(OT.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(XT.$$.fragment,f),C(uL.$$.fragment,f),C(h7.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(u7.$$.fragment,f),C(TL.$$.fragment,f),C($7.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(S7.$$.fragment,f),C(AL.$$.fragment,f),C(q7.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(j7.$$.fragment,f),C(kL.$$.fragment,f),C(sM.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(iM.$$.fragment,f),C(IL.$$.fragment,f),C(vM.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(TM.$$.fragment,f),C(GL.$$.fragment,f),C(HM.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(JM.$$.fragment,f),C(WL.$$.fragment,f),C(h4.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(u4.$$.fragment,f),C(YL.$$.fragment,f),C(v4.$$.fragment,f),C(ZL.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(T4.$$.fragment,f),C(t9.$$.fragment,f),C(E4.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(w4.$$.fragment,f),C(i9.$$.fragment,f),C(W4.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(H4.$$.fragment,f),C(g9.$$.fragment,f),C(pE.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(_E.$$.fragment,f),C(b9.$$.fragment,f),C(vE.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(TE.$$.fragment,f),C(E9.$$.fragment,f),C(EE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(y9.$$.fragment,f),C(wE.$$.fragment,f),C(L9.$$.fragment,f),C(KE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(eC.$$.fragment,f),C(R9.$$.fragment,f),C(fC.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(q9.$$.fragment,f),C(gC.$$.fragment,f),C(N9.$$.fragment,f),C(AC.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(LC.$$.fragment,f),C(V9.$$.fragment,f),C(jC.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(GC.$$.fragment,f),C(H9.$$.fragment,f),C(YC.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(ZC.$$.fragment,f),C(Z9.$$.fragment,f),C(c5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(m5.$$.fragment,f),C(ax.$$.fragment,f),C(E5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(w5.$$.fragment,f),C(dx.$$.fragment,f),C(P5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(I5.$$.fragment,f),C(hx.$$.fragment,f),C(z5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Q5.$$.fragment,f),C(vx.$$.fragment,f),C(U5.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(Y5.$$.fragment,f),C(Cx.$$.fragment,f),C(ew.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(rw.$$.fragment,f),C($x.$$.fragment,f),C(aw.$$.fragment,f),Yje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Hqe),f&&t(bi),w(AA),f&&t(Uqe),f&&t(kn),f&&t(Jqe),w(yA,f),f&&t(Yqe),f&&t(U$),f&&t(Kqe),w(Ff,f),f&&t(Zqe),f&&t(vi),w(LA),f&&t(eNe),f&&t(Co),w(xA),w(SA),w(Mg),w(RA),f&&t(oNe),f&&t(Ti),w(PA),f&&t(rNe),f&&t(wo),w(BA),w(NA),w(rh),w(jA),f&&t(tNe),f&&t(Mi),w(DA),f&&t(aNe),f&&t(Ao),w(GA),w(XA),w(Rh),w(Ph),w(zA),f&&t(nNe),f&&t(Ei),w(WA),f&&t(sNe),f&&t(yo),w(QA),w(JA),w(ep),w(op),w(YA),f&&t(lNe),f&&t(wi),w(KA),f&&t(iNe),f&&t(Lo),w(ZA),w(o6),w(ap),w(r6),w(Ku),f&&t(dNe),f&&t(Li),w(t6),f&&t(cNe),f&&t(xo),w(a6),w(s6),w(e_),w(l6),w(X_),f&&t(fNe),f&&t(ki),w(i6),f&&t(mNe),f&&t($o),w(d6),w(f6),w(W_),w(m6),w($1),f&&t(gNe),f&&t(Pi),w(g6),f&&t(hNe),f&&t(ko),w(h6),w(u6),w(S1),w(_6),w(p8),f&&t(pNe),f&&t(qi),w(b6),f&&t(uNe),f&&t(So),w(v6),w(T6),w(_8),w(M6),w(B8),f&&t(_Ne),f&&t(Di),w(E6),f&&t(bNe),f&&t(Ro),w(C6),w(A6),w(q8),w(y6),w(Sb),f&&t(vNe),f&&t(Vi),w(L6),f&&t(FNe),f&&t(Po),w(x6),w(k6),w(Pb),w(S6),w(f2),f&&t(TNe),f&&t(Wi),w(R6),f&&t(MNe),f&&t(Bo),w(P6),w(I6),w(g2),w(q6),w(F2),f&&t(ENe),f&&t(Ui),w(N6),f&&t(CNe),f&&t(Io),w(j6),w(G6),w(M2),w(O6),w(av),f&&t(wNe),f&&t(Ki),w(V6),f&&t(ANe),f&&t(qo),w(X6),w(W6),w(sv),w(Q6),w(Hv),f&&t(yNe),f&&t(od),w(H6),f&&t(LNe),f&&t(No),w(U6),w(Y6),w(Jv),w(K6),w(Zv),f&&t(xNe),f&&t(ad),w(Z6),f&&t($Ne),f&&t(jo),w(ey),w(ry),w(o3),w(ty),w(p3),f&&t(kNe),f&&t(ld),w(ay),f&&t(SNe),f&&t(Do),w(ny),w(ly),w(_3),w(iy),w(F3),f&&t(RNe),f&&t(cd),w(dy),f&&t(PNe),f&&t(Go),w(cy),w(my),w(M3),w(gy),w(R3),f&&t(BNe),f&&t(gd),w(hy),f&&t(INe),f&&t(Oo),w(py),w(_y),w(B3),w(by),w(O3),f&&t(qNe),f&&t(ud),w(vy),f&&t(NNe),f&&t(Vo),w(Fy),w(My),w(X3),w(Ey),w(oF),f&&t(jNe),f&&t(vd),w(Cy),f&&t(DNe),f&&t(Xo),w(wy),w(yy),w(tF),w(Ly),w(lF),f&&t(GNe),f&&t(Md),w($y),f&&t(ONe),f&&t(zo),w(ky),w(Ry),w(dF),w(Py),w(uF),f&&t(VNe),f&&t(wd),w(By),f&&t(XNe),f&&t(Wo),w(Iy),w(Ny),w(bF),w(jy),w(EF),f&&t(zNe),f&&t(xd),w(Dy),f&&t(WNe),f&&t(Qo),w(Gy),w(Vy),w(wF),w(Xy),w(xF),f&&t(QNe),f&&t(Sd),w(Wy),f&&t(HNe),f&&t(Ho),w(Qy),w(Uy),w(kF),w(Jy),w(PF),f&&t(UNe),f&&t(Bd),w(Yy),f&&t(JNe),f&&t(Uo),w(Ky),w(eL),w(IF),w(oL),w(OF),f&&t(YNe),f&&t(Nd),w(rL),f&&t(KNe),f&&t(Jo),w(tL),w(nL),w(XF),w(sL),w(QF),f&&t(ZNe),f&&t(Gd),w(lL),f&&t(eje),f&&t(Yo),w(iL),w(cL),w(UF),w(fL),w(OT),f&&t(oje),f&&t(Xd),w(mL),f&&t(rje),f&&t(Ko),w(gL),w(pL),w(XT),w(uL),w(h7),f&&t(tje),f&&t(Qd),w(_L),f&&t(aje),f&&t(Zo),w(bL),w(FL),w(u7),w(TL),w($7),f&&t(nje),f&&t(Jd),w(ML),f&&t(sje),f&&t(er),w(EL),w(wL),w(S7),w(AL),w(q7),f&&t(lje),f&&t(Zd),w(yL),f&&t(ije),f&&t(or),w(LL),w($L),w(j7),w(kL),w(sM),f&&t(dje),f&&t(rc),w(SL),f&&t(cje),f&&t(rr),w(RL),w(BL),w(iM),w(IL),w(vM),f&&t(fje),f&&t(nc),w(qL),f&&t(mje),f&&t(tr),w(NL),w(DL),w(TM),w(GL),w(HM),f&&t(gje),f&&t(ic),w(OL),f&&t(hje),f&&t(ar),w(VL),w(zL),w(JM),w(WL),w(h4),f&&t(pje),f&&t(fc),w(QL),f&&t(uje),f&&t(nr),w(HL),w(JL),w(u4),w(YL),w(v4),f&&t(_je),f&&t(hc),w(ZL),f&&t(bje),f&&t(sr),w(e9),w(r9),w(T4),w(t9),w(E4),f&&t(vje),f&&t(_c),w(a9),f&&t(Fje),f&&t(lr),w(n9),w(l9),w(w4),w(i9),w(W4),f&&t(Tje),f&&t(Fc),w(d9),f&&t(Mje),f&&t(ir),w(c9),w(m9),w(H4),w(g9),w(pE),f&&t(Eje),f&&t(Ec),w(h9),f&&t(Cje),f&&t(dr),w(p9),w(_9),w(_E),w(b9),w(vE),f&&t(wje),f&&t(Ac),w(v9),f&&t(Aje),f&&t(cr),w(F9),w(M9),w(TE),w(E9),w(EE),f&&t(yje),f&&t(xc),w(C9),f&&t(Lje),f&&t(fr),w(w9),w(y9),w(wE),w(L9),w(KE),f&&t(xje),f&&t(Sc),w(x9),f&&t($je),f&&t(mr),w($9),w(S9),w(eC),w(R9),w(fC),f&&t(kje),f&&t(Bc),w(P9),f&&t(Sje),f&&t(gr),w(B9),w(q9),w(gC),w(N9),w(AC),f&&t(Rje),f&&t(Nc),w(j9),f&&t(Pje),f&&t(hr),w(D9),w(O9),w(LC),w(V9),w(jC),f&&t(Bje),f&&t(Gc),w(X9),f&&t(Ije),f&&t(pr),w(z9),w(Q9),w(GC),w(H9),w(YC),f&&t(qje),f&&t(Xc),w(U9),f&&t(Nje),f&&t(ur),w(J9),w(K9),w(ZC),w(Z9),w(c5),f&&t(jje),f&&t(Qc),w(ex),f&&t(Dje),f&&t(_r),w(ox),w(tx),w(m5),w(ax),w(E5),f&&t(Gje),f&&t(Jc),w(nx),f&&t(Oje),f&&t(br),w(sx),w(ix),w(w5),w(dx),w(P5),f&&t(Vje),f&&t(Zc),w(cx),f&&t(Xje),f&&t(vr),w(fx),w(gx),w(I5),w(hx),w(z5),f&&t(zje),f&&t(rf),w(px),f&&t(Wje),f&&t(Fr),w(ux),w(bx),w(Q5),w(vx),w(U5),f&&t(Qje),f&&t(nf),w(Fx),f&&t(Hje),f&&t(Tr),w(Tx),w(Ex),w(Y5),w(Cx),w(ew),f&&t(Uje),f&&t(df),w(Ax),f&&t(Jje),f&&t(Mr),w(yx),w(xx),w(rw),w($x),w(aw)}}}const Kkt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Zkt(L){return Zxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sSt extends Uxt{constructor(g){super();Jxt(this,g,Zkt,Ykt,Yxt,{})}}export{sSt as default,Kkt as metadata};
