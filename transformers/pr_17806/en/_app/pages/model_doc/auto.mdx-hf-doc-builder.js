import{S as zDt,i as WDt,s as QDt,e as a,k as l,w as F,t as o,M as HDt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as UDt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as vKr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function JDt(x){let g,v,p,m,_,d,h,Eo,Ei,$f,nt,Ci,wi,LA,kf,Oe,We,Ai,Rn,yA,Pn,Bn,xA,Li,In,$A,yi,Sf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),$f=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),LA=o(")."),kf=l(),Oe=a("p"),We=o("Likewise, if your "),Ai=a("code"),Rn=o("NewModel"),yA=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),xA=o(`, make sure its
`),Li=a("code"),In=o("config_class"),$A=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),Sf=o("NewModelConfig"),$a=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var nS=s(p);m=r(nS,"NewModelConfig"),nS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var sS=s(Ei);$f=r(sS,"model_type"),sS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var lS=s(Ci);wi=r(lS,'"new-model"'),lS.forEach(t),LA=r(Ae,")."),Ae.forEach(t),kf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var ka=s(Ai);Rn=r(ka,"NewModel"),ka.forEach(t),yA=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var iS=s(Pn);Bn=r(iS,"PreTrainedModel"),iS.forEach(t),xA=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Rf=s(Li);In=r(Rf,"config_class"),Rf.forEach(t),$A=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var dS=s(yi);Sf=r(dS,"NewModelConfig"),dS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,$f),e(g,nt),e(g,Ci),e(Ci,wi),e(g,LA),b(Qe,kf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ai),e(Ai,Rn),e(Oe,yA),e(Oe,Pn),e(Pn,Bn),e(Oe,xA),e(Oe,Li),e(Li,In),e(Oe,$A),e(Oe,yi),e(yi,Sf),e(Oe,$a)},d(Qe){Qe&&t(g),Qe&&t(kf),Qe&&t(Oe)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_,d,h,Eo,Ei,$f,nt,Ci,wi,LA,kf,Oe,We,Ai,Rn,yA,Pn,Bn,xA,Li,In,$A,yi,Sf,$a,Qe,Ae,nS,xi,sS,lS,Co,ka,iS,Rf,dS,dWe,HGe,$i,Pf,bte,kA,cWe,vte,fWe,UGe,Nn,mWe,Fte,gWe,hWe,Tte,pWe,_We,JGe,SA,YGe,cS,uWe,KGe,Bf,ZGe,ki,If,Mte,RA,bWe,Ete,vWe,eOe,wo,PA,FWe,BA,TWe,fS,MWe,EWe,CWe,IA,wWe,Cte,AWe,LWe,yWe,Ar,NA,xWe,wte,$We,kWe,Si,SWe,Ate,RWe,PWe,Lte,BWe,IWe,NWe,A,Nf,yte,qWe,jWe,mS,DWe,GWe,OWe,qf,xte,VWe,XWe,gS,zWe,WWe,QWe,jf,$te,HWe,UWe,hS,JWe,YWe,KWe,Df,kte,ZWe,eQe,pS,oQe,rQe,tQe,Gf,Ste,aQe,nQe,_S,sQe,lQe,iQe,Of,Rte,dQe,cQe,uS,fQe,mQe,gQe,Vf,Pte,hQe,pQe,bS,_Qe,uQe,bQe,Xf,Bte,vQe,FQe,vS,TQe,MQe,EQe,zf,Ite,CQe,wQe,FS,AQe,LQe,yQe,Wf,Nte,xQe,$Qe,TS,kQe,SQe,RQe,Qf,qte,PQe,BQe,MS,IQe,NQe,qQe,Hf,jte,jQe,DQe,ES,GQe,OQe,VQe,Uf,Dte,XQe,zQe,CS,WQe,QQe,HQe,Jf,Gte,UQe,JQe,wS,YQe,KQe,ZQe,Yf,Ote,eHe,oHe,AS,rHe,tHe,aHe,Kf,Vte,nHe,sHe,LS,lHe,iHe,dHe,Zf,Xte,cHe,fHe,yS,mHe,gHe,hHe,em,zte,pHe,_He,xS,uHe,bHe,vHe,om,Wte,FHe,THe,$S,MHe,EHe,CHe,rm,Qte,wHe,AHe,kS,LHe,yHe,xHe,tm,Hte,$He,kHe,SS,SHe,RHe,PHe,am,Ute,BHe,IHe,RS,NHe,qHe,jHe,nm,Jte,DHe,GHe,PS,OHe,VHe,XHe,sm,Yte,zHe,WHe,BS,QHe,HHe,UHe,lm,Kte,JHe,YHe,IS,KHe,ZHe,eUe,im,Zte,oUe,rUe,NS,tUe,aUe,nUe,dm,eae,sUe,lUe,qS,iUe,dUe,cUe,cm,oae,fUe,mUe,jS,gUe,hUe,pUe,fm,rae,_Ue,uUe,DS,bUe,vUe,FUe,mm,tae,TUe,MUe,GS,EUe,CUe,wUe,gm,aae,AUe,LUe,OS,yUe,xUe,$Ue,hm,nae,kUe,SUe,VS,RUe,PUe,BUe,pm,sae,IUe,NUe,XS,qUe,jUe,DUe,_m,lae,GUe,OUe,zS,VUe,XUe,zUe,um,iae,WUe,QUe,WS,HUe,UUe,JUe,bm,dae,YUe,KUe,QS,ZUe,eJe,oJe,vm,cae,rJe,tJe,HS,aJe,nJe,sJe,Fm,fae,lJe,iJe,US,dJe,cJe,fJe,Tm,mae,mJe,gJe,JS,hJe,pJe,_Je,Mm,gae,uJe,bJe,YS,vJe,FJe,TJe,Em,hae,MJe,EJe,KS,CJe,wJe,AJe,Cm,pae,LJe,yJe,ZS,xJe,$Je,kJe,wm,_ae,SJe,RJe,eR,PJe,BJe,IJe,Am,uae,NJe,qJe,oR,jJe,DJe,GJe,Lm,bae,OJe,VJe,rR,XJe,zJe,WJe,ym,vae,QJe,HJe,tR,UJe,JJe,YJe,xm,Fae,KJe,ZJe,aR,eYe,oYe,rYe,$m,Tae,tYe,aYe,nR,nYe,sYe,lYe,km,Mae,iYe,dYe,sR,cYe,fYe,mYe,Sm,Eae,gYe,hYe,lR,pYe,_Ye,uYe,Rm,Cae,bYe,vYe,iR,FYe,TYe,MYe,Pm,wae,EYe,CYe,dR,wYe,AYe,LYe,Bm,Aae,yYe,xYe,cR,$Ye,kYe,SYe,Im,Lae,RYe,PYe,fR,BYe,IYe,NYe,Nm,yae,qYe,jYe,mR,DYe,GYe,OYe,qm,xae,VYe,XYe,gR,zYe,WYe,QYe,jm,$ae,HYe,UYe,hR,JYe,YYe,KYe,Dm,kae,ZYe,eKe,pR,oKe,rKe,tKe,Gm,Sae,aKe,nKe,_R,sKe,lKe,iKe,Om,Rae,dKe,cKe,uR,fKe,mKe,gKe,Vm,Pae,hKe,pKe,bR,_Ke,uKe,bKe,Xm,Bae,vKe,FKe,vR,TKe,MKe,EKe,zm,Iae,CKe,wKe,FR,AKe,LKe,yKe,Wm,Nae,xKe,$Ke,TR,kKe,SKe,RKe,Qm,qae,PKe,BKe,MR,IKe,NKe,qKe,Hm,jae,jKe,DKe,ER,GKe,OKe,VKe,Um,Dae,XKe,zKe,CR,WKe,QKe,HKe,Jm,Gae,UKe,JKe,wR,YKe,KKe,ZKe,Ym,Oae,eZe,oZe,AR,rZe,tZe,aZe,Km,Vae,nZe,sZe,LR,lZe,iZe,dZe,Zm,Xae,cZe,fZe,yR,mZe,gZe,hZe,eg,zae,pZe,_Ze,xR,uZe,bZe,vZe,og,Wae,FZe,TZe,$R,MZe,EZe,CZe,rg,Qae,wZe,AZe,kR,LZe,yZe,xZe,tg,Hae,$Ze,kZe,SR,SZe,RZe,PZe,ag,Uae,BZe,IZe,RR,NZe,qZe,jZe,ng,Jae,DZe,GZe,PR,OZe,VZe,XZe,sg,Yae,zZe,WZe,BR,QZe,HZe,UZe,lg,Kae,JZe,YZe,IR,KZe,ZZe,eeo,ig,Zae,oeo,reo,NR,teo,aeo,neo,dg,ene,seo,leo,qR,ieo,deo,ceo,cg,one,feo,meo,jR,geo,heo,peo,fg,rne,_eo,ueo,DR,beo,veo,Feo,mg,tne,Teo,Meo,GR,Eeo,Ceo,weo,gg,ane,Aeo,Leo,OR,yeo,xeo,$eo,hg,nne,keo,Seo,VR,Reo,Peo,Beo,pg,sne,Ieo,Neo,XR,qeo,jeo,Deo,_g,lne,Geo,Oeo,zR,Veo,Xeo,zeo,ug,ine,Weo,Qeo,WR,Heo,Ueo,Jeo,bg,dne,Yeo,Keo,QR,Zeo,eoo,ooo,vg,cne,roo,too,HR,aoo,noo,soo,Fg,fne,loo,ioo,UR,doo,coo,foo,Tg,mne,moo,goo,JR,hoo,poo,_oo,Mg,gne,uoo,boo,YR,voo,Foo,Too,Eg,hne,Moo,Eoo,KR,Coo,woo,Aoo,Cg,pne,Loo,yoo,ZR,xoo,$oo,koo,wg,_ne,Soo,Roo,eP,Poo,Boo,Ioo,Ag,une,Noo,qoo,oP,joo,Doo,Goo,Lg,bne,Ooo,Voo,rP,Xoo,zoo,Woo,yg,vne,Qoo,Hoo,tP,Uoo,Joo,Yoo,xg,Fne,Koo,Zoo,aP,ero,oro,rro,$g,Tne,tro,aro,nP,nro,sro,lro,kg,Mne,iro,dro,sP,cro,fro,mro,Sg,Ene,gro,hro,lP,pro,_ro,uro,Rg,Cne,bro,vro,iP,Fro,Tro,Mro,Pg,wne,Ero,Cro,dP,wro,Aro,Lro,Bg,Ane,yro,xro,cP,$ro,kro,Sro,Ig,Lne,Rro,Pro,fP,Bro,Iro,Nro,Ng,yne,qro,jro,mP,Dro,Gro,Oro,qg,xne,Vro,Xro,gP,zro,Wro,Qro,jg,$ne,Hro,Uro,hP,Jro,Yro,Kro,Dg,kne,Zro,eto,pP,oto,rto,tto,Gg,Sne,ato,nto,_P,sto,lto,ito,Og,Rne,dto,cto,uP,fto,mto,gto,Vg,hto,Xg,qA,pto,Pne,_to,oOe,Ri,zg,Bne,jA,uto,Ine,bto,rOe,Ao,DA,vto,GA,Fto,bP,Tto,Mto,Eto,OA,Cto,Nne,wto,Ato,Lto,Lr,VA,yto,qne,xto,$to,Sa,kto,jne,Sto,Rto,Dne,Pto,Bto,Gne,Ito,Nto,qto,k,qn,One,jto,Dto,vP,Gto,Oto,FP,Vto,Xto,zto,jn,Vne,Wto,Qto,TP,Hto,Uto,MP,Jto,Yto,Kto,Dn,Xne,Zto,eao,EP,oao,rao,CP,tao,aao,nao,Wg,zne,sao,lao,wP,iao,dao,cao,Gn,Wne,fao,mao,AP,gao,hao,LP,pao,_ao,uao,Qg,Qne,bao,vao,yP,Fao,Tao,Mao,Hg,Hne,Eao,Cao,xP,wao,Aao,Lao,Ug,Une,yao,xao,$P,$ao,kao,Sao,On,Jne,Rao,Pao,kP,Bao,Iao,SP,Nao,qao,jao,Vn,Yne,Dao,Gao,RP,Oao,Vao,PP,Xao,zao,Wao,Xn,Kne,Qao,Hao,BP,Uao,Jao,IP,Yao,Kao,Zao,Jg,Zne,eno,ono,NP,rno,tno,ano,Yg,ese,nno,sno,qP,lno,ino,dno,Kg,ose,cno,fno,jP,mno,gno,hno,zn,rse,pno,_no,DP,uno,bno,GP,vno,Fno,Tno,Zg,tse,Mno,Eno,OP,Cno,wno,Ano,Wn,ase,Lno,yno,VP,xno,$no,XP,kno,Sno,Rno,Qn,nse,Pno,Bno,zP,Ino,Nno,WP,qno,jno,Dno,Hn,sse,Gno,Ono,QP,Vno,Xno,HP,zno,Wno,Qno,eh,lse,Hno,Uno,UP,Jno,Yno,Kno,Un,ise,Zno,eso,JP,oso,rso,YP,tso,aso,nso,Jn,dse,sso,lso,KP,iso,dso,ZP,cso,fso,mso,Yn,cse,gso,hso,eB,pso,_so,oB,uso,bso,vso,Kn,fse,Fso,Tso,rB,Mso,Eso,tB,Cso,wso,Aso,Zn,mse,Lso,yso,aB,xso,$so,nB,kso,Sso,Rso,es,gse,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,oh,hse,Gso,Oso,iB,Vso,Xso,zso,os,pse,Wso,Qso,dB,Hso,Uso,cB,Jso,Yso,Kso,rh,_se,Zso,elo,fB,olo,rlo,tlo,rs,use,alo,nlo,mB,slo,llo,gB,ilo,dlo,clo,ts,bse,flo,mlo,hB,glo,hlo,pB,plo,_lo,ulo,as,vse,blo,vlo,_B,Flo,Tlo,uB,Mlo,Elo,Clo,th,Fse,wlo,Alo,bB,Llo,ylo,xlo,ns,Tse,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Ilo,ss,Mse,Nlo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,ah,Ese,Xlo,zlo,EB,Wlo,Qlo,Hlo,ls,Cse,Ulo,Jlo,CB,Ylo,Klo,wB,Zlo,eio,oio,is,wse,rio,tio,AB,aio,nio,LB,sio,lio,iio,ds,Ase,dio,cio,yB,fio,mio,xB,gio,hio,pio,cs,Lse,_io,uio,$B,bio,vio,kB,Fio,Tio,Mio,fs,yse,Eio,Cio,SB,wio,Aio,RB,Lio,yio,xio,ms,xse,$io,kio,PB,Sio,Rio,BB,Pio,Bio,Iio,gs,$se,Nio,qio,IB,jio,Dio,NB,Gio,Oio,Vio,hs,kse,Xio,zio,qB,Wio,Qio,jB,Hio,Uio,Jio,nh,Sse,Yio,Kio,DB,Zio,edo,odo,ps,Rse,rdo,tdo,GB,ado,ndo,OB,sdo,ldo,ido,sh,Pse,ddo,cdo,VB,fdo,mdo,gdo,lh,Bse,hdo,pdo,XB,_do,udo,bdo,_s,Ise,vdo,Fdo,zB,Tdo,Mdo,WB,Edo,Cdo,wdo,us,Nse,Ado,Ldo,QB,ydo,xdo,HB,$do,kdo,Sdo,bs,qse,Rdo,Pdo,UB,Bdo,Ido,JB,Ndo,qdo,jdo,ih,jse,Ddo,Gdo,YB,Odo,Vdo,Xdo,vs,Dse,zdo,Wdo,KB,Qdo,Hdo,ZB,Udo,Jdo,Ydo,Fs,Gse,Kdo,Zdo,eI,eco,oco,oI,rco,tco,aco,Ts,Ose,nco,sco,rI,lco,ico,tI,dco,cco,fco,Ms,Vse,mco,gco,aI,hco,pco,nI,_co,uco,bco,Es,Xse,vco,Fco,sI,Tco,Mco,lI,Eco,Cco,wco,Cs,zse,Aco,Lco,iI,yco,xco,dI,$co,kco,Sco,dh,Wse,Rco,Pco,cI,Bco,Ico,Nco,ws,Qse,qco,jco,fI,Dco,Gco,mI,Oco,Vco,Xco,ch,Hse,zco,Wco,gI,Qco,Hco,Uco,fh,Use,Jco,Yco,hI,Kco,Zco,efo,mh,Jse,ofo,rfo,pI,tfo,afo,nfo,gh,Yse,sfo,lfo,_I,ifo,dfo,cfo,As,Kse,ffo,mfo,uI,gfo,hfo,bI,pfo,_fo,ufo,hh,Zse,bfo,vfo,vI,Ffo,Tfo,Mfo,Ls,ele,Efo,Cfo,FI,wfo,Afo,TI,Lfo,yfo,xfo,ys,ole,$fo,kfo,MI,Sfo,Rfo,EI,Pfo,Bfo,Ifo,xs,rle,Nfo,qfo,CI,jfo,Dfo,wI,Gfo,Ofo,Vfo,$s,tle,Xfo,zfo,AI,Wfo,Qfo,LI,Hfo,Ufo,Jfo,ks,ale,Yfo,Kfo,yI,Zfo,emo,xI,omo,rmo,tmo,Ss,nle,amo,nmo,$I,smo,lmo,kI,imo,dmo,cmo,ph,sle,fmo,mmo,SI,gmo,hmo,pmo,_h,lle,_mo,umo,RI,bmo,vmo,Fmo,Rs,ile,Tmo,Mmo,PI,Emo,Cmo,BI,wmo,Amo,Lmo,Ps,dle,ymo,xmo,II,$mo,kmo,NI,Smo,Rmo,Pmo,Bs,cle,Bmo,Imo,qI,Nmo,qmo,jI,jmo,Dmo,Gmo,uh,fle,Omo,Vmo,DI,Xmo,zmo,Wmo,bh,mle,Qmo,Hmo,GI,Umo,Jmo,Ymo,vh,gle,Kmo,Zmo,OI,ego,ogo,rgo,Is,hle,tgo,ago,VI,ngo,sgo,XI,lgo,igo,dgo,Ns,ple,cgo,fgo,zI,mgo,ggo,WI,hgo,pgo,_go,Fh,_le,ugo,bgo,QI,vgo,Fgo,Tgo,Th,ule,Mgo,Ego,HI,Cgo,wgo,Ago,Mh,ble,Lgo,ygo,UI,xgo,$go,kgo,qs,vle,Sgo,Rgo,JI,Pgo,Bgo,YI,Igo,Ngo,qgo,Eh,Fle,jgo,Dgo,KI,Ggo,Ogo,Vgo,Ch,Tle,Xgo,zgo,ZI,Wgo,Qgo,Hgo,js,Mle,Ugo,Jgo,eN,Ygo,Kgo,oN,Zgo,eho,oho,Ds,Ele,rho,tho,rN,aho,nho,tN,sho,lho,iho,Gs,Cle,dho,cho,aN,fho,mho,nN,gho,hho,pho,Os,wle,_ho,uho,sN,bho,vho,lN,Fho,Tho,Mho,wh,Eho,Ah,XA,Cho,Ale,who,tOe,Pi,Lh,Lle,zA,Aho,yle,Lho,aOe,Lo,WA,yho,QA,xho,iN,$ho,kho,Sho,HA,Rho,xle,Pho,Bho,Iho,He,UA,Nho,$le,qho,jho,Ra,Dho,kle,Gho,Oho,Sle,Vho,Xho,Rle,zho,Who,Qho,Y,yh,Ple,Hho,Uho,dN,Jho,Yho,Kho,xh,Ble,Zho,epo,cN,opo,rpo,tpo,$h,Ile,apo,npo,fN,spo,lpo,ipo,kh,Nle,dpo,cpo,mN,fpo,mpo,gpo,Sh,qle,hpo,ppo,gN,_po,upo,bpo,Rh,jle,vpo,Fpo,hN,Tpo,Mpo,Epo,Ph,Dle,Cpo,wpo,pN,Apo,Lpo,ypo,Bh,Gle,xpo,$po,_N,kpo,Spo,Rpo,Ih,Ole,Ppo,Bpo,uN,Ipo,Npo,qpo,Nh,Vle,jpo,Dpo,bN,Gpo,Opo,Vpo,qh,Xle,Xpo,zpo,vN,Wpo,Qpo,Hpo,jh,zle,Upo,Jpo,FN,Ypo,Kpo,Zpo,Dh,Wle,e_o,o_o,TN,r_o,t_o,a_o,Gh,Qle,n_o,s_o,MN,l_o,i_o,d_o,Oh,Hle,c_o,f_o,EN,m_o,g_o,h_o,Vh,Ule,p_o,__o,CN,u_o,b_o,v_o,Xh,Jle,F_o,T_o,wN,M_o,E_o,C_o,zh,Yle,w_o,A_o,AN,L_o,y_o,x_o,Wh,Kle,$_o,k_o,LN,S_o,R_o,P_o,Qh,Zle,B_o,I_o,yN,N_o,q_o,j_o,Hh,eie,D_o,G_o,xN,O_o,V_o,X_o,Uh,oie,z_o,W_o,$N,Q_o,H_o,U_o,Jh,rie,J_o,Y_o,kN,K_o,Z_o,euo,Yh,tie,ouo,ruo,SN,tuo,auo,nuo,Kh,aie,suo,luo,RN,iuo,duo,cuo,Zh,nie,fuo,muo,PN,guo,huo,puo,ep,sie,_uo,uuo,BN,buo,vuo,Fuo,op,lie,Tuo,Muo,IN,Euo,Cuo,wuo,rp,iie,Auo,Luo,NN,yuo,xuo,$uo,tp,die,kuo,Suo,qN,Ruo,Puo,Buo,ap,cie,Iuo,Nuo,jN,quo,juo,Duo,np,fie,Guo,Ouo,DN,Vuo,Xuo,zuo,sp,Wuo,lp,Quo,ip,JA,Huo,mie,Uuo,nOe,Bi,dp,gie,YA,Juo,hie,Yuo,sOe,yo,KA,Kuo,ZA,Zuo,GN,e1o,o1o,r1o,eL,t1o,pie,a1o,n1o,s1o,Ue,oL,l1o,_ie,i1o,d1o,Ii,c1o,uie,f1o,m1o,bie,g1o,h1o,p1o,he,cp,vie,_1o,u1o,ON,b1o,v1o,F1o,fp,Fie,T1o,M1o,Tie,E1o,C1o,w1o,mp,Mie,A1o,L1o,VN,y1o,x1o,$1o,gp,Eie,k1o,S1o,XN,R1o,P1o,B1o,hp,Cie,I1o,N1o,zN,q1o,j1o,D1o,pp,wie,G1o,O1o,WN,V1o,X1o,z1o,_p,Aie,W1o,Q1o,QN,H1o,U1o,J1o,up,Lie,Y1o,K1o,HN,Z1o,e2o,o2o,bp,yie,r2o,t2o,UN,a2o,n2o,s2o,vp,xie,l2o,i2o,JN,d2o,c2o,f2o,Fp,$ie,m2o,g2o,YN,h2o,p2o,_2o,Tp,kie,u2o,b2o,KN,v2o,F2o,T2o,Mp,Sie,M2o,E2o,ZN,C2o,w2o,A2o,Ep,Rie,L2o,y2o,eq,x2o,$2o,k2o,Cp,Pie,S2o,R2o,oq,P2o,B2o,I2o,wp,Bie,N2o,q2o,rq,j2o,D2o,G2o,Ap,Iie,O2o,V2o,tq,X2o,z2o,W2o,Lp,Q2o,yp,H2o,xp,rL,U2o,Nie,J2o,lOe,Ni,$p,qie,tL,Y2o,jie,K2o,iOe,xo,aL,Z2o,qi,ebo,aq,obo,rbo,nq,tbo,abo,nbo,nL,sbo,Die,lbo,ibo,dbo,st,sL,cbo,Gie,fbo,mbo,ji,gbo,Oie,hbo,pbo,sq,_bo,ubo,bbo,kp,vbo,Je,lL,Fbo,Vie,Tbo,Mbo,Pa,Ebo,Xie,Cbo,wbo,zie,Abo,Lbo,Wie,ybo,xbo,$bo,y,Sp,Qie,kbo,Sbo,lq,Rbo,Pbo,Bbo,Rp,Hie,Ibo,Nbo,iq,qbo,jbo,Dbo,Pp,Uie,Gbo,Obo,dq,Vbo,Xbo,zbo,Bp,Jie,Wbo,Qbo,cq,Hbo,Ubo,Jbo,Ip,Yie,Ybo,Kbo,fq,Zbo,evo,ovo,Np,Kie,rvo,tvo,mq,avo,nvo,svo,qp,Zie,lvo,ivo,gq,dvo,cvo,fvo,jp,ede,mvo,gvo,hq,hvo,pvo,_vo,Dp,ode,uvo,bvo,pq,vvo,Fvo,Tvo,Gp,rde,Mvo,Evo,_q,Cvo,wvo,Avo,Op,tde,Lvo,yvo,uq,xvo,$vo,kvo,Vp,ade,Svo,Rvo,bq,Pvo,Bvo,Ivo,Xp,nde,Nvo,qvo,vq,jvo,Dvo,Gvo,zp,sde,Ovo,Vvo,Fq,Xvo,zvo,Wvo,Wp,lde,Qvo,Hvo,Tq,Uvo,Jvo,Yvo,Qp,ide,Kvo,Zvo,Mq,e0o,o0o,r0o,Hp,dde,t0o,a0o,Eq,n0o,s0o,l0o,Up,cde,i0o,d0o,Cq,c0o,f0o,m0o,Jp,fde,g0o,h0o,wq,p0o,_0o,u0o,Yp,mde,b0o,v0o,Aq,F0o,T0o,M0o,Kp,gde,E0o,C0o,Lq,w0o,A0o,L0o,Zp,hde,y0o,x0o,yq,$0o,k0o,S0o,e_,pde,R0o,P0o,xq,B0o,I0o,N0o,o_,_de,q0o,j0o,$q,D0o,G0o,O0o,r_,ude,V0o,X0o,kq,z0o,W0o,Q0o,t_,bde,H0o,U0o,Sq,J0o,Y0o,K0o,a_,vde,Z0o,eFo,Rq,oFo,rFo,tFo,n_,Fde,aFo,nFo,Pq,sFo,lFo,iFo,s_,Tde,dFo,cFo,Bq,fFo,mFo,gFo,l_,Mde,hFo,pFo,Iq,_Fo,uFo,bFo,i_,Ede,vFo,FFo,Nq,TFo,MFo,EFo,d_,Cde,CFo,wFo,qq,AFo,LFo,yFo,c_,wde,xFo,$Fo,jq,kFo,SFo,RFo,Vs,Ade,PFo,BFo,Dq,IFo,NFo,Gq,qFo,jFo,DFo,f_,Lde,GFo,OFo,Oq,VFo,XFo,zFo,m_,yde,WFo,QFo,Vq,HFo,UFo,JFo,g_,xde,YFo,KFo,Xq,ZFo,e6o,o6o,h_,$de,r6o,t6o,zq,a6o,n6o,s6o,p_,kde,l6o,i6o,Wq,d6o,c6o,f6o,__,Sde,m6o,g6o,Qq,h6o,p6o,_6o,u_,Rde,u6o,b6o,Hq,v6o,F6o,T6o,b_,Pde,M6o,E6o,Uq,C6o,w6o,A6o,v_,Bde,L6o,y6o,Jq,x6o,$6o,k6o,F_,Ide,S6o,R6o,Yq,P6o,B6o,I6o,T_,Nde,N6o,q6o,Kq,j6o,D6o,G6o,M_,qde,O6o,V6o,Zq,X6o,z6o,W6o,E_,jde,Q6o,H6o,ej,U6o,J6o,Y6o,C_,Dde,K6o,Z6o,oj,eTo,oTo,rTo,w_,Gde,tTo,aTo,rj,nTo,sTo,lTo,A_,Ode,iTo,dTo,tj,cTo,fTo,mTo,L_,Vde,gTo,hTo,aj,pTo,_To,uTo,y_,Xde,bTo,vTo,nj,FTo,TTo,MTo,x_,zde,ETo,CTo,sj,wTo,ATo,LTo,$_,Wde,yTo,xTo,lj,$To,kTo,STo,k_,Qde,RTo,PTo,ij,BTo,ITo,NTo,S_,Hde,qTo,jTo,dj,DTo,GTo,OTo,R_,Ude,VTo,XTo,cj,zTo,WTo,QTo,P_,Jde,HTo,UTo,fj,JTo,YTo,KTo,B_,Yde,ZTo,e7o,mj,o7o,r7o,t7o,I_,Kde,a7o,n7o,gj,s7o,l7o,i7o,N_,Zde,d7o,c7o,hj,f7o,m7o,g7o,q_,ece,h7o,p7o,pj,_7o,u7o,b7o,j_,oce,v7o,F7o,_j,T7o,M7o,E7o,D_,rce,C7o,w7o,uj,A7o,L7o,y7o,G_,tce,x7o,$7o,bj,k7o,S7o,R7o,O_,ace,P7o,B7o,vj,I7o,N7o,q7o,V_,nce,j7o,D7o,Fj,G7o,O7o,V7o,X_,sce,X7o,z7o,Tj,W7o,Q7o,H7o,z_,lce,U7o,J7o,Mj,Y7o,K7o,Z7o,W_,ice,e8o,o8o,Ej,r8o,t8o,a8o,Q_,dce,n8o,s8o,Cj,l8o,i8o,d8o,H_,cce,c8o,f8o,wj,m8o,g8o,h8o,U_,fce,p8o,_8o,Aj,u8o,b8o,v8o,J_,mce,F8o,T8o,Lj,M8o,E8o,C8o,Y_,gce,w8o,A8o,yj,L8o,y8o,x8o,K_,hce,$8o,k8o,xj,S8o,R8o,P8o,Z_,pce,B8o,I8o,$j,N8o,q8o,j8o,eu,_ce,D8o,G8o,kj,O8o,V8o,X8o,ou,uce,z8o,W8o,Sj,Q8o,H8o,U8o,ru,bce,J8o,Y8o,Rj,K8o,Z8o,eMo,tu,vce,oMo,rMo,Pj,tMo,aMo,nMo,au,Fce,sMo,lMo,Bj,iMo,dMo,cMo,nu,Tce,fMo,mMo,Ij,gMo,hMo,pMo,su,Mce,_Mo,uMo,Nj,bMo,vMo,FMo,lu,Ece,TMo,MMo,qj,EMo,CMo,wMo,iu,Cce,AMo,LMo,jj,yMo,xMo,$Mo,du,wce,kMo,SMo,Dj,RMo,PMo,BMo,cu,Ace,IMo,NMo,Gj,qMo,jMo,DMo,fu,Lce,GMo,OMo,Oj,VMo,XMo,zMo,mu,yce,WMo,QMo,Vj,HMo,UMo,JMo,gu,xce,YMo,KMo,Xj,ZMo,eEo,oEo,hu,$ce,rEo,tEo,zj,aEo,nEo,sEo,pu,kce,lEo,iEo,Wj,dEo,cEo,fEo,_u,Sce,mEo,gEo,Qj,hEo,pEo,_Eo,uu,Rce,uEo,bEo,Hj,vEo,FEo,TEo,bu,Pce,MEo,EEo,Uj,CEo,wEo,AEo,vu,Bce,LEo,yEo,Jj,xEo,$Eo,kEo,Fu,Ice,SEo,REo,Yj,PEo,BEo,IEo,Tu,Nce,NEo,qEo,Kj,jEo,DEo,GEo,Mu,qce,OEo,VEo,Zj,XEo,zEo,WEo,Eu,jce,QEo,HEo,eD,UEo,JEo,YEo,Cu,Dce,KEo,ZEo,oD,e4o,o4o,r4o,wu,Gce,t4o,a4o,rD,n4o,s4o,l4o,Au,Oce,i4o,d4o,tD,c4o,f4o,m4o,Lu,Vce,g4o,h4o,aD,p4o,_4o,u4o,yu,Xce,b4o,v4o,nD,F4o,T4o,M4o,xu,zce,E4o,C4o,sD,w4o,A4o,L4o,$u,y4o,Wce,x4o,$4o,Qce,k4o,S4o,ku,dOe,Di,Su,Hce,iL,R4o,Uce,P4o,cOe,$o,dL,B4o,Gi,I4o,lD,N4o,q4o,iD,j4o,D4o,G4o,cL,O4o,Jce,V4o,X4o,z4o,lt,fL,W4o,Yce,Q4o,H4o,Oi,U4o,Kce,J4o,Y4o,dD,K4o,Z4o,eCo,Ru,oCo,Ye,mL,rCo,Zce,tCo,aCo,Ba,nCo,efe,sCo,lCo,ofe,iCo,dCo,rfe,cCo,fCo,mCo,G,Pu,tfe,gCo,hCo,cD,pCo,_Co,uCo,Bu,afe,bCo,vCo,fD,FCo,TCo,MCo,Iu,nfe,ECo,CCo,mD,wCo,ACo,LCo,Nu,sfe,yCo,xCo,gD,$Co,kCo,SCo,qu,lfe,RCo,PCo,hD,BCo,ICo,NCo,ju,ife,qCo,jCo,pD,DCo,GCo,OCo,Du,dfe,VCo,XCo,_D,zCo,WCo,QCo,Gu,cfe,HCo,UCo,uD,JCo,YCo,KCo,Ou,ffe,ZCo,e5o,bD,o5o,r5o,t5o,Vu,mfe,a5o,n5o,vD,s5o,l5o,i5o,Xu,gfe,d5o,c5o,FD,f5o,m5o,g5o,zu,hfe,h5o,p5o,TD,_5o,u5o,b5o,Wu,pfe,v5o,F5o,MD,T5o,M5o,E5o,Qu,_fe,C5o,w5o,ED,A5o,L5o,y5o,Hu,ufe,x5o,$5o,CD,k5o,S5o,R5o,Uu,bfe,P5o,B5o,wD,I5o,N5o,q5o,Ju,vfe,j5o,D5o,AD,G5o,O5o,V5o,Yu,Ffe,X5o,z5o,LD,W5o,Q5o,H5o,Ku,Tfe,U5o,J5o,yD,Y5o,K5o,Z5o,Zu,Mfe,e3o,o3o,xD,r3o,t3o,a3o,e1,Efe,n3o,s3o,$D,l3o,i3o,d3o,o1,Cfe,c3o,f3o,kD,m3o,g3o,h3o,r1,wfe,p3o,_3o,SD,u3o,b3o,v3o,t1,Afe,F3o,T3o,RD,M3o,E3o,C3o,a1,Lfe,w3o,A3o,PD,L3o,y3o,x3o,n1,yfe,$3o,k3o,BD,S3o,R3o,P3o,s1,xfe,B3o,I3o,ID,N3o,q3o,j3o,l1,$fe,D3o,G3o,ND,O3o,V3o,X3o,i1,kfe,z3o,W3o,qD,Q3o,H3o,U3o,d1,Sfe,J3o,Y3o,jD,K3o,Z3o,ewo,c1,Rfe,owo,rwo,DD,two,awo,nwo,f1,Pfe,swo,lwo,GD,iwo,dwo,cwo,m1,Bfe,fwo,mwo,OD,gwo,hwo,pwo,g1,Ife,_wo,uwo,VD,bwo,vwo,Fwo,h1,Nfe,Two,Mwo,XD,Ewo,Cwo,wwo,p1,qfe,Awo,Lwo,zD,ywo,xwo,$wo,_1,jfe,kwo,Swo,WD,Rwo,Pwo,Bwo,u1,Dfe,Iwo,Nwo,QD,qwo,jwo,Dwo,b1,Gfe,Gwo,Owo,HD,Vwo,Xwo,zwo,v1,Ofe,Wwo,Qwo,UD,Hwo,Uwo,Jwo,F1,Vfe,Ywo,Kwo,JD,Zwo,eAo,oAo,T1,Xfe,rAo,tAo,YD,aAo,nAo,sAo,M1,zfe,lAo,iAo,KD,dAo,cAo,fAo,E1,Wfe,mAo,gAo,ZD,hAo,pAo,_Ao,C1,uAo,Qfe,bAo,vAo,Hfe,FAo,TAo,w1,fOe,Vi,A1,Ufe,gL,MAo,Jfe,EAo,mOe,ko,hL,CAo,Xi,wAo,eG,AAo,LAo,oG,yAo,xAo,$Ao,pL,kAo,Yfe,SAo,RAo,PAo,it,_L,BAo,Kfe,IAo,NAo,zi,qAo,Zfe,jAo,DAo,rG,GAo,OAo,VAo,L1,XAo,Ke,uL,zAo,eme,WAo,QAo,Ia,HAo,ome,UAo,JAo,rme,YAo,KAo,tme,ZAo,eLo,oLo,z,y1,ame,rLo,tLo,tG,aLo,nLo,sLo,x1,nme,lLo,iLo,aG,dLo,cLo,fLo,$1,sme,mLo,gLo,nG,hLo,pLo,_Lo,k1,lme,uLo,bLo,sG,vLo,FLo,TLo,S1,ime,MLo,ELo,lG,CLo,wLo,ALo,R1,dme,LLo,yLo,iG,xLo,$Lo,kLo,P1,cme,SLo,RLo,dG,PLo,BLo,ILo,B1,fme,NLo,qLo,cG,jLo,DLo,GLo,I1,mme,OLo,VLo,fG,XLo,zLo,WLo,N1,gme,QLo,HLo,mG,ULo,JLo,YLo,q1,hme,KLo,ZLo,gG,eyo,oyo,ryo,j1,pme,tyo,ayo,hG,nyo,syo,lyo,D1,_me,iyo,dyo,pG,cyo,fyo,myo,G1,ume,gyo,hyo,_G,pyo,_yo,uyo,O1,bme,byo,vyo,uG,Fyo,Tyo,Myo,V1,vme,Eyo,Cyo,bG,wyo,Ayo,Lyo,X1,Fme,yyo,xyo,vG,$yo,kyo,Syo,z1,Tme,Ryo,Pyo,FG,Byo,Iyo,Nyo,W1,Mme,qyo,jyo,TG,Dyo,Gyo,Oyo,Q1,Eme,Vyo,Xyo,MG,zyo,Wyo,Qyo,H1,Cme,Hyo,Uyo,EG,Jyo,Yyo,Kyo,U1,wme,Zyo,e9o,CG,o9o,r9o,t9o,J1,Ame,a9o,n9o,wG,s9o,l9o,i9o,Y1,Lme,d9o,c9o,AG,f9o,m9o,g9o,K1,yme,h9o,p9o,LG,_9o,u9o,b9o,Z1,xme,v9o,F9o,yG,T9o,M9o,E9o,e2,$me,C9o,w9o,xG,A9o,L9o,y9o,o2,kme,x9o,$9o,$G,k9o,S9o,R9o,r2,Sme,P9o,B9o,kG,I9o,N9o,q9o,t2,Rme,j9o,D9o,SG,G9o,O9o,V9o,a2,Pme,X9o,z9o,RG,W9o,Q9o,H9o,n2,Bme,U9o,J9o,PG,Y9o,K9o,Z9o,s2,Ime,exo,oxo,BG,rxo,txo,axo,l2,Nme,nxo,sxo,IG,lxo,ixo,dxo,i2,qme,cxo,fxo,NG,mxo,gxo,hxo,d2,jme,pxo,_xo,qG,uxo,bxo,vxo,c2,Dme,Fxo,Txo,jG,Mxo,Exo,Cxo,f2,Gme,wxo,Axo,DG,Lxo,yxo,xxo,m2,$xo,Ome,kxo,Sxo,Vme,Rxo,Pxo,g2,gOe,Wi,h2,Xme,bL,Bxo,zme,Ixo,hOe,So,vL,Nxo,Qi,qxo,GG,jxo,Dxo,OG,Gxo,Oxo,Vxo,FL,Xxo,Wme,zxo,Wxo,Qxo,dt,TL,Hxo,Qme,Uxo,Jxo,Hi,Yxo,Hme,Kxo,Zxo,VG,e$o,o$o,r$o,p2,t$o,Ze,ML,a$o,Ume,n$o,s$o,Na,l$o,Jme,i$o,d$o,Yme,c$o,f$o,Kme,m$o,g$o,h$o,W,_2,Zme,p$o,_$o,XG,u$o,b$o,v$o,u2,ege,F$o,T$o,zG,M$o,E$o,C$o,b2,oge,w$o,A$o,WG,L$o,y$o,x$o,v2,rge,$$o,k$o,QG,S$o,R$o,P$o,F2,tge,B$o,I$o,HG,N$o,q$o,j$o,T2,age,D$o,G$o,UG,O$o,V$o,X$o,M2,nge,z$o,W$o,JG,Q$o,H$o,U$o,E2,sge,J$o,Y$o,YG,K$o,Z$o,eko,C2,lge,oko,rko,KG,tko,ako,nko,w2,ige,sko,lko,ZG,iko,dko,cko,A2,dge,fko,mko,eO,gko,hko,pko,L2,cge,_ko,uko,oO,bko,vko,Fko,y2,fge,Tko,Mko,rO,Eko,Cko,wko,x2,mge,Ako,Lko,tO,yko,xko,$ko,$2,gge,kko,Sko,aO,Rko,Pko,Bko,k2,hge,Iko,Nko,nO,qko,jko,Dko,S2,pge,Gko,Oko,sO,Vko,Xko,zko,R2,_ge,Wko,Qko,lO,Hko,Uko,Jko,P2,uge,Yko,Kko,iO,Zko,eSo,oSo,B2,bge,rSo,tSo,dO,aSo,nSo,sSo,I2,vge,lSo,iSo,cO,dSo,cSo,fSo,N2,Fge,mSo,gSo,fO,hSo,pSo,_So,q2,Tge,uSo,bSo,mO,vSo,FSo,TSo,j2,Mge,MSo,ESo,gO,CSo,wSo,ASo,D2,Ege,LSo,ySo,hO,xSo,$So,kSo,G2,Cge,SSo,RSo,pO,PSo,BSo,ISo,O2,wge,NSo,qSo,_O,jSo,DSo,GSo,V2,Age,OSo,VSo,uO,XSo,zSo,WSo,X2,Lge,QSo,HSo,bO,USo,JSo,YSo,z2,yge,KSo,ZSo,vO,eRo,oRo,rRo,W2,xge,tRo,aRo,FO,nRo,sRo,lRo,Q2,$ge,iRo,dRo,TO,cRo,fRo,mRo,H2,kge,gRo,hRo,Sge,pRo,_Ro,uRo,U2,Rge,bRo,vRo,MO,FRo,TRo,MRo,J2,Pge,ERo,CRo,EO,wRo,ARo,LRo,Y2,Bge,yRo,xRo,CO,$Ro,kRo,SRo,K2,Ige,RRo,PRo,wO,BRo,IRo,NRo,Z2,qRo,Nge,jRo,DRo,qge,GRo,ORo,eb,pOe,Ui,ob,jge,EL,VRo,Dge,XRo,_Oe,Ro,CL,zRo,Ji,WRo,AO,QRo,HRo,LO,URo,JRo,YRo,wL,KRo,Gge,ZRo,ePo,oPo,ct,AL,rPo,Oge,tPo,aPo,Yi,nPo,Vge,sPo,lPo,yO,iPo,dPo,cPo,rb,fPo,eo,LL,mPo,Xge,gPo,hPo,qa,pPo,zge,_Po,uPo,Wge,bPo,vPo,Qge,FPo,TPo,MPo,pe,tb,Hge,EPo,CPo,xO,wPo,APo,LPo,ab,Uge,yPo,xPo,$O,$Po,kPo,SPo,nb,Jge,RPo,PPo,kO,BPo,IPo,NPo,sb,Yge,qPo,jPo,SO,DPo,GPo,OPo,lb,Kge,VPo,XPo,RO,zPo,WPo,QPo,ib,Zge,HPo,UPo,PO,JPo,YPo,KPo,db,ehe,ZPo,eBo,BO,oBo,rBo,tBo,cb,ohe,aBo,nBo,IO,sBo,lBo,iBo,fb,rhe,dBo,cBo,NO,fBo,mBo,gBo,mb,the,hBo,pBo,qO,_Bo,uBo,bBo,gb,ahe,vBo,FBo,jO,TBo,MBo,EBo,hb,nhe,CBo,wBo,DO,ABo,LBo,yBo,pb,she,xBo,$Bo,GO,kBo,SBo,RBo,_b,lhe,PBo,BBo,OO,IBo,NBo,qBo,ub,ihe,jBo,DBo,VO,GBo,OBo,VBo,bb,dhe,XBo,zBo,XO,WBo,QBo,HBo,vb,che,UBo,JBo,zO,YBo,KBo,ZBo,Fb,eIo,fhe,oIo,rIo,mhe,tIo,aIo,Tb,uOe,Ki,Mb,ghe,yL,nIo,hhe,sIo,bOe,Po,xL,lIo,Zi,iIo,WO,dIo,cIo,QO,fIo,mIo,gIo,$L,hIo,phe,pIo,_Io,uIo,ft,kL,bIo,_he,vIo,FIo,ed,TIo,uhe,MIo,EIo,HO,CIo,wIo,AIo,Eb,LIo,oo,SL,yIo,bhe,xIo,$Io,ja,kIo,vhe,SIo,RIo,Fhe,PIo,BIo,The,IIo,NIo,qIo,N,Cb,Mhe,jIo,DIo,UO,GIo,OIo,VIo,wb,Ehe,XIo,zIo,JO,WIo,QIo,HIo,Ab,Che,UIo,JIo,YO,YIo,KIo,ZIo,Lb,whe,eNo,oNo,KO,rNo,tNo,aNo,yb,Ahe,nNo,sNo,ZO,lNo,iNo,dNo,xb,Lhe,cNo,fNo,eV,mNo,gNo,hNo,$b,yhe,pNo,_No,oV,uNo,bNo,vNo,kb,xhe,FNo,TNo,rV,MNo,ENo,CNo,Sb,$he,wNo,ANo,tV,LNo,yNo,xNo,Rb,khe,$No,kNo,aV,SNo,RNo,PNo,Pb,She,BNo,INo,nV,NNo,qNo,jNo,Bb,Rhe,DNo,GNo,sV,ONo,VNo,XNo,Ib,Phe,zNo,WNo,lV,QNo,HNo,UNo,Nb,Bhe,JNo,YNo,iV,KNo,ZNo,eqo,qb,Ihe,oqo,rqo,dV,tqo,aqo,nqo,jb,Nhe,sqo,lqo,cV,iqo,dqo,cqo,Db,qhe,fqo,mqo,fV,gqo,hqo,pqo,Gb,jhe,_qo,uqo,mV,bqo,vqo,Fqo,Ob,Dhe,Tqo,Mqo,gV,Eqo,Cqo,wqo,Vb,Ghe,Aqo,Lqo,hV,yqo,xqo,$qo,Xb,Ohe,kqo,Sqo,pV,Rqo,Pqo,Bqo,zb,Vhe,Iqo,Nqo,_V,qqo,jqo,Dqo,Wb,Xhe,Gqo,Oqo,uV,Vqo,Xqo,zqo,Qb,zhe,Wqo,Qqo,bV,Hqo,Uqo,Jqo,Hb,Whe,Yqo,Kqo,vV,Zqo,ejo,ojo,Ub,Qhe,rjo,tjo,FV,ajo,njo,sjo,Jb,Hhe,ljo,ijo,TV,djo,cjo,fjo,Yb,Uhe,mjo,gjo,MV,hjo,pjo,_jo,Kb,Jhe,ujo,bjo,EV,vjo,Fjo,Tjo,Zb,Yhe,Mjo,Ejo,CV,Cjo,wjo,Ajo,ev,Khe,Ljo,yjo,wV,xjo,$jo,kjo,ov,Zhe,Sjo,Rjo,AV,Pjo,Bjo,Ijo,rv,epe,Njo,qjo,LV,jjo,Djo,Gjo,tv,ope,Ojo,Vjo,yV,Xjo,zjo,Wjo,av,rpe,Qjo,Hjo,xV,Ujo,Jjo,Yjo,nv,tpe,Kjo,Zjo,$V,eDo,oDo,rDo,sv,ape,tDo,aDo,kV,nDo,sDo,lDo,lv,npe,iDo,dDo,SV,cDo,fDo,mDo,iv,spe,gDo,hDo,RV,pDo,_Do,uDo,dv,lpe,bDo,vDo,PV,FDo,TDo,MDo,cv,ipe,EDo,CDo,BV,wDo,ADo,LDo,fv,dpe,yDo,xDo,IV,$Do,kDo,SDo,mv,cpe,RDo,PDo,NV,BDo,IDo,NDo,gv,fpe,qDo,jDo,qV,DDo,GDo,ODo,hv,mpe,VDo,XDo,jV,zDo,WDo,QDo,pv,gpe,HDo,UDo,DV,JDo,YDo,KDo,_v,hpe,ZDo,eGo,GV,oGo,rGo,tGo,uv,ppe,aGo,nGo,OV,sGo,lGo,iGo,bv,_pe,dGo,cGo,VV,fGo,mGo,gGo,vv,hGo,upe,pGo,_Go,bpe,uGo,bGo,Fv,vOe,od,Tv,vpe,RL,vGo,Fpe,FGo,FOe,Bo,PL,TGo,rd,MGo,XV,EGo,CGo,zV,wGo,AGo,LGo,BL,yGo,Tpe,xGo,$Go,kGo,mt,IL,SGo,Mpe,RGo,PGo,td,BGo,Epe,IGo,NGo,WV,qGo,jGo,DGo,Mv,GGo,ro,NL,OGo,Cpe,VGo,XGo,Da,zGo,wpe,WGo,QGo,Ape,HGo,UGo,Lpe,JGo,YGo,KGo,Z,Ev,ype,ZGo,eOo,QV,oOo,rOo,tOo,Cv,xpe,aOo,nOo,HV,sOo,lOo,iOo,wv,$pe,dOo,cOo,UV,fOo,mOo,gOo,Av,kpe,hOo,pOo,JV,_Oo,uOo,bOo,Lv,Spe,vOo,FOo,YV,TOo,MOo,EOo,yv,Rpe,COo,wOo,KV,AOo,LOo,yOo,xv,Ppe,xOo,$Oo,ZV,kOo,SOo,ROo,$v,Bpe,POo,BOo,eX,IOo,NOo,qOo,kv,Ipe,jOo,DOo,oX,GOo,OOo,VOo,Sv,Npe,XOo,zOo,rX,WOo,QOo,HOo,Rv,qpe,UOo,JOo,tX,YOo,KOo,ZOo,Pv,jpe,eVo,oVo,aX,rVo,tVo,aVo,Bv,Dpe,nVo,sVo,nX,lVo,iVo,dVo,Iv,Gpe,cVo,fVo,sX,mVo,gVo,hVo,Nv,Ope,pVo,_Vo,lX,uVo,bVo,vVo,qv,Vpe,FVo,TVo,iX,MVo,EVo,CVo,jv,Xpe,wVo,AVo,dX,LVo,yVo,xVo,Dv,zpe,$Vo,kVo,cX,SVo,RVo,PVo,Gv,Wpe,BVo,IVo,fX,NVo,qVo,jVo,Ov,Qpe,DVo,GVo,mX,OVo,VVo,XVo,Vv,Hpe,zVo,WVo,gX,QVo,HVo,UVo,Xv,Upe,JVo,YVo,hX,KVo,ZVo,eXo,zv,Jpe,oXo,rXo,pX,tXo,aXo,nXo,Wv,Ype,sXo,lXo,_X,iXo,dXo,cXo,Qv,Kpe,fXo,mXo,uX,gXo,hXo,pXo,Hv,Zpe,_Xo,uXo,bX,bXo,vXo,FXo,Uv,e_e,TXo,MXo,vX,EXo,CXo,wXo,Jv,o_e,AXo,LXo,FX,yXo,xXo,$Xo,Yv,r_e,kXo,SXo,TX,RXo,PXo,BXo,Kv,t_e,IXo,NXo,MX,qXo,jXo,DXo,Zv,GXo,a_e,OXo,VXo,n_e,XXo,zXo,e0,TOe,ad,o0,s_e,qL,WXo,l_e,QXo,MOe,Io,jL,HXo,nd,UXo,EX,JXo,YXo,CX,KXo,ZXo,ezo,DL,ozo,i_e,rzo,tzo,azo,gt,GL,nzo,d_e,szo,lzo,sd,izo,c_e,dzo,czo,wX,fzo,mzo,gzo,r0,hzo,to,OL,pzo,f_e,_zo,uzo,Ga,bzo,m_e,vzo,Fzo,g_e,Tzo,Mzo,h_e,Ezo,Czo,wzo,No,t0,p_e,Azo,Lzo,AX,yzo,xzo,$zo,a0,__e,kzo,Szo,LX,Rzo,Pzo,Bzo,n0,u_e,Izo,Nzo,yX,qzo,jzo,Dzo,s0,b_e,Gzo,Ozo,xX,Vzo,Xzo,zzo,l0,v_e,Wzo,Qzo,$X,Hzo,Uzo,Jzo,i0,F_e,Yzo,Kzo,kX,Zzo,eWo,oWo,d0,rWo,T_e,tWo,aWo,M_e,nWo,sWo,c0,EOe,ld,f0,E_e,VL,lWo,C_e,iWo,COe,qo,XL,dWo,id,cWo,SX,fWo,mWo,RX,gWo,hWo,pWo,zL,_Wo,w_e,uWo,bWo,vWo,ht,WL,FWo,A_e,TWo,MWo,dd,EWo,L_e,CWo,wWo,PX,AWo,LWo,yWo,m0,xWo,ao,QL,$Wo,y_e,kWo,SWo,Oa,RWo,x_e,PWo,BWo,$_e,IWo,NWo,k_e,qWo,jWo,DWo,H,g0,S_e,GWo,OWo,BX,VWo,XWo,zWo,h0,R_e,WWo,QWo,IX,HWo,UWo,JWo,p0,P_e,YWo,KWo,NX,ZWo,eQo,oQo,_0,B_e,rQo,tQo,qX,aQo,nQo,sQo,u0,I_e,lQo,iQo,jX,dQo,cQo,fQo,b0,N_e,mQo,gQo,DX,hQo,pQo,_Qo,v0,q_e,uQo,bQo,GX,vQo,FQo,TQo,F0,j_e,MQo,EQo,OX,CQo,wQo,AQo,T0,D_e,LQo,yQo,VX,xQo,$Qo,kQo,M0,G_e,SQo,RQo,XX,PQo,BQo,IQo,E0,O_e,NQo,qQo,zX,jQo,DQo,GQo,C0,V_e,OQo,VQo,WX,XQo,zQo,WQo,w0,X_e,QQo,HQo,QX,UQo,JQo,YQo,A0,z_e,KQo,ZQo,HX,eHo,oHo,rHo,L0,W_e,tHo,aHo,UX,nHo,sHo,lHo,y0,Q_e,iHo,dHo,JX,cHo,fHo,mHo,x0,H_e,gHo,hHo,YX,pHo,_Ho,uHo,$0,U_e,bHo,vHo,KX,FHo,THo,MHo,k0,J_e,EHo,CHo,ZX,wHo,AHo,LHo,S0,Y_e,yHo,xHo,ez,$Ho,kHo,SHo,R0,K_e,RHo,PHo,oz,BHo,IHo,NHo,P0,Z_e,qHo,jHo,rz,DHo,GHo,OHo,B0,eue,VHo,XHo,tz,zHo,WHo,QHo,I0,oue,HHo,UHo,az,JHo,YHo,KHo,N0,rue,ZHo,eUo,nz,oUo,rUo,tUo,q0,tue,aUo,nUo,sz,sUo,lUo,iUo,j0,aue,dUo,cUo,lz,fUo,mUo,gUo,D0,nue,hUo,pUo,iz,_Uo,uUo,bUo,G0,sue,vUo,FUo,dz,TUo,MUo,EUo,O0,lue,CUo,wUo,cz,AUo,LUo,yUo,V0,iue,xUo,$Uo,fz,kUo,SUo,RUo,X0,due,PUo,BUo,mz,IUo,NUo,qUo,z0,cue,jUo,DUo,gz,GUo,OUo,VUo,W0,fue,XUo,zUo,hz,WUo,QUo,HUo,Q0,mue,UUo,JUo,pz,YUo,KUo,ZUo,H0,gue,eJo,oJo,_z,rJo,tJo,aJo,U0,nJo,hue,sJo,lJo,pue,iJo,dJo,J0,wOe,cd,Y0,_ue,HL,cJo,uue,fJo,AOe,jo,UL,mJo,fd,gJo,uz,hJo,pJo,bz,_Jo,uJo,bJo,JL,vJo,bue,FJo,TJo,MJo,pt,YL,EJo,vue,CJo,wJo,md,AJo,Fue,LJo,yJo,vz,xJo,$Jo,kJo,K0,SJo,no,KL,RJo,Tue,PJo,BJo,Va,IJo,Mue,NJo,qJo,Eue,jJo,DJo,Cue,GJo,OJo,VJo,V,Z0,wue,XJo,zJo,Fz,WJo,QJo,HJo,eF,Aue,UJo,JJo,Tz,YJo,KJo,ZJo,oF,Lue,eYo,oYo,Mz,rYo,tYo,aYo,rF,yue,nYo,sYo,Ez,lYo,iYo,dYo,tF,xue,cYo,fYo,Cz,mYo,gYo,hYo,aF,$ue,pYo,_Yo,wz,uYo,bYo,vYo,nF,kue,FYo,TYo,Az,MYo,EYo,CYo,sF,Sue,wYo,AYo,Lz,LYo,yYo,xYo,lF,Rue,$Yo,kYo,yz,SYo,RYo,PYo,iF,Pue,BYo,IYo,xz,NYo,qYo,jYo,dF,Bue,DYo,GYo,$z,OYo,VYo,XYo,cF,Iue,zYo,WYo,kz,QYo,HYo,UYo,fF,Nue,JYo,YYo,Sz,KYo,ZYo,eKo,mF,que,oKo,rKo,Rz,tKo,aKo,nKo,gF,jue,sKo,lKo,Pz,iKo,dKo,cKo,hF,Due,fKo,mKo,Bz,gKo,hKo,pKo,pF,Gue,_Ko,uKo,Iz,bKo,vKo,FKo,_F,Oue,TKo,MKo,Nz,EKo,CKo,wKo,uF,Vue,AKo,LKo,qz,yKo,xKo,$Ko,bF,Xue,kKo,SKo,jz,RKo,PKo,BKo,vF,zue,IKo,NKo,Dz,qKo,jKo,DKo,FF,Wue,GKo,OKo,Gz,VKo,XKo,zKo,TF,Que,WKo,QKo,Oz,HKo,UKo,JKo,MF,Hue,YKo,KKo,Vz,ZKo,eZo,oZo,EF,Uue,rZo,tZo,Xz,aZo,nZo,sZo,CF,Jue,lZo,iZo,zz,dZo,cZo,fZo,wF,Yue,mZo,gZo,Wz,hZo,pZo,_Zo,AF,Kue,uZo,bZo,Qz,vZo,FZo,TZo,LF,Zue,MZo,EZo,Hz,CZo,wZo,AZo,yF,e1e,LZo,yZo,Uz,xZo,$Zo,kZo,xF,o1e,SZo,RZo,Jz,PZo,BZo,IZo,$F,r1e,NZo,qZo,Yz,jZo,DZo,GZo,kF,t1e,OZo,VZo,Kz,XZo,zZo,WZo,SF,a1e,QZo,HZo,Zz,UZo,JZo,YZo,RF,n1e,KZo,ZZo,eW,eer,oer,rer,PF,s1e,ter,aer,oW,ner,ser,ler,BF,l1e,ier,der,rW,cer,fer,mer,IF,i1e,ger,her,tW,per,_er,uer,NF,d1e,ber,ver,aW,Fer,Ter,Mer,qF,c1e,Eer,Cer,nW,wer,Aer,Ler,jF,f1e,yer,xer,sW,$er,ker,Ser,DF,Rer,m1e,Per,Ber,g1e,Ier,Ner,GF,LOe,gd,OF,h1e,ZL,qer,p1e,jer,yOe,Do,ey,Der,hd,Ger,lW,Oer,Ver,iW,Xer,zer,Wer,oy,Qer,_1e,Her,Uer,Jer,_t,ry,Yer,u1e,Ker,Zer,pd,eor,b1e,oor,ror,dW,tor,aor,nor,VF,sor,so,ty,lor,v1e,ior,dor,Xa,cor,F1e,mor,gor,T1e,hor,por,M1e,_or,uor,bor,E1e,XF,C1e,vor,For,cW,Tor,Mor,Eor,zF,Cor,w1e,wor,Aor,A1e,Lor,yor,WF,xOe,_d,QF,L1e,ay,xor,y1e,$or,$Oe,Go,ny,kor,ud,Sor,fW,Ror,Por,mW,Bor,Ior,Nor,sy,qor,x1e,jor,Dor,Gor,ut,ly,Oor,$1e,Vor,Xor,bd,zor,k1e,Wor,Qor,gW,Hor,Uor,Jor,HF,Yor,lo,iy,Kor,S1e,Zor,err,za,orr,R1e,rrr,trr,P1e,arr,nrr,B1e,srr,lrr,irr,Fe,UF,I1e,drr,crr,hW,frr,mrr,grr,JF,N1e,hrr,prr,pW,_rr,urr,brr,YF,q1e,vrr,Frr,_W,Trr,Mrr,Err,KF,j1e,Crr,wrr,uW,Arr,Lrr,yrr,Xs,D1e,xrr,$rr,bW,krr,Srr,vW,Rrr,Prr,Brr,ZF,G1e,Irr,Nrr,FW,qrr,jrr,Drr,zs,O1e,Grr,Orr,TW,Vrr,Xrr,MW,zrr,Wrr,Qrr,bt,V1e,Hrr,Urr,EW,Jrr,Yrr,CW,Krr,Zrr,wW,etr,otr,rtr,e6,X1e,ttr,atr,AW,ntr,str,ltr,o6,z1e,itr,dtr,LW,ctr,ftr,mtr,r6,W1e,gtr,htr,yW,ptr,_tr,utr,t6,Q1e,btr,vtr,xW,Ftr,Ttr,Mtr,a6,H1e,Etr,Ctr,$W,wtr,Atr,Ltr,n6,U1e,ytr,xtr,kW,$tr,ktr,Str,s6,J1e,Rtr,Ptr,SW,Btr,Itr,Ntr,l6,qtr,Y1e,jtr,Dtr,K1e,Gtr,Otr,i6,kOe,vd,d6,Z1e,dy,Vtr,e2e,Xtr,SOe,Oo,cy,ztr,Fd,Wtr,RW,Qtr,Htr,PW,Utr,Jtr,Ytr,fy,Ktr,o2e,Ztr,ear,oar,vt,my,rar,r2e,tar,aar,Td,nar,t2e,sar,lar,BW,iar,dar,car,c6,far,io,gy,mar,a2e,gar,har,Wa,par,n2e,_ar,uar,s2e,bar,Far,l2e,Tar,Mar,Ear,i2e,f6,d2e,Car,war,IW,Aar,Lar,yar,m6,xar,c2e,$ar,kar,f2e,Sar,Rar,g6,ROe,Md,h6,m2e,hy,Par,g2e,Bar,POe,Vo,py,Iar,Ed,Nar,NW,qar,jar,qW,Dar,Gar,Oar,_y,Var,h2e,Xar,zar,War,Ft,uy,Qar,p2e,Har,Uar,Cd,Jar,_2e,Yar,Kar,jW,Zar,enr,onr,p6,rnr,co,by,tnr,u2e,anr,nnr,Qa,snr,b2e,lnr,inr,v2e,dnr,cnr,F2e,fnr,mnr,gnr,T2e,_6,M2e,hnr,pnr,DW,_nr,unr,bnr,u6,vnr,E2e,Fnr,Tnr,C2e,Mnr,Enr,b6,BOe,wd,v6,w2e,vy,Cnr,A2e,wnr,IOe,Xo,Fy,Anr,Ad,Lnr,GW,ynr,xnr,OW,$nr,knr,Snr,Ty,Rnr,L2e,Pnr,Bnr,Inr,Tt,My,Nnr,y2e,qnr,jnr,Ld,Dnr,x2e,Gnr,Onr,VW,Vnr,Xnr,znr,F6,Wnr,fo,Ey,Qnr,$2e,Hnr,Unr,Ha,Jnr,k2e,Ynr,Knr,S2e,Znr,esr,R2e,osr,rsr,tsr,Pe,T6,P2e,asr,nsr,XW,ssr,lsr,isr,M6,B2e,dsr,csr,zW,fsr,msr,gsr,E6,I2e,hsr,psr,WW,_sr,usr,bsr,C6,N2e,vsr,Fsr,QW,Tsr,Msr,Esr,w6,q2e,Csr,wsr,HW,Asr,Lsr,ysr,A6,j2e,xsr,$sr,UW,ksr,Ssr,Rsr,L6,D2e,Psr,Bsr,JW,Isr,Nsr,qsr,y6,G2e,jsr,Dsr,YW,Gsr,Osr,Vsr,x6,O2e,Xsr,zsr,KW,Wsr,Qsr,Hsr,$6,Usr,V2e,Jsr,Ysr,X2e,Ksr,Zsr,k6,NOe,yd,S6,z2e,Cy,elr,W2e,olr,qOe,zo,wy,rlr,xd,tlr,ZW,alr,nlr,eQ,slr,llr,ilr,Ay,dlr,Q2e,clr,flr,mlr,Mt,Ly,glr,H2e,hlr,plr,$d,_lr,U2e,ulr,blr,oQ,vlr,Flr,Tlr,R6,Mlr,mo,yy,Elr,J2e,Clr,wlr,Ua,Alr,Y2e,Llr,ylr,K2e,xlr,$lr,Z2e,klr,Slr,Rlr,et,P6,ebe,Plr,Blr,rQ,Ilr,Nlr,qlr,B6,obe,jlr,Dlr,tQ,Glr,Olr,Vlr,I6,rbe,Xlr,zlr,aQ,Wlr,Qlr,Hlr,N6,tbe,Ulr,Jlr,nQ,Ylr,Klr,Zlr,q6,abe,eir,oir,sQ,rir,tir,air,j6,nir,nbe,sir,lir,sbe,iir,dir,D6,jOe,kd,G6,lbe,xy,cir,ibe,fir,DOe,Wo,$y,mir,Sd,gir,lQ,hir,pir,iQ,_ir,uir,bir,ky,vir,dbe,Fir,Tir,Mir,Et,Sy,Eir,cbe,Cir,wir,Rd,Air,fbe,Lir,yir,dQ,xir,$ir,kir,O6,Sir,go,Ry,Rir,mbe,Pir,Bir,Ja,Iir,gbe,Nir,qir,hbe,jir,Dir,pbe,Gir,Oir,Vir,Le,V6,_be,Xir,zir,cQ,Wir,Qir,Hir,X6,ube,Uir,Jir,fQ,Yir,Kir,Zir,z6,bbe,edr,odr,mQ,rdr,tdr,adr,W6,vbe,ndr,sdr,gQ,ldr,idr,ddr,Q6,Fbe,cdr,fdr,hQ,mdr,gdr,hdr,H6,Tbe,pdr,_dr,pQ,udr,bdr,vdr,U6,Mbe,Fdr,Tdr,_Q,Mdr,Edr,Cdr,J6,Ebe,wdr,Adr,uQ,Ldr,ydr,xdr,Y6,Cbe,$dr,kdr,bQ,Sdr,Rdr,Pdr,K6,wbe,Bdr,Idr,vQ,Ndr,qdr,jdr,Z6,Ddr,Abe,Gdr,Odr,Lbe,Vdr,Xdr,eT,GOe,Pd,oT,ybe,Py,zdr,xbe,Wdr,OOe,Qo,By,Qdr,Bd,Hdr,FQ,Udr,Jdr,TQ,Ydr,Kdr,Zdr,Iy,ecr,$be,ocr,rcr,tcr,Ct,Ny,acr,kbe,ncr,scr,Id,lcr,Sbe,icr,dcr,MQ,ccr,fcr,mcr,rT,gcr,ho,qy,hcr,Rbe,pcr,_cr,Ya,ucr,Pbe,bcr,vcr,Bbe,Fcr,Tcr,Ibe,Mcr,Ecr,Ccr,jy,tT,Nbe,wcr,Acr,EQ,Lcr,ycr,xcr,aT,qbe,$cr,kcr,CQ,Scr,Rcr,Pcr,nT,Bcr,jbe,Icr,Ncr,Dbe,qcr,jcr,sT,VOe,Nd,lT,Gbe,Dy,Dcr,Obe,Gcr,XOe,Ho,Gy,Ocr,qd,Vcr,wQ,Xcr,zcr,AQ,Wcr,Qcr,Hcr,Oy,Ucr,Vbe,Jcr,Ycr,Kcr,wt,Vy,Zcr,Xbe,efr,ofr,jd,rfr,zbe,tfr,afr,LQ,nfr,sfr,lfr,iT,ifr,po,Xy,dfr,Wbe,cfr,ffr,Ka,mfr,Qbe,gfr,hfr,Hbe,pfr,_fr,Ube,ufr,bfr,vfr,ot,dT,Jbe,Ffr,Tfr,yQ,Mfr,Efr,Cfr,cT,Ybe,wfr,Afr,xQ,Lfr,yfr,xfr,fT,Kbe,$fr,kfr,$Q,Sfr,Rfr,Pfr,mT,Zbe,Bfr,Ifr,kQ,Nfr,qfr,jfr,gT,eve,Dfr,Gfr,SQ,Ofr,Vfr,Xfr,hT,zfr,ove,Wfr,Qfr,rve,Hfr,Ufr,pT,zOe,Dd,_T,tve,zy,Jfr,ave,Yfr,WOe,Uo,Wy,Kfr,Gd,Zfr,RQ,emr,omr,PQ,rmr,tmr,amr,Qy,nmr,nve,smr,lmr,imr,At,Hy,dmr,sve,cmr,fmr,Od,mmr,lve,gmr,hmr,BQ,pmr,_mr,umr,uT,bmr,_o,Uy,vmr,ive,Fmr,Tmr,Za,Mmr,dve,Emr,Cmr,cve,wmr,Amr,fve,Lmr,ymr,xmr,Vd,bT,mve,$mr,kmr,IQ,Smr,Rmr,Pmr,vT,gve,Bmr,Imr,NQ,Nmr,qmr,jmr,FT,hve,Dmr,Gmr,qQ,Omr,Vmr,Xmr,TT,zmr,pve,Wmr,Qmr,_ve,Hmr,Umr,MT,QOe,Xd,ET,uve,Jy,Jmr,bve,Ymr,HOe,Jo,Yy,Kmr,zd,Zmr,jQ,egr,ogr,DQ,rgr,tgr,agr,Ky,ngr,vve,sgr,lgr,igr,Lt,Zy,dgr,Fve,cgr,fgr,Wd,mgr,Tve,ggr,hgr,GQ,pgr,_gr,ugr,CT,bgr,uo,e9,vgr,Mve,Fgr,Tgr,en,Mgr,Eve,Egr,Cgr,Cve,wgr,Agr,wve,Lgr,ygr,xgr,o9,wT,Ave,$gr,kgr,OQ,Sgr,Rgr,Pgr,AT,Lve,Bgr,Igr,VQ,Ngr,qgr,jgr,LT,Dgr,yve,Ggr,Ogr,xve,Vgr,Xgr,yT,UOe,Qd,xT,$ve,r9,zgr,kve,Wgr,JOe,Yo,t9,Qgr,Hd,Hgr,XQ,Ugr,Jgr,zQ,Ygr,Kgr,Zgr,a9,ehr,Sve,ohr,rhr,thr,yt,n9,ahr,Rve,nhr,shr,Ud,lhr,Pve,ihr,dhr,WQ,chr,fhr,mhr,$T,ghr,bo,s9,hhr,Bve,phr,_hr,on,uhr,Ive,bhr,vhr,Nve,Fhr,Thr,qve,Mhr,Ehr,Chr,jve,kT,Dve,whr,Ahr,QQ,Lhr,yhr,xhr,ST,$hr,Gve,khr,Shr,Ove,Rhr,Phr,RT,YOe,Jd,PT,Vve,l9,Bhr,Xve,Ihr,KOe,Ko,i9,Nhr,Yd,qhr,HQ,jhr,Dhr,UQ,Ghr,Ohr,Vhr,d9,Xhr,zve,zhr,Whr,Qhr,xt,c9,Hhr,Wve,Uhr,Jhr,Kd,Yhr,Qve,Khr,Zhr,JQ,epr,opr,rpr,BT,tpr,vo,f9,apr,Hve,npr,spr,rn,lpr,Uve,ipr,dpr,Jve,cpr,fpr,Yve,mpr,gpr,hpr,tn,IT,Kve,ppr,_pr,YQ,upr,bpr,vpr,NT,Zve,Fpr,Tpr,KQ,Mpr,Epr,Cpr,qT,e0e,wpr,Apr,ZQ,Lpr,ypr,xpr,jT,o0e,$pr,kpr,eH,Spr,Rpr,Ppr,DT,Bpr,r0e,Ipr,Npr,t0e,qpr,jpr,GT,ZOe,Zd,OT,a0e,m9,Dpr,n0e,Gpr,eVe,Zo,g9,Opr,ec,Vpr,oH,Xpr,zpr,rH,Wpr,Qpr,Hpr,h9,Upr,s0e,Jpr,Ypr,Kpr,$t,p9,Zpr,l0e,e_r,o_r,oc,r_r,i0e,t_r,a_r,tH,n_r,s_r,l_r,VT,i_r,Fo,_9,d_r,d0e,c_r,f_r,an,m_r,c0e,g_r,h_r,f0e,p_r,__r,m0e,u_r,b_r,v_r,g0e,XT,h0e,F_r,T_r,aH,M_r,E_r,C_r,zT,w_r,p0e,A_r,L_r,_0e,y_r,x_r,WT,oVe,rc,QT,u0e,u9,$_r,b0e,k_r,rVe,er,b9,S_r,tc,R_r,nH,P_r,B_r,sH,I_r,N_r,q_r,v9,j_r,v0e,D_r,G_r,O_r,kt,F9,V_r,F0e,X_r,z_r,ac,W_r,T0e,Q_r,H_r,lH,U_r,J_r,Y_r,HT,K_r,yr,T9,Z_r,M0e,eur,our,nn,rur,E0e,tur,aur,C0e,nur,sur,w0e,lur,iur,dur,q,UT,A0e,cur,fur,iH,mur,gur,hur,JT,L0e,pur,_ur,dH,uur,bur,vur,YT,y0e,Fur,Tur,cH,Mur,Eur,Cur,KT,x0e,wur,Aur,fH,Lur,yur,xur,ZT,$0e,$ur,kur,mH,Sur,Rur,Pur,e7,k0e,Bur,Iur,gH,Nur,qur,jur,o7,S0e,Dur,Gur,hH,Our,Vur,Xur,r7,R0e,zur,Wur,pH,Qur,Hur,Uur,t7,P0e,Jur,Yur,_H,Kur,Zur,e1r,a7,B0e,o1r,r1r,uH,t1r,a1r,n1r,n7,I0e,s1r,l1r,bH,i1r,d1r,c1r,s7,N0e,f1r,m1r,vH,g1r,h1r,p1r,l7,q0e,_1r,u1r,FH,b1r,v1r,F1r,i7,j0e,T1r,M1r,TH,E1r,C1r,w1r,d7,D0e,A1r,L1r,MH,y1r,x1r,$1r,c7,G0e,k1r,S1r,EH,R1r,P1r,B1r,f7,O0e,I1r,N1r,CH,q1r,j1r,D1r,m7,V0e,G1r,O1r,wH,V1r,X1r,z1r,Ws,X0e,W1r,Q1r,AH,H1r,U1r,LH,J1r,Y1r,K1r,g7,z0e,Z1r,e2r,yH,o2r,r2r,t2r,h7,W0e,a2r,n2r,xH,s2r,l2r,i2r,p7,Q0e,d2r,c2r,$H,f2r,m2r,g2r,_7,H0e,h2r,p2r,kH,_2r,u2r,b2r,u7,U0e,v2r,F2r,SH,T2r,M2r,E2r,b7,J0e,C2r,w2r,RH,A2r,L2r,y2r,v7,Y0e,x2r,$2r,PH,k2r,S2r,R2r,F7,K0e,P2r,B2r,BH,I2r,N2r,q2r,T7,Z0e,j2r,D2r,IH,G2r,O2r,V2r,M7,eFe,X2r,z2r,NH,W2r,Q2r,H2r,E7,oFe,U2r,J2r,qH,Y2r,K2r,Z2r,C7,rFe,ebr,obr,jH,rbr,tbr,abr,w7,tFe,nbr,sbr,DH,lbr,ibr,dbr,A7,aFe,cbr,fbr,GH,mbr,gbr,hbr,L7,nFe,pbr,_br,OH,ubr,bbr,vbr,y7,sFe,Fbr,Tbr,VH,Mbr,Ebr,Cbr,x7,lFe,wbr,Abr,XH,Lbr,ybr,xbr,$7,iFe,$br,kbr,zH,Sbr,Rbr,Pbr,k7,dFe,Bbr,Ibr,WH,Nbr,qbr,jbr,S7,cFe,Dbr,Gbr,QH,Obr,Vbr,Xbr,R7,fFe,zbr,Wbr,HH,Qbr,Hbr,Ubr,P7,mFe,Jbr,Ybr,UH,Kbr,Zbr,evr,B7,gFe,ovr,rvr,JH,tvr,avr,nvr,I7,hFe,svr,lvr,YH,ivr,dvr,cvr,N7,pFe,fvr,mvr,KH,gvr,hvr,pvr,q7,_Fe,_vr,uvr,ZH,bvr,vvr,Fvr,j7,uFe,Tvr,Mvr,eU,Evr,Cvr,wvr,D7,bFe,Avr,Lvr,oU,yvr,xvr,$vr,G7,vFe,kvr,Svr,rU,Rvr,Pvr,Bvr,O7,tVe,nc,V7,FFe,M9,Ivr,TFe,Nvr,aVe,or,E9,qvr,sc,jvr,tU,Dvr,Gvr,aU,Ovr,Vvr,Xvr,C9,zvr,MFe,Wvr,Qvr,Hvr,St,w9,Uvr,EFe,Jvr,Yvr,lc,Kvr,CFe,Zvr,e0r,nU,o0r,r0r,t0r,X7,a0r,xr,A9,n0r,wFe,s0r,l0r,sn,i0r,AFe,d0r,c0r,LFe,f0r,m0r,yFe,g0r,h0r,p0r,se,z7,xFe,_0r,u0r,sU,b0r,v0r,F0r,W7,$Fe,T0r,M0r,lU,E0r,C0r,w0r,Q7,kFe,A0r,L0r,iU,y0r,x0r,$0r,H7,SFe,k0r,S0r,dU,R0r,P0r,B0r,U7,RFe,I0r,N0r,cU,q0r,j0r,D0r,J7,PFe,G0r,O0r,fU,V0r,X0r,z0r,Y7,BFe,W0r,Q0r,mU,H0r,U0r,J0r,K7,IFe,Y0r,K0r,gU,Z0r,eFr,oFr,Z7,NFe,rFr,tFr,hU,aFr,nFr,sFr,e8,qFe,lFr,iFr,pU,dFr,cFr,fFr,o8,jFe,mFr,gFr,_U,hFr,pFr,_Fr,r8,DFe,uFr,bFr,uU,vFr,FFr,TFr,t8,GFe,MFr,EFr,bU,CFr,wFr,AFr,a8,OFe,LFr,yFr,vU,xFr,$Fr,kFr,n8,VFe,SFr,RFr,FU,PFr,BFr,IFr,s8,XFe,NFr,qFr,TU,jFr,DFr,GFr,l8,zFe,OFr,VFr,MU,XFr,zFr,WFr,i8,WFe,QFr,HFr,EU,UFr,JFr,YFr,d8,QFe,KFr,ZFr,CU,e6r,o6r,r6r,c8,HFe,t6r,a6r,wU,n6r,s6r,l6r,f8,UFe,i6r,d6r,AU,c6r,f6r,m6r,m8,JFe,g6r,h6r,LU,p6r,_6r,u6r,g8,YFe,b6r,v6r,yU,F6r,T6r,M6r,h8,nVe,ic,p8,KFe,L9,E6r,ZFe,C6r,sVe,rr,y9,w6r,dc,A6r,xU,L6r,y6r,$U,x6r,$6r,k6r,x9,S6r,e6e,R6r,P6r,B6r,Rt,$9,I6r,o6e,N6r,q6r,cc,j6r,r6e,D6r,G6r,kU,O6r,V6r,X6r,_8,z6r,$r,k9,W6r,t6e,Q6r,H6r,ln,U6r,a6e,J6r,Y6r,n6e,K6r,Z6r,s6e,eTr,oTr,rTr,Me,u8,l6e,tTr,aTr,SU,nTr,sTr,lTr,b8,i6e,iTr,dTr,RU,cTr,fTr,mTr,v8,d6e,gTr,hTr,PU,pTr,_Tr,uTr,F8,c6e,bTr,vTr,BU,FTr,TTr,MTr,T8,f6e,ETr,CTr,IU,wTr,ATr,LTr,M8,m6e,yTr,xTr,NU,$Tr,kTr,STr,E8,g6e,RTr,PTr,qU,BTr,ITr,NTr,C8,h6e,qTr,jTr,jU,DTr,GTr,OTr,w8,p6e,VTr,XTr,DU,zTr,WTr,QTr,A8,_6e,HTr,UTr,GU,JTr,YTr,KTr,L8,u6e,ZTr,e7r,OU,o7r,r7r,t7r,y8,b6e,a7r,n7r,VU,s7r,l7r,i7r,x8,v6e,d7r,c7r,XU,f7r,m7r,g7r,$8,lVe,fc,k8,F6e,S9,h7r,T6e,p7r,iVe,tr,R9,_7r,mc,u7r,zU,b7r,v7r,WU,F7r,T7r,M7r,P9,E7r,M6e,C7r,w7r,A7r,Pt,B9,L7r,E6e,y7r,x7r,gc,$7r,C6e,k7r,S7r,QU,R7r,P7r,B7r,S8,I7r,kr,I9,N7r,w6e,q7r,j7r,dn,D7r,A6e,G7r,O7r,L6e,V7r,X7r,y6e,z7r,W7r,Q7r,rt,R8,x6e,H7r,U7r,HU,J7r,Y7r,K7r,P8,$6e,Z7r,e8r,UU,o8r,r8r,t8r,Qs,k6e,a8r,n8r,JU,s8r,l8r,YU,i8r,d8r,c8r,B8,S6e,f8r,m8r,KU,g8r,h8r,p8r,I8,R6e,_8r,u8r,ZU,b8r,v8r,F8r,N8,dVe,hc,q8,P6e,N9,T8r,B6e,M8r,cVe,ar,q9,E8r,pc,C8r,eJ,w8r,A8r,oJ,L8r,y8r,x8r,j9,$8r,I6e,k8r,S8r,R8r,Bt,D9,P8r,N6e,B8r,I8r,_c,N8r,q6e,q8r,j8r,rJ,D8r,G8r,O8r,j8,V8r,Sr,G9,X8r,j6e,z8r,W8r,cn,Q8r,D6e,H8r,U8r,G6e,J8r,Y8r,O6e,K8r,Z8r,eMr,ie,D8,V6e,oMr,rMr,tJ,tMr,aMr,nMr,G8,X6e,sMr,lMr,aJ,iMr,dMr,cMr,O8,z6e,fMr,mMr,nJ,gMr,hMr,pMr,V8,W6e,_Mr,uMr,sJ,bMr,vMr,FMr,X8,Q6e,TMr,MMr,lJ,EMr,CMr,wMr,z8,H6e,AMr,LMr,iJ,yMr,xMr,$Mr,W8,U6e,kMr,SMr,dJ,RMr,PMr,BMr,Q8,J6e,IMr,NMr,cJ,qMr,jMr,DMr,H8,Y6e,GMr,OMr,fJ,VMr,XMr,zMr,U8,K6e,WMr,QMr,mJ,HMr,UMr,JMr,J8,Z6e,YMr,KMr,gJ,ZMr,eEr,oEr,Y8,eTe,rEr,tEr,hJ,aEr,nEr,sEr,K8,oTe,lEr,iEr,pJ,dEr,cEr,fEr,Z8,rTe,mEr,gEr,_J,hEr,pEr,_Er,eM,tTe,uEr,bEr,uJ,vEr,FEr,TEr,oM,aTe,MEr,EEr,bJ,CEr,wEr,AEr,rM,nTe,LEr,yEr,vJ,xEr,$Er,kEr,tM,sTe,SEr,REr,FJ,PEr,BEr,IEr,aM,lTe,NEr,qEr,TJ,jEr,DEr,GEr,nM,iTe,OEr,VEr,MJ,XEr,zEr,WEr,sM,fVe,uc,lM,dTe,O9,QEr,cTe,HEr,mVe,nr,V9,UEr,bc,JEr,EJ,YEr,KEr,CJ,ZEr,e4r,o4r,X9,r4r,fTe,t4r,a4r,n4r,It,z9,s4r,mTe,l4r,i4r,vc,d4r,gTe,c4r,f4r,wJ,m4r,g4r,h4r,iM,p4r,Rr,W9,_4r,hTe,u4r,b4r,fn,v4r,pTe,F4r,T4r,_Te,M4r,E4r,uTe,C4r,w4r,A4r,ye,dM,bTe,L4r,y4r,AJ,x4r,$4r,k4r,cM,vTe,S4r,R4r,LJ,P4r,B4r,I4r,fM,FTe,N4r,q4r,yJ,j4r,D4r,G4r,mM,TTe,O4r,V4r,xJ,X4r,z4r,W4r,gM,MTe,Q4r,H4r,$J,U4r,J4r,Y4r,hM,ETe,K4r,Z4r,kJ,eCr,oCr,rCr,pM,CTe,tCr,aCr,SJ,nCr,sCr,lCr,_M,wTe,iCr,dCr,RJ,cCr,fCr,mCr,uM,ATe,gCr,hCr,PJ,pCr,_Cr,uCr,bM,LTe,bCr,vCr,BJ,FCr,TCr,MCr,vM,gVe,Fc,FM,yTe,Q9,ECr,xTe,CCr,hVe,sr,H9,wCr,Tc,ACr,IJ,LCr,yCr,NJ,xCr,$Cr,kCr,U9,SCr,$Te,RCr,PCr,BCr,Nt,J9,ICr,kTe,NCr,qCr,Mc,jCr,STe,DCr,GCr,qJ,OCr,VCr,XCr,TM,zCr,Pr,Y9,WCr,RTe,QCr,HCr,mn,UCr,PTe,JCr,YCr,BTe,KCr,ZCr,ITe,e5r,o5r,r5r,te,MM,NTe,t5r,a5r,jJ,n5r,s5r,l5r,EM,qTe,i5r,d5r,DJ,c5r,f5r,m5r,CM,jTe,g5r,h5r,GJ,p5r,_5r,u5r,wM,DTe,b5r,v5r,OJ,F5r,T5r,M5r,AM,GTe,E5r,C5r,VJ,w5r,A5r,L5r,LM,OTe,y5r,x5r,XJ,$5r,k5r,S5r,yM,VTe,R5r,P5r,zJ,B5r,I5r,N5r,xM,XTe,q5r,j5r,WJ,D5r,G5r,O5r,$M,zTe,V5r,X5r,QJ,z5r,W5r,Q5r,kM,WTe,H5r,U5r,HJ,J5r,Y5r,K5r,SM,QTe,Z5r,e3r,UJ,o3r,r3r,t3r,RM,HTe,a3r,n3r,JJ,s3r,l3r,i3r,PM,UTe,d3r,c3r,YJ,f3r,m3r,g3r,BM,JTe,h3r,p3r,KJ,_3r,u3r,b3r,IM,YTe,v3r,F3r,ZJ,T3r,M3r,E3r,NM,KTe,C3r,w3r,eY,A3r,L3r,y3r,qM,ZTe,x3r,$3r,oY,k3r,S3r,R3r,jM,e7e,P3r,B3r,rY,I3r,N3r,q3r,DM,o7e,j3r,D3r,tY,G3r,O3r,V3r,GM,r7e,X3r,z3r,aY,W3r,Q3r,H3r,OM,t7e,U3r,J3r,nY,Y3r,K3r,Z3r,VM,a7e,ewr,owr,sY,rwr,twr,awr,XM,n7e,nwr,swr,lY,lwr,iwr,dwr,zM,s7e,cwr,fwr,iY,mwr,gwr,hwr,WM,l7e,pwr,_wr,dY,uwr,bwr,vwr,QM,i7e,Fwr,Twr,cY,Mwr,Ewr,Cwr,HM,pVe,Ec,UM,d7e,K9,wwr,c7e,Awr,_Ve,lr,Z9,Lwr,Cc,ywr,fY,xwr,$wr,mY,kwr,Swr,Rwr,ex,Pwr,f7e,Bwr,Iwr,Nwr,qt,ox,qwr,m7e,jwr,Dwr,wc,Gwr,g7e,Owr,Vwr,gY,Xwr,zwr,Wwr,JM,Qwr,Br,rx,Hwr,h7e,Uwr,Jwr,gn,Ywr,p7e,Kwr,Zwr,_7e,eAr,oAr,u7e,rAr,tAr,aAr,_e,YM,b7e,nAr,sAr,hY,lAr,iAr,dAr,KM,v7e,cAr,fAr,pY,mAr,gAr,hAr,ZM,F7e,pAr,_Ar,_Y,uAr,bAr,vAr,eE,T7e,FAr,TAr,uY,MAr,EAr,CAr,oE,M7e,wAr,AAr,bY,LAr,yAr,xAr,rE,E7e,$Ar,kAr,vY,SAr,RAr,PAr,tE,C7e,BAr,IAr,FY,NAr,qAr,jAr,aE,w7e,DAr,GAr,TY,OAr,VAr,XAr,nE,A7e,zAr,WAr,MY,QAr,HAr,UAr,sE,L7e,JAr,YAr,EY,KAr,ZAr,eLr,lE,y7e,oLr,rLr,CY,tLr,aLr,nLr,iE,x7e,sLr,lLr,wY,iLr,dLr,cLr,dE,$7e,fLr,mLr,AY,gLr,hLr,pLr,cE,k7e,_Lr,uLr,LY,bLr,vLr,FLr,fE,S7e,TLr,MLr,yY,ELr,CLr,wLr,mE,R7e,ALr,LLr,xY,yLr,xLr,$Lr,gE,P7e,kLr,SLr,$Y,RLr,PLr,BLr,hE,uVe,Ac,pE,B7e,tx,ILr,I7e,NLr,bVe,ir,ax,qLr,Lc,jLr,kY,DLr,GLr,SY,OLr,VLr,XLr,nx,zLr,N7e,WLr,QLr,HLr,jt,sx,ULr,q7e,JLr,YLr,yc,KLr,j7e,ZLr,eyr,RY,oyr,ryr,tyr,_E,ayr,Ir,lx,nyr,D7e,syr,lyr,hn,iyr,G7e,dyr,cyr,O7e,fyr,myr,V7e,gyr,hyr,pyr,ix,uE,X7e,_yr,uyr,PY,byr,vyr,Fyr,bE,z7e,Tyr,Myr,BY,Eyr,Cyr,wyr,vE,vVe,xc,FE,W7e,dx,Ayr,Q7e,Lyr,FVe,dr,cx,yyr,$c,xyr,IY,$yr,kyr,NY,Syr,Ryr,Pyr,fx,Byr,H7e,Iyr,Nyr,qyr,Dt,mx,jyr,U7e,Dyr,Gyr,kc,Oyr,J7e,Vyr,Xyr,qY,zyr,Wyr,Qyr,TE,Hyr,Nr,gx,Uyr,Y7e,Jyr,Yyr,pn,Kyr,K7e,Zyr,e9r,Z7e,o9r,r9r,e8e,t9r,a9r,n9r,o8e,ME,r8e,s9r,l9r,jY,i9r,d9r,c9r,EE,TVe,Sc,CE,t8e,hx,f9r,a8e,m9r,MVe,cr,px,g9r,Rc,h9r,DY,p9r,_9r,GY,u9r,b9r,v9r,_x,F9r,n8e,T9r,M9r,E9r,Gt,ux,C9r,s8e,w9r,A9r,Pc,L9r,l8e,y9r,x9r,OY,$9r,k9r,S9r,wE,R9r,qr,bx,P9r,i8e,B9r,I9r,_n,N9r,d8e,q9r,j9r,c8e,D9r,G9r,f8e,O9r,V9r,X9r,de,AE,m8e,z9r,W9r,VY,Q9r,H9r,U9r,LE,g8e,J9r,Y9r,XY,K9r,Z9r,exr,yE,h8e,oxr,rxr,zY,txr,axr,nxr,xE,p8e,sxr,lxr,WY,ixr,dxr,cxr,$E,_8e,fxr,mxr,QY,gxr,hxr,pxr,kE,u8e,_xr,uxr,HY,bxr,vxr,Fxr,SE,b8e,Txr,Mxr,UY,Exr,Cxr,wxr,RE,v8e,Axr,Lxr,JY,yxr,xxr,$xr,PE,F8e,kxr,Sxr,YY,Rxr,Pxr,Bxr,BE,T8e,Ixr,Nxr,KY,qxr,jxr,Dxr,IE,M8e,Gxr,Oxr,ZY,Vxr,Xxr,zxr,NE,E8e,Wxr,Qxr,eK,Hxr,Uxr,Jxr,qE,C8e,Yxr,Kxr,oK,Zxr,e$r,o$r,jE,w8e,r$r,t$r,rK,a$r,n$r,s$r,DE,A8e,l$r,i$r,tK,d$r,c$r,f$r,GE,L8e,m$r,g$r,aK,h$r,p$r,_$r,OE,y8e,u$r,b$r,nK,v$r,F$r,T$r,VE,x8e,M$r,E$r,sK,C$r,w$r,A$r,XE,$8e,L$r,y$r,lK,x$r,$$r,k$r,zE,k8e,S$r,R$r,iK,P$r,B$r,I$r,WE,EVe,Bc,QE,S8e,vx,N$r,R8e,q$r,CVe,fr,Fx,j$r,Ic,D$r,dK,G$r,O$r,cK,V$r,X$r,z$r,Tx,W$r,P8e,Q$r,H$r,U$r,Ot,Mx,J$r,B8e,Y$r,K$r,Nc,Z$r,I8e,ekr,okr,fK,rkr,tkr,akr,HE,nkr,jr,Ex,skr,N8e,lkr,ikr,un,dkr,q8e,ckr,fkr,j8e,mkr,gkr,D8e,hkr,pkr,_kr,ce,UE,G8e,ukr,bkr,mK,vkr,Fkr,Tkr,JE,O8e,Mkr,Ekr,gK,Ckr,wkr,Akr,YE,V8e,Lkr,ykr,hK,xkr,$kr,kkr,KE,X8e,Skr,Rkr,pK,Pkr,Bkr,Ikr,ZE,z8e,Nkr,qkr,_K,jkr,Dkr,Gkr,e4,W8e,Okr,Vkr,uK,Xkr,zkr,Wkr,o4,Q8e,Qkr,Hkr,bK,Ukr,Jkr,Ykr,r4,H8e,Kkr,Zkr,vK,eSr,oSr,rSr,t4,U8e,tSr,aSr,FK,nSr,sSr,lSr,a4,J8e,iSr,dSr,TK,cSr,fSr,mSr,n4,Y8e,gSr,hSr,MK,pSr,_Sr,uSr,s4,K8e,bSr,vSr,EK,FSr,TSr,MSr,l4,Z8e,ESr,CSr,CK,wSr,ASr,LSr,i4,eMe,ySr,xSr,wK,$Sr,kSr,SSr,d4,oMe,RSr,PSr,AK,BSr,ISr,NSr,c4,rMe,qSr,jSr,LK,DSr,GSr,OSr,f4,tMe,VSr,XSr,yK,zSr,WSr,QSr,m4,aMe,HSr,USr,xK,JSr,YSr,KSr,g4,nMe,ZSr,eRr,$K,oRr,rRr,tRr,h4,sMe,aRr,nRr,kK,sRr,lRr,iRr,p4,wVe,qc,_4,lMe,Cx,dRr,iMe,cRr,AVe,mr,wx,fRr,jc,mRr,SK,gRr,hRr,RK,pRr,_Rr,uRr,Ax,bRr,dMe,vRr,FRr,TRr,Vt,Lx,MRr,cMe,ERr,CRr,Dc,wRr,fMe,ARr,LRr,PK,yRr,xRr,$Rr,u4,kRr,Dr,yx,SRr,mMe,RRr,PRr,bn,BRr,gMe,IRr,NRr,hMe,qRr,jRr,pMe,DRr,GRr,ORr,_Me,b4,uMe,VRr,XRr,BK,zRr,WRr,QRr,v4,LVe,Gc,F4,bMe,xx,HRr,vMe,URr,yVe,gr,$x,JRr,Oc,YRr,IK,KRr,ZRr,NK,ePr,oPr,rPr,kx,tPr,FMe,aPr,nPr,sPr,Xt,Sx,lPr,TMe,iPr,dPr,Vc,cPr,MMe,fPr,mPr,qK,gPr,hPr,pPr,T4,_Pr,Gr,Rx,uPr,EMe,bPr,vPr,vn,FPr,CMe,TPr,MPr,wMe,EPr,CPr,AMe,wPr,APr,LPr,LMe,M4,yMe,yPr,xPr,jK,$Pr,kPr,SPr,E4,xVe,Xc,C4,xMe,Px,RPr,$Me,PPr,$Ve,hr,Bx,BPr,zc,IPr,DK,NPr,qPr,GK,jPr,DPr,GPr,Ix,OPr,kMe,VPr,XPr,zPr,zt,Nx,WPr,SMe,QPr,HPr,Wc,UPr,RMe,JPr,YPr,OK,KPr,ZPr,eBr,w4,oBr,Or,qx,rBr,PMe,tBr,aBr,Fn,nBr,BMe,sBr,lBr,IMe,iBr,dBr,NMe,cBr,fBr,mBr,oe,A4,qMe,gBr,hBr,VK,pBr,_Br,uBr,L4,jMe,bBr,vBr,XK,FBr,TBr,MBr,y4,DMe,EBr,CBr,zK,wBr,ABr,LBr,x4,GMe,yBr,xBr,WK,$Br,kBr,SBr,$4,OMe,RBr,PBr,QK,BBr,IBr,NBr,k4,VMe,qBr,jBr,HK,DBr,GBr,OBr,S4,XMe,VBr,XBr,UK,zBr,WBr,QBr,R4,zMe,HBr,UBr,JK,JBr,YBr,KBr,P4,WMe,ZBr,eIr,YK,oIr,rIr,tIr,B4,QMe,aIr,nIr,KK,sIr,lIr,iIr,I4,HMe,dIr,cIr,ZK,fIr,mIr,gIr,N4,UMe,hIr,pIr,eZ,_Ir,uIr,bIr,q4,JMe,vIr,FIr,oZ,TIr,MIr,EIr,j4,YMe,CIr,wIr,rZ,AIr,LIr,yIr,D4,KMe,xIr,$Ir,tZ,kIr,SIr,RIr,G4,ZMe,PIr,BIr,aZ,IIr,NIr,qIr,O4,eEe,jIr,DIr,nZ,GIr,OIr,VIr,V4,oEe,XIr,zIr,sZ,WIr,QIr,HIr,X4,rEe,UIr,JIr,lZ,YIr,KIr,ZIr,z4,tEe,eNr,oNr,iZ,rNr,tNr,aNr,W4,aEe,nNr,sNr,dZ,lNr,iNr,dNr,Q4,nEe,cNr,fNr,cZ,mNr,gNr,hNr,H4,sEe,pNr,_Nr,fZ,uNr,bNr,vNr,U4,lEe,FNr,TNr,mZ,MNr,ENr,CNr,J4,iEe,wNr,ANr,gZ,LNr,yNr,xNr,Y4,dEe,$Nr,kNr,hZ,SNr,RNr,PNr,K4,cEe,BNr,INr,pZ,NNr,qNr,jNr,Z4,kVe,Qc,eC,fEe,jx,DNr,mEe,GNr,SVe,pr,Dx,ONr,Hc,VNr,_Z,XNr,zNr,uZ,WNr,QNr,HNr,Gx,UNr,gEe,JNr,YNr,KNr,Wt,Ox,ZNr,hEe,eqr,oqr,Uc,rqr,pEe,tqr,aqr,bZ,nqr,sqr,lqr,oC,iqr,Vr,Vx,dqr,_Ee,cqr,fqr,Tn,mqr,uEe,gqr,hqr,bEe,pqr,_qr,vEe,uqr,bqr,vqr,xe,rC,FEe,Fqr,Tqr,vZ,Mqr,Eqr,Cqr,tC,TEe,wqr,Aqr,FZ,Lqr,yqr,xqr,aC,MEe,$qr,kqr,TZ,Sqr,Rqr,Pqr,nC,EEe,Bqr,Iqr,MZ,Nqr,qqr,jqr,sC,CEe,Dqr,Gqr,EZ,Oqr,Vqr,Xqr,lC,wEe,zqr,Wqr,CZ,Qqr,Hqr,Uqr,iC,AEe,Jqr,Yqr,wZ,Kqr,Zqr,ejr,dC,LEe,ojr,rjr,AZ,tjr,ajr,njr,cC,yEe,sjr,ljr,LZ,ijr,djr,cjr,fC,xEe,fjr,mjr,yZ,gjr,hjr,pjr,mC,RVe,Jc,gC,$Ee,Xx,_jr,kEe,ujr,PVe,_r,zx,bjr,Yc,vjr,xZ,Fjr,Tjr,$Z,Mjr,Ejr,Cjr,Wx,wjr,SEe,Ajr,Ljr,yjr,Qt,Qx,xjr,REe,$jr,kjr,Kc,Sjr,PEe,Rjr,Pjr,kZ,Bjr,Ijr,Njr,hC,qjr,Xr,Hx,jjr,BEe,Djr,Gjr,Mn,Ojr,IEe,Vjr,Xjr,NEe,zjr,Wjr,qEe,Qjr,Hjr,Ujr,Ee,pC,jEe,Jjr,Yjr,SZ,Kjr,Zjr,eDr,_C,DEe,oDr,rDr,RZ,tDr,aDr,nDr,uC,GEe,sDr,lDr,PZ,iDr,dDr,cDr,bC,OEe,fDr,mDr,BZ,gDr,hDr,pDr,vC,VEe,_Dr,uDr,IZ,bDr,vDr,FDr,FC,XEe,TDr,MDr,NZ,EDr,CDr,wDr,TC,zEe,ADr,LDr,qZ,yDr,xDr,$Dr,MC,WEe,kDr,SDr,jZ,RDr,PDr,BDr,EC,QEe,IDr,NDr,DZ,qDr,jDr,DDr,CC,HEe,GDr,ODr,GZ,VDr,XDr,zDr,wC,UEe,WDr,QDr,OZ,HDr,UDr,JDr,AC,JEe,YDr,KDr,VZ,ZDr,eGr,oGr,LC,YEe,rGr,tGr,XZ,aGr,nGr,sGr,yC,BVe,Zc,xC,KEe,Ux,lGr,ZEe,iGr,IVe,ur,Jx,dGr,ef,cGr,zZ,fGr,mGr,WZ,gGr,hGr,pGr,Yx,_Gr,e4e,uGr,bGr,vGr,Ht,Kx,FGr,o4e,TGr,MGr,of,EGr,r4e,CGr,wGr,QZ,AGr,LGr,yGr,$C,xGr,zr,Zx,$Gr,t4e,kGr,SGr,En,RGr,a4e,PGr,BGr,n4e,IGr,NGr,s4e,qGr,jGr,DGr,$e,kC,l4e,GGr,OGr,HZ,VGr,XGr,zGr,SC,i4e,WGr,QGr,UZ,HGr,UGr,JGr,RC,d4e,YGr,KGr,JZ,ZGr,eOr,oOr,PC,c4e,rOr,tOr,YZ,aOr,nOr,sOr,BC,f4e,lOr,iOr,KZ,dOr,cOr,fOr,IC,m4e,mOr,gOr,ZZ,hOr,pOr,_Or,NC,g4e,uOr,bOr,eee,vOr,FOr,TOr,qC,h4e,MOr,EOr,oee,COr,wOr,AOr,jC,p4e,LOr,yOr,ree,xOr,$Or,kOr,DC,_4e,SOr,ROr,tee,POr,BOr,IOr,GC,NVe,rf,OC,u4e,e$,NOr,b4e,qOr,qVe,br,o$,jOr,tf,DOr,aee,GOr,OOr,nee,VOr,XOr,zOr,r$,WOr,v4e,QOr,HOr,UOr,Ut,t$,JOr,F4e,YOr,KOr,af,ZOr,T4e,eVr,oVr,see,rVr,tVr,aVr,VC,nVr,Wr,a$,sVr,M4e,lVr,iVr,Cn,dVr,E4e,cVr,fVr,C4e,mVr,gVr,w4e,hVr,pVr,_Vr,ke,XC,A4e,uVr,bVr,lee,vVr,FVr,TVr,zC,L4e,MVr,EVr,iee,CVr,wVr,AVr,WC,y4e,LVr,yVr,dee,xVr,$Vr,kVr,QC,x4e,SVr,RVr,cee,PVr,BVr,IVr,HC,$4e,NVr,qVr,fee,jVr,DVr,GVr,UC,k4e,OVr,VVr,mee,XVr,zVr,WVr,JC,S4e,QVr,HVr,gee,UVr,JVr,YVr,YC,R4e,KVr,ZVr,hee,eXr,oXr,rXr,KC,P4e,tXr,aXr,pee,nXr,sXr,lXr,ZC,B4e,iXr,dXr,_ee,cXr,fXr,mXr,e5,jVe,nf,o5,I4e,n$,gXr,N4e,hXr,DVe,vr,s$,pXr,sf,_Xr,uee,uXr,bXr,bee,vXr,FXr,TXr,l$,MXr,q4e,EXr,CXr,wXr,Jt,i$,AXr,j4e,LXr,yXr,lf,xXr,D4e,$Xr,kXr,vee,SXr,RXr,PXr,r5,BXr,Qr,d$,IXr,G4e,NXr,qXr,wn,jXr,O4e,DXr,GXr,V4e,OXr,VXr,X4e,XXr,zXr,WXr,Se,t5,z4e,QXr,HXr,Fee,UXr,JXr,YXr,a5,W4e,KXr,ZXr,Tee,ezr,ozr,rzr,n5,Q4e,tzr,azr,Mee,nzr,szr,lzr,s5,H4e,izr,dzr,Eee,czr,fzr,mzr,l5,U4e,gzr,hzr,Cee,pzr,_zr,uzr,i5,J4e,bzr,vzr,wee,Fzr,Tzr,Mzr,d5,Y4e,Ezr,Czr,Aee,wzr,Azr,Lzr,c5,K4e,yzr,xzr,Lee,$zr,kzr,Szr,f5,Z4e,Rzr,Pzr,yee,Bzr,Izr,Nzr,m5,eCe,qzr,jzr,xee,Dzr,Gzr,Ozr,g5,GVe,df,h5,oCe,c$,Vzr,rCe,Xzr,OVe,Fr,f$,zzr,cf,Wzr,$ee,Qzr,Hzr,kee,Uzr,Jzr,Yzr,m$,Kzr,tCe,Zzr,eWr,oWr,Yt,g$,rWr,aCe,tWr,aWr,ff,nWr,nCe,sWr,lWr,See,iWr,dWr,cWr,p5,fWr,Hr,h$,mWr,sCe,gWr,hWr,An,pWr,lCe,_Wr,uWr,iCe,bWr,vWr,dCe,FWr,TWr,MWr,Re,_5,cCe,EWr,CWr,Ree,wWr,AWr,LWr,u5,fCe,yWr,xWr,Pee,$Wr,kWr,SWr,b5,mCe,RWr,PWr,Bee,BWr,IWr,NWr,v5,gCe,qWr,jWr,Iee,DWr,GWr,OWr,F5,hCe,VWr,XWr,Nee,zWr,WWr,QWr,T5,pCe,HWr,UWr,qee,JWr,YWr,KWr,M5,_Ce,ZWr,eQr,jee,oQr,rQr,tQr,E5,uCe,aQr,nQr,Dee,sQr,lQr,iQr,C5,bCe,dQr,cQr,Gee,fQr,mQr,gQr,w5,vCe,hQr,pQr,Oee,_Qr,uQr,bQr,A5,VVe,mf,L5,FCe,p$,vQr,TCe,FQr,XVe,Tr,_$,TQr,gf,MQr,Vee,EQr,CQr,Xee,wQr,AQr,LQr,u$,yQr,MCe,xQr,$Qr,kQr,Kt,b$,SQr,ECe,RQr,PQr,hf,BQr,CCe,IQr,NQr,zee,qQr,jQr,DQr,y5,GQr,Ur,v$,OQr,wCe,VQr,XQr,Ln,zQr,ACe,WQr,QQr,LCe,HQr,UQr,yCe,JQr,YQr,KQr,Ve,x5,xCe,ZQr,eHr,Wee,oHr,rHr,tHr,$5,$Ce,aHr,nHr,Qee,sHr,lHr,iHr,k5,kCe,dHr,cHr,Hee,fHr,mHr,gHr,S5,SCe,hHr,pHr,Uee,_Hr,uHr,bHr,R5,RCe,vHr,FHr,Jee,THr,MHr,EHr,P5,PCe,CHr,wHr,Yee,AHr,LHr,yHr,B5,BCe,xHr,$Hr,Kee,kHr,SHr,RHr,I5,ICe,PHr,BHr,Zee,IHr,NHr,qHr,N5,zVe,pf,q5,NCe,F$,jHr,qCe,DHr,WVe,Mr,T$,GHr,_f,OHr,eoe,VHr,XHr,ooe,zHr,WHr,QHr,M$,HHr,jCe,UHr,JHr,YHr,Zt,E$,KHr,DCe,ZHr,eUr,uf,oUr,GCe,rUr,tUr,roe,aUr,nUr,sUr,j5,lUr,Jr,C$,iUr,OCe,dUr,cUr,yn,fUr,VCe,mUr,gUr,XCe,hUr,pUr,zCe,_Ur,uUr,bUr,Xe,D5,WCe,vUr,FUr,toe,TUr,MUr,EUr,G5,QCe,CUr,wUr,aoe,AUr,LUr,yUr,O5,HCe,xUr,$Ur,noe,kUr,SUr,RUr,V5,UCe,PUr,BUr,soe,IUr,NUr,qUr,X5,JCe,jUr,DUr,loe,GUr,OUr,VUr,z5,YCe,XUr,zUr,ioe,WUr,QUr,HUr,W5,KCe,UUr,JUr,doe,YUr,KUr,ZUr,Q5,ZCe,eJr,oJr,coe,rJr,tJr,aJr,H5,QVe,bf,U5,e5e,w$,nJr,o5e,sJr,HVe,Er,A$,lJr,vf,iJr,foe,dJr,cJr,moe,fJr,mJr,gJr,L$,hJr,r5e,pJr,_Jr,uJr,ea,y$,bJr,t5e,vJr,FJr,Ff,TJr,a5e,MJr,EJr,goe,CJr,wJr,AJr,J5,LJr,Yr,x$,yJr,n5e,xJr,$Jr,xn,kJr,s5e,SJr,RJr,l5e,PJr,BJr,i5e,IJr,NJr,qJr,d5e,Y5,c5e,jJr,DJr,hoe,GJr,OJr,VJr,K5,UVe,Tf,Z5,f5e,$$,XJr,m5e,zJr,JVe,Cr,k$,WJr,Mf,QJr,poe,HJr,UJr,_oe,JJr,YJr,KJr,S$,ZJr,g5e,eYr,oYr,rYr,oa,R$,tYr,h5e,aYr,nYr,Ef,sYr,p5e,lYr,iYr,uoe,dYr,cYr,fYr,e3,mYr,Kr,P$,gYr,_5e,hYr,pYr,$n,_Yr,u5e,uYr,bYr,b5e,vYr,FYr,v5e,TYr,MYr,EYr,B$,o3,F5e,CYr,wYr,boe,AYr,LYr,yYr,r3,T5e,xYr,$Yr,voe,kYr,SYr,RYr,t3,YVe,Cf,a3,M5e,I$,PYr,E5e,BYr,KVe,wr,N$,IYr,wf,NYr,Foe,qYr,jYr,Toe,DYr,GYr,OYr,q$,VYr,C5e,XYr,zYr,WYr,ra,j$,QYr,w5e,HYr,UYr,Af,JYr,A5e,YYr,KYr,Moe,ZYr,eKr,oKr,n3,rKr,Zr,D$,tKr,L5e,aKr,nKr,kn,sKr,y5e,lKr,iKr,x5e,dKr,cKr,$5e,fKr,mKr,gKr,k5e,s3,S5e,hKr,pKr,Eoe,_Kr,uKr,bKr,l3,ZVe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kA=new re({}),SA=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new vKr({props:{warning:!0,$$slots:{default:[JDt]},$$scope:{ctx:x}}}),RA=new re({}),PA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L598"}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L621"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),qA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L744"}}),jA=new re({}),DA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L400"}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17806/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L414"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),XA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L613"}}),zA=new re({}),WA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),sp=new vKr({props:{$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),lp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),JA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),YA=new re({}),KA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L88"}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L102"}}),Lp=new vKr({props:{$$slots:{default:[oGt]},$$scope:{ctx:x}}}),yp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),rL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L255"}}),tL=new re({}),aL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L767"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),ku=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L774"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Ru=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L789"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),g2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L796"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),p2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),eb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L803"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),rb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fGt]},$$scope:{ctx:x}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mGt]},$$scope:{ctx:x}}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L812"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gGt]},$$scope:{ctx:x}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hGt]},$$scope:{ctx:x}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L857"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pGt]},$$scope:{ctx:x}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Gt]},$$scope:{ctx:x}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L864"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uGt]},$$scope:{ctx:x}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bGt]},$$scope:{ctx:x}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L850"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L821"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[TGt]},$$scope:{ctx:x}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L828"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[EGt]},$$scope:{ctx:x}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L873"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L912"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L839"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L919"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),k6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L942"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),R6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L926"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L933"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L951"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L958"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L905"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L880"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),l9=new re({}),i9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L887"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),m9=new re({}),g9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L896"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),u9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),L9=new re({}),y9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),$9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),S9=new re({}),R9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),B9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),N9=new re({}),q9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),D9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),j8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),O9=new re({}),V9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L515"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),e$=new re({}),o$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),t$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),$f=l(),nt=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),LA=o("from_pretrained()"),kf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ai=o("Instantiating one of "),Rn=a("a"),yA=o("AutoConfig"),Pn=o(", "),Bn=a("a"),xA=o("AutoModel"),Li=o(`, and
`),In=a("a"),$A=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),Sf=l(),F($a.$$.fragment),Qe=l(),Ae=a("p"),nS=o("will create a model that is an instance of "),xi=a("a"),sS=o("BertModel"),lS=o("."),Co=l(),ka=a("p"),iS=o("There is one class of "),Rf=a("code"),dS=o("AutoModel"),dWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),HGe=l(),$i=a("h2"),Pf=a("a"),bte=a("span"),F(kA.$$.fragment),cWe=l(),vte=a("span"),fWe=o("Extending the Auto Classes"),UGe=l(),Nn=a("p"),mWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fte=a("code"),gWe=o("NewModel"),hWe=o(", make sure you have a "),Tte=a("code"),pWe=o("NewModelConfig"),_We=o(` then you can add those to the auto
classes like this:`),JGe=l(),F(SA.$$.fragment),YGe=l(),cS=a("p"),uWe=o("You will then be able to use the auto classes like you would usually do!"),KGe=l(),F(Bf.$$.fragment),ZGe=l(),ki=a("h2"),If=a("a"),Mte=a("span"),F(RA.$$.fragment),bWe=l(),Ete=a("span"),vWe=o("AutoConfig"),eOe=l(),wo=a("div"),F(PA.$$.fragment),FWe=l(),BA=a("p"),TWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fS=a("a"),MWe=o("from_pretrained()"),EWe=o(" class method."),CWe=l(),IA=a("p"),wWe=o("This class cannot be instantiated directly using "),Cte=a("code"),AWe=o("__init__()"),LWe=o(" (throws an error)."),yWe=l(),Ar=a("div"),F(NA.$$.fragment),xWe=l(),wte=a("p"),$We=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kWe=l(),Si=a("p"),SWe=o("The configuration class to instantiate is selected based on the "),Ate=a("code"),RWe=o("model_type"),PWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lte=a("code"),BWe=o("pretrained_model_name_or_path"),IWe=o(":"),NWe=l(),A=a("ul"),Nf=a("li"),yte=a("strong"),qWe=o("albert"),jWe=o(" \u2014 "),mS=a("a"),DWe=o("AlbertConfig"),GWe=o(" (ALBERT model)"),OWe=l(),qf=a("li"),xte=a("strong"),VWe=o("bart"),XWe=o(" \u2014 "),gS=a("a"),zWe=o("BartConfig"),WWe=o(" (BART model)"),QWe=l(),jf=a("li"),$te=a("strong"),HWe=o("beit"),UWe=o(" \u2014 "),hS=a("a"),JWe=o("BeitConfig"),YWe=o(" (BEiT model)"),KWe=l(),Df=a("li"),kte=a("strong"),ZWe=o("bert"),eQe=o(" \u2014 "),pS=a("a"),oQe=o("BertConfig"),rQe=o(" (BERT model)"),tQe=l(),Gf=a("li"),Ste=a("strong"),aQe=o("bert-generation"),nQe=o(" \u2014 "),_S=a("a"),sQe=o("BertGenerationConfig"),lQe=o(" (Bert Generation model)"),iQe=l(),Of=a("li"),Rte=a("strong"),dQe=o("big_bird"),cQe=o(" \u2014 "),uS=a("a"),fQe=o("BigBirdConfig"),mQe=o(" (BigBird model)"),gQe=l(),Vf=a("li"),Pte=a("strong"),hQe=o("bigbird_pegasus"),pQe=o(" \u2014 "),bS=a("a"),_Qe=o("BigBirdPegasusConfig"),uQe=o(" (BigBird-Pegasus model)"),bQe=l(),Xf=a("li"),Bte=a("strong"),vQe=o("blenderbot"),FQe=o(" \u2014 "),vS=a("a"),TQe=o("BlenderbotConfig"),MQe=o(" (Blenderbot model)"),EQe=l(),zf=a("li"),Ite=a("strong"),CQe=o("blenderbot-small"),wQe=o(" \u2014 "),FS=a("a"),AQe=o("BlenderbotSmallConfig"),LQe=o(" (BlenderbotSmall model)"),yQe=l(),Wf=a("li"),Nte=a("strong"),xQe=o("bloom"),$Qe=o(" \u2014 "),TS=a("a"),kQe=o("BloomConfig"),SQe=o(" (BLOOM model)"),RQe=l(),Qf=a("li"),qte=a("strong"),PQe=o("camembert"),BQe=o(" \u2014 "),MS=a("a"),IQe=o("CamembertConfig"),NQe=o(" (CamemBERT model)"),qQe=l(),Hf=a("li"),jte=a("strong"),jQe=o("canine"),DQe=o(" \u2014 "),ES=a("a"),GQe=o("CanineConfig"),OQe=o(" (CANINE model)"),VQe=l(),Uf=a("li"),Dte=a("strong"),XQe=o("clip"),zQe=o(" \u2014 "),CS=a("a"),WQe=o("CLIPConfig"),QQe=o(" (CLIP model)"),HQe=l(),Jf=a("li"),Gte=a("strong"),UQe=o("convbert"),JQe=o(" \u2014 "),wS=a("a"),YQe=o("ConvBertConfig"),KQe=o(" (ConvBERT model)"),ZQe=l(),Yf=a("li"),Ote=a("strong"),eHe=o("convnext"),oHe=o(" \u2014 "),AS=a("a"),rHe=o("ConvNextConfig"),tHe=o(" (ConvNeXT model)"),aHe=l(),Kf=a("li"),Vte=a("strong"),nHe=o("ctrl"),sHe=o(" \u2014 "),LS=a("a"),lHe=o("CTRLConfig"),iHe=o(" (CTRL model)"),dHe=l(),Zf=a("li"),Xte=a("strong"),cHe=o("cvt"),fHe=o(" \u2014 "),yS=a("a"),mHe=o("CvtConfig"),gHe=o(" (CvT model)"),hHe=l(),em=a("li"),zte=a("strong"),pHe=o("data2vec-audio"),_He=o(" \u2014 "),xS=a("a"),uHe=o("Data2VecAudioConfig"),bHe=o(" (Data2VecAudio model)"),vHe=l(),om=a("li"),Wte=a("strong"),FHe=o("data2vec-text"),THe=o(" \u2014 "),$S=a("a"),MHe=o("Data2VecTextConfig"),EHe=o(" (Data2VecText model)"),CHe=l(),rm=a("li"),Qte=a("strong"),wHe=o("data2vec-vision"),AHe=o(" \u2014 "),kS=a("a"),LHe=o("Data2VecVisionConfig"),yHe=o(" (Data2VecVision model)"),xHe=l(),tm=a("li"),Hte=a("strong"),$He=o("deberta"),kHe=o(" \u2014 "),SS=a("a"),SHe=o("DebertaConfig"),RHe=o(" (DeBERTa model)"),PHe=l(),am=a("li"),Ute=a("strong"),BHe=o("deberta-v2"),IHe=o(" \u2014 "),RS=a("a"),NHe=o("DebertaV2Config"),qHe=o(" (DeBERTa-v2 model)"),jHe=l(),nm=a("li"),Jte=a("strong"),DHe=o("decision_transformer"),GHe=o(" \u2014 "),PS=a("a"),OHe=o("DecisionTransformerConfig"),VHe=o(" (Decision Transformer model)"),XHe=l(),sm=a("li"),Yte=a("strong"),zHe=o("deit"),WHe=o(" \u2014 "),BS=a("a"),QHe=o("DeiTConfig"),HHe=o(" (DeiT model)"),UHe=l(),lm=a("li"),Kte=a("strong"),JHe=o("detr"),YHe=o(" \u2014 "),IS=a("a"),KHe=o("DetrConfig"),ZHe=o(" (DETR model)"),eUe=l(),im=a("li"),Zte=a("strong"),oUe=o("distilbert"),rUe=o(" \u2014 "),NS=a("a"),tUe=o("DistilBertConfig"),aUe=o(" (DistilBERT model)"),nUe=l(),dm=a("li"),eae=a("strong"),sUe=o("dpr"),lUe=o(" \u2014 "),qS=a("a"),iUe=o("DPRConfig"),dUe=o(" (DPR model)"),cUe=l(),cm=a("li"),oae=a("strong"),fUe=o("dpt"),mUe=o(" \u2014 "),jS=a("a"),gUe=o("DPTConfig"),hUe=o(" (DPT model)"),pUe=l(),fm=a("li"),rae=a("strong"),_Ue=o("electra"),uUe=o(" \u2014 "),DS=a("a"),bUe=o("ElectraConfig"),vUe=o(" (ELECTRA model)"),FUe=l(),mm=a("li"),tae=a("strong"),TUe=o("encoder-decoder"),MUe=o(" \u2014 "),GS=a("a"),EUe=o("EncoderDecoderConfig"),CUe=o(" (Encoder decoder model)"),wUe=l(),gm=a("li"),aae=a("strong"),AUe=o("flaubert"),LUe=o(" \u2014 "),OS=a("a"),yUe=o("FlaubertConfig"),xUe=o(" (FlauBERT model)"),$Ue=l(),hm=a("li"),nae=a("strong"),kUe=o("flava"),SUe=o(" \u2014 "),VS=a("a"),RUe=o("FlavaConfig"),PUe=o(" (FLAVA model)"),BUe=l(),pm=a("li"),sae=a("strong"),IUe=o("fnet"),NUe=o(" \u2014 "),XS=a("a"),qUe=o("FNetConfig"),jUe=o(" (FNet model)"),DUe=l(),_m=a("li"),lae=a("strong"),GUe=o("fsmt"),OUe=o(" \u2014 "),zS=a("a"),VUe=o("FSMTConfig"),XUe=o(" (FairSeq Machine-Translation model)"),zUe=l(),um=a("li"),iae=a("strong"),WUe=o("funnel"),QUe=o(" \u2014 "),WS=a("a"),HUe=o("FunnelConfig"),UUe=o(" (Funnel Transformer model)"),JUe=l(),bm=a("li"),dae=a("strong"),YUe=o("glpn"),KUe=o(" \u2014 "),QS=a("a"),ZUe=o("GLPNConfig"),eJe=o(" (GLPN model)"),oJe=l(),vm=a("li"),cae=a("strong"),rJe=o("gpt2"),tJe=o(" \u2014 "),HS=a("a"),aJe=o("GPT2Config"),nJe=o(" (OpenAI GPT-2 model)"),sJe=l(),Fm=a("li"),fae=a("strong"),lJe=o("gpt_neo"),iJe=o(" \u2014 "),US=a("a"),dJe=o("GPTNeoConfig"),cJe=o(" (GPT Neo model)"),fJe=l(),Tm=a("li"),mae=a("strong"),mJe=o("gpt_neox"),gJe=o(" \u2014 "),JS=a("a"),hJe=o("GPTNeoXConfig"),pJe=o(" (GPT NeoX model)"),_Je=l(),Mm=a("li"),gae=a("strong"),uJe=o("gptj"),bJe=o(" \u2014 "),YS=a("a"),vJe=o("GPTJConfig"),FJe=o(" (GPT-J model)"),TJe=l(),Em=a("li"),hae=a("strong"),MJe=o("hubert"),EJe=o(" \u2014 "),KS=a("a"),CJe=o("HubertConfig"),wJe=o(" (Hubert model)"),AJe=l(),Cm=a("li"),pae=a("strong"),LJe=o("ibert"),yJe=o(" \u2014 "),ZS=a("a"),xJe=o("IBertConfig"),$Je=o(" (I-BERT model)"),kJe=l(),wm=a("li"),_ae=a("strong"),SJe=o("imagegpt"),RJe=o(" \u2014 "),eR=a("a"),PJe=o("ImageGPTConfig"),BJe=o(" (ImageGPT model)"),IJe=l(),Am=a("li"),uae=a("strong"),NJe=o("layoutlm"),qJe=o(" \u2014 "),oR=a("a"),jJe=o("LayoutLMConfig"),DJe=o(" (LayoutLM model)"),GJe=l(),Lm=a("li"),bae=a("strong"),OJe=o("layoutlmv2"),VJe=o(" \u2014 "),rR=a("a"),XJe=o("LayoutLMv2Config"),zJe=o(" (LayoutLMv2 model)"),WJe=l(),ym=a("li"),vae=a("strong"),QJe=o("layoutlmv3"),HJe=o(" \u2014 "),tR=a("a"),UJe=o("LayoutLMv3Config"),JJe=o(" (LayoutLMv3 model)"),YJe=l(),xm=a("li"),Fae=a("strong"),KJe=o("led"),ZJe=o(" \u2014 "),aR=a("a"),eYe=o("LEDConfig"),oYe=o(" (LED model)"),rYe=l(),$m=a("li"),Tae=a("strong"),tYe=o("levit"),aYe=o(" \u2014 "),nR=a("a"),nYe=o("LevitConfig"),sYe=o(" (LeViT model)"),lYe=l(),km=a("li"),Mae=a("strong"),iYe=o("longformer"),dYe=o(" \u2014 "),sR=a("a"),cYe=o("LongformerConfig"),fYe=o(" (Longformer model)"),mYe=l(),Sm=a("li"),Eae=a("strong"),gYe=o("longt5"),hYe=o(" \u2014 "),lR=a("a"),pYe=o("LongT5Config"),_Ye=o(" (LongT5 model)"),uYe=l(),Rm=a("li"),Cae=a("strong"),bYe=o("luke"),vYe=o(" \u2014 "),iR=a("a"),FYe=o("LukeConfig"),TYe=o(" (LUKE model)"),MYe=l(),Pm=a("li"),wae=a("strong"),EYe=o("lxmert"),CYe=o(" \u2014 "),dR=a("a"),wYe=o("LxmertConfig"),AYe=o(" (LXMERT model)"),LYe=l(),Bm=a("li"),Aae=a("strong"),yYe=o("m2m_100"),xYe=o(" \u2014 "),cR=a("a"),$Ye=o("M2M100Config"),kYe=o(" (M2M100 model)"),SYe=l(),Im=a("li"),Lae=a("strong"),RYe=o("marian"),PYe=o(" \u2014 "),fR=a("a"),BYe=o("MarianConfig"),IYe=o(" (Marian model)"),NYe=l(),Nm=a("li"),yae=a("strong"),qYe=o("maskformer"),jYe=o(" \u2014 "),mR=a("a"),DYe=o("MaskFormerConfig"),GYe=o(" (MaskFormer model)"),OYe=l(),qm=a("li"),xae=a("strong"),VYe=o("mbart"),XYe=o(" \u2014 "),gR=a("a"),zYe=o("MBartConfig"),WYe=o(" (mBART model)"),QYe=l(),jm=a("li"),$ae=a("strong"),HYe=o("mctct"),UYe=o(" \u2014 "),hR=a("a"),JYe=o("MCTCTConfig"),YYe=o(" (M-CTC-T model)"),KYe=l(),Dm=a("li"),kae=a("strong"),ZYe=o("megatron-bert"),eKe=o(" \u2014 "),pR=a("a"),oKe=o("MegatronBertConfig"),rKe=o(" (Megatron-BERT model)"),tKe=l(),Gm=a("li"),Sae=a("strong"),aKe=o("mobilebert"),nKe=o(" \u2014 "),_R=a("a"),sKe=o("MobileBertConfig"),lKe=o(" (MobileBERT model)"),iKe=l(),Om=a("li"),Rae=a("strong"),dKe=o("mpnet"),cKe=o(" \u2014 "),uR=a("a"),fKe=o("MPNetConfig"),mKe=o(" (MPNet model)"),gKe=l(),Vm=a("li"),Pae=a("strong"),hKe=o("mt5"),pKe=o(" \u2014 "),bR=a("a"),_Ke=o("MT5Config"),uKe=o(" (MT5 model)"),bKe=l(),Xm=a("li"),Bae=a("strong"),vKe=o("nezha"),FKe=o(" \u2014 "),vR=a("a"),TKe=o("NezhaConfig"),MKe=o(" (Nezha model)"),EKe=l(),zm=a("li"),Iae=a("strong"),CKe=o("nystromformer"),wKe=o(" \u2014 "),FR=a("a"),AKe=o("NystromformerConfig"),LKe=o(" (Nystr\xF6mformer model)"),yKe=l(),Wm=a("li"),Nae=a("strong"),xKe=o("openai-gpt"),$Ke=o(" \u2014 "),TR=a("a"),kKe=o("OpenAIGPTConfig"),SKe=o(" (OpenAI GPT model)"),RKe=l(),Qm=a("li"),qae=a("strong"),PKe=o("opt"),BKe=o(" \u2014 "),MR=a("a"),IKe=o("OPTConfig"),NKe=o(" (OPT model)"),qKe=l(),Hm=a("li"),jae=a("strong"),jKe=o("pegasus"),DKe=o(" \u2014 "),ER=a("a"),GKe=o("PegasusConfig"),OKe=o(" (Pegasus model)"),VKe=l(),Um=a("li"),Dae=a("strong"),XKe=o("perceiver"),zKe=o(" \u2014 "),CR=a("a"),WKe=o("PerceiverConfig"),QKe=o(" (Perceiver model)"),HKe=l(),Jm=a("li"),Gae=a("strong"),UKe=o("plbart"),JKe=o(" \u2014 "),wR=a("a"),YKe=o("PLBartConfig"),KKe=o(" (PLBart model)"),ZKe=l(),Ym=a("li"),Oae=a("strong"),eZe=o("poolformer"),oZe=o(" \u2014 "),AR=a("a"),rZe=o("PoolFormerConfig"),tZe=o(" (PoolFormer model)"),aZe=l(),Km=a("li"),Vae=a("strong"),nZe=o("prophetnet"),sZe=o(" \u2014 "),LR=a("a"),lZe=o("ProphetNetConfig"),iZe=o(" (ProphetNet model)"),dZe=l(),Zm=a("li"),Xae=a("strong"),cZe=o("qdqbert"),fZe=o(" \u2014 "),yR=a("a"),mZe=o("QDQBertConfig"),gZe=o(" (QDQBert model)"),hZe=l(),eg=a("li"),zae=a("strong"),pZe=o("rag"),_Ze=o(" \u2014 "),xR=a("a"),uZe=o("RagConfig"),bZe=o(" (RAG model)"),vZe=l(),og=a("li"),Wae=a("strong"),FZe=o("realm"),TZe=o(" \u2014 "),$R=a("a"),MZe=o("RealmConfig"),EZe=o(" (REALM model)"),CZe=l(),rg=a("li"),Qae=a("strong"),wZe=o("reformer"),AZe=o(" \u2014 "),kR=a("a"),LZe=o("ReformerConfig"),yZe=o(" (Reformer model)"),xZe=l(),tg=a("li"),Hae=a("strong"),$Ze=o("regnet"),kZe=o(" \u2014 "),SR=a("a"),SZe=o("RegNetConfig"),RZe=o(" (RegNet model)"),PZe=l(),ag=a("li"),Uae=a("strong"),BZe=o("rembert"),IZe=o(" \u2014 "),RR=a("a"),NZe=o("RemBertConfig"),qZe=o(" (RemBERT model)"),jZe=l(),ng=a("li"),Jae=a("strong"),DZe=o("resnet"),GZe=o(" \u2014 "),PR=a("a"),OZe=o("ResNetConfig"),VZe=o(" (ResNet model)"),XZe=l(),sg=a("li"),Yae=a("strong"),zZe=o("retribert"),WZe=o(" \u2014 "),BR=a("a"),QZe=o("RetriBertConfig"),HZe=o(" (RetriBERT model)"),UZe=l(),lg=a("li"),Kae=a("strong"),JZe=o("roberta"),YZe=o(" \u2014 "),IR=a("a"),KZe=o("RobertaConfig"),ZZe=o(" (RoBERTa model)"),eeo=l(),ig=a("li"),Zae=a("strong"),oeo=o("roformer"),reo=o(" \u2014 "),NR=a("a"),teo=o("RoFormerConfig"),aeo=o(" (RoFormer model)"),neo=l(),dg=a("li"),ene=a("strong"),seo=o("segformer"),leo=o(" \u2014 "),qR=a("a"),ieo=o("SegformerConfig"),deo=o(" (SegFormer model)"),ceo=l(),cg=a("li"),one=a("strong"),feo=o("sew"),meo=o(" \u2014 "),jR=a("a"),geo=o("SEWConfig"),heo=o(" (SEW model)"),peo=l(),fg=a("li"),rne=a("strong"),_eo=o("sew-d"),ueo=o(" \u2014 "),DR=a("a"),beo=o("SEWDConfig"),veo=o(" (SEW-D model)"),Feo=l(),mg=a("li"),tne=a("strong"),Teo=o("speech-encoder-decoder"),Meo=o(" \u2014 "),GR=a("a"),Eeo=o("SpeechEncoderDecoderConfig"),Ceo=o(" (Speech Encoder decoder model)"),weo=l(),gg=a("li"),ane=a("strong"),Aeo=o("speech_to_text"),Leo=o(" \u2014 "),OR=a("a"),yeo=o("Speech2TextConfig"),xeo=o(" (Speech2Text model)"),$eo=l(),hg=a("li"),nne=a("strong"),keo=o("speech_to_text_2"),Seo=o(" \u2014 "),VR=a("a"),Reo=o("Speech2Text2Config"),Peo=o(" (Speech2Text2 model)"),Beo=l(),pg=a("li"),sne=a("strong"),Ieo=o("splinter"),Neo=o(" \u2014 "),XR=a("a"),qeo=o("SplinterConfig"),jeo=o(" (Splinter model)"),Deo=l(),_g=a("li"),lne=a("strong"),Geo=o("squeezebert"),Oeo=o(" \u2014 "),zR=a("a"),Veo=o("SqueezeBertConfig"),Xeo=o(" (SqueezeBERT model)"),zeo=l(),ug=a("li"),ine=a("strong"),Weo=o("swin"),Qeo=o(" \u2014 "),WR=a("a"),Heo=o("SwinConfig"),Ueo=o(" (Swin Transformer model)"),Jeo=l(),bg=a("li"),dne=a("strong"),Yeo=o("t5"),Keo=o(" \u2014 "),QR=a("a"),Zeo=o("T5Config"),eoo=o(" (T5 model)"),ooo=l(),vg=a("li"),cne=a("strong"),roo=o("tapas"),too=o(" \u2014 "),HR=a("a"),aoo=o("TapasConfig"),noo=o(" (TAPAS model)"),soo=l(),Fg=a("li"),fne=a("strong"),loo=o("trajectory_transformer"),ioo=o(" \u2014 "),UR=a("a"),doo=o("TrajectoryTransformerConfig"),coo=o(" (Trajectory Transformer model)"),foo=l(),Tg=a("li"),mne=a("strong"),moo=o("transfo-xl"),goo=o(" \u2014 "),JR=a("a"),hoo=o("TransfoXLConfig"),poo=o(" (Transformer-XL model)"),_oo=l(),Mg=a("li"),gne=a("strong"),uoo=o("trocr"),boo=o(" \u2014 "),YR=a("a"),voo=o("TrOCRConfig"),Foo=o(" (TrOCR model)"),Too=l(),Eg=a("li"),hne=a("strong"),Moo=o("unispeech"),Eoo=o(" \u2014 "),KR=a("a"),Coo=o("UniSpeechConfig"),woo=o(" (UniSpeech model)"),Aoo=l(),Cg=a("li"),pne=a("strong"),Loo=o("unispeech-sat"),yoo=o(" \u2014 "),ZR=a("a"),xoo=o("UniSpeechSatConfig"),$oo=o(" (UniSpeechSat model)"),koo=l(),wg=a("li"),_ne=a("strong"),Soo=o("van"),Roo=o(" \u2014 "),eP=a("a"),Poo=o("VanConfig"),Boo=o(" (VAN model)"),Ioo=l(),Ag=a("li"),une=a("strong"),Noo=o("vilt"),qoo=o(" \u2014 "),oP=a("a"),joo=o("ViltConfig"),Doo=o(" (ViLT model)"),Goo=l(),Lg=a("li"),bne=a("strong"),Ooo=o("vision-encoder-decoder"),Voo=o(" \u2014 "),rP=a("a"),Xoo=o("VisionEncoderDecoderConfig"),zoo=o(" (Vision Encoder decoder model)"),Woo=l(),yg=a("li"),vne=a("strong"),Qoo=o("vision-text-dual-encoder"),Hoo=o(" \u2014 "),tP=a("a"),Uoo=o("VisionTextDualEncoderConfig"),Joo=o(" (VisionTextDualEncoder model)"),Yoo=l(),xg=a("li"),Fne=a("strong"),Koo=o("visual_bert"),Zoo=o(" \u2014 "),aP=a("a"),ero=o("VisualBertConfig"),oro=o(" (VisualBERT model)"),rro=l(),$g=a("li"),Tne=a("strong"),tro=o("vit"),aro=o(" \u2014 "),nP=a("a"),nro=o("ViTConfig"),sro=o(" (ViT model)"),lro=l(),kg=a("li"),Mne=a("strong"),iro=o("vit_mae"),dro=o(" \u2014 "),sP=a("a"),cro=o("ViTMAEConfig"),fro=o(" (ViTMAE model)"),mro=l(),Sg=a("li"),Ene=a("strong"),gro=o("wav2vec2"),hro=o(" \u2014 "),lP=a("a"),pro=o("Wav2Vec2Config"),_ro=o(" (Wav2Vec2 model)"),uro=l(),Rg=a("li"),Cne=a("strong"),bro=o("wav2vec2-conformer"),vro=o(" \u2014 "),iP=a("a"),Fro=o("Wav2Vec2ConformerConfig"),Tro=o(" (Wav2Vec2-Conformer model)"),Mro=l(),Pg=a("li"),wne=a("strong"),Ero=o("wavlm"),Cro=o(" \u2014 "),dP=a("a"),wro=o("WavLMConfig"),Aro=o(" (WavLM model)"),Lro=l(),Bg=a("li"),Ane=a("strong"),yro=o("xglm"),xro=o(" \u2014 "),cP=a("a"),$ro=o("XGLMConfig"),kro=o(" (XGLM model)"),Sro=l(),Ig=a("li"),Lne=a("strong"),Rro=o("xlm"),Pro=o(" \u2014 "),fP=a("a"),Bro=o("XLMConfig"),Iro=o(" (XLM model)"),Nro=l(),Ng=a("li"),yne=a("strong"),qro=o("xlm-prophetnet"),jro=o(" \u2014 "),mP=a("a"),Dro=o("XLMProphetNetConfig"),Gro=o(" (XLM-ProphetNet model)"),Oro=l(),qg=a("li"),xne=a("strong"),Vro=o("xlm-roberta"),Xro=o(" \u2014 "),gP=a("a"),zro=o("XLMRobertaConfig"),Wro=o(" (XLM-RoBERTa model)"),Qro=l(),jg=a("li"),$ne=a("strong"),Hro=o("xlm-roberta-xl"),Uro=o(" \u2014 "),hP=a("a"),Jro=o("XLMRobertaXLConfig"),Yro=o(" (XLM-RoBERTa-XL model)"),Kro=l(),Dg=a("li"),kne=a("strong"),Zro=o("xlnet"),eto=o(" \u2014 "),pP=a("a"),oto=o("XLNetConfig"),rto=o(" (XLNet model)"),tto=l(),Gg=a("li"),Sne=a("strong"),ato=o("yolos"),nto=o(" \u2014 "),_P=a("a"),sto=o("YolosConfig"),lto=o(" (YOLOS model)"),ito=l(),Og=a("li"),Rne=a("strong"),dto=o("yoso"),cto=o(" \u2014 "),uP=a("a"),fto=o("YosoConfig"),mto=o(" (YOSO model)"),gto=l(),F(Vg.$$.fragment),hto=l(),Xg=a("div"),F(qA.$$.fragment),pto=l(),Pne=a("p"),_to=o("Register a new configuration for this class."),oOe=l(),Ri=a("h2"),zg=a("a"),Bne=a("span"),F(jA.$$.fragment),uto=l(),Ine=a("span"),bto=o("AutoTokenizer"),rOe=l(),Ao=a("div"),F(DA.$$.fragment),vto=l(),GA=a("p"),Fto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bP=a("a"),Tto=o("AutoTokenizer.from_pretrained()"),Mto=o(" class method."),Eto=l(),OA=a("p"),Cto=o("This class cannot be instantiated directly using "),Nne=a("code"),wto=o("__init__()"),Ato=o(" (throws an error)."),Lto=l(),Lr=a("div"),F(VA.$$.fragment),yto=l(),qne=a("p"),xto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$to=l(),Sa=a("p"),kto=o("The tokenizer class to instantiate is selected based on the "),jne=a("code"),Sto=o("model_type"),Rto=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),Pto=o("pretrained_model_name_or_path"),Bto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),Ito=o("pretrained_model_name_or_path"),Nto=o(":"),qto=l(),k=a("ul"),qn=a("li"),One=a("strong"),jto=o("albert"),Dto=o(" \u2014 "),vP=a("a"),Gto=o("AlbertTokenizer"),Oto=o(" or "),FP=a("a"),Vto=o("AlbertTokenizerFast"),Xto=o(" (ALBERT model)"),zto=l(),jn=a("li"),Vne=a("strong"),Wto=o("bart"),Qto=o(" \u2014 "),TP=a("a"),Hto=o("BartTokenizer"),Uto=o(" or "),MP=a("a"),Jto=o("BartTokenizerFast"),Yto=o(" (BART model)"),Kto=l(),Dn=a("li"),Xne=a("strong"),Zto=o("barthez"),eao=o(" \u2014 "),EP=a("a"),oao=o("BarthezTokenizer"),rao=o(" or "),CP=a("a"),tao=o("BarthezTokenizerFast"),aao=o(" (BARThez model)"),nao=l(),Wg=a("li"),zne=a("strong"),sao=o("bartpho"),lao=o(" \u2014 "),wP=a("a"),iao=o("BartphoTokenizer"),dao=o(" (BARTpho model)"),cao=l(),Gn=a("li"),Wne=a("strong"),fao=o("bert"),mao=o(" \u2014 "),AP=a("a"),gao=o("BertTokenizer"),hao=o(" or "),LP=a("a"),pao=o("BertTokenizerFast"),_ao=o(" (BERT model)"),uao=l(),Qg=a("li"),Qne=a("strong"),bao=o("bert-generation"),vao=o(" \u2014 "),yP=a("a"),Fao=o("BertGenerationTokenizer"),Tao=o(" (Bert Generation model)"),Mao=l(),Hg=a("li"),Hne=a("strong"),Eao=o("bert-japanese"),Cao=o(" \u2014 "),xP=a("a"),wao=o("BertJapaneseTokenizer"),Aao=o(" (BertJapanese model)"),Lao=l(),Ug=a("li"),Une=a("strong"),yao=o("bertweet"),xao=o(" \u2014 "),$P=a("a"),$ao=o("BertweetTokenizer"),kao=o(" (BERTweet model)"),Sao=l(),On=a("li"),Jne=a("strong"),Rao=o("big_bird"),Pao=o(" \u2014 "),kP=a("a"),Bao=o("BigBirdTokenizer"),Iao=o(" or "),SP=a("a"),Nao=o("BigBirdTokenizerFast"),qao=o(" (BigBird model)"),jao=l(),Vn=a("li"),Yne=a("strong"),Dao=o("bigbird_pegasus"),Gao=o(" \u2014 "),RP=a("a"),Oao=o("PegasusTokenizer"),Vao=o(" or "),PP=a("a"),Xao=o("PegasusTokenizerFast"),zao=o(" (BigBird-Pegasus model)"),Wao=l(),Xn=a("li"),Kne=a("strong"),Qao=o("blenderbot"),Hao=o(" \u2014 "),BP=a("a"),Uao=o("BlenderbotTokenizer"),Jao=o(" or "),IP=a("a"),Yao=o("BlenderbotTokenizerFast"),Kao=o(" (Blenderbot model)"),Zao=l(),Jg=a("li"),Zne=a("strong"),eno=o("blenderbot-small"),ono=o(" \u2014 "),NP=a("a"),rno=o("BlenderbotSmallTokenizer"),tno=o(" (BlenderbotSmall model)"),ano=l(),Yg=a("li"),ese=a("strong"),nno=o("bloom"),sno=o(" \u2014 "),qP=a("a"),lno=o("BloomTokenizerFast"),ino=o(" (BLOOM model)"),dno=l(),Kg=a("li"),ose=a("strong"),cno=o("byt5"),fno=o(" \u2014 "),jP=a("a"),mno=o("ByT5Tokenizer"),gno=o(" (ByT5 model)"),hno=l(),zn=a("li"),rse=a("strong"),pno=o("camembert"),_no=o(" \u2014 "),DP=a("a"),uno=o("CamembertTokenizer"),bno=o(" or "),GP=a("a"),vno=o("CamembertTokenizerFast"),Fno=o(" (CamemBERT model)"),Tno=l(),Zg=a("li"),tse=a("strong"),Mno=o("canine"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("CanineTokenizer"),wno=o(" (CANINE model)"),Ano=l(),Wn=a("li"),ase=a("strong"),Lno=o("clip"),yno=o(" \u2014 "),VP=a("a"),xno=o("CLIPTokenizer"),$no=o(" or "),XP=a("a"),kno=o("CLIPTokenizerFast"),Sno=o(" (CLIP model)"),Rno=l(),Qn=a("li"),nse=a("strong"),Pno=o("convbert"),Bno=o(" \u2014 "),zP=a("a"),Ino=o("ConvBertTokenizer"),Nno=o(" or "),WP=a("a"),qno=o("ConvBertTokenizerFast"),jno=o(" (ConvBERT model)"),Dno=l(),Hn=a("li"),sse=a("strong"),Gno=o("cpm"),Ono=o(" \u2014 "),QP=a("a"),Vno=o("CpmTokenizer"),Xno=o(" or "),HP=a("a"),zno=o("CpmTokenizerFast"),Wno=o(" (CPM model)"),Qno=l(),eh=a("li"),lse=a("strong"),Hno=o("ctrl"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("CTRLTokenizer"),Yno=o(" (CTRL model)"),Kno=l(),Un=a("li"),ise=a("strong"),Zno=o("data2vec-text"),eso=o(" \u2014 "),JP=a("a"),oso=o("RobertaTokenizer"),rso=o(" or "),YP=a("a"),tso=o("RobertaTokenizerFast"),aso=o(" (Data2VecText model)"),nso=l(),Jn=a("li"),dse=a("strong"),sso=o("deberta"),lso=o(" \u2014 "),KP=a("a"),iso=o("DebertaTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("DebertaTokenizerFast"),fso=o(" (DeBERTa model)"),mso=l(),Yn=a("li"),cse=a("strong"),gso=o("deberta-v2"),hso=o(" \u2014 "),eB=a("a"),pso=o("DebertaV2Tokenizer"),_so=o(" or "),oB=a("a"),uso=o("DebertaV2TokenizerFast"),bso=o(" (DeBERTa-v2 model)"),vso=l(),Kn=a("li"),fse=a("strong"),Fso=o("distilbert"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("DistilBertTokenizer"),Eso=o(" or "),tB=a("a"),Cso=o("DistilBertTokenizerFast"),wso=o(" (DistilBERT model)"),Aso=l(),Zn=a("li"),mse=a("strong"),Lso=o("dpr"),yso=o(" \u2014 "),aB=a("a"),xso=o("DPRQuestionEncoderTokenizer"),$so=o(" or "),nB=a("a"),kso=o("DPRQuestionEncoderTokenizerFast"),Sso=o(" (DPR model)"),Rso=l(),es=a("li"),gse=a("strong"),Pso=o("electra"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("ElectraTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("ElectraTokenizerFast"),jso=o(" (ELECTRA model)"),Dso=l(),oh=a("li"),hse=a("strong"),Gso=o("flaubert"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("FlaubertTokenizer"),Xso=o(" (FlauBERT model)"),zso=l(),os=a("li"),pse=a("strong"),Wso=o("fnet"),Qso=o(" \u2014 "),dB=a("a"),Hso=o("FNetTokenizer"),Uso=o(" or "),cB=a("a"),Jso=o("FNetTokenizerFast"),Yso=o(" (FNet model)"),Kso=l(),rh=a("li"),_se=a("strong"),Zso=o("fsmt"),elo=o(" \u2014 "),fB=a("a"),olo=o("FSMTTokenizer"),rlo=o(" (FairSeq Machine-Translation model)"),tlo=l(),rs=a("li"),use=a("strong"),alo=o("funnel"),nlo=o(" \u2014 "),mB=a("a"),slo=o("FunnelTokenizer"),llo=o(" or "),gB=a("a"),ilo=o("FunnelTokenizerFast"),dlo=o(" (Funnel Transformer model)"),clo=l(),ts=a("li"),bse=a("strong"),flo=o("gpt2"),mlo=o(" \u2014 "),hB=a("a"),glo=o("GPT2Tokenizer"),hlo=o(" or "),pB=a("a"),plo=o("GPT2TokenizerFast"),_lo=o(" (OpenAI GPT-2 model)"),ulo=l(),as=a("li"),vse=a("strong"),blo=o("gpt_neo"),vlo=o(" \u2014 "),_B=a("a"),Flo=o("GPT2Tokenizer"),Tlo=o(" or "),uB=a("a"),Mlo=o("GPT2TokenizerFast"),Elo=o(" (GPT Neo model)"),Clo=l(),th=a("li"),Fse=a("strong"),wlo=o("gpt_neox"),Alo=o(" \u2014 "),bB=a("a"),Llo=o("GPTNeoXTokenizerFast"),ylo=o(" (GPT NeoX model)"),xlo=l(),ns=a("li"),Tse=a("strong"),$lo=o("gptj"),klo=o(" \u2014 "),vB=a("a"),Slo=o("GPT2Tokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("GPT2TokenizerFast"),Blo=o(" (GPT-J model)"),Ilo=l(),ss=a("li"),Mse=a("strong"),Nlo=o("herbert"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("HerbertTokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("HerbertTokenizerFast"),Olo=o(" (HerBERT model)"),Vlo=l(),ah=a("li"),Ese=a("strong"),Xlo=o("hubert"),zlo=o(" \u2014 "),EB=a("a"),Wlo=o("Wav2Vec2CTCTokenizer"),Qlo=o(" (Hubert model)"),Hlo=l(),ls=a("li"),Cse=a("strong"),Ulo=o("ibert"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("RobertaTokenizer"),Klo=o(" or "),wB=a("a"),Zlo=o("RobertaTokenizerFast"),eio=o(" (I-BERT model)"),oio=l(),is=a("li"),wse=a("strong"),rio=o("layoutlm"),tio=o(" \u2014 "),AB=a("a"),aio=o("LayoutLMTokenizer"),nio=o(" or "),LB=a("a"),sio=o("LayoutLMTokenizerFast"),lio=o(" (LayoutLM model)"),iio=l(),ds=a("li"),Ase=a("strong"),dio=o("layoutlmv2"),cio=o(" \u2014 "),yB=a("a"),fio=o("LayoutLMv2Tokenizer"),mio=o(" or "),xB=a("a"),gio=o("LayoutLMv2TokenizerFast"),hio=o(" (LayoutLMv2 model)"),pio=l(),cs=a("li"),Lse=a("strong"),_io=o("layoutlmv3"),uio=o(" \u2014 "),$B=a("a"),bio=o("LayoutLMv3Tokenizer"),vio=o(" or "),kB=a("a"),Fio=o("LayoutLMv3TokenizerFast"),Tio=o(" (LayoutLMv3 model)"),Mio=l(),fs=a("li"),yse=a("strong"),Eio=o("layoutxlm"),Cio=o(" \u2014 "),SB=a("a"),wio=o("LayoutXLMTokenizer"),Aio=o(" or "),RB=a("a"),Lio=o("LayoutXLMTokenizerFast"),yio=o(" (LayoutXLM model)"),xio=l(),ms=a("li"),xse=a("strong"),$io=o("led"),kio=o(" \u2014 "),PB=a("a"),Sio=o("LEDTokenizer"),Rio=o(" or "),BB=a("a"),Pio=o("LEDTokenizerFast"),Bio=o(" (LED model)"),Iio=l(),gs=a("li"),$se=a("strong"),Nio=o("longformer"),qio=o(" \u2014 "),IB=a("a"),jio=o("LongformerTokenizer"),Dio=o(" or "),NB=a("a"),Gio=o("LongformerTokenizerFast"),Oio=o(" (Longformer model)"),Vio=l(),hs=a("li"),kse=a("strong"),Xio=o("longt5"),zio=o(" \u2014 "),qB=a("a"),Wio=o("T5Tokenizer"),Qio=o(" or "),jB=a("a"),Hio=o("T5TokenizerFast"),Uio=o(" (LongT5 model)"),Jio=l(),nh=a("li"),Sse=a("strong"),Yio=o("luke"),Kio=o(" \u2014 "),DB=a("a"),Zio=o("LukeTokenizer"),edo=o(" (LUKE model)"),odo=l(),ps=a("li"),Rse=a("strong"),rdo=o("lxmert"),tdo=o(" \u2014 "),GB=a("a"),ado=o("LxmertTokenizer"),ndo=o(" or "),OB=a("a"),sdo=o("LxmertTokenizerFast"),ldo=o(" (LXMERT model)"),ido=l(),sh=a("li"),Pse=a("strong"),ddo=o("m2m_100"),cdo=o(" \u2014 "),VB=a("a"),fdo=o("M2M100Tokenizer"),mdo=o(" (M2M100 model)"),gdo=l(),lh=a("li"),Bse=a("strong"),hdo=o("marian"),pdo=o(" \u2014 "),XB=a("a"),_do=o("MarianTokenizer"),udo=o(" (Marian model)"),bdo=l(),_s=a("li"),Ise=a("strong"),vdo=o("mbart"),Fdo=o(" \u2014 "),zB=a("a"),Tdo=o("MBartTokenizer"),Mdo=o(" or "),WB=a("a"),Edo=o("MBartTokenizerFast"),Cdo=o(" (mBART model)"),wdo=l(),us=a("li"),Nse=a("strong"),Ado=o("mbart50"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("MBart50Tokenizer"),xdo=o(" or "),HB=a("a"),$do=o("MBart50TokenizerFast"),kdo=o(" (mBART-50 model)"),Sdo=l(),bs=a("li"),qse=a("strong"),Rdo=o("megatron-bert"),Pdo=o(" \u2014 "),UB=a("a"),Bdo=o("BertTokenizer"),Ido=o(" or "),JB=a("a"),Ndo=o("BertTokenizerFast"),qdo=o(" (Megatron-BERT model)"),jdo=l(),ih=a("li"),jse=a("strong"),Ddo=o("mluke"),Gdo=o(" \u2014 "),YB=a("a"),Odo=o("MLukeTokenizer"),Vdo=o(" (mLUKE model)"),Xdo=l(),vs=a("li"),Dse=a("strong"),zdo=o("mobilebert"),Wdo=o(" \u2014 "),KB=a("a"),Qdo=o("MobileBertTokenizer"),Hdo=o(" or "),ZB=a("a"),Udo=o("MobileBertTokenizerFast"),Jdo=o(" (MobileBERT model)"),Ydo=l(),Fs=a("li"),Gse=a("strong"),Kdo=o("mpnet"),Zdo=o(" \u2014 "),eI=a("a"),eco=o("MPNetTokenizer"),oco=o(" or "),oI=a("a"),rco=o("MPNetTokenizerFast"),tco=o(" (MPNet model)"),aco=l(),Ts=a("li"),Ose=a("strong"),nco=o("mt5"),sco=o(" \u2014 "),rI=a("a"),lco=o("MT5Tokenizer"),ico=o(" or "),tI=a("a"),dco=o("MT5TokenizerFast"),cco=o(" (MT5 model)"),fco=l(),Ms=a("li"),Vse=a("strong"),mco=o("nezha"),gco=o(" \u2014 "),aI=a("a"),hco=o("BertTokenizer"),pco=o(" or "),nI=a("a"),_co=o("BertTokenizerFast"),uco=o(" (Nezha model)"),bco=l(),Es=a("li"),Xse=a("strong"),vco=o("nystromformer"),Fco=o(" \u2014 "),sI=a("a"),Tco=o("AlbertTokenizer"),Mco=o(" or "),lI=a("a"),Eco=o("AlbertTokenizerFast"),Cco=o(" (Nystr\xF6mformer model)"),wco=l(),Cs=a("li"),zse=a("strong"),Aco=o("openai-gpt"),Lco=o(" \u2014 "),iI=a("a"),yco=o("OpenAIGPTTokenizer"),xco=o(" or "),dI=a("a"),$co=o("OpenAIGPTTokenizerFast"),kco=o(" (OpenAI GPT model)"),Sco=l(),dh=a("li"),Wse=a("strong"),Rco=o("opt"),Pco=o(" \u2014 "),cI=a("a"),Bco=o("GPT2Tokenizer"),Ico=o(" (OPT model)"),Nco=l(),ws=a("li"),Qse=a("strong"),qco=o("pegasus"),jco=o(" \u2014 "),fI=a("a"),Dco=o("PegasusTokenizer"),Gco=o(" or "),mI=a("a"),Oco=o("PegasusTokenizerFast"),Vco=o(" (Pegasus model)"),Xco=l(),ch=a("li"),Hse=a("strong"),zco=o("perceiver"),Wco=o(" \u2014 "),gI=a("a"),Qco=o("PerceiverTokenizer"),Hco=o(" (Perceiver model)"),Uco=l(),fh=a("li"),Use=a("strong"),Jco=o("phobert"),Yco=o(" \u2014 "),hI=a("a"),Kco=o("PhobertTokenizer"),Zco=o(" (PhoBERT model)"),efo=l(),mh=a("li"),Jse=a("strong"),ofo=o("plbart"),rfo=o(" \u2014 "),pI=a("a"),tfo=o("PLBartTokenizer"),afo=o(" (PLBart model)"),nfo=l(),gh=a("li"),Yse=a("strong"),sfo=o("prophetnet"),lfo=o(" \u2014 "),_I=a("a"),ifo=o("ProphetNetTokenizer"),dfo=o(" (ProphetNet model)"),cfo=l(),As=a("li"),Kse=a("strong"),ffo=o("qdqbert"),mfo=o(" \u2014 "),uI=a("a"),gfo=o("BertTokenizer"),hfo=o(" or "),bI=a("a"),pfo=o("BertTokenizerFast"),_fo=o(" (QDQBert model)"),ufo=l(),hh=a("li"),Zse=a("strong"),bfo=o("rag"),vfo=o(" \u2014 "),vI=a("a"),Ffo=o("RagTokenizer"),Tfo=o(" (RAG model)"),Mfo=l(),Ls=a("li"),ele=a("strong"),Efo=o("realm"),Cfo=o(" \u2014 "),FI=a("a"),wfo=o("RealmTokenizer"),Afo=o(" or "),TI=a("a"),Lfo=o("RealmTokenizerFast"),yfo=o(" (REALM model)"),xfo=l(),ys=a("li"),ole=a("strong"),$fo=o("reformer"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("ReformerTokenizer"),Rfo=o(" or "),EI=a("a"),Pfo=o("ReformerTokenizerFast"),Bfo=o(" (Reformer model)"),Ifo=l(),xs=a("li"),rle=a("strong"),Nfo=o("rembert"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("RemBertTokenizer"),Dfo=o(" or "),wI=a("a"),Gfo=o("RemBertTokenizerFast"),Ofo=o(" (RemBERT model)"),Vfo=l(),$s=a("li"),tle=a("strong"),Xfo=o("retribert"),zfo=o(" \u2014 "),AI=a("a"),Wfo=o("RetriBertTokenizer"),Qfo=o(" or "),LI=a("a"),Hfo=o("RetriBertTokenizerFast"),Ufo=o(" (RetriBERT model)"),Jfo=l(),ks=a("li"),ale=a("strong"),Yfo=o("roberta"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("RobertaTokenizer"),emo=o(" or "),xI=a("a"),omo=o("RobertaTokenizerFast"),rmo=o(" (RoBERTa model)"),tmo=l(),Ss=a("li"),nle=a("strong"),amo=o("roformer"),nmo=o(" \u2014 "),$I=a("a"),smo=o("RoFormerTokenizer"),lmo=o(" or "),kI=a("a"),imo=o("RoFormerTokenizerFast"),dmo=o(" (RoFormer model)"),cmo=l(),ph=a("li"),sle=a("strong"),fmo=o("speech_to_text"),mmo=o(" \u2014 "),SI=a("a"),gmo=o("Speech2TextTokenizer"),hmo=o(" (Speech2Text model)"),pmo=l(),_h=a("li"),lle=a("strong"),_mo=o("speech_to_text_2"),umo=o(" \u2014 "),RI=a("a"),bmo=o("Speech2Text2Tokenizer"),vmo=o(" (Speech2Text2 model)"),Fmo=l(),Rs=a("li"),ile=a("strong"),Tmo=o("splinter"),Mmo=o(" \u2014 "),PI=a("a"),Emo=o("SplinterTokenizer"),Cmo=o(" or "),BI=a("a"),wmo=o("SplinterTokenizerFast"),Amo=o(" (Splinter model)"),Lmo=l(),Ps=a("li"),dle=a("strong"),ymo=o("squeezebert"),xmo=o(" \u2014 "),II=a("a"),$mo=o("SqueezeBertTokenizer"),kmo=o(" or "),NI=a("a"),Smo=o("SqueezeBertTokenizerFast"),Rmo=o(" (SqueezeBERT model)"),Pmo=l(),Bs=a("li"),cle=a("strong"),Bmo=o("t5"),Imo=o(" \u2014 "),qI=a("a"),Nmo=o("T5Tokenizer"),qmo=o(" or "),jI=a("a"),jmo=o("T5TokenizerFast"),Dmo=o(" (T5 model)"),Gmo=l(),uh=a("li"),fle=a("strong"),Omo=o("tapas"),Vmo=o(" \u2014 "),DI=a("a"),Xmo=o("TapasTokenizer"),zmo=o(" (TAPAS model)"),Wmo=l(),bh=a("li"),mle=a("strong"),Qmo=o("tapex"),Hmo=o(" \u2014 "),GI=a("a"),Umo=o("TapexTokenizer"),Jmo=o(" (TAPEX model)"),Ymo=l(),vh=a("li"),gle=a("strong"),Kmo=o("transfo-xl"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("TransfoXLTokenizer"),ogo=o(" (Transformer-XL model)"),rgo=l(),Is=a("li"),hle=a("strong"),tgo=o("vilt"),ago=o(" \u2014 "),VI=a("a"),ngo=o("BertTokenizer"),sgo=o(" or "),XI=a("a"),lgo=o("BertTokenizerFast"),igo=o(" (ViLT model)"),dgo=l(),Ns=a("li"),ple=a("strong"),cgo=o("visual_bert"),fgo=o(" \u2014 "),zI=a("a"),mgo=o("BertTokenizer"),ggo=o(" or "),WI=a("a"),hgo=o("BertTokenizerFast"),pgo=o(" (VisualBERT model)"),_go=l(),Fh=a("li"),_le=a("strong"),ugo=o("wav2vec2"),bgo=o(" \u2014 "),QI=a("a"),vgo=o("Wav2Vec2CTCTokenizer"),Fgo=o(" (Wav2Vec2 model)"),Tgo=l(),Th=a("li"),ule=a("strong"),Mgo=o("wav2vec2-conformer"),Ego=o(" \u2014 "),HI=a("a"),Cgo=o("Wav2Vec2CTCTokenizer"),wgo=o(" (Wav2Vec2-Conformer model)"),Ago=l(),Mh=a("li"),ble=a("strong"),Lgo=o("wav2vec2_phoneme"),ygo=o(" \u2014 "),UI=a("a"),xgo=o("Wav2Vec2PhonemeCTCTokenizer"),$go=o(" (Wav2Vec2Phoneme model)"),kgo=l(),qs=a("li"),vle=a("strong"),Sgo=o("xglm"),Rgo=o(" \u2014 "),JI=a("a"),Pgo=o("XGLMTokenizer"),Bgo=o(" or "),YI=a("a"),Igo=o("XGLMTokenizerFast"),Ngo=o(" (XGLM model)"),qgo=l(),Eh=a("li"),Fle=a("strong"),jgo=o("xlm"),Dgo=o(" \u2014 "),KI=a("a"),Ggo=o("XLMTokenizer"),Ogo=o(" (XLM model)"),Vgo=l(),Ch=a("li"),Tle=a("strong"),Xgo=o("xlm-prophetnet"),zgo=o(" \u2014 "),ZI=a("a"),Wgo=o("XLMProphetNetTokenizer"),Qgo=o(" (XLM-ProphetNet model)"),Hgo=l(),js=a("li"),Mle=a("strong"),Ugo=o("xlm-roberta"),Jgo=o(" \u2014 "),eN=a("a"),Ygo=o("XLMRobertaTokenizer"),Kgo=o(" or "),oN=a("a"),Zgo=o("XLMRobertaTokenizerFast"),eho=o(" (XLM-RoBERTa model)"),oho=l(),Ds=a("li"),Ele=a("strong"),rho=o("xlm-roberta-xl"),tho=o(" \u2014 "),rN=a("a"),aho=o("RobertaTokenizer"),nho=o(" or "),tN=a("a"),sho=o("RobertaTokenizerFast"),lho=o(" (XLM-RoBERTa-XL model)"),iho=l(),Gs=a("li"),Cle=a("strong"),dho=o("xlnet"),cho=o(" \u2014 "),aN=a("a"),fho=o("XLNetTokenizer"),mho=o(" or "),nN=a("a"),gho=o("XLNetTokenizerFast"),hho=o(" (XLNet model)"),pho=l(),Os=a("li"),wle=a("strong"),_ho=o("yoso"),uho=o(" \u2014 "),sN=a("a"),bho=o("AlbertTokenizer"),vho=o(" or "),lN=a("a"),Fho=o("AlbertTokenizerFast"),Tho=o(" (YOSO model)"),Mho=l(),F(wh.$$.fragment),Eho=l(),Ah=a("div"),F(XA.$$.fragment),Cho=l(),Ale=a("p"),who=o("Register a new tokenizer in this mapping."),tOe=l(),Pi=a("h2"),Lh=a("a"),Lle=a("span"),F(zA.$$.fragment),Aho=l(),yle=a("span"),Lho=o("AutoFeatureExtractor"),aOe=l(),Lo=a("div"),F(WA.$$.fragment),yho=l(),QA=a("p"),xho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iN=a("a"),$ho=o("AutoFeatureExtractor.from_pretrained()"),kho=o(" class method."),Sho=l(),HA=a("p"),Rho=o("This class cannot be instantiated directly using "),xle=a("code"),Pho=o("__init__()"),Bho=o(" (throws an error)."),Iho=l(),He=a("div"),F(UA.$$.fragment),Nho=l(),$le=a("p"),qho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),jho=l(),Ra=a("p"),Dho=o("The feature extractor class to instantiate is selected based on the "),kle=a("code"),Gho=o("model_type"),Oho=o(` property of the config object
(either passed as an argument or loaded from `),Sle=a("code"),Vho=o("pretrained_model_name_or_path"),Xho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rle=a("code"),zho=o("pretrained_model_name_or_path"),Who=o(":"),Qho=l(),Y=a("ul"),yh=a("li"),Ple=a("strong"),Hho=o("beit"),Uho=o(" \u2014 "),dN=a("a"),Jho=o("BeitFeatureExtractor"),Yho=o(" (BEiT model)"),Kho=l(),xh=a("li"),Ble=a("strong"),Zho=o("clip"),epo=o(" \u2014 "),cN=a("a"),opo=o("CLIPFeatureExtractor"),rpo=o(" (CLIP model)"),tpo=l(),$h=a("li"),Ile=a("strong"),apo=o("convnext"),npo=o(" \u2014 "),fN=a("a"),spo=o("ConvNextFeatureExtractor"),lpo=o(" (ConvNeXT model)"),ipo=l(),kh=a("li"),Nle=a("strong"),dpo=o("cvt"),cpo=o(" \u2014 "),mN=a("a"),fpo=o("ConvNextFeatureExtractor"),mpo=o(" (CvT model)"),gpo=l(),Sh=a("li"),qle=a("strong"),hpo=o("data2vec-audio"),ppo=o(" \u2014 "),gN=a("a"),_po=o("Wav2Vec2FeatureExtractor"),upo=o(" (Data2VecAudio model)"),bpo=l(),Rh=a("li"),jle=a("strong"),vpo=o("data2vec-vision"),Fpo=o(" \u2014 "),hN=a("a"),Tpo=o("BeitFeatureExtractor"),Mpo=o(" (Data2VecVision model)"),Epo=l(),Ph=a("li"),Dle=a("strong"),Cpo=o("deit"),wpo=o(" \u2014 "),pN=a("a"),Apo=o("DeiTFeatureExtractor"),Lpo=o(" (DeiT model)"),ypo=l(),Bh=a("li"),Gle=a("strong"),xpo=o("detr"),$po=o(" \u2014 "),_N=a("a"),kpo=o("DetrFeatureExtractor"),Spo=o(" (DETR model)"),Rpo=l(),Ih=a("li"),Ole=a("strong"),Ppo=o("dpt"),Bpo=o(" \u2014 "),uN=a("a"),Ipo=o("DPTFeatureExtractor"),Npo=o(" (DPT model)"),qpo=l(),Nh=a("li"),Vle=a("strong"),jpo=o("flava"),Dpo=o(" \u2014 "),bN=a("a"),Gpo=o("FlavaFeatureExtractor"),Opo=o(" (FLAVA model)"),Vpo=l(),qh=a("li"),Xle=a("strong"),Xpo=o("glpn"),zpo=o(" \u2014 "),vN=a("a"),Wpo=o("GLPNFeatureExtractor"),Qpo=o(" (GLPN model)"),Hpo=l(),jh=a("li"),zle=a("strong"),Upo=o("hubert"),Jpo=o(" \u2014 "),FN=a("a"),Ypo=o("Wav2Vec2FeatureExtractor"),Kpo=o(" (Hubert model)"),Zpo=l(),Dh=a("li"),Wle=a("strong"),e_o=o("imagegpt"),o_o=o(" \u2014 "),TN=a("a"),r_o=o("ImageGPTFeatureExtractor"),t_o=o(" (ImageGPT model)"),a_o=l(),Gh=a("li"),Qle=a("strong"),n_o=o("layoutlmv2"),s_o=o(" \u2014 "),MN=a("a"),l_o=o("LayoutLMv2FeatureExtractor"),i_o=o(" (LayoutLMv2 model)"),d_o=l(),Oh=a("li"),Hle=a("strong"),c_o=o("layoutlmv3"),f_o=o(" \u2014 "),EN=a("a"),m_o=o("LayoutLMv3FeatureExtractor"),g_o=o(" (LayoutLMv3 model)"),h_o=l(),Vh=a("li"),Ule=a("strong"),p_o=o("levit"),__o=o(" \u2014 "),CN=a("a"),u_o=o("LevitFeatureExtractor"),b_o=o(" (LeViT model)"),v_o=l(),Xh=a("li"),Jle=a("strong"),F_o=o("maskformer"),T_o=o(" \u2014 "),wN=a("a"),M_o=o("MaskFormerFeatureExtractor"),E_o=o(" (MaskFormer model)"),C_o=l(),zh=a("li"),Yle=a("strong"),w_o=o("mctct"),A_o=o(" \u2014 "),AN=a("a"),L_o=o("MCTCTFeatureExtractor"),y_o=o(" (M-CTC-T model)"),x_o=l(),Wh=a("li"),Kle=a("strong"),$_o=o("perceiver"),k_o=o(" \u2014 "),LN=a("a"),S_o=o("PerceiverFeatureExtractor"),R_o=o(" (Perceiver model)"),P_o=l(),Qh=a("li"),Zle=a("strong"),B_o=o("poolformer"),I_o=o(" \u2014 "),yN=a("a"),N_o=o("PoolFormerFeatureExtractor"),q_o=o(" (PoolFormer model)"),j_o=l(),Hh=a("li"),eie=a("strong"),D_o=o("regnet"),G_o=o(" \u2014 "),xN=a("a"),O_o=o("ConvNextFeatureExtractor"),V_o=o(" (RegNet model)"),X_o=l(),Uh=a("li"),oie=a("strong"),z_o=o("resnet"),W_o=o(" \u2014 "),$N=a("a"),Q_o=o("ConvNextFeatureExtractor"),H_o=o(" (ResNet model)"),U_o=l(),Jh=a("li"),rie=a("strong"),J_o=o("segformer"),Y_o=o(" \u2014 "),kN=a("a"),K_o=o("SegformerFeatureExtractor"),Z_o=o(" (SegFormer model)"),euo=l(),Yh=a("li"),tie=a("strong"),ouo=o("speech_to_text"),ruo=o(" \u2014 "),SN=a("a"),tuo=o("Speech2TextFeatureExtractor"),auo=o(" (Speech2Text model)"),nuo=l(),Kh=a("li"),aie=a("strong"),suo=o("swin"),luo=o(" \u2014 "),RN=a("a"),iuo=o("ViTFeatureExtractor"),duo=o(" (Swin Transformer model)"),cuo=l(),Zh=a("li"),nie=a("strong"),fuo=o("van"),muo=o(" \u2014 "),PN=a("a"),guo=o("ConvNextFeatureExtractor"),huo=o(" (VAN model)"),puo=l(),ep=a("li"),sie=a("strong"),_uo=o("vilt"),uuo=o(" \u2014 "),BN=a("a"),buo=o("ViltFeatureExtractor"),vuo=o(" (ViLT model)"),Fuo=l(),op=a("li"),lie=a("strong"),Tuo=o("vit"),Muo=o(" \u2014 "),IN=a("a"),Euo=o("ViTFeatureExtractor"),Cuo=o(" (ViT model)"),wuo=l(),rp=a("li"),iie=a("strong"),Auo=o("vit_mae"),Luo=o(" \u2014 "),NN=a("a"),yuo=o("ViTFeatureExtractor"),xuo=o(" (ViTMAE model)"),$uo=l(),tp=a("li"),die=a("strong"),kuo=o("wav2vec2"),Suo=o(" \u2014 "),qN=a("a"),Ruo=o("Wav2Vec2FeatureExtractor"),Puo=o(" (Wav2Vec2 model)"),Buo=l(),ap=a("li"),cie=a("strong"),Iuo=o("wav2vec2-conformer"),Nuo=o(" \u2014 "),jN=a("a"),quo=o("Wav2Vec2FeatureExtractor"),juo=o(" (Wav2Vec2-Conformer model)"),Duo=l(),np=a("li"),fie=a("strong"),Guo=o("yolos"),Ouo=o(" \u2014 "),DN=a("a"),Vuo=o("YolosFeatureExtractor"),Xuo=o(" (YOLOS model)"),zuo=l(),F(sp.$$.fragment),Wuo=l(),F(lp.$$.fragment),Quo=l(),ip=a("div"),F(JA.$$.fragment),Huo=l(),mie=a("p"),Uuo=o("Register a new feature extractor for this class."),nOe=l(),Bi=a("h2"),dp=a("a"),gie=a("span"),F(YA.$$.fragment),Juo=l(),hie=a("span"),Yuo=o("AutoProcessor"),sOe=l(),yo=a("div"),F(KA.$$.fragment),Kuo=l(),ZA=a("p"),Zuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GN=a("a"),e1o=o("AutoProcessor.from_pretrained()"),o1o=o(" class method."),r1o=l(),eL=a("p"),t1o=o("This class cannot be instantiated directly using "),pie=a("code"),a1o=o("__init__()"),n1o=o(" (throws an error)."),s1o=l(),Ue=a("div"),F(oL.$$.fragment),l1o=l(),_ie=a("p"),i1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),d1o=l(),Ii=a("p"),c1o=o("The processor class to instantiate is selected based on the "),uie=a("code"),f1o=o("model_type"),m1o=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),g1o=o("pretrained_model_name_or_path"),h1o=o(" if possible):"),p1o=l(),he=a("ul"),cp=a("li"),vie=a("strong"),_1o=o("clip"),u1o=o(" \u2014 "),ON=a("a"),b1o=o("CLIPProcessor"),v1o=o(" (CLIP model)"),F1o=l(),fp=a("li"),Fie=a("strong"),T1o=o("flava"),M1o=o(" \u2014 "),Tie=a("code"),E1o=o("FLAVAProcessor"),C1o=o(" (FLAVA model)"),w1o=l(),mp=a("li"),Mie=a("strong"),A1o=o("layoutlmv2"),L1o=o(" \u2014 "),VN=a("a"),y1o=o("LayoutLMv2Processor"),x1o=o(" (LayoutLMv2 model)"),$1o=l(),gp=a("li"),Eie=a("strong"),k1o=o("layoutlmv3"),S1o=o(" \u2014 "),XN=a("a"),R1o=o("LayoutLMv3Processor"),P1o=o(" (LayoutLMv3 model)"),B1o=l(),hp=a("li"),Cie=a("strong"),I1o=o("layoutxlm"),N1o=o(" \u2014 "),zN=a("a"),q1o=o("LayoutXLMProcessor"),j1o=o(" (LayoutXLM model)"),D1o=l(),pp=a("li"),wie=a("strong"),G1o=o("sew"),O1o=o(" \u2014 "),WN=a("a"),V1o=o("Wav2Vec2Processor"),X1o=o(" (SEW model)"),z1o=l(),_p=a("li"),Aie=a("strong"),W1o=o("sew-d"),Q1o=o(" \u2014 "),QN=a("a"),H1o=o("Wav2Vec2Processor"),U1o=o(" (SEW-D model)"),J1o=l(),up=a("li"),Lie=a("strong"),Y1o=o("speech_to_text"),K1o=o(" \u2014 "),HN=a("a"),Z1o=o("Speech2TextProcessor"),e2o=o(" (Speech2Text model)"),o2o=l(),bp=a("li"),yie=a("strong"),r2o=o("speech_to_text_2"),t2o=o(" \u2014 "),UN=a("a"),a2o=o("Speech2Text2Processor"),n2o=o(" (Speech2Text2 model)"),s2o=l(),vp=a("li"),xie=a("strong"),l2o=o("trocr"),i2o=o(" \u2014 "),JN=a("a"),d2o=o("TrOCRProcessor"),c2o=o(" (TrOCR model)"),f2o=l(),Fp=a("li"),$ie=a("strong"),m2o=o("unispeech"),g2o=o(" \u2014 "),YN=a("a"),h2o=o("Wav2Vec2Processor"),p2o=o(" (UniSpeech model)"),_2o=l(),Tp=a("li"),kie=a("strong"),u2o=o("unispeech-sat"),b2o=o(" \u2014 "),KN=a("a"),v2o=o("Wav2Vec2Processor"),F2o=o(" (UniSpeechSat model)"),T2o=l(),Mp=a("li"),Sie=a("strong"),M2o=o("vilt"),E2o=o(" \u2014 "),ZN=a("a"),C2o=o("ViltProcessor"),w2o=o(" (ViLT model)"),A2o=l(),Ep=a("li"),Rie=a("strong"),L2o=o("vision-text-dual-encoder"),y2o=o(" \u2014 "),eq=a("a"),x2o=o("VisionTextDualEncoderProcessor"),$2o=o(" (VisionTextDualEncoder model)"),k2o=l(),Cp=a("li"),Pie=a("strong"),S2o=o("wav2vec2"),R2o=o(" \u2014 "),oq=a("a"),P2o=o("Wav2Vec2Processor"),B2o=o(" (Wav2Vec2 model)"),I2o=l(),wp=a("li"),Bie=a("strong"),N2o=o("wav2vec2-conformer"),q2o=o(" \u2014 "),rq=a("a"),j2o=o("Wav2Vec2Processor"),D2o=o(" (Wav2Vec2-Conformer model)"),G2o=l(),Ap=a("li"),Iie=a("strong"),O2o=o("wavlm"),V2o=o(" \u2014 "),tq=a("a"),X2o=o("Wav2Vec2Processor"),z2o=o(" (WavLM model)"),W2o=l(),F(Lp.$$.fragment),Q2o=l(),F(yp.$$.fragment),H2o=l(),xp=a("div"),F(rL.$$.fragment),U2o=l(),Nie=a("p"),J2o=o("Register a new processor for this class."),lOe=l(),Ni=a("h2"),$p=a("a"),qie=a("span"),F(tL.$$.fragment),Y2o=l(),jie=a("span"),K2o=o("AutoModel"),iOe=l(),xo=a("div"),F(aL.$$.fragment),Z2o=l(),qi=a("p"),ebo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aq=a("a"),obo=o("from_pretrained()"),rbo=o(" class method or the "),nq=a("a"),tbo=o("from_config()"),abo=o(` class
method.`),nbo=l(),nL=a("p"),sbo=o("This class cannot be instantiated directly using "),Die=a("code"),lbo=o("__init__()"),ibo=o(" (throws an error)."),dbo=l(),st=a("div"),F(sL.$$.fragment),cbo=l(),Gie=a("p"),fbo=o("Instantiates one of the base model classes of the library from a configuration."),mbo=l(),ji=a("p"),gbo=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),hbo=o("not"),pbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=a("a"),_bo=o("from_pretrained()"),ubo=o(" to load the model weights."),bbo=l(),F(kp.$$.fragment),vbo=l(),Je=a("div"),F(lL.$$.fragment),Fbo=l(),Vie=a("p"),Tbo=o("Instantiate one of the base model classes of the library from a pretrained model."),Mbo=l(),Pa=a("p"),Ebo=o("The model class to instantiate is selected based on the "),Xie=a("code"),Cbo=o("model_type"),wbo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),Abo=o("pretrained_model_name_or_path"),Lbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),ybo=o("pretrained_model_name_or_path"),xbo=o(":"),$bo=l(),y=a("ul"),Sp=a("li"),Qie=a("strong"),kbo=o("albert"),Sbo=o(" \u2014 "),lq=a("a"),Rbo=o("AlbertModel"),Pbo=o(" (ALBERT model)"),Bbo=l(),Rp=a("li"),Hie=a("strong"),Ibo=o("bart"),Nbo=o(" \u2014 "),iq=a("a"),qbo=o("BartModel"),jbo=o(" (BART model)"),Dbo=l(),Pp=a("li"),Uie=a("strong"),Gbo=o("beit"),Obo=o(" \u2014 "),dq=a("a"),Vbo=o("BeitModel"),Xbo=o(" (BEiT model)"),zbo=l(),Bp=a("li"),Jie=a("strong"),Wbo=o("bert"),Qbo=o(" \u2014 "),cq=a("a"),Hbo=o("BertModel"),Ubo=o(" (BERT model)"),Jbo=l(),Ip=a("li"),Yie=a("strong"),Ybo=o("bert-generation"),Kbo=o(" \u2014 "),fq=a("a"),Zbo=o("BertGenerationEncoder"),evo=o(" (Bert Generation model)"),ovo=l(),Np=a("li"),Kie=a("strong"),rvo=o("big_bird"),tvo=o(" \u2014 "),mq=a("a"),avo=o("BigBirdModel"),nvo=o(" (BigBird model)"),svo=l(),qp=a("li"),Zie=a("strong"),lvo=o("bigbird_pegasus"),ivo=o(" \u2014 "),gq=a("a"),dvo=o("BigBirdPegasusModel"),cvo=o(" (BigBird-Pegasus model)"),fvo=l(),jp=a("li"),ede=a("strong"),mvo=o("blenderbot"),gvo=o(" \u2014 "),hq=a("a"),hvo=o("BlenderbotModel"),pvo=o(" (Blenderbot model)"),_vo=l(),Dp=a("li"),ode=a("strong"),uvo=o("blenderbot-small"),bvo=o(" \u2014 "),pq=a("a"),vvo=o("BlenderbotSmallModel"),Fvo=o(" (BlenderbotSmall model)"),Tvo=l(),Gp=a("li"),rde=a("strong"),Mvo=o("bloom"),Evo=o(" \u2014 "),_q=a("a"),Cvo=o("BloomModel"),wvo=o(" (BLOOM model)"),Avo=l(),Op=a("li"),tde=a("strong"),Lvo=o("camembert"),yvo=o(" \u2014 "),uq=a("a"),xvo=o("CamembertModel"),$vo=o(" (CamemBERT model)"),kvo=l(),Vp=a("li"),ade=a("strong"),Svo=o("canine"),Rvo=o(" \u2014 "),bq=a("a"),Pvo=o("CanineModel"),Bvo=o(" (CANINE model)"),Ivo=l(),Xp=a("li"),nde=a("strong"),Nvo=o("clip"),qvo=o(" \u2014 "),vq=a("a"),jvo=o("CLIPModel"),Dvo=o(" (CLIP model)"),Gvo=l(),zp=a("li"),sde=a("strong"),Ovo=o("convbert"),Vvo=o(" \u2014 "),Fq=a("a"),Xvo=o("ConvBertModel"),zvo=o(" (ConvBERT model)"),Wvo=l(),Wp=a("li"),lde=a("strong"),Qvo=o("convnext"),Hvo=o(" \u2014 "),Tq=a("a"),Uvo=o("ConvNextModel"),Jvo=o(" (ConvNeXT model)"),Yvo=l(),Qp=a("li"),ide=a("strong"),Kvo=o("ctrl"),Zvo=o(" \u2014 "),Mq=a("a"),e0o=o("CTRLModel"),o0o=o(" (CTRL model)"),r0o=l(),Hp=a("li"),dde=a("strong"),t0o=o("cvt"),a0o=o(" \u2014 "),Eq=a("a"),n0o=o("CvtModel"),s0o=o(" (CvT model)"),l0o=l(),Up=a("li"),cde=a("strong"),i0o=o("data2vec-audio"),d0o=o(" \u2014 "),Cq=a("a"),c0o=o("Data2VecAudioModel"),f0o=o(" (Data2VecAudio model)"),m0o=l(),Jp=a("li"),fde=a("strong"),g0o=o("data2vec-text"),h0o=o(" \u2014 "),wq=a("a"),p0o=o("Data2VecTextModel"),_0o=o(" (Data2VecText model)"),u0o=l(),Yp=a("li"),mde=a("strong"),b0o=o("data2vec-vision"),v0o=o(" \u2014 "),Aq=a("a"),F0o=o("Data2VecVisionModel"),T0o=o(" (Data2VecVision model)"),M0o=l(),Kp=a("li"),gde=a("strong"),E0o=o("deberta"),C0o=o(" \u2014 "),Lq=a("a"),w0o=o("DebertaModel"),A0o=o(" (DeBERTa model)"),L0o=l(),Zp=a("li"),hde=a("strong"),y0o=o("deberta-v2"),x0o=o(" \u2014 "),yq=a("a"),$0o=o("DebertaV2Model"),k0o=o(" (DeBERTa-v2 model)"),S0o=l(),e_=a("li"),pde=a("strong"),R0o=o("decision_transformer"),P0o=o(" \u2014 "),xq=a("a"),B0o=o("DecisionTransformerModel"),I0o=o(" (Decision Transformer model)"),N0o=l(),o_=a("li"),_de=a("strong"),q0o=o("deit"),j0o=o(" \u2014 "),$q=a("a"),D0o=o("DeiTModel"),G0o=o(" (DeiT model)"),O0o=l(),r_=a("li"),ude=a("strong"),V0o=o("detr"),X0o=o(" \u2014 "),kq=a("a"),z0o=o("DetrModel"),W0o=o(" (DETR model)"),Q0o=l(),t_=a("li"),bde=a("strong"),H0o=o("distilbert"),U0o=o(" \u2014 "),Sq=a("a"),J0o=o("DistilBertModel"),Y0o=o(" (DistilBERT model)"),K0o=l(),a_=a("li"),vde=a("strong"),Z0o=o("dpr"),eFo=o(" \u2014 "),Rq=a("a"),oFo=o("DPRQuestionEncoder"),rFo=o(" (DPR model)"),tFo=l(),n_=a("li"),Fde=a("strong"),aFo=o("dpt"),nFo=o(" \u2014 "),Pq=a("a"),sFo=o("DPTModel"),lFo=o(" (DPT model)"),iFo=l(),s_=a("li"),Tde=a("strong"),dFo=o("electra"),cFo=o(" \u2014 "),Bq=a("a"),fFo=o("ElectraModel"),mFo=o(" (ELECTRA model)"),gFo=l(),l_=a("li"),Mde=a("strong"),hFo=o("flaubert"),pFo=o(" \u2014 "),Iq=a("a"),_Fo=o("FlaubertModel"),uFo=o(" (FlauBERT model)"),bFo=l(),i_=a("li"),Ede=a("strong"),vFo=o("flava"),FFo=o(" \u2014 "),Nq=a("a"),TFo=o("FlavaModel"),MFo=o(" (FLAVA model)"),EFo=l(),d_=a("li"),Cde=a("strong"),CFo=o("fnet"),wFo=o(" \u2014 "),qq=a("a"),AFo=o("FNetModel"),LFo=o(" (FNet model)"),yFo=l(),c_=a("li"),wde=a("strong"),xFo=o("fsmt"),$Fo=o(" \u2014 "),jq=a("a"),kFo=o("FSMTModel"),SFo=o(" (FairSeq Machine-Translation model)"),RFo=l(),Vs=a("li"),Ade=a("strong"),PFo=o("funnel"),BFo=o(" \u2014 "),Dq=a("a"),IFo=o("FunnelModel"),NFo=o(" or "),Gq=a("a"),qFo=o("FunnelBaseModel"),jFo=o(" (Funnel Transformer model)"),DFo=l(),f_=a("li"),Lde=a("strong"),GFo=o("glpn"),OFo=o(" \u2014 "),Oq=a("a"),VFo=o("GLPNModel"),XFo=o(" (GLPN model)"),zFo=l(),m_=a("li"),yde=a("strong"),WFo=o("gpt2"),QFo=o(" \u2014 "),Vq=a("a"),HFo=o("GPT2Model"),UFo=o(" (OpenAI GPT-2 model)"),JFo=l(),g_=a("li"),xde=a("strong"),YFo=o("gpt_neo"),KFo=o(" \u2014 "),Xq=a("a"),ZFo=o("GPTNeoModel"),e6o=o(" (GPT Neo model)"),o6o=l(),h_=a("li"),$de=a("strong"),r6o=o("gpt_neox"),t6o=o(" \u2014 "),zq=a("a"),a6o=o("GPTNeoXModel"),n6o=o(" (GPT NeoX model)"),s6o=l(),p_=a("li"),kde=a("strong"),l6o=o("gptj"),i6o=o(" \u2014 "),Wq=a("a"),d6o=o("GPTJModel"),c6o=o(" (GPT-J model)"),f6o=l(),__=a("li"),Sde=a("strong"),m6o=o("hubert"),g6o=o(" \u2014 "),Qq=a("a"),h6o=o("HubertModel"),p6o=o(" (Hubert model)"),_6o=l(),u_=a("li"),Rde=a("strong"),u6o=o("ibert"),b6o=o(" \u2014 "),Hq=a("a"),v6o=o("IBertModel"),F6o=o(" (I-BERT model)"),T6o=l(),b_=a("li"),Pde=a("strong"),M6o=o("imagegpt"),E6o=o(" \u2014 "),Uq=a("a"),C6o=o("ImageGPTModel"),w6o=o(" (ImageGPT model)"),A6o=l(),v_=a("li"),Bde=a("strong"),L6o=o("layoutlm"),y6o=o(" \u2014 "),Jq=a("a"),x6o=o("LayoutLMModel"),$6o=o(" (LayoutLM model)"),k6o=l(),F_=a("li"),Ide=a("strong"),S6o=o("layoutlmv2"),R6o=o(" \u2014 "),Yq=a("a"),P6o=o("LayoutLMv2Model"),B6o=o(" (LayoutLMv2 model)"),I6o=l(),T_=a("li"),Nde=a("strong"),N6o=o("layoutlmv3"),q6o=o(" \u2014 "),Kq=a("a"),j6o=o("LayoutLMv3Model"),D6o=o(" (LayoutLMv3 model)"),G6o=l(),M_=a("li"),qde=a("strong"),O6o=o("led"),V6o=o(" \u2014 "),Zq=a("a"),X6o=o("LEDModel"),z6o=o(" (LED model)"),W6o=l(),E_=a("li"),jde=a("strong"),Q6o=o("levit"),H6o=o(" \u2014 "),ej=a("a"),U6o=o("LevitModel"),J6o=o(" (LeViT model)"),Y6o=l(),C_=a("li"),Dde=a("strong"),K6o=o("longformer"),Z6o=o(" \u2014 "),oj=a("a"),eTo=o("LongformerModel"),oTo=o(" (Longformer model)"),rTo=l(),w_=a("li"),Gde=a("strong"),tTo=o("longt5"),aTo=o(" \u2014 "),rj=a("a"),nTo=o("LongT5Model"),sTo=o(" (LongT5 model)"),lTo=l(),A_=a("li"),Ode=a("strong"),iTo=o("luke"),dTo=o(" \u2014 "),tj=a("a"),cTo=o("LukeModel"),fTo=o(" (LUKE model)"),mTo=l(),L_=a("li"),Vde=a("strong"),gTo=o("lxmert"),hTo=o(" \u2014 "),aj=a("a"),pTo=o("LxmertModel"),_To=o(" (LXMERT model)"),uTo=l(),y_=a("li"),Xde=a("strong"),bTo=o("m2m_100"),vTo=o(" \u2014 "),nj=a("a"),FTo=o("M2M100Model"),TTo=o(" (M2M100 model)"),MTo=l(),x_=a("li"),zde=a("strong"),ETo=o("marian"),CTo=o(" \u2014 "),sj=a("a"),wTo=o("MarianModel"),ATo=o(" (Marian model)"),LTo=l(),$_=a("li"),Wde=a("strong"),yTo=o("maskformer"),xTo=o(" \u2014 "),lj=a("a"),$To=o("MaskFormerModel"),kTo=o(" (MaskFormer model)"),STo=l(),k_=a("li"),Qde=a("strong"),RTo=o("mbart"),PTo=o(" \u2014 "),ij=a("a"),BTo=o("MBartModel"),ITo=o(" (mBART model)"),NTo=l(),S_=a("li"),Hde=a("strong"),qTo=o("mctct"),jTo=o(" \u2014 "),dj=a("a"),DTo=o("MCTCTModel"),GTo=o(" (M-CTC-T model)"),OTo=l(),R_=a("li"),Ude=a("strong"),VTo=o("megatron-bert"),XTo=o(" \u2014 "),cj=a("a"),zTo=o("MegatronBertModel"),WTo=o(" (Megatron-BERT model)"),QTo=l(),P_=a("li"),Jde=a("strong"),HTo=o("mobilebert"),UTo=o(" \u2014 "),fj=a("a"),JTo=o("MobileBertModel"),YTo=o(" (MobileBERT model)"),KTo=l(),B_=a("li"),Yde=a("strong"),ZTo=o("mpnet"),e7o=o(" \u2014 "),mj=a("a"),o7o=o("MPNetModel"),r7o=o(" (MPNet model)"),t7o=l(),I_=a("li"),Kde=a("strong"),a7o=o("mt5"),n7o=o(" \u2014 "),gj=a("a"),s7o=o("MT5Model"),l7o=o(" (MT5 model)"),i7o=l(),N_=a("li"),Zde=a("strong"),d7o=o("nezha"),c7o=o(" \u2014 "),hj=a("a"),f7o=o("NezhaModel"),m7o=o(" (Nezha model)"),g7o=l(),q_=a("li"),ece=a("strong"),h7o=o("nystromformer"),p7o=o(" \u2014 "),pj=a("a"),_7o=o("NystromformerModel"),u7o=o(" (Nystr\xF6mformer model)"),b7o=l(),j_=a("li"),oce=a("strong"),v7o=o("openai-gpt"),F7o=o(" \u2014 "),_j=a("a"),T7o=o("OpenAIGPTModel"),M7o=o(" (OpenAI GPT model)"),E7o=l(),D_=a("li"),rce=a("strong"),C7o=o("opt"),w7o=o(" \u2014 "),uj=a("a"),A7o=o("OPTModel"),L7o=o(" (OPT model)"),y7o=l(),G_=a("li"),tce=a("strong"),x7o=o("pegasus"),$7o=o(" \u2014 "),bj=a("a"),k7o=o("PegasusModel"),S7o=o(" (Pegasus model)"),R7o=l(),O_=a("li"),ace=a("strong"),P7o=o("perceiver"),B7o=o(" \u2014 "),vj=a("a"),I7o=o("PerceiverModel"),N7o=o(" (Perceiver model)"),q7o=l(),V_=a("li"),nce=a("strong"),j7o=o("plbart"),D7o=o(" \u2014 "),Fj=a("a"),G7o=o("PLBartModel"),O7o=o(" (PLBart model)"),V7o=l(),X_=a("li"),sce=a("strong"),X7o=o("poolformer"),z7o=o(" \u2014 "),Tj=a("a"),W7o=o("PoolFormerModel"),Q7o=o(" (PoolFormer model)"),H7o=l(),z_=a("li"),lce=a("strong"),U7o=o("prophetnet"),J7o=o(" \u2014 "),Mj=a("a"),Y7o=o("ProphetNetModel"),K7o=o(" (ProphetNet model)"),Z7o=l(),W_=a("li"),ice=a("strong"),e8o=o("qdqbert"),o8o=o(" \u2014 "),Ej=a("a"),r8o=o("QDQBertModel"),t8o=o(" (QDQBert model)"),a8o=l(),Q_=a("li"),dce=a("strong"),n8o=o("reformer"),s8o=o(" \u2014 "),Cj=a("a"),l8o=o("ReformerModel"),i8o=o(" (Reformer model)"),d8o=l(),H_=a("li"),cce=a("strong"),c8o=o("regnet"),f8o=o(" \u2014 "),wj=a("a"),m8o=o("RegNetModel"),g8o=o(" (RegNet model)"),h8o=l(),U_=a("li"),fce=a("strong"),p8o=o("rembert"),_8o=o(" \u2014 "),Aj=a("a"),u8o=o("RemBertModel"),b8o=o(" (RemBERT model)"),v8o=l(),J_=a("li"),mce=a("strong"),F8o=o("resnet"),T8o=o(" \u2014 "),Lj=a("a"),M8o=o("ResNetModel"),E8o=o(" (ResNet model)"),C8o=l(),Y_=a("li"),gce=a("strong"),w8o=o("retribert"),A8o=o(" \u2014 "),yj=a("a"),L8o=o("RetriBertModel"),y8o=o(" (RetriBERT model)"),x8o=l(),K_=a("li"),hce=a("strong"),$8o=o("roberta"),k8o=o(" \u2014 "),xj=a("a"),S8o=o("RobertaModel"),R8o=o(" (RoBERTa model)"),P8o=l(),Z_=a("li"),pce=a("strong"),B8o=o("roformer"),I8o=o(" \u2014 "),$j=a("a"),N8o=o("RoFormerModel"),q8o=o(" (RoFormer model)"),j8o=l(),eu=a("li"),_ce=a("strong"),D8o=o("segformer"),G8o=o(" \u2014 "),kj=a("a"),O8o=o("SegformerModel"),V8o=o(" (SegFormer model)"),X8o=l(),ou=a("li"),uce=a("strong"),z8o=o("sew"),W8o=o(" \u2014 "),Sj=a("a"),Q8o=o("SEWModel"),H8o=o(" (SEW model)"),U8o=l(),ru=a("li"),bce=a("strong"),J8o=o("sew-d"),Y8o=o(" \u2014 "),Rj=a("a"),K8o=o("SEWDModel"),Z8o=o(" (SEW-D model)"),eMo=l(),tu=a("li"),vce=a("strong"),oMo=o("speech_to_text"),rMo=o(" \u2014 "),Pj=a("a"),tMo=o("Speech2TextModel"),aMo=o(" (Speech2Text model)"),nMo=l(),au=a("li"),Fce=a("strong"),sMo=o("splinter"),lMo=o(" \u2014 "),Bj=a("a"),iMo=o("SplinterModel"),dMo=o(" (Splinter model)"),cMo=l(),nu=a("li"),Tce=a("strong"),fMo=o("squeezebert"),mMo=o(" \u2014 "),Ij=a("a"),gMo=o("SqueezeBertModel"),hMo=o(" (SqueezeBERT model)"),pMo=l(),su=a("li"),Mce=a("strong"),_Mo=o("swin"),uMo=o(" \u2014 "),Nj=a("a"),bMo=o("SwinModel"),vMo=o(" (Swin Transformer model)"),FMo=l(),lu=a("li"),Ece=a("strong"),TMo=o("t5"),MMo=o(" \u2014 "),qj=a("a"),EMo=o("T5Model"),CMo=o(" (T5 model)"),wMo=l(),iu=a("li"),Cce=a("strong"),AMo=o("tapas"),LMo=o(" \u2014 "),jj=a("a"),yMo=o("TapasModel"),xMo=o(" (TAPAS model)"),$Mo=l(),du=a("li"),wce=a("strong"),kMo=o("trajectory_transformer"),SMo=o(" \u2014 "),Dj=a("a"),RMo=o("TrajectoryTransformerModel"),PMo=o(" (Trajectory Transformer model)"),BMo=l(),cu=a("li"),Ace=a("strong"),IMo=o("transfo-xl"),NMo=o(" \u2014 "),Gj=a("a"),qMo=o("TransfoXLModel"),jMo=o(" (Transformer-XL model)"),DMo=l(),fu=a("li"),Lce=a("strong"),GMo=o("unispeech"),OMo=o(" \u2014 "),Oj=a("a"),VMo=o("UniSpeechModel"),XMo=o(" (UniSpeech model)"),zMo=l(),mu=a("li"),yce=a("strong"),WMo=o("unispeech-sat"),QMo=o(" \u2014 "),Vj=a("a"),HMo=o("UniSpeechSatModel"),UMo=o(" (UniSpeechSat model)"),JMo=l(),gu=a("li"),xce=a("strong"),YMo=o("van"),KMo=o(" \u2014 "),Xj=a("a"),ZMo=o("VanModel"),eEo=o(" (VAN model)"),oEo=l(),hu=a("li"),$ce=a("strong"),rEo=o("vilt"),tEo=o(" \u2014 "),zj=a("a"),aEo=o("ViltModel"),nEo=o(" (ViLT model)"),sEo=l(),pu=a("li"),kce=a("strong"),lEo=o("vision-text-dual-encoder"),iEo=o(" \u2014 "),Wj=a("a"),dEo=o("VisionTextDualEncoderModel"),cEo=o(" (VisionTextDualEncoder model)"),fEo=l(),_u=a("li"),Sce=a("strong"),mEo=o("visual_bert"),gEo=o(" \u2014 "),Qj=a("a"),hEo=o("VisualBertModel"),pEo=o(" (VisualBERT model)"),_Eo=l(),uu=a("li"),Rce=a("strong"),uEo=o("vit"),bEo=o(" \u2014 "),Hj=a("a"),vEo=o("ViTModel"),FEo=o(" (ViT model)"),TEo=l(),bu=a("li"),Pce=a("strong"),MEo=o("vit_mae"),EEo=o(" \u2014 "),Uj=a("a"),CEo=o("ViTMAEModel"),wEo=o(" (ViTMAE model)"),AEo=l(),vu=a("li"),Bce=a("strong"),LEo=o("wav2vec2"),yEo=o(" \u2014 "),Jj=a("a"),xEo=o("Wav2Vec2Model"),$Eo=o(" (Wav2Vec2 model)"),kEo=l(),Fu=a("li"),Ice=a("strong"),SEo=o("wav2vec2-conformer"),REo=o(" \u2014 "),Yj=a("a"),PEo=o("Wav2Vec2ConformerModel"),BEo=o(" (Wav2Vec2-Conformer model)"),IEo=l(),Tu=a("li"),Nce=a("strong"),NEo=o("wavlm"),qEo=o(" \u2014 "),Kj=a("a"),jEo=o("WavLMModel"),DEo=o(" (WavLM model)"),GEo=l(),Mu=a("li"),qce=a("strong"),OEo=o("xglm"),VEo=o(" \u2014 "),Zj=a("a"),XEo=o("XGLMModel"),zEo=o(" (XGLM model)"),WEo=l(),Eu=a("li"),jce=a("strong"),QEo=o("xlm"),HEo=o(" \u2014 "),eD=a("a"),UEo=o("XLMModel"),JEo=o(" (XLM model)"),YEo=l(),Cu=a("li"),Dce=a("strong"),KEo=o("xlm-prophetnet"),ZEo=o(" \u2014 "),oD=a("a"),e4o=o("XLMProphetNetModel"),o4o=o(" (XLM-ProphetNet model)"),r4o=l(),wu=a("li"),Gce=a("strong"),t4o=o("xlm-roberta"),a4o=o(" \u2014 "),rD=a("a"),n4o=o("XLMRobertaModel"),s4o=o(" (XLM-RoBERTa model)"),l4o=l(),Au=a("li"),Oce=a("strong"),i4o=o("xlm-roberta-xl"),d4o=o(" \u2014 "),tD=a("a"),c4o=o("XLMRobertaXLModel"),f4o=o(" (XLM-RoBERTa-XL model)"),m4o=l(),Lu=a("li"),Vce=a("strong"),g4o=o("xlnet"),h4o=o(" \u2014 "),aD=a("a"),p4o=o("XLNetModel"),_4o=o(" (XLNet model)"),u4o=l(),yu=a("li"),Xce=a("strong"),b4o=o("yolos"),v4o=o(" \u2014 "),nD=a("a"),F4o=o("YolosModel"),T4o=o(" (YOLOS model)"),M4o=l(),xu=a("li"),zce=a("strong"),E4o=o("yoso"),C4o=o(" \u2014 "),sD=a("a"),w4o=o("YosoModel"),A4o=o(" (YOSO model)"),L4o=l(),$u=a("p"),y4o=o("The model is set in evaluation mode by default using "),Wce=a("code"),x4o=o("model.eval()"),$4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),k4o=o("model.train()"),S4o=l(),F(ku.$$.fragment),dOe=l(),Di=a("h2"),Su=a("a"),Hce=a("span"),F(iL.$$.fragment),R4o=l(),Uce=a("span"),P4o=o("AutoModelForPreTraining"),cOe=l(),$o=a("div"),F(dL.$$.fragment),B4o=l(),Gi=a("p"),I4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lD=a("a"),N4o=o("from_pretrained()"),q4o=o(" class method or the "),iD=a("a"),j4o=o("from_config()"),D4o=o(` class
method.`),G4o=l(),cL=a("p"),O4o=o("This class cannot be instantiated directly using "),Jce=a("code"),V4o=o("__init__()"),X4o=o(" (throws an error)."),z4o=l(),lt=a("div"),F(fL.$$.fragment),W4o=l(),Yce=a("p"),Q4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H4o=l(),Oi=a("p"),U4o=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),J4o=o("not"),Y4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dD=a("a"),K4o=o("from_pretrained()"),Z4o=o(" to load the model weights."),eCo=l(),F(Ru.$$.fragment),oCo=l(),Ye=a("div"),F(mL.$$.fragment),rCo=l(),Zce=a("p"),tCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aCo=l(),Ba=a("p"),nCo=o("The model class to instantiate is selected based on the "),efe=a("code"),sCo=o("model_type"),lCo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),cCo=o("pretrained_model_name_or_path"),fCo=o(":"),mCo=l(),G=a("ul"),Pu=a("li"),tfe=a("strong"),gCo=o("albert"),hCo=o(" \u2014 "),cD=a("a"),pCo=o("AlbertForPreTraining"),_Co=o(" (ALBERT model)"),uCo=l(),Bu=a("li"),afe=a("strong"),bCo=o("bart"),vCo=o(" \u2014 "),fD=a("a"),FCo=o("BartForConditionalGeneration"),TCo=o(" (BART model)"),MCo=l(),Iu=a("li"),nfe=a("strong"),ECo=o("bert"),CCo=o(" \u2014 "),mD=a("a"),wCo=o("BertForPreTraining"),ACo=o(" (BERT model)"),LCo=l(),Nu=a("li"),sfe=a("strong"),yCo=o("big_bird"),xCo=o(" \u2014 "),gD=a("a"),$Co=o("BigBirdForPreTraining"),kCo=o(" (BigBird model)"),SCo=l(),qu=a("li"),lfe=a("strong"),RCo=o("bloom"),PCo=o(" \u2014 "),hD=a("a"),BCo=o("BloomForCausalLM"),ICo=o(" (BLOOM model)"),NCo=l(),ju=a("li"),ife=a("strong"),qCo=o("camembert"),jCo=o(" \u2014 "),pD=a("a"),DCo=o("CamembertForMaskedLM"),GCo=o(" (CamemBERT model)"),OCo=l(),Du=a("li"),dfe=a("strong"),VCo=o("ctrl"),XCo=o(" \u2014 "),_D=a("a"),zCo=o("CTRLLMHeadModel"),WCo=o(" (CTRL model)"),QCo=l(),Gu=a("li"),cfe=a("strong"),HCo=o("data2vec-text"),UCo=o(" \u2014 "),uD=a("a"),JCo=o("Data2VecTextForMaskedLM"),YCo=o(" (Data2VecText model)"),KCo=l(),Ou=a("li"),ffe=a("strong"),ZCo=o("deberta"),e5o=o(" \u2014 "),bD=a("a"),o5o=o("DebertaForMaskedLM"),r5o=o(" (DeBERTa model)"),t5o=l(),Vu=a("li"),mfe=a("strong"),a5o=o("deberta-v2"),n5o=o(" \u2014 "),vD=a("a"),s5o=o("DebertaV2ForMaskedLM"),l5o=o(" (DeBERTa-v2 model)"),i5o=l(),Xu=a("li"),gfe=a("strong"),d5o=o("distilbert"),c5o=o(" \u2014 "),FD=a("a"),f5o=o("DistilBertForMaskedLM"),m5o=o(" (DistilBERT model)"),g5o=l(),zu=a("li"),hfe=a("strong"),h5o=o("electra"),p5o=o(" \u2014 "),TD=a("a"),_5o=o("ElectraForPreTraining"),u5o=o(" (ELECTRA model)"),b5o=l(),Wu=a("li"),pfe=a("strong"),v5o=o("flaubert"),F5o=o(" \u2014 "),MD=a("a"),T5o=o("FlaubertWithLMHeadModel"),M5o=o(" (FlauBERT model)"),E5o=l(),Qu=a("li"),_fe=a("strong"),C5o=o("flava"),w5o=o(" \u2014 "),ED=a("a"),A5o=o("FlavaForPreTraining"),L5o=o(" (FLAVA model)"),y5o=l(),Hu=a("li"),ufe=a("strong"),x5o=o("fnet"),$5o=o(" \u2014 "),CD=a("a"),k5o=o("FNetForPreTraining"),S5o=o(" (FNet model)"),R5o=l(),Uu=a("li"),bfe=a("strong"),P5o=o("fsmt"),B5o=o(" \u2014 "),wD=a("a"),I5o=o("FSMTForConditionalGeneration"),N5o=o(" (FairSeq Machine-Translation model)"),q5o=l(),Ju=a("li"),vfe=a("strong"),j5o=o("funnel"),D5o=o(" \u2014 "),AD=a("a"),G5o=o("FunnelForPreTraining"),O5o=o(" (Funnel Transformer model)"),V5o=l(),Yu=a("li"),Ffe=a("strong"),X5o=o("gpt2"),z5o=o(" \u2014 "),LD=a("a"),W5o=o("GPT2LMHeadModel"),Q5o=o(" (OpenAI GPT-2 model)"),H5o=l(),Ku=a("li"),Tfe=a("strong"),U5o=o("ibert"),J5o=o(" \u2014 "),yD=a("a"),Y5o=o("IBertForMaskedLM"),K5o=o(" (I-BERT model)"),Z5o=l(),Zu=a("li"),Mfe=a("strong"),e3o=o("layoutlm"),o3o=o(" \u2014 "),xD=a("a"),r3o=o("LayoutLMForMaskedLM"),t3o=o(" (LayoutLM model)"),a3o=l(),e1=a("li"),Efe=a("strong"),n3o=o("longformer"),s3o=o(" \u2014 "),$D=a("a"),l3o=o("LongformerForMaskedLM"),i3o=o(" (Longformer model)"),d3o=l(),o1=a("li"),Cfe=a("strong"),c3o=o("lxmert"),f3o=o(" \u2014 "),kD=a("a"),m3o=o("LxmertForPreTraining"),g3o=o(" (LXMERT model)"),h3o=l(),r1=a("li"),wfe=a("strong"),p3o=o("megatron-bert"),_3o=o(" \u2014 "),SD=a("a"),u3o=o("MegatronBertForPreTraining"),b3o=o(" (Megatron-BERT model)"),v3o=l(),t1=a("li"),Afe=a("strong"),F3o=o("mobilebert"),T3o=o(" \u2014 "),RD=a("a"),M3o=o("MobileBertForPreTraining"),E3o=o(" (MobileBERT model)"),C3o=l(),a1=a("li"),Lfe=a("strong"),w3o=o("mpnet"),A3o=o(" \u2014 "),PD=a("a"),L3o=o("MPNetForMaskedLM"),y3o=o(" (MPNet model)"),x3o=l(),n1=a("li"),yfe=a("strong"),$3o=o("nezha"),k3o=o(" \u2014 "),BD=a("a"),S3o=o("NezhaForPreTraining"),R3o=o(" (Nezha model)"),P3o=l(),s1=a("li"),xfe=a("strong"),B3o=o("openai-gpt"),I3o=o(" \u2014 "),ID=a("a"),N3o=o("OpenAIGPTLMHeadModel"),q3o=o(" (OpenAI GPT model)"),j3o=l(),l1=a("li"),$fe=a("strong"),D3o=o("retribert"),G3o=o(" \u2014 "),ND=a("a"),O3o=o("RetriBertModel"),V3o=o(" (RetriBERT model)"),X3o=l(),i1=a("li"),kfe=a("strong"),z3o=o("roberta"),W3o=o(" \u2014 "),qD=a("a"),Q3o=o("RobertaForMaskedLM"),H3o=o(" (RoBERTa model)"),U3o=l(),d1=a("li"),Sfe=a("strong"),J3o=o("splinter"),Y3o=o(" \u2014 "),jD=a("a"),K3o=o("SplinterForPreTraining"),Z3o=o(" (Splinter model)"),ewo=l(),c1=a("li"),Rfe=a("strong"),owo=o("squeezebert"),rwo=o(" \u2014 "),DD=a("a"),two=o("SqueezeBertForMaskedLM"),awo=o(" (SqueezeBERT model)"),nwo=l(),f1=a("li"),Pfe=a("strong"),swo=o("t5"),lwo=o(" \u2014 "),GD=a("a"),iwo=o("T5ForConditionalGeneration"),dwo=o(" (T5 model)"),cwo=l(),m1=a("li"),Bfe=a("strong"),fwo=o("tapas"),mwo=o(" \u2014 "),OD=a("a"),gwo=o("TapasForMaskedLM"),hwo=o(" (TAPAS model)"),pwo=l(),g1=a("li"),Ife=a("strong"),_wo=o("transfo-xl"),uwo=o(" \u2014 "),VD=a("a"),bwo=o("TransfoXLLMHeadModel"),vwo=o(" (Transformer-XL model)"),Fwo=l(),h1=a("li"),Nfe=a("strong"),Two=o("unispeech"),Mwo=o(" \u2014 "),XD=a("a"),Ewo=o("UniSpeechForPreTraining"),Cwo=o(" (UniSpeech model)"),wwo=l(),p1=a("li"),qfe=a("strong"),Awo=o("unispeech-sat"),Lwo=o(" \u2014 "),zD=a("a"),ywo=o("UniSpeechSatForPreTraining"),xwo=o(" (UniSpeechSat model)"),$wo=l(),_1=a("li"),jfe=a("strong"),kwo=o("visual_bert"),Swo=o(" \u2014 "),WD=a("a"),Rwo=o("VisualBertForPreTraining"),Pwo=o(" (VisualBERT model)"),Bwo=l(),u1=a("li"),Dfe=a("strong"),Iwo=o("vit_mae"),Nwo=o(" \u2014 "),QD=a("a"),qwo=o("ViTMAEForPreTraining"),jwo=o(" (ViTMAE model)"),Dwo=l(),b1=a("li"),Gfe=a("strong"),Gwo=o("wav2vec2"),Owo=o(" \u2014 "),HD=a("a"),Vwo=o("Wav2Vec2ForPreTraining"),Xwo=o(" (Wav2Vec2 model)"),zwo=l(),v1=a("li"),Ofe=a("strong"),Wwo=o("wav2vec2-conformer"),Qwo=o(" \u2014 "),UD=a("a"),Hwo=o("Wav2Vec2ConformerForPreTraining"),Uwo=o(" (Wav2Vec2-Conformer model)"),Jwo=l(),F1=a("li"),Vfe=a("strong"),Ywo=o("xlm"),Kwo=o(" \u2014 "),JD=a("a"),Zwo=o("XLMWithLMHeadModel"),eAo=o(" (XLM model)"),oAo=l(),T1=a("li"),Xfe=a("strong"),rAo=o("xlm-roberta"),tAo=o(" \u2014 "),YD=a("a"),aAo=o("XLMRobertaForMaskedLM"),nAo=o(" (XLM-RoBERTa model)"),sAo=l(),M1=a("li"),zfe=a("strong"),lAo=o("xlm-roberta-xl"),iAo=o(" \u2014 "),KD=a("a"),dAo=o("XLMRobertaXLForMaskedLM"),cAo=o(" (XLM-RoBERTa-XL model)"),fAo=l(),E1=a("li"),Wfe=a("strong"),mAo=o("xlnet"),gAo=o(" \u2014 "),ZD=a("a"),hAo=o("XLNetLMHeadModel"),pAo=o(" (XLNet model)"),_Ao=l(),C1=a("p"),uAo=o("The model is set in evaluation mode by default using "),Qfe=a("code"),bAo=o("model.eval()"),vAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=a("code"),FAo=o("model.train()"),TAo=l(),F(w1.$$.fragment),fOe=l(),Vi=a("h2"),A1=a("a"),Ufe=a("span"),F(gL.$$.fragment),MAo=l(),Jfe=a("span"),EAo=o("AutoModelForCausalLM"),mOe=l(),ko=a("div"),F(hL.$$.fragment),CAo=l(),Xi=a("p"),wAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eG=a("a"),AAo=o("from_pretrained()"),LAo=o(" class method or the "),oG=a("a"),yAo=o("from_config()"),xAo=o(` class
method.`),$Ao=l(),pL=a("p"),kAo=o("This class cannot be instantiated directly using "),Yfe=a("code"),SAo=o("__init__()"),RAo=o(" (throws an error)."),PAo=l(),it=a("div"),F(_L.$$.fragment),BAo=l(),Kfe=a("p"),IAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NAo=l(),zi=a("p"),qAo=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),jAo=o("not"),DAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),GAo=o("from_pretrained()"),OAo=o(" to load the model weights."),VAo=l(),F(L1.$$.fragment),XAo=l(),Ke=a("div"),F(uL.$$.fragment),zAo=l(),eme=a("p"),WAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QAo=l(),Ia=a("p"),HAo=o("The model class to instantiate is selected based on the "),ome=a("code"),UAo=o("model_type"),JAo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),YAo=o("pretrained_model_name_or_path"),KAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),ZAo=o("pretrained_model_name_or_path"),eLo=o(":"),oLo=l(),z=a("ul"),y1=a("li"),ame=a("strong"),rLo=o("bart"),tLo=o(" \u2014 "),tG=a("a"),aLo=o("BartForCausalLM"),nLo=o(" (BART model)"),sLo=l(),x1=a("li"),nme=a("strong"),lLo=o("bert"),iLo=o(" \u2014 "),aG=a("a"),dLo=o("BertLMHeadModel"),cLo=o(" (BERT model)"),fLo=l(),$1=a("li"),sme=a("strong"),mLo=o("bert-generation"),gLo=o(" \u2014 "),nG=a("a"),hLo=o("BertGenerationDecoder"),pLo=o(" (Bert Generation model)"),_Lo=l(),k1=a("li"),lme=a("strong"),uLo=o("big_bird"),bLo=o(" \u2014 "),sG=a("a"),vLo=o("BigBirdForCausalLM"),FLo=o(" (BigBird model)"),TLo=l(),S1=a("li"),ime=a("strong"),MLo=o("bigbird_pegasus"),ELo=o(" \u2014 "),lG=a("a"),CLo=o("BigBirdPegasusForCausalLM"),wLo=o(" (BigBird-Pegasus model)"),ALo=l(),R1=a("li"),dme=a("strong"),LLo=o("blenderbot"),yLo=o(" \u2014 "),iG=a("a"),xLo=o("BlenderbotForCausalLM"),$Lo=o(" (Blenderbot model)"),kLo=l(),P1=a("li"),cme=a("strong"),SLo=o("blenderbot-small"),RLo=o(" \u2014 "),dG=a("a"),PLo=o("BlenderbotSmallForCausalLM"),BLo=o(" (BlenderbotSmall model)"),ILo=l(),B1=a("li"),fme=a("strong"),NLo=o("bloom"),qLo=o(" \u2014 "),cG=a("a"),jLo=o("BloomForCausalLM"),DLo=o(" (BLOOM model)"),GLo=l(),I1=a("li"),mme=a("strong"),OLo=o("camembert"),VLo=o(" \u2014 "),fG=a("a"),XLo=o("CamembertForCausalLM"),zLo=o(" (CamemBERT model)"),WLo=l(),N1=a("li"),gme=a("strong"),QLo=o("ctrl"),HLo=o(" \u2014 "),mG=a("a"),ULo=o("CTRLLMHeadModel"),JLo=o(" (CTRL model)"),YLo=l(),q1=a("li"),hme=a("strong"),KLo=o("data2vec-text"),ZLo=o(" \u2014 "),gG=a("a"),eyo=o("Data2VecTextForCausalLM"),oyo=o(" (Data2VecText model)"),ryo=l(),j1=a("li"),pme=a("strong"),tyo=o("electra"),ayo=o(" \u2014 "),hG=a("a"),nyo=o("ElectraForCausalLM"),syo=o(" (ELECTRA model)"),lyo=l(),D1=a("li"),_me=a("strong"),iyo=o("gpt2"),dyo=o(" \u2014 "),pG=a("a"),cyo=o("GPT2LMHeadModel"),fyo=o(" (OpenAI GPT-2 model)"),myo=l(),G1=a("li"),ume=a("strong"),gyo=o("gpt_neo"),hyo=o(" \u2014 "),_G=a("a"),pyo=o("GPTNeoForCausalLM"),_yo=o(" (GPT Neo model)"),uyo=l(),O1=a("li"),bme=a("strong"),byo=o("gpt_neox"),vyo=o(" \u2014 "),uG=a("a"),Fyo=o("GPTNeoXForCausalLM"),Tyo=o(" (GPT NeoX model)"),Myo=l(),V1=a("li"),vme=a("strong"),Eyo=o("gptj"),Cyo=o(" \u2014 "),bG=a("a"),wyo=o("GPTJForCausalLM"),Ayo=o(" (GPT-J model)"),Lyo=l(),X1=a("li"),Fme=a("strong"),yyo=o("marian"),xyo=o(" \u2014 "),vG=a("a"),$yo=o("MarianForCausalLM"),kyo=o(" (Marian model)"),Syo=l(),z1=a("li"),Tme=a("strong"),Ryo=o("mbart"),Pyo=o(" \u2014 "),FG=a("a"),Byo=o("MBartForCausalLM"),Iyo=o(" (mBART model)"),Nyo=l(),W1=a("li"),Mme=a("strong"),qyo=o("megatron-bert"),jyo=o(" \u2014 "),TG=a("a"),Dyo=o("MegatronBertForCausalLM"),Gyo=o(" (Megatron-BERT model)"),Oyo=l(),Q1=a("li"),Eme=a("strong"),Vyo=o("openai-gpt"),Xyo=o(" \u2014 "),MG=a("a"),zyo=o("OpenAIGPTLMHeadModel"),Wyo=o(" (OpenAI GPT model)"),Qyo=l(),H1=a("li"),Cme=a("strong"),Hyo=o("opt"),Uyo=o(" \u2014 "),EG=a("a"),Jyo=o("OPTForCausalLM"),Yyo=o(" (OPT model)"),Kyo=l(),U1=a("li"),wme=a("strong"),Zyo=o("pegasus"),e9o=o(" \u2014 "),CG=a("a"),o9o=o("PegasusForCausalLM"),r9o=o(" (Pegasus model)"),t9o=l(),J1=a("li"),Ame=a("strong"),a9o=o("plbart"),n9o=o(" \u2014 "),wG=a("a"),s9o=o("PLBartForCausalLM"),l9o=o(" (PLBart model)"),i9o=l(),Y1=a("li"),Lme=a("strong"),d9o=o("prophetnet"),c9o=o(" \u2014 "),AG=a("a"),f9o=o("ProphetNetForCausalLM"),m9o=o(" (ProphetNet model)"),g9o=l(),K1=a("li"),yme=a("strong"),h9o=o("qdqbert"),p9o=o(" \u2014 "),LG=a("a"),_9o=o("QDQBertLMHeadModel"),u9o=o(" (QDQBert model)"),b9o=l(),Z1=a("li"),xme=a("strong"),v9o=o("reformer"),F9o=o(" \u2014 "),yG=a("a"),T9o=o("ReformerModelWithLMHead"),M9o=o(" (Reformer model)"),E9o=l(),e2=a("li"),$me=a("strong"),C9o=o("rembert"),w9o=o(" \u2014 "),xG=a("a"),A9o=o("RemBertForCausalLM"),L9o=o(" (RemBERT model)"),y9o=l(),o2=a("li"),kme=a("strong"),x9o=o("roberta"),$9o=o(" \u2014 "),$G=a("a"),k9o=o("RobertaForCausalLM"),S9o=o(" (RoBERTa model)"),R9o=l(),r2=a("li"),Sme=a("strong"),P9o=o("roformer"),B9o=o(" \u2014 "),kG=a("a"),I9o=o("RoFormerForCausalLM"),N9o=o(" (RoFormer model)"),q9o=l(),t2=a("li"),Rme=a("strong"),j9o=o("speech_to_text_2"),D9o=o(" \u2014 "),SG=a("a"),G9o=o("Speech2Text2ForCausalLM"),O9o=o(" (Speech2Text2 model)"),V9o=l(),a2=a("li"),Pme=a("strong"),X9o=o("transfo-xl"),z9o=o(" \u2014 "),RG=a("a"),W9o=o("TransfoXLLMHeadModel"),Q9o=o(" (Transformer-XL model)"),H9o=l(),n2=a("li"),Bme=a("strong"),U9o=o("trocr"),J9o=o(" \u2014 "),PG=a("a"),Y9o=o("TrOCRForCausalLM"),K9o=o(" (TrOCR model)"),Z9o=l(),s2=a("li"),Ime=a("strong"),exo=o("xglm"),oxo=o(" \u2014 "),BG=a("a"),rxo=o("XGLMForCausalLM"),txo=o(" (XGLM model)"),axo=l(),l2=a("li"),Nme=a("strong"),nxo=o("xlm"),sxo=o(" \u2014 "),IG=a("a"),lxo=o("XLMWithLMHeadModel"),ixo=o(" (XLM model)"),dxo=l(),i2=a("li"),qme=a("strong"),cxo=o("xlm-prophetnet"),fxo=o(" \u2014 "),NG=a("a"),mxo=o("XLMProphetNetForCausalLM"),gxo=o(" (XLM-ProphetNet model)"),hxo=l(),d2=a("li"),jme=a("strong"),pxo=o("xlm-roberta"),_xo=o(" \u2014 "),qG=a("a"),uxo=o("XLMRobertaForCausalLM"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),c2=a("li"),Dme=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),jG=a("a"),Mxo=o("XLMRobertaXLForCausalLM"),Exo=o(" (XLM-RoBERTa-XL model)"),Cxo=l(),f2=a("li"),Gme=a("strong"),wxo=o("xlnet"),Axo=o(" \u2014 "),DG=a("a"),Lxo=o("XLNetLMHeadModel"),yxo=o(" (XLNet model)"),xxo=l(),m2=a("p"),$xo=o("The model is set in evaluation mode by default using "),Ome=a("code"),kxo=o("model.eval()"),Sxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),Rxo=o("model.train()"),Pxo=l(),F(g2.$$.fragment),gOe=l(),Wi=a("h2"),h2=a("a"),Xme=a("span"),F(bL.$$.fragment),Bxo=l(),zme=a("span"),Ixo=o("AutoModelForMaskedLM"),hOe=l(),So=a("div"),F(vL.$$.fragment),Nxo=l(),Qi=a("p"),qxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GG=a("a"),jxo=o("from_pretrained()"),Dxo=o(" class method or the "),OG=a("a"),Gxo=o("from_config()"),Oxo=o(` class
method.`),Vxo=l(),FL=a("p"),Xxo=o("This class cannot be instantiated directly using "),Wme=a("code"),zxo=o("__init__()"),Wxo=o(" (throws an error)."),Qxo=l(),dt=a("div"),F(TL.$$.fragment),Hxo=l(),Qme=a("p"),Uxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jxo=l(),Hi=a("p"),Yxo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),Kxo=o("not"),Zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),e$o=o("from_pretrained()"),o$o=o(" to load the model weights."),r$o=l(),F(p2.$$.fragment),t$o=l(),Ze=a("div"),F(ML.$$.fragment),a$o=l(),Ume=a("p"),n$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s$o=l(),Na=a("p"),l$o=o("The model class to instantiate is selected based on the "),Jme=a("code"),i$o=o("model_type"),d$o=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),c$o=o("pretrained_model_name_or_path"),f$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(":"),h$o=l(),W=a("ul"),_2=a("li"),Zme=a("strong"),p$o=o("albert"),_$o=o(" \u2014 "),XG=a("a"),u$o=o("AlbertForMaskedLM"),b$o=o(" (ALBERT model)"),v$o=l(),u2=a("li"),ege=a("strong"),F$o=o("bart"),T$o=o(" \u2014 "),zG=a("a"),M$o=o("BartForConditionalGeneration"),E$o=o(" (BART model)"),C$o=l(),b2=a("li"),oge=a("strong"),w$o=o("bert"),A$o=o(" \u2014 "),WG=a("a"),L$o=o("BertForMaskedLM"),y$o=o(" (BERT model)"),x$o=l(),v2=a("li"),rge=a("strong"),$$o=o("big_bird"),k$o=o(" \u2014 "),QG=a("a"),S$o=o("BigBirdForMaskedLM"),R$o=o(" (BigBird model)"),P$o=l(),F2=a("li"),tge=a("strong"),B$o=o("camembert"),I$o=o(" \u2014 "),HG=a("a"),N$o=o("CamembertForMaskedLM"),q$o=o(" (CamemBERT model)"),j$o=l(),T2=a("li"),age=a("strong"),D$o=o("convbert"),G$o=o(" \u2014 "),UG=a("a"),O$o=o("ConvBertForMaskedLM"),V$o=o(" (ConvBERT model)"),X$o=l(),M2=a("li"),nge=a("strong"),z$o=o("data2vec-text"),W$o=o(" \u2014 "),JG=a("a"),Q$o=o("Data2VecTextForMaskedLM"),H$o=o(" (Data2VecText model)"),U$o=l(),E2=a("li"),sge=a("strong"),J$o=o("deberta"),Y$o=o(" \u2014 "),YG=a("a"),K$o=o("DebertaForMaskedLM"),Z$o=o(" (DeBERTa model)"),eko=l(),C2=a("li"),lge=a("strong"),oko=o("deberta-v2"),rko=o(" \u2014 "),KG=a("a"),tko=o("DebertaV2ForMaskedLM"),ako=o(" (DeBERTa-v2 model)"),nko=l(),w2=a("li"),ige=a("strong"),sko=o("distilbert"),lko=o(" \u2014 "),ZG=a("a"),iko=o("DistilBertForMaskedLM"),dko=o(" (DistilBERT model)"),cko=l(),A2=a("li"),dge=a("strong"),fko=o("electra"),mko=o(" \u2014 "),eO=a("a"),gko=o("ElectraForMaskedLM"),hko=o(" (ELECTRA model)"),pko=l(),L2=a("li"),cge=a("strong"),_ko=o("flaubert"),uko=o(" \u2014 "),oO=a("a"),bko=o("FlaubertWithLMHeadModel"),vko=o(" (FlauBERT model)"),Fko=l(),y2=a("li"),fge=a("strong"),Tko=o("fnet"),Mko=o(" \u2014 "),rO=a("a"),Eko=o("FNetForMaskedLM"),Cko=o(" (FNet model)"),wko=l(),x2=a("li"),mge=a("strong"),Ako=o("funnel"),Lko=o(" \u2014 "),tO=a("a"),yko=o("FunnelForMaskedLM"),xko=o(" (Funnel Transformer model)"),$ko=l(),$2=a("li"),gge=a("strong"),kko=o("ibert"),Sko=o(" \u2014 "),aO=a("a"),Rko=o("IBertForMaskedLM"),Pko=o(" (I-BERT model)"),Bko=l(),k2=a("li"),hge=a("strong"),Iko=o("layoutlm"),Nko=o(" \u2014 "),nO=a("a"),qko=o("LayoutLMForMaskedLM"),jko=o(" (LayoutLM model)"),Dko=l(),S2=a("li"),pge=a("strong"),Gko=o("longformer"),Oko=o(" \u2014 "),sO=a("a"),Vko=o("LongformerForMaskedLM"),Xko=o(" (Longformer model)"),zko=l(),R2=a("li"),_ge=a("strong"),Wko=o("luke"),Qko=o(" \u2014 "),lO=a("a"),Hko=o("LukeForMaskedLM"),Uko=o(" (LUKE model)"),Jko=l(),P2=a("li"),uge=a("strong"),Yko=o("mbart"),Kko=o(" \u2014 "),iO=a("a"),Zko=o("MBartForConditionalGeneration"),eSo=o(" (mBART model)"),oSo=l(),B2=a("li"),bge=a("strong"),rSo=o("megatron-bert"),tSo=o(" \u2014 "),dO=a("a"),aSo=o("MegatronBertForMaskedLM"),nSo=o(" (Megatron-BERT model)"),sSo=l(),I2=a("li"),vge=a("strong"),lSo=o("mobilebert"),iSo=o(" \u2014 "),cO=a("a"),dSo=o("MobileBertForMaskedLM"),cSo=o(" (MobileBERT model)"),fSo=l(),N2=a("li"),Fge=a("strong"),mSo=o("mpnet"),gSo=o(" \u2014 "),fO=a("a"),hSo=o("MPNetForMaskedLM"),pSo=o(" (MPNet model)"),_So=l(),q2=a("li"),Tge=a("strong"),uSo=o("nezha"),bSo=o(" \u2014 "),mO=a("a"),vSo=o("NezhaForMaskedLM"),FSo=o(" (Nezha model)"),TSo=l(),j2=a("li"),Mge=a("strong"),MSo=o("nystromformer"),ESo=o(" \u2014 "),gO=a("a"),CSo=o("NystromformerForMaskedLM"),wSo=o(" (Nystr\xF6mformer model)"),ASo=l(),D2=a("li"),Ege=a("strong"),LSo=o("perceiver"),ySo=o(" \u2014 "),hO=a("a"),xSo=o("PerceiverForMaskedLM"),$So=o(" (Perceiver model)"),kSo=l(),G2=a("li"),Cge=a("strong"),SSo=o("qdqbert"),RSo=o(" \u2014 "),pO=a("a"),PSo=o("QDQBertForMaskedLM"),BSo=o(" (QDQBert model)"),ISo=l(),O2=a("li"),wge=a("strong"),NSo=o("reformer"),qSo=o(" \u2014 "),_O=a("a"),jSo=o("ReformerForMaskedLM"),DSo=o(" (Reformer model)"),GSo=l(),V2=a("li"),Age=a("strong"),OSo=o("rembert"),VSo=o(" \u2014 "),uO=a("a"),XSo=o("RemBertForMaskedLM"),zSo=o(" (RemBERT model)"),WSo=l(),X2=a("li"),Lge=a("strong"),QSo=o("roberta"),HSo=o(" \u2014 "),bO=a("a"),USo=o("RobertaForMaskedLM"),JSo=o(" (RoBERTa model)"),YSo=l(),z2=a("li"),yge=a("strong"),KSo=o("roformer"),ZSo=o(" \u2014 "),vO=a("a"),eRo=o("RoFormerForMaskedLM"),oRo=o(" (RoFormer model)"),rRo=l(),W2=a("li"),xge=a("strong"),tRo=o("squeezebert"),aRo=o(" \u2014 "),FO=a("a"),nRo=o("SqueezeBertForMaskedLM"),sRo=o(" (SqueezeBERT model)"),lRo=l(),Q2=a("li"),$ge=a("strong"),iRo=o("tapas"),dRo=o(" \u2014 "),TO=a("a"),cRo=o("TapasForMaskedLM"),fRo=o(" (TAPAS model)"),mRo=l(),H2=a("li"),kge=a("strong"),gRo=o("wav2vec2"),hRo=o(" \u2014 "),Sge=a("code"),pRo=o("Wav2Vec2ForMaskedLM"),_Ro=o(" (Wav2Vec2 model)"),uRo=l(),U2=a("li"),Rge=a("strong"),bRo=o("xlm"),vRo=o(" \u2014 "),MO=a("a"),FRo=o("XLMWithLMHeadModel"),TRo=o(" (XLM model)"),MRo=l(),J2=a("li"),Pge=a("strong"),ERo=o("xlm-roberta"),CRo=o(" \u2014 "),EO=a("a"),wRo=o("XLMRobertaForMaskedLM"),ARo=o(" (XLM-RoBERTa model)"),LRo=l(),Y2=a("li"),Bge=a("strong"),yRo=o("xlm-roberta-xl"),xRo=o(" \u2014 "),CO=a("a"),$Ro=o("XLMRobertaXLForMaskedLM"),kRo=o(" (XLM-RoBERTa-XL model)"),SRo=l(),K2=a("li"),Ige=a("strong"),RRo=o("yoso"),PRo=o(" \u2014 "),wO=a("a"),BRo=o("YosoForMaskedLM"),IRo=o(" (YOSO model)"),NRo=l(),Z2=a("p"),qRo=o("The model is set in evaluation mode by default using "),Nge=a("code"),jRo=o("model.eval()"),DRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),GRo=o("model.train()"),ORo=l(),F(eb.$$.fragment),pOe=l(),Ui=a("h2"),ob=a("a"),jge=a("span"),F(EL.$$.fragment),VRo=l(),Dge=a("span"),XRo=o("AutoModelForSeq2SeqLM"),_Oe=l(),Ro=a("div"),F(CL.$$.fragment),zRo=l(),Ji=a("p"),WRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AO=a("a"),QRo=o("from_pretrained()"),HRo=o(" class method or the "),LO=a("a"),URo=o("from_config()"),JRo=o(` class
method.`),YRo=l(),wL=a("p"),KRo=o("This class cannot be instantiated directly using "),Gge=a("code"),ZRo=o("__init__()"),ePo=o(" (throws an error)."),oPo=l(),ct=a("div"),F(AL.$$.fragment),rPo=l(),Oge=a("p"),tPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aPo=l(),Yi=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),sPo=o("not"),lPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),iPo=o("from_pretrained()"),dPo=o(" to load the model weights."),cPo=l(),F(rb.$$.fragment),fPo=l(),eo=a("div"),F(LL.$$.fragment),mPo=l(),Xge=a("p"),gPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hPo=l(),qa=a("p"),pPo=o("The model class to instantiate is selected based on the "),zge=a("code"),_Po=o("model_type"),uPo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),bPo=o("pretrained_model_name_or_path"),vPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),FPo=o("pretrained_model_name_or_path"),TPo=o(":"),MPo=l(),pe=a("ul"),tb=a("li"),Hge=a("strong"),EPo=o("bart"),CPo=o(" \u2014 "),xO=a("a"),wPo=o("BartForConditionalGeneration"),APo=o(" (BART model)"),LPo=l(),ab=a("li"),Uge=a("strong"),yPo=o("bigbird_pegasus"),xPo=o(" \u2014 "),$O=a("a"),$Po=o("BigBirdPegasusForConditionalGeneration"),kPo=o(" (BigBird-Pegasus model)"),SPo=l(),nb=a("li"),Jge=a("strong"),RPo=o("blenderbot"),PPo=o(" \u2014 "),kO=a("a"),BPo=o("BlenderbotForConditionalGeneration"),IPo=o(" (Blenderbot model)"),NPo=l(),sb=a("li"),Yge=a("strong"),qPo=o("blenderbot-small"),jPo=o(" \u2014 "),SO=a("a"),DPo=o("BlenderbotSmallForConditionalGeneration"),GPo=o(" (BlenderbotSmall model)"),OPo=l(),lb=a("li"),Kge=a("strong"),VPo=o("encoder-decoder"),XPo=o(" \u2014 "),RO=a("a"),zPo=o("EncoderDecoderModel"),WPo=o(" (Encoder decoder model)"),QPo=l(),ib=a("li"),Zge=a("strong"),HPo=o("fsmt"),UPo=o(" \u2014 "),PO=a("a"),JPo=o("FSMTForConditionalGeneration"),YPo=o(" (FairSeq Machine-Translation model)"),KPo=l(),db=a("li"),ehe=a("strong"),ZPo=o("led"),eBo=o(" \u2014 "),BO=a("a"),oBo=o("LEDForConditionalGeneration"),rBo=o(" (LED model)"),tBo=l(),cb=a("li"),ohe=a("strong"),aBo=o("longt5"),nBo=o(" \u2014 "),IO=a("a"),sBo=o("LongT5ForConditionalGeneration"),lBo=o(" (LongT5 model)"),iBo=l(),fb=a("li"),rhe=a("strong"),dBo=o("m2m_100"),cBo=o(" \u2014 "),NO=a("a"),fBo=o("M2M100ForConditionalGeneration"),mBo=o(" (M2M100 model)"),gBo=l(),mb=a("li"),the=a("strong"),hBo=o("marian"),pBo=o(" \u2014 "),qO=a("a"),_Bo=o("MarianMTModel"),uBo=o(" (Marian model)"),bBo=l(),gb=a("li"),ahe=a("strong"),vBo=o("mbart"),FBo=o(" \u2014 "),jO=a("a"),TBo=o("MBartForConditionalGeneration"),MBo=o(" (mBART model)"),EBo=l(),hb=a("li"),nhe=a("strong"),CBo=o("mt5"),wBo=o(" \u2014 "),DO=a("a"),ABo=o("MT5ForConditionalGeneration"),LBo=o(" (MT5 model)"),yBo=l(),pb=a("li"),she=a("strong"),xBo=o("pegasus"),$Bo=o(" \u2014 "),GO=a("a"),kBo=o("PegasusForConditionalGeneration"),SBo=o(" (Pegasus model)"),RBo=l(),_b=a("li"),lhe=a("strong"),PBo=o("plbart"),BBo=o(" \u2014 "),OO=a("a"),IBo=o("PLBartForConditionalGeneration"),NBo=o(" (PLBart model)"),qBo=l(),ub=a("li"),ihe=a("strong"),jBo=o("prophetnet"),DBo=o(" \u2014 "),VO=a("a"),GBo=o("ProphetNetForConditionalGeneration"),OBo=o(" (ProphetNet model)"),VBo=l(),bb=a("li"),dhe=a("strong"),XBo=o("t5"),zBo=o(" \u2014 "),XO=a("a"),WBo=o("T5ForConditionalGeneration"),QBo=o(" (T5 model)"),HBo=l(),vb=a("li"),che=a("strong"),UBo=o("xlm-prophetnet"),JBo=o(" \u2014 "),zO=a("a"),YBo=o("XLMProphetNetForConditionalGeneration"),KBo=o(" (XLM-ProphetNet model)"),ZBo=l(),Fb=a("p"),eIo=o("The model is set in evaluation mode by default using "),fhe=a("code"),oIo=o("model.eval()"),rIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),tIo=o("model.train()"),aIo=l(),F(Tb.$$.fragment),uOe=l(),Ki=a("h2"),Mb=a("a"),ghe=a("span"),F(yL.$$.fragment),nIo=l(),hhe=a("span"),sIo=o("AutoModelForSequenceClassification"),bOe=l(),Po=a("div"),F(xL.$$.fragment),lIo=l(),Zi=a("p"),iIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WO=a("a"),dIo=o("from_pretrained()"),cIo=o(" class method or the "),QO=a("a"),fIo=o("from_config()"),mIo=o(` class
method.`),gIo=l(),$L=a("p"),hIo=o("This class cannot be instantiated directly using "),phe=a("code"),pIo=o("__init__()"),_Io=o(" (throws an error)."),uIo=l(),ft=a("div"),F(kL.$$.fragment),bIo=l(),_he=a("p"),vIo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FIo=l(),ed=a("p"),TIo=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),MIo=o("not"),EIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),CIo=o("from_pretrained()"),wIo=o(" to load the model weights."),AIo=l(),F(Eb.$$.fragment),LIo=l(),oo=a("div"),F(SL.$$.fragment),yIo=l(),bhe=a("p"),xIo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Io=l(),ja=a("p"),kIo=o("The model class to instantiate is selected based on the "),vhe=a("code"),SIo=o("model_type"),RIo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),PIo=o("pretrained_model_name_or_path"),BIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),IIo=o("pretrained_model_name_or_path"),NIo=o(":"),qIo=l(),N=a("ul"),Cb=a("li"),Mhe=a("strong"),jIo=o("albert"),DIo=o(" \u2014 "),UO=a("a"),GIo=o("AlbertForSequenceClassification"),OIo=o(" (ALBERT model)"),VIo=l(),wb=a("li"),Ehe=a("strong"),XIo=o("bart"),zIo=o(" \u2014 "),JO=a("a"),WIo=o("BartForSequenceClassification"),QIo=o(" (BART model)"),HIo=l(),Ab=a("li"),Che=a("strong"),UIo=o("bert"),JIo=o(" \u2014 "),YO=a("a"),YIo=o("BertForSequenceClassification"),KIo=o(" (BERT model)"),ZIo=l(),Lb=a("li"),whe=a("strong"),eNo=o("big_bird"),oNo=o(" \u2014 "),KO=a("a"),rNo=o("BigBirdForSequenceClassification"),tNo=o(" (BigBird model)"),aNo=l(),yb=a("li"),Ahe=a("strong"),nNo=o("bigbird_pegasus"),sNo=o(" \u2014 "),ZO=a("a"),lNo=o("BigBirdPegasusForSequenceClassification"),iNo=o(" (BigBird-Pegasus model)"),dNo=l(),xb=a("li"),Lhe=a("strong"),cNo=o("bloom"),fNo=o(" \u2014 "),eV=a("a"),mNo=o("BloomForSequenceClassification"),gNo=o(" (BLOOM model)"),hNo=l(),$b=a("li"),yhe=a("strong"),pNo=o("camembert"),_No=o(" \u2014 "),oV=a("a"),uNo=o("CamembertForSequenceClassification"),bNo=o(" (CamemBERT model)"),vNo=l(),kb=a("li"),xhe=a("strong"),FNo=o("canine"),TNo=o(" \u2014 "),rV=a("a"),MNo=o("CanineForSequenceClassification"),ENo=o(" (CANINE model)"),CNo=l(),Sb=a("li"),$he=a("strong"),wNo=o("convbert"),ANo=o(" \u2014 "),tV=a("a"),LNo=o("ConvBertForSequenceClassification"),yNo=o(" (ConvBERT model)"),xNo=l(),Rb=a("li"),khe=a("strong"),$No=o("ctrl"),kNo=o(" \u2014 "),aV=a("a"),SNo=o("CTRLForSequenceClassification"),RNo=o(" (CTRL model)"),PNo=l(),Pb=a("li"),She=a("strong"),BNo=o("data2vec-text"),INo=o(" \u2014 "),nV=a("a"),NNo=o("Data2VecTextForSequenceClassification"),qNo=o(" (Data2VecText model)"),jNo=l(),Bb=a("li"),Rhe=a("strong"),DNo=o("deberta"),GNo=o(" \u2014 "),sV=a("a"),ONo=o("DebertaForSequenceClassification"),VNo=o(" (DeBERTa model)"),XNo=l(),Ib=a("li"),Phe=a("strong"),zNo=o("deberta-v2"),WNo=o(" \u2014 "),lV=a("a"),QNo=o("DebertaV2ForSequenceClassification"),HNo=o(" (DeBERTa-v2 model)"),UNo=l(),Nb=a("li"),Bhe=a("strong"),JNo=o("distilbert"),YNo=o(" \u2014 "),iV=a("a"),KNo=o("DistilBertForSequenceClassification"),ZNo=o(" (DistilBERT model)"),eqo=l(),qb=a("li"),Ihe=a("strong"),oqo=o("electra"),rqo=o(" \u2014 "),dV=a("a"),tqo=o("ElectraForSequenceClassification"),aqo=o(" (ELECTRA model)"),nqo=l(),jb=a("li"),Nhe=a("strong"),sqo=o("flaubert"),lqo=o(" \u2014 "),cV=a("a"),iqo=o("FlaubertForSequenceClassification"),dqo=o(" (FlauBERT model)"),cqo=l(),Db=a("li"),qhe=a("strong"),fqo=o("fnet"),mqo=o(" \u2014 "),fV=a("a"),gqo=o("FNetForSequenceClassification"),hqo=o(" (FNet model)"),pqo=l(),Gb=a("li"),jhe=a("strong"),_qo=o("funnel"),uqo=o(" \u2014 "),mV=a("a"),bqo=o("FunnelForSequenceClassification"),vqo=o(" (Funnel Transformer model)"),Fqo=l(),Ob=a("li"),Dhe=a("strong"),Tqo=o("gpt2"),Mqo=o(" \u2014 "),gV=a("a"),Eqo=o("GPT2ForSequenceClassification"),Cqo=o(" (OpenAI GPT-2 model)"),wqo=l(),Vb=a("li"),Ghe=a("strong"),Aqo=o("gpt_neo"),Lqo=o(" \u2014 "),hV=a("a"),yqo=o("GPTNeoForSequenceClassification"),xqo=o(" (GPT Neo model)"),$qo=l(),Xb=a("li"),Ohe=a("strong"),kqo=o("gptj"),Sqo=o(" \u2014 "),pV=a("a"),Rqo=o("GPTJForSequenceClassification"),Pqo=o(" (GPT-J model)"),Bqo=l(),zb=a("li"),Vhe=a("strong"),Iqo=o("ibert"),Nqo=o(" \u2014 "),_V=a("a"),qqo=o("IBertForSequenceClassification"),jqo=o(" (I-BERT model)"),Dqo=l(),Wb=a("li"),Xhe=a("strong"),Gqo=o("layoutlm"),Oqo=o(" \u2014 "),uV=a("a"),Vqo=o("LayoutLMForSequenceClassification"),Xqo=o(" (LayoutLM model)"),zqo=l(),Qb=a("li"),zhe=a("strong"),Wqo=o("layoutlmv2"),Qqo=o(" \u2014 "),bV=a("a"),Hqo=o("LayoutLMv2ForSequenceClassification"),Uqo=o(" (LayoutLMv2 model)"),Jqo=l(),Hb=a("li"),Whe=a("strong"),Yqo=o("layoutlmv3"),Kqo=o(" \u2014 "),vV=a("a"),Zqo=o("LayoutLMv3ForSequenceClassification"),ejo=o(" (LayoutLMv3 model)"),ojo=l(),Ub=a("li"),Qhe=a("strong"),rjo=o("led"),tjo=o(" \u2014 "),FV=a("a"),ajo=o("LEDForSequenceClassification"),njo=o(" (LED model)"),sjo=l(),Jb=a("li"),Hhe=a("strong"),ljo=o("longformer"),ijo=o(" \u2014 "),TV=a("a"),djo=o("LongformerForSequenceClassification"),cjo=o(" (Longformer model)"),fjo=l(),Yb=a("li"),Uhe=a("strong"),mjo=o("mbart"),gjo=o(" \u2014 "),MV=a("a"),hjo=o("MBartForSequenceClassification"),pjo=o(" (mBART model)"),_jo=l(),Kb=a("li"),Jhe=a("strong"),ujo=o("megatron-bert"),bjo=o(" \u2014 "),EV=a("a"),vjo=o("MegatronBertForSequenceClassification"),Fjo=o(" (Megatron-BERT model)"),Tjo=l(),Zb=a("li"),Yhe=a("strong"),Mjo=o("mobilebert"),Ejo=o(" \u2014 "),CV=a("a"),Cjo=o("MobileBertForSequenceClassification"),wjo=o(" (MobileBERT model)"),Ajo=l(),ev=a("li"),Khe=a("strong"),Ljo=o("mpnet"),yjo=o(" \u2014 "),wV=a("a"),xjo=o("MPNetForSequenceClassification"),$jo=o(" (MPNet model)"),kjo=l(),ov=a("li"),Zhe=a("strong"),Sjo=o("nezha"),Rjo=o(" \u2014 "),AV=a("a"),Pjo=o("NezhaForSequenceClassification"),Bjo=o(" (Nezha model)"),Ijo=l(),rv=a("li"),epe=a("strong"),Njo=o("nystromformer"),qjo=o(" \u2014 "),LV=a("a"),jjo=o("NystromformerForSequenceClassification"),Djo=o(" (Nystr\xF6mformer model)"),Gjo=l(),tv=a("li"),ope=a("strong"),Ojo=o("openai-gpt"),Vjo=o(" \u2014 "),yV=a("a"),Xjo=o("OpenAIGPTForSequenceClassification"),zjo=o(" (OpenAI GPT model)"),Wjo=l(),av=a("li"),rpe=a("strong"),Qjo=o("perceiver"),Hjo=o(" \u2014 "),xV=a("a"),Ujo=o("PerceiverForSequenceClassification"),Jjo=o(" (Perceiver model)"),Yjo=l(),nv=a("li"),tpe=a("strong"),Kjo=o("plbart"),Zjo=o(" \u2014 "),$V=a("a"),eDo=o("PLBartForSequenceClassification"),oDo=o(" (PLBart model)"),rDo=l(),sv=a("li"),ape=a("strong"),tDo=o("qdqbert"),aDo=o(" \u2014 "),kV=a("a"),nDo=o("QDQBertForSequenceClassification"),sDo=o(" (QDQBert model)"),lDo=l(),lv=a("li"),npe=a("strong"),iDo=o("reformer"),dDo=o(" \u2014 "),SV=a("a"),cDo=o("ReformerForSequenceClassification"),fDo=o(" (Reformer model)"),mDo=l(),iv=a("li"),spe=a("strong"),gDo=o("rembert"),hDo=o(" \u2014 "),RV=a("a"),pDo=o("RemBertForSequenceClassification"),_Do=o(" (RemBERT model)"),uDo=l(),dv=a("li"),lpe=a("strong"),bDo=o("roberta"),vDo=o(" \u2014 "),PV=a("a"),FDo=o("RobertaForSequenceClassification"),TDo=o(" (RoBERTa model)"),MDo=l(),cv=a("li"),ipe=a("strong"),EDo=o("roformer"),CDo=o(" \u2014 "),BV=a("a"),wDo=o("RoFormerForSequenceClassification"),ADo=o(" (RoFormer model)"),LDo=l(),fv=a("li"),dpe=a("strong"),yDo=o("squeezebert"),xDo=o(" \u2014 "),IV=a("a"),$Do=o("SqueezeBertForSequenceClassification"),kDo=o(" (SqueezeBERT model)"),SDo=l(),mv=a("li"),cpe=a("strong"),RDo=o("tapas"),PDo=o(" \u2014 "),NV=a("a"),BDo=o("TapasForSequenceClassification"),IDo=o(" (TAPAS model)"),NDo=l(),gv=a("li"),fpe=a("strong"),qDo=o("transfo-xl"),jDo=o(" \u2014 "),qV=a("a"),DDo=o("TransfoXLForSequenceClassification"),GDo=o(" (Transformer-XL model)"),ODo=l(),hv=a("li"),mpe=a("strong"),VDo=o("xlm"),XDo=o(" \u2014 "),jV=a("a"),zDo=o("XLMForSequenceClassification"),WDo=o(" (XLM model)"),QDo=l(),pv=a("li"),gpe=a("strong"),HDo=o("xlm-roberta"),UDo=o(" \u2014 "),DV=a("a"),JDo=o("XLMRobertaForSequenceClassification"),YDo=o(" (XLM-RoBERTa model)"),KDo=l(),_v=a("li"),hpe=a("strong"),ZDo=o("xlm-roberta-xl"),eGo=o(" \u2014 "),GV=a("a"),oGo=o("XLMRobertaXLForSequenceClassification"),rGo=o(" (XLM-RoBERTa-XL model)"),tGo=l(),uv=a("li"),ppe=a("strong"),aGo=o("xlnet"),nGo=o(" \u2014 "),OV=a("a"),sGo=o("XLNetForSequenceClassification"),lGo=o(" (XLNet model)"),iGo=l(),bv=a("li"),_pe=a("strong"),dGo=o("yoso"),cGo=o(" \u2014 "),VV=a("a"),fGo=o("YosoForSequenceClassification"),mGo=o(" (YOSO model)"),gGo=l(),vv=a("p"),hGo=o("The model is set in evaluation mode by default using "),upe=a("code"),pGo=o("model.eval()"),_Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),uGo=o("model.train()"),bGo=l(),F(Fv.$$.fragment),vOe=l(),od=a("h2"),Tv=a("a"),vpe=a("span"),F(RL.$$.fragment),vGo=l(),Fpe=a("span"),FGo=o("AutoModelForMultipleChoice"),FOe=l(),Bo=a("div"),F(PL.$$.fragment),TGo=l(),rd=a("p"),MGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XV=a("a"),EGo=o("from_pretrained()"),CGo=o(" class method or the "),zV=a("a"),wGo=o("from_config()"),AGo=o(` class
method.`),LGo=l(),BL=a("p"),yGo=o("This class cannot be instantiated directly using "),Tpe=a("code"),xGo=o("__init__()"),$Go=o(" (throws an error)."),kGo=l(),mt=a("div"),F(IL.$$.fragment),SGo=l(),Mpe=a("p"),RGo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PGo=l(),td=a("p"),BGo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),IGo=o("not"),NGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),qGo=o("from_pretrained()"),jGo=o(" to load the model weights."),DGo=l(),F(Mv.$$.fragment),GGo=l(),ro=a("div"),F(NL.$$.fragment),OGo=l(),Cpe=a("p"),VGo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XGo=l(),Da=a("p"),zGo=o("The model class to instantiate is selected based on the "),wpe=a("code"),WGo=o("model_type"),QGo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(":"),KGo=l(),Z=a("ul"),Ev=a("li"),ype=a("strong"),ZGo=o("albert"),eOo=o(" \u2014 "),QV=a("a"),oOo=o("AlbertForMultipleChoice"),rOo=o(" (ALBERT model)"),tOo=l(),Cv=a("li"),xpe=a("strong"),aOo=o("bert"),nOo=o(" \u2014 "),HV=a("a"),sOo=o("BertForMultipleChoice"),lOo=o(" (BERT model)"),iOo=l(),wv=a("li"),$pe=a("strong"),dOo=o("big_bird"),cOo=o(" \u2014 "),UV=a("a"),fOo=o("BigBirdForMultipleChoice"),mOo=o(" (BigBird model)"),gOo=l(),Av=a("li"),kpe=a("strong"),hOo=o("camembert"),pOo=o(" \u2014 "),JV=a("a"),_Oo=o("CamembertForMultipleChoice"),uOo=o(" (CamemBERT model)"),bOo=l(),Lv=a("li"),Spe=a("strong"),vOo=o("canine"),FOo=o(" \u2014 "),YV=a("a"),TOo=o("CanineForMultipleChoice"),MOo=o(" (CANINE model)"),EOo=l(),yv=a("li"),Rpe=a("strong"),COo=o("convbert"),wOo=o(" \u2014 "),KV=a("a"),AOo=o("ConvBertForMultipleChoice"),LOo=o(" (ConvBERT model)"),yOo=l(),xv=a("li"),Ppe=a("strong"),xOo=o("data2vec-text"),$Oo=o(" \u2014 "),ZV=a("a"),kOo=o("Data2VecTextForMultipleChoice"),SOo=o(" (Data2VecText model)"),ROo=l(),$v=a("li"),Bpe=a("strong"),POo=o("deberta-v2"),BOo=o(" \u2014 "),eX=a("a"),IOo=o("DebertaV2ForMultipleChoice"),NOo=o(" (DeBERTa-v2 model)"),qOo=l(),kv=a("li"),Ipe=a("strong"),jOo=o("distilbert"),DOo=o(" \u2014 "),oX=a("a"),GOo=o("DistilBertForMultipleChoice"),OOo=o(" (DistilBERT model)"),VOo=l(),Sv=a("li"),Npe=a("strong"),XOo=o("electra"),zOo=o(" \u2014 "),rX=a("a"),WOo=o("ElectraForMultipleChoice"),QOo=o(" (ELECTRA model)"),HOo=l(),Rv=a("li"),qpe=a("strong"),UOo=o("flaubert"),JOo=o(" \u2014 "),tX=a("a"),YOo=o("FlaubertForMultipleChoice"),KOo=o(" (FlauBERT model)"),ZOo=l(),Pv=a("li"),jpe=a("strong"),eVo=o("fnet"),oVo=o(" \u2014 "),aX=a("a"),rVo=o("FNetForMultipleChoice"),tVo=o(" (FNet model)"),aVo=l(),Bv=a("li"),Dpe=a("strong"),nVo=o("funnel"),sVo=o(" \u2014 "),nX=a("a"),lVo=o("FunnelForMultipleChoice"),iVo=o(" (Funnel Transformer model)"),dVo=l(),Iv=a("li"),Gpe=a("strong"),cVo=o("ibert"),fVo=o(" \u2014 "),sX=a("a"),mVo=o("IBertForMultipleChoice"),gVo=o(" (I-BERT model)"),hVo=l(),Nv=a("li"),Ope=a("strong"),pVo=o("longformer"),_Vo=o(" \u2014 "),lX=a("a"),uVo=o("LongformerForMultipleChoice"),bVo=o(" (Longformer model)"),vVo=l(),qv=a("li"),Vpe=a("strong"),FVo=o("megatron-bert"),TVo=o(" \u2014 "),iX=a("a"),MVo=o("MegatronBertForMultipleChoice"),EVo=o(" (Megatron-BERT model)"),CVo=l(),jv=a("li"),Xpe=a("strong"),wVo=o("mobilebert"),AVo=o(" \u2014 "),dX=a("a"),LVo=o("MobileBertForMultipleChoice"),yVo=o(" (MobileBERT model)"),xVo=l(),Dv=a("li"),zpe=a("strong"),$Vo=o("mpnet"),kVo=o(" \u2014 "),cX=a("a"),SVo=o("MPNetForMultipleChoice"),RVo=o(" (MPNet model)"),PVo=l(),Gv=a("li"),Wpe=a("strong"),BVo=o("nezha"),IVo=o(" \u2014 "),fX=a("a"),NVo=o("NezhaForMultipleChoice"),qVo=o(" (Nezha model)"),jVo=l(),Ov=a("li"),Qpe=a("strong"),DVo=o("nystromformer"),GVo=o(" \u2014 "),mX=a("a"),OVo=o("NystromformerForMultipleChoice"),VVo=o(" (Nystr\xF6mformer model)"),XVo=l(),Vv=a("li"),Hpe=a("strong"),zVo=o("qdqbert"),WVo=o(" \u2014 "),gX=a("a"),QVo=o("QDQBertForMultipleChoice"),HVo=o(" (QDQBert model)"),UVo=l(),Xv=a("li"),Upe=a("strong"),JVo=o("rembert"),YVo=o(" \u2014 "),hX=a("a"),KVo=o("RemBertForMultipleChoice"),ZVo=o(" (RemBERT model)"),eXo=l(),zv=a("li"),Jpe=a("strong"),oXo=o("roberta"),rXo=o(" \u2014 "),pX=a("a"),tXo=o("RobertaForMultipleChoice"),aXo=o(" (RoBERTa model)"),nXo=l(),Wv=a("li"),Ype=a("strong"),sXo=o("roformer"),lXo=o(" \u2014 "),_X=a("a"),iXo=o("RoFormerForMultipleChoice"),dXo=o(" (RoFormer model)"),cXo=l(),Qv=a("li"),Kpe=a("strong"),fXo=o("squeezebert"),mXo=o(" \u2014 "),uX=a("a"),gXo=o("SqueezeBertForMultipleChoice"),hXo=o(" (SqueezeBERT model)"),pXo=l(),Hv=a("li"),Zpe=a("strong"),_Xo=o("xlm"),uXo=o(" \u2014 "),bX=a("a"),bXo=o("XLMForMultipleChoice"),vXo=o(" (XLM model)"),FXo=l(),Uv=a("li"),e_e=a("strong"),TXo=o("xlm-roberta"),MXo=o(" \u2014 "),vX=a("a"),EXo=o("XLMRobertaForMultipleChoice"),CXo=o(" (XLM-RoBERTa model)"),wXo=l(),Jv=a("li"),o_e=a("strong"),AXo=o("xlm-roberta-xl"),LXo=o(" \u2014 "),FX=a("a"),yXo=o("XLMRobertaXLForMultipleChoice"),xXo=o(" (XLM-RoBERTa-XL model)"),$Xo=l(),Yv=a("li"),r_e=a("strong"),kXo=o("xlnet"),SXo=o(" \u2014 "),TX=a("a"),RXo=o("XLNetForMultipleChoice"),PXo=o(" (XLNet model)"),BXo=l(),Kv=a("li"),t_e=a("strong"),IXo=o("yoso"),NXo=o(" \u2014 "),MX=a("a"),qXo=o("YosoForMultipleChoice"),jXo=o(" (YOSO model)"),DXo=l(),Zv=a("p"),GXo=o("The model is set in evaluation mode by default using "),a_e=a("code"),OXo=o("model.eval()"),VXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),XXo=o("model.train()"),zXo=l(),F(e0.$$.fragment),TOe=l(),ad=a("h2"),o0=a("a"),s_e=a("span"),F(qL.$$.fragment),WXo=l(),l_e=a("span"),QXo=o("AutoModelForNextSentencePrediction"),MOe=l(),Io=a("div"),F(jL.$$.fragment),HXo=l(),nd=a("p"),UXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EX=a("a"),JXo=o("from_pretrained()"),YXo=o(" class method or the "),CX=a("a"),KXo=o("from_config()"),ZXo=o(` class
method.`),ezo=l(),DL=a("p"),ozo=o("This class cannot be instantiated directly using "),i_e=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),gt=a("div"),F(GL.$$.fragment),nzo=l(),d_e=a("p"),szo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lzo=l(),sd=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),fzo=o("from_pretrained()"),mzo=o(" to load the model weights."),gzo=l(),F(r0.$$.fragment),hzo=l(),to=a("div"),F(OL.$$.fragment),pzo=l(),f_e=a("p"),_zo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uzo=l(),Ga=a("p"),bzo=o("The model class to instantiate is selected based on the "),m_e=a("code"),vzo=o("model_type"),Fzo=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),Tzo=o("pretrained_model_name_or_path"),Mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Ezo=o("pretrained_model_name_or_path"),Czo=o(":"),wzo=l(),No=a("ul"),t0=a("li"),p_e=a("strong"),Azo=o("bert"),Lzo=o(" \u2014 "),AX=a("a"),yzo=o("BertForNextSentencePrediction"),xzo=o(" (BERT model)"),$zo=l(),a0=a("li"),__e=a("strong"),kzo=o("fnet"),Szo=o(" \u2014 "),LX=a("a"),Rzo=o("FNetForNextSentencePrediction"),Pzo=o(" (FNet model)"),Bzo=l(),n0=a("li"),u_e=a("strong"),Izo=o("megatron-bert"),Nzo=o(" \u2014 "),yX=a("a"),qzo=o("MegatronBertForNextSentencePrediction"),jzo=o(" (Megatron-BERT model)"),Dzo=l(),s0=a("li"),b_e=a("strong"),Gzo=o("mobilebert"),Ozo=o(" \u2014 "),xX=a("a"),Vzo=o("MobileBertForNextSentencePrediction"),Xzo=o(" (MobileBERT model)"),zzo=l(),l0=a("li"),v_e=a("strong"),Wzo=o("nezha"),Qzo=o(" \u2014 "),$X=a("a"),Hzo=o("NezhaForNextSentencePrediction"),Uzo=o(" (Nezha model)"),Jzo=l(),i0=a("li"),F_e=a("strong"),Yzo=o("qdqbert"),Kzo=o(" \u2014 "),kX=a("a"),Zzo=o("QDQBertForNextSentencePrediction"),eWo=o(" (QDQBert model)"),oWo=l(),d0=a("p"),rWo=o("The model is set in evaluation mode by default using "),T_e=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),nWo=o("model.train()"),sWo=l(),F(c0.$$.fragment),EOe=l(),ld=a("h2"),f0=a("a"),E_e=a("span"),F(VL.$$.fragment),lWo=l(),C_e=a("span"),iWo=o("AutoModelForTokenClassification"),COe=l(),qo=a("div"),F(XL.$$.fragment),dWo=l(),id=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SX=a("a"),fWo=o("from_pretrained()"),mWo=o(" class method or the "),RX=a("a"),gWo=o("from_config()"),hWo=o(` class
method.`),pWo=l(),zL=a("p"),_Wo=o("This class cannot be instantiated directly using "),w_e=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),ht=a("div"),F(WL.$$.fragment),FWo=l(),A_e=a("p"),TWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MWo=l(),dd=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),CWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),AWo=o("from_pretrained()"),LWo=o(" to load the model weights."),yWo=l(),F(m0.$$.fragment),xWo=l(),ao=a("div"),F(QL.$$.fragment),$Wo=l(),y_e=a("p"),kWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SWo=l(),Oa=a("p"),RWo=o("The model class to instantiate is selected based on the "),x_e=a("code"),PWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),IWo=o("pretrained_model_name_or_path"),NWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),qWo=o("pretrained_model_name_or_path"),jWo=o(":"),DWo=l(),H=a("ul"),g0=a("li"),S_e=a("strong"),GWo=o("albert"),OWo=o(" \u2014 "),BX=a("a"),VWo=o("AlbertForTokenClassification"),XWo=o(" (ALBERT model)"),zWo=l(),h0=a("li"),R_e=a("strong"),WWo=o("bert"),QWo=o(" \u2014 "),IX=a("a"),HWo=o("BertForTokenClassification"),UWo=o(" (BERT model)"),JWo=l(),p0=a("li"),P_e=a("strong"),YWo=o("big_bird"),KWo=o(" \u2014 "),NX=a("a"),ZWo=o("BigBirdForTokenClassification"),eQo=o(" (BigBird model)"),oQo=l(),_0=a("li"),B_e=a("strong"),rQo=o("bloom"),tQo=o(" \u2014 "),qX=a("a"),aQo=o("BloomForTokenClassification"),nQo=o(" (BLOOM model)"),sQo=l(),u0=a("li"),I_e=a("strong"),lQo=o("camembert"),iQo=o(" \u2014 "),jX=a("a"),dQo=o("CamembertForTokenClassification"),cQo=o(" (CamemBERT model)"),fQo=l(),b0=a("li"),N_e=a("strong"),mQo=o("canine"),gQo=o(" \u2014 "),DX=a("a"),hQo=o("CanineForTokenClassification"),pQo=o(" (CANINE model)"),_Qo=l(),v0=a("li"),q_e=a("strong"),uQo=o("convbert"),bQo=o(" \u2014 "),GX=a("a"),vQo=o("ConvBertForTokenClassification"),FQo=o(" (ConvBERT model)"),TQo=l(),F0=a("li"),j_e=a("strong"),MQo=o("data2vec-text"),EQo=o(" \u2014 "),OX=a("a"),CQo=o("Data2VecTextForTokenClassification"),wQo=o(" (Data2VecText model)"),AQo=l(),T0=a("li"),D_e=a("strong"),LQo=o("deberta"),yQo=o(" \u2014 "),VX=a("a"),xQo=o("DebertaForTokenClassification"),$Qo=o(" (DeBERTa model)"),kQo=l(),M0=a("li"),G_e=a("strong"),SQo=o("deberta-v2"),RQo=o(" \u2014 "),XX=a("a"),PQo=o("DebertaV2ForTokenClassification"),BQo=o(" (DeBERTa-v2 model)"),IQo=l(),E0=a("li"),O_e=a("strong"),NQo=o("distilbert"),qQo=o(" \u2014 "),zX=a("a"),jQo=o("DistilBertForTokenClassification"),DQo=o(" (DistilBERT model)"),GQo=l(),C0=a("li"),V_e=a("strong"),OQo=o("electra"),VQo=o(" \u2014 "),WX=a("a"),XQo=o("ElectraForTokenClassification"),zQo=o(" (ELECTRA model)"),WQo=l(),w0=a("li"),X_e=a("strong"),QQo=o("flaubert"),HQo=o(" \u2014 "),QX=a("a"),UQo=o("FlaubertForTokenClassification"),JQo=o(" (FlauBERT model)"),YQo=l(),A0=a("li"),z_e=a("strong"),KQo=o("fnet"),ZQo=o(" \u2014 "),HX=a("a"),eHo=o("FNetForTokenClassification"),oHo=o(" (FNet model)"),rHo=l(),L0=a("li"),W_e=a("strong"),tHo=o("funnel"),aHo=o(" \u2014 "),UX=a("a"),nHo=o("FunnelForTokenClassification"),sHo=o(" (Funnel Transformer model)"),lHo=l(),y0=a("li"),Q_e=a("strong"),iHo=o("gpt2"),dHo=o(" \u2014 "),JX=a("a"),cHo=o("GPT2ForTokenClassification"),fHo=o(" (OpenAI GPT-2 model)"),mHo=l(),x0=a("li"),H_e=a("strong"),gHo=o("ibert"),hHo=o(" \u2014 "),YX=a("a"),pHo=o("IBertForTokenClassification"),_Ho=o(" (I-BERT model)"),uHo=l(),$0=a("li"),U_e=a("strong"),bHo=o("layoutlm"),vHo=o(" \u2014 "),KX=a("a"),FHo=o("LayoutLMForTokenClassification"),THo=o(" (LayoutLM model)"),MHo=l(),k0=a("li"),J_e=a("strong"),EHo=o("layoutlmv2"),CHo=o(" \u2014 "),ZX=a("a"),wHo=o("LayoutLMv2ForTokenClassification"),AHo=o(" (LayoutLMv2 model)"),LHo=l(),S0=a("li"),Y_e=a("strong"),yHo=o("layoutlmv3"),xHo=o(" \u2014 "),ez=a("a"),$Ho=o("LayoutLMv3ForTokenClassification"),kHo=o(" (LayoutLMv3 model)"),SHo=l(),R0=a("li"),K_e=a("strong"),RHo=o("longformer"),PHo=o(" \u2014 "),oz=a("a"),BHo=o("LongformerForTokenClassification"),IHo=o(" (Longformer model)"),NHo=l(),P0=a("li"),Z_e=a("strong"),qHo=o("megatron-bert"),jHo=o(" \u2014 "),rz=a("a"),DHo=o("MegatronBertForTokenClassification"),GHo=o(" (Megatron-BERT model)"),OHo=l(),B0=a("li"),eue=a("strong"),VHo=o("mobilebert"),XHo=o(" \u2014 "),tz=a("a"),zHo=o("MobileBertForTokenClassification"),WHo=o(" (MobileBERT model)"),QHo=l(),I0=a("li"),oue=a("strong"),HHo=o("mpnet"),UHo=o(" \u2014 "),az=a("a"),JHo=o("MPNetForTokenClassification"),YHo=o(" (MPNet model)"),KHo=l(),N0=a("li"),rue=a("strong"),ZHo=o("nezha"),eUo=o(" \u2014 "),nz=a("a"),oUo=o("NezhaForTokenClassification"),rUo=o(" (Nezha model)"),tUo=l(),q0=a("li"),tue=a("strong"),aUo=o("nystromformer"),nUo=o(" \u2014 "),sz=a("a"),sUo=o("NystromformerForTokenClassification"),lUo=o(" (Nystr\xF6mformer model)"),iUo=l(),j0=a("li"),aue=a("strong"),dUo=o("qdqbert"),cUo=o(" \u2014 "),lz=a("a"),fUo=o("QDQBertForTokenClassification"),mUo=o(" (QDQBert model)"),gUo=l(),D0=a("li"),nue=a("strong"),hUo=o("rembert"),pUo=o(" \u2014 "),iz=a("a"),_Uo=o("RemBertForTokenClassification"),uUo=o(" (RemBERT model)"),bUo=l(),G0=a("li"),sue=a("strong"),vUo=o("roberta"),FUo=o(" \u2014 "),dz=a("a"),TUo=o("RobertaForTokenClassification"),MUo=o(" (RoBERTa model)"),EUo=l(),O0=a("li"),lue=a("strong"),CUo=o("roformer"),wUo=o(" \u2014 "),cz=a("a"),AUo=o("RoFormerForTokenClassification"),LUo=o(" (RoFormer model)"),yUo=l(),V0=a("li"),iue=a("strong"),xUo=o("squeezebert"),$Uo=o(" \u2014 "),fz=a("a"),kUo=o("SqueezeBertForTokenClassification"),SUo=o(" (SqueezeBERT model)"),RUo=l(),X0=a("li"),due=a("strong"),PUo=o("xlm"),BUo=o(" \u2014 "),mz=a("a"),IUo=o("XLMForTokenClassification"),NUo=o(" (XLM model)"),qUo=l(),z0=a("li"),cue=a("strong"),jUo=o("xlm-roberta"),DUo=o(" \u2014 "),gz=a("a"),GUo=o("XLMRobertaForTokenClassification"),OUo=o(" (XLM-RoBERTa model)"),VUo=l(),W0=a("li"),fue=a("strong"),XUo=o("xlm-roberta-xl"),zUo=o(" \u2014 "),hz=a("a"),WUo=o("XLMRobertaXLForTokenClassification"),QUo=o(" (XLM-RoBERTa-XL model)"),HUo=l(),Q0=a("li"),mue=a("strong"),UUo=o("xlnet"),JUo=o(" \u2014 "),pz=a("a"),YUo=o("XLNetForTokenClassification"),KUo=o(" (XLNet model)"),ZUo=l(),H0=a("li"),gue=a("strong"),eJo=o("yoso"),oJo=o(" \u2014 "),_z=a("a"),rJo=o("YosoForTokenClassification"),tJo=o(" (YOSO model)"),aJo=l(),U0=a("p"),nJo=o("The model is set in evaluation mode by default using "),hue=a("code"),sJo=o("model.eval()"),lJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),iJo=o("model.train()"),dJo=l(),F(J0.$$.fragment),wOe=l(),cd=a("h2"),Y0=a("a"),_ue=a("span"),F(HL.$$.fragment),cJo=l(),uue=a("span"),fJo=o("AutoModelForQuestionAnswering"),AOe=l(),jo=a("div"),F(UL.$$.fragment),mJo=l(),fd=a("p"),gJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uz=a("a"),hJo=o("from_pretrained()"),pJo=o(" class method or the "),bz=a("a"),_Jo=o("from_config()"),uJo=o(` class
method.`),bJo=l(),JL=a("p"),vJo=o("This class cannot be instantiated directly using "),bue=a("code"),FJo=o("__init__()"),TJo=o(" (throws an error)."),MJo=l(),pt=a("div"),F(YL.$$.fragment),EJo=l(),vue=a("p"),CJo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wJo=l(),md=a("p"),AJo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),LJo=o("not"),yJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),xJo=o("from_pretrained()"),$Jo=o(" to load the model weights."),kJo=l(),F(K0.$$.fragment),SJo=l(),no=a("div"),F(KL.$$.fragment),RJo=l(),Tue=a("p"),PJo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BJo=l(),Va=a("p"),IJo=o("The model class to instantiate is selected based on the "),Mue=a("code"),NJo=o("model_type"),qJo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),VJo=l(),V=a("ul"),Z0=a("li"),wue=a("strong"),XJo=o("albert"),zJo=o(" \u2014 "),Fz=a("a"),WJo=o("AlbertForQuestionAnswering"),QJo=o(" (ALBERT model)"),HJo=l(),eF=a("li"),Aue=a("strong"),UJo=o("bart"),JJo=o(" \u2014 "),Tz=a("a"),YJo=o("BartForQuestionAnswering"),KJo=o(" (BART model)"),ZJo=l(),oF=a("li"),Lue=a("strong"),eYo=o("bert"),oYo=o(" \u2014 "),Mz=a("a"),rYo=o("BertForQuestionAnswering"),tYo=o(" (BERT model)"),aYo=l(),rF=a("li"),yue=a("strong"),nYo=o("big_bird"),sYo=o(" \u2014 "),Ez=a("a"),lYo=o("BigBirdForQuestionAnswering"),iYo=o(" (BigBird model)"),dYo=l(),tF=a("li"),xue=a("strong"),cYo=o("bigbird_pegasus"),fYo=o(" \u2014 "),Cz=a("a"),mYo=o("BigBirdPegasusForQuestionAnswering"),gYo=o(" (BigBird-Pegasus model)"),hYo=l(),aF=a("li"),$ue=a("strong"),pYo=o("camembert"),_Yo=o(" \u2014 "),wz=a("a"),uYo=o("CamembertForQuestionAnswering"),bYo=o(" (CamemBERT model)"),vYo=l(),nF=a("li"),kue=a("strong"),FYo=o("canine"),TYo=o(" \u2014 "),Az=a("a"),MYo=o("CanineForQuestionAnswering"),EYo=o(" (CANINE model)"),CYo=l(),sF=a("li"),Sue=a("strong"),wYo=o("convbert"),AYo=o(" \u2014 "),Lz=a("a"),LYo=o("ConvBertForQuestionAnswering"),yYo=o(" (ConvBERT model)"),xYo=l(),lF=a("li"),Rue=a("strong"),$Yo=o("data2vec-text"),kYo=o(" \u2014 "),yz=a("a"),SYo=o("Data2VecTextForQuestionAnswering"),RYo=o(" (Data2VecText model)"),PYo=l(),iF=a("li"),Pue=a("strong"),BYo=o("deberta"),IYo=o(" \u2014 "),xz=a("a"),NYo=o("DebertaForQuestionAnswering"),qYo=o(" (DeBERTa model)"),jYo=l(),dF=a("li"),Bue=a("strong"),DYo=o("deberta-v2"),GYo=o(" \u2014 "),$z=a("a"),OYo=o("DebertaV2ForQuestionAnswering"),VYo=o(" (DeBERTa-v2 model)"),XYo=l(),cF=a("li"),Iue=a("strong"),zYo=o("distilbert"),WYo=o(" \u2014 "),kz=a("a"),QYo=o("DistilBertForQuestionAnswering"),HYo=o(" (DistilBERT model)"),UYo=l(),fF=a("li"),Nue=a("strong"),JYo=o("electra"),YYo=o(" \u2014 "),Sz=a("a"),KYo=o("ElectraForQuestionAnswering"),ZYo=o(" (ELECTRA model)"),eKo=l(),mF=a("li"),que=a("strong"),oKo=o("flaubert"),rKo=o(" \u2014 "),Rz=a("a"),tKo=o("FlaubertForQuestionAnsweringSimple"),aKo=o(" (FlauBERT model)"),nKo=l(),gF=a("li"),jue=a("strong"),sKo=o("fnet"),lKo=o(" \u2014 "),Pz=a("a"),iKo=o("FNetForQuestionAnswering"),dKo=o(" (FNet model)"),cKo=l(),hF=a("li"),Due=a("strong"),fKo=o("funnel"),mKo=o(" \u2014 "),Bz=a("a"),gKo=o("FunnelForQuestionAnswering"),hKo=o(" (Funnel Transformer model)"),pKo=l(),pF=a("li"),Gue=a("strong"),_Ko=o("gptj"),uKo=o(" \u2014 "),Iz=a("a"),bKo=o("GPTJForQuestionAnswering"),vKo=o(" (GPT-J model)"),FKo=l(),_F=a("li"),Oue=a("strong"),TKo=o("ibert"),MKo=o(" \u2014 "),Nz=a("a"),EKo=o("IBertForQuestionAnswering"),CKo=o(" (I-BERT model)"),wKo=l(),uF=a("li"),Vue=a("strong"),AKo=o("layoutlmv2"),LKo=o(" \u2014 "),qz=a("a"),yKo=o("LayoutLMv2ForQuestionAnswering"),xKo=o(" (LayoutLMv2 model)"),$Ko=l(),bF=a("li"),Xue=a("strong"),kKo=o("layoutlmv3"),SKo=o(" \u2014 "),jz=a("a"),RKo=o("LayoutLMv3ForQuestionAnswering"),PKo=o(" (LayoutLMv3 model)"),BKo=l(),vF=a("li"),zue=a("strong"),IKo=o("led"),NKo=o(" \u2014 "),Dz=a("a"),qKo=o("LEDForQuestionAnswering"),jKo=o(" (LED model)"),DKo=l(),FF=a("li"),Wue=a("strong"),GKo=o("longformer"),OKo=o(" \u2014 "),Gz=a("a"),VKo=o("LongformerForQuestionAnswering"),XKo=o(" (Longformer model)"),zKo=l(),TF=a("li"),Que=a("strong"),WKo=o("lxmert"),QKo=o(" \u2014 "),Oz=a("a"),HKo=o("LxmertForQuestionAnswering"),UKo=o(" (LXMERT model)"),JKo=l(),MF=a("li"),Hue=a("strong"),YKo=o("mbart"),KKo=o(" \u2014 "),Vz=a("a"),ZKo=o("MBartForQuestionAnswering"),eZo=o(" (mBART model)"),oZo=l(),EF=a("li"),Uue=a("strong"),rZo=o("megatron-bert"),tZo=o(" \u2014 "),Xz=a("a"),aZo=o("MegatronBertForQuestionAnswering"),nZo=o(" (Megatron-BERT model)"),sZo=l(),CF=a("li"),Jue=a("strong"),lZo=o("mobilebert"),iZo=o(" \u2014 "),zz=a("a"),dZo=o("MobileBertForQuestionAnswering"),cZo=o(" (MobileBERT model)"),fZo=l(),wF=a("li"),Yue=a("strong"),mZo=o("mpnet"),gZo=o(" \u2014 "),Wz=a("a"),hZo=o("MPNetForQuestionAnswering"),pZo=o(" (MPNet model)"),_Zo=l(),AF=a("li"),Kue=a("strong"),uZo=o("nezha"),bZo=o(" \u2014 "),Qz=a("a"),vZo=o("NezhaForQuestionAnswering"),FZo=o(" (Nezha model)"),TZo=l(),LF=a("li"),Zue=a("strong"),MZo=o("nystromformer"),EZo=o(" \u2014 "),Hz=a("a"),CZo=o("NystromformerForQuestionAnswering"),wZo=o(" (Nystr\xF6mformer model)"),AZo=l(),yF=a("li"),e1e=a("strong"),LZo=o("qdqbert"),yZo=o(" \u2014 "),Uz=a("a"),xZo=o("QDQBertForQuestionAnswering"),$Zo=o(" (QDQBert model)"),kZo=l(),xF=a("li"),o1e=a("strong"),SZo=o("reformer"),RZo=o(" \u2014 "),Jz=a("a"),PZo=o("ReformerForQuestionAnswering"),BZo=o(" (Reformer model)"),IZo=l(),$F=a("li"),r1e=a("strong"),NZo=o("rembert"),qZo=o(" \u2014 "),Yz=a("a"),jZo=o("RemBertForQuestionAnswering"),DZo=o(" (RemBERT model)"),GZo=l(),kF=a("li"),t1e=a("strong"),OZo=o("roberta"),VZo=o(" \u2014 "),Kz=a("a"),XZo=o("RobertaForQuestionAnswering"),zZo=o(" (RoBERTa model)"),WZo=l(),SF=a("li"),a1e=a("strong"),QZo=o("roformer"),HZo=o(" \u2014 "),Zz=a("a"),UZo=o("RoFormerForQuestionAnswering"),JZo=o(" (RoFormer model)"),YZo=l(),RF=a("li"),n1e=a("strong"),KZo=o("splinter"),ZZo=o(" \u2014 "),eW=a("a"),eer=o("SplinterForQuestionAnswering"),oer=o(" (Splinter model)"),rer=l(),PF=a("li"),s1e=a("strong"),ter=o("squeezebert"),aer=o(" \u2014 "),oW=a("a"),ner=o("SqueezeBertForQuestionAnswering"),ser=o(" (SqueezeBERT model)"),ler=l(),BF=a("li"),l1e=a("strong"),ier=o("xlm"),der=o(" \u2014 "),rW=a("a"),cer=o("XLMForQuestionAnsweringSimple"),fer=o(" (XLM model)"),mer=l(),IF=a("li"),i1e=a("strong"),ger=o("xlm-roberta"),her=o(" \u2014 "),tW=a("a"),per=o("XLMRobertaForQuestionAnswering"),_er=o(" (XLM-RoBERTa model)"),uer=l(),NF=a("li"),d1e=a("strong"),ber=o("xlm-roberta-xl"),ver=o(" \u2014 "),aW=a("a"),Fer=o("XLMRobertaXLForQuestionAnswering"),Ter=o(" (XLM-RoBERTa-XL model)"),Mer=l(),qF=a("li"),c1e=a("strong"),Eer=o("xlnet"),Cer=o(" \u2014 "),nW=a("a"),wer=o("XLNetForQuestionAnsweringSimple"),Aer=o(" (XLNet model)"),Ler=l(),jF=a("li"),f1e=a("strong"),yer=o("yoso"),xer=o(" \u2014 "),sW=a("a"),$er=o("YosoForQuestionAnswering"),ker=o(" (YOSO model)"),Ser=l(),DF=a("p"),Rer=o("The model is set in evaluation mode by default using "),m1e=a("code"),Per=o("model.eval()"),Ber=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),Ier=o("model.train()"),Ner=l(),F(GF.$$.fragment),LOe=l(),gd=a("h2"),OF=a("a"),h1e=a("span"),F(ZL.$$.fragment),qer=l(),p1e=a("span"),jer=o("AutoModelForTableQuestionAnswering"),yOe=l(),Do=a("div"),F(ey.$$.fragment),Der=l(),hd=a("p"),Ger=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=a("a"),Oer=o("from_pretrained()"),Ver=o(" class method or the "),iW=a("a"),Xer=o("from_config()"),zer=o(` class
method.`),Wer=l(),oy=a("p"),Qer=o("This class cannot be instantiated directly using "),_1e=a("code"),Her=o("__init__()"),Uer=o(" (throws an error)."),Jer=l(),_t=a("div"),F(ry.$$.fragment),Yer=l(),u1e=a("p"),Ker=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zer=l(),pd=a("p"),eor=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),oor=o("not"),ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),tor=o("from_pretrained()"),aor=o(" to load the model weights."),nor=l(),F(VF.$$.fragment),sor=l(),so=a("div"),F(ty.$$.fragment),lor=l(),v1e=a("p"),ior=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dor=l(),Xa=a("p"),cor=o("The model class to instantiate is selected based on the "),F1e=a("code"),mor=o("model_type"),gor=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),hor=o("pretrained_model_name_or_path"),por=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),_or=o("pretrained_model_name_or_path"),uor=o(":"),bor=l(),E1e=a("ul"),XF=a("li"),C1e=a("strong"),vor=o("tapas"),For=o(" \u2014 "),cW=a("a"),Tor=o("TapasForQuestionAnswering"),Mor=o(" (TAPAS model)"),Eor=l(),zF=a("p"),Cor=o("The model is set in evaluation mode by default using "),w1e=a("code"),wor=o("model.eval()"),Aor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=a("code"),Lor=o("model.train()"),yor=l(),F(WF.$$.fragment),xOe=l(),_d=a("h2"),QF=a("a"),L1e=a("span"),F(ay.$$.fragment),xor=l(),y1e=a("span"),$or=o("AutoModelForImageClassification"),$Oe=l(),Go=a("div"),F(ny.$$.fragment),kor=l(),ud=a("p"),Sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fW=a("a"),Ror=o("from_pretrained()"),Por=o(" class method or the "),mW=a("a"),Bor=o("from_config()"),Ior=o(` class
method.`),Nor=l(),sy=a("p"),qor=o("This class cannot be instantiated directly using "),x1e=a("code"),jor=o("__init__()"),Dor=o(" (throws an error)."),Gor=l(),ut=a("div"),F(ly.$$.fragment),Oor=l(),$1e=a("p"),Vor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xor=l(),bd=a("p"),zor=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),Wor=o("not"),Qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Hor=o("from_pretrained()"),Uor=o(" to load the model weights."),Jor=l(),F(HF.$$.fragment),Yor=l(),lo=a("div"),F(iy.$$.fragment),Kor=l(),S1e=a("p"),Zor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),err=l(),za=a("p"),orr=o("The model class to instantiate is selected based on the "),R1e=a("code"),rrr=o("model_type"),trr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),srr=o("pretrained_model_name_or_path"),lrr=o(":"),irr=l(),Fe=a("ul"),UF=a("li"),I1e=a("strong"),drr=o("beit"),crr=o(" \u2014 "),hW=a("a"),frr=o("BeitForImageClassification"),mrr=o(" (BEiT model)"),grr=l(),JF=a("li"),N1e=a("strong"),hrr=o("convnext"),prr=o(" \u2014 "),pW=a("a"),_rr=o("ConvNextForImageClassification"),urr=o(" (ConvNeXT model)"),brr=l(),YF=a("li"),q1e=a("strong"),vrr=o("cvt"),Frr=o(" \u2014 "),_W=a("a"),Trr=o("CvtForImageClassification"),Mrr=o(" (CvT model)"),Err=l(),KF=a("li"),j1e=a("strong"),Crr=o("data2vec-vision"),wrr=o(" \u2014 "),uW=a("a"),Arr=o("Data2VecVisionForImageClassification"),Lrr=o(" (Data2VecVision model)"),yrr=l(),Xs=a("li"),D1e=a("strong"),xrr=o("deit"),$rr=o(" \u2014 "),bW=a("a"),krr=o("DeiTForImageClassification"),Srr=o(" or "),vW=a("a"),Rrr=o("DeiTForImageClassificationWithTeacher"),Prr=o(" (DeiT model)"),Brr=l(),ZF=a("li"),G1e=a("strong"),Irr=o("imagegpt"),Nrr=o(" \u2014 "),FW=a("a"),qrr=o("ImageGPTForImageClassification"),jrr=o(" (ImageGPT model)"),Drr=l(),zs=a("li"),O1e=a("strong"),Grr=o("levit"),Orr=o(" \u2014 "),TW=a("a"),Vrr=o("LevitForImageClassification"),Xrr=o(" or "),MW=a("a"),zrr=o("LevitForImageClassificationWithTeacher"),Wrr=o(" (LeViT model)"),Qrr=l(),bt=a("li"),V1e=a("strong"),Hrr=o("perceiver"),Urr=o(" \u2014 "),EW=a("a"),Jrr=o("PerceiverForImageClassificationLearned"),Yrr=o(" or "),CW=a("a"),Krr=o("PerceiverForImageClassificationFourier"),Zrr=o(" or "),wW=a("a"),etr=o("PerceiverForImageClassificationConvProcessing"),otr=o(" (Perceiver model)"),rtr=l(),e6=a("li"),X1e=a("strong"),ttr=o("poolformer"),atr=o(" \u2014 "),AW=a("a"),ntr=o("PoolFormerForImageClassification"),str=o(" (PoolFormer model)"),ltr=l(),o6=a("li"),z1e=a("strong"),itr=o("regnet"),dtr=o(" \u2014 "),LW=a("a"),ctr=o("RegNetForImageClassification"),ftr=o(" (RegNet model)"),mtr=l(),r6=a("li"),W1e=a("strong"),gtr=o("resnet"),htr=o(" \u2014 "),yW=a("a"),ptr=o("ResNetForImageClassification"),_tr=o(" (ResNet model)"),utr=l(),t6=a("li"),Q1e=a("strong"),btr=o("segformer"),vtr=o(" \u2014 "),xW=a("a"),Ftr=o("SegformerForImageClassification"),Ttr=o(" (SegFormer model)"),Mtr=l(),a6=a("li"),H1e=a("strong"),Etr=o("swin"),Ctr=o(" \u2014 "),$W=a("a"),wtr=o("SwinForImageClassification"),Atr=o(" (Swin Transformer model)"),Ltr=l(),n6=a("li"),U1e=a("strong"),ytr=o("van"),xtr=o(" \u2014 "),kW=a("a"),$tr=o("VanForImageClassification"),ktr=o(" (VAN model)"),Str=l(),s6=a("li"),J1e=a("strong"),Rtr=o("vit"),Ptr=o(" \u2014 "),SW=a("a"),Btr=o("ViTForImageClassification"),Itr=o(" (ViT model)"),Ntr=l(),l6=a("p"),qtr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),jtr=o("model.eval()"),Dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Gtr=o("model.train()"),Otr=l(),F(i6.$$.fragment),kOe=l(),vd=a("h2"),d6=a("a"),Z1e=a("span"),F(dy.$$.fragment),Vtr=l(),e2e=a("span"),Xtr=o("AutoModelForVision2Seq"),SOe=l(),Oo=a("div"),F(cy.$$.fragment),ztr=l(),Fd=a("p"),Wtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=a("a"),Qtr=o("from_pretrained()"),Htr=o(" class method or the "),PW=a("a"),Utr=o("from_config()"),Jtr=o(` class
method.`),Ytr=l(),fy=a("p"),Ktr=o("This class cannot be instantiated directly using "),o2e=a("code"),Ztr=o("__init__()"),ear=o(" (throws an error)."),oar=l(),vt=a("div"),F(my.$$.fragment),rar=l(),r2e=a("p"),tar=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aar=l(),Td=a("p"),nar=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),sar=o("not"),lar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),iar=o("from_pretrained()"),dar=o(" to load the model weights."),car=l(),F(c6.$$.fragment),far=l(),io=a("div"),F(gy.$$.fragment),mar=l(),a2e=a("p"),gar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),har=l(),Wa=a("p"),par=o("The model class to instantiate is selected based on the "),n2e=a("code"),_ar=o("model_type"),uar=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),bar=o("pretrained_model_name_or_path"),Far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(":"),Ear=l(),i2e=a("ul"),f6=a("li"),d2e=a("strong"),Car=o("vision-encoder-decoder"),war=o(" \u2014 "),IW=a("a"),Aar=o("VisionEncoderDecoderModel"),Lar=o(" (Vision Encoder decoder model)"),yar=l(),m6=a("p"),xar=o("The model is set in evaluation mode by default using "),c2e=a("code"),$ar=o("model.eval()"),kar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=a("code"),Sar=o("model.train()"),Rar=l(),F(g6.$$.fragment),ROe=l(),Md=a("h2"),h6=a("a"),m2e=a("span"),F(hy.$$.fragment),Par=l(),g2e=a("span"),Bar=o("AutoModelForVisualQuestionAnswering"),POe=l(),Vo=a("div"),F(py.$$.fragment),Iar=l(),Ed=a("p"),Nar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NW=a("a"),qar=o("from_pretrained()"),jar=o(" class method or the "),qW=a("a"),Dar=o("from_config()"),Gar=o(` class
method.`),Oar=l(),_y=a("p"),Var=o("This class cannot be instantiated directly using "),h2e=a("code"),Xar=o("__init__()"),zar=o(" (throws an error)."),War=l(),Ft=a("div"),F(uy.$$.fragment),Qar=l(),p2e=a("p"),Har=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Uar=l(),Cd=a("p"),Jar=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),Yar=o("not"),Kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Zar=o("from_pretrained()"),enr=o(" to load the model weights."),onr=l(),F(p6.$$.fragment),rnr=l(),co=a("div"),F(by.$$.fragment),tnr=l(),u2e=a("p"),anr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),nnr=l(),Qa=a("p"),snr=o("The model class to instantiate is selected based on the "),b2e=a("code"),lnr=o("model_type"),inr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(":"),gnr=l(),T2e=a("ul"),_6=a("li"),M2e=a("strong"),hnr=o("vilt"),pnr=o(" \u2014 "),DW=a("a"),_nr=o("ViltForQuestionAnswering"),unr=o(" (ViLT model)"),bnr=l(),u6=a("p"),vnr=o("The model is set in evaluation mode by default using "),E2e=a("code"),Fnr=o("model.eval()"),Tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=a("code"),Mnr=o("model.train()"),Enr=l(),F(b6.$$.fragment),BOe=l(),wd=a("h2"),v6=a("a"),w2e=a("span"),F(vy.$$.fragment),Cnr=l(),A2e=a("span"),wnr=o("AutoModelForAudioClassification"),IOe=l(),Xo=a("div"),F(Fy.$$.fragment),Anr=l(),Ad=a("p"),Lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=a("a"),ynr=o("from_pretrained()"),xnr=o(" class method or the "),OW=a("a"),$nr=o("from_config()"),knr=o(` class
method.`),Snr=l(),Ty=a("p"),Rnr=o("This class cannot be instantiated directly using "),L2e=a("code"),Pnr=o("__init__()"),Bnr=o(" (throws an error)."),Inr=l(),Tt=a("div"),F(My.$$.fragment),Nnr=l(),y2e=a("p"),qnr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),jnr=l(),Ld=a("p"),Dnr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),Gnr=o("not"),Onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Vnr=o("from_pretrained()"),Xnr=o(" to load the model weights."),znr=l(),F(F6.$$.fragment),Wnr=l(),fo=a("div"),F(Ey.$$.fragment),Qnr=l(),$2e=a("p"),Hnr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Unr=l(),Ha=a("p"),Jnr=o("The model class to instantiate is selected based on the "),k2e=a("code"),Ynr=o("model_type"),Knr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),osr=o("pretrained_model_name_or_path"),rsr=o(":"),tsr=l(),Pe=a("ul"),T6=a("li"),P2e=a("strong"),asr=o("data2vec-audio"),nsr=o(" \u2014 "),XW=a("a"),ssr=o("Data2VecAudioForSequenceClassification"),lsr=o(" (Data2VecAudio model)"),isr=l(),M6=a("li"),B2e=a("strong"),dsr=o("hubert"),csr=o(" \u2014 "),zW=a("a"),fsr=o("HubertForSequenceClassification"),msr=o(" (Hubert model)"),gsr=l(),E6=a("li"),I2e=a("strong"),hsr=o("sew"),psr=o(" \u2014 "),WW=a("a"),_sr=o("SEWForSequenceClassification"),usr=o(" (SEW model)"),bsr=l(),C6=a("li"),N2e=a("strong"),vsr=o("sew-d"),Fsr=o(" \u2014 "),QW=a("a"),Tsr=o("SEWDForSequenceClassification"),Msr=o(" (SEW-D model)"),Esr=l(),w6=a("li"),q2e=a("strong"),Csr=o("unispeech"),wsr=o(" \u2014 "),HW=a("a"),Asr=o("UniSpeechForSequenceClassification"),Lsr=o(" (UniSpeech model)"),ysr=l(),A6=a("li"),j2e=a("strong"),xsr=o("unispeech-sat"),$sr=o(" \u2014 "),UW=a("a"),ksr=o("UniSpeechSatForSequenceClassification"),Ssr=o(" (UniSpeechSat model)"),Rsr=l(),L6=a("li"),D2e=a("strong"),Psr=o("wav2vec2"),Bsr=o(" \u2014 "),JW=a("a"),Isr=o("Wav2Vec2ForSequenceClassification"),Nsr=o(" (Wav2Vec2 model)"),qsr=l(),y6=a("li"),G2e=a("strong"),jsr=o("wav2vec2-conformer"),Dsr=o(" \u2014 "),YW=a("a"),Gsr=o("Wav2Vec2ConformerForSequenceClassification"),Osr=o(" (Wav2Vec2-Conformer model)"),Vsr=l(),x6=a("li"),O2e=a("strong"),Xsr=o("wavlm"),zsr=o(" \u2014 "),KW=a("a"),Wsr=o("WavLMForSequenceClassification"),Qsr=o(" (WavLM model)"),Hsr=l(),$6=a("p"),Usr=o("The model is set in evaluation mode by default using "),V2e=a("code"),Jsr=o("model.eval()"),Ysr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=a("code"),Ksr=o("model.train()"),Zsr=l(),F(k6.$$.fragment),NOe=l(),yd=a("h2"),S6=a("a"),z2e=a("span"),F(Cy.$$.fragment),elr=l(),W2e=a("span"),olr=o("AutoModelForAudioFrameClassification"),qOe=l(),zo=a("div"),F(wy.$$.fragment),rlr=l(),xd=a("p"),tlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=a("a"),alr=o("from_pretrained()"),nlr=o(" class method or the "),eQ=a("a"),slr=o("from_config()"),llr=o(` class
method.`),ilr=l(),Ay=a("p"),dlr=o("This class cannot be instantiated directly using "),Q2e=a("code"),clr=o("__init__()"),flr=o(" (throws an error)."),mlr=l(),Mt=a("div"),F(Ly.$$.fragment),glr=l(),H2e=a("p"),hlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),plr=l(),$d=a("p"),_lr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),ulr=o("not"),blr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),vlr=o("from_pretrained()"),Flr=o(" to load the model weights."),Tlr=l(),F(R6.$$.fragment),Mlr=l(),mo=a("div"),F(yy.$$.fragment),Elr=l(),J2e=a("p"),Clr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wlr=l(),Ua=a("p"),Alr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),Llr=o("model_type"),ylr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),xlr=o("pretrained_model_name_or_path"),$lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(":"),Rlr=l(),et=a("ul"),P6=a("li"),ebe=a("strong"),Plr=o("data2vec-audio"),Blr=o(" \u2014 "),rQ=a("a"),Ilr=o("Data2VecAudioForAudioFrameClassification"),Nlr=o(" (Data2VecAudio model)"),qlr=l(),B6=a("li"),obe=a("strong"),jlr=o("unispeech-sat"),Dlr=o(" \u2014 "),tQ=a("a"),Glr=o("UniSpeechSatForAudioFrameClassification"),Olr=o(" (UniSpeechSat model)"),Vlr=l(),I6=a("li"),rbe=a("strong"),Xlr=o("wav2vec2"),zlr=o(" \u2014 "),aQ=a("a"),Wlr=o("Wav2Vec2ForAudioFrameClassification"),Qlr=o(" (Wav2Vec2 model)"),Hlr=l(),N6=a("li"),tbe=a("strong"),Ulr=o("wav2vec2-conformer"),Jlr=o(" \u2014 "),nQ=a("a"),Ylr=o("Wav2Vec2ConformerForAudioFrameClassification"),Klr=o(" (Wav2Vec2-Conformer model)"),Zlr=l(),q6=a("li"),abe=a("strong"),eir=o("wavlm"),oir=o(" \u2014 "),sQ=a("a"),rir=o("WavLMForAudioFrameClassification"),tir=o(" (WavLM model)"),air=l(),j6=a("p"),nir=o("The model is set in evaluation mode by default using "),nbe=a("code"),sir=o("model.eval()"),lir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),iir=o("model.train()"),dir=l(),F(D6.$$.fragment),jOe=l(),kd=a("h2"),G6=a("a"),lbe=a("span"),F(xy.$$.fragment),cir=l(),ibe=a("span"),fir=o("AutoModelForCTC"),DOe=l(),Wo=a("div"),F($y.$$.fragment),mir=l(),Sd=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lQ=a("a"),hir=o("from_pretrained()"),pir=o(" class method or the "),iQ=a("a"),_ir=o("from_config()"),uir=o(` class
method.`),bir=l(),ky=a("p"),vir=o("This class cannot be instantiated directly using "),dbe=a("code"),Fir=o("__init__()"),Tir=o(" (throws an error)."),Mir=l(),Et=a("div"),F(Sy.$$.fragment),Eir=l(),cbe=a("p"),Cir=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),wir=l(),Rd=a("p"),Air=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),Lir=o("not"),yir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),xir=o("from_pretrained()"),$ir=o(" to load the model weights."),kir=l(),F(O6.$$.fragment),Sir=l(),go=a("div"),F(Ry.$$.fragment),Rir=l(),mbe=a("p"),Pir=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Bir=l(),Ja=a("p"),Iir=o("The model class to instantiate is selected based on the "),gbe=a("code"),Nir=o("model_type"),qir=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),jir=o("pretrained_model_name_or_path"),Dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(":"),Vir=l(),Le=a("ul"),V6=a("li"),_be=a("strong"),Xir=o("data2vec-audio"),zir=o(" \u2014 "),cQ=a("a"),Wir=o("Data2VecAudioForCTC"),Qir=o(" (Data2VecAudio model)"),Hir=l(),X6=a("li"),ube=a("strong"),Uir=o("hubert"),Jir=o(" \u2014 "),fQ=a("a"),Yir=o("HubertForCTC"),Kir=o(" (Hubert model)"),Zir=l(),z6=a("li"),bbe=a("strong"),edr=o("mctct"),odr=o(" \u2014 "),mQ=a("a"),rdr=o("MCTCTForCTC"),tdr=o(" (M-CTC-T model)"),adr=l(),W6=a("li"),vbe=a("strong"),ndr=o("sew"),sdr=o(" \u2014 "),gQ=a("a"),ldr=o("SEWForCTC"),idr=o(" (SEW model)"),ddr=l(),Q6=a("li"),Fbe=a("strong"),cdr=o("sew-d"),fdr=o(" \u2014 "),hQ=a("a"),mdr=o("SEWDForCTC"),gdr=o(" (SEW-D model)"),hdr=l(),H6=a("li"),Tbe=a("strong"),pdr=o("unispeech"),_dr=o(" \u2014 "),pQ=a("a"),udr=o("UniSpeechForCTC"),bdr=o(" (UniSpeech model)"),vdr=l(),U6=a("li"),Mbe=a("strong"),Fdr=o("unispeech-sat"),Tdr=o(" \u2014 "),_Q=a("a"),Mdr=o("UniSpeechSatForCTC"),Edr=o(" (UniSpeechSat model)"),Cdr=l(),J6=a("li"),Ebe=a("strong"),wdr=o("wav2vec2"),Adr=o(" \u2014 "),uQ=a("a"),Ldr=o("Wav2Vec2ForCTC"),ydr=o(" (Wav2Vec2 model)"),xdr=l(),Y6=a("li"),Cbe=a("strong"),$dr=o("wav2vec2-conformer"),kdr=o(" \u2014 "),bQ=a("a"),Sdr=o("Wav2Vec2ConformerForCTC"),Rdr=o(" (Wav2Vec2-Conformer model)"),Pdr=l(),K6=a("li"),wbe=a("strong"),Bdr=o("wavlm"),Idr=o(" \u2014 "),vQ=a("a"),Ndr=o("WavLMForCTC"),qdr=o(" (WavLM model)"),jdr=l(),Z6=a("p"),Ddr=o("The model is set in evaluation mode by default using "),Abe=a("code"),Gdr=o("model.eval()"),Odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),Vdr=o("model.train()"),Xdr=l(),F(eT.$$.fragment),GOe=l(),Pd=a("h2"),oT=a("a"),ybe=a("span"),F(Py.$$.fragment),zdr=l(),xbe=a("span"),Wdr=o("AutoModelForSpeechSeq2Seq"),OOe=l(),Qo=a("div"),F(By.$$.fragment),Qdr=l(),Bd=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),TQ=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),Iy=a("p"),ecr=o("This class cannot be instantiated directly using "),$be=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),Ct=a("div"),F(Ny.$$.fragment),acr=l(),kbe=a("p"),ncr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),scr=l(),Id=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),F(rT.$$.fragment),gcr=l(),ho=a("div"),F(qy.$$.fragment),hcr=l(),Rbe=a("p"),pcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_cr=l(),Ya=a("p"),ucr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),bcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(":"),Ccr=l(),jy=a("ul"),tT=a("li"),Nbe=a("strong"),wcr=o("speech-encoder-decoder"),Acr=o(" \u2014 "),EQ=a("a"),Lcr=o("SpeechEncoderDecoderModel"),ycr=o(" (Speech Encoder decoder model)"),xcr=l(),aT=a("li"),qbe=a("strong"),$cr=o("speech_to_text"),kcr=o(" \u2014 "),CQ=a("a"),Scr=o("Speech2TextForConditionalGeneration"),Rcr=o(" (Speech2Text model)"),Pcr=l(),nT=a("p"),Bcr=o("The model is set in evaluation mode by default using "),jbe=a("code"),Icr=o("model.eval()"),Ncr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),qcr=o("model.train()"),jcr=l(),F(sT.$$.fragment),VOe=l(),Nd=a("h2"),lT=a("a"),Gbe=a("span"),F(Dy.$$.fragment),Dcr=l(),Obe=a("span"),Gcr=o("AutoModelForAudioXVector"),XOe=l(),Ho=a("div"),F(Gy.$$.fragment),Ocr=l(),qd=a("p"),Vcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wQ=a("a"),Xcr=o("from_pretrained()"),zcr=o(" class method or the "),AQ=a("a"),Wcr=o("from_config()"),Qcr=o(` class
method.`),Hcr=l(),Oy=a("p"),Ucr=o("This class cannot be instantiated directly using "),Vbe=a("code"),Jcr=o("__init__()"),Ycr=o(" (throws an error)."),Kcr=l(),wt=a("div"),F(Vy.$$.fragment),Zcr=l(),Xbe=a("p"),efr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ofr=l(),jd=a("p"),rfr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),tfr=o("not"),afr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),nfr=o("from_pretrained()"),sfr=o(" to load the model weights."),lfr=l(),F(iT.$$.fragment),ifr=l(),po=a("div"),F(Xy.$$.fragment),dfr=l(),Wbe=a("p"),cfr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ffr=l(),Ka=a("p"),mfr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),gfr=o("model_type"),hfr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),ufr=o("pretrained_model_name_or_path"),bfr=o(":"),vfr=l(),ot=a("ul"),dT=a("li"),Jbe=a("strong"),Ffr=o("data2vec-audio"),Tfr=o(" \u2014 "),yQ=a("a"),Mfr=o("Data2VecAudioForXVector"),Efr=o(" (Data2VecAudio model)"),Cfr=l(),cT=a("li"),Ybe=a("strong"),wfr=o("unispeech-sat"),Afr=o(" \u2014 "),xQ=a("a"),Lfr=o("UniSpeechSatForXVector"),yfr=o(" (UniSpeechSat model)"),xfr=l(),fT=a("li"),Kbe=a("strong"),$fr=o("wav2vec2"),kfr=o(" \u2014 "),$Q=a("a"),Sfr=o("Wav2Vec2ForXVector"),Rfr=o(" (Wav2Vec2 model)"),Pfr=l(),mT=a("li"),Zbe=a("strong"),Bfr=o("wav2vec2-conformer"),Ifr=o(" \u2014 "),kQ=a("a"),Nfr=o("Wav2Vec2ConformerForXVector"),qfr=o(" (Wav2Vec2-Conformer model)"),jfr=l(),gT=a("li"),eve=a("strong"),Dfr=o("wavlm"),Gfr=o(" \u2014 "),SQ=a("a"),Ofr=o("WavLMForXVector"),Vfr=o(" (WavLM model)"),Xfr=l(),hT=a("p"),zfr=o("The model is set in evaluation mode by default using "),ove=a("code"),Wfr=o("model.eval()"),Qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),Hfr=o("model.train()"),Ufr=l(),F(pT.$$.fragment),zOe=l(),Dd=a("h2"),_T=a("a"),tve=a("span"),F(zy.$$.fragment),Jfr=l(),ave=a("span"),Yfr=o("AutoModelForMaskedImageModeling"),WOe=l(),Uo=a("div"),F(Wy.$$.fragment),Kfr=l(),Gd=a("p"),Zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RQ=a("a"),emr=o("from_pretrained()"),omr=o(" class method or the "),PQ=a("a"),rmr=o("from_config()"),tmr=o(` class
method.`),amr=l(),Qy=a("p"),nmr=o("This class cannot be instantiated directly using "),nve=a("code"),smr=o("__init__()"),lmr=o(" (throws an error)."),imr=l(),At=a("div"),F(Hy.$$.fragment),dmr=l(),sve=a("p"),cmr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fmr=l(),Od=a("p"),mmr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),gmr=o("not"),hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),pmr=o("from_pretrained()"),_mr=o(" to load the model weights."),umr=l(),F(uT.$$.fragment),bmr=l(),_o=a("div"),F(Uy.$$.fragment),vmr=l(),ive=a("p"),Fmr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tmr=l(),Za=a("p"),Mmr=o("The model class to instantiate is selected based on the "),dve=a("code"),Emr=o("model_type"),Cmr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),wmr=o("pretrained_model_name_or_path"),Amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),Lmr=o("pretrained_model_name_or_path"),ymr=o(":"),xmr=l(),Vd=a("ul"),bT=a("li"),mve=a("strong"),$mr=o("deit"),kmr=o(" \u2014 "),IQ=a("a"),Smr=o("DeiTForMaskedImageModeling"),Rmr=o(" (DeiT model)"),Pmr=l(),vT=a("li"),gve=a("strong"),Bmr=o("swin"),Imr=o(" \u2014 "),NQ=a("a"),Nmr=o("SwinForMaskedImageModeling"),qmr=o(" (Swin Transformer model)"),jmr=l(),FT=a("li"),hve=a("strong"),Dmr=o("vit"),Gmr=o(" \u2014 "),qQ=a("a"),Omr=o("ViTForMaskedImageModeling"),Vmr=o(" (ViT model)"),Xmr=l(),TT=a("p"),zmr=o("The model is set in evaluation mode by default using "),pve=a("code"),Wmr=o("model.eval()"),Qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=a("code"),Hmr=o("model.train()"),Umr=l(),F(MT.$$.fragment),QOe=l(),Xd=a("h2"),ET=a("a"),uve=a("span"),F(Jy.$$.fragment),Jmr=l(),bve=a("span"),Ymr=o("AutoModelForObjectDetection"),HOe=l(),Jo=a("div"),F(Yy.$$.fragment),Kmr=l(),zd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jQ=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),DQ=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),Ky=a("p"),ngr=o("This class cannot be instantiated directly using "),vve=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),Lt=a("div"),F(Zy.$$.fragment),dgr=l(),Fve=a("p"),cgr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fgr=l(),Wd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),pgr=o("from_pretrained()"),_gr=o(" to load the model weights."),ugr=l(),F(CT.$$.fragment),bgr=l(),uo=a("div"),F(e9.$$.fragment),vgr=l(),Mve=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Tgr=l(),en=a("p"),Mgr=o("The model class to instantiate is selected based on the "),Eve=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(":"),xgr=l(),o9=a("ul"),wT=a("li"),Ave=a("strong"),$gr=o("detr"),kgr=o(" \u2014 "),OQ=a("a"),Sgr=o("DetrForObjectDetection"),Rgr=o(" (DETR model)"),Pgr=l(),AT=a("li"),Lve=a("strong"),Bgr=o("yolos"),Igr=o(" \u2014 "),VQ=a("a"),Ngr=o("YolosForObjectDetection"),qgr=o(" (YOLOS model)"),jgr=l(),LT=a("p"),Dgr=o("The model is set in evaluation mode by default using "),yve=a("code"),Ggr=o("model.eval()"),Ogr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),Vgr=o("model.train()"),Xgr=l(),F(yT.$$.fragment),UOe=l(),Qd=a("h2"),xT=a("a"),$ve=a("span"),F(r9.$$.fragment),zgr=l(),kve=a("span"),Wgr=o("AutoModelForImageSegmentation"),JOe=l(),Yo=a("div"),F(t9.$$.fragment),Qgr=l(),Hd=a("p"),Hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" class method or the "),zQ=a("a"),Ygr=o("from_config()"),Kgr=o(` class
method.`),Zgr=l(),a9=a("p"),ehr=o("This class cannot be instantiated directly using "),Sve=a("code"),ohr=o("__init__()"),rhr=o(" (throws an error)."),thr=l(),yt=a("div"),F(n9.$$.fragment),ahr=l(),Rve=a("p"),nhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),shr=l(),Ud=a("p"),lhr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),ihr=o("not"),dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),chr=o("from_pretrained()"),fhr=o(" to load the model weights."),mhr=l(),F($T.$$.fragment),ghr=l(),bo=a("div"),F(s9.$$.fragment),hhr=l(),Bve=a("p"),phr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_hr=l(),on=a("p"),uhr=o("The model class to instantiate is selected based on the "),Ive=a("code"),bhr=o("model_type"),vhr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(":"),Chr=l(),jve=a("ul"),kT=a("li"),Dve=a("strong"),whr=o("detr"),Ahr=o(" \u2014 "),QQ=a("a"),Lhr=o("DetrForSegmentation"),yhr=o(" (DETR model)"),xhr=l(),ST=a("p"),$hr=o("The model is set in evaluation mode by default using "),Gve=a("code"),khr=o("model.eval()"),Shr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),Rhr=o("model.train()"),Phr=l(),F(RT.$$.fragment),YOe=l(),Jd=a("h2"),PT=a("a"),Vve=a("span"),F(l9.$$.fragment),Bhr=l(),Xve=a("span"),Ihr=o("AutoModelForSemanticSegmentation"),KOe=l(),Ko=a("div"),F(i9.$$.fragment),Nhr=l(),Yd=a("p"),qhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HQ=a("a"),jhr=o("from_pretrained()"),Dhr=o(" class method or the "),UQ=a("a"),Ghr=o("from_config()"),Ohr=o(` class
method.`),Vhr=l(),d9=a("p"),Xhr=o("This class cannot be instantiated directly using "),zve=a("code"),zhr=o("__init__()"),Whr=o(" (throws an error)."),Qhr=l(),xt=a("div"),F(c9.$$.fragment),Hhr=l(),Wve=a("p"),Uhr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jhr=l(),Kd=a("p"),Yhr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),Khr=o("not"),Zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),epr=o("from_pretrained()"),opr=o(" to load the model weights."),rpr=l(),F(BT.$$.fragment),tpr=l(),vo=a("div"),F(f9.$$.fragment),apr=l(),Hve=a("p"),npr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),spr=l(),rn=a("p"),lpr=o("The model class to instantiate is selected based on the "),Uve=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),tn=a("ul"),IT=a("li"),Kve=a("strong"),ppr=o("beit"),_pr=o(" \u2014 "),YQ=a("a"),upr=o("BeitForSemanticSegmentation"),bpr=o(" (BEiT model)"),vpr=l(),NT=a("li"),Zve=a("strong"),Fpr=o("data2vec-vision"),Tpr=o(" \u2014 "),KQ=a("a"),Mpr=o("Data2VecVisionForSemanticSegmentation"),Epr=o(" (Data2VecVision model)"),Cpr=l(),qT=a("li"),e0e=a("strong"),wpr=o("dpt"),Apr=o(" \u2014 "),ZQ=a("a"),Lpr=o("DPTForSemanticSegmentation"),ypr=o(" (DPT model)"),xpr=l(),jT=a("li"),o0e=a("strong"),$pr=o("segformer"),kpr=o(" \u2014 "),eH=a("a"),Spr=o("SegformerForSemanticSegmentation"),Rpr=o(" (SegFormer model)"),Ppr=l(),DT=a("p"),Bpr=o("The model is set in evaluation mode by default using "),r0e=a("code"),Ipr=o("model.eval()"),Npr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t0e=a("code"),qpr=o("model.train()"),jpr=l(),F(GT.$$.fragment),ZOe=l(),Zd=a("h2"),OT=a("a"),a0e=a("span"),F(m9.$$.fragment),Dpr=l(),n0e=a("span"),Gpr=o("AutoModelForInstanceSegmentation"),eVe=l(),Zo=a("div"),F(g9.$$.fragment),Opr=l(),ec=a("p"),Vpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oH=a("a"),Xpr=o("from_pretrained()"),zpr=o(" class method or the "),rH=a("a"),Wpr=o("from_config()"),Qpr=o(` class
method.`),Hpr=l(),h9=a("p"),Upr=o("This class cannot be instantiated directly using "),s0e=a("code"),Jpr=o("__init__()"),Ypr=o(" (throws an error)."),Kpr=l(),$t=a("div"),F(p9.$$.fragment),Zpr=l(),l0e=a("p"),e_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),o_r=l(),oc=a("p"),r_r=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),t_r=o("not"),a_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),n_r=o("from_pretrained()"),s_r=o(" to load the model weights."),l_r=l(),F(VT.$$.fragment),i_r=l(),Fo=a("div"),F(_9.$$.fragment),d_r=l(),d0e=a("p"),c_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),f_r=l(),an=a("p"),m_r=o("The model class to instantiate is selected based on the "),c0e=a("code"),g_r=o("model_type"),h_r=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),p_r=o("pretrained_model_name_or_path"),__r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),u_r=o("pretrained_model_name_or_path"),b_r=o(":"),v_r=l(),g0e=a("ul"),XT=a("li"),h0e=a("strong"),F_r=o("maskformer"),T_r=o(" \u2014 "),aH=a("a"),M_r=o("MaskFormerForInstanceSegmentation"),E_r=o(" (MaskFormer model)"),C_r=l(),zT=a("p"),w_r=o("The model is set in evaluation mode by default using "),p0e=a("code"),A_r=o("model.eval()"),L_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=a("code"),y_r=o("model.train()"),x_r=l(),F(WT.$$.fragment),oVe=l(),rc=a("h2"),QT=a("a"),u0e=a("span"),F(u9.$$.fragment),$_r=l(),b0e=a("span"),k_r=o("TFAutoModel"),rVe=l(),er=a("div"),F(b9.$$.fragment),S_r=l(),tc=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nH=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),sH=a("a"),I_r=o("from_config()"),N_r=o(` class
method.`),q_r=l(),v9=a("p"),j_r=o("This class cannot be instantiated directly using "),v0e=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),kt=a("div"),F(F9.$$.fragment),V_r=l(),F0e=a("p"),X_r=o("Instantiates one of the base model classes of the library from a configuration."),z_r=l(),ac=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),Q_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(HT.$$.fragment),K_r=l(),yr=a("div"),F(T9.$$.fragment),Z_r=l(),M0e=a("p"),eur=o("Instantiate one of the base model classes of the library from a pretrained model."),our=l(),nn=a("p"),rur=o("The model class to instantiate is selected based on the "),E0e=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),q=a("ul"),UT=a("li"),A0e=a("strong"),cur=o("albert"),fur=o(" \u2014 "),iH=a("a"),mur=o("TFAlbertModel"),gur=o(" (ALBERT model)"),hur=l(),JT=a("li"),L0e=a("strong"),pur=o("bart"),_ur=o(" \u2014 "),dH=a("a"),uur=o("TFBartModel"),bur=o(" (BART model)"),vur=l(),YT=a("li"),y0e=a("strong"),Fur=o("bert"),Tur=o(" \u2014 "),cH=a("a"),Mur=o("TFBertModel"),Eur=o(" (BERT model)"),Cur=l(),KT=a("li"),x0e=a("strong"),wur=o("blenderbot"),Aur=o(" \u2014 "),fH=a("a"),Lur=o("TFBlenderbotModel"),yur=o(" (Blenderbot model)"),xur=l(),ZT=a("li"),$0e=a("strong"),$ur=o("blenderbot-small"),kur=o(" \u2014 "),mH=a("a"),Sur=o("TFBlenderbotSmallModel"),Rur=o(" (BlenderbotSmall model)"),Pur=l(),e7=a("li"),k0e=a("strong"),Bur=o("camembert"),Iur=o(" \u2014 "),gH=a("a"),Nur=o("TFCamembertModel"),qur=o(" (CamemBERT model)"),jur=l(),o7=a("li"),S0e=a("strong"),Dur=o("clip"),Gur=o(" \u2014 "),hH=a("a"),Our=o("TFCLIPModel"),Vur=o(" (CLIP model)"),Xur=l(),r7=a("li"),R0e=a("strong"),zur=o("convbert"),Wur=o(" \u2014 "),pH=a("a"),Qur=o("TFConvBertModel"),Hur=o(" (ConvBERT model)"),Uur=l(),t7=a("li"),P0e=a("strong"),Jur=o("convnext"),Yur=o(" \u2014 "),_H=a("a"),Kur=o("TFConvNextModel"),Zur=o(" (ConvNeXT model)"),e1r=l(),a7=a("li"),B0e=a("strong"),o1r=o("ctrl"),r1r=o(" \u2014 "),uH=a("a"),t1r=o("TFCTRLModel"),a1r=o(" (CTRL model)"),n1r=l(),n7=a("li"),I0e=a("strong"),s1r=o("data2vec-vision"),l1r=o(" \u2014 "),bH=a("a"),i1r=o("TFData2VecVisionModel"),d1r=o(" (Data2VecVision model)"),c1r=l(),s7=a("li"),N0e=a("strong"),f1r=o("deberta"),m1r=o(" \u2014 "),vH=a("a"),g1r=o("TFDebertaModel"),h1r=o(" (DeBERTa model)"),p1r=l(),l7=a("li"),q0e=a("strong"),_1r=o("deberta-v2"),u1r=o(" \u2014 "),FH=a("a"),b1r=o("TFDebertaV2Model"),v1r=o(" (DeBERTa-v2 model)"),F1r=l(),i7=a("li"),j0e=a("strong"),T1r=o("deit"),M1r=o(" \u2014 "),TH=a("a"),E1r=o("TFDeiTModel"),C1r=o(" (DeiT model)"),w1r=l(),d7=a("li"),D0e=a("strong"),A1r=o("distilbert"),L1r=o(" \u2014 "),MH=a("a"),y1r=o("TFDistilBertModel"),x1r=o(" (DistilBERT model)"),$1r=l(),c7=a("li"),G0e=a("strong"),k1r=o("dpr"),S1r=o(" \u2014 "),EH=a("a"),R1r=o("TFDPRQuestionEncoder"),P1r=o(" (DPR model)"),B1r=l(),f7=a("li"),O0e=a("strong"),I1r=o("electra"),N1r=o(" \u2014 "),CH=a("a"),q1r=o("TFElectraModel"),j1r=o(" (ELECTRA model)"),D1r=l(),m7=a("li"),V0e=a("strong"),G1r=o("flaubert"),O1r=o(" \u2014 "),wH=a("a"),V1r=o("TFFlaubertModel"),X1r=o(" (FlauBERT model)"),z1r=l(),Ws=a("li"),X0e=a("strong"),W1r=o("funnel"),Q1r=o(" \u2014 "),AH=a("a"),H1r=o("TFFunnelModel"),U1r=o(" or "),LH=a("a"),J1r=o("TFFunnelBaseModel"),Y1r=o(" (Funnel Transformer model)"),K1r=l(),g7=a("li"),z0e=a("strong"),Z1r=o("gpt2"),e2r=o(" \u2014 "),yH=a("a"),o2r=o("TFGPT2Model"),r2r=o(" (OpenAI GPT-2 model)"),t2r=l(),h7=a("li"),W0e=a("strong"),a2r=o("gptj"),n2r=o(" \u2014 "),xH=a("a"),s2r=o("TFGPTJModel"),l2r=o(" (GPT-J model)"),i2r=l(),p7=a("li"),Q0e=a("strong"),d2r=o("hubert"),c2r=o(" \u2014 "),$H=a("a"),f2r=o("TFHubertModel"),m2r=o(" (Hubert model)"),g2r=l(),_7=a("li"),H0e=a("strong"),h2r=o("layoutlm"),p2r=o(" \u2014 "),kH=a("a"),_2r=o("TFLayoutLMModel"),u2r=o(" (LayoutLM model)"),b2r=l(),u7=a("li"),U0e=a("strong"),v2r=o("led"),F2r=o(" \u2014 "),SH=a("a"),T2r=o("TFLEDModel"),M2r=o(" (LED model)"),E2r=l(),b7=a("li"),J0e=a("strong"),C2r=o("longformer"),w2r=o(" \u2014 "),RH=a("a"),A2r=o("TFLongformerModel"),L2r=o(" (Longformer model)"),y2r=l(),v7=a("li"),Y0e=a("strong"),x2r=o("lxmert"),$2r=o(" \u2014 "),PH=a("a"),k2r=o("TFLxmertModel"),S2r=o(" (LXMERT model)"),R2r=l(),F7=a("li"),K0e=a("strong"),P2r=o("marian"),B2r=o(" \u2014 "),BH=a("a"),I2r=o("TFMarianModel"),N2r=o(" (Marian model)"),q2r=l(),T7=a("li"),Z0e=a("strong"),j2r=o("mbart"),D2r=o(" \u2014 "),IH=a("a"),G2r=o("TFMBartModel"),O2r=o(" (mBART model)"),V2r=l(),M7=a("li"),eFe=a("strong"),X2r=o("mobilebert"),z2r=o(" \u2014 "),NH=a("a"),W2r=o("TFMobileBertModel"),Q2r=o(" (MobileBERT model)"),H2r=l(),E7=a("li"),oFe=a("strong"),U2r=o("mpnet"),J2r=o(" \u2014 "),qH=a("a"),Y2r=o("TFMPNetModel"),K2r=o(" (MPNet model)"),Z2r=l(),C7=a("li"),rFe=a("strong"),ebr=o("mt5"),obr=o(" \u2014 "),jH=a("a"),rbr=o("TFMT5Model"),tbr=o(" (MT5 model)"),abr=l(),w7=a("li"),tFe=a("strong"),nbr=o("openai-gpt"),sbr=o(" \u2014 "),DH=a("a"),lbr=o("TFOpenAIGPTModel"),ibr=o(" (OpenAI GPT model)"),dbr=l(),A7=a("li"),aFe=a("strong"),cbr=o("opt"),fbr=o(" \u2014 "),GH=a("a"),mbr=o("TFOPTModel"),gbr=o(" (OPT model)"),hbr=l(),L7=a("li"),nFe=a("strong"),pbr=o("pegasus"),_br=o(" \u2014 "),OH=a("a"),ubr=o("TFPegasusModel"),bbr=o(" (Pegasus model)"),vbr=l(),y7=a("li"),sFe=a("strong"),Fbr=o("rembert"),Tbr=o(" \u2014 "),VH=a("a"),Mbr=o("TFRemBertModel"),Ebr=o(" (RemBERT model)"),Cbr=l(),x7=a("li"),lFe=a("strong"),wbr=o("roberta"),Abr=o(" \u2014 "),XH=a("a"),Lbr=o("TFRobertaModel"),ybr=o(" (RoBERTa model)"),xbr=l(),$7=a("li"),iFe=a("strong"),$br=o("roformer"),kbr=o(" \u2014 "),zH=a("a"),Sbr=o("TFRoFormerModel"),Rbr=o(" (RoFormer model)"),Pbr=l(),k7=a("li"),dFe=a("strong"),Bbr=o("speech_to_text"),Ibr=o(" \u2014 "),WH=a("a"),Nbr=o("TFSpeech2TextModel"),qbr=o(" (Speech2Text model)"),jbr=l(),S7=a("li"),cFe=a("strong"),Dbr=o("swin"),Gbr=o(" \u2014 "),QH=a("a"),Obr=o("TFSwinModel"),Vbr=o(" (Swin Transformer model)"),Xbr=l(),R7=a("li"),fFe=a("strong"),zbr=o("t5"),Wbr=o(" \u2014 "),HH=a("a"),Qbr=o("TFT5Model"),Hbr=o(" (T5 model)"),Ubr=l(),P7=a("li"),mFe=a("strong"),Jbr=o("tapas"),Ybr=o(" \u2014 "),UH=a("a"),Kbr=o("TFTapasModel"),Zbr=o(" (TAPAS model)"),evr=l(),B7=a("li"),gFe=a("strong"),ovr=o("transfo-xl"),rvr=o(" \u2014 "),JH=a("a"),tvr=o("TFTransfoXLModel"),avr=o(" (Transformer-XL model)"),nvr=l(),I7=a("li"),hFe=a("strong"),svr=o("vit"),lvr=o(" \u2014 "),YH=a("a"),ivr=o("TFViTModel"),dvr=o(" (ViT model)"),cvr=l(),N7=a("li"),pFe=a("strong"),fvr=o("vit_mae"),mvr=o(" \u2014 "),KH=a("a"),gvr=o("TFViTMAEModel"),hvr=o(" (ViTMAE model)"),pvr=l(),q7=a("li"),_Fe=a("strong"),_vr=o("wav2vec2"),uvr=o(" \u2014 "),ZH=a("a"),bvr=o("TFWav2Vec2Model"),vvr=o(" (Wav2Vec2 model)"),Fvr=l(),j7=a("li"),uFe=a("strong"),Tvr=o("xlm"),Mvr=o(" \u2014 "),eU=a("a"),Evr=o("TFXLMModel"),Cvr=o(" (XLM model)"),wvr=l(),D7=a("li"),bFe=a("strong"),Avr=o("xlm-roberta"),Lvr=o(" \u2014 "),oU=a("a"),yvr=o("TFXLMRobertaModel"),xvr=o(" (XLM-RoBERTa model)"),$vr=l(),G7=a("li"),vFe=a("strong"),kvr=o("xlnet"),Svr=o(" \u2014 "),rU=a("a"),Rvr=o("TFXLNetModel"),Pvr=o(" (XLNet model)"),Bvr=l(),F(O7.$$.fragment),tVe=l(),nc=a("h2"),V7=a("a"),FFe=a("span"),F(M9.$$.fragment),Ivr=l(),TFe=a("span"),Nvr=o("TFAutoModelForPreTraining"),aVe=l(),or=a("div"),F(E9.$$.fragment),qvr=l(),sc=a("p"),jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tU=a("a"),Dvr=o("from_pretrained()"),Gvr=o(" class method or the "),aU=a("a"),Ovr=o("from_config()"),Vvr=o(` class
method.`),Xvr=l(),C9=a("p"),zvr=o("This class cannot be instantiated directly using "),MFe=a("code"),Wvr=o("__init__()"),Qvr=o(" (throws an error)."),Hvr=l(),St=a("div"),F(w9.$$.fragment),Uvr=l(),EFe=a("p"),Jvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yvr=l(),lc=a("p"),Kvr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),Zvr=o("not"),e0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),o0r=o("from_pretrained()"),r0r=o(" to load the model weights."),t0r=l(),F(X7.$$.fragment),a0r=l(),xr=a("div"),F(A9.$$.fragment),n0r=l(),wFe=a("p"),s0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l0r=l(),sn=a("p"),i0r=o("The model class to instantiate is selected based on the "),AFe=a("code"),d0r=o("model_type"),c0r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),g0r=o("pretrained_model_name_or_path"),h0r=o(":"),p0r=l(),se=a("ul"),z7=a("li"),xFe=a("strong"),_0r=o("albert"),u0r=o(" \u2014 "),sU=a("a"),b0r=o("TFAlbertForPreTraining"),v0r=o(" (ALBERT model)"),F0r=l(),W7=a("li"),$Fe=a("strong"),T0r=o("bart"),M0r=o(" \u2014 "),lU=a("a"),E0r=o("TFBartForConditionalGeneration"),C0r=o(" (BART model)"),w0r=l(),Q7=a("li"),kFe=a("strong"),A0r=o("bert"),L0r=o(" \u2014 "),iU=a("a"),y0r=o("TFBertForPreTraining"),x0r=o(" (BERT model)"),$0r=l(),H7=a("li"),SFe=a("strong"),k0r=o("camembert"),S0r=o(" \u2014 "),dU=a("a"),R0r=o("TFCamembertForMaskedLM"),P0r=o(" (CamemBERT model)"),B0r=l(),U7=a("li"),RFe=a("strong"),I0r=o("ctrl"),N0r=o(" \u2014 "),cU=a("a"),q0r=o("TFCTRLLMHeadModel"),j0r=o(" (CTRL model)"),D0r=l(),J7=a("li"),PFe=a("strong"),G0r=o("distilbert"),O0r=o(" \u2014 "),fU=a("a"),V0r=o("TFDistilBertForMaskedLM"),X0r=o(" (DistilBERT model)"),z0r=l(),Y7=a("li"),BFe=a("strong"),W0r=o("electra"),Q0r=o(" \u2014 "),mU=a("a"),H0r=o("TFElectraForPreTraining"),U0r=o(" (ELECTRA model)"),J0r=l(),K7=a("li"),IFe=a("strong"),Y0r=o("flaubert"),K0r=o(" \u2014 "),gU=a("a"),Z0r=o("TFFlaubertWithLMHeadModel"),eFr=o(" (FlauBERT model)"),oFr=l(),Z7=a("li"),NFe=a("strong"),rFr=o("funnel"),tFr=o(" \u2014 "),hU=a("a"),aFr=o("TFFunnelForPreTraining"),nFr=o(" (Funnel Transformer model)"),sFr=l(),e8=a("li"),qFe=a("strong"),lFr=o("gpt2"),iFr=o(" \u2014 "),pU=a("a"),dFr=o("TFGPT2LMHeadModel"),cFr=o(" (OpenAI GPT-2 model)"),fFr=l(),o8=a("li"),jFe=a("strong"),mFr=o("layoutlm"),gFr=o(" \u2014 "),_U=a("a"),hFr=o("TFLayoutLMForMaskedLM"),pFr=o(" (LayoutLM model)"),_Fr=l(),r8=a("li"),DFe=a("strong"),uFr=o("lxmert"),bFr=o(" \u2014 "),uU=a("a"),vFr=o("TFLxmertForPreTraining"),FFr=o(" (LXMERT model)"),TFr=l(),t8=a("li"),GFe=a("strong"),MFr=o("mobilebert"),EFr=o(" \u2014 "),bU=a("a"),CFr=o("TFMobileBertForPreTraining"),wFr=o(" (MobileBERT model)"),AFr=l(),a8=a("li"),OFe=a("strong"),LFr=o("mpnet"),yFr=o(" \u2014 "),vU=a("a"),xFr=o("TFMPNetForMaskedLM"),$Fr=o(" (MPNet model)"),kFr=l(),n8=a("li"),VFe=a("strong"),SFr=o("openai-gpt"),RFr=o(" \u2014 "),FU=a("a"),PFr=o("TFOpenAIGPTLMHeadModel"),BFr=o(" (OpenAI GPT model)"),IFr=l(),s8=a("li"),XFe=a("strong"),NFr=o("roberta"),qFr=o(" \u2014 "),TU=a("a"),jFr=o("TFRobertaForMaskedLM"),DFr=o(" (RoBERTa model)"),GFr=l(),l8=a("li"),zFe=a("strong"),OFr=o("t5"),VFr=o(" \u2014 "),MU=a("a"),XFr=o("TFT5ForConditionalGeneration"),zFr=o(" (T5 model)"),WFr=l(),i8=a("li"),WFe=a("strong"),QFr=o("tapas"),HFr=o(" \u2014 "),EU=a("a"),UFr=o("TFTapasForMaskedLM"),JFr=o(" (TAPAS model)"),YFr=l(),d8=a("li"),QFe=a("strong"),KFr=o("transfo-xl"),ZFr=o(" \u2014 "),CU=a("a"),e6r=o("TFTransfoXLLMHeadModel"),o6r=o(" (Transformer-XL model)"),r6r=l(),c8=a("li"),HFe=a("strong"),t6r=o("vit_mae"),a6r=o(" \u2014 "),wU=a("a"),n6r=o("TFViTMAEForPreTraining"),s6r=o(" (ViTMAE model)"),l6r=l(),f8=a("li"),UFe=a("strong"),i6r=o("xlm"),d6r=o(" \u2014 "),AU=a("a"),c6r=o("TFXLMWithLMHeadModel"),f6r=o(" (XLM model)"),m6r=l(),m8=a("li"),JFe=a("strong"),g6r=o("xlm-roberta"),h6r=o(" \u2014 "),LU=a("a"),p6r=o("TFXLMRobertaForMaskedLM"),_6r=o(" (XLM-RoBERTa model)"),u6r=l(),g8=a("li"),YFe=a("strong"),b6r=o("xlnet"),v6r=o(" \u2014 "),yU=a("a"),F6r=o("TFXLNetLMHeadModel"),T6r=o(" (XLNet model)"),M6r=l(),F(h8.$$.fragment),nVe=l(),ic=a("h2"),p8=a("a"),KFe=a("span"),F(L9.$$.fragment),E6r=l(),ZFe=a("span"),C6r=o("TFAutoModelForCausalLM"),sVe=l(),rr=a("div"),F(y9.$$.fragment),w6r=l(),dc=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xU=a("a"),L6r=o("from_pretrained()"),y6r=o(" class method or the "),$U=a("a"),x6r=o("from_config()"),$6r=o(` class
method.`),k6r=l(),x9=a("p"),S6r=o("This class cannot be instantiated directly using "),e6e=a("code"),R6r=o("__init__()"),P6r=o(" (throws an error)."),B6r=l(),Rt=a("div"),F($9.$$.fragment),I6r=l(),o6e=a("p"),N6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q6r=l(),cc=a("p"),j6r=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),D6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),O6r=o("from_pretrained()"),V6r=o(" to load the model weights."),X6r=l(),F(_8.$$.fragment),z6r=l(),$r=a("div"),F(k9.$$.fragment),W6r=l(),t6e=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H6r=l(),ln=a("p"),U6r=o("The model class to instantiate is selected based on the "),a6e=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(":"),rTr=l(),Me=a("ul"),u8=a("li"),l6e=a("strong"),tTr=o("bert"),aTr=o(" \u2014 "),SU=a("a"),nTr=o("TFBertLMHeadModel"),sTr=o(" (BERT model)"),lTr=l(),b8=a("li"),i6e=a("strong"),iTr=o("camembert"),dTr=o(" \u2014 "),RU=a("a"),cTr=o("TFCamembertForCausalLM"),fTr=o(" (CamemBERT model)"),mTr=l(),v8=a("li"),d6e=a("strong"),gTr=o("ctrl"),hTr=o(" \u2014 "),PU=a("a"),pTr=o("TFCTRLLMHeadModel"),_Tr=o(" (CTRL model)"),uTr=l(),F8=a("li"),c6e=a("strong"),bTr=o("gpt2"),vTr=o(" \u2014 "),BU=a("a"),FTr=o("TFGPT2LMHeadModel"),TTr=o(" (OpenAI GPT-2 model)"),MTr=l(),T8=a("li"),f6e=a("strong"),ETr=o("gptj"),CTr=o(" \u2014 "),IU=a("a"),wTr=o("TFGPTJForCausalLM"),ATr=o(" (GPT-J model)"),LTr=l(),M8=a("li"),m6e=a("strong"),yTr=o("openai-gpt"),xTr=o(" \u2014 "),NU=a("a"),$Tr=o("TFOpenAIGPTLMHeadModel"),kTr=o(" (OpenAI GPT model)"),STr=l(),E8=a("li"),g6e=a("strong"),RTr=o("opt"),PTr=o(" \u2014 "),qU=a("a"),BTr=o("TFOPTForCausalLM"),ITr=o(" (OPT model)"),NTr=l(),C8=a("li"),h6e=a("strong"),qTr=o("rembert"),jTr=o(" \u2014 "),jU=a("a"),DTr=o("TFRemBertForCausalLM"),GTr=o(" (RemBERT model)"),OTr=l(),w8=a("li"),p6e=a("strong"),VTr=o("roberta"),XTr=o(" \u2014 "),DU=a("a"),zTr=o("TFRobertaForCausalLM"),WTr=o(" (RoBERTa model)"),QTr=l(),A8=a("li"),_6e=a("strong"),HTr=o("roformer"),UTr=o(" \u2014 "),GU=a("a"),JTr=o("TFRoFormerForCausalLM"),YTr=o(" (RoFormer model)"),KTr=l(),L8=a("li"),u6e=a("strong"),ZTr=o("transfo-xl"),e7r=o(" \u2014 "),OU=a("a"),o7r=o("TFTransfoXLLMHeadModel"),r7r=o(" (Transformer-XL model)"),t7r=l(),y8=a("li"),b6e=a("strong"),a7r=o("xlm"),n7r=o(" \u2014 "),VU=a("a"),s7r=o("TFXLMWithLMHeadModel"),l7r=o(" (XLM model)"),i7r=l(),x8=a("li"),v6e=a("strong"),d7r=o("xlnet"),c7r=o(" \u2014 "),XU=a("a"),f7r=o("TFXLNetLMHeadModel"),m7r=o(" (XLNet model)"),g7r=l(),F($8.$$.fragment),lVe=l(),fc=a("h2"),k8=a("a"),F6e=a("span"),F(S9.$$.fragment),h7r=l(),T6e=a("span"),p7r=o("TFAutoModelForImageClassification"),iVe=l(),tr=a("div"),F(R9.$$.fragment),_7r=l(),mc=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zU=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),WU=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),P9=a("p"),E7r=o("This class cannot be instantiated directly using "),M6e=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),Pt=a("div"),F(B9.$$.fragment),L7r=l(),E6e=a("p"),y7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x7r=l(),gc=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),R7r=o("from_pretrained()"),P7r=o(" to load the model weights."),B7r=l(),F(S8.$$.fragment),I7r=l(),kr=a("div"),F(I9.$$.fragment),N7r=l(),w6e=a("p"),q7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j7r=l(),dn=a("p"),D7r=o("The model class to instantiate is selected based on the "),A6e=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),L6e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),rt=a("ul"),R8=a("li"),x6e=a("strong"),H7r=o("convnext"),U7r=o(" \u2014 "),HU=a("a"),J7r=o("TFConvNextForImageClassification"),Y7r=o(" (ConvNeXT model)"),K7r=l(),P8=a("li"),$6e=a("strong"),Z7r=o("data2vec-vision"),e8r=o(" \u2014 "),UU=a("a"),o8r=o("TFData2VecVisionForImageClassification"),r8r=o(" (Data2VecVision model)"),t8r=l(),Qs=a("li"),k6e=a("strong"),a8r=o("deit"),n8r=o(" \u2014 "),JU=a("a"),s8r=o("TFDeiTForImageClassification"),l8r=o(" or "),YU=a("a"),i8r=o("TFDeiTForImageClassificationWithTeacher"),d8r=o(" (DeiT model)"),c8r=l(),B8=a("li"),S6e=a("strong"),f8r=o("swin"),m8r=o(" \u2014 "),KU=a("a"),g8r=o("TFSwinForImageClassification"),h8r=o(" (Swin Transformer model)"),p8r=l(),I8=a("li"),R6e=a("strong"),_8r=o("vit"),u8r=o(" \u2014 "),ZU=a("a"),b8r=o("TFViTForImageClassification"),v8r=o(" (ViT model)"),F8r=l(),F(N8.$$.fragment),dVe=l(),hc=a("h2"),q8=a("a"),P6e=a("span"),F(N9.$$.fragment),T8r=l(),B6e=a("span"),M8r=o("TFAutoModelForMaskedLM"),cVe=l(),ar=a("div"),F(q9.$$.fragment),E8r=l(),pc=a("p"),C8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" class method or the "),oJ=a("a"),L8r=o("from_config()"),y8r=o(` class
method.`),x8r=l(),j9=a("p"),$8r=o("This class cannot be instantiated directly using "),I6e=a("code"),k8r=o("__init__()"),S8r=o(" (throws an error)."),R8r=l(),Bt=a("div"),F(D9.$$.fragment),P8r=l(),N6e=a("p"),B8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I8r=l(),_c=a("p"),N8r=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),q8r=o("not"),j8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),D8r=o("from_pretrained()"),G8r=o(" to load the model weights."),O8r=l(),F(j8.$$.fragment),V8r=l(),Sr=a("div"),F(G9.$$.fragment),X8r=l(),j6e=a("p"),z8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W8r=l(),cn=a("p"),Q8r=o("The model class to instantiate is selected based on the "),D6e=a("code"),H8r=o("model_type"),U8r=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(":"),eMr=l(),ie=a("ul"),D8=a("li"),V6e=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),tJ=a("a"),tMr=o("TFAlbertForMaskedLM"),aMr=o(" (ALBERT model)"),nMr=l(),G8=a("li"),X6e=a("strong"),sMr=o("bert"),lMr=o(" \u2014 "),aJ=a("a"),iMr=o("TFBertForMaskedLM"),dMr=o(" (BERT model)"),cMr=l(),O8=a("li"),z6e=a("strong"),fMr=o("camembert"),mMr=o(" \u2014 "),nJ=a("a"),gMr=o("TFCamembertForMaskedLM"),hMr=o(" (CamemBERT model)"),pMr=l(),V8=a("li"),W6e=a("strong"),_Mr=o("convbert"),uMr=o(" \u2014 "),sJ=a("a"),bMr=o("TFConvBertForMaskedLM"),vMr=o(" (ConvBERT model)"),FMr=l(),X8=a("li"),Q6e=a("strong"),TMr=o("deberta"),MMr=o(" \u2014 "),lJ=a("a"),EMr=o("TFDebertaForMaskedLM"),CMr=o(" (DeBERTa model)"),wMr=l(),z8=a("li"),H6e=a("strong"),AMr=o("deberta-v2"),LMr=o(" \u2014 "),iJ=a("a"),yMr=o("TFDebertaV2ForMaskedLM"),xMr=o(" (DeBERTa-v2 model)"),$Mr=l(),W8=a("li"),U6e=a("strong"),kMr=o("distilbert"),SMr=o(" \u2014 "),dJ=a("a"),RMr=o("TFDistilBertForMaskedLM"),PMr=o(" (DistilBERT model)"),BMr=l(),Q8=a("li"),J6e=a("strong"),IMr=o("electra"),NMr=o(" \u2014 "),cJ=a("a"),qMr=o("TFElectraForMaskedLM"),jMr=o(" (ELECTRA model)"),DMr=l(),H8=a("li"),Y6e=a("strong"),GMr=o("flaubert"),OMr=o(" \u2014 "),fJ=a("a"),VMr=o("TFFlaubertWithLMHeadModel"),XMr=o(" (FlauBERT model)"),zMr=l(),U8=a("li"),K6e=a("strong"),WMr=o("funnel"),QMr=o(" \u2014 "),mJ=a("a"),HMr=o("TFFunnelForMaskedLM"),UMr=o(" (Funnel Transformer model)"),JMr=l(),J8=a("li"),Z6e=a("strong"),YMr=o("layoutlm"),KMr=o(" \u2014 "),gJ=a("a"),ZMr=o("TFLayoutLMForMaskedLM"),eEr=o(" (LayoutLM model)"),oEr=l(),Y8=a("li"),eTe=a("strong"),rEr=o("longformer"),tEr=o(" \u2014 "),hJ=a("a"),aEr=o("TFLongformerForMaskedLM"),nEr=o(" (Longformer model)"),sEr=l(),K8=a("li"),oTe=a("strong"),lEr=o("mobilebert"),iEr=o(" \u2014 "),pJ=a("a"),dEr=o("TFMobileBertForMaskedLM"),cEr=o(" (MobileBERT model)"),fEr=l(),Z8=a("li"),rTe=a("strong"),mEr=o("mpnet"),gEr=o(" \u2014 "),_J=a("a"),hEr=o("TFMPNetForMaskedLM"),pEr=o(" (MPNet model)"),_Er=l(),eM=a("li"),tTe=a("strong"),uEr=o("rembert"),bEr=o(" \u2014 "),uJ=a("a"),vEr=o("TFRemBertForMaskedLM"),FEr=o(" (RemBERT model)"),TEr=l(),oM=a("li"),aTe=a("strong"),MEr=o("roberta"),EEr=o(" \u2014 "),bJ=a("a"),CEr=o("TFRobertaForMaskedLM"),wEr=o(" (RoBERTa model)"),AEr=l(),rM=a("li"),nTe=a("strong"),LEr=o("roformer"),yEr=o(" \u2014 "),vJ=a("a"),xEr=o("TFRoFormerForMaskedLM"),$Er=o(" (RoFormer model)"),kEr=l(),tM=a("li"),sTe=a("strong"),SEr=o("tapas"),REr=o(" \u2014 "),FJ=a("a"),PEr=o("TFTapasForMaskedLM"),BEr=o(" (TAPAS model)"),IEr=l(),aM=a("li"),lTe=a("strong"),NEr=o("xlm"),qEr=o(" \u2014 "),TJ=a("a"),jEr=o("TFXLMWithLMHeadModel"),DEr=o(" (XLM model)"),GEr=l(),nM=a("li"),iTe=a("strong"),OEr=o("xlm-roberta"),VEr=o(" \u2014 "),MJ=a("a"),XEr=o("TFXLMRobertaForMaskedLM"),zEr=o(" (XLM-RoBERTa model)"),WEr=l(),F(sM.$$.fragment),fVe=l(),uc=a("h2"),lM=a("a"),dTe=a("span"),F(O9.$$.fragment),QEr=l(),cTe=a("span"),HEr=o("TFAutoModelForSeq2SeqLM"),mVe=l(),nr=a("div"),F(V9.$$.fragment),UEr=l(),bc=a("p"),JEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=a("a"),YEr=o("from_pretrained()"),KEr=o(" class method or the "),CJ=a("a"),ZEr=o("from_config()"),e4r=o(` class
method.`),o4r=l(),X9=a("p"),r4r=o("This class cannot be instantiated directly using "),fTe=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),It=a("div"),F(z9.$$.fragment),s4r=l(),mTe=a("p"),l4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i4r=l(),vc=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),m4r=o("from_pretrained()"),g4r=o(" to load the model weights."),h4r=l(),F(iM.$$.fragment),p4r=l(),Rr=a("div"),F(W9.$$.fragment),_4r=l(),hTe=a("p"),u4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b4r=l(),fn=a("p"),v4r=o("The model class to instantiate is selected based on the "),pTe=a("code"),F4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),C4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),ye=a("ul"),dM=a("li"),bTe=a("strong"),L4r=o("bart"),y4r=o(" \u2014 "),AJ=a("a"),x4r=o("TFBartForConditionalGeneration"),$4r=o(" (BART model)"),k4r=l(),cM=a("li"),vTe=a("strong"),S4r=o("blenderbot"),R4r=o(" \u2014 "),LJ=a("a"),P4r=o("TFBlenderbotForConditionalGeneration"),B4r=o(" (Blenderbot model)"),I4r=l(),fM=a("li"),FTe=a("strong"),N4r=o("blenderbot-small"),q4r=o(" \u2014 "),yJ=a("a"),j4r=o("TFBlenderbotSmallForConditionalGeneration"),D4r=o(" (BlenderbotSmall model)"),G4r=l(),mM=a("li"),TTe=a("strong"),O4r=o("encoder-decoder"),V4r=o(" \u2014 "),xJ=a("a"),X4r=o("TFEncoderDecoderModel"),z4r=o(" (Encoder decoder model)"),W4r=l(),gM=a("li"),MTe=a("strong"),Q4r=o("led"),H4r=o(" \u2014 "),$J=a("a"),U4r=o("TFLEDForConditionalGeneration"),J4r=o(" (LED model)"),Y4r=l(),hM=a("li"),ETe=a("strong"),K4r=o("marian"),Z4r=o(" \u2014 "),kJ=a("a"),eCr=o("TFMarianMTModel"),oCr=o(" (Marian model)"),rCr=l(),pM=a("li"),CTe=a("strong"),tCr=o("mbart"),aCr=o(" \u2014 "),SJ=a("a"),nCr=o("TFMBartForConditionalGeneration"),sCr=o(" (mBART model)"),lCr=l(),_M=a("li"),wTe=a("strong"),iCr=o("mt5"),dCr=o(" \u2014 "),RJ=a("a"),cCr=o("TFMT5ForConditionalGeneration"),fCr=o(" (MT5 model)"),mCr=l(),uM=a("li"),ATe=a("strong"),gCr=o("pegasus"),hCr=o(" \u2014 "),PJ=a("a"),pCr=o("TFPegasusForConditionalGeneration"),_Cr=o(" (Pegasus model)"),uCr=l(),bM=a("li"),LTe=a("strong"),bCr=o("t5"),vCr=o(" \u2014 "),BJ=a("a"),FCr=o("TFT5ForConditionalGeneration"),TCr=o(" (T5 model)"),MCr=l(),F(vM.$$.fragment),gVe=l(),Fc=a("h2"),FM=a("a"),yTe=a("span"),F(Q9.$$.fragment),ECr=l(),xTe=a("span"),CCr=o("TFAutoModelForSequenceClassification"),hVe=l(),sr=a("div"),F(H9.$$.fragment),wCr=l(),Tc=a("p"),ACr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IJ=a("a"),LCr=o("from_pretrained()"),yCr=o(" class method or the "),NJ=a("a"),xCr=o("from_config()"),$Cr=o(` class
method.`),kCr=l(),U9=a("p"),SCr=o("This class cannot be instantiated directly using "),$Te=a("code"),RCr=o("__init__()"),PCr=o(" (throws an error)."),BCr=l(),Nt=a("div"),F(J9.$$.fragment),ICr=l(),kTe=a("p"),NCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qCr=l(),Mc=a("p"),jCr=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),DCr=o("not"),GCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),OCr=o("from_pretrained()"),VCr=o(" to load the model weights."),XCr=l(),F(TM.$$.fragment),zCr=l(),Pr=a("div"),F(Y9.$$.fragment),WCr=l(),RTe=a("p"),QCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HCr=l(),mn=a("p"),UCr=o("The model class to instantiate is selected based on the "),PTe=a("code"),JCr=o("model_type"),YCr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),e5r=o("pretrained_model_name_or_path"),o5r=o(":"),r5r=l(),te=a("ul"),MM=a("li"),NTe=a("strong"),t5r=o("albert"),a5r=o(" \u2014 "),jJ=a("a"),n5r=o("TFAlbertForSequenceClassification"),s5r=o(" (ALBERT model)"),l5r=l(),EM=a("li"),qTe=a("strong"),i5r=o("bert"),d5r=o(" \u2014 "),DJ=a("a"),c5r=o("TFBertForSequenceClassification"),f5r=o(" (BERT model)"),m5r=l(),CM=a("li"),jTe=a("strong"),g5r=o("camembert"),h5r=o(" \u2014 "),GJ=a("a"),p5r=o("TFCamembertForSequenceClassification"),_5r=o(" (CamemBERT model)"),u5r=l(),wM=a("li"),DTe=a("strong"),b5r=o("convbert"),v5r=o(" \u2014 "),OJ=a("a"),F5r=o("TFConvBertForSequenceClassification"),T5r=o(" (ConvBERT model)"),M5r=l(),AM=a("li"),GTe=a("strong"),E5r=o("ctrl"),C5r=o(" \u2014 "),VJ=a("a"),w5r=o("TFCTRLForSequenceClassification"),A5r=o(" (CTRL model)"),L5r=l(),LM=a("li"),OTe=a("strong"),y5r=o("deberta"),x5r=o(" \u2014 "),XJ=a("a"),$5r=o("TFDebertaForSequenceClassification"),k5r=o(" (DeBERTa model)"),S5r=l(),yM=a("li"),VTe=a("strong"),R5r=o("deberta-v2"),P5r=o(" \u2014 "),zJ=a("a"),B5r=o("TFDebertaV2ForSequenceClassification"),I5r=o(" (DeBERTa-v2 model)"),N5r=l(),xM=a("li"),XTe=a("strong"),q5r=o("distilbert"),j5r=o(" \u2014 "),WJ=a("a"),D5r=o("TFDistilBertForSequenceClassification"),G5r=o(" (DistilBERT model)"),O5r=l(),$M=a("li"),zTe=a("strong"),V5r=o("electra"),X5r=o(" \u2014 "),QJ=a("a"),z5r=o("TFElectraForSequenceClassification"),W5r=o(" (ELECTRA model)"),Q5r=l(),kM=a("li"),WTe=a("strong"),H5r=o("flaubert"),U5r=o(" \u2014 "),HJ=a("a"),J5r=o("TFFlaubertForSequenceClassification"),Y5r=o(" (FlauBERT model)"),K5r=l(),SM=a("li"),QTe=a("strong"),Z5r=o("funnel"),e3r=o(" \u2014 "),UJ=a("a"),o3r=o("TFFunnelForSequenceClassification"),r3r=o(" (Funnel Transformer model)"),t3r=l(),RM=a("li"),HTe=a("strong"),a3r=o("gpt2"),n3r=o(" \u2014 "),JJ=a("a"),s3r=o("TFGPT2ForSequenceClassification"),l3r=o(" (OpenAI GPT-2 model)"),i3r=l(),PM=a("li"),UTe=a("strong"),d3r=o("gptj"),c3r=o(" \u2014 "),YJ=a("a"),f3r=o("TFGPTJForSequenceClassification"),m3r=o(" (GPT-J model)"),g3r=l(),BM=a("li"),JTe=a("strong"),h3r=o("layoutlm"),p3r=o(" \u2014 "),KJ=a("a"),_3r=o("TFLayoutLMForSequenceClassification"),u3r=o(" (LayoutLM model)"),b3r=l(),IM=a("li"),YTe=a("strong"),v3r=o("longformer"),F3r=o(" \u2014 "),ZJ=a("a"),T3r=o("TFLongformerForSequenceClassification"),M3r=o(" (Longformer model)"),E3r=l(),NM=a("li"),KTe=a("strong"),C3r=o("mobilebert"),w3r=o(" \u2014 "),eY=a("a"),A3r=o("TFMobileBertForSequenceClassification"),L3r=o(" (MobileBERT model)"),y3r=l(),qM=a("li"),ZTe=a("strong"),x3r=o("mpnet"),$3r=o(" \u2014 "),oY=a("a"),k3r=o("TFMPNetForSequenceClassification"),S3r=o(" (MPNet model)"),R3r=l(),jM=a("li"),e7e=a("strong"),P3r=o("openai-gpt"),B3r=o(" \u2014 "),rY=a("a"),I3r=o("TFOpenAIGPTForSequenceClassification"),N3r=o(" (OpenAI GPT model)"),q3r=l(),DM=a("li"),o7e=a("strong"),j3r=o("rembert"),D3r=o(" \u2014 "),tY=a("a"),G3r=o("TFRemBertForSequenceClassification"),O3r=o(" (RemBERT model)"),V3r=l(),GM=a("li"),r7e=a("strong"),X3r=o("roberta"),z3r=o(" \u2014 "),aY=a("a"),W3r=o("TFRobertaForSequenceClassification"),Q3r=o(" (RoBERTa model)"),H3r=l(),OM=a("li"),t7e=a("strong"),U3r=o("roformer"),J3r=o(" \u2014 "),nY=a("a"),Y3r=o("TFRoFormerForSequenceClassification"),K3r=o(" (RoFormer model)"),Z3r=l(),VM=a("li"),a7e=a("strong"),ewr=o("tapas"),owr=o(" \u2014 "),sY=a("a"),rwr=o("TFTapasForSequenceClassification"),twr=o(" (TAPAS model)"),awr=l(),XM=a("li"),n7e=a("strong"),nwr=o("transfo-xl"),swr=o(" \u2014 "),lY=a("a"),lwr=o("TFTransfoXLForSequenceClassification"),iwr=o(" (Transformer-XL model)"),dwr=l(),zM=a("li"),s7e=a("strong"),cwr=o("xlm"),fwr=o(" \u2014 "),iY=a("a"),mwr=o("TFXLMForSequenceClassification"),gwr=o(" (XLM model)"),hwr=l(),WM=a("li"),l7e=a("strong"),pwr=o("xlm-roberta"),_wr=o(" \u2014 "),dY=a("a"),uwr=o("TFXLMRobertaForSequenceClassification"),bwr=o(" (XLM-RoBERTa model)"),vwr=l(),QM=a("li"),i7e=a("strong"),Fwr=o("xlnet"),Twr=o(" \u2014 "),cY=a("a"),Mwr=o("TFXLNetForSequenceClassification"),Ewr=o(" (XLNet model)"),Cwr=l(),F(HM.$$.fragment),pVe=l(),Ec=a("h2"),UM=a("a"),d7e=a("span"),F(K9.$$.fragment),wwr=l(),c7e=a("span"),Awr=o("TFAutoModelForMultipleChoice"),_Ve=l(),lr=a("div"),F(Z9.$$.fragment),Lwr=l(),Cc=a("p"),ywr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fY=a("a"),xwr=o("from_pretrained()"),$wr=o(" class method or the "),mY=a("a"),kwr=o("from_config()"),Swr=o(` class
method.`),Rwr=l(),ex=a("p"),Pwr=o("This class cannot be instantiated directly using "),f7e=a("code"),Bwr=o("__init__()"),Iwr=o(" (throws an error)."),Nwr=l(),qt=a("div"),F(ox.$$.fragment),qwr=l(),m7e=a("p"),jwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dwr=l(),wc=a("p"),Gwr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),Owr=o("not"),Vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),Xwr=o("from_pretrained()"),zwr=o(" to load the model weights."),Wwr=l(),F(JM.$$.fragment),Qwr=l(),Br=a("div"),F(rx.$$.fragment),Hwr=l(),h7e=a("p"),Uwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jwr=l(),gn=a("p"),Ywr=o("The model class to instantiate is selected based on the "),p7e=a("code"),Kwr=o("model_type"),Zwr=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(":"),aAr=l(),_e=a("ul"),YM=a("li"),b7e=a("strong"),nAr=o("albert"),sAr=o(" \u2014 "),hY=a("a"),lAr=o("TFAlbertForMultipleChoice"),iAr=o(" (ALBERT model)"),dAr=l(),KM=a("li"),v7e=a("strong"),cAr=o("bert"),fAr=o(" \u2014 "),pY=a("a"),mAr=o("TFBertForMultipleChoice"),gAr=o(" (BERT model)"),hAr=l(),ZM=a("li"),F7e=a("strong"),pAr=o("camembert"),_Ar=o(" \u2014 "),_Y=a("a"),uAr=o("TFCamembertForMultipleChoice"),bAr=o(" (CamemBERT model)"),vAr=l(),eE=a("li"),T7e=a("strong"),FAr=o("convbert"),TAr=o(" \u2014 "),uY=a("a"),MAr=o("TFConvBertForMultipleChoice"),EAr=o(" (ConvBERT model)"),CAr=l(),oE=a("li"),M7e=a("strong"),wAr=o("distilbert"),AAr=o(" \u2014 "),bY=a("a"),LAr=o("TFDistilBertForMultipleChoice"),yAr=o(" (DistilBERT model)"),xAr=l(),rE=a("li"),E7e=a("strong"),$Ar=o("electra"),kAr=o(" \u2014 "),vY=a("a"),SAr=o("TFElectraForMultipleChoice"),RAr=o(" (ELECTRA model)"),PAr=l(),tE=a("li"),C7e=a("strong"),BAr=o("flaubert"),IAr=o(" \u2014 "),FY=a("a"),NAr=o("TFFlaubertForMultipleChoice"),qAr=o(" (FlauBERT model)"),jAr=l(),aE=a("li"),w7e=a("strong"),DAr=o("funnel"),GAr=o(" \u2014 "),TY=a("a"),OAr=o("TFFunnelForMultipleChoice"),VAr=o(" (Funnel Transformer model)"),XAr=l(),nE=a("li"),A7e=a("strong"),zAr=o("longformer"),WAr=o(" \u2014 "),MY=a("a"),QAr=o("TFLongformerForMultipleChoice"),HAr=o(" (Longformer model)"),UAr=l(),sE=a("li"),L7e=a("strong"),JAr=o("mobilebert"),YAr=o(" \u2014 "),EY=a("a"),KAr=o("TFMobileBertForMultipleChoice"),ZAr=o(" (MobileBERT model)"),eLr=l(),lE=a("li"),y7e=a("strong"),oLr=o("mpnet"),rLr=o(" \u2014 "),CY=a("a"),tLr=o("TFMPNetForMultipleChoice"),aLr=o(" (MPNet model)"),nLr=l(),iE=a("li"),x7e=a("strong"),sLr=o("rembert"),lLr=o(" \u2014 "),wY=a("a"),iLr=o("TFRemBertForMultipleChoice"),dLr=o(" (RemBERT model)"),cLr=l(),dE=a("li"),$7e=a("strong"),fLr=o("roberta"),mLr=o(" \u2014 "),AY=a("a"),gLr=o("TFRobertaForMultipleChoice"),hLr=o(" (RoBERTa model)"),pLr=l(),cE=a("li"),k7e=a("strong"),_Lr=o("roformer"),uLr=o(" \u2014 "),LY=a("a"),bLr=o("TFRoFormerForMultipleChoice"),vLr=o(" (RoFormer model)"),FLr=l(),fE=a("li"),S7e=a("strong"),TLr=o("xlm"),MLr=o(" \u2014 "),yY=a("a"),ELr=o("TFXLMForMultipleChoice"),CLr=o(" (XLM model)"),wLr=l(),mE=a("li"),R7e=a("strong"),ALr=o("xlm-roberta"),LLr=o(" \u2014 "),xY=a("a"),yLr=o("TFXLMRobertaForMultipleChoice"),xLr=o(" (XLM-RoBERTa model)"),$Lr=l(),gE=a("li"),P7e=a("strong"),kLr=o("xlnet"),SLr=o(" \u2014 "),$Y=a("a"),RLr=o("TFXLNetForMultipleChoice"),PLr=o(" (XLNet model)"),BLr=l(),F(hE.$$.fragment),uVe=l(),Ac=a("h2"),pE=a("a"),B7e=a("span"),F(tx.$$.fragment),ILr=l(),I7e=a("span"),NLr=o("TFAutoModelForNextSentencePrediction"),bVe=l(),ir=a("div"),F(ax.$$.fragment),qLr=l(),Lc=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),SY=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),nx=a("p"),zLr=o("This class cannot be instantiated directly using "),N7e=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),HLr=l(),jt=a("div"),F(sx.$$.fragment),ULr=l(),q7e=a("p"),JLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YLr=l(),yc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),ZLr=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(_E.$$.fragment),ayr=l(),Ir=a("div"),F(lx.$$.fragment),nyr=l(),D7e=a("p"),syr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lyr=l(),hn=a("p"),iyr=o("The model class to instantiate is selected based on the "),G7e=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),pyr=l(),ix=a("ul"),uE=a("li"),X7e=a("strong"),_yr=o("bert"),uyr=o(" \u2014 "),PY=a("a"),byr=o("TFBertForNextSentencePrediction"),vyr=o(" (BERT model)"),Fyr=l(),bE=a("li"),z7e=a("strong"),Tyr=o("mobilebert"),Myr=o(" \u2014 "),BY=a("a"),Eyr=o("TFMobileBertForNextSentencePrediction"),Cyr=o(" (MobileBERT model)"),wyr=l(),F(vE.$$.fragment),vVe=l(),xc=a("h2"),FE=a("a"),W7e=a("span"),F(dx.$$.fragment),Ayr=l(),Q7e=a("span"),Lyr=o("TFAutoModelForTableQuestionAnswering"),FVe=l(),dr=a("div"),F(cx.$$.fragment),yyr=l(),$c=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IY=a("a"),$yr=o("from_pretrained()"),kyr=o(" class method or the "),NY=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Pyr=l(),fx=a("p"),Byr=o("This class cannot be instantiated directly using "),H7e=a("code"),Iyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),Dt=a("div"),F(mx.$$.fragment),jyr=l(),U7e=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Gyr=l(),kc=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),zyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Qyr=l(),F(TE.$$.fragment),Hyr=l(),Nr=a("div"),F(gx.$$.fragment),Uyr=l(),Y7e=a("p"),Jyr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yyr=l(),pn=a("p"),Kyr=o("The model class to instantiate is selected based on the "),K7e=a("code"),Zyr=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),o8e=a("ul"),ME=a("li"),r8e=a("strong"),s9r=o("tapas"),l9r=o(" \u2014 "),jY=a("a"),i9r=o("TFTapasForQuestionAnswering"),d9r=o(" (TAPAS model)"),c9r=l(),F(EE.$$.fragment),TVe=l(),Sc=a("h2"),CE=a("a"),t8e=a("span"),F(hx.$$.fragment),f9r=l(),a8e=a("span"),m9r=o("TFAutoModelForTokenClassification"),MVe=l(),cr=a("div"),F(px.$$.fragment),g9r=l(),Rc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DY=a("a"),p9r=o("from_pretrained()"),_9r=o(" class method or the "),GY=a("a"),u9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),_x=a("p"),F9r=o("This class cannot be instantiated directly using "),n8e=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Gt=a("div"),F(ux.$$.fragment),C9r=l(),s8e=a("p"),w9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A9r=l(),Pc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),l8e=a("strong"),y9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(wE.$$.fragment),R9r=l(),qr=a("div"),F(bx.$$.fragment),P9r=l(),i8e=a("p"),B9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I9r=l(),_n=a("p"),N9r=o("The model class to instantiate is selected based on the "),d8e=a("code"),q9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),c8e=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),de=a("ul"),AE=a("li"),m8e=a("strong"),z9r=o("albert"),W9r=o(" \u2014 "),VY=a("a"),Q9r=o("TFAlbertForTokenClassification"),H9r=o(" (ALBERT model)"),U9r=l(),LE=a("li"),g8e=a("strong"),J9r=o("bert"),Y9r=o(" \u2014 "),XY=a("a"),K9r=o("TFBertForTokenClassification"),Z9r=o(" (BERT model)"),exr=l(),yE=a("li"),h8e=a("strong"),oxr=o("camembert"),rxr=o(" \u2014 "),zY=a("a"),txr=o("TFCamembertForTokenClassification"),axr=o(" (CamemBERT model)"),nxr=l(),xE=a("li"),p8e=a("strong"),sxr=o("convbert"),lxr=o(" \u2014 "),WY=a("a"),ixr=o("TFConvBertForTokenClassification"),dxr=o(" (ConvBERT model)"),cxr=l(),$E=a("li"),_8e=a("strong"),fxr=o("deberta"),mxr=o(" \u2014 "),QY=a("a"),gxr=o("TFDebertaForTokenClassification"),hxr=o(" (DeBERTa model)"),pxr=l(),kE=a("li"),u8e=a("strong"),_xr=o("deberta-v2"),uxr=o(" \u2014 "),HY=a("a"),bxr=o("TFDebertaV2ForTokenClassification"),vxr=o(" (DeBERTa-v2 model)"),Fxr=l(),SE=a("li"),b8e=a("strong"),Txr=o("distilbert"),Mxr=o(" \u2014 "),UY=a("a"),Exr=o("TFDistilBertForTokenClassification"),Cxr=o(" (DistilBERT model)"),wxr=l(),RE=a("li"),v8e=a("strong"),Axr=o("electra"),Lxr=o(" \u2014 "),JY=a("a"),yxr=o("TFElectraForTokenClassification"),xxr=o(" (ELECTRA model)"),$xr=l(),PE=a("li"),F8e=a("strong"),kxr=o("flaubert"),Sxr=o(" \u2014 "),YY=a("a"),Rxr=o("TFFlaubertForTokenClassification"),Pxr=o(" (FlauBERT model)"),Bxr=l(),BE=a("li"),T8e=a("strong"),Ixr=o("funnel"),Nxr=o(" \u2014 "),KY=a("a"),qxr=o("TFFunnelForTokenClassification"),jxr=o(" (Funnel Transformer model)"),Dxr=l(),IE=a("li"),M8e=a("strong"),Gxr=o("layoutlm"),Oxr=o(" \u2014 "),ZY=a("a"),Vxr=o("TFLayoutLMForTokenClassification"),Xxr=o(" (LayoutLM model)"),zxr=l(),NE=a("li"),E8e=a("strong"),Wxr=o("longformer"),Qxr=o(" \u2014 "),eK=a("a"),Hxr=o("TFLongformerForTokenClassification"),Uxr=o(" (Longformer model)"),Jxr=l(),qE=a("li"),C8e=a("strong"),Yxr=o("mobilebert"),Kxr=o(" \u2014 "),oK=a("a"),Zxr=o("TFMobileBertForTokenClassification"),e$r=o(" (MobileBERT model)"),o$r=l(),jE=a("li"),w8e=a("strong"),r$r=o("mpnet"),t$r=o(" \u2014 "),rK=a("a"),a$r=o("TFMPNetForTokenClassification"),n$r=o(" (MPNet model)"),s$r=l(),DE=a("li"),A8e=a("strong"),l$r=o("rembert"),i$r=o(" \u2014 "),tK=a("a"),d$r=o("TFRemBertForTokenClassification"),c$r=o(" (RemBERT model)"),f$r=l(),GE=a("li"),L8e=a("strong"),m$r=o("roberta"),g$r=o(" \u2014 "),aK=a("a"),h$r=o("TFRobertaForTokenClassification"),p$r=o(" (RoBERTa model)"),_$r=l(),OE=a("li"),y8e=a("strong"),u$r=o("roformer"),b$r=o(" \u2014 "),nK=a("a"),v$r=o("TFRoFormerForTokenClassification"),F$r=o(" (RoFormer model)"),T$r=l(),VE=a("li"),x8e=a("strong"),M$r=o("xlm"),E$r=o(" \u2014 "),sK=a("a"),C$r=o("TFXLMForTokenClassification"),w$r=o(" (XLM model)"),A$r=l(),XE=a("li"),$8e=a("strong"),L$r=o("xlm-roberta"),y$r=o(" \u2014 "),lK=a("a"),x$r=o("TFXLMRobertaForTokenClassification"),$$r=o(" (XLM-RoBERTa model)"),k$r=l(),zE=a("li"),k8e=a("strong"),S$r=o("xlnet"),R$r=o(" \u2014 "),iK=a("a"),P$r=o("TFXLNetForTokenClassification"),B$r=o(" (XLNet model)"),I$r=l(),F(WE.$$.fragment),EVe=l(),Bc=a("h2"),QE=a("a"),S8e=a("span"),F(vx.$$.fragment),N$r=l(),R8e=a("span"),q$r=o("TFAutoModelForQuestionAnswering"),CVe=l(),fr=a("div"),F(Fx.$$.fragment),j$r=l(),Ic=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dK=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),cK=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),Tx=a("p"),W$r=o("This class cannot be instantiated directly using "),P8e=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Ot=a("div"),F(Mx.$$.fragment),J$r=l(),B8e=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K$r=l(),Nc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),I8e=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(HE.$$.fragment),nkr=l(),jr=a("div"),F(Ex.$$.fragment),skr=l(),N8e=a("p"),lkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ikr=l(),un=a("p"),dkr=o("The model class to instantiate is selected based on the "),q8e=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),j8e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),_kr=l(),ce=a("ul"),UE=a("li"),G8e=a("strong"),ukr=o("albert"),bkr=o(" \u2014 "),mK=a("a"),vkr=o("TFAlbertForQuestionAnswering"),Fkr=o(" (ALBERT model)"),Tkr=l(),JE=a("li"),O8e=a("strong"),Mkr=o("bert"),Ekr=o(" \u2014 "),gK=a("a"),Ckr=o("TFBertForQuestionAnswering"),wkr=o(" (BERT model)"),Akr=l(),YE=a("li"),V8e=a("strong"),Lkr=o("camembert"),ykr=o(" \u2014 "),hK=a("a"),xkr=o("TFCamembertForQuestionAnswering"),$kr=o(" (CamemBERT model)"),kkr=l(),KE=a("li"),X8e=a("strong"),Skr=o("convbert"),Rkr=o(" \u2014 "),pK=a("a"),Pkr=o("TFConvBertForQuestionAnswering"),Bkr=o(" (ConvBERT model)"),Ikr=l(),ZE=a("li"),z8e=a("strong"),Nkr=o("deberta"),qkr=o(" \u2014 "),_K=a("a"),jkr=o("TFDebertaForQuestionAnswering"),Dkr=o(" (DeBERTa model)"),Gkr=l(),e4=a("li"),W8e=a("strong"),Okr=o("deberta-v2"),Vkr=o(" \u2014 "),uK=a("a"),Xkr=o("TFDebertaV2ForQuestionAnswering"),zkr=o(" (DeBERTa-v2 model)"),Wkr=l(),o4=a("li"),Q8e=a("strong"),Qkr=o("distilbert"),Hkr=o(" \u2014 "),bK=a("a"),Ukr=o("TFDistilBertForQuestionAnswering"),Jkr=o(" (DistilBERT model)"),Ykr=l(),r4=a("li"),H8e=a("strong"),Kkr=o("electra"),Zkr=o(" \u2014 "),vK=a("a"),eSr=o("TFElectraForQuestionAnswering"),oSr=o(" (ELECTRA model)"),rSr=l(),t4=a("li"),U8e=a("strong"),tSr=o("flaubert"),aSr=o(" \u2014 "),FK=a("a"),nSr=o("TFFlaubertForQuestionAnsweringSimple"),sSr=o(" (FlauBERT model)"),lSr=l(),a4=a("li"),J8e=a("strong"),iSr=o("funnel"),dSr=o(" \u2014 "),TK=a("a"),cSr=o("TFFunnelForQuestionAnswering"),fSr=o(" (Funnel Transformer model)"),mSr=l(),n4=a("li"),Y8e=a("strong"),gSr=o("gptj"),hSr=o(" \u2014 "),MK=a("a"),pSr=o("TFGPTJForQuestionAnswering"),_Sr=o(" (GPT-J model)"),uSr=l(),s4=a("li"),K8e=a("strong"),bSr=o("longformer"),vSr=o(" \u2014 "),EK=a("a"),FSr=o("TFLongformerForQuestionAnswering"),TSr=o(" (Longformer model)"),MSr=l(),l4=a("li"),Z8e=a("strong"),ESr=o("mobilebert"),CSr=o(" \u2014 "),CK=a("a"),wSr=o("TFMobileBertForQuestionAnswering"),ASr=o(" (MobileBERT model)"),LSr=l(),i4=a("li"),eMe=a("strong"),ySr=o("mpnet"),xSr=o(" \u2014 "),wK=a("a"),$Sr=o("TFMPNetForQuestionAnswering"),kSr=o(" (MPNet model)"),SSr=l(),d4=a("li"),oMe=a("strong"),RSr=o("rembert"),PSr=o(" \u2014 "),AK=a("a"),BSr=o("TFRemBertForQuestionAnswering"),ISr=o(" (RemBERT model)"),NSr=l(),c4=a("li"),rMe=a("strong"),qSr=o("roberta"),jSr=o(" \u2014 "),LK=a("a"),DSr=o("TFRobertaForQuestionAnswering"),GSr=o(" (RoBERTa model)"),OSr=l(),f4=a("li"),tMe=a("strong"),VSr=o("roformer"),XSr=o(" \u2014 "),yK=a("a"),zSr=o("TFRoFormerForQuestionAnswering"),WSr=o(" (RoFormer model)"),QSr=l(),m4=a("li"),aMe=a("strong"),HSr=o("xlm"),USr=o(" \u2014 "),xK=a("a"),JSr=o("TFXLMForQuestionAnsweringSimple"),YSr=o(" (XLM model)"),KSr=l(),g4=a("li"),nMe=a("strong"),ZSr=o("xlm-roberta"),eRr=o(" \u2014 "),$K=a("a"),oRr=o("TFXLMRobertaForQuestionAnswering"),rRr=o(" (XLM-RoBERTa model)"),tRr=l(),h4=a("li"),sMe=a("strong"),aRr=o("xlnet"),nRr=o(" \u2014 "),kK=a("a"),sRr=o("TFXLNetForQuestionAnsweringSimple"),lRr=o(" (XLNet model)"),iRr=l(),F(p4.$$.fragment),wVe=l(),qc=a("h2"),_4=a("a"),lMe=a("span"),F(Cx.$$.fragment),dRr=l(),iMe=a("span"),cRr=o("TFAutoModelForVision2Seq"),AVe=l(),mr=a("div"),F(wx.$$.fragment),fRr=l(),jc=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),RK=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),Ax=a("p"),bRr=o("This class cannot be instantiated directly using "),dMe=a("code"),vRr=o("__init__()"),FRr=o(" (throws an error)."),TRr=l(),Vt=a("div"),F(Lx.$$.fragment),MRr=l(),cMe=a("p"),ERr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CRr=l(),Dc=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),ARr=o("not"),LRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),yRr=o("from_pretrained()"),xRr=o(" to load the model weights."),$Rr=l(),F(u4.$$.fragment),kRr=l(),Dr=a("div"),F(yx.$$.fragment),SRr=l(),mMe=a("p"),RRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PRr=l(),bn=a("p"),BRr=o("The model class to instantiate is selected based on the "),gMe=a("code"),IRr=o("model_type"),NRr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),qRr=o("pretrained_model_name_or_path"),jRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(":"),ORr=l(),_Me=a("ul"),b4=a("li"),uMe=a("strong"),VRr=o("vision-encoder-decoder"),XRr=o(" \u2014 "),BK=a("a"),zRr=o("TFVisionEncoderDecoderModel"),WRr=o(" (Vision Encoder decoder model)"),QRr=l(),F(v4.$$.fragment),LVe=l(),Gc=a("h2"),F4=a("a"),bMe=a("span"),F(xx.$$.fragment),HRr=l(),vMe=a("span"),URr=o("TFAutoModelForSpeechSeq2Seq"),yVe=l(),gr=a("div"),F($x.$$.fragment),JRr=l(),Oc=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IK=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),NK=a("a"),ePr=o("from_config()"),oPr=o(` class
method.`),rPr=l(),kx=a("p"),tPr=o("This class cannot be instantiated directly using "),FMe=a("code"),aPr=o("__init__()"),nPr=o(" (throws an error)."),sPr=l(),Xt=a("div"),F(Sx.$$.fragment),lPr=l(),TMe=a("p"),iPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dPr=l(),Vc=a("p"),cPr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),fPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),gPr=o("from_pretrained()"),hPr=o(" to load the model weights."),pPr=l(),F(T4.$$.fragment),_Pr=l(),Gr=a("div"),F(Rx.$$.fragment),uPr=l(),EMe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vPr=l(),vn=a("p"),FPr=o("The model class to instantiate is selected based on the "),CMe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),LPr=l(),LMe=a("ul"),M4=a("li"),yMe=a("strong"),yPr=o("speech_to_text"),xPr=o(" \u2014 "),jK=a("a"),$Pr=o("TFSpeech2TextForConditionalGeneration"),kPr=o(" (Speech2Text model)"),SPr=l(),F(E4.$$.fragment),xVe=l(),Xc=a("h2"),C4=a("a"),xMe=a("span"),F(Px.$$.fragment),RPr=l(),$Me=a("span"),PPr=o("FlaxAutoModel"),$Ve=l(),hr=a("div"),F(Bx.$$.fragment),BPr=l(),zc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DK=a("a"),NPr=o("from_pretrained()"),qPr=o(" class method or the "),GK=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),Ix=a("p"),OPr=o("This class cannot be instantiated directly using "),kMe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),zt=a("div"),F(Nx.$$.fragment),WPr=l(),SMe=a("p"),QPr=o("Instantiates one of the base model classes of the library from a configuration."),HPr=l(),Wc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(w4.$$.fragment),oBr=l(),Or=a("div"),F(qx.$$.fragment),rBr=l(),PMe=a("p"),tBr=o("Instantiate one of the base model classes of the library from a pretrained model."),aBr=l(),Fn=a("p"),nBr=o("The model class to instantiate is selected based on the "),BMe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),oe=a("ul"),A4=a("li"),qMe=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),VK=a("a"),pBr=o("FlaxAlbertModel"),_Br=o(" (ALBERT model)"),uBr=l(),L4=a("li"),jMe=a("strong"),bBr=o("bart"),vBr=o(" \u2014 "),XK=a("a"),FBr=o("FlaxBartModel"),TBr=o(" (BART model)"),MBr=l(),y4=a("li"),DMe=a("strong"),EBr=o("beit"),CBr=o(" \u2014 "),zK=a("a"),wBr=o("FlaxBeitModel"),ABr=o(" (BEiT model)"),LBr=l(),x4=a("li"),GMe=a("strong"),yBr=o("bert"),xBr=o(" \u2014 "),WK=a("a"),$Br=o("FlaxBertModel"),kBr=o(" (BERT model)"),SBr=l(),$4=a("li"),OMe=a("strong"),RBr=o("big_bird"),PBr=o(" \u2014 "),QK=a("a"),BBr=o("FlaxBigBirdModel"),IBr=o(" (BigBird model)"),NBr=l(),k4=a("li"),VMe=a("strong"),qBr=o("blenderbot"),jBr=o(" \u2014 "),HK=a("a"),DBr=o("FlaxBlenderbotModel"),GBr=o(" (Blenderbot model)"),OBr=l(),S4=a("li"),XMe=a("strong"),VBr=o("blenderbot-small"),XBr=o(" \u2014 "),UK=a("a"),zBr=o("FlaxBlenderbotSmallModel"),WBr=o(" (BlenderbotSmall model)"),QBr=l(),R4=a("li"),zMe=a("strong"),HBr=o("clip"),UBr=o(" \u2014 "),JK=a("a"),JBr=o("FlaxCLIPModel"),YBr=o(" (CLIP model)"),KBr=l(),P4=a("li"),WMe=a("strong"),ZBr=o("distilbert"),eIr=o(" \u2014 "),YK=a("a"),oIr=o("FlaxDistilBertModel"),rIr=o(" (DistilBERT model)"),tIr=l(),B4=a("li"),QMe=a("strong"),aIr=o("electra"),nIr=o(" \u2014 "),KK=a("a"),sIr=o("FlaxElectraModel"),lIr=o(" (ELECTRA model)"),iIr=l(),I4=a("li"),HMe=a("strong"),dIr=o("gpt2"),cIr=o(" \u2014 "),ZK=a("a"),fIr=o("FlaxGPT2Model"),mIr=o(" (OpenAI GPT-2 model)"),gIr=l(),N4=a("li"),UMe=a("strong"),hIr=o("gpt_neo"),pIr=o(" \u2014 "),eZ=a("a"),_Ir=o("FlaxGPTNeoModel"),uIr=o(" (GPT Neo model)"),bIr=l(),q4=a("li"),JMe=a("strong"),vIr=o("gptj"),FIr=o(" \u2014 "),oZ=a("a"),TIr=o("FlaxGPTJModel"),MIr=o(" (GPT-J model)"),EIr=l(),j4=a("li"),YMe=a("strong"),CIr=o("longt5"),wIr=o(" \u2014 "),rZ=a("a"),AIr=o("FlaxLongT5Model"),LIr=o(" (LongT5 model)"),yIr=l(),D4=a("li"),KMe=a("strong"),xIr=o("marian"),$Ir=o(" \u2014 "),tZ=a("a"),kIr=o("FlaxMarianModel"),SIr=o(" (Marian model)"),RIr=l(),G4=a("li"),ZMe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),aZ=a("a"),IIr=o("FlaxMBartModel"),NIr=o(" (mBART model)"),qIr=l(),O4=a("li"),eEe=a("strong"),jIr=o("mt5"),DIr=o(" \u2014 "),nZ=a("a"),GIr=o("FlaxMT5Model"),OIr=o(" (MT5 model)"),VIr=l(),V4=a("li"),oEe=a("strong"),XIr=o("opt"),zIr=o(" \u2014 "),sZ=a("a"),WIr=o("FlaxOPTModel"),QIr=o(" (OPT model)"),HIr=l(),X4=a("li"),rEe=a("strong"),UIr=o("pegasus"),JIr=o(" \u2014 "),lZ=a("a"),YIr=o("FlaxPegasusModel"),KIr=o(" (Pegasus model)"),ZIr=l(),z4=a("li"),tEe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),iZ=a("a"),rNr=o("FlaxRobertaModel"),tNr=o(" (RoBERTa model)"),aNr=l(),W4=a("li"),aEe=a("strong"),nNr=o("roformer"),sNr=o(" \u2014 "),dZ=a("a"),lNr=o("FlaxRoFormerModel"),iNr=o(" (RoFormer model)"),dNr=l(),Q4=a("li"),nEe=a("strong"),cNr=o("t5"),fNr=o(" \u2014 "),cZ=a("a"),mNr=o("FlaxT5Model"),gNr=o(" (T5 model)"),hNr=l(),H4=a("li"),sEe=a("strong"),pNr=o("vision-text-dual-encoder"),_Nr=o(" \u2014 "),fZ=a("a"),uNr=o("FlaxVisionTextDualEncoderModel"),bNr=o(" (VisionTextDualEncoder model)"),vNr=l(),U4=a("li"),lEe=a("strong"),FNr=o("vit"),TNr=o(" \u2014 "),mZ=a("a"),MNr=o("FlaxViTModel"),ENr=o(" (ViT model)"),CNr=l(),J4=a("li"),iEe=a("strong"),wNr=o("wav2vec2"),ANr=o(" \u2014 "),gZ=a("a"),LNr=o("FlaxWav2Vec2Model"),yNr=o(" (Wav2Vec2 model)"),xNr=l(),Y4=a("li"),dEe=a("strong"),$Nr=o("xglm"),kNr=o(" \u2014 "),hZ=a("a"),SNr=o("FlaxXGLMModel"),RNr=o(" (XGLM model)"),PNr=l(),K4=a("li"),cEe=a("strong"),BNr=o("xlm-roberta"),INr=o(" \u2014 "),pZ=a("a"),NNr=o("FlaxXLMRobertaModel"),qNr=o(" (XLM-RoBERTa model)"),jNr=l(),F(Z4.$$.fragment),kVe=l(),Qc=a("h2"),eC=a("a"),fEe=a("span"),F(jx.$$.fragment),DNr=l(),mEe=a("span"),GNr=o("FlaxAutoModelForCausalLM"),SVe=l(),pr=a("div"),F(Dx.$$.fragment),ONr=l(),Hc=a("p"),VNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Z=a("a"),XNr=o("from_pretrained()"),zNr=o(" class method or the "),uZ=a("a"),WNr=o("from_config()"),QNr=o(` class
method.`),HNr=l(),Gx=a("p"),UNr=o("This class cannot be instantiated directly using "),gEe=a("code"),JNr=o("__init__()"),YNr=o(" (throws an error)."),KNr=l(),Wt=a("div"),F(Ox.$$.fragment),ZNr=l(),hEe=a("p"),eqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oqr=l(),Uc=a("p"),rqr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),tqr=o("not"),aqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=a("a"),nqr=o("from_pretrained()"),sqr=o(" to load the model weights."),lqr=l(),F(oC.$$.fragment),iqr=l(),Vr=a("div"),F(Vx.$$.fragment),dqr=l(),_Ee=a("p"),cqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fqr=l(),Tn=a("p"),mqr=o("The model class to instantiate is selected based on the "),uEe=a("code"),gqr=o("model_type"),hqr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),pqr=o("pretrained_model_name_or_path"),_qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),uqr=o("pretrained_model_name_or_path"),bqr=o(":"),vqr=l(),xe=a("ul"),rC=a("li"),FEe=a("strong"),Fqr=o("bart"),Tqr=o(" \u2014 "),vZ=a("a"),Mqr=o("FlaxBartForCausalLM"),Eqr=o(" (BART model)"),Cqr=l(),tC=a("li"),TEe=a("strong"),wqr=o("bert"),Aqr=o(" \u2014 "),FZ=a("a"),Lqr=o("FlaxBertForCausalLM"),yqr=o(" (BERT model)"),xqr=l(),aC=a("li"),MEe=a("strong"),$qr=o("big_bird"),kqr=o(" \u2014 "),TZ=a("a"),Sqr=o("FlaxBigBirdForCausalLM"),Rqr=o(" (BigBird model)"),Pqr=l(),nC=a("li"),EEe=a("strong"),Bqr=o("electra"),Iqr=o(" \u2014 "),MZ=a("a"),Nqr=o("FlaxElectraForCausalLM"),qqr=o(" (ELECTRA model)"),jqr=l(),sC=a("li"),CEe=a("strong"),Dqr=o("gpt2"),Gqr=o(" \u2014 "),EZ=a("a"),Oqr=o("FlaxGPT2LMHeadModel"),Vqr=o(" (OpenAI GPT-2 model)"),Xqr=l(),lC=a("li"),wEe=a("strong"),zqr=o("gpt_neo"),Wqr=o(" \u2014 "),CZ=a("a"),Qqr=o("FlaxGPTNeoForCausalLM"),Hqr=o(" (GPT Neo model)"),Uqr=l(),iC=a("li"),AEe=a("strong"),Jqr=o("gptj"),Yqr=o(" \u2014 "),wZ=a("a"),Kqr=o("FlaxGPTJForCausalLM"),Zqr=o(" (GPT-J model)"),ejr=l(),dC=a("li"),LEe=a("strong"),ojr=o("opt"),rjr=o(" \u2014 "),AZ=a("a"),tjr=o("FlaxOPTForCausalLM"),ajr=o(" (OPT model)"),njr=l(),cC=a("li"),yEe=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),LZ=a("a"),ijr=o("FlaxRobertaForCausalLM"),djr=o(" (RoBERTa model)"),cjr=l(),fC=a("li"),xEe=a("strong"),fjr=o("xglm"),mjr=o(" \u2014 "),yZ=a("a"),gjr=o("FlaxXGLMForCausalLM"),hjr=o(" (XGLM model)"),pjr=l(),F(mC.$$.fragment),RVe=l(),Jc=a("h2"),gC=a("a"),$Ee=a("span"),F(Xx.$$.fragment),_jr=l(),kEe=a("span"),ujr=o("FlaxAutoModelForPreTraining"),PVe=l(),_r=a("div"),F(zx.$$.fragment),bjr=l(),Yc=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),$Z=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),Wx=a("p"),wjr=o("This class cannot be instantiated directly using "),SEe=a("code"),Ajr=o("__init__()"),Ljr=o(" (throws an error)."),yjr=l(),Qt=a("div"),F(Qx.$$.fragment),xjr=l(),REe=a("p"),$jr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kjr=l(),Kc=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),Njr=l(),F(hC.$$.fragment),qjr=l(),Xr=a("div"),F(Hx.$$.fragment),jjr=l(),BEe=a("p"),Djr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gjr=l(),Mn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),IEe=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),Ee=a("ul"),pC=a("li"),jEe=a("strong"),Jjr=o("albert"),Yjr=o(" \u2014 "),SZ=a("a"),Kjr=o("FlaxAlbertForPreTraining"),Zjr=o(" (ALBERT model)"),eDr=l(),_C=a("li"),DEe=a("strong"),oDr=o("bart"),rDr=o(" \u2014 "),RZ=a("a"),tDr=o("FlaxBartForConditionalGeneration"),aDr=o(" (BART model)"),nDr=l(),uC=a("li"),GEe=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),PZ=a("a"),iDr=o("FlaxBertForPreTraining"),dDr=o(" (BERT model)"),cDr=l(),bC=a("li"),OEe=a("strong"),fDr=o("big_bird"),mDr=o(" \u2014 "),BZ=a("a"),gDr=o("FlaxBigBirdForPreTraining"),hDr=o(" (BigBird model)"),pDr=l(),vC=a("li"),VEe=a("strong"),_Dr=o("electra"),uDr=o(" \u2014 "),IZ=a("a"),bDr=o("FlaxElectraForPreTraining"),vDr=o(" (ELECTRA model)"),FDr=l(),FC=a("li"),XEe=a("strong"),TDr=o("longt5"),MDr=o(" \u2014 "),NZ=a("a"),EDr=o("FlaxLongT5ForConditionalGeneration"),CDr=o(" (LongT5 model)"),wDr=l(),TC=a("li"),zEe=a("strong"),ADr=o("mbart"),LDr=o(" \u2014 "),qZ=a("a"),yDr=o("FlaxMBartForConditionalGeneration"),xDr=o(" (mBART model)"),$Dr=l(),MC=a("li"),WEe=a("strong"),kDr=o("mt5"),SDr=o(" \u2014 "),jZ=a("a"),RDr=o("FlaxMT5ForConditionalGeneration"),PDr=o(" (MT5 model)"),BDr=l(),EC=a("li"),QEe=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),DZ=a("a"),qDr=o("FlaxRobertaForMaskedLM"),jDr=o(" (RoBERTa model)"),DDr=l(),CC=a("li"),HEe=a("strong"),GDr=o("roformer"),ODr=o(" \u2014 "),GZ=a("a"),VDr=o("FlaxRoFormerForMaskedLM"),XDr=o(" (RoFormer model)"),zDr=l(),wC=a("li"),UEe=a("strong"),WDr=o("t5"),QDr=o(" \u2014 "),OZ=a("a"),HDr=o("FlaxT5ForConditionalGeneration"),UDr=o(" (T5 model)"),JDr=l(),AC=a("li"),JEe=a("strong"),YDr=o("wav2vec2"),KDr=o(" \u2014 "),VZ=a("a"),ZDr=o("FlaxWav2Vec2ForPreTraining"),eGr=o(" (Wav2Vec2 model)"),oGr=l(),LC=a("li"),YEe=a("strong"),rGr=o("xlm-roberta"),tGr=o(" \u2014 "),XZ=a("a"),aGr=o("FlaxXLMRobertaForMaskedLM"),nGr=o(" (XLM-RoBERTa model)"),sGr=l(),F(yC.$$.fragment),BVe=l(),Zc=a("h2"),xC=a("a"),KEe=a("span"),F(Ux.$$.fragment),lGr=l(),ZEe=a("span"),iGr=o("FlaxAutoModelForMaskedLM"),IVe=l(),ur=a("div"),F(Jx.$$.fragment),dGr=l(),ef=a("p"),cGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zZ=a("a"),fGr=o("from_pretrained()"),mGr=o(" class method or the "),WZ=a("a"),gGr=o("from_config()"),hGr=o(` class
method.`),pGr=l(),Yx=a("p"),_Gr=o("This class cannot be instantiated directly using "),e4e=a("code"),uGr=o("__init__()"),bGr=o(" (throws an error)."),vGr=l(),Ht=a("div"),F(Kx.$$.fragment),FGr=l(),o4e=a("p"),TGr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MGr=l(),of=a("p"),EGr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),CGr=o("not"),wGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),AGr=o("from_pretrained()"),LGr=o(" to load the model weights."),yGr=l(),F($C.$$.fragment),xGr=l(),zr=a("div"),F(Zx.$$.fragment),$Gr=l(),t4e=a("p"),kGr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SGr=l(),En=a("p"),RGr=o("The model class to instantiate is selected based on the "),a4e=a("code"),PGr=o("model_type"),BGr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),IGr=o("pretrained_model_name_or_path"),NGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),qGr=o("pretrained_model_name_or_path"),jGr=o(":"),DGr=l(),$e=a("ul"),kC=a("li"),l4e=a("strong"),GGr=o("albert"),OGr=o(" \u2014 "),HZ=a("a"),VGr=o("FlaxAlbertForMaskedLM"),XGr=o(" (ALBERT model)"),zGr=l(),SC=a("li"),i4e=a("strong"),WGr=o("bart"),QGr=o(" \u2014 "),UZ=a("a"),HGr=o("FlaxBartForConditionalGeneration"),UGr=o(" (BART model)"),JGr=l(),RC=a("li"),d4e=a("strong"),YGr=o("bert"),KGr=o(" \u2014 "),JZ=a("a"),ZGr=o("FlaxBertForMaskedLM"),eOr=o(" (BERT model)"),oOr=l(),PC=a("li"),c4e=a("strong"),rOr=o("big_bird"),tOr=o(" \u2014 "),YZ=a("a"),aOr=o("FlaxBigBirdForMaskedLM"),nOr=o(" (BigBird model)"),sOr=l(),BC=a("li"),f4e=a("strong"),lOr=o("distilbert"),iOr=o(" \u2014 "),KZ=a("a"),dOr=o("FlaxDistilBertForMaskedLM"),cOr=o(" (DistilBERT model)"),fOr=l(),IC=a("li"),m4e=a("strong"),mOr=o("electra"),gOr=o(" \u2014 "),ZZ=a("a"),hOr=o("FlaxElectraForMaskedLM"),pOr=o(" (ELECTRA model)"),_Or=l(),NC=a("li"),g4e=a("strong"),uOr=o("mbart"),bOr=o(" \u2014 "),eee=a("a"),vOr=o("FlaxMBartForConditionalGeneration"),FOr=o(" (mBART model)"),TOr=l(),qC=a("li"),h4e=a("strong"),MOr=o("roberta"),EOr=o(" \u2014 "),oee=a("a"),COr=o("FlaxRobertaForMaskedLM"),wOr=o(" (RoBERTa model)"),AOr=l(),jC=a("li"),p4e=a("strong"),LOr=o("roformer"),yOr=o(" \u2014 "),ree=a("a"),xOr=o("FlaxRoFormerForMaskedLM"),$Or=o(" (RoFormer model)"),kOr=l(),DC=a("li"),_4e=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),tee=a("a"),POr=o("FlaxXLMRobertaForMaskedLM"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(GC.$$.fragment),NVe=l(),rf=a("h2"),OC=a("a"),u4e=a("span"),F(e$.$$.fragment),NOr=l(),b4e=a("span"),qOr=o("FlaxAutoModelForSeq2SeqLM"),qVe=l(),br=a("div"),F(o$.$$.fragment),jOr=l(),tf=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aee=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),nee=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),r$=a("p"),WOr=o("This class cannot be instantiated directly using "),v4e=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Ut=a("div"),F(t$.$$.fragment),JOr=l(),F4e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KOr=l(),af=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(VC.$$.fragment),nVr=l(),Wr=a("div"),F(a$.$$.fragment),sVr=l(),M4e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),E4e=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),ke=a("ul"),XC=a("li"),A4e=a("strong"),uVr=o("bart"),bVr=o(" \u2014 "),lee=a("a"),vVr=o("FlaxBartForConditionalGeneration"),FVr=o(" (BART model)"),TVr=l(),zC=a("li"),L4e=a("strong"),MVr=o("blenderbot"),EVr=o(" \u2014 "),iee=a("a"),CVr=o("FlaxBlenderbotForConditionalGeneration"),wVr=o(" (Blenderbot model)"),AVr=l(),WC=a("li"),y4e=a("strong"),LVr=o("blenderbot-small"),yVr=o(" \u2014 "),dee=a("a"),xVr=o("FlaxBlenderbotSmallForConditionalGeneration"),$Vr=o(" (BlenderbotSmall model)"),kVr=l(),QC=a("li"),x4e=a("strong"),SVr=o("encoder-decoder"),RVr=o(" \u2014 "),cee=a("a"),PVr=o("FlaxEncoderDecoderModel"),BVr=o(" (Encoder decoder model)"),IVr=l(),HC=a("li"),$4e=a("strong"),NVr=o("longt5"),qVr=o(" \u2014 "),fee=a("a"),jVr=o("FlaxLongT5ForConditionalGeneration"),DVr=o(" (LongT5 model)"),GVr=l(),UC=a("li"),k4e=a("strong"),OVr=o("marian"),VVr=o(" \u2014 "),mee=a("a"),XVr=o("FlaxMarianMTModel"),zVr=o(" (Marian model)"),WVr=l(),JC=a("li"),S4e=a("strong"),QVr=o("mbart"),HVr=o(" \u2014 "),gee=a("a"),UVr=o("FlaxMBartForConditionalGeneration"),JVr=o(" (mBART model)"),YVr=l(),YC=a("li"),R4e=a("strong"),KVr=o("mt5"),ZVr=o(" \u2014 "),hee=a("a"),eXr=o("FlaxMT5ForConditionalGeneration"),oXr=o(" (MT5 model)"),rXr=l(),KC=a("li"),P4e=a("strong"),tXr=o("pegasus"),aXr=o(" \u2014 "),pee=a("a"),nXr=o("FlaxPegasusForConditionalGeneration"),sXr=o(" (Pegasus model)"),lXr=l(),ZC=a("li"),B4e=a("strong"),iXr=o("t5"),dXr=o(" \u2014 "),_ee=a("a"),cXr=o("FlaxT5ForConditionalGeneration"),fXr=o(" (T5 model)"),mXr=l(),F(e5.$$.fragment),jVe=l(),nf=a("h2"),o5=a("a"),I4e=a("span"),F(n$.$$.fragment),gXr=l(),N4e=a("span"),hXr=o("FlaxAutoModelForSequenceClassification"),DVe=l(),vr=a("div"),F(s$.$$.fragment),pXr=l(),sf=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),bee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),l$=a("p"),MXr=o("This class cannot be instantiated directly using "),q4e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Jt=a("div"),F(i$.$$.fragment),AXr=l(),j4e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yXr=l(),lf=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(r5.$$.fragment),BXr=l(),Qr=a("div"),F(d$.$$.fragment),IXr=l(),G4e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qXr=l(),wn=a("p"),jXr=o("The model class to instantiate is selected based on the "),O4e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),WXr=l(),Se=a("ul"),t5=a("li"),z4e=a("strong"),QXr=o("albert"),HXr=o(" \u2014 "),Fee=a("a"),UXr=o("FlaxAlbertForSequenceClassification"),JXr=o(" (ALBERT model)"),YXr=l(),a5=a("li"),W4e=a("strong"),KXr=o("bart"),ZXr=o(" \u2014 "),Tee=a("a"),ezr=o("FlaxBartForSequenceClassification"),ozr=o(" (BART model)"),rzr=l(),n5=a("li"),Q4e=a("strong"),tzr=o("bert"),azr=o(" \u2014 "),Mee=a("a"),nzr=o("FlaxBertForSequenceClassification"),szr=o(" (BERT model)"),lzr=l(),s5=a("li"),H4e=a("strong"),izr=o("big_bird"),dzr=o(" \u2014 "),Eee=a("a"),czr=o("FlaxBigBirdForSequenceClassification"),fzr=o(" (BigBird model)"),mzr=l(),l5=a("li"),U4e=a("strong"),gzr=o("distilbert"),hzr=o(" \u2014 "),Cee=a("a"),pzr=o("FlaxDistilBertForSequenceClassification"),_zr=o(" (DistilBERT model)"),uzr=l(),i5=a("li"),J4e=a("strong"),bzr=o("electra"),vzr=o(" \u2014 "),wee=a("a"),Fzr=o("FlaxElectraForSequenceClassification"),Tzr=o(" (ELECTRA model)"),Mzr=l(),d5=a("li"),Y4e=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Aee=a("a"),wzr=o("FlaxMBartForSequenceClassification"),Azr=o(" (mBART model)"),Lzr=l(),c5=a("li"),K4e=a("strong"),yzr=o("roberta"),xzr=o(" \u2014 "),Lee=a("a"),$zr=o("FlaxRobertaForSequenceClassification"),kzr=o(" (RoBERTa model)"),Szr=l(),f5=a("li"),Z4e=a("strong"),Rzr=o("roformer"),Pzr=o(" \u2014 "),yee=a("a"),Bzr=o("FlaxRoFormerForSequenceClassification"),Izr=o(" (RoFormer model)"),Nzr=l(),m5=a("li"),eCe=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),xee=a("a"),Dzr=o("FlaxXLMRobertaForSequenceClassification"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(g5.$$.fragment),GVe=l(),df=a("h2"),h5=a("a"),oCe=a("span"),F(c$.$$.fragment),Vzr=l(),rCe=a("span"),Xzr=o("FlaxAutoModelForQuestionAnswering"),OVe=l(),Fr=a("div"),F(f$.$$.fragment),zzr=l(),cf=a("p"),Wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$ee=a("a"),Qzr=o("from_pretrained()"),Hzr=o(" class method or the "),kee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),m$=a("p"),Kzr=o("This class cannot be instantiated directly using "),tCe=a("code"),Zzr=o("__init__()"),eWr=o(" (throws an error)."),oWr=l(),Yt=a("div"),F(g$.$$.fragment),rWr=l(),aCe=a("p"),tWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aWr=l(),ff=a("p"),nWr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),sWr=o("not"),lWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),iWr=o("from_pretrained()"),dWr=o(" to load the model weights."),cWr=l(),F(p5.$$.fragment),fWr=l(),Hr=a("div"),F(h$.$$.fragment),mWr=l(),sCe=a("p"),gWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hWr=l(),An=a("p"),pWr=o("The model class to instantiate is selected based on the "),lCe=a("code"),_Wr=o("model_type"),uWr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),bWr=o("pretrained_model_name_or_path"),vWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),FWr=o("pretrained_model_name_or_path"),TWr=o(":"),MWr=l(),Re=a("ul"),_5=a("li"),cCe=a("strong"),EWr=o("albert"),CWr=o(" \u2014 "),Ree=a("a"),wWr=o("FlaxAlbertForQuestionAnswering"),AWr=o(" (ALBERT model)"),LWr=l(),u5=a("li"),fCe=a("strong"),yWr=o("bart"),xWr=o(" \u2014 "),Pee=a("a"),$Wr=o("FlaxBartForQuestionAnswering"),kWr=o(" (BART model)"),SWr=l(),b5=a("li"),mCe=a("strong"),RWr=o("bert"),PWr=o(" \u2014 "),Bee=a("a"),BWr=o("FlaxBertForQuestionAnswering"),IWr=o(" (BERT model)"),NWr=l(),v5=a("li"),gCe=a("strong"),qWr=o("big_bird"),jWr=o(" \u2014 "),Iee=a("a"),DWr=o("FlaxBigBirdForQuestionAnswering"),GWr=o(" (BigBird model)"),OWr=l(),F5=a("li"),hCe=a("strong"),VWr=o("distilbert"),XWr=o(" \u2014 "),Nee=a("a"),zWr=o("FlaxDistilBertForQuestionAnswering"),WWr=o(" (DistilBERT model)"),QWr=l(),T5=a("li"),pCe=a("strong"),HWr=o("electra"),UWr=o(" \u2014 "),qee=a("a"),JWr=o("FlaxElectraForQuestionAnswering"),YWr=o(" (ELECTRA model)"),KWr=l(),M5=a("li"),_Ce=a("strong"),ZWr=o("mbart"),eQr=o(" \u2014 "),jee=a("a"),oQr=o("FlaxMBartForQuestionAnswering"),rQr=o(" (mBART model)"),tQr=l(),E5=a("li"),uCe=a("strong"),aQr=o("roberta"),nQr=o(" \u2014 "),Dee=a("a"),sQr=o("FlaxRobertaForQuestionAnswering"),lQr=o(" (RoBERTa model)"),iQr=l(),C5=a("li"),bCe=a("strong"),dQr=o("roformer"),cQr=o(" \u2014 "),Gee=a("a"),fQr=o("FlaxRoFormerForQuestionAnswering"),mQr=o(" (RoFormer model)"),gQr=l(),w5=a("li"),vCe=a("strong"),hQr=o("xlm-roberta"),pQr=o(" \u2014 "),Oee=a("a"),_Qr=o("FlaxXLMRobertaForQuestionAnswering"),uQr=o(" (XLM-RoBERTa model)"),bQr=l(),F(A5.$$.fragment),VVe=l(),mf=a("h2"),L5=a("a"),FCe=a("span"),F(p$.$$.fragment),vQr=l(),TCe=a("span"),FQr=o("FlaxAutoModelForTokenClassification"),XVe=l(),Tr=a("div"),F(_$.$$.fragment),TQr=l(),gf=a("p"),MQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vee=a("a"),EQr=o("from_pretrained()"),CQr=o(" class method or the "),Xee=a("a"),wQr=o("from_config()"),AQr=o(` class
method.`),LQr=l(),u$=a("p"),yQr=o("This class cannot be instantiated directly using "),MCe=a("code"),xQr=o("__init__()"),$Qr=o(" (throws an error)."),kQr=l(),Kt=a("div"),F(b$.$$.fragment),SQr=l(),ECe=a("p"),RQr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PQr=l(),hf=a("p"),BQr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),IQr=o("not"),NQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),qQr=o("from_pretrained()"),jQr=o(" to load the model weights."),DQr=l(),F(y5.$$.fragment),GQr=l(),Ur=a("div"),F(v$.$$.fragment),OQr=l(),wCe=a("p"),VQr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XQr=l(),Ln=a("p"),zQr=o("The model class to instantiate is selected based on the "),ACe=a("code"),WQr=o("model_type"),QQr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),HQr=o("pretrained_model_name_or_path"),UQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),JQr=o("pretrained_model_name_or_path"),YQr=o(":"),KQr=l(),Ve=a("ul"),x5=a("li"),xCe=a("strong"),ZQr=o("albert"),eHr=o(" \u2014 "),Wee=a("a"),oHr=o("FlaxAlbertForTokenClassification"),rHr=o(" (ALBERT model)"),tHr=l(),$5=a("li"),$Ce=a("strong"),aHr=o("bert"),nHr=o(" \u2014 "),Qee=a("a"),sHr=o("FlaxBertForTokenClassification"),lHr=o(" (BERT model)"),iHr=l(),k5=a("li"),kCe=a("strong"),dHr=o("big_bird"),cHr=o(" \u2014 "),Hee=a("a"),fHr=o("FlaxBigBirdForTokenClassification"),mHr=o(" (BigBird model)"),gHr=l(),S5=a("li"),SCe=a("strong"),hHr=o("distilbert"),pHr=o(" \u2014 "),Uee=a("a"),_Hr=o("FlaxDistilBertForTokenClassification"),uHr=o(" (DistilBERT model)"),bHr=l(),R5=a("li"),RCe=a("strong"),vHr=o("electra"),FHr=o(" \u2014 "),Jee=a("a"),THr=o("FlaxElectraForTokenClassification"),MHr=o(" (ELECTRA model)"),EHr=l(),P5=a("li"),PCe=a("strong"),CHr=o("roberta"),wHr=o(" \u2014 "),Yee=a("a"),AHr=o("FlaxRobertaForTokenClassification"),LHr=o(" (RoBERTa model)"),yHr=l(),B5=a("li"),BCe=a("strong"),xHr=o("roformer"),$Hr=o(" \u2014 "),Kee=a("a"),kHr=o("FlaxRoFormerForTokenClassification"),SHr=o(" (RoFormer model)"),RHr=l(),I5=a("li"),ICe=a("strong"),PHr=o("xlm-roberta"),BHr=o(" \u2014 "),Zee=a("a"),IHr=o("FlaxXLMRobertaForTokenClassification"),NHr=o(" (XLM-RoBERTa model)"),qHr=l(),F(N5.$$.fragment),zVe=l(),pf=a("h2"),q5=a("a"),NCe=a("span"),F(F$.$$.fragment),jHr=l(),qCe=a("span"),DHr=o("FlaxAutoModelForMultipleChoice"),WVe=l(),Mr=a("div"),F(T$.$$.fragment),GHr=l(),_f=a("p"),OHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eoe=a("a"),VHr=o("from_pretrained()"),XHr=o(" class method or the "),ooe=a("a"),zHr=o("from_config()"),WHr=o(` class
method.`),QHr=l(),M$=a("p"),HHr=o("This class cannot be instantiated directly using "),jCe=a("code"),UHr=o("__init__()"),JHr=o(" (throws an error)."),YHr=l(),Zt=a("div"),F(E$.$$.fragment),KHr=l(),DCe=a("p"),ZHr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eUr=l(),uf=a("p"),oUr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),rUr=o("not"),tUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("a"),aUr=o("from_pretrained()"),nUr=o(" to load the model weights."),sUr=l(),F(j5.$$.fragment),lUr=l(),Jr=a("div"),F(C$.$$.fragment),iUr=l(),OCe=a("p"),dUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cUr=l(),yn=a("p"),fUr=o("The model class to instantiate is selected based on the "),VCe=a("code"),mUr=o("model_type"),gUr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),hUr=o("pretrained_model_name_or_path"),pUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),_Ur=o("pretrained_model_name_or_path"),uUr=o(":"),bUr=l(),Xe=a("ul"),D5=a("li"),WCe=a("strong"),vUr=o("albert"),FUr=o(" \u2014 "),toe=a("a"),TUr=o("FlaxAlbertForMultipleChoice"),MUr=o(" (ALBERT model)"),EUr=l(),G5=a("li"),QCe=a("strong"),CUr=o("bert"),wUr=o(" \u2014 "),aoe=a("a"),AUr=o("FlaxBertForMultipleChoice"),LUr=o(" (BERT model)"),yUr=l(),O5=a("li"),HCe=a("strong"),xUr=o("big_bird"),$Ur=o(" \u2014 "),noe=a("a"),kUr=o("FlaxBigBirdForMultipleChoice"),SUr=o(" (BigBird model)"),RUr=l(),V5=a("li"),UCe=a("strong"),PUr=o("distilbert"),BUr=o(" \u2014 "),soe=a("a"),IUr=o("FlaxDistilBertForMultipleChoice"),NUr=o(" (DistilBERT model)"),qUr=l(),X5=a("li"),JCe=a("strong"),jUr=o("electra"),DUr=o(" \u2014 "),loe=a("a"),GUr=o("FlaxElectraForMultipleChoice"),OUr=o(" (ELECTRA model)"),VUr=l(),z5=a("li"),YCe=a("strong"),XUr=o("roberta"),zUr=o(" \u2014 "),ioe=a("a"),WUr=o("FlaxRobertaForMultipleChoice"),QUr=o(" (RoBERTa model)"),HUr=l(),W5=a("li"),KCe=a("strong"),UUr=o("roformer"),JUr=o(" \u2014 "),doe=a("a"),YUr=o("FlaxRoFormerForMultipleChoice"),KUr=o(" (RoFormer model)"),ZUr=l(),Q5=a("li"),ZCe=a("strong"),eJr=o("xlm-roberta"),oJr=o(" \u2014 "),coe=a("a"),rJr=o("FlaxXLMRobertaForMultipleChoice"),tJr=o(" (XLM-RoBERTa model)"),aJr=l(),F(H5.$$.fragment),QVe=l(),bf=a("h2"),U5=a("a"),e5e=a("span"),F(w$.$$.fragment),nJr=l(),o5e=a("span"),sJr=o("FlaxAutoModelForNextSentencePrediction"),HVe=l(),Er=a("div"),F(A$.$$.fragment),lJr=l(),vf=a("p"),iJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),foe=a("a"),dJr=o("from_pretrained()"),cJr=o(" class method or the "),moe=a("a"),fJr=o("from_config()"),mJr=o(` class
method.`),gJr=l(),L$=a("p"),hJr=o("This class cannot be instantiated directly using "),r5e=a("code"),pJr=o("__init__()"),_Jr=o(" (throws an error)."),uJr=l(),ea=a("div"),F(y$.$$.fragment),bJr=l(),t5e=a("p"),vJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FJr=l(),Ff=a("p"),TJr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),MJr=o("not"),EJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("a"),CJr=o("from_pretrained()"),wJr=o(" to load the model weights."),AJr=l(),F(J5.$$.fragment),LJr=l(),Yr=a("div"),F(x$.$$.fragment),yJr=l(),n5e=a("p"),xJr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Jr=l(),xn=a("p"),kJr=o("The model class to instantiate is selected based on the "),s5e=a("code"),SJr=o("model_type"),RJr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),PJr=o("pretrained_model_name_or_path"),BJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),IJr=o("pretrained_model_name_or_path"),NJr=o(":"),qJr=l(),d5e=a("ul"),Y5=a("li"),c5e=a("strong"),jJr=o("bert"),DJr=o(" \u2014 "),hoe=a("a"),GJr=o("FlaxBertForNextSentencePrediction"),OJr=o(" (BERT model)"),VJr=l(),F(K5.$$.fragment),UVe=l(),Tf=a("h2"),Z5=a("a"),f5e=a("span"),F($$.$$.fragment),XJr=l(),m5e=a("span"),zJr=o("FlaxAutoModelForImageClassification"),JVe=l(),Cr=a("div"),F(k$.$$.fragment),WJr=l(),Mf=a("p"),QJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),poe=a("a"),HJr=o("from_pretrained()"),UJr=o(" class method or the "),_oe=a("a"),JJr=o("from_config()"),YJr=o(` class
method.`),KJr=l(),S$=a("p"),ZJr=o("This class cannot be instantiated directly using "),g5e=a("code"),eYr=o("__init__()"),oYr=o(" (throws an error)."),rYr=l(),oa=a("div"),F(R$.$$.fragment),tYr=l(),h5e=a("p"),aYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nYr=l(),Ef=a("p"),sYr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),lYr=o("not"),iYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("a"),dYr=o("from_pretrained()"),cYr=o(" to load the model weights."),fYr=l(),F(e3.$$.fragment),mYr=l(),Kr=a("div"),F(P$.$$.fragment),gYr=l(),_5e=a("p"),hYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pYr=l(),$n=a("p"),_Yr=o("The model class to instantiate is selected based on the "),u5e=a("code"),uYr=o("model_type"),bYr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),vYr=o("pretrained_model_name_or_path"),FYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),TYr=o("pretrained_model_name_or_path"),MYr=o(":"),EYr=l(),B$=a("ul"),o3=a("li"),F5e=a("strong"),CYr=o("beit"),wYr=o(" \u2014 "),boe=a("a"),AYr=o("FlaxBeitForImageClassification"),LYr=o(" (BEiT model)"),yYr=l(),r3=a("li"),T5e=a("strong"),xYr=o("vit"),$Yr=o(" \u2014 "),voe=a("a"),kYr=o("FlaxViTForImageClassification"),SYr=o(" (ViT model)"),RYr=l(),F(t3.$$.fragment),YVe=l(),Cf=a("h2"),a3=a("a"),M5e=a("span"),F(I$.$$.fragment),PYr=l(),E5e=a("span"),BYr=o("FlaxAutoModelForVision2Seq"),KVe=l(),wr=a("div"),F(N$.$$.fragment),IYr=l(),wf=a("p"),NYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Foe=a("a"),qYr=o("from_pretrained()"),jYr=o(" class method or the "),Toe=a("a"),DYr=o("from_config()"),GYr=o(` class
method.`),OYr=l(),q$=a("p"),VYr=o("This class cannot be instantiated directly using "),C5e=a("code"),XYr=o("__init__()"),zYr=o(" (throws an error)."),WYr=l(),ra=a("div"),F(j$.$$.fragment),QYr=l(),w5e=a("p"),HYr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UYr=l(),Af=a("p"),JYr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),YYr=o("not"),KYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),ZYr=o("from_pretrained()"),eKr=o(" to load the model weights."),oKr=l(),F(n3.$$.fragment),rKr=l(),Zr=a("div"),F(D$.$$.fragment),tKr=l(),L5e=a("p"),aKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nKr=l(),kn=a("p"),sKr=o("The model class to instantiate is selected based on the "),y5e=a("code"),lKr=o("model_type"),iKr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),dKr=o("pretrained_model_name_or_path"),cKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),fKr=o("pretrained_model_name_or_path"),mKr=o(":"),gKr=l(),k5e=a("ul"),s3=a("li"),S5e=a("strong"),hKr=o("vision-encoder-decoder"),pKr=o(" \u2014 "),Eoe=a("a"),_Kr=o("FlaxVisionEncoderDecoderModel"),uKr=o(" (Vision Encoder decoder model)"),bKr=l(),F(l3.$$.fragment),this.h()},l(f){const u=HDt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var G$=s(p);m=n(G$,"A",{id:!0,class:!0,href:!0});var R5e=s(m);_=n(R5e,"SPAN",{});var P5e=s(_);T(d.$$.fragment,P5e),P5e.forEach(t),R5e.forEach(t),h=i(G$),Eo=n(G$,"SPAN",{});var B5e=s(Eo);Ei=r(B5e,"Auto Classes"),B5e.forEach(t),G$.forEach(t),$f=i(f),nt=n(f,"P",{});var O$=s(nt);Ci=r(O$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(O$,"CODE",{});var I5e=s(wi);LA=r(I5e,"from_pretrained()"),I5e.forEach(t),kf=r(O$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),O$.forEach(t),Oe=i(f),We=n(f,"P",{});var Sn=s(We);Ai=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var N5e=s(Rn);yA=r(N5e,"AutoConfig"),N5e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var q5e=s(Bn);xA=r(q5e,"AutoModel"),q5e.forEach(t),Li=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var j5e=s(In);$A=r(j5e,"AutoTokenizer"),j5e.forEach(t),yi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Sf=i(f),T($a.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var V$=s(Ae);nS=r(V$,"will create a model that is an instance of "),xi=n(V$,"A",{href:!0});var D5e=s(xi);sS=r(D5e,"BertModel"),D5e.forEach(t),lS=r(V$,"."),V$.forEach(t),Co=i(f),ka=n(f,"P",{});var X$=s(ka);iS=r(X$,"There is one class of "),Rf=n(X$,"CODE",{});var G5e=s(Rf);dS=r(G5e,"AutoModel"),G5e.forEach(t),dWe=r(X$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),X$.forEach(t),HGe=i(f),$i=n(f,"H2",{class:!0});var z$=s($i);Pf=n(z$,"A",{id:!0,class:!0,href:!0});var O5e=s(Pf);bte=n(O5e,"SPAN",{});var V5e=s(bte);T(kA.$$.fragment,V5e),V5e.forEach(t),O5e.forEach(t),cWe=i(z$),vte=n(z$,"SPAN",{});var X5e=s(vte);fWe=r(X5e,"Extending the Auto Classes"),X5e.forEach(t),z$.forEach(t),UGe=i(f),Nn=n(f,"P",{});var Lf=s(Nn);mWe=r(Lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fte=n(Lf,"CODE",{});var z5e=s(Fte);gWe=r(z5e,"NewModel"),z5e.forEach(t),hWe=r(Lf,", make sure you have a "),Tte=n(Lf,"CODE",{});var W5e=s(Tte);pWe=r(W5e,"NewModelConfig"),W5e.forEach(t),_We=r(Lf,` then you can add those to the auto
classes like this:`),Lf.forEach(t),JGe=i(f),T(SA.$$.fragment,f),YGe=i(f),cS=n(f,"P",{});var Q5e=s(cS);uWe=r(Q5e,"You will then be able to use the auto classes like you would usually do!"),Q5e.forEach(t),KGe=i(f),T(Bf.$$.fragment,f),ZGe=i(f),ki=n(f,"H2",{class:!0});var W$=s(ki);If=n(W$,"A",{id:!0,class:!0,href:!0});var H5e=s(If);Mte=n(H5e,"SPAN",{});var U5e=s(Mte);T(RA.$$.fragment,U5e),U5e.forEach(t),H5e.forEach(t),bWe=i(W$),Ete=n(W$,"SPAN",{});var J5e=s(Ete);vWe=r(J5e,"AutoConfig"),J5e.forEach(t),W$.forEach(t),eOe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(PA.$$.fragment,tt),FWe=i(tt),BA=n(tt,"P",{});var Q$=s(BA);TWe=r(Q$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fS=n(Q$,"A",{href:!0});var Y5e=s(fS);MWe=r(Y5e,"from_pretrained()"),Y5e.forEach(t),EWe=r(Q$," class method."),Q$.forEach(t),CWe=i(tt),IA=n(tt,"P",{});var H$=s(IA);wWe=r(H$,"This class cannot be instantiated directly using "),Cte=n(H$,"CODE",{});var K5e=s(Cte);AWe=r(K5e,"__init__()"),K5e.forEach(t),LWe=r(H$," (throws an error)."),H$.forEach(t),yWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(NA.$$.fragment,at),xWe=i(at),wte=n(at,"P",{});var Z5e=s(wte);$We=r(Z5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Z5e.forEach(t),kWe=i(at),Si=n(at,"P",{});var yf=s(Si);SWe=r(yf,"The configuration class to instantiate is selected based on the "),Ate=n(yf,"CODE",{});var e3e=s(Ate);RWe=r(e3e,"model_type"),e3e.forEach(t),PWe=r(yf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lte=n(yf,"CODE",{});var o3e=s(Lte);BWe=r(o3e,"pretrained_model_name_or_path"),o3e.forEach(t),IWe=r(yf,":"),yf.forEach(t),NWe=i(at),A=n(at,"UL",{});var L=s(A);Nf=n(L,"LI",{});var i3=s(Nf);yte=n(i3,"STRONG",{});var r3e=s(yte);qWe=r(r3e,"albert"),r3e.forEach(t),jWe=r(i3," \u2014 "),mS=n(i3,"A",{href:!0});var t3e=s(mS);DWe=r(t3e,"AlbertConfig"),t3e.forEach(t),GWe=r(i3," (ALBERT model)"),i3.forEach(t),OWe=i(L),qf=n(L,"LI",{});var d3=s(qf);xte=n(d3,"STRONG",{});var a3e=s(xte);VWe=r(a3e,"bart"),a3e.forEach(t),XWe=r(d3," \u2014 "),gS=n(d3,"A",{href:!0});var n3e=s(gS);zWe=r(n3e,"BartConfig"),n3e.forEach(t),WWe=r(d3," (BART model)"),d3.forEach(t),QWe=i(L),jf=n(L,"LI",{});var c3=s(jf);$te=n(c3,"STRONG",{});var s3e=s($te);HWe=r(s3e,"beit"),s3e.forEach(t),UWe=r(c3," \u2014 "),hS=n(c3,"A",{href:!0});var l3e=s(hS);JWe=r(l3e,"BeitConfig"),l3e.forEach(t),YWe=r(c3," (BEiT model)"),c3.forEach(t),KWe=i(L),Df=n(L,"LI",{});var f3=s(Df);kte=n(f3,"STRONG",{});var i3e=s(kte);ZWe=r(i3e,"bert"),i3e.forEach(t),eQe=r(f3," \u2014 "),pS=n(f3,"A",{href:!0});var d3e=s(pS);oQe=r(d3e,"BertConfig"),d3e.forEach(t),rQe=r(f3," (BERT model)"),f3.forEach(t),tQe=i(L),Gf=n(L,"LI",{});var m3=s(Gf);Ste=n(m3,"STRONG",{});var c3e=s(Ste);aQe=r(c3e,"bert-generation"),c3e.forEach(t),nQe=r(m3," \u2014 "),_S=n(m3,"A",{href:!0});var f3e=s(_S);sQe=r(f3e,"BertGenerationConfig"),f3e.forEach(t),lQe=r(m3," (Bert Generation model)"),m3.forEach(t),iQe=i(L),Of=n(L,"LI",{});var g3=s(Of);Rte=n(g3,"STRONG",{});var m3e=s(Rte);dQe=r(m3e,"big_bird"),m3e.forEach(t),cQe=r(g3," \u2014 "),uS=n(g3,"A",{href:!0});var g3e=s(uS);fQe=r(g3e,"BigBirdConfig"),g3e.forEach(t),mQe=r(g3," (BigBird model)"),g3.forEach(t),gQe=i(L),Vf=n(L,"LI",{});var h3=s(Vf);Pte=n(h3,"STRONG",{});var h3e=s(Pte);hQe=r(h3e,"bigbird_pegasus"),h3e.forEach(t),pQe=r(h3," \u2014 "),bS=n(h3,"A",{href:!0});var p3e=s(bS);_Qe=r(p3e,"BigBirdPegasusConfig"),p3e.forEach(t),uQe=r(h3," (BigBird-Pegasus model)"),h3.forEach(t),bQe=i(L),Xf=n(L,"LI",{});var p3=s(Xf);Bte=n(p3,"STRONG",{});var _3e=s(Bte);vQe=r(_3e,"blenderbot"),_3e.forEach(t),FQe=r(p3," \u2014 "),vS=n(p3,"A",{href:!0});var u3e=s(vS);TQe=r(u3e,"BlenderbotConfig"),u3e.forEach(t),MQe=r(p3," (Blenderbot model)"),p3.forEach(t),EQe=i(L),zf=n(L,"LI",{});var _3=s(zf);Ite=n(_3,"STRONG",{});var b3e=s(Ite);CQe=r(b3e,"blenderbot-small"),b3e.forEach(t),wQe=r(_3," \u2014 "),FS=n(_3,"A",{href:!0});var v3e=s(FS);AQe=r(v3e,"BlenderbotSmallConfig"),v3e.forEach(t),LQe=r(_3," (BlenderbotSmall model)"),_3.forEach(t),yQe=i(L),Wf=n(L,"LI",{});var u3=s(Wf);Nte=n(u3,"STRONG",{});var F3e=s(Nte);xQe=r(F3e,"bloom"),F3e.forEach(t),$Qe=r(u3," \u2014 "),TS=n(u3,"A",{href:!0});var T3e=s(TS);kQe=r(T3e,"BloomConfig"),T3e.forEach(t),SQe=r(u3," (BLOOM model)"),u3.forEach(t),RQe=i(L),Qf=n(L,"LI",{});var b3=s(Qf);qte=n(b3,"STRONG",{});var M3e=s(qte);PQe=r(M3e,"camembert"),M3e.forEach(t),BQe=r(b3," \u2014 "),MS=n(b3,"A",{href:!0});var E3e=s(MS);IQe=r(E3e,"CamembertConfig"),E3e.forEach(t),NQe=r(b3," (CamemBERT model)"),b3.forEach(t),qQe=i(L),Hf=n(L,"LI",{});var v3=s(Hf);jte=n(v3,"STRONG",{});var C3e=s(jte);jQe=r(C3e,"canine"),C3e.forEach(t),DQe=r(v3," \u2014 "),ES=n(v3,"A",{href:!0});var w3e=s(ES);GQe=r(w3e,"CanineConfig"),w3e.forEach(t),OQe=r(v3," (CANINE model)"),v3.forEach(t),VQe=i(L),Uf=n(L,"LI",{});var F3=s(Uf);Dte=n(F3,"STRONG",{});var A3e=s(Dte);XQe=r(A3e,"clip"),A3e.forEach(t),zQe=r(F3," \u2014 "),CS=n(F3,"A",{href:!0});var L3e=s(CS);WQe=r(L3e,"CLIPConfig"),L3e.forEach(t),QQe=r(F3," (CLIP model)"),F3.forEach(t),HQe=i(L),Jf=n(L,"LI",{});var T3=s(Jf);Gte=n(T3,"STRONG",{});var y3e=s(Gte);UQe=r(y3e,"convbert"),y3e.forEach(t),JQe=r(T3," \u2014 "),wS=n(T3,"A",{href:!0});var x3e=s(wS);YQe=r(x3e,"ConvBertConfig"),x3e.forEach(t),KQe=r(T3," (ConvBERT model)"),T3.forEach(t),ZQe=i(L),Yf=n(L,"LI",{});var M3=s(Yf);Ote=n(M3,"STRONG",{});var $3e=s(Ote);eHe=r($3e,"convnext"),$3e.forEach(t),oHe=r(M3," \u2014 "),AS=n(M3,"A",{href:!0});var k3e=s(AS);rHe=r(k3e,"ConvNextConfig"),k3e.forEach(t),tHe=r(M3," (ConvNeXT model)"),M3.forEach(t),aHe=i(L),Kf=n(L,"LI",{});var E3=s(Kf);Vte=n(E3,"STRONG",{});var S3e=s(Vte);nHe=r(S3e,"ctrl"),S3e.forEach(t),sHe=r(E3," \u2014 "),LS=n(E3,"A",{href:!0});var R3e=s(LS);lHe=r(R3e,"CTRLConfig"),R3e.forEach(t),iHe=r(E3," (CTRL model)"),E3.forEach(t),dHe=i(L),Zf=n(L,"LI",{});var C3=s(Zf);Xte=n(C3,"STRONG",{});var P3e=s(Xte);cHe=r(P3e,"cvt"),P3e.forEach(t),fHe=r(C3," \u2014 "),yS=n(C3,"A",{href:!0});var B3e=s(yS);mHe=r(B3e,"CvtConfig"),B3e.forEach(t),gHe=r(C3," (CvT model)"),C3.forEach(t),hHe=i(L),em=n(L,"LI",{});var w3=s(em);zte=n(w3,"STRONG",{});var I3e=s(zte);pHe=r(I3e,"data2vec-audio"),I3e.forEach(t),_He=r(w3," \u2014 "),xS=n(w3,"A",{href:!0});var N3e=s(xS);uHe=r(N3e,"Data2VecAudioConfig"),N3e.forEach(t),bHe=r(w3," (Data2VecAudio model)"),w3.forEach(t),vHe=i(L),om=n(L,"LI",{});var A3=s(om);Wte=n(A3,"STRONG",{});var q3e=s(Wte);FHe=r(q3e,"data2vec-text"),q3e.forEach(t),THe=r(A3," \u2014 "),$S=n(A3,"A",{href:!0});var j3e=s($S);MHe=r(j3e,"Data2VecTextConfig"),j3e.forEach(t),EHe=r(A3," (Data2VecText model)"),A3.forEach(t),CHe=i(L),rm=n(L,"LI",{});var L3=s(rm);Qte=n(L3,"STRONG",{});var D3e=s(Qte);wHe=r(D3e,"data2vec-vision"),D3e.forEach(t),AHe=r(L3," \u2014 "),kS=n(L3,"A",{href:!0});var G3e=s(kS);LHe=r(G3e,"Data2VecVisionConfig"),G3e.forEach(t),yHe=r(L3," (Data2VecVision model)"),L3.forEach(t),xHe=i(L),tm=n(L,"LI",{});var y3=s(tm);Hte=n(y3,"STRONG",{});var O3e=s(Hte);$He=r(O3e,"deberta"),O3e.forEach(t),kHe=r(y3," \u2014 "),SS=n(y3,"A",{href:!0});var V3e=s(SS);SHe=r(V3e,"DebertaConfig"),V3e.forEach(t),RHe=r(y3," (DeBERTa model)"),y3.forEach(t),PHe=i(L),am=n(L,"LI",{});var x3=s(am);Ute=n(x3,"STRONG",{});var X3e=s(Ute);BHe=r(X3e,"deberta-v2"),X3e.forEach(t),IHe=r(x3," \u2014 "),RS=n(x3,"A",{href:!0});var z3e=s(RS);NHe=r(z3e,"DebertaV2Config"),z3e.forEach(t),qHe=r(x3," (DeBERTa-v2 model)"),x3.forEach(t),jHe=i(L),nm=n(L,"LI",{});var $3=s(nm);Jte=n($3,"STRONG",{});var W3e=s(Jte);DHe=r(W3e,"decision_transformer"),W3e.forEach(t),GHe=r($3," \u2014 "),PS=n($3,"A",{href:!0});var Q3e=s(PS);OHe=r(Q3e,"DecisionTransformerConfig"),Q3e.forEach(t),VHe=r($3," (Decision Transformer model)"),$3.forEach(t),XHe=i(L),sm=n(L,"LI",{});var k3=s(sm);Yte=n(k3,"STRONG",{});var FKr=s(Yte);zHe=r(FKr,"deit"),FKr.forEach(t),WHe=r(k3," \u2014 "),BS=n(k3,"A",{href:!0});var TKr=s(BS);QHe=r(TKr,"DeiTConfig"),TKr.forEach(t),HHe=r(k3," (DeiT model)"),k3.forEach(t),UHe=i(L),lm=n(L,"LI",{});var H3e=s(lm);Kte=n(H3e,"STRONG",{});var MKr=s(Kte);JHe=r(MKr,"detr"),MKr.forEach(t),YHe=r(H3e," \u2014 "),IS=n(H3e,"A",{href:!0});var EKr=s(IS);KHe=r(EKr,"DetrConfig"),EKr.forEach(t),ZHe=r(H3e," (DETR model)"),H3e.forEach(t),eUe=i(L),im=n(L,"LI",{});var U3e=s(im);Zte=n(U3e,"STRONG",{});var CKr=s(Zte);oUe=r(CKr,"distilbert"),CKr.forEach(t),rUe=r(U3e," \u2014 "),NS=n(U3e,"A",{href:!0});var wKr=s(NS);tUe=r(wKr,"DistilBertConfig"),wKr.forEach(t),aUe=r(U3e," (DistilBERT model)"),U3e.forEach(t),nUe=i(L),dm=n(L,"LI",{});var J3e=s(dm);eae=n(J3e,"STRONG",{});var AKr=s(eae);sUe=r(AKr,"dpr"),AKr.forEach(t),lUe=r(J3e," \u2014 "),qS=n(J3e,"A",{href:!0});var LKr=s(qS);iUe=r(LKr,"DPRConfig"),LKr.forEach(t),dUe=r(J3e," (DPR model)"),J3e.forEach(t),cUe=i(L),cm=n(L,"LI",{});var Y3e=s(cm);oae=n(Y3e,"STRONG",{});var yKr=s(oae);fUe=r(yKr,"dpt"),yKr.forEach(t),mUe=r(Y3e," \u2014 "),jS=n(Y3e,"A",{href:!0});var xKr=s(jS);gUe=r(xKr,"DPTConfig"),xKr.forEach(t),hUe=r(Y3e," (DPT model)"),Y3e.forEach(t),pUe=i(L),fm=n(L,"LI",{});var K3e=s(fm);rae=n(K3e,"STRONG",{});var $Kr=s(rae);_Ue=r($Kr,"electra"),$Kr.forEach(t),uUe=r(K3e," \u2014 "),DS=n(K3e,"A",{href:!0});var kKr=s(DS);bUe=r(kKr,"ElectraConfig"),kKr.forEach(t),vUe=r(K3e," (ELECTRA model)"),K3e.forEach(t),FUe=i(L),mm=n(L,"LI",{});var Z3e=s(mm);tae=n(Z3e,"STRONG",{});var SKr=s(tae);TUe=r(SKr,"encoder-decoder"),SKr.forEach(t),MUe=r(Z3e," \u2014 "),GS=n(Z3e,"A",{href:!0});var RKr=s(GS);EUe=r(RKr,"EncoderDecoderConfig"),RKr.forEach(t),CUe=r(Z3e," (Encoder decoder model)"),Z3e.forEach(t),wUe=i(L),gm=n(L,"LI",{});var ewe=s(gm);aae=n(ewe,"STRONG",{});var PKr=s(aae);AUe=r(PKr,"flaubert"),PKr.forEach(t),LUe=r(ewe," \u2014 "),OS=n(ewe,"A",{href:!0});var BKr=s(OS);yUe=r(BKr,"FlaubertConfig"),BKr.forEach(t),xUe=r(ewe," (FlauBERT model)"),ewe.forEach(t),$Ue=i(L),hm=n(L,"LI",{});var owe=s(hm);nae=n(owe,"STRONG",{});var IKr=s(nae);kUe=r(IKr,"flava"),IKr.forEach(t),SUe=r(owe," \u2014 "),VS=n(owe,"A",{href:!0});var NKr=s(VS);RUe=r(NKr,"FlavaConfig"),NKr.forEach(t),PUe=r(owe," (FLAVA model)"),owe.forEach(t),BUe=i(L),pm=n(L,"LI",{});var rwe=s(pm);sae=n(rwe,"STRONG",{});var qKr=s(sae);IUe=r(qKr,"fnet"),qKr.forEach(t),NUe=r(rwe," \u2014 "),XS=n(rwe,"A",{href:!0});var jKr=s(XS);qUe=r(jKr,"FNetConfig"),jKr.forEach(t),jUe=r(rwe," (FNet model)"),rwe.forEach(t),DUe=i(L),_m=n(L,"LI",{});var twe=s(_m);lae=n(twe,"STRONG",{});var DKr=s(lae);GUe=r(DKr,"fsmt"),DKr.forEach(t),OUe=r(twe," \u2014 "),zS=n(twe,"A",{href:!0});var GKr=s(zS);VUe=r(GKr,"FSMTConfig"),GKr.forEach(t),XUe=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),zUe=i(L),um=n(L,"LI",{});var awe=s(um);iae=n(awe,"STRONG",{});var OKr=s(iae);WUe=r(OKr,"funnel"),OKr.forEach(t),QUe=r(awe," \u2014 "),WS=n(awe,"A",{href:!0});var VKr=s(WS);HUe=r(VKr,"FunnelConfig"),VKr.forEach(t),UUe=r(awe," (Funnel Transformer model)"),awe.forEach(t),JUe=i(L),bm=n(L,"LI",{});var nwe=s(bm);dae=n(nwe,"STRONG",{});var XKr=s(dae);YUe=r(XKr,"glpn"),XKr.forEach(t),KUe=r(nwe," \u2014 "),QS=n(nwe,"A",{href:!0});var zKr=s(QS);ZUe=r(zKr,"GLPNConfig"),zKr.forEach(t),eJe=r(nwe," (GLPN model)"),nwe.forEach(t),oJe=i(L),vm=n(L,"LI",{});var swe=s(vm);cae=n(swe,"STRONG",{});var WKr=s(cae);rJe=r(WKr,"gpt2"),WKr.forEach(t),tJe=r(swe," \u2014 "),HS=n(swe,"A",{href:!0});var QKr=s(HS);aJe=r(QKr,"GPT2Config"),QKr.forEach(t),nJe=r(swe," (OpenAI GPT-2 model)"),swe.forEach(t),sJe=i(L),Fm=n(L,"LI",{});var lwe=s(Fm);fae=n(lwe,"STRONG",{});var HKr=s(fae);lJe=r(HKr,"gpt_neo"),HKr.forEach(t),iJe=r(lwe," \u2014 "),US=n(lwe,"A",{href:!0});var UKr=s(US);dJe=r(UKr,"GPTNeoConfig"),UKr.forEach(t),cJe=r(lwe," (GPT Neo model)"),lwe.forEach(t),fJe=i(L),Tm=n(L,"LI",{});var iwe=s(Tm);mae=n(iwe,"STRONG",{});var JKr=s(mae);mJe=r(JKr,"gpt_neox"),JKr.forEach(t),gJe=r(iwe," \u2014 "),JS=n(iwe,"A",{href:!0});var YKr=s(JS);hJe=r(YKr,"GPTNeoXConfig"),YKr.forEach(t),pJe=r(iwe," (GPT NeoX model)"),iwe.forEach(t),_Je=i(L),Mm=n(L,"LI",{});var dwe=s(Mm);gae=n(dwe,"STRONG",{});var KKr=s(gae);uJe=r(KKr,"gptj"),KKr.forEach(t),bJe=r(dwe," \u2014 "),YS=n(dwe,"A",{href:!0});var ZKr=s(YS);vJe=r(ZKr,"GPTJConfig"),ZKr.forEach(t),FJe=r(dwe," (GPT-J model)"),dwe.forEach(t),TJe=i(L),Em=n(L,"LI",{});var cwe=s(Em);hae=n(cwe,"STRONG",{});var eZr=s(hae);MJe=r(eZr,"hubert"),eZr.forEach(t),EJe=r(cwe," \u2014 "),KS=n(cwe,"A",{href:!0});var oZr=s(KS);CJe=r(oZr,"HubertConfig"),oZr.forEach(t),wJe=r(cwe," (Hubert model)"),cwe.forEach(t),AJe=i(L),Cm=n(L,"LI",{});var fwe=s(Cm);pae=n(fwe,"STRONG",{});var rZr=s(pae);LJe=r(rZr,"ibert"),rZr.forEach(t),yJe=r(fwe," \u2014 "),ZS=n(fwe,"A",{href:!0});var tZr=s(ZS);xJe=r(tZr,"IBertConfig"),tZr.forEach(t),$Je=r(fwe," (I-BERT model)"),fwe.forEach(t),kJe=i(L),wm=n(L,"LI",{});var mwe=s(wm);_ae=n(mwe,"STRONG",{});var aZr=s(_ae);SJe=r(aZr,"imagegpt"),aZr.forEach(t),RJe=r(mwe," \u2014 "),eR=n(mwe,"A",{href:!0});var nZr=s(eR);PJe=r(nZr,"ImageGPTConfig"),nZr.forEach(t),BJe=r(mwe," (ImageGPT model)"),mwe.forEach(t),IJe=i(L),Am=n(L,"LI",{});var gwe=s(Am);uae=n(gwe,"STRONG",{});var sZr=s(uae);NJe=r(sZr,"layoutlm"),sZr.forEach(t),qJe=r(gwe," \u2014 "),oR=n(gwe,"A",{href:!0});var lZr=s(oR);jJe=r(lZr,"LayoutLMConfig"),lZr.forEach(t),DJe=r(gwe," (LayoutLM model)"),gwe.forEach(t),GJe=i(L),Lm=n(L,"LI",{});var hwe=s(Lm);bae=n(hwe,"STRONG",{});var iZr=s(bae);OJe=r(iZr,"layoutlmv2"),iZr.forEach(t),VJe=r(hwe," \u2014 "),rR=n(hwe,"A",{href:!0});var dZr=s(rR);XJe=r(dZr,"LayoutLMv2Config"),dZr.forEach(t),zJe=r(hwe," (LayoutLMv2 model)"),hwe.forEach(t),WJe=i(L),ym=n(L,"LI",{});var pwe=s(ym);vae=n(pwe,"STRONG",{});var cZr=s(vae);QJe=r(cZr,"layoutlmv3"),cZr.forEach(t),HJe=r(pwe," \u2014 "),tR=n(pwe,"A",{href:!0});var fZr=s(tR);UJe=r(fZr,"LayoutLMv3Config"),fZr.forEach(t),JJe=r(pwe," (LayoutLMv3 model)"),pwe.forEach(t),YJe=i(L),xm=n(L,"LI",{});var _we=s(xm);Fae=n(_we,"STRONG",{});var mZr=s(Fae);KJe=r(mZr,"led"),mZr.forEach(t),ZJe=r(_we," \u2014 "),aR=n(_we,"A",{href:!0});var gZr=s(aR);eYe=r(gZr,"LEDConfig"),gZr.forEach(t),oYe=r(_we," (LED model)"),_we.forEach(t),rYe=i(L),$m=n(L,"LI",{});var uwe=s($m);Tae=n(uwe,"STRONG",{});var hZr=s(Tae);tYe=r(hZr,"levit"),hZr.forEach(t),aYe=r(uwe," \u2014 "),nR=n(uwe,"A",{href:!0});var pZr=s(nR);nYe=r(pZr,"LevitConfig"),pZr.forEach(t),sYe=r(uwe," (LeViT model)"),uwe.forEach(t),lYe=i(L),km=n(L,"LI",{});var bwe=s(km);Mae=n(bwe,"STRONG",{});var _Zr=s(Mae);iYe=r(_Zr,"longformer"),_Zr.forEach(t),dYe=r(bwe," \u2014 "),sR=n(bwe,"A",{href:!0});var uZr=s(sR);cYe=r(uZr,"LongformerConfig"),uZr.forEach(t),fYe=r(bwe," (Longformer model)"),bwe.forEach(t),mYe=i(L),Sm=n(L,"LI",{});var vwe=s(Sm);Eae=n(vwe,"STRONG",{});var bZr=s(Eae);gYe=r(bZr,"longt5"),bZr.forEach(t),hYe=r(vwe," \u2014 "),lR=n(vwe,"A",{href:!0});var vZr=s(lR);pYe=r(vZr,"LongT5Config"),vZr.forEach(t),_Ye=r(vwe," (LongT5 model)"),vwe.forEach(t),uYe=i(L),Rm=n(L,"LI",{});var Fwe=s(Rm);Cae=n(Fwe,"STRONG",{});var FZr=s(Cae);bYe=r(FZr,"luke"),FZr.forEach(t),vYe=r(Fwe," \u2014 "),iR=n(Fwe,"A",{href:!0});var TZr=s(iR);FYe=r(TZr,"LukeConfig"),TZr.forEach(t),TYe=r(Fwe," (LUKE model)"),Fwe.forEach(t),MYe=i(L),Pm=n(L,"LI",{});var Twe=s(Pm);wae=n(Twe,"STRONG",{});var MZr=s(wae);EYe=r(MZr,"lxmert"),MZr.forEach(t),CYe=r(Twe," \u2014 "),dR=n(Twe,"A",{href:!0});var EZr=s(dR);wYe=r(EZr,"LxmertConfig"),EZr.forEach(t),AYe=r(Twe," (LXMERT model)"),Twe.forEach(t),LYe=i(L),Bm=n(L,"LI",{});var Mwe=s(Bm);Aae=n(Mwe,"STRONG",{});var CZr=s(Aae);yYe=r(CZr,"m2m_100"),CZr.forEach(t),xYe=r(Mwe," \u2014 "),cR=n(Mwe,"A",{href:!0});var wZr=s(cR);$Ye=r(wZr,"M2M100Config"),wZr.forEach(t),kYe=r(Mwe," (M2M100 model)"),Mwe.forEach(t),SYe=i(L),Im=n(L,"LI",{});var Ewe=s(Im);Lae=n(Ewe,"STRONG",{});var AZr=s(Lae);RYe=r(AZr,"marian"),AZr.forEach(t),PYe=r(Ewe," \u2014 "),fR=n(Ewe,"A",{href:!0});var LZr=s(fR);BYe=r(LZr,"MarianConfig"),LZr.forEach(t),IYe=r(Ewe," (Marian model)"),Ewe.forEach(t),NYe=i(L),Nm=n(L,"LI",{});var Cwe=s(Nm);yae=n(Cwe,"STRONG",{});var yZr=s(yae);qYe=r(yZr,"maskformer"),yZr.forEach(t),jYe=r(Cwe," \u2014 "),mR=n(Cwe,"A",{href:!0});var xZr=s(mR);DYe=r(xZr,"MaskFormerConfig"),xZr.forEach(t),GYe=r(Cwe," (MaskFormer model)"),Cwe.forEach(t),OYe=i(L),qm=n(L,"LI",{});var wwe=s(qm);xae=n(wwe,"STRONG",{});var $Zr=s(xae);VYe=r($Zr,"mbart"),$Zr.forEach(t),XYe=r(wwe," \u2014 "),gR=n(wwe,"A",{href:!0});var kZr=s(gR);zYe=r(kZr,"MBartConfig"),kZr.forEach(t),WYe=r(wwe," (mBART model)"),wwe.forEach(t),QYe=i(L),jm=n(L,"LI",{});var Awe=s(jm);$ae=n(Awe,"STRONG",{});var SZr=s($ae);HYe=r(SZr,"mctct"),SZr.forEach(t),UYe=r(Awe," \u2014 "),hR=n(Awe,"A",{href:!0});var RZr=s(hR);JYe=r(RZr,"MCTCTConfig"),RZr.forEach(t),YYe=r(Awe," (M-CTC-T model)"),Awe.forEach(t),KYe=i(L),Dm=n(L,"LI",{});var Lwe=s(Dm);kae=n(Lwe,"STRONG",{});var PZr=s(kae);ZYe=r(PZr,"megatron-bert"),PZr.forEach(t),eKe=r(Lwe," \u2014 "),pR=n(Lwe,"A",{href:!0});var BZr=s(pR);oKe=r(BZr,"MegatronBertConfig"),BZr.forEach(t),rKe=r(Lwe," (Megatron-BERT model)"),Lwe.forEach(t),tKe=i(L),Gm=n(L,"LI",{});var ywe=s(Gm);Sae=n(ywe,"STRONG",{});var IZr=s(Sae);aKe=r(IZr,"mobilebert"),IZr.forEach(t),nKe=r(ywe," \u2014 "),_R=n(ywe,"A",{href:!0});var NZr=s(_R);sKe=r(NZr,"MobileBertConfig"),NZr.forEach(t),lKe=r(ywe," (MobileBERT model)"),ywe.forEach(t),iKe=i(L),Om=n(L,"LI",{});var xwe=s(Om);Rae=n(xwe,"STRONG",{});var qZr=s(Rae);dKe=r(qZr,"mpnet"),qZr.forEach(t),cKe=r(xwe," \u2014 "),uR=n(xwe,"A",{href:!0});var jZr=s(uR);fKe=r(jZr,"MPNetConfig"),jZr.forEach(t),mKe=r(xwe," (MPNet model)"),xwe.forEach(t),gKe=i(L),Vm=n(L,"LI",{});var $we=s(Vm);Pae=n($we,"STRONG",{});var DZr=s(Pae);hKe=r(DZr,"mt5"),DZr.forEach(t),pKe=r($we," \u2014 "),bR=n($we,"A",{href:!0});var GZr=s(bR);_Ke=r(GZr,"MT5Config"),GZr.forEach(t),uKe=r($we," (MT5 model)"),$we.forEach(t),bKe=i(L),Xm=n(L,"LI",{});var kwe=s(Xm);Bae=n(kwe,"STRONG",{});var OZr=s(Bae);vKe=r(OZr,"nezha"),OZr.forEach(t),FKe=r(kwe," \u2014 "),vR=n(kwe,"A",{href:!0});var VZr=s(vR);TKe=r(VZr,"NezhaConfig"),VZr.forEach(t),MKe=r(kwe," (Nezha model)"),kwe.forEach(t),EKe=i(L),zm=n(L,"LI",{});var Swe=s(zm);Iae=n(Swe,"STRONG",{});var XZr=s(Iae);CKe=r(XZr,"nystromformer"),XZr.forEach(t),wKe=r(Swe," \u2014 "),FR=n(Swe,"A",{href:!0});var zZr=s(FR);AKe=r(zZr,"NystromformerConfig"),zZr.forEach(t),LKe=r(Swe," (Nystr\xF6mformer model)"),Swe.forEach(t),yKe=i(L),Wm=n(L,"LI",{});var Rwe=s(Wm);Nae=n(Rwe,"STRONG",{});var WZr=s(Nae);xKe=r(WZr,"openai-gpt"),WZr.forEach(t),$Ke=r(Rwe," \u2014 "),TR=n(Rwe,"A",{href:!0});var QZr=s(TR);kKe=r(QZr,"OpenAIGPTConfig"),QZr.forEach(t),SKe=r(Rwe," (OpenAI GPT model)"),Rwe.forEach(t),RKe=i(L),Qm=n(L,"LI",{});var Pwe=s(Qm);qae=n(Pwe,"STRONG",{});var HZr=s(qae);PKe=r(HZr,"opt"),HZr.forEach(t),BKe=r(Pwe," \u2014 "),MR=n(Pwe,"A",{href:!0});var UZr=s(MR);IKe=r(UZr,"OPTConfig"),UZr.forEach(t),NKe=r(Pwe," (OPT model)"),Pwe.forEach(t),qKe=i(L),Hm=n(L,"LI",{});var Bwe=s(Hm);jae=n(Bwe,"STRONG",{});var JZr=s(jae);jKe=r(JZr,"pegasus"),JZr.forEach(t),DKe=r(Bwe," \u2014 "),ER=n(Bwe,"A",{href:!0});var YZr=s(ER);GKe=r(YZr,"PegasusConfig"),YZr.forEach(t),OKe=r(Bwe," (Pegasus model)"),Bwe.forEach(t),VKe=i(L),Um=n(L,"LI",{});var Iwe=s(Um);Dae=n(Iwe,"STRONG",{});var KZr=s(Dae);XKe=r(KZr,"perceiver"),KZr.forEach(t),zKe=r(Iwe," \u2014 "),CR=n(Iwe,"A",{href:!0});var ZZr=s(CR);WKe=r(ZZr,"PerceiverConfig"),ZZr.forEach(t),QKe=r(Iwe," (Perceiver model)"),Iwe.forEach(t),HKe=i(L),Jm=n(L,"LI",{});var Nwe=s(Jm);Gae=n(Nwe,"STRONG",{});var eet=s(Gae);UKe=r(eet,"plbart"),eet.forEach(t),JKe=r(Nwe," \u2014 "),wR=n(Nwe,"A",{href:!0});var oet=s(wR);YKe=r(oet,"PLBartConfig"),oet.forEach(t),KKe=r(Nwe," (PLBart model)"),Nwe.forEach(t),ZKe=i(L),Ym=n(L,"LI",{});var qwe=s(Ym);Oae=n(qwe,"STRONG",{});var ret=s(Oae);eZe=r(ret,"poolformer"),ret.forEach(t),oZe=r(qwe," \u2014 "),AR=n(qwe,"A",{href:!0});var tet=s(AR);rZe=r(tet,"PoolFormerConfig"),tet.forEach(t),tZe=r(qwe," (PoolFormer model)"),qwe.forEach(t),aZe=i(L),Km=n(L,"LI",{});var jwe=s(Km);Vae=n(jwe,"STRONG",{});var aet=s(Vae);nZe=r(aet,"prophetnet"),aet.forEach(t),sZe=r(jwe," \u2014 "),LR=n(jwe,"A",{href:!0});var net=s(LR);lZe=r(net,"ProphetNetConfig"),net.forEach(t),iZe=r(jwe," (ProphetNet model)"),jwe.forEach(t),dZe=i(L),Zm=n(L,"LI",{});var Dwe=s(Zm);Xae=n(Dwe,"STRONG",{});var set=s(Xae);cZe=r(set,"qdqbert"),set.forEach(t),fZe=r(Dwe," \u2014 "),yR=n(Dwe,"A",{href:!0});var iet=s(yR);mZe=r(iet,"QDQBertConfig"),iet.forEach(t),gZe=r(Dwe," (QDQBert model)"),Dwe.forEach(t),hZe=i(L),eg=n(L,"LI",{});var Gwe=s(eg);zae=n(Gwe,"STRONG",{});var det=s(zae);pZe=r(det,"rag"),det.forEach(t),_Ze=r(Gwe," \u2014 "),xR=n(Gwe,"A",{href:!0});var cet=s(xR);uZe=r(cet,"RagConfig"),cet.forEach(t),bZe=r(Gwe," (RAG model)"),Gwe.forEach(t),vZe=i(L),og=n(L,"LI",{});var Owe=s(og);Wae=n(Owe,"STRONG",{});var fet=s(Wae);FZe=r(fet,"realm"),fet.forEach(t),TZe=r(Owe," \u2014 "),$R=n(Owe,"A",{href:!0});var met=s($R);MZe=r(met,"RealmConfig"),met.forEach(t),EZe=r(Owe," (REALM model)"),Owe.forEach(t),CZe=i(L),rg=n(L,"LI",{});var Vwe=s(rg);Qae=n(Vwe,"STRONG",{});var get=s(Qae);wZe=r(get,"reformer"),get.forEach(t),AZe=r(Vwe," \u2014 "),kR=n(Vwe,"A",{href:!0});var het=s(kR);LZe=r(het,"ReformerConfig"),het.forEach(t),yZe=r(Vwe," (Reformer model)"),Vwe.forEach(t),xZe=i(L),tg=n(L,"LI",{});var Xwe=s(tg);Hae=n(Xwe,"STRONG",{});var pet=s(Hae);$Ze=r(pet,"regnet"),pet.forEach(t),kZe=r(Xwe," \u2014 "),SR=n(Xwe,"A",{href:!0});var _et=s(SR);SZe=r(_et,"RegNetConfig"),_et.forEach(t),RZe=r(Xwe," (RegNet model)"),Xwe.forEach(t),PZe=i(L),ag=n(L,"LI",{});var zwe=s(ag);Uae=n(zwe,"STRONG",{});var uet=s(Uae);BZe=r(uet,"rembert"),uet.forEach(t),IZe=r(zwe," \u2014 "),RR=n(zwe,"A",{href:!0});var bet=s(RR);NZe=r(bet,"RemBertConfig"),bet.forEach(t),qZe=r(zwe," (RemBERT model)"),zwe.forEach(t),jZe=i(L),ng=n(L,"LI",{});var Wwe=s(ng);Jae=n(Wwe,"STRONG",{});var vet=s(Jae);DZe=r(vet,"resnet"),vet.forEach(t),GZe=r(Wwe," \u2014 "),PR=n(Wwe,"A",{href:!0});var Fet=s(PR);OZe=r(Fet,"ResNetConfig"),Fet.forEach(t),VZe=r(Wwe," (ResNet model)"),Wwe.forEach(t),XZe=i(L),sg=n(L,"LI",{});var Qwe=s(sg);Yae=n(Qwe,"STRONG",{});var Tet=s(Yae);zZe=r(Tet,"retribert"),Tet.forEach(t),WZe=r(Qwe," \u2014 "),BR=n(Qwe,"A",{href:!0});var Met=s(BR);QZe=r(Met,"RetriBertConfig"),Met.forEach(t),HZe=r(Qwe," (RetriBERT model)"),Qwe.forEach(t),UZe=i(L),lg=n(L,"LI",{});var Hwe=s(lg);Kae=n(Hwe,"STRONG",{});var Eet=s(Kae);JZe=r(Eet,"roberta"),Eet.forEach(t),YZe=r(Hwe," \u2014 "),IR=n(Hwe,"A",{href:!0});var Cet=s(IR);KZe=r(Cet,"RobertaConfig"),Cet.forEach(t),ZZe=r(Hwe," (RoBERTa model)"),Hwe.forEach(t),eeo=i(L),ig=n(L,"LI",{});var Uwe=s(ig);Zae=n(Uwe,"STRONG",{});var wet=s(Zae);oeo=r(wet,"roformer"),wet.forEach(t),reo=r(Uwe," \u2014 "),NR=n(Uwe,"A",{href:!0});var Aet=s(NR);teo=r(Aet,"RoFormerConfig"),Aet.forEach(t),aeo=r(Uwe," (RoFormer model)"),Uwe.forEach(t),neo=i(L),dg=n(L,"LI",{});var Jwe=s(dg);ene=n(Jwe,"STRONG",{});var Let=s(ene);seo=r(Let,"segformer"),Let.forEach(t),leo=r(Jwe," \u2014 "),qR=n(Jwe,"A",{href:!0});var yet=s(qR);ieo=r(yet,"SegformerConfig"),yet.forEach(t),deo=r(Jwe," (SegFormer model)"),Jwe.forEach(t),ceo=i(L),cg=n(L,"LI",{});var Ywe=s(cg);one=n(Ywe,"STRONG",{});var xet=s(one);feo=r(xet,"sew"),xet.forEach(t),meo=r(Ywe," \u2014 "),jR=n(Ywe,"A",{href:!0});var $et=s(jR);geo=r($et,"SEWConfig"),$et.forEach(t),heo=r(Ywe," (SEW model)"),Ywe.forEach(t),peo=i(L),fg=n(L,"LI",{});var Kwe=s(fg);rne=n(Kwe,"STRONG",{});var ket=s(rne);_eo=r(ket,"sew-d"),ket.forEach(t),ueo=r(Kwe," \u2014 "),DR=n(Kwe,"A",{href:!0});var Set=s(DR);beo=r(Set,"SEWDConfig"),Set.forEach(t),veo=r(Kwe," (SEW-D model)"),Kwe.forEach(t),Feo=i(L),mg=n(L,"LI",{});var Zwe=s(mg);tne=n(Zwe,"STRONG",{});var Ret=s(tne);Teo=r(Ret,"speech-encoder-decoder"),Ret.forEach(t),Meo=r(Zwe," \u2014 "),GR=n(Zwe,"A",{href:!0});var Pet=s(GR);Eeo=r(Pet,"SpeechEncoderDecoderConfig"),Pet.forEach(t),Ceo=r(Zwe," (Speech Encoder decoder model)"),Zwe.forEach(t),weo=i(L),gg=n(L,"LI",{});var eAe=s(gg);ane=n(eAe,"STRONG",{});var Bet=s(ane);Aeo=r(Bet,"speech_to_text"),Bet.forEach(t),Leo=r(eAe," \u2014 "),OR=n(eAe,"A",{href:!0});var Iet=s(OR);yeo=r(Iet,"Speech2TextConfig"),Iet.forEach(t),xeo=r(eAe," (Speech2Text model)"),eAe.forEach(t),$eo=i(L),hg=n(L,"LI",{});var oAe=s(hg);nne=n(oAe,"STRONG",{});var Net=s(nne);keo=r(Net,"speech_to_text_2"),Net.forEach(t),Seo=r(oAe," \u2014 "),VR=n(oAe,"A",{href:!0});var qet=s(VR);Reo=r(qet,"Speech2Text2Config"),qet.forEach(t),Peo=r(oAe," (Speech2Text2 model)"),oAe.forEach(t),Beo=i(L),pg=n(L,"LI",{});var rAe=s(pg);sne=n(rAe,"STRONG",{});var jet=s(sne);Ieo=r(jet,"splinter"),jet.forEach(t),Neo=r(rAe," \u2014 "),XR=n(rAe,"A",{href:!0});var Det=s(XR);qeo=r(Det,"SplinterConfig"),Det.forEach(t),jeo=r(rAe," (Splinter model)"),rAe.forEach(t),Deo=i(L),_g=n(L,"LI",{});var tAe=s(_g);lne=n(tAe,"STRONG",{});var Get=s(lne);Geo=r(Get,"squeezebert"),Get.forEach(t),Oeo=r(tAe," \u2014 "),zR=n(tAe,"A",{href:!0});var Oet=s(zR);Veo=r(Oet,"SqueezeBertConfig"),Oet.forEach(t),Xeo=r(tAe," (SqueezeBERT model)"),tAe.forEach(t),zeo=i(L),ug=n(L,"LI",{});var aAe=s(ug);ine=n(aAe,"STRONG",{});var Vet=s(ine);Weo=r(Vet,"swin"),Vet.forEach(t),Qeo=r(aAe," \u2014 "),WR=n(aAe,"A",{href:!0});var Xet=s(WR);Heo=r(Xet,"SwinConfig"),Xet.forEach(t),Ueo=r(aAe," (Swin Transformer model)"),aAe.forEach(t),Jeo=i(L),bg=n(L,"LI",{});var nAe=s(bg);dne=n(nAe,"STRONG",{});var zet=s(dne);Yeo=r(zet,"t5"),zet.forEach(t),Keo=r(nAe," \u2014 "),QR=n(nAe,"A",{href:!0});var Wet=s(QR);Zeo=r(Wet,"T5Config"),Wet.forEach(t),eoo=r(nAe," (T5 model)"),nAe.forEach(t),ooo=i(L),vg=n(L,"LI",{});var sAe=s(vg);cne=n(sAe,"STRONG",{});var Qet=s(cne);roo=r(Qet,"tapas"),Qet.forEach(t),too=r(sAe," \u2014 "),HR=n(sAe,"A",{href:!0});var Het=s(HR);aoo=r(Het,"TapasConfig"),Het.forEach(t),noo=r(sAe," (TAPAS model)"),sAe.forEach(t),soo=i(L),Fg=n(L,"LI",{});var lAe=s(Fg);fne=n(lAe,"STRONG",{});var Uet=s(fne);loo=r(Uet,"trajectory_transformer"),Uet.forEach(t),ioo=r(lAe," \u2014 "),UR=n(lAe,"A",{href:!0});var Jet=s(UR);doo=r(Jet,"TrajectoryTransformerConfig"),Jet.forEach(t),coo=r(lAe," (Trajectory Transformer model)"),lAe.forEach(t),foo=i(L),Tg=n(L,"LI",{});var iAe=s(Tg);mne=n(iAe,"STRONG",{});var Yet=s(mne);moo=r(Yet,"transfo-xl"),Yet.forEach(t),goo=r(iAe," \u2014 "),JR=n(iAe,"A",{href:!0});var Ket=s(JR);hoo=r(Ket,"TransfoXLConfig"),Ket.forEach(t),poo=r(iAe," (Transformer-XL model)"),iAe.forEach(t),_oo=i(L),Mg=n(L,"LI",{});var dAe=s(Mg);gne=n(dAe,"STRONG",{});var Zet=s(gne);uoo=r(Zet,"trocr"),Zet.forEach(t),boo=r(dAe," \u2014 "),YR=n(dAe,"A",{href:!0});var eot=s(YR);voo=r(eot,"TrOCRConfig"),eot.forEach(t),Foo=r(dAe," (TrOCR model)"),dAe.forEach(t),Too=i(L),Eg=n(L,"LI",{});var cAe=s(Eg);hne=n(cAe,"STRONG",{});var oot=s(hne);Moo=r(oot,"unispeech"),oot.forEach(t),Eoo=r(cAe," \u2014 "),KR=n(cAe,"A",{href:!0});var rot=s(KR);Coo=r(rot,"UniSpeechConfig"),rot.forEach(t),woo=r(cAe," (UniSpeech model)"),cAe.forEach(t),Aoo=i(L),Cg=n(L,"LI",{});var fAe=s(Cg);pne=n(fAe,"STRONG",{});var tot=s(pne);Loo=r(tot,"unispeech-sat"),tot.forEach(t),yoo=r(fAe," \u2014 "),ZR=n(fAe,"A",{href:!0});var aot=s(ZR);xoo=r(aot,"UniSpeechSatConfig"),aot.forEach(t),$oo=r(fAe," (UniSpeechSat model)"),fAe.forEach(t),koo=i(L),wg=n(L,"LI",{});var mAe=s(wg);_ne=n(mAe,"STRONG",{});var not=s(_ne);Soo=r(not,"van"),not.forEach(t),Roo=r(mAe," \u2014 "),eP=n(mAe,"A",{href:!0});var sot=s(eP);Poo=r(sot,"VanConfig"),sot.forEach(t),Boo=r(mAe," (VAN model)"),mAe.forEach(t),Ioo=i(L),Ag=n(L,"LI",{});var gAe=s(Ag);une=n(gAe,"STRONG",{});var lot=s(une);Noo=r(lot,"vilt"),lot.forEach(t),qoo=r(gAe," \u2014 "),oP=n(gAe,"A",{href:!0});var iot=s(oP);joo=r(iot,"ViltConfig"),iot.forEach(t),Doo=r(gAe," (ViLT model)"),gAe.forEach(t),Goo=i(L),Lg=n(L,"LI",{});var hAe=s(Lg);bne=n(hAe,"STRONG",{});var dot=s(bne);Ooo=r(dot,"vision-encoder-decoder"),dot.forEach(t),Voo=r(hAe," \u2014 "),rP=n(hAe,"A",{href:!0});var cot=s(rP);Xoo=r(cot,"VisionEncoderDecoderConfig"),cot.forEach(t),zoo=r(hAe," (Vision Encoder decoder model)"),hAe.forEach(t),Woo=i(L),yg=n(L,"LI",{});var pAe=s(yg);vne=n(pAe,"STRONG",{});var fot=s(vne);Qoo=r(fot,"vision-text-dual-encoder"),fot.forEach(t),Hoo=r(pAe," \u2014 "),tP=n(pAe,"A",{href:!0});var mot=s(tP);Uoo=r(mot,"VisionTextDualEncoderConfig"),mot.forEach(t),Joo=r(pAe," (VisionTextDualEncoder model)"),pAe.forEach(t),Yoo=i(L),xg=n(L,"LI",{});var _Ae=s(xg);Fne=n(_Ae,"STRONG",{});var got=s(Fne);Koo=r(got,"visual_bert"),got.forEach(t),Zoo=r(_Ae," \u2014 "),aP=n(_Ae,"A",{href:!0});var hot=s(aP);ero=r(hot,"VisualBertConfig"),hot.forEach(t),oro=r(_Ae," (VisualBERT model)"),_Ae.forEach(t),rro=i(L),$g=n(L,"LI",{});var uAe=s($g);Tne=n(uAe,"STRONG",{});var pot=s(Tne);tro=r(pot,"vit"),pot.forEach(t),aro=r(uAe," \u2014 "),nP=n(uAe,"A",{href:!0});var _ot=s(nP);nro=r(_ot,"ViTConfig"),_ot.forEach(t),sro=r(uAe," (ViT model)"),uAe.forEach(t),lro=i(L),kg=n(L,"LI",{});var bAe=s(kg);Mne=n(bAe,"STRONG",{});var uot=s(Mne);iro=r(uot,"vit_mae"),uot.forEach(t),dro=r(bAe," \u2014 "),sP=n(bAe,"A",{href:!0});var bot=s(sP);cro=r(bot,"ViTMAEConfig"),bot.forEach(t),fro=r(bAe," (ViTMAE model)"),bAe.forEach(t),mro=i(L),Sg=n(L,"LI",{});var vAe=s(Sg);Ene=n(vAe,"STRONG",{});var vot=s(Ene);gro=r(vot,"wav2vec2"),vot.forEach(t),hro=r(vAe," \u2014 "),lP=n(vAe,"A",{href:!0});var Fot=s(lP);pro=r(Fot,"Wav2Vec2Config"),Fot.forEach(t),_ro=r(vAe," (Wav2Vec2 model)"),vAe.forEach(t),uro=i(L),Rg=n(L,"LI",{});var FAe=s(Rg);Cne=n(FAe,"STRONG",{});var Tot=s(Cne);bro=r(Tot,"wav2vec2-conformer"),Tot.forEach(t),vro=r(FAe," \u2014 "),iP=n(FAe,"A",{href:!0});var Mot=s(iP);Fro=r(Mot,"Wav2Vec2ConformerConfig"),Mot.forEach(t),Tro=r(FAe," (Wav2Vec2-Conformer model)"),FAe.forEach(t),Mro=i(L),Pg=n(L,"LI",{});var TAe=s(Pg);wne=n(TAe,"STRONG",{});var Eot=s(wne);Ero=r(Eot,"wavlm"),Eot.forEach(t),Cro=r(TAe," \u2014 "),dP=n(TAe,"A",{href:!0});var Cot=s(dP);wro=r(Cot,"WavLMConfig"),Cot.forEach(t),Aro=r(TAe," (WavLM model)"),TAe.forEach(t),Lro=i(L),Bg=n(L,"LI",{});var MAe=s(Bg);Ane=n(MAe,"STRONG",{});var wot=s(Ane);yro=r(wot,"xglm"),wot.forEach(t),xro=r(MAe," \u2014 "),cP=n(MAe,"A",{href:!0});var Aot=s(cP);$ro=r(Aot,"XGLMConfig"),Aot.forEach(t),kro=r(MAe," (XGLM model)"),MAe.forEach(t),Sro=i(L),Ig=n(L,"LI",{});var EAe=s(Ig);Lne=n(EAe,"STRONG",{});var Lot=s(Lne);Rro=r(Lot,"xlm"),Lot.forEach(t),Pro=r(EAe," \u2014 "),fP=n(EAe,"A",{href:!0});var yot=s(fP);Bro=r(yot,"XLMConfig"),yot.forEach(t),Iro=r(EAe," (XLM model)"),EAe.forEach(t),Nro=i(L),Ng=n(L,"LI",{});var CAe=s(Ng);yne=n(CAe,"STRONG",{});var xot=s(yne);qro=r(xot,"xlm-prophetnet"),xot.forEach(t),jro=r(CAe," \u2014 "),mP=n(CAe,"A",{href:!0});var $ot=s(mP);Dro=r($ot,"XLMProphetNetConfig"),$ot.forEach(t),Gro=r(CAe," (XLM-ProphetNet model)"),CAe.forEach(t),Oro=i(L),qg=n(L,"LI",{});var wAe=s(qg);xne=n(wAe,"STRONG",{});var kot=s(xne);Vro=r(kot,"xlm-roberta"),kot.forEach(t),Xro=r(wAe," \u2014 "),gP=n(wAe,"A",{href:!0});var Sot=s(gP);zro=r(Sot,"XLMRobertaConfig"),Sot.forEach(t),Wro=r(wAe," (XLM-RoBERTa model)"),wAe.forEach(t),Qro=i(L),jg=n(L,"LI",{});var AAe=s(jg);$ne=n(AAe,"STRONG",{});var Rot=s($ne);Hro=r(Rot,"xlm-roberta-xl"),Rot.forEach(t),Uro=r(AAe," \u2014 "),hP=n(AAe,"A",{href:!0});var Pot=s(hP);Jro=r(Pot,"XLMRobertaXLConfig"),Pot.forEach(t),Yro=r(AAe," (XLM-RoBERTa-XL model)"),AAe.forEach(t),Kro=i(L),Dg=n(L,"LI",{});var LAe=s(Dg);kne=n(LAe,"STRONG",{});var Bot=s(kne);Zro=r(Bot,"xlnet"),Bot.forEach(t),eto=r(LAe," \u2014 "),pP=n(LAe,"A",{href:!0});var Iot=s(pP);oto=r(Iot,"XLNetConfig"),Iot.forEach(t),rto=r(LAe," (XLNet model)"),LAe.forEach(t),tto=i(L),Gg=n(L,"LI",{});var yAe=s(Gg);Sne=n(yAe,"STRONG",{});var Not=s(Sne);ato=r(Not,"yolos"),Not.forEach(t),nto=r(yAe," \u2014 "),_P=n(yAe,"A",{href:!0});var qot=s(_P);sto=r(qot,"YolosConfig"),qot.forEach(t),lto=r(yAe," (YOLOS model)"),yAe.forEach(t),ito=i(L),Og=n(L,"LI",{});var xAe=s(Og);Rne=n(xAe,"STRONG",{});var jot=s(Rne);dto=r(jot,"yoso"),jot.forEach(t),cto=r(xAe," \u2014 "),uP=n(xAe,"A",{href:!0});var Dot=s(uP);fto=r(Dot,"YosoConfig"),Dot.forEach(t),mto=r(xAe," (YOSO model)"),xAe.forEach(t),L.forEach(t),gto=i(at),T(Vg.$$.fragment,at),at.forEach(t),hto=i(tt),Xg=n(tt,"DIV",{class:!0});var eXe=s(Xg);T(qA.$$.fragment,eXe),pto=i(eXe),Pne=n(eXe,"P",{});var Got=s(Pne);_to=r(Got,"Register a new configuration for this class."),Got.forEach(t),eXe.forEach(t),tt.forEach(t),oOe=i(f),Ri=n(f,"H2",{class:!0});var oXe=s(Ri);zg=n(oXe,"A",{id:!0,class:!0,href:!0});var Oot=s(zg);Bne=n(Oot,"SPAN",{});var Vot=s(Bne);T(jA.$$.fragment,Vot),Vot.forEach(t),Oot.forEach(t),uto=i(oXe),Ine=n(oXe,"SPAN",{});var Xot=s(Ine);bto=r(Xot,"AutoTokenizer"),Xot.forEach(t),oXe.forEach(t),rOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(DA.$$.fragment,Hs),vto=i(Hs),GA=n(Hs,"P",{});var rXe=s(GA);Fto=r(rXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bP=n(rXe,"A",{href:!0});var zot=s(bP);Tto=r(zot,"AutoTokenizer.from_pretrained()"),zot.forEach(t),Mto=r(rXe," class method."),rXe.forEach(t),Eto=i(Hs),OA=n(Hs,"P",{});var tXe=s(OA);Cto=r(tXe,"This class cannot be instantiated directly using "),Nne=n(tXe,"CODE",{});var Wot=s(Nne);wto=r(Wot,"__init__()"),Wot.forEach(t),Ato=r(tXe," (throws an error)."),tXe.forEach(t),Lto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(VA.$$.fragment,Us),yto=i(Us),qne=n(Us,"P",{});var Qot=s(qne);xto=r(Qot,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qot.forEach(t),$to=i(Us),Sa=n(Us,"P",{});var S3=s(Sa);kto=r(S3,"The tokenizer class to instantiate is selected based on the "),jne=n(S3,"CODE",{});var Hot=s(jne);Sto=r(Hot,"model_type"),Hot.forEach(t),Rto=r(S3,` property of the config object (either
passed as an argument or loaded from `),Dne=n(S3,"CODE",{});var Uot=s(Dne);Pto=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),Bto=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(S3,"CODE",{});var Jot=s(Gne);Ito=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),Nto=r(S3,":"),S3.forEach(t),qto=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var U$=s(qn);One=n(U$,"STRONG",{});var Yot=s(One);jto=r(Yot,"albert"),Yot.forEach(t),Dto=r(U$," \u2014 "),vP=n(U$,"A",{href:!0});var Kot=s(vP);Gto=r(Kot,"AlbertTokenizer"),Kot.forEach(t),Oto=r(U$," or "),FP=n(U$,"A",{href:!0});var Zot=s(FP);Vto=r(Zot,"AlbertTokenizerFast"),Zot.forEach(t),Xto=r(U$," (ALBERT model)"),U$.forEach(t),zto=i(S),jn=n(S,"LI",{});var J$=s(jn);Vne=n(J$,"STRONG",{});var ert=s(Vne);Wto=r(ert,"bart"),ert.forEach(t),Qto=r(J$," \u2014 "),TP=n(J$,"A",{href:!0});var ort=s(TP);Hto=r(ort,"BartTokenizer"),ort.forEach(t),Uto=r(J$," or "),MP=n(J$,"A",{href:!0});var rrt=s(MP);Jto=r(rrt,"BartTokenizerFast"),rrt.forEach(t),Yto=r(J$," (BART model)"),J$.forEach(t),Kto=i(S),Dn=n(S,"LI",{});var Y$=s(Dn);Xne=n(Y$,"STRONG",{});var trt=s(Xne);Zto=r(trt,"barthez"),trt.forEach(t),eao=r(Y$," \u2014 "),EP=n(Y$,"A",{href:!0});var art=s(EP);oao=r(art,"BarthezTokenizer"),art.forEach(t),rao=r(Y$," or "),CP=n(Y$,"A",{href:!0});var nrt=s(CP);tao=r(nrt,"BarthezTokenizerFast"),nrt.forEach(t),aao=r(Y$," (BARThez model)"),Y$.forEach(t),nao=i(S),Wg=n(S,"LI",{});var $Ae=s(Wg);zne=n($Ae,"STRONG",{});var srt=s(zne);sao=r(srt,"bartpho"),srt.forEach(t),lao=r($Ae," \u2014 "),wP=n($Ae,"A",{href:!0});var lrt=s(wP);iao=r(lrt,"BartphoTokenizer"),lrt.forEach(t),dao=r($Ae," (BARTpho model)"),$Ae.forEach(t),cao=i(S),Gn=n(S,"LI",{});var K$=s(Gn);Wne=n(K$,"STRONG",{});var irt=s(Wne);fao=r(irt,"bert"),irt.forEach(t),mao=r(K$," \u2014 "),AP=n(K$,"A",{href:!0});var drt=s(AP);gao=r(drt,"BertTokenizer"),drt.forEach(t),hao=r(K$," or "),LP=n(K$,"A",{href:!0});var crt=s(LP);pao=r(crt,"BertTokenizerFast"),crt.forEach(t),_ao=r(K$," (BERT model)"),K$.forEach(t),uao=i(S),Qg=n(S,"LI",{});var kAe=s(Qg);Qne=n(kAe,"STRONG",{});var frt=s(Qne);bao=r(frt,"bert-generation"),frt.forEach(t),vao=r(kAe," \u2014 "),yP=n(kAe,"A",{href:!0});var mrt=s(yP);Fao=r(mrt,"BertGenerationTokenizer"),mrt.forEach(t),Tao=r(kAe," (Bert Generation model)"),kAe.forEach(t),Mao=i(S),Hg=n(S,"LI",{});var SAe=s(Hg);Hne=n(SAe,"STRONG",{});var grt=s(Hne);Eao=r(grt,"bert-japanese"),grt.forEach(t),Cao=r(SAe," \u2014 "),xP=n(SAe,"A",{href:!0});var hrt=s(xP);wao=r(hrt,"BertJapaneseTokenizer"),hrt.forEach(t),Aao=r(SAe," (BertJapanese model)"),SAe.forEach(t),Lao=i(S),Ug=n(S,"LI",{});var RAe=s(Ug);Une=n(RAe,"STRONG",{});var prt=s(Une);yao=r(prt,"bertweet"),prt.forEach(t),xao=r(RAe," \u2014 "),$P=n(RAe,"A",{href:!0});var _rt=s($P);$ao=r(_rt,"BertweetTokenizer"),_rt.forEach(t),kao=r(RAe," (BERTweet model)"),RAe.forEach(t),Sao=i(S),On=n(S,"LI",{});var Z$=s(On);Jne=n(Z$,"STRONG",{});var urt=s(Jne);Rao=r(urt,"big_bird"),urt.forEach(t),Pao=r(Z$," \u2014 "),kP=n(Z$,"A",{href:!0});var brt=s(kP);Bao=r(brt,"BigBirdTokenizer"),brt.forEach(t),Iao=r(Z$," or "),SP=n(Z$,"A",{href:!0});var vrt=s(SP);Nao=r(vrt,"BigBirdTokenizerFast"),vrt.forEach(t),qao=r(Z$," (BigBird model)"),Z$.forEach(t),jao=i(S),Vn=n(S,"LI",{});var ek=s(Vn);Yne=n(ek,"STRONG",{});var Frt=s(Yne);Dao=r(Frt,"bigbird_pegasus"),Frt.forEach(t),Gao=r(ek," \u2014 "),RP=n(ek,"A",{href:!0});var Trt=s(RP);Oao=r(Trt,"PegasusTokenizer"),Trt.forEach(t),Vao=r(ek," or "),PP=n(ek,"A",{href:!0});var Mrt=s(PP);Xao=r(Mrt,"PegasusTokenizerFast"),Mrt.forEach(t),zao=r(ek," (BigBird-Pegasus model)"),ek.forEach(t),Wao=i(S),Xn=n(S,"LI",{});var ok=s(Xn);Kne=n(ok,"STRONG",{});var Ert=s(Kne);Qao=r(Ert,"blenderbot"),Ert.forEach(t),Hao=r(ok," \u2014 "),BP=n(ok,"A",{href:!0});var Crt=s(BP);Uao=r(Crt,"BlenderbotTokenizer"),Crt.forEach(t),Jao=r(ok," or "),IP=n(ok,"A",{href:!0});var wrt=s(IP);Yao=r(wrt,"BlenderbotTokenizerFast"),wrt.forEach(t),Kao=r(ok," (Blenderbot model)"),ok.forEach(t),Zao=i(S),Jg=n(S,"LI",{});var PAe=s(Jg);Zne=n(PAe,"STRONG",{});var Art=s(Zne);eno=r(Art,"blenderbot-small"),Art.forEach(t),ono=r(PAe," \u2014 "),NP=n(PAe,"A",{href:!0});var Lrt=s(NP);rno=r(Lrt,"BlenderbotSmallTokenizer"),Lrt.forEach(t),tno=r(PAe," (BlenderbotSmall model)"),PAe.forEach(t),ano=i(S),Yg=n(S,"LI",{});var BAe=s(Yg);ese=n(BAe,"STRONG",{});var yrt=s(ese);nno=r(yrt,"bloom"),yrt.forEach(t),sno=r(BAe," \u2014 "),qP=n(BAe,"A",{href:!0});var xrt=s(qP);lno=r(xrt,"BloomTokenizerFast"),xrt.forEach(t),ino=r(BAe," (BLOOM model)"),BAe.forEach(t),dno=i(S),Kg=n(S,"LI",{});var IAe=s(Kg);ose=n(IAe,"STRONG",{});var $rt=s(ose);cno=r($rt,"byt5"),$rt.forEach(t),fno=r(IAe," \u2014 "),jP=n(IAe,"A",{href:!0});var krt=s(jP);mno=r(krt,"ByT5Tokenizer"),krt.forEach(t),gno=r(IAe," (ByT5 model)"),IAe.forEach(t),hno=i(S),zn=n(S,"LI",{});var rk=s(zn);rse=n(rk,"STRONG",{});var Srt=s(rse);pno=r(Srt,"camembert"),Srt.forEach(t),_no=r(rk," \u2014 "),DP=n(rk,"A",{href:!0});var Rrt=s(DP);uno=r(Rrt,"CamembertTokenizer"),Rrt.forEach(t),bno=r(rk," or "),GP=n(rk,"A",{href:!0});var Prt=s(GP);vno=r(Prt,"CamembertTokenizerFast"),Prt.forEach(t),Fno=r(rk," (CamemBERT model)"),rk.forEach(t),Tno=i(S),Zg=n(S,"LI",{});var NAe=s(Zg);tse=n(NAe,"STRONG",{});var Brt=s(tse);Mno=r(Brt,"canine"),Brt.forEach(t),Eno=r(NAe," \u2014 "),OP=n(NAe,"A",{href:!0});var Irt=s(OP);Cno=r(Irt,"CanineTokenizer"),Irt.forEach(t),wno=r(NAe," (CANINE model)"),NAe.forEach(t),Ano=i(S),Wn=n(S,"LI",{});var tk=s(Wn);ase=n(tk,"STRONG",{});var Nrt=s(ase);Lno=r(Nrt,"clip"),Nrt.forEach(t),yno=r(tk," \u2014 "),VP=n(tk,"A",{href:!0});var qrt=s(VP);xno=r(qrt,"CLIPTokenizer"),qrt.forEach(t),$no=r(tk," or "),XP=n(tk,"A",{href:!0});var jrt=s(XP);kno=r(jrt,"CLIPTokenizerFast"),jrt.forEach(t),Sno=r(tk," (CLIP model)"),tk.forEach(t),Rno=i(S),Qn=n(S,"LI",{});var ak=s(Qn);nse=n(ak,"STRONG",{});var Drt=s(nse);Pno=r(Drt,"convbert"),Drt.forEach(t),Bno=r(ak," \u2014 "),zP=n(ak,"A",{href:!0});var Grt=s(zP);Ino=r(Grt,"ConvBertTokenizer"),Grt.forEach(t),Nno=r(ak," or "),WP=n(ak,"A",{href:!0});var Ort=s(WP);qno=r(Ort,"ConvBertTokenizerFast"),Ort.forEach(t),jno=r(ak," (ConvBERT model)"),ak.forEach(t),Dno=i(S),Hn=n(S,"LI",{});var nk=s(Hn);sse=n(nk,"STRONG",{});var Vrt=s(sse);Gno=r(Vrt,"cpm"),Vrt.forEach(t),Ono=r(nk," \u2014 "),QP=n(nk,"A",{href:!0});var Xrt=s(QP);Vno=r(Xrt,"CpmTokenizer"),Xrt.forEach(t),Xno=r(nk," or "),HP=n(nk,"A",{href:!0});var zrt=s(HP);zno=r(zrt,"CpmTokenizerFast"),zrt.forEach(t),Wno=r(nk," (CPM model)"),nk.forEach(t),Qno=i(S),eh=n(S,"LI",{});var qAe=s(eh);lse=n(qAe,"STRONG",{});var Wrt=s(lse);Hno=r(Wrt,"ctrl"),Wrt.forEach(t),Uno=r(qAe," \u2014 "),UP=n(qAe,"A",{href:!0});var Qrt=s(UP);Jno=r(Qrt,"CTRLTokenizer"),Qrt.forEach(t),Yno=r(qAe," (CTRL model)"),qAe.forEach(t),Kno=i(S),Un=n(S,"LI",{});var sk=s(Un);ise=n(sk,"STRONG",{});var Hrt=s(ise);Zno=r(Hrt,"data2vec-text"),Hrt.forEach(t),eso=r(sk," \u2014 "),JP=n(sk,"A",{href:!0});var Urt=s(JP);oso=r(Urt,"RobertaTokenizer"),Urt.forEach(t),rso=r(sk," or "),YP=n(sk,"A",{href:!0});var Jrt=s(YP);tso=r(Jrt,"RobertaTokenizerFast"),Jrt.forEach(t),aso=r(sk," (Data2VecText model)"),sk.forEach(t),nso=i(S),Jn=n(S,"LI",{});var lk=s(Jn);dse=n(lk,"STRONG",{});var Yrt=s(dse);sso=r(Yrt,"deberta"),Yrt.forEach(t),lso=r(lk," \u2014 "),KP=n(lk,"A",{href:!0});var Krt=s(KP);iso=r(Krt,"DebertaTokenizer"),Krt.forEach(t),dso=r(lk," or "),ZP=n(lk,"A",{href:!0});var Zrt=s(ZP);cso=r(Zrt,"DebertaTokenizerFast"),Zrt.forEach(t),fso=r(lk," (DeBERTa model)"),lk.forEach(t),mso=i(S),Yn=n(S,"LI",{});var ik=s(Yn);cse=n(ik,"STRONG",{});var ett=s(cse);gso=r(ett,"deberta-v2"),ett.forEach(t),hso=r(ik," \u2014 "),eB=n(ik,"A",{href:!0});var ott=s(eB);pso=r(ott,"DebertaV2Tokenizer"),ott.forEach(t),_so=r(ik," or "),oB=n(ik,"A",{href:!0});var rtt=s(oB);uso=r(rtt,"DebertaV2TokenizerFast"),rtt.forEach(t),bso=r(ik," (DeBERTa-v2 model)"),ik.forEach(t),vso=i(S),Kn=n(S,"LI",{});var dk=s(Kn);fse=n(dk,"STRONG",{});var ttt=s(fse);Fso=r(ttt,"distilbert"),ttt.forEach(t),Tso=r(dk," \u2014 "),rB=n(dk,"A",{href:!0});var att=s(rB);Mso=r(att,"DistilBertTokenizer"),att.forEach(t),Eso=r(dk," or "),tB=n(dk,"A",{href:!0});var ntt=s(tB);Cso=r(ntt,"DistilBertTokenizerFast"),ntt.forEach(t),wso=r(dk," (DistilBERT model)"),dk.forEach(t),Aso=i(S),Zn=n(S,"LI",{});var ck=s(Zn);mse=n(ck,"STRONG",{});var stt=s(mse);Lso=r(stt,"dpr"),stt.forEach(t),yso=r(ck," \u2014 "),aB=n(ck,"A",{href:!0});var ltt=s(aB);xso=r(ltt,"DPRQuestionEncoderTokenizer"),ltt.forEach(t),$so=r(ck," or "),nB=n(ck,"A",{href:!0});var itt=s(nB);kso=r(itt,"DPRQuestionEncoderTokenizerFast"),itt.forEach(t),Sso=r(ck," (DPR model)"),ck.forEach(t),Rso=i(S),es=n(S,"LI",{});var fk=s(es);gse=n(fk,"STRONG",{});var dtt=s(gse);Pso=r(dtt,"electra"),dtt.forEach(t),Bso=r(fk," \u2014 "),sB=n(fk,"A",{href:!0});var ctt=s(sB);Iso=r(ctt,"ElectraTokenizer"),ctt.forEach(t),Nso=r(fk," or "),lB=n(fk,"A",{href:!0});var ftt=s(lB);qso=r(ftt,"ElectraTokenizerFast"),ftt.forEach(t),jso=r(fk," (ELECTRA model)"),fk.forEach(t),Dso=i(S),oh=n(S,"LI",{});var jAe=s(oh);hse=n(jAe,"STRONG",{});var mtt=s(hse);Gso=r(mtt,"flaubert"),mtt.forEach(t),Oso=r(jAe," \u2014 "),iB=n(jAe,"A",{href:!0});var gtt=s(iB);Vso=r(gtt,"FlaubertTokenizer"),gtt.forEach(t),Xso=r(jAe," (FlauBERT model)"),jAe.forEach(t),zso=i(S),os=n(S,"LI",{});var mk=s(os);pse=n(mk,"STRONG",{});var htt=s(pse);Wso=r(htt,"fnet"),htt.forEach(t),Qso=r(mk," \u2014 "),dB=n(mk,"A",{href:!0});var ptt=s(dB);Hso=r(ptt,"FNetTokenizer"),ptt.forEach(t),Uso=r(mk," or "),cB=n(mk,"A",{href:!0});var _tt=s(cB);Jso=r(_tt,"FNetTokenizerFast"),_tt.forEach(t),Yso=r(mk," (FNet model)"),mk.forEach(t),Kso=i(S),rh=n(S,"LI",{});var DAe=s(rh);_se=n(DAe,"STRONG",{});var utt=s(_se);Zso=r(utt,"fsmt"),utt.forEach(t),elo=r(DAe," \u2014 "),fB=n(DAe,"A",{href:!0});var btt=s(fB);olo=r(btt,"FSMTTokenizer"),btt.forEach(t),rlo=r(DAe," (FairSeq Machine-Translation model)"),DAe.forEach(t),tlo=i(S),rs=n(S,"LI",{});var gk=s(rs);use=n(gk,"STRONG",{});var vtt=s(use);alo=r(vtt,"funnel"),vtt.forEach(t),nlo=r(gk," \u2014 "),mB=n(gk,"A",{href:!0});var Ftt=s(mB);slo=r(Ftt,"FunnelTokenizer"),Ftt.forEach(t),llo=r(gk," or "),gB=n(gk,"A",{href:!0});var Ttt=s(gB);ilo=r(Ttt,"FunnelTokenizerFast"),Ttt.forEach(t),dlo=r(gk," (Funnel Transformer model)"),gk.forEach(t),clo=i(S),ts=n(S,"LI",{});var hk=s(ts);bse=n(hk,"STRONG",{});var Mtt=s(bse);flo=r(Mtt,"gpt2"),Mtt.forEach(t),mlo=r(hk," \u2014 "),hB=n(hk,"A",{href:!0});var Ett=s(hB);glo=r(Ett,"GPT2Tokenizer"),Ett.forEach(t),hlo=r(hk," or "),pB=n(hk,"A",{href:!0});var Ctt=s(pB);plo=r(Ctt,"GPT2TokenizerFast"),Ctt.forEach(t),_lo=r(hk," (OpenAI GPT-2 model)"),hk.forEach(t),ulo=i(S),as=n(S,"LI",{});var pk=s(as);vse=n(pk,"STRONG",{});var wtt=s(vse);blo=r(wtt,"gpt_neo"),wtt.forEach(t),vlo=r(pk," \u2014 "),_B=n(pk,"A",{href:!0});var Att=s(_B);Flo=r(Att,"GPT2Tokenizer"),Att.forEach(t),Tlo=r(pk," or "),uB=n(pk,"A",{href:!0});var Ltt=s(uB);Mlo=r(Ltt,"GPT2TokenizerFast"),Ltt.forEach(t),Elo=r(pk," (GPT Neo model)"),pk.forEach(t),Clo=i(S),th=n(S,"LI",{});var GAe=s(th);Fse=n(GAe,"STRONG",{});var ytt=s(Fse);wlo=r(ytt,"gpt_neox"),ytt.forEach(t),Alo=r(GAe," \u2014 "),bB=n(GAe,"A",{href:!0});var xtt=s(bB);Llo=r(xtt,"GPTNeoXTokenizerFast"),xtt.forEach(t),ylo=r(GAe," (GPT NeoX model)"),GAe.forEach(t),xlo=i(S),ns=n(S,"LI",{});var _k=s(ns);Tse=n(_k,"STRONG",{});var $tt=s(Tse);$lo=r($tt,"gptj"),$tt.forEach(t),klo=r(_k," \u2014 "),vB=n(_k,"A",{href:!0});var ktt=s(vB);Slo=r(ktt,"GPT2Tokenizer"),ktt.forEach(t),Rlo=r(_k," or "),FB=n(_k,"A",{href:!0});var Stt=s(FB);Plo=r(Stt,"GPT2TokenizerFast"),Stt.forEach(t),Blo=r(_k," (GPT-J model)"),_k.forEach(t),Ilo=i(S),ss=n(S,"LI",{});var uk=s(ss);Mse=n(uk,"STRONG",{});var Rtt=s(Mse);Nlo=r(Rtt,"herbert"),Rtt.forEach(t),qlo=r(uk," \u2014 "),TB=n(uk,"A",{href:!0});var Ptt=s(TB);jlo=r(Ptt,"HerbertTokenizer"),Ptt.forEach(t),Dlo=r(uk," or "),MB=n(uk,"A",{href:!0});var Btt=s(MB);Glo=r(Btt,"HerbertTokenizerFast"),Btt.forEach(t),Olo=r(uk," (HerBERT model)"),uk.forEach(t),Vlo=i(S),ah=n(S,"LI",{});var OAe=s(ah);Ese=n(OAe,"STRONG",{});var Itt=s(Ese);Xlo=r(Itt,"hubert"),Itt.forEach(t),zlo=r(OAe," \u2014 "),EB=n(OAe,"A",{href:!0});var Ntt=s(EB);Wlo=r(Ntt,"Wav2Vec2CTCTokenizer"),Ntt.forEach(t),Qlo=r(OAe," (Hubert model)"),OAe.forEach(t),Hlo=i(S),ls=n(S,"LI",{});var bk=s(ls);Cse=n(bk,"STRONG",{});var qtt=s(Cse);Ulo=r(qtt,"ibert"),qtt.forEach(t),Jlo=r(bk," \u2014 "),CB=n(bk,"A",{href:!0});var jtt=s(CB);Ylo=r(jtt,"RobertaTokenizer"),jtt.forEach(t),Klo=r(bk," or "),wB=n(bk,"A",{href:!0});var Dtt=s(wB);Zlo=r(Dtt,"RobertaTokenizerFast"),Dtt.forEach(t),eio=r(bk," (I-BERT model)"),bk.forEach(t),oio=i(S),is=n(S,"LI",{});var vk=s(is);wse=n(vk,"STRONG",{});var Gtt=s(wse);rio=r(Gtt,"layoutlm"),Gtt.forEach(t),tio=r(vk," \u2014 "),AB=n(vk,"A",{href:!0});var Ott=s(AB);aio=r(Ott,"LayoutLMTokenizer"),Ott.forEach(t),nio=r(vk," or "),LB=n(vk,"A",{href:!0});var Vtt=s(LB);sio=r(Vtt,"LayoutLMTokenizerFast"),Vtt.forEach(t),lio=r(vk," (LayoutLM model)"),vk.forEach(t),iio=i(S),ds=n(S,"LI",{});var Fk=s(ds);Ase=n(Fk,"STRONG",{});var Xtt=s(Ase);dio=r(Xtt,"layoutlmv2"),Xtt.forEach(t),cio=r(Fk," \u2014 "),yB=n(Fk,"A",{href:!0});var ztt=s(yB);fio=r(ztt,"LayoutLMv2Tokenizer"),ztt.forEach(t),mio=r(Fk," or "),xB=n(Fk,"A",{href:!0});var Wtt=s(xB);gio=r(Wtt,"LayoutLMv2TokenizerFast"),Wtt.forEach(t),hio=r(Fk," (LayoutLMv2 model)"),Fk.forEach(t),pio=i(S),cs=n(S,"LI",{});var Tk=s(cs);Lse=n(Tk,"STRONG",{});var Qtt=s(Lse);_io=r(Qtt,"layoutlmv3"),Qtt.forEach(t),uio=r(Tk," \u2014 "),$B=n(Tk,"A",{href:!0});var Htt=s($B);bio=r(Htt,"LayoutLMv3Tokenizer"),Htt.forEach(t),vio=r(Tk," or "),kB=n(Tk,"A",{href:!0});var Utt=s(kB);Fio=r(Utt,"LayoutLMv3TokenizerFast"),Utt.forEach(t),Tio=r(Tk," (LayoutLMv3 model)"),Tk.forEach(t),Mio=i(S),fs=n(S,"LI",{});var Mk=s(fs);yse=n(Mk,"STRONG",{});var Jtt=s(yse);Eio=r(Jtt,"layoutxlm"),Jtt.forEach(t),Cio=r(Mk," \u2014 "),SB=n(Mk,"A",{href:!0});var Ytt=s(SB);wio=r(Ytt,"LayoutXLMTokenizer"),Ytt.forEach(t),Aio=r(Mk," or "),RB=n(Mk,"A",{href:!0});var Ktt=s(RB);Lio=r(Ktt,"LayoutXLMTokenizerFast"),Ktt.forEach(t),yio=r(Mk," (LayoutXLM model)"),Mk.forEach(t),xio=i(S),ms=n(S,"LI",{});var Ek=s(ms);xse=n(Ek,"STRONG",{});var Ztt=s(xse);$io=r(Ztt,"led"),Ztt.forEach(t),kio=r(Ek," \u2014 "),PB=n(Ek,"A",{href:!0});var eat=s(PB);Sio=r(eat,"LEDTokenizer"),eat.forEach(t),Rio=r(Ek," or "),BB=n(Ek,"A",{href:!0});var oat=s(BB);Pio=r(oat,"LEDTokenizerFast"),oat.forEach(t),Bio=r(Ek," (LED model)"),Ek.forEach(t),Iio=i(S),gs=n(S,"LI",{});var Ck=s(gs);$se=n(Ck,"STRONG",{});var rat=s($se);Nio=r(rat,"longformer"),rat.forEach(t),qio=r(Ck," \u2014 "),IB=n(Ck,"A",{href:!0});var tat=s(IB);jio=r(tat,"LongformerTokenizer"),tat.forEach(t),Dio=r(Ck," or "),NB=n(Ck,"A",{href:!0});var aat=s(NB);Gio=r(aat,"LongformerTokenizerFast"),aat.forEach(t),Oio=r(Ck," (Longformer model)"),Ck.forEach(t),Vio=i(S),hs=n(S,"LI",{});var wk=s(hs);kse=n(wk,"STRONG",{});var nat=s(kse);Xio=r(nat,"longt5"),nat.forEach(t),zio=r(wk," \u2014 "),qB=n(wk,"A",{href:!0});var sat=s(qB);Wio=r(sat,"T5Tokenizer"),sat.forEach(t),Qio=r(wk," or "),jB=n(wk,"A",{href:!0});var lat=s(jB);Hio=r(lat,"T5TokenizerFast"),lat.forEach(t),Uio=r(wk," (LongT5 model)"),wk.forEach(t),Jio=i(S),nh=n(S,"LI",{});var VAe=s(nh);Sse=n(VAe,"STRONG",{});var iat=s(Sse);Yio=r(iat,"luke"),iat.forEach(t),Kio=r(VAe," \u2014 "),DB=n(VAe,"A",{href:!0});var dat=s(DB);Zio=r(dat,"LukeTokenizer"),dat.forEach(t),edo=r(VAe," (LUKE model)"),VAe.forEach(t),odo=i(S),ps=n(S,"LI",{});var Ak=s(ps);Rse=n(Ak,"STRONG",{});var cat=s(Rse);rdo=r(cat,"lxmert"),cat.forEach(t),tdo=r(Ak," \u2014 "),GB=n(Ak,"A",{href:!0});var fat=s(GB);ado=r(fat,"LxmertTokenizer"),fat.forEach(t),ndo=r(Ak," or "),OB=n(Ak,"A",{href:!0});var mat=s(OB);sdo=r(mat,"LxmertTokenizerFast"),mat.forEach(t),ldo=r(Ak," (LXMERT model)"),Ak.forEach(t),ido=i(S),sh=n(S,"LI",{});var XAe=s(sh);Pse=n(XAe,"STRONG",{});var gat=s(Pse);ddo=r(gat,"m2m_100"),gat.forEach(t),cdo=r(XAe," \u2014 "),VB=n(XAe,"A",{href:!0});var hat=s(VB);fdo=r(hat,"M2M100Tokenizer"),hat.forEach(t),mdo=r(XAe," (M2M100 model)"),XAe.forEach(t),gdo=i(S),lh=n(S,"LI",{});var zAe=s(lh);Bse=n(zAe,"STRONG",{});var pat=s(Bse);hdo=r(pat,"marian"),pat.forEach(t),pdo=r(zAe," \u2014 "),XB=n(zAe,"A",{href:!0});var _at=s(XB);_do=r(_at,"MarianTokenizer"),_at.forEach(t),udo=r(zAe," (Marian model)"),zAe.forEach(t),bdo=i(S),_s=n(S,"LI",{});var Lk=s(_s);Ise=n(Lk,"STRONG",{});var uat=s(Ise);vdo=r(uat,"mbart"),uat.forEach(t),Fdo=r(Lk," \u2014 "),zB=n(Lk,"A",{href:!0});var bat=s(zB);Tdo=r(bat,"MBartTokenizer"),bat.forEach(t),Mdo=r(Lk," or "),WB=n(Lk,"A",{href:!0});var vat=s(WB);Edo=r(vat,"MBartTokenizerFast"),vat.forEach(t),Cdo=r(Lk," (mBART model)"),Lk.forEach(t),wdo=i(S),us=n(S,"LI",{});var yk=s(us);Nse=n(yk,"STRONG",{});var Fat=s(Nse);Ado=r(Fat,"mbart50"),Fat.forEach(t),Ldo=r(yk," \u2014 "),QB=n(yk,"A",{href:!0});var Tat=s(QB);ydo=r(Tat,"MBart50Tokenizer"),Tat.forEach(t),xdo=r(yk," or "),HB=n(yk,"A",{href:!0});var Mat=s(HB);$do=r(Mat,"MBart50TokenizerFast"),Mat.forEach(t),kdo=r(yk," (mBART-50 model)"),yk.forEach(t),Sdo=i(S),bs=n(S,"LI",{});var xk=s(bs);qse=n(xk,"STRONG",{});var Eat=s(qse);Rdo=r(Eat,"megatron-bert"),Eat.forEach(t),Pdo=r(xk," \u2014 "),UB=n(xk,"A",{href:!0});var Cat=s(UB);Bdo=r(Cat,"BertTokenizer"),Cat.forEach(t),Ido=r(xk," or "),JB=n(xk,"A",{href:!0});var wat=s(JB);Ndo=r(wat,"BertTokenizerFast"),wat.forEach(t),qdo=r(xk," (Megatron-BERT model)"),xk.forEach(t),jdo=i(S),ih=n(S,"LI",{});var WAe=s(ih);jse=n(WAe,"STRONG",{});var Aat=s(jse);Ddo=r(Aat,"mluke"),Aat.forEach(t),Gdo=r(WAe," \u2014 "),YB=n(WAe,"A",{href:!0});var Lat=s(YB);Odo=r(Lat,"MLukeTokenizer"),Lat.forEach(t),Vdo=r(WAe," (mLUKE model)"),WAe.forEach(t),Xdo=i(S),vs=n(S,"LI",{});var $k=s(vs);Dse=n($k,"STRONG",{});var yat=s(Dse);zdo=r(yat,"mobilebert"),yat.forEach(t),Wdo=r($k," \u2014 "),KB=n($k,"A",{href:!0});var xat=s(KB);Qdo=r(xat,"MobileBertTokenizer"),xat.forEach(t),Hdo=r($k," or "),ZB=n($k,"A",{href:!0});var $at=s(ZB);Udo=r($at,"MobileBertTokenizerFast"),$at.forEach(t),Jdo=r($k," (MobileBERT model)"),$k.forEach(t),Ydo=i(S),Fs=n(S,"LI",{});var kk=s(Fs);Gse=n(kk,"STRONG",{});var kat=s(Gse);Kdo=r(kat,"mpnet"),kat.forEach(t),Zdo=r(kk," \u2014 "),eI=n(kk,"A",{href:!0});var Sat=s(eI);eco=r(Sat,"MPNetTokenizer"),Sat.forEach(t),oco=r(kk," or "),oI=n(kk,"A",{href:!0});var Rat=s(oI);rco=r(Rat,"MPNetTokenizerFast"),Rat.forEach(t),tco=r(kk," (MPNet model)"),kk.forEach(t),aco=i(S),Ts=n(S,"LI",{});var Sk=s(Ts);Ose=n(Sk,"STRONG",{});var Pat=s(Ose);nco=r(Pat,"mt5"),Pat.forEach(t),sco=r(Sk," \u2014 "),rI=n(Sk,"A",{href:!0});var Bat=s(rI);lco=r(Bat,"MT5Tokenizer"),Bat.forEach(t),ico=r(Sk," or "),tI=n(Sk,"A",{href:!0});var Iat=s(tI);dco=r(Iat,"MT5TokenizerFast"),Iat.forEach(t),cco=r(Sk," (MT5 model)"),Sk.forEach(t),fco=i(S),Ms=n(S,"LI",{});var Rk=s(Ms);Vse=n(Rk,"STRONG",{});var Nat=s(Vse);mco=r(Nat,"nezha"),Nat.forEach(t),gco=r(Rk," \u2014 "),aI=n(Rk,"A",{href:!0});var qat=s(aI);hco=r(qat,"BertTokenizer"),qat.forEach(t),pco=r(Rk," or "),nI=n(Rk,"A",{href:!0});var jat=s(nI);_co=r(jat,"BertTokenizerFast"),jat.forEach(t),uco=r(Rk," (Nezha model)"),Rk.forEach(t),bco=i(S),Es=n(S,"LI",{});var Pk=s(Es);Xse=n(Pk,"STRONG",{});var Dat=s(Xse);vco=r(Dat,"nystromformer"),Dat.forEach(t),Fco=r(Pk," \u2014 "),sI=n(Pk,"A",{href:!0});var Gat=s(sI);Tco=r(Gat,"AlbertTokenizer"),Gat.forEach(t),Mco=r(Pk," or "),lI=n(Pk,"A",{href:!0});var Oat=s(lI);Eco=r(Oat,"AlbertTokenizerFast"),Oat.forEach(t),Cco=r(Pk," (Nystr\xF6mformer model)"),Pk.forEach(t),wco=i(S),Cs=n(S,"LI",{});var Bk=s(Cs);zse=n(Bk,"STRONG",{});var Vat=s(zse);Aco=r(Vat,"openai-gpt"),Vat.forEach(t),Lco=r(Bk," \u2014 "),iI=n(Bk,"A",{href:!0});var Xat=s(iI);yco=r(Xat,"OpenAIGPTTokenizer"),Xat.forEach(t),xco=r(Bk," or "),dI=n(Bk,"A",{href:!0});var zat=s(dI);$co=r(zat,"OpenAIGPTTokenizerFast"),zat.forEach(t),kco=r(Bk," (OpenAI GPT model)"),Bk.forEach(t),Sco=i(S),dh=n(S,"LI",{});var QAe=s(dh);Wse=n(QAe,"STRONG",{});var Wat=s(Wse);Rco=r(Wat,"opt"),Wat.forEach(t),Pco=r(QAe," \u2014 "),cI=n(QAe,"A",{href:!0});var Qat=s(cI);Bco=r(Qat,"GPT2Tokenizer"),Qat.forEach(t),Ico=r(QAe," (OPT model)"),QAe.forEach(t),Nco=i(S),ws=n(S,"LI",{});var Ik=s(ws);Qse=n(Ik,"STRONG",{});var Hat=s(Qse);qco=r(Hat,"pegasus"),Hat.forEach(t),jco=r(Ik," \u2014 "),fI=n(Ik,"A",{href:!0});var Uat=s(fI);Dco=r(Uat,"PegasusTokenizer"),Uat.forEach(t),Gco=r(Ik," or "),mI=n(Ik,"A",{href:!0});var Jat=s(mI);Oco=r(Jat,"PegasusTokenizerFast"),Jat.forEach(t),Vco=r(Ik," (Pegasus model)"),Ik.forEach(t),Xco=i(S),ch=n(S,"LI",{});var HAe=s(ch);Hse=n(HAe,"STRONG",{});var Yat=s(Hse);zco=r(Yat,"perceiver"),Yat.forEach(t),Wco=r(HAe," \u2014 "),gI=n(HAe,"A",{href:!0});var Kat=s(gI);Qco=r(Kat,"PerceiverTokenizer"),Kat.forEach(t),Hco=r(HAe," (Perceiver model)"),HAe.forEach(t),Uco=i(S),fh=n(S,"LI",{});var UAe=s(fh);Use=n(UAe,"STRONG",{});var Zat=s(Use);Jco=r(Zat,"phobert"),Zat.forEach(t),Yco=r(UAe," \u2014 "),hI=n(UAe,"A",{href:!0});var ent=s(hI);Kco=r(ent,"PhobertTokenizer"),ent.forEach(t),Zco=r(UAe," (PhoBERT model)"),UAe.forEach(t),efo=i(S),mh=n(S,"LI",{});var JAe=s(mh);Jse=n(JAe,"STRONG",{});var ont=s(Jse);ofo=r(ont,"plbart"),ont.forEach(t),rfo=r(JAe," \u2014 "),pI=n(JAe,"A",{href:!0});var rnt=s(pI);tfo=r(rnt,"PLBartTokenizer"),rnt.forEach(t),afo=r(JAe," (PLBart model)"),JAe.forEach(t),nfo=i(S),gh=n(S,"LI",{});var YAe=s(gh);Yse=n(YAe,"STRONG",{});var tnt=s(Yse);sfo=r(tnt,"prophetnet"),tnt.forEach(t),lfo=r(YAe," \u2014 "),_I=n(YAe,"A",{href:!0});var ant=s(_I);ifo=r(ant,"ProphetNetTokenizer"),ant.forEach(t),dfo=r(YAe," (ProphetNet model)"),YAe.forEach(t),cfo=i(S),As=n(S,"LI",{});var Nk=s(As);Kse=n(Nk,"STRONG",{});var nnt=s(Kse);ffo=r(nnt,"qdqbert"),nnt.forEach(t),mfo=r(Nk," \u2014 "),uI=n(Nk,"A",{href:!0});var snt=s(uI);gfo=r(snt,"BertTokenizer"),snt.forEach(t),hfo=r(Nk," or "),bI=n(Nk,"A",{href:!0});var lnt=s(bI);pfo=r(lnt,"BertTokenizerFast"),lnt.forEach(t),_fo=r(Nk," (QDQBert model)"),Nk.forEach(t),ufo=i(S),hh=n(S,"LI",{});var KAe=s(hh);Zse=n(KAe,"STRONG",{});var int=s(Zse);bfo=r(int,"rag"),int.forEach(t),vfo=r(KAe," \u2014 "),vI=n(KAe,"A",{href:!0});var dnt=s(vI);Ffo=r(dnt,"RagTokenizer"),dnt.forEach(t),Tfo=r(KAe," (RAG model)"),KAe.forEach(t),Mfo=i(S),Ls=n(S,"LI",{});var qk=s(Ls);ele=n(qk,"STRONG",{});var cnt=s(ele);Efo=r(cnt,"realm"),cnt.forEach(t),Cfo=r(qk," \u2014 "),FI=n(qk,"A",{href:!0});var fnt=s(FI);wfo=r(fnt,"RealmTokenizer"),fnt.forEach(t),Afo=r(qk," or "),TI=n(qk,"A",{href:!0});var mnt=s(TI);Lfo=r(mnt,"RealmTokenizerFast"),mnt.forEach(t),yfo=r(qk," (REALM model)"),qk.forEach(t),xfo=i(S),ys=n(S,"LI",{});var jk=s(ys);ole=n(jk,"STRONG",{});var gnt=s(ole);$fo=r(gnt,"reformer"),gnt.forEach(t),kfo=r(jk," \u2014 "),MI=n(jk,"A",{href:!0});var hnt=s(MI);Sfo=r(hnt,"ReformerTokenizer"),hnt.forEach(t),Rfo=r(jk," or "),EI=n(jk,"A",{href:!0});var pnt=s(EI);Pfo=r(pnt,"ReformerTokenizerFast"),pnt.forEach(t),Bfo=r(jk," (Reformer model)"),jk.forEach(t),Ifo=i(S),xs=n(S,"LI",{});var Dk=s(xs);rle=n(Dk,"STRONG",{});var _nt=s(rle);Nfo=r(_nt,"rembert"),_nt.forEach(t),qfo=r(Dk," \u2014 "),CI=n(Dk,"A",{href:!0});var unt=s(CI);jfo=r(unt,"RemBertTokenizer"),unt.forEach(t),Dfo=r(Dk," or "),wI=n(Dk,"A",{href:!0});var bnt=s(wI);Gfo=r(bnt,"RemBertTokenizerFast"),bnt.forEach(t),Ofo=r(Dk," (RemBERT model)"),Dk.forEach(t),Vfo=i(S),$s=n(S,"LI",{});var Gk=s($s);tle=n(Gk,"STRONG",{});var vnt=s(tle);Xfo=r(vnt,"retribert"),vnt.forEach(t),zfo=r(Gk," \u2014 "),AI=n(Gk,"A",{href:!0});var Fnt=s(AI);Wfo=r(Fnt,"RetriBertTokenizer"),Fnt.forEach(t),Qfo=r(Gk," or "),LI=n(Gk,"A",{href:!0});var Tnt=s(LI);Hfo=r(Tnt,"RetriBertTokenizerFast"),Tnt.forEach(t),Ufo=r(Gk," (RetriBERT model)"),Gk.forEach(t),Jfo=i(S),ks=n(S,"LI",{});var Ok=s(ks);ale=n(Ok,"STRONG",{});var Mnt=s(ale);Yfo=r(Mnt,"roberta"),Mnt.forEach(t),Kfo=r(Ok," \u2014 "),yI=n(Ok,"A",{href:!0});var Ent=s(yI);Zfo=r(Ent,"RobertaTokenizer"),Ent.forEach(t),emo=r(Ok," or "),xI=n(Ok,"A",{href:!0});var Cnt=s(xI);omo=r(Cnt,"RobertaTokenizerFast"),Cnt.forEach(t),rmo=r(Ok," (RoBERTa model)"),Ok.forEach(t),tmo=i(S),Ss=n(S,"LI",{});var Vk=s(Ss);nle=n(Vk,"STRONG",{});var wnt=s(nle);amo=r(wnt,"roformer"),wnt.forEach(t),nmo=r(Vk," \u2014 "),$I=n(Vk,"A",{href:!0});var Ant=s($I);smo=r(Ant,"RoFormerTokenizer"),Ant.forEach(t),lmo=r(Vk," or "),kI=n(Vk,"A",{href:!0});var Lnt=s(kI);imo=r(Lnt,"RoFormerTokenizerFast"),Lnt.forEach(t),dmo=r(Vk," (RoFormer model)"),Vk.forEach(t),cmo=i(S),ph=n(S,"LI",{});var ZAe=s(ph);sle=n(ZAe,"STRONG",{});var ynt=s(sle);fmo=r(ynt,"speech_to_text"),ynt.forEach(t),mmo=r(ZAe," \u2014 "),SI=n(ZAe,"A",{href:!0});var xnt=s(SI);gmo=r(xnt,"Speech2TextTokenizer"),xnt.forEach(t),hmo=r(ZAe," (Speech2Text model)"),ZAe.forEach(t),pmo=i(S),_h=n(S,"LI",{});var eLe=s(_h);lle=n(eLe,"STRONG",{});var $nt=s(lle);_mo=r($nt,"speech_to_text_2"),$nt.forEach(t),umo=r(eLe," \u2014 "),RI=n(eLe,"A",{href:!0});var knt=s(RI);bmo=r(knt,"Speech2Text2Tokenizer"),knt.forEach(t),vmo=r(eLe," (Speech2Text2 model)"),eLe.forEach(t),Fmo=i(S),Rs=n(S,"LI",{});var Xk=s(Rs);ile=n(Xk,"STRONG",{});var Snt=s(ile);Tmo=r(Snt,"splinter"),Snt.forEach(t),Mmo=r(Xk," \u2014 "),PI=n(Xk,"A",{href:!0});var Rnt=s(PI);Emo=r(Rnt,"SplinterTokenizer"),Rnt.forEach(t),Cmo=r(Xk," or "),BI=n(Xk,"A",{href:!0});var Pnt=s(BI);wmo=r(Pnt,"SplinterTokenizerFast"),Pnt.forEach(t),Amo=r(Xk," (Splinter model)"),Xk.forEach(t),Lmo=i(S),Ps=n(S,"LI",{});var zk=s(Ps);dle=n(zk,"STRONG",{});var Bnt=s(dle);ymo=r(Bnt,"squeezebert"),Bnt.forEach(t),xmo=r(zk," \u2014 "),II=n(zk,"A",{href:!0});var Int=s(II);$mo=r(Int,"SqueezeBertTokenizer"),Int.forEach(t),kmo=r(zk," or "),NI=n(zk,"A",{href:!0});var Nnt=s(NI);Smo=r(Nnt,"SqueezeBertTokenizerFast"),Nnt.forEach(t),Rmo=r(zk," (SqueezeBERT model)"),zk.forEach(t),Pmo=i(S),Bs=n(S,"LI",{});var Wk=s(Bs);cle=n(Wk,"STRONG",{});var qnt=s(cle);Bmo=r(qnt,"t5"),qnt.forEach(t),Imo=r(Wk," \u2014 "),qI=n(Wk,"A",{href:!0});var jnt=s(qI);Nmo=r(jnt,"T5Tokenizer"),jnt.forEach(t),qmo=r(Wk," or "),jI=n(Wk,"A",{href:!0});var Dnt=s(jI);jmo=r(Dnt,"T5TokenizerFast"),Dnt.forEach(t),Dmo=r(Wk," (T5 model)"),Wk.forEach(t),Gmo=i(S),uh=n(S,"LI",{});var oLe=s(uh);fle=n(oLe,"STRONG",{});var Gnt=s(fle);Omo=r(Gnt,"tapas"),Gnt.forEach(t),Vmo=r(oLe," \u2014 "),DI=n(oLe,"A",{href:!0});var Ont=s(DI);Xmo=r(Ont,"TapasTokenizer"),Ont.forEach(t),zmo=r(oLe," (TAPAS model)"),oLe.forEach(t),Wmo=i(S),bh=n(S,"LI",{});var rLe=s(bh);mle=n(rLe,"STRONG",{});var Vnt=s(mle);Qmo=r(Vnt,"tapex"),Vnt.forEach(t),Hmo=r(rLe," \u2014 "),GI=n(rLe,"A",{href:!0});var Xnt=s(GI);Umo=r(Xnt,"TapexTokenizer"),Xnt.forEach(t),Jmo=r(rLe," (TAPEX model)"),rLe.forEach(t),Ymo=i(S),vh=n(S,"LI",{});var tLe=s(vh);gle=n(tLe,"STRONG",{});var znt=s(gle);Kmo=r(znt,"transfo-xl"),znt.forEach(t),Zmo=r(tLe," \u2014 "),OI=n(tLe,"A",{href:!0});var Wnt=s(OI);ego=r(Wnt,"TransfoXLTokenizer"),Wnt.forEach(t),ogo=r(tLe," (Transformer-XL model)"),tLe.forEach(t),rgo=i(S),Is=n(S,"LI",{});var Qk=s(Is);hle=n(Qk,"STRONG",{});var Qnt=s(hle);tgo=r(Qnt,"vilt"),Qnt.forEach(t),ago=r(Qk," \u2014 "),VI=n(Qk,"A",{href:!0});var Hnt=s(VI);ngo=r(Hnt,"BertTokenizer"),Hnt.forEach(t),sgo=r(Qk," or "),XI=n(Qk,"A",{href:!0});var Unt=s(XI);lgo=r(Unt,"BertTokenizerFast"),Unt.forEach(t),igo=r(Qk," (ViLT model)"),Qk.forEach(t),dgo=i(S),Ns=n(S,"LI",{});var Hk=s(Ns);ple=n(Hk,"STRONG",{});var Jnt=s(ple);cgo=r(Jnt,"visual_bert"),Jnt.forEach(t),fgo=r(Hk," \u2014 "),zI=n(Hk,"A",{href:!0});var Ynt=s(zI);mgo=r(Ynt,"BertTokenizer"),Ynt.forEach(t),ggo=r(Hk," or "),WI=n(Hk,"A",{href:!0});var Knt=s(WI);hgo=r(Knt,"BertTokenizerFast"),Knt.forEach(t),pgo=r(Hk," (VisualBERT model)"),Hk.forEach(t),_go=i(S),Fh=n(S,"LI",{});var aLe=s(Fh);_le=n(aLe,"STRONG",{});var Znt=s(_le);ugo=r(Znt,"wav2vec2"),Znt.forEach(t),bgo=r(aLe," \u2014 "),QI=n(aLe,"A",{href:!0});var est=s(QI);vgo=r(est,"Wav2Vec2CTCTokenizer"),est.forEach(t),Fgo=r(aLe," (Wav2Vec2 model)"),aLe.forEach(t),Tgo=i(S),Th=n(S,"LI",{});var nLe=s(Th);ule=n(nLe,"STRONG",{});var ost=s(ule);Mgo=r(ost,"wav2vec2-conformer"),ost.forEach(t),Ego=r(nLe," \u2014 "),HI=n(nLe,"A",{href:!0});var rst=s(HI);Cgo=r(rst,"Wav2Vec2CTCTokenizer"),rst.forEach(t),wgo=r(nLe," (Wav2Vec2-Conformer model)"),nLe.forEach(t),Ago=i(S),Mh=n(S,"LI",{});var sLe=s(Mh);ble=n(sLe,"STRONG",{});var tst=s(ble);Lgo=r(tst,"wav2vec2_phoneme"),tst.forEach(t),ygo=r(sLe," \u2014 "),UI=n(sLe,"A",{href:!0});var ast=s(UI);xgo=r(ast,"Wav2Vec2PhonemeCTCTokenizer"),ast.forEach(t),$go=r(sLe," (Wav2Vec2Phoneme model)"),sLe.forEach(t),kgo=i(S),qs=n(S,"LI",{});var Uk=s(qs);vle=n(Uk,"STRONG",{});var nst=s(vle);Sgo=r(nst,"xglm"),nst.forEach(t),Rgo=r(Uk," \u2014 "),JI=n(Uk,"A",{href:!0});var sst=s(JI);Pgo=r(sst,"XGLMTokenizer"),sst.forEach(t),Bgo=r(Uk," or "),YI=n(Uk,"A",{href:!0});var lst=s(YI);Igo=r(lst,"XGLMTokenizerFast"),lst.forEach(t),Ngo=r(Uk," (XGLM model)"),Uk.forEach(t),qgo=i(S),Eh=n(S,"LI",{});var lLe=s(Eh);Fle=n(lLe,"STRONG",{});var ist=s(Fle);jgo=r(ist,"xlm"),ist.forEach(t),Dgo=r(lLe," \u2014 "),KI=n(lLe,"A",{href:!0});var dst=s(KI);Ggo=r(dst,"XLMTokenizer"),dst.forEach(t),Ogo=r(lLe," (XLM model)"),lLe.forEach(t),Vgo=i(S),Ch=n(S,"LI",{});var iLe=s(Ch);Tle=n(iLe,"STRONG",{});var cst=s(Tle);Xgo=r(cst,"xlm-prophetnet"),cst.forEach(t),zgo=r(iLe," \u2014 "),ZI=n(iLe,"A",{href:!0});var fst=s(ZI);Wgo=r(fst,"XLMProphetNetTokenizer"),fst.forEach(t),Qgo=r(iLe," (XLM-ProphetNet model)"),iLe.forEach(t),Hgo=i(S),js=n(S,"LI",{});var Jk=s(js);Mle=n(Jk,"STRONG",{});var mst=s(Mle);Ugo=r(mst,"xlm-roberta"),mst.forEach(t),Jgo=r(Jk," \u2014 "),eN=n(Jk,"A",{href:!0});var gst=s(eN);Ygo=r(gst,"XLMRobertaTokenizer"),gst.forEach(t),Kgo=r(Jk," or "),oN=n(Jk,"A",{href:!0});var hst=s(oN);Zgo=r(hst,"XLMRobertaTokenizerFast"),hst.forEach(t),eho=r(Jk," (XLM-RoBERTa model)"),Jk.forEach(t),oho=i(S),Ds=n(S,"LI",{});var Yk=s(Ds);Ele=n(Yk,"STRONG",{});var pst=s(Ele);rho=r(pst,"xlm-roberta-xl"),pst.forEach(t),tho=r(Yk," \u2014 "),rN=n(Yk,"A",{href:!0});var _st=s(rN);aho=r(_st,"RobertaTokenizer"),_st.forEach(t),nho=r(Yk," or "),tN=n(Yk,"A",{href:!0});var ust=s(tN);sho=r(ust,"RobertaTokenizerFast"),ust.forEach(t),lho=r(Yk," (XLM-RoBERTa-XL model)"),Yk.forEach(t),iho=i(S),Gs=n(S,"LI",{});var Kk=s(Gs);Cle=n(Kk,"STRONG",{});var bst=s(Cle);dho=r(bst,"xlnet"),bst.forEach(t),cho=r(Kk," \u2014 "),aN=n(Kk,"A",{href:!0});var vst=s(aN);fho=r(vst,"XLNetTokenizer"),vst.forEach(t),mho=r(Kk," or "),nN=n(Kk,"A",{href:!0});var Fst=s(nN);gho=r(Fst,"XLNetTokenizerFast"),Fst.forEach(t),hho=r(Kk," (XLNet model)"),Kk.forEach(t),pho=i(S),Os=n(S,"LI",{});var Zk=s(Os);wle=n(Zk,"STRONG",{});var Tst=s(wle);_ho=r(Tst,"yoso"),Tst.forEach(t),uho=r(Zk," \u2014 "),sN=n(Zk,"A",{href:!0});var Mst=s(sN);bho=r(Mst,"AlbertTokenizer"),Mst.forEach(t),vho=r(Zk," or "),lN=n(Zk,"A",{href:!0});var Est=s(lN);Fho=r(Est,"AlbertTokenizerFast"),Est.forEach(t),Tho=r(Zk," (YOSO model)"),Zk.forEach(t),S.forEach(t),Mho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Eho=i(Hs),Ah=n(Hs,"DIV",{class:!0});var aXe=s(Ah);T(XA.$$.fragment,aXe),Cho=i(aXe),Ale=n(aXe,"P",{});var Cst=s(Ale);who=r(Cst,"Register a new tokenizer in this mapping."),Cst.forEach(t),aXe.forEach(t),Hs.forEach(t),tOe=i(f),Pi=n(f,"H2",{class:!0});var nXe=s(Pi);Lh=n(nXe,"A",{id:!0,class:!0,href:!0});var wst=s(Lh);Lle=n(wst,"SPAN",{});var Ast=s(Lle);T(zA.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),Aho=i(nXe),yle=n(nXe,"SPAN",{});var Lst=s(yle);Lho=r(Lst,"AutoFeatureExtractor"),Lst.forEach(t),nXe.forEach(t),aOe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(WA.$$.fragment,Js),yho=i(Js),QA=n(Js,"P",{});var sXe=s(QA);xho=r(sXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iN=n(sXe,"A",{href:!0});var yst=s(iN);$ho=r(yst,"AutoFeatureExtractor.from_pretrained()"),yst.forEach(t),kho=r(sXe," class method."),sXe.forEach(t),Sho=i(Js),HA=n(Js,"P",{});var lXe=s(HA);Rho=r(lXe,"This class cannot be instantiated directly using "),xle=n(lXe,"CODE",{});var xst=s(xle);Pho=r(xst,"__init__()"),xst.forEach(t),Bho=r(lXe," (throws an error)."),lXe.forEach(t),Iho=i(Js),He=n(Js,"DIV",{class:!0});var ta=s(He);T(UA.$$.fragment,ta),Nho=i(ta),$le=n(ta,"P",{});var $st=s($le);qho=r($st,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$st.forEach(t),jho=i(ta),Ra=n(ta,"P",{});var R3=s(Ra);Dho=r(R3,"The feature extractor class to instantiate is selected based on the "),kle=n(R3,"CODE",{});var kst=s(kle);Gho=r(kst,"model_type"),kst.forEach(t),Oho=r(R3,` property of the config object
(either passed as an argument or loaded from `),Sle=n(R3,"CODE",{});var Sst=s(Sle);Vho=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),Xho=r(R3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rle=n(R3,"CODE",{});var Rst=s(Rle);zho=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),Who=r(R3,":"),R3.forEach(t),Qho=i(ta),Y=n(ta,"UL",{});var K=s(Y);yh=n(K,"LI",{});var dLe=s(yh);Ple=n(dLe,"STRONG",{});var Pst=s(Ple);Hho=r(Pst,"beit"),Pst.forEach(t),Uho=r(dLe," \u2014 "),dN=n(dLe,"A",{href:!0});var Bst=s(dN);Jho=r(Bst,"BeitFeatureExtractor"),Bst.forEach(t),Yho=r(dLe," (BEiT model)"),dLe.forEach(t),Kho=i(K),xh=n(K,"LI",{});var cLe=s(xh);Ble=n(cLe,"STRONG",{});var Ist=s(Ble);Zho=r(Ist,"clip"),Ist.forEach(t),epo=r(cLe," \u2014 "),cN=n(cLe,"A",{href:!0});var Nst=s(cN);opo=r(Nst,"CLIPFeatureExtractor"),Nst.forEach(t),rpo=r(cLe," (CLIP model)"),cLe.forEach(t),tpo=i(K),$h=n(K,"LI",{});var fLe=s($h);Ile=n(fLe,"STRONG",{});var qst=s(Ile);apo=r(qst,"convnext"),qst.forEach(t),npo=r(fLe," \u2014 "),fN=n(fLe,"A",{href:!0});var jst=s(fN);spo=r(jst,"ConvNextFeatureExtractor"),jst.forEach(t),lpo=r(fLe," (ConvNeXT model)"),fLe.forEach(t),ipo=i(K),kh=n(K,"LI",{});var mLe=s(kh);Nle=n(mLe,"STRONG",{});var Dst=s(Nle);dpo=r(Dst,"cvt"),Dst.forEach(t),cpo=r(mLe," \u2014 "),mN=n(mLe,"A",{href:!0});var Gst=s(mN);fpo=r(Gst,"ConvNextFeatureExtractor"),Gst.forEach(t),mpo=r(mLe," (CvT model)"),mLe.forEach(t),gpo=i(K),Sh=n(K,"LI",{});var gLe=s(Sh);qle=n(gLe,"STRONG",{});var Ost=s(qle);hpo=r(Ost,"data2vec-audio"),Ost.forEach(t),ppo=r(gLe," \u2014 "),gN=n(gLe,"A",{href:!0});var Vst=s(gN);_po=r(Vst,"Wav2Vec2FeatureExtractor"),Vst.forEach(t),upo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),bpo=i(K),Rh=n(K,"LI",{});var hLe=s(Rh);jle=n(hLe,"STRONG",{});var Xst=s(jle);vpo=r(Xst,"data2vec-vision"),Xst.forEach(t),Fpo=r(hLe," \u2014 "),hN=n(hLe,"A",{href:!0});var zst=s(hN);Tpo=r(zst,"BeitFeatureExtractor"),zst.forEach(t),Mpo=r(hLe," (Data2VecVision model)"),hLe.forEach(t),Epo=i(K),Ph=n(K,"LI",{});var pLe=s(Ph);Dle=n(pLe,"STRONG",{});var Wst=s(Dle);Cpo=r(Wst,"deit"),Wst.forEach(t),wpo=r(pLe," \u2014 "),pN=n(pLe,"A",{href:!0});var Qst=s(pN);Apo=r(Qst,"DeiTFeatureExtractor"),Qst.forEach(t),Lpo=r(pLe," (DeiT model)"),pLe.forEach(t),ypo=i(K),Bh=n(K,"LI",{});var _Le=s(Bh);Gle=n(_Le,"STRONG",{});var Hst=s(Gle);xpo=r(Hst,"detr"),Hst.forEach(t),$po=r(_Le," \u2014 "),_N=n(_Le,"A",{href:!0});var Ust=s(_N);kpo=r(Ust,"DetrFeatureExtractor"),Ust.forEach(t),Spo=r(_Le," (DETR model)"),_Le.forEach(t),Rpo=i(K),Ih=n(K,"LI",{});var uLe=s(Ih);Ole=n(uLe,"STRONG",{});var Jst=s(Ole);Ppo=r(Jst,"dpt"),Jst.forEach(t),Bpo=r(uLe," \u2014 "),uN=n(uLe,"A",{href:!0});var Yst=s(uN);Ipo=r(Yst,"DPTFeatureExtractor"),Yst.forEach(t),Npo=r(uLe," (DPT model)"),uLe.forEach(t),qpo=i(K),Nh=n(K,"LI",{});var bLe=s(Nh);Vle=n(bLe,"STRONG",{});var Kst=s(Vle);jpo=r(Kst,"flava"),Kst.forEach(t),Dpo=r(bLe," \u2014 "),bN=n(bLe,"A",{href:!0});var Zst=s(bN);Gpo=r(Zst,"FlavaFeatureExtractor"),Zst.forEach(t),Opo=r(bLe," (FLAVA model)"),bLe.forEach(t),Vpo=i(K),qh=n(K,"LI",{});var vLe=s(qh);Xle=n(vLe,"STRONG",{});var elt=s(Xle);Xpo=r(elt,"glpn"),elt.forEach(t),zpo=r(vLe," \u2014 "),vN=n(vLe,"A",{href:!0});var olt=s(vN);Wpo=r(olt,"GLPNFeatureExtractor"),olt.forEach(t),Qpo=r(vLe," (GLPN model)"),vLe.forEach(t),Hpo=i(K),jh=n(K,"LI",{});var FLe=s(jh);zle=n(FLe,"STRONG",{});var rlt=s(zle);Upo=r(rlt,"hubert"),rlt.forEach(t),Jpo=r(FLe," \u2014 "),FN=n(FLe,"A",{href:!0});var tlt=s(FN);Ypo=r(tlt,"Wav2Vec2FeatureExtractor"),tlt.forEach(t),Kpo=r(FLe," (Hubert model)"),FLe.forEach(t),Zpo=i(K),Dh=n(K,"LI",{});var TLe=s(Dh);Wle=n(TLe,"STRONG",{});var alt=s(Wle);e_o=r(alt,"imagegpt"),alt.forEach(t),o_o=r(TLe," \u2014 "),TN=n(TLe,"A",{href:!0});var nlt=s(TN);r_o=r(nlt,"ImageGPTFeatureExtractor"),nlt.forEach(t),t_o=r(TLe," (ImageGPT model)"),TLe.forEach(t),a_o=i(K),Gh=n(K,"LI",{});var MLe=s(Gh);Qle=n(MLe,"STRONG",{});var slt=s(Qle);n_o=r(slt,"layoutlmv2"),slt.forEach(t),s_o=r(MLe," \u2014 "),MN=n(MLe,"A",{href:!0});var llt=s(MN);l_o=r(llt,"LayoutLMv2FeatureExtractor"),llt.forEach(t),i_o=r(MLe," (LayoutLMv2 model)"),MLe.forEach(t),d_o=i(K),Oh=n(K,"LI",{});var ELe=s(Oh);Hle=n(ELe,"STRONG",{});var ilt=s(Hle);c_o=r(ilt,"layoutlmv3"),ilt.forEach(t),f_o=r(ELe," \u2014 "),EN=n(ELe,"A",{href:!0});var dlt=s(EN);m_o=r(dlt,"LayoutLMv3FeatureExtractor"),dlt.forEach(t),g_o=r(ELe," (LayoutLMv3 model)"),ELe.forEach(t),h_o=i(K),Vh=n(K,"LI",{});var CLe=s(Vh);Ule=n(CLe,"STRONG",{});var clt=s(Ule);p_o=r(clt,"levit"),clt.forEach(t),__o=r(CLe," \u2014 "),CN=n(CLe,"A",{href:!0});var flt=s(CN);u_o=r(flt,"LevitFeatureExtractor"),flt.forEach(t),b_o=r(CLe," (LeViT model)"),CLe.forEach(t),v_o=i(K),Xh=n(K,"LI",{});var wLe=s(Xh);Jle=n(wLe,"STRONG",{});var mlt=s(Jle);F_o=r(mlt,"maskformer"),mlt.forEach(t),T_o=r(wLe," \u2014 "),wN=n(wLe,"A",{href:!0});var glt=s(wN);M_o=r(glt,"MaskFormerFeatureExtractor"),glt.forEach(t),E_o=r(wLe," (MaskFormer model)"),wLe.forEach(t),C_o=i(K),zh=n(K,"LI",{});var ALe=s(zh);Yle=n(ALe,"STRONG",{});var hlt=s(Yle);w_o=r(hlt,"mctct"),hlt.forEach(t),A_o=r(ALe," \u2014 "),AN=n(ALe,"A",{href:!0});var plt=s(AN);L_o=r(plt,"MCTCTFeatureExtractor"),plt.forEach(t),y_o=r(ALe," (M-CTC-T model)"),ALe.forEach(t),x_o=i(K),Wh=n(K,"LI",{});var LLe=s(Wh);Kle=n(LLe,"STRONG",{});var _lt=s(Kle);$_o=r(_lt,"perceiver"),_lt.forEach(t),k_o=r(LLe," \u2014 "),LN=n(LLe,"A",{href:!0});var ult=s(LN);S_o=r(ult,"PerceiverFeatureExtractor"),ult.forEach(t),R_o=r(LLe," (Perceiver model)"),LLe.forEach(t),P_o=i(K),Qh=n(K,"LI",{});var yLe=s(Qh);Zle=n(yLe,"STRONG",{});var blt=s(Zle);B_o=r(blt,"poolformer"),blt.forEach(t),I_o=r(yLe," \u2014 "),yN=n(yLe,"A",{href:!0});var vlt=s(yN);N_o=r(vlt,"PoolFormerFeatureExtractor"),vlt.forEach(t),q_o=r(yLe," (PoolFormer model)"),yLe.forEach(t),j_o=i(K),Hh=n(K,"LI",{});var xLe=s(Hh);eie=n(xLe,"STRONG",{});var Flt=s(eie);D_o=r(Flt,"regnet"),Flt.forEach(t),G_o=r(xLe," \u2014 "),xN=n(xLe,"A",{href:!0});var Tlt=s(xN);O_o=r(Tlt,"ConvNextFeatureExtractor"),Tlt.forEach(t),V_o=r(xLe," (RegNet model)"),xLe.forEach(t),X_o=i(K),Uh=n(K,"LI",{});var $Le=s(Uh);oie=n($Le,"STRONG",{});var Mlt=s(oie);z_o=r(Mlt,"resnet"),Mlt.forEach(t),W_o=r($Le," \u2014 "),$N=n($Le,"A",{href:!0});var Elt=s($N);Q_o=r(Elt,"ConvNextFeatureExtractor"),Elt.forEach(t),H_o=r($Le," (ResNet model)"),$Le.forEach(t),U_o=i(K),Jh=n(K,"LI",{});var kLe=s(Jh);rie=n(kLe,"STRONG",{});var Clt=s(rie);J_o=r(Clt,"segformer"),Clt.forEach(t),Y_o=r(kLe," \u2014 "),kN=n(kLe,"A",{href:!0});var wlt=s(kN);K_o=r(wlt,"SegformerFeatureExtractor"),wlt.forEach(t),Z_o=r(kLe," (SegFormer model)"),kLe.forEach(t),euo=i(K),Yh=n(K,"LI",{});var SLe=s(Yh);tie=n(SLe,"STRONG",{});var Alt=s(tie);ouo=r(Alt,"speech_to_text"),Alt.forEach(t),ruo=r(SLe," \u2014 "),SN=n(SLe,"A",{href:!0});var Llt=s(SN);tuo=r(Llt,"Speech2TextFeatureExtractor"),Llt.forEach(t),auo=r(SLe," (Speech2Text model)"),SLe.forEach(t),nuo=i(K),Kh=n(K,"LI",{});var RLe=s(Kh);aie=n(RLe,"STRONG",{});var ylt=s(aie);suo=r(ylt,"swin"),ylt.forEach(t),luo=r(RLe," \u2014 "),RN=n(RLe,"A",{href:!0});var xlt=s(RN);iuo=r(xlt,"ViTFeatureExtractor"),xlt.forEach(t),duo=r(RLe," (Swin Transformer model)"),RLe.forEach(t),cuo=i(K),Zh=n(K,"LI",{});var PLe=s(Zh);nie=n(PLe,"STRONG",{});var $lt=s(nie);fuo=r($lt,"van"),$lt.forEach(t),muo=r(PLe," \u2014 "),PN=n(PLe,"A",{href:!0});var klt=s(PN);guo=r(klt,"ConvNextFeatureExtractor"),klt.forEach(t),huo=r(PLe," (VAN model)"),PLe.forEach(t),puo=i(K),ep=n(K,"LI",{});var BLe=s(ep);sie=n(BLe,"STRONG",{});var Slt=s(sie);_uo=r(Slt,"vilt"),Slt.forEach(t),uuo=r(BLe," \u2014 "),BN=n(BLe,"A",{href:!0});var Rlt=s(BN);buo=r(Rlt,"ViltFeatureExtractor"),Rlt.forEach(t),vuo=r(BLe," (ViLT model)"),BLe.forEach(t),Fuo=i(K),op=n(K,"LI",{});var ILe=s(op);lie=n(ILe,"STRONG",{});var Plt=s(lie);Tuo=r(Plt,"vit"),Plt.forEach(t),Muo=r(ILe," \u2014 "),IN=n(ILe,"A",{href:!0});var Blt=s(IN);Euo=r(Blt,"ViTFeatureExtractor"),Blt.forEach(t),Cuo=r(ILe," (ViT model)"),ILe.forEach(t),wuo=i(K),rp=n(K,"LI",{});var NLe=s(rp);iie=n(NLe,"STRONG",{});var Ilt=s(iie);Auo=r(Ilt,"vit_mae"),Ilt.forEach(t),Luo=r(NLe," \u2014 "),NN=n(NLe,"A",{href:!0});var Nlt=s(NN);yuo=r(Nlt,"ViTFeatureExtractor"),Nlt.forEach(t),xuo=r(NLe," (ViTMAE model)"),NLe.forEach(t),$uo=i(K),tp=n(K,"LI",{});var qLe=s(tp);die=n(qLe,"STRONG",{});var qlt=s(die);kuo=r(qlt,"wav2vec2"),qlt.forEach(t),Suo=r(qLe," \u2014 "),qN=n(qLe,"A",{href:!0});var jlt=s(qN);Ruo=r(jlt,"Wav2Vec2FeatureExtractor"),jlt.forEach(t),Puo=r(qLe," (Wav2Vec2 model)"),qLe.forEach(t),Buo=i(K),ap=n(K,"LI",{});var jLe=s(ap);cie=n(jLe,"STRONG",{});var Dlt=s(cie);Iuo=r(Dlt,"wav2vec2-conformer"),Dlt.forEach(t),Nuo=r(jLe," \u2014 "),jN=n(jLe,"A",{href:!0});var Glt=s(jN);quo=r(Glt,"Wav2Vec2FeatureExtractor"),Glt.forEach(t),juo=r(jLe," (Wav2Vec2-Conformer model)"),jLe.forEach(t),Duo=i(K),np=n(K,"LI",{});var DLe=s(np);fie=n(DLe,"STRONG",{});var Olt=s(fie);Guo=r(Olt,"yolos"),Olt.forEach(t),Ouo=r(DLe," \u2014 "),DN=n(DLe,"A",{href:!0});var Vlt=s(DN);Vuo=r(Vlt,"YolosFeatureExtractor"),Vlt.forEach(t),Xuo=r(DLe," (YOLOS model)"),DLe.forEach(t),K.forEach(t),zuo=i(ta),T(sp.$$.fragment,ta),Wuo=i(ta),T(lp.$$.fragment,ta),ta.forEach(t),Quo=i(Js),ip=n(Js,"DIV",{class:!0});var iXe=s(ip);T(JA.$$.fragment,iXe),Huo=i(iXe),mie=n(iXe,"P",{});var Xlt=s(mie);Uuo=r(Xlt,"Register a new feature extractor for this class."),Xlt.forEach(t),iXe.forEach(t),Js.forEach(t),nOe=i(f),Bi=n(f,"H2",{class:!0});var dXe=s(Bi);dp=n(dXe,"A",{id:!0,class:!0,href:!0});var zlt=s(dp);gie=n(zlt,"SPAN",{});var Wlt=s(gie);T(YA.$$.fragment,Wlt),Wlt.forEach(t),zlt.forEach(t),Juo=i(dXe),hie=n(dXe,"SPAN",{});var Qlt=s(hie);Yuo=r(Qlt,"AutoProcessor"),Qlt.forEach(t),dXe.forEach(t),sOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(KA.$$.fragment,Ys),Kuo=i(Ys),ZA=n(Ys,"P",{});var cXe=s(ZA);Zuo=r(cXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GN=n(cXe,"A",{href:!0});var Hlt=s(GN);e1o=r(Hlt,"AutoProcessor.from_pretrained()"),Hlt.forEach(t),o1o=r(cXe," class method."),cXe.forEach(t),r1o=i(Ys),eL=n(Ys,"P",{});var fXe=s(eL);t1o=r(fXe,"This class cannot be instantiated directly using "),pie=n(fXe,"CODE",{});var Ult=s(pie);a1o=r(Ult,"__init__()"),Ult.forEach(t),n1o=r(fXe," (throws an error)."),fXe.forEach(t),s1o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var aa=s(Ue);T(oL.$$.fragment,aa),l1o=i(aa),_ie=n(aa,"P",{});var Jlt=s(_ie);i1o=r(Jlt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jlt.forEach(t),d1o=i(aa),Ii=n(aa,"P",{});var Coe=s(Ii);c1o=r(Coe,"The processor class to instantiate is selected based on the "),uie=n(Coe,"CODE",{});var Ylt=s(uie);f1o=r(Ylt,"model_type"),Ylt.forEach(t),m1o=r(Coe,` property of the config object (either
passed as an argument or loaded from `),bie=n(Coe,"CODE",{});var Klt=s(bie);g1o=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),h1o=r(Coe," if possible):"),Coe.forEach(t),p1o=i(aa),he=n(aa,"UL",{});var ue=s(he);cp=n(ue,"LI",{});var GLe=s(cp);vie=n(GLe,"STRONG",{});var Zlt=s(vie);_1o=r(Zlt,"clip"),Zlt.forEach(t),u1o=r(GLe," \u2014 "),ON=n(GLe,"A",{href:!0});var eit=s(ON);b1o=r(eit,"CLIPProcessor"),eit.forEach(t),v1o=r(GLe," (CLIP model)"),GLe.forEach(t),F1o=i(ue),fp=n(ue,"LI",{});var OLe=s(fp);Fie=n(OLe,"STRONG",{});var oit=s(Fie);T1o=r(oit,"flava"),oit.forEach(t),M1o=r(OLe," \u2014 "),Tie=n(OLe,"CODE",{});var rit=s(Tie);E1o=r(rit,"FLAVAProcessor"),rit.forEach(t),C1o=r(OLe," (FLAVA model)"),OLe.forEach(t),w1o=i(ue),mp=n(ue,"LI",{});var VLe=s(mp);Mie=n(VLe,"STRONG",{});var tit=s(Mie);A1o=r(tit,"layoutlmv2"),tit.forEach(t),L1o=r(VLe," \u2014 "),VN=n(VLe,"A",{href:!0});var ait=s(VN);y1o=r(ait,"LayoutLMv2Processor"),ait.forEach(t),x1o=r(VLe," (LayoutLMv2 model)"),VLe.forEach(t),$1o=i(ue),gp=n(ue,"LI",{});var XLe=s(gp);Eie=n(XLe,"STRONG",{});var nit=s(Eie);k1o=r(nit,"layoutlmv3"),nit.forEach(t),S1o=r(XLe," \u2014 "),XN=n(XLe,"A",{href:!0});var sit=s(XN);R1o=r(sit,"LayoutLMv3Processor"),sit.forEach(t),P1o=r(XLe," (LayoutLMv3 model)"),XLe.forEach(t),B1o=i(ue),hp=n(ue,"LI",{});var zLe=s(hp);Cie=n(zLe,"STRONG",{});var lit=s(Cie);I1o=r(lit,"layoutxlm"),lit.forEach(t),N1o=r(zLe," \u2014 "),zN=n(zLe,"A",{href:!0});var iit=s(zN);q1o=r(iit,"LayoutXLMProcessor"),iit.forEach(t),j1o=r(zLe," (LayoutXLM model)"),zLe.forEach(t),D1o=i(ue),pp=n(ue,"LI",{});var WLe=s(pp);wie=n(WLe,"STRONG",{});var dit=s(wie);G1o=r(dit,"sew"),dit.forEach(t),O1o=r(WLe," \u2014 "),WN=n(WLe,"A",{href:!0});var cit=s(WN);V1o=r(cit,"Wav2Vec2Processor"),cit.forEach(t),X1o=r(WLe," (SEW model)"),WLe.forEach(t),z1o=i(ue),_p=n(ue,"LI",{});var QLe=s(_p);Aie=n(QLe,"STRONG",{});var fit=s(Aie);W1o=r(fit,"sew-d"),fit.forEach(t),Q1o=r(QLe," \u2014 "),QN=n(QLe,"A",{href:!0});var mit=s(QN);H1o=r(mit,"Wav2Vec2Processor"),mit.forEach(t),U1o=r(QLe," (SEW-D model)"),QLe.forEach(t),J1o=i(ue),up=n(ue,"LI",{});var HLe=s(up);Lie=n(HLe,"STRONG",{});var git=s(Lie);Y1o=r(git,"speech_to_text"),git.forEach(t),K1o=r(HLe," \u2014 "),HN=n(HLe,"A",{href:!0});var hit=s(HN);Z1o=r(hit,"Speech2TextProcessor"),hit.forEach(t),e2o=r(HLe," (Speech2Text model)"),HLe.forEach(t),o2o=i(ue),bp=n(ue,"LI",{});var ULe=s(bp);yie=n(ULe,"STRONG",{});var pit=s(yie);r2o=r(pit,"speech_to_text_2"),pit.forEach(t),t2o=r(ULe," \u2014 "),UN=n(ULe,"A",{href:!0});var _it=s(UN);a2o=r(_it,"Speech2Text2Processor"),_it.forEach(t),n2o=r(ULe," (Speech2Text2 model)"),ULe.forEach(t),s2o=i(ue),vp=n(ue,"LI",{});var JLe=s(vp);xie=n(JLe,"STRONG",{});var uit=s(xie);l2o=r(uit,"trocr"),uit.forEach(t),i2o=r(JLe," \u2014 "),JN=n(JLe,"A",{href:!0});var bit=s(JN);d2o=r(bit,"TrOCRProcessor"),bit.forEach(t),c2o=r(JLe," (TrOCR model)"),JLe.forEach(t),f2o=i(ue),Fp=n(ue,"LI",{});var YLe=s(Fp);$ie=n(YLe,"STRONG",{});var vit=s($ie);m2o=r(vit,"unispeech"),vit.forEach(t),g2o=r(YLe," \u2014 "),YN=n(YLe,"A",{href:!0});var Fit=s(YN);h2o=r(Fit,"Wav2Vec2Processor"),Fit.forEach(t),p2o=r(YLe," (UniSpeech model)"),YLe.forEach(t),_2o=i(ue),Tp=n(ue,"LI",{});var KLe=s(Tp);kie=n(KLe,"STRONG",{});var Tit=s(kie);u2o=r(Tit,"unispeech-sat"),Tit.forEach(t),b2o=r(KLe," \u2014 "),KN=n(KLe,"A",{href:!0});var Mit=s(KN);v2o=r(Mit,"Wav2Vec2Processor"),Mit.forEach(t),F2o=r(KLe," (UniSpeechSat model)"),KLe.forEach(t),T2o=i(ue),Mp=n(ue,"LI",{});var ZLe=s(Mp);Sie=n(ZLe,"STRONG",{});var Eit=s(Sie);M2o=r(Eit,"vilt"),Eit.forEach(t),E2o=r(ZLe," \u2014 "),ZN=n(ZLe,"A",{href:!0});var Cit=s(ZN);C2o=r(Cit,"ViltProcessor"),Cit.forEach(t),w2o=r(ZLe," (ViLT model)"),ZLe.forEach(t),A2o=i(ue),Ep=n(ue,"LI",{});var eye=s(Ep);Rie=n(eye,"STRONG",{});var wit=s(Rie);L2o=r(wit,"vision-text-dual-encoder"),wit.forEach(t),y2o=r(eye," \u2014 "),eq=n(eye,"A",{href:!0});var Ait=s(eq);x2o=r(Ait,"VisionTextDualEncoderProcessor"),Ait.forEach(t),$2o=r(eye," (VisionTextDualEncoder model)"),eye.forEach(t),k2o=i(ue),Cp=n(ue,"LI",{});var oye=s(Cp);Pie=n(oye,"STRONG",{});var Lit=s(Pie);S2o=r(Lit,"wav2vec2"),Lit.forEach(t),R2o=r(oye," \u2014 "),oq=n(oye,"A",{href:!0});var yit=s(oq);P2o=r(yit,"Wav2Vec2Processor"),yit.forEach(t),B2o=r(oye," (Wav2Vec2 model)"),oye.forEach(t),I2o=i(ue),wp=n(ue,"LI",{});var rye=s(wp);Bie=n(rye,"STRONG",{});var xit=s(Bie);N2o=r(xit,"wav2vec2-conformer"),xit.forEach(t),q2o=r(rye," \u2014 "),rq=n(rye,"A",{href:!0});var $it=s(rq);j2o=r($it,"Wav2Vec2Processor"),$it.forEach(t),D2o=r(rye," (Wav2Vec2-Conformer model)"),rye.forEach(t),G2o=i(ue),Ap=n(ue,"LI",{});var tye=s(Ap);Iie=n(tye,"STRONG",{});var kit=s(Iie);O2o=r(kit,"wavlm"),kit.forEach(t),V2o=r(tye," \u2014 "),tq=n(tye,"A",{href:!0});var Sit=s(tq);X2o=r(Sit,"Wav2Vec2Processor"),Sit.forEach(t),z2o=r(tye," (WavLM model)"),tye.forEach(t),ue.forEach(t),W2o=i(aa),T(Lp.$$.fragment,aa),Q2o=i(aa),T(yp.$$.fragment,aa),aa.forEach(t),H2o=i(Ys),xp=n(Ys,"DIV",{class:!0});var mXe=s(xp);T(rL.$$.fragment,mXe),U2o=i(mXe),Nie=n(mXe,"P",{});var Rit=s(Nie);J2o=r(Rit,"Register a new processor for this class."),Rit.forEach(t),mXe.forEach(t),Ys.forEach(t),lOe=i(f),Ni=n(f,"H2",{class:!0});var gXe=s(Ni);$p=n(gXe,"A",{id:!0,class:!0,href:!0});var Pit=s($p);qie=n(Pit,"SPAN",{});var Bit=s(qie);T(tL.$$.fragment,Bit),Bit.forEach(t),Pit.forEach(t),Y2o=i(gXe),jie=n(gXe,"SPAN",{});var Iit=s(jie);K2o=r(Iit,"AutoModel"),Iit.forEach(t),gXe.forEach(t),iOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(aL.$$.fragment,Ks),Z2o=i(Ks),qi=n(Ks,"P",{});var woe=s(qi);ebo=r(woe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aq=n(woe,"A",{href:!0});var Nit=s(aq);obo=r(Nit,"from_pretrained()"),Nit.forEach(t),rbo=r(woe," class method or the "),nq=n(woe,"A",{href:!0});var qit=s(nq);tbo=r(qit,"from_config()"),qit.forEach(t),abo=r(woe,` class
method.`),woe.forEach(t),nbo=i(Ks),nL=n(Ks,"P",{});var hXe=s(nL);sbo=r(hXe,"This class cannot be instantiated directly using "),Die=n(hXe,"CODE",{});var jit=s(Die);lbo=r(jit,"__init__()"),jit.forEach(t),ibo=r(hXe," (throws an error)."),hXe.forEach(t),dbo=i(Ks),st=n(Ks,"DIV",{class:!0});var P3=s(st);T(sL.$$.fragment,P3),cbo=i(P3),Gie=n(P3,"P",{});var Dit=s(Gie);fbo=r(Dit,"Instantiates one of the base model classes of the library from a configuration."),Dit.forEach(t),mbo=i(P3),ji=n(P3,"P",{});var Aoe=s(ji);gbo=r(Aoe,`Note:
Loading a model from its configuration file does `),Oie=n(Aoe,"STRONG",{});var Git=s(Oie);hbo=r(Git,"not"),Git.forEach(t),pbo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=n(Aoe,"A",{href:!0});var Oit=s(sq);_bo=r(Oit,"from_pretrained()"),Oit.forEach(t),ubo=r(Aoe," to load the model weights."),Aoe.forEach(t),bbo=i(P3),T(kp.$$.fragment,P3),P3.forEach(t),vbo=i(Ks),Je=n(Ks,"DIV",{class:!0});var na=s(Je);T(lL.$$.fragment,na),Fbo=i(na),Vie=n(na,"P",{});var Vit=s(Vie);Tbo=r(Vit,"Instantiate one of the base model classes of the library from a pretrained model."),Vit.forEach(t),Mbo=i(na),Pa=n(na,"P",{});var B3=s(Pa);Ebo=r(B3,"The model class to instantiate is selected based on the "),Xie=n(B3,"CODE",{});var Xit=s(Xie);Cbo=r(Xit,"model_type"),Xit.forEach(t),wbo=r(B3,` property of the config object (either
passed as an argument or loaded from `),zie=n(B3,"CODE",{});var zit=s(zie);Abo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),Lbo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(B3,"CODE",{});var Wit=s(Wie);ybo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),xbo=r(B3,":"),B3.forEach(t),$bo=i(na),y=n(na,"UL",{});var $=s(y);Sp=n($,"LI",{});var aye=s(Sp);Qie=n(aye,"STRONG",{});var Qit=s(Qie);kbo=r(Qit,"albert"),Qit.forEach(t),Sbo=r(aye," \u2014 "),lq=n(aye,"A",{href:!0});var Hit=s(lq);Rbo=r(Hit,"AlbertModel"),Hit.forEach(t),Pbo=r(aye," (ALBERT model)"),aye.forEach(t),Bbo=i($),Rp=n($,"LI",{});var nye=s(Rp);Hie=n(nye,"STRONG",{});var Uit=s(Hie);Ibo=r(Uit,"bart"),Uit.forEach(t),Nbo=r(nye," \u2014 "),iq=n(nye,"A",{href:!0});var Jit=s(iq);qbo=r(Jit,"BartModel"),Jit.forEach(t),jbo=r(nye," (BART model)"),nye.forEach(t),Dbo=i($),Pp=n($,"LI",{});var sye=s(Pp);Uie=n(sye,"STRONG",{});var Yit=s(Uie);Gbo=r(Yit,"beit"),Yit.forEach(t),Obo=r(sye," \u2014 "),dq=n(sye,"A",{href:!0});var Kit=s(dq);Vbo=r(Kit,"BeitModel"),Kit.forEach(t),Xbo=r(sye," (BEiT model)"),sye.forEach(t),zbo=i($),Bp=n($,"LI",{});var lye=s(Bp);Jie=n(lye,"STRONG",{});var Zit=s(Jie);Wbo=r(Zit,"bert"),Zit.forEach(t),Qbo=r(lye," \u2014 "),cq=n(lye,"A",{href:!0});var edt=s(cq);Hbo=r(edt,"BertModel"),edt.forEach(t),Ubo=r(lye," (BERT model)"),lye.forEach(t),Jbo=i($),Ip=n($,"LI",{});var iye=s(Ip);Yie=n(iye,"STRONG",{});var odt=s(Yie);Ybo=r(odt,"bert-generation"),odt.forEach(t),Kbo=r(iye," \u2014 "),fq=n(iye,"A",{href:!0});var rdt=s(fq);Zbo=r(rdt,"BertGenerationEncoder"),rdt.forEach(t),evo=r(iye," (Bert Generation model)"),iye.forEach(t),ovo=i($),Np=n($,"LI",{});var dye=s(Np);Kie=n(dye,"STRONG",{});var tdt=s(Kie);rvo=r(tdt,"big_bird"),tdt.forEach(t),tvo=r(dye," \u2014 "),mq=n(dye,"A",{href:!0});var adt=s(mq);avo=r(adt,"BigBirdModel"),adt.forEach(t),nvo=r(dye," (BigBird model)"),dye.forEach(t),svo=i($),qp=n($,"LI",{});var cye=s(qp);Zie=n(cye,"STRONG",{});var ndt=s(Zie);lvo=r(ndt,"bigbird_pegasus"),ndt.forEach(t),ivo=r(cye," \u2014 "),gq=n(cye,"A",{href:!0});var sdt=s(gq);dvo=r(sdt,"BigBirdPegasusModel"),sdt.forEach(t),cvo=r(cye," (BigBird-Pegasus model)"),cye.forEach(t),fvo=i($),jp=n($,"LI",{});var fye=s(jp);ede=n(fye,"STRONG",{});var ldt=s(ede);mvo=r(ldt,"blenderbot"),ldt.forEach(t),gvo=r(fye," \u2014 "),hq=n(fye,"A",{href:!0});var idt=s(hq);hvo=r(idt,"BlenderbotModel"),idt.forEach(t),pvo=r(fye," (Blenderbot model)"),fye.forEach(t),_vo=i($),Dp=n($,"LI",{});var mye=s(Dp);ode=n(mye,"STRONG",{});var ddt=s(ode);uvo=r(ddt,"blenderbot-small"),ddt.forEach(t),bvo=r(mye," \u2014 "),pq=n(mye,"A",{href:!0});var cdt=s(pq);vvo=r(cdt,"BlenderbotSmallModel"),cdt.forEach(t),Fvo=r(mye," (BlenderbotSmall model)"),mye.forEach(t),Tvo=i($),Gp=n($,"LI",{});var gye=s(Gp);rde=n(gye,"STRONG",{});var fdt=s(rde);Mvo=r(fdt,"bloom"),fdt.forEach(t),Evo=r(gye," \u2014 "),_q=n(gye,"A",{href:!0});var mdt=s(_q);Cvo=r(mdt,"BloomModel"),mdt.forEach(t),wvo=r(gye," (BLOOM model)"),gye.forEach(t),Avo=i($),Op=n($,"LI",{});var hye=s(Op);tde=n(hye,"STRONG",{});var gdt=s(tde);Lvo=r(gdt,"camembert"),gdt.forEach(t),yvo=r(hye," \u2014 "),uq=n(hye,"A",{href:!0});var hdt=s(uq);xvo=r(hdt,"CamembertModel"),hdt.forEach(t),$vo=r(hye," (CamemBERT model)"),hye.forEach(t),kvo=i($),Vp=n($,"LI",{});var pye=s(Vp);ade=n(pye,"STRONG",{});var pdt=s(ade);Svo=r(pdt,"canine"),pdt.forEach(t),Rvo=r(pye," \u2014 "),bq=n(pye,"A",{href:!0});var _dt=s(bq);Pvo=r(_dt,"CanineModel"),_dt.forEach(t),Bvo=r(pye," (CANINE model)"),pye.forEach(t),Ivo=i($),Xp=n($,"LI",{});var _ye=s(Xp);nde=n(_ye,"STRONG",{});var udt=s(nde);Nvo=r(udt,"clip"),udt.forEach(t),qvo=r(_ye," \u2014 "),vq=n(_ye,"A",{href:!0});var bdt=s(vq);jvo=r(bdt,"CLIPModel"),bdt.forEach(t),Dvo=r(_ye," (CLIP model)"),_ye.forEach(t),Gvo=i($),zp=n($,"LI",{});var uye=s(zp);sde=n(uye,"STRONG",{});var vdt=s(sde);Ovo=r(vdt,"convbert"),vdt.forEach(t),Vvo=r(uye," \u2014 "),Fq=n(uye,"A",{href:!0});var Fdt=s(Fq);Xvo=r(Fdt,"ConvBertModel"),Fdt.forEach(t),zvo=r(uye," (ConvBERT model)"),uye.forEach(t),Wvo=i($),Wp=n($,"LI",{});var bye=s(Wp);lde=n(bye,"STRONG",{});var Tdt=s(lde);Qvo=r(Tdt,"convnext"),Tdt.forEach(t),Hvo=r(bye," \u2014 "),Tq=n(bye,"A",{href:!0});var Mdt=s(Tq);Uvo=r(Mdt,"ConvNextModel"),Mdt.forEach(t),Jvo=r(bye," (ConvNeXT model)"),bye.forEach(t),Yvo=i($),Qp=n($,"LI",{});var vye=s(Qp);ide=n(vye,"STRONG",{});var Edt=s(ide);Kvo=r(Edt,"ctrl"),Edt.forEach(t),Zvo=r(vye," \u2014 "),Mq=n(vye,"A",{href:!0});var Cdt=s(Mq);e0o=r(Cdt,"CTRLModel"),Cdt.forEach(t),o0o=r(vye," (CTRL model)"),vye.forEach(t),r0o=i($),Hp=n($,"LI",{});var Fye=s(Hp);dde=n(Fye,"STRONG",{});var wdt=s(dde);t0o=r(wdt,"cvt"),wdt.forEach(t),a0o=r(Fye," \u2014 "),Eq=n(Fye,"A",{href:!0});var Adt=s(Eq);n0o=r(Adt,"CvtModel"),Adt.forEach(t),s0o=r(Fye," (CvT model)"),Fye.forEach(t),l0o=i($),Up=n($,"LI",{});var Tye=s(Up);cde=n(Tye,"STRONG",{});var Ldt=s(cde);i0o=r(Ldt,"data2vec-audio"),Ldt.forEach(t),d0o=r(Tye," \u2014 "),Cq=n(Tye,"A",{href:!0});var ydt=s(Cq);c0o=r(ydt,"Data2VecAudioModel"),ydt.forEach(t),f0o=r(Tye," (Data2VecAudio model)"),Tye.forEach(t),m0o=i($),Jp=n($,"LI",{});var Mye=s(Jp);fde=n(Mye,"STRONG",{});var xdt=s(fde);g0o=r(xdt,"data2vec-text"),xdt.forEach(t),h0o=r(Mye," \u2014 "),wq=n(Mye,"A",{href:!0});var $dt=s(wq);p0o=r($dt,"Data2VecTextModel"),$dt.forEach(t),_0o=r(Mye," (Data2VecText model)"),Mye.forEach(t),u0o=i($),Yp=n($,"LI",{});var Eye=s(Yp);mde=n(Eye,"STRONG",{});var kdt=s(mde);b0o=r(kdt,"data2vec-vision"),kdt.forEach(t),v0o=r(Eye," \u2014 "),Aq=n(Eye,"A",{href:!0});var Sdt=s(Aq);F0o=r(Sdt,"Data2VecVisionModel"),Sdt.forEach(t),T0o=r(Eye," (Data2VecVision model)"),Eye.forEach(t),M0o=i($),Kp=n($,"LI",{});var Cye=s(Kp);gde=n(Cye,"STRONG",{});var Rdt=s(gde);E0o=r(Rdt,"deberta"),Rdt.forEach(t),C0o=r(Cye," \u2014 "),Lq=n(Cye,"A",{href:!0});var Pdt=s(Lq);w0o=r(Pdt,"DebertaModel"),Pdt.forEach(t),A0o=r(Cye," (DeBERTa model)"),Cye.forEach(t),L0o=i($),Zp=n($,"LI",{});var wye=s(Zp);hde=n(wye,"STRONG",{});var Bdt=s(hde);y0o=r(Bdt,"deberta-v2"),Bdt.forEach(t),x0o=r(wye," \u2014 "),yq=n(wye,"A",{href:!0});var Idt=s(yq);$0o=r(Idt,"DebertaV2Model"),Idt.forEach(t),k0o=r(wye," (DeBERTa-v2 model)"),wye.forEach(t),S0o=i($),e_=n($,"LI",{});var Aye=s(e_);pde=n(Aye,"STRONG",{});var Ndt=s(pde);R0o=r(Ndt,"decision_transformer"),Ndt.forEach(t),P0o=r(Aye," \u2014 "),xq=n(Aye,"A",{href:!0});var qdt=s(xq);B0o=r(qdt,"DecisionTransformerModel"),qdt.forEach(t),I0o=r(Aye," (Decision Transformer model)"),Aye.forEach(t),N0o=i($),o_=n($,"LI",{});var Lye=s(o_);_de=n(Lye,"STRONG",{});var jdt=s(_de);q0o=r(jdt,"deit"),jdt.forEach(t),j0o=r(Lye," \u2014 "),$q=n(Lye,"A",{href:!0});var Ddt=s($q);D0o=r(Ddt,"DeiTModel"),Ddt.forEach(t),G0o=r(Lye," (DeiT model)"),Lye.forEach(t),O0o=i($),r_=n($,"LI",{});var yye=s(r_);ude=n(yye,"STRONG",{});var Gdt=s(ude);V0o=r(Gdt,"detr"),Gdt.forEach(t),X0o=r(yye," \u2014 "),kq=n(yye,"A",{href:!0});var Odt=s(kq);z0o=r(Odt,"DetrModel"),Odt.forEach(t),W0o=r(yye," (DETR model)"),yye.forEach(t),Q0o=i($),t_=n($,"LI",{});var xye=s(t_);bde=n(xye,"STRONG",{});var Vdt=s(bde);H0o=r(Vdt,"distilbert"),Vdt.forEach(t),U0o=r(xye," \u2014 "),Sq=n(xye,"A",{href:!0});var Xdt=s(Sq);J0o=r(Xdt,"DistilBertModel"),Xdt.forEach(t),Y0o=r(xye," (DistilBERT model)"),xye.forEach(t),K0o=i($),a_=n($,"LI",{});var $ye=s(a_);vde=n($ye,"STRONG",{});var zdt=s(vde);Z0o=r(zdt,"dpr"),zdt.forEach(t),eFo=r($ye," \u2014 "),Rq=n($ye,"A",{href:!0});var Wdt=s(Rq);oFo=r(Wdt,"DPRQuestionEncoder"),Wdt.forEach(t),rFo=r($ye," (DPR model)"),$ye.forEach(t),tFo=i($),n_=n($,"LI",{});var kye=s(n_);Fde=n(kye,"STRONG",{});var Qdt=s(Fde);aFo=r(Qdt,"dpt"),Qdt.forEach(t),nFo=r(kye," \u2014 "),Pq=n(kye,"A",{href:!0});var Hdt=s(Pq);sFo=r(Hdt,"DPTModel"),Hdt.forEach(t),lFo=r(kye," (DPT model)"),kye.forEach(t),iFo=i($),s_=n($,"LI",{});var Sye=s(s_);Tde=n(Sye,"STRONG",{});var Udt=s(Tde);dFo=r(Udt,"electra"),Udt.forEach(t),cFo=r(Sye," \u2014 "),Bq=n(Sye,"A",{href:!0});var Jdt=s(Bq);fFo=r(Jdt,"ElectraModel"),Jdt.forEach(t),mFo=r(Sye," (ELECTRA model)"),Sye.forEach(t),gFo=i($),l_=n($,"LI",{});var Rye=s(l_);Mde=n(Rye,"STRONG",{});var Ydt=s(Mde);hFo=r(Ydt,"flaubert"),Ydt.forEach(t),pFo=r(Rye," \u2014 "),Iq=n(Rye,"A",{href:!0});var Kdt=s(Iq);_Fo=r(Kdt,"FlaubertModel"),Kdt.forEach(t),uFo=r(Rye," (FlauBERT model)"),Rye.forEach(t),bFo=i($),i_=n($,"LI",{});var Pye=s(i_);Ede=n(Pye,"STRONG",{});var Zdt=s(Ede);vFo=r(Zdt,"flava"),Zdt.forEach(t),FFo=r(Pye," \u2014 "),Nq=n(Pye,"A",{href:!0});var ect=s(Nq);TFo=r(ect,"FlavaModel"),ect.forEach(t),MFo=r(Pye," (FLAVA model)"),Pye.forEach(t),EFo=i($),d_=n($,"LI",{});var Bye=s(d_);Cde=n(Bye,"STRONG",{});var oct=s(Cde);CFo=r(oct,"fnet"),oct.forEach(t),wFo=r(Bye," \u2014 "),qq=n(Bye,"A",{href:!0});var rct=s(qq);AFo=r(rct,"FNetModel"),rct.forEach(t),LFo=r(Bye," (FNet model)"),Bye.forEach(t),yFo=i($),c_=n($,"LI",{});var Iye=s(c_);wde=n(Iye,"STRONG",{});var tct=s(wde);xFo=r(tct,"fsmt"),tct.forEach(t),$Fo=r(Iye," \u2014 "),jq=n(Iye,"A",{href:!0});var act=s(jq);kFo=r(act,"FSMTModel"),act.forEach(t),SFo=r(Iye," (FairSeq Machine-Translation model)"),Iye.forEach(t),RFo=i($),Vs=n($,"LI",{});var eS=s(Vs);Ade=n(eS,"STRONG",{});var nct=s(Ade);PFo=r(nct,"funnel"),nct.forEach(t),BFo=r(eS," \u2014 "),Dq=n(eS,"A",{href:!0});var sct=s(Dq);IFo=r(sct,"FunnelModel"),sct.forEach(t),NFo=r(eS," or "),Gq=n(eS,"A",{href:!0});var lct=s(Gq);qFo=r(lct,"FunnelBaseModel"),lct.forEach(t),jFo=r(eS," (Funnel Transformer model)"),eS.forEach(t),DFo=i($),f_=n($,"LI",{});var Nye=s(f_);Lde=n(Nye,"STRONG",{});var ict=s(Lde);GFo=r(ict,"glpn"),ict.forEach(t),OFo=r(Nye," \u2014 "),Oq=n(Nye,"A",{href:!0});var dct=s(Oq);VFo=r(dct,"GLPNModel"),dct.forEach(t),XFo=r(Nye," (GLPN model)"),Nye.forEach(t),zFo=i($),m_=n($,"LI",{});var qye=s(m_);yde=n(qye,"STRONG",{});var cct=s(yde);WFo=r(cct,"gpt2"),cct.forEach(t),QFo=r(qye," \u2014 "),Vq=n(qye,"A",{href:!0});var fct=s(Vq);HFo=r(fct,"GPT2Model"),fct.forEach(t),UFo=r(qye," (OpenAI GPT-2 model)"),qye.forEach(t),JFo=i($),g_=n($,"LI",{});var jye=s(g_);xde=n(jye,"STRONG",{});var mct=s(xde);YFo=r(mct,"gpt_neo"),mct.forEach(t),KFo=r(jye," \u2014 "),Xq=n(jye,"A",{href:!0});var gct=s(Xq);ZFo=r(gct,"GPTNeoModel"),gct.forEach(t),e6o=r(jye," (GPT Neo model)"),jye.forEach(t),o6o=i($),h_=n($,"LI",{});var Dye=s(h_);$de=n(Dye,"STRONG",{});var hct=s($de);r6o=r(hct,"gpt_neox"),hct.forEach(t),t6o=r(Dye," \u2014 "),zq=n(Dye,"A",{href:!0});var pct=s(zq);a6o=r(pct,"GPTNeoXModel"),pct.forEach(t),n6o=r(Dye," (GPT NeoX model)"),Dye.forEach(t),s6o=i($),p_=n($,"LI",{});var Gye=s(p_);kde=n(Gye,"STRONG",{});var _ct=s(kde);l6o=r(_ct,"gptj"),_ct.forEach(t),i6o=r(Gye," \u2014 "),Wq=n(Gye,"A",{href:!0});var uct=s(Wq);d6o=r(uct,"GPTJModel"),uct.forEach(t),c6o=r(Gye," (GPT-J model)"),Gye.forEach(t),f6o=i($),__=n($,"LI",{});var Oye=s(__);Sde=n(Oye,"STRONG",{});var bct=s(Sde);m6o=r(bct,"hubert"),bct.forEach(t),g6o=r(Oye," \u2014 "),Qq=n(Oye,"A",{href:!0});var vct=s(Qq);h6o=r(vct,"HubertModel"),vct.forEach(t),p6o=r(Oye," (Hubert model)"),Oye.forEach(t),_6o=i($),u_=n($,"LI",{});var Vye=s(u_);Rde=n(Vye,"STRONG",{});var Fct=s(Rde);u6o=r(Fct,"ibert"),Fct.forEach(t),b6o=r(Vye," \u2014 "),Hq=n(Vye,"A",{href:!0});var Tct=s(Hq);v6o=r(Tct,"IBertModel"),Tct.forEach(t),F6o=r(Vye," (I-BERT model)"),Vye.forEach(t),T6o=i($),b_=n($,"LI",{});var Xye=s(b_);Pde=n(Xye,"STRONG",{});var Mct=s(Pde);M6o=r(Mct,"imagegpt"),Mct.forEach(t),E6o=r(Xye," \u2014 "),Uq=n(Xye,"A",{href:!0});var Ect=s(Uq);C6o=r(Ect,"ImageGPTModel"),Ect.forEach(t),w6o=r(Xye," (ImageGPT model)"),Xye.forEach(t),A6o=i($),v_=n($,"LI",{});var zye=s(v_);Bde=n(zye,"STRONG",{});var Cct=s(Bde);L6o=r(Cct,"layoutlm"),Cct.forEach(t),y6o=r(zye," \u2014 "),Jq=n(zye,"A",{href:!0});var wct=s(Jq);x6o=r(wct,"LayoutLMModel"),wct.forEach(t),$6o=r(zye," (LayoutLM model)"),zye.forEach(t),k6o=i($),F_=n($,"LI",{});var Wye=s(F_);Ide=n(Wye,"STRONG",{});var Act=s(Ide);S6o=r(Act,"layoutlmv2"),Act.forEach(t),R6o=r(Wye," \u2014 "),Yq=n(Wye,"A",{href:!0});var Lct=s(Yq);P6o=r(Lct,"LayoutLMv2Model"),Lct.forEach(t),B6o=r(Wye," (LayoutLMv2 model)"),Wye.forEach(t),I6o=i($),T_=n($,"LI",{});var Qye=s(T_);Nde=n(Qye,"STRONG",{});var yct=s(Nde);N6o=r(yct,"layoutlmv3"),yct.forEach(t),q6o=r(Qye," \u2014 "),Kq=n(Qye,"A",{href:!0});var xct=s(Kq);j6o=r(xct,"LayoutLMv3Model"),xct.forEach(t),D6o=r(Qye," (LayoutLMv3 model)"),Qye.forEach(t),G6o=i($),M_=n($,"LI",{});var Hye=s(M_);qde=n(Hye,"STRONG",{});var $ct=s(qde);O6o=r($ct,"led"),$ct.forEach(t),V6o=r(Hye," \u2014 "),Zq=n(Hye,"A",{href:!0});var kct=s(Zq);X6o=r(kct,"LEDModel"),kct.forEach(t),z6o=r(Hye," (LED model)"),Hye.forEach(t),W6o=i($),E_=n($,"LI",{});var Uye=s(E_);jde=n(Uye,"STRONG",{});var Sct=s(jde);Q6o=r(Sct,"levit"),Sct.forEach(t),H6o=r(Uye," \u2014 "),ej=n(Uye,"A",{href:!0});var Rct=s(ej);U6o=r(Rct,"LevitModel"),Rct.forEach(t),J6o=r(Uye," (LeViT model)"),Uye.forEach(t),Y6o=i($),C_=n($,"LI",{});var Jye=s(C_);Dde=n(Jye,"STRONG",{});var Pct=s(Dde);K6o=r(Pct,"longformer"),Pct.forEach(t),Z6o=r(Jye," \u2014 "),oj=n(Jye,"A",{href:!0});var Bct=s(oj);eTo=r(Bct,"LongformerModel"),Bct.forEach(t),oTo=r(Jye," (Longformer model)"),Jye.forEach(t),rTo=i($),w_=n($,"LI",{});var Yye=s(w_);Gde=n(Yye,"STRONG",{});var Ict=s(Gde);tTo=r(Ict,"longt5"),Ict.forEach(t),aTo=r(Yye," \u2014 "),rj=n(Yye,"A",{href:!0});var Nct=s(rj);nTo=r(Nct,"LongT5Model"),Nct.forEach(t),sTo=r(Yye," (LongT5 model)"),Yye.forEach(t),lTo=i($),A_=n($,"LI",{});var Kye=s(A_);Ode=n(Kye,"STRONG",{});var qct=s(Ode);iTo=r(qct,"luke"),qct.forEach(t),dTo=r(Kye," \u2014 "),tj=n(Kye,"A",{href:!0});var jct=s(tj);cTo=r(jct,"LukeModel"),jct.forEach(t),fTo=r(Kye," (LUKE model)"),Kye.forEach(t),mTo=i($),L_=n($,"LI",{});var Zye=s(L_);Vde=n(Zye,"STRONG",{});var Dct=s(Vde);gTo=r(Dct,"lxmert"),Dct.forEach(t),hTo=r(Zye," \u2014 "),aj=n(Zye,"A",{href:!0});var Gct=s(aj);pTo=r(Gct,"LxmertModel"),Gct.forEach(t),_To=r(Zye," (LXMERT model)"),Zye.forEach(t),uTo=i($),y_=n($,"LI",{});var e9e=s(y_);Xde=n(e9e,"STRONG",{});var Oct=s(Xde);bTo=r(Oct,"m2m_100"),Oct.forEach(t),vTo=r(e9e," \u2014 "),nj=n(e9e,"A",{href:!0});var Vct=s(nj);FTo=r(Vct,"M2M100Model"),Vct.forEach(t),TTo=r(e9e," (M2M100 model)"),e9e.forEach(t),MTo=i($),x_=n($,"LI",{});var o9e=s(x_);zde=n(o9e,"STRONG",{});var Xct=s(zde);ETo=r(Xct,"marian"),Xct.forEach(t),CTo=r(o9e," \u2014 "),sj=n(o9e,"A",{href:!0});var zct=s(sj);wTo=r(zct,"MarianModel"),zct.forEach(t),ATo=r(o9e," (Marian model)"),o9e.forEach(t),LTo=i($),$_=n($,"LI",{});var r9e=s($_);Wde=n(r9e,"STRONG",{});var Wct=s(Wde);yTo=r(Wct,"maskformer"),Wct.forEach(t),xTo=r(r9e," \u2014 "),lj=n(r9e,"A",{href:!0});var Qct=s(lj);$To=r(Qct,"MaskFormerModel"),Qct.forEach(t),kTo=r(r9e," (MaskFormer model)"),r9e.forEach(t),STo=i($),k_=n($,"LI",{});var t9e=s(k_);Qde=n(t9e,"STRONG",{});var Hct=s(Qde);RTo=r(Hct,"mbart"),Hct.forEach(t),PTo=r(t9e," \u2014 "),ij=n(t9e,"A",{href:!0});var Uct=s(ij);BTo=r(Uct,"MBartModel"),Uct.forEach(t),ITo=r(t9e," (mBART model)"),t9e.forEach(t),NTo=i($),S_=n($,"LI",{});var a9e=s(S_);Hde=n(a9e,"STRONG",{});var Jct=s(Hde);qTo=r(Jct,"mctct"),Jct.forEach(t),jTo=r(a9e," \u2014 "),dj=n(a9e,"A",{href:!0});var Yct=s(dj);DTo=r(Yct,"MCTCTModel"),Yct.forEach(t),GTo=r(a9e," (M-CTC-T model)"),a9e.forEach(t),OTo=i($),R_=n($,"LI",{});var n9e=s(R_);Ude=n(n9e,"STRONG",{});var Kct=s(Ude);VTo=r(Kct,"megatron-bert"),Kct.forEach(t),XTo=r(n9e," \u2014 "),cj=n(n9e,"A",{href:!0});var Zct=s(cj);zTo=r(Zct,"MegatronBertModel"),Zct.forEach(t),WTo=r(n9e," (Megatron-BERT model)"),n9e.forEach(t),QTo=i($),P_=n($,"LI",{});var s9e=s(P_);Jde=n(s9e,"STRONG",{});var eft=s(Jde);HTo=r(eft,"mobilebert"),eft.forEach(t),UTo=r(s9e," \u2014 "),fj=n(s9e,"A",{href:!0});var oft=s(fj);JTo=r(oft,"MobileBertModel"),oft.forEach(t),YTo=r(s9e," (MobileBERT model)"),s9e.forEach(t),KTo=i($),B_=n($,"LI",{});var l9e=s(B_);Yde=n(l9e,"STRONG",{});var rft=s(Yde);ZTo=r(rft,"mpnet"),rft.forEach(t),e7o=r(l9e," \u2014 "),mj=n(l9e,"A",{href:!0});var tft=s(mj);o7o=r(tft,"MPNetModel"),tft.forEach(t),r7o=r(l9e," (MPNet model)"),l9e.forEach(t),t7o=i($),I_=n($,"LI",{});var i9e=s(I_);Kde=n(i9e,"STRONG",{});var aft=s(Kde);a7o=r(aft,"mt5"),aft.forEach(t),n7o=r(i9e," \u2014 "),gj=n(i9e,"A",{href:!0});var nft=s(gj);s7o=r(nft,"MT5Model"),nft.forEach(t),l7o=r(i9e," (MT5 model)"),i9e.forEach(t),i7o=i($),N_=n($,"LI",{});var d9e=s(N_);Zde=n(d9e,"STRONG",{});var sft=s(Zde);d7o=r(sft,"nezha"),sft.forEach(t),c7o=r(d9e," \u2014 "),hj=n(d9e,"A",{href:!0});var lft=s(hj);f7o=r(lft,"NezhaModel"),lft.forEach(t),m7o=r(d9e," (Nezha model)"),d9e.forEach(t),g7o=i($),q_=n($,"LI",{});var c9e=s(q_);ece=n(c9e,"STRONG",{});var ift=s(ece);h7o=r(ift,"nystromformer"),ift.forEach(t),p7o=r(c9e," \u2014 "),pj=n(c9e,"A",{href:!0});var dft=s(pj);_7o=r(dft,"NystromformerModel"),dft.forEach(t),u7o=r(c9e," (Nystr\xF6mformer model)"),c9e.forEach(t),b7o=i($),j_=n($,"LI",{});var f9e=s(j_);oce=n(f9e,"STRONG",{});var cft=s(oce);v7o=r(cft,"openai-gpt"),cft.forEach(t),F7o=r(f9e," \u2014 "),_j=n(f9e,"A",{href:!0});var fft=s(_j);T7o=r(fft,"OpenAIGPTModel"),fft.forEach(t),M7o=r(f9e," (OpenAI GPT model)"),f9e.forEach(t),E7o=i($),D_=n($,"LI",{});var m9e=s(D_);rce=n(m9e,"STRONG",{});var mft=s(rce);C7o=r(mft,"opt"),mft.forEach(t),w7o=r(m9e," \u2014 "),uj=n(m9e,"A",{href:!0});var gft=s(uj);A7o=r(gft,"OPTModel"),gft.forEach(t),L7o=r(m9e," (OPT model)"),m9e.forEach(t),y7o=i($),G_=n($,"LI",{});var g9e=s(G_);tce=n(g9e,"STRONG",{});var hft=s(tce);x7o=r(hft,"pegasus"),hft.forEach(t),$7o=r(g9e," \u2014 "),bj=n(g9e,"A",{href:!0});var pft=s(bj);k7o=r(pft,"PegasusModel"),pft.forEach(t),S7o=r(g9e," (Pegasus model)"),g9e.forEach(t),R7o=i($),O_=n($,"LI",{});var h9e=s(O_);ace=n(h9e,"STRONG",{});var _ft=s(ace);P7o=r(_ft,"perceiver"),_ft.forEach(t),B7o=r(h9e," \u2014 "),vj=n(h9e,"A",{href:!0});var uft=s(vj);I7o=r(uft,"PerceiverModel"),uft.forEach(t),N7o=r(h9e," (Perceiver model)"),h9e.forEach(t),q7o=i($),V_=n($,"LI",{});var p9e=s(V_);nce=n(p9e,"STRONG",{});var bft=s(nce);j7o=r(bft,"plbart"),bft.forEach(t),D7o=r(p9e," \u2014 "),Fj=n(p9e,"A",{href:!0});var vft=s(Fj);G7o=r(vft,"PLBartModel"),vft.forEach(t),O7o=r(p9e," (PLBart model)"),p9e.forEach(t),V7o=i($),X_=n($,"LI",{});var _9e=s(X_);sce=n(_9e,"STRONG",{});var Fft=s(sce);X7o=r(Fft,"poolformer"),Fft.forEach(t),z7o=r(_9e," \u2014 "),Tj=n(_9e,"A",{href:!0});var Tft=s(Tj);W7o=r(Tft,"PoolFormerModel"),Tft.forEach(t),Q7o=r(_9e," (PoolFormer model)"),_9e.forEach(t),H7o=i($),z_=n($,"LI",{});var u9e=s(z_);lce=n(u9e,"STRONG",{});var Mft=s(lce);U7o=r(Mft,"prophetnet"),Mft.forEach(t),J7o=r(u9e," \u2014 "),Mj=n(u9e,"A",{href:!0});var Eft=s(Mj);Y7o=r(Eft,"ProphetNetModel"),Eft.forEach(t),K7o=r(u9e," (ProphetNet model)"),u9e.forEach(t),Z7o=i($),W_=n($,"LI",{});var b9e=s(W_);ice=n(b9e,"STRONG",{});var Cft=s(ice);e8o=r(Cft,"qdqbert"),Cft.forEach(t),o8o=r(b9e," \u2014 "),Ej=n(b9e,"A",{href:!0});var wft=s(Ej);r8o=r(wft,"QDQBertModel"),wft.forEach(t),t8o=r(b9e," (QDQBert model)"),b9e.forEach(t),a8o=i($),Q_=n($,"LI",{});var v9e=s(Q_);dce=n(v9e,"STRONG",{});var Aft=s(dce);n8o=r(Aft,"reformer"),Aft.forEach(t),s8o=r(v9e," \u2014 "),Cj=n(v9e,"A",{href:!0});var Lft=s(Cj);l8o=r(Lft,"ReformerModel"),Lft.forEach(t),i8o=r(v9e," (Reformer model)"),v9e.forEach(t),d8o=i($),H_=n($,"LI",{});var F9e=s(H_);cce=n(F9e,"STRONG",{});var yft=s(cce);c8o=r(yft,"regnet"),yft.forEach(t),f8o=r(F9e," \u2014 "),wj=n(F9e,"A",{href:!0});var xft=s(wj);m8o=r(xft,"RegNetModel"),xft.forEach(t),g8o=r(F9e," (RegNet model)"),F9e.forEach(t),h8o=i($),U_=n($,"LI",{});var T9e=s(U_);fce=n(T9e,"STRONG",{});var $ft=s(fce);p8o=r($ft,"rembert"),$ft.forEach(t),_8o=r(T9e," \u2014 "),Aj=n(T9e,"A",{href:!0});var kft=s(Aj);u8o=r(kft,"RemBertModel"),kft.forEach(t),b8o=r(T9e," (RemBERT model)"),T9e.forEach(t),v8o=i($),J_=n($,"LI",{});var M9e=s(J_);mce=n(M9e,"STRONG",{});var Sft=s(mce);F8o=r(Sft,"resnet"),Sft.forEach(t),T8o=r(M9e," \u2014 "),Lj=n(M9e,"A",{href:!0});var Rft=s(Lj);M8o=r(Rft,"ResNetModel"),Rft.forEach(t),E8o=r(M9e," (ResNet model)"),M9e.forEach(t),C8o=i($),Y_=n($,"LI",{});var E9e=s(Y_);gce=n(E9e,"STRONG",{});var Pft=s(gce);w8o=r(Pft,"retribert"),Pft.forEach(t),A8o=r(E9e," \u2014 "),yj=n(E9e,"A",{href:!0});var Bft=s(yj);L8o=r(Bft,"RetriBertModel"),Bft.forEach(t),y8o=r(E9e," (RetriBERT model)"),E9e.forEach(t),x8o=i($),K_=n($,"LI",{});var C9e=s(K_);hce=n(C9e,"STRONG",{});var Ift=s(hce);$8o=r(Ift,"roberta"),Ift.forEach(t),k8o=r(C9e," \u2014 "),xj=n(C9e,"A",{href:!0});var Nft=s(xj);S8o=r(Nft,"RobertaModel"),Nft.forEach(t),R8o=r(C9e," (RoBERTa model)"),C9e.forEach(t),P8o=i($),Z_=n($,"LI",{});var w9e=s(Z_);pce=n(w9e,"STRONG",{});var qft=s(pce);B8o=r(qft,"roformer"),qft.forEach(t),I8o=r(w9e," \u2014 "),$j=n(w9e,"A",{href:!0});var jft=s($j);N8o=r(jft,"RoFormerModel"),jft.forEach(t),q8o=r(w9e," (RoFormer model)"),w9e.forEach(t),j8o=i($),eu=n($,"LI",{});var A9e=s(eu);_ce=n(A9e,"STRONG",{});var Dft=s(_ce);D8o=r(Dft,"segformer"),Dft.forEach(t),G8o=r(A9e," \u2014 "),kj=n(A9e,"A",{href:!0});var Gft=s(kj);O8o=r(Gft,"SegformerModel"),Gft.forEach(t),V8o=r(A9e," (SegFormer model)"),A9e.forEach(t),X8o=i($),ou=n($,"LI",{});var L9e=s(ou);uce=n(L9e,"STRONG",{});var Oft=s(uce);z8o=r(Oft,"sew"),Oft.forEach(t),W8o=r(L9e," \u2014 "),Sj=n(L9e,"A",{href:!0});var Vft=s(Sj);Q8o=r(Vft,"SEWModel"),Vft.forEach(t),H8o=r(L9e," (SEW model)"),L9e.forEach(t),U8o=i($),ru=n($,"LI",{});var y9e=s(ru);bce=n(y9e,"STRONG",{});var Xft=s(bce);J8o=r(Xft,"sew-d"),Xft.forEach(t),Y8o=r(y9e," \u2014 "),Rj=n(y9e,"A",{href:!0});var zft=s(Rj);K8o=r(zft,"SEWDModel"),zft.forEach(t),Z8o=r(y9e," (SEW-D model)"),y9e.forEach(t),eMo=i($),tu=n($,"LI",{});var x9e=s(tu);vce=n(x9e,"STRONG",{});var Wft=s(vce);oMo=r(Wft,"speech_to_text"),Wft.forEach(t),rMo=r(x9e," \u2014 "),Pj=n(x9e,"A",{href:!0});var Qft=s(Pj);tMo=r(Qft,"Speech2TextModel"),Qft.forEach(t),aMo=r(x9e," (Speech2Text model)"),x9e.forEach(t),nMo=i($),au=n($,"LI",{});var $9e=s(au);Fce=n($9e,"STRONG",{});var Hft=s(Fce);sMo=r(Hft,"splinter"),Hft.forEach(t),lMo=r($9e," \u2014 "),Bj=n($9e,"A",{href:!0});var Uft=s(Bj);iMo=r(Uft,"SplinterModel"),Uft.forEach(t),dMo=r($9e," (Splinter model)"),$9e.forEach(t),cMo=i($),nu=n($,"LI",{});var k9e=s(nu);Tce=n(k9e,"STRONG",{});var Jft=s(Tce);fMo=r(Jft,"squeezebert"),Jft.forEach(t),mMo=r(k9e," \u2014 "),Ij=n(k9e,"A",{href:!0});var Yft=s(Ij);gMo=r(Yft,"SqueezeBertModel"),Yft.forEach(t),hMo=r(k9e," (SqueezeBERT model)"),k9e.forEach(t),pMo=i($),su=n($,"LI",{});var S9e=s(su);Mce=n(S9e,"STRONG",{});var Kft=s(Mce);_Mo=r(Kft,"swin"),Kft.forEach(t),uMo=r(S9e," \u2014 "),Nj=n(S9e,"A",{href:!0});var Zft=s(Nj);bMo=r(Zft,"SwinModel"),Zft.forEach(t),vMo=r(S9e," (Swin Transformer model)"),S9e.forEach(t),FMo=i($),lu=n($,"LI",{});var R9e=s(lu);Ece=n(R9e,"STRONG",{});var emt=s(Ece);TMo=r(emt,"t5"),emt.forEach(t),MMo=r(R9e," \u2014 "),qj=n(R9e,"A",{href:!0});var omt=s(qj);EMo=r(omt,"T5Model"),omt.forEach(t),CMo=r(R9e," (T5 model)"),R9e.forEach(t),wMo=i($),iu=n($,"LI",{});var P9e=s(iu);Cce=n(P9e,"STRONG",{});var rmt=s(Cce);AMo=r(rmt,"tapas"),rmt.forEach(t),LMo=r(P9e," \u2014 "),jj=n(P9e,"A",{href:!0});var tmt=s(jj);yMo=r(tmt,"TapasModel"),tmt.forEach(t),xMo=r(P9e," (TAPAS model)"),P9e.forEach(t),$Mo=i($),du=n($,"LI",{});var B9e=s(du);wce=n(B9e,"STRONG",{});var amt=s(wce);kMo=r(amt,"trajectory_transformer"),amt.forEach(t),SMo=r(B9e," \u2014 "),Dj=n(B9e,"A",{href:!0});var nmt=s(Dj);RMo=r(nmt,"TrajectoryTransformerModel"),nmt.forEach(t),PMo=r(B9e," (Trajectory Transformer model)"),B9e.forEach(t),BMo=i($),cu=n($,"LI",{});var I9e=s(cu);Ace=n(I9e,"STRONG",{});var smt=s(Ace);IMo=r(smt,"transfo-xl"),smt.forEach(t),NMo=r(I9e," \u2014 "),Gj=n(I9e,"A",{href:!0});var lmt=s(Gj);qMo=r(lmt,"TransfoXLModel"),lmt.forEach(t),jMo=r(I9e," (Transformer-XL model)"),I9e.forEach(t),DMo=i($),fu=n($,"LI",{});var N9e=s(fu);Lce=n(N9e,"STRONG",{});var imt=s(Lce);GMo=r(imt,"unispeech"),imt.forEach(t),OMo=r(N9e," \u2014 "),Oj=n(N9e,"A",{href:!0});var dmt=s(Oj);VMo=r(dmt,"UniSpeechModel"),dmt.forEach(t),XMo=r(N9e," (UniSpeech model)"),N9e.forEach(t),zMo=i($),mu=n($,"LI",{});var q9e=s(mu);yce=n(q9e,"STRONG",{});var cmt=s(yce);WMo=r(cmt,"unispeech-sat"),cmt.forEach(t),QMo=r(q9e," \u2014 "),Vj=n(q9e,"A",{href:!0});var fmt=s(Vj);HMo=r(fmt,"UniSpeechSatModel"),fmt.forEach(t),UMo=r(q9e," (UniSpeechSat model)"),q9e.forEach(t),JMo=i($),gu=n($,"LI",{});var j9e=s(gu);xce=n(j9e,"STRONG",{});var mmt=s(xce);YMo=r(mmt,"van"),mmt.forEach(t),KMo=r(j9e," \u2014 "),Xj=n(j9e,"A",{href:!0});var gmt=s(Xj);ZMo=r(gmt,"VanModel"),gmt.forEach(t),eEo=r(j9e," (VAN model)"),j9e.forEach(t),oEo=i($),hu=n($,"LI",{});var D9e=s(hu);$ce=n(D9e,"STRONG",{});var hmt=s($ce);rEo=r(hmt,"vilt"),hmt.forEach(t),tEo=r(D9e," \u2014 "),zj=n(D9e,"A",{href:!0});var pmt=s(zj);aEo=r(pmt,"ViltModel"),pmt.forEach(t),nEo=r(D9e," (ViLT model)"),D9e.forEach(t),sEo=i($),pu=n($,"LI",{});var G9e=s(pu);kce=n(G9e,"STRONG",{});var _mt=s(kce);lEo=r(_mt,"vision-text-dual-encoder"),_mt.forEach(t),iEo=r(G9e," \u2014 "),Wj=n(G9e,"A",{href:!0});var umt=s(Wj);dEo=r(umt,"VisionTextDualEncoderModel"),umt.forEach(t),cEo=r(G9e," (VisionTextDualEncoder model)"),G9e.forEach(t),fEo=i($),_u=n($,"LI",{});var O9e=s(_u);Sce=n(O9e,"STRONG",{});var bmt=s(Sce);mEo=r(bmt,"visual_bert"),bmt.forEach(t),gEo=r(O9e," \u2014 "),Qj=n(O9e,"A",{href:!0});var vmt=s(Qj);hEo=r(vmt,"VisualBertModel"),vmt.forEach(t),pEo=r(O9e," (VisualBERT model)"),O9e.forEach(t),_Eo=i($),uu=n($,"LI",{});var V9e=s(uu);Rce=n(V9e,"STRONG",{});var Fmt=s(Rce);uEo=r(Fmt,"vit"),Fmt.forEach(t),bEo=r(V9e," \u2014 "),Hj=n(V9e,"A",{href:!0});var Tmt=s(Hj);vEo=r(Tmt,"ViTModel"),Tmt.forEach(t),FEo=r(V9e," (ViT model)"),V9e.forEach(t),TEo=i($),bu=n($,"LI",{});var X9e=s(bu);Pce=n(X9e,"STRONG",{});var Mmt=s(Pce);MEo=r(Mmt,"vit_mae"),Mmt.forEach(t),EEo=r(X9e," \u2014 "),Uj=n(X9e,"A",{href:!0});var Emt=s(Uj);CEo=r(Emt,"ViTMAEModel"),Emt.forEach(t),wEo=r(X9e," (ViTMAE model)"),X9e.forEach(t),AEo=i($),vu=n($,"LI",{});var z9e=s(vu);Bce=n(z9e,"STRONG",{});var Cmt=s(Bce);LEo=r(Cmt,"wav2vec2"),Cmt.forEach(t),yEo=r(z9e," \u2014 "),Jj=n(z9e,"A",{href:!0});var wmt=s(Jj);xEo=r(wmt,"Wav2Vec2Model"),wmt.forEach(t),$Eo=r(z9e," (Wav2Vec2 model)"),z9e.forEach(t),kEo=i($),Fu=n($,"LI",{});var W9e=s(Fu);Ice=n(W9e,"STRONG",{});var Amt=s(Ice);SEo=r(Amt,"wav2vec2-conformer"),Amt.forEach(t),REo=r(W9e," \u2014 "),Yj=n(W9e,"A",{href:!0});var Lmt=s(Yj);PEo=r(Lmt,"Wav2Vec2ConformerModel"),Lmt.forEach(t),BEo=r(W9e," (Wav2Vec2-Conformer model)"),W9e.forEach(t),IEo=i($),Tu=n($,"LI",{});var Q9e=s(Tu);Nce=n(Q9e,"STRONG",{});var ymt=s(Nce);NEo=r(ymt,"wavlm"),ymt.forEach(t),qEo=r(Q9e," \u2014 "),Kj=n(Q9e,"A",{href:!0});var xmt=s(Kj);jEo=r(xmt,"WavLMModel"),xmt.forEach(t),DEo=r(Q9e," (WavLM model)"),Q9e.forEach(t),GEo=i($),Mu=n($,"LI",{});var H9e=s(Mu);qce=n(H9e,"STRONG",{});var $mt=s(qce);OEo=r($mt,"xglm"),$mt.forEach(t),VEo=r(H9e," \u2014 "),Zj=n(H9e,"A",{href:!0});var kmt=s(Zj);XEo=r(kmt,"XGLMModel"),kmt.forEach(t),zEo=r(H9e," (XGLM model)"),H9e.forEach(t),WEo=i($),Eu=n($,"LI",{});var U9e=s(Eu);jce=n(U9e,"STRONG",{});var Smt=s(jce);QEo=r(Smt,"xlm"),Smt.forEach(t),HEo=r(U9e," \u2014 "),eD=n(U9e,"A",{href:!0});var Rmt=s(eD);UEo=r(Rmt,"XLMModel"),Rmt.forEach(t),JEo=r(U9e," (XLM model)"),U9e.forEach(t),YEo=i($),Cu=n($,"LI",{});var J9e=s(Cu);Dce=n(J9e,"STRONG",{});var Pmt=s(Dce);KEo=r(Pmt,"xlm-prophetnet"),Pmt.forEach(t),ZEo=r(J9e," \u2014 "),oD=n(J9e,"A",{href:!0});var Bmt=s(oD);e4o=r(Bmt,"XLMProphetNetModel"),Bmt.forEach(t),o4o=r(J9e," (XLM-ProphetNet model)"),J9e.forEach(t),r4o=i($),wu=n($,"LI",{});var Y9e=s(wu);Gce=n(Y9e,"STRONG",{});var Imt=s(Gce);t4o=r(Imt,"xlm-roberta"),Imt.forEach(t),a4o=r(Y9e," \u2014 "),rD=n(Y9e,"A",{href:!0});var Nmt=s(rD);n4o=r(Nmt,"XLMRobertaModel"),Nmt.forEach(t),s4o=r(Y9e," (XLM-RoBERTa model)"),Y9e.forEach(t),l4o=i($),Au=n($,"LI",{});var K9e=s(Au);Oce=n(K9e,"STRONG",{});var qmt=s(Oce);i4o=r(qmt,"xlm-roberta-xl"),qmt.forEach(t),d4o=r(K9e," \u2014 "),tD=n(K9e,"A",{href:!0});var jmt=s(tD);c4o=r(jmt,"XLMRobertaXLModel"),jmt.forEach(t),f4o=r(K9e," (XLM-RoBERTa-XL model)"),K9e.forEach(t),m4o=i($),Lu=n($,"LI",{});var Z9e=s(Lu);Vce=n(Z9e,"STRONG",{});var Dmt=s(Vce);g4o=r(Dmt,"xlnet"),Dmt.forEach(t),h4o=r(Z9e," \u2014 "),aD=n(Z9e,"A",{href:!0});var Gmt=s(aD);p4o=r(Gmt,"XLNetModel"),Gmt.forEach(t),_4o=r(Z9e," (XLNet model)"),Z9e.forEach(t),u4o=i($),yu=n($,"LI",{});var exe=s(yu);Xce=n(exe,"STRONG",{});var Omt=s(Xce);b4o=r(Omt,"yolos"),Omt.forEach(t),v4o=r(exe," \u2014 "),nD=n(exe,"A",{href:!0});var Vmt=s(nD);F4o=r(Vmt,"YolosModel"),Vmt.forEach(t),T4o=r(exe," (YOLOS model)"),exe.forEach(t),M4o=i($),xu=n($,"LI",{});var oxe=s(xu);zce=n(oxe,"STRONG",{});var Xmt=s(zce);E4o=r(Xmt,"yoso"),Xmt.forEach(t),C4o=r(oxe," \u2014 "),sD=n(oxe,"A",{href:!0});var zmt=s(sD);w4o=r(zmt,"YosoModel"),zmt.forEach(t),A4o=r(oxe," (YOSO model)"),oxe.forEach(t),$.forEach(t),L4o=i(na),$u=n(na,"P",{});var rxe=s($u);y4o=r(rxe,"The model is set in evaluation mode by default using "),Wce=n(rxe,"CODE",{});var Wmt=s(Wce);x4o=r(Wmt,"model.eval()"),Wmt.forEach(t),$4o=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(rxe,"CODE",{});var Qmt=s(Qce);k4o=r(Qmt,"model.train()"),Qmt.forEach(t),rxe.forEach(t),S4o=i(na),T(ku.$$.fragment,na),na.forEach(t),Ks.forEach(t),dOe=i(f),Di=n(f,"H2",{class:!0});var pXe=s(Di);Su=n(pXe,"A",{id:!0,class:!0,href:!0});var Hmt=s(Su);Hce=n(Hmt,"SPAN",{});var Umt=s(Hce);T(iL.$$.fragment,Umt),Umt.forEach(t),Hmt.forEach(t),R4o=i(pXe),Uce=n(pXe,"SPAN",{});var Jmt=s(Uce);P4o=r(Jmt,"AutoModelForPreTraining"),Jmt.forEach(t),pXe.forEach(t),cOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(dL.$$.fragment,Zs),B4o=i(Zs),Gi=n(Zs,"P",{});var Loe=s(Gi);I4o=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lD=n(Loe,"A",{href:!0});var Ymt=s(lD);N4o=r(Ymt,"from_pretrained()"),Ymt.forEach(t),q4o=r(Loe," class method or the "),iD=n(Loe,"A",{href:!0});var Kmt=s(iD);j4o=r(Kmt,"from_config()"),Kmt.forEach(t),D4o=r(Loe,` class
method.`),Loe.forEach(t),G4o=i(Zs),cL=n(Zs,"P",{});var _Xe=s(cL);O4o=r(_Xe,"This class cannot be instantiated directly using "),Jce=n(_Xe,"CODE",{});var Zmt=s(Jce);V4o=r(Zmt,"__init__()"),Zmt.forEach(t),X4o=r(_Xe," (throws an error)."),_Xe.forEach(t),z4o=i(Zs),lt=n(Zs,"DIV",{class:!0});var I3=s(lt);T(fL.$$.fragment,I3),W4o=i(I3),Yce=n(I3,"P",{});var egt=s(Yce);Q4o=r(egt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),egt.forEach(t),H4o=i(I3),Oi=n(I3,"P",{});var yoe=s(Oi);U4o=r(yoe,`Note:
Loading a model from its configuration file does `),Kce=n(yoe,"STRONG",{});var ogt=s(Kce);J4o=r(ogt,"not"),ogt.forEach(t),Y4o=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dD=n(yoe,"A",{href:!0});var rgt=s(dD);K4o=r(rgt,"from_pretrained()"),rgt.forEach(t),Z4o=r(yoe," to load the model weights."),yoe.forEach(t),eCo=i(I3),T(Ru.$$.fragment,I3),I3.forEach(t),oCo=i(Zs),Ye=n(Zs,"DIV",{class:!0});var sa=s(Ye);T(mL.$$.fragment,sa),rCo=i(sa),Zce=n(sa,"P",{});var tgt=s(Zce);tCo=r(tgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tgt.forEach(t),aCo=i(sa),Ba=n(sa,"P",{});var N3=s(Ba);nCo=r(N3,"The model class to instantiate is selected based on the "),efe=n(N3,"CODE",{});var agt=s(efe);sCo=r(agt,"model_type"),agt.forEach(t),lCo=r(N3,` property of the config object (either
passed as an argument or loaded from `),ofe=n(N3,"CODE",{});var ngt=s(ofe);iCo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),dCo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(N3,"CODE",{});var sgt=s(rfe);cCo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),fCo=r(N3,":"),N3.forEach(t),mCo=i(sa),G=n(sa,"UL",{});var O=s(G);Pu=n(O,"LI",{});var txe=s(Pu);tfe=n(txe,"STRONG",{});var lgt=s(tfe);gCo=r(lgt,"albert"),lgt.forEach(t),hCo=r(txe," \u2014 "),cD=n(txe,"A",{href:!0});var igt=s(cD);pCo=r(igt,"AlbertForPreTraining"),igt.forEach(t),_Co=r(txe," (ALBERT model)"),txe.forEach(t),uCo=i(O),Bu=n(O,"LI",{});var axe=s(Bu);afe=n(axe,"STRONG",{});var dgt=s(afe);bCo=r(dgt,"bart"),dgt.forEach(t),vCo=r(axe," \u2014 "),fD=n(axe,"A",{href:!0});var cgt=s(fD);FCo=r(cgt,"BartForConditionalGeneration"),cgt.forEach(t),TCo=r(axe," (BART model)"),axe.forEach(t),MCo=i(O),Iu=n(O,"LI",{});var nxe=s(Iu);nfe=n(nxe,"STRONG",{});var fgt=s(nfe);ECo=r(fgt,"bert"),fgt.forEach(t),CCo=r(nxe," \u2014 "),mD=n(nxe,"A",{href:!0});var mgt=s(mD);wCo=r(mgt,"BertForPreTraining"),mgt.forEach(t),ACo=r(nxe," (BERT model)"),nxe.forEach(t),LCo=i(O),Nu=n(O,"LI",{});var sxe=s(Nu);sfe=n(sxe,"STRONG",{});var ggt=s(sfe);yCo=r(ggt,"big_bird"),ggt.forEach(t),xCo=r(sxe," \u2014 "),gD=n(sxe,"A",{href:!0});var hgt=s(gD);$Co=r(hgt,"BigBirdForPreTraining"),hgt.forEach(t),kCo=r(sxe," (BigBird model)"),sxe.forEach(t),SCo=i(O),qu=n(O,"LI",{});var lxe=s(qu);lfe=n(lxe,"STRONG",{});var pgt=s(lfe);RCo=r(pgt,"bloom"),pgt.forEach(t),PCo=r(lxe," \u2014 "),hD=n(lxe,"A",{href:!0});var _gt=s(hD);BCo=r(_gt,"BloomForCausalLM"),_gt.forEach(t),ICo=r(lxe," (BLOOM model)"),lxe.forEach(t),NCo=i(O),ju=n(O,"LI",{});var ixe=s(ju);ife=n(ixe,"STRONG",{});var ugt=s(ife);qCo=r(ugt,"camembert"),ugt.forEach(t),jCo=r(ixe," \u2014 "),pD=n(ixe,"A",{href:!0});var bgt=s(pD);DCo=r(bgt,"CamembertForMaskedLM"),bgt.forEach(t),GCo=r(ixe," (CamemBERT model)"),ixe.forEach(t),OCo=i(O),Du=n(O,"LI",{});var dxe=s(Du);dfe=n(dxe,"STRONG",{});var vgt=s(dfe);VCo=r(vgt,"ctrl"),vgt.forEach(t),XCo=r(dxe," \u2014 "),_D=n(dxe,"A",{href:!0});var Fgt=s(_D);zCo=r(Fgt,"CTRLLMHeadModel"),Fgt.forEach(t),WCo=r(dxe," (CTRL model)"),dxe.forEach(t),QCo=i(O),Gu=n(O,"LI",{});var cxe=s(Gu);cfe=n(cxe,"STRONG",{});var Tgt=s(cfe);HCo=r(Tgt,"data2vec-text"),Tgt.forEach(t),UCo=r(cxe," \u2014 "),uD=n(cxe,"A",{href:!0});var Mgt=s(uD);JCo=r(Mgt,"Data2VecTextForMaskedLM"),Mgt.forEach(t),YCo=r(cxe," (Data2VecText model)"),cxe.forEach(t),KCo=i(O),Ou=n(O,"LI",{});var fxe=s(Ou);ffe=n(fxe,"STRONG",{});var Egt=s(ffe);ZCo=r(Egt,"deberta"),Egt.forEach(t),e5o=r(fxe," \u2014 "),bD=n(fxe,"A",{href:!0});var Cgt=s(bD);o5o=r(Cgt,"DebertaForMaskedLM"),Cgt.forEach(t),r5o=r(fxe," (DeBERTa model)"),fxe.forEach(t),t5o=i(O),Vu=n(O,"LI",{});var mxe=s(Vu);mfe=n(mxe,"STRONG",{});var wgt=s(mfe);a5o=r(wgt,"deberta-v2"),wgt.forEach(t),n5o=r(mxe," \u2014 "),vD=n(mxe,"A",{href:!0});var Agt=s(vD);s5o=r(Agt,"DebertaV2ForMaskedLM"),Agt.forEach(t),l5o=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),i5o=i(O),Xu=n(O,"LI",{});var gxe=s(Xu);gfe=n(gxe,"STRONG",{});var Lgt=s(gfe);d5o=r(Lgt,"distilbert"),Lgt.forEach(t),c5o=r(gxe," \u2014 "),FD=n(gxe,"A",{href:!0});var ygt=s(FD);f5o=r(ygt,"DistilBertForMaskedLM"),ygt.forEach(t),m5o=r(gxe," (DistilBERT model)"),gxe.forEach(t),g5o=i(O),zu=n(O,"LI",{});var hxe=s(zu);hfe=n(hxe,"STRONG",{});var xgt=s(hfe);h5o=r(xgt,"electra"),xgt.forEach(t),p5o=r(hxe," \u2014 "),TD=n(hxe,"A",{href:!0});var $gt=s(TD);_5o=r($gt,"ElectraForPreTraining"),$gt.forEach(t),u5o=r(hxe," (ELECTRA model)"),hxe.forEach(t),b5o=i(O),Wu=n(O,"LI",{});var pxe=s(Wu);pfe=n(pxe,"STRONG",{});var kgt=s(pfe);v5o=r(kgt,"flaubert"),kgt.forEach(t),F5o=r(pxe," \u2014 "),MD=n(pxe,"A",{href:!0});var Sgt=s(MD);T5o=r(Sgt,"FlaubertWithLMHeadModel"),Sgt.forEach(t),M5o=r(pxe," (FlauBERT model)"),pxe.forEach(t),E5o=i(O),Qu=n(O,"LI",{});var _xe=s(Qu);_fe=n(_xe,"STRONG",{});var Rgt=s(_fe);C5o=r(Rgt,"flava"),Rgt.forEach(t),w5o=r(_xe," \u2014 "),ED=n(_xe,"A",{href:!0});var Pgt=s(ED);A5o=r(Pgt,"FlavaForPreTraining"),Pgt.forEach(t),L5o=r(_xe," (FLAVA model)"),_xe.forEach(t),y5o=i(O),Hu=n(O,"LI",{});var uxe=s(Hu);ufe=n(uxe,"STRONG",{});var Bgt=s(ufe);x5o=r(Bgt,"fnet"),Bgt.forEach(t),$5o=r(uxe," \u2014 "),CD=n(uxe,"A",{href:!0});var Igt=s(CD);k5o=r(Igt,"FNetForPreTraining"),Igt.forEach(t),S5o=r(uxe," (FNet model)"),uxe.forEach(t),R5o=i(O),Uu=n(O,"LI",{});var bxe=s(Uu);bfe=n(bxe,"STRONG",{});var Ngt=s(bfe);P5o=r(Ngt,"fsmt"),Ngt.forEach(t),B5o=r(bxe," \u2014 "),wD=n(bxe,"A",{href:!0});var qgt=s(wD);I5o=r(qgt,"FSMTForConditionalGeneration"),qgt.forEach(t),N5o=r(bxe," (FairSeq Machine-Translation model)"),bxe.forEach(t),q5o=i(O),Ju=n(O,"LI",{});var vxe=s(Ju);vfe=n(vxe,"STRONG",{});var jgt=s(vfe);j5o=r(jgt,"funnel"),jgt.forEach(t),D5o=r(vxe," \u2014 "),AD=n(vxe,"A",{href:!0});var Dgt=s(AD);G5o=r(Dgt,"FunnelForPreTraining"),Dgt.forEach(t),O5o=r(vxe," (Funnel Transformer model)"),vxe.forEach(t),V5o=i(O),Yu=n(O,"LI",{});var Fxe=s(Yu);Ffe=n(Fxe,"STRONG",{});var Ggt=s(Ffe);X5o=r(Ggt,"gpt2"),Ggt.forEach(t),z5o=r(Fxe," \u2014 "),LD=n(Fxe,"A",{href:!0});var Ogt=s(LD);W5o=r(Ogt,"GPT2LMHeadModel"),Ogt.forEach(t),Q5o=r(Fxe," (OpenAI GPT-2 model)"),Fxe.forEach(t),H5o=i(O),Ku=n(O,"LI",{});var Txe=s(Ku);Tfe=n(Txe,"STRONG",{});var Vgt=s(Tfe);U5o=r(Vgt,"ibert"),Vgt.forEach(t),J5o=r(Txe," \u2014 "),yD=n(Txe,"A",{href:!0});var Xgt=s(yD);Y5o=r(Xgt,"IBertForMaskedLM"),Xgt.forEach(t),K5o=r(Txe," (I-BERT model)"),Txe.forEach(t),Z5o=i(O),Zu=n(O,"LI",{});var Mxe=s(Zu);Mfe=n(Mxe,"STRONG",{});var zgt=s(Mfe);e3o=r(zgt,"layoutlm"),zgt.forEach(t),o3o=r(Mxe," \u2014 "),xD=n(Mxe,"A",{href:!0});var Wgt=s(xD);r3o=r(Wgt,"LayoutLMForMaskedLM"),Wgt.forEach(t),t3o=r(Mxe," (LayoutLM model)"),Mxe.forEach(t),a3o=i(O),e1=n(O,"LI",{});var Exe=s(e1);Efe=n(Exe,"STRONG",{});var Qgt=s(Efe);n3o=r(Qgt,"longformer"),Qgt.forEach(t),s3o=r(Exe," \u2014 "),$D=n(Exe,"A",{href:!0});var Hgt=s($D);l3o=r(Hgt,"LongformerForMaskedLM"),Hgt.forEach(t),i3o=r(Exe," (Longformer model)"),Exe.forEach(t),d3o=i(O),o1=n(O,"LI",{});var Cxe=s(o1);Cfe=n(Cxe,"STRONG",{});var Ugt=s(Cfe);c3o=r(Ugt,"lxmert"),Ugt.forEach(t),f3o=r(Cxe," \u2014 "),kD=n(Cxe,"A",{href:!0});var Jgt=s(kD);m3o=r(Jgt,"LxmertForPreTraining"),Jgt.forEach(t),g3o=r(Cxe," (LXMERT model)"),Cxe.forEach(t),h3o=i(O),r1=n(O,"LI",{});var wxe=s(r1);wfe=n(wxe,"STRONG",{});var Ygt=s(wfe);p3o=r(Ygt,"megatron-bert"),Ygt.forEach(t),_3o=r(wxe," \u2014 "),SD=n(wxe,"A",{href:!0});var Kgt=s(SD);u3o=r(Kgt,"MegatronBertForPreTraining"),Kgt.forEach(t),b3o=r(wxe," (Megatron-BERT model)"),wxe.forEach(t),v3o=i(O),t1=n(O,"LI",{});var Axe=s(t1);Afe=n(Axe,"STRONG",{});var Zgt=s(Afe);F3o=r(Zgt,"mobilebert"),Zgt.forEach(t),T3o=r(Axe," \u2014 "),RD=n(Axe,"A",{href:!0});var eht=s(RD);M3o=r(eht,"MobileBertForPreTraining"),eht.forEach(t),E3o=r(Axe," (MobileBERT model)"),Axe.forEach(t),C3o=i(O),a1=n(O,"LI",{});var Lxe=s(a1);Lfe=n(Lxe,"STRONG",{});var oht=s(Lfe);w3o=r(oht,"mpnet"),oht.forEach(t),A3o=r(Lxe," \u2014 "),PD=n(Lxe,"A",{href:!0});var rht=s(PD);L3o=r(rht,"MPNetForMaskedLM"),rht.forEach(t),y3o=r(Lxe," (MPNet model)"),Lxe.forEach(t),x3o=i(O),n1=n(O,"LI",{});var yxe=s(n1);yfe=n(yxe,"STRONG",{});var tht=s(yfe);$3o=r(tht,"nezha"),tht.forEach(t),k3o=r(yxe," \u2014 "),BD=n(yxe,"A",{href:!0});var aht=s(BD);S3o=r(aht,"NezhaForPreTraining"),aht.forEach(t),R3o=r(yxe," (Nezha model)"),yxe.forEach(t),P3o=i(O),s1=n(O,"LI",{});var xxe=s(s1);xfe=n(xxe,"STRONG",{});var nht=s(xfe);B3o=r(nht,"openai-gpt"),nht.forEach(t),I3o=r(xxe," \u2014 "),ID=n(xxe,"A",{href:!0});var sht=s(ID);N3o=r(sht,"OpenAIGPTLMHeadModel"),sht.forEach(t),q3o=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),j3o=i(O),l1=n(O,"LI",{});var $xe=s(l1);$fe=n($xe,"STRONG",{});var lht=s($fe);D3o=r(lht,"retribert"),lht.forEach(t),G3o=r($xe," \u2014 "),ND=n($xe,"A",{href:!0});var iht=s(ND);O3o=r(iht,"RetriBertModel"),iht.forEach(t),V3o=r($xe," (RetriBERT model)"),$xe.forEach(t),X3o=i(O),i1=n(O,"LI",{});var kxe=s(i1);kfe=n(kxe,"STRONG",{});var dht=s(kfe);z3o=r(dht,"roberta"),dht.forEach(t),W3o=r(kxe," \u2014 "),qD=n(kxe,"A",{href:!0});var cht=s(qD);Q3o=r(cht,"RobertaForMaskedLM"),cht.forEach(t),H3o=r(kxe," (RoBERTa model)"),kxe.forEach(t),U3o=i(O),d1=n(O,"LI",{});var Sxe=s(d1);Sfe=n(Sxe,"STRONG",{});var fht=s(Sfe);J3o=r(fht,"splinter"),fht.forEach(t),Y3o=r(Sxe," \u2014 "),jD=n(Sxe,"A",{href:!0});var mht=s(jD);K3o=r(mht,"SplinterForPreTraining"),mht.forEach(t),Z3o=r(Sxe," (Splinter model)"),Sxe.forEach(t),ewo=i(O),c1=n(O,"LI",{});var Rxe=s(c1);Rfe=n(Rxe,"STRONG",{});var ght=s(Rfe);owo=r(ght,"squeezebert"),ght.forEach(t),rwo=r(Rxe," \u2014 "),DD=n(Rxe,"A",{href:!0});var hht=s(DD);two=r(hht,"SqueezeBertForMaskedLM"),hht.forEach(t),awo=r(Rxe," (SqueezeBERT model)"),Rxe.forEach(t),nwo=i(O),f1=n(O,"LI",{});var Pxe=s(f1);Pfe=n(Pxe,"STRONG",{});var pht=s(Pfe);swo=r(pht,"t5"),pht.forEach(t),lwo=r(Pxe," \u2014 "),GD=n(Pxe,"A",{href:!0});var _ht=s(GD);iwo=r(_ht,"T5ForConditionalGeneration"),_ht.forEach(t),dwo=r(Pxe," (T5 model)"),Pxe.forEach(t),cwo=i(O),m1=n(O,"LI",{});var Bxe=s(m1);Bfe=n(Bxe,"STRONG",{});var uht=s(Bfe);fwo=r(uht,"tapas"),uht.forEach(t),mwo=r(Bxe," \u2014 "),OD=n(Bxe,"A",{href:!0});var bht=s(OD);gwo=r(bht,"TapasForMaskedLM"),bht.forEach(t),hwo=r(Bxe," (TAPAS model)"),Bxe.forEach(t),pwo=i(O),g1=n(O,"LI",{});var Ixe=s(g1);Ife=n(Ixe,"STRONG",{});var vht=s(Ife);_wo=r(vht,"transfo-xl"),vht.forEach(t),uwo=r(Ixe," \u2014 "),VD=n(Ixe,"A",{href:!0});var Fht=s(VD);bwo=r(Fht,"TransfoXLLMHeadModel"),Fht.forEach(t),vwo=r(Ixe," (Transformer-XL model)"),Ixe.forEach(t),Fwo=i(O),h1=n(O,"LI",{});var Nxe=s(h1);Nfe=n(Nxe,"STRONG",{});var Tht=s(Nfe);Two=r(Tht,"unispeech"),Tht.forEach(t),Mwo=r(Nxe," \u2014 "),XD=n(Nxe,"A",{href:!0});var Mht=s(XD);Ewo=r(Mht,"UniSpeechForPreTraining"),Mht.forEach(t),Cwo=r(Nxe," (UniSpeech model)"),Nxe.forEach(t),wwo=i(O),p1=n(O,"LI",{});var qxe=s(p1);qfe=n(qxe,"STRONG",{});var Eht=s(qfe);Awo=r(Eht,"unispeech-sat"),Eht.forEach(t),Lwo=r(qxe," \u2014 "),zD=n(qxe,"A",{href:!0});var Cht=s(zD);ywo=r(Cht,"UniSpeechSatForPreTraining"),Cht.forEach(t),xwo=r(qxe," (UniSpeechSat model)"),qxe.forEach(t),$wo=i(O),_1=n(O,"LI",{});var jxe=s(_1);jfe=n(jxe,"STRONG",{});var wht=s(jfe);kwo=r(wht,"visual_bert"),wht.forEach(t),Swo=r(jxe," \u2014 "),WD=n(jxe,"A",{href:!0});var Aht=s(WD);Rwo=r(Aht,"VisualBertForPreTraining"),Aht.forEach(t),Pwo=r(jxe," (VisualBERT model)"),jxe.forEach(t),Bwo=i(O),u1=n(O,"LI",{});var Dxe=s(u1);Dfe=n(Dxe,"STRONG",{});var Lht=s(Dfe);Iwo=r(Lht,"vit_mae"),Lht.forEach(t),Nwo=r(Dxe," \u2014 "),QD=n(Dxe,"A",{href:!0});var yht=s(QD);qwo=r(yht,"ViTMAEForPreTraining"),yht.forEach(t),jwo=r(Dxe," (ViTMAE model)"),Dxe.forEach(t),Dwo=i(O),b1=n(O,"LI",{});var Gxe=s(b1);Gfe=n(Gxe,"STRONG",{});var xht=s(Gfe);Gwo=r(xht,"wav2vec2"),xht.forEach(t),Owo=r(Gxe," \u2014 "),HD=n(Gxe,"A",{href:!0});var $ht=s(HD);Vwo=r($ht,"Wav2Vec2ForPreTraining"),$ht.forEach(t),Xwo=r(Gxe," (Wav2Vec2 model)"),Gxe.forEach(t),zwo=i(O),v1=n(O,"LI",{});var Oxe=s(v1);Ofe=n(Oxe,"STRONG",{});var kht=s(Ofe);Wwo=r(kht,"wav2vec2-conformer"),kht.forEach(t),Qwo=r(Oxe," \u2014 "),UD=n(Oxe,"A",{href:!0});var Sht=s(UD);Hwo=r(Sht,"Wav2Vec2ConformerForPreTraining"),Sht.forEach(t),Uwo=r(Oxe," (Wav2Vec2-Conformer model)"),Oxe.forEach(t),Jwo=i(O),F1=n(O,"LI",{});var Vxe=s(F1);Vfe=n(Vxe,"STRONG",{});var Rht=s(Vfe);Ywo=r(Rht,"xlm"),Rht.forEach(t),Kwo=r(Vxe," \u2014 "),JD=n(Vxe,"A",{href:!0});var Pht=s(JD);Zwo=r(Pht,"XLMWithLMHeadModel"),Pht.forEach(t),eAo=r(Vxe," (XLM model)"),Vxe.forEach(t),oAo=i(O),T1=n(O,"LI",{});var Xxe=s(T1);Xfe=n(Xxe,"STRONG",{});var Bht=s(Xfe);rAo=r(Bht,"xlm-roberta"),Bht.forEach(t),tAo=r(Xxe," \u2014 "),YD=n(Xxe,"A",{href:!0});var Iht=s(YD);aAo=r(Iht,"XLMRobertaForMaskedLM"),Iht.forEach(t),nAo=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),sAo=i(O),M1=n(O,"LI",{});var zxe=s(M1);zfe=n(zxe,"STRONG",{});var Nht=s(zfe);lAo=r(Nht,"xlm-roberta-xl"),Nht.forEach(t),iAo=r(zxe," \u2014 "),KD=n(zxe,"A",{href:!0});var qht=s(KD);dAo=r(qht,"XLMRobertaXLForMaskedLM"),qht.forEach(t),cAo=r(zxe," (XLM-RoBERTa-XL model)"),zxe.forEach(t),fAo=i(O),E1=n(O,"LI",{});var Wxe=s(E1);Wfe=n(Wxe,"STRONG",{});var jht=s(Wfe);mAo=r(jht,"xlnet"),jht.forEach(t),gAo=r(Wxe," \u2014 "),ZD=n(Wxe,"A",{href:!0});var Dht=s(ZD);hAo=r(Dht,"XLNetLMHeadModel"),Dht.forEach(t),pAo=r(Wxe," (XLNet model)"),Wxe.forEach(t),O.forEach(t),_Ao=i(sa),C1=n(sa,"P",{});var Qxe=s(C1);uAo=r(Qxe,"The model is set in evaluation mode by default using "),Qfe=n(Qxe,"CODE",{});var Ght=s(Qfe);bAo=r(Ght,"model.eval()"),Ght.forEach(t),vAo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=n(Qxe,"CODE",{});var Oht=s(Hfe);FAo=r(Oht,"model.train()"),Oht.forEach(t),Qxe.forEach(t),TAo=i(sa),T(w1.$$.fragment,sa),sa.forEach(t),Zs.forEach(t),fOe=i(f),Vi=n(f,"H2",{class:!0});var uXe=s(Vi);A1=n(uXe,"A",{id:!0,class:!0,href:!0});var Vht=s(A1);Ufe=n(Vht,"SPAN",{});var Xht=s(Ufe);T(gL.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),MAo=i(uXe),Jfe=n(uXe,"SPAN",{});var zht=s(Jfe);EAo=r(zht,"AutoModelForCausalLM"),zht.forEach(t),uXe.forEach(t),mOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(hL.$$.fragment,el),CAo=i(el),Xi=n(el,"P",{});var xoe=s(Xi);wAo=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eG=n(xoe,"A",{href:!0});var Wht=s(eG);AAo=r(Wht,"from_pretrained()"),Wht.forEach(t),LAo=r(xoe," class method or the "),oG=n(xoe,"A",{href:!0});var Qht=s(oG);yAo=r(Qht,"from_config()"),Qht.forEach(t),xAo=r(xoe,` class
method.`),xoe.forEach(t),$Ao=i(el),pL=n(el,"P",{});var bXe=s(pL);kAo=r(bXe,"This class cannot be instantiated directly using "),Yfe=n(bXe,"CODE",{});var Hht=s(Yfe);SAo=r(Hht,"__init__()"),Hht.forEach(t),RAo=r(bXe," (throws an error)."),bXe.forEach(t),PAo=i(el),it=n(el,"DIV",{class:!0});var q3=s(it);T(_L.$$.fragment,q3),BAo=i(q3),Kfe=n(q3,"P",{});var Uht=s(Kfe);IAo=r(Uht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Uht.forEach(t),NAo=i(q3),zi=n(q3,"P",{});var $oe=s(zi);qAo=r($oe,`Note:
Loading a model from its configuration file does `),Zfe=n($oe,"STRONG",{});var Jht=s(Zfe);jAo=r(Jht,"not"),Jht.forEach(t),DAo=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n($oe,"A",{href:!0});var Yht=s(rG);GAo=r(Yht,"from_pretrained()"),Yht.forEach(t),OAo=r($oe," to load the model weights."),$oe.forEach(t),VAo=i(q3),T(L1.$$.fragment,q3),q3.forEach(t),XAo=i(el),Ke=n(el,"DIV",{class:!0});var la=s(Ke);T(uL.$$.fragment,la),zAo=i(la),eme=n(la,"P",{});var Kht=s(eme);WAo=r(Kht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kht.forEach(t),QAo=i(la),Ia=n(la,"P",{});var j3=s(Ia);HAo=r(j3,"The model class to instantiate is selected based on the "),ome=n(j3,"CODE",{});var Zht=s(ome);UAo=r(Zht,"model_type"),Zht.forEach(t),JAo=r(j3,` property of the config object (either
passed as an argument or loaded from `),rme=n(j3,"CODE",{});var ept=s(rme);YAo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),KAo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(j3,"CODE",{});var opt=s(tme);ZAo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),eLo=r(j3,":"),j3.forEach(t),oLo=i(la),z=n(la,"UL",{});var Q=s(z);y1=n(Q,"LI",{});var Hxe=s(y1);ame=n(Hxe,"STRONG",{});var rpt=s(ame);rLo=r(rpt,"bart"),rpt.forEach(t),tLo=r(Hxe," \u2014 "),tG=n(Hxe,"A",{href:!0});var tpt=s(tG);aLo=r(tpt,"BartForCausalLM"),tpt.forEach(t),nLo=r(Hxe," (BART model)"),Hxe.forEach(t),sLo=i(Q),x1=n(Q,"LI",{});var Uxe=s(x1);nme=n(Uxe,"STRONG",{});var apt=s(nme);lLo=r(apt,"bert"),apt.forEach(t),iLo=r(Uxe," \u2014 "),aG=n(Uxe,"A",{href:!0});var npt=s(aG);dLo=r(npt,"BertLMHeadModel"),npt.forEach(t),cLo=r(Uxe," (BERT model)"),Uxe.forEach(t),fLo=i(Q),$1=n(Q,"LI",{});var Jxe=s($1);sme=n(Jxe,"STRONG",{});var spt=s(sme);mLo=r(spt,"bert-generation"),spt.forEach(t),gLo=r(Jxe," \u2014 "),nG=n(Jxe,"A",{href:!0});var lpt=s(nG);hLo=r(lpt,"BertGenerationDecoder"),lpt.forEach(t),pLo=r(Jxe," (Bert Generation model)"),Jxe.forEach(t),_Lo=i(Q),k1=n(Q,"LI",{});var Yxe=s(k1);lme=n(Yxe,"STRONG",{});var ipt=s(lme);uLo=r(ipt,"big_bird"),ipt.forEach(t),bLo=r(Yxe," \u2014 "),sG=n(Yxe,"A",{href:!0});var dpt=s(sG);vLo=r(dpt,"BigBirdForCausalLM"),dpt.forEach(t),FLo=r(Yxe," (BigBird model)"),Yxe.forEach(t),TLo=i(Q),S1=n(Q,"LI",{});var Kxe=s(S1);ime=n(Kxe,"STRONG",{});var cpt=s(ime);MLo=r(cpt,"bigbird_pegasus"),cpt.forEach(t),ELo=r(Kxe," \u2014 "),lG=n(Kxe,"A",{href:!0});var fpt=s(lG);CLo=r(fpt,"BigBirdPegasusForCausalLM"),fpt.forEach(t),wLo=r(Kxe," (BigBird-Pegasus model)"),Kxe.forEach(t),ALo=i(Q),R1=n(Q,"LI",{});var Zxe=s(R1);dme=n(Zxe,"STRONG",{});var mpt=s(dme);LLo=r(mpt,"blenderbot"),mpt.forEach(t),yLo=r(Zxe," \u2014 "),iG=n(Zxe,"A",{href:!0});var gpt=s(iG);xLo=r(gpt,"BlenderbotForCausalLM"),gpt.forEach(t),$Lo=r(Zxe," (Blenderbot model)"),Zxe.forEach(t),kLo=i(Q),P1=n(Q,"LI",{});var e$e=s(P1);cme=n(e$e,"STRONG",{});var hpt=s(cme);SLo=r(hpt,"blenderbot-small"),hpt.forEach(t),RLo=r(e$e," \u2014 "),dG=n(e$e,"A",{href:!0});var ppt=s(dG);PLo=r(ppt,"BlenderbotSmallForCausalLM"),ppt.forEach(t),BLo=r(e$e," (BlenderbotSmall model)"),e$e.forEach(t),ILo=i(Q),B1=n(Q,"LI",{});var o$e=s(B1);fme=n(o$e,"STRONG",{});var _pt=s(fme);NLo=r(_pt,"bloom"),_pt.forEach(t),qLo=r(o$e," \u2014 "),cG=n(o$e,"A",{href:!0});var upt=s(cG);jLo=r(upt,"BloomForCausalLM"),upt.forEach(t),DLo=r(o$e," (BLOOM model)"),o$e.forEach(t),GLo=i(Q),I1=n(Q,"LI",{});var r$e=s(I1);mme=n(r$e,"STRONG",{});var bpt=s(mme);OLo=r(bpt,"camembert"),bpt.forEach(t),VLo=r(r$e," \u2014 "),fG=n(r$e,"A",{href:!0});var vpt=s(fG);XLo=r(vpt,"CamembertForCausalLM"),vpt.forEach(t),zLo=r(r$e," (CamemBERT model)"),r$e.forEach(t),WLo=i(Q),N1=n(Q,"LI",{});var t$e=s(N1);gme=n(t$e,"STRONG",{});var Fpt=s(gme);QLo=r(Fpt,"ctrl"),Fpt.forEach(t),HLo=r(t$e," \u2014 "),mG=n(t$e,"A",{href:!0});var Tpt=s(mG);ULo=r(Tpt,"CTRLLMHeadModel"),Tpt.forEach(t),JLo=r(t$e," (CTRL model)"),t$e.forEach(t),YLo=i(Q),q1=n(Q,"LI",{});var a$e=s(q1);hme=n(a$e,"STRONG",{});var Mpt=s(hme);KLo=r(Mpt,"data2vec-text"),Mpt.forEach(t),ZLo=r(a$e," \u2014 "),gG=n(a$e,"A",{href:!0});var Ept=s(gG);eyo=r(Ept,"Data2VecTextForCausalLM"),Ept.forEach(t),oyo=r(a$e," (Data2VecText model)"),a$e.forEach(t),ryo=i(Q),j1=n(Q,"LI",{});var n$e=s(j1);pme=n(n$e,"STRONG",{});var Cpt=s(pme);tyo=r(Cpt,"electra"),Cpt.forEach(t),ayo=r(n$e," \u2014 "),hG=n(n$e,"A",{href:!0});var wpt=s(hG);nyo=r(wpt,"ElectraForCausalLM"),wpt.forEach(t),syo=r(n$e," (ELECTRA model)"),n$e.forEach(t),lyo=i(Q),D1=n(Q,"LI",{});var s$e=s(D1);_me=n(s$e,"STRONG",{});var Apt=s(_me);iyo=r(Apt,"gpt2"),Apt.forEach(t),dyo=r(s$e," \u2014 "),pG=n(s$e,"A",{href:!0});var Lpt=s(pG);cyo=r(Lpt,"GPT2LMHeadModel"),Lpt.forEach(t),fyo=r(s$e," (OpenAI GPT-2 model)"),s$e.forEach(t),myo=i(Q),G1=n(Q,"LI",{});var l$e=s(G1);ume=n(l$e,"STRONG",{});var ypt=s(ume);gyo=r(ypt,"gpt_neo"),ypt.forEach(t),hyo=r(l$e," \u2014 "),_G=n(l$e,"A",{href:!0});var xpt=s(_G);pyo=r(xpt,"GPTNeoForCausalLM"),xpt.forEach(t),_yo=r(l$e," (GPT Neo model)"),l$e.forEach(t),uyo=i(Q),O1=n(Q,"LI",{});var i$e=s(O1);bme=n(i$e,"STRONG",{});var $pt=s(bme);byo=r($pt,"gpt_neox"),$pt.forEach(t),vyo=r(i$e," \u2014 "),uG=n(i$e,"A",{href:!0});var kpt=s(uG);Fyo=r(kpt,"GPTNeoXForCausalLM"),kpt.forEach(t),Tyo=r(i$e," (GPT NeoX model)"),i$e.forEach(t),Myo=i(Q),V1=n(Q,"LI",{});var d$e=s(V1);vme=n(d$e,"STRONG",{});var Spt=s(vme);Eyo=r(Spt,"gptj"),Spt.forEach(t),Cyo=r(d$e," \u2014 "),bG=n(d$e,"A",{href:!0});var Rpt=s(bG);wyo=r(Rpt,"GPTJForCausalLM"),Rpt.forEach(t),Ayo=r(d$e," (GPT-J model)"),d$e.forEach(t),Lyo=i(Q),X1=n(Q,"LI",{});var c$e=s(X1);Fme=n(c$e,"STRONG",{});var Ppt=s(Fme);yyo=r(Ppt,"marian"),Ppt.forEach(t),xyo=r(c$e," \u2014 "),vG=n(c$e,"A",{href:!0});var Bpt=s(vG);$yo=r(Bpt,"MarianForCausalLM"),Bpt.forEach(t),kyo=r(c$e," (Marian model)"),c$e.forEach(t),Syo=i(Q),z1=n(Q,"LI",{});var f$e=s(z1);Tme=n(f$e,"STRONG",{});var Ipt=s(Tme);Ryo=r(Ipt,"mbart"),Ipt.forEach(t),Pyo=r(f$e," \u2014 "),FG=n(f$e,"A",{href:!0});var Npt=s(FG);Byo=r(Npt,"MBartForCausalLM"),Npt.forEach(t),Iyo=r(f$e," (mBART model)"),f$e.forEach(t),Nyo=i(Q),W1=n(Q,"LI",{});var m$e=s(W1);Mme=n(m$e,"STRONG",{});var qpt=s(Mme);qyo=r(qpt,"megatron-bert"),qpt.forEach(t),jyo=r(m$e," \u2014 "),TG=n(m$e,"A",{href:!0});var jpt=s(TG);Dyo=r(jpt,"MegatronBertForCausalLM"),jpt.forEach(t),Gyo=r(m$e," (Megatron-BERT model)"),m$e.forEach(t),Oyo=i(Q),Q1=n(Q,"LI",{});var g$e=s(Q1);Eme=n(g$e,"STRONG",{});var Dpt=s(Eme);Vyo=r(Dpt,"openai-gpt"),Dpt.forEach(t),Xyo=r(g$e," \u2014 "),MG=n(g$e,"A",{href:!0});var Gpt=s(MG);zyo=r(Gpt,"OpenAIGPTLMHeadModel"),Gpt.forEach(t),Wyo=r(g$e," (OpenAI GPT model)"),g$e.forEach(t),Qyo=i(Q),H1=n(Q,"LI",{});var h$e=s(H1);Cme=n(h$e,"STRONG",{});var Opt=s(Cme);Hyo=r(Opt,"opt"),Opt.forEach(t),Uyo=r(h$e," \u2014 "),EG=n(h$e,"A",{href:!0});var Vpt=s(EG);Jyo=r(Vpt,"OPTForCausalLM"),Vpt.forEach(t),Yyo=r(h$e," (OPT model)"),h$e.forEach(t),Kyo=i(Q),U1=n(Q,"LI",{});var p$e=s(U1);wme=n(p$e,"STRONG",{});var Xpt=s(wme);Zyo=r(Xpt,"pegasus"),Xpt.forEach(t),e9o=r(p$e," \u2014 "),CG=n(p$e,"A",{href:!0});var zpt=s(CG);o9o=r(zpt,"PegasusForCausalLM"),zpt.forEach(t),r9o=r(p$e," (Pegasus model)"),p$e.forEach(t),t9o=i(Q),J1=n(Q,"LI",{});var _$e=s(J1);Ame=n(_$e,"STRONG",{});var Wpt=s(Ame);a9o=r(Wpt,"plbart"),Wpt.forEach(t),n9o=r(_$e," \u2014 "),wG=n(_$e,"A",{href:!0});var Qpt=s(wG);s9o=r(Qpt,"PLBartForCausalLM"),Qpt.forEach(t),l9o=r(_$e," (PLBart model)"),_$e.forEach(t),i9o=i(Q),Y1=n(Q,"LI",{});var u$e=s(Y1);Lme=n(u$e,"STRONG",{});var Hpt=s(Lme);d9o=r(Hpt,"prophetnet"),Hpt.forEach(t),c9o=r(u$e," \u2014 "),AG=n(u$e,"A",{href:!0});var Upt=s(AG);f9o=r(Upt,"ProphetNetForCausalLM"),Upt.forEach(t),m9o=r(u$e," (ProphetNet model)"),u$e.forEach(t),g9o=i(Q),K1=n(Q,"LI",{});var b$e=s(K1);yme=n(b$e,"STRONG",{});var Jpt=s(yme);h9o=r(Jpt,"qdqbert"),Jpt.forEach(t),p9o=r(b$e," \u2014 "),LG=n(b$e,"A",{href:!0});var Ypt=s(LG);_9o=r(Ypt,"QDQBertLMHeadModel"),Ypt.forEach(t),u9o=r(b$e," (QDQBert model)"),b$e.forEach(t),b9o=i(Q),Z1=n(Q,"LI",{});var v$e=s(Z1);xme=n(v$e,"STRONG",{});var Kpt=s(xme);v9o=r(Kpt,"reformer"),Kpt.forEach(t),F9o=r(v$e," \u2014 "),yG=n(v$e,"A",{href:!0});var Zpt=s(yG);T9o=r(Zpt,"ReformerModelWithLMHead"),Zpt.forEach(t),M9o=r(v$e," (Reformer model)"),v$e.forEach(t),E9o=i(Q),e2=n(Q,"LI",{});var F$e=s(e2);$me=n(F$e,"STRONG",{});var e_t=s($me);C9o=r(e_t,"rembert"),e_t.forEach(t),w9o=r(F$e," \u2014 "),xG=n(F$e,"A",{href:!0});var o_t=s(xG);A9o=r(o_t,"RemBertForCausalLM"),o_t.forEach(t),L9o=r(F$e," (RemBERT model)"),F$e.forEach(t),y9o=i(Q),o2=n(Q,"LI",{});var T$e=s(o2);kme=n(T$e,"STRONG",{});var r_t=s(kme);x9o=r(r_t,"roberta"),r_t.forEach(t),$9o=r(T$e," \u2014 "),$G=n(T$e,"A",{href:!0});var t_t=s($G);k9o=r(t_t,"RobertaForCausalLM"),t_t.forEach(t),S9o=r(T$e," (RoBERTa model)"),T$e.forEach(t),R9o=i(Q),r2=n(Q,"LI",{});var M$e=s(r2);Sme=n(M$e,"STRONG",{});var a_t=s(Sme);P9o=r(a_t,"roformer"),a_t.forEach(t),B9o=r(M$e," \u2014 "),kG=n(M$e,"A",{href:!0});var n_t=s(kG);I9o=r(n_t,"RoFormerForCausalLM"),n_t.forEach(t),N9o=r(M$e," (RoFormer model)"),M$e.forEach(t),q9o=i(Q),t2=n(Q,"LI",{});var E$e=s(t2);Rme=n(E$e,"STRONG",{});var s_t=s(Rme);j9o=r(s_t,"speech_to_text_2"),s_t.forEach(t),D9o=r(E$e," \u2014 "),SG=n(E$e,"A",{href:!0});var l_t=s(SG);G9o=r(l_t,"Speech2Text2ForCausalLM"),l_t.forEach(t),O9o=r(E$e," (Speech2Text2 model)"),E$e.forEach(t),V9o=i(Q),a2=n(Q,"LI",{});var C$e=s(a2);Pme=n(C$e,"STRONG",{});var i_t=s(Pme);X9o=r(i_t,"transfo-xl"),i_t.forEach(t),z9o=r(C$e," \u2014 "),RG=n(C$e,"A",{href:!0});var d_t=s(RG);W9o=r(d_t,"TransfoXLLMHeadModel"),d_t.forEach(t),Q9o=r(C$e," (Transformer-XL model)"),C$e.forEach(t),H9o=i(Q),n2=n(Q,"LI",{});var w$e=s(n2);Bme=n(w$e,"STRONG",{});var c_t=s(Bme);U9o=r(c_t,"trocr"),c_t.forEach(t),J9o=r(w$e," \u2014 "),PG=n(w$e,"A",{href:!0});var f_t=s(PG);Y9o=r(f_t,"TrOCRForCausalLM"),f_t.forEach(t),K9o=r(w$e," (TrOCR model)"),w$e.forEach(t),Z9o=i(Q),s2=n(Q,"LI",{});var A$e=s(s2);Ime=n(A$e,"STRONG",{});var m_t=s(Ime);exo=r(m_t,"xglm"),m_t.forEach(t),oxo=r(A$e," \u2014 "),BG=n(A$e,"A",{href:!0});var g_t=s(BG);rxo=r(g_t,"XGLMForCausalLM"),g_t.forEach(t),txo=r(A$e," (XGLM model)"),A$e.forEach(t),axo=i(Q),l2=n(Q,"LI",{});var L$e=s(l2);Nme=n(L$e,"STRONG",{});var h_t=s(Nme);nxo=r(h_t,"xlm"),h_t.forEach(t),sxo=r(L$e," \u2014 "),IG=n(L$e,"A",{href:!0});var p_t=s(IG);lxo=r(p_t,"XLMWithLMHeadModel"),p_t.forEach(t),ixo=r(L$e," (XLM model)"),L$e.forEach(t),dxo=i(Q),i2=n(Q,"LI",{});var y$e=s(i2);qme=n(y$e,"STRONG",{});var __t=s(qme);cxo=r(__t,"xlm-prophetnet"),__t.forEach(t),fxo=r(y$e," \u2014 "),NG=n(y$e,"A",{href:!0});var u_t=s(NG);mxo=r(u_t,"XLMProphetNetForCausalLM"),u_t.forEach(t),gxo=r(y$e," (XLM-ProphetNet model)"),y$e.forEach(t),hxo=i(Q),d2=n(Q,"LI",{});var x$e=s(d2);jme=n(x$e,"STRONG",{});var b_t=s(jme);pxo=r(b_t,"xlm-roberta"),b_t.forEach(t),_xo=r(x$e," \u2014 "),qG=n(x$e,"A",{href:!0});var v_t=s(qG);uxo=r(v_t,"XLMRobertaForCausalLM"),v_t.forEach(t),bxo=r(x$e," (XLM-RoBERTa model)"),x$e.forEach(t),vxo=i(Q),c2=n(Q,"LI",{});var $$e=s(c2);Dme=n($$e,"STRONG",{});var F_t=s(Dme);Fxo=r(F_t,"xlm-roberta-xl"),F_t.forEach(t),Txo=r($$e," \u2014 "),jG=n($$e,"A",{href:!0});var T_t=s(jG);Mxo=r(T_t,"XLMRobertaXLForCausalLM"),T_t.forEach(t),Exo=r($$e," (XLM-RoBERTa-XL model)"),$$e.forEach(t),Cxo=i(Q),f2=n(Q,"LI",{});var k$e=s(f2);Gme=n(k$e,"STRONG",{});var M_t=s(Gme);wxo=r(M_t,"xlnet"),M_t.forEach(t),Axo=r(k$e," \u2014 "),DG=n(k$e,"A",{href:!0});var E_t=s(DG);Lxo=r(E_t,"XLNetLMHeadModel"),E_t.forEach(t),yxo=r(k$e," (XLNet model)"),k$e.forEach(t),Q.forEach(t),xxo=i(la),m2=n(la,"P",{});var S$e=s(m2);$xo=r(S$e,"The model is set in evaluation mode by default using "),Ome=n(S$e,"CODE",{});var C_t=s(Ome);kxo=r(C_t,"model.eval()"),C_t.forEach(t),Sxo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(S$e,"CODE",{});var w_t=s(Vme);Rxo=r(w_t,"model.train()"),w_t.forEach(t),S$e.forEach(t),Pxo=i(la),T(g2.$$.fragment,la),la.forEach(t),el.forEach(t),gOe=i(f),Wi=n(f,"H2",{class:!0});var vXe=s(Wi);h2=n(vXe,"A",{id:!0,class:!0,href:!0});var A_t=s(h2);Xme=n(A_t,"SPAN",{});var L_t=s(Xme);T(bL.$$.fragment,L_t),L_t.forEach(t),A_t.forEach(t),Bxo=i(vXe),zme=n(vXe,"SPAN",{});var y_t=s(zme);Ixo=r(y_t,"AutoModelForMaskedLM"),y_t.forEach(t),vXe.forEach(t),hOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(vL.$$.fragment,ol),Nxo=i(ol),Qi=n(ol,"P",{});var koe=s(Qi);qxo=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GG=n(koe,"A",{href:!0});var x_t=s(GG);jxo=r(x_t,"from_pretrained()"),x_t.forEach(t),Dxo=r(koe," class method or the "),OG=n(koe,"A",{href:!0});var $_t=s(OG);Gxo=r($_t,"from_config()"),$_t.forEach(t),Oxo=r(koe,` class
method.`),koe.forEach(t),Vxo=i(ol),FL=n(ol,"P",{});var FXe=s(FL);Xxo=r(FXe,"This class cannot be instantiated directly using "),Wme=n(FXe,"CODE",{});var k_t=s(Wme);zxo=r(k_t,"__init__()"),k_t.forEach(t),Wxo=r(FXe," (throws an error)."),FXe.forEach(t),Qxo=i(ol),dt=n(ol,"DIV",{class:!0});var D3=s(dt);T(TL.$$.fragment,D3),Hxo=i(D3),Qme=n(D3,"P",{});var S_t=s(Qme);Uxo=r(S_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S_t.forEach(t),Jxo=i(D3),Hi=n(D3,"P",{});var Soe=s(Hi);Yxo=r(Soe,`Note:
Loading a model from its configuration file does `),Hme=n(Soe,"STRONG",{});var R_t=s(Hme);Kxo=r(R_t,"not"),R_t.forEach(t),Zxo=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(Soe,"A",{href:!0});var P_t=s(VG);e$o=r(P_t,"from_pretrained()"),P_t.forEach(t),o$o=r(Soe," to load the model weights."),Soe.forEach(t),r$o=i(D3),T(p2.$$.fragment,D3),D3.forEach(t),t$o=i(ol),Ze=n(ol,"DIV",{class:!0});var ia=s(Ze);T(ML.$$.fragment,ia),a$o=i(ia),Ume=n(ia,"P",{});var B_t=s(Ume);n$o=r(B_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B_t.forEach(t),s$o=i(ia),Na=n(ia,"P",{});var G3=s(Na);l$o=r(G3,"The model class to instantiate is selected based on the "),Jme=n(G3,"CODE",{});var I_t=s(Jme);i$o=r(I_t,"model_type"),I_t.forEach(t),d$o=r(G3,` property of the config object (either
passed as an argument or loaded from `),Yme=n(G3,"CODE",{});var N_t=s(Yme);c$o=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),f$o=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(G3,"CODE",{});var q_t=s(Kme);m$o=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),g$o=r(G3,":"),G3.forEach(t),h$o=i(ia),W=n(ia,"UL",{});var U=s(W);_2=n(U,"LI",{});var R$e=s(_2);Zme=n(R$e,"STRONG",{});var j_t=s(Zme);p$o=r(j_t,"albert"),j_t.forEach(t),_$o=r(R$e," \u2014 "),XG=n(R$e,"A",{href:!0});var D_t=s(XG);u$o=r(D_t,"AlbertForMaskedLM"),D_t.forEach(t),b$o=r(R$e," (ALBERT model)"),R$e.forEach(t),v$o=i(U),u2=n(U,"LI",{});var P$e=s(u2);ege=n(P$e,"STRONG",{});var G_t=s(ege);F$o=r(G_t,"bart"),G_t.forEach(t),T$o=r(P$e," \u2014 "),zG=n(P$e,"A",{href:!0});var O_t=s(zG);M$o=r(O_t,"BartForConditionalGeneration"),O_t.forEach(t),E$o=r(P$e," (BART model)"),P$e.forEach(t),C$o=i(U),b2=n(U,"LI",{});var B$e=s(b2);oge=n(B$e,"STRONG",{});var V_t=s(oge);w$o=r(V_t,"bert"),V_t.forEach(t),A$o=r(B$e," \u2014 "),WG=n(B$e,"A",{href:!0});var X_t=s(WG);L$o=r(X_t,"BertForMaskedLM"),X_t.forEach(t),y$o=r(B$e," (BERT model)"),B$e.forEach(t),x$o=i(U),v2=n(U,"LI",{});var I$e=s(v2);rge=n(I$e,"STRONG",{});var z_t=s(rge);$$o=r(z_t,"big_bird"),z_t.forEach(t),k$o=r(I$e," \u2014 "),QG=n(I$e,"A",{href:!0});var W_t=s(QG);S$o=r(W_t,"BigBirdForMaskedLM"),W_t.forEach(t),R$o=r(I$e," (BigBird model)"),I$e.forEach(t),P$o=i(U),F2=n(U,"LI",{});var N$e=s(F2);tge=n(N$e,"STRONG",{});var Q_t=s(tge);B$o=r(Q_t,"camembert"),Q_t.forEach(t),I$o=r(N$e," \u2014 "),HG=n(N$e,"A",{href:!0});var H_t=s(HG);N$o=r(H_t,"CamembertForMaskedLM"),H_t.forEach(t),q$o=r(N$e," (CamemBERT model)"),N$e.forEach(t),j$o=i(U),T2=n(U,"LI",{});var q$e=s(T2);age=n(q$e,"STRONG",{});var U_t=s(age);D$o=r(U_t,"convbert"),U_t.forEach(t),G$o=r(q$e," \u2014 "),UG=n(q$e,"A",{href:!0});var J_t=s(UG);O$o=r(J_t,"ConvBertForMaskedLM"),J_t.forEach(t),V$o=r(q$e," (ConvBERT model)"),q$e.forEach(t),X$o=i(U),M2=n(U,"LI",{});var j$e=s(M2);nge=n(j$e,"STRONG",{});var Y_t=s(nge);z$o=r(Y_t,"data2vec-text"),Y_t.forEach(t),W$o=r(j$e," \u2014 "),JG=n(j$e,"A",{href:!0});var K_t=s(JG);Q$o=r(K_t,"Data2VecTextForMaskedLM"),K_t.forEach(t),H$o=r(j$e," (Data2VecText model)"),j$e.forEach(t),U$o=i(U),E2=n(U,"LI",{});var D$e=s(E2);sge=n(D$e,"STRONG",{});var Z_t=s(sge);J$o=r(Z_t,"deberta"),Z_t.forEach(t),Y$o=r(D$e," \u2014 "),YG=n(D$e,"A",{href:!0});var eut=s(YG);K$o=r(eut,"DebertaForMaskedLM"),eut.forEach(t),Z$o=r(D$e," (DeBERTa model)"),D$e.forEach(t),eko=i(U),C2=n(U,"LI",{});var G$e=s(C2);lge=n(G$e,"STRONG",{});var out=s(lge);oko=r(out,"deberta-v2"),out.forEach(t),rko=r(G$e," \u2014 "),KG=n(G$e,"A",{href:!0});var rut=s(KG);tko=r(rut,"DebertaV2ForMaskedLM"),rut.forEach(t),ako=r(G$e," (DeBERTa-v2 model)"),G$e.forEach(t),nko=i(U),w2=n(U,"LI",{});var O$e=s(w2);ige=n(O$e,"STRONG",{});var tut=s(ige);sko=r(tut,"distilbert"),tut.forEach(t),lko=r(O$e," \u2014 "),ZG=n(O$e,"A",{href:!0});var aut=s(ZG);iko=r(aut,"DistilBertForMaskedLM"),aut.forEach(t),dko=r(O$e," (DistilBERT model)"),O$e.forEach(t),cko=i(U),A2=n(U,"LI",{});var V$e=s(A2);dge=n(V$e,"STRONG",{});var nut=s(dge);fko=r(nut,"electra"),nut.forEach(t),mko=r(V$e," \u2014 "),eO=n(V$e,"A",{href:!0});var sut=s(eO);gko=r(sut,"ElectraForMaskedLM"),sut.forEach(t),hko=r(V$e," (ELECTRA model)"),V$e.forEach(t),pko=i(U),L2=n(U,"LI",{});var X$e=s(L2);cge=n(X$e,"STRONG",{});var lut=s(cge);_ko=r(lut,"flaubert"),lut.forEach(t),uko=r(X$e," \u2014 "),oO=n(X$e,"A",{href:!0});var iut=s(oO);bko=r(iut,"FlaubertWithLMHeadModel"),iut.forEach(t),vko=r(X$e," (FlauBERT model)"),X$e.forEach(t),Fko=i(U),y2=n(U,"LI",{});var z$e=s(y2);fge=n(z$e,"STRONG",{});var dut=s(fge);Tko=r(dut,"fnet"),dut.forEach(t),Mko=r(z$e," \u2014 "),rO=n(z$e,"A",{href:!0});var cut=s(rO);Eko=r(cut,"FNetForMaskedLM"),cut.forEach(t),Cko=r(z$e," (FNet model)"),z$e.forEach(t),wko=i(U),x2=n(U,"LI",{});var W$e=s(x2);mge=n(W$e,"STRONG",{});var fut=s(mge);Ako=r(fut,"funnel"),fut.forEach(t),Lko=r(W$e," \u2014 "),tO=n(W$e,"A",{href:!0});var mut=s(tO);yko=r(mut,"FunnelForMaskedLM"),mut.forEach(t),xko=r(W$e," (Funnel Transformer model)"),W$e.forEach(t),$ko=i(U),$2=n(U,"LI",{});var Q$e=s($2);gge=n(Q$e,"STRONG",{});var gut=s(gge);kko=r(gut,"ibert"),gut.forEach(t),Sko=r(Q$e," \u2014 "),aO=n(Q$e,"A",{href:!0});var hut=s(aO);Rko=r(hut,"IBertForMaskedLM"),hut.forEach(t),Pko=r(Q$e," (I-BERT model)"),Q$e.forEach(t),Bko=i(U),k2=n(U,"LI",{});var H$e=s(k2);hge=n(H$e,"STRONG",{});var put=s(hge);Iko=r(put,"layoutlm"),put.forEach(t),Nko=r(H$e," \u2014 "),nO=n(H$e,"A",{href:!0});var _ut=s(nO);qko=r(_ut,"LayoutLMForMaskedLM"),_ut.forEach(t),jko=r(H$e," (LayoutLM model)"),H$e.forEach(t),Dko=i(U),S2=n(U,"LI",{});var U$e=s(S2);pge=n(U$e,"STRONG",{});var uut=s(pge);Gko=r(uut,"longformer"),uut.forEach(t),Oko=r(U$e," \u2014 "),sO=n(U$e,"A",{href:!0});var but=s(sO);Vko=r(but,"LongformerForMaskedLM"),but.forEach(t),Xko=r(U$e," (Longformer model)"),U$e.forEach(t),zko=i(U),R2=n(U,"LI",{});var J$e=s(R2);_ge=n(J$e,"STRONG",{});var vut=s(_ge);Wko=r(vut,"luke"),vut.forEach(t),Qko=r(J$e," \u2014 "),lO=n(J$e,"A",{href:!0});var Fut=s(lO);Hko=r(Fut,"LukeForMaskedLM"),Fut.forEach(t),Uko=r(J$e," (LUKE model)"),J$e.forEach(t),Jko=i(U),P2=n(U,"LI",{});var Y$e=s(P2);uge=n(Y$e,"STRONG",{});var Tut=s(uge);Yko=r(Tut,"mbart"),Tut.forEach(t),Kko=r(Y$e," \u2014 "),iO=n(Y$e,"A",{href:!0});var Mut=s(iO);Zko=r(Mut,"MBartForConditionalGeneration"),Mut.forEach(t),eSo=r(Y$e," (mBART model)"),Y$e.forEach(t),oSo=i(U),B2=n(U,"LI",{});var K$e=s(B2);bge=n(K$e,"STRONG",{});var Eut=s(bge);rSo=r(Eut,"megatron-bert"),Eut.forEach(t),tSo=r(K$e," \u2014 "),dO=n(K$e,"A",{href:!0});var Cut=s(dO);aSo=r(Cut,"MegatronBertForMaskedLM"),Cut.forEach(t),nSo=r(K$e," (Megatron-BERT model)"),K$e.forEach(t),sSo=i(U),I2=n(U,"LI",{});var Z$e=s(I2);vge=n(Z$e,"STRONG",{});var wut=s(vge);lSo=r(wut,"mobilebert"),wut.forEach(t),iSo=r(Z$e," \u2014 "),cO=n(Z$e,"A",{href:!0});var Aut=s(cO);dSo=r(Aut,"MobileBertForMaskedLM"),Aut.forEach(t),cSo=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),fSo=i(U),N2=n(U,"LI",{});var eke=s(N2);Fge=n(eke,"STRONG",{});var Lut=s(Fge);mSo=r(Lut,"mpnet"),Lut.forEach(t),gSo=r(eke," \u2014 "),fO=n(eke,"A",{href:!0});var yut=s(fO);hSo=r(yut,"MPNetForMaskedLM"),yut.forEach(t),pSo=r(eke," (MPNet model)"),eke.forEach(t),_So=i(U),q2=n(U,"LI",{});var oke=s(q2);Tge=n(oke,"STRONG",{});var xut=s(Tge);uSo=r(xut,"nezha"),xut.forEach(t),bSo=r(oke," \u2014 "),mO=n(oke,"A",{href:!0});var $ut=s(mO);vSo=r($ut,"NezhaForMaskedLM"),$ut.forEach(t),FSo=r(oke," (Nezha model)"),oke.forEach(t),TSo=i(U),j2=n(U,"LI",{});var rke=s(j2);Mge=n(rke,"STRONG",{});var kut=s(Mge);MSo=r(kut,"nystromformer"),kut.forEach(t),ESo=r(rke," \u2014 "),gO=n(rke,"A",{href:!0});var Sut=s(gO);CSo=r(Sut,"NystromformerForMaskedLM"),Sut.forEach(t),wSo=r(rke," (Nystr\xF6mformer model)"),rke.forEach(t),ASo=i(U),D2=n(U,"LI",{});var tke=s(D2);Ege=n(tke,"STRONG",{});var Rut=s(Ege);LSo=r(Rut,"perceiver"),Rut.forEach(t),ySo=r(tke," \u2014 "),hO=n(tke,"A",{href:!0});var Put=s(hO);xSo=r(Put,"PerceiverForMaskedLM"),Put.forEach(t),$So=r(tke," (Perceiver model)"),tke.forEach(t),kSo=i(U),G2=n(U,"LI",{});var ake=s(G2);Cge=n(ake,"STRONG",{});var But=s(Cge);SSo=r(But,"qdqbert"),But.forEach(t),RSo=r(ake," \u2014 "),pO=n(ake,"A",{href:!0});var Iut=s(pO);PSo=r(Iut,"QDQBertForMaskedLM"),Iut.forEach(t),BSo=r(ake," (QDQBert model)"),ake.forEach(t),ISo=i(U),O2=n(U,"LI",{});var nke=s(O2);wge=n(nke,"STRONG",{});var Nut=s(wge);NSo=r(Nut,"reformer"),Nut.forEach(t),qSo=r(nke," \u2014 "),_O=n(nke,"A",{href:!0});var qut=s(_O);jSo=r(qut,"ReformerForMaskedLM"),qut.forEach(t),DSo=r(nke," (Reformer model)"),nke.forEach(t),GSo=i(U),V2=n(U,"LI",{});var ske=s(V2);Age=n(ske,"STRONG",{});var jut=s(Age);OSo=r(jut,"rembert"),jut.forEach(t),VSo=r(ske," \u2014 "),uO=n(ske,"A",{href:!0});var Dut=s(uO);XSo=r(Dut,"RemBertForMaskedLM"),Dut.forEach(t),zSo=r(ske," (RemBERT model)"),ske.forEach(t),WSo=i(U),X2=n(U,"LI",{});var lke=s(X2);Lge=n(lke,"STRONG",{});var Gut=s(Lge);QSo=r(Gut,"roberta"),Gut.forEach(t),HSo=r(lke," \u2014 "),bO=n(lke,"A",{href:!0});var Out=s(bO);USo=r(Out,"RobertaForMaskedLM"),Out.forEach(t),JSo=r(lke," (RoBERTa model)"),lke.forEach(t),YSo=i(U),z2=n(U,"LI",{});var ike=s(z2);yge=n(ike,"STRONG",{});var Vut=s(yge);KSo=r(Vut,"roformer"),Vut.forEach(t),ZSo=r(ike," \u2014 "),vO=n(ike,"A",{href:!0});var Xut=s(vO);eRo=r(Xut,"RoFormerForMaskedLM"),Xut.forEach(t),oRo=r(ike," (RoFormer model)"),ike.forEach(t),rRo=i(U),W2=n(U,"LI",{});var dke=s(W2);xge=n(dke,"STRONG",{});var zut=s(xge);tRo=r(zut,"squeezebert"),zut.forEach(t),aRo=r(dke," \u2014 "),FO=n(dke,"A",{href:!0});var Wut=s(FO);nRo=r(Wut,"SqueezeBertForMaskedLM"),Wut.forEach(t),sRo=r(dke," (SqueezeBERT model)"),dke.forEach(t),lRo=i(U),Q2=n(U,"LI",{});var cke=s(Q2);$ge=n(cke,"STRONG",{});var Qut=s($ge);iRo=r(Qut,"tapas"),Qut.forEach(t),dRo=r(cke," \u2014 "),TO=n(cke,"A",{href:!0});var Hut=s(TO);cRo=r(Hut,"TapasForMaskedLM"),Hut.forEach(t),fRo=r(cke," (TAPAS model)"),cke.forEach(t),mRo=i(U),H2=n(U,"LI",{});var fke=s(H2);kge=n(fke,"STRONG",{});var Uut=s(kge);gRo=r(Uut,"wav2vec2"),Uut.forEach(t),hRo=r(fke," \u2014 "),Sge=n(fke,"CODE",{});var Jut=s(Sge);pRo=r(Jut,"Wav2Vec2ForMaskedLM"),Jut.forEach(t),_Ro=r(fke," (Wav2Vec2 model)"),fke.forEach(t),uRo=i(U),U2=n(U,"LI",{});var mke=s(U2);Rge=n(mke,"STRONG",{});var Yut=s(Rge);bRo=r(Yut,"xlm"),Yut.forEach(t),vRo=r(mke," \u2014 "),MO=n(mke,"A",{href:!0});var Kut=s(MO);FRo=r(Kut,"XLMWithLMHeadModel"),Kut.forEach(t),TRo=r(mke," (XLM model)"),mke.forEach(t),MRo=i(U),J2=n(U,"LI",{});var gke=s(J2);Pge=n(gke,"STRONG",{});var Zut=s(Pge);ERo=r(Zut,"xlm-roberta"),Zut.forEach(t),CRo=r(gke," \u2014 "),EO=n(gke,"A",{href:!0});var e1t=s(EO);wRo=r(e1t,"XLMRobertaForMaskedLM"),e1t.forEach(t),ARo=r(gke," (XLM-RoBERTa model)"),gke.forEach(t),LRo=i(U),Y2=n(U,"LI",{});var hke=s(Y2);Bge=n(hke,"STRONG",{});var o1t=s(Bge);yRo=r(o1t,"xlm-roberta-xl"),o1t.forEach(t),xRo=r(hke," \u2014 "),CO=n(hke,"A",{href:!0});var r1t=s(CO);$Ro=r(r1t,"XLMRobertaXLForMaskedLM"),r1t.forEach(t),kRo=r(hke," (XLM-RoBERTa-XL model)"),hke.forEach(t),SRo=i(U),K2=n(U,"LI",{});var pke=s(K2);Ige=n(pke,"STRONG",{});var t1t=s(Ige);RRo=r(t1t,"yoso"),t1t.forEach(t),PRo=r(pke," \u2014 "),wO=n(pke,"A",{href:!0});var a1t=s(wO);BRo=r(a1t,"YosoForMaskedLM"),a1t.forEach(t),IRo=r(pke," (YOSO model)"),pke.forEach(t),U.forEach(t),NRo=i(ia),Z2=n(ia,"P",{});var _ke=s(Z2);qRo=r(_ke,"The model is set in evaluation mode by default using "),Nge=n(_ke,"CODE",{});var n1t=s(Nge);jRo=r(n1t,"model.eval()"),n1t.forEach(t),DRo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(_ke,"CODE",{});var s1t=s(qge);GRo=r(s1t,"model.train()"),s1t.forEach(t),_ke.forEach(t),ORo=i(ia),T(eb.$$.fragment,ia),ia.forEach(t),ol.forEach(t),pOe=i(f),Ui=n(f,"H2",{class:!0});var TXe=s(Ui);ob=n(TXe,"A",{id:!0,class:!0,href:!0});var l1t=s(ob);jge=n(l1t,"SPAN",{});var i1t=s(jge);T(EL.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),VRo=i(TXe),Dge=n(TXe,"SPAN",{});var d1t=s(Dge);XRo=r(d1t,"AutoModelForSeq2SeqLM"),d1t.forEach(t),TXe.forEach(t),_Oe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(CL.$$.fragment,rl),zRo=i(rl),Ji=n(rl,"P",{});var Roe=s(Ji);WRo=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AO=n(Roe,"A",{href:!0});var c1t=s(AO);QRo=r(c1t,"from_pretrained()"),c1t.forEach(t),HRo=r(Roe," class method or the "),LO=n(Roe,"A",{href:!0});var f1t=s(LO);URo=r(f1t,"from_config()"),f1t.forEach(t),JRo=r(Roe,` class
method.`),Roe.forEach(t),YRo=i(rl),wL=n(rl,"P",{});var MXe=s(wL);KRo=r(MXe,"This class cannot be instantiated directly using "),Gge=n(MXe,"CODE",{});var m1t=s(Gge);ZRo=r(m1t,"__init__()"),m1t.forEach(t),ePo=r(MXe," (throws an error)."),MXe.forEach(t),oPo=i(rl),ct=n(rl,"DIV",{class:!0});var O3=s(ct);T(AL.$$.fragment,O3),rPo=i(O3),Oge=n(O3,"P",{});var g1t=s(Oge);tPo=r(g1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),g1t.forEach(t),aPo=i(O3),Yi=n(O3,"P",{});var Poe=s(Yi);nPo=r(Poe,`Note:
Loading a model from its configuration file does `),Vge=n(Poe,"STRONG",{});var h1t=s(Vge);sPo=r(h1t,"not"),h1t.forEach(t),lPo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(Poe,"A",{href:!0});var p1t=s(yO);iPo=r(p1t,"from_pretrained()"),p1t.forEach(t),dPo=r(Poe," to load the model weights."),Poe.forEach(t),cPo=i(O3),T(rb.$$.fragment,O3),O3.forEach(t),fPo=i(rl),eo=n(rl,"DIV",{class:!0});var da=s(eo);T(LL.$$.fragment,da),mPo=i(da),Xge=n(da,"P",{});var _1t=s(Xge);gPo=r(_1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_1t.forEach(t),hPo=i(da),qa=n(da,"P",{});var V3=s(qa);pPo=r(V3,"The model class to instantiate is selected based on the "),zge=n(V3,"CODE",{});var u1t=s(zge);_Po=r(u1t,"model_type"),u1t.forEach(t),uPo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Wge=n(V3,"CODE",{});var b1t=s(Wge);bPo=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),vPo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(V3,"CODE",{});var v1t=s(Qge);FPo=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),TPo=r(V3,":"),V3.forEach(t),MPo=i(da),pe=n(da,"UL",{});var be=s(pe);tb=n(be,"LI",{});var uke=s(tb);Hge=n(uke,"STRONG",{});var F1t=s(Hge);EPo=r(F1t,"bart"),F1t.forEach(t),CPo=r(uke," \u2014 "),xO=n(uke,"A",{href:!0});var T1t=s(xO);wPo=r(T1t,"BartForConditionalGeneration"),T1t.forEach(t),APo=r(uke," (BART model)"),uke.forEach(t),LPo=i(be),ab=n(be,"LI",{});var bke=s(ab);Uge=n(bke,"STRONG",{});var M1t=s(Uge);yPo=r(M1t,"bigbird_pegasus"),M1t.forEach(t),xPo=r(bke," \u2014 "),$O=n(bke,"A",{href:!0});var E1t=s($O);$Po=r(E1t,"BigBirdPegasusForConditionalGeneration"),E1t.forEach(t),kPo=r(bke," (BigBird-Pegasus model)"),bke.forEach(t),SPo=i(be),nb=n(be,"LI",{});var vke=s(nb);Jge=n(vke,"STRONG",{});var C1t=s(Jge);RPo=r(C1t,"blenderbot"),C1t.forEach(t),PPo=r(vke," \u2014 "),kO=n(vke,"A",{href:!0});var w1t=s(kO);BPo=r(w1t,"BlenderbotForConditionalGeneration"),w1t.forEach(t),IPo=r(vke," (Blenderbot model)"),vke.forEach(t),NPo=i(be),sb=n(be,"LI",{});var Fke=s(sb);Yge=n(Fke,"STRONG",{});var A1t=s(Yge);qPo=r(A1t,"blenderbot-small"),A1t.forEach(t),jPo=r(Fke," \u2014 "),SO=n(Fke,"A",{href:!0});var L1t=s(SO);DPo=r(L1t,"BlenderbotSmallForConditionalGeneration"),L1t.forEach(t),GPo=r(Fke," (BlenderbotSmall model)"),Fke.forEach(t),OPo=i(be),lb=n(be,"LI",{});var Tke=s(lb);Kge=n(Tke,"STRONG",{});var y1t=s(Kge);VPo=r(y1t,"encoder-decoder"),y1t.forEach(t),XPo=r(Tke," \u2014 "),RO=n(Tke,"A",{href:!0});var x1t=s(RO);zPo=r(x1t,"EncoderDecoderModel"),x1t.forEach(t),WPo=r(Tke," (Encoder decoder model)"),Tke.forEach(t),QPo=i(be),ib=n(be,"LI",{});var Mke=s(ib);Zge=n(Mke,"STRONG",{});var $1t=s(Zge);HPo=r($1t,"fsmt"),$1t.forEach(t),UPo=r(Mke," \u2014 "),PO=n(Mke,"A",{href:!0});var k1t=s(PO);JPo=r(k1t,"FSMTForConditionalGeneration"),k1t.forEach(t),YPo=r(Mke," (FairSeq Machine-Translation model)"),Mke.forEach(t),KPo=i(be),db=n(be,"LI",{});var Eke=s(db);ehe=n(Eke,"STRONG",{});var S1t=s(ehe);ZPo=r(S1t,"led"),S1t.forEach(t),eBo=r(Eke," \u2014 "),BO=n(Eke,"A",{href:!0});var R1t=s(BO);oBo=r(R1t,"LEDForConditionalGeneration"),R1t.forEach(t),rBo=r(Eke," (LED model)"),Eke.forEach(t),tBo=i(be),cb=n(be,"LI",{});var Cke=s(cb);ohe=n(Cke,"STRONG",{});var P1t=s(ohe);aBo=r(P1t,"longt5"),P1t.forEach(t),nBo=r(Cke," \u2014 "),IO=n(Cke,"A",{href:!0});var B1t=s(IO);sBo=r(B1t,"LongT5ForConditionalGeneration"),B1t.forEach(t),lBo=r(Cke," (LongT5 model)"),Cke.forEach(t),iBo=i(be),fb=n(be,"LI",{});var wke=s(fb);rhe=n(wke,"STRONG",{});var I1t=s(rhe);dBo=r(I1t,"m2m_100"),I1t.forEach(t),cBo=r(wke," \u2014 "),NO=n(wke,"A",{href:!0});var N1t=s(NO);fBo=r(N1t,"M2M100ForConditionalGeneration"),N1t.forEach(t),mBo=r(wke," (M2M100 model)"),wke.forEach(t),gBo=i(be),mb=n(be,"LI",{});var Ake=s(mb);the=n(Ake,"STRONG",{});var q1t=s(the);hBo=r(q1t,"marian"),q1t.forEach(t),pBo=r(Ake," \u2014 "),qO=n(Ake,"A",{href:!0});var j1t=s(qO);_Bo=r(j1t,"MarianMTModel"),j1t.forEach(t),uBo=r(Ake," (Marian model)"),Ake.forEach(t),bBo=i(be),gb=n(be,"LI",{});var Lke=s(gb);ahe=n(Lke,"STRONG",{});var D1t=s(ahe);vBo=r(D1t,"mbart"),D1t.forEach(t),FBo=r(Lke," \u2014 "),jO=n(Lke,"A",{href:!0});var G1t=s(jO);TBo=r(G1t,"MBartForConditionalGeneration"),G1t.forEach(t),MBo=r(Lke," (mBART model)"),Lke.forEach(t),EBo=i(be),hb=n(be,"LI",{});var yke=s(hb);nhe=n(yke,"STRONG",{});var O1t=s(nhe);CBo=r(O1t,"mt5"),O1t.forEach(t),wBo=r(yke," \u2014 "),DO=n(yke,"A",{href:!0});var V1t=s(DO);ABo=r(V1t,"MT5ForConditionalGeneration"),V1t.forEach(t),LBo=r(yke," (MT5 model)"),yke.forEach(t),yBo=i(be),pb=n(be,"LI",{});var xke=s(pb);she=n(xke,"STRONG",{});var X1t=s(she);xBo=r(X1t,"pegasus"),X1t.forEach(t),$Bo=r(xke," \u2014 "),GO=n(xke,"A",{href:!0});var z1t=s(GO);kBo=r(z1t,"PegasusForConditionalGeneration"),z1t.forEach(t),SBo=r(xke," (Pegasus model)"),xke.forEach(t),RBo=i(be),_b=n(be,"LI",{});var $ke=s(_b);lhe=n($ke,"STRONG",{});var W1t=s(lhe);PBo=r(W1t,"plbart"),W1t.forEach(t),BBo=r($ke," \u2014 "),OO=n($ke,"A",{href:!0});var Q1t=s(OO);IBo=r(Q1t,"PLBartForConditionalGeneration"),Q1t.forEach(t),NBo=r($ke," (PLBart model)"),$ke.forEach(t),qBo=i(be),ub=n(be,"LI",{});var kke=s(ub);ihe=n(kke,"STRONG",{});var H1t=s(ihe);jBo=r(H1t,"prophetnet"),H1t.forEach(t),DBo=r(kke," \u2014 "),VO=n(kke,"A",{href:!0});var U1t=s(VO);GBo=r(U1t,"ProphetNetForConditionalGeneration"),U1t.forEach(t),OBo=r(kke," (ProphetNet model)"),kke.forEach(t),VBo=i(be),bb=n(be,"LI",{});var Ske=s(bb);dhe=n(Ske,"STRONG",{});var J1t=s(dhe);XBo=r(J1t,"t5"),J1t.forEach(t),zBo=r(Ske," \u2014 "),XO=n(Ske,"A",{href:!0});var Y1t=s(XO);WBo=r(Y1t,"T5ForConditionalGeneration"),Y1t.forEach(t),QBo=r(Ske," (T5 model)"),Ske.forEach(t),HBo=i(be),vb=n(be,"LI",{});var Rke=s(vb);che=n(Rke,"STRONG",{});var K1t=s(che);UBo=r(K1t,"xlm-prophetnet"),K1t.forEach(t),JBo=r(Rke," \u2014 "),zO=n(Rke,"A",{href:!0});var Z1t=s(zO);YBo=r(Z1t,"XLMProphetNetForConditionalGeneration"),Z1t.forEach(t),KBo=r(Rke," (XLM-ProphetNet model)"),Rke.forEach(t),be.forEach(t),ZBo=i(da),Fb=n(da,"P",{});var Pke=s(Fb);eIo=r(Pke,"The model is set in evaluation mode by default using "),fhe=n(Pke,"CODE",{});var e2t=s(fhe);oIo=r(e2t,"model.eval()"),e2t.forEach(t),rIo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(Pke,"CODE",{});var o2t=s(mhe);tIo=r(o2t,"model.train()"),o2t.forEach(t),Pke.forEach(t),aIo=i(da),T(Tb.$$.fragment,da),da.forEach(t),rl.forEach(t),uOe=i(f),Ki=n(f,"H2",{class:!0});var EXe=s(Ki);Mb=n(EXe,"A",{id:!0,class:!0,href:!0});var r2t=s(Mb);ghe=n(r2t,"SPAN",{});var t2t=s(ghe);T(yL.$$.fragment,t2t),t2t.forEach(t),r2t.forEach(t),nIo=i(EXe),hhe=n(EXe,"SPAN",{});var a2t=s(hhe);sIo=r(a2t,"AutoModelForSequenceClassification"),a2t.forEach(t),EXe.forEach(t),bOe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(xL.$$.fragment,tl),lIo=i(tl),Zi=n(tl,"P",{});var Boe=s(Zi);iIo=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WO=n(Boe,"A",{href:!0});var n2t=s(WO);dIo=r(n2t,"from_pretrained()"),n2t.forEach(t),cIo=r(Boe," class method or the "),QO=n(Boe,"A",{href:!0});var s2t=s(QO);fIo=r(s2t,"from_config()"),s2t.forEach(t),mIo=r(Boe,` class
method.`),Boe.forEach(t),gIo=i(tl),$L=n(tl,"P",{});var CXe=s($L);hIo=r(CXe,"This class cannot be instantiated directly using "),phe=n(CXe,"CODE",{});var l2t=s(phe);pIo=r(l2t,"__init__()"),l2t.forEach(t),_Io=r(CXe," (throws an error)."),CXe.forEach(t),uIo=i(tl),ft=n(tl,"DIV",{class:!0});var X3=s(ft);T(kL.$$.fragment,X3),bIo=i(X3),_he=n(X3,"P",{});var i2t=s(_he);vIo=r(i2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i2t.forEach(t),FIo=i(X3),ed=n(X3,"P",{});var Ioe=s(ed);TIo=r(Ioe,`Note:
Loading a model from its configuration file does `),uhe=n(Ioe,"STRONG",{});var d2t=s(uhe);MIo=r(d2t,"not"),d2t.forEach(t),EIo=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(Ioe,"A",{href:!0});var c2t=s(HO);CIo=r(c2t,"from_pretrained()"),c2t.forEach(t),wIo=r(Ioe," to load the model weights."),Ioe.forEach(t),AIo=i(X3),T(Eb.$$.fragment,X3),X3.forEach(t),LIo=i(tl),oo=n(tl,"DIV",{class:!0});var ca=s(oo);T(SL.$$.fragment,ca),yIo=i(ca),bhe=n(ca,"P",{});var f2t=s(bhe);xIo=r(f2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f2t.forEach(t),$Io=i(ca),ja=n(ca,"P",{});var z3=s(ja);kIo=r(z3,"The model class to instantiate is selected based on the "),vhe=n(z3,"CODE",{});var m2t=s(vhe);SIo=r(m2t,"model_type"),m2t.forEach(t),RIo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(z3,"CODE",{});var g2t=s(Fhe);PIo=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),BIo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(z3,"CODE",{});var h2t=s(The);IIo=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),NIo=r(z3,":"),z3.forEach(t),qIo=i(ca),N=n(ca,"UL",{});var j=s(N);Cb=n(j,"LI",{});var Bke=s(Cb);Mhe=n(Bke,"STRONG",{});var p2t=s(Mhe);jIo=r(p2t,"albert"),p2t.forEach(t),DIo=r(Bke," \u2014 "),UO=n(Bke,"A",{href:!0});var _2t=s(UO);GIo=r(_2t,"AlbertForSequenceClassification"),_2t.forEach(t),OIo=r(Bke," (ALBERT model)"),Bke.forEach(t),VIo=i(j),wb=n(j,"LI",{});var Ike=s(wb);Ehe=n(Ike,"STRONG",{});var u2t=s(Ehe);XIo=r(u2t,"bart"),u2t.forEach(t),zIo=r(Ike," \u2014 "),JO=n(Ike,"A",{href:!0});var b2t=s(JO);WIo=r(b2t,"BartForSequenceClassification"),b2t.forEach(t),QIo=r(Ike," (BART model)"),Ike.forEach(t),HIo=i(j),Ab=n(j,"LI",{});var Nke=s(Ab);Che=n(Nke,"STRONG",{});var v2t=s(Che);UIo=r(v2t,"bert"),v2t.forEach(t),JIo=r(Nke," \u2014 "),YO=n(Nke,"A",{href:!0});var F2t=s(YO);YIo=r(F2t,"BertForSequenceClassification"),F2t.forEach(t),KIo=r(Nke," (BERT model)"),Nke.forEach(t),ZIo=i(j),Lb=n(j,"LI",{});var qke=s(Lb);whe=n(qke,"STRONG",{});var T2t=s(whe);eNo=r(T2t,"big_bird"),T2t.forEach(t),oNo=r(qke," \u2014 "),KO=n(qke,"A",{href:!0});var M2t=s(KO);rNo=r(M2t,"BigBirdForSequenceClassification"),M2t.forEach(t),tNo=r(qke," (BigBird model)"),qke.forEach(t),aNo=i(j),yb=n(j,"LI",{});var jke=s(yb);Ahe=n(jke,"STRONG",{});var E2t=s(Ahe);nNo=r(E2t,"bigbird_pegasus"),E2t.forEach(t),sNo=r(jke," \u2014 "),ZO=n(jke,"A",{href:!0});var C2t=s(ZO);lNo=r(C2t,"BigBirdPegasusForSequenceClassification"),C2t.forEach(t),iNo=r(jke," (BigBird-Pegasus model)"),jke.forEach(t),dNo=i(j),xb=n(j,"LI",{});var Dke=s(xb);Lhe=n(Dke,"STRONG",{});var w2t=s(Lhe);cNo=r(w2t,"bloom"),w2t.forEach(t),fNo=r(Dke," \u2014 "),eV=n(Dke,"A",{href:!0});var A2t=s(eV);mNo=r(A2t,"BloomForSequenceClassification"),A2t.forEach(t),gNo=r(Dke," (BLOOM model)"),Dke.forEach(t),hNo=i(j),$b=n(j,"LI",{});var Gke=s($b);yhe=n(Gke,"STRONG",{});var L2t=s(yhe);pNo=r(L2t,"camembert"),L2t.forEach(t),_No=r(Gke," \u2014 "),oV=n(Gke,"A",{href:!0});var y2t=s(oV);uNo=r(y2t,"CamembertForSequenceClassification"),y2t.forEach(t),bNo=r(Gke," (CamemBERT model)"),Gke.forEach(t),vNo=i(j),kb=n(j,"LI",{});var Oke=s(kb);xhe=n(Oke,"STRONG",{});var x2t=s(xhe);FNo=r(x2t,"canine"),x2t.forEach(t),TNo=r(Oke," \u2014 "),rV=n(Oke,"A",{href:!0});var $2t=s(rV);MNo=r($2t,"CanineForSequenceClassification"),$2t.forEach(t),ENo=r(Oke," (CANINE model)"),Oke.forEach(t),CNo=i(j),Sb=n(j,"LI",{});var Vke=s(Sb);$he=n(Vke,"STRONG",{});var k2t=s($he);wNo=r(k2t,"convbert"),k2t.forEach(t),ANo=r(Vke," \u2014 "),tV=n(Vke,"A",{href:!0});var S2t=s(tV);LNo=r(S2t,"ConvBertForSequenceClassification"),S2t.forEach(t),yNo=r(Vke," (ConvBERT model)"),Vke.forEach(t),xNo=i(j),Rb=n(j,"LI",{});var Xke=s(Rb);khe=n(Xke,"STRONG",{});var R2t=s(khe);$No=r(R2t,"ctrl"),R2t.forEach(t),kNo=r(Xke," \u2014 "),aV=n(Xke,"A",{href:!0});var P2t=s(aV);SNo=r(P2t,"CTRLForSequenceClassification"),P2t.forEach(t),RNo=r(Xke," (CTRL model)"),Xke.forEach(t),PNo=i(j),Pb=n(j,"LI",{});var zke=s(Pb);She=n(zke,"STRONG",{});var B2t=s(She);BNo=r(B2t,"data2vec-text"),B2t.forEach(t),INo=r(zke," \u2014 "),nV=n(zke,"A",{href:!0});var I2t=s(nV);NNo=r(I2t,"Data2VecTextForSequenceClassification"),I2t.forEach(t),qNo=r(zke," (Data2VecText model)"),zke.forEach(t),jNo=i(j),Bb=n(j,"LI",{});var Wke=s(Bb);Rhe=n(Wke,"STRONG",{});var N2t=s(Rhe);DNo=r(N2t,"deberta"),N2t.forEach(t),GNo=r(Wke," \u2014 "),sV=n(Wke,"A",{href:!0});var q2t=s(sV);ONo=r(q2t,"DebertaForSequenceClassification"),q2t.forEach(t),VNo=r(Wke," (DeBERTa model)"),Wke.forEach(t),XNo=i(j),Ib=n(j,"LI",{});var Qke=s(Ib);Phe=n(Qke,"STRONG",{});var j2t=s(Phe);zNo=r(j2t,"deberta-v2"),j2t.forEach(t),WNo=r(Qke," \u2014 "),lV=n(Qke,"A",{href:!0});var D2t=s(lV);QNo=r(D2t,"DebertaV2ForSequenceClassification"),D2t.forEach(t),HNo=r(Qke," (DeBERTa-v2 model)"),Qke.forEach(t),UNo=i(j),Nb=n(j,"LI",{});var Hke=s(Nb);Bhe=n(Hke,"STRONG",{});var G2t=s(Bhe);JNo=r(G2t,"distilbert"),G2t.forEach(t),YNo=r(Hke," \u2014 "),iV=n(Hke,"A",{href:!0});var O2t=s(iV);KNo=r(O2t,"DistilBertForSequenceClassification"),O2t.forEach(t),ZNo=r(Hke," (DistilBERT model)"),Hke.forEach(t),eqo=i(j),qb=n(j,"LI",{});var Uke=s(qb);Ihe=n(Uke,"STRONG",{});var V2t=s(Ihe);oqo=r(V2t,"electra"),V2t.forEach(t),rqo=r(Uke," \u2014 "),dV=n(Uke,"A",{href:!0});var X2t=s(dV);tqo=r(X2t,"ElectraForSequenceClassification"),X2t.forEach(t),aqo=r(Uke," (ELECTRA model)"),Uke.forEach(t),nqo=i(j),jb=n(j,"LI",{});var Jke=s(jb);Nhe=n(Jke,"STRONG",{});var z2t=s(Nhe);sqo=r(z2t,"flaubert"),z2t.forEach(t),lqo=r(Jke," \u2014 "),cV=n(Jke,"A",{href:!0});var W2t=s(cV);iqo=r(W2t,"FlaubertForSequenceClassification"),W2t.forEach(t),dqo=r(Jke," (FlauBERT model)"),Jke.forEach(t),cqo=i(j),Db=n(j,"LI",{});var Yke=s(Db);qhe=n(Yke,"STRONG",{});var Q2t=s(qhe);fqo=r(Q2t,"fnet"),Q2t.forEach(t),mqo=r(Yke," \u2014 "),fV=n(Yke,"A",{href:!0});var H2t=s(fV);gqo=r(H2t,"FNetForSequenceClassification"),H2t.forEach(t),hqo=r(Yke," (FNet model)"),Yke.forEach(t),pqo=i(j),Gb=n(j,"LI",{});var Kke=s(Gb);jhe=n(Kke,"STRONG",{});var U2t=s(jhe);_qo=r(U2t,"funnel"),U2t.forEach(t),uqo=r(Kke," \u2014 "),mV=n(Kke,"A",{href:!0});var J2t=s(mV);bqo=r(J2t,"FunnelForSequenceClassification"),J2t.forEach(t),vqo=r(Kke," (Funnel Transformer model)"),Kke.forEach(t),Fqo=i(j),Ob=n(j,"LI",{});var Zke=s(Ob);Dhe=n(Zke,"STRONG",{});var Y2t=s(Dhe);Tqo=r(Y2t,"gpt2"),Y2t.forEach(t),Mqo=r(Zke," \u2014 "),gV=n(Zke,"A",{href:!0});var K2t=s(gV);Eqo=r(K2t,"GPT2ForSequenceClassification"),K2t.forEach(t),Cqo=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),wqo=i(j),Vb=n(j,"LI",{});var eSe=s(Vb);Ghe=n(eSe,"STRONG",{});var Z2t=s(Ghe);Aqo=r(Z2t,"gpt_neo"),Z2t.forEach(t),Lqo=r(eSe," \u2014 "),hV=n(eSe,"A",{href:!0});var ebt=s(hV);yqo=r(ebt,"GPTNeoForSequenceClassification"),ebt.forEach(t),xqo=r(eSe," (GPT Neo model)"),eSe.forEach(t),$qo=i(j),Xb=n(j,"LI",{});var oSe=s(Xb);Ohe=n(oSe,"STRONG",{});var obt=s(Ohe);kqo=r(obt,"gptj"),obt.forEach(t),Sqo=r(oSe," \u2014 "),pV=n(oSe,"A",{href:!0});var rbt=s(pV);Rqo=r(rbt,"GPTJForSequenceClassification"),rbt.forEach(t),Pqo=r(oSe," (GPT-J model)"),oSe.forEach(t),Bqo=i(j),zb=n(j,"LI",{});var rSe=s(zb);Vhe=n(rSe,"STRONG",{});var tbt=s(Vhe);Iqo=r(tbt,"ibert"),tbt.forEach(t),Nqo=r(rSe," \u2014 "),_V=n(rSe,"A",{href:!0});var abt=s(_V);qqo=r(abt,"IBertForSequenceClassification"),abt.forEach(t),jqo=r(rSe," (I-BERT model)"),rSe.forEach(t),Dqo=i(j),Wb=n(j,"LI",{});var tSe=s(Wb);Xhe=n(tSe,"STRONG",{});var nbt=s(Xhe);Gqo=r(nbt,"layoutlm"),nbt.forEach(t),Oqo=r(tSe," \u2014 "),uV=n(tSe,"A",{href:!0});var sbt=s(uV);Vqo=r(sbt,"LayoutLMForSequenceClassification"),sbt.forEach(t),Xqo=r(tSe," (LayoutLM model)"),tSe.forEach(t),zqo=i(j),Qb=n(j,"LI",{});var aSe=s(Qb);zhe=n(aSe,"STRONG",{});var lbt=s(zhe);Wqo=r(lbt,"layoutlmv2"),lbt.forEach(t),Qqo=r(aSe," \u2014 "),bV=n(aSe,"A",{href:!0});var ibt=s(bV);Hqo=r(ibt,"LayoutLMv2ForSequenceClassification"),ibt.forEach(t),Uqo=r(aSe," (LayoutLMv2 model)"),aSe.forEach(t),Jqo=i(j),Hb=n(j,"LI",{});var nSe=s(Hb);Whe=n(nSe,"STRONG",{});var dbt=s(Whe);Yqo=r(dbt,"layoutlmv3"),dbt.forEach(t),Kqo=r(nSe," \u2014 "),vV=n(nSe,"A",{href:!0});var cbt=s(vV);Zqo=r(cbt,"LayoutLMv3ForSequenceClassification"),cbt.forEach(t),ejo=r(nSe," (LayoutLMv3 model)"),nSe.forEach(t),ojo=i(j),Ub=n(j,"LI",{});var sSe=s(Ub);Qhe=n(sSe,"STRONG",{});var fbt=s(Qhe);rjo=r(fbt,"led"),fbt.forEach(t),tjo=r(sSe," \u2014 "),FV=n(sSe,"A",{href:!0});var mbt=s(FV);ajo=r(mbt,"LEDForSequenceClassification"),mbt.forEach(t),njo=r(sSe," (LED model)"),sSe.forEach(t),sjo=i(j),Jb=n(j,"LI",{});var lSe=s(Jb);Hhe=n(lSe,"STRONG",{});var gbt=s(Hhe);ljo=r(gbt,"longformer"),gbt.forEach(t),ijo=r(lSe," \u2014 "),TV=n(lSe,"A",{href:!0});var hbt=s(TV);djo=r(hbt,"LongformerForSequenceClassification"),hbt.forEach(t),cjo=r(lSe," (Longformer model)"),lSe.forEach(t),fjo=i(j),Yb=n(j,"LI",{});var iSe=s(Yb);Uhe=n(iSe,"STRONG",{});var pbt=s(Uhe);mjo=r(pbt,"mbart"),pbt.forEach(t),gjo=r(iSe," \u2014 "),MV=n(iSe,"A",{href:!0});var _bt=s(MV);hjo=r(_bt,"MBartForSequenceClassification"),_bt.forEach(t),pjo=r(iSe," (mBART model)"),iSe.forEach(t),_jo=i(j),Kb=n(j,"LI",{});var dSe=s(Kb);Jhe=n(dSe,"STRONG",{});var ubt=s(Jhe);ujo=r(ubt,"megatron-bert"),ubt.forEach(t),bjo=r(dSe," \u2014 "),EV=n(dSe,"A",{href:!0});var bbt=s(EV);vjo=r(bbt,"MegatronBertForSequenceClassification"),bbt.forEach(t),Fjo=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),Tjo=i(j),Zb=n(j,"LI",{});var cSe=s(Zb);Yhe=n(cSe,"STRONG",{});var vbt=s(Yhe);Mjo=r(vbt,"mobilebert"),vbt.forEach(t),Ejo=r(cSe," \u2014 "),CV=n(cSe,"A",{href:!0});var Fbt=s(CV);Cjo=r(Fbt,"MobileBertForSequenceClassification"),Fbt.forEach(t),wjo=r(cSe," (MobileBERT model)"),cSe.forEach(t),Ajo=i(j),ev=n(j,"LI",{});var fSe=s(ev);Khe=n(fSe,"STRONG",{});var Tbt=s(Khe);Ljo=r(Tbt,"mpnet"),Tbt.forEach(t),yjo=r(fSe," \u2014 "),wV=n(fSe,"A",{href:!0});var Mbt=s(wV);xjo=r(Mbt,"MPNetForSequenceClassification"),Mbt.forEach(t),$jo=r(fSe," (MPNet model)"),fSe.forEach(t),kjo=i(j),ov=n(j,"LI",{});var mSe=s(ov);Zhe=n(mSe,"STRONG",{});var Ebt=s(Zhe);Sjo=r(Ebt,"nezha"),Ebt.forEach(t),Rjo=r(mSe," \u2014 "),AV=n(mSe,"A",{href:!0});var Cbt=s(AV);Pjo=r(Cbt,"NezhaForSequenceClassification"),Cbt.forEach(t),Bjo=r(mSe," (Nezha model)"),mSe.forEach(t),Ijo=i(j),rv=n(j,"LI",{});var gSe=s(rv);epe=n(gSe,"STRONG",{});var wbt=s(epe);Njo=r(wbt,"nystromformer"),wbt.forEach(t),qjo=r(gSe," \u2014 "),LV=n(gSe,"A",{href:!0});var Abt=s(LV);jjo=r(Abt,"NystromformerForSequenceClassification"),Abt.forEach(t),Djo=r(gSe," (Nystr\xF6mformer model)"),gSe.forEach(t),Gjo=i(j),tv=n(j,"LI",{});var hSe=s(tv);ope=n(hSe,"STRONG",{});var Lbt=s(ope);Ojo=r(Lbt,"openai-gpt"),Lbt.forEach(t),Vjo=r(hSe," \u2014 "),yV=n(hSe,"A",{href:!0});var ybt=s(yV);Xjo=r(ybt,"OpenAIGPTForSequenceClassification"),ybt.forEach(t),zjo=r(hSe," (OpenAI GPT model)"),hSe.forEach(t),Wjo=i(j),av=n(j,"LI",{});var pSe=s(av);rpe=n(pSe,"STRONG",{});var xbt=s(rpe);Qjo=r(xbt,"perceiver"),xbt.forEach(t),Hjo=r(pSe," \u2014 "),xV=n(pSe,"A",{href:!0});var $bt=s(xV);Ujo=r($bt,"PerceiverForSequenceClassification"),$bt.forEach(t),Jjo=r(pSe," (Perceiver model)"),pSe.forEach(t),Yjo=i(j),nv=n(j,"LI",{});var _Se=s(nv);tpe=n(_Se,"STRONG",{});var kbt=s(tpe);Kjo=r(kbt,"plbart"),kbt.forEach(t),Zjo=r(_Se," \u2014 "),$V=n(_Se,"A",{href:!0});var Sbt=s($V);eDo=r(Sbt,"PLBartForSequenceClassification"),Sbt.forEach(t),oDo=r(_Se," (PLBart model)"),_Se.forEach(t),rDo=i(j),sv=n(j,"LI",{});var uSe=s(sv);ape=n(uSe,"STRONG",{});var Rbt=s(ape);tDo=r(Rbt,"qdqbert"),Rbt.forEach(t),aDo=r(uSe," \u2014 "),kV=n(uSe,"A",{href:!0});var Pbt=s(kV);nDo=r(Pbt,"QDQBertForSequenceClassification"),Pbt.forEach(t),sDo=r(uSe," (QDQBert model)"),uSe.forEach(t),lDo=i(j),lv=n(j,"LI",{});var bSe=s(lv);npe=n(bSe,"STRONG",{});var Bbt=s(npe);iDo=r(Bbt,"reformer"),Bbt.forEach(t),dDo=r(bSe," \u2014 "),SV=n(bSe,"A",{href:!0});var Ibt=s(SV);cDo=r(Ibt,"ReformerForSequenceClassification"),Ibt.forEach(t),fDo=r(bSe," (Reformer model)"),bSe.forEach(t),mDo=i(j),iv=n(j,"LI",{});var vSe=s(iv);spe=n(vSe,"STRONG",{});var Nbt=s(spe);gDo=r(Nbt,"rembert"),Nbt.forEach(t),hDo=r(vSe," \u2014 "),RV=n(vSe,"A",{href:!0});var qbt=s(RV);pDo=r(qbt,"RemBertForSequenceClassification"),qbt.forEach(t),_Do=r(vSe," (RemBERT model)"),vSe.forEach(t),uDo=i(j),dv=n(j,"LI",{});var FSe=s(dv);lpe=n(FSe,"STRONG",{});var jbt=s(lpe);bDo=r(jbt,"roberta"),jbt.forEach(t),vDo=r(FSe," \u2014 "),PV=n(FSe,"A",{href:!0});var Dbt=s(PV);FDo=r(Dbt,"RobertaForSequenceClassification"),Dbt.forEach(t),TDo=r(FSe," (RoBERTa model)"),FSe.forEach(t),MDo=i(j),cv=n(j,"LI",{});var TSe=s(cv);ipe=n(TSe,"STRONG",{});var Gbt=s(ipe);EDo=r(Gbt,"roformer"),Gbt.forEach(t),CDo=r(TSe," \u2014 "),BV=n(TSe,"A",{href:!0});var Obt=s(BV);wDo=r(Obt,"RoFormerForSequenceClassification"),Obt.forEach(t),ADo=r(TSe," (RoFormer model)"),TSe.forEach(t),LDo=i(j),fv=n(j,"LI",{});var MSe=s(fv);dpe=n(MSe,"STRONG",{});var Vbt=s(dpe);yDo=r(Vbt,"squeezebert"),Vbt.forEach(t),xDo=r(MSe," \u2014 "),IV=n(MSe,"A",{href:!0});var Xbt=s(IV);$Do=r(Xbt,"SqueezeBertForSequenceClassification"),Xbt.forEach(t),kDo=r(MSe," (SqueezeBERT model)"),MSe.forEach(t),SDo=i(j),mv=n(j,"LI",{});var ESe=s(mv);cpe=n(ESe,"STRONG",{});var zbt=s(cpe);RDo=r(zbt,"tapas"),zbt.forEach(t),PDo=r(ESe," \u2014 "),NV=n(ESe,"A",{href:!0});var Wbt=s(NV);BDo=r(Wbt,"TapasForSequenceClassification"),Wbt.forEach(t),IDo=r(ESe," (TAPAS model)"),ESe.forEach(t),NDo=i(j),gv=n(j,"LI",{});var CSe=s(gv);fpe=n(CSe,"STRONG",{});var Qbt=s(fpe);qDo=r(Qbt,"transfo-xl"),Qbt.forEach(t),jDo=r(CSe," \u2014 "),qV=n(CSe,"A",{href:!0});var Hbt=s(qV);DDo=r(Hbt,"TransfoXLForSequenceClassification"),Hbt.forEach(t),GDo=r(CSe," (Transformer-XL model)"),CSe.forEach(t),ODo=i(j),hv=n(j,"LI",{});var wSe=s(hv);mpe=n(wSe,"STRONG",{});var Ubt=s(mpe);VDo=r(Ubt,"xlm"),Ubt.forEach(t),XDo=r(wSe," \u2014 "),jV=n(wSe,"A",{href:!0});var Jbt=s(jV);zDo=r(Jbt,"XLMForSequenceClassification"),Jbt.forEach(t),WDo=r(wSe," (XLM model)"),wSe.forEach(t),QDo=i(j),pv=n(j,"LI",{});var ASe=s(pv);gpe=n(ASe,"STRONG",{});var Ybt=s(gpe);HDo=r(Ybt,"xlm-roberta"),Ybt.forEach(t),UDo=r(ASe," \u2014 "),DV=n(ASe,"A",{href:!0});var Kbt=s(DV);JDo=r(Kbt,"XLMRobertaForSequenceClassification"),Kbt.forEach(t),YDo=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),KDo=i(j),_v=n(j,"LI",{});var LSe=s(_v);hpe=n(LSe,"STRONG",{});var Zbt=s(hpe);ZDo=r(Zbt,"xlm-roberta-xl"),Zbt.forEach(t),eGo=r(LSe," \u2014 "),GV=n(LSe,"A",{href:!0});var evt=s(GV);oGo=r(evt,"XLMRobertaXLForSequenceClassification"),evt.forEach(t),rGo=r(LSe," (XLM-RoBERTa-XL model)"),LSe.forEach(t),tGo=i(j),uv=n(j,"LI",{});var ySe=s(uv);ppe=n(ySe,"STRONG",{});var ovt=s(ppe);aGo=r(ovt,"xlnet"),ovt.forEach(t),nGo=r(ySe," \u2014 "),OV=n(ySe,"A",{href:!0});var rvt=s(OV);sGo=r(rvt,"XLNetForSequenceClassification"),rvt.forEach(t),lGo=r(ySe," (XLNet model)"),ySe.forEach(t),iGo=i(j),bv=n(j,"LI",{});var xSe=s(bv);_pe=n(xSe,"STRONG",{});var tvt=s(_pe);dGo=r(tvt,"yoso"),tvt.forEach(t),cGo=r(xSe," \u2014 "),VV=n(xSe,"A",{href:!0});var avt=s(VV);fGo=r(avt,"YosoForSequenceClassification"),avt.forEach(t),mGo=r(xSe," (YOSO model)"),xSe.forEach(t),j.forEach(t),gGo=i(ca),vv=n(ca,"P",{});var $Se=s(vv);hGo=r($Se,"The model is set in evaluation mode by default using "),upe=n($Se,"CODE",{});var nvt=s(upe);pGo=r(nvt,"model.eval()"),nvt.forEach(t),_Go=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n($Se,"CODE",{});var svt=s(bpe);uGo=r(svt,"model.train()"),svt.forEach(t),$Se.forEach(t),bGo=i(ca),T(Fv.$$.fragment,ca),ca.forEach(t),tl.forEach(t),vOe=i(f),od=n(f,"H2",{class:!0});var wXe=s(od);Tv=n(wXe,"A",{id:!0,class:!0,href:!0});var lvt=s(Tv);vpe=n(lvt,"SPAN",{});var ivt=s(vpe);T(RL.$$.fragment,ivt),ivt.forEach(t),lvt.forEach(t),vGo=i(wXe),Fpe=n(wXe,"SPAN",{});var dvt=s(Fpe);FGo=r(dvt,"AutoModelForMultipleChoice"),dvt.forEach(t),wXe.forEach(t),FOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(PL.$$.fragment,al),TGo=i(al),rd=n(al,"P",{});var Noe=s(rd);MGo=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XV=n(Noe,"A",{href:!0});var cvt=s(XV);EGo=r(cvt,"from_pretrained()"),cvt.forEach(t),CGo=r(Noe," class method or the "),zV=n(Noe,"A",{href:!0});var fvt=s(zV);wGo=r(fvt,"from_config()"),fvt.forEach(t),AGo=r(Noe,` class
method.`),Noe.forEach(t),LGo=i(al),BL=n(al,"P",{});var AXe=s(BL);yGo=r(AXe,"This class cannot be instantiated directly using "),Tpe=n(AXe,"CODE",{});var mvt=s(Tpe);xGo=r(mvt,"__init__()"),mvt.forEach(t),$Go=r(AXe," (throws an error)."),AXe.forEach(t),kGo=i(al),mt=n(al,"DIV",{class:!0});var W3=s(mt);T(IL.$$.fragment,W3),SGo=i(W3),Mpe=n(W3,"P",{});var gvt=s(Mpe);RGo=r(gvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gvt.forEach(t),PGo=i(W3),td=n(W3,"P",{});var qoe=s(td);BGo=r(qoe,`Note:
Loading a model from its configuration file does `),Epe=n(qoe,"STRONG",{});var hvt=s(Epe);IGo=r(hvt,"not"),hvt.forEach(t),NGo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(qoe,"A",{href:!0});var pvt=s(WV);qGo=r(pvt,"from_pretrained()"),pvt.forEach(t),jGo=r(qoe," to load the model weights."),qoe.forEach(t),DGo=i(W3),T(Mv.$$.fragment,W3),W3.forEach(t),GGo=i(al),ro=n(al,"DIV",{class:!0});var fa=s(ro);T(NL.$$.fragment,fa),OGo=i(fa),Cpe=n(fa,"P",{});var _vt=s(Cpe);VGo=r(_vt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_vt.forEach(t),XGo=i(fa),Da=n(fa,"P",{});var Q3=s(Da);zGo=r(Q3,"The model class to instantiate is selected based on the "),wpe=n(Q3,"CODE",{});var uvt=s(wpe);WGo=r(uvt,"model_type"),uvt.forEach(t),QGo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Ape=n(Q3,"CODE",{});var bvt=s(Ape);HGo=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),UGo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(Q3,"CODE",{});var vvt=s(Lpe);JGo=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),YGo=r(Q3,":"),Q3.forEach(t),KGo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);Ev=n(ee,"LI",{});var kSe=s(Ev);ype=n(kSe,"STRONG",{});var Fvt=s(ype);ZGo=r(Fvt,"albert"),Fvt.forEach(t),eOo=r(kSe," \u2014 "),QV=n(kSe,"A",{href:!0});var Tvt=s(QV);oOo=r(Tvt,"AlbertForMultipleChoice"),Tvt.forEach(t),rOo=r(kSe," (ALBERT model)"),kSe.forEach(t),tOo=i(ee),Cv=n(ee,"LI",{});var SSe=s(Cv);xpe=n(SSe,"STRONG",{});var Mvt=s(xpe);aOo=r(Mvt,"bert"),Mvt.forEach(t),nOo=r(SSe," \u2014 "),HV=n(SSe,"A",{href:!0});var Evt=s(HV);sOo=r(Evt,"BertForMultipleChoice"),Evt.forEach(t),lOo=r(SSe," (BERT model)"),SSe.forEach(t),iOo=i(ee),wv=n(ee,"LI",{});var RSe=s(wv);$pe=n(RSe,"STRONG",{});var Cvt=s($pe);dOo=r(Cvt,"big_bird"),Cvt.forEach(t),cOo=r(RSe," \u2014 "),UV=n(RSe,"A",{href:!0});var wvt=s(UV);fOo=r(wvt,"BigBirdForMultipleChoice"),wvt.forEach(t),mOo=r(RSe," (BigBird model)"),RSe.forEach(t),gOo=i(ee),Av=n(ee,"LI",{});var PSe=s(Av);kpe=n(PSe,"STRONG",{});var Avt=s(kpe);hOo=r(Avt,"camembert"),Avt.forEach(t),pOo=r(PSe," \u2014 "),JV=n(PSe,"A",{href:!0});var Lvt=s(JV);_Oo=r(Lvt,"CamembertForMultipleChoice"),Lvt.forEach(t),uOo=r(PSe," (CamemBERT model)"),PSe.forEach(t),bOo=i(ee),Lv=n(ee,"LI",{});var BSe=s(Lv);Spe=n(BSe,"STRONG",{});var yvt=s(Spe);vOo=r(yvt,"canine"),yvt.forEach(t),FOo=r(BSe," \u2014 "),YV=n(BSe,"A",{href:!0});var xvt=s(YV);TOo=r(xvt,"CanineForMultipleChoice"),xvt.forEach(t),MOo=r(BSe," (CANINE model)"),BSe.forEach(t),EOo=i(ee),yv=n(ee,"LI",{});var ISe=s(yv);Rpe=n(ISe,"STRONG",{});var $vt=s(Rpe);COo=r($vt,"convbert"),$vt.forEach(t),wOo=r(ISe," \u2014 "),KV=n(ISe,"A",{href:!0});var kvt=s(KV);AOo=r(kvt,"ConvBertForMultipleChoice"),kvt.forEach(t),LOo=r(ISe," (ConvBERT model)"),ISe.forEach(t),yOo=i(ee),xv=n(ee,"LI",{});var NSe=s(xv);Ppe=n(NSe,"STRONG",{});var Svt=s(Ppe);xOo=r(Svt,"data2vec-text"),Svt.forEach(t),$Oo=r(NSe," \u2014 "),ZV=n(NSe,"A",{href:!0});var Rvt=s(ZV);kOo=r(Rvt,"Data2VecTextForMultipleChoice"),Rvt.forEach(t),SOo=r(NSe," (Data2VecText model)"),NSe.forEach(t),ROo=i(ee),$v=n(ee,"LI",{});var qSe=s($v);Bpe=n(qSe,"STRONG",{});var Pvt=s(Bpe);POo=r(Pvt,"deberta-v2"),Pvt.forEach(t),BOo=r(qSe," \u2014 "),eX=n(qSe,"A",{href:!0});var Bvt=s(eX);IOo=r(Bvt,"DebertaV2ForMultipleChoice"),Bvt.forEach(t),NOo=r(qSe," (DeBERTa-v2 model)"),qSe.forEach(t),qOo=i(ee),kv=n(ee,"LI",{});var jSe=s(kv);Ipe=n(jSe,"STRONG",{});var Ivt=s(Ipe);jOo=r(Ivt,"distilbert"),Ivt.forEach(t),DOo=r(jSe," \u2014 "),oX=n(jSe,"A",{href:!0});var Nvt=s(oX);GOo=r(Nvt,"DistilBertForMultipleChoice"),Nvt.forEach(t),OOo=r(jSe," (DistilBERT model)"),jSe.forEach(t),VOo=i(ee),Sv=n(ee,"LI",{});var DSe=s(Sv);Npe=n(DSe,"STRONG",{});var qvt=s(Npe);XOo=r(qvt,"electra"),qvt.forEach(t),zOo=r(DSe," \u2014 "),rX=n(DSe,"A",{href:!0});var jvt=s(rX);WOo=r(jvt,"ElectraForMultipleChoice"),jvt.forEach(t),QOo=r(DSe," (ELECTRA model)"),DSe.forEach(t),HOo=i(ee),Rv=n(ee,"LI",{});var GSe=s(Rv);qpe=n(GSe,"STRONG",{});var Dvt=s(qpe);UOo=r(Dvt,"flaubert"),Dvt.forEach(t),JOo=r(GSe," \u2014 "),tX=n(GSe,"A",{href:!0});var Gvt=s(tX);YOo=r(Gvt,"FlaubertForMultipleChoice"),Gvt.forEach(t),KOo=r(GSe," (FlauBERT model)"),GSe.forEach(t),ZOo=i(ee),Pv=n(ee,"LI",{});var OSe=s(Pv);jpe=n(OSe,"STRONG",{});var Ovt=s(jpe);eVo=r(Ovt,"fnet"),Ovt.forEach(t),oVo=r(OSe," \u2014 "),aX=n(OSe,"A",{href:!0});var Vvt=s(aX);rVo=r(Vvt,"FNetForMultipleChoice"),Vvt.forEach(t),tVo=r(OSe," (FNet model)"),OSe.forEach(t),aVo=i(ee),Bv=n(ee,"LI",{});var VSe=s(Bv);Dpe=n(VSe,"STRONG",{});var Xvt=s(Dpe);nVo=r(Xvt,"funnel"),Xvt.forEach(t),sVo=r(VSe," \u2014 "),nX=n(VSe,"A",{href:!0});var zvt=s(nX);lVo=r(zvt,"FunnelForMultipleChoice"),zvt.forEach(t),iVo=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),dVo=i(ee),Iv=n(ee,"LI",{});var XSe=s(Iv);Gpe=n(XSe,"STRONG",{});var Wvt=s(Gpe);cVo=r(Wvt,"ibert"),Wvt.forEach(t),fVo=r(XSe," \u2014 "),sX=n(XSe,"A",{href:!0});var Qvt=s(sX);mVo=r(Qvt,"IBertForMultipleChoice"),Qvt.forEach(t),gVo=r(XSe," (I-BERT model)"),XSe.forEach(t),hVo=i(ee),Nv=n(ee,"LI",{});var zSe=s(Nv);Ope=n(zSe,"STRONG",{});var Hvt=s(Ope);pVo=r(Hvt,"longformer"),Hvt.forEach(t),_Vo=r(zSe," \u2014 "),lX=n(zSe,"A",{href:!0});var Uvt=s(lX);uVo=r(Uvt,"LongformerForMultipleChoice"),Uvt.forEach(t),bVo=r(zSe," (Longformer model)"),zSe.forEach(t),vVo=i(ee),qv=n(ee,"LI",{});var WSe=s(qv);Vpe=n(WSe,"STRONG",{});var Jvt=s(Vpe);FVo=r(Jvt,"megatron-bert"),Jvt.forEach(t),TVo=r(WSe," \u2014 "),iX=n(WSe,"A",{href:!0});var Yvt=s(iX);MVo=r(Yvt,"MegatronBertForMultipleChoice"),Yvt.forEach(t),EVo=r(WSe," (Megatron-BERT model)"),WSe.forEach(t),CVo=i(ee),jv=n(ee,"LI",{});var QSe=s(jv);Xpe=n(QSe,"STRONG",{});var Kvt=s(Xpe);wVo=r(Kvt,"mobilebert"),Kvt.forEach(t),AVo=r(QSe," \u2014 "),dX=n(QSe,"A",{href:!0});var Zvt=s(dX);LVo=r(Zvt,"MobileBertForMultipleChoice"),Zvt.forEach(t),yVo=r(QSe," (MobileBERT model)"),QSe.forEach(t),xVo=i(ee),Dv=n(ee,"LI",{});var HSe=s(Dv);zpe=n(HSe,"STRONG",{});var e0t=s(zpe);$Vo=r(e0t,"mpnet"),e0t.forEach(t),kVo=r(HSe," \u2014 "),cX=n(HSe,"A",{href:!0});var o0t=s(cX);SVo=r(o0t,"MPNetForMultipleChoice"),o0t.forEach(t),RVo=r(HSe," (MPNet model)"),HSe.forEach(t),PVo=i(ee),Gv=n(ee,"LI",{});var USe=s(Gv);Wpe=n(USe,"STRONG",{});var r0t=s(Wpe);BVo=r(r0t,"nezha"),r0t.forEach(t),IVo=r(USe," \u2014 "),fX=n(USe,"A",{href:!0});var t0t=s(fX);NVo=r(t0t,"NezhaForMultipleChoice"),t0t.forEach(t),qVo=r(USe," (Nezha model)"),USe.forEach(t),jVo=i(ee),Ov=n(ee,"LI",{});var JSe=s(Ov);Qpe=n(JSe,"STRONG",{});var a0t=s(Qpe);DVo=r(a0t,"nystromformer"),a0t.forEach(t),GVo=r(JSe," \u2014 "),mX=n(JSe,"A",{href:!0});var n0t=s(mX);OVo=r(n0t,"NystromformerForMultipleChoice"),n0t.forEach(t),VVo=r(JSe," (Nystr\xF6mformer model)"),JSe.forEach(t),XVo=i(ee),Vv=n(ee,"LI",{});var YSe=s(Vv);Hpe=n(YSe,"STRONG",{});var s0t=s(Hpe);zVo=r(s0t,"qdqbert"),s0t.forEach(t),WVo=r(YSe," \u2014 "),gX=n(YSe,"A",{href:!0});var l0t=s(gX);QVo=r(l0t,"QDQBertForMultipleChoice"),l0t.forEach(t),HVo=r(YSe," (QDQBert model)"),YSe.forEach(t),UVo=i(ee),Xv=n(ee,"LI",{});var KSe=s(Xv);Upe=n(KSe,"STRONG",{});var i0t=s(Upe);JVo=r(i0t,"rembert"),i0t.forEach(t),YVo=r(KSe," \u2014 "),hX=n(KSe,"A",{href:!0});var d0t=s(hX);KVo=r(d0t,"RemBertForMultipleChoice"),d0t.forEach(t),ZVo=r(KSe," (RemBERT model)"),KSe.forEach(t),eXo=i(ee),zv=n(ee,"LI",{});var ZSe=s(zv);Jpe=n(ZSe,"STRONG",{});var c0t=s(Jpe);oXo=r(c0t,"roberta"),c0t.forEach(t),rXo=r(ZSe," \u2014 "),pX=n(ZSe,"A",{href:!0});var f0t=s(pX);tXo=r(f0t,"RobertaForMultipleChoice"),f0t.forEach(t),aXo=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),nXo=i(ee),Wv=n(ee,"LI",{});var eRe=s(Wv);Ype=n(eRe,"STRONG",{});var m0t=s(Ype);sXo=r(m0t,"roformer"),m0t.forEach(t),lXo=r(eRe," \u2014 "),_X=n(eRe,"A",{href:!0});var g0t=s(_X);iXo=r(g0t,"RoFormerForMultipleChoice"),g0t.forEach(t),dXo=r(eRe," (RoFormer model)"),eRe.forEach(t),cXo=i(ee),Qv=n(ee,"LI",{});var oRe=s(Qv);Kpe=n(oRe,"STRONG",{});var h0t=s(Kpe);fXo=r(h0t,"squeezebert"),h0t.forEach(t),mXo=r(oRe," \u2014 "),uX=n(oRe,"A",{href:!0});var p0t=s(uX);gXo=r(p0t,"SqueezeBertForMultipleChoice"),p0t.forEach(t),hXo=r(oRe," (SqueezeBERT model)"),oRe.forEach(t),pXo=i(ee),Hv=n(ee,"LI",{});var rRe=s(Hv);Zpe=n(rRe,"STRONG",{});var _0t=s(Zpe);_Xo=r(_0t,"xlm"),_0t.forEach(t),uXo=r(rRe," \u2014 "),bX=n(rRe,"A",{href:!0});var u0t=s(bX);bXo=r(u0t,"XLMForMultipleChoice"),u0t.forEach(t),vXo=r(rRe," (XLM model)"),rRe.forEach(t),FXo=i(ee),Uv=n(ee,"LI",{});var tRe=s(Uv);e_e=n(tRe,"STRONG",{});var b0t=s(e_e);TXo=r(b0t,"xlm-roberta"),b0t.forEach(t),MXo=r(tRe," \u2014 "),vX=n(tRe,"A",{href:!0});var v0t=s(vX);EXo=r(v0t,"XLMRobertaForMultipleChoice"),v0t.forEach(t),CXo=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),wXo=i(ee),Jv=n(ee,"LI",{});var aRe=s(Jv);o_e=n(aRe,"STRONG",{});var F0t=s(o_e);AXo=r(F0t,"xlm-roberta-xl"),F0t.forEach(t),LXo=r(aRe," \u2014 "),FX=n(aRe,"A",{href:!0});var T0t=s(FX);yXo=r(T0t,"XLMRobertaXLForMultipleChoice"),T0t.forEach(t),xXo=r(aRe," (XLM-RoBERTa-XL model)"),aRe.forEach(t),$Xo=i(ee),Yv=n(ee,"LI",{});var nRe=s(Yv);r_e=n(nRe,"STRONG",{});var M0t=s(r_e);kXo=r(M0t,"xlnet"),M0t.forEach(t),SXo=r(nRe," \u2014 "),TX=n(nRe,"A",{href:!0});var E0t=s(TX);RXo=r(E0t,"XLNetForMultipleChoice"),E0t.forEach(t),PXo=r(nRe," (XLNet model)"),nRe.forEach(t),BXo=i(ee),Kv=n(ee,"LI",{});var sRe=s(Kv);t_e=n(sRe,"STRONG",{});var C0t=s(t_e);IXo=r(C0t,"yoso"),C0t.forEach(t),NXo=r(sRe," \u2014 "),MX=n(sRe,"A",{href:!0});var w0t=s(MX);qXo=r(w0t,"YosoForMultipleChoice"),w0t.forEach(t),jXo=r(sRe," (YOSO model)"),sRe.forEach(t),ee.forEach(t),DXo=i(fa),Zv=n(fa,"P",{});var lRe=s(Zv);GXo=r(lRe,"The model is set in evaluation mode by default using "),a_e=n(lRe,"CODE",{});var A0t=s(a_e);OXo=r(A0t,"model.eval()"),A0t.forEach(t),VXo=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(lRe,"CODE",{});var L0t=s(n_e);XXo=r(L0t,"model.train()"),L0t.forEach(t),lRe.forEach(t),zXo=i(fa),T(e0.$$.fragment,fa),fa.forEach(t),al.forEach(t),TOe=i(f),ad=n(f,"H2",{class:!0});var LXe=s(ad);o0=n(LXe,"A",{id:!0,class:!0,href:!0});var y0t=s(o0);s_e=n(y0t,"SPAN",{});var x0t=s(s_e);T(qL.$$.fragment,x0t),x0t.forEach(t),y0t.forEach(t),WXo=i(LXe),l_e=n(LXe,"SPAN",{});var $0t=s(l_e);QXo=r($0t,"AutoModelForNextSentencePrediction"),$0t.forEach(t),LXe.forEach(t),MOe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(jL.$$.fragment,nl),HXo=i(nl),nd=n(nl,"P",{});var joe=s(nd);UXo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EX=n(joe,"A",{href:!0});var k0t=s(EX);JXo=r(k0t,"from_pretrained()"),k0t.forEach(t),YXo=r(joe," class method or the "),CX=n(joe,"A",{href:!0});var S0t=s(CX);KXo=r(S0t,"from_config()"),S0t.forEach(t),ZXo=r(joe,` class
method.`),joe.forEach(t),ezo=i(nl),DL=n(nl,"P",{});var yXe=s(DL);ozo=r(yXe,"This class cannot be instantiated directly using "),i_e=n(yXe,"CODE",{});var R0t=s(i_e);rzo=r(R0t,"__init__()"),R0t.forEach(t),tzo=r(yXe," (throws an error)."),yXe.forEach(t),azo=i(nl),gt=n(nl,"DIV",{class:!0});var H3=s(gt);T(GL.$$.fragment,H3),nzo=i(H3),d_e=n(H3,"P",{});var P0t=s(d_e);szo=r(P0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P0t.forEach(t),lzo=i(H3),sd=n(H3,"P",{});var Doe=s(sd);izo=r(Doe,`Note:
Loading a model from its configuration file does `),c_e=n(Doe,"STRONG",{});var B0t=s(c_e);dzo=r(B0t,"not"),B0t.forEach(t),czo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(Doe,"A",{href:!0});var I0t=s(wX);fzo=r(I0t,"from_pretrained()"),I0t.forEach(t),mzo=r(Doe," to load the model weights."),Doe.forEach(t),gzo=i(H3),T(r0.$$.fragment,H3),H3.forEach(t),hzo=i(nl),to=n(nl,"DIV",{class:!0});var ma=s(to);T(OL.$$.fragment,ma),pzo=i(ma),f_e=n(ma,"P",{});var N0t=s(f_e);_zo=r(N0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N0t.forEach(t),uzo=i(ma),Ga=n(ma,"P",{});var U3=s(Ga);bzo=r(U3,"The model class to instantiate is selected based on the "),m_e=n(U3,"CODE",{});var q0t=s(m_e);vzo=r(q0t,"model_type"),q0t.forEach(t),Fzo=r(U3,` property of the config object (either
passed as an argument or loaded from `),g_e=n(U3,"CODE",{});var j0t=s(g_e);Tzo=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),Mzo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(U3,"CODE",{});var D0t=s(h_e);Ezo=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),Czo=r(U3,":"),U3.forEach(t),wzo=i(ma),No=n(ma,"UL",{});var ga=s(No);t0=n(ga,"LI",{});var iRe=s(t0);p_e=n(iRe,"STRONG",{});var G0t=s(p_e);Azo=r(G0t,"bert"),G0t.forEach(t),Lzo=r(iRe," \u2014 "),AX=n(iRe,"A",{href:!0});var O0t=s(AX);yzo=r(O0t,"BertForNextSentencePrediction"),O0t.forEach(t),xzo=r(iRe," (BERT model)"),iRe.forEach(t),$zo=i(ga),a0=n(ga,"LI",{});var dRe=s(a0);__e=n(dRe,"STRONG",{});var V0t=s(__e);kzo=r(V0t,"fnet"),V0t.forEach(t),Szo=r(dRe," \u2014 "),LX=n(dRe,"A",{href:!0});var X0t=s(LX);Rzo=r(X0t,"FNetForNextSentencePrediction"),X0t.forEach(t),Pzo=r(dRe," (FNet model)"),dRe.forEach(t),Bzo=i(ga),n0=n(ga,"LI",{});var cRe=s(n0);u_e=n(cRe,"STRONG",{});var z0t=s(u_e);Izo=r(z0t,"megatron-bert"),z0t.forEach(t),Nzo=r(cRe," \u2014 "),yX=n(cRe,"A",{href:!0});var W0t=s(yX);qzo=r(W0t,"MegatronBertForNextSentencePrediction"),W0t.forEach(t),jzo=r(cRe," (Megatron-BERT model)"),cRe.forEach(t),Dzo=i(ga),s0=n(ga,"LI",{});var fRe=s(s0);b_e=n(fRe,"STRONG",{});var Q0t=s(b_e);Gzo=r(Q0t,"mobilebert"),Q0t.forEach(t),Ozo=r(fRe," \u2014 "),xX=n(fRe,"A",{href:!0});var H0t=s(xX);Vzo=r(H0t,"MobileBertForNextSentencePrediction"),H0t.forEach(t),Xzo=r(fRe," (MobileBERT model)"),fRe.forEach(t),zzo=i(ga),l0=n(ga,"LI",{});var mRe=s(l0);v_e=n(mRe,"STRONG",{});var U0t=s(v_e);Wzo=r(U0t,"nezha"),U0t.forEach(t),Qzo=r(mRe," \u2014 "),$X=n(mRe,"A",{href:!0});var J0t=s($X);Hzo=r(J0t,"NezhaForNextSentencePrediction"),J0t.forEach(t),Uzo=r(mRe," (Nezha model)"),mRe.forEach(t),Jzo=i(ga),i0=n(ga,"LI",{});var gRe=s(i0);F_e=n(gRe,"STRONG",{});var Y0t=s(F_e);Yzo=r(Y0t,"qdqbert"),Y0t.forEach(t),Kzo=r(gRe," \u2014 "),kX=n(gRe,"A",{href:!0});var K0t=s(kX);Zzo=r(K0t,"QDQBertForNextSentencePrediction"),K0t.forEach(t),eWo=r(gRe," (QDQBert model)"),gRe.forEach(t),ga.forEach(t),oWo=i(ma),d0=n(ma,"P",{});var hRe=s(d0);rWo=r(hRe,"The model is set in evaluation mode by default using "),T_e=n(hRe,"CODE",{});var Z0t=s(T_e);tWo=r(Z0t,"model.eval()"),Z0t.forEach(t),aWo=r(hRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(hRe,"CODE",{});var eFt=s(M_e);nWo=r(eFt,"model.train()"),eFt.forEach(t),hRe.forEach(t),sWo=i(ma),T(c0.$$.fragment,ma),ma.forEach(t),nl.forEach(t),EOe=i(f),ld=n(f,"H2",{class:!0});var xXe=s(ld);f0=n(xXe,"A",{id:!0,class:!0,href:!0});var oFt=s(f0);E_e=n(oFt,"SPAN",{});var rFt=s(E_e);T(VL.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),lWo=i(xXe),C_e=n(xXe,"SPAN",{});var tFt=s(C_e);iWo=r(tFt,"AutoModelForTokenClassification"),tFt.forEach(t),xXe.forEach(t),COe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(XL.$$.fragment,sl),dWo=i(sl),id=n(sl,"P",{});var Goe=s(id);cWo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SX=n(Goe,"A",{href:!0});var aFt=s(SX);fWo=r(aFt,"from_pretrained()"),aFt.forEach(t),mWo=r(Goe," class method or the "),RX=n(Goe,"A",{href:!0});var nFt=s(RX);gWo=r(nFt,"from_config()"),nFt.forEach(t),hWo=r(Goe,` class
method.`),Goe.forEach(t),pWo=i(sl),zL=n(sl,"P",{});var $Xe=s(zL);_Wo=r($Xe,"This class cannot be instantiated directly using "),w_e=n($Xe,"CODE",{});var sFt=s(w_e);uWo=r(sFt,"__init__()"),sFt.forEach(t),bWo=r($Xe," (throws an error)."),$Xe.forEach(t),vWo=i(sl),ht=n(sl,"DIV",{class:!0});var J3=s(ht);T(WL.$$.fragment,J3),FWo=i(J3),A_e=n(J3,"P",{});var lFt=s(A_e);TWo=r(lFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lFt.forEach(t),MWo=i(J3),dd=n(J3,"P",{});var Ooe=s(dd);EWo=r(Ooe,`Note:
Loading a model from its configuration file does `),L_e=n(Ooe,"STRONG",{});var iFt=s(L_e);CWo=r(iFt,"not"),iFt.forEach(t),wWo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(Ooe,"A",{href:!0});var dFt=s(PX);AWo=r(dFt,"from_pretrained()"),dFt.forEach(t),LWo=r(Ooe," to load the model weights."),Ooe.forEach(t),yWo=i(J3),T(m0.$$.fragment,J3),J3.forEach(t),xWo=i(sl),ao=n(sl,"DIV",{class:!0});var ha=s(ao);T(QL.$$.fragment,ha),$Wo=i(ha),y_e=n(ha,"P",{});var cFt=s(y_e);kWo=r(cFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cFt.forEach(t),SWo=i(ha),Oa=n(ha,"P",{});var Y3=s(Oa);RWo=r(Y3,"The model class to instantiate is selected based on the "),x_e=n(Y3,"CODE",{});var fFt=s(x_e);PWo=r(fFt,"model_type"),fFt.forEach(t),BWo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),$_e=n(Y3,"CODE",{});var mFt=s($_e);IWo=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),NWo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(Y3,"CODE",{});var gFt=s(k_e);qWo=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),jWo=r(Y3,":"),Y3.forEach(t),DWo=i(ha),H=n(ha,"UL",{});var J=s(H);g0=n(J,"LI",{});var pRe=s(g0);S_e=n(pRe,"STRONG",{});var hFt=s(S_e);GWo=r(hFt,"albert"),hFt.forEach(t),OWo=r(pRe," \u2014 "),BX=n(pRe,"A",{href:!0});var pFt=s(BX);VWo=r(pFt,"AlbertForTokenClassification"),pFt.forEach(t),XWo=r(pRe," (ALBERT model)"),pRe.forEach(t),zWo=i(J),h0=n(J,"LI",{});var _Re=s(h0);R_e=n(_Re,"STRONG",{});var _Ft=s(R_e);WWo=r(_Ft,"bert"),_Ft.forEach(t),QWo=r(_Re," \u2014 "),IX=n(_Re,"A",{href:!0});var uFt=s(IX);HWo=r(uFt,"BertForTokenClassification"),uFt.forEach(t),UWo=r(_Re," (BERT model)"),_Re.forEach(t),JWo=i(J),p0=n(J,"LI",{});var uRe=s(p0);P_e=n(uRe,"STRONG",{});var bFt=s(P_e);YWo=r(bFt,"big_bird"),bFt.forEach(t),KWo=r(uRe," \u2014 "),NX=n(uRe,"A",{href:!0});var vFt=s(NX);ZWo=r(vFt,"BigBirdForTokenClassification"),vFt.forEach(t),eQo=r(uRe," (BigBird model)"),uRe.forEach(t),oQo=i(J),_0=n(J,"LI",{});var bRe=s(_0);B_e=n(bRe,"STRONG",{});var FFt=s(B_e);rQo=r(FFt,"bloom"),FFt.forEach(t),tQo=r(bRe," \u2014 "),qX=n(bRe,"A",{href:!0});var TFt=s(qX);aQo=r(TFt,"BloomForTokenClassification"),TFt.forEach(t),nQo=r(bRe," (BLOOM model)"),bRe.forEach(t),sQo=i(J),u0=n(J,"LI",{});var vRe=s(u0);I_e=n(vRe,"STRONG",{});var MFt=s(I_e);lQo=r(MFt,"camembert"),MFt.forEach(t),iQo=r(vRe," \u2014 "),jX=n(vRe,"A",{href:!0});var EFt=s(jX);dQo=r(EFt,"CamembertForTokenClassification"),EFt.forEach(t),cQo=r(vRe," (CamemBERT model)"),vRe.forEach(t),fQo=i(J),b0=n(J,"LI",{});var FRe=s(b0);N_e=n(FRe,"STRONG",{});var CFt=s(N_e);mQo=r(CFt,"canine"),CFt.forEach(t),gQo=r(FRe," \u2014 "),DX=n(FRe,"A",{href:!0});var wFt=s(DX);hQo=r(wFt,"CanineForTokenClassification"),wFt.forEach(t),pQo=r(FRe," (CANINE model)"),FRe.forEach(t),_Qo=i(J),v0=n(J,"LI",{});var TRe=s(v0);q_e=n(TRe,"STRONG",{});var AFt=s(q_e);uQo=r(AFt,"convbert"),AFt.forEach(t),bQo=r(TRe," \u2014 "),GX=n(TRe,"A",{href:!0});var LFt=s(GX);vQo=r(LFt,"ConvBertForTokenClassification"),LFt.forEach(t),FQo=r(TRe," (ConvBERT model)"),TRe.forEach(t),TQo=i(J),F0=n(J,"LI",{});var MRe=s(F0);j_e=n(MRe,"STRONG",{});var yFt=s(j_e);MQo=r(yFt,"data2vec-text"),yFt.forEach(t),EQo=r(MRe," \u2014 "),OX=n(MRe,"A",{href:!0});var xFt=s(OX);CQo=r(xFt,"Data2VecTextForTokenClassification"),xFt.forEach(t),wQo=r(MRe," (Data2VecText model)"),MRe.forEach(t),AQo=i(J),T0=n(J,"LI",{});var ERe=s(T0);D_e=n(ERe,"STRONG",{});var $Ft=s(D_e);LQo=r($Ft,"deberta"),$Ft.forEach(t),yQo=r(ERe," \u2014 "),VX=n(ERe,"A",{href:!0});var kFt=s(VX);xQo=r(kFt,"DebertaForTokenClassification"),kFt.forEach(t),$Qo=r(ERe," (DeBERTa model)"),ERe.forEach(t),kQo=i(J),M0=n(J,"LI",{});var CRe=s(M0);G_e=n(CRe,"STRONG",{});var SFt=s(G_e);SQo=r(SFt,"deberta-v2"),SFt.forEach(t),RQo=r(CRe," \u2014 "),XX=n(CRe,"A",{href:!0});var RFt=s(XX);PQo=r(RFt,"DebertaV2ForTokenClassification"),RFt.forEach(t),BQo=r(CRe," (DeBERTa-v2 model)"),CRe.forEach(t),IQo=i(J),E0=n(J,"LI",{});var wRe=s(E0);O_e=n(wRe,"STRONG",{});var PFt=s(O_e);NQo=r(PFt,"distilbert"),PFt.forEach(t),qQo=r(wRe," \u2014 "),zX=n(wRe,"A",{href:!0});var BFt=s(zX);jQo=r(BFt,"DistilBertForTokenClassification"),BFt.forEach(t),DQo=r(wRe," (DistilBERT model)"),wRe.forEach(t),GQo=i(J),C0=n(J,"LI",{});var ARe=s(C0);V_e=n(ARe,"STRONG",{});var IFt=s(V_e);OQo=r(IFt,"electra"),IFt.forEach(t),VQo=r(ARe," \u2014 "),WX=n(ARe,"A",{href:!0});var NFt=s(WX);XQo=r(NFt,"ElectraForTokenClassification"),NFt.forEach(t),zQo=r(ARe," (ELECTRA model)"),ARe.forEach(t),WQo=i(J),w0=n(J,"LI",{});var LRe=s(w0);X_e=n(LRe,"STRONG",{});var qFt=s(X_e);QQo=r(qFt,"flaubert"),qFt.forEach(t),HQo=r(LRe," \u2014 "),QX=n(LRe,"A",{href:!0});var jFt=s(QX);UQo=r(jFt,"FlaubertForTokenClassification"),jFt.forEach(t),JQo=r(LRe," (FlauBERT model)"),LRe.forEach(t),YQo=i(J),A0=n(J,"LI",{});var yRe=s(A0);z_e=n(yRe,"STRONG",{});var DFt=s(z_e);KQo=r(DFt,"fnet"),DFt.forEach(t),ZQo=r(yRe," \u2014 "),HX=n(yRe,"A",{href:!0});var GFt=s(HX);eHo=r(GFt,"FNetForTokenClassification"),GFt.forEach(t),oHo=r(yRe," (FNet model)"),yRe.forEach(t),rHo=i(J),L0=n(J,"LI",{});var xRe=s(L0);W_e=n(xRe,"STRONG",{});var OFt=s(W_e);tHo=r(OFt,"funnel"),OFt.forEach(t),aHo=r(xRe," \u2014 "),UX=n(xRe,"A",{href:!0});var VFt=s(UX);nHo=r(VFt,"FunnelForTokenClassification"),VFt.forEach(t),sHo=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),lHo=i(J),y0=n(J,"LI",{});var $Re=s(y0);Q_e=n($Re,"STRONG",{});var XFt=s(Q_e);iHo=r(XFt,"gpt2"),XFt.forEach(t),dHo=r($Re," \u2014 "),JX=n($Re,"A",{href:!0});var zFt=s(JX);cHo=r(zFt,"GPT2ForTokenClassification"),zFt.forEach(t),fHo=r($Re," (OpenAI GPT-2 model)"),$Re.forEach(t),mHo=i(J),x0=n(J,"LI",{});var kRe=s(x0);H_e=n(kRe,"STRONG",{});var WFt=s(H_e);gHo=r(WFt,"ibert"),WFt.forEach(t),hHo=r(kRe," \u2014 "),YX=n(kRe,"A",{href:!0});var QFt=s(YX);pHo=r(QFt,"IBertForTokenClassification"),QFt.forEach(t),_Ho=r(kRe," (I-BERT model)"),kRe.forEach(t),uHo=i(J),$0=n(J,"LI",{});var SRe=s($0);U_e=n(SRe,"STRONG",{});var HFt=s(U_e);bHo=r(HFt,"layoutlm"),HFt.forEach(t),vHo=r(SRe," \u2014 "),KX=n(SRe,"A",{href:!0});var UFt=s(KX);FHo=r(UFt,"LayoutLMForTokenClassification"),UFt.forEach(t),THo=r(SRe," (LayoutLM model)"),SRe.forEach(t),MHo=i(J),k0=n(J,"LI",{});var RRe=s(k0);J_e=n(RRe,"STRONG",{});var JFt=s(J_e);EHo=r(JFt,"layoutlmv2"),JFt.forEach(t),CHo=r(RRe," \u2014 "),ZX=n(RRe,"A",{href:!0});var YFt=s(ZX);wHo=r(YFt,"LayoutLMv2ForTokenClassification"),YFt.forEach(t),AHo=r(RRe," (LayoutLMv2 model)"),RRe.forEach(t),LHo=i(J),S0=n(J,"LI",{});var PRe=s(S0);Y_e=n(PRe,"STRONG",{});var KFt=s(Y_e);yHo=r(KFt,"layoutlmv3"),KFt.forEach(t),xHo=r(PRe," \u2014 "),ez=n(PRe,"A",{href:!0});var ZFt=s(ez);$Ho=r(ZFt,"LayoutLMv3ForTokenClassification"),ZFt.forEach(t),kHo=r(PRe," (LayoutLMv3 model)"),PRe.forEach(t),SHo=i(J),R0=n(J,"LI",{});var BRe=s(R0);K_e=n(BRe,"STRONG",{});var e6t=s(K_e);RHo=r(e6t,"longformer"),e6t.forEach(t),PHo=r(BRe," \u2014 "),oz=n(BRe,"A",{href:!0});var o6t=s(oz);BHo=r(o6t,"LongformerForTokenClassification"),o6t.forEach(t),IHo=r(BRe," (Longformer model)"),BRe.forEach(t),NHo=i(J),P0=n(J,"LI",{});var IRe=s(P0);Z_e=n(IRe,"STRONG",{});var r6t=s(Z_e);qHo=r(r6t,"megatron-bert"),r6t.forEach(t),jHo=r(IRe," \u2014 "),rz=n(IRe,"A",{href:!0});var t6t=s(rz);DHo=r(t6t,"MegatronBertForTokenClassification"),t6t.forEach(t),GHo=r(IRe," (Megatron-BERT model)"),IRe.forEach(t),OHo=i(J),B0=n(J,"LI",{});var NRe=s(B0);eue=n(NRe,"STRONG",{});var a6t=s(eue);VHo=r(a6t,"mobilebert"),a6t.forEach(t),XHo=r(NRe," \u2014 "),tz=n(NRe,"A",{href:!0});var n6t=s(tz);zHo=r(n6t,"MobileBertForTokenClassification"),n6t.forEach(t),WHo=r(NRe," (MobileBERT model)"),NRe.forEach(t),QHo=i(J),I0=n(J,"LI",{});var qRe=s(I0);oue=n(qRe,"STRONG",{});var s6t=s(oue);HHo=r(s6t,"mpnet"),s6t.forEach(t),UHo=r(qRe," \u2014 "),az=n(qRe,"A",{href:!0});var l6t=s(az);JHo=r(l6t,"MPNetForTokenClassification"),l6t.forEach(t),YHo=r(qRe," (MPNet model)"),qRe.forEach(t),KHo=i(J),N0=n(J,"LI",{});var jRe=s(N0);rue=n(jRe,"STRONG",{});var i6t=s(rue);ZHo=r(i6t,"nezha"),i6t.forEach(t),eUo=r(jRe," \u2014 "),nz=n(jRe,"A",{href:!0});var d6t=s(nz);oUo=r(d6t,"NezhaForTokenClassification"),d6t.forEach(t),rUo=r(jRe," (Nezha model)"),jRe.forEach(t),tUo=i(J),q0=n(J,"LI",{});var DRe=s(q0);tue=n(DRe,"STRONG",{});var c6t=s(tue);aUo=r(c6t,"nystromformer"),c6t.forEach(t),nUo=r(DRe," \u2014 "),sz=n(DRe,"A",{href:!0});var f6t=s(sz);sUo=r(f6t,"NystromformerForTokenClassification"),f6t.forEach(t),lUo=r(DRe," (Nystr\xF6mformer model)"),DRe.forEach(t),iUo=i(J),j0=n(J,"LI",{});var GRe=s(j0);aue=n(GRe,"STRONG",{});var m6t=s(aue);dUo=r(m6t,"qdqbert"),m6t.forEach(t),cUo=r(GRe," \u2014 "),lz=n(GRe,"A",{href:!0});var g6t=s(lz);fUo=r(g6t,"QDQBertForTokenClassification"),g6t.forEach(t),mUo=r(GRe," (QDQBert model)"),GRe.forEach(t),gUo=i(J),D0=n(J,"LI",{});var ORe=s(D0);nue=n(ORe,"STRONG",{});var h6t=s(nue);hUo=r(h6t,"rembert"),h6t.forEach(t),pUo=r(ORe," \u2014 "),iz=n(ORe,"A",{href:!0});var p6t=s(iz);_Uo=r(p6t,"RemBertForTokenClassification"),p6t.forEach(t),uUo=r(ORe," (RemBERT model)"),ORe.forEach(t),bUo=i(J),G0=n(J,"LI",{});var VRe=s(G0);sue=n(VRe,"STRONG",{});var _6t=s(sue);vUo=r(_6t,"roberta"),_6t.forEach(t),FUo=r(VRe," \u2014 "),dz=n(VRe,"A",{href:!0});var u6t=s(dz);TUo=r(u6t,"RobertaForTokenClassification"),u6t.forEach(t),MUo=r(VRe," (RoBERTa model)"),VRe.forEach(t),EUo=i(J),O0=n(J,"LI",{});var XRe=s(O0);lue=n(XRe,"STRONG",{});var b6t=s(lue);CUo=r(b6t,"roformer"),b6t.forEach(t),wUo=r(XRe," \u2014 "),cz=n(XRe,"A",{href:!0});var v6t=s(cz);AUo=r(v6t,"RoFormerForTokenClassification"),v6t.forEach(t),LUo=r(XRe," (RoFormer model)"),XRe.forEach(t),yUo=i(J),V0=n(J,"LI",{});var zRe=s(V0);iue=n(zRe,"STRONG",{});var F6t=s(iue);xUo=r(F6t,"squeezebert"),F6t.forEach(t),$Uo=r(zRe," \u2014 "),fz=n(zRe,"A",{href:!0});var T6t=s(fz);kUo=r(T6t,"SqueezeBertForTokenClassification"),T6t.forEach(t),SUo=r(zRe," (SqueezeBERT model)"),zRe.forEach(t),RUo=i(J),X0=n(J,"LI",{});var WRe=s(X0);due=n(WRe,"STRONG",{});var M6t=s(due);PUo=r(M6t,"xlm"),M6t.forEach(t),BUo=r(WRe," \u2014 "),mz=n(WRe,"A",{href:!0});var E6t=s(mz);IUo=r(E6t,"XLMForTokenClassification"),E6t.forEach(t),NUo=r(WRe," (XLM model)"),WRe.forEach(t),qUo=i(J),z0=n(J,"LI",{});var QRe=s(z0);cue=n(QRe,"STRONG",{});var C6t=s(cue);jUo=r(C6t,"xlm-roberta"),C6t.forEach(t),DUo=r(QRe," \u2014 "),gz=n(QRe,"A",{href:!0});var w6t=s(gz);GUo=r(w6t,"XLMRobertaForTokenClassification"),w6t.forEach(t),OUo=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),VUo=i(J),W0=n(J,"LI",{});var HRe=s(W0);fue=n(HRe,"STRONG",{});var A6t=s(fue);XUo=r(A6t,"xlm-roberta-xl"),A6t.forEach(t),zUo=r(HRe," \u2014 "),hz=n(HRe,"A",{href:!0});var L6t=s(hz);WUo=r(L6t,"XLMRobertaXLForTokenClassification"),L6t.forEach(t),QUo=r(HRe," (XLM-RoBERTa-XL model)"),HRe.forEach(t),HUo=i(J),Q0=n(J,"LI",{});var URe=s(Q0);mue=n(URe,"STRONG",{});var y6t=s(mue);UUo=r(y6t,"xlnet"),y6t.forEach(t),JUo=r(URe," \u2014 "),pz=n(URe,"A",{href:!0});var x6t=s(pz);YUo=r(x6t,"XLNetForTokenClassification"),x6t.forEach(t),KUo=r(URe," (XLNet model)"),URe.forEach(t),ZUo=i(J),H0=n(J,"LI",{});var JRe=s(H0);gue=n(JRe,"STRONG",{});var $6t=s(gue);eJo=r($6t,"yoso"),$6t.forEach(t),oJo=r(JRe," \u2014 "),_z=n(JRe,"A",{href:!0});var k6t=s(_z);rJo=r(k6t,"YosoForTokenClassification"),k6t.forEach(t),tJo=r(JRe," (YOSO model)"),JRe.forEach(t),J.forEach(t),aJo=i(ha),U0=n(ha,"P",{});var YRe=s(U0);nJo=r(YRe,"The model is set in evaluation mode by default using "),hue=n(YRe,"CODE",{});var S6t=s(hue);sJo=r(S6t,"model.eval()"),S6t.forEach(t),lJo=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(YRe,"CODE",{});var R6t=s(pue);iJo=r(R6t,"model.train()"),R6t.forEach(t),YRe.forEach(t),dJo=i(ha),T(J0.$$.fragment,ha),ha.forEach(t),sl.forEach(t),wOe=i(f),cd=n(f,"H2",{class:!0});var kXe=s(cd);Y0=n(kXe,"A",{id:!0,class:!0,href:!0});var P6t=s(Y0);_ue=n(P6t,"SPAN",{});var B6t=s(_ue);T(HL.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),cJo=i(kXe),uue=n(kXe,"SPAN",{});var I6t=s(uue);fJo=r(I6t,"AutoModelForQuestionAnswering"),I6t.forEach(t),kXe.forEach(t),AOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(UL.$$.fragment,ll),mJo=i(ll),fd=n(ll,"P",{});var Voe=s(fd);gJo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uz=n(Voe,"A",{href:!0});var N6t=s(uz);hJo=r(N6t,"from_pretrained()"),N6t.forEach(t),pJo=r(Voe," class method or the "),bz=n(Voe,"A",{href:!0});var q6t=s(bz);_Jo=r(q6t,"from_config()"),q6t.forEach(t),uJo=r(Voe,` class
method.`),Voe.forEach(t),bJo=i(ll),JL=n(ll,"P",{});var SXe=s(JL);vJo=r(SXe,"This class cannot be instantiated directly using "),bue=n(SXe,"CODE",{});var j6t=s(bue);FJo=r(j6t,"__init__()"),j6t.forEach(t),TJo=r(SXe," (throws an error)."),SXe.forEach(t),MJo=i(ll),pt=n(ll,"DIV",{class:!0});var K3=s(pt);T(YL.$$.fragment,K3),EJo=i(K3),vue=n(K3,"P",{});var D6t=s(vue);CJo=r(D6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D6t.forEach(t),wJo=i(K3),md=n(K3,"P",{});var Xoe=s(md);AJo=r(Xoe,`Note:
Loading a model from its configuration file does `),Fue=n(Xoe,"STRONG",{});var G6t=s(Fue);LJo=r(G6t,"not"),G6t.forEach(t),yJo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Xoe,"A",{href:!0});var O6t=s(vz);xJo=r(O6t,"from_pretrained()"),O6t.forEach(t),$Jo=r(Xoe," to load the model weights."),Xoe.forEach(t),kJo=i(K3),T(K0.$$.fragment,K3),K3.forEach(t),SJo=i(ll),no=n(ll,"DIV",{class:!0});var pa=s(no);T(KL.$$.fragment,pa),RJo=i(pa),Tue=n(pa,"P",{});var V6t=s(Tue);PJo=r(V6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V6t.forEach(t),BJo=i(pa),Va=n(pa,"P",{});var Z3=s(Va);IJo=r(Z3,"The model class to instantiate is selected based on the "),Mue=n(Z3,"CODE",{});var X6t=s(Mue);NJo=r(X6t,"model_type"),X6t.forEach(t),qJo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Eue=n(Z3,"CODE",{});var z6t=s(Eue);jJo=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),DJo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(Z3,"CODE",{});var W6t=s(Cue);GJo=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),OJo=r(Z3,":"),Z3.forEach(t),VJo=i(pa),V=n(pa,"UL",{});var X=s(V);Z0=n(X,"LI",{});var KRe=s(Z0);wue=n(KRe,"STRONG",{});var Q6t=s(wue);XJo=r(Q6t,"albert"),Q6t.forEach(t),zJo=r(KRe," \u2014 "),Fz=n(KRe,"A",{href:!0});var H6t=s(Fz);WJo=r(H6t,"AlbertForQuestionAnswering"),H6t.forEach(t),QJo=r(KRe," (ALBERT model)"),KRe.forEach(t),HJo=i(X),eF=n(X,"LI",{});var ZRe=s(eF);Aue=n(ZRe,"STRONG",{});var U6t=s(Aue);UJo=r(U6t,"bart"),U6t.forEach(t),JJo=r(ZRe," \u2014 "),Tz=n(ZRe,"A",{href:!0});var J6t=s(Tz);YJo=r(J6t,"BartForQuestionAnswering"),J6t.forEach(t),KJo=r(ZRe," (BART model)"),ZRe.forEach(t),ZJo=i(X),oF=n(X,"LI",{});var ePe=s(oF);Lue=n(ePe,"STRONG",{});var Y6t=s(Lue);eYo=r(Y6t,"bert"),Y6t.forEach(t),oYo=r(ePe," \u2014 "),Mz=n(ePe,"A",{href:!0});var K6t=s(Mz);rYo=r(K6t,"BertForQuestionAnswering"),K6t.forEach(t),tYo=r(ePe," (BERT model)"),ePe.forEach(t),aYo=i(X),rF=n(X,"LI",{});var oPe=s(rF);yue=n(oPe,"STRONG",{});var Z6t=s(yue);nYo=r(Z6t,"big_bird"),Z6t.forEach(t),sYo=r(oPe," \u2014 "),Ez=n(oPe,"A",{href:!0});var eTt=s(Ez);lYo=r(eTt,"BigBirdForQuestionAnswering"),eTt.forEach(t),iYo=r(oPe," (BigBird model)"),oPe.forEach(t),dYo=i(X),tF=n(X,"LI",{});var rPe=s(tF);xue=n(rPe,"STRONG",{});var oTt=s(xue);cYo=r(oTt,"bigbird_pegasus"),oTt.forEach(t),fYo=r(rPe," \u2014 "),Cz=n(rPe,"A",{href:!0});var rTt=s(Cz);mYo=r(rTt,"BigBirdPegasusForQuestionAnswering"),rTt.forEach(t),gYo=r(rPe," (BigBird-Pegasus model)"),rPe.forEach(t),hYo=i(X),aF=n(X,"LI",{});var tPe=s(aF);$ue=n(tPe,"STRONG",{});var tTt=s($ue);pYo=r(tTt,"camembert"),tTt.forEach(t),_Yo=r(tPe," \u2014 "),wz=n(tPe,"A",{href:!0});var aTt=s(wz);uYo=r(aTt,"CamembertForQuestionAnswering"),aTt.forEach(t),bYo=r(tPe," (CamemBERT model)"),tPe.forEach(t),vYo=i(X),nF=n(X,"LI",{});var aPe=s(nF);kue=n(aPe,"STRONG",{});var nTt=s(kue);FYo=r(nTt,"canine"),nTt.forEach(t),TYo=r(aPe," \u2014 "),Az=n(aPe,"A",{href:!0});var sTt=s(Az);MYo=r(sTt,"CanineForQuestionAnswering"),sTt.forEach(t),EYo=r(aPe," (CANINE model)"),aPe.forEach(t),CYo=i(X),sF=n(X,"LI",{});var nPe=s(sF);Sue=n(nPe,"STRONG",{});var lTt=s(Sue);wYo=r(lTt,"convbert"),lTt.forEach(t),AYo=r(nPe," \u2014 "),Lz=n(nPe,"A",{href:!0});var iTt=s(Lz);LYo=r(iTt,"ConvBertForQuestionAnswering"),iTt.forEach(t),yYo=r(nPe," (ConvBERT model)"),nPe.forEach(t),xYo=i(X),lF=n(X,"LI",{});var sPe=s(lF);Rue=n(sPe,"STRONG",{});var dTt=s(Rue);$Yo=r(dTt,"data2vec-text"),dTt.forEach(t),kYo=r(sPe," \u2014 "),yz=n(sPe,"A",{href:!0});var cTt=s(yz);SYo=r(cTt,"Data2VecTextForQuestionAnswering"),cTt.forEach(t),RYo=r(sPe," (Data2VecText model)"),sPe.forEach(t),PYo=i(X),iF=n(X,"LI",{});var lPe=s(iF);Pue=n(lPe,"STRONG",{});var fTt=s(Pue);BYo=r(fTt,"deberta"),fTt.forEach(t),IYo=r(lPe," \u2014 "),xz=n(lPe,"A",{href:!0});var mTt=s(xz);NYo=r(mTt,"DebertaForQuestionAnswering"),mTt.forEach(t),qYo=r(lPe," (DeBERTa model)"),lPe.forEach(t),jYo=i(X),dF=n(X,"LI",{});var iPe=s(dF);Bue=n(iPe,"STRONG",{});var gTt=s(Bue);DYo=r(gTt,"deberta-v2"),gTt.forEach(t),GYo=r(iPe," \u2014 "),$z=n(iPe,"A",{href:!0});var hTt=s($z);OYo=r(hTt,"DebertaV2ForQuestionAnswering"),hTt.forEach(t),VYo=r(iPe," (DeBERTa-v2 model)"),iPe.forEach(t),XYo=i(X),cF=n(X,"LI",{});var dPe=s(cF);Iue=n(dPe,"STRONG",{});var pTt=s(Iue);zYo=r(pTt,"distilbert"),pTt.forEach(t),WYo=r(dPe," \u2014 "),kz=n(dPe,"A",{href:!0});var _Tt=s(kz);QYo=r(_Tt,"DistilBertForQuestionAnswering"),_Tt.forEach(t),HYo=r(dPe," (DistilBERT model)"),dPe.forEach(t),UYo=i(X),fF=n(X,"LI",{});var cPe=s(fF);Nue=n(cPe,"STRONG",{});var uTt=s(Nue);JYo=r(uTt,"electra"),uTt.forEach(t),YYo=r(cPe," \u2014 "),Sz=n(cPe,"A",{href:!0});var bTt=s(Sz);KYo=r(bTt,"ElectraForQuestionAnswering"),bTt.forEach(t),ZYo=r(cPe," (ELECTRA model)"),cPe.forEach(t),eKo=i(X),mF=n(X,"LI",{});var fPe=s(mF);que=n(fPe,"STRONG",{});var vTt=s(que);oKo=r(vTt,"flaubert"),vTt.forEach(t),rKo=r(fPe," \u2014 "),Rz=n(fPe,"A",{href:!0});var FTt=s(Rz);tKo=r(FTt,"FlaubertForQuestionAnsweringSimple"),FTt.forEach(t),aKo=r(fPe," (FlauBERT model)"),fPe.forEach(t),nKo=i(X),gF=n(X,"LI",{});var mPe=s(gF);jue=n(mPe,"STRONG",{});var TTt=s(jue);sKo=r(TTt,"fnet"),TTt.forEach(t),lKo=r(mPe," \u2014 "),Pz=n(mPe,"A",{href:!0});var MTt=s(Pz);iKo=r(MTt,"FNetForQuestionAnswering"),MTt.forEach(t),dKo=r(mPe," (FNet model)"),mPe.forEach(t),cKo=i(X),hF=n(X,"LI",{});var gPe=s(hF);Due=n(gPe,"STRONG",{});var ETt=s(Due);fKo=r(ETt,"funnel"),ETt.forEach(t),mKo=r(gPe," \u2014 "),Bz=n(gPe,"A",{href:!0});var CTt=s(Bz);gKo=r(CTt,"FunnelForQuestionAnswering"),CTt.forEach(t),hKo=r(gPe," (Funnel Transformer model)"),gPe.forEach(t),pKo=i(X),pF=n(X,"LI",{});var hPe=s(pF);Gue=n(hPe,"STRONG",{});var wTt=s(Gue);_Ko=r(wTt,"gptj"),wTt.forEach(t),uKo=r(hPe," \u2014 "),Iz=n(hPe,"A",{href:!0});var ATt=s(Iz);bKo=r(ATt,"GPTJForQuestionAnswering"),ATt.forEach(t),vKo=r(hPe," (GPT-J model)"),hPe.forEach(t),FKo=i(X),_F=n(X,"LI",{});var pPe=s(_F);Oue=n(pPe,"STRONG",{});var LTt=s(Oue);TKo=r(LTt,"ibert"),LTt.forEach(t),MKo=r(pPe," \u2014 "),Nz=n(pPe,"A",{href:!0});var yTt=s(Nz);EKo=r(yTt,"IBertForQuestionAnswering"),yTt.forEach(t),CKo=r(pPe," (I-BERT model)"),pPe.forEach(t),wKo=i(X),uF=n(X,"LI",{});var _Pe=s(uF);Vue=n(_Pe,"STRONG",{});var xTt=s(Vue);AKo=r(xTt,"layoutlmv2"),xTt.forEach(t),LKo=r(_Pe," \u2014 "),qz=n(_Pe,"A",{href:!0});var $Tt=s(qz);yKo=r($Tt,"LayoutLMv2ForQuestionAnswering"),$Tt.forEach(t),xKo=r(_Pe," (LayoutLMv2 model)"),_Pe.forEach(t),$Ko=i(X),bF=n(X,"LI",{});var uPe=s(bF);Xue=n(uPe,"STRONG",{});var kTt=s(Xue);kKo=r(kTt,"layoutlmv3"),kTt.forEach(t),SKo=r(uPe," \u2014 "),jz=n(uPe,"A",{href:!0});var STt=s(jz);RKo=r(STt,"LayoutLMv3ForQuestionAnswering"),STt.forEach(t),PKo=r(uPe," (LayoutLMv3 model)"),uPe.forEach(t),BKo=i(X),vF=n(X,"LI",{});var bPe=s(vF);zue=n(bPe,"STRONG",{});var RTt=s(zue);IKo=r(RTt,"led"),RTt.forEach(t),NKo=r(bPe," \u2014 "),Dz=n(bPe,"A",{href:!0});var PTt=s(Dz);qKo=r(PTt,"LEDForQuestionAnswering"),PTt.forEach(t),jKo=r(bPe," (LED model)"),bPe.forEach(t),DKo=i(X),FF=n(X,"LI",{});var vPe=s(FF);Wue=n(vPe,"STRONG",{});var BTt=s(Wue);GKo=r(BTt,"longformer"),BTt.forEach(t),OKo=r(vPe," \u2014 "),Gz=n(vPe,"A",{href:!0});var ITt=s(Gz);VKo=r(ITt,"LongformerForQuestionAnswering"),ITt.forEach(t),XKo=r(vPe," (Longformer model)"),vPe.forEach(t),zKo=i(X),TF=n(X,"LI",{});var FPe=s(TF);Que=n(FPe,"STRONG",{});var NTt=s(Que);WKo=r(NTt,"lxmert"),NTt.forEach(t),QKo=r(FPe," \u2014 "),Oz=n(FPe,"A",{href:!0});var qTt=s(Oz);HKo=r(qTt,"LxmertForQuestionAnswering"),qTt.forEach(t),UKo=r(FPe," (LXMERT model)"),FPe.forEach(t),JKo=i(X),MF=n(X,"LI",{});var TPe=s(MF);Hue=n(TPe,"STRONG",{});var jTt=s(Hue);YKo=r(jTt,"mbart"),jTt.forEach(t),KKo=r(TPe," \u2014 "),Vz=n(TPe,"A",{href:!0});var DTt=s(Vz);ZKo=r(DTt,"MBartForQuestionAnswering"),DTt.forEach(t),eZo=r(TPe," (mBART model)"),TPe.forEach(t),oZo=i(X),EF=n(X,"LI",{});var MPe=s(EF);Uue=n(MPe,"STRONG",{});var GTt=s(Uue);rZo=r(GTt,"megatron-bert"),GTt.forEach(t),tZo=r(MPe," \u2014 "),Xz=n(MPe,"A",{href:!0});var OTt=s(Xz);aZo=r(OTt,"MegatronBertForQuestionAnswering"),OTt.forEach(t),nZo=r(MPe," (Megatron-BERT model)"),MPe.forEach(t),sZo=i(X),CF=n(X,"LI",{});var EPe=s(CF);Jue=n(EPe,"STRONG",{});var VTt=s(Jue);lZo=r(VTt,"mobilebert"),VTt.forEach(t),iZo=r(EPe," \u2014 "),zz=n(EPe,"A",{href:!0});var XTt=s(zz);dZo=r(XTt,"MobileBertForQuestionAnswering"),XTt.forEach(t),cZo=r(EPe," (MobileBERT model)"),EPe.forEach(t),fZo=i(X),wF=n(X,"LI",{});var CPe=s(wF);Yue=n(CPe,"STRONG",{});var zTt=s(Yue);mZo=r(zTt,"mpnet"),zTt.forEach(t),gZo=r(CPe," \u2014 "),Wz=n(CPe,"A",{href:!0});var WTt=s(Wz);hZo=r(WTt,"MPNetForQuestionAnswering"),WTt.forEach(t),pZo=r(CPe," (MPNet model)"),CPe.forEach(t),_Zo=i(X),AF=n(X,"LI",{});var wPe=s(AF);Kue=n(wPe,"STRONG",{});var QTt=s(Kue);uZo=r(QTt,"nezha"),QTt.forEach(t),bZo=r(wPe," \u2014 "),Qz=n(wPe,"A",{href:!0});var HTt=s(Qz);vZo=r(HTt,"NezhaForQuestionAnswering"),HTt.forEach(t),FZo=r(wPe," (Nezha model)"),wPe.forEach(t),TZo=i(X),LF=n(X,"LI",{});var APe=s(LF);Zue=n(APe,"STRONG",{});var UTt=s(Zue);MZo=r(UTt,"nystromformer"),UTt.forEach(t),EZo=r(APe," \u2014 "),Hz=n(APe,"A",{href:!0});var JTt=s(Hz);CZo=r(JTt,"NystromformerForQuestionAnswering"),JTt.forEach(t),wZo=r(APe," (Nystr\xF6mformer model)"),APe.forEach(t),AZo=i(X),yF=n(X,"LI",{});var LPe=s(yF);e1e=n(LPe,"STRONG",{});var YTt=s(e1e);LZo=r(YTt,"qdqbert"),YTt.forEach(t),yZo=r(LPe," \u2014 "),Uz=n(LPe,"A",{href:!0});var KTt=s(Uz);xZo=r(KTt,"QDQBertForQuestionAnswering"),KTt.forEach(t),$Zo=r(LPe," (QDQBert model)"),LPe.forEach(t),kZo=i(X),xF=n(X,"LI",{});var yPe=s(xF);o1e=n(yPe,"STRONG",{});var ZTt=s(o1e);SZo=r(ZTt,"reformer"),ZTt.forEach(t),RZo=r(yPe," \u2014 "),Jz=n(yPe,"A",{href:!0});var e7t=s(Jz);PZo=r(e7t,"ReformerForQuestionAnswering"),e7t.forEach(t),BZo=r(yPe," (Reformer model)"),yPe.forEach(t),IZo=i(X),$F=n(X,"LI",{});var xPe=s($F);r1e=n(xPe,"STRONG",{});var o7t=s(r1e);NZo=r(o7t,"rembert"),o7t.forEach(t),qZo=r(xPe," \u2014 "),Yz=n(xPe,"A",{href:!0});var r7t=s(Yz);jZo=r(r7t,"RemBertForQuestionAnswering"),r7t.forEach(t),DZo=r(xPe," (RemBERT model)"),xPe.forEach(t),GZo=i(X),kF=n(X,"LI",{});var $Pe=s(kF);t1e=n($Pe,"STRONG",{});var t7t=s(t1e);OZo=r(t7t,"roberta"),t7t.forEach(t),VZo=r($Pe," \u2014 "),Kz=n($Pe,"A",{href:!0});var a7t=s(Kz);XZo=r(a7t,"RobertaForQuestionAnswering"),a7t.forEach(t),zZo=r($Pe," (RoBERTa model)"),$Pe.forEach(t),WZo=i(X),SF=n(X,"LI",{});var kPe=s(SF);a1e=n(kPe,"STRONG",{});var n7t=s(a1e);QZo=r(n7t,"roformer"),n7t.forEach(t),HZo=r(kPe," \u2014 "),Zz=n(kPe,"A",{href:!0});var s7t=s(Zz);UZo=r(s7t,"RoFormerForQuestionAnswering"),s7t.forEach(t),JZo=r(kPe," (RoFormer model)"),kPe.forEach(t),YZo=i(X),RF=n(X,"LI",{});var SPe=s(RF);n1e=n(SPe,"STRONG",{});var l7t=s(n1e);KZo=r(l7t,"splinter"),l7t.forEach(t),ZZo=r(SPe," \u2014 "),eW=n(SPe,"A",{href:!0});var i7t=s(eW);eer=r(i7t,"SplinterForQuestionAnswering"),i7t.forEach(t),oer=r(SPe," (Splinter model)"),SPe.forEach(t),rer=i(X),PF=n(X,"LI",{});var RPe=s(PF);s1e=n(RPe,"STRONG",{});var d7t=s(s1e);ter=r(d7t,"squeezebert"),d7t.forEach(t),aer=r(RPe," \u2014 "),oW=n(RPe,"A",{href:!0});var c7t=s(oW);ner=r(c7t,"SqueezeBertForQuestionAnswering"),c7t.forEach(t),ser=r(RPe," (SqueezeBERT model)"),RPe.forEach(t),ler=i(X),BF=n(X,"LI",{});var PPe=s(BF);l1e=n(PPe,"STRONG",{});var f7t=s(l1e);ier=r(f7t,"xlm"),f7t.forEach(t),der=r(PPe," \u2014 "),rW=n(PPe,"A",{href:!0});var m7t=s(rW);cer=r(m7t,"XLMForQuestionAnsweringSimple"),m7t.forEach(t),fer=r(PPe," (XLM model)"),PPe.forEach(t),mer=i(X),IF=n(X,"LI",{});var BPe=s(IF);i1e=n(BPe,"STRONG",{});var g7t=s(i1e);ger=r(g7t,"xlm-roberta"),g7t.forEach(t),her=r(BPe," \u2014 "),tW=n(BPe,"A",{href:!0});var h7t=s(tW);per=r(h7t,"XLMRobertaForQuestionAnswering"),h7t.forEach(t),_er=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),uer=i(X),NF=n(X,"LI",{});var IPe=s(NF);d1e=n(IPe,"STRONG",{});var p7t=s(d1e);ber=r(p7t,"xlm-roberta-xl"),p7t.forEach(t),ver=r(IPe," \u2014 "),aW=n(IPe,"A",{href:!0});var _7t=s(aW);Fer=r(_7t,"XLMRobertaXLForQuestionAnswering"),_7t.forEach(t),Ter=r(IPe," (XLM-RoBERTa-XL model)"),IPe.forEach(t),Mer=i(X),qF=n(X,"LI",{});var NPe=s(qF);c1e=n(NPe,"STRONG",{});var u7t=s(c1e);Eer=r(u7t,"xlnet"),u7t.forEach(t),Cer=r(NPe," \u2014 "),nW=n(NPe,"A",{href:!0});var b7t=s(nW);wer=r(b7t,"XLNetForQuestionAnsweringSimple"),b7t.forEach(t),Aer=r(NPe," (XLNet model)"),NPe.forEach(t),Ler=i(X),jF=n(X,"LI",{});var qPe=s(jF);f1e=n(qPe,"STRONG",{});var v7t=s(f1e);yer=r(v7t,"yoso"),v7t.forEach(t),xer=r(qPe," \u2014 "),sW=n(qPe,"A",{href:!0});var F7t=s(sW);$er=r(F7t,"YosoForQuestionAnswering"),F7t.forEach(t),ker=r(qPe," (YOSO model)"),qPe.forEach(t),X.forEach(t),Ser=i(pa),DF=n(pa,"P",{});var jPe=s(DF);Rer=r(jPe,"The model is set in evaluation mode by default using "),m1e=n(jPe,"CODE",{});var T7t=s(m1e);Per=r(T7t,"model.eval()"),T7t.forEach(t),Ber=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(jPe,"CODE",{});var M7t=s(g1e);Ier=r(M7t,"model.train()"),M7t.forEach(t),jPe.forEach(t),Ner=i(pa),T(GF.$$.fragment,pa),pa.forEach(t),ll.forEach(t),LOe=i(f),gd=n(f,"H2",{class:!0});var RXe=s(gd);OF=n(RXe,"A",{id:!0,class:!0,href:!0});var E7t=s(OF);h1e=n(E7t,"SPAN",{});var C7t=s(h1e);T(ZL.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),qer=i(RXe),p1e=n(RXe,"SPAN",{});var w7t=s(p1e);jer=r(w7t,"AutoModelForTableQuestionAnswering"),w7t.forEach(t),RXe.forEach(t),yOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(ey.$$.fragment,il),Der=i(il),hd=n(il,"P",{});var zoe=s(hd);Ger=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=n(zoe,"A",{href:!0});var A7t=s(lW);Oer=r(A7t,"from_pretrained()"),A7t.forEach(t),Ver=r(zoe," class method or the "),iW=n(zoe,"A",{href:!0});var L7t=s(iW);Xer=r(L7t,"from_config()"),L7t.forEach(t),zer=r(zoe,` class
method.`),zoe.forEach(t),Wer=i(il),oy=n(il,"P",{});var PXe=s(oy);Qer=r(PXe,"This class cannot be instantiated directly using "),_1e=n(PXe,"CODE",{});var y7t=s(_1e);Her=r(y7t,"__init__()"),y7t.forEach(t),Uer=r(PXe," (throws an error)."),PXe.forEach(t),Jer=i(il),_t=n(il,"DIV",{class:!0});var ew=s(_t);T(ry.$$.fragment,ew),Yer=i(ew),u1e=n(ew,"P",{});var x7t=s(u1e);Ker=r(x7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x7t.forEach(t),Zer=i(ew),pd=n(ew,"P",{});var Woe=s(pd);eor=r(Woe,`Note:
Loading a model from its configuration file does `),b1e=n(Woe,"STRONG",{});var $7t=s(b1e);oor=r($7t,"not"),$7t.forEach(t),ror=r(Woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Woe,"A",{href:!0});var k7t=s(dW);tor=r(k7t,"from_pretrained()"),k7t.forEach(t),aor=r(Woe," to load the model weights."),Woe.forEach(t),nor=i(ew),T(VF.$$.fragment,ew),ew.forEach(t),sor=i(il),so=n(il,"DIV",{class:!0});var _a=s(so);T(ty.$$.fragment,_a),lor=i(_a),v1e=n(_a,"P",{});var S7t=s(v1e);ior=r(S7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S7t.forEach(t),dor=i(_a),Xa=n(_a,"P",{});var ow=s(Xa);cor=r(ow,"The model class to instantiate is selected based on the "),F1e=n(ow,"CODE",{});var R7t=s(F1e);mor=r(R7t,"model_type"),R7t.forEach(t),gor=r(ow,` property of the config object (either
passed as an argument or loaded from `),T1e=n(ow,"CODE",{});var P7t=s(T1e);hor=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),por=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(ow,"CODE",{});var B7t=s(M1e);_or=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),uor=r(ow,":"),ow.forEach(t),bor=i(_a),E1e=n(_a,"UL",{});var I7t=s(E1e);XF=n(I7t,"LI",{});var DPe=s(XF);C1e=n(DPe,"STRONG",{});var N7t=s(C1e);vor=r(N7t,"tapas"),N7t.forEach(t),For=r(DPe," \u2014 "),cW=n(DPe,"A",{href:!0});var q7t=s(cW);Tor=r(q7t,"TapasForQuestionAnswering"),q7t.forEach(t),Mor=r(DPe," (TAPAS model)"),DPe.forEach(t),I7t.forEach(t),Eor=i(_a),zF=n(_a,"P",{});var GPe=s(zF);Cor=r(GPe,"The model is set in evaluation mode by default using "),w1e=n(GPe,"CODE",{});var j7t=s(w1e);wor=r(j7t,"model.eval()"),j7t.forEach(t),Aor=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=n(GPe,"CODE",{});var D7t=s(A1e);Lor=r(D7t,"model.train()"),D7t.forEach(t),GPe.forEach(t),yor=i(_a),T(WF.$$.fragment,_a),_a.forEach(t),il.forEach(t),xOe=i(f),_d=n(f,"H2",{class:!0});var BXe=s(_d);QF=n(BXe,"A",{id:!0,class:!0,href:!0});var G7t=s(QF);L1e=n(G7t,"SPAN",{});var O7t=s(L1e);T(ay.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),xor=i(BXe),y1e=n(BXe,"SPAN",{});var V7t=s(y1e);$or=r(V7t,"AutoModelForImageClassification"),V7t.forEach(t),BXe.forEach(t),$Oe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(ny.$$.fragment,dl),kor=i(dl),ud=n(dl,"P",{});var Qoe=s(ud);Sor=r(Qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fW=n(Qoe,"A",{href:!0});var X7t=s(fW);Ror=r(X7t,"from_pretrained()"),X7t.forEach(t),Por=r(Qoe," class method or the "),mW=n(Qoe,"A",{href:!0});var z7t=s(mW);Bor=r(z7t,"from_config()"),z7t.forEach(t),Ior=r(Qoe,` class
method.`),Qoe.forEach(t),Nor=i(dl),sy=n(dl,"P",{});var IXe=s(sy);qor=r(IXe,"This class cannot be instantiated directly using "),x1e=n(IXe,"CODE",{});var W7t=s(x1e);jor=r(W7t,"__init__()"),W7t.forEach(t),Dor=r(IXe," (throws an error)."),IXe.forEach(t),Gor=i(dl),ut=n(dl,"DIV",{class:!0});var rw=s(ut);T(ly.$$.fragment,rw),Oor=i(rw),$1e=n(rw,"P",{});var Q7t=s($1e);Vor=r(Q7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Q7t.forEach(t),Xor=i(rw),bd=n(rw,"P",{});var Hoe=s(bd);zor=r(Hoe,`Note:
Loading a model from its configuration file does `),k1e=n(Hoe,"STRONG",{});var H7t=s(k1e);Wor=r(H7t,"not"),H7t.forEach(t),Qor=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(Hoe,"A",{href:!0});var U7t=s(gW);Hor=r(U7t,"from_pretrained()"),U7t.forEach(t),Uor=r(Hoe," to load the model weights."),Hoe.forEach(t),Jor=i(rw),T(HF.$$.fragment,rw),rw.forEach(t),Yor=i(dl),lo=n(dl,"DIV",{class:!0});var ua=s(lo);T(iy.$$.fragment,ua),Kor=i(ua),S1e=n(ua,"P",{});var J7t=s(S1e);Zor=r(J7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),J7t.forEach(t),err=i(ua),za=n(ua,"P",{});var tw=s(za);orr=r(tw,"The model class to instantiate is selected based on the "),R1e=n(tw,"CODE",{});var Y7t=s(R1e);rrr=r(Y7t,"model_type"),Y7t.forEach(t),trr=r(tw,` property of the config object (either
passed as an argument or loaded from `),P1e=n(tw,"CODE",{});var K7t=s(P1e);arr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),nrr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(tw,"CODE",{});var Z7t=s(B1e);srr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),lrr=r(tw,":"),tw.forEach(t),irr=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);UF=n(Te,"LI",{});var OPe=s(UF);I1e=n(OPe,"STRONG",{});var e8t=s(I1e);drr=r(e8t,"beit"),e8t.forEach(t),crr=r(OPe," \u2014 "),hW=n(OPe,"A",{href:!0});var o8t=s(hW);frr=r(o8t,"BeitForImageClassification"),o8t.forEach(t),mrr=r(OPe," (BEiT model)"),OPe.forEach(t),grr=i(Te),JF=n(Te,"LI",{});var VPe=s(JF);N1e=n(VPe,"STRONG",{});var r8t=s(N1e);hrr=r(r8t,"convnext"),r8t.forEach(t),prr=r(VPe," \u2014 "),pW=n(VPe,"A",{href:!0});var t8t=s(pW);_rr=r(t8t,"ConvNextForImageClassification"),t8t.forEach(t),urr=r(VPe," (ConvNeXT model)"),VPe.forEach(t),brr=i(Te),YF=n(Te,"LI",{});var XPe=s(YF);q1e=n(XPe,"STRONG",{});var a8t=s(q1e);vrr=r(a8t,"cvt"),a8t.forEach(t),Frr=r(XPe," \u2014 "),_W=n(XPe,"A",{href:!0});var n8t=s(_W);Trr=r(n8t,"CvtForImageClassification"),n8t.forEach(t),Mrr=r(XPe," (CvT model)"),XPe.forEach(t),Err=i(Te),KF=n(Te,"LI",{});var zPe=s(KF);j1e=n(zPe,"STRONG",{});var s8t=s(j1e);Crr=r(s8t,"data2vec-vision"),s8t.forEach(t),wrr=r(zPe," \u2014 "),uW=n(zPe,"A",{href:!0});var l8t=s(uW);Arr=r(l8t,"Data2VecVisionForImageClassification"),l8t.forEach(t),Lrr=r(zPe," (Data2VecVision model)"),zPe.forEach(t),yrr=i(Te),Xs=n(Te,"LI",{});var oS=s(Xs);D1e=n(oS,"STRONG",{});var i8t=s(D1e);xrr=r(i8t,"deit"),i8t.forEach(t),$rr=r(oS," \u2014 "),bW=n(oS,"A",{href:!0});var d8t=s(bW);krr=r(d8t,"DeiTForImageClassification"),d8t.forEach(t),Srr=r(oS," or "),vW=n(oS,"A",{href:!0});var c8t=s(vW);Rrr=r(c8t,"DeiTForImageClassificationWithTeacher"),c8t.forEach(t),Prr=r(oS," (DeiT model)"),oS.forEach(t),Brr=i(Te),ZF=n(Te,"LI",{});var WPe=s(ZF);G1e=n(WPe,"STRONG",{});var f8t=s(G1e);Irr=r(f8t,"imagegpt"),f8t.forEach(t),Nrr=r(WPe," \u2014 "),FW=n(WPe,"A",{href:!0});var m8t=s(FW);qrr=r(m8t,"ImageGPTForImageClassification"),m8t.forEach(t),jrr=r(WPe," (ImageGPT model)"),WPe.forEach(t),Drr=i(Te),zs=n(Te,"LI",{});var rS=s(zs);O1e=n(rS,"STRONG",{});var g8t=s(O1e);Grr=r(g8t,"levit"),g8t.forEach(t),Orr=r(rS," \u2014 "),TW=n(rS,"A",{href:!0});var h8t=s(TW);Vrr=r(h8t,"LevitForImageClassification"),h8t.forEach(t),Xrr=r(rS," or "),MW=n(rS,"A",{href:!0});var p8t=s(MW);zrr=r(p8t,"LevitForImageClassificationWithTeacher"),p8t.forEach(t),Wrr=r(rS," (LeViT model)"),rS.forEach(t),Qrr=i(Te),bt=n(Te,"LI",{});var xf=s(bt);V1e=n(xf,"STRONG",{});var _8t=s(V1e);Hrr=r(_8t,"perceiver"),_8t.forEach(t),Urr=r(xf," \u2014 "),EW=n(xf,"A",{href:!0});var u8t=s(EW);Jrr=r(u8t,"PerceiverForImageClassificationLearned"),u8t.forEach(t),Yrr=r(xf," or "),CW=n(xf,"A",{href:!0});var b8t=s(CW);Krr=r(b8t,"PerceiverForImageClassificationFourier"),b8t.forEach(t),Zrr=r(xf," or "),wW=n(xf,"A",{href:!0});var v8t=s(wW);etr=r(v8t,"PerceiverForImageClassificationConvProcessing"),v8t.forEach(t),otr=r(xf," (Perceiver model)"),xf.forEach(t),rtr=i(Te),e6=n(Te,"LI",{});var QPe=s(e6);X1e=n(QPe,"STRONG",{});var F8t=s(X1e);ttr=r(F8t,"poolformer"),F8t.forEach(t),atr=r(QPe," \u2014 "),AW=n(QPe,"A",{href:!0});var T8t=s(AW);ntr=r(T8t,"PoolFormerForImageClassification"),T8t.forEach(t),str=r(QPe," (PoolFormer model)"),QPe.forEach(t),ltr=i(Te),o6=n(Te,"LI",{});var HPe=s(o6);z1e=n(HPe,"STRONG",{});var M8t=s(z1e);itr=r(M8t,"regnet"),M8t.forEach(t),dtr=r(HPe," \u2014 "),LW=n(HPe,"A",{href:!0});var E8t=s(LW);ctr=r(E8t,"RegNetForImageClassification"),E8t.forEach(t),ftr=r(HPe," (RegNet model)"),HPe.forEach(t),mtr=i(Te),r6=n(Te,"LI",{});var UPe=s(r6);W1e=n(UPe,"STRONG",{});var C8t=s(W1e);gtr=r(C8t,"resnet"),C8t.forEach(t),htr=r(UPe," \u2014 "),yW=n(UPe,"A",{href:!0});var w8t=s(yW);ptr=r(w8t,"ResNetForImageClassification"),w8t.forEach(t),_tr=r(UPe," (ResNet model)"),UPe.forEach(t),utr=i(Te),t6=n(Te,"LI",{});var JPe=s(t6);Q1e=n(JPe,"STRONG",{});var A8t=s(Q1e);btr=r(A8t,"segformer"),A8t.forEach(t),vtr=r(JPe," \u2014 "),xW=n(JPe,"A",{href:!0});var L8t=s(xW);Ftr=r(L8t,"SegformerForImageClassification"),L8t.forEach(t),Ttr=r(JPe," (SegFormer model)"),JPe.forEach(t),Mtr=i(Te),a6=n(Te,"LI",{});var YPe=s(a6);H1e=n(YPe,"STRONG",{});var y8t=s(H1e);Etr=r(y8t,"swin"),y8t.forEach(t),Ctr=r(YPe," \u2014 "),$W=n(YPe,"A",{href:!0});var x8t=s($W);wtr=r(x8t,"SwinForImageClassification"),x8t.forEach(t),Atr=r(YPe," (Swin Transformer model)"),YPe.forEach(t),Ltr=i(Te),n6=n(Te,"LI",{});var KPe=s(n6);U1e=n(KPe,"STRONG",{});var $8t=s(U1e);ytr=r($8t,"van"),$8t.forEach(t),xtr=r(KPe," \u2014 "),kW=n(KPe,"A",{href:!0});var k8t=s(kW);$tr=r(k8t,"VanForImageClassification"),k8t.forEach(t),ktr=r(KPe," (VAN model)"),KPe.forEach(t),Str=i(Te),s6=n(Te,"LI",{});var ZPe=s(s6);J1e=n(ZPe,"STRONG",{});var S8t=s(J1e);Rtr=r(S8t,"vit"),S8t.forEach(t),Ptr=r(ZPe," \u2014 "),SW=n(ZPe,"A",{href:!0});var R8t=s(SW);Btr=r(R8t,"ViTForImageClassification"),R8t.forEach(t),Itr=r(ZPe," (ViT model)"),ZPe.forEach(t),Te.forEach(t),Ntr=i(ua),l6=n(ua,"P",{});var eBe=s(l6);qtr=r(eBe,"The model is set in evaluation mode by default using "),Y1e=n(eBe,"CODE",{});var P8t=s(Y1e);jtr=r(P8t,"model.eval()"),P8t.forEach(t),Dtr=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(eBe,"CODE",{});var B8t=s(K1e);Gtr=r(B8t,"model.train()"),B8t.forEach(t),eBe.forEach(t),Otr=i(ua),T(i6.$$.fragment,ua),ua.forEach(t),dl.forEach(t),kOe=i(f),vd=n(f,"H2",{class:!0});var NXe=s(vd);d6=n(NXe,"A",{id:!0,class:!0,href:!0});var I8t=s(d6);Z1e=n(I8t,"SPAN",{});var N8t=s(Z1e);T(dy.$$.fragment,N8t),N8t.forEach(t),I8t.forEach(t),Vtr=i(NXe),e2e=n(NXe,"SPAN",{});var q8t=s(e2e);Xtr=r(q8t,"AutoModelForVision2Seq"),q8t.forEach(t),NXe.forEach(t),SOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(cy.$$.fragment,cl),ztr=i(cl),Fd=n(cl,"P",{});var Uoe=s(Fd);Wtr=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=n(Uoe,"A",{href:!0});var j8t=s(RW);Qtr=r(j8t,"from_pretrained()"),j8t.forEach(t),Htr=r(Uoe," class method or the "),PW=n(Uoe,"A",{href:!0});var D8t=s(PW);Utr=r(D8t,"from_config()"),D8t.forEach(t),Jtr=r(Uoe,` class
method.`),Uoe.forEach(t),Ytr=i(cl),fy=n(cl,"P",{});var qXe=s(fy);Ktr=r(qXe,"This class cannot be instantiated directly using "),o2e=n(qXe,"CODE",{});var G8t=s(o2e);Ztr=r(G8t,"__init__()"),G8t.forEach(t),ear=r(qXe," (throws an error)."),qXe.forEach(t),oar=i(cl),vt=n(cl,"DIV",{class:!0});var aw=s(vt);T(my.$$.fragment,aw),rar=i(aw),r2e=n(aw,"P",{});var O8t=s(r2e);tar=r(O8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O8t.forEach(t),aar=i(aw),Td=n(aw,"P",{});var Joe=s(Td);nar=r(Joe,`Note:
Loading a model from its configuration file does `),t2e=n(Joe,"STRONG",{});var V8t=s(t2e);sar=r(V8t,"not"),V8t.forEach(t),lar=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Joe,"A",{href:!0});var X8t=s(BW);iar=r(X8t,"from_pretrained()"),X8t.forEach(t),dar=r(Joe," to load the model weights."),Joe.forEach(t),car=i(aw),T(c6.$$.fragment,aw),aw.forEach(t),far=i(cl),io=n(cl,"DIV",{class:!0});var ba=s(io);T(gy.$$.fragment,ba),mar=i(ba),a2e=n(ba,"P",{});var z8t=s(a2e);gar=r(z8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z8t.forEach(t),har=i(ba),Wa=n(ba,"P",{});var nw=s(Wa);par=r(nw,"The model class to instantiate is selected based on the "),n2e=n(nw,"CODE",{});var W8t=s(n2e);_ar=r(W8t,"model_type"),W8t.forEach(t),uar=r(nw,` property of the config object (either
passed as an argument or loaded from `),s2e=n(nw,"CODE",{});var Q8t=s(s2e);bar=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),Far=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(nw,"CODE",{});var H8t=s(l2e);Tar=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),Mar=r(nw,":"),nw.forEach(t),Ear=i(ba),i2e=n(ba,"UL",{});var U8t=s(i2e);f6=n(U8t,"LI",{});var oBe=s(f6);d2e=n(oBe,"STRONG",{});var J8t=s(d2e);Car=r(J8t,"vision-encoder-decoder"),J8t.forEach(t),war=r(oBe," \u2014 "),IW=n(oBe,"A",{href:!0});var Y8t=s(IW);Aar=r(Y8t,"VisionEncoderDecoderModel"),Y8t.forEach(t),Lar=r(oBe," (Vision Encoder decoder model)"),oBe.forEach(t),U8t.forEach(t),yar=i(ba),m6=n(ba,"P",{});var rBe=s(m6);xar=r(rBe,"The model is set in evaluation mode by default using "),c2e=n(rBe,"CODE",{});var K8t=s(c2e);$ar=r(K8t,"model.eval()"),K8t.forEach(t),kar=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=n(rBe,"CODE",{});var Z8t=s(f2e);Sar=r(Z8t,"model.train()"),Z8t.forEach(t),rBe.forEach(t),Rar=i(ba),T(g6.$$.fragment,ba),ba.forEach(t),cl.forEach(t),ROe=i(f),Md=n(f,"H2",{class:!0});var jXe=s(Md);h6=n(jXe,"A",{id:!0,class:!0,href:!0});var eMt=s(h6);m2e=n(eMt,"SPAN",{});var oMt=s(m2e);T(hy.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),Par=i(jXe),g2e=n(jXe,"SPAN",{});var rMt=s(g2e);Bar=r(rMt,"AutoModelForVisualQuestionAnswering"),rMt.forEach(t),jXe.forEach(t),POe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(py.$$.fragment,fl),Iar=i(fl),Ed=n(fl,"P",{});var Yoe=s(Ed);Nar=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),NW=n(Yoe,"A",{href:!0});var tMt=s(NW);qar=r(tMt,"from_pretrained()"),tMt.forEach(t),jar=r(Yoe," class method or the "),qW=n(Yoe,"A",{href:!0});var aMt=s(qW);Dar=r(aMt,"from_config()"),aMt.forEach(t),Gar=r(Yoe,` class
method.`),Yoe.forEach(t),Oar=i(fl),_y=n(fl,"P",{});var DXe=s(_y);Var=r(DXe,"This class cannot be instantiated directly using "),h2e=n(DXe,"CODE",{});var nMt=s(h2e);Xar=r(nMt,"__init__()"),nMt.forEach(t),zar=r(DXe," (throws an error)."),DXe.forEach(t),War=i(fl),Ft=n(fl,"DIV",{class:!0});var sw=s(Ft);T(uy.$$.fragment,sw),Qar=i(sw),p2e=n(sw,"P",{});var sMt=s(p2e);Har=r(sMt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sMt.forEach(t),Uar=i(sw),Cd=n(sw,"P",{});var Koe=s(Cd);Jar=r(Koe,`Note:
Loading a model from its configuration file does `),_2e=n(Koe,"STRONG",{});var lMt=s(_2e);Yar=r(lMt,"not"),lMt.forEach(t),Kar=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Koe,"A",{href:!0});var iMt=s(jW);Zar=r(iMt,"from_pretrained()"),iMt.forEach(t),enr=r(Koe," to load the model weights."),Koe.forEach(t),onr=i(sw),T(p6.$$.fragment,sw),sw.forEach(t),rnr=i(fl),co=n(fl,"DIV",{class:!0});var va=s(co);T(by.$$.fragment,va),tnr=i(va),u2e=n(va,"P",{});var dMt=s(u2e);anr=r(dMt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dMt.forEach(t),nnr=i(va),Qa=n(va,"P",{});var lw=s(Qa);snr=r(lw,"The model class to instantiate is selected based on the "),b2e=n(lw,"CODE",{});var cMt=s(b2e);lnr=r(cMt,"model_type"),cMt.forEach(t),inr=r(lw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(lw,"CODE",{});var fMt=s(v2e);dnr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),cnr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(lw,"CODE",{});var mMt=s(F2e);fnr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),mnr=r(lw,":"),lw.forEach(t),gnr=i(va),T2e=n(va,"UL",{});var gMt=s(T2e);_6=n(gMt,"LI",{});var tBe=s(_6);M2e=n(tBe,"STRONG",{});var hMt=s(M2e);hnr=r(hMt,"vilt"),hMt.forEach(t),pnr=r(tBe," \u2014 "),DW=n(tBe,"A",{href:!0});var pMt=s(DW);_nr=r(pMt,"ViltForQuestionAnswering"),pMt.forEach(t),unr=r(tBe," (ViLT model)"),tBe.forEach(t),gMt.forEach(t),bnr=i(va),u6=n(va,"P",{});var aBe=s(u6);vnr=r(aBe,"The model is set in evaluation mode by default using "),E2e=n(aBe,"CODE",{});var _Mt=s(E2e);Fnr=r(_Mt,"model.eval()"),_Mt.forEach(t),Tnr=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=n(aBe,"CODE",{});var uMt=s(C2e);Mnr=r(uMt,"model.train()"),uMt.forEach(t),aBe.forEach(t),Enr=i(va),T(b6.$$.fragment,va),va.forEach(t),fl.forEach(t),BOe=i(f),wd=n(f,"H2",{class:!0});var GXe=s(wd);v6=n(GXe,"A",{id:!0,class:!0,href:!0});var bMt=s(v6);w2e=n(bMt,"SPAN",{});var vMt=s(w2e);T(vy.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),Cnr=i(GXe),A2e=n(GXe,"SPAN",{});var FMt=s(A2e);wnr=r(FMt,"AutoModelForAudioClassification"),FMt.forEach(t),GXe.forEach(t),IOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(Fy.$$.fragment,ml),Anr=i(ml),Ad=n(ml,"P",{});var Zoe=s(Ad);Lnr=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=n(Zoe,"A",{href:!0});var TMt=s(GW);ynr=r(TMt,"from_pretrained()"),TMt.forEach(t),xnr=r(Zoe," class method or the "),OW=n(Zoe,"A",{href:!0});var MMt=s(OW);$nr=r(MMt,"from_config()"),MMt.forEach(t),knr=r(Zoe,` class
method.`),Zoe.forEach(t),Snr=i(ml),Ty=n(ml,"P",{});var OXe=s(Ty);Rnr=r(OXe,"This class cannot be instantiated directly using "),L2e=n(OXe,"CODE",{});var EMt=s(L2e);Pnr=r(EMt,"__init__()"),EMt.forEach(t),Bnr=r(OXe," (throws an error)."),OXe.forEach(t),Inr=i(ml),Tt=n(ml,"DIV",{class:!0});var iw=s(Tt);T(My.$$.fragment,iw),Nnr=i(iw),y2e=n(iw,"P",{});var CMt=s(y2e);qnr=r(CMt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),CMt.forEach(t),jnr=i(iw),Ld=n(iw,"P",{});var ere=s(Ld);Dnr=r(ere,`Note:
Loading a model from its configuration file does `),x2e=n(ere,"STRONG",{});var wMt=s(x2e);Gnr=r(wMt,"not"),wMt.forEach(t),Onr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(ere,"A",{href:!0});var AMt=s(VW);Vnr=r(AMt,"from_pretrained()"),AMt.forEach(t),Xnr=r(ere," to load the model weights."),ere.forEach(t),znr=i(iw),T(F6.$$.fragment,iw),iw.forEach(t),Wnr=i(ml),fo=n(ml,"DIV",{class:!0});var Fa=s(fo);T(Ey.$$.fragment,Fa),Qnr=i(Fa),$2e=n(Fa,"P",{});var LMt=s($2e);Hnr=r(LMt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),LMt.forEach(t),Unr=i(Fa),Ha=n(Fa,"P",{});var dw=s(Ha);Jnr=r(dw,"The model class to instantiate is selected based on the "),k2e=n(dw,"CODE",{});var yMt=s(k2e);Ynr=r(yMt,"model_type"),yMt.forEach(t),Knr=r(dw,` property of the config object (either
passed as an argument or loaded from `),S2e=n(dw,"CODE",{});var xMt=s(S2e);Znr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),esr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(dw,"CODE",{});var $Mt=s(R2e);osr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),rsr=r(dw,":"),dw.forEach(t),tsr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);T6=n(ze,"LI",{});var nBe=s(T6);P2e=n(nBe,"STRONG",{});var kMt=s(P2e);asr=r(kMt,"data2vec-audio"),kMt.forEach(t),nsr=r(nBe," \u2014 "),XW=n(nBe,"A",{href:!0});var SMt=s(XW);ssr=r(SMt,"Data2VecAudioForSequenceClassification"),SMt.forEach(t),lsr=r(nBe," (Data2VecAudio model)"),nBe.forEach(t),isr=i(ze),M6=n(ze,"LI",{});var sBe=s(M6);B2e=n(sBe,"STRONG",{});var RMt=s(B2e);dsr=r(RMt,"hubert"),RMt.forEach(t),csr=r(sBe," \u2014 "),zW=n(sBe,"A",{href:!0});var PMt=s(zW);fsr=r(PMt,"HubertForSequenceClassification"),PMt.forEach(t),msr=r(sBe," (Hubert model)"),sBe.forEach(t),gsr=i(ze),E6=n(ze,"LI",{});var lBe=s(E6);I2e=n(lBe,"STRONG",{});var BMt=s(I2e);hsr=r(BMt,"sew"),BMt.forEach(t),psr=r(lBe," \u2014 "),WW=n(lBe,"A",{href:!0});var IMt=s(WW);_sr=r(IMt,"SEWForSequenceClassification"),IMt.forEach(t),usr=r(lBe," (SEW model)"),lBe.forEach(t),bsr=i(ze),C6=n(ze,"LI",{});var iBe=s(C6);N2e=n(iBe,"STRONG",{});var NMt=s(N2e);vsr=r(NMt,"sew-d"),NMt.forEach(t),Fsr=r(iBe," \u2014 "),QW=n(iBe,"A",{href:!0});var qMt=s(QW);Tsr=r(qMt,"SEWDForSequenceClassification"),qMt.forEach(t),Msr=r(iBe," (SEW-D model)"),iBe.forEach(t),Esr=i(ze),w6=n(ze,"LI",{});var dBe=s(w6);q2e=n(dBe,"STRONG",{});var jMt=s(q2e);Csr=r(jMt,"unispeech"),jMt.forEach(t),wsr=r(dBe," \u2014 "),HW=n(dBe,"A",{href:!0});var DMt=s(HW);Asr=r(DMt,"UniSpeechForSequenceClassification"),DMt.forEach(t),Lsr=r(dBe," (UniSpeech model)"),dBe.forEach(t),ysr=i(ze),A6=n(ze,"LI",{});var cBe=s(A6);j2e=n(cBe,"STRONG",{});var GMt=s(j2e);xsr=r(GMt,"unispeech-sat"),GMt.forEach(t),$sr=r(cBe," \u2014 "),UW=n(cBe,"A",{href:!0});var OMt=s(UW);ksr=r(OMt,"UniSpeechSatForSequenceClassification"),OMt.forEach(t),Ssr=r(cBe," (UniSpeechSat model)"),cBe.forEach(t),Rsr=i(ze),L6=n(ze,"LI",{});var fBe=s(L6);D2e=n(fBe,"STRONG",{});var VMt=s(D2e);Psr=r(VMt,"wav2vec2"),VMt.forEach(t),Bsr=r(fBe," \u2014 "),JW=n(fBe,"A",{href:!0});var XMt=s(JW);Isr=r(XMt,"Wav2Vec2ForSequenceClassification"),XMt.forEach(t),Nsr=r(fBe," (Wav2Vec2 model)"),fBe.forEach(t),qsr=i(ze),y6=n(ze,"LI",{});var mBe=s(y6);G2e=n(mBe,"STRONG",{});var zMt=s(G2e);jsr=r(zMt,"wav2vec2-conformer"),zMt.forEach(t),Dsr=r(mBe," \u2014 "),YW=n(mBe,"A",{href:!0});var WMt=s(YW);Gsr=r(WMt,"Wav2Vec2ConformerForSequenceClassification"),WMt.forEach(t),Osr=r(mBe," (Wav2Vec2-Conformer model)"),mBe.forEach(t),Vsr=i(ze),x6=n(ze,"LI",{});var gBe=s(x6);O2e=n(gBe,"STRONG",{});var QMt=s(O2e);Xsr=r(QMt,"wavlm"),QMt.forEach(t),zsr=r(gBe," \u2014 "),KW=n(gBe,"A",{href:!0});var HMt=s(KW);Wsr=r(HMt,"WavLMForSequenceClassification"),HMt.forEach(t),Qsr=r(gBe," (WavLM model)"),gBe.forEach(t),ze.forEach(t),Hsr=i(Fa),$6=n(Fa,"P",{});var hBe=s($6);Usr=r(hBe,"The model is set in evaluation mode by default using "),V2e=n(hBe,"CODE",{});var UMt=s(V2e);Jsr=r(UMt,"model.eval()"),UMt.forEach(t),Ysr=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=n(hBe,"CODE",{});var JMt=s(X2e);Ksr=r(JMt,"model.train()"),JMt.forEach(t),hBe.forEach(t),Zsr=i(Fa),T(k6.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),NOe=i(f),yd=n(f,"H2",{class:!0});var VXe=s(yd);S6=n(VXe,"A",{id:!0,class:!0,href:!0});var YMt=s(S6);z2e=n(YMt,"SPAN",{});var KMt=s(z2e);T(Cy.$$.fragment,KMt),KMt.forEach(t),YMt.forEach(t),elr=i(VXe),W2e=n(VXe,"SPAN",{});var ZMt=s(W2e);olr=r(ZMt,"AutoModelForAudioFrameClassification"),ZMt.forEach(t),VXe.forEach(t),qOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(wy.$$.fragment,gl),rlr=i(gl),xd=n(gl,"P",{});var ore=s(xd);tlr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=n(ore,"A",{href:!0});var eEt=s(ZW);alr=r(eEt,"from_pretrained()"),eEt.forEach(t),nlr=r(ore," class method or the "),eQ=n(ore,"A",{href:!0});var oEt=s(eQ);slr=r(oEt,"from_config()"),oEt.forEach(t),llr=r(ore,` class
method.`),ore.forEach(t),ilr=i(gl),Ay=n(gl,"P",{});var XXe=s(Ay);dlr=r(XXe,"This class cannot be instantiated directly using "),Q2e=n(XXe,"CODE",{});var rEt=s(Q2e);clr=r(rEt,"__init__()"),rEt.forEach(t),flr=r(XXe," (throws an error)."),XXe.forEach(t),mlr=i(gl),Mt=n(gl,"DIV",{class:!0});var cw=s(Mt);T(Ly.$$.fragment,cw),glr=i(cw),H2e=n(cw,"P",{});var tEt=s(H2e);hlr=r(tEt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tEt.forEach(t),plr=i(cw),$d=n(cw,"P",{});var rre=s($d);_lr=r(rre,`Note:
Loading a model from its configuration file does `),U2e=n(rre,"STRONG",{});var aEt=s(U2e);ulr=r(aEt,"not"),aEt.forEach(t),blr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(rre,"A",{href:!0});var nEt=s(oQ);vlr=r(nEt,"from_pretrained()"),nEt.forEach(t),Flr=r(rre," to load the model weights."),rre.forEach(t),Tlr=i(cw),T(R6.$$.fragment,cw),cw.forEach(t),Mlr=i(gl),mo=n(gl,"DIV",{class:!0});var Ta=s(mo);T(yy.$$.fragment,Ta),Elr=i(Ta),J2e=n(Ta,"P",{});var sEt=s(J2e);Clr=r(sEt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sEt.forEach(t),wlr=i(Ta),Ua=n(Ta,"P",{});var fw=s(Ua);Alr=r(fw,"The model class to instantiate is selected based on the "),Y2e=n(fw,"CODE",{});var lEt=s(Y2e);Llr=r(lEt,"model_type"),lEt.forEach(t),ylr=r(fw,` property of the config object (either
passed as an argument or loaded from `),K2e=n(fw,"CODE",{});var iEt=s(K2e);xlr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),$lr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(fw,"CODE",{});var dEt=s(Z2e);klr=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),Slr=r(fw,":"),fw.forEach(t),Rlr=i(Ta),et=n(Ta,"UL",{});var hl=s(et);P6=n(hl,"LI",{});var pBe=s(P6);ebe=n(pBe,"STRONG",{});var cEt=s(ebe);Plr=r(cEt,"data2vec-audio"),cEt.forEach(t),Blr=r(pBe," \u2014 "),rQ=n(pBe,"A",{href:!0});var fEt=s(rQ);Ilr=r(fEt,"Data2VecAudioForAudioFrameClassification"),fEt.forEach(t),Nlr=r(pBe," (Data2VecAudio model)"),pBe.forEach(t),qlr=i(hl),B6=n(hl,"LI",{});var _Be=s(B6);obe=n(_Be,"STRONG",{});var mEt=s(obe);jlr=r(mEt,"unispeech-sat"),mEt.forEach(t),Dlr=r(_Be," \u2014 "),tQ=n(_Be,"A",{href:!0});var gEt=s(tQ);Glr=r(gEt,"UniSpeechSatForAudioFrameClassification"),gEt.forEach(t),Olr=r(_Be," (UniSpeechSat model)"),_Be.forEach(t),Vlr=i(hl),I6=n(hl,"LI",{});var uBe=s(I6);rbe=n(uBe,"STRONG",{});var hEt=s(rbe);Xlr=r(hEt,"wav2vec2"),hEt.forEach(t),zlr=r(uBe," \u2014 "),aQ=n(uBe,"A",{href:!0});var pEt=s(aQ);Wlr=r(pEt,"Wav2Vec2ForAudioFrameClassification"),pEt.forEach(t),Qlr=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),Hlr=i(hl),N6=n(hl,"LI",{});var bBe=s(N6);tbe=n(bBe,"STRONG",{});var _Et=s(tbe);Ulr=r(_Et,"wav2vec2-conformer"),_Et.forEach(t),Jlr=r(bBe," \u2014 "),nQ=n(bBe,"A",{href:!0});var uEt=s(nQ);Ylr=r(uEt,"Wav2Vec2ConformerForAudioFrameClassification"),uEt.forEach(t),Klr=r(bBe," (Wav2Vec2-Conformer model)"),bBe.forEach(t),Zlr=i(hl),q6=n(hl,"LI",{});var vBe=s(q6);abe=n(vBe,"STRONG",{});var bEt=s(abe);eir=r(bEt,"wavlm"),bEt.forEach(t),oir=r(vBe," \u2014 "),sQ=n(vBe,"A",{href:!0});var vEt=s(sQ);rir=r(vEt,"WavLMForAudioFrameClassification"),vEt.forEach(t),tir=r(vBe," (WavLM model)"),vBe.forEach(t),hl.forEach(t),air=i(Ta),j6=n(Ta,"P",{});var FBe=s(j6);nir=r(FBe,"The model is set in evaluation mode by default using "),nbe=n(FBe,"CODE",{});var FEt=s(nbe);sir=r(FEt,"model.eval()"),FEt.forEach(t),lir=r(FBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(FBe,"CODE",{});var TEt=s(sbe);iir=r(TEt,"model.train()"),TEt.forEach(t),FBe.forEach(t),dir=i(Ta),T(D6.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),jOe=i(f),kd=n(f,"H2",{class:!0});var zXe=s(kd);G6=n(zXe,"A",{id:!0,class:!0,href:!0});var MEt=s(G6);lbe=n(MEt,"SPAN",{});var EEt=s(lbe);T(xy.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),cir=i(zXe),ibe=n(zXe,"SPAN",{});var CEt=s(ibe);fir=r(CEt,"AutoModelForCTC"),CEt.forEach(t),zXe.forEach(t),DOe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T($y.$$.fragment,pl),mir=i(pl),Sd=n(pl,"P",{});var tre=s(Sd);gir=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lQ=n(tre,"A",{href:!0});var wEt=s(lQ);hir=r(wEt,"from_pretrained()"),wEt.forEach(t),pir=r(tre," class method or the "),iQ=n(tre,"A",{href:!0});var AEt=s(iQ);_ir=r(AEt,"from_config()"),AEt.forEach(t),uir=r(tre,` class
method.`),tre.forEach(t),bir=i(pl),ky=n(pl,"P",{});var WXe=s(ky);vir=r(WXe,"This class cannot be instantiated directly using "),dbe=n(WXe,"CODE",{});var LEt=s(dbe);Fir=r(LEt,"__init__()"),LEt.forEach(t),Tir=r(WXe," (throws an error)."),WXe.forEach(t),Mir=i(pl),Et=n(pl,"DIV",{class:!0});var mw=s(Et);T(Sy.$$.fragment,mw),Eir=i(mw),cbe=n(mw,"P",{});var yEt=s(cbe);Cir=r(yEt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yEt.forEach(t),wir=i(mw),Rd=n(mw,"P",{});var are=s(Rd);Air=r(are,`Note:
Loading a model from its configuration file does `),fbe=n(are,"STRONG",{});var xEt=s(fbe);Lir=r(xEt,"not"),xEt.forEach(t),yir=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(are,"A",{href:!0});var $Et=s(dQ);xir=r($Et,"from_pretrained()"),$Et.forEach(t),$ir=r(are," to load the model weights."),are.forEach(t),kir=i(mw),T(O6.$$.fragment,mw),mw.forEach(t),Sir=i(pl),go=n(pl,"DIV",{class:!0});var Ma=s(go);T(Ry.$$.fragment,Ma),Rir=i(Ma),mbe=n(Ma,"P",{});var kEt=s(mbe);Pir=r(kEt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kEt.forEach(t),Bir=i(Ma),Ja=n(Ma,"P",{});var gw=s(Ja);Iir=r(gw,"The model class to instantiate is selected based on the "),gbe=n(gw,"CODE",{});var SEt=s(gbe);Nir=r(SEt,"model_type"),SEt.forEach(t),qir=r(gw,` property of the config object (either
passed as an argument or loaded from `),hbe=n(gw,"CODE",{});var REt=s(hbe);jir=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Dir=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(gw,"CODE",{});var PEt=s(pbe);Gir=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),Oir=r(gw,":"),gw.forEach(t),Vir=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);V6=n(Be,"LI",{});var TBe=s(V6);_be=n(TBe,"STRONG",{});var BEt=s(_be);Xir=r(BEt,"data2vec-audio"),BEt.forEach(t),zir=r(TBe," \u2014 "),cQ=n(TBe,"A",{href:!0});var IEt=s(cQ);Wir=r(IEt,"Data2VecAudioForCTC"),IEt.forEach(t),Qir=r(TBe," (Data2VecAudio model)"),TBe.forEach(t),Hir=i(Be),X6=n(Be,"LI",{});var MBe=s(X6);ube=n(MBe,"STRONG",{});var NEt=s(ube);Uir=r(NEt,"hubert"),NEt.forEach(t),Jir=r(MBe," \u2014 "),fQ=n(MBe,"A",{href:!0});var qEt=s(fQ);Yir=r(qEt,"HubertForCTC"),qEt.forEach(t),Kir=r(MBe," (Hubert model)"),MBe.forEach(t),Zir=i(Be),z6=n(Be,"LI",{});var EBe=s(z6);bbe=n(EBe,"STRONG",{});var jEt=s(bbe);edr=r(jEt,"mctct"),jEt.forEach(t),odr=r(EBe," \u2014 "),mQ=n(EBe,"A",{href:!0});var DEt=s(mQ);rdr=r(DEt,"MCTCTForCTC"),DEt.forEach(t),tdr=r(EBe," (M-CTC-T model)"),EBe.forEach(t),adr=i(Be),W6=n(Be,"LI",{});var CBe=s(W6);vbe=n(CBe,"STRONG",{});var GEt=s(vbe);ndr=r(GEt,"sew"),GEt.forEach(t),sdr=r(CBe," \u2014 "),gQ=n(CBe,"A",{href:!0});var OEt=s(gQ);ldr=r(OEt,"SEWForCTC"),OEt.forEach(t),idr=r(CBe," (SEW model)"),CBe.forEach(t),ddr=i(Be),Q6=n(Be,"LI",{});var wBe=s(Q6);Fbe=n(wBe,"STRONG",{});var VEt=s(Fbe);cdr=r(VEt,"sew-d"),VEt.forEach(t),fdr=r(wBe," \u2014 "),hQ=n(wBe,"A",{href:!0});var XEt=s(hQ);mdr=r(XEt,"SEWDForCTC"),XEt.forEach(t),gdr=r(wBe," (SEW-D model)"),wBe.forEach(t),hdr=i(Be),H6=n(Be,"LI",{});var ABe=s(H6);Tbe=n(ABe,"STRONG",{});var zEt=s(Tbe);pdr=r(zEt,"unispeech"),zEt.forEach(t),_dr=r(ABe," \u2014 "),pQ=n(ABe,"A",{href:!0});var WEt=s(pQ);udr=r(WEt,"UniSpeechForCTC"),WEt.forEach(t),bdr=r(ABe," (UniSpeech model)"),ABe.forEach(t),vdr=i(Be),U6=n(Be,"LI",{});var LBe=s(U6);Mbe=n(LBe,"STRONG",{});var QEt=s(Mbe);Fdr=r(QEt,"unispeech-sat"),QEt.forEach(t),Tdr=r(LBe," \u2014 "),_Q=n(LBe,"A",{href:!0});var HEt=s(_Q);Mdr=r(HEt,"UniSpeechSatForCTC"),HEt.forEach(t),Edr=r(LBe," (UniSpeechSat model)"),LBe.forEach(t),Cdr=i(Be),J6=n(Be,"LI",{});var yBe=s(J6);Ebe=n(yBe,"STRONG",{});var UEt=s(Ebe);wdr=r(UEt,"wav2vec2"),UEt.forEach(t),Adr=r(yBe," \u2014 "),uQ=n(yBe,"A",{href:!0});var JEt=s(uQ);Ldr=r(JEt,"Wav2Vec2ForCTC"),JEt.forEach(t),ydr=r(yBe," (Wav2Vec2 model)"),yBe.forEach(t),xdr=i(Be),Y6=n(Be,"LI",{});var xBe=s(Y6);Cbe=n(xBe,"STRONG",{});var YEt=s(Cbe);$dr=r(YEt,"wav2vec2-conformer"),YEt.forEach(t),kdr=r(xBe," \u2014 "),bQ=n(xBe,"A",{href:!0});var KEt=s(bQ);Sdr=r(KEt,"Wav2Vec2ConformerForCTC"),KEt.forEach(t),Rdr=r(xBe," (Wav2Vec2-Conformer model)"),xBe.forEach(t),Pdr=i(Be),K6=n(Be,"LI",{});var $Be=s(K6);wbe=n($Be,"STRONG",{});var ZEt=s(wbe);Bdr=r(ZEt,"wavlm"),ZEt.forEach(t),Idr=r($Be," \u2014 "),vQ=n($Be,"A",{href:!0});var e4t=s(vQ);Ndr=r(e4t,"WavLMForCTC"),e4t.forEach(t),qdr=r($Be," (WavLM model)"),$Be.forEach(t),Be.forEach(t),jdr=i(Ma),Z6=n(Ma,"P",{});var kBe=s(Z6);Ddr=r(kBe,"The model is set in evaluation mode by default using "),Abe=n(kBe,"CODE",{});var o4t=s(Abe);Gdr=r(o4t,"model.eval()"),o4t.forEach(t),Odr=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(kBe,"CODE",{});var r4t=s(Lbe);Vdr=r(r4t,"model.train()"),r4t.forEach(t),kBe.forEach(t),Xdr=i(Ma),T(eT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),GOe=i(f),Pd=n(f,"H2",{class:!0});var QXe=s(Pd);oT=n(QXe,"A",{id:!0,class:!0,href:!0});var t4t=s(oT);ybe=n(t4t,"SPAN",{});var a4t=s(ybe);T(Py.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),zdr=i(QXe),xbe=n(QXe,"SPAN",{});var n4t=s(xbe);Wdr=r(n4t,"AutoModelForSpeechSeq2Seq"),n4t.forEach(t),QXe.forEach(t),OOe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(By.$$.fragment,_l),Qdr=i(_l),Bd=n(_l,"P",{});var nre=s(Bd);Hdr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=n(nre,"A",{href:!0});var s4t=s(FQ);Udr=r(s4t,"from_pretrained()"),s4t.forEach(t),Jdr=r(nre," class method or the "),TQ=n(nre,"A",{href:!0});var l4t=s(TQ);Ydr=r(l4t,"from_config()"),l4t.forEach(t),Kdr=r(nre,` class
method.`),nre.forEach(t),Zdr=i(_l),Iy=n(_l,"P",{});var HXe=s(Iy);ecr=r(HXe,"This class cannot be instantiated directly using "),$be=n(HXe,"CODE",{});var i4t=s($be);ocr=r(i4t,"__init__()"),i4t.forEach(t),rcr=r(HXe," (throws an error)."),HXe.forEach(t),tcr=i(_l),Ct=n(_l,"DIV",{class:!0});var hw=s(Ct);T(Ny.$$.fragment,hw),acr=i(hw),kbe=n(hw,"P",{});var d4t=s(kbe);ncr=r(d4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d4t.forEach(t),scr=i(hw),Id=n(hw,"P",{});var sre=s(Id);lcr=r(sre,`Note:
Loading a model from its configuration file does `),Sbe=n(sre,"STRONG",{});var c4t=s(Sbe);icr=r(c4t,"not"),c4t.forEach(t),dcr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(sre,"A",{href:!0});var f4t=s(MQ);ccr=r(f4t,"from_pretrained()"),f4t.forEach(t),fcr=r(sre," to load the model weights."),sre.forEach(t),mcr=i(hw),T(rT.$$.fragment,hw),hw.forEach(t),gcr=i(_l),ho=n(_l,"DIV",{class:!0});var Ea=s(ho);T(qy.$$.fragment,Ea),hcr=i(Ea),Rbe=n(Ea,"P",{});var m4t=s(Rbe);pcr=r(m4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m4t.forEach(t),_cr=i(Ea),Ya=n(Ea,"P",{});var pw=s(Ya);ucr=r(pw,"The model class to instantiate is selected based on the "),Pbe=n(pw,"CODE",{});var g4t=s(Pbe);bcr=r(g4t,"model_type"),g4t.forEach(t),vcr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(pw,"CODE",{});var h4t=s(Bbe);Fcr=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),Tcr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(pw,"CODE",{});var p4t=s(Ibe);Mcr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),Ecr=r(pw,":"),pw.forEach(t),Ccr=i(Ea),jy=n(Ea,"UL",{});var UXe=s(jy);tT=n(UXe,"LI",{});var SBe=s(tT);Nbe=n(SBe,"STRONG",{});var _4t=s(Nbe);wcr=r(_4t,"speech-encoder-decoder"),_4t.forEach(t),Acr=r(SBe," \u2014 "),EQ=n(SBe,"A",{href:!0});var u4t=s(EQ);Lcr=r(u4t,"SpeechEncoderDecoderModel"),u4t.forEach(t),ycr=r(SBe," (Speech Encoder decoder model)"),SBe.forEach(t),xcr=i(UXe),aT=n(UXe,"LI",{});var RBe=s(aT);qbe=n(RBe,"STRONG",{});var b4t=s(qbe);$cr=r(b4t,"speech_to_text"),b4t.forEach(t),kcr=r(RBe," \u2014 "),CQ=n(RBe,"A",{href:!0});var v4t=s(CQ);Scr=r(v4t,"Speech2TextForConditionalGeneration"),v4t.forEach(t),Rcr=r(RBe," (Speech2Text model)"),RBe.forEach(t),UXe.forEach(t),Pcr=i(Ea),nT=n(Ea,"P",{});var PBe=s(nT);Bcr=r(PBe,"The model is set in evaluation mode by default using "),jbe=n(PBe,"CODE",{});var F4t=s(jbe);Icr=r(F4t,"model.eval()"),F4t.forEach(t),Ncr=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(PBe,"CODE",{});var T4t=s(Dbe);qcr=r(T4t,"model.train()"),T4t.forEach(t),PBe.forEach(t),jcr=i(Ea),T(sT.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),VOe=i(f),Nd=n(f,"H2",{class:!0});var JXe=s(Nd);lT=n(JXe,"A",{id:!0,class:!0,href:!0});var M4t=s(lT);Gbe=n(M4t,"SPAN",{});var E4t=s(Gbe);T(Dy.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),Dcr=i(JXe),Obe=n(JXe,"SPAN",{});var C4t=s(Obe);Gcr=r(C4t,"AutoModelForAudioXVector"),C4t.forEach(t),JXe.forEach(t),XOe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(Gy.$$.fragment,ul),Ocr=i(ul),qd=n(ul,"P",{});var lre=s(qd);Vcr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wQ=n(lre,"A",{href:!0});var w4t=s(wQ);Xcr=r(w4t,"from_pretrained()"),w4t.forEach(t),zcr=r(lre," class method or the "),AQ=n(lre,"A",{href:!0});var A4t=s(AQ);Wcr=r(A4t,"from_config()"),A4t.forEach(t),Qcr=r(lre,` class
method.`),lre.forEach(t),Hcr=i(ul),Oy=n(ul,"P",{});var YXe=s(Oy);Ucr=r(YXe,"This class cannot be instantiated directly using "),Vbe=n(YXe,"CODE",{});var L4t=s(Vbe);Jcr=r(L4t,"__init__()"),L4t.forEach(t),Ycr=r(YXe," (throws an error)."),YXe.forEach(t),Kcr=i(ul),wt=n(ul,"DIV",{class:!0});var _w=s(wt);T(Vy.$$.fragment,_w),Zcr=i(_w),Xbe=n(_w,"P",{});var y4t=s(Xbe);efr=r(y4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),y4t.forEach(t),ofr=i(_w),jd=n(_w,"P",{});var ire=s(jd);rfr=r(ire,`Note:
Loading a model from its configuration file does `),zbe=n(ire,"STRONG",{});var x4t=s(zbe);tfr=r(x4t,"not"),x4t.forEach(t),afr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(ire,"A",{href:!0});var $4t=s(LQ);nfr=r($4t,"from_pretrained()"),$4t.forEach(t),sfr=r(ire," to load the model weights."),ire.forEach(t),lfr=i(_w),T(iT.$$.fragment,_w),_w.forEach(t),ifr=i(ul),po=n(ul,"DIV",{class:!0});var Ca=s(po);T(Xy.$$.fragment,Ca),dfr=i(Ca),Wbe=n(Ca,"P",{});var k4t=s(Wbe);cfr=r(k4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),k4t.forEach(t),ffr=i(Ca),Ka=n(Ca,"P",{});var uw=s(Ka);mfr=r(uw,"The model class to instantiate is selected based on the "),Qbe=n(uw,"CODE",{});var S4t=s(Qbe);gfr=r(S4t,"model_type"),S4t.forEach(t),hfr=r(uw,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(uw,"CODE",{});var R4t=s(Hbe);pfr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),_fr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(uw,"CODE",{});var P4t=s(Ube);ufr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),bfr=r(uw,":"),uw.forEach(t),vfr=i(Ca),ot=n(Ca,"UL",{});var bl=s(ot);dT=n(bl,"LI",{});var BBe=s(dT);Jbe=n(BBe,"STRONG",{});var B4t=s(Jbe);Ffr=r(B4t,"data2vec-audio"),B4t.forEach(t),Tfr=r(BBe," \u2014 "),yQ=n(BBe,"A",{href:!0});var I4t=s(yQ);Mfr=r(I4t,"Data2VecAudioForXVector"),I4t.forEach(t),Efr=r(BBe," (Data2VecAudio model)"),BBe.forEach(t),Cfr=i(bl),cT=n(bl,"LI",{});var IBe=s(cT);Ybe=n(IBe,"STRONG",{});var N4t=s(Ybe);wfr=r(N4t,"unispeech-sat"),N4t.forEach(t),Afr=r(IBe," \u2014 "),xQ=n(IBe,"A",{href:!0});var q4t=s(xQ);Lfr=r(q4t,"UniSpeechSatForXVector"),q4t.forEach(t),yfr=r(IBe," (UniSpeechSat model)"),IBe.forEach(t),xfr=i(bl),fT=n(bl,"LI",{});var NBe=s(fT);Kbe=n(NBe,"STRONG",{});var j4t=s(Kbe);$fr=r(j4t,"wav2vec2"),j4t.forEach(t),kfr=r(NBe," \u2014 "),$Q=n(NBe,"A",{href:!0});var D4t=s($Q);Sfr=r(D4t,"Wav2Vec2ForXVector"),D4t.forEach(t),Rfr=r(NBe," (Wav2Vec2 model)"),NBe.forEach(t),Pfr=i(bl),mT=n(bl,"LI",{});var qBe=s(mT);Zbe=n(qBe,"STRONG",{});var G4t=s(Zbe);Bfr=r(G4t,"wav2vec2-conformer"),G4t.forEach(t),Ifr=r(qBe," \u2014 "),kQ=n(qBe,"A",{href:!0});var O4t=s(kQ);Nfr=r(O4t,"Wav2Vec2ConformerForXVector"),O4t.forEach(t),qfr=r(qBe," (Wav2Vec2-Conformer model)"),qBe.forEach(t),jfr=i(bl),gT=n(bl,"LI",{});var jBe=s(gT);eve=n(jBe,"STRONG",{});var V4t=s(eve);Dfr=r(V4t,"wavlm"),V4t.forEach(t),Gfr=r(jBe," \u2014 "),SQ=n(jBe,"A",{href:!0});var X4t=s(SQ);Ofr=r(X4t,"WavLMForXVector"),X4t.forEach(t),Vfr=r(jBe," (WavLM model)"),jBe.forEach(t),bl.forEach(t),Xfr=i(Ca),hT=n(Ca,"P",{});var DBe=s(hT);zfr=r(DBe,"The model is set in evaluation mode by default using "),ove=n(DBe,"CODE",{});var z4t=s(ove);Wfr=r(z4t,"model.eval()"),z4t.forEach(t),Qfr=r(DBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(DBe,"CODE",{});var W4t=s(rve);Hfr=r(W4t,"model.train()"),W4t.forEach(t),DBe.forEach(t),Ufr=i(Ca),T(pT.$$.fragment,Ca),Ca.forEach(t),ul.forEach(t),zOe=i(f),Dd=n(f,"H2",{class:!0});var KXe=s(Dd);_T=n(KXe,"A",{id:!0,class:!0,href:!0});var Q4t=s(_T);tve=n(Q4t,"SPAN",{});var H4t=s(tve);T(zy.$$.fragment,H4t),H4t.forEach(t),Q4t.forEach(t),Jfr=i(KXe),ave=n(KXe,"SPAN",{});var U4t=s(ave);Yfr=r(U4t,"AutoModelForMaskedImageModeling"),U4t.forEach(t),KXe.forEach(t),WOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Wy.$$.fragment,vl),Kfr=i(vl),Gd=n(vl,"P",{});var dre=s(Gd);Zfr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RQ=n(dre,"A",{href:!0});var J4t=s(RQ);emr=r(J4t,"from_pretrained()"),J4t.forEach(t),omr=r(dre," class method or the "),PQ=n(dre,"A",{href:!0});var Y4t=s(PQ);rmr=r(Y4t,"from_config()"),Y4t.forEach(t),tmr=r(dre,` class
method.`),dre.forEach(t),amr=i(vl),Qy=n(vl,"P",{});var ZXe=s(Qy);nmr=r(ZXe,"This class cannot be instantiated directly using "),nve=n(ZXe,"CODE",{});var K4t=s(nve);smr=r(K4t,"__init__()"),K4t.forEach(t),lmr=r(ZXe," (throws an error)."),ZXe.forEach(t),imr=i(vl),At=n(vl,"DIV",{class:!0});var bw=s(At);T(Hy.$$.fragment,bw),dmr=i(bw),sve=n(bw,"P",{});var Z4t=s(sve);cmr=r(Z4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Z4t.forEach(t),fmr=i(bw),Od=n(bw,"P",{});var cre=s(Od);mmr=r(cre,`Note:
Loading a model from its configuration file does `),lve=n(cre,"STRONG",{});var eCt=s(lve);gmr=r(eCt,"not"),eCt.forEach(t),hmr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(cre,"A",{href:!0});var oCt=s(BQ);pmr=r(oCt,"from_pretrained()"),oCt.forEach(t),_mr=r(cre," to load the model weights."),cre.forEach(t),umr=i(bw),T(uT.$$.fragment,bw),bw.forEach(t),bmr=i(vl),_o=n(vl,"DIV",{class:!0});var wa=s(_o);T(Uy.$$.fragment,wa),vmr=i(wa),ive=n(wa,"P",{});var rCt=s(ive);Fmr=r(rCt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rCt.forEach(t),Tmr=i(wa),Za=n(wa,"P",{});var vw=s(Za);Mmr=r(vw,"The model class to instantiate is selected based on the "),dve=n(vw,"CODE",{});var tCt=s(dve);Emr=r(tCt,"model_type"),tCt.forEach(t),Cmr=r(vw,` property of the config object (either
passed as an argument or loaded from `),cve=n(vw,"CODE",{});var aCt=s(cve);wmr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),Amr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(vw,"CODE",{});var nCt=s(fve);Lmr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),ymr=r(vw,":"),vw.forEach(t),xmr=i(wa),Vd=n(wa,"UL",{});var fre=s(Vd);bT=n(fre,"LI",{});var GBe=s(bT);mve=n(GBe,"STRONG",{});var sCt=s(mve);$mr=r(sCt,"deit"),sCt.forEach(t),kmr=r(GBe," \u2014 "),IQ=n(GBe,"A",{href:!0});var lCt=s(IQ);Smr=r(lCt,"DeiTForMaskedImageModeling"),lCt.forEach(t),Rmr=r(GBe," (DeiT model)"),GBe.forEach(t),Pmr=i(fre),vT=n(fre,"LI",{});var OBe=s(vT);gve=n(OBe,"STRONG",{});var iCt=s(gve);Bmr=r(iCt,"swin"),iCt.forEach(t),Imr=r(OBe," \u2014 "),NQ=n(OBe,"A",{href:!0});var dCt=s(NQ);Nmr=r(dCt,"SwinForMaskedImageModeling"),dCt.forEach(t),qmr=r(OBe," (Swin Transformer model)"),OBe.forEach(t),jmr=i(fre),FT=n(fre,"LI",{});var VBe=s(FT);hve=n(VBe,"STRONG",{});var cCt=s(hve);Dmr=r(cCt,"vit"),cCt.forEach(t),Gmr=r(VBe," \u2014 "),qQ=n(VBe,"A",{href:!0});var fCt=s(qQ);Omr=r(fCt,"ViTForMaskedImageModeling"),fCt.forEach(t),Vmr=r(VBe," (ViT model)"),VBe.forEach(t),fre.forEach(t),Xmr=i(wa),TT=n(wa,"P",{});var XBe=s(TT);zmr=r(XBe,"The model is set in evaluation mode by default using "),pve=n(XBe,"CODE",{});var mCt=s(pve);Wmr=r(mCt,"model.eval()"),mCt.forEach(t),Qmr=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=n(XBe,"CODE",{});var gCt=s(_ve);Hmr=r(gCt,"model.train()"),gCt.forEach(t),XBe.forEach(t),Umr=i(wa),T(MT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),QOe=i(f),Xd=n(f,"H2",{class:!0});var eze=s(Xd);ET=n(eze,"A",{id:!0,class:!0,href:!0});var hCt=s(ET);uve=n(hCt,"SPAN",{});var pCt=s(uve);T(Jy.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),Jmr=i(eze),bve=n(eze,"SPAN",{});var _Ct=s(bve);Ymr=r(_Ct,"AutoModelForObjectDetection"),_Ct.forEach(t),eze.forEach(t),HOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Yy.$$.fragment,Fl),Kmr=i(Fl),zd=n(Fl,"P",{});var mre=s(zd);Zmr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jQ=n(mre,"A",{href:!0});var uCt=s(jQ);egr=r(uCt,"from_pretrained()"),uCt.forEach(t),ogr=r(mre," class method or the "),DQ=n(mre,"A",{href:!0});var bCt=s(DQ);rgr=r(bCt,"from_config()"),bCt.forEach(t),tgr=r(mre,` class
method.`),mre.forEach(t),agr=i(Fl),Ky=n(Fl,"P",{});var oze=s(Ky);ngr=r(oze,"This class cannot be instantiated directly using "),vve=n(oze,"CODE",{});var vCt=s(vve);sgr=r(vCt,"__init__()"),vCt.forEach(t),lgr=r(oze," (throws an error)."),oze.forEach(t),igr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var Fw=s(Lt);T(Zy.$$.fragment,Fw),dgr=i(Fw),Fve=n(Fw,"P",{});var FCt=s(Fve);cgr=r(FCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),FCt.forEach(t),fgr=i(Fw),Wd=n(Fw,"P",{});var gre=s(Wd);mgr=r(gre,`Note:
Loading a model from its configuration file does `),Tve=n(gre,"STRONG",{});var TCt=s(Tve);ggr=r(TCt,"not"),TCt.forEach(t),hgr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(gre,"A",{href:!0});var MCt=s(GQ);pgr=r(MCt,"from_pretrained()"),MCt.forEach(t),_gr=r(gre," to load the model weights."),gre.forEach(t),ugr=i(Fw),T(CT.$$.fragment,Fw),Fw.forEach(t),bgr=i(Fl),uo=n(Fl,"DIV",{class:!0});var Aa=s(uo);T(e9.$$.fragment,Aa),vgr=i(Aa),Mve=n(Aa,"P",{});var ECt=s(Mve);Fgr=r(ECt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ECt.forEach(t),Tgr=i(Aa),en=n(Aa,"P",{});var Tw=s(en);Mgr=r(Tw,"The model class to instantiate is selected based on the "),Eve=n(Tw,"CODE",{});var CCt=s(Eve);Egr=r(CCt,"model_type"),CCt.forEach(t),Cgr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Cve=n(Tw,"CODE",{});var wCt=s(Cve);wgr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Agr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(Tw,"CODE",{});var ACt=s(wve);Lgr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),ygr=r(Tw,":"),Tw.forEach(t),xgr=i(Aa),o9=n(Aa,"UL",{});var rze=s(o9);wT=n(rze,"LI",{});var zBe=s(wT);Ave=n(zBe,"STRONG",{});var LCt=s(Ave);$gr=r(LCt,"detr"),LCt.forEach(t),kgr=r(zBe," \u2014 "),OQ=n(zBe,"A",{href:!0});var yCt=s(OQ);Sgr=r(yCt,"DetrForObjectDetection"),yCt.forEach(t),Rgr=r(zBe," (DETR model)"),zBe.forEach(t),Pgr=i(rze),AT=n(rze,"LI",{});var WBe=s(AT);Lve=n(WBe,"STRONG",{});var xCt=s(Lve);Bgr=r(xCt,"yolos"),xCt.forEach(t),Igr=r(WBe," \u2014 "),VQ=n(WBe,"A",{href:!0});var $Ct=s(VQ);Ngr=r($Ct,"YolosForObjectDetection"),$Ct.forEach(t),qgr=r(WBe," (YOLOS model)"),WBe.forEach(t),rze.forEach(t),jgr=i(Aa),LT=n(Aa,"P",{});var QBe=s(LT);Dgr=r(QBe,"The model is set in evaluation mode by default using "),yve=n(QBe,"CODE",{});var kCt=s(yve);Ggr=r(kCt,"model.eval()"),kCt.forEach(t),Ogr=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(QBe,"CODE",{});var SCt=s(xve);Vgr=r(SCt,"model.train()"),SCt.forEach(t),QBe.forEach(t),Xgr=i(Aa),T(yT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),UOe=i(f),Qd=n(f,"H2",{class:!0});var tze=s(Qd);xT=n(tze,"A",{id:!0,class:!0,href:!0});var RCt=s(xT);$ve=n(RCt,"SPAN",{});var PCt=s($ve);T(r9.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),zgr=i(tze),kve=n(tze,"SPAN",{});var BCt=s(kve);Wgr=r(BCt,"AutoModelForImageSegmentation"),BCt.forEach(t),tze.forEach(t),JOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(t9.$$.fragment,Tl),Qgr=i(Tl),Hd=n(Tl,"P",{});var hre=s(Hd);Hgr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XQ=n(hre,"A",{href:!0});var ICt=s(XQ);Ugr=r(ICt,"from_pretrained()"),ICt.forEach(t),Jgr=r(hre," class method or the "),zQ=n(hre,"A",{href:!0});var NCt=s(zQ);Ygr=r(NCt,"from_config()"),NCt.forEach(t),Kgr=r(hre,` class
method.`),hre.forEach(t),Zgr=i(Tl),a9=n(Tl,"P",{});var aze=s(a9);ehr=r(aze,"This class cannot be instantiated directly using "),Sve=n(aze,"CODE",{});var qCt=s(Sve);ohr=r(qCt,"__init__()"),qCt.forEach(t),rhr=r(aze," (throws an error)."),aze.forEach(t),thr=i(Tl),yt=n(Tl,"DIV",{class:!0});var Mw=s(yt);T(n9.$$.fragment,Mw),ahr=i(Mw),Rve=n(Mw,"P",{});var jCt=s(Rve);nhr=r(jCt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jCt.forEach(t),shr=i(Mw),Ud=n(Mw,"P",{});var pre=s(Ud);lhr=r(pre,`Note:
Loading a model from its configuration file does `),Pve=n(pre,"STRONG",{});var DCt=s(Pve);ihr=r(DCt,"not"),DCt.forEach(t),dhr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(pre,"A",{href:!0});var GCt=s(WQ);chr=r(GCt,"from_pretrained()"),GCt.forEach(t),fhr=r(pre," to load the model weights."),pre.forEach(t),mhr=i(Mw),T($T.$$.fragment,Mw),Mw.forEach(t),ghr=i(Tl),bo=n(Tl,"DIV",{class:!0});var La=s(bo);T(s9.$$.fragment,La),hhr=i(La),Bve=n(La,"P",{});var OCt=s(Bve);phr=r(OCt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),OCt.forEach(t),_hr=i(La),on=n(La,"P",{});var Ew=s(on);uhr=r(Ew,"The model class to instantiate is selected based on the "),Ive=n(Ew,"CODE",{});var VCt=s(Ive);bhr=r(VCt,"model_type"),VCt.forEach(t),vhr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Nve=n(Ew,"CODE",{});var XCt=s(Nve);Fhr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),Thr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Ew,"CODE",{});var zCt=s(qve);Mhr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),Ehr=r(Ew,":"),Ew.forEach(t),Chr=i(La),jve=n(La,"UL",{});var WCt=s(jve);kT=n(WCt,"LI",{});var HBe=s(kT);Dve=n(HBe,"STRONG",{});var QCt=s(Dve);whr=r(QCt,"detr"),QCt.forEach(t),Ahr=r(HBe," \u2014 "),QQ=n(HBe,"A",{href:!0});var HCt=s(QQ);Lhr=r(HCt,"DetrForSegmentation"),HCt.forEach(t),yhr=r(HBe," (DETR model)"),HBe.forEach(t),WCt.forEach(t),xhr=i(La),ST=n(La,"P",{});var UBe=s(ST);$hr=r(UBe,"The model is set in evaluation mode by default using "),Gve=n(UBe,"CODE",{});var UCt=s(Gve);khr=r(UCt,"model.eval()"),UCt.forEach(t),Shr=r(UBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(UBe,"CODE",{});var JCt=s(Ove);Rhr=r(JCt,"model.train()"),JCt.forEach(t),UBe.forEach(t),Phr=i(La),T(RT.$$.fragment,La),La.forEach(t),Tl.forEach(t),YOe=i(f),Jd=n(f,"H2",{class:!0});var nze=s(Jd);PT=n(nze,"A",{id:!0,class:!0,href:!0});var YCt=s(PT);Vve=n(YCt,"SPAN",{});var KCt=s(Vve);T(l9.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),Bhr=i(nze),Xve=n(nze,"SPAN",{});var ZCt=s(Xve);Ihr=r(ZCt,"AutoModelForSemanticSegmentation"),ZCt.forEach(t),nze.forEach(t),KOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(i9.$$.fragment,Ml),Nhr=i(Ml),Yd=n(Ml,"P",{});var _re=s(Yd);qhr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HQ=n(_re,"A",{href:!0});var e5t=s(HQ);jhr=r(e5t,"from_pretrained()"),e5t.forEach(t),Dhr=r(_re," class method or the "),UQ=n(_re,"A",{href:!0});var o5t=s(UQ);Ghr=r(o5t,"from_config()"),o5t.forEach(t),Ohr=r(_re,` class
method.`),_re.forEach(t),Vhr=i(Ml),d9=n(Ml,"P",{});var sze=s(d9);Xhr=r(sze,"This class cannot be instantiated directly using "),zve=n(sze,"CODE",{});var r5t=s(zve);zhr=r(r5t,"__init__()"),r5t.forEach(t),Whr=r(sze," (throws an error)."),sze.forEach(t),Qhr=i(Ml),xt=n(Ml,"DIV",{class:!0});var Cw=s(xt);T(c9.$$.fragment,Cw),Hhr=i(Cw),Wve=n(Cw,"P",{});var t5t=s(Wve);Uhr=r(t5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),t5t.forEach(t),Jhr=i(Cw),Kd=n(Cw,"P",{});var ure=s(Kd);Yhr=r(ure,`Note:
Loading a model from its configuration file does `),Qve=n(ure,"STRONG",{});var a5t=s(Qve);Khr=r(a5t,"not"),a5t.forEach(t),Zhr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(ure,"A",{href:!0});var n5t=s(JQ);epr=r(n5t,"from_pretrained()"),n5t.forEach(t),opr=r(ure," to load the model weights."),ure.forEach(t),rpr=i(Cw),T(BT.$$.fragment,Cw),Cw.forEach(t),tpr=i(Ml),vo=n(Ml,"DIV",{class:!0});var ya=s(vo);T(f9.$$.fragment,ya),apr=i(ya),Hve=n(ya,"P",{});var s5t=s(Hve);npr=r(s5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),s5t.forEach(t),spr=i(ya),rn=n(ya,"P",{});var ww=s(rn);lpr=r(ww,"The model class to instantiate is selected based on the "),Uve=n(ww,"CODE",{});var l5t=s(Uve);ipr=r(l5t,"model_type"),l5t.forEach(t),dpr=r(ww,` property of the config object (either
passed as an argument or loaded from `),Jve=n(ww,"CODE",{});var i5t=s(Jve);cpr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),fpr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(ww,"CODE",{});var d5t=s(Yve);mpr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),gpr=r(ww,":"),ww.forEach(t),hpr=i(ya),tn=n(ya,"UL",{});var Aw=s(tn);IT=n(Aw,"LI",{});var JBe=s(IT);Kve=n(JBe,"STRONG",{});var c5t=s(Kve);ppr=r(c5t,"beit"),c5t.forEach(t),_pr=r(JBe," \u2014 "),YQ=n(JBe,"A",{href:!0});var f5t=s(YQ);upr=r(f5t,"BeitForSemanticSegmentation"),f5t.forEach(t),bpr=r(JBe," (BEiT model)"),JBe.forEach(t),vpr=i(Aw),NT=n(Aw,"LI",{});var YBe=s(NT);Zve=n(YBe,"STRONG",{});var m5t=s(Zve);Fpr=r(m5t,"data2vec-vision"),m5t.forEach(t),Tpr=r(YBe," \u2014 "),KQ=n(YBe,"A",{href:!0});var g5t=s(KQ);Mpr=r(g5t,"Data2VecVisionForSemanticSegmentation"),g5t.forEach(t),Epr=r(YBe," (Data2VecVision model)"),YBe.forEach(t),Cpr=i(Aw),qT=n(Aw,"LI",{});var KBe=s(qT);e0e=n(KBe,"STRONG",{});var h5t=s(e0e);wpr=r(h5t,"dpt"),h5t.forEach(t),Apr=r(KBe," \u2014 "),ZQ=n(KBe,"A",{href:!0});var p5t=s(ZQ);Lpr=r(p5t,"DPTForSemanticSegmentation"),p5t.forEach(t),ypr=r(KBe," (DPT model)"),KBe.forEach(t),xpr=i(Aw),jT=n(Aw,"LI",{});var ZBe=s(jT);o0e=n(ZBe,"STRONG",{});var _5t=s(o0e);$pr=r(_5t,"segformer"),_5t.forEach(t),kpr=r(ZBe," \u2014 "),eH=n(ZBe,"A",{href:!0});var u5t=s(eH);Spr=r(u5t,"SegformerForSemanticSegmentation"),u5t.forEach(t),Rpr=r(ZBe," (SegFormer model)"),ZBe.forEach(t),Aw.forEach(t),Ppr=i(ya),DT=n(ya,"P",{});var eIe=s(DT);Bpr=r(eIe,"The model is set in evaluation mode by default using "),r0e=n(eIe,"CODE",{});var b5t=s(r0e);Ipr=r(b5t,"model.eval()"),b5t.forEach(t),Npr=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t0e=n(eIe,"CODE",{});var v5t=s(t0e);qpr=r(v5t,"model.train()"),v5t.forEach(t),eIe.forEach(t),jpr=i(ya),T(GT.$$.fragment,ya),ya.forEach(t),Ml.forEach(t),ZOe=i(f),Zd=n(f,"H2",{class:!0});var lze=s(Zd);OT=n(lze,"A",{id:!0,class:!0,href:!0});var F5t=s(OT);a0e=n(F5t,"SPAN",{});var T5t=s(a0e);T(m9.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),Dpr=i(lze),n0e=n(lze,"SPAN",{});var M5t=s(n0e);Gpr=r(M5t,"AutoModelForInstanceSegmentation"),M5t.forEach(t),lze.forEach(t),eVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(g9.$$.fragment,El),Opr=i(El),ec=n(El,"P",{});var bre=s(ec);Vpr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oH=n(bre,"A",{href:!0});var E5t=s(oH);Xpr=r(E5t,"from_pretrained()"),E5t.forEach(t),zpr=r(bre," class method or the "),rH=n(bre,"A",{href:!0});var C5t=s(rH);Wpr=r(C5t,"from_config()"),C5t.forEach(t),Qpr=r(bre,` class
method.`),bre.forEach(t),Hpr=i(El),h9=n(El,"P",{});var ize=s(h9);Upr=r(ize,"This class cannot be instantiated directly using "),s0e=n(ize,"CODE",{});var w5t=s(s0e);Jpr=r(w5t,"__init__()"),w5t.forEach(t),Ypr=r(ize," (throws an error)."),ize.forEach(t),Kpr=i(El),$t=n(El,"DIV",{class:!0});var Lw=s($t);T(p9.$$.fragment,Lw),Zpr=i(Lw),l0e=n(Lw,"P",{});var A5t=s(l0e);e_r=r(A5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),A5t.forEach(t),o_r=i(Lw),oc=n(Lw,"P",{});var vre=s(oc);r_r=r(vre,`Note:
Loading a model from its configuration file does `),i0e=n(vre,"STRONG",{});var L5t=s(i0e);t_r=r(L5t,"not"),L5t.forEach(t),a_r=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(vre,"A",{href:!0});var y5t=s(tH);n_r=r(y5t,"from_pretrained()"),y5t.forEach(t),s_r=r(vre," to load the model weights."),vre.forEach(t),l_r=i(Lw),T(VT.$$.fragment,Lw),Lw.forEach(t),i_r=i(El),Fo=n(El,"DIV",{class:!0});var xa=s(Fo);T(_9.$$.fragment,xa),d_r=i(xa),d0e=n(xa,"P",{});var x5t=s(d0e);c_r=r(x5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),x5t.forEach(t),f_r=i(xa),an=n(xa,"P",{});var yw=s(an);m_r=r(yw,"The model class to instantiate is selected based on the "),c0e=n(yw,"CODE",{});var $5t=s(c0e);g_r=r($5t,"model_type"),$5t.forEach(t),h_r=r(yw,` property of the config object (either
passed as an argument or loaded from `),f0e=n(yw,"CODE",{});var k5t=s(f0e);p_r=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),__r=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(yw,"CODE",{});var S5t=s(m0e);u_r=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),b_r=r(yw,":"),yw.forEach(t),v_r=i(xa),g0e=n(xa,"UL",{});var R5t=s(g0e);XT=n(R5t,"LI",{});var oIe=s(XT);h0e=n(oIe,"STRONG",{});var P5t=s(h0e);F_r=r(P5t,"maskformer"),P5t.forEach(t),T_r=r(oIe," \u2014 "),aH=n(oIe,"A",{href:!0});var B5t=s(aH);M_r=r(B5t,"MaskFormerForInstanceSegmentation"),B5t.forEach(t),E_r=r(oIe," (MaskFormer model)"),oIe.forEach(t),R5t.forEach(t),C_r=i(xa),zT=n(xa,"P",{});var rIe=s(zT);w_r=r(rIe,"The model is set in evaluation mode by default using "),p0e=n(rIe,"CODE",{});var I5t=s(p0e);A_r=r(I5t,"model.eval()"),I5t.forEach(t),L_r=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=n(rIe,"CODE",{});var N5t=s(_0e);y_r=r(N5t,"model.train()"),N5t.forEach(t),rIe.forEach(t),x_r=i(xa),T(WT.$$.fragment,xa),xa.forEach(t),El.forEach(t),oVe=i(f),rc=n(f,"H2",{class:!0});var dze=s(rc);QT=n(dze,"A",{id:!0,class:!0,href:!0});var q5t=s(QT);u0e=n(q5t,"SPAN",{});var j5t=s(u0e);T(u9.$$.fragment,j5t),j5t.forEach(t),q5t.forEach(t),$_r=i(dze),b0e=n(dze,"SPAN",{});var D5t=s(b0e);k_r=r(D5t,"TFAutoModel"),D5t.forEach(t),dze.forEach(t),rVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(b9.$$.fragment,Cl),S_r=i(Cl),tc=n(Cl,"P",{});var Fre=s(tc);R_r=r(Fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nH=n(Fre,"A",{href:!0});var G5t=s(nH);P_r=r(G5t,"from_pretrained()"),G5t.forEach(t),B_r=r(Fre," class method or the "),sH=n(Fre,"A",{href:!0});var O5t=s(sH);I_r=r(O5t,"from_config()"),O5t.forEach(t),N_r=r(Fre,` class
method.`),Fre.forEach(t),q_r=i(Cl),v9=n(Cl,"P",{});var cze=s(v9);j_r=r(cze,"This class cannot be instantiated directly using "),v0e=n(cze,"CODE",{});var V5t=s(v0e);D_r=r(V5t,"__init__()"),V5t.forEach(t),G_r=r(cze," (throws an error)."),cze.forEach(t),O_r=i(Cl),kt=n(Cl,"DIV",{class:!0});var xw=s(kt);T(F9.$$.fragment,xw),V_r=i(xw),F0e=n(xw,"P",{});var X5t=s(F0e);X_r=r(X5t,"Instantiates one of the base model classes of the library from a configuration."),X5t.forEach(t),z_r=i(xw),ac=n(xw,"P",{});var Tre=s(ac);W_r=r(Tre,`Note:
Loading a model from its configuration file does `),T0e=n(Tre,"STRONG",{});var z5t=s(T0e);Q_r=r(z5t,"not"),z5t.forEach(t),H_r=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(Tre,"A",{href:!0});var W5t=s(lH);U_r=r(W5t,"from_pretrained()"),W5t.forEach(t),J_r=r(Tre," to load the model weights."),Tre.forEach(t),Y_r=i(xw),T(HT.$$.fragment,xw),xw.forEach(t),K_r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(T9.$$.fragment,wl),Z_r=i(wl),M0e=n(wl,"P",{});var Q5t=s(M0e);eur=r(Q5t,"Instantiate one of the base model classes of the library from a pretrained model."),Q5t.forEach(t),our=i(wl),nn=n(wl,"P",{});var $w=s(nn);rur=r($w,"The model class to instantiate is selected based on the "),E0e=n($w,"CODE",{});var H5t=s(E0e);tur=r(H5t,"model_type"),H5t.forEach(t),aur=r($w,` property of the config object (either
passed as an argument or loaded from `),C0e=n($w,"CODE",{});var U5t=s(C0e);nur=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),sur=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n($w,"CODE",{});var J5t=s(w0e);lur=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),iur=r($w,":"),$w.forEach(t),dur=i(wl),q=n(wl,"UL",{});var D=s(q);UT=n(D,"LI",{});var tIe=s(UT);A0e=n(tIe,"STRONG",{});var Y5t=s(A0e);cur=r(Y5t,"albert"),Y5t.forEach(t),fur=r(tIe," \u2014 "),iH=n(tIe,"A",{href:!0});var K5t=s(iH);mur=r(K5t,"TFAlbertModel"),K5t.forEach(t),gur=r(tIe," (ALBERT model)"),tIe.forEach(t),hur=i(D),JT=n(D,"LI",{});var aIe=s(JT);L0e=n(aIe,"STRONG",{});var Z5t=s(L0e);pur=r(Z5t,"bart"),Z5t.forEach(t),_ur=r(aIe," \u2014 "),dH=n(aIe,"A",{href:!0});var e3t=s(dH);uur=r(e3t,"TFBartModel"),e3t.forEach(t),bur=r(aIe," (BART model)"),aIe.forEach(t),vur=i(D),YT=n(D,"LI",{});var nIe=s(YT);y0e=n(nIe,"STRONG",{});var o3t=s(y0e);Fur=r(o3t,"bert"),o3t.forEach(t),Tur=r(nIe," \u2014 "),cH=n(nIe,"A",{href:!0});var r3t=s(cH);Mur=r(r3t,"TFBertModel"),r3t.forEach(t),Eur=r(nIe," (BERT model)"),nIe.forEach(t),Cur=i(D),KT=n(D,"LI",{});var sIe=s(KT);x0e=n(sIe,"STRONG",{});var t3t=s(x0e);wur=r(t3t,"blenderbot"),t3t.forEach(t),Aur=r(sIe," \u2014 "),fH=n(sIe,"A",{href:!0});var a3t=s(fH);Lur=r(a3t,"TFBlenderbotModel"),a3t.forEach(t),yur=r(sIe," (Blenderbot model)"),sIe.forEach(t),xur=i(D),ZT=n(D,"LI",{});var lIe=s(ZT);$0e=n(lIe,"STRONG",{});var n3t=s($0e);$ur=r(n3t,"blenderbot-small"),n3t.forEach(t),kur=r(lIe," \u2014 "),mH=n(lIe,"A",{href:!0});var s3t=s(mH);Sur=r(s3t,"TFBlenderbotSmallModel"),s3t.forEach(t),Rur=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),Pur=i(D),e7=n(D,"LI",{});var iIe=s(e7);k0e=n(iIe,"STRONG",{});var l3t=s(k0e);Bur=r(l3t,"camembert"),l3t.forEach(t),Iur=r(iIe," \u2014 "),gH=n(iIe,"A",{href:!0});var i3t=s(gH);Nur=r(i3t,"TFCamembertModel"),i3t.forEach(t),qur=r(iIe," (CamemBERT model)"),iIe.forEach(t),jur=i(D),o7=n(D,"LI",{});var dIe=s(o7);S0e=n(dIe,"STRONG",{});var d3t=s(S0e);Dur=r(d3t,"clip"),d3t.forEach(t),Gur=r(dIe," \u2014 "),hH=n(dIe,"A",{href:!0});var c3t=s(hH);Our=r(c3t,"TFCLIPModel"),c3t.forEach(t),Vur=r(dIe," (CLIP model)"),dIe.forEach(t),Xur=i(D),r7=n(D,"LI",{});var cIe=s(r7);R0e=n(cIe,"STRONG",{});var f3t=s(R0e);zur=r(f3t,"convbert"),f3t.forEach(t),Wur=r(cIe," \u2014 "),pH=n(cIe,"A",{href:!0});var m3t=s(pH);Qur=r(m3t,"TFConvBertModel"),m3t.forEach(t),Hur=r(cIe," (ConvBERT model)"),cIe.forEach(t),Uur=i(D),t7=n(D,"LI",{});var fIe=s(t7);P0e=n(fIe,"STRONG",{});var g3t=s(P0e);Jur=r(g3t,"convnext"),g3t.forEach(t),Yur=r(fIe," \u2014 "),_H=n(fIe,"A",{href:!0});var h3t=s(_H);Kur=r(h3t,"TFConvNextModel"),h3t.forEach(t),Zur=r(fIe," (ConvNeXT model)"),fIe.forEach(t),e1r=i(D),a7=n(D,"LI",{});var mIe=s(a7);B0e=n(mIe,"STRONG",{});var p3t=s(B0e);o1r=r(p3t,"ctrl"),p3t.forEach(t),r1r=r(mIe," \u2014 "),uH=n(mIe,"A",{href:!0});var _3t=s(uH);t1r=r(_3t,"TFCTRLModel"),_3t.forEach(t),a1r=r(mIe," (CTRL model)"),mIe.forEach(t),n1r=i(D),n7=n(D,"LI",{});var gIe=s(n7);I0e=n(gIe,"STRONG",{});var u3t=s(I0e);s1r=r(u3t,"data2vec-vision"),u3t.forEach(t),l1r=r(gIe," \u2014 "),bH=n(gIe,"A",{href:!0});var b3t=s(bH);i1r=r(b3t,"TFData2VecVisionModel"),b3t.forEach(t),d1r=r(gIe," (Data2VecVision model)"),gIe.forEach(t),c1r=i(D),s7=n(D,"LI",{});var hIe=s(s7);N0e=n(hIe,"STRONG",{});var v3t=s(N0e);f1r=r(v3t,"deberta"),v3t.forEach(t),m1r=r(hIe," \u2014 "),vH=n(hIe,"A",{href:!0});var F3t=s(vH);g1r=r(F3t,"TFDebertaModel"),F3t.forEach(t),h1r=r(hIe," (DeBERTa model)"),hIe.forEach(t),p1r=i(D),l7=n(D,"LI",{});var pIe=s(l7);q0e=n(pIe,"STRONG",{});var T3t=s(q0e);_1r=r(T3t,"deberta-v2"),T3t.forEach(t),u1r=r(pIe," \u2014 "),FH=n(pIe,"A",{href:!0});var M3t=s(FH);b1r=r(M3t,"TFDebertaV2Model"),M3t.forEach(t),v1r=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),F1r=i(D),i7=n(D,"LI",{});var _Ie=s(i7);j0e=n(_Ie,"STRONG",{});var E3t=s(j0e);T1r=r(E3t,"deit"),E3t.forEach(t),M1r=r(_Ie," \u2014 "),TH=n(_Ie,"A",{href:!0});var C3t=s(TH);E1r=r(C3t,"TFDeiTModel"),C3t.forEach(t),C1r=r(_Ie," (DeiT model)"),_Ie.forEach(t),w1r=i(D),d7=n(D,"LI",{});var uIe=s(d7);D0e=n(uIe,"STRONG",{});var w3t=s(D0e);A1r=r(w3t,"distilbert"),w3t.forEach(t),L1r=r(uIe," \u2014 "),MH=n(uIe,"A",{href:!0});var A3t=s(MH);y1r=r(A3t,"TFDistilBertModel"),A3t.forEach(t),x1r=r(uIe," (DistilBERT model)"),uIe.forEach(t),$1r=i(D),c7=n(D,"LI",{});var bIe=s(c7);G0e=n(bIe,"STRONG",{});var L3t=s(G0e);k1r=r(L3t,"dpr"),L3t.forEach(t),S1r=r(bIe," \u2014 "),EH=n(bIe,"A",{href:!0});var y3t=s(EH);R1r=r(y3t,"TFDPRQuestionEncoder"),y3t.forEach(t),P1r=r(bIe," (DPR model)"),bIe.forEach(t),B1r=i(D),f7=n(D,"LI",{});var vIe=s(f7);O0e=n(vIe,"STRONG",{});var x3t=s(O0e);I1r=r(x3t,"electra"),x3t.forEach(t),N1r=r(vIe," \u2014 "),CH=n(vIe,"A",{href:!0});var $3t=s(CH);q1r=r($3t,"TFElectraModel"),$3t.forEach(t),j1r=r(vIe," (ELECTRA model)"),vIe.forEach(t),D1r=i(D),m7=n(D,"LI",{});var FIe=s(m7);V0e=n(FIe,"STRONG",{});var k3t=s(V0e);G1r=r(k3t,"flaubert"),k3t.forEach(t),O1r=r(FIe," \u2014 "),wH=n(FIe,"A",{href:!0});var S3t=s(wH);V1r=r(S3t,"TFFlaubertModel"),S3t.forEach(t),X1r=r(FIe," (FlauBERT model)"),FIe.forEach(t),z1r=i(D),Ws=n(D,"LI",{});var tS=s(Ws);X0e=n(tS,"STRONG",{});var R3t=s(X0e);W1r=r(R3t,"funnel"),R3t.forEach(t),Q1r=r(tS," \u2014 "),AH=n(tS,"A",{href:!0});var P3t=s(AH);H1r=r(P3t,"TFFunnelModel"),P3t.forEach(t),U1r=r(tS," or "),LH=n(tS,"A",{href:!0});var B3t=s(LH);J1r=r(B3t,"TFFunnelBaseModel"),B3t.forEach(t),Y1r=r(tS," (Funnel Transformer model)"),tS.forEach(t),K1r=i(D),g7=n(D,"LI",{});var TIe=s(g7);z0e=n(TIe,"STRONG",{});var I3t=s(z0e);Z1r=r(I3t,"gpt2"),I3t.forEach(t),e2r=r(TIe," \u2014 "),yH=n(TIe,"A",{href:!0});var N3t=s(yH);o2r=r(N3t,"TFGPT2Model"),N3t.forEach(t),r2r=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),t2r=i(D),h7=n(D,"LI",{});var MIe=s(h7);W0e=n(MIe,"STRONG",{});var q3t=s(W0e);a2r=r(q3t,"gptj"),q3t.forEach(t),n2r=r(MIe," \u2014 "),xH=n(MIe,"A",{href:!0});var j3t=s(xH);s2r=r(j3t,"TFGPTJModel"),j3t.forEach(t),l2r=r(MIe," (GPT-J model)"),MIe.forEach(t),i2r=i(D),p7=n(D,"LI",{});var EIe=s(p7);Q0e=n(EIe,"STRONG",{});var D3t=s(Q0e);d2r=r(D3t,"hubert"),D3t.forEach(t),c2r=r(EIe," \u2014 "),$H=n(EIe,"A",{href:!0});var G3t=s($H);f2r=r(G3t,"TFHubertModel"),G3t.forEach(t),m2r=r(EIe," (Hubert model)"),EIe.forEach(t),g2r=i(D),_7=n(D,"LI",{});var CIe=s(_7);H0e=n(CIe,"STRONG",{});var O3t=s(H0e);h2r=r(O3t,"layoutlm"),O3t.forEach(t),p2r=r(CIe," \u2014 "),kH=n(CIe,"A",{href:!0});var V3t=s(kH);_2r=r(V3t,"TFLayoutLMModel"),V3t.forEach(t),u2r=r(CIe," (LayoutLM model)"),CIe.forEach(t),b2r=i(D),u7=n(D,"LI",{});var wIe=s(u7);U0e=n(wIe,"STRONG",{});var X3t=s(U0e);v2r=r(X3t,"led"),X3t.forEach(t),F2r=r(wIe," \u2014 "),SH=n(wIe,"A",{href:!0});var z3t=s(SH);T2r=r(z3t,"TFLEDModel"),z3t.forEach(t),M2r=r(wIe," (LED model)"),wIe.forEach(t),E2r=i(D),b7=n(D,"LI",{});var AIe=s(b7);J0e=n(AIe,"STRONG",{});var W3t=s(J0e);C2r=r(W3t,"longformer"),W3t.forEach(t),w2r=r(AIe," \u2014 "),RH=n(AIe,"A",{href:!0});var Q3t=s(RH);A2r=r(Q3t,"TFLongformerModel"),Q3t.forEach(t),L2r=r(AIe," (Longformer model)"),AIe.forEach(t),y2r=i(D),v7=n(D,"LI",{});var LIe=s(v7);Y0e=n(LIe,"STRONG",{});var H3t=s(Y0e);x2r=r(H3t,"lxmert"),H3t.forEach(t),$2r=r(LIe," \u2014 "),PH=n(LIe,"A",{href:!0});var U3t=s(PH);k2r=r(U3t,"TFLxmertModel"),U3t.forEach(t),S2r=r(LIe," (LXMERT model)"),LIe.forEach(t),R2r=i(D),F7=n(D,"LI",{});var yIe=s(F7);K0e=n(yIe,"STRONG",{});var J3t=s(K0e);P2r=r(J3t,"marian"),J3t.forEach(t),B2r=r(yIe," \u2014 "),BH=n(yIe,"A",{href:!0});var Y3t=s(BH);I2r=r(Y3t,"TFMarianModel"),Y3t.forEach(t),N2r=r(yIe," (Marian model)"),yIe.forEach(t),q2r=i(D),T7=n(D,"LI",{});var xIe=s(T7);Z0e=n(xIe,"STRONG",{});var K3t=s(Z0e);j2r=r(K3t,"mbart"),K3t.forEach(t),D2r=r(xIe," \u2014 "),IH=n(xIe,"A",{href:!0});var Z3t=s(IH);G2r=r(Z3t,"TFMBartModel"),Z3t.forEach(t),O2r=r(xIe," (mBART model)"),xIe.forEach(t),V2r=i(D),M7=n(D,"LI",{});var $Ie=s(M7);eFe=n($Ie,"STRONG",{});var ewt=s(eFe);X2r=r(ewt,"mobilebert"),ewt.forEach(t),z2r=r($Ie," \u2014 "),NH=n($Ie,"A",{href:!0});var owt=s(NH);W2r=r(owt,"TFMobileBertModel"),owt.forEach(t),Q2r=r($Ie," (MobileBERT model)"),$Ie.forEach(t),H2r=i(D),E7=n(D,"LI",{});var kIe=s(E7);oFe=n(kIe,"STRONG",{});var rwt=s(oFe);U2r=r(rwt,"mpnet"),rwt.forEach(t),J2r=r(kIe," \u2014 "),qH=n(kIe,"A",{href:!0});var twt=s(qH);Y2r=r(twt,"TFMPNetModel"),twt.forEach(t),K2r=r(kIe," (MPNet model)"),kIe.forEach(t),Z2r=i(D),C7=n(D,"LI",{});var SIe=s(C7);rFe=n(SIe,"STRONG",{});var awt=s(rFe);ebr=r(awt,"mt5"),awt.forEach(t),obr=r(SIe," \u2014 "),jH=n(SIe,"A",{href:!0});var nwt=s(jH);rbr=r(nwt,"TFMT5Model"),nwt.forEach(t),tbr=r(SIe," (MT5 model)"),SIe.forEach(t),abr=i(D),w7=n(D,"LI",{});var RIe=s(w7);tFe=n(RIe,"STRONG",{});var swt=s(tFe);nbr=r(swt,"openai-gpt"),swt.forEach(t),sbr=r(RIe," \u2014 "),DH=n(RIe,"A",{href:!0});var lwt=s(DH);lbr=r(lwt,"TFOpenAIGPTModel"),lwt.forEach(t),ibr=r(RIe," (OpenAI GPT model)"),RIe.forEach(t),dbr=i(D),A7=n(D,"LI",{});var PIe=s(A7);aFe=n(PIe,"STRONG",{});var iwt=s(aFe);cbr=r(iwt,"opt"),iwt.forEach(t),fbr=r(PIe," \u2014 "),GH=n(PIe,"A",{href:!0});var dwt=s(GH);mbr=r(dwt,"TFOPTModel"),dwt.forEach(t),gbr=r(PIe," (OPT model)"),PIe.forEach(t),hbr=i(D),L7=n(D,"LI",{});var BIe=s(L7);nFe=n(BIe,"STRONG",{});var cwt=s(nFe);pbr=r(cwt,"pegasus"),cwt.forEach(t),_br=r(BIe," \u2014 "),OH=n(BIe,"A",{href:!0});var fwt=s(OH);ubr=r(fwt,"TFPegasusModel"),fwt.forEach(t),bbr=r(BIe," (Pegasus model)"),BIe.forEach(t),vbr=i(D),y7=n(D,"LI",{});var IIe=s(y7);sFe=n(IIe,"STRONG",{});var mwt=s(sFe);Fbr=r(mwt,"rembert"),mwt.forEach(t),Tbr=r(IIe," \u2014 "),VH=n(IIe,"A",{href:!0});var gwt=s(VH);Mbr=r(gwt,"TFRemBertModel"),gwt.forEach(t),Ebr=r(IIe," (RemBERT model)"),IIe.forEach(t),Cbr=i(D),x7=n(D,"LI",{});var NIe=s(x7);lFe=n(NIe,"STRONG",{});var hwt=s(lFe);wbr=r(hwt,"roberta"),hwt.forEach(t),Abr=r(NIe," \u2014 "),XH=n(NIe,"A",{href:!0});var pwt=s(XH);Lbr=r(pwt,"TFRobertaModel"),pwt.forEach(t),ybr=r(NIe," (RoBERTa model)"),NIe.forEach(t),xbr=i(D),$7=n(D,"LI",{});var qIe=s($7);iFe=n(qIe,"STRONG",{});var _wt=s(iFe);$br=r(_wt,"roformer"),_wt.forEach(t),kbr=r(qIe," \u2014 "),zH=n(qIe,"A",{href:!0});var uwt=s(zH);Sbr=r(uwt,"TFRoFormerModel"),uwt.forEach(t),Rbr=r(qIe," (RoFormer model)"),qIe.forEach(t),Pbr=i(D),k7=n(D,"LI",{});var jIe=s(k7);dFe=n(jIe,"STRONG",{});var bwt=s(dFe);Bbr=r(bwt,"speech_to_text"),bwt.forEach(t),Ibr=r(jIe," \u2014 "),WH=n(jIe,"A",{href:!0});var vwt=s(WH);Nbr=r(vwt,"TFSpeech2TextModel"),vwt.forEach(t),qbr=r(jIe," (Speech2Text model)"),jIe.forEach(t),jbr=i(D),S7=n(D,"LI",{});var DIe=s(S7);cFe=n(DIe,"STRONG",{});var Fwt=s(cFe);Dbr=r(Fwt,"swin"),Fwt.forEach(t),Gbr=r(DIe," \u2014 "),QH=n(DIe,"A",{href:!0});var Twt=s(QH);Obr=r(Twt,"TFSwinModel"),Twt.forEach(t),Vbr=r(DIe," (Swin Transformer model)"),DIe.forEach(t),Xbr=i(D),R7=n(D,"LI",{});var GIe=s(R7);fFe=n(GIe,"STRONG",{});var Mwt=s(fFe);zbr=r(Mwt,"t5"),Mwt.forEach(t),Wbr=r(GIe," \u2014 "),HH=n(GIe,"A",{href:!0});var Ewt=s(HH);Qbr=r(Ewt,"TFT5Model"),Ewt.forEach(t),Hbr=r(GIe," (T5 model)"),GIe.forEach(t),Ubr=i(D),P7=n(D,"LI",{});var OIe=s(P7);mFe=n(OIe,"STRONG",{});var Cwt=s(mFe);Jbr=r(Cwt,"tapas"),Cwt.forEach(t),Ybr=r(OIe," \u2014 "),UH=n(OIe,"A",{href:!0});var wwt=s(UH);Kbr=r(wwt,"TFTapasModel"),wwt.forEach(t),Zbr=r(OIe," (TAPAS model)"),OIe.forEach(t),evr=i(D),B7=n(D,"LI",{});var VIe=s(B7);gFe=n(VIe,"STRONG",{});var Awt=s(gFe);ovr=r(Awt,"transfo-xl"),Awt.forEach(t),rvr=r(VIe," \u2014 "),JH=n(VIe,"A",{href:!0});var Lwt=s(JH);tvr=r(Lwt,"TFTransfoXLModel"),Lwt.forEach(t),avr=r(VIe," (Transformer-XL model)"),VIe.forEach(t),nvr=i(D),I7=n(D,"LI",{});var XIe=s(I7);hFe=n(XIe,"STRONG",{});var ywt=s(hFe);svr=r(ywt,"vit"),ywt.forEach(t),lvr=r(XIe," \u2014 "),YH=n(XIe,"A",{href:!0});var xwt=s(YH);ivr=r(xwt,"TFViTModel"),xwt.forEach(t),dvr=r(XIe," (ViT model)"),XIe.forEach(t),cvr=i(D),N7=n(D,"LI",{});var zIe=s(N7);pFe=n(zIe,"STRONG",{});var $wt=s(pFe);fvr=r($wt,"vit_mae"),$wt.forEach(t),mvr=r(zIe," \u2014 "),KH=n(zIe,"A",{href:!0});var kwt=s(KH);gvr=r(kwt,"TFViTMAEModel"),kwt.forEach(t),hvr=r(zIe," (ViTMAE model)"),zIe.forEach(t),pvr=i(D),q7=n(D,"LI",{});var WIe=s(q7);_Fe=n(WIe,"STRONG",{});var Swt=s(_Fe);_vr=r(Swt,"wav2vec2"),Swt.forEach(t),uvr=r(WIe," \u2014 "),ZH=n(WIe,"A",{href:!0});var Rwt=s(ZH);bvr=r(Rwt,"TFWav2Vec2Model"),Rwt.forEach(t),vvr=r(WIe," (Wav2Vec2 model)"),WIe.forEach(t),Fvr=i(D),j7=n(D,"LI",{});var QIe=s(j7);uFe=n(QIe,"STRONG",{});var Pwt=s(uFe);Tvr=r(Pwt,"xlm"),Pwt.forEach(t),Mvr=r(QIe," \u2014 "),eU=n(QIe,"A",{href:!0});var Bwt=s(eU);Evr=r(Bwt,"TFXLMModel"),Bwt.forEach(t),Cvr=r(QIe," (XLM model)"),QIe.forEach(t),wvr=i(D),D7=n(D,"LI",{});var HIe=s(D7);bFe=n(HIe,"STRONG",{});var Iwt=s(bFe);Avr=r(Iwt,"xlm-roberta"),Iwt.forEach(t),Lvr=r(HIe," \u2014 "),oU=n(HIe,"A",{href:!0});var Nwt=s(oU);yvr=r(Nwt,"TFXLMRobertaModel"),Nwt.forEach(t),xvr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),$vr=i(D),G7=n(D,"LI",{});var UIe=s(G7);vFe=n(UIe,"STRONG",{});var qwt=s(vFe);kvr=r(qwt,"xlnet"),qwt.forEach(t),Svr=r(UIe," \u2014 "),rU=n(UIe,"A",{href:!0});var jwt=s(rU);Rvr=r(jwt,"TFXLNetModel"),jwt.forEach(t),Pvr=r(UIe," (XLNet model)"),UIe.forEach(t),D.forEach(t),Bvr=i(wl),T(O7.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),tVe=i(f),nc=n(f,"H2",{class:!0});var fze=s(nc);V7=n(fze,"A",{id:!0,class:!0,href:!0});var Dwt=s(V7);FFe=n(Dwt,"SPAN",{});var Gwt=s(FFe);T(M9.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),Ivr=i(fze),TFe=n(fze,"SPAN",{});var Owt=s(TFe);Nvr=r(Owt,"TFAutoModelForPreTraining"),Owt.forEach(t),fze.forEach(t),aVe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(E9.$$.fragment,Al),qvr=i(Al),sc=n(Al,"P",{});var Mre=s(sc);jvr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tU=n(Mre,"A",{href:!0});var Vwt=s(tU);Dvr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),Gvr=r(Mre," class method or the "),aU=n(Mre,"A",{href:!0});var Xwt=s(aU);Ovr=r(Xwt,"from_config()"),Xwt.forEach(t),Vvr=r(Mre,` class
method.`),Mre.forEach(t),Xvr=i(Al),C9=n(Al,"P",{});var mze=s(C9);zvr=r(mze,"This class cannot be instantiated directly using "),MFe=n(mze,"CODE",{});var zwt=s(MFe);Wvr=r(zwt,"__init__()"),zwt.forEach(t),Qvr=r(mze," (throws an error)."),mze.forEach(t),Hvr=i(Al),St=n(Al,"DIV",{class:!0});var kw=s(St);T(w9.$$.fragment,kw),Uvr=i(kw),EFe=n(kw,"P",{});var Wwt=s(EFe);Jvr=r(Wwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wwt.forEach(t),Yvr=i(kw),lc=n(kw,"P",{});var Ere=s(lc);Kvr=r(Ere,`Note:
Loading a model from its configuration file does `),CFe=n(Ere,"STRONG",{});var Qwt=s(CFe);Zvr=r(Qwt,"not"),Qwt.forEach(t),e0r=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Ere,"A",{href:!0});var Hwt=s(nU);o0r=r(Hwt,"from_pretrained()"),Hwt.forEach(t),r0r=r(Ere," to load the model weights."),Ere.forEach(t),t0r=i(kw),T(X7.$$.fragment,kw),kw.forEach(t),a0r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(A9.$$.fragment,Ll),n0r=i(Ll),wFe=n(Ll,"P",{});var Uwt=s(wFe);s0r=r(Uwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uwt.forEach(t),l0r=i(Ll),sn=n(Ll,"P",{});var Sw=s(sn);i0r=r(Sw,"The model class to instantiate is selected based on the "),AFe=n(Sw,"CODE",{});var Jwt=s(AFe);d0r=r(Jwt,"model_type"),Jwt.forEach(t),c0r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),LFe=n(Sw,"CODE",{});var Ywt=s(LFe);f0r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),m0r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(Sw,"CODE",{});var Kwt=s(yFe);g0r=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),h0r=r(Sw,":"),Sw.forEach(t),p0r=i(Ll),se=n(Ll,"UL",{});var le=s(se);z7=n(le,"LI",{});var JIe=s(z7);xFe=n(JIe,"STRONG",{});var Zwt=s(xFe);_0r=r(Zwt,"albert"),Zwt.forEach(t),u0r=r(JIe," \u2014 "),sU=n(JIe,"A",{href:!0});var eAt=s(sU);b0r=r(eAt,"TFAlbertForPreTraining"),eAt.forEach(t),v0r=r(JIe," (ALBERT model)"),JIe.forEach(t),F0r=i(le),W7=n(le,"LI",{});var YIe=s(W7);$Fe=n(YIe,"STRONG",{});var oAt=s($Fe);T0r=r(oAt,"bart"),oAt.forEach(t),M0r=r(YIe," \u2014 "),lU=n(YIe,"A",{href:!0});var rAt=s(lU);E0r=r(rAt,"TFBartForConditionalGeneration"),rAt.forEach(t),C0r=r(YIe," (BART model)"),YIe.forEach(t),w0r=i(le),Q7=n(le,"LI",{});var KIe=s(Q7);kFe=n(KIe,"STRONG",{});var tAt=s(kFe);A0r=r(tAt,"bert"),tAt.forEach(t),L0r=r(KIe," \u2014 "),iU=n(KIe,"A",{href:!0});var aAt=s(iU);y0r=r(aAt,"TFBertForPreTraining"),aAt.forEach(t),x0r=r(KIe," (BERT model)"),KIe.forEach(t),$0r=i(le),H7=n(le,"LI",{});var ZIe=s(H7);SFe=n(ZIe,"STRONG",{});var nAt=s(SFe);k0r=r(nAt,"camembert"),nAt.forEach(t),S0r=r(ZIe," \u2014 "),dU=n(ZIe,"A",{href:!0});var sAt=s(dU);R0r=r(sAt,"TFCamembertForMaskedLM"),sAt.forEach(t),P0r=r(ZIe," (CamemBERT model)"),ZIe.forEach(t),B0r=i(le),U7=n(le,"LI",{});var eNe=s(U7);RFe=n(eNe,"STRONG",{});var lAt=s(RFe);I0r=r(lAt,"ctrl"),lAt.forEach(t),N0r=r(eNe," \u2014 "),cU=n(eNe,"A",{href:!0});var iAt=s(cU);q0r=r(iAt,"TFCTRLLMHeadModel"),iAt.forEach(t),j0r=r(eNe," (CTRL model)"),eNe.forEach(t),D0r=i(le),J7=n(le,"LI",{});var oNe=s(J7);PFe=n(oNe,"STRONG",{});var dAt=s(PFe);G0r=r(dAt,"distilbert"),dAt.forEach(t),O0r=r(oNe," \u2014 "),fU=n(oNe,"A",{href:!0});var cAt=s(fU);V0r=r(cAt,"TFDistilBertForMaskedLM"),cAt.forEach(t),X0r=r(oNe," (DistilBERT model)"),oNe.forEach(t),z0r=i(le),Y7=n(le,"LI",{});var rNe=s(Y7);BFe=n(rNe,"STRONG",{});var fAt=s(BFe);W0r=r(fAt,"electra"),fAt.forEach(t),Q0r=r(rNe," \u2014 "),mU=n(rNe,"A",{href:!0});var mAt=s(mU);H0r=r(mAt,"TFElectraForPreTraining"),mAt.forEach(t),U0r=r(rNe," (ELECTRA model)"),rNe.forEach(t),J0r=i(le),K7=n(le,"LI",{});var tNe=s(K7);IFe=n(tNe,"STRONG",{});var gAt=s(IFe);Y0r=r(gAt,"flaubert"),gAt.forEach(t),K0r=r(tNe," \u2014 "),gU=n(tNe,"A",{href:!0});var hAt=s(gU);Z0r=r(hAt,"TFFlaubertWithLMHeadModel"),hAt.forEach(t),eFr=r(tNe," (FlauBERT model)"),tNe.forEach(t),oFr=i(le),Z7=n(le,"LI",{});var aNe=s(Z7);NFe=n(aNe,"STRONG",{});var pAt=s(NFe);rFr=r(pAt,"funnel"),pAt.forEach(t),tFr=r(aNe," \u2014 "),hU=n(aNe,"A",{href:!0});var _At=s(hU);aFr=r(_At,"TFFunnelForPreTraining"),_At.forEach(t),nFr=r(aNe," (Funnel Transformer model)"),aNe.forEach(t),sFr=i(le),e8=n(le,"LI",{});var nNe=s(e8);qFe=n(nNe,"STRONG",{});var uAt=s(qFe);lFr=r(uAt,"gpt2"),uAt.forEach(t),iFr=r(nNe," \u2014 "),pU=n(nNe,"A",{href:!0});var bAt=s(pU);dFr=r(bAt,"TFGPT2LMHeadModel"),bAt.forEach(t),cFr=r(nNe," (OpenAI GPT-2 model)"),nNe.forEach(t),fFr=i(le),o8=n(le,"LI",{});var sNe=s(o8);jFe=n(sNe,"STRONG",{});var vAt=s(jFe);mFr=r(vAt,"layoutlm"),vAt.forEach(t),gFr=r(sNe," \u2014 "),_U=n(sNe,"A",{href:!0});var FAt=s(_U);hFr=r(FAt,"TFLayoutLMForMaskedLM"),FAt.forEach(t),pFr=r(sNe," (LayoutLM model)"),sNe.forEach(t),_Fr=i(le),r8=n(le,"LI",{});var lNe=s(r8);DFe=n(lNe,"STRONG",{});var TAt=s(DFe);uFr=r(TAt,"lxmert"),TAt.forEach(t),bFr=r(lNe," \u2014 "),uU=n(lNe,"A",{href:!0});var MAt=s(uU);vFr=r(MAt,"TFLxmertForPreTraining"),MAt.forEach(t),FFr=r(lNe," (LXMERT model)"),lNe.forEach(t),TFr=i(le),t8=n(le,"LI",{});var iNe=s(t8);GFe=n(iNe,"STRONG",{});var EAt=s(GFe);MFr=r(EAt,"mobilebert"),EAt.forEach(t),EFr=r(iNe," \u2014 "),bU=n(iNe,"A",{href:!0});var CAt=s(bU);CFr=r(CAt,"TFMobileBertForPreTraining"),CAt.forEach(t),wFr=r(iNe," (MobileBERT model)"),iNe.forEach(t),AFr=i(le),a8=n(le,"LI",{});var dNe=s(a8);OFe=n(dNe,"STRONG",{});var wAt=s(OFe);LFr=r(wAt,"mpnet"),wAt.forEach(t),yFr=r(dNe," \u2014 "),vU=n(dNe,"A",{href:!0});var AAt=s(vU);xFr=r(AAt,"TFMPNetForMaskedLM"),AAt.forEach(t),$Fr=r(dNe," (MPNet model)"),dNe.forEach(t),kFr=i(le),n8=n(le,"LI",{});var cNe=s(n8);VFe=n(cNe,"STRONG",{});var LAt=s(VFe);SFr=r(LAt,"openai-gpt"),LAt.forEach(t),RFr=r(cNe," \u2014 "),FU=n(cNe,"A",{href:!0});var yAt=s(FU);PFr=r(yAt,"TFOpenAIGPTLMHeadModel"),yAt.forEach(t),BFr=r(cNe," (OpenAI GPT model)"),cNe.forEach(t),IFr=i(le),s8=n(le,"LI",{});var fNe=s(s8);XFe=n(fNe,"STRONG",{});var xAt=s(XFe);NFr=r(xAt,"roberta"),xAt.forEach(t),qFr=r(fNe," \u2014 "),TU=n(fNe,"A",{href:!0});var $At=s(TU);jFr=r($At,"TFRobertaForMaskedLM"),$At.forEach(t),DFr=r(fNe," (RoBERTa model)"),fNe.forEach(t),GFr=i(le),l8=n(le,"LI",{});var mNe=s(l8);zFe=n(mNe,"STRONG",{});var kAt=s(zFe);OFr=r(kAt,"t5"),kAt.forEach(t),VFr=r(mNe," \u2014 "),MU=n(mNe,"A",{href:!0});var SAt=s(MU);XFr=r(SAt,"TFT5ForConditionalGeneration"),SAt.forEach(t),zFr=r(mNe," (T5 model)"),mNe.forEach(t),WFr=i(le),i8=n(le,"LI",{});var gNe=s(i8);WFe=n(gNe,"STRONG",{});var RAt=s(WFe);QFr=r(RAt,"tapas"),RAt.forEach(t),HFr=r(gNe," \u2014 "),EU=n(gNe,"A",{href:!0});var PAt=s(EU);UFr=r(PAt,"TFTapasForMaskedLM"),PAt.forEach(t),JFr=r(gNe," (TAPAS model)"),gNe.forEach(t),YFr=i(le),d8=n(le,"LI",{});var hNe=s(d8);QFe=n(hNe,"STRONG",{});var BAt=s(QFe);KFr=r(BAt,"transfo-xl"),BAt.forEach(t),ZFr=r(hNe," \u2014 "),CU=n(hNe,"A",{href:!0});var IAt=s(CU);e6r=r(IAt,"TFTransfoXLLMHeadModel"),IAt.forEach(t),o6r=r(hNe," (Transformer-XL model)"),hNe.forEach(t),r6r=i(le),c8=n(le,"LI",{});var pNe=s(c8);HFe=n(pNe,"STRONG",{});var NAt=s(HFe);t6r=r(NAt,"vit_mae"),NAt.forEach(t),a6r=r(pNe," \u2014 "),wU=n(pNe,"A",{href:!0});var qAt=s(wU);n6r=r(qAt,"TFViTMAEForPreTraining"),qAt.forEach(t),s6r=r(pNe," (ViTMAE model)"),pNe.forEach(t),l6r=i(le),f8=n(le,"LI",{});var _Ne=s(f8);UFe=n(_Ne,"STRONG",{});var jAt=s(UFe);i6r=r(jAt,"xlm"),jAt.forEach(t),d6r=r(_Ne," \u2014 "),AU=n(_Ne,"A",{href:!0});var DAt=s(AU);c6r=r(DAt,"TFXLMWithLMHeadModel"),DAt.forEach(t),f6r=r(_Ne," (XLM model)"),_Ne.forEach(t),m6r=i(le),m8=n(le,"LI",{});var uNe=s(m8);JFe=n(uNe,"STRONG",{});var GAt=s(JFe);g6r=r(GAt,"xlm-roberta"),GAt.forEach(t),h6r=r(uNe," \u2014 "),LU=n(uNe,"A",{href:!0});var OAt=s(LU);p6r=r(OAt,"TFXLMRobertaForMaskedLM"),OAt.forEach(t),_6r=r(uNe," (XLM-RoBERTa model)"),uNe.forEach(t),u6r=i(le),g8=n(le,"LI",{});var bNe=s(g8);YFe=n(bNe,"STRONG",{});var VAt=s(YFe);b6r=r(VAt,"xlnet"),VAt.forEach(t),v6r=r(bNe," \u2014 "),yU=n(bNe,"A",{href:!0});var XAt=s(yU);F6r=r(XAt,"TFXLNetLMHeadModel"),XAt.forEach(t),T6r=r(bNe," (XLNet model)"),bNe.forEach(t),le.forEach(t),M6r=i(Ll),T(h8.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),nVe=i(f),ic=n(f,"H2",{class:!0});var gze=s(ic);p8=n(gze,"A",{id:!0,class:!0,href:!0});var zAt=s(p8);KFe=n(zAt,"SPAN",{});var WAt=s(KFe);T(L9.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),E6r=i(gze),ZFe=n(gze,"SPAN",{});var QAt=s(ZFe);C6r=r(QAt,"TFAutoModelForCausalLM"),QAt.forEach(t),gze.forEach(t),sVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(y9.$$.fragment,yl),w6r=i(yl),dc=n(yl,"P",{});var Cre=s(dc);A6r=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xU=n(Cre,"A",{href:!0});var HAt=s(xU);L6r=r(HAt,"from_pretrained()"),HAt.forEach(t),y6r=r(Cre," class method or the "),$U=n(Cre,"A",{href:!0});var UAt=s($U);x6r=r(UAt,"from_config()"),UAt.forEach(t),$6r=r(Cre,` class
method.`),Cre.forEach(t),k6r=i(yl),x9=n(yl,"P",{});var hze=s(x9);S6r=r(hze,"This class cannot be instantiated directly using "),e6e=n(hze,"CODE",{});var JAt=s(e6e);R6r=r(JAt,"__init__()"),JAt.forEach(t),P6r=r(hze," (throws an error)."),hze.forEach(t),B6r=i(yl),Rt=n(yl,"DIV",{class:!0});var Rw=s(Rt);T($9.$$.fragment,Rw),I6r=i(Rw),o6e=n(Rw,"P",{});var YAt=s(o6e);N6r=r(YAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YAt.forEach(t),q6r=i(Rw),cc=n(Rw,"P",{});var wre=s(cc);j6r=r(wre,`Note:
Loading a model from its configuration file does `),r6e=n(wre,"STRONG",{});var KAt=s(r6e);D6r=r(KAt,"not"),KAt.forEach(t),G6r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(wre,"A",{href:!0});var ZAt=s(kU);O6r=r(ZAt,"from_pretrained()"),ZAt.forEach(t),V6r=r(wre," to load the model weights."),wre.forEach(t),X6r=i(Rw),T(_8.$$.fragment,Rw),Rw.forEach(t),z6r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(k9.$$.fragment,xl),W6r=i(xl),t6e=n(xl,"P",{});var eLt=s(t6e);Q6r=r(eLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eLt.forEach(t),H6r=i(xl),ln=n(xl,"P",{});var Pw=s(ln);U6r=r(Pw,"The model class to instantiate is selected based on the "),a6e=n(Pw,"CODE",{});var oLt=s(a6e);J6r=r(oLt,"model_type"),oLt.forEach(t),Y6r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),n6e=n(Pw,"CODE",{});var rLt=s(n6e);K6r=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),Z6r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(Pw,"CODE",{});var tLt=s(s6e);eTr=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),oTr=r(Pw,":"),Pw.forEach(t),rTr=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);u8=n(Ce,"LI",{});var vNe=s(u8);l6e=n(vNe,"STRONG",{});var aLt=s(l6e);tTr=r(aLt,"bert"),aLt.forEach(t),aTr=r(vNe," \u2014 "),SU=n(vNe,"A",{href:!0});var nLt=s(SU);nTr=r(nLt,"TFBertLMHeadModel"),nLt.forEach(t),sTr=r(vNe," (BERT model)"),vNe.forEach(t),lTr=i(Ce),b8=n(Ce,"LI",{});var FNe=s(b8);i6e=n(FNe,"STRONG",{});var sLt=s(i6e);iTr=r(sLt,"camembert"),sLt.forEach(t),dTr=r(FNe," \u2014 "),RU=n(FNe,"A",{href:!0});var lLt=s(RU);cTr=r(lLt,"TFCamembertForCausalLM"),lLt.forEach(t),fTr=r(FNe," (CamemBERT model)"),FNe.forEach(t),mTr=i(Ce),v8=n(Ce,"LI",{});var TNe=s(v8);d6e=n(TNe,"STRONG",{});var iLt=s(d6e);gTr=r(iLt,"ctrl"),iLt.forEach(t),hTr=r(TNe," \u2014 "),PU=n(TNe,"A",{href:!0});var dLt=s(PU);pTr=r(dLt,"TFCTRLLMHeadModel"),dLt.forEach(t),_Tr=r(TNe," (CTRL model)"),TNe.forEach(t),uTr=i(Ce),F8=n(Ce,"LI",{});var MNe=s(F8);c6e=n(MNe,"STRONG",{});var cLt=s(c6e);bTr=r(cLt,"gpt2"),cLt.forEach(t),vTr=r(MNe," \u2014 "),BU=n(MNe,"A",{href:!0});var fLt=s(BU);FTr=r(fLt,"TFGPT2LMHeadModel"),fLt.forEach(t),TTr=r(MNe," (OpenAI GPT-2 model)"),MNe.forEach(t),MTr=i(Ce),T8=n(Ce,"LI",{});var ENe=s(T8);f6e=n(ENe,"STRONG",{});var mLt=s(f6e);ETr=r(mLt,"gptj"),mLt.forEach(t),CTr=r(ENe," \u2014 "),IU=n(ENe,"A",{href:!0});var gLt=s(IU);wTr=r(gLt,"TFGPTJForCausalLM"),gLt.forEach(t),ATr=r(ENe," (GPT-J model)"),ENe.forEach(t),LTr=i(Ce),M8=n(Ce,"LI",{});var CNe=s(M8);m6e=n(CNe,"STRONG",{});var hLt=s(m6e);yTr=r(hLt,"openai-gpt"),hLt.forEach(t),xTr=r(CNe," \u2014 "),NU=n(CNe,"A",{href:!0});var pLt=s(NU);$Tr=r(pLt,"TFOpenAIGPTLMHeadModel"),pLt.forEach(t),kTr=r(CNe," (OpenAI GPT model)"),CNe.forEach(t),STr=i(Ce),E8=n(Ce,"LI",{});var wNe=s(E8);g6e=n(wNe,"STRONG",{});var _Lt=s(g6e);RTr=r(_Lt,"opt"),_Lt.forEach(t),PTr=r(wNe," \u2014 "),qU=n(wNe,"A",{href:!0});var uLt=s(qU);BTr=r(uLt,"TFOPTForCausalLM"),uLt.forEach(t),ITr=r(wNe," (OPT model)"),wNe.forEach(t),NTr=i(Ce),C8=n(Ce,"LI",{});var ANe=s(C8);h6e=n(ANe,"STRONG",{});var bLt=s(h6e);qTr=r(bLt,"rembert"),bLt.forEach(t),jTr=r(ANe," \u2014 "),jU=n(ANe,"A",{href:!0});var vLt=s(jU);DTr=r(vLt,"TFRemBertForCausalLM"),vLt.forEach(t),GTr=r(ANe," (RemBERT model)"),ANe.forEach(t),OTr=i(Ce),w8=n(Ce,"LI",{});var LNe=s(w8);p6e=n(LNe,"STRONG",{});var FLt=s(p6e);VTr=r(FLt,"roberta"),FLt.forEach(t),XTr=r(LNe," \u2014 "),DU=n(LNe,"A",{href:!0});var TLt=s(DU);zTr=r(TLt,"TFRobertaForCausalLM"),TLt.forEach(t),WTr=r(LNe," (RoBERTa model)"),LNe.forEach(t),QTr=i(Ce),A8=n(Ce,"LI",{});var yNe=s(A8);_6e=n(yNe,"STRONG",{});var MLt=s(_6e);HTr=r(MLt,"roformer"),MLt.forEach(t),UTr=r(yNe," \u2014 "),GU=n(yNe,"A",{href:!0});var ELt=s(GU);JTr=r(ELt,"TFRoFormerForCausalLM"),ELt.forEach(t),YTr=r(yNe," (RoFormer model)"),yNe.forEach(t),KTr=i(Ce),L8=n(Ce,"LI",{});var xNe=s(L8);u6e=n(xNe,"STRONG",{});var CLt=s(u6e);ZTr=r(CLt,"transfo-xl"),CLt.forEach(t),e7r=r(xNe," \u2014 "),OU=n(xNe,"A",{href:!0});var wLt=s(OU);o7r=r(wLt,"TFTransfoXLLMHeadModel"),wLt.forEach(t),r7r=r(xNe," (Transformer-XL model)"),xNe.forEach(t),t7r=i(Ce),y8=n(Ce,"LI",{});var $Ne=s(y8);b6e=n($Ne,"STRONG",{});var ALt=s(b6e);a7r=r(ALt,"xlm"),ALt.forEach(t),n7r=r($Ne," \u2014 "),VU=n($Ne,"A",{href:!0});var LLt=s(VU);s7r=r(LLt,"TFXLMWithLMHeadModel"),LLt.forEach(t),l7r=r($Ne," (XLM model)"),$Ne.forEach(t),i7r=i(Ce),x8=n(Ce,"LI",{});var kNe=s(x8);v6e=n(kNe,"STRONG",{});var yLt=s(v6e);d7r=r(yLt,"xlnet"),yLt.forEach(t),c7r=r(kNe," \u2014 "),XU=n(kNe,"A",{href:!0});var xLt=s(XU);f7r=r(xLt,"TFXLNetLMHeadModel"),xLt.forEach(t),m7r=r(kNe," (XLNet model)"),kNe.forEach(t),Ce.forEach(t),g7r=i(xl),T($8.$$.fragment,xl),xl.forEach(t),yl.forEach(t),lVe=i(f),fc=n(f,"H2",{class:!0});var pze=s(fc);k8=n(pze,"A",{id:!0,class:!0,href:!0});var $Lt=s(k8);F6e=n($Lt,"SPAN",{});var kLt=s(F6e);T(S9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),h7r=i(pze),T6e=n(pze,"SPAN",{});var SLt=s(T6e);p7r=r(SLt,"TFAutoModelForImageClassification"),SLt.forEach(t),pze.forEach(t),iVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(R9.$$.fragment,$l),_7r=i($l),mc=n($l,"P",{});var Are=s(mc);u7r=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zU=n(Are,"A",{href:!0});var RLt=s(zU);b7r=r(RLt,"from_pretrained()"),RLt.forEach(t),v7r=r(Are," class method or the "),WU=n(Are,"A",{href:!0});var PLt=s(WU);F7r=r(PLt,"from_config()"),PLt.forEach(t),T7r=r(Are,` class
method.`),Are.forEach(t),M7r=i($l),P9=n($l,"P",{});var _ze=s(P9);E7r=r(_ze,"This class cannot be instantiated directly using "),M6e=n(_ze,"CODE",{});var BLt=s(M6e);C7r=r(BLt,"__init__()"),BLt.forEach(t),w7r=r(_ze," (throws an error)."),_ze.forEach(t),A7r=i($l),Pt=n($l,"DIV",{class:!0});var Bw=s(Pt);T(B9.$$.fragment,Bw),L7r=i(Bw),E6e=n(Bw,"P",{});var ILt=s(E6e);y7r=r(ILt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ILt.forEach(t),x7r=i(Bw),gc=n(Bw,"P",{});var Lre=s(gc);$7r=r(Lre,`Note:
Loading a model from its configuration file does `),C6e=n(Lre,"STRONG",{});var NLt=s(C6e);k7r=r(NLt,"not"),NLt.forEach(t),S7r=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Lre,"A",{href:!0});var qLt=s(QU);R7r=r(qLt,"from_pretrained()"),qLt.forEach(t),P7r=r(Lre," to load the model weights."),Lre.forEach(t),B7r=i(Bw),T(S8.$$.fragment,Bw),Bw.forEach(t),I7r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(I9.$$.fragment,kl),N7r=i(kl),w6e=n(kl,"P",{});var jLt=s(w6e);q7r=r(jLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jLt.forEach(t),j7r=i(kl),dn=n(kl,"P",{});var Iw=s(dn);D7r=r(Iw,"The model class to instantiate is selected based on the "),A6e=n(Iw,"CODE",{});var DLt=s(A6e);G7r=r(DLt,"model_type"),DLt.forEach(t),O7r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),L6e=n(Iw,"CODE",{});var GLt=s(L6e);V7r=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),X7r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=n(Iw,"CODE",{});var OLt=s(y6e);z7r=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),W7r=r(Iw,":"),Iw.forEach(t),Q7r=i(kl),rt=n(kl,"UL",{});var Sl=s(rt);R8=n(Sl,"LI",{});var SNe=s(R8);x6e=n(SNe,"STRONG",{});var VLt=s(x6e);H7r=r(VLt,"convnext"),VLt.forEach(t),U7r=r(SNe," \u2014 "),HU=n(SNe,"A",{href:!0});var XLt=s(HU);J7r=r(XLt,"TFConvNextForImageClassification"),XLt.forEach(t),Y7r=r(SNe," (ConvNeXT model)"),SNe.forEach(t),K7r=i(Sl),P8=n(Sl,"LI",{});var RNe=s(P8);$6e=n(RNe,"STRONG",{});var zLt=s($6e);Z7r=r(zLt,"data2vec-vision"),zLt.forEach(t),e8r=r(RNe," \u2014 "),UU=n(RNe,"A",{href:!0});var WLt=s(UU);o8r=r(WLt,"TFData2VecVisionForImageClassification"),WLt.forEach(t),r8r=r(RNe," (Data2VecVision model)"),RNe.forEach(t),t8r=i(Sl),Qs=n(Sl,"LI",{});var aS=s(Qs);k6e=n(aS,"STRONG",{});var QLt=s(k6e);a8r=r(QLt,"deit"),QLt.forEach(t),n8r=r(aS," \u2014 "),JU=n(aS,"A",{href:!0});var HLt=s(JU);s8r=r(HLt,"TFDeiTForImageClassification"),HLt.forEach(t),l8r=r(aS," or "),YU=n(aS,"A",{href:!0});var ULt=s(YU);i8r=r(ULt,"TFDeiTForImageClassificationWithTeacher"),ULt.forEach(t),d8r=r(aS," (DeiT model)"),aS.forEach(t),c8r=i(Sl),B8=n(Sl,"LI",{});var PNe=s(B8);S6e=n(PNe,"STRONG",{});var JLt=s(S6e);f8r=r(JLt,"swin"),JLt.forEach(t),m8r=r(PNe," \u2014 "),KU=n(PNe,"A",{href:!0});var YLt=s(KU);g8r=r(YLt,"TFSwinForImageClassification"),YLt.forEach(t),h8r=r(PNe," (Swin Transformer model)"),PNe.forEach(t),p8r=i(Sl),I8=n(Sl,"LI",{});var BNe=s(I8);R6e=n(BNe,"STRONG",{});var KLt=s(R6e);_8r=r(KLt,"vit"),KLt.forEach(t),u8r=r(BNe," \u2014 "),ZU=n(BNe,"A",{href:!0});var ZLt=s(ZU);b8r=r(ZLt,"TFViTForImageClassification"),ZLt.forEach(t),v8r=r(BNe," (ViT model)"),BNe.forEach(t),Sl.forEach(t),F8r=i(kl),T(N8.$$.fragment,kl),kl.forEach(t),$l.forEach(t),dVe=i(f),hc=n(f,"H2",{class:!0});var uze=s(hc);q8=n(uze,"A",{id:!0,class:!0,href:!0});var eyt=s(q8);P6e=n(eyt,"SPAN",{});var oyt=s(P6e);T(N9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),T8r=i(uze),B6e=n(uze,"SPAN",{});var ryt=s(B6e);M8r=r(ryt,"TFAutoModelForMaskedLM"),ryt.forEach(t),uze.forEach(t),cVe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(q9.$$.fragment,Rl),E8r=i(Rl),pc=n(Rl,"P",{});var yre=s(pc);C8r=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eJ=n(yre,"A",{href:!0});var tyt=s(eJ);w8r=r(tyt,"from_pretrained()"),tyt.forEach(t),A8r=r(yre," class method or the "),oJ=n(yre,"A",{href:!0});var ayt=s(oJ);L8r=r(ayt,"from_config()"),ayt.forEach(t),y8r=r(yre,` class
method.`),yre.forEach(t),x8r=i(Rl),j9=n(Rl,"P",{});var bze=s(j9);$8r=r(bze,"This class cannot be instantiated directly using "),I6e=n(bze,"CODE",{});var nyt=s(I6e);k8r=r(nyt,"__init__()"),nyt.forEach(t),S8r=r(bze," (throws an error)."),bze.forEach(t),R8r=i(Rl),Bt=n(Rl,"DIV",{class:!0});var Nw=s(Bt);T(D9.$$.fragment,Nw),P8r=i(Nw),N6e=n(Nw,"P",{});var syt=s(N6e);B8r=r(syt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),syt.forEach(t),I8r=i(Nw),_c=n(Nw,"P",{});var xre=s(_c);N8r=r(xre,`Note:
Loading a model from its configuration file does `),q6e=n(xre,"STRONG",{});var lyt=s(q6e);q8r=r(lyt,"not"),lyt.forEach(t),j8r=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(xre,"A",{href:!0});var iyt=s(rJ);D8r=r(iyt,"from_pretrained()"),iyt.forEach(t),G8r=r(xre," to load the model weights."),xre.forEach(t),O8r=i(Nw),T(j8.$$.fragment,Nw),Nw.forEach(t),V8r=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(G9.$$.fragment,Pl),X8r=i(Pl),j6e=n(Pl,"P",{});var dyt=s(j6e);z8r=r(dyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dyt.forEach(t),W8r=i(Pl),cn=n(Pl,"P",{});var qw=s(cn);Q8r=r(qw,"The model class to instantiate is selected based on the "),D6e=n(qw,"CODE",{});var cyt=s(D6e);H8r=r(cyt,"model_type"),cyt.forEach(t),U8r=r(qw,` property of the config object (either
passed as an argument or loaded from `),G6e=n(qw,"CODE",{});var fyt=s(G6e);J8r=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Y8r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(qw,"CODE",{});var myt=s(O6e);K8r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),Z8r=r(qw,":"),qw.forEach(t),eMr=i(Pl),ie=n(Pl,"UL",{});var fe=s(ie);D8=n(fe,"LI",{});var INe=s(D8);V6e=n(INe,"STRONG",{});var gyt=s(V6e);oMr=r(gyt,"albert"),gyt.forEach(t),rMr=r(INe," \u2014 "),tJ=n(INe,"A",{href:!0});var hyt=s(tJ);tMr=r(hyt,"TFAlbertForMaskedLM"),hyt.forEach(t),aMr=r(INe," (ALBERT model)"),INe.forEach(t),nMr=i(fe),G8=n(fe,"LI",{});var NNe=s(G8);X6e=n(NNe,"STRONG",{});var pyt=s(X6e);sMr=r(pyt,"bert"),pyt.forEach(t),lMr=r(NNe," \u2014 "),aJ=n(NNe,"A",{href:!0});var _yt=s(aJ);iMr=r(_yt,"TFBertForMaskedLM"),_yt.forEach(t),dMr=r(NNe," (BERT model)"),NNe.forEach(t),cMr=i(fe),O8=n(fe,"LI",{});var qNe=s(O8);z6e=n(qNe,"STRONG",{});var uyt=s(z6e);fMr=r(uyt,"camembert"),uyt.forEach(t),mMr=r(qNe," \u2014 "),nJ=n(qNe,"A",{href:!0});var byt=s(nJ);gMr=r(byt,"TFCamembertForMaskedLM"),byt.forEach(t),hMr=r(qNe," (CamemBERT model)"),qNe.forEach(t),pMr=i(fe),V8=n(fe,"LI",{});var jNe=s(V8);W6e=n(jNe,"STRONG",{});var vyt=s(W6e);_Mr=r(vyt,"convbert"),vyt.forEach(t),uMr=r(jNe," \u2014 "),sJ=n(jNe,"A",{href:!0});var Fyt=s(sJ);bMr=r(Fyt,"TFConvBertForMaskedLM"),Fyt.forEach(t),vMr=r(jNe," (ConvBERT model)"),jNe.forEach(t),FMr=i(fe),X8=n(fe,"LI",{});var DNe=s(X8);Q6e=n(DNe,"STRONG",{});var Tyt=s(Q6e);TMr=r(Tyt,"deberta"),Tyt.forEach(t),MMr=r(DNe," \u2014 "),lJ=n(DNe,"A",{href:!0});var Myt=s(lJ);EMr=r(Myt,"TFDebertaForMaskedLM"),Myt.forEach(t),CMr=r(DNe," (DeBERTa model)"),DNe.forEach(t),wMr=i(fe),z8=n(fe,"LI",{});var GNe=s(z8);H6e=n(GNe,"STRONG",{});var Eyt=s(H6e);AMr=r(Eyt,"deberta-v2"),Eyt.forEach(t),LMr=r(GNe," \u2014 "),iJ=n(GNe,"A",{href:!0});var Cyt=s(iJ);yMr=r(Cyt,"TFDebertaV2ForMaskedLM"),Cyt.forEach(t),xMr=r(GNe," (DeBERTa-v2 model)"),GNe.forEach(t),$Mr=i(fe),W8=n(fe,"LI",{});var ONe=s(W8);U6e=n(ONe,"STRONG",{});var wyt=s(U6e);kMr=r(wyt,"distilbert"),wyt.forEach(t),SMr=r(ONe," \u2014 "),dJ=n(ONe,"A",{href:!0});var Ayt=s(dJ);RMr=r(Ayt,"TFDistilBertForMaskedLM"),Ayt.forEach(t),PMr=r(ONe," (DistilBERT model)"),ONe.forEach(t),BMr=i(fe),Q8=n(fe,"LI",{});var VNe=s(Q8);J6e=n(VNe,"STRONG",{});var Lyt=s(J6e);IMr=r(Lyt,"electra"),Lyt.forEach(t),NMr=r(VNe," \u2014 "),cJ=n(VNe,"A",{href:!0});var yyt=s(cJ);qMr=r(yyt,"TFElectraForMaskedLM"),yyt.forEach(t),jMr=r(VNe," (ELECTRA model)"),VNe.forEach(t),DMr=i(fe),H8=n(fe,"LI",{});var XNe=s(H8);Y6e=n(XNe,"STRONG",{});var xyt=s(Y6e);GMr=r(xyt,"flaubert"),xyt.forEach(t),OMr=r(XNe," \u2014 "),fJ=n(XNe,"A",{href:!0});var $yt=s(fJ);VMr=r($yt,"TFFlaubertWithLMHeadModel"),$yt.forEach(t),XMr=r(XNe," (FlauBERT model)"),XNe.forEach(t),zMr=i(fe),U8=n(fe,"LI",{});var zNe=s(U8);K6e=n(zNe,"STRONG",{});var kyt=s(K6e);WMr=r(kyt,"funnel"),kyt.forEach(t),QMr=r(zNe," \u2014 "),mJ=n(zNe,"A",{href:!0});var Syt=s(mJ);HMr=r(Syt,"TFFunnelForMaskedLM"),Syt.forEach(t),UMr=r(zNe," (Funnel Transformer model)"),zNe.forEach(t),JMr=i(fe),J8=n(fe,"LI",{});var WNe=s(J8);Z6e=n(WNe,"STRONG",{});var Ryt=s(Z6e);YMr=r(Ryt,"layoutlm"),Ryt.forEach(t),KMr=r(WNe," \u2014 "),gJ=n(WNe,"A",{href:!0});var Pyt=s(gJ);ZMr=r(Pyt,"TFLayoutLMForMaskedLM"),Pyt.forEach(t),eEr=r(WNe," (LayoutLM model)"),WNe.forEach(t),oEr=i(fe),Y8=n(fe,"LI",{});var QNe=s(Y8);eTe=n(QNe,"STRONG",{});var Byt=s(eTe);rEr=r(Byt,"longformer"),Byt.forEach(t),tEr=r(QNe," \u2014 "),hJ=n(QNe,"A",{href:!0});var Iyt=s(hJ);aEr=r(Iyt,"TFLongformerForMaskedLM"),Iyt.forEach(t),nEr=r(QNe," (Longformer model)"),QNe.forEach(t),sEr=i(fe),K8=n(fe,"LI",{});var HNe=s(K8);oTe=n(HNe,"STRONG",{});var Nyt=s(oTe);lEr=r(Nyt,"mobilebert"),Nyt.forEach(t),iEr=r(HNe," \u2014 "),pJ=n(HNe,"A",{href:!0});var qyt=s(pJ);dEr=r(qyt,"TFMobileBertForMaskedLM"),qyt.forEach(t),cEr=r(HNe," (MobileBERT model)"),HNe.forEach(t),fEr=i(fe),Z8=n(fe,"LI",{});var UNe=s(Z8);rTe=n(UNe,"STRONG",{});var jyt=s(rTe);mEr=r(jyt,"mpnet"),jyt.forEach(t),gEr=r(UNe," \u2014 "),_J=n(UNe,"A",{href:!0});var Dyt=s(_J);hEr=r(Dyt,"TFMPNetForMaskedLM"),Dyt.forEach(t),pEr=r(UNe," (MPNet model)"),UNe.forEach(t),_Er=i(fe),eM=n(fe,"LI",{});var JNe=s(eM);tTe=n(JNe,"STRONG",{});var Gyt=s(tTe);uEr=r(Gyt,"rembert"),Gyt.forEach(t),bEr=r(JNe," \u2014 "),uJ=n(JNe,"A",{href:!0});var Oyt=s(uJ);vEr=r(Oyt,"TFRemBertForMaskedLM"),Oyt.forEach(t),FEr=r(JNe," (RemBERT model)"),JNe.forEach(t),TEr=i(fe),oM=n(fe,"LI",{});var YNe=s(oM);aTe=n(YNe,"STRONG",{});var Vyt=s(aTe);MEr=r(Vyt,"roberta"),Vyt.forEach(t),EEr=r(YNe," \u2014 "),bJ=n(YNe,"A",{href:!0});var Xyt=s(bJ);CEr=r(Xyt,"TFRobertaForMaskedLM"),Xyt.forEach(t),wEr=r(YNe," (RoBERTa model)"),YNe.forEach(t),AEr=i(fe),rM=n(fe,"LI",{});var KNe=s(rM);nTe=n(KNe,"STRONG",{});var zyt=s(nTe);LEr=r(zyt,"roformer"),zyt.forEach(t),yEr=r(KNe," \u2014 "),vJ=n(KNe,"A",{href:!0});var Wyt=s(vJ);xEr=r(Wyt,"TFRoFormerForMaskedLM"),Wyt.forEach(t),$Er=r(KNe," (RoFormer model)"),KNe.forEach(t),kEr=i(fe),tM=n(fe,"LI",{});var ZNe=s(tM);sTe=n(ZNe,"STRONG",{});var Qyt=s(sTe);SEr=r(Qyt,"tapas"),Qyt.forEach(t),REr=r(ZNe," \u2014 "),FJ=n(ZNe,"A",{href:!0});var Hyt=s(FJ);PEr=r(Hyt,"TFTapasForMaskedLM"),Hyt.forEach(t),BEr=r(ZNe," (TAPAS model)"),ZNe.forEach(t),IEr=i(fe),aM=n(fe,"LI",{});var eqe=s(aM);lTe=n(eqe,"STRONG",{});var Uyt=s(lTe);NEr=r(Uyt,"xlm"),Uyt.forEach(t),qEr=r(eqe," \u2014 "),TJ=n(eqe,"A",{href:!0});var Jyt=s(TJ);jEr=r(Jyt,"TFXLMWithLMHeadModel"),Jyt.forEach(t),DEr=r(eqe," (XLM model)"),eqe.forEach(t),GEr=i(fe),nM=n(fe,"LI",{});var oqe=s(nM);iTe=n(oqe,"STRONG",{});var Yyt=s(iTe);OEr=r(Yyt,"xlm-roberta"),Yyt.forEach(t),VEr=r(oqe," \u2014 "),MJ=n(oqe,"A",{href:!0});var Kyt=s(MJ);XEr=r(Kyt,"TFXLMRobertaForMaskedLM"),Kyt.forEach(t),zEr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),fe.forEach(t),WEr=i(Pl),T(sM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),fVe=i(f),uc=n(f,"H2",{class:!0});var vze=s(uc);lM=n(vze,"A",{id:!0,class:!0,href:!0});var Zyt=s(lM);dTe=n(Zyt,"SPAN",{});var e9t=s(dTe);T(O9.$$.fragment,e9t),e9t.forEach(t),Zyt.forEach(t),QEr=i(vze),cTe=n(vze,"SPAN",{});var o9t=s(cTe);HEr=r(o9t,"TFAutoModelForSeq2SeqLM"),o9t.forEach(t),vze.forEach(t),mVe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(V9.$$.fragment,Bl),UEr=i(Bl),bc=n(Bl,"P",{});var $re=s(bc);JEr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=n($re,"A",{href:!0});var r9t=s(EJ);YEr=r(r9t,"from_pretrained()"),r9t.forEach(t),KEr=r($re," class method or the "),CJ=n($re,"A",{href:!0});var t9t=s(CJ);ZEr=r(t9t,"from_config()"),t9t.forEach(t),e4r=r($re,` class
method.`),$re.forEach(t),o4r=i(Bl),X9=n(Bl,"P",{});var Fze=s(X9);r4r=r(Fze,"This class cannot be instantiated directly using "),fTe=n(Fze,"CODE",{});var a9t=s(fTe);t4r=r(a9t,"__init__()"),a9t.forEach(t),a4r=r(Fze," (throws an error)."),Fze.forEach(t),n4r=i(Bl),It=n(Bl,"DIV",{class:!0});var jw=s(It);T(z9.$$.fragment,jw),s4r=i(jw),mTe=n(jw,"P",{});var n9t=s(mTe);l4r=r(n9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n9t.forEach(t),i4r=i(jw),vc=n(jw,"P",{});var kre=s(vc);d4r=r(kre,`Note:
Loading a model from its configuration file does `),gTe=n(kre,"STRONG",{});var s9t=s(gTe);c4r=r(s9t,"not"),s9t.forEach(t),f4r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(kre,"A",{href:!0});var l9t=s(wJ);m4r=r(l9t,"from_pretrained()"),l9t.forEach(t),g4r=r(kre," to load the model weights."),kre.forEach(t),h4r=i(jw),T(iM.$$.fragment,jw),jw.forEach(t),p4r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(W9.$$.fragment,Il),_4r=i(Il),hTe=n(Il,"P",{});var i9t=s(hTe);u4r=r(i9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i9t.forEach(t),b4r=i(Il),fn=n(Il,"P",{});var Dw=s(fn);v4r=r(Dw,"The model class to instantiate is selected based on the "),pTe=n(Dw,"CODE",{});var d9t=s(pTe);F4r=r(d9t,"model_type"),d9t.forEach(t),T4r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),_Te=n(Dw,"CODE",{});var c9t=s(_Te);M4r=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),E4r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(Dw,"CODE",{});var f9t=s(uTe);C4r=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),w4r=r(Dw,":"),Dw.forEach(t),A4r=i(Il),ye=n(Il,"UL",{});var Ie=s(ye);dM=n(Ie,"LI",{});var rqe=s(dM);bTe=n(rqe,"STRONG",{});var m9t=s(bTe);L4r=r(m9t,"bart"),m9t.forEach(t),y4r=r(rqe," \u2014 "),AJ=n(rqe,"A",{href:!0});var g9t=s(AJ);x4r=r(g9t,"TFBartForConditionalGeneration"),g9t.forEach(t),$4r=r(rqe," (BART model)"),rqe.forEach(t),k4r=i(Ie),cM=n(Ie,"LI",{});var tqe=s(cM);vTe=n(tqe,"STRONG",{});var h9t=s(vTe);S4r=r(h9t,"blenderbot"),h9t.forEach(t),R4r=r(tqe," \u2014 "),LJ=n(tqe,"A",{href:!0});var p9t=s(LJ);P4r=r(p9t,"TFBlenderbotForConditionalGeneration"),p9t.forEach(t),B4r=r(tqe," (Blenderbot model)"),tqe.forEach(t),I4r=i(Ie),fM=n(Ie,"LI",{});var aqe=s(fM);FTe=n(aqe,"STRONG",{});var _9t=s(FTe);N4r=r(_9t,"blenderbot-small"),_9t.forEach(t),q4r=r(aqe," \u2014 "),yJ=n(aqe,"A",{href:!0});var u9t=s(yJ);j4r=r(u9t,"TFBlenderbotSmallForConditionalGeneration"),u9t.forEach(t),D4r=r(aqe," (BlenderbotSmall model)"),aqe.forEach(t),G4r=i(Ie),mM=n(Ie,"LI",{});var nqe=s(mM);TTe=n(nqe,"STRONG",{});var b9t=s(TTe);O4r=r(b9t,"encoder-decoder"),b9t.forEach(t),V4r=r(nqe," \u2014 "),xJ=n(nqe,"A",{href:!0});var v9t=s(xJ);X4r=r(v9t,"TFEncoderDecoderModel"),v9t.forEach(t),z4r=r(nqe," (Encoder decoder model)"),nqe.forEach(t),W4r=i(Ie),gM=n(Ie,"LI",{});var sqe=s(gM);MTe=n(sqe,"STRONG",{});var F9t=s(MTe);Q4r=r(F9t,"led"),F9t.forEach(t),H4r=r(sqe," \u2014 "),$J=n(sqe,"A",{href:!0});var T9t=s($J);U4r=r(T9t,"TFLEDForConditionalGeneration"),T9t.forEach(t),J4r=r(sqe," (LED model)"),sqe.forEach(t),Y4r=i(Ie),hM=n(Ie,"LI",{});var lqe=s(hM);ETe=n(lqe,"STRONG",{});var M9t=s(ETe);K4r=r(M9t,"marian"),M9t.forEach(t),Z4r=r(lqe," \u2014 "),kJ=n(lqe,"A",{href:!0});var E9t=s(kJ);eCr=r(E9t,"TFMarianMTModel"),E9t.forEach(t),oCr=r(lqe," (Marian model)"),lqe.forEach(t),rCr=i(Ie),pM=n(Ie,"LI",{});var iqe=s(pM);CTe=n(iqe,"STRONG",{});var C9t=s(CTe);tCr=r(C9t,"mbart"),C9t.forEach(t),aCr=r(iqe," \u2014 "),SJ=n(iqe,"A",{href:!0});var w9t=s(SJ);nCr=r(w9t,"TFMBartForConditionalGeneration"),w9t.forEach(t),sCr=r(iqe," (mBART model)"),iqe.forEach(t),lCr=i(Ie),_M=n(Ie,"LI",{});var dqe=s(_M);wTe=n(dqe,"STRONG",{});var A9t=s(wTe);iCr=r(A9t,"mt5"),A9t.forEach(t),dCr=r(dqe," \u2014 "),RJ=n(dqe,"A",{href:!0});var L9t=s(RJ);cCr=r(L9t,"TFMT5ForConditionalGeneration"),L9t.forEach(t),fCr=r(dqe," (MT5 model)"),dqe.forEach(t),mCr=i(Ie),uM=n(Ie,"LI",{});var cqe=s(uM);ATe=n(cqe,"STRONG",{});var y9t=s(ATe);gCr=r(y9t,"pegasus"),y9t.forEach(t),hCr=r(cqe," \u2014 "),PJ=n(cqe,"A",{href:!0});var x9t=s(PJ);pCr=r(x9t,"TFPegasusForConditionalGeneration"),x9t.forEach(t),_Cr=r(cqe," (Pegasus model)"),cqe.forEach(t),uCr=i(Ie),bM=n(Ie,"LI",{});var fqe=s(bM);LTe=n(fqe,"STRONG",{});var $9t=s(LTe);bCr=r($9t,"t5"),$9t.forEach(t),vCr=r(fqe," \u2014 "),BJ=n(fqe,"A",{href:!0});var k9t=s(BJ);FCr=r(k9t,"TFT5ForConditionalGeneration"),k9t.forEach(t),TCr=r(fqe," (T5 model)"),fqe.forEach(t),Ie.forEach(t),MCr=i(Il),T(vM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),gVe=i(f),Fc=n(f,"H2",{class:!0});var Tze=s(Fc);FM=n(Tze,"A",{id:!0,class:!0,href:!0});var S9t=s(FM);yTe=n(S9t,"SPAN",{});var R9t=s(yTe);T(Q9.$$.fragment,R9t),R9t.forEach(t),S9t.forEach(t),ECr=i(Tze),xTe=n(Tze,"SPAN",{});var P9t=s(xTe);CCr=r(P9t,"TFAutoModelForSequenceClassification"),P9t.forEach(t),Tze.forEach(t),hVe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(H9.$$.fragment,Nl),wCr=i(Nl),Tc=n(Nl,"P",{});var Sre=s(Tc);ACr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IJ=n(Sre,"A",{href:!0});var B9t=s(IJ);LCr=r(B9t,"from_pretrained()"),B9t.forEach(t),yCr=r(Sre," class method or the "),NJ=n(Sre,"A",{href:!0});var I9t=s(NJ);xCr=r(I9t,"from_config()"),I9t.forEach(t),$Cr=r(Sre,` class
method.`),Sre.forEach(t),kCr=i(Nl),U9=n(Nl,"P",{});var Mze=s(U9);SCr=r(Mze,"This class cannot be instantiated directly using "),$Te=n(Mze,"CODE",{});var N9t=s($Te);RCr=r(N9t,"__init__()"),N9t.forEach(t),PCr=r(Mze," (throws an error)."),Mze.forEach(t),BCr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var Gw=s(Nt);T(J9.$$.fragment,Gw),ICr=i(Gw),kTe=n(Gw,"P",{});var q9t=s(kTe);NCr=r(q9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q9t.forEach(t),qCr=i(Gw),Mc=n(Gw,"P",{});var Rre=s(Mc);jCr=r(Rre,`Note:
Loading a model from its configuration file does `),STe=n(Rre,"STRONG",{});var j9t=s(STe);DCr=r(j9t,"not"),j9t.forEach(t),GCr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(Rre,"A",{href:!0});var D9t=s(qJ);OCr=r(D9t,"from_pretrained()"),D9t.forEach(t),VCr=r(Rre," to load the model weights."),Rre.forEach(t),XCr=i(Gw),T(TM.$$.fragment,Gw),Gw.forEach(t),zCr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(Y9.$$.fragment,ql),WCr=i(ql),RTe=n(ql,"P",{});var G9t=s(RTe);QCr=r(G9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G9t.forEach(t),HCr=i(ql),mn=n(ql,"P",{});var Ow=s(mn);UCr=r(Ow,"The model class to instantiate is selected based on the "),PTe=n(Ow,"CODE",{});var O9t=s(PTe);JCr=r(O9t,"model_type"),O9t.forEach(t),YCr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),BTe=n(Ow,"CODE",{});var V9t=s(BTe);KCr=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),ZCr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(Ow,"CODE",{});var X9t=s(ITe);e5r=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),o5r=r(Ow,":"),Ow.forEach(t),r5r=i(ql),te=n(ql,"UL",{});var ne=s(te);MM=n(ne,"LI",{});var mqe=s(MM);NTe=n(mqe,"STRONG",{});var z9t=s(NTe);t5r=r(z9t,"albert"),z9t.forEach(t),a5r=r(mqe," \u2014 "),jJ=n(mqe,"A",{href:!0});var W9t=s(jJ);n5r=r(W9t,"TFAlbertForSequenceClassification"),W9t.forEach(t),s5r=r(mqe," (ALBERT model)"),mqe.forEach(t),l5r=i(ne),EM=n(ne,"LI",{});var gqe=s(EM);qTe=n(gqe,"STRONG",{});var Q9t=s(qTe);i5r=r(Q9t,"bert"),Q9t.forEach(t),d5r=r(gqe," \u2014 "),DJ=n(gqe,"A",{href:!0});var H9t=s(DJ);c5r=r(H9t,"TFBertForSequenceClassification"),H9t.forEach(t),f5r=r(gqe," (BERT model)"),gqe.forEach(t),m5r=i(ne),CM=n(ne,"LI",{});var hqe=s(CM);jTe=n(hqe,"STRONG",{});var U9t=s(jTe);g5r=r(U9t,"camembert"),U9t.forEach(t),h5r=r(hqe," \u2014 "),GJ=n(hqe,"A",{href:!0});var J9t=s(GJ);p5r=r(J9t,"TFCamembertForSequenceClassification"),J9t.forEach(t),_5r=r(hqe," (CamemBERT model)"),hqe.forEach(t),u5r=i(ne),wM=n(ne,"LI",{});var pqe=s(wM);DTe=n(pqe,"STRONG",{});var Y9t=s(DTe);b5r=r(Y9t,"convbert"),Y9t.forEach(t),v5r=r(pqe," \u2014 "),OJ=n(pqe,"A",{href:!0});var K9t=s(OJ);F5r=r(K9t,"TFConvBertForSequenceClassification"),K9t.forEach(t),T5r=r(pqe," (ConvBERT model)"),pqe.forEach(t),M5r=i(ne),AM=n(ne,"LI",{});var _qe=s(AM);GTe=n(_qe,"STRONG",{});var Z9t=s(GTe);E5r=r(Z9t,"ctrl"),Z9t.forEach(t),C5r=r(_qe," \u2014 "),VJ=n(_qe,"A",{href:!0});var ext=s(VJ);w5r=r(ext,"TFCTRLForSequenceClassification"),ext.forEach(t),A5r=r(_qe," (CTRL model)"),_qe.forEach(t),L5r=i(ne),LM=n(ne,"LI",{});var uqe=s(LM);OTe=n(uqe,"STRONG",{});var oxt=s(OTe);y5r=r(oxt,"deberta"),oxt.forEach(t),x5r=r(uqe," \u2014 "),XJ=n(uqe,"A",{href:!0});var rxt=s(XJ);$5r=r(rxt,"TFDebertaForSequenceClassification"),rxt.forEach(t),k5r=r(uqe," (DeBERTa model)"),uqe.forEach(t),S5r=i(ne),yM=n(ne,"LI",{});var bqe=s(yM);VTe=n(bqe,"STRONG",{});var txt=s(VTe);R5r=r(txt,"deberta-v2"),txt.forEach(t),P5r=r(bqe," \u2014 "),zJ=n(bqe,"A",{href:!0});var axt=s(zJ);B5r=r(axt,"TFDebertaV2ForSequenceClassification"),axt.forEach(t),I5r=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),N5r=i(ne),xM=n(ne,"LI",{});var vqe=s(xM);XTe=n(vqe,"STRONG",{});var nxt=s(XTe);q5r=r(nxt,"distilbert"),nxt.forEach(t),j5r=r(vqe," \u2014 "),WJ=n(vqe,"A",{href:!0});var sxt=s(WJ);D5r=r(sxt,"TFDistilBertForSequenceClassification"),sxt.forEach(t),G5r=r(vqe," (DistilBERT model)"),vqe.forEach(t),O5r=i(ne),$M=n(ne,"LI",{});var Fqe=s($M);zTe=n(Fqe,"STRONG",{});var lxt=s(zTe);V5r=r(lxt,"electra"),lxt.forEach(t),X5r=r(Fqe," \u2014 "),QJ=n(Fqe,"A",{href:!0});var ixt=s(QJ);z5r=r(ixt,"TFElectraForSequenceClassification"),ixt.forEach(t),W5r=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),Q5r=i(ne),kM=n(ne,"LI",{});var Tqe=s(kM);WTe=n(Tqe,"STRONG",{});var dxt=s(WTe);H5r=r(dxt,"flaubert"),dxt.forEach(t),U5r=r(Tqe," \u2014 "),HJ=n(Tqe,"A",{href:!0});var cxt=s(HJ);J5r=r(cxt,"TFFlaubertForSequenceClassification"),cxt.forEach(t),Y5r=r(Tqe," (FlauBERT model)"),Tqe.forEach(t),K5r=i(ne),SM=n(ne,"LI",{});var Mqe=s(SM);QTe=n(Mqe,"STRONG",{});var fxt=s(QTe);Z5r=r(fxt,"funnel"),fxt.forEach(t),e3r=r(Mqe," \u2014 "),UJ=n(Mqe,"A",{href:!0});var mxt=s(UJ);o3r=r(mxt,"TFFunnelForSequenceClassification"),mxt.forEach(t),r3r=r(Mqe," (Funnel Transformer model)"),Mqe.forEach(t),t3r=i(ne),RM=n(ne,"LI",{});var Eqe=s(RM);HTe=n(Eqe,"STRONG",{});var gxt=s(HTe);a3r=r(gxt,"gpt2"),gxt.forEach(t),n3r=r(Eqe," \u2014 "),JJ=n(Eqe,"A",{href:!0});var hxt=s(JJ);s3r=r(hxt,"TFGPT2ForSequenceClassification"),hxt.forEach(t),l3r=r(Eqe," (OpenAI GPT-2 model)"),Eqe.forEach(t),i3r=i(ne),PM=n(ne,"LI",{});var Cqe=s(PM);UTe=n(Cqe,"STRONG",{});var pxt=s(UTe);d3r=r(pxt,"gptj"),pxt.forEach(t),c3r=r(Cqe," \u2014 "),YJ=n(Cqe,"A",{href:!0});var _xt=s(YJ);f3r=r(_xt,"TFGPTJForSequenceClassification"),_xt.forEach(t),m3r=r(Cqe," (GPT-J model)"),Cqe.forEach(t),g3r=i(ne),BM=n(ne,"LI",{});var wqe=s(BM);JTe=n(wqe,"STRONG",{});var uxt=s(JTe);h3r=r(uxt,"layoutlm"),uxt.forEach(t),p3r=r(wqe," \u2014 "),KJ=n(wqe,"A",{href:!0});var bxt=s(KJ);_3r=r(bxt,"TFLayoutLMForSequenceClassification"),bxt.forEach(t),u3r=r(wqe," (LayoutLM model)"),wqe.forEach(t),b3r=i(ne),IM=n(ne,"LI",{});var Aqe=s(IM);YTe=n(Aqe,"STRONG",{});var vxt=s(YTe);v3r=r(vxt,"longformer"),vxt.forEach(t),F3r=r(Aqe," \u2014 "),ZJ=n(Aqe,"A",{href:!0});var Fxt=s(ZJ);T3r=r(Fxt,"TFLongformerForSequenceClassification"),Fxt.forEach(t),M3r=r(Aqe," (Longformer model)"),Aqe.forEach(t),E3r=i(ne),NM=n(ne,"LI",{});var Lqe=s(NM);KTe=n(Lqe,"STRONG",{});var Txt=s(KTe);C3r=r(Txt,"mobilebert"),Txt.forEach(t),w3r=r(Lqe," \u2014 "),eY=n(Lqe,"A",{href:!0});var Mxt=s(eY);A3r=r(Mxt,"TFMobileBertForSequenceClassification"),Mxt.forEach(t),L3r=r(Lqe," (MobileBERT model)"),Lqe.forEach(t),y3r=i(ne),qM=n(ne,"LI",{});var yqe=s(qM);ZTe=n(yqe,"STRONG",{});var Ext=s(ZTe);x3r=r(Ext,"mpnet"),Ext.forEach(t),$3r=r(yqe," \u2014 "),oY=n(yqe,"A",{href:!0});var Cxt=s(oY);k3r=r(Cxt,"TFMPNetForSequenceClassification"),Cxt.forEach(t),S3r=r(yqe," (MPNet model)"),yqe.forEach(t),R3r=i(ne),jM=n(ne,"LI",{});var xqe=s(jM);e7e=n(xqe,"STRONG",{});var wxt=s(e7e);P3r=r(wxt,"openai-gpt"),wxt.forEach(t),B3r=r(xqe," \u2014 "),rY=n(xqe,"A",{href:!0});var Axt=s(rY);I3r=r(Axt,"TFOpenAIGPTForSequenceClassification"),Axt.forEach(t),N3r=r(xqe," (OpenAI GPT model)"),xqe.forEach(t),q3r=i(ne),DM=n(ne,"LI",{});var $qe=s(DM);o7e=n($qe,"STRONG",{});var Lxt=s(o7e);j3r=r(Lxt,"rembert"),Lxt.forEach(t),D3r=r($qe," \u2014 "),tY=n($qe,"A",{href:!0});var yxt=s(tY);G3r=r(yxt,"TFRemBertForSequenceClassification"),yxt.forEach(t),O3r=r($qe," (RemBERT model)"),$qe.forEach(t),V3r=i(ne),GM=n(ne,"LI",{});var kqe=s(GM);r7e=n(kqe,"STRONG",{});var xxt=s(r7e);X3r=r(xxt,"roberta"),xxt.forEach(t),z3r=r(kqe," \u2014 "),aY=n(kqe,"A",{href:!0});var $xt=s(aY);W3r=r($xt,"TFRobertaForSequenceClassification"),$xt.forEach(t),Q3r=r(kqe," (RoBERTa model)"),kqe.forEach(t),H3r=i(ne),OM=n(ne,"LI",{});var Sqe=s(OM);t7e=n(Sqe,"STRONG",{});var kxt=s(t7e);U3r=r(kxt,"roformer"),kxt.forEach(t),J3r=r(Sqe," \u2014 "),nY=n(Sqe,"A",{href:!0});var Sxt=s(nY);Y3r=r(Sxt,"TFRoFormerForSequenceClassification"),Sxt.forEach(t),K3r=r(Sqe," (RoFormer model)"),Sqe.forEach(t),Z3r=i(ne),VM=n(ne,"LI",{});var Rqe=s(VM);a7e=n(Rqe,"STRONG",{});var Rxt=s(a7e);ewr=r(Rxt,"tapas"),Rxt.forEach(t),owr=r(Rqe," \u2014 "),sY=n(Rqe,"A",{href:!0});var Pxt=s(sY);rwr=r(Pxt,"TFTapasForSequenceClassification"),Pxt.forEach(t),twr=r(Rqe," (TAPAS model)"),Rqe.forEach(t),awr=i(ne),XM=n(ne,"LI",{});var Pqe=s(XM);n7e=n(Pqe,"STRONG",{});var Bxt=s(n7e);nwr=r(Bxt,"transfo-xl"),Bxt.forEach(t),swr=r(Pqe," \u2014 "),lY=n(Pqe,"A",{href:!0});var Ixt=s(lY);lwr=r(Ixt,"TFTransfoXLForSequenceClassification"),Ixt.forEach(t),iwr=r(Pqe," (Transformer-XL model)"),Pqe.forEach(t),dwr=i(ne),zM=n(ne,"LI",{});var Bqe=s(zM);s7e=n(Bqe,"STRONG",{});var Nxt=s(s7e);cwr=r(Nxt,"xlm"),Nxt.forEach(t),fwr=r(Bqe," \u2014 "),iY=n(Bqe,"A",{href:!0});var qxt=s(iY);mwr=r(qxt,"TFXLMForSequenceClassification"),qxt.forEach(t),gwr=r(Bqe," (XLM model)"),Bqe.forEach(t),hwr=i(ne),WM=n(ne,"LI",{});var Iqe=s(WM);l7e=n(Iqe,"STRONG",{});var jxt=s(l7e);pwr=r(jxt,"xlm-roberta"),jxt.forEach(t),_wr=r(Iqe," \u2014 "),dY=n(Iqe,"A",{href:!0});var Dxt=s(dY);uwr=r(Dxt,"TFXLMRobertaForSequenceClassification"),Dxt.forEach(t),bwr=r(Iqe," (XLM-RoBERTa model)"),Iqe.forEach(t),vwr=i(ne),QM=n(ne,"LI",{});var Nqe=s(QM);i7e=n(Nqe,"STRONG",{});var Gxt=s(i7e);Fwr=r(Gxt,"xlnet"),Gxt.forEach(t),Twr=r(Nqe," \u2014 "),cY=n(Nqe,"A",{href:!0});var Oxt=s(cY);Mwr=r(Oxt,"TFXLNetForSequenceClassification"),Oxt.forEach(t),Ewr=r(Nqe," (XLNet model)"),Nqe.forEach(t),ne.forEach(t),Cwr=i(ql),T(HM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),pVe=i(f),Ec=n(f,"H2",{class:!0});var Eze=s(Ec);UM=n(Eze,"A",{id:!0,class:!0,href:!0});var Vxt=s(UM);d7e=n(Vxt,"SPAN",{});var Xxt=s(d7e);T(K9.$$.fragment,Xxt),Xxt.forEach(t),Vxt.forEach(t),wwr=i(Eze),c7e=n(Eze,"SPAN",{});var zxt=s(c7e);Awr=r(zxt,"TFAutoModelForMultipleChoice"),zxt.forEach(t),Eze.forEach(t),_Ve=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(Z9.$$.fragment,jl),Lwr=i(jl),Cc=n(jl,"P",{});var Pre=s(Cc);ywr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fY=n(Pre,"A",{href:!0});var Wxt=s(fY);xwr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),$wr=r(Pre," class method or the "),mY=n(Pre,"A",{href:!0});var Qxt=s(mY);kwr=r(Qxt,"from_config()"),Qxt.forEach(t),Swr=r(Pre,` class
method.`),Pre.forEach(t),Rwr=i(jl),ex=n(jl,"P",{});var Cze=s(ex);Pwr=r(Cze,"This class cannot be instantiated directly using "),f7e=n(Cze,"CODE",{});var Hxt=s(f7e);Bwr=r(Hxt,"__init__()"),Hxt.forEach(t),Iwr=r(Cze," (throws an error)."),Cze.forEach(t),Nwr=i(jl),qt=n(jl,"DIV",{class:!0});var Vw=s(qt);T(ox.$$.fragment,Vw),qwr=i(Vw),m7e=n(Vw,"P",{});var Uxt=s(m7e);jwr=r(Uxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uxt.forEach(t),Dwr=i(Vw),wc=n(Vw,"P",{});var Bre=s(wc);Gwr=r(Bre,`Note:
Loading a model from its configuration file does `),g7e=n(Bre,"STRONG",{});var Jxt=s(g7e);Owr=r(Jxt,"not"),Jxt.forEach(t),Vwr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Bre,"A",{href:!0});var Yxt=s(gY);Xwr=r(Yxt,"from_pretrained()"),Yxt.forEach(t),zwr=r(Bre," to load the model weights."),Bre.forEach(t),Wwr=i(Vw),T(JM.$$.fragment,Vw),Vw.forEach(t),Qwr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(rx.$$.fragment,Dl),Hwr=i(Dl),h7e=n(Dl,"P",{});var Kxt=s(h7e);Uwr=r(Kxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kxt.forEach(t),Jwr=i(Dl),gn=n(Dl,"P",{});var Xw=s(gn);Ywr=r(Xw,"The model class to instantiate is selected based on the "),p7e=n(Xw,"CODE",{});var Zxt=s(p7e);Kwr=r(Zxt,"model_type"),Zxt.forEach(t),Zwr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),_7e=n(Xw,"CODE",{});var e$t=s(_7e);eAr=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),oAr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(Xw,"CODE",{});var o$t=s(u7e);rAr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),tAr=r(Xw,":"),Xw.forEach(t),aAr=i(Dl),_e=n(Dl,"UL",{});var ve=s(_e);YM=n(ve,"LI",{});var qqe=s(YM);b7e=n(qqe,"STRONG",{});var r$t=s(b7e);nAr=r(r$t,"albert"),r$t.forEach(t),sAr=r(qqe," \u2014 "),hY=n(qqe,"A",{href:!0});var t$t=s(hY);lAr=r(t$t,"TFAlbertForMultipleChoice"),t$t.forEach(t),iAr=r(qqe," (ALBERT model)"),qqe.forEach(t),dAr=i(ve),KM=n(ve,"LI",{});var jqe=s(KM);v7e=n(jqe,"STRONG",{});var a$t=s(v7e);cAr=r(a$t,"bert"),a$t.forEach(t),fAr=r(jqe," \u2014 "),pY=n(jqe,"A",{href:!0});var n$t=s(pY);mAr=r(n$t,"TFBertForMultipleChoice"),n$t.forEach(t),gAr=r(jqe," (BERT model)"),jqe.forEach(t),hAr=i(ve),ZM=n(ve,"LI",{});var Dqe=s(ZM);F7e=n(Dqe,"STRONG",{});var s$t=s(F7e);pAr=r(s$t,"camembert"),s$t.forEach(t),_Ar=r(Dqe," \u2014 "),_Y=n(Dqe,"A",{href:!0});var l$t=s(_Y);uAr=r(l$t,"TFCamembertForMultipleChoice"),l$t.forEach(t),bAr=r(Dqe," (CamemBERT model)"),Dqe.forEach(t),vAr=i(ve),eE=n(ve,"LI",{});var Gqe=s(eE);T7e=n(Gqe,"STRONG",{});var i$t=s(T7e);FAr=r(i$t,"convbert"),i$t.forEach(t),TAr=r(Gqe," \u2014 "),uY=n(Gqe,"A",{href:!0});var d$t=s(uY);MAr=r(d$t,"TFConvBertForMultipleChoice"),d$t.forEach(t),EAr=r(Gqe," (ConvBERT model)"),Gqe.forEach(t),CAr=i(ve),oE=n(ve,"LI",{});var Oqe=s(oE);M7e=n(Oqe,"STRONG",{});var c$t=s(M7e);wAr=r(c$t,"distilbert"),c$t.forEach(t),AAr=r(Oqe," \u2014 "),bY=n(Oqe,"A",{href:!0});var f$t=s(bY);LAr=r(f$t,"TFDistilBertForMultipleChoice"),f$t.forEach(t),yAr=r(Oqe," (DistilBERT model)"),Oqe.forEach(t),xAr=i(ve),rE=n(ve,"LI",{});var Vqe=s(rE);E7e=n(Vqe,"STRONG",{});var m$t=s(E7e);$Ar=r(m$t,"electra"),m$t.forEach(t),kAr=r(Vqe," \u2014 "),vY=n(Vqe,"A",{href:!0});var g$t=s(vY);SAr=r(g$t,"TFElectraForMultipleChoice"),g$t.forEach(t),RAr=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),PAr=i(ve),tE=n(ve,"LI",{});var Xqe=s(tE);C7e=n(Xqe,"STRONG",{});var h$t=s(C7e);BAr=r(h$t,"flaubert"),h$t.forEach(t),IAr=r(Xqe," \u2014 "),FY=n(Xqe,"A",{href:!0});var p$t=s(FY);NAr=r(p$t,"TFFlaubertForMultipleChoice"),p$t.forEach(t),qAr=r(Xqe," (FlauBERT model)"),Xqe.forEach(t),jAr=i(ve),aE=n(ve,"LI",{});var zqe=s(aE);w7e=n(zqe,"STRONG",{});var _$t=s(w7e);DAr=r(_$t,"funnel"),_$t.forEach(t),GAr=r(zqe," \u2014 "),TY=n(zqe,"A",{href:!0});var u$t=s(TY);OAr=r(u$t,"TFFunnelForMultipleChoice"),u$t.forEach(t),VAr=r(zqe," (Funnel Transformer model)"),zqe.forEach(t),XAr=i(ve),nE=n(ve,"LI",{});var Wqe=s(nE);A7e=n(Wqe,"STRONG",{});var b$t=s(A7e);zAr=r(b$t,"longformer"),b$t.forEach(t),WAr=r(Wqe," \u2014 "),MY=n(Wqe,"A",{href:!0});var v$t=s(MY);QAr=r(v$t,"TFLongformerForMultipleChoice"),v$t.forEach(t),HAr=r(Wqe," (Longformer model)"),Wqe.forEach(t),UAr=i(ve),sE=n(ve,"LI",{});var Qqe=s(sE);L7e=n(Qqe,"STRONG",{});var F$t=s(L7e);JAr=r(F$t,"mobilebert"),F$t.forEach(t),YAr=r(Qqe," \u2014 "),EY=n(Qqe,"A",{href:!0});var T$t=s(EY);KAr=r(T$t,"TFMobileBertForMultipleChoice"),T$t.forEach(t),ZAr=r(Qqe," (MobileBERT model)"),Qqe.forEach(t),eLr=i(ve),lE=n(ve,"LI",{});var Hqe=s(lE);y7e=n(Hqe,"STRONG",{});var M$t=s(y7e);oLr=r(M$t,"mpnet"),M$t.forEach(t),rLr=r(Hqe," \u2014 "),CY=n(Hqe,"A",{href:!0});var E$t=s(CY);tLr=r(E$t,"TFMPNetForMultipleChoice"),E$t.forEach(t),aLr=r(Hqe," (MPNet model)"),Hqe.forEach(t),nLr=i(ve),iE=n(ve,"LI",{});var Uqe=s(iE);x7e=n(Uqe,"STRONG",{});var C$t=s(x7e);sLr=r(C$t,"rembert"),C$t.forEach(t),lLr=r(Uqe," \u2014 "),wY=n(Uqe,"A",{href:!0});var w$t=s(wY);iLr=r(w$t,"TFRemBertForMultipleChoice"),w$t.forEach(t),dLr=r(Uqe," (RemBERT model)"),Uqe.forEach(t),cLr=i(ve),dE=n(ve,"LI",{});var Jqe=s(dE);$7e=n(Jqe,"STRONG",{});var A$t=s($7e);fLr=r(A$t,"roberta"),A$t.forEach(t),mLr=r(Jqe," \u2014 "),AY=n(Jqe,"A",{href:!0});var L$t=s(AY);gLr=r(L$t,"TFRobertaForMultipleChoice"),L$t.forEach(t),hLr=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),pLr=i(ve),cE=n(ve,"LI",{});var Yqe=s(cE);k7e=n(Yqe,"STRONG",{});var y$t=s(k7e);_Lr=r(y$t,"roformer"),y$t.forEach(t),uLr=r(Yqe," \u2014 "),LY=n(Yqe,"A",{href:!0});var x$t=s(LY);bLr=r(x$t,"TFRoFormerForMultipleChoice"),x$t.forEach(t),vLr=r(Yqe," (RoFormer model)"),Yqe.forEach(t),FLr=i(ve),fE=n(ve,"LI",{});var Kqe=s(fE);S7e=n(Kqe,"STRONG",{});var $$t=s(S7e);TLr=r($$t,"xlm"),$$t.forEach(t),MLr=r(Kqe," \u2014 "),yY=n(Kqe,"A",{href:!0});var k$t=s(yY);ELr=r(k$t,"TFXLMForMultipleChoice"),k$t.forEach(t),CLr=r(Kqe," (XLM model)"),Kqe.forEach(t),wLr=i(ve),mE=n(ve,"LI",{});var Zqe=s(mE);R7e=n(Zqe,"STRONG",{});var S$t=s(R7e);ALr=r(S$t,"xlm-roberta"),S$t.forEach(t),LLr=r(Zqe," \u2014 "),xY=n(Zqe,"A",{href:!0});var R$t=s(xY);yLr=r(R$t,"TFXLMRobertaForMultipleChoice"),R$t.forEach(t),xLr=r(Zqe," (XLM-RoBERTa model)"),Zqe.forEach(t),$Lr=i(ve),gE=n(ve,"LI",{});var eje=s(gE);P7e=n(eje,"STRONG",{});var P$t=s(P7e);kLr=r(P$t,"xlnet"),P$t.forEach(t),SLr=r(eje," \u2014 "),$Y=n(eje,"A",{href:!0});var B$t=s($Y);RLr=r(B$t,"TFXLNetForMultipleChoice"),B$t.forEach(t),PLr=r(eje," (XLNet model)"),eje.forEach(t),ve.forEach(t),BLr=i(Dl),T(hE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),uVe=i(f),Ac=n(f,"H2",{class:!0});var wze=s(Ac);pE=n(wze,"A",{id:!0,class:!0,href:!0});var I$t=s(pE);B7e=n(I$t,"SPAN",{});var N$t=s(B7e);T(tx.$$.fragment,N$t),N$t.forEach(t),I$t.forEach(t),ILr=i(wze),I7e=n(wze,"SPAN",{});var q$t=s(I7e);NLr=r(q$t,"TFAutoModelForNextSentencePrediction"),q$t.forEach(t),wze.forEach(t),bVe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(ax.$$.fragment,Gl),qLr=i(Gl),Lc=n(Gl,"P",{});var Ire=s(Lc);jLr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=n(Ire,"A",{href:!0});var j$t=s(kY);DLr=r(j$t,"from_pretrained()"),j$t.forEach(t),GLr=r(Ire," class method or the "),SY=n(Ire,"A",{href:!0});var D$t=s(SY);OLr=r(D$t,"from_config()"),D$t.forEach(t),VLr=r(Ire,` class
method.`),Ire.forEach(t),XLr=i(Gl),nx=n(Gl,"P",{});var Aze=s(nx);zLr=r(Aze,"This class cannot be instantiated directly using "),N7e=n(Aze,"CODE",{});var G$t=s(N7e);WLr=r(G$t,"__init__()"),G$t.forEach(t),QLr=r(Aze," (throws an error)."),Aze.forEach(t),HLr=i(Gl),jt=n(Gl,"DIV",{class:!0});var zw=s(jt);T(sx.$$.fragment,zw),ULr=i(zw),q7e=n(zw,"P",{});var O$t=s(q7e);JLr=r(O$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O$t.forEach(t),YLr=i(zw),yc=n(zw,"P",{});var Nre=s(yc);KLr=r(Nre,`Note:
Loading a model from its configuration file does `),j7e=n(Nre,"STRONG",{});var V$t=s(j7e);ZLr=r(V$t,"not"),V$t.forEach(t),eyr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Nre,"A",{href:!0});var X$t=s(RY);oyr=r(X$t,"from_pretrained()"),X$t.forEach(t),ryr=r(Nre," to load the model weights."),Nre.forEach(t),tyr=i(zw),T(_E.$$.fragment,zw),zw.forEach(t),ayr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(lx.$$.fragment,Ol),nyr=i(Ol),D7e=n(Ol,"P",{});var z$t=s(D7e);syr=r(z$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z$t.forEach(t),lyr=i(Ol),hn=n(Ol,"P",{});var Ww=s(hn);iyr=r(Ww,"The model class to instantiate is selected based on the "),G7e=n(Ww,"CODE",{});var W$t=s(G7e);dyr=r(W$t,"model_type"),W$t.forEach(t),cyr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),O7e=n(Ww,"CODE",{});var Q$t=s(O7e);fyr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),myr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(Ww,"CODE",{});var H$t=s(V7e);gyr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),hyr=r(Ww,":"),Ww.forEach(t),pyr=i(Ol),ix=n(Ol,"UL",{});var Lze=s(ix);uE=n(Lze,"LI",{});var oje=s(uE);X7e=n(oje,"STRONG",{});var U$t=s(X7e);_yr=r(U$t,"bert"),U$t.forEach(t),uyr=r(oje," \u2014 "),PY=n(oje,"A",{href:!0});var J$t=s(PY);byr=r(J$t,"TFBertForNextSentencePrediction"),J$t.forEach(t),vyr=r(oje," (BERT model)"),oje.forEach(t),Fyr=i(Lze),bE=n(Lze,"LI",{});var rje=s(bE);z7e=n(rje,"STRONG",{});var Y$t=s(z7e);Tyr=r(Y$t,"mobilebert"),Y$t.forEach(t),Myr=r(rje," \u2014 "),BY=n(rje,"A",{href:!0});var K$t=s(BY);Eyr=r(K$t,"TFMobileBertForNextSentencePrediction"),K$t.forEach(t),Cyr=r(rje," (MobileBERT model)"),rje.forEach(t),Lze.forEach(t),wyr=i(Ol),T(vE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),vVe=i(f),xc=n(f,"H2",{class:!0});var yze=s(xc);FE=n(yze,"A",{id:!0,class:!0,href:!0});var Z$t=s(FE);W7e=n(Z$t,"SPAN",{});var ekt=s(W7e);T(dx.$$.fragment,ekt),ekt.forEach(t),Z$t.forEach(t),Ayr=i(yze),Q7e=n(yze,"SPAN",{});var okt=s(Q7e);Lyr=r(okt,"TFAutoModelForTableQuestionAnswering"),okt.forEach(t),yze.forEach(t),FVe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(cx.$$.fragment,Vl),yyr=i(Vl),$c=n(Vl,"P",{});var qre=s($c);xyr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IY=n(qre,"A",{href:!0});var rkt=s(IY);$yr=r(rkt,"from_pretrained()"),rkt.forEach(t),kyr=r(qre," class method or the "),NY=n(qre,"A",{href:!0});var tkt=s(NY);Syr=r(tkt,"from_config()"),tkt.forEach(t),Ryr=r(qre,` class
method.`),qre.forEach(t),Pyr=i(Vl),fx=n(Vl,"P",{});var xze=s(fx);Byr=r(xze,"This class cannot be instantiated directly using "),H7e=n(xze,"CODE",{});var akt=s(H7e);Iyr=r(akt,"__init__()"),akt.forEach(t),Nyr=r(xze," (throws an error)."),xze.forEach(t),qyr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var Qw=s(Dt);T(mx.$$.fragment,Qw),jyr=i(Qw),U7e=n(Qw,"P",{});var nkt=s(U7e);Dyr=r(nkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nkt.forEach(t),Gyr=i(Qw),kc=n(Qw,"P",{});var jre=s(kc);Oyr=r(jre,`Note:
Loading a model from its configuration file does `),J7e=n(jre,"STRONG",{});var skt=s(J7e);Vyr=r(skt,"not"),skt.forEach(t),Xyr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(jre,"A",{href:!0});var lkt=s(qY);zyr=r(lkt,"from_pretrained()"),lkt.forEach(t),Wyr=r(jre," to load the model weights."),jre.forEach(t),Qyr=i(Qw),T(TE.$$.fragment,Qw),Qw.forEach(t),Hyr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(gx.$$.fragment,Xl),Uyr=i(Xl),Y7e=n(Xl,"P",{});var ikt=s(Y7e);Jyr=r(ikt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ikt.forEach(t),Yyr=i(Xl),pn=n(Xl,"P",{});var Hw=s(pn);Kyr=r(Hw,"The model class to instantiate is selected based on the "),K7e=n(Hw,"CODE",{});var dkt=s(K7e);Zyr=r(dkt,"model_type"),dkt.forEach(t),e9r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(Hw,"CODE",{});var ckt=s(Z7e);o9r=r(ckt,"pretrained_model_name_or_path"),ckt.forEach(t),r9r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(Hw,"CODE",{});var fkt=s(e8e);t9r=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),a9r=r(Hw,":"),Hw.forEach(t),n9r=i(Xl),o8e=n(Xl,"UL",{});var mkt=s(o8e);ME=n(mkt,"LI",{});var tje=s(ME);r8e=n(tje,"STRONG",{});var gkt=s(r8e);s9r=r(gkt,"tapas"),gkt.forEach(t),l9r=r(tje," \u2014 "),jY=n(tje,"A",{href:!0});var hkt=s(jY);i9r=r(hkt,"TFTapasForQuestionAnswering"),hkt.forEach(t),d9r=r(tje," (TAPAS model)"),tje.forEach(t),mkt.forEach(t),c9r=i(Xl),T(EE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),TVe=i(f),Sc=n(f,"H2",{class:!0});var $ze=s(Sc);CE=n($ze,"A",{id:!0,class:!0,href:!0});var pkt=s(CE);t8e=n(pkt,"SPAN",{});var _kt=s(t8e);T(hx.$$.fragment,_kt),_kt.forEach(t),pkt.forEach(t),f9r=i($ze),a8e=n($ze,"SPAN",{});var ukt=s(a8e);m9r=r(ukt,"TFAutoModelForTokenClassification"),ukt.forEach(t),$ze.forEach(t),MVe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(px.$$.fragment,zl),g9r=i(zl),Rc=n(zl,"P",{});var Dre=s(Rc);h9r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DY=n(Dre,"A",{href:!0});var bkt=s(DY);p9r=r(bkt,"from_pretrained()"),bkt.forEach(t),_9r=r(Dre," class method or the "),GY=n(Dre,"A",{href:!0});var vkt=s(GY);u9r=r(vkt,"from_config()"),vkt.forEach(t),b9r=r(Dre,` class
method.`),Dre.forEach(t),v9r=i(zl),_x=n(zl,"P",{});var kze=s(_x);F9r=r(kze,"This class cannot be instantiated directly using "),n8e=n(kze,"CODE",{});var Fkt=s(n8e);T9r=r(Fkt,"__init__()"),Fkt.forEach(t),M9r=r(kze," (throws an error)."),kze.forEach(t),E9r=i(zl),Gt=n(zl,"DIV",{class:!0});var Uw=s(Gt);T(ux.$$.fragment,Uw),C9r=i(Uw),s8e=n(Uw,"P",{});var Tkt=s(s8e);w9r=r(Tkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tkt.forEach(t),A9r=i(Uw),Pc=n(Uw,"P",{});var Gre=s(Pc);L9r=r(Gre,`Note:
Loading a model from its configuration file does `),l8e=n(Gre,"STRONG",{});var Mkt=s(l8e);y9r=r(Mkt,"not"),Mkt.forEach(t),x9r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Gre,"A",{href:!0});var Ekt=s(OY);$9r=r(Ekt,"from_pretrained()"),Ekt.forEach(t),k9r=r(Gre," to load the model weights."),Gre.forEach(t),S9r=i(Uw),T(wE.$$.fragment,Uw),Uw.forEach(t),R9r=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(bx.$$.fragment,Wl),P9r=i(Wl),i8e=n(Wl,"P",{});var Ckt=s(i8e);B9r=r(Ckt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ckt.forEach(t),I9r=i(Wl),_n=n(Wl,"P",{});var Jw=s(_n);N9r=r(Jw,"The model class to instantiate is selected based on the "),d8e=n(Jw,"CODE",{});var wkt=s(d8e);q9r=r(wkt,"model_type"),wkt.forEach(t),j9r=r(Jw,` property of the config object (either
passed as an argument or loaded from `),c8e=n(Jw,"CODE",{});var Akt=s(c8e);D9r=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),G9r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=n(Jw,"CODE",{});var Lkt=s(f8e);O9r=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),V9r=r(Jw,":"),Jw.forEach(t),X9r=i(Wl),de=n(Wl,"UL",{});var me=s(de);AE=n(me,"LI",{});var aje=s(AE);m8e=n(aje,"STRONG",{});var ykt=s(m8e);z9r=r(ykt,"albert"),ykt.forEach(t),W9r=r(aje," \u2014 "),VY=n(aje,"A",{href:!0});var xkt=s(VY);Q9r=r(xkt,"TFAlbertForTokenClassification"),xkt.forEach(t),H9r=r(aje," (ALBERT model)"),aje.forEach(t),U9r=i(me),LE=n(me,"LI",{});var nje=s(LE);g8e=n(nje,"STRONG",{});var $kt=s(g8e);J9r=r($kt,"bert"),$kt.forEach(t),Y9r=r(nje," \u2014 "),XY=n(nje,"A",{href:!0});var kkt=s(XY);K9r=r(kkt,"TFBertForTokenClassification"),kkt.forEach(t),Z9r=r(nje," (BERT model)"),nje.forEach(t),exr=i(me),yE=n(me,"LI",{});var sje=s(yE);h8e=n(sje,"STRONG",{});var Skt=s(h8e);oxr=r(Skt,"camembert"),Skt.forEach(t),rxr=r(sje," \u2014 "),zY=n(sje,"A",{href:!0});var Rkt=s(zY);txr=r(Rkt,"TFCamembertForTokenClassification"),Rkt.forEach(t),axr=r(sje," (CamemBERT model)"),sje.forEach(t),nxr=i(me),xE=n(me,"LI",{});var lje=s(xE);p8e=n(lje,"STRONG",{});var Pkt=s(p8e);sxr=r(Pkt,"convbert"),Pkt.forEach(t),lxr=r(lje," \u2014 "),WY=n(lje,"A",{href:!0});var Bkt=s(WY);ixr=r(Bkt,"TFConvBertForTokenClassification"),Bkt.forEach(t),dxr=r(lje," (ConvBERT model)"),lje.forEach(t),cxr=i(me),$E=n(me,"LI",{});var ije=s($E);_8e=n(ije,"STRONG",{});var Ikt=s(_8e);fxr=r(Ikt,"deberta"),Ikt.forEach(t),mxr=r(ije," \u2014 "),QY=n(ije,"A",{href:!0});var Nkt=s(QY);gxr=r(Nkt,"TFDebertaForTokenClassification"),Nkt.forEach(t),hxr=r(ije," (DeBERTa model)"),ije.forEach(t),pxr=i(me),kE=n(me,"LI",{});var dje=s(kE);u8e=n(dje,"STRONG",{});var qkt=s(u8e);_xr=r(qkt,"deberta-v2"),qkt.forEach(t),uxr=r(dje," \u2014 "),HY=n(dje,"A",{href:!0});var jkt=s(HY);bxr=r(jkt,"TFDebertaV2ForTokenClassification"),jkt.forEach(t),vxr=r(dje," (DeBERTa-v2 model)"),dje.forEach(t),Fxr=i(me),SE=n(me,"LI",{});var cje=s(SE);b8e=n(cje,"STRONG",{});var Dkt=s(b8e);Txr=r(Dkt,"distilbert"),Dkt.forEach(t),Mxr=r(cje," \u2014 "),UY=n(cje,"A",{href:!0});var Gkt=s(UY);Exr=r(Gkt,"TFDistilBertForTokenClassification"),Gkt.forEach(t),Cxr=r(cje," (DistilBERT model)"),cje.forEach(t),wxr=i(me),RE=n(me,"LI",{});var fje=s(RE);v8e=n(fje,"STRONG",{});var Okt=s(v8e);Axr=r(Okt,"electra"),Okt.forEach(t),Lxr=r(fje," \u2014 "),JY=n(fje,"A",{href:!0});var Vkt=s(JY);yxr=r(Vkt,"TFElectraForTokenClassification"),Vkt.forEach(t),xxr=r(fje," (ELECTRA model)"),fje.forEach(t),$xr=i(me),PE=n(me,"LI",{});var mje=s(PE);F8e=n(mje,"STRONG",{});var Xkt=s(F8e);kxr=r(Xkt,"flaubert"),Xkt.forEach(t),Sxr=r(mje," \u2014 "),YY=n(mje,"A",{href:!0});var zkt=s(YY);Rxr=r(zkt,"TFFlaubertForTokenClassification"),zkt.forEach(t),Pxr=r(mje," (FlauBERT model)"),mje.forEach(t),Bxr=i(me),BE=n(me,"LI",{});var gje=s(BE);T8e=n(gje,"STRONG",{});var Wkt=s(T8e);Ixr=r(Wkt,"funnel"),Wkt.forEach(t),Nxr=r(gje," \u2014 "),KY=n(gje,"A",{href:!0});var Qkt=s(KY);qxr=r(Qkt,"TFFunnelForTokenClassification"),Qkt.forEach(t),jxr=r(gje," (Funnel Transformer model)"),gje.forEach(t),Dxr=i(me),IE=n(me,"LI",{});var hje=s(IE);M8e=n(hje,"STRONG",{});var Hkt=s(M8e);Gxr=r(Hkt,"layoutlm"),Hkt.forEach(t),Oxr=r(hje," \u2014 "),ZY=n(hje,"A",{href:!0});var Ukt=s(ZY);Vxr=r(Ukt,"TFLayoutLMForTokenClassification"),Ukt.forEach(t),Xxr=r(hje," (LayoutLM model)"),hje.forEach(t),zxr=i(me),NE=n(me,"LI",{});var pje=s(NE);E8e=n(pje,"STRONG",{});var Jkt=s(E8e);Wxr=r(Jkt,"longformer"),Jkt.forEach(t),Qxr=r(pje," \u2014 "),eK=n(pje,"A",{href:!0});var Ykt=s(eK);Hxr=r(Ykt,"TFLongformerForTokenClassification"),Ykt.forEach(t),Uxr=r(pje," (Longformer model)"),pje.forEach(t),Jxr=i(me),qE=n(me,"LI",{});var _je=s(qE);C8e=n(_je,"STRONG",{});var Kkt=s(C8e);Yxr=r(Kkt,"mobilebert"),Kkt.forEach(t),Kxr=r(_je," \u2014 "),oK=n(_je,"A",{href:!0});var Zkt=s(oK);Zxr=r(Zkt,"TFMobileBertForTokenClassification"),Zkt.forEach(t),e$r=r(_je," (MobileBERT model)"),_je.forEach(t),o$r=i(me),jE=n(me,"LI",{});var uje=s(jE);w8e=n(uje,"STRONG",{});var eSt=s(w8e);r$r=r(eSt,"mpnet"),eSt.forEach(t),t$r=r(uje," \u2014 "),rK=n(uje,"A",{href:!0});var oSt=s(rK);a$r=r(oSt,"TFMPNetForTokenClassification"),oSt.forEach(t),n$r=r(uje," (MPNet model)"),uje.forEach(t),s$r=i(me),DE=n(me,"LI",{});var bje=s(DE);A8e=n(bje,"STRONG",{});var rSt=s(A8e);l$r=r(rSt,"rembert"),rSt.forEach(t),i$r=r(bje," \u2014 "),tK=n(bje,"A",{href:!0});var tSt=s(tK);d$r=r(tSt,"TFRemBertForTokenClassification"),tSt.forEach(t),c$r=r(bje," (RemBERT model)"),bje.forEach(t),f$r=i(me),GE=n(me,"LI",{});var vje=s(GE);L8e=n(vje,"STRONG",{});var aSt=s(L8e);m$r=r(aSt,"roberta"),aSt.forEach(t),g$r=r(vje," \u2014 "),aK=n(vje,"A",{href:!0});var nSt=s(aK);h$r=r(nSt,"TFRobertaForTokenClassification"),nSt.forEach(t),p$r=r(vje," (RoBERTa model)"),vje.forEach(t),_$r=i(me),OE=n(me,"LI",{});var Fje=s(OE);y8e=n(Fje,"STRONG",{});var sSt=s(y8e);u$r=r(sSt,"roformer"),sSt.forEach(t),b$r=r(Fje," \u2014 "),nK=n(Fje,"A",{href:!0});var lSt=s(nK);v$r=r(lSt,"TFRoFormerForTokenClassification"),lSt.forEach(t),F$r=r(Fje," (RoFormer model)"),Fje.forEach(t),T$r=i(me),VE=n(me,"LI",{});var Tje=s(VE);x8e=n(Tje,"STRONG",{});var iSt=s(x8e);M$r=r(iSt,"xlm"),iSt.forEach(t),E$r=r(Tje," \u2014 "),sK=n(Tje,"A",{href:!0});var dSt=s(sK);C$r=r(dSt,"TFXLMForTokenClassification"),dSt.forEach(t),w$r=r(Tje," (XLM model)"),Tje.forEach(t),A$r=i(me),XE=n(me,"LI",{});var Mje=s(XE);$8e=n(Mje,"STRONG",{});var cSt=s($8e);L$r=r(cSt,"xlm-roberta"),cSt.forEach(t),y$r=r(Mje," \u2014 "),lK=n(Mje,"A",{href:!0});var fSt=s(lK);x$r=r(fSt,"TFXLMRobertaForTokenClassification"),fSt.forEach(t),$$r=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),k$r=i(me),zE=n(me,"LI",{});var Eje=s(zE);k8e=n(Eje,"STRONG",{});var mSt=s(k8e);S$r=r(mSt,"xlnet"),mSt.forEach(t),R$r=r(Eje," \u2014 "),iK=n(Eje,"A",{href:!0});var gSt=s(iK);P$r=r(gSt,"TFXLNetForTokenClassification"),gSt.forEach(t),B$r=r(Eje," (XLNet model)"),Eje.forEach(t),me.forEach(t),I$r=i(Wl),T(WE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),EVe=i(f),Bc=n(f,"H2",{class:!0});var Sze=s(Bc);QE=n(Sze,"A",{id:!0,class:!0,href:!0});var hSt=s(QE);S8e=n(hSt,"SPAN",{});var pSt=s(S8e);T(vx.$$.fragment,pSt),pSt.forEach(t),hSt.forEach(t),N$r=i(Sze),R8e=n(Sze,"SPAN",{});var _St=s(R8e);q$r=r(_St,"TFAutoModelForQuestionAnswering"),_St.forEach(t),Sze.forEach(t),CVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Fx.$$.fragment,Ql),j$r=i(Ql),Ic=n(Ql,"P",{});var Ore=s(Ic);D$r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dK=n(Ore,"A",{href:!0});var uSt=s(dK);G$r=r(uSt,"from_pretrained()"),uSt.forEach(t),O$r=r(Ore," class method or the "),cK=n(Ore,"A",{href:!0});var bSt=s(cK);V$r=r(bSt,"from_config()"),bSt.forEach(t),X$r=r(Ore,` class
method.`),Ore.forEach(t),z$r=i(Ql),Tx=n(Ql,"P",{});var Rze=s(Tx);W$r=r(Rze,"This class cannot be instantiated directly using "),P8e=n(Rze,"CODE",{});var vSt=s(P8e);Q$r=r(vSt,"__init__()"),vSt.forEach(t),H$r=r(Rze," (throws an error)."),Rze.forEach(t),U$r=i(Ql),Ot=n(Ql,"DIV",{class:!0});var Yw=s(Ot);T(Mx.$$.fragment,Yw),J$r=i(Yw),B8e=n(Yw,"P",{});var FSt=s(B8e);Y$r=r(FSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FSt.forEach(t),K$r=i(Yw),Nc=n(Yw,"P",{});var Vre=s(Nc);Z$r=r(Vre,`Note:
Loading a model from its configuration file does `),I8e=n(Vre,"STRONG",{});var TSt=s(I8e);ekr=r(TSt,"not"),TSt.forEach(t),okr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(Vre,"A",{href:!0});var MSt=s(fK);rkr=r(MSt,"from_pretrained()"),MSt.forEach(t),tkr=r(Vre," to load the model weights."),Vre.forEach(t),akr=i(Yw),T(HE.$$.fragment,Yw),Yw.forEach(t),nkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(Ex.$$.fragment,Hl),skr=i(Hl),N8e=n(Hl,"P",{});var ESt=s(N8e);lkr=r(ESt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ESt.forEach(t),ikr=i(Hl),un=n(Hl,"P",{});var Kw=s(un);dkr=r(Kw,"The model class to instantiate is selected based on the "),q8e=n(Kw,"CODE",{});var CSt=s(q8e);ckr=r(CSt,"model_type"),CSt.forEach(t),fkr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),j8e=n(Kw,"CODE",{});var wSt=s(j8e);mkr=r(wSt,"pretrained_model_name_or_path"),wSt.forEach(t),gkr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=n(Kw,"CODE",{});var ASt=s(D8e);hkr=r(ASt,"pretrained_model_name_or_path"),ASt.forEach(t),pkr=r(Kw,":"),Kw.forEach(t),_kr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);UE=n(ge,"LI",{});var Cje=s(UE);G8e=n(Cje,"STRONG",{});var LSt=s(G8e);ukr=r(LSt,"albert"),LSt.forEach(t),bkr=r(Cje," \u2014 "),mK=n(Cje,"A",{href:!0});var ySt=s(mK);vkr=r(ySt,"TFAlbertForQuestionAnswering"),ySt.forEach(t),Fkr=r(Cje," (ALBERT model)"),Cje.forEach(t),Tkr=i(ge),JE=n(ge,"LI",{});var wje=s(JE);O8e=n(wje,"STRONG",{});var xSt=s(O8e);Mkr=r(xSt,"bert"),xSt.forEach(t),Ekr=r(wje," \u2014 "),gK=n(wje,"A",{href:!0});var $St=s(gK);Ckr=r($St,"TFBertForQuestionAnswering"),$St.forEach(t),wkr=r(wje," (BERT model)"),wje.forEach(t),Akr=i(ge),YE=n(ge,"LI",{});var Aje=s(YE);V8e=n(Aje,"STRONG",{});var kSt=s(V8e);Lkr=r(kSt,"camembert"),kSt.forEach(t),ykr=r(Aje," \u2014 "),hK=n(Aje,"A",{href:!0});var SSt=s(hK);xkr=r(SSt,"TFCamembertForQuestionAnswering"),SSt.forEach(t),$kr=r(Aje," (CamemBERT model)"),Aje.forEach(t),kkr=i(ge),KE=n(ge,"LI",{});var Lje=s(KE);X8e=n(Lje,"STRONG",{});var RSt=s(X8e);Skr=r(RSt,"convbert"),RSt.forEach(t),Rkr=r(Lje," \u2014 "),pK=n(Lje,"A",{href:!0});var PSt=s(pK);Pkr=r(PSt,"TFConvBertForQuestionAnswering"),PSt.forEach(t),Bkr=r(Lje," (ConvBERT model)"),Lje.forEach(t),Ikr=i(ge),ZE=n(ge,"LI",{});var yje=s(ZE);z8e=n(yje,"STRONG",{});var BSt=s(z8e);Nkr=r(BSt,"deberta"),BSt.forEach(t),qkr=r(yje," \u2014 "),_K=n(yje,"A",{href:!0});var ISt=s(_K);jkr=r(ISt,"TFDebertaForQuestionAnswering"),ISt.forEach(t),Dkr=r(yje," (DeBERTa model)"),yje.forEach(t),Gkr=i(ge),e4=n(ge,"LI",{});var xje=s(e4);W8e=n(xje,"STRONG",{});var NSt=s(W8e);Okr=r(NSt,"deberta-v2"),NSt.forEach(t),Vkr=r(xje," \u2014 "),uK=n(xje,"A",{href:!0});var qSt=s(uK);Xkr=r(qSt,"TFDebertaV2ForQuestionAnswering"),qSt.forEach(t),zkr=r(xje," (DeBERTa-v2 model)"),xje.forEach(t),Wkr=i(ge),o4=n(ge,"LI",{});var $je=s(o4);Q8e=n($je,"STRONG",{});var jSt=s(Q8e);Qkr=r(jSt,"distilbert"),jSt.forEach(t),Hkr=r($je," \u2014 "),bK=n($je,"A",{href:!0});var DSt=s(bK);Ukr=r(DSt,"TFDistilBertForQuestionAnswering"),DSt.forEach(t),Jkr=r($je," (DistilBERT model)"),$je.forEach(t),Ykr=i(ge),r4=n(ge,"LI",{});var kje=s(r4);H8e=n(kje,"STRONG",{});var GSt=s(H8e);Kkr=r(GSt,"electra"),GSt.forEach(t),Zkr=r(kje," \u2014 "),vK=n(kje,"A",{href:!0});var OSt=s(vK);eSr=r(OSt,"TFElectraForQuestionAnswering"),OSt.forEach(t),oSr=r(kje," (ELECTRA model)"),kje.forEach(t),rSr=i(ge),t4=n(ge,"LI",{});var Sje=s(t4);U8e=n(Sje,"STRONG",{});var VSt=s(U8e);tSr=r(VSt,"flaubert"),VSt.forEach(t),aSr=r(Sje," \u2014 "),FK=n(Sje,"A",{href:!0});var XSt=s(FK);nSr=r(XSt,"TFFlaubertForQuestionAnsweringSimple"),XSt.forEach(t),sSr=r(Sje," (FlauBERT model)"),Sje.forEach(t),lSr=i(ge),a4=n(ge,"LI",{});var Rje=s(a4);J8e=n(Rje,"STRONG",{});var zSt=s(J8e);iSr=r(zSt,"funnel"),zSt.forEach(t),dSr=r(Rje," \u2014 "),TK=n(Rje,"A",{href:!0});var WSt=s(TK);cSr=r(WSt,"TFFunnelForQuestionAnswering"),WSt.forEach(t),fSr=r(Rje," (Funnel Transformer model)"),Rje.forEach(t),mSr=i(ge),n4=n(ge,"LI",{});var Pje=s(n4);Y8e=n(Pje,"STRONG",{});var QSt=s(Y8e);gSr=r(QSt,"gptj"),QSt.forEach(t),hSr=r(Pje," \u2014 "),MK=n(Pje,"A",{href:!0});var HSt=s(MK);pSr=r(HSt,"TFGPTJForQuestionAnswering"),HSt.forEach(t),_Sr=r(Pje," (GPT-J model)"),Pje.forEach(t),uSr=i(ge),s4=n(ge,"LI",{});var Bje=s(s4);K8e=n(Bje,"STRONG",{});var USt=s(K8e);bSr=r(USt,"longformer"),USt.forEach(t),vSr=r(Bje," \u2014 "),EK=n(Bje,"A",{href:!0});var JSt=s(EK);FSr=r(JSt,"TFLongformerForQuestionAnswering"),JSt.forEach(t),TSr=r(Bje," (Longformer model)"),Bje.forEach(t),MSr=i(ge),l4=n(ge,"LI",{});var Ije=s(l4);Z8e=n(Ije,"STRONG",{});var YSt=s(Z8e);ESr=r(YSt,"mobilebert"),YSt.forEach(t),CSr=r(Ije," \u2014 "),CK=n(Ije,"A",{href:!0});var KSt=s(CK);wSr=r(KSt,"TFMobileBertForQuestionAnswering"),KSt.forEach(t),ASr=r(Ije," (MobileBERT model)"),Ije.forEach(t),LSr=i(ge),i4=n(ge,"LI",{});var Nje=s(i4);eMe=n(Nje,"STRONG",{});var ZSt=s(eMe);ySr=r(ZSt,"mpnet"),ZSt.forEach(t),xSr=r(Nje," \u2014 "),wK=n(Nje,"A",{href:!0});var eRt=s(wK);$Sr=r(eRt,"TFMPNetForQuestionAnswering"),eRt.forEach(t),kSr=r(Nje," (MPNet model)"),Nje.forEach(t),SSr=i(ge),d4=n(ge,"LI",{});var qje=s(d4);oMe=n(qje,"STRONG",{});var oRt=s(oMe);RSr=r(oRt,"rembert"),oRt.forEach(t),PSr=r(qje," \u2014 "),AK=n(qje,"A",{href:!0});var rRt=s(AK);BSr=r(rRt,"TFRemBertForQuestionAnswering"),rRt.forEach(t),ISr=r(qje," (RemBERT model)"),qje.forEach(t),NSr=i(ge),c4=n(ge,"LI",{});var jje=s(c4);rMe=n(jje,"STRONG",{});var tRt=s(rMe);qSr=r(tRt,"roberta"),tRt.forEach(t),jSr=r(jje," \u2014 "),LK=n(jje,"A",{href:!0});var aRt=s(LK);DSr=r(aRt,"TFRobertaForQuestionAnswering"),aRt.forEach(t),GSr=r(jje," (RoBERTa model)"),jje.forEach(t),OSr=i(ge),f4=n(ge,"LI",{});var Dje=s(f4);tMe=n(Dje,"STRONG",{});var nRt=s(tMe);VSr=r(nRt,"roformer"),nRt.forEach(t),XSr=r(Dje," \u2014 "),yK=n(Dje,"A",{href:!0});var sRt=s(yK);zSr=r(sRt,"TFRoFormerForQuestionAnswering"),sRt.forEach(t),WSr=r(Dje," (RoFormer model)"),Dje.forEach(t),QSr=i(ge),m4=n(ge,"LI",{});var Gje=s(m4);aMe=n(Gje,"STRONG",{});var lRt=s(aMe);HSr=r(lRt,"xlm"),lRt.forEach(t),USr=r(Gje," \u2014 "),xK=n(Gje,"A",{href:!0});var iRt=s(xK);JSr=r(iRt,"TFXLMForQuestionAnsweringSimple"),iRt.forEach(t),YSr=r(Gje," (XLM model)"),Gje.forEach(t),KSr=i(ge),g4=n(ge,"LI",{});var Oje=s(g4);nMe=n(Oje,"STRONG",{});var dRt=s(nMe);ZSr=r(dRt,"xlm-roberta"),dRt.forEach(t),eRr=r(Oje," \u2014 "),$K=n(Oje,"A",{href:!0});var cRt=s($K);oRr=r(cRt,"TFXLMRobertaForQuestionAnswering"),cRt.forEach(t),rRr=r(Oje," (XLM-RoBERTa model)"),Oje.forEach(t),tRr=i(ge),h4=n(ge,"LI",{});var Vje=s(h4);sMe=n(Vje,"STRONG",{});var fRt=s(sMe);aRr=r(fRt,"xlnet"),fRt.forEach(t),nRr=r(Vje," \u2014 "),kK=n(Vje,"A",{href:!0});var mRt=s(kK);sRr=r(mRt,"TFXLNetForQuestionAnsweringSimple"),mRt.forEach(t),lRr=r(Vje," (XLNet model)"),Vje.forEach(t),ge.forEach(t),iRr=i(Hl),T(p4.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),wVe=i(f),qc=n(f,"H2",{class:!0});var Pze=s(qc);_4=n(Pze,"A",{id:!0,class:!0,href:!0});var gRt=s(_4);lMe=n(gRt,"SPAN",{});var hRt=s(lMe);T(Cx.$$.fragment,hRt),hRt.forEach(t),gRt.forEach(t),dRr=i(Pze),iMe=n(Pze,"SPAN",{});var pRt=s(iMe);cRr=r(pRt,"TFAutoModelForVision2Seq"),pRt.forEach(t),Pze.forEach(t),AVe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(wx.$$.fragment,Ul),fRr=i(Ul),jc=n(Ul,"P",{});var Xre=s(jc);mRr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=n(Xre,"A",{href:!0});var _Rt=s(SK);gRr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),hRr=r(Xre," class method or the "),RK=n(Xre,"A",{href:!0});var uRt=s(RK);pRr=r(uRt,"from_config()"),uRt.forEach(t),_Rr=r(Xre,` class
method.`),Xre.forEach(t),uRr=i(Ul),Ax=n(Ul,"P",{});var Bze=s(Ax);bRr=r(Bze,"This class cannot be instantiated directly using "),dMe=n(Bze,"CODE",{});var bRt=s(dMe);vRr=r(bRt,"__init__()"),bRt.forEach(t),FRr=r(Bze," (throws an error)."),Bze.forEach(t),TRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var Zw=s(Vt);T(Lx.$$.fragment,Zw),MRr=i(Zw),cMe=n(Zw,"P",{});var vRt=s(cMe);ERr=r(vRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vRt.forEach(t),CRr=i(Zw),Dc=n(Zw,"P",{});var zre=s(Dc);wRr=r(zre,`Note:
Loading a model from its configuration file does `),fMe=n(zre,"STRONG",{});var FRt=s(fMe);ARr=r(FRt,"not"),FRt.forEach(t),LRr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(zre,"A",{href:!0});var TRt=s(PK);yRr=r(TRt,"from_pretrained()"),TRt.forEach(t),xRr=r(zre," to load the model weights."),zre.forEach(t),$Rr=i(Zw),T(u4.$$.fragment,Zw),Zw.forEach(t),kRr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(yx.$$.fragment,Jl),SRr=i(Jl),mMe=n(Jl,"P",{});var MRt=s(mMe);RRr=r(MRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MRt.forEach(t),PRr=i(Jl),bn=n(Jl,"P",{});var eA=s(bn);BRr=r(eA,"The model class to instantiate is selected based on the "),gMe=n(eA,"CODE",{});var ERt=s(gMe);IRr=r(ERt,"model_type"),ERt.forEach(t),NRr=r(eA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(eA,"CODE",{});var CRt=s(hMe);qRr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),jRr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(eA,"CODE",{});var wRt=s(pMe);DRr=r(wRt,"pretrained_model_name_or_path"),wRt.forEach(t),GRr=r(eA,":"),eA.forEach(t),ORr=i(Jl),_Me=n(Jl,"UL",{});var ARt=s(_Me);b4=n(ARt,"LI",{});var Xje=s(b4);uMe=n(Xje,"STRONG",{});var LRt=s(uMe);VRr=r(LRt,"vision-encoder-decoder"),LRt.forEach(t),XRr=r(Xje," \u2014 "),BK=n(Xje,"A",{href:!0});var yRt=s(BK);zRr=r(yRt,"TFVisionEncoderDecoderModel"),yRt.forEach(t),WRr=r(Xje," (Vision Encoder decoder model)"),Xje.forEach(t),ARt.forEach(t),QRr=i(Jl),T(v4.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),LVe=i(f),Gc=n(f,"H2",{class:!0});var Ize=s(Gc);F4=n(Ize,"A",{id:!0,class:!0,href:!0});var xRt=s(F4);bMe=n(xRt,"SPAN",{});var $Rt=s(bMe);T(xx.$$.fragment,$Rt),$Rt.forEach(t),xRt.forEach(t),HRr=i(Ize),vMe=n(Ize,"SPAN",{});var kRt=s(vMe);URr=r(kRt,"TFAutoModelForSpeechSeq2Seq"),kRt.forEach(t),Ize.forEach(t),yVe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T($x.$$.fragment,Yl),JRr=i(Yl),Oc=n(Yl,"P",{});var Wre=s(Oc);YRr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IK=n(Wre,"A",{href:!0});var SRt=s(IK);KRr=r(SRt,"from_pretrained()"),SRt.forEach(t),ZRr=r(Wre," class method or the "),NK=n(Wre,"A",{href:!0});var RRt=s(NK);ePr=r(RRt,"from_config()"),RRt.forEach(t),oPr=r(Wre,` class
method.`),Wre.forEach(t),rPr=i(Yl),kx=n(Yl,"P",{});var Nze=s(kx);tPr=r(Nze,"This class cannot be instantiated directly using "),FMe=n(Nze,"CODE",{});var PRt=s(FMe);aPr=r(PRt,"__init__()"),PRt.forEach(t),nPr=r(Nze," (throws an error)."),Nze.forEach(t),sPr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var oA=s(Xt);T(Sx.$$.fragment,oA),lPr=i(oA),TMe=n(oA,"P",{});var BRt=s(TMe);iPr=r(BRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BRt.forEach(t),dPr=i(oA),Vc=n(oA,"P",{});var Qre=s(Vc);cPr=r(Qre,`Note:
Loading a model from its configuration file does `),MMe=n(Qre,"STRONG",{});var IRt=s(MMe);fPr=r(IRt,"not"),IRt.forEach(t),mPr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Qre,"A",{href:!0});var NRt=s(qK);gPr=r(NRt,"from_pretrained()"),NRt.forEach(t),hPr=r(Qre," to load the model weights."),Qre.forEach(t),pPr=i(oA),T(T4.$$.fragment,oA),oA.forEach(t),_Pr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Rx.$$.fragment,Kl),uPr=i(Kl),EMe=n(Kl,"P",{});var qRt=s(EMe);bPr=r(qRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qRt.forEach(t),vPr=i(Kl),vn=n(Kl,"P",{});var rA=s(vn);FPr=r(rA,"The model class to instantiate is selected based on the "),CMe=n(rA,"CODE",{});var jRt=s(CMe);TPr=r(jRt,"model_type"),jRt.forEach(t),MPr=r(rA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(rA,"CODE",{});var DRt=s(wMe);EPr=r(DRt,"pretrained_model_name_or_path"),DRt.forEach(t),CPr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(rA,"CODE",{});var GRt=s(AMe);wPr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),APr=r(rA,":"),rA.forEach(t),LPr=i(Kl),LMe=n(Kl,"UL",{});var ORt=s(LMe);M4=n(ORt,"LI",{});var zje=s(M4);yMe=n(zje,"STRONG",{});var VRt=s(yMe);yPr=r(VRt,"speech_to_text"),VRt.forEach(t),xPr=r(zje," \u2014 "),jK=n(zje,"A",{href:!0});var XRt=s(jK);$Pr=r(XRt,"TFSpeech2TextForConditionalGeneration"),XRt.forEach(t),kPr=r(zje," (Speech2Text model)"),zje.forEach(t),ORt.forEach(t),SPr=i(Kl),T(E4.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),xVe=i(f),Xc=n(f,"H2",{class:!0});var qze=s(Xc);C4=n(qze,"A",{id:!0,class:!0,href:!0});var zRt=s(C4);xMe=n(zRt,"SPAN",{});var WRt=s(xMe);T(Px.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),RPr=i(qze),$Me=n(qze,"SPAN",{});var QRt=s($Me);PPr=r(QRt,"FlaxAutoModel"),QRt.forEach(t),qze.forEach(t),$Ve=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Bx.$$.fragment,Zl),BPr=i(Zl),zc=n(Zl,"P",{});var Hre=s(zc);IPr=r(Hre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DK=n(Hre,"A",{href:!0});var HRt=s(DK);NPr=r(HRt,"from_pretrained()"),HRt.forEach(t),qPr=r(Hre," class method or the "),GK=n(Hre,"A",{href:!0});var URt=s(GK);jPr=r(URt,"from_config()"),URt.forEach(t),DPr=r(Hre,` class
method.`),Hre.forEach(t),GPr=i(Zl),Ix=n(Zl,"P",{});var jze=s(Ix);OPr=r(jze,"This class cannot be instantiated directly using "),kMe=n(jze,"CODE",{});var JRt=s(kMe);VPr=r(JRt,"__init__()"),JRt.forEach(t),XPr=r(jze," (throws an error)."),jze.forEach(t),zPr=i(Zl),zt=n(Zl,"DIV",{class:!0});var tA=s(zt);T(Nx.$$.fragment,tA),WPr=i(tA),SMe=n(tA,"P",{});var YRt=s(SMe);QPr=r(YRt,"Instantiates one of the base model classes of the library from a configuration."),YRt.forEach(t),HPr=i(tA),Wc=n(tA,"P",{});var Ure=s(Wc);UPr=r(Ure,`Note:
Loading a model from its configuration file does `),RMe=n(Ure,"STRONG",{});var KRt=s(RMe);JPr=r(KRt,"not"),KRt.forEach(t),YPr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Ure,"A",{href:!0});var ZRt=s(OK);KPr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),ZPr=r(Ure," to load the model weights."),Ure.forEach(t),eBr=i(tA),T(w4.$$.fragment,tA),tA.forEach(t),oBr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(qx.$$.fragment,ei),rBr=i(ei),PMe=n(ei,"P",{});var ePt=s(PMe);tBr=r(ePt,"Instantiate one of the base model classes of the library from a pretrained model."),ePt.forEach(t),aBr=i(ei),Fn=n(ei,"P",{});var aA=s(Fn);nBr=r(aA,"The model class to instantiate is selected based on the "),BMe=n(aA,"CODE",{});var oPt=s(BMe);sBr=r(oPt,"model_type"),oPt.forEach(t),lBr=r(aA,` property of the config object (either
passed as an argument or loaded from `),IMe=n(aA,"CODE",{});var rPt=s(IMe);iBr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),dBr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(aA,"CODE",{});var tPt=s(NMe);cBr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),fBr=r(aA,":"),aA.forEach(t),mBr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);A4=n(ae,"LI",{});var Wje=s(A4);qMe=n(Wje,"STRONG",{});var aPt=s(qMe);gBr=r(aPt,"albert"),aPt.forEach(t),hBr=r(Wje," \u2014 "),VK=n(Wje,"A",{href:!0});var nPt=s(VK);pBr=r(nPt,"FlaxAlbertModel"),nPt.forEach(t),_Br=r(Wje," (ALBERT model)"),Wje.forEach(t),uBr=i(ae),L4=n(ae,"LI",{});var Qje=s(L4);jMe=n(Qje,"STRONG",{});var sPt=s(jMe);bBr=r(sPt,"bart"),sPt.forEach(t),vBr=r(Qje," \u2014 "),XK=n(Qje,"A",{href:!0});var lPt=s(XK);FBr=r(lPt,"FlaxBartModel"),lPt.forEach(t),TBr=r(Qje," (BART model)"),Qje.forEach(t),MBr=i(ae),y4=n(ae,"LI",{});var Hje=s(y4);DMe=n(Hje,"STRONG",{});var iPt=s(DMe);EBr=r(iPt,"beit"),iPt.forEach(t),CBr=r(Hje," \u2014 "),zK=n(Hje,"A",{href:!0});var dPt=s(zK);wBr=r(dPt,"FlaxBeitModel"),dPt.forEach(t),ABr=r(Hje," (BEiT model)"),Hje.forEach(t),LBr=i(ae),x4=n(ae,"LI",{});var Uje=s(x4);GMe=n(Uje,"STRONG",{});var cPt=s(GMe);yBr=r(cPt,"bert"),cPt.forEach(t),xBr=r(Uje," \u2014 "),WK=n(Uje,"A",{href:!0});var fPt=s(WK);$Br=r(fPt,"FlaxBertModel"),fPt.forEach(t),kBr=r(Uje," (BERT model)"),Uje.forEach(t),SBr=i(ae),$4=n(ae,"LI",{});var Jje=s($4);OMe=n(Jje,"STRONG",{});var mPt=s(OMe);RBr=r(mPt,"big_bird"),mPt.forEach(t),PBr=r(Jje," \u2014 "),QK=n(Jje,"A",{href:!0});var gPt=s(QK);BBr=r(gPt,"FlaxBigBirdModel"),gPt.forEach(t),IBr=r(Jje," (BigBird model)"),Jje.forEach(t),NBr=i(ae),k4=n(ae,"LI",{});var Yje=s(k4);VMe=n(Yje,"STRONG",{});var hPt=s(VMe);qBr=r(hPt,"blenderbot"),hPt.forEach(t),jBr=r(Yje," \u2014 "),HK=n(Yje,"A",{href:!0});var pPt=s(HK);DBr=r(pPt,"FlaxBlenderbotModel"),pPt.forEach(t),GBr=r(Yje," (Blenderbot model)"),Yje.forEach(t),OBr=i(ae),S4=n(ae,"LI",{});var Kje=s(S4);XMe=n(Kje,"STRONG",{});var _Pt=s(XMe);VBr=r(_Pt,"blenderbot-small"),_Pt.forEach(t),XBr=r(Kje," \u2014 "),UK=n(Kje,"A",{href:!0});var uPt=s(UK);zBr=r(uPt,"FlaxBlenderbotSmallModel"),uPt.forEach(t),WBr=r(Kje," (BlenderbotSmall model)"),Kje.forEach(t),QBr=i(ae),R4=n(ae,"LI",{});var Zje=s(R4);zMe=n(Zje,"STRONG",{});var bPt=s(zMe);HBr=r(bPt,"clip"),bPt.forEach(t),UBr=r(Zje," \u2014 "),JK=n(Zje,"A",{href:!0});var vPt=s(JK);JBr=r(vPt,"FlaxCLIPModel"),vPt.forEach(t),YBr=r(Zje," (CLIP model)"),Zje.forEach(t),KBr=i(ae),P4=n(ae,"LI",{});var eDe=s(P4);WMe=n(eDe,"STRONG",{});var FPt=s(WMe);ZBr=r(FPt,"distilbert"),FPt.forEach(t),eIr=r(eDe," \u2014 "),YK=n(eDe,"A",{href:!0});var TPt=s(YK);oIr=r(TPt,"FlaxDistilBertModel"),TPt.forEach(t),rIr=r(eDe," (DistilBERT model)"),eDe.forEach(t),tIr=i(ae),B4=n(ae,"LI",{});var oDe=s(B4);QMe=n(oDe,"STRONG",{});var MPt=s(QMe);aIr=r(MPt,"electra"),MPt.forEach(t),nIr=r(oDe," \u2014 "),KK=n(oDe,"A",{href:!0});var EPt=s(KK);sIr=r(EPt,"FlaxElectraModel"),EPt.forEach(t),lIr=r(oDe," (ELECTRA model)"),oDe.forEach(t),iIr=i(ae),I4=n(ae,"LI",{});var rDe=s(I4);HMe=n(rDe,"STRONG",{});var CPt=s(HMe);dIr=r(CPt,"gpt2"),CPt.forEach(t),cIr=r(rDe," \u2014 "),ZK=n(rDe,"A",{href:!0});var wPt=s(ZK);fIr=r(wPt,"FlaxGPT2Model"),wPt.forEach(t),mIr=r(rDe," (OpenAI GPT-2 model)"),rDe.forEach(t),gIr=i(ae),N4=n(ae,"LI",{});var tDe=s(N4);UMe=n(tDe,"STRONG",{});var APt=s(UMe);hIr=r(APt,"gpt_neo"),APt.forEach(t),pIr=r(tDe," \u2014 "),eZ=n(tDe,"A",{href:!0});var LPt=s(eZ);_Ir=r(LPt,"FlaxGPTNeoModel"),LPt.forEach(t),uIr=r(tDe," (GPT Neo model)"),tDe.forEach(t),bIr=i(ae),q4=n(ae,"LI",{});var aDe=s(q4);JMe=n(aDe,"STRONG",{});var yPt=s(JMe);vIr=r(yPt,"gptj"),yPt.forEach(t),FIr=r(aDe," \u2014 "),oZ=n(aDe,"A",{href:!0});var xPt=s(oZ);TIr=r(xPt,"FlaxGPTJModel"),xPt.forEach(t),MIr=r(aDe," (GPT-J model)"),aDe.forEach(t),EIr=i(ae),j4=n(ae,"LI",{});var nDe=s(j4);YMe=n(nDe,"STRONG",{});var $Pt=s(YMe);CIr=r($Pt,"longt5"),$Pt.forEach(t),wIr=r(nDe," \u2014 "),rZ=n(nDe,"A",{href:!0});var kPt=s(rZ);AIr=r(kPt,"FlaxLongT5Model"),kPt.forEach(t),LIr=r(nDe," (LongT5 model)"),nDe.forEach(t),yIr=i(ae),D4=n(ae,"LI",{});var sDe=s(D4);KMe=n(sDe,"STRONG",{});var SPt=s(KMe);xIr=r(SPt,"marian"),SPt.forEach(t),$Ir=r(sDe," \u2014 "),tZ=n(sDe,"A",{href:!0});var RPt=s(tZ);kIr=r(RPt,"FlaxMarianModel"),RPt.forEach(t),SIr=r(sDe," (Marian model)"),sDe.forEach(t),RIr=i(ae),G4=n(ae,"LI",{});var lDe=s(G4);ZMe=n(lDe,"STRONG",{});var PPt=s(ZMe);PIr=r(PPt,"mbart"),PPt.forEach(t),BIr=r(lDe," \u2014 "),aZ=n(lDe,"A",{href:!0});var BPt=s(aZ);IIr=r(BPt,"FlaxMBartModel"),BPt.forEach(t),NIr=r(lDe," (mBART model)"),lDe.forEach(t),qIr=i(ae),O4=n(ae,"LI",{});var iDe=s(O4);eEe=n(iDe,"STRONG",{});var IPt=s(eEe);jIr=r(IPt,"mt5"),IPt.forEach(t),DIr=r(iDe," \u2014 "),nZ=n(iDe,"A",{href:!0});var NPt=s(nZ);GIr=r(NPt,"FlaxMT5Model"),NPt.forEach(t),OIr=r(iDe," (MT5 model)"),iDe.forEach(t),VIr=i(ae),V4=n(ae,"LI",{});var dDe=s(V4);oEe=n(dDe,"STRONG",{});var qPt=s(oEe);XIr=r(qPt,"opt"),qPt.forEach(t),zIr=r(dDe," \u2014 "),sZ=n(dDe,"A",{href:!0});var jPt=s(sZ);WIr=r(jPt,"FlaxOPTModel"),jPt.forEach(t),QIr=r(dDe," (OPT model)"),dDe.forEach(t),HIr=i(ae),X4=n(ae,"LI",{});var cDe=s(X4);rEe=n(cDe,"STRONG",{});var DPt=s(rEe);UIr=r(DPt,"pegasus"),DPt.forEach(t),JIr=r(cDe," \u2014 "),lZ=n(cDe,"A",{href:!0});var GPt=s(lZ);YIr=r(GPt,"FlaxPegasusModel"),GPt.forEach(t),KIr=r(cDe," (Pegasus model)"),cDe.forEach(t),ZIr=i(ae),z4=n(ae,"LI",{});var fDe=s(z4);tEe=n(fDe,"STRONG",{});var OPt=s(tEe);eNr=r(OPt,"roberta"),OPt.forEach(t),oNr=r(fDe," \u2014 "),iZ=n(fDe,"A",{href:!0});var VPt=s(iZ);rNr=r(VPt,"FlaxRobertaModel"),VPt.forEach(t),tNr=r(fDe," (RoBERTa model)"),fDe.forEach(t),aNr=i(ae),W4=n(ae,"LI",{});var mDe=s(W4);aEe=n(mDe,"STRONG",{});var XPt=s(aEe);nNr=r(XPt,"roformer"),XPt.forEach(t),sNr=r(mDe," \u2014 "),dZ=n(mDe,"A",{href:!0});var zPt=s(dZ);lNr=r(zPt,"FlaxRoFormerModel"),zPt.forEach(t),iNr=r(mDe," (RoFormer model)"),mDe.forEach(t),dNr=i(ae),Q4=n(ae,"LI",{});var gDe=s(Q4);nEe=n(gDe,"STRONG",{});var WPt=s(nEe);cNr=r(WPt,"t5"),WPt.forEach(t),fNr=r(gDe," \u2014 "),cZ=n(gDe,"A",{href:!0});var QPt=s(cZ);mNr=r(QPt,"FlaxT5Model"),QPt.forEach(t),gNr=r(gDe," (T5 model)"),gDe.forEach(t),hNr=i(ae),H4=n(ae,"LI",{});var hDe=s(H4);sEe=n(hDe,"STRONG",{});var HPt=s(sEe);pNr=r(HPt,"vision-text-dual-encoder"),HPt.forEach(t),_Nr=r(hDe," \u2014 "),fZ=n(hDe,"A",{href:!0});var UPt=s(fZ);uNr=r(UPt,"FlaxVisionTextDualEncoderModel"),UPt.forEach(t),bNr=r(hDe," (VisionTextDualEncoder model)"),hDe.forEach(t),vNr=i(ae),U4=n(ae,"LI",{});var pDe=s(U4);lEe=n(pDe,"STRONG",{});var JPt=s(lEe);FNr=r(JPt,"vit"),JPt.forEach(t),TNr=r(pDe," \u2014 "),mZ=n(pDe,"A",{href:!0});var YPt=s(mZ);MNr=r(YPt,"FlaxViTModel"),YPt.forEach(t),ENr=r(pDe," (ViT model)"),pDe.forEach(t),CNr=i(ae),J4=n(ae,"LI",{});var _De=s(J4);iEe=n(_De,"STRONG",{});var KPt=s(iEe);wNr=r(KPt,"wav2vec2"),KPt.forEach(t),ANr=r(_De," \u2014 "),gZ=n(_De,"A",{href:!0});var ZPt=s(gZ);LNr=r(ZPt,"FlaxWav2Vec2Model"),ZPt.forEach(t),yNr=r(_De," (Wav2Vec2 model)"),_De.forEach(t),xNr=i(ae),Y4=n(ae,"LI",{});var uDe=s(Y4);dEe=n(uDe,"STRONG",{});var eBt=s(dEe);$Nr=r(eBt,"xglm"),eBt.forEach(t),kNr=r(uDe," \u2014 "),hZ=n(uDe,"A",{href:!0});var oBt=s(hZ);SNr=r(oBt,"FlaxXGLMModel"),oBt.forEach(t),RNr=r(uDe," (XGLM model)"),uDe.forEach(t),PNr=i(ae),K4=n(ae,"LI",{});var bDe=s(K4);cEe=n(bDe,"STRONG",{});var rBt=s(cEe);BNr=r(rBt,"xlm-roberta"),rBt.forEach(t),INr=r(bDe," \u2014 "),pZ=n(bDe,"A",{href:!0});var tBt=s(pZ);NNr=r(tBt,"FlaxXLMRobertaModel"),tBt.forEach(t),qNr=r(bDe," (XLM-RoBERTa model)"),bDe.forEach(t),ae.forEach(t),jNr=i(ei),T(Z4.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),kVe=i(f),Qc=n(f,"H2",{class:!0});var Dze=s(Qc);eC=n(Dze,"A",{id:!0,class:!0,href:!0});var aBt=s(eC);fEe=n(aBt,"SPAN",{});var nBt=s(fEe);T(jx.$$.fragment,nBt),nBt.forEach(t),aBt.forEach(t),DNr=i(Dze),mEe=n(Dze,"SPAN",{});var sBt=s(mEe);GNr=r(sBt,"FlaxAutoModelForCausalLM"),sBt.forEach(t),Dze.forEach(t),SVe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Dx.$$.fragment,oi),ONr=i(oi),Hc=n(oi,"P",{});var Jre=s(Hc);VNr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Z=n(Jre,"A",{href:!0});var lBt=s(_Z);XNr=r(lBt,"from_pretrained()"),lBt.forEach(t),zNr=r(Jre," class method or the "),uZ=n(Jre,"A",{href:!0});var iBt=s(uZ);WNr=r(iBt,"from_config()"),iBt.forEach(t),QNr=r(Jre,` class
method.`),Jre.forEach(t),HNr=i(oi),Gx=n(oi,"P",{});var Gze=s(Gx);UNr=r(Gze,"This class cannot be instantiated directly using "),gEe=n(Gze,"CODE",{});var dBt=s(gEe);JNr=r(dBt,"__init__()"),dBt.forEach(t),YNr=r(Gze," (throws an error)."),Gze.forEach(t),KNr=i(oi),Wt=n(oi,"DIV",{class:!0});var nA=s(Wt);T(Ox.$$.fragment,nA),ZNr=i(nA),hEe=n(nA,"P",{});var cBt=s(hEe);eqr=r(cBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cBt.forEach(t),oqr=i(nA),Uc=n(nA,"P",{});var Yre=s(Uc);rqr=r(Yre,`Note:
Loading a model from its configuration file does `),pEe=n(Yre,"STRONG",{});var fBt=s(pEe);tqr=r(fBt,"not"),fBt.forEach(t),aqr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=n(Yre,"A",{href:!0});var mBt=s(bZ);nqr=r(mBt,"from_pretrained()"),mBt.forEach(t),sqr=r(Yre," to load the model weights."),Yre.forEach(t),lqr=i(nA),T(oC.$$.fragment,nA),nA.forEach(t),iqr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Vx.$$.fragment,ri),dqr=i(ri),_Ee=n(ri,"P",{});var gBt=s(_Ee);cqr=r(gBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gBt.forEach(t),fqr=i(ri),Tn=n(ri,"P",{});var sA=s(Tn);mqr=r(sA,"The model class to instantiate is selected based on the "),uEe=n(sA,"CODE",{});var hBt=s(uEe);gqr=r(hBt,"model_type"),hBt.forEach(t),hqr=r(sA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(sA,"CODE",{});var pBt=s(bEe);pqr=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),_qr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(sA,"CODE",{});var _Bt=s(vEe);uqr=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),bqr=r(sA,":"),sA.forEach(t),vqr=i(ri),xe=n(ri,"UL",{});var Ne=s(xe);rC=n(Ne,"LI",{});var vDe=s(rC);FEe=n(vDe,"STRONG",{});var uBt=s(FEe);Fqr=r(uBt,"bart"),uBt.forEach(t),Tqr=r(vDe," \u2014 "),vZ=n(vDe,"A",{href:!0});var bBt=s(vZ);Mqr=r(bBt,"FlaxBartForCausalLM"),bBt.forEach(t),Eqr=r(vDe," (BART model)"),vDe.forEach(t),Cqr=i(Ne),tC=n(Ne,"LI",{});var FDe=s(tC);TEe=n(FDe,"STRONG",{});var vBt=s(TEe);wqr=r(vBt,"bert"),vBt.forEach(t),Aqr=r(FDe," \u2014 "),FZ=n(FDe,"A",{href:!0});var FBt=s(FZ);Lqr=r(FBt,"FlaxBertForCausalLM"),FBt.forEach(t),yqr=r(FDe," (BERT model)"),FDe.forEach(t),xqr=i(Ne),aC=n(Ne,"LI",{});var TDe=s(aC);MEe=n(TDe,"STRONG",{});var TBt=s(MEe);$qr=r(TBt,"big_bird"),TBt.forEach(t),kqr=r(TDe," \u2014 "),TZ=n(TDe,"A",{href:!0});var MBt=s(TZ);Sqr=r(MBt,"FlaxBigBirdForCausalLM"),MBt.forEach(t),Rqr=r(TDe," (BigBird model)"),TDe.forEach(t),Pqr=i(Ne),nC=n(Ne,"LI",{});var MDe=s(nC);EEe=n(MDe,"STRONG",{});var EBt=s(EEe);Bqr=r(EBt,"electra"),EBt.forEach(t),Iqr=r(MDe," \u2014 "),MZ=n(MDe,"A",{href:!0});var CBt=s(MZ);Nqr=r(CBt,"FlaxElectraForCausalLM"),CBt.forEach(t),qqr=r(MDe," (ELECTRA model)"),MDe.forEach(t),jqr=i(Ne),sC=n(Ne,"LI",{});var EDe=s(sC);CEe=n(EDe,"STRONG",{});var wBt=s(CEe);Dqr=r(wBt,"gpt2"),wBt.forEach(t),Gqr=r(EDe," \u2014 "),EZ=n(EDe,"A",{href:!0});var ABt=s(EZ);Oqr=r(ABt,"FlaxGPT2LMHeadModel"),ABt.forEach(t),Vqr=r(EDe," (OpenAI GPT-2 model)"),EDe.forEach(t),Xqr=i(Ne),lC=n(Ne,"LI",{});var CDe=s(lC);wEe=n(CDe,"STRONG",{});var LBt=s(wEe);zqr=r(LBt,"gpt_neo"),LBt.forEach(t),Wqr=r(CDe," \u2014 "),CZ=n(CDe,"A",{href:!0});var yBt=s(CZ);Qqr=r(yBt,"FlaxGPTNeoForCausalLM"),yBt.forEach(t),Hqr=r(CDe," (GPT Neo model)"),CDe.forEach(t),Uqr=i(Ne),iC=n(Ne,"LI",{});var wDe=s(iC);AEe=n(wDe,"STRONG",{});var xBt=s(AEe);Jqr=r(xBt,"gptj"),xBt.forEach(t),Yqr=r(wDe," \u2014 "),wZ=n(wDe,"A",{href:!0});var $Bt=s(wZ);Kqr=r($Bt,"FlaxGPTJForCausalLM"),$Bt.forEach(t),Zqr=r(wDe," (GPT-J model)"),wDe.forEach(t),ejr=i(Ne),dC=n(Ne,"LI",{});var ADe=s(dC);LEe=n(ADe,"STRONG",{});var kBt=s(LEe);ojr=r(kBt,"opt"),kBt.forEach(t),rjr=r(ADe," \u2014 "),AZ=n(ADe,"A",{href:!0});var SBt=s(AZ);tjr=r(SBt,"FlaxOPTForCausalLM"),SBt.forEach(t),ajr=r(ADe," (OPT model)"),ADe.forEach(t),njr=i(Ne),cC=n(Ne,"LI",{});var LDe=s(cC);yEe=n(LDe,"STRONG",{});var RBt=s(yEe);sjr=r(RBt,"roberta"),RBt.forEach(t),ljr=r(LDe," \u2014 "),LZ=n(LDe,"A",{href:!0});var PBt=s(LZ);ijr=r(PBt,"FlaxRobertaForCausalLM"),PBt.forEach(t),djr=r(LDe," (RoBERTa model)"),LDe.forEach(t),cjr=i(Ne),fC=n(Ne,"LI",{});var yDe=s(fC);xEe=n(yDe,"STRONG",{});var BBt=s(xEe);fjr=r(BBt,"xglm"),BBt.forEach(t),mjr=r(yDe," \u2014 "),yZ=n(yDe,"A",{href:!0});var IBt=s(yZ);gjr=r(IBt,"FlaxXGLMForCausalLM"),IBt.forEach(t),hjr=r(yDe," (XGLM model)"),yDe.forEach(t),Ne.forEach(t),pjr=i(ri),T(mC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),RVe=i(f),Jc=n(f,"H2",{class:!0});var Oze=s(Jc);gC=n(Oze,"A",{id:!0,class:!0,href:!0});var NBt=s(gC);$Ee=n(NBt,"SPAN",{});var qBt=s($Ee);T(Xx.$$.fragment,qBt),qBt.forEach(t),NBt.forEach(t),_jr=i(Oze),kEe=n(Oze,"SPAN",{});var jBt=s(kEe);ujr=r(jBt,"FlaxAutoModelForPreTraining"),jBt.forEach(t),Oze.forEach(t),PVe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(zx.$$.fragment,ti),bjr=i(ti),Yc=n(ti,"P",{});var Kre=s(Yc);vjr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xZ=n(Kre,"A",{href:!0});var DBt=s(xZ);Fjr=r(DBt,"from_pretrained()"),DBt.forEach(t),Tjr=r(Kre," class method or the "),$Z=n(Kre,"A",{href:!0});var GBt=s($Z);Mjr=r(GBt,"from_config()"),GBt.forEach(t),Ejr=r(Kre,` class
method.`),Kre.forEach(t),Cjr=i(ti),Wx=n(ti,"P",{});var Vze=s(Wx);wjr=r(Vze,"This class cannot be instantiated directly using "),SEe=n(Vze,"CODE",{});var OBt=s(SEe);Ajr=r(OBt,"__init__()"),OBt.forEach(t),Ljr=r(Vze," (throws an error)."),Vze.forEach(t),yjr=i(ti),Qt=n(ti,"DIV",{class:!0});var lA=s(Qt);T(Qx.$$.fragment,lA),xjr=i(lA),REe=n(lA,"P",{});var VBt=s(REe);$jr=r(VBt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VBt.forEach(t),kjr=i(lA),Kc=n(lA,"P",{});var Zre=s(Kc);Sjr=r(Zre,`Note:
Loading a model from its configuration file does `),PEe=n(Zre,"STRONG",{});var XBt=s(PEe);Rjr=r(XBt,"not"),XBt.forEach(t),Pjr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(Zre,"A",{href:!0});var zBt=s(kZ);Bjr=r(zBt,"from_pretrained()"),zBt.forEach(t),Ijr=r(Zre," to load the model weights."),Zre.forEach(t),Njr=i(lA),T(hC.$$.fragment,lA),lA.forEach(t),qjr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Hx.$$.fragment,ai),jjr=i(ai),BEe=n(ai,"P",{});var WBt=s(BEe);Djr=r(WBt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WBt.forEach(t),Gjr=i(ai),Mn=n(ai,"P",{});var iA=s(Mn);Ojr=r(iA,"The model class to instantiate is selected based on the "),IEe=n(iA,"CODE",{});var QBt=s(IEe);Vjr=r(QBt,"model_type"),QBt.forEach(t),Xjr=r(iA,` property of the config object (either
passed as an argument or loaded from `),NEe=n(iA,"CODE",{});var HBt=s(NEe);zjr=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),Wjr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(iA,"CODE",{});var UBt=s(qEe);Qjr=r(UBt,"pretrained_model_name_or_path"),UBt.forEach(t),Hjr=r(iA,":"),iA.forEach(t),Ujr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);pC=n(we,"LI",{});var xDe=s(pC);jEe=n(xDe,"STRONG",{});var JBt=s(jEe);Jjr=r(JBt,"albert"),JBt.forEach(t),Yjr=r(xDe," \u2014 "),SZ=n(xDe,"A",{href:!0});var YBt=s(SZ);Kjr=r(YBt,"FlaxAlbertForPreTraining"),YBt.forEach(t),Zjr=r(xDe," (ALBERT model)"),xDe.forEach(t),eDr=i(we),_C=n(we,"LI",{});var $De=s(_C);DEe=n($De,"STRONG",{});var KBt=s(DEe);oDr=r(KBt,"bart"),KBt.forEach(t),rDr=r($De," \u2014 "),RZ=n($De,"A",{href:!0});var ZBt=s(RZ);tDr=r(ZBt,"FlaxBartForConditionalGeneration"),ZBt.forEach(t),aDr=r($De," (BART model)"),$De.forEach(t),nDr=i(we),uC=n(we,"LI",{});var kDe=s(uC);GEe=n(kDe,"STRONG",{});var eIt=s(GEe);sDr=r(eIt,"bert"),eIt.forEach(t),lDr=r(kDe," \u2014 "),PZ=n(kDe,"A",{href:!0});var oIt=s(PZ);iDr=r(oIt,"FlaxBertForPreTraining"),oIt.forEach(t),dDr=r(kDe," (BERT model)"),kDe.forEach(t),cDr=i(we),bC=n(we,"LI",{});var SDe=s(bC);OEe=n(SDe,"STRONG",{});var rIt=s(OEe);fDr=r(rIt,"big_bird"),rIt.forEach(t),mDr=r(SDe," \u2014 "),BZ=n(SDe,"A",{href:!0});var tIt=s(BZ);gDr=r(tIt,"FlaxBigBirdForPreTraining"),tIt.forEach(t),hDr=r(SDe," (BigBird model)"),SDe.forEach(t),pDr=i(we),vC=n(we,"LI",{});var RDe=s(vC);VEe=n(RDe,"STRONG",{});var aIt=s(VEe);_Dr=r(aIt,"electra"),aIt.forEach(t),uDr=r(RDe," \u2014 "),IZ=n(RDe,"A",{href:!0});var nIt=s(IZ);bDr=r(nIt,"FlaxElectraForPreTraining"),nIt.forEach(t),vDr=r(RDe," (ELECTRA model)"),RDe.forEach(t),FDr=i(we),FC=n(we,"LI",{});var PDe=s(FC);XEe=n(PDe,"STRONG",{});var sIt=s(XEe);TDr=r(sIt,"longt5"),sIt.forEach(t),MDr=r(PDe," \u2014 "),NZ=n(PDe,"A",{href:!0});var lIt=s(NZ);EDr=r(lIt,"FlaxLongT5ForConditionalGeneration"),lIt.forEach(t),CDr=r(PDe," (LongT5 model)"),PDe.forEach(t),wDr=i(we),TC=n(we,"LI",{});var BDe=s(TC);zEe=n(BDe,"STRONG",{});var iIt=s(zEe);ADr=r(iIt,"mbart"),iIt.forEach(t),LDr=r(BDe," \u2014 "),qZ=n(BDe,"A",{href:!0});var dIt=s(qZ);yDr=r(dIt,"FlaxMBartForConditionalGeneration"),dIt.forEach(t),xDr=r(BDe," (mBART model)"),BDe.forEach(t),$Dr=i(we),MC=n(we,"LI",{});var IDe=s(MC);WEe=n(IDe,"STRONG",{});var cIt=s(WEe);kDr=r(cIt,"mt5"),cIt.forEach(t),SDr=r(IDe," \u2014 "),jZ=n(IDe,"A",{href:!0});var fIt=s(jZ);RDr=r(fIt,"FlaxMT5ForConditionalGeneration"),fIt.forEach(t),PDr=r(IDe," (MT5 model)"),IDe.forEach(t),BDr=i(we),EC=n(we,"LI",{});var NDe=s(EC);QEe=n(NDe,"STRONG",{});var mIt=s(QEe);IDr=r(mIt,"roberta"),mIt.forEach(t),NDr=r(NDe," \u2014 "),DZ=n(NDe,"A",{href:!0});var gIt=s(DZ);qDr=r(gIt,"FlaxRobertaForMaskedLM"),gIt.forEach(t),jDr=r(NDe," (RoBERTa model)"),NDe.forEach(t),DDr=i(we),CC=n(we,"LI",{});var qDe=s(CC);HEe=n(qDe,"STRONG",{});var hIt=s(HEe);GDr=r(hIt,"roformer"),hIt.forEach(t),ODr=r(qDe," \u2014 "),GZ=n(qDe,"A",{href:!0});var pIt=s(GZ);VDr=r(pIt,"FlaxRoFormerForMaskedLM"),pIt.forEach(t),XDr=r(qDe," (RoFormer model)"),qDe.forEach(t),zDr=i(we),wC=n(we,"LI",{});var jDe=s(wC);UEe=n(jDe,"STRONG",{});var _It=s(UEe);WDr=r(_It,"t5"),_It.forEach(t),QDr=r(jDe," \u2014 "),OZ=n(jDe,"A",{href:!0});var uIt=s(OZ);HDr=r(uIt,"FlaxT5ForConditionalGeneration"),uIt.forEach(t),UDr=r(jDe," (T5 model)"),jDe.forEach(t),JDr=i(we),AC=n(we,"LI",{});var DDe=s(AC);JEe=n(DDe,"STRONG",{});var bIt=s(JEe);YDr=r(bIt,"wav2vec2"),bIt.forEach(t),KDr=r(DDe," \u2014 "),VZ=n(DDe,"A",{href:!0});var vIt=s(VZ);ZDr=r(vIt,"FlaxWav2Vec2ForPreTraining"),vIt.forEach(t),eGr=r(DDe," (Wav2Vec2 model)"),DDe.forEach(t),oGr=i(we),LC=n(we,"LI",{});var GDe=s(LC);YEe=n(GDe,"STRONG",{});var FIt=s(YEe);rGr=r(FIt,"xlm-roberta"),FIt.forEach(t),tGr=r(GDe," \u2014 "),XZ=n(GDe,"A",{href:!0});var TIt=s(XZ);aGr=r(TIt,"FlaxXLMRobertaForMaskedLM"),TIt.forEach(t),nGr=r(GDe," (XLM-RoBERTa model)"),GDe.forEach(t),we.forEach(t),sGr=i(ai),T(yC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),BVe=i(f),Zc=n(f,"H2",{class:!0});var Xze=s(Zc);xC=n(Xze,"A",{id:!0,class:!0,href:!0});var MIt=s(xC);KEe=n(MIt,"SPAN",{});var EIt=s(KEe);T(Ux.$$.fragment,EIt),EIt.forEach(t),MIt.forEach(t),lGr=i(Xze),ZEe=n(Xze,"SPAN",{});var CIt=s(ZEe);iGr=r(CIt,"FlaxAutoModelForMaskedLM"),CIt.forEach(t),Xze.forEach(t),IVe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(Jx.$$.fragment,ni),dGr=i(ni),ef=n(ni,"P",{});var ete=s(ef);cGr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zZ=n(ete,"A",{href:!0});var wIt=s(zZ);fGr=r(wIt,"from_pretrained()"),wIt.forEach(t),mGr=r(ete," class method or the "),WZ=n(ete,"A",{href:!0});var AIt=s(WZ);gGr=r(AIt,"from_config()"),AIt.forEach(t),hGr=r(ete,` class
method.`),ete.forEach(t),pGr=i(ni),Yx=n(ni,"P",{});var zze=s(Yx);_Gr=r(zze,"This class cannot be instantiated directly using "),e4e=n(zze,"CODE",{});var LIt=s(e4e);uGr=r(LIt,"__init__()"),LIt.forEach(t),bGr=r(zze," (throws an error)."),zze.forEach(t),vGr=i(ni),Ht=n(ni,"DIV",{class:!0});var dA=s(Ht);T(Kx.$$.fragment,dA),FGr=i(dA),o4e=n(dA,"P",{});var yIt=s(o4e);TGr=r(yIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yIt.forEach(t),MGr=i(dA),of=n(dA,"P",{});var ote=s(of);EGr=r(ote,`Note:
Loading a model from its configuration file does `),r4e=n(ote,"STRONG",{});var xIt=s(r4e);CGr=r(xIt,"not"),xIt.forEach(t),wGr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(ote,"A",{href:!0});var $It=s(QZ);AGr=r($It,"from_pretrained()"),$It.forEach(t),LGr=r(ote," to load the model weights."),ote.forEach(t),yGr=i(dA),T($C.$$.fragment,dA),dA.forEach(t),xGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Zx.$$.fragment,si),$Gr=i(si),t4e=n(si,"P",{});var kIt=s(t4e);kGr=r(kIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kIt.forEach(t),SGr=i(si),En=n(si,"P",{});var cA=s(En);RGr=r(cA,"The model class to instantiate is selected based on the "),a4e=n(cA,"CODE",{});var SIt=s(a4e);PGr=r(SIt,"model_type"),SIt.forEach(t),BGr=r(cA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(cA,"CODE",{});var RIt=s(n4e);IGr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),NGr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(cA,"CODE",{});var PIt=s(s4e);qGr=r(PIt,"pretrained_model_name_or_path"),PIt.forEach(t),jGr=r(cA,":"),cA.forEach(t),DGr=i(si),$e=n(si,"UL",{});var qe=s($e);kC=n(qe,"LI",{});var ODe=s(kC);l4e=n(ODe,"STRONG",{});var BIt=s(l4e);GGr=r(BIt,"albert"),BIt.forEach(t),OGr=r(ODe," \u2014 "),HZ=n(ODe,"A",{href:!0});var IIt=s(HZ);VGr=r(IIt,"FlaxAlbertForMaskedLM"),IIt.forEach(t),XGr=r(ODe," (ALBERT model)"),ODe.forEach(t),zGr=i(qe),SC=n(qe,"LI",{});var VDe=s(SC);i4e=n(VDe,"STRONG",{});var NIt=s(i4e);WGr=r(NIt,"bart"),NIt.forEach(t),QGr=r(VDe," \u2014 "),UZ=n(VDe,"A",{href:!0});var qIt=s(UZ);HGr=r(qIt,"FlaxBartForConditionalGeneration"),qIt.forEach(t),UGr=r(VDe," (BART model)"),VDe.forEach(t),JGr=i(qe),RC=n(qe,"LI",{});var XDe=s(RC);d4e=n(XDe,"STRONG",{});var jIt=s(d4e);YGr=r(jIt,"bert"),jIt.forEach(t),KGr=r(XDe," \u2014 "),JZ=n(XDe,"A",{href:!0});var DIt=s(JZ);ZGr=r(DIt,"FlaxBertForMaskedLM"),DIt.forEach(t),eOr=r(XDe," (BERT model)"),XDe.forEach(t),oOr=i(qe),PC=n(qe,"LI",{});var zDe=s(PC);c4e=n(zDe,"STRONG",{});var GIt=s(c4e);rOr=r(GIt,"big_bird"),GIt.forEach(t),tOr=r(zDe," \u2014 "),YZ=n(zDe,"A",{href:!0});var OIt=s(YZ);aOr=r(OIt,"FlaxBigBirdForMaskedLM"),OIt.forEach(t),nOr=r(zDe," (BigBird model)"),zDe.forEach(t),sOr=i(qe),BC=n(qe,"LI",{});var WDe=s(BC);f4e=n(WDe,"STRONG",{});var VIt=s(f4e);lOr=r(VIt,"distilbert"),VIt.forEach(t),iOr=r(WDe," \u2014 "),KZ=n(WDe,"A",{href:!0});var XIt=s(KZ);dOr=r(XIt,"FlaxDistilBertForMaskedLM"),XIt.forEach(t),cOr=r(WDe," (DistilBERT model)"),WDe.forEach(t),fOr=i(qe),IC=n(qe,"LI",{});var QDe=s(IC);m4e=n(QDe,"STRONG",{});var zIt=s(m4e);mOr=r(zIt,"electra"),zIt.forEach(t),gOr=r(QDe," \u2014 "),ZZ=n(QDe,"A",{href:!0});var WIt=s(ZZ);hOr=r(WIt,"FlaxElectraForMaskedLM"),WIt.forEach(t),pOr=r(QDe," (ELECTRA model)"),QDe.forEach(t),_Or=i(qe),NC=n(qe,"LI",{});var HDe=s(NC);g4e=n(HDe,"STRONG",{});var QIt=s(g4e);uOr=r(QIt,"mbart"),QIt.forEach(t),bOr=r(HDe," \u2014 "),eee=n(HDe,"A",{href:!0});var HIt=s(eee);vOr=r(HIt,"FlaxMBartForConditionalGeneration"),HIt.forEach(t),FOr=r(HDe," (mBART model)"),HDe.forEach(t),TOr=i(qe),qC=n(qe,"LI",{});var UDe=s(qC);h4e=n(UDe,"STRONG",{});var UIt=s(h4e);MOr=r(UIt,"roberta"),UIt.forEach(t),EOr=r(UDe," \u2014 "),oee=n(UDe,"A",{href:!0});var JIt=s(oee);COr=r(JIt,"FlaxRobertaForMaskedLM"),JIt.forEach(t),wOr=r(UDe," (RoBERTa model)"),UDe.forEach(t),AOr=i(qe),jC=n(qe,"LI",{});var JDe=s(jC);p4e=n(JDe,"STRONG",{});var YIt=s(p4e);LOr=r(YIt,"roformer"),YIt.forEach(t),yOr=r(JDe," \u2014 "),ree=n(JDe,"A",{href:!0});var KIt=s(ree);xOr=r(KIt,"FlaxRoFormerForMaskedLM"),KIt.forEach(t),$Or=r(JDe," (RoFormer model)"),JDe.forEach(t),kOr=i(qe),DC=n(qe,"LI",{});var YDe=s(DC);_4e=n(YDe,"STRONG",{});var ZIt=s(_4e);SOr=r(ZIt,"xlm-roberta"),ZIt.forEach(t),ROr=r(YDe," \u2014 "),tee=n(YDe,"A",{href:!0});var eNt=s(tee);POr=r(eNt,"FlaxXLMRobertaForMaskedLM"),eNt.forEach(t),BOr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),qe.forEach(t),IOr=i(si),T(GC.$$.fragment,si),si.forEach(t),ni.forEach(t),NVe=i(f),rf=n(f,"H2",{class:!0});var Wze=s(rf);OC=n(Wze,"A",{id:!0,class:!0,href:!0});var oNt=s(OC);u4e=n(oNt,"SPAN",{});var rNt=s(u4e);T(e$.$$.fragment,rNt),rNt.forEach(t),oNt.forEach(t),NOr=i(Wze),b4e=n(Wze,"SPAN",{});var tNt=s(b4e);qOr=r(tNt,"FlaxAutoModelForSeq2SeqLM"),tNt.forEach(t),Wze.forEach(t),qVe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(o$.$$.fragment,li),jOr=i(li),tf=n(li,"P",{});var rte=s(tf);DOr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aee=n(rte,"A",{href:!0});var aNt=s(aee);GOr=r(aNt,"from_pretrained()"),aNt.forEach(t),OOr=r(rte," class method or the "),nee=n(rte,"A",{href:!0});var nNt=s(nee);VOr=r(nNt,"from_config()"),nNt.forEach(t),XOr=r(rte,` class
method.`),rte.forEach(t),zOr=i(li),r$=n(li,"P",{});var Qze=s(r$);WOr=r(Qze,"This class cannot be instantiated directly using "),v4e=n(Qze,"CODE",{});var sNt=s(v4e);QOr=r(sNt,"__init__()"),sNt.forEach(t),HOr=r(Qze," (throws an error)."),Qze.forEach(t),UOr=i(li),Ut=n(li,"DIV",{class:!0});var fA=s(Ut);T(t$.$$.fragment,fA),JOr=i(fA),F4e=n(fA,"P",{});var lNt=s(F4e);YOr=r(lNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lNt.forEach(t),KOr=i(fA),af=n(fA,"P",{});var tte=s(af);ZOr=r(tte,`Note:
Loading a model from its configuration file does `),T4e=n(tte,"STRONG",{});var iNt=s(T4e);eVr=r(iNt,"not"),iNt.forEach(t),oVr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(tte,"A",{href:!0});var dNt=s(see);rVr=r(dNt,"from_pretrained()"),dNt.forEach(t),tVr=r(tte," to load the model weights."),tte.forEach(t),aVr=i(fA),T(VC.$$.fragment,fA),fA.forEach(t),nVr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(a$.$$.fragment,ii),sVr=i(ii),M4e=n(ii,"P",{});var cNt=s(M4e);lVr=r(cNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cNt.forEach(t),iVr=i(ii),Cn=n(ii,"P",{});var mA=s(Cn);dVr=r(mA,"The model class to instantiate is selected based on the "),E4e=n(mA,"CODE",{});var fNt=s(E4e);cVr=r(fNt,"model_type"),fNt.forEach(t),fVr=r(mA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(mA,"CODE",{});var mNt=s(C4e);mVr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),gVr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(mA,"CODE",{});var gNt=s(w4e);hVr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),pVr=r(mA,":"),mA.forEach(t),_Vr=i(ii),ke=n(ii,"UL",{});var je=s(ke);XC=n(je,"LI",{});var KDe=s(XC);A4e=n(KDe,"STRONG",{});var hNt=s(A4e);uVr=r(hNt,"bart"),hNt.forEach(t),bVr=r(KDe," \u2014 "),lee=n(KDe,"A",{href:!0});var pNt=s(lee);vVr=r(pNt,"FlaxBartForConditionalGeneration"),pNt.forEach(t),FVr=r(KDe," (BART model)"),KDe.forEach(t),TVr=i(je),zC=n(je,"LI",{});var ZDe=s(zC);L4e=n(ZDe,"STRONG",{});var _Nt=s(L4e);MVr=r(_Nt,"blenderbot"),_Nt.forEach(t),EVr=r(ZDe," \u2014 "),iee=n(ZDe,"A",{href:!0});var uNt=s(iee);CVr=r(uNt,"FlaxBlenderbotForConditionalGeneration"),uNt.forEach(t),wVr=r(ZDe," (Blenderbot model)"),ZDe.forEach(t),AVr=i(je),WC=n(je,"LI",{});var eGe=s(WC);y4e=n(eGe,"STRONG",{});var bNt=s(y4e);LVr=r(bNt,"blenderbot-small"),bNt.forEach(t),yVr=r(eGe," \u2014 "),dee=n(eGe,"A",{href:!0});var vNt=s(dee);xVr=r(vNt,"FlaxBlenderbotSmallForConditionalGeneration"),vNt.forEach(t),$Vr=r(eGe," (BlenderbotSmall model)"),eGe.forEach(t),kVr=i(je),QC=n(je,"LI",{});var oGe=s(QC);x4e=n(oGe,"STRONG",{});var FNt=s(x4e);SVr=r(FNt,"encoder-decoder"),FNt.forEach(t),RVr=r(oGe," \u2014 "),cee=n(oGe,"A",{href:!0});var TNt=s(cee);PVr=r(TNt,"FlaxEncoderDecoderModel"),TNt.forEach(t),BVr=r(oGe," (Encoder decoder model)"),oGe.forEach(t),IVr=i(je),HC=n(je,"LI",{});var rGe=s(HC);$4e=n(rGe,"STRONG",{});var MNt=s($4e);NVr=r(MNt,"longt5"),MNt.forEach(t),qVr=r(rGe," \u2014 "),fee=n(rGe,"A",{href:!0});var ENt=s(fee);jVr=r(ENt,"FlaxLongT5ForConditionalGeneration"),ENt.forEach(t),DVr=r(rGe," (LongT5 model)"),rGe.forEach(t),GVr=i(je),UC=n(je,"LI",{});var tGe=s(UC);k4e=n(tGe,"STRONG",{});var CNt=s(k4e);OVr=r(CNt,"marian"),CNt.forEach(t),VVr=r(tGe," \u2014 "),mee=n(tGe,"A",{href:!0});var wNt=s(mee);XVr=r(wNt,"FlaxMarianMTModel"),wNt.forEach(t),zVr=r(tGe," (Marian model)"),tGe.forEach(t),WVr=i(je),JC=n(je,"LI",{});var aGe=s(JC);S4e=n(aGe,"STRONG",{});var ANt=s(S4e);QVr=r(ANt,"mbart"),ANt.forEach(t),HVr=r(aGe," \u2014 "),gee=n(aGe,"A",{href:!0});var LNt=s(gee);UVr=r(LNt,"FlaxMBartForConditionalGeneration"),LNt.forEach(t),JVr=r(aGe," (mBART model)"),aGe.forEach(t),YVr=i(je),YC=n(je,"LI",{});var nGe=s(YC);R4e=n(nGe,"STRONG",{});var yNt=s(R4e);KVr=r(yNt,"mt5"),yNt.forEach(t),ZVr=r(nGe," \u2014 "),hee=n(nGe,"A",{href:!0});var xNt=s(hee);eXr=r(xNt,"FlaxMT5ForConditionalGeneration"),xNt.forEach(t),oXr=r(nGe," (MT5 model)"),nGe.forEach(t),rXr=i(je),KC=n(je,"LI",{});var sGe=s(KC);P4e=n(sGe,"STRONG",{});var $Nt=s(P4e);tXr=r($Nt,"pegasus"),$Nt.forEach(t),aXr=r(sGe," \u2014 "),pee=n(sGe,"A",{href:!0});var kNt=s(pee);nXr=r(kNt,"FlaxPegasusForConditionalGeneration"),kNt.forEach(t),sXr=r(sGe," (Pegasus model)"),sGe.forEach(t),lXr=i(je),ZC=n(je,"LI",{});var lGe=s(ZC);B4e=n(lGe,"STRONG",{});var SNt=s(B4e);iXr=r(SNt,"t5"),SNt.forEach(t),dXr=r(lGe," \u2014 "),_ee=n(lGe,"A",{href:!0});var RNt=s(_ee);cXr=r(RNt,"FlaxT5ForConditionalGeneration"),RNt.forEach(t),fXr=r(lGe," (T5 model)"),lGe.forEach(t),je.forEach(t),mXr=i(ii),T(e5.$$.fragment,ii),ii.forEach(t),li.forEach(t),jVe=i(f),nf=n(f,"H2",{class:!0});var Hze=s(nf);o5=n(Hze,"A",{id:!0,class:!0,href:!0});var PNt=s(o5);I4e=n(PNt,"SPAN",{});var BNt=s(I4e);T(n$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),gXr=i(Hze),N4e=n(Hze,"SPAN",{});var INt=s(N4e);hXr=r(INt,"FlaxAutoModelForSequenceClassification"),INt.forEach(t),Hze.forEach(t),DVe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(s$.$$.fragment,di),pXr=i(di),sf=n(di,"P",{});var ate=s(sf);_Xr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uee=n(ate,"A",{href:!0});var NNt=s(uee);uXr=r(NNt,"from_pretrained()"),NNt.forEach(t),bXr=r(ate," class method or the "),bee=n(ate,"A",{href:!0});var qNt=s(bee);vXr=r(qNt,"from_config()"),qNt.forEach(t),FXr=r(ate,` class
method.`),ate.forEach(t),TXr=i(di),l$=n(di,"P",{});var Uze=s(l$);MXr=r(Uze,"This class cannot be instantiated directly using "),q4e=n(Uze,"CODE",{});var jNt=s(q4e);EXr=r(jNt,"__init__()"),jNt.forEach(t),CXr=r(Uze," (throws an error)."),Uze.forEach(t),wXr=i(di),Jt=n(di,"DIV",{class:!0});var gA=s(Jt);T(i$.$$.fragment,gA),AXr=i(gA),j4e=n(gA,"P",{});var DNt=s(j4e);LXr=r(DNt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DNt.forEach(t),yXr=i(gA),lf=n(gA,"P",{});var nte=s(lf);xXr=r(nte,`Note:
Loading a model from its configuration file does `),D4e=n(nte,"STRONG",{});var GNt=s(D4e);$Xr=r(GNt,"not"),GNt.forEach(t),kXr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(nte,"A",{href:!0});var ONt=s(vee);SXr=r(ONt,"from_pretrained()"),ONt.forEach(t),RXr=r(nte," to load the model weights."),nte.forEach(t),PXr=i(gA),T(r5.$$.fragment,gA),gA.forEach(t),BXr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(d$.$$.fragment,ci),IXr=i(ci),G4e=n(ci,"P",{});var VNt=s(G4e);NXr=r(VNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VNt.forEach(t),qXr=i(ci),wn=n(ci,"P",{});var hA=s(wn);jXr=r(hA,"The model class to instantiate is selected based on the "),O4e=n(hA,"CODE",{});var XNt=s(O4e);DXr=r(XNt,"model_type"),XNt.forEach(t),GXr=r(hA,` property of the config object (either
passed as an argument or loaded from `),V4e=n(hA,"CODE",{});var zNt=s(V4e);OXr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),VXr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(hA,"CODE",{});var WNt=s(X4e);XXr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),zXr=r(hA,":"),hA.forEach(t),WXr=i(ci),Se=n(ci,"UL",{});var De=s(Se);t5=n(De,"LI",{});var iGe=s(t5);z4e=n(iGe,"STRONG",{});var QNt=s(z4e);QXr=r(QNt,"albert"),QNt.forEach(t),HXr=r(iGe," \u2014 "),Fee=n(iGe,"A",{href:!0});var HNt=s(Fee);UXr=r(HNt,"FlaxAlbertForSequenceClassification"),HNt.forEach(t),JXr=r(iGe," (ALBERT model)"),iGe.forEach(t),YXr=i(De),a5=n(De,"LI",{});var dGe=s(a5);W4e=n(dGe,"STRONG",{});var UNt=s(W4e);KXr=r(UNt,"bart"),UNt.forEach(t),ZXr=r(dGe," \u2014 "),Tee=n(dGe,"A",{href:!0});var JNt=s(Tee);ezr=r(JNt,"FlaxBartForSequenceClassification"),JNt.forEach(t),ozr=r(dGe," (BART model)"),dGe.forEach(t),rzr=i(De),n5=n(De,"LI",{});var cGe=s(n5);Q4e=n(cGe,"STRONG",{});var YNt=s(Q4e);tzr=r(YNt,"bert"),YNt.forEach(t),azr=r(cGe," \u2014 "),Mee=n(cGe,"A",{href:!0});var KNt=s(Mee);nzr=r(KNt,"FlaxBertForSequenceClassification"),KNt.forEach(t),szr=r(cGe," (BERT model)"),cGe.forEach(t),lzr=i(De),s5=n(De,"LI",{});var fGe=s(s5);H4e=n(fGe,"STRONG",{});var ZNt=s(H4e);izr=r(ZNt,"big_bird"),ZNt.forEach(t),dzr=r(fGe," \u2014 "),Eee=n(fGe,"A",{href:!0});var eqt=s(Eee);czr=r(eqt,"FlaxBigBirdForSequenceClassification"),eqt.forEach(t),fzr=r(fGe," (BigBird model)"),fGe.forEach(t),mzr=i(De),l5=n(De,"LI",{});var mGe=s(l5);U4e=n(mGe,"STRONG",{});var oqt=s(U4e);gzr=r(oqt,"distilbert"),oqt.forEach(t),hzr=r(mGe," \u2014 "),Cee=n(mGe,"A",{href:!0});var rqt=s(Cee);pzr=r(rqt,"FlaxDistilBertForSequenceClassification"),rqt.forEach(t),_zr=r(mGe," (DistilBERT model)"),mGe.forEach(t),uzr=i(De),i5=n(De,"LI",{});var gGe=s(i5);J4e=n(gGe,"STRONG",{});var tqt=s(J4e);bzr=r(tqt,"electra"),tqt.forEach(t),vzr=r(gGe," \u2014 "),wee=n(gGe,"A",{href:!0});var aqt=s(wee);Fzr=r(aqt,"FlaxElectraForSequenceClassification"),aqt.forEach(t),Tzr=r(gGe," (ELECTRA model)"),gGe.forEach(t),Mzr=i(De),d5=n(De,"LI",{});var hGe=s(d5);Y4e=n(hGe,"STRONG",{});var nqt=s(Y4e);Ezr=r(nqt,"mbart"),nqt.forEach(t),Czr=r(hGe," \u2014 "),Aee=n(hGe,"A",{href:!0});var sqt=s(Aee);wzr=r(sqt,"FlaxMBartForSequenceClassification"),sqt.forEach(t),Azr=r(hGe," (mBART model)"),hGe.forEach(t),Lzr=i(De),c5=n(De,"LI",{});var pGe=s(c5);K4e=n(pGe,"STRONG",{});var lqt=s(K4e);yzr=r(lqt,"roberta"),lqt.forEach(t),xzr=r(pGe," \u2014 "),Lee=n(pGe,"A",{href:!0});var iqt=s(Lee);$zr=r(iqt,"FlaxRobertaForSequenceClassification"),iqt.forEach(t),kzr=r(pGe," (RoBERTa model)"),pGe.forEach(t),Szr=i(De),f5=n(De,"LI",{});var _Ge=s(f5);Z4e=n(_Ge,"STRONG",{});var dqt=s(Z4e);Rzr=r(dqt,"roformer"),dqt.forEach(t),Pzr=r(_Ge," \u2014 "),yee=n(_Ge,"A",{href:!0});var cqt=s(yee);Bzr=r(cqt,"FlaxRoFormerForSequenceClassification"),cqt.forEach(t),Izr=r(_Ge," (RoFormer model)"),_Ge.forEach(t),Nzr=i(De),m5=n(De,"LI",{});var uGe=s(m5);eCe=n(uGe,"STRONG",{});var fqt=s(eCe);qzr=r(fqt,"xlm-roberta"),fqt.forEach(t),jzr=r(uGe," \u2014 "),xee=n(uGe,"A",{href:!0});var mqt=s(xee);Dzr=r(mqt,"FlaxXLMRobertaForSequenceClassification"),mqt.forEach(t),Gzr=r(uGe," (XLM-RoBERTa model)"),uGe.forEach(t),De.forEach(t),Ozr=i(ci),T(g5.$$.fragment,ci),ci.forEach(t),di.forEach(t),GVe=i(f),df=n(f,"H2",{class:!0});var Jze=s(df);h5=n(Jze,"A",{id:!0,class:!0,href:!0});var gqt=s(h5);oCe=n(gqt,"SPAN",{});var hqt=s(oCe);T(c$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),Vzr=i(Jze),rCe=n(Jze,"SPAN",{});var pqt=s(rCe);Xzr=r(pqt,"FlaxAutoModelForQuestionAnswering"),pqt.forEach(t),Jze.forEach(t),OVe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(f$.$$.fragment,fi),zzr=i(fi),cf=n(fi,"P",{});var ste=s(cf);Wzr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$ee=n(ste,"A",{href:!0});var _qt=s($ee);Qzr=r(_qt,"from_pretrained()"),_qt.forEach(t),Hzr=r(ste," class method or the "),kee=n(ste,"A",{href:!0});var uqt=s(kee);Uzr=r(uqt,"from_config()"),uqt.forEach(t),Jzr=r(ste,` class
method.`),ste.forEach(t),Yzr=i(fi),m$=n(fi,"P",{});var Yze=s(m$);Kzr=r(Yze,"This class cannot be instantiated directly using "),tCe=n(Yze,"CODE",{});var bqt=s(tCe);Zzr=r(bqt,"__init__()"),bqt.forEach(t),eWr=r(Yze," (throws an error)."),Yze.forEach(t),oWr=i(fi),Yt=n(fi,"DIV",{class:!0});var pA=s(Yt);T(g$.$$.fragment,pA),rWr=i(pA),aCe=n(pA,"P",{});var vqt=s(aCe);tWr=r(vqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vqt.forEach(t),aWr=i(pA),ff=n(pA,"P",{});var lte=s(ff);nWr=r(lte,`Note:
Loading a model from its configuration file does `),nCe=n(lte,"STRONG",{});var Fqt=s(nCe);sWr=r(Fqt,"not"),Fqt.forEach(t),lWr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(lte,"A",{href:!0});var Tqt=s(See);iWr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),dWr=r(lte," to load the model weights."),lte.forEach(t),cWr=i(pA),T(p5.$$.fragment,pA),pA.forEach(t),fWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(h$.$$.fragment,mi),mWr=i(mi),sCe=n(mi,"P",{});var Mqt=s(sCe);gWr=r(Mqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mqt.forEach(t),hWr=i(mi),An=n(mi,"P",{});var _A=s(An);pWr=r(_A,"The model class to instantiate is selected based on the "),lCe=n(_A,"CODE",{});var Eqt=s(lCe);_Wr=r(Eqt,"model_type"),Eqt.forEach(t),uWr=r(_A,` property of the config object (either
passed as an argument or loaded from `),iCe=n(_A,"CODE",{});var Cqt=s(iCe);bWr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),vWr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(_A,"CODE",{});var wqt=s(dCe);FWr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),TWr=r(_A,":"),_A.forEach(t),MWr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);_5=n(Ge,"LI",{});var bGe=s(_5);cCe=n(bGe,"STRONG",{});var Aqt=s(cCe);EWr=r(Aqt,"albert"),Aqt.forEach(t),CWr=r(bGe," \u2014 "),Ree=n(bGe,"A",{href:!0});var Lqt=s(Ree);wWr=r(Lqt,"FlaxAlbertForQuestionAnswering"),Lqt.forEach(t),AWr=r(bGe," (ALBERT model)"),bGe.forEach(t),LWr=i(Ge),u5=n(Ge,"LI",{});var vGe=s(u5);fCe=n(vGe,"STRONG",{});var yqt=s(fCe);yWr=r(yqt,"bart"),yqt.forEach(t),xWr=r(vGe," \u2014 "),Pee=n(vGe,"A",{href:!0});var xqt=s(Pee);$Wr=r(xqt,"FlaxBartForQuestionAnswering"),xqt.forEach(t),kWr=r(vGe," (BART model)"),vGe.forEach(t),SWr=i(Ge),b5=n(Ge,"LI",{});var FGe=s(b5);mCe=n(FGe,"STRONG",{});var $qt=s(mCe);RWr=r($qt,"bert"),$qt.forEach(t),PWr=r(FGe," \u2014 "),Bee=n(FGe,"A",{href:!0});var kqt=s(Bee);BWr=r(kqt,"FlaxBertForQuestionAnswering"),kqt.forEach(t),IWr=r(FGe," (BERT model)"),FGe.forEach(t),NWr=i(Ge),v5=n(Ge,"LI",{});var TGe=s(v5);gCe=n(TGe,"STRONG",{});var Sqt=s(gCe);qWr=r(Sqt,"big_bird"),Sqt.forEach(t),jWr=r(TGe," \u2014 "),Iee=n(TGe,"A",{href:!0});var Rqt=s(Iee);DWr=r(Rqt,"FlaxBigBirdForQuestionAnswering"),Rqt.forEach(t),GWr=r(TGe," (BigBird model)"),TGe.forEach(t),OWr=i(Ge),F5=n(Ge,"LI",{});var MGe=s(F5);hCe=n(MGe,"STRONG",{});var Pqt=s(hCe);VWr=r(Pqt,"distilbert"),Pqt.forEach(t),XWr=r(MGe," \u2014 "),Nee=n(MGe,"A",{href:!0});var Bqt=s(Nee);zWr=r(Bqt,"FlaxDistilBertForQuestionAnswering"),Bqt.forEach(t),WWr=r(MGe," (DistilBERT model)"),MGe.forEach(t),QWr=i(Ge),T5=n(Ge,"LI",{});var EGe=s(T5);pCe=n(EGe,"STRONG",{});var Iqt=s(pCe);HWr=r(Iqt,"electra"),Iqt.forEach(t),UWr=r(EGe," \u2014 "),qee=n(EGe,"A",{href:!0});var Nqt=s(qee);JWr=r(Nqt,"FlaxElectraForQuestionAnswering"),Nqt.forEach(t),YWr=r(EGe," (ELECTRA model)"),EGe.forEach(t),KWr=i(Ge),M5=n(Ge,"LI",{});var CGe=s(M5);_Ce=n(CGe,"STRONG",{});var qqt=s(_Ce);ZWr=r(qqt,"mbart"),qqt.forEach(t),eQr=r(CGe," \u2014 "),jee=n(CGe,"A",{href:!0});var jqt=s(jee);oQr=r(jqt,"FlaxMBartForQuestionAnswering"),jqt.forEach(t),rQr=r(CGe," (mBART model)"),CGe.forEach(t),tQr=i(Ge),E5=n(Ge,"LI",{});var wGe=s(E5);uCe=n(wGe,"STRONG",{});var Dqt=s(uCe);aQr=r(Dqt,"roberta"),Dqt.forEach(t),nQr=r(wGe," \u2014 "),Dee=n(wGe,"A",{href:!0});var Gqt=s(Dee);sQr=r(Gqt,"FlaxRobertaForQuestionAnswering"),Gqt.forEach(t),lQr=r(wGe," (RoBERTa model)"),wGe.forEach(t),iQr=i(Ge),C5=n(Ge,"LI",{});var AGe=s(C5);bCe=n(AGe,"STRONG",{});var Oqt=s(bCe);dQr=r(Oqt,"roformer"),Oqt.forEach(t),cQr=r(AGe," \u2014 "),Gee=n(AGe,"A",{href:!0});var Vqt=s(Gee);fQr=r(Vqt,"FlaxRoFormerForQuestionAnswering"),Vqt.forEach(t),mQr=r(AGe," (RoFormer model)"),AGe.forEach(t),gQr=i(Ge),w5=n(Ge,"LI",{});var LGe=s(w5);vCe=n(LGe,"STRONG",{});var Xqt=s(vCe);hQr=r(Xqt,"xlm-roberta"),Xqt.forEach(t),pQr=r(LGe," \u2014 "),Oee=n(LGe,"A",{href:!0});var zqt=s(Oee);_Qr=r(zqt,"FlaxXLMRobertaForQuestionAnswering"),zqt.forEach(t),uQr=r(LGe," (XLM-RoBERTa model)"),LGe.forEach(t),Ge.forEach(t),bQr=i(mi),T(A5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),VVe=i(f),mf=n(f,"H2",{class:!0});var Kze=s(mf);L5=n(Kze,"A",{id:!0,class:!0,href:!0});var Wqt=s(L5);FCe=n(Wqt,"SPAN",{});var Qqt=s(FCe);T(p$.$$.fragment,Qqt),Qqt.forEach(t),Wqt.forEach(t),vQr=i(Kze),TCe=n(Kze,"SPAN",{});var Hqt=s(TCe);FQr=r(Hqt,"FlaxAutoModelForTokenClassification"),Hqt.forEach(t),Kze.forEach(t),XVe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(_$.$$.fragment,gi),TQr=i(gi),gf=n(gi,"P",{});var ite=s(gf);MQr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vee=n(ite,"A",{href:!0});var Uqt=s(Vee);EQr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),CQr=r(ite," class method or the "),Xee=n(ite,"A",{href:!0});var Jqt=s(Xee);wQr=r(Jqt,"from_config()"),Jqt.forEach(t),AQr=r(ite,` class
method.`),ite.forEach(t),LQr=i(gi),u$=n(gi,"P",{});var Zze=s(u$);yQr=r(Zze,"This class cannot be instantiated directly using "),MCe=n(Zze,"CODE",{});var Yqt=s(MCe);xQr=r(Yqt,"__init__()"),Yqt.forEach(t),$Qr=r(Zze," (throws an error)."),Zze.forEach(t),kQr=i(gi),Kt=n(gi,"DIV",{class:!0});var uA=s(Kt);T(b$.$$.fragment,uA),SQr=i(uA),ECe=n(uA,"P",{});var Kqt=s(ECe);RQr=r(Kqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kqt.forEach(t),PQr=i(uA),hf=n(uA,"P",{});var dte=s(hf);BQr=r(dte,`Note:
Loading a model from its configuration file does `),CCe=n(dte,"STRONG",{});var Zqt=s(CCe);IQr=r(Zqt,"not"),Zqt.forEach(t),NQr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(dte,"A",{href:!0});var ejt=s(zee);qQr=r(ejt,"from_pretrained()"),ejt.forEach(t),jQr=r(dte," to load the model weights."),dte.forEach(t),DQr=i(uA),T(y5.$$.fragment,uA),uA.forEach(t),GQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(v$.$$.fragment,hi),OQr=i(hi),wCe=n(hi,"P",{});var ojt=s(wCe);VQr=r(ojt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ojt.forEach(t),XQr=i(hi),Ln=n(hi,"P",{});var bA=s(Ln);zQr=r(bA,"The model class to instantiate is selected based on the "),ACe=n(bA,"CODE",{});var rjt=s(ACe);WQr=r(rjt,"model_type"),rjt.forEach(t),QQr=r(bA,` property of the config object (either
passed as an argument or loaded from `),LCe=n(bA,"CODE",{});var tjt=s(LCe);HQr=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),UQr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(bA,"CODE",{});var ajt=s(yCe);JQr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),YQr=r(bA,":"),bA.forEach(t),KQr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);x5=n(To,"LI",{});var yGe=s(x5);xCe=n(yGe,"STRONG",{});var njt=s(xCe);ZQr=r(njt,"albert"),njt.forEach(t),eHr=r(yGe," \u2014 "),Wee=n(yGe,"A",{href:!0});var sjt=s(Wee);oHr=r(sjt,"FlaxAlbertForTokenClassification"),sjt.forEach(t),rHr=r(yGe," (ALBERT model)"),yGe.forEach(t),tHr=i(To),$5=n(To,"LI",{});var xGe=s($5);$Ce=n(xGe,"STRONG",{});var ljt=s($Ce);aHr=r(ljt,"bert"),ljt.forEach(t),nHr=r(xGe," \u2014 "),Qee=n(xGe,"A",{href:!0});var ijt=s(Qee);sHr=r(ijt,"FlaxBertForTokenClassification"),ijt.forEach(t),lHr=r(xGe," (BERT model)"),xGe.forEach(t),iHr=i(To),k5=n(To,"LI",{});var $Ge=s(k5);kCe=n($Ge,"STRONG",{});var djt=s(kCe);dHr=r(djt,"big_bird"),djt.forEach(t),cHr=r($Ge," \u2014 "),Hee=n($Ge,"A",{href:!0});var cjt=s(Hee);fHr=r(cjt,"FlaxBigBirdForTokenClassification"),cjt.forEach(t),mHr=r($Ge," (BigBird model)"),$Ge.forEach(t),gHr=i(To),S5=n(To,"LI",{});var kGe=s(S5);SCe=n(kGe,"STRONG",{});var fjt=s(SCe);hHr=r(fjt,"distilbert"),fjt.forEach(t),pHr=r(kGe," \u2014 "),Uee=n(kGe,"A",{href:!0});var mjt=s(Uee);_Hr=r(mjt,"FlaxDistilBertForTokenClassification"),mjt.forEach(t),uHr=r(kGe," (DistilBERT model)"),kGe.forEach(t),bHr=i(To),R5=n(To,"LI",{});var SGe=s(R5);RCe=n(SGe,"STRONG",{});var gjt=s(RCe);vHr=r(gjt,"electra"),gjt.forEach(t),FHr=r(SGe," \u2014 "),Jee=n(SGe,"A",{href:!0});var hjt=s(Jee);THr=r(hjt,"FlaxElectraForTokenClassification"),hjt.forEach(t),MHr=r(SGe," (ELECTRA model)"),SGe.forEach(t),EHr=i(To),P5=n(To,"LI",{});var RGe=s(P5);PCe=n(RGe,"STRONG",{});var pjt=s(PCe);CHr=r(pjt,"roberta"),pjt.forEach(t),wHr=r(RGe," \u2014 "),Yee=n(RGe,"A",{href:!0});var _jt=s(Yee);AHr=r(_jt,"FlaxRobertaForTokenClassification"),_jt.forEach(t),LHr=r(RGe," (RoBERTa model)"),RGe.forEach(t),yHr=i(To),B5=n(To,"LI",{});var PGe=s(B5);BCe=n(PGe,"STRONG",{});var ujt=s(BCe);xHr=r(ujt,"roformer"),ujt.forEach(t),$Hr=r(PGe," \u2014 "),Kee=n(PGe,"A",{href:!0});var bjt=s(Kee);kHr=r(bjt,"FlaxRoFormerForTokenClassification"),bjt.forEach(t),SHr=r(PGe," (RoFormer model)"),PGe.forEach(t),RHr=i(To),I5=n(To,"LI",{});var BGe=s(I5);ICe=n(BGe,"STRONG",{});var vjt=s(ICe);PHr=r(vjt,"xlm-roberta"),vjt.forEach(t),BHr=r(BGe," \u2014 "),Zee=n(BGe,"A",{href:!0});var Fjt=s(Zee);IHr=r(Fjt,"FlaxXLMRobertaForTokenClassification"),Fjt.forEach(t),NHr=r(BGe," (XLM-RoBERTa model)"),BGe.forEach(t),To.forEach(t),qHr=i(hi),T(N5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),zVe=i(f),pf=n(f,"H2",{class:!0});var eWe=s(pf);q5=n(eWe,"A",{id:!0,class:!0,href:!0});var Tjt=s(q5);NCe=n(Tjt,"SPAN",{});var Mjt=s(NCe);T(F$.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),jHr=i(eWe),qCe=n(eWe,"SPAN",{});var Ejt=s(qCe);DHr=r(Ejt,"FlaxAutoModelForMultipleChoice"),Ejt.forEach(t),eWe.forEach(t),WVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(T$.$$.fragment,pi),GHr=i(pi),_f=n(pi,"P",{});var cte=s(_f);OHr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eoe=n(cte,"A",{href:!0});var Cjt=s(eoe);VHr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),XHr=r(cte," class method or the "),ooe=n(cte,"A",{href:!0});var wjt=s(ooe);zHr=r(wjt,"from_config()"),wjt.forEach(t),WHr=r(cte,` class
method.`),cte.forEach(t),QHr=i(pi),M$=n(pi,"P",{});var oWe=s(M$);HHr=r(oWe,"This class cannot be instantiated directly using "),jCe=n(oWe,"CODE",{});var Ajt=s(jCe);UHr=r(Ajt,"__init__()"),Ajt.forEach(t),JHr=r(oWe," (throws an error)."),oWe.forEach(t),YHr=i(pi),Zt=n(pi,"DIV",{class:!0});var vA=s(Zt);T(E$.$$.fragment,vA),KHr=i(vA),DCe=n(vA,"P",{});var Ljt=s(DCe);ZHr=r(Ljt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ljt.forEach(t),eUr=i(vA),uf=n(vA,"P",{});var fte=s(uf);oUr=r(fte,`Note:
Loading a model from its configuration file does `),GCe=n(fte,"STRONG",{});var yjt=s(GCe);rUr=r(yjt,"not"),yjt.forEach(t),tUr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(fte,"A",{href:!0});var xjt=s(roe);aUr=r(xjt,"from_pretrained()"),xjt.forEach(t),nUr=r(fte," to load the model weights."),fte.forEach(t),sUr=i(vA),T(j5.$$.fragment,vA),vA.forEach(t),lUr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(C$.$$.fragment,_i),iUr=i(_i),OCe=n(_i,"P",{});var $jt=s(OCe);dUr=r($jt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$jt.forEach(t),cUr=i(_i),yn=n(_i,"P",{});var FA=s(yn);fUr=r(FA,"The model class to instantiate is selected based on the "),VCe=n(FA,"CODE",{});var kjt=s(VCe);mUr=r(kjt,"model_type"),kjt.forEach(t),gUr=r(FA,` property of the config object (either
passed as an argument or loaded from `),XCe=n(FA,"CODE",{});var Sjt=s(XCe);hUr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),pUr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(FA,"CODE",{});var Rjt=s(zCe);_Ur=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),uUr=r(FA,":"),FA.forEach(t),bUr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);D5=n(Mo,"LI",{});var IGe=s(D5);WCe=n(IGe,"STRONG",{});var Pjt=s(WCe);vUr=r(Pjt,"albert"),Pjt.forEach(t),FUr=r(IGe," \u2014 "),toe=n(IGe,"A",{href:!0});var Bjt=s(toe);TUr=r(Bjt,"FlaxAlbertForMultipleChoice"),Bjt.forEach(t),MUr=r(IGe," (ALBERT model)"),IGe.forEach(t),EUr=i(Mo),G5=n(Mo,"LI",{});var NGe=s(G5);QCe=n(NGe,"STRONG",{});var Ijt=s(QCe);CUr=r(Ijt,"bert"),Ijt.forEach(t),wUr=r(NGe," \u2014 "),aoe=n(NGe,"A",{href:!0});var Njt=s(aoe);AUr=r(Njt,"FlaxBertForMultipleChoice"),Njt.forEach(t),LUr=r(NGe," (BERT model)"),NGe.forEach(t),yUr=i(Mo),O5=n(Mo,"LI",{});var qGe=s(O5);HCe=n(qGe,"STRONG",{});var qjt=s(HCe);xUr=r(qjt,"big_bird"),qjt.forEach(t),$Ur=r(qGe," \u2014 "),noe=n(qGe,"A",{href:!0});var jjt=s(noe);kUr=r(jjt,"FlaxBigBirdForMultipleChoice"),jjt.forEach(t),SUr=r(qGe," (BigBird model)"),qGe.forEach(t),RUr=i(Mo),V5=n(Mo,"LI",{});var jGe=s(V5);UCe=n(jGe,"STRONG",{});var Djt=s(UCe);PUr=r(Djt,"distilbert"),Djt.forEach(t),BUr=r(jGe," \u2014 "),soe=n(jGe,"A",{href:!0});var Gjt=s(soe);IUr=r(Gjt,"FlaxDistilBertForMultipleChoice"),Gjt.forEach(t),NUr=r(jGe," (DistilBERT model)"),jGe.forEach(t),qUr=i(Mo),X5=n(Mo,"LI",{});var DGe=s(X5);JCe=n(DGe,"STRONG",{});var Ojt=s(JCe);jUr=r(Ojt,"electra"),Ojt.forEach(t),DUr=r(DGe," \u2014 "),loe=n(DGe,"A",{href:!0});var Vjt=s(loe);GUr=r(Vjt,"FlaxElectraForMultipleChoice"),Vjt.forEach(t),OUr=r(DGe," (ELECTRA model)"),DGe.forEach(t),VUr=i(Mo),z5=n(Mo,"LI",{});var GGe=s(z5);YCe=n(GGe,"STRONG",{});var Xjt=s(YCe);XUr=r(Xjt,"roberta"),Xjt.forEach(t),zUr=r(GGe," \u2014 "),ioe=n(GGe,"A",{href:!0});var zjt=s(ioe);WUr=r(zjt,"FlaxRobertaForMultipleChoice"),zjt.forEach(t),QUr=r(GGe," (RoBERTa model)"),GGe.forEach(t),HUr=i(Mo),W5=n(Mo,"LI",{});var OGe=s(W5);KCe=n(OGe,"STRONG",{});var Wjt=s(KCe);UUr=r(Wjt,"roformer"),Wjt.forEach(t),JUr=r(OGe," \u2014 "),doe=n(OGe,"A",{href:!0});var Qjt=s(doe);YUr=r(Qjt,"FlaxRoFormerForMultipleChoice"),Qjt.forEach(t),KUr=r(OGe," (RoFormer model)"),OGe.forEach(t),ZUr=i(Mo),Q5=n(Mo,"LI",{});var VGe=s(Q5);ZCe=n(VGe,"STRONG",{});var Hjt=s(ZCe);eJr=r(Hjt,"xlm-roberta"),Hjt.forEach(t),oJr=r(VGe," \u2014 "),coe=n(VGe,"A",{href:!0});var Ujt=s(coe);rJr=r(Ujt,"FlaxXLMRobertaForMultipleChoice"),Ujt.forEach(t),tJr=r(VGe," (XLM-RoBERTa model)"),VGe.forEach(t),Mo.forEach(t),aJr=i(_i),T(H5.$$.fragment,_i),_i.forEach(t),pi.forEach(t),QVe=i(f),bf=n(f,"H2",{class:!0});var rWe=s(bf);U5=n(rWe,"A",{id:!0,class:!0,href:!0});var Jjt=s(U5);e5e=n(Jjt,"SPAN",{});var Yjt=s(e5e);T(w$.$$.fragment,Yjt),Yjt.forEach(t),Jjt.forEach(t),nJr=i(rWe),o5e=n(rWe,"SPAN",{});var Kjt=s(o5e);sJr=r(Kjt,"FlaxAutoModelForNextSentencePrediction"),Kjt.forEach(t),rWe.forEach(t),HVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(A$.$$.fragment,ui),lJr=i(ui),vf=n(ui,"P",{});var mte=s(vf);iJr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),foe=n(mte,"A",{href:!0});var Zjt=s(foe);dJr=r(Zjt,"from_pretrained()"),Zjt.forEach(t),cJr=r(mte," class method or the "),moe=n(mte,"A",{href:!0});var eDt=s(moe);fJr=r(eDt,"from_config()"),eDt.forEach(t),mJr=r(mte,` class
method.`),mte.forEach(t),gJr=i(ui),L$=n(ui,"P",{});var tWe=s(L$);hJr=r(tWe,"This class cannot be instantiated directly using "),r5e=n(tWe,"CODE",{});var oDt=s(r5e);pJr=r(oDt,"__init__()"),oDt.forEach(t),_Jr=r(tWe," (throws an error)."),tWe.forEach(t),uJr=i(ui),ea=n(ui,"DIV",{class:!0});var TA=s(ea);T(y$.$$.fragment,TA),bJr=i(TA),t5e=n(TA,"P",{});var rDt=s(t5e);vJr=r(rDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rDt.forEach(t),FJr=i(TA),Ff=n(TA,"P",{});var gte=s(Ff);TJr=r(gte,`Note:
Loading a model from its configuration file does `),a5e=n(gte,"STRONG",{});var tDt=s(a5e);MJr=r(tDt,"not"),tDt.forEach(t),EJr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(gte,"A",{href:!0});var aDt=s(goe);CJr=r(aDt,"from_pretrained()"),aDt.forEach(t),wJr=r(gte," to load the model weights."),gte.forEach(t),AJr=i(TA),T(J5.$$.fragment,TA),TA.forEach(t),LJr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(x$.$$.fragment,bi),yJr=i(bi),n5e=n(bi,"P",{});var nDt=s(n5e);xJr=r(nDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nDt.forEach(t),$Jr=i(bi),xn=n(bi,"P",{});var MA=s(xn);kJr=r(MA,"The model class to instantiate is selected based on the "),s5e=n(MA,"CODE",{});var sDt=s(s5e);SJr=r(sDt,"model_type"),sDt.forEach(t),RJr=r(MA,` property of the config object (either
passed as an argument or loaded from `),l5e=n(MA,"CODE",{});var lDt=s(l5e);PJr=r(lDt,"pretrained_model_name_or_path"),lDt.forEach(t),BJr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(MA,"CODE",{});var iDt=s(i5e);IJr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),NJr=r(MA,":"),MA.forEach(t),qJr=i(bi),d5e=n(bi,"UL",{});var dDt=s(d5e);Y5=n(dDt,"LI",{});var XGe=s(Y5);c5e=n(XGe,"STRONG",{});var cDt=s(c5e);jJr=r(cDt,"bert"),cDt.forEach(t),DJr=r(XGe," \u2014 "),hoe=n(XGe,"A",{href:!0});var fDt=s(hoe);GJr=r(fDt,"FlaxBertForNextSentencePrediction"),fDt.forEach(t),OJr=r(XGe," (BERT model)"),XGe.forEach(t),dDt.forEach(t),VJr=i(bi),T(K5.$$.fragment,bi),bi.forEach(t),ui.forEach(t),UVe=i(f),Tf=n(f,"H2",{class:!0});var aWe=s(Tf);Z5=n(aWe,"A",{id:!0,class:!0,href:!0});var mDt=s(Z5);f5e=n(mDt,"SPAN",{});var gDt=s(f5e);T($$.$$.fragment,gDt),gDt.forEach(t),mDt.forEach(t),XJr=i(aWe),m5e=n(aWe,"SPAN",{});var hDt=s(m5e);zJr=r(hDt,"FlaxAutoModelForImageClassification"),hDt.forEach(t),aWe.forEach(t),JVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(k$.$$.fragment,vi),WJr=i(vi),Mf=n(vi,"P",{});var hte=s(Mf);QJr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),poe=n(hte,"A",{href:!0});var pDt=s(poe);HJr=r(pDt,"from_pretrained()"),pDt.forEach(t),UJr=r(hte," class method or the "),_oe=n(hte,"A",{href:!0});var _Dt=s(_oe);JJr=r(_Dt,"from_config()"),_Dt.forEach(t),YJr=r(hte,` class
method.`),hte.forEach(t),KJr=i(vi),S$=n(vi,"P",{});var nWe=s(S$);ZJr=r(nWe,"This class cannot be instantiated directly using "),g5e=n(nWe,"CODE",{});var uDt=s(g5e);eYr=r(uDt,"__init__()"),uDt.forEach(t),oYr=r(nWe," (throws an error)."),nWe.forEach(t),rYr=i(vi),oa=n(vi,"DIV",{class:!0});var EA=s(oa);T(R$.$$.fragment,EA),tYr=i(EA),h5e=n(EA,"P",{});var bDt=s(h5e);aYr=r(bDt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bDt.forEach(t),nYr=i(EA),Ef=n(EA,"P",{});var pte=s(Ef);sYr=r(pte,`Note:
Loading a model from its configuration file does `),p5e=n(pte,"STRONG",{});var vDt=s(p5e);lYr=r(vDt,"not"),vDt.forEach(t),iYr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(pte,"A",{href:!0});var FDt=s(uoe);dYr=r(FDt,"from_pretrained()"),FDt.forEach(t),cYr=r(pte," to load the model weights."),pte.forEach(t),fYr=i(EA),T(e3.$$.fragment,EA),EA.forEach(t),mYr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(P$.$$.fragment,Fi),gYr=i(Fi),_5e=n(Fi,"P",{});var TDt=s(_5e);hYr=r(TDt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TDt.forEach(t),pYr=i(Fi),$n=n(Fi,"P",{});var CA=s($n);_Yr=r(CA,"The model class to instantiate is selected based on the "),u5e=n(CA,"CODE",{});var MDt=s(u5e);uYr=r(MDt,"model_type"),MDt.forEach(t),bYr=r(CA,` property of the config object (either
passed as an argument or loaded from `),b5e=n(CA,"CODE",{});var EDt=s(b5e);vYr=r(EDt,"pretrained_model_name_or_path"),EDt.forEach(t),FYr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(CA,"CODE",{});var CDt=s(v5e);TYr=r(CDt,"pretrained_model_name_or_path"),CDt.forEach(t),MYr=r(CA,":"),CA.forEach(t),EYr=i(Fi),B$=n(Fi,"UL",{});var sWe=s(B$);o3=n(sWe,"LI",{});var zGe=s(o3);F5e=n(zGe,"STRONG",{});var wDt=s(F5e);CYr=r(wDt,"beit"),wDt.forEach(t),wYr=r(zGe," \u2014 "),boe=n(zGe,"A",{href:!0});var ADt=s(boe);AYr=r(ADt,"FlaxBeitForImageClassification"),ADt.forEach(t),LYr=r(zGe," (BEiT model)"),zGe.forEach(t),yYr=i(sWe),r3=n(sWe,"LI",{});var WGe=s(r3);T5e=n(WGe,"STRONG",{});var LDt=s(T5e);xYr=r(LDt,"vit"),LDt.forEach(t),$Yr=r(WGe," \u2014 "),voe=n(WGe,"A",{href:!0});var yDt=s(voe);kYr=r(yDt,"FlaxViTForImageClassification"),yDt.forEach(t),SYr=r(WGe," (ViT model)"),WGe.forEach(t),sWe.forEach(t),RYr=i(Fi),T(t3.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),YVe=i(f),Cf=n(f,"H2",{class:!0});var lWe=s(Cf);a3=n(lWe,"A",{id:!0,class:!0,href:!0});var xDt=s(a3);M5e=n(xDt,"SPAN",{});var $Dt=s(M5e);T(I$.$$.fragment,$Dt),$Dt.forEach(t),xDt.forEach(t),PYr=i(lWe),E5e=n(lWe,"SPAN",{});var kDt=s(E5e);BYr=r(kDt,"FlaxAutoModelForVision2Seq"),kDt.forEach(t),lWe.forEach(t),KVe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(N$.$$.fragment,Ti),IYr=i(Ti),wf=n(Ti,"P",{});var _te=s(wf);NYr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Foe=n(_te,"A",{href:!0});var SDt=s(Foe);qYr=r(SDt,"from_pretrained()"),SDt.forEach(t),jYr=r(_te," class method or the "),Toe=n(_te,"A",{href:!0});var RDt=s(Toe);DYr=r(RDt,"from_config()"),RDt.forEach(t),GYr=r(_te,` class
method.`),_te.forEach(t),OYr=i(Ti),q$=n(Ti,"P",{});var iWe=s(q$);VYr=r(iWe,"This class cannot be instantiated directly using "),C5e=n(iWe,"CODE",{});var PDt=s(C5e);XYr=r(PDt,"__init__()"),PDt.forEach(t),zYr=r(iWe," (throws an error)."),iWe.forEach(t),WYr=i(Ti),ra=n(Ti,"DIV",{class:!0});var wA=s(ra);T(j$.$$.fragment,wA),QYr=i(wA),w5e=n(wA,"P",{});var BDt=s(w5e);HYr=r(BDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BDt.forEach(t),UYr=i(wA),Af=n(wA,"P",{});var ute=s(Af);JYr=r(ute,`Note:
Loading a model from its configuration file does `),A5e=n(ute,"STRONG",{});var IDt=s(A5e);YYr=r(IDt,"not"),IDt.forEach(t),KYr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(ute,"A",{href:!0});var NDt=s(Moe);ZYr=r(NDt,"from_pretrained()"),NDt.forEach(t),eKr=r(ute," to load the model weights."),ute.forEach(t),oKr=i(wA),T(n3.$$.fragment,wA),wA.forEach(t),rKr=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(D$.$$.fragment,Mi),tKr=i(Mi),L5e=n(Mi,"P",{});var qDt=s(L5e);aKr=r(qDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qDt.forEach(t),nKr=i(Mi),kn=n(Mi,"P",{});var AA=s(kn);sKr=r(AA,"The model class to instantiate is selected based on the "),y5e=n(AA,"CODE",{});var jDt=s(y5e);lKr=r(jDt,"model_type"),jDt.forEach(t),iKr=r(AA,` property of the config object (either
passed as an argument or loaded from `),x5e=n(AA,"CODE",{});var DDt=s(x5e);dKr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),cKr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(AA,"CODE",{});var GDt=s($5e);fKr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),mKr=r(AA,":"),AA.forEach(t),gKr=i(Mi),k5e=n(Mi,"UL",{});var ODt=s(k5e);s3=n(ODt,"LI",{});var QGe=s(s3);S5e=n(QGe,"STRONG",{});var VDt=s(S5e);hKr=r(VDt,"vision-encoder-decoder"),VDt.forEach(t),pKr=r(QGe," \u2014 "),Eoe=n(QGe,"A",{href:!0});var XDt=s(Eoe);_Kr=r(XDt,"FlaxVisionEncoderDecoderModel"),XDt.forEach(t),uKr=r(QGe," (Vision Encoder decoder model)"),QGe.forEach(t),ODt.forEach(t),bKr=i(Mi),T(l3.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(JOt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(Pf,"id","extending-the-auto-classes"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(If,"id","transformers.AutoConfig"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(fS,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(mS,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig"),c(gS,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig"),c(hS,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig"),c(pS,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig"),c(_S,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(uS,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig"),c(bS,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(vS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(FS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(TS,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig"),c(MS,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig"),c(ES,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig"),c(CS,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig"),c(wS,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig"),c(AS,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig"),c(LS,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig"),c(yS,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig"),c(xS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c($S,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(kS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(SS,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig"),c(RS,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(PS,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(BS,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig"),c(IS,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig"),c(NS,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig"),c(qS,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig"),c(jS,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig"),c(DS,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig"),c(GS,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(OS,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig"),c(VS,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig"),c(XS,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig"),c(zS,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig"),c(WS,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig"),c(QS,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig"),c(HS,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config"),c(US,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(JS,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(YS,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig"),c(KS,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig"),c(ZS,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig"),c(eR,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(oR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(rR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(tR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(aR,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig"),c(nR,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig"),c(sR,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig"),c(lR,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config"),c(iR,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig"),c(dR,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig"),c(cR,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config"),c(fR,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig"),c(mR,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gR,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig"),c(hR,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig"),c(pR,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(_R,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(uR,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig"),c(bR,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config"),c(vR,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig"),c(FR,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(TR,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(MR,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig"),c(ER,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig"),c(CR,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig"),c(wR,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig"),c(AR,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(LR,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(yR,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(xR,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagConfig"),c($R,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmConfig"),c(kR,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig"),c(SR,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig"),c(RR,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig"),c(PR,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig"),c(BR,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig"),c(IR,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig"),c(NR,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig"),c(qR,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig"),c(jR,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig"),c(DR,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig"),c(GR,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(OR,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(VR,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(XR,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig"),c(zR,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(WR,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig"),c(QR,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config"),c(HR,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig"),c(UR,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(JR,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(YR,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig"),c(KR,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ZR,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eP,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig"),c(oP,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig"),c(rP,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tP,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aP,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nP,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig"),c(sP,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lP,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iP,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(dP,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig"),c(cP,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig"),c(fP,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig"),c(mP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(gP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(hP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(pP,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig"),c(_P,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig"),c(uP,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c(bP,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(vP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(FP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizer"),c(MP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizerFast"),c(EP,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizer"),c(CP,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(wP,"href","/docs/transformers/pr_17806/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(AP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(xP,"href","/docs/transformers/pr_17806/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c($P,"href","/docs/transformers/pr_17806/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(kP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(SP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(RP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(PP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(IP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(NP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qP,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(jP,"href","/docs/transformers/pr_17806/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(DP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizer"),c(GP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineTokenizer"),c(VP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizer"),c(XP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(zP,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(WP,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizer"),c(HP,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(UP,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(JP,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YP,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KP,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ZP,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(oB,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(rB,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(tB,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(nB,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(sB,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizer"),c(lB,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(iB,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(dB,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizer"),c(cB,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(fB,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(mB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizer"),c(gB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(hB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_B,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bB,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(vB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TB,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MB,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($B,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(kB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(SB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizer"),c(BB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizerFast"),c(IB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizer"),c(NB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(jB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(DB,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeTokenizer"),c(GB,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(OB,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XB,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianTokenizer"),c(zB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizer"),c(WB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(QB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(HB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(UB,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(JB,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(YB,"href","/docs/transformers/pr_17806/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KB,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZB,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(eI,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(oI,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(tI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(aI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(lI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(dI,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(cI,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fI,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mI,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gI,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(hI,"href","/docs/transformers/pr_17806/en/model_doc/phobert#transformers.PhobertTokenizer"),c(pI,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_I,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(bI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(vI,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagTokenizer"),c(FI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizer"),c(TI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizerFast"),c(MI,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizer"),c(EI,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(CI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizer"),c(wI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(AI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(LI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($I,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(kI,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(SI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(RI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(PI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizer"),c(BI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(II,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(NI,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(jI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(DI,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasTokenizer"),c(GI,"href","/docs/transformers/pr_17806/en/model_doc/tapex#transformers.TapexTokenizer"),c(OI,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(VI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(XI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(zI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(QI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JI,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YI,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KI,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZI,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eN,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oN,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rN,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tN,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aN,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nN,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sN,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(lN,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(iN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TN,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(CN,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($N,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DN,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoProcessor"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(GN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ON,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPProcessor"),c(VN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(zN,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(WN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(UN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(JN,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRProcessor"),c(YN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZN,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltProcessor"),c(eq,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(oq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModel"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(aq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lq,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel"),c(iq,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel"),c(dq,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel"),c(cq,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(fq,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mq,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel"),c(gq,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(_q,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel"),c(uq,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel"),c(bq,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel"),c(vq,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel"),c(Fq,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel"),c(Tq,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel"),c(Mq,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel"),c(Eq,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel"),c(Cq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(wq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Aq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Lq,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel"),c(yq,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(xq,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c($q,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel"),c(kq,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel"),c(Sq,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel"),c(Rq,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Pq,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel"),c(Bq,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel"),c(Iq,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel"),c(Nq,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel"),c(qq,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel"),c(jq,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel"),c(Dq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel"),c(Gq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Oq,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel"),c(Vq,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model"),c(Xq,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(zq,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Wq,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel"),c(Qq,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel"),c(Hq,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel"),c(Uq,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Jq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Yq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Kq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Zq,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel"),c(ej,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel"),c(oj,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel"),c(rj,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model"),c(tj,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel"),c(aj,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel"),c(nj,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model"),c(sj,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel"),c(lj,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ij,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel"),c(dj,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel"),c(cj,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fj,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mj,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel"),c(gj,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model"),c(hj,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaModel"),c(pj,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_j,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uj,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel"),c(bj,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel"),c(vj,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel"),c(Fj,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel"),c(Tj,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Mj,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Ej,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Cj,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel"),c(wj,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel"),c(Aj,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel"),c(Lj,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel"),c(yj,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(xj,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel"),c($j,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel"),c(kj,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel"),c(Sj,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel"),c(Rj,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel"),c(Pj,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Bj,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel"),c(Ij,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Nj,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel"),c(qj,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model"),c(jj,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel"),c(Dj,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Gj,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Oj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Vj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Xj,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel"),c(zj,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel"),c(Wj,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Qj,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Hj,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel"),c(Uj,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Jj,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Yj,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Kj,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel"),c(Zj,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel"),c(eD,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel"),c(oD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(rD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(tD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(aD,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel"),c(nD,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel"),c(sD,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Su,"id","transformers.AutoModelForPreTraining"),c(Su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Su,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(lD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cD,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining"),c(fD,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining"),c(gD,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(hD,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(pD,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uD,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bD,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FD,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining"),c(MD,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining"),c(CD,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining"),c(wD,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(LD,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yD,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($D,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(SD,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(RD,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(PD,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BD,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(ID,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ND,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(qD,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(DD,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VD,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XD,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(zD,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(WD,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(QD,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(HD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(UD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(JD,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(KD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForCausalLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(eG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM"),c(aG,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel"),c(nG,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(sG,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(lG,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(iG,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(dG,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(cG,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fG,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(mG,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gG,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(hG,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM"),c(pG,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_G,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(uG,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(bG,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(vG,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM"),c(FG,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM"),c(TG,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(MG,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EG,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM"),c(CG,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wG,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AG,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LG,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(yG,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xG,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($G,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kG,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SG,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RG,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PG,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(BG,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(IG,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(qG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DG,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h2,"id","transformers.AutoModelForMaskedLM"),c(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h2,"href","#transformers.AutoModelForMaskedLM"),c(Wi,"class","relative group"),c(GG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zG,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HG,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UG,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YG,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KG,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oO,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rO,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tO,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aO,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sO,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lO,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM"),c(iO,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cO,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mO,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(gO,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(hO,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(pO,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_O,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uO,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(bO,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vO,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(FO,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MO,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(CO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wO,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ob,"id","transformers.AutoModelForSeq2SeqLM"),c(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ob,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(AO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(PO,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel"),c(jO,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSequenceClassification"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(WO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c($V,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForMultipleChoice"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(XV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForNextSentencePrediction"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(EX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(LX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(yX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(xX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c($X,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(kX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.AutoModelForTokenClassification"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(SX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification"),c(NX,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(qX,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(jX,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(DX,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification"),c(GX,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(VX,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(zX,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(QX,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(HX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(UX,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(JX,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(YX,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(KX,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ez,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(oz,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(rz,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(az,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nz,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(sz,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lz,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iz,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dz,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cz,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fz,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mz,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gz,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hz,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pz,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_z,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.AutoModelForQuestionAnswering"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(uz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Pz,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sW,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForTableQuestionAnswering"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForImageClassification"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c(fW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification"),c(pW,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_W,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification"),c(uW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bW,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vW,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TW,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification"),c(MW,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(EW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AW,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LW,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yW,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xW,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($W,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification"),c(kW,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification"),c(SW,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForVision2Seq"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(NW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForAudioClassification"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S6,"id","transformers.AutoModelForAudioFrameClassification"),c(S6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S6,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(sQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForCTC"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fQ,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC"),c(mQ,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC"),c(gQ,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC"),c(hQ,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_Q,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(CQ,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForAudioXVector"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($Q,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(SQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForMaskedImageModeling"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(NQ,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qQ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForObjectDetection"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection"),c(VQ,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForImageSegmentation"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForSemanticSegmentation"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(KQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(ZQ,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eH,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForInstanceSegmentation"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModel"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(nH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel"),c(dH,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel"),c(cH,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel"),c(fH,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(mH,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(gH,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel"),c(hH,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel"),c(pH,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel"),c(_H,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel"),c(uH,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bH,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(vH,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel"),c(FH,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TH,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel"),c(MH,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(EH,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(CH,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel"),c(wH,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(AH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel"),c(LH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yH,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model"),c(xH,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel"),c($H,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel"),c(kH,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(SH,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel"),c(RH,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel"),c(PH,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BH,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel"),c(IH,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel"),c(NH,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qH,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jH,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model"),c(DH,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(GH,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel"),c(OH,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VH,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel"),c(XH,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel"),c(zH,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel"),c(WH,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(QH,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel"),c(HH,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model"),c(UH,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel"),c(JH,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YH,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel"),c(KH,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZH,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel"),c(oU,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.TFAutoModelForPreTraining"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lU,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cU,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fU,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mU,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gU,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hU,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pU,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_U,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uU,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bU,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vU,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FU,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MU,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EU,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wU,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LU,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p8,"id","transformers.TFAutoModelForCausalLM"),c(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p8,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(xU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PU,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BU,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IU,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(NU,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qU,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(jU,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GU,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k8,"id","transformers.TFAutoModelForImageClassification"),c(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k8,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UU,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(JU,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(YU,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(KU,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(ZU,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q8,"id","transformers.TFAutoModelForMaskedLM"),c(q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q8,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_J,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($J,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel"),c(SJ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForSequenceClassification"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForMultipleChoice"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(fY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(kY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(BY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForTokenClassification"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zY,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(WY,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(QY,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HY,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YY,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eK,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oK,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tK,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sK,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lK,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iK,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForQuestionAnswering"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TK,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($K,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForVision2Seq"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(SK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.FlaxAutoModel"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XK,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel"),c(zK,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel"),c(WK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel"),c(QK,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HK,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UK,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JK,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YK,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KK,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZK,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oZ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(rZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(tZ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel"),c(aZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nZ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model"),c(sZ,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel"),c(lZ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model"),c(fZ,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mZ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel"),c(gZ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hZ,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pZ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForCausalLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(FZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(TZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(MZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(EZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(CZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wZ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(AZ,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(LZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yZ,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForPreTraining"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(xZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Z,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(BZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(NZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jZ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(GZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(OZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(XZ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForMaskedLM"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(zZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KZ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ree,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rf,"class","relative group"),c(aee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iee,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(cee,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(fee,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(mee,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hee,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pee,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nf,"class","relative group"),c(uee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(yee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(df,"class","relative group"),c($ee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Pee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Bee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Iee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Nee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Dee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Gee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForTokenClassification"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mf,"class","relative group"),c(Vee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Qee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Uee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Jee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Yee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Kee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Zee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(pf,"class","relative group"),c(eoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ooe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(roe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(toe,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aoe,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(noe,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(soe,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(loe,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ioe,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(doe,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(coe,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bf,"class","relative group"),c(foe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(moe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(goe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hoe,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForImageClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tf,"class","relative group"),c(poe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(voe,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForVision2Seq"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cf,"class","relative group"),c(Foe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ei),b(f,$f,u),b(f,nt,u),e(nt,Ci),e(nt,wi),e(wi,LA),e(nt,kf),b(f,Oe,u),b(f,We,u),e(We,Ai),e(We,Rn),e(Rn,yA),e(We,Pn),e(We,Bn),e(Bn,xA),e(We,Li),e(We,In),e(In,$A),e(We,yi),b(f,Sf,u),M($a,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,nS),e(Ae,xi),e(xi,sS),e(Ae,lS),b(f,Co,u),b(f,ka,u),e(ka,iS),e(ka,Rf),e(Rf,dS),e(ka,dWe),b(f,HGe,u),b(f,$i,u),e($i,Pf),e(Pf,bte),M(kA,bte,null),e($i,cWe),e($i,vte),e(vte,fWe),b(f,UGe,u),b(f,Nn,u),e(Nn,mWe),e(Nn,Fte),e(Fte,gWe),e(Nn,hWe),e(Nn,Tte),e(Tte,pWe),e(Nn,_We),b(f,JGe,u),M(SA,f,u),b(f,YGe,u),b(f,cS,u),e(cS,uWe),b(f,KGe,u),M(Bf,f,u),b(f,ZGe,u),b(f,ki,u),e(ki,If),e(If,Mte),M(RA,Mte,null),e(ki,bWe),e(ki,Ete),e(Ete,vWe),b(f,eOe,u),b(f,wo,u),M(PA,wo,null),e(wo,FWe),e(wo,BA),e(BA,TWe),e(BA,fS),e(fS,MWe),e(BA,EWe),e(wo,CWe),e(wo,IA),e(IA,wWe),e(IA,Cte),e(Cte,AWe),e(IA,LWe),e(wo,yWe),e(wo,Ar),M(NA,Ar,null),e(Ar,xWe),e(Ar,wte),e(wte,$We),e(Ar,kWe),e(Ar,Si),e(Si,SWe),e(Si,Ate),e(Ate,RWe),e(Si,PWe),e(Si,Lte),e(Lte,BWe),e(Si,IWe),e(Ar,NWe),e(Ar,A),e(A,Nf),e(Nf,yte),e(yte,qWe),e(Nf,jWe),e(Nf,mS),e(mS,DWe),e(Nf,GWe),e(A,OWe),e(A,qf),e(qf,xte),e(xte,VWe),e(qf,XWe),e(qf,gS),e(gS,zWe),e(qf,WWe),e(A,QWe),e(A,jf),e(jf,$te),e($te,HWe),e(jf,UWe),e(jf,hS),e(hS,JWe),e(jf,YWe),e(A,KWe),e(A,Df),e(Df,kte),e(kte,ZWe),e(Df,eQe),e(Df,pS),e(pS,oQe),e(Df,rQe),e(A,tQe),e(A,Gf),e(Gf,Ste),e(Ste,aQe),e(Gf,nQe),e(Gf,_S),e(_S,sQe),e(Gf,lQe),e(A,iQe),e(A,Of),e(Of,Rte),e(Rte,dQe),e(Of,cQe),e(Of,uS),e(uS,fQe),e(Of,mQe),e(A,gQe),e(A,Vf),e(Vf,Pte),e(Pte,hQe),e(Vf,pQe),e(Vf,bS),e(bS,_Qe),e(Vf,uQe),e(A,bQe),e(A,Xf),e(Xf,Bte),e(Bte,vQe),e(Xf,FQe),e(Xf,vS),e(vS,TQe),e(Xf,MQe),e(A,EQe),e(A,zf),e(zf,Ite),e(Ite,CQe),e(zf,wQe),e(zf,FS),e(FS,AQe),e(zf,LQe),e(A,yQe),e(A,Wf),e(Wf,Nte),e(Nte,xQe),e(Wf,$Qe),e(Wf,TS),e(TS,kQe),e(Wf,SQe),e(A,RQe),e(A,Qf),e(Qf,qte),e(qte,PQe),e(Qf,BQe),e(Qf,MS),e(MS,IQe),e(Qf,NQe),e(A,qQe),e(A,Hf),e(Hf,jte),e(jte,jQe),e(Hf,DQe),e(Hf,ES),e(ES,GQe),e(Hf,OQe),e(A,VQe),e(A,Uf),e(Uf,Dte),e(Dte,XQe),e(Uf,zQe),e(Uf,CS),e(CS,WQe),e(Uf,QQe),e(A,HQe),e(A,Jf),e(Jf,Gte),e(Gte,UQe),e(Jf,JQe),e(Jf,wS),e(wS,YQe),e(Jf,KQe),e(A,ZQe),e(A,Yf),e(Yf,Ote),e(Ote,eHe),e(Yf,oHe),e(Yf,AS),e(AS,rHe),e(Yf,tHe),e(A,aHe),e(A,Kf),e(Kf,Vte),e(Vte,nHe),e(Kf,sHe),e(Kf,LS),e(LS,lHe),e(Kf,iHe),e(A,dHe),e(A,Zf),e(Zf,Xte),e(Xte,cHe),e(Zf,fHe),e(Zf,yS),e(yS,mHe),e(Zf,gHe),e(A,hHe),e(A,em),e(em,zte),e(zte,pHe),e(em,_He),e(em,xS),e(xS,uHe),e(em,bHe),e(A,vHe),e(A,om),e(om,Wte),e(Wte,FHe),e(om,THe),e(om,$S),e($S,MHe),e(om,EHe),e(A,CHe),e(A,rm),e(rm,Qte),e(Qte,wHe),e(rm,AHe),e(rm,kS),e(kS,LHe),e(rm,yHe),e(A,xHe),e(A,tm),e(tm,Hte),e(Hte,$He),e(tm,kHe),e(tm,SS),e(SS,SHe),e(tm,RHe),e(A,PHe),e(A,am),e(am,Ute),e(Ute,BHe),e(am,IHe),e(am,RS),e(RS,NHe),e(am,qHe),e(A,jHe),e(A,nm),e(nm,Jte),e(Jte,DHe),e(nm,GHe),e(nm,PS),e(PS,OHe),e(nm,VHe),e(A,XHe),e(A,sm),e(sm,Yte),e(Yte,zHe),e(sm,WHe),e(sm,BS),e(BS,QHe),e(sm,HHe),e(A,UHe),e(A,lm),e(lm,Kte),e(Kte,JHe),e(lm,YHe),e(lm,IS),e(IS,KHe),e(lm,ZHe),e(A,eUe),e(A,im),e(im,Zte),e(Zte,oUe),e(im,rUe),e(im,NS),e(NS,tUe),e(im,aUe),e(A,nUe),e(A,dm),e(dm,eae),e(eae,sUe),e(dm,lUe),e(dm,qS),e(qS,iUe),e(dm,dUe),e(A,cUe),e(A,cm),e(cm,oae),e(oae,fUe),e(cm,mUe),e(cm,jS),e(jS,gUe),e(cm,hUe),e(A,pUe),e(A,fm),e(fm,rae),e(rae,_Ue),e(fm,uUe),e(fm,DS),e(DS,bUe),e(fm,vUe),e(A,FUe),e(A,mm),e(mm,tae),e(tae,TUe),e(mm,MUe),e(mm,GS),e(GS,EUe),e(mm,CUe),e(A,wUe),e(A,gm),e(gm,aae),e(aae,AUe),e(gm,LUe),e(gm,OS),e(OS,yUe),e(gm,xUe),e(A,$Ue),e(A,hm),e(hm,nae),e(nae,kUe),e(hm,SUe),e(hm,VS),e(VS,RUe),e(hm,PUe),e(A,BUe),e(A,pm),e(pm,sae),e(sae,IUe),e(pm,NUe),e(pm,XS),e(XS,qUe),e(pm,jUe),e(A,DUe),e(A,_m),e(_m,lae),e(lae,GUe),e(_m,OUe),e(_m,zS),e(zS,VUe),e(_m,XUe),e(A,zUe),e(A,um),e(um,iae),e(iae,WUe),e(um,QUe),e(um,WS),e(WS,HUe),e(um,UUe),e(A,JUe),e(A,bm),e(bm,dae),e(dae,YUe),e(bm,KUe),e(bm,QS),e(QS,ZUe),e(bm,eJe),e(A,oJe),e(A,vm),e(vm,cae),e(cae,rJe),e(vm,tJe),e(vm,HS),e(HS,aJe),e(vm,nJe),e(A,sJe),e(A,Fm),e(Fm,fae),e(fae,lJe),e(Fm,iJe),e(Fm,US),e(US,dJe),e(Fm,cJe),e(A,fJe),e(A,Tm),e(Tm,mae),e(mae,mJe),e(Tm,gJe),e(Tm,JS),e(JS,hJe),e(Tm,pJe),e(A,_Je),e(A,Mm),e(Mm,gae),e(gae,uJe),e(Mm,bJe),e(Mm,YS),e(YS,vJe),e(Mm,FJe),e(A,TJe),e(A,Em),e(Em,hae),e(hae,MJe),e(Em,EJe),e(Em,KS),e(KS,CJe),e(Em,wJe),e(A,AJe),e(A,Cm),e(Cm,pae),e(pae,LJe),e(Cm,yJe),e(Cm,ZS),e(ZS,xJe),e(Cm,$Je),e(A,kJe),e(A,wm),e(wm,_ae),e(_ae,SJe),e(wm,RJe),e(wm,eR),e(eR,PJe),e(wm,BJe),e(A,IJe),e(A,Am),e(Am,uae),e(uae,NJe),e(Am,qJe),e(Am,oR),e(oR,jJe),e(Am,DJe),e(A,GJe),e(A,Lm),e(Lm,bae),e(bae,OJe),e(Lm,VJe),e(Lm,rR),e(rR,XJe),e(Lm,zJe),e(A,WJe),e(A,ym),e(ym,vae),e(vae,QJe),e(ym,HJe),e(ym,tR),e(tR,UJe),e(ym,JJe),e(A,YJe),e(A,xm),e(xm,Fae),e(Fae,KJe),e(xm,ZJe),e(xm,aR),e(aR,eYe),e(xm,oYe),e(A,rYe),e(A,$m),e($m,Tae),e(Tae,tYe),e($m,aYe),e($m,nR),e(nR,nYe),e($m,sYe),e(A,lYe),e(A,km),e(km,Mae),e(Mae,iYe),e(km,dYe),e(km,sR),e(sR,cYe),e(km,fYe),e(A,mYe),e(A,Sm),e(Sm,Eae),e(Eae,gYe),e(Sm,hYe),e(Sm,lR),e(lR,pYe),e(Sm,_Ye),e(A,uYe),e(A,Rm),e(Rm,Cae),e(Cae,bYe),e(Rm,vYe),e(Rm,iR),e(iR,FYe),e(Rm,TYe),e(A,MYe),e(A,Pm),e(Pm,wae),e(wae,EYe),e(Pm,CYe),e(Pm,dR),e(dR,wYe),e(Pm,AYe),e(A,LYe),e(A,Bm),e(Bm,Aae),e(Aae,yYe),e(Bm,xYe),e(Bm,cR),e(cR,$Ye),e(Bm,kYe),e(A,SYe),e(A,Im),e(Im,Lae),e(Lae,RYe),e(Im,PYe),e(Im,fR),e(fR,BYe),e(Im,IYe),e(A,NYe),e(A,Nm),e(Nm,yae),e(yae,qYe),e(Nm,jYe),e(Nm,mR),e(mR,DYe),e(Nm,GYe),e(A,OYe),e(A,qm),e(qm,xae),e(xae,VYe),e(qm,XYe),e(qm,gR),e(gR,zYe),e(qm,WYe),e(A,QYe),e(A,jm),e(jm,$ae),e($ae,HYe),e(jm,UYe),e(jm,hR),e(hR,JYe),e(jm,YYe),e(A,KYe),e(A,Dm),e(Dm,kae),e(kae,ZYe),e(Dm,eKe),e(Dm,pR),e(pR,oKe),e(Dm,rKe),e(A,tKe),e(A,Gm),e(Gm,Sae),e(Sae,aKe),e(Gm,nKe),e(Gm,_R),e(_R,sKe),e(Gm,lKe),e(A,iKe),e(A,Om),e(Om,Rae),e(Rae,dKe),e(Om,cKe),e(Om,uR),e(uR,fKe),e(Om,mKe),e(A,gKe),e(A,Vm),e(Vm,Pae),e(Pae,hKe),e(Vm,pKe),e(Vm,bR),e(bR,_Ke),e(Vm,uKe),e(A,bKe),e(A,Xm),e(Xm,Bae),e(Bae,vKe),e(Xm,FKe),e(Xm,vR),e(vR,TKe),e(Xm,MKe),e(A,EKe),e(A,zm),e(zm,Iae),e(Iae,CKe),e(zm,wKe),e(zm,FR),e(FR,AKe),e(zm,LKe),e(A,yKe),e(A,Wm),e(Wm,Nae),e(Nae,xKe),e(Wm,$Ke),e(Wm,TR),e(TR,kKe),e(Wm,SKe),e(A,RKe),e(A,Qm),e(Qm,qae),e(qae,PKe),e(Qm,BKe),e(Qm,MR),e(MR,IKe),e(Qm,NKe),e(A,qKe),e(A,Hm),e(Hm,jae),e(jae,jKe),e(Hm,DKe),e(Hm,ER),e(ER,GKe),e(Hm,OKe),e(A,VKe),e(A,Um),e(Um,Dae),e(Dae,XKe),e(Um,zKe),e(Um,CR),e(CR,WKe),e(Um,QKe),e(A,HKe),e(A,Jm),e(Jm,Gae),e(Gae,UKe),e(Jm,JKe),e(Jm,wR),e(wR,YKe),e(Jm,KKe),e(A,ZKe),e(A,Ym),e(Ym,Oae),e(Oae,eZe),e(Ym,oZe),e(Ym,AR),e(AR,rZe),e(Ym,tZe),e(A,aZe),e(A,Km),e(Km,Vae),e(Vae,nZe),e(Km,sZe),e(Km,LR),e(LR,lZe),e(Km,iZe),e(A,dZe),e(A,Zm),e(Zm,Xae),e(Xae,cZe),e(Zm,fZe),e(Zm,yR),e(yR,mZe),e(Zm,gZe),e(A,hZe),e(A,eg),e(eg,zae),e(zae,pZe),e(eg,_Ze),e(eg,xR),e(xR,uZe),e(eg,bZe),e(A,vZe),e(A,og),e(og,Wae),e(Wae,FZe),e(og,TZe),e(og,$R),e($R,MZe),e(og,EZe),e(A,CZe),e(A,rg),e(rg,Qae),e(Qae,wZe),e(rg,AZe),e(rg,kR),e(kR,LZe),e(rg,yZe),e(A,xZe),e(A,tg),e(tg,Hae),e(Hae,$Ze),e(tg,kZe),e(tg,SR),e(SR,SZe),e(tg,RZe),e(A,PZe),e(A,ag),e(ag,Uae),e(Uae,BZe),e(ag,IZe),e(ag,RR),e(RR,NZe),e(ag,qZe),e(A,jZe),e(A,ng),e(ng,Jae),e(Jae,DZe),e(ng,GZe),e(ng,PR),e(PR,OZe),e(ng,VZe),e(A,XZe),e(A,sg),e(sg,Yae),e(Yae,zZe),e(sg,WZe),e(sg,BR),e(BR,QZe),e(sg,HZe),e(A,UZe),e(A,lg),e(lg,Kae),e(Kae,JZe),e(lg,YZe),e(lg,IR),e(IR,KZe),e(lg,ZZe),e(A,eeo),e(A,ig),e(ig,Zae),e(Zae,oeo),e(ig,reo),e(ig,NR),e(NR,teo),e(ig,aeo),e(A,neo),e(A,dg),e(dg,ene),e(ene,seo),e(dg,leo),e(dg,qR),e(qR,ieo),e(dg,deo),e(A,ceo),e(A,cg),e(cg,one),e(one,feo),e(cg,meo),e(cg,jR),e(jR,geo),e(cg,heo),e(A,peo),e(A,fg),e(fg,rne),e(rne,_eo),e(fg,ueo),e(fg,DR),e(DR,beo),e(fg,veo),e(A,Feo),e(A,mg),e(mg,tne),e(tne,Teo),e(mg,Meo),e(mg,GR),e(GR,Eeo),e(mg,Ceo),e(A,weo),e(A,gg),e(gg,ane),e(ane,Aeo),e(gg,Leo),e(gg,OR),e(OR,yeo),e(gg,xeo),e(A,$eo),e(A,hg),e(hg,nne),e(nne,keo),e(hg,Seo),e(hg,VR),e(VR,Reo),e(hg,Peo),e(A,Beo),e(A,pg),e(pg,sne),e(sne,Ieo),e(pg,Neo),e(pg,XR),e(XR,qeo),e(pg,jeo),e(A,Deo),e(A,_g),e(_g,lne),e(lne,Geo),e(_g,Oeo),e(_g,zR),e(zR,Veo),e(_g,Xeo),e(A,zeo),e(A,ug),e(ug,ine),e(ine,Weo),e(ug,Qeo),e(ug,WR),e(WR,Heo),e(ug,Ueo),e(A,Jeo),e(A,bg),e(bg,dne),e(dne,Yeo),e(bg,Keo),e(bg,QR),e(QR,Zeo),e(bg,eoo),e(A,ooo),e(A,vg),e(vg,cne),e(cne,roo),e(vg,too),e(vg,HR),e(HR,aoo),e(vg,noo),e(A,soo),e(A,Fg),e(Fg,fne),e(fne,loo),e(Fg,ioo),e(Fg,UR),e(UR,doo),e(Fg,coo),e(A,foo),e(A,Tg),e(Tg,mne),e(mne,moo),e(Tg,goo),e(Tg,JR),e(JR,hoo),e(Tg,poo),e(A,_oo),e(A,Mg),e(Mg,gne),e(gne,uoo),e(Mg,boo),e(Mg,YR),e(YR,voo),e(Mg,Foo),e(A,Too),e(A,Eg),e(Eg,hne),e(hne,Moo),e(Eg,Eoo),e(Eg,KR),e(KR,Coo),e(Eg,woo),e(A,Aoo),e(A,Cg),e(Cg,pne),e(pne,Loo),e(Cg,yoo),e(Cg,ZR),e(ZR,xoo),e(Cg,$oo),e(A,koo),e(A,wg),e(wg,_ne),e(_ne,Soo),e(wg,Roo),e(wg,eP),e(eP,Poo),e(wg,Boo),e(A,Ioo),e(A,Ag),e(Ag,une),e(une,Noo),e(Ag,qoo),e(Ag,oP),e(oP,joo),e(Ag,Doo),e(A,Goo),e(A,Lg),e(Lg,bne),e(bne,Ooo),e(Lg,Voo),e(Lg,rP),e(rP,Xoo),e(Lg,zoo),e(A,Woo),e(A,yg),e(yg,vne),e(vne,Qoo),e(yg,Hoo),e(yg,tP),e(tP,Uoo),e(yg,Joo),e(A,Yoo),e(A,xg),e(xg,Fne),e(Fne,Koo),e(xg,Zoo),e(xg,aP),e(aP,ero),e(xg,oro),e(A,rro),e(A,$g),e($g,Tne),e(Tne,tro),e($g,aro),e($g,nP),e(nP,nro),e($g,sro),e(A,lro),e(A,kg),e(kg,Mne),e(Mne,iro),e(kg,dro),e(kg,sP),e(sP,cro),e(kg,fro),e(A,mro),e(A,Sg),e(Sg,Ene),e(Ene,gro),e(Sg,hro),e(Sg,lP),e(lP,pro),e(Sg,_ro),e(A,uro),e(A,Rg),e(Rg,Cne),e(Cne,bro),e(Rg,vro),e(Rg,iP),e(iP,Fro),e(Rg,Tro),e(A,Mro),e(A,Pg),e(Pg,wne),e(wne,Ero),e(Pg,Cro),e(Pg,dP),e(dP,wro),e(Pg,Aro),e(A,Lro),e(A,Bg),e(Bg,Ane),e(Ane,yro),e(Bg,xro),e(Bg,cP),e(cP,$ro),e(Bg,kro),e(A,Sro),e(A,Ig),e(Ig,Lne),e(Lne,Rro),e(Ig,Pro),e(Ig,fP),e(fP,Bro),e(Ig,Iro),e(A,Nro),e(A,Ng),e(Ng,yne),e(yne,qro),e(Ng,jro),e(Ng,mP),e(mP,Dro),e(Ng,Gro),e(A,Oro),e(A,qg),e(qg,xne),e(xne,Vro),e(qg,Xro),e(qg,gP),e(gP,zro),e(qg,Wro),e(A,Qro),e(A,jg),e(jg,$ne),e($ne,Hro),e(jg,Uro),e(jg,hP),e(hP,Jro),e(jg,Yro),e(A,Kro),e(A,Dg),e(Dg,kne),e(kne,Zro),e(Dg,eto),e(Dg,pP),e(pP,oto),e(Dg,rto),e(A,tto),e(A,Gg),e(Gg,Sne),e(Sne,ato),e(Gg,nto),e(Gg,_P),e(_P,sto),e(Gg,lto),e(A,ito),e(A,Og),e(Og,Rne),e(Rne,dto),e(Og,cto),e(Og,uP),e(uP,fto),e(Og,mto),e(Ar,gto),M(Vg,Ar,null),e(wo,hto),e(wo,Xg),M(qA,Xg,null),e(Xg,pto),e(Xg,Pne),e(Pne,_to),b(f,oOe,u),b(f,Ri,u),e(Ri,zg),e(zg,Bne),M(jA,Bne,null),e(Ri,uto),e(Ri,Ine),e(Ine,bto),b(f,rOe,u),b(f,Ao,u),M(DA,Ao,null),e(Ao,vto),e(Ao,GA),e(GA,Fto),e(GA,bP),e(bP,Tto),e(GA,Mto),e(Ao,Eto),e(Ao,OA),e(OA,Cto),e(OA,Nne),e(Nne,wto),e(OA,Ato),e(Ao,Lto),e(Ao,Lr),M(VA,Lr,null),e(Lr,yto),e(Lr,qne),e(qne,xto),e(Lr,$to),e(Lr,Sa),e(Sa,kto),e(Sa,jne),e(jne,Sto),e(Sa,Rto),e(Sa,Dne),e(Dne,Pto),e(Sa,Bto),e(Sa,Gne),e(Gne,Ito),e(Sa,Nto),e(Lr,qto),e(Lr,k),e(k,qn),e(qn,One),e(One,jto),e(qn,Dto),e(qn,vP),e(vP,Gto),e(qn,Oto),e(qn,FP),e(FP,Vto),e(qn,Xto),e(k,zto),e(k,jn),e(jn,Vne),e(Vne,Wto),e(jn,Qto),e(jn,TP),e(TP,Hto),e(jn,Uto),e(jn,MP),e(MP,Jto),e(jn,Yto),e(k,Kto),e(k,Dn),e(Dn,Xne),e(Xne,Zto),e(Dn,eao),e(Dn,EP),e(EP,oao),e(Dn,rao),e(Dn,CP),e(CP,tao),e(Dn,aao),e(k,nao),e(k,Wg),e(Wg,zne),e(zne,sao),e(Wg,lao),e(Wg,wP),e(wP,iao),e(Wg,dao),e(k,cao),e(k,Gn),e(Gn,Wne),e(Wne,fao),e(Gn,mao),e(Gn,AP),e(AP,gao),e(Gn,hao),e(Gn,LP),e(LP,pao),e(Gn,_ao),e(k,uao),e(k,Qg),e(Qg,Qne),e(Qne,bao),e(Qg,vao),e(Qg,yP),e(yP,Fao),e(Qg,Tao),e(k,Mao),e(k,Hg),e(Hg,Hne),e(Hne,Eao),e(Hg,Cao),e(Hg,xP),e(xP,wao),e(Hg,Aao),e(k,Lao),e(k,Ug),e(Ug,Une),e(Une,yao),e(Ug,xao),e(Ug,$P),e($P,$ao),e(Ug,kao),e(k,Sao),e(k,On),e(On,Jne),e(Jne,Rao),e(On,Pao),e(On,kP),e(kP,Bao),e(On,Iao),e(On,SP),e(SP,Nao),e(On,qao),e(k,jao),e(k,Vn),e(Vn,Yne),e(Yne,Dao),e(Vn,Gao),e(Vn,RP),e(RP,Oao),e(Vn,Vao),e(Vn,PP),e(PP,Xao),e(Vn,zao),e(k,Wao),e(k,Xn),e(Xn,Kne),e(Kne,Qao),e(Xn,Hao),e(Xn,BP),e(BP,Uao),e(Xn,Jao),e(Xn,IP),e(IP,Yao),e(Xn,Kao),e(k,Zao),e(k,Jg),e(Jg,Zne),e(Zne,eno),e(Jg,ono),e(Jg,NP),e(NP,rno),e(Jg,tno),e(k,ano),e(k,Yg),e(Yg,ese),e(ese,nno),e(Yg,sno),e(Yg,qP),e(qP,lno),e(Yg,ino),e(k,dno),e(k,Kg),e(Kg,ose),e(ose,cno),e(Kg,fno),e(Kg,jP),e(jP,mno),e(Kg,gno),e(k,hno),e(k,zn),e(zn,rse),e(rse,pno),e(zn,_no),e(zn,DP),e(DP,uno),e(zn,bno),e(zn,GP),e(GP,vno),e(zn,Fno),e(k,Tno),e(k,Zg),e(Zg,tse),e(tse,Mno),e(Zg,Eno),e(Zg,OP),e(OP,Cno),e(Zg,wno),e(k,Ano),e(k,Wn),e(Wn,ase),e(ase,Lno),e(Wn,yno),e(Wn,VP),e(VP,xno),e(Wn,$no),e(Wn,XP),e(XP,kno),e(Wn,Sno),e(k,Rno),e(k,Qn),e(Qn,nse),e(nse,Pno),e(Qn,Bno),e(Qn,zP),e(zP,Ino),e(Qn,Nno),e(Qn,WP),e(WP,qno),e(Qn,jno),e(k,Dno),e(k,Hn),e(Hn,sse),e(sse,Gno),e(Hn,Ono),e(Hn,QP),e(QP,Vno),e(Hn,Xno),e(Hn,HP),e(HP,zno),e(Hn,Wno),e(k,Qno),e(k,eh),e(eh,lse),e(lse,Hno),e(eh,Uno),e(eh,UP),e(UP,Jno),e(eh,Yno),e(k,Kno),e(k,Un),e(Un,ise),e(ise,Zno),e(Un,eso),e(Un,JP),e(JP,oso),e(Un,rso),e(Un,YP),e(YP,tso),e(Un,aso),e(k,nso),e(k,Jn),e(Jn,dse),e(dse,sso),e(Jn,lso),e(Jn,KP),e(KP,iso),e(Jn,dso),e(Jn,ZP),e(ZP,cso),e(Jn,fso),e(k,mso),e(k,Yn),e(Yn,cse),e(cse,gso),e(Yn,hso),e(Yn,eB),e(eB,pso),e(Yn,_so),e(Yn,oB),e(oB,uso),e(Yn,bso),e(k,vso),e(k,Kn),e(Kn,fse),e(fse,Fso),e(Kn,Tso),e(Kn,rB),e(rB,Mso),e(Kn,Eso),e(Kn,tB),e(tB,Cso),e(Kn,wso),e(k,Aso),e(k,Zn),e(Zn,mse),e(mse,Lso),e(Zn,yso),e(Zn,aB),e(aB,xso),e(Zn,$so),e(Zn,nB),e(nB,kso),e(Zn,Sso),e(k,Rso),e(k,es),e(es,gse),e(gse,Pso),e(es,Bso),e(es,sB),e(sB,Iso),e(es,Nso),e(es,lB),e(lB,qso),e(es,jso),e(k,Dso),e(k,oh),e(oh,hse),e(hse,Gso),e(oh,Oso),e(oh,iB),e(iB,Vso),e(oh,Xso),e(k,zso),e(k,os),e(os,pse),e(pse,Wso),e(os,Qso),e(os,dB),e(dB,Hso),e(os,Uso),e(os,cB),e(cB,Jso),e(os,Yso),e(k,Kso),e(k,rh),e(rh,_se),e(_se,Zso),e(rh,elo),e(rh,fB),e(fB,olo),e(rh,rlo),e(k,tlo),e(k,rs),e(rs,use),e(use,alo),e(rs,nlo),e(rs,mB),e(mB,slo),e(rs,llo),e(rs,gB),e(gB,ilo),e(rs,dlo),e(k,clo),e(k,ts),e(ts,bse),e(bse,flo),e(ts,mlo),e(ts,hB),e(hB,glo),e(ts,hlo),e(ts,pB),e(pB,plo),e(ts,_lo),e(k,ulo),e(k,as),e(as,vse),e(vse,blo),e(as,vlo),e(as,_B),e(_B,Flo),e(as,Tlo),e(as,uB),e(uB,Mlo),e(as,Elo),e(k,Clo),e(k,th),e(th,Fse),e(Fse,wlo),e(th,Alo),e(th,bB),e(bB,Llo),e(th,ylo),e(k,xlo),e(k,ns),e(ns,Tse),e(Tse,$lo),e(ns,klo),e(ns,vB),e(vB,Slo),e(ns,Rlo),e(ns,FB),e(FB,Plo),e(ns,Blo),e(k,Ilo),e(k,ss),e(ss,Mse),e(Mse,Nlo),e(ss,qlo),e(ss,TB),e(TB,jlo),e(ss,Dlo),e(ss,MB),e(MB,Glo),e(ss,Olo),e(k,Vlo),e(k,ah),e(ah,Ese),e(Ese,Xlo),e(ah,zlo),e(ah,EB),e(EB,Wlo),e(ah,Qlo),e(k,Hlo),e(k,ls),e(ls,Cse),e(Cse,Ulo),e(ls,Jlo),e(ls,CB),e(CB,Ylo),e(ls,Klo),e(ls,wB),e(wB,Zlo),e(ls,eio),e(k,oio),e(k,is),e(is,wse),e(wse,rio),e(is,tio),e(is,AB),e(AB,aio),e(is,nio),e(is,LB),e(LB,sio),e(is,lio),e(k,iio),e(k,ds),e(ds,Ase),e(Ase,dio),e(ds,cio),e(ds,yB),e(yB,fio),e(ds,mio),e(ds,xB),e(xB,gio),e(ds,hio),e(k,pio),e(k,cs),e(cs,Lse),e(Lse,_io),e(cs,uio),e(cs,$B),e($B,bio),e(cs,vio),e(cs,kB),e(kB,Fio),e(cs,Tio),e(k,Mio),e(k,fs),e(fs,yse),e(yse,Eio),e(fs,Cio),e(fs,SB),e(SB,wio),e(fs,Aio),e(fs,RB),e(RB,Lio),e(fs,yio),e(k,xio),e(k,ms),e(ms,xse),e(xse,$io),e(ms,kio),e(ms,PB),e(PB,Sio),e(ms,Rio),e(ms,BB),e(BB,Pio),e(ms,Bio),e(k,Iio),e(k,gs),e(gs,$se),e($se,Nio),e(gs,qio),e(gs,IB),e(IB,jio),e(gs,Dio),e(gs,NB),e(NB,Gio),e(gs,Oio),e(k,Vio),e(k,hs),e(hs,kse),e(kse,Xio),e(hs,zio),e(hs,qB),e(qB,Wio),e(hs,Qio),e(hs,jB),e(jB,Hio),e(hs,Uio),e(k,Jio),e(k,nh),e(nh,Sse),e(Sse,Yio),e(nh,Kio),e(nh,DB),e(DB,Zio),e(nh,edo),e(k,odo),e(k,ps),e(ps,Rse),e(Rse,rdo),e(ps,tdo),e(ps,GB),e(GB,ado),e(ps,ndo),e(ps,OB),e(OB,sdo),e(ps,ldo),e(k,ido),e(k,sh),e(sh,Pse),e(Pse,ddo),e(sh,cdo),e(sh,VB),e(VB,fdo),e(sh,mdo),e(k,gdo),e(k,lh),e(lh,Bse),e(Bse,hdo),e(lh,pdo),e(lh,XB),e(XB,_do),e(lh,udo),e(k,bdo),e(k,_s),e(_s,Ise),e(Ise,vdo),e(_s,Fdo),e(_s,zB),e(zB,Tdo),e(_s,Mdo),e(_s,WB),e(WB,Edo),e(_s,Cdo),e(k,wdo),e(k,us),e(us,Nse),e(Nse,Ado),e(us,Ldo),e(us,QB),e(QB,ydo),e(us,xdo),e(us,HB),e(HB,$do),e(us,kdo),e(k,Sdo),e(k,bs),e(bs,qse),e(qse,Rdo),e(bs,Pdo),e(bs,UB),e(UB,Bdo),e(bs,Ido),e(bs,JB),e(JB,Ndo),e(bs,qdo),e(k,jdo),e(k,ih),e(ih,jse),e(jse,Ddo),e(ih,Gdo),e(ih,YB),e(YB,Odo),e(ih,Vdo),e(k,Xdo),e(k,vs),e(vs,Dse),e(Dse,zdo),e(vs,Wdo),e(vs,KB),e(KB,Qdo),e(vs,Hdo),e(vs,ZB),e(ZB,Udo),e(vs,Jdo),e(k,Ydo),e(k,Fs),e(Fs,Gse),e(Gse,Kdo),e(Fs,Zdo),e(Fs,eI),e(eI,eco),e(Fs,oco),e(Fs,oI),e(oI,rco),e(Fs,tco),e(k,aco),e(k,Ts),e(Ts,Ose),e(Ose,nco),e(Ts,sco),e(Ts,rI),e(rI,lco),e(Ts,ico),e(Ts,tI),e(tI,dco),e(Ts,cco),e(k,fco),e(k,Ms),e(Ms,Vse),e(Vse,mco),e(Ms,gco),e(Ms,aI),e(aI,hco),e(Ms,pco),e(Ms,nI),e(nI,_co),e(Ms,uco),e(k,bco),e(k,Es),e(Es,Xse),e(Xse,vco),e(Es,Fco),e(Es,sI),e(sI,Tco),e(Es,Mco),e(Es,lI),e(lI,Eco),e(Es,Cco),e(k,wco),e(k,Cs),e(Cs,zse),e(zse,Aco),e(Cs,Lco),e(Cs,iI),e(iI,yco),e(Cs,xco),e(Cs,dI),e(dI,$co),e(Cs,kco),e(k,Sco),e(k,dh),e(dh,Wse),e(Wse,Rco),e(dh,Pco),e(dh,cI),e(cI,Bco),e(dh,Ico),e(k,Nco),e(k,ws),e(ws,Qse),e(Qse,qco),e(ws,jco),e(ws,fI),e(fI,Dco),e(ws,Gco),e(ws,mI),e(mI,Oco),e(ws,Vco),e(k,Xco),e(k,ch),e(ch,Hse),e(Hse,zco),e(ch,Wco),e(ch,gI),e(gI,Qco),e(ch,Hco),e(k,Uco),e(k,fh),e(fh,Use),e(Use,Jco),e(fh,Yco),e(fh,hI),e(hI,Kco),e(fh,Zco),e(k,efo),e(k,mh),e(mh,Jse),e(Jse,ofo),e(mh,rfo),e(mh,pI),e(pI,tfo),e(mh,afo),e(k,nfo),e(k,gh),e(gh,Yse),e(Yse,sfo),e(gh,lfo),e(gh,_I),e(_I,ifo),e(gh,dfo),e(k,cfo),e(k,As),e(As,Kse),e(Kse,ffo),e(As,mfo),e(As,uI),e(uI,gfo),e(As,hfo),e(As,bI),e(bI,pfo),e(As,_fo),e(k,ufo),e(k,hh),e(hh,Zse),e(Zse,bfo),e(hh,vfo),e(hh,vI),e(vI,Ffo),e(hh,Tfo),e(k,Mfo),e(k,Ls),e(Ls,ele),e(ele,Efo),e(Ls,Cfo),e(Ls,FI),e(FI,wfo),e(Ls,Afo),e(Ls,TI),e(TI,Lfo),e(Ls,yfo),e(k,xfo),e(k,ys),e(ys,ole),e(ole,$fo),e(ys,kfo),e(ys,MI),e(MI,Sfo),e(ys,Rfo),e(ys,EI),e(EI,Pfo),e(ys,Bfo),e(k,Ifo),e(k,xs),e(xs,rle),e(rle,Nfo),e(xs,qfo),e(xs,CI),e(CI,jfo),e(xs,Dfo),e(xs,wI),e(wI,Gfo),e(xs,Ofo),e(k,Vfo),e(k,$s),e($s,tle),e(tle,Xfo),e($s,zfo),e($s,AI),e(AI,Wfo),e($s,Qfo),e($s,LI),e(LI,Hfo),e($s,Ufo),e(k,Jfo),e(k,ks),e(ks,ale),e(ale,Yfo),e(ks,Kfo),e(ks,yI),e(yI,Zfo),e(ks,emo),e(ks,xI),e(xI,omo),e(ks,rmo),e(k,tmo),e(k,Ss),e(Ss,nle),e(nle,amo),e(Ss,nmo),e(Ss,$I),e($I,smo),e(Ss,lmo),e(Ss,kI),e(kI,imo),e(Ss,dmo),e(k,cmo),e(k,ph),e(ph,sle),e(sle,fmo),e(ph,mmo),e(ph,SI),e(SI,gmo),e(ph,hmo),e(k,pmo),e(k,_h),e(_h,lle),e(lle,_mo),e(_h,umo),e(_h,RI),e(RI,bmo),e(_h,vmo),e(k,Fmo),e(k,Rs),e(Rs,ile),e(ile,Tmo),e(Rs,Mmo),e(Rs,PI),e(PI,Emo),e(Rs,Cmo),e(Rs,BI),e(BI,wmo),e(Rs,Amo),e(k,Lmo),e(k,Ps),e(Ps,dle),e(dle,ymo),e(Ps,xmo),e(Ps,II),e(II,$mo),e(Ps,kmo),e(Ps,NI),e(NI,Smo),e(Ps,Rmo),e(k,Pmo),e(k,Bs),e(Bs,cle),e(cle,Bmo),e(Bs,Imo),e(Bs,qI),e(qI,Nmo),e(Bs,qmo),e(Bs,jI),e(jI,jmo),e(Bs,Dmo),e(k,Gmo),e(k,uh),e(uh,fle),e(fle,Omo),e(uh,Vmo),e(uh,DI),e(DI,Xmo),e(uh,zmo),e(k,Wmo),e(k,bh),e(bh,mle),e(mle,Qmo),e(bh,Hmo),e(bh,GI),e(GI,Umo),e(bh,Jmo),e(k,Ymo),e(k,vh),e(vh,gle),e(gle,Kmo),e(vh,Zmo),e(vh,OI),e(OI,ego),e(vh,ogo),e(k,rgo),e(k,Is),e(Is,hle),e(hle,tgo),e(Is,ago),e(Is,VI),e(VI,ngo),e(Is,sgo),e(Is,XI),e(XI,lgo),e(Is,igo),e(k,dgo),e(k,Ns),e(Ns,ple),e(ple,cgo),e(Ns,fgo),e(Ns,zI),e(zI,mgo),e(Ns,ggo),e(Ns,WI),e(WI,hgo),e(Ns,pgo),e(k,_go),e(k,Fh),e(Fh,_le),e(_le,ugo),e(Fh,bgo),e(Fh,QI),e(QI,vgo),e(Fh,Fgo),e(k,Tgo),e(k,Th),e(Th,ule),e(ule,Mgo),e(Th,Ego),e(Th,HI),e(HI,Cgo),e(Th,wgo),e(k,Ago),e(k,Mh),e(Mh,ble),e(ble,Lgo),e(Mh,ygo),e(Mh,UI),e(UI,xgo),e(Mh,$go),e(k,kgo),e(k,qs),e(qs,vle),e(vle,Sgo),e(qs,Rgo),e(qs,JI),e(JI,Pgo),e(qs,Bgo),e(qs,YI),e(YI,Igo),e(qs,Ngo),e(k,qgo),e(k,Eh),e(Eh,Fle),e(Fle,jgo),e(Eh,Dgo),e(Eh,KI),e(KI,Ggo),e(Eh,Ogo),e(k,Vgo),e(k,Ch),e(Ch,Tle),e(Tle,Xgo),e(Ch,zgo),e(Ch,ZI),e(ZI,Wgo),e(Ch,Qgo),e(k,Hgo),e(k,js),e(js,Mle),e(Mle,Ugo),e(js,Jgo),e(js,eN),e(eN,Ygo),e(js,Kgo),e(js,oN),e(oN,Zgo),e(js,eho),e(k,oho),e(k,Ds),e(Ds,Ele),e(Ele,rho),e(Ds,tho),e(Ds,rN),e(rN,aho),e(Ds,nho),e(Ds,tN),e(tN,sho),e(Ds,lho),e(k,iho),e(k,Gs),e(Gs,Cle),e(Cle,dho),e(Gs,cho),e(Gs,aN),e(aN,fho),e(Gs,mho),e(Gs,nN),e(nN,gho),e(Gs,hho),e(k,pho),e(k,Os),e(Os,wle),e(wle,_ho),e(Os,uho),e(Os,sN),e(sN,bho),e(Os,vho),e(Os,lN),e(lN,Fho),e(Os,Tho),e(Lr,Mho),M(wh,Lr,null),e(Ao,Eho),e(Ao,Ah),M(XA,Ah,null),e(Ah,Cho),e(Ah,Ale),e(Ale,who),b(f,tOe,u),b(f,Pi,u),e(Pi,Lh),e(Lh,Lle),M(zA,Lle,null),e(Pi,Aho),e(Pi,yle),e(yle,Lho),b(f,aOe,u),b(f,Lo,u),M(WA,Lo,null),e(Lo,yho),e(Lo,QA),e(QA,xho),e(QA,iN),e(iN,$ho),e(QA,kho),e(Lo,Sho),e(Lo,HA),e(HA,Rho),e(HA,xle),e(xle,Pho),e(HA,Bho),e(Lo,Iho),e(Lo,He),M(UA,He,null),e(He,Nho),e(He,$le),e($le,qho),e(He,jho),e(He,Ra),e(Ra,Dho),e(Ra,kle),e(kle,Gho),e(Ra,Oho),e(Ra,Sle),e(Sle,Vho),e(Ra,Xho),e(Ra,Rle),e(Rle,zho),e(Ra,Who),e(He,Qho),e(He,Y),e(Y,yh),e(yh,Ple),e(Ple,Hho),e(yh,Uho),e(yh,dN),e(dN,Jho),e(yh,Yho),e(Y,Kho),e(Y,xh),e(xh,Ble),e(Ble,Zho),e(xh,epo),e(xh,cN),e(cN,opo),e(xh,rpo),e(Y,tpo),e(Y,$h),e($h,Ile),e(Ile,apo),e($h,npo),e($h,fN),e(fN,spo),e($h,lpo),e(Y,ipo),e(Y,kh),e(kh,Nle),e(Nle,dpo),e(kh,cpo),e(kh,mN),e(mN,fpo),e(kh,mpo),e(Y,gpo),e(Y,Sh),e(Sh,qle),e(qle,hpo),e(Sh,ppo),e(Sh,gN),e(gN,_po),e(Sh,upo),e(Y,bpo),e(Y,Rh),e(Rh,jle),e(jle,vpo),e(Rh,Fpo),e(Rh,hN),e(hN,Tpo),e(Rh,Mpo),e(Y,Epo),e(Y,Ph),e(Ph,Dle),e(Dle,Cpo),e(Ph,wpo),e(Ph,pN),e(pN,Apo),e(Ph,Lpo),e(Y,ypo),e(Y,Bh),e(Bh,Gle),e(Gle,xpo),e(Bh,$po),e(Bh,_N),e(_N,kpo),e(Bh,Spo),e(Y,Rpo),e(Y,Ih),e(Ih,Ole),e(Ole,Ppo),e(Ih,Bpo),e(Ih,uN),e(uN,Ipo),e(Ih,Npo),e(Y,qpo),e(Y,Nh),e(Nh,Vle),e(Vle,jpo),e(Nh,Dpo),e(Nh,bN),e(bN,Gpo),e(Nh,Opo),e(Y,Vpo),e(Y,qh),e(qh,Xle),e(Xle,Xpo),e(qh,zpo),e(qh,vN),e(vN,Wpo),e(qh,Qpo),e(Y,Hpo),e(Y,jh),e(jh,zle),e(zle,Upo),e(jh,Jpo),e(jh,FN),e(FN,Ypo),e(jh,Kpo),e(Y,Zpo),e(Y,Dh),e(Dh,Wle),e(Wle,e_o),e(Dh,o_o),e(Dh,TN),e(TN,r_o),e(Dh,t_o),e(Y,a_o),e(Y,Gh),e(Gh,Qle),e(Qle,n_o),e(Gh,s_o),e(Gh,MN),e(MN,l_o),e(Gh,i_o),e(Y,d_o),e(Y,Oh),e(Oh,Hle),e(Hle,c_o),e(Oh,f_o),e(Oh,EN),e(EN,m_o),e(Oh,g_o),e(Y,h_o),e(Y,Vh),e(Vh,Ule),e(Ule,p_o),e(Vh,__o),e(Vh,CN),e(CN,u_o),e(Vh,b_o),e(Y,v_o),e(Y,Xh),e(Xh,Jle),e(Jle,F_o),e(Xh,T_o),e(Xh,wN),e(wN,M_o),e(Xh,E_o),e(Y,C_o),e(Y,zh),e(zh,Yle),e(Yle,w_o),e(zh,A_o),e(zh,AN),e(AN,L_o),e(zh,y_o),e(Y,x_o),e(Y,Wh),e(Wh,Kle),e(Kle,$_o),e(Wh,k_o),e(Wh,LN),e(LN,S_o),e(Wh,R_o),e(Y,P_o),e(Y,Qh),e(Qh,Zle),e(Zle,B_o),e(Qh,I_o),e(Qh,yN),e(yN,N_o),e(Qh,q_o),e(Y,j_o),e(Y,Hh),e(Hh,eie),e(eie,D_o),e(Hh,G_o),e(Hh,xN),e(xN,O_o),e(Hh,V_o),e(Y,X_o),e(Y,Uh),e(Uh,oie),e(oie,z_o),e(Uh,W_o),e(Uh,$N),e($N,Q_o),e(Uh,H_o),e(Y,U_o),e(Y,Jh),e(Jh,rie),e(rie,J_o),e(Jh,Y_o),e(Jh,kN),e(kN,K_o),e(Jh,Z_o),e(Y,euo),e(Y,Yh),e(Yh,tie),e(tie,ouo),e(Yh,ruo),e(Yh,SN),e(SN,tuo),e(Yh,auo),e(Y,nuo),e(Y,Kh),e(Kh,aie),e(aie,suo),e(Kh,luo),e(Kh,RN),e(RN,iuo),e(Kh,duo),e(Y,cuo),e(Y,Zh),e(Zh,nie),e(nie,fuo),e(Zh,muo),e(Zh,PN),e(PN,guo),e(Zh,huo),e(Y,puo),e(Y,ep),e(ep,sie),e(sie,_uo),e(ep,uuo),e(ep,BN),e(BN,buo),e(ep,vuo),e(Y,Fuo),e(Y,op),e(op,lie),e(lie,Tuo),e(op,Muo),e(op,IN),e(IN,Euo),e(op,Cuo),e(Y,wuo),e(Y,rp),e(rp,iie),e(iie,Auo),e(rp,Luo),e(rp,NN),e(NN,yuo),e(rp,xuo),e(Y,$uo),e(Y,tp),e(tp,die),e(die,kuo),e(tp,Suo),e(tp,qN),e(qN,Ruo),e(tp,Puo),e(Y,Buo),e(Y,ap),e(ap,cie),e(cie,Iuo),e(ap,Nuo),e(ap,jN),e(jN,quo),e(ap,juo),e(Y,Duo),e(Y,np),e(np,fie),e(fie,Guo),e(np,Ouo),e(np,DN),e(DN,Vuo),e(np,Xuo),e(He,zuo),M(sp,He,null),e(He,Wuo),M(lp,He,null),e(Lo,Quo),e(Lo,ip),M(JA,ip,null),e(ip,Huo),e(ip,mie),e(mie,Uuo),b(f,nOe,u),b(f,Bi,u),e(Bi,dp),e(dp,gie),M(YA,gie,null),e(Bi,Juo),e(Bi,hie),e(hie,Yuo),b(f,sOe,u),b(f,yo,u),M(KA,yo,null),e(yo,Kuo),e(yo,ZA),e(ZA,Zuo),e(ZA,GN),e(GN,e1o),e(ZA,o1o),e(yo,r1o),e(yo,eL),e(eL,t1o),e(eL,pie),e(pie,a1o),e(eL,n1o),e(yo,s1o),e(yo,Ue),M(oL,Ue,null),e(Ue,l1o),e(Ue,_ie),e(_ie,i1o),e(Ue,d1o),e(Ue,Ii),e(Ii,c1o),e(Ii,uie),e(uie,f1o),e(Ii,m1o),e(Ii,bie),e(bie,g1o),e(Ii,h1o),e(Ue,p1o),e(Ue,he),e(he,cp),e(cp,vie),e(vie,_1o),e(cp,u1o),e(cp,ON),e(ON,b1o),e(cp,v1o),e(he,F1o),e(he,fp),e(fp,Fie),e(Fie,T1o),e(fp,M1o),e(fp,Tie),e(Tie,E1o),e(fp,C1o),e(he,w1o),e(he,mp),e(mp,Mie),e(Mie,A1o),e(mp,L1o),e(mp,VN),e(VN,y1o),e(mp,x1o),e(he,$1o),e(he,gp),e(gp,Eie),e(Eie,k1o),e(gp,S1o),e(gp,XN),e(XN,R1o),e(gp,P1o),e(he,B1o),e(he,hp),e(hp,Cie),e(Cie,I1o),e(hp,N1o),e(hp,zN),e(zN,q1o),e(hp,j1o),e(he,D1o),e(he,pp),e(pp,wie),e(wie,G1o),e(pp,O1o),e(pp,WN),e(WN,V1o),e(pp,X1o),e(he,z1o),e(he,_p),e(_p,Aie),e(Aie,W1o),e(_p,Q1o),e(_p,QN),e(QN,H1o),e(_p,U1o),e(he,J1o),e(he,up),e(up,Lie),e(Lie,Y1o),e(up,K1o),e(up,HN),e(HN,Z1o),e(up,e2o),e(he,o2o),e(he,bp),e(bp,yie),e(yie,r2o),e(bp,t2o),e(bp,UN),e(UN,a2o),e(bp,n2o),e(he,s2o),e(he,vp),e(vp,xie),e(xie,l2o),e(vp,i2o),e(vp,JN),e(JN,d2o),e(vp,c2o),e(he,f2o),e(he,Fp),e(Fp,$ie),e($ie,m2o),e(Fp,g2o),e(Fp,YN),e(YN,h2o),e(Fp,p2o),e(he,_2o),e(he,Tp),e(Tp,kie),e(kie,u2o),e(Tp,b2o),e(Tp,KN),e(KN,v2o),e(Tp,F2o),e(he,T2o),e(he,Mp),e(Mp,Sie),e(Sie,M2o),e(Mp,E2o),e(Mp,ZN),e(ZN,C2o),e(Mp,w2o),e(he,A2o),e(he,Ep),e(Ep,Rie),e(Rie,L2o),e(Ep,y2o),e(Ep,eq),e(eq,x2o),e(Ep,$2o),e(he,k2o),e(he,Cp),e(Cp,Pie),e(Pie,S2o),e(Cp,R2o),e(Cp,oq),e(oq,P2o),e(Cp,B2o),e(he,I2o),e(he,wp),e(wp,Bie),e(Bie,N2o),e(wp,q2o),e(wp,rq),e(rq,j2o),e(wp,D2o),e(he,G2o),e(he,Ap),e(Ap,Iie),e(Iie,O2o),e(Ap,V2o),e(Ap,tq),e(tq,X2o),e(Ap,z2o),e(Ue,W2o),M(Lp,Ue,null),e(Ue,Q2o),M(yp,Ue,null),e(yo,H2o),e(yo,xp),M(rL,xp,null),e(xp,U2o),e(xp,Nie),e(Nie,J2o),b(f,lOe,u),b(f,Ni,u),e(Ni,$p),e($p,qie),M(tL,qie,null),e(Ni,Y2o),e(Ni,jie),e(jie,K2o),b(f,iOe,u),b(f,xo,u),M(aL,xo,null),e(xo,Z2o),e(xo,qi),e(qi,ebo),e(qi,aq),e(aq,obo),e(qi,rbo),e(qi,nq),e(nq,tbo),e(qi,abo),e(xo,nbo),e(xo,nL),e(nL,sbo),e(nL,Die),e(Die,lbo),e(nL,ibo),e(xo,dbo),e(xo,st),M(sL,st,null),e(st,cbo),e(st,Gie),e(Gie,fbo),e(st,mbo),e(st,ji),e(ji,gbo),e(ji,Oie),e(Oie,hbo),e(ji,pbo),e(ji,sq),e(sq,_bo),e(ji,ubo),e(st,bbo),M(kp,st,null),e(xo,vbo),e(xo,Je),M(lL,Je,null),e(Je,Fbo),e(Je,Vie),e(Vie,Tbo),e(Je,Mbo),e(Je,Pa),e(Pa,Ebo),e(Pa,Xie),e(Xie,Cbo),e(Pa,wbo),e(Pa,zie),e(zie,Abo),e(Pa,Lbo),e(Pa,Wie),e(Wie,ybo),e(Pa,xbo),e(Je,$bo),e(Je,y),e(y,Sp),e(Sp,Qie),e(Qie,kbo),e(Sp,Sbo),e(Sp,lq),e(lq,Rbo),e(Sp,Pbo),e(y,Bbo),e(y,Rp),e(Rp,Hie),e(Hie,Ibo),e(Rp,Nbo),e(Rp,iq),e(iq,qbo),e(Rp,jbo),e(y,Dbo),e(y,Pp),e(Pp,Uie),e(Uie,Gbo),e(Pp,Obo),e(Pp,dq),e(dq,Vbo),e(Pp,Xbo),e(y,zbo),e(y,Bp),e(Bp,Jie),e(Jie,Wbo),e(Bp,Qbo),e(Bp,cq),e(cq,Hbo),e(Bp,Ubo),e(y,Jbo),e(y,Ip),e(Ip,Yie),e(Yie,Ybo),e(Ip,Kbo),e(Ip,fq),e(fq,Zbo),e(Ip,evo),e(y,ovo),e(y,Np),e(Np,Kie),e(Kie,rvo),e(Np,tvo),e(Np,mq),e(mq,avo),e(Np,nvo),e(y,svo),e(y,qp),e(qp,Zie),e(Zie,lvo),e(qp,ivo),e(qp,gq),e(gq,dvo),e(qp,cvo),e(y,fvo),e(y,jp),e(jp,ede),e(ede,mvo),e(jp,gvo),e(jp,hq),e(hq,hvo),e(jp,pvo),e(y,_vo),e(y,Dp),e(Dp,ode),e(ode,uvo),e(Dp,bvo),e(Dp,pq),e(pq,vvo),e(Dp,Fvo),e(y,Tvo),e(y,Gp),e(Gp,rde),e(rde,Mvo),e(Gp,Evo),e(Gp,_q),e(_q,Cvo),e(Gp,wvo),e(y,Avo),e(y,Op),e(Op,tde),e(tde,Lvo),e(Op,yvo),e(Op,uq),e(uq,xvo),e(Op,$vo),e(y,kvo),e(y,Vp),e(Vp,ade),e(ade,Svo),e(Vp,Rvo),e(Vp,bq),e(bq,Pvo),e(Vp,Bvo),e(y,Ivo),e(y,Xp),e(Xp,nde),e(nde,Nvo),e(Xp,qvo),e(Xp,vq),e(vq,jvo),e(Xp,Dvo),e(y,Gvo),e(y,zp),e(zp,sde),e(sde,Ovo),e(zp,Vvo),e(zp,Fq),e(Fq,Xvo),e(zp,zvo),e(y,Wvo),e(y,Wp),e(Wp,lde),e(lde,Qvo),e(Wp,Hvo),e(Wp,Tq),e(Tq,Uvo),e(Wp,Jvo),e(y,Yvo),e(y,Qp),e(Qp,ide),e(ide,Kvo),e(Qp,Zvo),e(Qp,Mq),e(Mq,e0o),e(Qp,o0o),e(y,r0o),e(y,Hp),e(Hp,dde),e(dde,t0o),e(Hp,a0o),e(Hp,Eq),e(Eq,n0o),e(Hp,s0o),e(y,l0o),e(y,Up),e(Up,cde),e(cde,i0o),e(Up,d0o),e(Up,Cq),e(Cq,c0o),e(Up,f0o),e(y,m0o),e(y,Jp),e(Jp,fde),e(fde,g0o),e(Jp,h0o),e(Jp,wq),e(wq,p0o),e(Jp,_0o),e(y,u0o),e(y,Yp),e(Yp,mde),e(mde,b0o),e(Yp,v0o),e(Yp,Aq),e(Aq,F0o),e(Yp,T0o),e(y,M0o),e(y,Kp),e(Kp,gde),e(gde,E0o),e(Kp,C0o),e(Kp,Lq),e(Lq,w0o),e(Kp,A0o),e(y,L0o),e(y,Zp),e(Zp,hde),e(hde,y0o),e(Zp,x0o),e(Zp,yq),e(yq,$0o),e(Zp,k0o),e(y,S0o),e(y,e_),e(e_,pde),e(pde,R0o),e(e_,P0o),e(e_,xq),e(xq,B0o),e(e_,I0o),e(y,N0o),e(y,o_),e(o_,_de),e(_de,q0o),e(o_,j0o),e(o_,$q),e($q,D0o),e(o_,G0o),e(y,O0o),e(y,r_),e(r_,ude),e(ude,V0o),e(r_,X0o),e(r_,kq),e(kq,z0o),e(r_,W0o),e(y,Q0o),e(y,t_),e(t_,bde),e(bde,H0o),e(t_,U0o),e(t_,Sq),e(Sq,J0o),e(t_,Y0o),e(y,K0o),e(y,a_),e(a_,vde),e(vde,Z0o),e(a_,eFo),e(a_,Rq),e(Rq,oFo),e(a_,rFo),e(y,tFo),e(y,n_),e(n_,Fde),e(Fde,aFo),e(n_,nFo),e(n_,Pq),e(Pq,sFo),e(n_,lFo),e(y,iFo),e(y,s_),e(s_,Tde),e(Tde,dFo),e(s_,cFo),e(s_,Bq),e(Bq,fFo),e(s_,mFo),e(y,gFo),e(y,l_),e(l_,Mde),e(Mde,hFo),e(l_,pFo),e(l_,Iq),e(Iq,_Fo),e(l_,uFo),e(y,bFo),e(y,i_),e(i_,Ede),e(Ede,vFo),e(i_,FFo),e(i_,Nq),e(Nq,TFo),e(i_,MFo),e(y,EFo),e(y,d_),e(d_,Cde),e(Cde,CFo),e(d_,wFo),e(d_,qq),e(qq,AFo),e(d_,LFo),e(y,yFo),e(y,c_),e(c_,wde),e(wde,xFo),e(c_,$Fo),e(c_,jq),e(jq,kFo),e(c_,SFo),e(y,RFo),e(y,Vs),e(Vs,Ade),e(Ade,PFo),e(Vs,BFo),e(Vs,Dq),e(Dq,IFo),e(Vs,NFo),e(Vs,Gq),e(Gq,qFo),e(Vs,jFo),e(y,DFo),e(y,f_),e(f_,Lde),e(Lde,GFo),e(f_,OFo),e(f_,Oq),e(Oq,VFo),e(f_,XFo),e(y,zFo),e(y,m_),e(m_,yde),e(yde,WFo),e(m_,QFo),e(m_,Vq),e(Vq,HFo),e(m_,UFo),e(y,JFo),e(y,g_),e(g_,xde),e(xde,YFo),e(g_,KFo),e(g_,Xq),e(Xq,ZFo),e(g_,e6o),e(y,o6o),e(y,h_),e(h_,$de),e($de,r6o),e(h_,t6o),e(h_,zq),e(zq,a6o),e(h_,n6o),e(y,s6o),e(y,p_),e(p_,kde),e(kde,l6o),e(p_,i6o),e(p_,Wq),e(Wq,d6o),e(p_,c6o),e(y,f6o),e(y,__),e(__,Sde),e(Sde,m6o),e(__,g6o),e(__,Qq),e(Qq,h6o),e(__,p6o),e(y,_6o),e(y,u_),e(u_,Rde),e(Rde,u6o),e(u_,b6o),e(u_,Hq),e(Hq,v6o),e(u_,F6o),e(y,T6o),e(y,b_),e(b_,Pde),e(Pde,M6o),e(b_,E6o),e(b_,Uq),e(Uq,C6o),e(b_,w6o),e(y,A6o),e(y,v_),e(v_,Bde),e(Bde,L6o),e(v_,y6o),e(v_,Jq),e(Jq,x6o),e(v_,$6o),e(y,k6o),e(y,F_),e(F_,Ide),e(Ide,S6o),e(F_,R6o),e(F_,Yq),e(Yq,P6o),e(F_,B6o),e(y,I6o),e(y,T_),e(T_,Nde),e(Nde,N6o),e(T_,q6o),e(T_,Kq),e(Kq,j6o),e(T_,D6o),e(y,G6o),e(y,M_),e(M_,qde),e(qde,O6o),e(M_,V6o),e(M_,Zq),e(Zq,X6o),e(M_,z6o),e(y,W6o),e(y,E_),e(E_,jde),e(jde,Q6o),e(E_,H6o),e(E_,ej),e(ej,U6o),e(E_,J6o),e(y,Y6o),e(y,C_),e(C_,Dde),e(Dde,K6o),e(C_,Z6o),e(C_,oj),e(oj,eTo),e(C_,oTo),e(y,rTo),e(y,w_),e(w_,Gde),e(Gde,tTo),e(w_,aTo),e(w_,rj),e(rj,nTo),e(w_,sTo),e(y,lTo),e(y,A_),e(A_,Ode),e(Ode,iTo),e(A_,dTo),e(A_,tj),e(tj,cTo),e(A_,fTo),e(y,mTo),e(y,L_),e(L_,Vde),e(Vde,gTo),e(L_,hTo),e(L_,aj),e(aj,pTo),e(L_,_To),e(y,uTo),e(y,y_),e(y_,Xde),e(Xde,bTo),e(y_,vTo),e(y_,nj),e(nj,FTo),e(y_,TTo),e(y,MTo),e(y,x_),e(x_,zde),e(zde,ETo),e(x_,CTo),e(x_,sj),e(sj,wTo),e(x_,ATo),e(y,LTo),e(y,$_),e($_,Wde),e(Wde,yTo),e($_,xTo),e($_,lj),e(lj,$To),e($_,kTo),e(y,STo),e(y,k_),e(k_,Qde),e(Qde,RTo),e(k_,PTo),e(k_,ij),e(ij,BTo),e(k_,ITo),e(y,NTo),e(y,S_),e(S_,Hde),e(Hde,qTo),e(S_,jTo),e(S_,dj),e(dj,DTo),e(S_,GTo),e(y,OTo),e(y,R_),e(R_,Ude),e(Ude,VTo),e(R_,XTo),e(R_,cj),e(cj,zTo),e(R_,WTo),e(y,QTo),e(y,P_),e(P_,Jde),e(Jde,HTo),e(P_,UTo),e(P_,fj),e(fj,JTo),e(P_,YTo),e(y,KTo),e(y,B_),e(B_,Yde),e(Yde,ZTo),e(B_,e7o),e(B_,mj),e(mj,o7o),e(B_,r7o),e(y,t7o),e(y,I_),e(I_,Kde),e(Kde,a7o),e(I_,n7o),e(I_,gj),e(gj,s7o),e(I_,l7o),e(y,i7o),e(y,N_),e(N_,Zde),e(Zde,d7o),e(N_,c7o),e(N_,hj),e(hj,f7o),e(N_,m7o),e(y,g7o),e(y,q_),e(q_,ece),e(ece,h7o),e(q_,p7o),e(q_,pj),e(pj,_7o),e(q_,u7o),e(y,b7o),e(y,j_),e(j_,oce),e(oce,v7o),e(j_,F7o),e(j_,_j),e(_j,T7o),e(j_,M7o),e(y,E7o),e(y,D_),e(D_,rce),e(rce,C7o),e(D_,w7o),e(D_,uj),e(uj,A7o),e(D_,L7o),e(y,y7o),e(y,G_),e(G_,tce),e(tce,x7o),e(G_,$7o),e(G_,bj),e(bj,k7o),e(G_,S7o),e(y,R7o),e(y,O_),e(O_,ace),e(ace,P7o),e(O_,B7o),e(O_,vj),e(vj,I7o),e(O_,N7o),e(y,q7o),e(y,V_),e(V_,nce),e(nce,j7o),e(V_,D7o),e(V_,Fj),e(Fj,G7o),e(V_,O7o),e(y,V7o),e(y,X_),e(X_,sce),e(sce,X7o),e(X_,z7o),e(X_,Tj),e(Tj,W7o),e(X_,Q7o),e(y,H7o),e(y,z_),e(z_,lce),e(lce,U7o),e(z_,J7o),e(z_,Mj),e(Mj,Y7o),e(z_,K7o),e(y,Z7o),e(y,W_),e(W_,ice),e(ice,e8o),e(W_,o8o),e(W_,Ej),e(Ej,r8o),e(W_,t8o),e(y,a8o),e(y,Q_),e(Q_,dce),e(dce,n8o),e(Q_,s8o),e(Q_,Cj),e(Cj,l8o),e(Q_,i8o),e(y,d8o),e(y,H_),e(H_,cce),e(cce,c8o),e(H_,f8o),e(H_,wj),e(wj,m8o),e(H_,g8o),e(y,h8o),e(y,U_),e(U_,fce),e(fce,p8o),e(U_,_8o),e(U_,Aj),e(Aj,u8o),e(U_,b8o),e(y,v8o),e(y,J_),e(J_,mce),e(mce,F8o),e(J_,T8o),e(J_,Lj),e(Lj,M8o),e(J_,E8o),e(y,C8o),e(y,Y_),e(Y_,gce),e(gce,w8o),e(Y_,A8o),e(Y_,yj),e(yj,L8o),e(Y_,y8o),e(y,x8o),e(y,K_),e(K_,hce),e(hce,$8o),e(K_,k8o),e(K_,xj),e(xj,S8o),e(K_,R8o),e(y,P8o),e(y,Z_),e(Z_,pce),e(pce,B8o),e(Z_,I8o),e(Z_,$j),e($j,N8o),e(Z_,q8o),e(y,j8o),e(y,eu),e(eu,_ce),e(_ce,D8o),e(eu,G8o),e(eu,kj),e(kj,O8o),e(eu,V8o),e(y,X8o),e(y,ou),e(ou,uce),e(uce,z8o),e(ou,W8o),e(ou,Sj),e(Sj,Q8o),e(ou,H8o),e(y,U8o),e(y,ru),e(ru,bce),e(bce,J8o),e(ru,Y8o),e(ru,Rj),e(Rj,K8o),e(ru,Z8o),e(y,eMo),e(y,tu),e(tu,vce),e(vce,oMo),e(tu,rMo),e(tu,Pj),e(Pj,tMo),e(tu,aMo),e(y,nMo),e(y,au),e(au,Fce),e(Fce,sMo),e(au,lMo),e(au,Bj),e(Bj,iMo),e(au,dMo),e(y,cMo),e(y,nu),e(nu,Tce),e(Tce,fMo),e(nu,mMo),e(nu,Ij),e(Ij,gMo),e(nu,hMo),e(y,pMo),e(y,su),e(su,Mce),e(Mce,_Mo),e(su,uMo),e(su,Nj),e(Nj,bMo),e(su,vMo),e(y,FMo),e(y,lu),e(lu,Ece),e(Ece,TMo),e(lu,MMo),e(lu,qj),e(qj,EMo),e(lu,CMo),e(y,wMo),e(y,iu),e(iu,Cce),e(Cce,AMo),e(iu,LMo),e(iu,jj),e(jj,yMo),e(iu,xMo),e(y,$Mo),e(y,du),e(du,wce),e(wce,kMo),e(du,SMo),e(du,Dj),e(Dj,RMo),e(du,PMo),e(y,BMo),e(y,cu),e(cu,Ace),e(Ace,IMo),e(cu,NMo),e(cu,Gj),e(Gj,qMo),e(cu,jMo),e(y,DMo),e(y,fu),e(fu,Lce),e(Lce,GMo),e(fu,OMo),e(fu,Oj),e(Oj,VMo),e(fu,XMo),e(y,zMo),e(y,mu),e(mu,yce),e(yce,WMo),e(mu,QMo),e(mu,Vj),e(Vj,HMo),e(mu,UMo),e(y,JMo),e(y,gu),e(gu,xce),e(xce,YMo),e(gu,KMo),e(gu,Xj),e(Xj,ZMo),e(gu,eEo),e(y,oEo),e(y,hu),e(hu,$ce),e($ce,rEo),e(hu,tEo),e(hu,zj),e(zj,aEo),e(hu,nEo),e(y,sEo),e(y,pu),e(pu,kce),e(kce,lEo),e(pu,iEo),e(pu,Wj),e(Wj,dEo),e(pu,cEo),e(y,fEo),e(y,_u),e(_u,Sce),e(Sce,mEo),e(_u,gEo),e(_u,Qj),e(Qj,hEo),e(_u,pEo),e(y,_Eo),e(y,uu),e(uu,Rce),e(Rce,uEo),e(uu,bEo),e(uu,Hj),e(Hj,vEo),e(uu,FEo),e(y,TEo),e(y,bu),e(bu,Pce),e(Pce,MEo),e(bu,EEo),e(bu,Uj),e(Uj,CEo),e(bu,wEo),e(y,AEo),e(y,vu),e(vu,Bce),e(Bce,LEo),e(vu,yEo),e(vu,Jj),e(Jj,xEo),e(vu,$Eo),e(y,kEo),e(y,Fu),e(Fu,Ice),e(Ice,SEo),e(Fu,REo),e(Fu,Yj),e(Yj,PEo),e(Fu,BEo),e(y,IEo),e(y,Tu),e(Tu,Nce),e(Nce,NEo),e(Tu,qEo),e(Tu,Kj),e(Kj,jEo),e(Tu,DEo),e(y,GEo),e(y,Mu),e(Mu,qce),e(qce,OEo),e(Mu,VEo),e(Mu,Zj),e(Zj,XEo),e(Mu,zEo),e(y,WEo),e(y,Eu),e(Eu,jce),e(jce,QEo),e(Eu,HEo),e(Eu,eD),e(eD,UEo),e(Eu,JEo),e(y,YEo),e(y,Cu),e(Cu,Dce),e(Dce,KEo),e(Cu,ZEo),e(Cu,oD),e(oD,e4o),e(Cu,o4o),e(y,r4o),e(y,wu),e(wu,Gce),e(Gce,t4o),e(wu,a4o),e(wu,rD),e(rD,n4o),e(wu,s4o),e(y,l4o),e(y,Au),e(Au,Oce),e(Oce,i4o),e(Au,d4o),e(Au,tD),e(tD,c4o),e(Au,f4o),e(y,m4o),e(y,Lu),e(Lu,Vce),e(Vce,g4o),e(Lu,h4o),e(Lu,aD),e(aD,p4o),e(Lu,_4o),e(y,u4o),e(y,yu),e(yu,Xce),e(Xce,b4o),e(yu,v4o),e(yu,nD),e(nD,F4o),e(yu,T4o),e(y,M4o),e(y,xu),e(xu,zce),e(zce,E4o),e(xu,C4o),e(xu,sD),e(sD,w4o),e(xu,A4o),e(Je,L4o),e(Je,$u),e($u,y4o),e($u,Wce),e(Wce,x4o),e($u,$4o),e($u,Qce),e(Qce,k4o),e(Je,S4o),M(ku,Je,null),b(f,dOe,u),b(f,Di,u),e(Di,Su),e(Su,Hce),M(iL,Hce,null),e(Di,R4o),e(Di,Uce),e(Uce,P4o),b(f,cOe,u),b(f,$o,u),M(dL,$o,null),e($o,B4o),e($o,Gi),e(Gi,I4o),e(Gi,lD),e(lD,N4o),e(Gi,q4o),e(Gi,iD),e(iD,j4o),e(Gi,D4o),e($o,G4o),e($o,cL),e(cL,O4o),e(cL,Jce),e(Jce,V4o),e(cL,X4o),e($o,z4o),e($o,lt),M(fL,lt,null),e(lt,W4o),e(lt,Yce),e(Yce,Q4o),e(lt,H4o),e(lt,Oi),e(Oi,U4o),e(Oi,Kce),e(Kce,J4o),e(Oi,Y4o),e(Oi,dD),e(dD,K4o),e(Oi,Z4o),e(lt,eCo),M(Ru,lt,null),e($o,oCo),e($o,Ye),M(mL,Ye,null),e(Ye,rCo),e(Ye,Zce),e(Zce,tCo),e(Ye,aCo),e(Ye,Ba),e(Ba,nCo),e(Ba,efe),e(efe,sCo),e(Ba,lCo),e(Ba,ofe),e(ofe,iCo),e(Ba,dCo),e(Ba,rfe),e(rfe,cCo),e(Ba,fCo),e(Ye,mCo),e(Ye,G),e(G,Pu),e(Pu,tfe),e(tfe,gCo),e(Pu,hCo),e(Pu,cD),e(cD,pCo),e(Pu,_Co),e(G,uCo),e(G,Bu),e(Bu,afe),e(afe,bCo),e(Bu,vCo),e(Bu,fD),e(fD,FCo),e(Bu,TCo),e(G,MCo),e(G,Iu),e(Iu,nfe),e(nfe,ECo),e(Iu,CCo),e(Iu,mD),e(mD,wCo),e(Iu,ACo),e(G,LCo),e(G,Nu),e(Nu,sfe),e(sfe,yCo),e(Nu,xCo),e(Nu,gD),e(gD,$Co),e(Nu,kCo),e(G,SCo),e(G,qu),e(qu,lfe),e(lfe,RCo),e(qu,PCo),e(qu,hD),e(hD,BCo),e(qu,ICo),e(G,NCo),e(G,ju),e(ju,ife),e(ife,qCo),e(ju,jCo),e(ju,pD),e(pD,DCo),e(ju,GCo),e(G,OCo),e(G,Du),e(Du,dfe),e(dfe,VCo),e(Du,XCo),e(Du,_D),e(_D,zCo),e(Du,WCo),e(G,QCo),e(G,Gu),e(Gu,cfe),e(cfe,HCo),e(Gu,UCo),e(Gu,uD),e(uD,JCo),e(Gu,YCo),e(G,KCo),e(G,Ou),e(Ou,ffe),e(ffe,ZCo),e(Ou,e5o),e(Ou,bD),e(bD,o5o),e(Ou,r5o),e(G,t5o),e(G,Vu),e(Vu,mfe),e(mfe,a5o),e(Vu,n5o),e(Vu,vD),e(vD,s5o),e(Vu,l5o),e(G,i5o),e(G,Xu),e(Xu,gfe),e(gfe,d5o),e(Xu,c5o),e(Xu,FD),e(FD,f5o),e(Xu,m5o),e(G,g5o),e(G,zu),e(zu,hfe),e(hfe,h5o),e(zu,p5o),e(zu,TD),e(TD,_5o),e(zu,u5o),e(G,b5o),e(G,Wu),e(Wu,pfe),e(pfe,v5o),e(Wu,F5o),e(Wu,MD),e(MD,T5o),e(Wu,M5o),e(G,E5o),e(G,Qu),e(Qu,_fe),e(_fe,C5o),e(Qu,w5o),e(Qu,ED),e(ED,A5o),e(Qu,L5o),e(G,y5o),e(G,Hu),e(Hu,ufe),e(ufe,x5o),e(Hu,$5o),e(Hu,CD),e(CD,k5o),e(Hu,S5o),e(G,R5o),e(G,Uu),e(Uu,bfe),e(bfe,P5o),e(Uu,B5o),e(Uu,wD),e(wD,I5o),e(Uu,N5o),e(G,q5o),e(G,Ju),e(Ju,vfe),e(vfe,j5o),e(Ju,D5o),e(Ju,AD),e(AD,G5o),e(Ju,O5o),e(G,V5o),e(G,Yu),e(Yu,Ffe),e(Ffe,X5o),e(Yu,z5o),e(Yu,LD),e(LD,W5o),e(Yu,Q5o),e(G,H5o),e(G,Ku),e(Ku,Tfe),e(Tfe,U5o),e(Ku,J5o),e(Ku,yD),e(yD,Y5o),e(Ku,K5o),e(G,Z5o),e(G,Zu),e(Zu,Mfe),e(Mfe,e3o),e(Zu,o3o),e(Zu,xD),e(xD,r3o),e(Zu,t3o),e(G,a3o),e(G,e1),e(e1,Efe),e(Efe,n3o),e(e1,s3o),e(e1,$D),e($D,l3o),e(e1,i3o),e(G,d3o),e(G,o1),e(o1,Cfe),e(Cfe,c3o),e(o1,f3o),e(o1,kD),e(kD,m3o),e(o1,g3o),e(G,h3o),e(G,r1),e(r1,wfe),e(wfe,p3o),e(r1,_3o),e(r1,SD),e(SD,u3o),e(r1,b3o),e(G,v3o),e(G,t1),e(t1,Afe),e(Afe,F3o),e(t1,T3o),e(t1,RD),e(RD,M3o),e(t1,E3o),e(G,C3o),e(G,a1),e(a1,Lfe),e(Lfe,w3o),e(a1,A3o),e(a1,PD),e(PD,L3o),e(a1,y3o),e(G,x3o),e(G,n1),e(n1,yfe),e(yfe,$3o),e(n1,k3o),e(n1,BD),e(BD,S3o),e(n1,R3o),e(G,P3o),e(G,s1),e(s1,xfe),e(xfe,B3o),e(s1,I3o),e(s1,ID),e(ID,N3o),e(s1,q3o),e(G,j3o),e(G,l1),e(l1,$fe),e($fe,D3o),e(l1,G3o),e(l1,ND),e(ND,O3o),e(l1,V3o),e(G,X3o),e(G,i1),e(i1,kfe),e(kfe,z3o),e(i1,W3o),e(i1,qD),e(qD,Q3o),e(i1,H3o),e(G,U3o),e(G,d1),e(d1,Sfe),e(Sfe,J3o),e(d1,Y3o),e(d1,jD),e(jD,K3o),e(d1,Z3o),e(G,ewo),e(G,c1),e(c1,Rfe),e(Rfe,owo),e(c1,rwo),e(c1,DD),e(DD,two),e(c1,awo),e(G,nwo),e(G,f1),e(f1,Pfe),e(Pfe,swo),e(f1,lwo),e(f1,GD),e(GD,iwo),e(f1,dwo),e(G,cwo),e(G,m1),e(m1,Bfe),e(Bfe,fwo),e(m1,mwo),e(m1,OD),e(OD,gwo),e(m1,hwo),e(G,pwo),e(G,g1),e(g1,Ife),e(Ife,_wo),e(g1,uwo),e(g1,VD),e(VD,bwo),e(g1,vwo),e(G,Fwo),e(G,h1),e(h1,Nfe),e(Nfe,Two),e(h1,Mwo),e(h1,XD),e(XD,Ewo),e(h1,Cwo),e(G,wwo),e(G,p1),e(p1,qfe),e(qfe,Awo),e(p1,Lwo),e(p1,zD),e(zD,ywo),e(p1,xwo),e(G,$wo),e(G,_1),e(_1,jfe),e(jfe,kwo),e(_1,Swo),e(_1,WD),e(WD,Rwo),e(_1,Pwo),e(G,Bwo),e(G,u1),e(u1,Dfe),e(Dfe,Iwo),e(u1,Nwo),e(u1,QD),e(QD,qwo),e(u1,jwo),e(G,Dwo),e(G,b1),e(b1,Gfe),e(Gfe,Gwo),e(b1,Owo),e(b1,HD),e(HD,Vwo),e(b1,Xwo),e(G,zwo),e(G,v1),e(v1,Ofe),e(Ofe,Wwo),e(v1,Qwo),e(v1,UD),e(UD,Hwo),e(v1,Uwo),e(G,Jwo),e(G,F1),e(F1,Vfe),e(Vfe,Ywo),e(F1,Kwo),e(F1,JD),e(JD,Zwo),e(F1,eAo),e(G,oAo),e(G,T1),e(T1,Xfe),e(Xfe,rAo),e(T1,tAo),e(T1,YD),e(YD,aAo),e(T1,nAo),e(G,sAo),e(G,M1),e(M1,zfe),e(zfe,lAo),e(M1,iAo),e(M1,KD),e(KD,dAo),e(M1,cAo),e(G,fAo),e(G,E1),e(E1,Wfe),e(Wfe,mAo),e(E1,gAo),e(E1,ZD),e(ZD,hAo),e(E1,pAo),e(Ye,_Ao),e(Ye,C1),e(C1,uAo),e(C1,Qfe),e(Qfe,bAo),e(C1,vAo),e(C1,Hfe),e(Hfe,FAo),e(Ye,TAo),M(w1,Ye,null),b(f,fOe,u),b(f,Vi,u),e(Vi,A1),e(A1,Ufe),M(gL,Ufe,null),e(Vi,MAo),e(Vi,Jfe),e(Jfe,EAo),b(f,mOe,u),b(f,ko,u),M(hL,ko,null),e(ko,CAo),e(ko,Xi),e(Xi,wAo),e(Xi,eG),e(eG,AAo),e(Xi,LAo),e(Xi,oG),e(oG,yAo),e(Xi,xAo),e(ko,$Ao),e(ko,pL),e(pL,kAo),e(pL,Yfe),e(Yfe,SAo),e(pL,RAo),e(ko,PAo),e(ko,it),M(_L,it,null),e(it,BAo),e(it,Kfe),e(Kfe,IAo),e(it,NAo),e(it,zi),e(zi,qAo),e(zi,Zfe),e(Zfe,jAo),e(zi,DAo),e(zi,rG),e(rG,GAo),e(zi,OAo),e(it,VAo),M(L1,it,null),e(ko,XAo),e(ko,Ke),M(uL,Ke,null),e(Ke,zAo),e(Ke,eme),e(eme,WAo),e(Ke,QAo),e(Ke,Ia),e(Ia,HAo),e(Ia,ome),e(ome,UAo),e(Ia,JAo),e(Ia,rme),e(rme,YAo),e(Ia,KAo),e(Ia,tme),e(tme,ZAo),e(Ia,eLo),e(Ke,oLo),e(Ke,z),e(z,y1),e(y1,ame),e(ame,rLo),e(y1,tLo),e(y1,tG),e(tG,aLo),e(y1,nLo),e(z,sLo),e(z,x1),e(x1,nme),e(nme,lLo),e(x1,iLo),e(x1,aG),e(aG,dLo),e(x1,cLo),e(z,fLo),e(z,$1),e($1,sme),e(sme,mLo),e($1,gLo),e($1,nG),e(nG,hLo),e($1,pLo),e(z,_Lo),e(z,k1),e(k1,lme),e(lme,uLo),e(k1,bLo),e(k1,sG),e(sG,vLo),e(k1,FLo),e(z,TLo),e(z,S1),e(S1,ime),e(ime,MLo),e(S1,ELo),e(S1,lG),e(lG,CLo),e(S1,wLo),e(z,ALo),e(z,R1),e(R1,dme),e(dme,LLo),e(R1,yLo),e(R1,iG),e(iG,xLo),e(R1,$Lo),e(z,kLo),e(z,P1),e(P1,cme),e(cme,SLo),e(P1,RLo),e(P1,dG),e(dG,PLo),e(P1,BLo),e(z,ILo),e(z,B1),e(B1,fme),e(fme,NLo),e(B1,qLo),e(B1,cG),e(cG,jLo),e(B1,DLo),e(z,GLo),e(z,I1),e(I1,mme),e(mme,OLo),e(I1,VLo),e(I1,fG),e(fG,XLo),e(I1,zLo),e(z,WLo),e(z,N1),e(N1,gme),e(gme,QLo),e(N1,HLo),e(N1,mG),e(mG,ULo),e(N1,JLo),e(z,YLo),e(z,q1),e(q1,hme),e(hme,KLo),e(q1,ZLo),e(q1,gG),e(gG,eyo),e(q1,oyo),e(z,ryo),e(z,j1),e(j1,pme),e(pme,tyo),e(j1,ayo),e(j1,hG),e(hG,nyo),e(j1,syo),e(z,lyo),e(z,D1),e(D1,_me),e(_me,iyo),e(D1,dyo),e(D1,pG),e(pG,cyo),e(D1,fyo),e(z,myo),e(z,G1),e(G1,ume),e(ume,gyo),e(G1,hyo),e(G1,_G),e(_G,pyo),e(G1,_yo),e(z,uyo),e(z,O1),e(O1,bme),e(bme,byo),e(O1,vyo),e(O1,uG),e(uG,Fyo),e(O1,Tyo),e(z,Myo),e(z,V1),e(V1,vme),e(vme,Eyo),e(V1,Cyo),e(V1,bG),e(bG,wyo),e(V1,Ayo),e(z,Lyo),e(z,X1),e(X1,Fme),e(Fme,yyo),e(X1,xyo),e(X1,vG),e(vG,$yo),e(X1,kyo),e(z,Syo),e(z,z1),e(z1,Tme),e(Tme,Ryo),e(z1,Pyo),e(z1,FG),e(FG,Byo),e(z1,Iyo),e(z,Nyo),e(z,W1),e(W1,Mme),e(Mme,qyo),e(W1,jyo),e(W1,TG),e(TG,Dyo),e(W1,Gyo),e(z,Oyo),e(z,Q1),e(Q1,Eme),e(Eme,Vyo),e(Q1,Xyo),e(Q1,MG),e(MG,zyo),e(Q1,Wyo),e(z,Qyo),e(z,H1),e(H1,Cme),e(Cme,Hyo),e(H1,Uyo),e(H1,EG),e(EG,Jyo),e(H1,Yyo),e(z,Kyo),e(z,U1),e(U1,wme),e(wme,Zyo),e(U1,e9o),e(U1,CG),e(CG,o9o),e(U1,r9o),e(z,t9o),e(z,J1),e(J1,Ame),e(Ame,a9o),e(J1,n9o),e(J1,wG),e(wG,s9o),e(J1,l9o),e(z,i9o),e(z,Y1),e(Y1,Lme),e(Lme,d9o),e(Y1,c9o),e(Y1,AG),e(AG,f9o),e(Y1,m9o),e(z,g9o),e(z,K1),e(K1,yme),e(yme,h9o),e(K1,p9o),e(K1,LG),e(LG,_9o),e(K1,u9o),e(z,b9o),e(z,Z1),e(Z1,xme),e(xme,v9o),e(Z1,F9o),e(Z1,yG),e(yG,T9o),e(Z1,M9o),e(z,E9o),e(z,e2),e(e2,$me),e($me,C9o),e(e2,w9o),e(e2,xG),e(xG,A9o),e(e2,L9o),e(z,y9o),e(z,o2),e(o2,kme),e(kme,x9o),e(o2,$9o),e(o2,$G),e($G,k9o),e(o2,S9o),e(z,R9o),e(z,r2),e(r2,Sme),e(Sme,P9o),e(r2,B9o),e(r2,kG),e(kG,I9o),e(r2,N9o),e(z,q9o),e(z,t2),e(t2,Rme),e(Rme,j9o),e(t2,D9o),e(t2,SG),e(SG,G9o),e(t2,O9o),e(z,V9o),e(z,a2),e(a2,Pme),e(Pme,X9o),e(a2,z9o),e(a2,RG),e(RG,W9o),e(a2,Q9o),e(z,H9o),e(z,n2),e(n2,Bme),e(Bme,U9o),e(n2,J9o),e(n2,PG),e(PG,Y9o),e(n2,K9o),e(z,Z9o),e(z,s2),e(s2,Ime),e(Ime,exo),e(s2,oxo),e(s2,BG),e(BG,rxo),e(s2,txo),e(z,axo),e(z,l2),e(l2,Nme),e(Nme,nxo),e(l2,sxo),e(l2,IG),e(IG,lxo),e(l2,ixo),e(z,dxo),e(z,i2),e(i2,qme),e(qme,cxo),e(i2,fxo),e(i2,NG),e(NG,mxo),e(i2,gxo),e(z,hxo),e(z,d2),e(d2,jme),e(jme,pxo),e(d2,_xo),e(d2,qG),e(qG,uxo),e(d2,bxo),e(z,vxo),e(z,c2),e(c2,Dme),e(Dme,Fxo),e(c2,Txo),e(c2,jG),e(jG,Mxo),e(c2,Exo),e(z,Cxo),e(z,f2),e(f2,Gme),e(Gme,wxo),e(f2,Axo),e(f2,DG),e(DG,Lxo),e(f2,yxo),e(Ke,xxo),e(Ke,m2),e(m2,$xo),e(m2,Ome),e(Ome,kxo),e(m2,Sxo),e(m2,Vme),e(Vme,Rxo),e(Ke,Pxo),M(g2,Ke,null),b(f,gOe,u),b(f,Wi,u),e(Wi,h2),e(h2,Xme),M(bL,Xme,null),e(Wi,Bxo),e(Wi,zme),e(zme,Ixo),b(f,hOe,u),b(f,So,u),M(vL,So,null),e(So,Nxo),e(So,Qi),e(Qi,qxo),e(Qi,GG),e(GG,jxo),e(Qi,Dxo),e(Qi,OG),e(OG,Gxo),e(Qi,Oxo),e(So,Vxo),e(So,FL),e(FL,Xxo),e(FL,Wme),e(Wme,zxo),e(FL,Wxo),e(So,Qxo),e(So,dt),M(TL,dt,null),e(dt,Hxo),e(dt,Qme),e(Qme,Uxo),e(dt,Jxo),e(dt,Hi),e(Hi,Yxo),e(Hi,Hme),e(Hme,Kxo),e(Hi,Zxo),e(Hi,VG),e(VG,e$o),e(Hi,o$o),e(dt,r$o),M(p2,dt,null),e(So,t$o),e(So,Ze),M(ML,Ze,null),e(Ze,a$o),e(Ze,Ume),e(Ume,n$o),e(Ze,s$o),e(Ze,Na),e(Na,l$o),e(Na,Jme),e(Jme,i$o),e(Na,d$o),e(Na,Yme),e(Yme,c$o),e(Na,f$o),e(Na,Kme),e(Kme,m$o),e(Na,g$o),e(Ze,h$o),e(Ze,W),e(W,_2),e(_2,Zme),e(Zme,p$o),e(_2,_$o),e(_2,XG),e(XG,u$o),e(_2,b$o),e(W,v$o),e(W,u2),e(u2,ege),e(ege,F$o),e(u2,T$o),e(u2,zG),e(zG,M$o),e(u2,E$o),e(W,C$o),e(W,b2),e(b2,oge),e(oge,w$o),e(b2,A$o),e(b2,WG),e(WG,L$o),e(b2,y$o),e(W,x$o),e(W,v2),e(v2,rge),e(rge,$$o),e(v2,k$o),e(v2,QG),e(QG,S$o),e(v2,R$o),e(W,P$o),e(W,F2),e(F2,tge),e(tge,B$o),e(F2,I$o),e(F2,HG),e(HG,N$o),e(F2,q$o),e(W,j$o),e(W,T2),e(T2,age),e(age,D$o),e(T2,G$o),e(T2,UG),e(UG,O$o),e(T2,V$o),e(W,X$o),e(W,M2),e(M2,nge),e(nge,z$o),e(M2,W$o),e(M2,JG),e(JG,Q$o),e(M2,H$o),e(W,U$o),e(W,E2),e(E2,sge),e(sge,J$o),e(E2,Y$o),e(E2,YG),e(YG,K$o),e(E2,Z$o),e(W,eko),e(W,C2),e(C2,lge),e(lge,oko),e(C2,rko),e(C2,KG),e(KG,tko),e(C2,ako),e(W,nko),e(W,w2),e(w2,ige),e(ige,sko),e(w2,lko),e(w2,ZG),e(ZG,iko),e(w2,dko),e(W,cko),e(W,A2),e(A2,dge),e(dge,fko),e(A2,mko),e(A2,eO),e(eO,gko),e(A2,hko),e(W,pko),e(W,L2),e(L2,cge),e(cge,_ko),e(L2,uko),e(L2,oO),e(oO,bko),e(L2,vko),e(W,Fko),e(W,y2),e(y2,fge),e(fge,Tko),e(y2,Mko),e(y2,rO),e(rO,Eko),e(y2,Cko),e(W,wko),e(W,x2),e(x2,mge),e(mge,Ako),e(x2,Lko),e(x2,tO),e(tO,yko),e(x2,xko),e(W,$ko),e(W,$2),e($2,gge),e(gge,kko),e($2,Sko),e($2,aO),e(aO,Rko),e($2,Pko),e(W,Bko),e(W,k2),e(k2,hge),e(hge,Iko),e(k2,Nko),e(k2,nO),e(nO,qko),e(k2,jko),e(W,Dko),e(W,S2),e(S2,pge),e(pge,Gko),e(S2,Oko),e(S2,sO),e(sO,Vko),e(S2,Xko),e(W,zko),e(W,R2),e(R2,_ge),e(_ge,Wko),e(R2,Qko),e(R2,lO),e(lO,Hko),e(R2,Uko),e(W,Jko),e(W,P2),e(P2,uge),e(uge,Yko),e(P2,Kko),e(P2,iO),e(iO,Zko),e(P2,eSo),e(W,oSo),e(W,B2),e(B2,bge),e(bge,rSo),e(B2,tSo),e(B2,dO),e(dO,aSo),e(B2,nSo),e(W,sSo),e(W,I2),e(I2,vge),e(vge,lSo),e(I2,iSo),e(I2,cO),e(cO,dSo),e(I2,cSo),e(W,fSo),e(W,N2),e(N2,Fge),e(Fge,mSo),e(N2,gSo),e(N2,fO),e(fO,hSo),e(N2,pSo),e(W,_So),e(W,q2),e(q2,Tge),e(Tge,uSo),e(q2,bSo),e(q2,mO),e(mO,vSo),e(q2,FSo),e(W,TSo),e(W,j2),e(j2,Mge),e(Mge,MSo),e(j2,ESo),e(j2,gO),e(gO,CSo),e(j2,wSo),e(W,ASo),e(W,D2),e(D2,Ege),e(Ege,LSo),e(D2,ySo),e(D2,hO),e(hO,xSo),e(D2,$So),e(W,kSo),e(W,G2),e(G2,Cge),e(Cge,SSo),e(G2,RSo),e(G2,pO),e(pO,PSo),e(G2,BSo),e(W,ISo),e(W,O2),e(O2,wge),e(wge,NSo),e(O2,qSo),e(O2,_O),e(_O,jSo),e(O2,DSo),e(W,GSo),e(W,V2),e(V2,Age),e(Age,OSo),e(V2,VSo),e(V2,uO),e(uO,XSo),e(V2,zSo),e(W,WSo),e(W,X2),e(X2,Lge),e(Lge,QSo),e(X2,HSo),e(X2,bO),e(bO,USo),e(X2,JSo),e(W,YSo),e(W,z2),e(z2,yge),e(yge,KSo),e(z2,ZSo),e(z2,vO),e(vO,eRo),e(z2,oRo),e(W,rRo),e(W,W2),e(W2,xge),e(xge,tRo),e(W2,aRo),e(W2,FO),e(FO,nRo),e(W2,sRo),e(W,lRo),e(W,Q2),e(Q2,$ge),e($ge,iRo),e(Q2,dRo),e(Q2,TO),e(TO,cRo),e(Q2,fRo),e(W,mRo),e(W,H2),e(H2,kge),e(kge,gRo),e(H2,hRo),e(H2,Sge),e(Sge,pRo),e(H2,_Ro),e(W,uRo),e(W,U2),e(U2,Rge),e(Rge,bRo),e(U2,vRo),e(U2,MO),e(MO,FRo),e(U2,TRo),e(W,MRo),e(W,J2),e(J2,Pge),e(Pge,ERo),e(J2,CRo),e(J2,EO),e(EO,wRo),e(J2,ARo),e(W,LRo),e(W,Y2),e(Y2,Bge),e(Bge,yRo),e(Y2,xRo),e(Y2,CO),e(CO,$Ro),e(Y2,kRo),e(W,SRo),e(W,K2),e(K2,Ige),e(Ige,RRo),e(K2,PRo),e(K2,wO),e(wO,BRo),e(K2,IRo),e(Ze,NRo),e(Ze,Z2),e(Z2,qRo),e(Z2,Nge),e(Nge,jRo),e(Z2,DRo),e(Z2,qge),e(qge,GRo),e(Ze,ORo),M(eb,Ze,null),b(f,pOe,u),b(f,Ui,u),e(Ui,ob),e(ob,jge),M(EL,jge,null),e(Ui,VRo),e(Ui,Dge),e(Dge,XRo),b(f,_Oe,u),b(f,Ro,u),M(CL,Ro,null),e(Ro,zRo),e(Ro,Ji),e(Ji,WRo),e(Ji,AO),e(AO,QRo),e(Ji,HRo),e(Ji,LO),e(LO,URo),e(Ji,JRo),e(Ro,YRo),e(Ro,wL),e(wL,KRo),e(wL,Gge),e(Gge,ZRo),e(wL,ePo),e(Ro,oPo),e(Ro,ct),M(AL,ct,null),e(ct,rPo),e(ct,Oge),e(Oge,tPo),e(ct,aPo),e(ct,Yi),e(Yi,nPo),e(Yi,Vge),e(Vge,sPo),e(Yi,lPo),e(Yi,yO),e(yO,iPo),e(Yi,dPo),e(ct,cPo),M(rb,ct,null),e(Ro,fPo),e(Ro,eo),M(LL,eo,null),e(eo,mPo),e(eo,Xge),e(Xge,gPo),e(eo,hPo),e(eo,qa),e(qa,pPo),e(qa,zge),e(zge,_Po),e(qa,uPo),e(qa,Wge),e(Wge,bPo),e(qa,vPo),e(qa,Qge),e(Qge,FPo),e(qa,TPo),e(eo,MPo),e(eo,pe),e(pe,tb),e(tb,Hge),e(Hge,EPo),e(tb,CPo),e(tb,xO),e(xO,wPo),e(tb,APo),e(pe,LPo),e(pe,ab),e(ab,Uge),e(Uge,yPo),e(ab,xPo),e(ab,$O),e($O,$Po),e(ab,kPo),e(pe,SPo),e(pe,nb),e(nb,Jge),e(Jge,RPo),e(nb,PPo),e(nb,kO),e(kO,BPo),e(nb,IPo),e(pe,NPo),e(pe,sb),e(sb,Yge),e(Yge,qPo),e(sb,jPo),e(sb,SO),e(SO,DPo),e(sb,GPo),e(pe,OPo),e(pe,lb),e(lb,Kge),e(Kge,VPo),e(lb,XPo),e(lb,RO),e(RO,zPo),e(lb,WPo),e(pe,QPo),e(pe,ib),e(ib,Zge),e(Zge,HPo),e(ib,UPo),e(ib,PO),e(PO,JPo),e(ib,YPo),e(pe,KPo),e(pe,db),e(db,ehe),e(ehe,ZPo),e(db,eBo),e(db,BO),e(BO,oBo),e(db,rBo),e(pe,tBo),e(pe,cb),e(cb,ohe),e(ohe,aBo),e(cb,nBo),e(cb,IO),e(IO,sBo),e(cb,lBo),e(pe,iBo),e(pe,fb),e(fb,rhe),e(rhe,dBo),e(fb,cBo),e(fb,NO),e(NO,fBo),e(fb,mBo),e(pe,gBo),e(pe,mb),e(mb,the),e(the,hBo),e(mb,pBo),e(mb,qO),e(qO,_Bo),e(mb,uBo),e(pe,bBo),e(pe,gb),e(gb,ahe),e(ahe,vBo),e(gb,FBo),e(gb,jO),e(jO,TBo),e(gb,MBo),e(pe,EBo),e(pe,hb),e(hb,nhe),e(nhe,CBo),e(hb,wBo),e(hb,DO),e(DO,ABo),e(hb,LBo),e(pe,yBo),e(pe,pb),e(pb,she),e(she,xBo),e(pb,$Bo),e(pb,GO),e(GO,kBo),e(pb,SBo),e(pe,RBo),e(pe,_b),e(_b,lhe),e(lhe,PBo),e(_b,BBo),e(_b,OO),e(OO,IBo),e(_b,NBo),e(pe,qBo),e(pe,ub),e(ub,ihe),e(ihe,jBo),e(ub,DBo),e(ub,VO),e(VO,GBo),e(ub,OBo),e(pe,VBo),e(pe,bb),e(bb,dhe),e(dhe,XBo),e(bb,zBo),e(bb,XO),e(XO,WBo),e(bb,QBo),e(pe,HBo),e(pe,vb),e(vb,che),e(che,UBo),e(vb,JBo),e(vb,zO),e(zO,YBo),e(vb,KBo),e(eo,ZBo),e(eo,Fb),e(Fb,eIo),e(Fb,fhe),e(fhe,oIo),e(Fb,rIo),e(Fb,mhe),e(mhe,tIo),e(eo,aIo),M(Tb,eo,null),b(f,uOe,u),b(f,Ki,u),e(Ki,Mb),e(Mb,ghe),M(yL,ghe,null),e(Ki,nIo),e(Ki,hhe),e(hhe,sIo),b(f,bOe,u),b(f,Po,u),M(xL,Po,null),e(Po,lIo),e(Po,Zi),e(Zi,iIo),e(Zi,WO),e(WO,dIo),e(Zi,cIo),e(Zi,QO),e(QO,fIo),e(Zi,mIo),e(Po,gIo),e(Po,$L),e($L,hIo),e($L,phe),e(phe,pIo),e($L,_Io),e(Po,uIo),e(Po,ft),M(kL,ft,null),e(ft,bIo),e(ft,_he),e(_he,vIo),e(ft,FIo),e(ft,ed),e(ed,TIo),e(ed,uhe),e(uhe,MIo),e(ed,EIo),e(ed,HO),e(HO,CIo),e(ed,wIo),e(ft,AIo),M(Eb,ft,null),e(Po,LIo),e(Po,oo),M(SL,oo,null),e(oo,yIo),e(oo,bhe),e(bhe,xIo),e(oo,$Io),e(oo,ja),e(ja,kIo),e(ja,vhe),e(vhe,SIo),e(ja,RIo),e(ja,Fhe),e(Fhe,PIo),e(ja,BIo),e(ja,The),e(The,IIo),e(ja,NIo),e(oo,qIo),e(oo,N),e(N,Cb),e(Cb,Mhe),e(Mhe,jIo),e(Cb,DIo),e(Cb,UO),e(UO,GIo),e(Cb,OIo),e(N,VIo),e(N,wb),e(wb,Ehe),e(Ehe,XIo),e(wb,zIo),e(wb,JO),e(JO,WIo),e(wb,QIo),e(N,HIo),e(N,Ab),e(Ab,Che),e(Che,UIo),e(Ab,JIo),e(Ab,YO),e(YO,YIo),e(Ab,KIo),e(N,ZIo),e(N,Lb),e(Lb,whe),e(whe,eNo),e(Lb,oNo),e(Lb,KO),e(KO,rNo),e(Lb,tNo),e(N,aNo),e(N,yb),e(yb,Ahe),e(Ahe,nNo),e(yb,sNo),e(yb,ZO),e(ZO,lNo),e(yb,iNo),e(N,dNo),e(N,xb),e(xb,Lhe),e(Lhe,cNo),e(xb,fNo),e(xb,eV),e(eV,mNo),e(xb,gNo),e(N,hNo),e(N,$b),e($b,yhe),e(yhe,pNo),e($b,_No),e($b,oV),e(oV,uNo),e($b,bNo),e(N,vNo),e(N,kb),e(kb,xhe),e(xhe,FNo),e(kb,TNo),e(kb,rV),e(rV,MNo),e(kb,ENo),e(N,CNo),e(N,Sb),e(Sb,$he),e($he,wNo),e(Sb,ANo),e(Sb,tV),e(tV,LNo),e(Sb,yNo),e(N,xNo),e(N,Rb),e(Rb,khe),e(khe,$No),e(Rb,kNo),e(Rb,aV),e(aV,SNo),e(Rb,RNo),e(N,PNo),e(N,Pb),e(Pb,She),e(She,BNo),e(Pb,INo),e(Pb,nV),e(nV,NNo),e(Pb,qNo),e(N,jNo),e(N,Bb),e(Bb,Rhe),e(Rhe,DNo),e(Bb,GNo),e(Bb,sV),e(sV,ONo),e(Bb,VNo),e(N,XNo),e(N,Ib),e(Ib,Phe),e(Phe,zNo),e(Ib,WNo),e(Ib,lV),e(lV,QNo),e(Ib,HNo),e(N,UNo),e(N,Nb),e(Nb,Bhe),e(Bhe,JNo),e(Nb,YNo),e(Nb,iV),e(iV,KNo),e(Nb,ZNo),e(N,eqo),e(N,qb),e(qb,Ihe),e(Ihe,oqo),e(qb,rqo),e(qb,dV),e(dV,tqo),e(qb,aqo),e(N,nqo),e(N,jb),e(jb,Nhe),e(Nhe,sqo),e(jb,lqo),e(jb,cV),e(cV,iqo),e(jb,dqo),e(N,cqo),e(N,Db),e(Db,qhe),e(qhe,fqo),e(Db,mqo),e(Db,fV),e(fV,gqo),e(Db,hqo),e(N,pqo),e(N,Gb),e(Gb,jhe),e(jhe,_qo),e(Gb,uqo),e(Gb,mV),e(mV,bqo),e(Gb,vqo),e(N,Fqo),e(N,Ob),e(Ob,Dhe),e(Dhe,Tqo),e(Ob,Mqo),e(Ob,gV),e(gV,Eqo),e(Ob,Cqo),e(N,wqo),e(N,Vb),e(Vb,Ghe),e(Ghe,Aqo),e(Vb,Lqo),e(Vb,hV),e(hV,yqo),e(Vb,xqo),e(N,$qo),e(N,Xb),e(Xb,Ohe),e(Ohe,kqo),e(Xb,Sqo),e(Xb,pV),e(pV,Rqo),e(Xb,Pqo),e(N,Bqo),e(N,zb),e(zb,Vhe),e(Vhe,Iqo),e(zb,Nqo),e(zb,_V),e(_V,qqo),e(zb,jqo),e(N,Dqo),e(N,Wb),e(Wb,Xhe),e(Xhe,Gqo),e(Wb,Oqo),e(Wb,uV),e(uV,Vqo),e(Wb,Xqo),e(N,zqo),e(N,Qb),e(Qb,zhe),e(zhe,Wqo),e(Qb,Qqo),e(Qb,bV),e(bV,Hqo),e(Qb,Uqo),e(N,Jqo),e(N,Hb),e(Hb,Whe),e(Whe,Yqo),e(Hb,Kqo),e(Hb,vV),e(vV,Zqo),e(Hb,ejo),e(N,ojo),e(N,Ub),e(Ub,Qhe),e(Qhe,rjo),e(Ub,tjo),e(Ub,FV),e(FV,ajo),e(Ub,njo),e(N,sjo),e(N,Jb),e(Jb,Hhe),e(Hhe,ljo),e(Jb,ijo),e(Jb,TV),e(TV,djo),e(Jb,cjo),e(N,fjo),e(N,Yb),e(Yb,Uhe),e(Uhe,mjo),e(Yb,gjo),e(Yb,MV),e(MV,hjo),e(Yb,pjo),e(N,_jo),e(N,Kb),e(Kb,Jhe),e(Jhe,ujo),e(Kb,bjo),e(Kb,EV),e(EV,vjo),e(Kb,Fjo),e(N,Tjo),e(N,Zb),e(Zb,Yhe),e(Yhe,Mjo),e(Zb,Ejo),e(Zb,CV),e(CV,Cjo),e(Zb,wjo),e(N,Ajo),e(N,ev),e(ev,Khe),e(Khe,Ljo),e(ev,yjo),e(ev,wV),e(wV,xjo),e(ev,$jo),e(N,kjo),e(N,ov),e(ov,Zhe),e(Zhe,Sjo),e(ov,Rjo),e(ov,AV),e(AV,Pjo),e(ov,Bjo),e(N,Ijo),e(N,rv),e(rv,epe),e(epe,Njo),e(rv,qjo),e(rv,LV),e(LV,jjo),e(rv,Djo),e(N,Gjo),e(N,tv),e(tv,ope),e(ope,Ojo),e(tv,Vjo),e(tv,yV),e(yV,Xjo),e(tv,zjo),e(N,Wjo),e(N,av),e(av,rpe),e(rpe,Qjo),e(av,Hjo),e(av,xV),e(xV,Ujo),e(av,Jjo),e(N,Yjo),e(N,nv),e(nv,tpe),e(tpe,Kjo),e(nv,Zjo),e(nv,$V),e($V,eDo),e(nv,oDo),e(N,rDo),e(N,sv),e(sv,ape),e(ape,tDo),e(sv,aDo),e(sv,kV),e(kV,nDo),e(sv,sDo),e(N,lDo),e(N,lv),e(lv,npe),e(npe,iDo),e(lv,dDo),e(lv,SV),e(SV,cDo),e(lv,fDo),e(N,mDo),e(N,iv),e(iv,spe),e(spe,gDo),e(iv,hDo),e(iv,RV),e(RV,pDo),e(iv,_Do),e(N,uDo),e(N,dv),e(dv,lpe),e(lpe,bDo),e(dv,vDo),e(dv,PV),e(PV,FDo),e(dv,TDo),e(N,MDo),e(N,cv),e(cv,ipe),e(ipe,EDo),e(cv,CDo),e(cv,BV),e(BV,wDo),e(cv,ADo),e(N,LDo),e(N,fv),e(fv,dpe),e(dpe,yDo),e(fv,xDo),e(fv,IV),e(IV,$Do),e(fv,kDo),e(N,SDo),e(N,mv),e(mv,cpe),e(cpe,RDo),e(mv,PDo),e(mv,NV),e(NV,BDo),e(mv,IDo),e(N,NDo),e(N,gv),e(gv,fpe),e(fpe,qDo),e(gv,jDo),e(gv,qV),e(qV,DDo),e(gv,GDo),e(N,ODo),e(N,hv),e(hv,mpe),e(mpe,VDo),e(hv,XDo),e(hv,jV),e(jV,zDo),e(hv,WDo),e(N,QDo),e(N,pv),e(pv,gpe),e(gpe,HDo),e(pv,UDo),e(pv,DV),e(DV,JDo),e(pv,YDo),e(N,KDo),e(N,_v),e(_v,hpe),e(hpe,ZDo),e(_v,eGo),e(_v,GV),e(GV,oGo),e(_v,rGo),e(N,tGo),e(N,uv),e(uv,ppe),e(ppe,aGo),e(uv,nGo),e(uv,OV),e(OV,sGo),e(uv,lGo),e(N,iGo),e(N,bv),e(bv,_pe),e(_pe,dGo),e(bv,cGo),e(bv,VV),e(VV,fGo),e(bv,mGo),e(oo,gGo),e(oo,vv),e(vv,hGo),e(vv,upe),e(upe,pGo),e(vv,_Go),e(vv,bpe),e(bpe,uGo),e(oo,bGo),M(Fv,oo,null),b(f,vOe,u),b(f,od,u),e(od,Tv),e(Tv,vpe),M(RL,vpe,null),e(od,vGo),e(od,Fpe),e(Fpe,FGo),b(f,FOe,u),b(f,Bo,u),M(PL,Bo,null),e(Bo,TGo),e(Bo,rd),e(rd,MGo),e(rd,XV),e(XV,EGo),e(rd,CGo),e(rd,zV),e(zV,wGo),e(rd,AGo),e(Bo,LGo),e(Bo,BL),e(BL,yGo),e(BL,Tpe),e(Tpe,xGo),e(BL,$Go),e(Bo,kGo),e(Bo,mt),M(IL,mt,null),e(mt,SGo),e(mt,Mpe),e(Mpe,RGo),e(mt,PGo),e(mt,td),e(td,BGo),e(td,Epe),e(Epe,IGo),e(td,NGo),e(td,WV),e(WV,qGo),e(td,jGo),e(mt,DGo),M(Mv,mt,null),e(Bo,GGo),e(Bo,ro),M(NL,ro,null),e(ro,OGo),e(ro,Cpe),e(Cpe,VGo),e(ro,XGo),e(ro,Da),e(Da,zGo),e(Da,wpe),e(wpe,WGo),e(Da,QGo),e(Da,Ape),e(Ape,HGo),e(Da,UGo),e(Da,Lpe),e(Lpe,JGo),e(Da,YGo),e(ro,KGo),e(ro,Z),e(Z,Ev),e(Ev,ype),e(ype,ZGo),e(Ev,eOo),e(Ev,QV),e(QV,oOo),e(Ev,rOo),e(Z,tOo),e(Z,Cv),e(Cv,xpe),e(xpe,aOo),e(Cv,nOo),e(Cv,HV),e(HV,sOo),e(Cv,lOo),e(Z,iOo),e(Z,wv),e(wv,$pe),e($pe,dOo),e(wv,cOo),e(wv,UV),e(UV,fOo),e(wv,mOo),e(Z,gOo),e(Z,Av),e(Av,kpe),e(kpe,hOo),e(Av,pOo),e(Av,JV),e(JV,_Oo),e(Av,uOo),e(Z,bOo),e(Z,Lv),e(Lv,Spe),e(Spe,vOo),e(Lv,FOo),e(Lv,YV),e(YV,TOo),e(Lv,MOo),e(Z,EOo),e(Z,yv),e(yv,Rpe),e(Rpe,COo),e(yv,wOo),e(yv,KV),e(KV,AOo),e(yv,LOo),e(Z,yOo),e(Z,xv),e(xv,Ppe),e(Ppe,xOo),e(xv,$Oo),e(xv,ZV),e(ZV,kOo),e(xv,SOo),e(Z,ROo),e(Z,$v),e($v,Bpe),e(Bpe,POo),e($v,BOo),e($v,eX),e(eX,IOo),e($v,NOo),e(Z,qOo),e(Z,kv),e(kv,Ipe),e(Ipe,jOo),e(kv,DOo),e(kv,oX),e(oX,GOo),e(kv,OOo),e(Z,VOo),e(Z,Sv),e(Sv,Npe),e(Npe,XOo),e(Sv,zOo),e(Sv,rX),e(rX,WOo),e(Sv,QOo),e(Z,HOo),e(Z,Rv),e(Rv,qpe),e(qpe,UOo),e(Rv,JOo),e(Rv,tX),e(tX,YOo),e(Rv,KOo),e(Z,ZOo),e(Z,Pv),e(Pv,jpe),e(jpe,eVo),e(Pv,oVo),e(Pv,aX),e(aX,rVo),e(Pv,tVo),e(Z,aVo),e(Z,Bv),e(Bv,Dpe),e(Dpe,nVo),e(Bv,sVo),e(Bv,nX),e(nX,lVo),e(Bv,iVo),e(Z,dVo),e(Z,Iv),e(Iv,Gpe),e(Gpe,cVo),e(Iv,fVo),e(Iv,sX),e(sX,mVo),e(Iv,gVo),e(Z,hVo),e(Z,Nv),e(Nv,Ope),e(Ope,pVo),e(Nv,_Vo),e(Nv,lX),e(lX,uVo),e(Nv,bVo),e(Z,vVo),e(Z,qv),e(qv,Vpe),e(Vpe,FVo),e(qv,TVo),e(qv,iX),e(iX,MVo),e(qv,EVo),e(Z,CVo),e(Z,jv),e(jv,Xpe),e(Xpe,wVo),e(jv,AVo),e(jv,dX),e(dX,LVo),e(jv,yVo),e(Z,xVo),e(Z,Dv),e(Dv,zpe),e(zpe,$Vo),e(Dv,kVo),e(Dv,cX),e(cX,SVo),e(Dv,RVo),e(Z,PVo),e(Z,Gv),e(Gv,Wpe),e(Wpe,BVo),e(Gv,IVo),e(Gv,fX),e(fX,NVo),e(Gv,qVo),e(Z,jVo),e(Z,Ov),e(Ov,Qpe),e(Qpe,DVo),e(Ov,GVo),e(Ov,mX),e(mX,OVo),e(Ov,VVo),e(Z,XVo),e(Z,Vv),e(Vv,Hpe),e(Hpe,zVo),e(Vv,WVo),e(Vv,gX),e(gX,QVo),e(Vv,HVo),e(Z,UVo),e(Z,Xv),e(Xv,Upe),e(Upe,JVo),e(Xv,YVo),e(Xv,hX),e(hX,KVo),e(Xv,ZVo),e(Z,eXo),e(Z,zv),e(zv,Jpe),e(Jpe,oXo),e(zv,rXo),e(zv,pX),e(pX,tXo),e(zv,aXo),e(Z,nXo),e(Z,Wv),e(Wv,Ype),e(Ype,sXo),e(Wv,lXo),e(Wv,_X),e(_X,iXo),e(Wv,dXo),e(Z,cXo),e(Z,Qv),e(Qv,Kpe),e(Kpe,fXo),e(Qv,mXo),e(Qv,uX),e(uX,gXo),e(Qv,hXo),e(Z,pXo),e(Z,Hv),e(Hv,Zpe),e(Zpe,_Xo),e(Hv,uXo),e(Hv,bX),e(bX,bXo),e(Hv,vXo),e(Z,FXo),e(Z,Uv),e(Uv,e_e),e(e_e,TXo),e(Uv,MXo),e(Uv,vX),e(vX,EXo),e(Uv,CXo),e(Z,wXo),e(Z,Jv),e(Jv,o_e),e(o_e,AXo),e(Jv,LXo),e(Jv,FX),e(FX,yXo),e(Jv,xXo),e(Z,$Xo),e(Z,Yv),e(Yv,r_e),e(r_e,kXo),e(Yv,SXo),e(Yv,TX),e(TX,RXo),e(Yv,PXo),e(Z,BXo),e(Z,Kv),e(Kv,t_e),e(t_e,IXo),e(Kv,NXo),e(Kv,MX),e(MX,qXo),e(Kv,jXo),e(ro,DXo),e(ro,Zv),e(Zv,GXo),e(Zv,a_e),e(a_e,OXo),e(Zv,VXo),e(Zv,n_e),e(n_e,XXo),e(ro,zXo),M(e0,ro,null),b(f,TOe,u),b(f,ad,u),e(ad,o0),e(o0,s_e),M(qL,s_e,null),e(ad,WXo),e(ad,l_e),e(l_e,QXo),b(f,MOe,u),b(f,Io,u),M(jL,Io,null),e(Io,HXo),e(Io,nd),e(nd,UXo),e(nd,EX),e(EX,JXo),e(nd,YXo),e(nd,CX),e(CX,KXo),e(nd,ZXo),e(Io,ezo),e(Io,DL),e(DL,ozo),e(DL,i_e),e(i_e,rzo),e(DL,tzo),e(Io,azo),e(Io,gt),M(GL,gt,null),e(gt,nzo),e(gt,d_e),e(d_e,szo),e(gt,lzo),e(gt,sd),e(sd,izo),e(sd,c_e),e(c_e,dzo),e(sd,czo),e(sd,wX),e(wX,fzo),e(sd,mzo),e(gt,gzo),M(r0,gt,null),e(Io,hzo),e(Io,to),M(OL,to,null),e(to,pzo),e(to,f_e),e(f_e,_zo),e(to,uzo),e(to,Ga),e(Ga,bzo),e(Ga,m_e),e(m_e,vzo),e(Ga,Fzo),e(Ga,g_e),e(g_e,Tzo),e(Ga,Mzo),e(Ga,h_e),e(h_e,Ezo),e(Ga,Czo),e(to,wzo),e(to,No),e(No,t0),e(t0,p_e),e(p_e,Azo),e(t0,Lzo),e(t0,AX),e(AX,yzo),e(t0,xzo),e(No,$zo),e(No,a0),e(a0,__e),e(__e,kzo),e(a0,Szo),e(a0,LX),e(LX,Rzo),e(a0,Pzo),e(No,Bzo),e(No,n0),e(n0,u_e),e(u_e,Izo),e(n0,Nzo),e(n0,yX),e(yX,qzo),e(n0,jzo),e(No,Dzo),e(No,s0),e(s0,b_e),e(b_e,Gzo),e(s0,Ozo),e(s0,xX),e(xX,Vzo),e(s0,Xzo),e(No,zzo),e(No,l0),e(l0,v_e),e(v_e,Wzo),e(l0,Qzo),e(l0,$X),e($X,Hzo),e(l0,Uzo),e(No,Jzo),e(No,i0),e(i0,F_e),e(F_e,Yzo),e(i0,Kzo),e(i0,kX),e(kX,Zzo),e(i0,eWo),e(to,oWo),e(to,d0),e(d0,rWo),e(d0,T_e),e(T_e,tWo),e(d0,aWo),e(d0,M_e),e(M_e,nWo),e(to,sWo),M(c0,to,null),b(f,EOe,u),b(f,ld,u),e(ld,f0),e(f0,E_e),M(VL,E_e,null),e(ld,lWo),e(ld,C_e),e(C_e,iWo),b(f,COe,u),b(f,qo,u),M(XL,qo,null),e(qo,dWo),e(qo,id),e(id,cWo),e(id,SX),e(SX,fWo),e(id,mWo),e(id,RX),e(RX,gWo),e(id,hWo),e(qo,pWo),e(qo,zL),e(zL,_Wo),e(zL,w_e),e(w_e,uWo),e(zL,bWo),e(qo,vWo),e(qo,ht),M(WL,ht,null),e(ht,FWo),e(ht,A_e),e(A_e,TWo),e(ht,MWo),e(ht,dd),e(dd,EWo),e(dd,L_e),e(L_e,CWo),e(dd,wWo),e(dd,PX),e(PX,AWo),e(dd,LWo),e(ht,yWo),M(m0,ht,null),e(qo,xWo),e(qo,ao),M(QL,ao,null),e(ao,$Wo),e(ao,y_e),e(y_e,kWo),e(ao,SWo),e(ao,Oa),e(Oa,RWo),e(Oa,x_e),e(x_e,PWo),e(Oa,BWo),e(Oa,$_e),e($_e,IWo),e(Oa,NWo),e(Oa,k_e),e(k_e,qWo),e(Oa,jWo),e(ao,DWo),e(ao,H),e(H,g0),e(g0,S_e),e(S_e,GWo),e(g0,OWo),e(g0,BX),e(BX,VWo),e(g0,XWo),e(H,zWo),e(H,h0),e(h0,R_e),e(R_e,WWo),e(h0,QWo),e(h0,IX),e(IX,HWo),e(h0,UWo),e(H,JWo),e(H,p0),e(p0,P_e),e(P_e,YWo),e(p0,KWo),e(p0,NX),e(NX,ZWo),e(p0,eQo),e(H,oQo),e(H,_0),e(_0,B_e),e(B_e,rQo),e(_0,tQo),e(_0,qX),e(qX,aQo),e(_0,nQo),e(H,sQo),e(H,u0),e(u0,I_e),e(I_e,lQo),e(u0,iQo),e(u0,jX),e(jX,dQo),e(u0,cQo),e(H,fQo),e(H,b0),e(b0,N_e),e(N_e,mQo),e(b0,gQo),e(b0,DX),e(DX,hQo),e(b0,pQo),e(H,_Qo),e(H,v0),e(v0,q_e),e(q_e,uQo),e(v0,bQo),e(v0,GX),e(GX,vQo),e(v0,FQo),e(H,TQo),e(H,F0),e(F0,j_e),e(j_e,MQo),e(F0,EQo),e(F0,OX),e(OX,CQo),e(F0,wQo),e(H,AQo),e(H,T0),e(T0,D_e),e(D_e,LQo),e(T0,yQo),e(T0,VX),e(VX,xQo),e(T0,$Qo),e(H,kQo),e(H,M0),e(M0,G_e),e(G_e,SQo),e(M0,RQo),e(M0,XX),e(XX,PQo),e(M0,BQo),e(H,IQo),e(H,E0),e(E0,O_e),e(O_e,NQo),e(E0,qQo),e(E0,zX),e(zX,jQo),e(E0,DQo),e(H,GQo),e(H,C0),e(C0,V_e),e(V_e,OQo),e(C0,VQo),e(C0,WX),e(WX,XQo),e(C0,zQo),e(H,WQo),e(H,w0),e(w0,X_e),e(X_e,QQo),e(w0,HQo),e(w0,QX),e(QX,UQo),e(w0,JQo),e(H,YQo),e(H,A0),e(A0,z_e),e(z_e,KQo),e(A0,ZQo),e(A0,HX),e(HX,eHo),e(A0,oHo),e(H,rHo),e(H,L0),e(L0,W_e),e(W_e,tHo),e(L0,aHo),e(L0,UX),e(UX,nHo),e(L0,sHo),e(H,lHo),e(H,y0),e(y0,Q_e),e(Q_e,iHo),e(y0,dHo),e(y0,JX),e(JX,cHo),e(y0,fHo),e(H,mHo),e(H,x0),e(x0,H_e),e(H_e,gHo),e(x0,hHo),e(x0,YX),e(YX,pHo),e(x0,_Ho),e(H,uHo),e(H,$0),e($0,U_e),e(U_e,bHo),e($0,vHo),e($0,KX),e(KX,FHo),e($0,THo),e(H,MHo),e(H,k0),e(k0,J_e),e(J_e,EHo),e(k0,CHo),e(k0,ZX),e(ZX,wHo),e(k0,AHo),e(H,LHo),e(H,S0),e(S0,Y_e),e(Y_e,yHo),e(S0,xHo),e(S0,ez),e(ez,$Ho),e(S0,kHo),e(H,SHo),e(H,R0),e(R0,K_e),e(K_e,RHo),e(R0,PHo),e(R0,oz),e(oz,BHo),e(R0,IHo),e(H,NHo),e(H,P0),e(P0,Z_e),e(Z_e,qHo),e(P0,jHo),e(P0,rz),e(rz,DHo),e(P0,GHo),e(H,OHo),e(H,B0),e(B0,eue),e(eue,VHo),e(B0,XHo),e(B0,tz),e(tz,zHo),e(B0,WHo),e(H,QHo),e(H,I0),e(I0,oue),e(oue,HHo),e(I0,UHo),e(I0,az),e(az,JHo),e(I0,YHo),e(H,KHo),e(H,N0),e(N0,rue),e(rue,ZHo),e(N0,eUo),e(N0,nz),e(nz,oUo),e(N0,rUo),e(H,tUo),e(H,q0),e(q0,tue),e(tue,aUo),e(q0,nUo),e(q0,sz),e(sz,sUo),e(q0,lUo),e(H,iUo),e(H,j0),e(j0,aue),e(aue,dUo),e(j0,cUo),e(j0,lz),e(lz,fUo),e(j0,mUo),e(H,gUo),e(H,D0),e(D0,nue),e(nue,hUo),e(D0,pUo),e(D0,iz),e(iz,_Uo),e(D0,uUo),e(H,bUo),e(H,G0),e(G0,sue),e(sue,vUo),e(G0,FUo),e(G0,dz),e(dz,TUo),e(G0,MUo),e(H,EUo),e(H,O0),e(O0,lue),e(lue,CUo),e(O0,wUo),e(O0,cz),e(cz,AUo),e(O0,LUo),e(H,yUo),e(H,V0),e(V0,iue),e(iue,xUo),e(V0,$Uo),e(V0,fz),e(fz,kUo),e(V0,SUo),e(H,RUo),e(H,X0),e(X0,due),e(due,PUo),e(X0,BUo),e(X0,mz),e(mz,IUo),e(X0,NUo),e(H,qUo),e(H,z0),e(z0,cue),e(cue,jUo),e(z0,DUo),e(z0,gz),e(gz,GUo),e(z0,OUo),e(H,VUo),e(H,W0),e(W0,fue),e(fue,XUo),e(W0,zUo),e(W0,hz),e(hz,WUo),e(W0,QUo),e(H,HUo),e(H,Q0),e(Q0,mue),e(mue,UUo),e(Q0,JUo),e(Q0,pz),e(pz,YUo),e(Q0,KUo),e(H,ZUo),e(H,H0),e(H0,gue),e(gue,eJo),e(H0,oJo),e(H0,_z),e(_z,rJo),e(H0,tJo),e(ao,aJo),e(ao,U0),e(U0,nJo),e(U0,hue),e(hue,sJo),e(U0,lJo),e(U0,pue),e(pue,iJo),e(ao,dJo),M(J0,ao,null),b(f,wOe,u),b(f,cd,u),e(cd,Y0),e(Y0,_ue),M(HL,_ue,null),e(cd,cJo),e(cd,uue),e(uue,fJo),b(f,AOe,u),b(f,jo,u),M(UL,jo,null),e(jo,mJo),e(jo,fd),e(fd,gJo),e(fd,uz),e(uz,hJo),e(fd,pJo),e(fd,bz),e(bz,_Jo),e(fd,uJo),e(jo,bJo),e(jo,JL),e(JL,vJo),e(JL,bue),e(bue,FJo),e(JL,TJo),e(jo,MJo),e(jo,pt),M(YL,pt,null),e(pt,EJo),e(pt,vue),e(vue,CJo),e(pt,wJo),e(pt,md),e(md,AJo),e(md,Fue),e(Fue,LJo),e(md,yJo),e(md,vz),e(vz,xJo),e(md,$Jo),e(pt,kJo),M(K0,pt,null),e(jo,SJo),e(jo,no),M(KL,no,null),e(no,RJo),e(no,Tue),e(Tue,PJo),e(no,BJo),e(no,Va),e(Va,IJo),e(Va,Mue),e(Mue,NJo),e(Va,qJo),e(Va,Eue),e(Eue,jJo),e(Va,DJo),e(Va,Cue),e(Cue,GJo),e(Va,OJo),e(no,VJo),e(no,V),e(V,Z0),e(Z0,wue),e(wue,XJo),e(Z0,zJo),e(Z0,Fz),e(Fz,WJo),e(Z0,QJo),e(V,HJo),e(V,eF),e(eF,Aue),e(Aue,UJo),e(eF,JJo),e(eF,Tz),e(Tz,YJo),e(eF,KJo),e(V,ZJo),e(V,oF),e(oF,Lue),e(Lue,eYo),e(oF,oYo),e(oF,Mz),e(Mz,rYo),e(oF,tYo),e(V,aYo),e(V,rF),e(rF,yue),e(yue,nYo),e(rF,sYo),e(rF,Ez),e(Ez,lYo),e(rF,iYo),e(V,dYo),e(V,tF),e(tF,xue),e(xue,cYo),e(tF,fYo),e(tF,Cz),e(Cz,mYo),e(tF,gYo),e(V,hYo),e(V,aF),e(aF,$ue),e($ue,pYo),e(aF,_Yo),e(aF,wz),e(wz,uYo),e(aF,bYo),e(V,vYo),e(V,nF),e(nF,kue),e(kue,FYo),e(nF,TYo),e(nF,Az),e(Az,MYo),e(nF,EYo),e(V,CYo),e(V,sF),e(sF,Sue),e(Sue,wYo),e(sF,AYo),e(sF,Lz),e(Lz,LYo),e(sF,yYo),e(V,xYo),e(V,lF),e(lF,Rue),e(Rue,$Yo),e(lF,kYo),e(lF,yz),e(yz,SYo),e(lF,RYo),e(V,PYo),e(V,iF),e(iF,Pue),e(Pue,BYo),e(iF,IYo),e(iF,xz),e(xz,NYo),e(iF,qYo),e(V,jYo),e(V,dF),e(dF,Bue),e(Bue,DYo),e(dF,GYo),e(dF,$z),e($z,OYo),e(dF,VYo),e(V,XYo),e(V,cF),e(cF,Iue),e(Iue,zYo),e(cF,WYo),e(cF,kz),e(kz,QYo),e(cF,HYo),e(V,UYo),e(V,fF),e(fF,Nue),e(Nue,JYo),e(fF,YYo),e(fF,Sz),e(Sz,KYo),e(fF,ZYo),e(V,eKo),e(V,mF),e(mF,que),e(que,oKo),e(mF,rKo),e(mF,Rz),e(Rz,tKo),e(mF,aKo),e(V,nKo),e(V,gF),e(gF,jue),e(jue,sKo),e(gF,lKo),e(gF,Pz),e(Pz,iKo),e(gF,dKo),e(V,cKo),e(V,hF),e(hF,Due),e(Due,fKo),e(hF,mKo),e(hF,Bz),e(Bz,gKo),e(hF,hKo),e(V,pKo),e(V,pF),e(pF,Gue),e(Gue,_Ko),e(pF,uKo),e(pF,Iz),e(Iz,bKo),e(pF,vKo),e(V,FKo),e(V,_F),e(_F,Oue),e(Oue,TKo),e(_F,MKo),e(_F,Nz),e(Nz,EKo),e(_F,CKo),e(V,wKo),e(V,uF),e(uF,Vue),e(Vue,AKo),e(uF,LKo),e(uF,qz),e(qz,yKo),e(uF,xKo),e(V,$Ko),e(V,bF),e(bF,Xue),e(Xue,kKo),e(bF,SKo),e(bF,jz),e(jz,RKo),e(bF,PKo),e(V,BKo),e(V,vF),e(vF,zue),e(zue,IKo),e(vF,NKo),e(vF,Dz),e(Dz,qKo),e(vF,jKo),e(V,DKo),e(V,FF),e(FF,Wue),e(Wue,GKo),e(FF,OKo),e(FF,Gz),e(Gz,VKo),e(FF,XKo),e(V,zKo),e(V,TF),e(TF,Que),e(Que,WKo),e(TF,QKo),e(TF,Oz),e(Oz,HKo),e(TF,UKo),e(V,JKo),e(V,MF),e(MF,Hue),e(Hue,YKo),e(MF,KKo),e(MF,Vz),e(Vz,ZKo),e(MF,eZo),e(V,oZo),e(V,EF),e(EF,Uue),e(Uue,rZo),e(EF,tZo),e(EF,Xz),e(Xz,aZo),e(EF,nZo),e(V,sZo),e(V,CF),e(CF,Jue),e(Jue,lZo),e(CF,iZo),e(CF,zz),e(zz,dZo),e(CF,cZo),e(V,fZo),e(V,wF),e(wF,Yue),e(Yue,mZo),e(wF,gZo),e(wF,Wz),e(Wz,hZo),e(wF,pZo),e(V,_Zo),e(V,AF),e(AF,Kue),e(Kue,uZo),e(AF,bZo),e(AF,Qz),e(Qz,vZo),e(AF,FZo),e(V,TZo),e(V,LF),e(LF,Zue),e(Zue,MZo),e(LF,EZo),e(LF,Hz),e(Hz,CZo),e(LF,wZo),e(V,AZo),e(V,yF),e(yF,e1e),e(e1e,LZo),e(yF,yZo),e(yF,Uz),e(Uz,xZo),e(yF,$Zo),e(V,kZo),e(V,xF),e(xF,o1e),e(o1e,SZo),e(xF,RZo),e(xF,Jz),e(Jz,PZo),e(xF,BZo),e(V,IZo),e(V,$F),e($F,r1e),e(r1e,NZo),e($F,qZo),e($F,Yz),e(Yz,jZo),e($F,DZo),e(V,GZo),e(V,kF),e(kF,t1e),e(t1e,OZo),e(kF,VZo),e(kF,Kz),e(Kz,XZo),e(kF,zZo),e(V,WZo),e(V,SF),e(SF,a1e),e(a1e,QZo),e(SF,HZo),e(SF,Zz),e(Zz,UZo),e(SF,JZo),e(V,YZo),e(V,RF),e(RF,n1e),e(n1e,KZo),e(RF,ZZo),e(RF,eW),e(eW,eer),e(RF,oer),e(V,rer),e(V,PF),e(PF,s1e),e(s1e,ter),e(PF,aer),e(PF,oW),e(oW,ner),e(PF,ser),e(V,ler),e(V,BF),e(BF,l1e),e(l1e,ier),e(BF,der),e(BF,rW),e(rW,cer),e(BF,fer),e(V,mer),e(V,IF),e(IF,i1e),e(i1e,ger),e(IF,her),e(IF,tW),e(tW,per),e(IF,_er),e(V,uer),e(V,NF),e(NF,d1e),e(d1e,ber),e(NF,ver),e(NF,aW),e(aW,Fer),e(NF,Ter),e(V,Mer),e(V,qF),e(qF,c1e),e(c1e,Eer),e(qF,Cer),e(qF,nW),e(nW,wer),e(qF,Aer),e(V,Ler),e(V,jF),e(jF,f1e),e(f1e,yer),e(jF,xer),e(jF,sW),e(sW,$er),e(jF,ker),e(no,Ser),e(no,DF),e(DF,Rer),e(DF,m1e),e(m1e,Per),e(DF,Ber),e(DF,g1e),e(g1e,Ier),e(no,Ner),M(GF,no,null),b(f,LOe,u),b(f,gd,u),e(gd,OF),e(OF,h1e),M(ZL,h1e,null),e(gd,qer),e(gd,p1e),e(p1e,jer),b(f,yOe,u),b(f,Do,u),M(ey,Do,null),e(Do,Der),e(Do,hd),e(hd,Ger),e(hd,lW),e(lW,Oer),e(hd,Ver),e(hd,iW),e(iW,Xer),e(hd,zer),e(Do,Wer),e(Do,oy),e(oy,Qer),e(oy,_1e),e(_1e,Her),e(oy,Uer),e(Do,Jer),e(Do,_t),M(ry,_t,null),e(_t,Yer),e(_t,u1e),e(u1e,Ker),e(_t,Zer),e(_t,pd),e(pd,eor),e(pd,b1e),e(b1e,oor),e(pd,ror),e(pd,dW),e(dW,tor),e(pd,aor),e(_t,nor),M(VF,_t,null),e(Do,sor),e(Do,so),M(ty,so,null),e(so,lor),e(so,v1e),e(v1e,ior),e(so,dor),e(so,Xa),e(Xa,cor),e(Xa,F1e),e(F1e,mor),e(Xa,gor),e(Xa,T1e),e(T1e,hor),e(Xa,por),e(Xa,M1e),e(M1e,_or),e(Xa,uor),e(so,bor),e(so,E1e),e(E1e,XF),e(XF,C1e),e(C1e,vor),e(XF,For),e(XF,cW),e(cW,Tor),e(XF,Mor),e(so,Eor),e(so,zF),e(zF,Cor),e(zF,w1e),e(w1e,wor),e(zF,Aor),e(zF,A1e),e(A1e,Lor),e(so,yor),M(WF,so,null),b(f,xOe,u),b(f,_d,u),e(_d,QF),e(QF,L1e),M(ay,L1e,null),e(_d,xor),e(_d,y1e),e(y1e,$or),b(f,$Oe,u),b(f,Go,u),M(ny,Go,null),e(Go,kor),e(Go,ud),e(ud,Sor),e(ud,fW),e(fW,Ror),e(ud,Por),e(ud,mW),e(mW,Bor),e(ud,Ior),e(Go,Nor),e(Go,sy),e(sy,qor),e(sy,x1e),e(x1e,jor),e(sy,Dor),e(Go,Gor),e(Go,ut),M(ly,ut,null),e(ut,Oor),e(ut,$1e),e($1e,Vor),e(ut,Xor),e(ut,bd),e(bd,zor),e(bd,k1e),e(k1e,Wor),e(bd,Qor),e(bd,gW),e(gW,Hor),e(bd,Uor),e(ut,Jor),M(HF,ut,null),e(Go,Yor),e(Go,lo),M(iy,lo,null),e(lo,Kor),e(lo,S1e),e(S1e,Zor),e(lo,err),e(lo,za),e(za,orr),e(za,R1e),e(R1e,rrr),e(za,trr),e(za,P1e),e(P1e,arr),e(za,nrr),e(za,B1e),e(B1e,srr),e(za,lrr),e(lo,irr),e(lo,Fe),e(Fe,UF),e(UF,I1e),e(I1e,drr),e(UF,crr),e(UF,hW),e(hW,frr),e(UF,mrr),e(Fe,grr),e(Fe,JF),e(JF,N1e),e(N1e,hrr),e(JF,prr),e(JF,pW),e(pW,_rr),e(JF,urr),e(Fe,brr),e(Fe,YF),e(YF,q1e),e(q1e,vrr),e(YF,Frr),e(YF,_W),e(_W,Trr),e(YF,Mrr),e(Fe,Err),e(Fe,KF),e(KF,j1e),e(j1e,Crr),e(KF,wrr),e(KF,uW),e(uW,Arr),e(KF,Lrr),e(Fe,yrr),e(Fe,Xs),e(Xs,D1e),e(D1e,xrr),e(Xs,$rr),e(Xs,bW),e(bW,krr),e(Xs,Srr),e(Xs,vW),e(vW,Rrr),e(Xs,Prr),e(Fe,Brr),e(Fe,ZF),e(ZF,G1e),e(G1e,Irr),e(ZF,Nrr),e(ZF,FW),e(FW,qrr),e(ZF,jrr),e(Fe,Drr),e(Fe,zs),e(zs,O1e),e(O1e,Grr),e(zs,Orr),e(zs,TW),e(TW,Vrr),e(zs,Xrr),e(zs,MW),e(MW,zrr),e(zs,Wrr),e(Fe,Qrr),e(Fe,bt),e(bt,V1e),e(V1e,Hrr),e(bt,Urr),e(bt,EW),e(EW,Jrr),e(bt,Yrr),e(bt,CW),e(CW,Krr),e(bt,Zrr),e(bt,wW),e(wW,etr),e(bt,otr),e(Fe,rtr),e(Fe,e6),e(e6,X1e),e(X1e,ttr),e(e6,atr),e(e6,AW),e(AW,ntr),e(e6,str),e(Fe,ltr),e(Fe,o6),e(o6,z1e),e(z1e,itr),e(o6,dtr),e(o6,LW),e(LW,ctr),e(o6,ftr),e(Fe,mtr),e(Fe,r6),e(r6,W1e),e(W1e,gtr),e(r6,htr),e(r6,yW),e(yW,ptr),e(r6,_tr),e(Fe,utr),e(Fe,t6),e(t6,Q1e),e(Q1e,btr),e(t6,vtr),e(t6,xW),e(xW,Ftr),e(t6,Ttr),e(Fe,Mtr),e(Fe,a6),e(a6,H1e),e(H1e,Etr),e(a6,Ctr),e(a6,$W),e($W,wtr),e(a6,Atr),e(Fe,Ltr),e(Fe,n6),e(n6,U1e),e(U1e,ytr),e(n6,xtr),e(n6,kW),e(kW,$tr),e(n6,ktr),e(Fe,Str),e(Fe,s6),e(s6,J1e),e(J1e,Rtr),e(s6,Ptr),e(s6,SW),e(SW,Btr),e(s6,Itr),e(lo,Ntr),e(lo,l6),e(l6,qtr),e(l6,Y1e),e(Y1e,jtr),e(l6,Dtr),e(l6,K1e),e(K1e,Gtr),e(lo,Otr),M(i6,lo,null),b(f,kOe,u),b(f,vd,u),e(vd,d6),e(d6,Z1e),M(dy,Z1e,null),e(vd,Vtr),e(vd,e2e),e(e2e,Xtr),b(f,SOe,u),b(f,Oo,u),M(cy,Oo,null),e(Oo,ztr),e(Oo,Fd),e(Fd,Wtr),e(Fd,RW),e(RW,Qtr),e(Fd,Htr),e(Fd,PW),e(PW,Utr),e(Fd,Jtr),e(Oo,Ytr),e(Oo,fy),e(fy,Ktr),e(fy,o2e),e(o2e,Ztr),e(fy,ear),e(Oo,oar),e(Oo,vt),M(my,vt,null),e(vt,rar),e(vt,r2e),e(r2e,tar),e(vt,aar),e(vt,Td),e(Td,nar),e(Td,t2e),e(t2e,sar),e(Td,lar),e(Td,BW),e(BW,iar),e(Td,dar),e(vt,car),M(c6,vt,null),e(Oo,far),e(Oo,io),M(gy,io,null),e(io,mar),e(io,a2e),e(a2e,gar),e(io,har),e(io,Wa),e(Wa,par),e(Wa,n2e),e(n2e,_ar),e(Wa,uar),e(Wa,s2e),e(s2e,bar),e(Wa,Far),e(Wa,l2e),e(l2e,Tar),e(Wa,Mar),e(io,Ear),e(io,i2e),e(i2e,f6),e(f6,d2e),e(d2e,Car),e(f6,war),e(f6,IW),e(IW,Aar),e(f6,Lar),e(io,yar),e(io,m6),e(m6,xar),e(m6,c2e),e(c2e,$ar),e(m6,kar),e(m6,f2e),e(f2e,Sar),e(io,Rar),M(g6,io,null),b(f,ROe,u),b(f,Md,u),e(Md,h6),e(h6,m2e),M(hy,m2e,null),e(Md,Par),e(Md,g2e),e(g2e,Bar),b(f,POe,u),b(f,Vo,u),M(py,Vo,null),e(Vo,Iar),e(Vo,Ed),e(Ed,Nar),e(Ed,NW),e(NW,qar),e(Ed,jar),e(Ed,qW),e(qW,Dar),e(Ed,Gar),e(Vo,Oar),e(Vo,_y),e(_y,Var),e(_y,h2e),e(h2e,Xar),e(_y,zar),e(Vo,War),e(Vo,Ft),M(uy,Ft,null),e(Ft,Qar),e(Ft,p2e),e(p2e,Har),e(Ft,Uar),e(Ft,Cd),e(Cd,Jar),e(Cd,_2e),e(_2e,Yar),e(Cd,Kar),e(Cd,jW),e(jW,Zar),e(Cd,enr),e(Ft,onr),M(p6,Ft,null),e(Vo,rnr),e(Vo,co),M(by,co,null),e(co,tnr),e(co,u2e),e(u2e,anr),e(co,nnr),e(co,Qa),e(Qa,snr),e(Qa,b2e),e(b2e,lnr),e(Qa,inr),e(Qa,v2e),e(v2e,dnr),e(Qa,cnr),e(Qa,F2e),e(F2e,fnr),e(Qa,mnr),e(co,gnr),e(co,T2e),e(T2e,_6),e(_6,M2e),e(M2e,hnr),e(_6,pnr),e(_6,DW),e(DW,_nr),e(_6,unr),e(co,bnr),e(co,u6),e(u6,vnr),e(u6,E2e),e(E2e,Fnr),e(u6,Tnr),e(u6,C2e),e(C2e,Mnr),e(co,Enr),M(b6,co,null),b(f,BOe,u),b(f,wd,u),e(wd,v6),e(v6,w2e),M(vy,w2e,null),e(wd,Cnr),e(wd,A2e),e(A2e,wnr),b(f,IOe,u),b(f,Xo,u),M(Fy,Xo,null),e(Xo,Anr),e(Xo,Ad),e(Ad,Lnr),e(Ad,GW),e(GW,ynr),e(Ad,xnr),e(Ad,OW),e(OW,$nr),e(Ad,knr),e(Xo,Snr),e(Xo,Ty),e(Ty,Rnr),e(Ty,L2e),e(L2e,Pnr),e(Ty,Bnr),e(Xo,Inr),e(Xo,Tt),M(My,Tt,null),e(Tt,Nnr),e(Tt,y2e),e(y2e,qnr),e(Tt,jnr),e(Tt,Ld),e(Ld,Dnr),e(Ld,x2e),e(x2e,Gnr),e(Ld,Onr),e(Ld,VW),e(VW,Vnr),e(Ld,Xnr),e(Tt,znr),M(F6,Tt,null),e(Xo,Wnr),e(Xo,fo),M(Ey,fo,null),e(fo,Qnr),e(fo,$2e),e($2e,Hnr),e(fo,Unr),e(fo,Ha),e(Ha,Jnr),e(Ha,k2e),e(k2e,Ynr),e(Ha,Knr),e(Ha,S2e),e(S2e,Znr),e(Ha,esr),e(Ha,R2e),e(R2e,osr),e(Ha,rsr),e(fo,tsr),e(fo,Pe),e(Pe,T6),e(T6,P2e),e(P2e,asr),e(T6,nsr),e(T6,XW),e(XW,ssr),e(T6,lsr),e(Pe,isr),e(Pe,M6),e(M6,B2e),e(B2e,dsr),e(M6,csr),e(M6,zW),e(zW,fsr),e(M6,msr),e(Pe,gsr),e(Pe,E6),e(E6,I2e),e(I2e,hsr),e(E6,psr),e(E6,WW),e(WW,_sr),e(E6,usr),e(Pe,bsr),e(Pe,C6),e(C6,N2e),e(N2e,vsr),e(C6,Fsr),e(C6,QW),e(QW,Tsr),e(C6,Msr),e(Pe,Esr),e(Pe,w6),e(w6,q2e),e(q2e,Csr),e(w6,wsr),e(w6,HW),e(HW,Asr),e(w6,Lsr),e(Pe,ysr),e(Pe,A6),e(A6,j2e),e(j2e,xsr),e(A6,$sr),e(A6,UW),e(UW,ksr),e(A6,Ssr),e(Pe,Rsr),e(Pe,L6),e(L6,D2e),e(D2e,Psr),e(L6,Bsr),e(L6,JW),e(JW,Isr),e(L6,Nsr),e(Pe,qsr),e(Pe,y6),e(y6,G2e),e(G2e,jsr),e(y6,Dsr),e(y6,YW),e(YW,Gsr),e(y6,Osr),e(Pe,Vsr),e(Pe,x6),e(x6,O2e),e(O2e,Xsr),e(x6,zsr),e(x6,KW),e(KW,Wsr),e(x6,Qsr),e(fo,Hsr),e(fo,$6),e($6,Usr),e($6,V2e),e(V2e,Jsr),e($6,Ysr),e($6,X2e),e(X2e,Ksr),e(fo,Zsr),M(k6,fo,null),b(f,NOe,u),b(f,yd,u),e(yd,S6),e(S6,z2e),M(Cy,z2e,null),e(yd,elr),e(yd,W2e),e(W2e,olr),b(f,qOe,u),b(f,zo,u),M(wy,zo,null),e(zo,rlr),e(zo,xd),e(xd,tlr),e(xd,ZW),e(ZW,alr),e(xd,nlr),e(xd,eQ),e(eQ,slr),e(xd,llr),e(zo,ilr),e(zo,Ay),e(Ay,dlr),e(Ay,Q2e),e(Q2e,clr),e(Ay,flr),e(zo,mlr),e(zo,Mt),M(Ly,Mt,null),e(Mt,glr),e(Mt,H2e),e(H2e,hlr),e(Mt,plr),e(Mt,$d),e($d,_lr),e($d,U2e),e(U2e,ulr),e($d,blr),e($d,oQ),e(oQ,vlr),e($d,Flr),e(Mt,Tlr),M(R6,Mt,null),e(zo,Mlr),e(zo,mo),M(yy,mo,null),e(mo,Elr),e(mo,J2e),e(J2e,Clr),e(mo,wlr),e(mo,Ua),e(Ua,Alr),e(Ua,Y2e),e(Y2e,Llr),e(Ua,ylr),e(Ua,K2e),e(K2e,xlr),e(Ua,$lr),e(Ua,Z2e),e(Z2e,klr),e(Ua,Slr),e(mo,Rlr),e(mo,et),e(et,P6),e(P6,ebe),e(ebe,Plr),e(P6,Blr),e(P6,rQ),e(rQ,Ilr),e(P6,Nlr),e(et,qlr),e(et,B6),e(B6,obe),e(obe,jlr),e(B6,Dlr),e(B6,tQ),e(tQ,Glr),e(B6,Olr),e(et,Vlr),e(et,I6),e(I6,rbe),e(rbe,Xlr),e(I6,zlr),e(I6,aQ),e(aQ,Wlr),e(I6,Qlr),e(et,Hlr),e(et,N6),e(N6,tbe),e(tbe,Ulr),e(N6,Jlr),e(N6,nQ),e(nQ,Ylr),e(N6,Klr),e(et,Zlr),e(et,q6),e(q6,abe),e(abe,eir),e(q6,oir),e(q6,sQ),e(sQ,rir),e(q6,tir),e(mo,air),e(mo,j6),e(j6,nir),e(j6,nbe),e(nbe,sir),e(j6,lir),e(j6,sbe),e(sbe,iir),e(mo,dir),M(D6,mo,null),b(f,jOe,u),b(f,kd,u),e(kd,G6),e(G6,lbe),M(xy,lbe,null),e(kd,cir),e(kd,ibe),e(ibe,fir),b(f,DOe,u),b(f,Wo,u),M($y,Wo,null),e(Wo,mir),e(Wo,Sd),e(Sd,gir),e(Sd,lQ),e(lQ,hir),e(Sd,pir),e(Sd,iQ),e(iQ,_ir),e(Sd,uir),e(Wo,bir),e(Wo,ky),e(ky,vir),e(ky,dbe),e(dbe,Fir),e(ky,Tir),e(Wo,Mir),e(Wo,Et),M(Sy,Et,null),e(Et,Eir),e(Et,cbe),e(cbe,Cir),e(Et,wir),e(Et,Rd),e(Rd,Air),e(Rd,fbe),e(fbe,Lir),e(Rd,yir),e(Rd,dQ),e(dQ,xir),e(Rd,$ir),e(Et,kir),M(O6,Et,null),e(Wo,Sir),e(Wo,go),M(Ry,go,null),e(go,Rir),e(go,mbe),e(mbe,Pir),e(go,Bir),e(go,Ja),e(Ja,Iir),e(Ja,gbe),e(gbe,Nir),e(Ja,qir),e(Ja,hbe),e(hbe,jir),e(Ja,Dir),e(Ja,pbe),e(pbe,Gir),e(Ja,Oir),e(go,Vir),e(go,Le),e(Le,V6),e(V6,_be),e(_be,Xir),e(V6,zir),e(V6,cQ),e(cQ,Wir),e(V6,Qir),e(Le,Hir),e(Le,X6),e(X6,ube),e(ube,Uir),e(X6,Jir),e(X6,fQ),e(fQ,Yir),e(X6,Kir),e(Le,Zir),e(Le,z6),e(z6,bbe),e(bbe,edr),e(z6,odr),e(z6,mQ),e(mQ,rdr),e(z6,tdr),e(Le,adr),e(Le,W6),e(W6,vbe),e(vbe,ndr),e(W6,sdr),e(W6,gQ),e(gQ,ldr),e(W6,idr),e(Le,ddr),e(Le,Q6),e(Q6,Fbe),e(Fbe,cdr),e(Q6,fdr),e(Q6,hQ),e(hQ,mdr),e(Q6,gdr),e(Le,hdr),e(Le,H6),e(H6,Tbe),e(Tbe,pdr),e(H6,_dr),e(H6,pQ),e(pQ,udr),e(H6,bdr),e(Le,vdr),e(Le,U6),e(U6,Mbe),e(Mbe,Fdr),e(U6,Tdr),e(U6,_Q),e(_Q,Mdr),e(U6,Edr),e(Le,Cdr),e(Le,J6),e(J6,Ebe),e(Ebe,wdr),e(J6,Adr),e(J6,uQ),e(uQ,Ldr),e(J6,ydr),e(Le,xdr),e(Le,Y6),e(Y6,Cbe),e(Cbe,$dr),e(Y6,kdr),e(Y6,bQ),e(bQ,Sdr),e(Y6,Rdr),e(Le,Pdr),e(Le,K6),e(K6,wbe),e(wbe,Bdr),e(K6,Idr),e(K6,vQ),e(vQ,Ndr),e(K6,qdr),e(go,jdr),e(go,Z6),e(Z6,Ddr),e(Z6,Abe),e(Abe,Gdr),e(Z6,Odr),e(Z6,Lbe),e(Lbe,Vdr),e(go,Xdr),M(eT,go,null),b(f,GOe,u),b(f,Pd,u),e(Pd,oT),e(oT,ybe),M(Py,ybe,null),e(Pd,zdr),e(Pd,xbe),e(xbe,Wdr),b(f,OOe,u),b(f,Qo,u),M(By,Qo,null),e(Qo,Qdr),e(Qo,Bd),e(Bd,Hdr),e(Bd,FQ),e(FQ,Udr),e(Bd,Jdr),e(Bd,TQ),e(TQ,Ydr),e(Bd,Kdr),e(Qo,Zdr),e(Qo,Iy),e(Iy,ecr),e(Iy,$be),e($be,ocr),e(Iy,rcr),e(Qo,tcr),e(Qo,Ct),M(Ny,Ct,null),e(Ct,acr),e(Ct,kbe),e(kbe,ncr),e(Ct,scr),e(Ct,Id),e(Id,lcr),e(Id,Sbe),e(Sbe,icr),e(Id,dcr),e(Id,MQ),e(MQ,ccr),e(Id,fcr),e(Ct,mcr),M(rT,Ct,null),e(Qo,gcr),e(Qo,ho),M(qy,ho,null),e(ho,hcr),e(ho,Rbe),e(Rbe,pcr),e(ho,_cr),e(ho,Ya),e(Ya,ucr),e(Ya,Pbe),e(Pbe,bcr),e(Ya,vcr),e(Ya,Bbe),e(Bbe,Fcr),e(Ya,Tcr),e(Ya,Ibe),e(Ibe,Mcr),e(Ya,Ecr),e(ho,Ccr),e(ho,jy),e(jy,tT),e(tT,Nbe),e(Nbe,wcr),e(tT,Acr),e(tT,EQ),e(EQ,Lcr),e(tT,ycr),e(jy,xcr),e(jy,aT),e(aT,qbe),e(qbe,$cr),e(aT,kcr),e(aT,CQ),e(CQ,Scr),e(aT,Rcr),e(ho,Pcr),e(ho,nT),e(nT,Bcr),e(nT,jbe),e(jbe,Icr),e(nT,Ncr),e(nT,Dbe),e(Dbe,qcr),e(ho,jcr),M(sT,ho,null),b(f,VOe,u),b(f,Nd,u),e(Nd,lT),e(lT,Gbe),M(Dy,Gbe,null),e(Nd,Dcr),e(Nd,Obe),e(Obe,Gcr),b(f,XOe,u),b(f,Ho,u),M(Gy,Ho,null),e(Ho,Ocr),e(Ho,qd),e(qd,Vcr),e(qd,wQ),e(wQ,Xcr),e(qd,zcr),e(qd,AQ),e(AQ,Wcr),e(qd,Qcr),e(Ho,Hcr),e(Ho,Oy),e(Oy,Ucr),e(Oy,Vbe),e(Vbe,Jcr),e(Oy,Ycr),e(Ho,Kcr),e(Ho,wt),M(Vy,wt,null),e(wt,Zcr),e(wt,Xbe),e(Xbe,efr),e(wt,ofr),e(wt,jd),e(jd,rfr),e(jd,zbe),e(zbe,tfr),e(jd,afr),e(jd,LQ),e(LQ,nfr),e(jd,sfr),e(wt,lfr),M(iT,wt,null),e(Ho,ifr),e(Ho,po),M(Xy,po,null),e(po,dfr),e(po,Wbe),e(Wbe,cfr),e(po,ffr),e(po,Ka),e(Ka,mfr),e(Ka,Qbe),e(Qbe,gfr),e(Ka,hfr),e(Ka,Hbe),e(Hbe,pfr),e(Ka,_fr),e(Ka,Ube),e(Ube,ufr),e(Ka,bfr),e(po,vfr),e(po,ot),e(ot,dT),e(dT,Jbe),e(Jbe,Ffr),e(dT,Tfr),e(dT,yQ),e(yQ,Mfr),e(dT,Efr),e(ot,Cfr),e(ot,cT),e(cT,Ybe),e(Ybe,wfr),e(cT,Afr),e(cT,xQ),e(xQ,Lfr),e(cT,yfr),e(ot,xfr),e(ot,fT),e(fT,Kbe),e(Kbe,$fr),e(fT,kfr),e(fT,$Q),e($Q,Sfr),e(fT,Rfr),e(ot,Pfr),e(ot,mT),e(mT,Zbe),e(Zbe,Bfr),e(mT,Ifr),e(mT,kQ),e(kQ,Nfr),e(mT,qfr),e(ot,jfr),e(ot,gT),e(gT,eve),e(eve,Dfr),e(gT,Gfr),e(gT,SQ),e(SQ,Ofr),e(gT,Vfr),e(po,Xfr),e(po,hT),e(hT,zfr),e(hT,ove),e(ove,Wfr),e(hT,Qfr),e(hT,rve),e(rve,Hfr),e(po,Ufr),M(pT,po,null),b(f,zOe,u),b(f,Dd,u),e(Dd,_T),e(_T,tve),M(zy,tve,null),e(Dd,Jfr),e(Dd,ave),e(ave,Yfr),b(f,WOe,u),b(f,Uo,u),M(Wy,Uo,null),e(Uo,Kfr),e(Uo,Gd),e(Gd,Zfr),e(Gd,RQ),e(RQ,emr),e(Gd,omr),e(Gd,PQ),e(PQ,rmr),e(Gd,tmr),e(Uo,amr),e(Uo,Qy),e(Qy,nmr),e(Qy,nve),e(nve,smr),e(Qy,lmr),e(Uo,imr),e(Uo,At),M(Hy,At,null),e(At,dmr),e(At,sve),e(sve,cmr),e(At,fmr),e(At,Od),e(Od,mmr),e(Od,lve),e(lve,gmr),e(Od,hmr),e(Od,BQ),e(BQ,pmr),e(Od,_mr),e(At,umr),M(uT,At,null),e(Uo,bmr),e(Uo,_o),M(Uy,_o,null),e(_o,vmr),e(_o,ive),e(ive,Fmr),e(_o,Tmr),e(_o,Za),e(Za,Mmr),e(Za,dve),e(dve,Emr),e(Za,Cmr),e(Za,cve),e(cve,wmr),e(Za,Amr),e(Za,fve),e(fve,Lmr),e(Za,ymr),e(_o,xmr),e(_o,Vd),e(Vd,bT),e(bT,mve),e(mve,$mr),e(bT,kmr),e(bT,IQ),e(IQ,Smr),e(bT,Rmr),e(Vd,Pmr),e(Vd,vT),e(vT,gve),e(gve,Bmr),e(vT,Imr),e(vT,NQ),e(NQ,Nmr),e(vT,qmr),e(Vd,jmr),e(Vd,FT),e(FT,hve),e(hve,Dmr),e(FT,Gmr),e(FT,qQ),e(qQ,Omr),e(FT,Vmr),e(_o,Xmr),e(_o,TT),e(TT,zmr),e(TT,pve),e(pve,Wmr),e(TT,Qmr),e(TT,_ve),e(_ve,Hmr),e(_o,Umr),M(MT,_o,null),b(f,QOe,u),b(f,Xd,u),e(Xd,ET),e(ET,uve),M(Jy,uve,null),e(Xd,Jmr),e(Xd,bve),e(bve,Ymr),b(f,HOe,u),b(f,Jo,u),M(Yy,Jo,null),e(Jo,Kmr),e(Jo,zd),e(zd,Zmr),e(zd,jQ),e(jQ,egr),e(zd,ogr),e(zd,DQ),e(DQ,rgr),e(zd,tgr),e(Jo,agr),e(Jo,Ky),e(Ky,ngr),e(Ky,vve),e(vve,sgr),e(Ky,lgr),e(Jo,igr),e(Jo,Lt),M(Zy,Lt,null),e(Lt,dgr),e(Lt,Fve),e(Fve,cgr),e(Lt,fgr),e(Lt,Wd),e(Wd,mgr),e(Wd,Tve),e(Tve,ggr),e(Wd,hgr),e(Wd,GQ),e(GQ,pgr),e(Wd,_gr),e(Lt,ugr),M(CT,Lt,null),e(Jo,bgr),e(Jo,uo),M(e9,uo,null),e(uo,vgr),e(uo,Mve),e(Mve,Fgr),e(uo,Tgr),e(uo,en),e(en,Mgr),e(en,Eve),e(Eve,Egr),e(en,Cgr),e(en,Cve),e(Cve,wgr),e(en,Agr),e(en,wve),e(wve,Lgr),e(en,ygr),e(uo,xgr),e(uo,o9),e(o9,wT),e(wT,Ave),e(Ave,$gr),e(wT,kgr),e(wT,OQ),e(OQ,Sgr),e(wT,Rgr),e(o9,Pgr),e(o9,AT),e(AT,Lve),e(Lve,Bgr),e(AT,Igr),e(AT,VQ),e(VQ,Ngr),e(AT,qgr),e(uo,jgr),e(uo,LT),e(LT,Dgr),e(LT,yve),e(yve,Ggr),e(LT,Ogr),e(LT,xve),e(xve,Vgr),e(uo,Xgr),M(yT,uo,null),b(f,UOe,u),b(f,Qd,u),e(Qd,xT),e(xT,$ve),M(r9,$ve,null),e(Qd,zgr),e(Qd,kve),e(kve,Wgr),b(f,JOe,u),b(f,Yo,u),M(t9,Yo,null),e(Yo,Qgr),e(Yo,Hd),e(Hd,Hgr),e(Hd,XQ),e(XQ,Ugr),e(Hd,Jgr),e(Hd,zQ),e(zQ,Ygr),e(Hd,Kgr),e(Yo,Zgr),e(Yo,a9),e(a9,ehr),e(a9,Sve),e(Sve,ohr),e(a9,rhr),e(Yo,thr),e(Yo,yt),M(n9,yt,null),e(yt,ahr),e(yt,Rve),e(Rve,nhr),e(yt,shr),e(yt,Ud),e(Ud,lhr),e(Ud,Pve),e(Pve,ihr),e(Ud,dhr),e(Ud,WQ),e(WQ,chr),e(Ud,fhr),e(yt,mhr),M($T,yt,null),e(Yo,ghr),e(Yo,bo),M(s9,bo,null),e(bo,hhr),e(bo,Bve),e(Bve,phr),e(bo,_hr),e(bo,on),e(on,uhr),e(on,Ive),e(Ive,bhr),e(on,vhr),e(on,Nve),e(Nve,Fhr),e(on,Thr),e(on,qve),e(qve,Mhr),e(on,Ehr),e(bo,Chr),e(bo,jve),e(jve,kT),e(kT,Dve),e(Dve,whr),e(kT,Ahr),e(kT,QQ),e(QQ,Lhr),e(kT,yhr),e(bo,xhr),e(bo,ST),e(ST,$hr),e(ST,Gve),e(Gve,khr),e(ST,Shr),e(ST,Ove),e(Ove,Rhr),e(bo,Phr),M(RT,bo,null),b(f,YOe,u),b(f,Jd,u),e(Jd,PT),e(PT,Vve),M(l9,Vve,null),e(Jd,Bhr),e(Jd,Xve),e(Xve,Ihr),b(f,KOe,u),b(f,Ko,u),M(i9,Ko,null),e(Ko,Nhr),e(Ko,Yd),e(Yd,qhr),e(Yd,HQ),e(HQ,jhr),e(Yd,Dhr),e(Yd,UQ),e(UQ,Ghr),e(Yd,Ohr),e(Ko,Vhr),e(Ko,d9),e(d9,Xhr),e(d9,zve),e(zve,zhr),e(d9,Whr),e(Ko,Qhr),e(Ko,xt),M(c9,xt,null),e(xt,Hhr),e(xt,Wve),e(Wve,Uhr),e(xt,Jhr),e(xt,Kd),e(Kd,Yhr),e(Kd,Qve),e(Qve,Khr),e(Kd,Zhr),e(Kd,JQ),e(JQ,epr),e(Kd,opr),e(xt,rpr),M(BT,xt,null),e(Ko,tpr),e(Ko,vo),M(f9,vo,null),e(vo,apr),e(vo,Hve),e(Hve,npr),e(vo,spr),e(vo,rn),e(rn,lpr),e(rn,Uve),e(Uve,ipr),e(rn,dpr),e(rn,Jve),e(Jve,cpr),e(rn,fpr),e(rn,Yve),e(Yve,mpr),e(rn,gpr),e(vo,hpr),e(vo,tn),e(tn,IT),e(IT,Kve),e(Kve,ppr),e(IT,_pr),e(IT,YQ),e(YQ,upr),e(IT,bpr),e(tn,vpr),e(tn,NT),e(NT,Zve),e(Zve,Fpr),e(NT,Tpr),e(NT,KQ),e(KQ,Mpr),e(NT,Epr),e(tn,Cpr),e(tn,qT),e(qT,e0e),e(e0e,wpr),e(qT,Apr),e(qT,ZQ),e(ZQ,Lpr),e(qT,ypr),e(tn,xpr),e(tn,jT),e(jT,o0e),e(o0e,$pr),e(jT,kpr),e(jT,eH),e(eH,Spr),e(jT,Rpr),e(vo,Ppr),e(vo,DT),e(DT,Bpr),e(DT,r0e),e(r0e,Ipr),e(DT,Npr),e(DT,t0e),e(t0e,qpr),e(vo,jpr),M(GT,vo,null),b(f,ZOe,u),b(f,Zd,u),e(Zd,OT),e(OT,a0e),M(m9,a0e,null),e(Zd,Dpr),e(Zd,n0e),e(n0e,Gpr),b(f,eVe,u),b(f,Zo,u),M(g9,Zo,null),e(Zo,Opr),e(Zo,ec),e(ec,Vpr),e(ec,oH),e(oH,Xpr),e(ec,zpr),e(ec,rH),e(rH,Wpr),e(ec,Qpr),e(Zo,Hpr),e(Zo,h9),e(h9,Upr),e(h9,s0e),e(s0e,Jpr),e(h9,Ypr),e(Zo,Kpr),e(Zo,$t),M(p9,$t,null),e($t,Zpr),e($t,l0e),e(l0e,e_r),e($t,o_r),e($t,oc),e(oc,r_r),e(oc,i0e),e(i0e,t_r),e(oc,a_r),e(oc,tH),e(tH,n_r),e(oc,s_r),e($t,l_r),M(VT,$t,null),e(Zo,i_r),e(Zo,Fo),M(_9,Fo,null),e(Fo,d_r),e(Fo,d0e),e(d0e,c_r),e(Fo,f_r),e(Fo,an),e(an,m_r),e(an,c0e),e(c0e,g_r),e(an,h_r),e(an,f0e),e(f0e,p_r),e(an,__r),e(an,m0e),e(m0e,u_r),e(an,b_r),e(Fo,v_r),e(Fo,g0e),e(g0e,XT),e(XT,h0e),e(h0e,F_r),e(XT,T_r),e(XT,aH),e(aH,M_r),e(XT,E_r),e(Fo,C_r),e(Fo,zT),e(zT,w_r),e(zT,p0e),e(p0e,A_r),e(zT,L_r),e(zT,_0e),e(_0e,y_r),e(Fo,x_r),M(WT,Fo,null),b(f,oVe,u),b(f,rc,u),e(rc,QT),e(QT,u0e),M(u9,u0e,null),e(rc,$_r),e(rc,b0e),e(b0e,k_r),b(f,rVe,u),b(f,er,u),M(b9,er,null),e(er,S_r),e(er,tc),e(tc,R_r),e(tc,nH),e(nH,P_r),e(tc,B_r),e(tc,sH),e(sH,I_r),e(tc,N_r),e(er,q_r),e(er,v9),e(v9,j_r),e(v9,v0e),e(v0e,D_r),e(v9,G_r),e(er,O_r),e(er,kt),M(F9,kt,null),e(kt,V_r),e(kt,F0e),e(F0e,X_r),e(kt,z_r),e(kt,ac),e(ac,W_r),e(ac,T0e),e(T0e,Q_r),e(ac,H_r),e(ac,lH),e(lH,U_r),e(ac,J_r),e(kt,Y_r),M(HT,kt,null),e(er,K_r),e(er,yr),M(T9,yr,null),e(yr,Z_r),e(yr,M0e),e(M0e,eur),e(yr,our),e(yr,nn),e(nn,rur),e(nn,E0e),e(E0e,tur),e(nn,aur),e(nn,C0e),e(C0e,nur),e(nn,sur),e(nn,w0e),e(w0e,lur),e(nn,iur),e(yr,dur),e(yr,q),e(q,UT),e(UT,A0e),e(A0e,cur),e(UT,fur),e(UT,iH),e(iH,mur),e(UT,gur),e(q,hur),e(q,JT),e(JT,L0e),e(L0e,pur),e(JT,_ur),e(JT,dH),e(dH,uur),e(JT,bur),e(q,vur),e(q,YT),e(YT,y0e),e(y0e,Fur),e(YT,Tur),e(YT,cH),e(cH,Mur),e(YT,Eur),e(q,Cur),e(q,KT),e(KT,x0e),e(x0e,wur),e(KT,Aur),e(KT,fH),e(fH,Lur),e(KT,yur),e(q,xur),e(q,ZT),e(ZT,$0e),e($0e,$ur),e(ZT,kur),e(ZT,mH),e(mH,Sur),e(ZT,Rur),e(q,Pur),e(q,e7),e(e7,k0e),e(k0e,Bur),e(e7,Iur),e(e7,gH),e(gH,Nur),e(e7,qur),e(q,jur),e(q,o7),e(o7,S0e),e(S0e,Dur),e(o7,Gur),e(o7,hH),e(hH,Our),e(o7,Vur),e(q,Xur),e(q,r7),e(r7,R0e),e(R0e,zur),e(r7,Wur),e(r7,pH),e(pH,Qur),e(r7,Hur),e(q,Uur),e(q,t7),e(t7,P0e),e(P0e,Jur),e(t7,Yur),e(t7,_H),e(_H,Kur),e(t7,Zur),e(q,e1r),e(q,a7),e(a7,B0e),e(B0e,o1r),e(a7,r1r),e(a7,uH),e(uH,t1r),e(a7,a1r),e(q,n1r),e(q,n7),e(n7,I0e),e(I0e,s1r),e(n7,l1r),e(n7,bH),e(bH,i1r),e(n7,d1r),e(q,c1r),e(q,s7),e(s7,N0e),e(N0e,f1r),e(s7,m1r),e(s7,vH),e(vH,g1r),e(s7,h1r),e(q,p1r),e(q,l7),e(l7,q0e),e(q0e,_1r),e(l7,u1r),e(l7,FH),e(FH,b1r),e(l7,v1r),e(q,F1r),e(q,i7),e(i7,j0e),e(j0e,T1r),e(i7,M1r),e(i7,TH),e(TH,E1r),e(i7,C1r),e(q,w1r),e(q,d7),e(d7,D0e),e(D0e,A1r),e(d7,L1r),e(d7,MH),e(MH,y1r),e(d7,x1r),e(q,$1r),e(q,c7),e(c7,G0e),e(G0e,k1r),e(c7,S1r),e(c7,EH),e(EH,R1r),e(c7,P1r),e(q,B1r),e(q,f7),e(f7,O0e),e(O0e,I1r),e(f7,N1r),e(f7,CH),e(CH,q1r),e(f7,j1r),e(q,D1r),e(q,m7),e(m7,V0e),e(V0e,G1r),e(m7,O1r),e(m7,wH),e(wH,V1r),e(m7,X1r),e(q,z1r),e(q,Ws),e(Ws,X0e),e(X0e,W1r),e(Ws,Q1r),e(Ws,AH),e(AH,H1r),e(Ws,U1r),e(Ws,LH),e(LH,J1r),e(Ws,Y1r),e(q,K1r),e(q,g7),e(g7,z0e),e(z0e,Z1r),e(g7,e2r),e(g7,yH),e(yH,o2r),e(g7,r2r),e(q,t2r),e(q,h7),e(h7,W0e),e(W0e,a2r),e(h7,n2r),e(h7,xH),e(xH,s2r),e(h7,l2r),e(q,i2r),e(q,p7),e(p7,Q0e),e(Q0e,d2r),e(p7,c2r),e(p7,$H),e($H,f2r),e(p7,m2r),e(q,g2r),e(q,_7),e(_7,H0e),e(H0e,h2r),e(_7,p2r),e(_7,kH),e(kH,_2r),e(_7,u2r),e(q,b2r),e(q,u7),e(u7,U0e),e(U0e,v2r),e(u7,F2r),e(u7,SH),e(SH,T2r),e(u7,M2r),e(q,E2r),e(q,b7),e(b7,J0e),e(J0e,C2r),e(b7,w2r),e(b7,RH),e(RH,A2r),e(b7,L2r),e(q,y2r),e(q,v7),e(v7,Y0e),e(Y0e,x2r),e(v7,$2r),e(v7,PH),e(PH,k2r),e(v7,S2r),e(q,R2r),e(q,F7),e(F7,K0e),e(K0e,P2r),e(F7,B2r),e(F7,BH),e(BH,I2r),e(F7,N2r),e(q,q2r),e(q,T7),e(T7,Z0e),e(Z0e,j2r),e(T7,D2r),e(T7,IH),e(IH,G2r),e(T7,O2r),e(q,V2r),e(q,M7),e(M7,eFe),e(eFe,X2r),e(M7,z2r),e(M7,NH),e(NH,W2r),e(M7,Q2r),e(q,H2r),e(q,E7),e(E7,oFe),e(oFe,U2r),e(E7,J2r),e(E7,qH),e(qH,Y2r),e(E7,K2r),e(q,Z2r),e(q,C7),e(C7,rFe),e(rFe,ebr),e(C7,obr),e(C7,jH),e(jH,rbr),e(C7,tbr),e(q,abr),e(q,w7),e(w7,tFe),e(tFe,nbr),e(w7,sbr),e(w7,DH),e(DH,lbr),e(w7,ibr),e(q,dbr),e(q,A7),e(A7,aFe),e(aFe,cbr),e(A7,fbr),e(A7,GH),e(GH,mbr),e(A7,gbr),e(q,hbr),e(q,L7),e(L7,nFe),e(nFe,pbr),e(L7,_br),e(L7,OH),e(OH,ubr),e(L7,bbr),e(q,vbr),e(q,y7),e(y7,sFe),e(sFe,Fbr),e(y7,Tbr),e(y7,VH),e(VH,Mbr),e(y7,Ebr),e(q,Cbr),e(q,x7),e(x7,lFe),e(lFe,wbr),e(x7,Abr),e(x7,XH),e(XH,Lbr),e(x7,ybr),e(q,xbr),e(q,$7),e($7,iFe),e(iFe,$br),e($7,kbr),e($7,zH),e(zH,Sbr),e($7,Rbr),e(q,Pbr),e(q,k7),e(k7,dFe),e(dFe,Bbr),e(k7,Ibr),e(k7,WH),e(WH,Nbr),e(k7,qbr),e(q,jbr),e(q,S7),e(S7,cFe),e(cFe,Dbr),e(S7,Gbr),e(S7,QH),e(QH,Obr),e(S7,Vbr),e(q,Xbr),e(q,R7),e(R7,fFe),e(fFe,zbr),e(R7,Wbr),e(R7,HH),e(HH,Qbr),e(R7,Hbr),e(q,Ubr),e(q,P7),e(P7,mFe),e(mFe,Jbr),e(P7,Ybr),e(P7,UH),e(UH,Kbr),e(P7,Zbr),e(q,evr),e(q,B7),e(B7,gFe),e(gFe,ovr),e(B7,rvr),e(B7,JH),e(JH,tvr),e(B7,avr),e(q,nvr),e(q,I7),e(I7,hFe),e(hFe,svr),e(I7,lvr),e(I7,YH),e(YH,ivr),e(I7,dvr),e(q,cvr),e(q,N7),e(N7,pFe),e(pFe,fvr),e(N7,mvr),e(N7,KH),e(KH,gvr),e(N7,hvr),e(q,pvr),e(q,q7),e(q7,_Fe),e(_Fe,_vr),e(q7,uvr),e(q7,ZH),e(ZH,bvr),e(q7,vvr),e(q,Fvr),e(q,j7),e(j7,uFe),e(uFe,Tvr),e(j7,Mvr),e(j7,eU),e(eU,Evr),e(j7,Cvr),e(q,wvr),e(q,D7),e(D7,bFe),e(bFe,Avr),e(D7,Lvr),e(D7,oU),e(oU,yvr),e(D7,xvr),e(q,$vr),e(q,G7),e(G7,vFe),e(vFe,kvr),e(G7,Svr),e(G7,rU),e(rU,Rvr),e(G7,Pvr),e(yr,Bvr),M(O7,yr,null),b(f,tVe,u),b(f,nc,u),e(nc,V7),e(V7,FFe),M(M9,FFe,null),e(nc,Ivr),e(nc,TFe),e(TFe,Nvr),b(f,aVe,u),b(f,or,u),M(E9,or,null),e(or,qvr),e(or,sc),e(sc,jvr),e(sc,tU),e(tU,Dvr),e(sc,Gvr),e(sc,aU),e(aU,Ovr),e(sc,Vvr),e(or,Xvr),e(or,C9),e(C9,zvr),e(C9,MFe),e(MFe,Wvr),e(C9,Qvr),e(or,Hvr),e(or,St),M(w9,St,null),e(St,Uvr),e(St,EFe),e(EFe,Jvr),e(St,Yvr),e(St,lc),e(lc,Kvr),e(lc,CFe),e(CFe,Zvr),e(lc,e0r),e(lc,nU),e(nU,o0r),e(lc,r0r),e(St,t0r),M(X7,St,null),e(or,a0r),e(or,xr),M(A9,xr,null),e(xr,n0r),e(xr,wFe),e(wFe,s0r),e(xr,l0r),e(xr,sn),e(sn,i0r),e(sn,AFe),e(AFe,d0r),e(sn,c0r),e(sn,LFe),e(LFe,f0r),e(sn,m0r),e(sn,yFe),e(yFe,g0r),e(sn,h0r),e(xr,p0r),e(xr,se),e(se,z7),e(z7,xFe),e(xFe,_0r),e(z7,u0r),e(z7,sU),e(sU,b0r),e(z7,v0r),e(se,F0r),e(se,W7),e(W7,$Fe),e($Fe,T0r),e(W7,M0r),e(W7,lU),e(lU,E0r),e(W7,C0r),e(se,w0r),e(se,Q7),e(Q7,kFe),e(kFe,A0r),e(Q7,L0r),e(Q7,iU),e(iU,y0r),e(Q7,x0r),e(se,$0r),e(se,H7),e(H7,SFe),e(SFe,k0r),e(H7,S0r),e(H7,dU),e(dU,R0r),e(H7,P0r),e(se,B0r),e(se,U7),e(U7,RFe),e(RFe,I0r),e(U7,N0r),e(U7,cU),e(cU,q0r),e(U7,j0r),e(se,D0r),e(se,J7),e(J7,PFe),e(PFe,G0r),e(J7,O0r),e(J7,fU),e(fU,V0r),e(J7,X0r),e(se,z0r),e(se,Y7),e(Y7,BFe),e(BFe,W0r),e(Y7,Q0r),e(Y7,mU),e(mU,H0r),e(Y7,U0r),e(se,J0r),e(se,K7),e(K7,IFe),e(IFe,Y0r),e(K7,K0r),e(K7,gU),e(gU,Z0r),e(K7,eFr),e(se,oFr),e(se,Z7),e(Z7,NFe),e(NFe,rFr),e(Z7,tFr),e(Z7,hU),e(hU,aFr),e(Z7,nFr),e(se,sFr),e(se,e8),e(e8,qFe),e(qFe,lFr),e(e8,iFr),e(e8,pU),e(pU,dFr),e(e8,cFr),e(se,fFr),e(se,o8),e(o8,jFe),e(jFe,mFr),e(o8,gFr),e(o8,_U),e(_U,hFr),e(o8,pFr),e(se,_Fr),e(se,r8),e(r8,DFe),e(DFe,uFr),e(r8,bFr),e(r8,uU),e(uU,vFr),e(r8,FFr),e(se,TFr),e(se,t8),e(t8,GFe),e(GFe,MFr),e(t8,EFr),e(t8,bU),e(bU,CFr),e(t8,wFr),e(se,AFr),e(se,a8),e(a8,OFe),e(OFe,LFr),e(a8,yFr),e(a8,vU),e(vU,xFr),e(a8,$Fr),e(se,kFr),e(se,n8),e(n8,VFe),e(VFe,SFr),e(n8,RFr),e(n8,FU),e(FU,PFr),e(n8,BFr),e(se,IFr),e(se,s8),e(s8,XFe),e(XFe,NFr),e(s8,qFr),e(s8,TU),e(TU,jFr),e(s8,DFr),e(se,GFr),e(se,l8),e(l8,zFe),e(zFe,OFr),e(l8,VFr),e(l8,MU),e(MU,XFr),e(l8,zFr),e(se,WFr),e(se,i8),e(i8,WFe),e(WFe,QFr),e(i8,HFr),e(i8,EU),e(EU,UFr),e(i8,JFr),e(se,YFr),e(se,d8),e(d8,QFe),e(QFe,KFr),e(d8,ZFr),e(d8,CU),e(CU,e6r),e(d8,o6r),e(se,r6r),e(se,c8),e(c8,HFe),e(HFe,t6r),e(c8,a6r),e(c8,wU),e(wU,n6r),e(c8,s6r),e(se,l6r),e(se,f8),e(f8,UFe),e(UFe,i6r),e(f8,d6r),e(f8,AU),e(AU,c6r),e(f8,f6r),e(se,m6r),e(se,m8),e(m8,JFe),e(JFe,g6r),e(m8,h6r),e(m8,LU),e(LU,p6r),e(m8,_6r),e(se,u6r),e(se,g8),e(g8,YFe),e(YFe,b6r),e(g8,v6r),e(g8,yU),e(yU,F6r),e(g8,T6r),e(xr,M6r),M(h8,xr,null),b(f,nVe,u),b(f,ic,u),e(ic,p8),e(p8,KFe),M(L9,KFe,null),e(ic,E6r),e(ic,ZFe),e(ZFe,C6r),b(f,sVe,u),b(f,rr,u),M(y9,rr,null),e(rr,w6r),e(rr,dc),e(dc,A6r),e(dc,xU),e(xU,L6r),e(dc,y6r),e(dc,$U),e($U,x6r),e(dc,$6r),e(rr,k6r),e(rr,x9),e(x9,S6r),e(x9,e6e),e(e6e,R6r),e(x9,P6r),e(rr,B6r),e(rr,Rt),M($9,Rt,null),e(Rt,I6r),e(Rt,o6e),e(o6e,N6r),e(Rt,q6r),e(Rt,cc),e(cc,j6r),e(cc,r6e),e(r6e,D6r),e(cc,G6r),e(cc,kU),e(kU,O6r),e(cc,V6r),e(Rt,X6r),M(_8,Rt,null),e(rr,z6r),e(rr,$r),M(k9,$r,null),e($r,W6r),e($r,t6e),e(t6e,Q6r),e($r,H6r),e($r,ln),e(ln,U6r),e(ln,a6e),e(a6e,J6r),e(ln,Y6r),e(ln,n6e),e(n6e,K6r),e(ln,Z6r),e(ln,s6e),e(s6e,eTr),e(ln,oTr),e($r,rTr),e($r,Me),e(Me,u8),e(u8,l6e),e(l6e,tTr),e(u8,aTr),e(u8,SU),e(SU,nTr),e(u8,sTr),e(Me,lTr),e(Me,b8),e(b8,i6e),e(i6e,iTr),e(b8,dTr),e(b8,RU),e(RU,cTr),e(b8,fTr),e(Me,mTr),e(Me,v8),e(v8,d6e),e(d6e,gTr),e(v8,hTr),e(v8,PU),e(PU,pTr),e(v8,_Tr),e(Me,uTr),e(Me,F8),e(F8,c6e),e(c6e,bTr),e(F8,vTr),e(F8,BU),e(BU,FTr),e(F8,TTr),e(Me,MTr),e(Me,T8),e(T8,f6e),e(f6e,ETr),e(T8,CTr),e(T8,IU),e(IU,wTr),e(T8,ATr),e(Me,LTr),e(Me,M8),e(M8,m6e),e(m6e,yTr),e(M8,xTr),e(M8,NU),e(NU,$Tr),e(M8,kTr),e(Me,STr),e(Me,E8),e(E8,g6e),e(g6e,RTr),e(E8,PTr),e(E8,qU),e(qU,BTr),e(E8,ITr),e(Me,NTr),e(Me,C8),e(C8,h6e),e(h6e,qTr),e(C8,jTr),e(C8,jU),e(jU,DTr),e(C8,GTr),e(Me,OTr),e(Me,w8),e(w8,p6e),e(p6e,VTr),e(w8,XTr),e(w8,DU),e(DU,zTr),e(w8,WTr),e(Me,QTr),e(Me,A8),e(A8,_6e),e(_6e,HTr),e(A8,UTr),e(A8,GU),e(GU,JTr),e(A8,YTr),e(Me,KTr),e(Me,L8),e(L8,u6e),e(u6e,ZTr),e(L8,e7r),e(L8,OU),e(OU,o7r),e(L8,r7r),e(Me,t7r),e(Me,y8),e(y8,b6e),e(b6e,a7r),e(y8,n7r),e(y8,VU),e(VU,s7r),e(y8,l7r),e(Me,i7r),e(Me,x8),e(x8,v6e),e(v6e,d7r),e(x8,c7r),e(x8,XU),e(XU,f7r),e(x8,m7r),e($r,g7r),M($8,$r,null),b(f,lVe,u),b(f,fc,u),e(fc,k8),e(k8,F6e),M(S9,F6e,null),e(fc,h7r),e(fc,T6e),e(T6e,p7r),b(f,iVe,u),b(f,tr,u),M(R9,tr,null),e(tr,_7r),e(tr,mc),e(mc,u7r),e(mc,zU),e(zU,b7r),e(mc,v7r),e(mc,WU),e(WU,F7r),e(mc,T7r),e(tr,M7r),e(tr,P9),e(P9,E7r),e(P9,M6e),e(M6e,C7r),e(P9,w7r),e(tr,A7r),e(tr,Pt),M(B9,Pt,null),e(Pt,L7r),e(Pt,E6e),e(E6e,y7r),e(Pt,x7r),e(Pt,gc),e(gc,$7r),e(gc,C6e),e(C6e,k7r),e(gc,S7r),e(gc,QU),e(QU,R7r),e(gc,P7r),e(Pt,B7r),M(S8,Pt,null),e(tr,I7r),e(tr,kr),M(I9,kr,null),e(kr,N7r),e(kr,w6e),e(w6e,q7r),e(kr,j7r),e(kr,dn),e(dn,D7r),e(dn,A6e),e(A6e,G7r),e(dn,O7r),e(dn,L6e),e(L6e,V7r),e(dn,X7r),e(dn,y6e),e(y6e,z7r),e(dn,W7r),e(kr,Q7r),e(kr,rt),e(rt,R8),e(R8,x6e),e(x6e,H7r),e(R8,U7r),e(R8,HU),e(HU,J7r),e(R8,Y7r),e(rt,K7r),e(rt,P8),e(P8,$6e),e($6e,Z7r),e(P8,e8r),e(P8,UU),e(UU,o8r),e(P8,r8r),e(rt,t8r),e(rt,Qs),e(Qs,k6e),e(k6e,a8r),e(Qs,n8r),e(Qs,JU),e(JU,s8r),e(Qs,l8r),e(Qs,YU),e(YU,i8r),e(Qs,d8r),e(rt,c8r),e(rt,B8),e(B8,S6e),e(S6e,f8r),e(B8,m8r),e(B8,KU),e(KU,g8r),e(B8,h8r),e(rt,p8r),e(rt,I8),e(I8,R6e),e(R6e,_8r),e(I8,u8r),e(I8,ZU),e(ZU,b8r),e(I8,v8r),e(kr,F8r),M(N8,kr,null),b(f,dVe,u),b(f,hc,u),e(hc,q8),e(q8,P6e),M(N9,P6e,null),e(hc,T8r),e(hc,B6e),e(B6e,M8r),b(f,cVe,u),b(f,ar,u),M(q9,ar,null),e(ar,E8r),e(ar,pc),e(pc,C8r),e(pc,eJ),e(eJ,w8r),e(pc,A8r),e(pc,oJ),e(oJ,L8r),e(pc,y8r),e(ar,x8r),e(ar,j9),e(j9,$8r),e(j9,I6e),e(I6e,k8r),e(j9,S8r),e(ar,R8r),e(ar,Bt),M(D9,Bt,null),e(Bt,P8r),e(Bt,N6e),e(N6e,B8r),e(Bt,I8r),e(Bt,_c),e(_c,N8r),e(_c,q6e),e(q6e,q8r),e(_c,j8r),e(_c,rJ),e(rJ,D8r),e(_c,G8r),e(Bt,O8r),M(j8,Bt,null),e(ar,V8r),e(ar,Sr),M(G9,Sr,null),e(Sr,X8r),e(Sr,j6e),e(j6e,z8r),e(Sr,W8r),e(Sr,cn),e(cn,Q8r),e(cn,D6e),e(D6e,H8r),e(cn,U8r),e(cn,G6e),e(G6e,J8r),e(cn,Y8r),e(cn,O6e),e(O6e,K8r),e(cn,Z8r),e(Sr,eMr),e(Sr,ie),e(ie,D8),e(D8,V6e),e(V6e,oMr),e(D8,rMr),e(D8,tJ),e(tJ,tMr),e(D8,aMr),e(ie,nMr),e(ie,G8),e(G8,X6e),e(X6e,sMr),e(G8,lMr),e(G8,aJ),e(aJ,iMr),e(G8,dMr),e(ie,cMr),e(ie,O8),e(O8,z6e),e(z6e,fMr),e(O8,mMr),e(O8,nJ),e(nJ,gMr),e(O8,hMr),e(ie,pMr),e(ie,V8),e(V8,W6e),e(W6e,_Mr),e(V8,uMr),e(V8,sJ),e(sJ,bMr),e(V8,vMr),e(ie,FMr),e(ie,X8),e(X8,Q6e),e(Q6e,TMr),e(X8,MMr),e(X8,lJ),e(lJ,EMr),e(X8,CMr),e(ie,wMr),e(ie,z8),e(z8,H6e),e(H6e,AMr),e(z8,LMr),e(z8,iJ),e(iJ,yMr),e(z8,xMr),e(ie,$Mr),e(ie,W8),e(W8,U6e),e(U6e,kMr),e(W8,SMr),e(W8,dJ),e(dJ,RMr),e(W8,PMr),e(ie,BMr),e(ie,Q8),e(Q8,J6e),e(J6e,IMr),e(Q8,NMr),e(Q8,cJ),e(cJ,qMr),e(Q8,jMr),e(ie,DMr),e(ie,H8),e(H8,Y6e),e(Y6e,GMr),e(H8,OMr),e(H8,fJ),e(fJ,VMr),e(H8,XMr),e(ie,zMr),e(ie,U8),e(U8,K6e),e(K6e,WMr),e(U8,QMr),e(U8,mJ),e(mJ,HMr),e(U8,UMr),e(ie,JMr),e(ie,J8),e(J8,Z6e),e(Z6e,YMr),e(J8,KMr),e(J8,gJ),e(gJ,ZMr),e(J8,eEr),e(ie,oEr),e(ie,Y8),e(Y8,eTe),e(eTe,rEr),e(Y8,tEr),e(Y8,hJ),e(hJ,aEr),e(Y8,nEr),e(ie,sEr),e(ie,K8),e(K8,oTe),e(oTe,lEr),e(K8,iEr),e(K8,pJ),e(pJ,dEr),e(K8,cEr),e(ie,fEr),e(ie,Z8),e(Z8,rTe),e(rTe,mEr),e(Z8,gEr),e(Z8,_J),e(_J,hEr),e(Z8,pEr),e(ie,_Er),e(ie,eM),e(eM,tTe),e(tTe,uEr),e(eM,bEr),e(eM,uJ),e(uJ,vEr),e(eM,FEr),e(ie,TEr),e(ie,oM),e(oM,aTe),e(aTe,MEr),e(oM,EEr),e(oM,bJ),e(bJ,CEr),e(oM,wEr),e(ie,AEr),e(ie,rM),e(rM,nTe),e(nTe,LEr),e(rM,yEr),e(rM,vJ),e(vJ,xEr),e(rM,$Er),e(ie,kEr),e(ie,tM),e(tM,sTe),e(sTe,SEr),e(tM,REr),e(tM,FJ),e(FJ,PEr),e(tM,BEr),e(ie,IEr),e(ie,aM),e(aM,lTe),e(lTe,NEr),e(aM,qEr),e(aM,TJ),e(TJ,jEr),e(aM,DEr),e(ie,GEr),e(ie,nM),e(nM,iTe),e(iTe,OEr),e(nM,VEr),e(nM,MJ),e(MJ,XEr),e(nM,zEr),e(Sr,WEr),M(sM,Sr,null),b(f,fVe,u),b(f,uc,u),e(uc,lM),e(lM,dTe),M(O9,dTe,null),e(uc,QEr),e(uc,cTe),e(cTe,HEr),b(f,mVe,u),b(f,nr,u),M(V9,nr,null),e(nr,UEr),e(nr,bc),e(bc,JEr),e(bc,EJ),e(EJ,YEr),e(bc,KEr),e(bc,CJ),e(CJ,ZEr),e(bc,e4r),e(nr,o4r),e(nr,X9),e(X9,r4r),e(X9,fTe),e(fTe,t4r),e(X9,a4r),e(nr,n4r),e(nr,It),M(z9,It,null),e(It,s4r),e(It,mTe),e(mTe,l4r),e(It,i4r),e(It,vc),e(vc,d4r),e(vc,gTe),e(gTe,c4r),e(vc,f4r),e(vc,wJ),e(wJ,m4r),e(vc,g4r),e(It,h4r),M(iM,It,null),e(nr,p4r),e(nr,Rr),M(W9,Rr,null),e(Rr,_4r),e(Rr,hTe),e(hTe,u4r),e(Rr,b4r),e(Rr,fn),e(fn,v4r),e(fn,pTe),e(pTe,F4r),e(fn,T4r),e(fn,_Te),e(_Te,M4r),e(fn,E4r),e(fn,uTe),e(uTe,C4r),e(fn,w4r),e(Rr,A4r),e(Rr,ye),e(ye,dM),e(dM,bTe),e(bTe,L4r),e(dM,y4r),e(dM,AJ),e(AJ,x4r),e(dM,$4r),e(ye,k4r),e(ye,cM),e(cM,vTe),e(vTe,S4r),e(cM,R4r),e(cM,LJ),e(LJ,P4r),e(cM,B4r),e(ye,I4r),e(ye,fM),e(fM,FTe),e(FTe,N4r),e(fM,q4r),e(fM,yJ),e(yJ,j4r),e(fM,D4r),e(ye,G4r),e(ye,mM),e(mM,TTe),e(TTe,O4r),e(mM,V4r),e(mM,xJ),e(xJ,X4r),e(mM,z4r),e(ye,W4r),e(ye,gM),e(gM,MTe),e(MTe,Q4r),e(gM,H4r),e(gM,$J),e($J,U4r),e(gM,J4r),e(ye,Y4r),e(ye,hM),e(hM,ETe),e(ETe,K4r),e(hM,Z4r),e(hM,kJ),e(kJ,eCr),e(hM,oCr),e(ye,rCr),e(ye,pM),e(pM,CTe),e(CTe,tCr),e(pM,aCr),e(pM,SJ),e(SJ,nCr),e(pM,sCr),e(ye,lCr),e(ye,_M),e(_M,wTe),e(wTe,iCr),e(_M,dCr),e(_M,RJ),e(RJ,cCr),e(_M,fCr),e(ye,mCr),e(ye,uM),e(uM,ATe),e(ATe,gCr),e(uM,hCr),e(uM,PJ),e(PJ,pCr),e(uM,_Cr),e(ye,uCr),e(ye,bM),e(bM,LTe),e(LTe,bCr),e(bM,vCr),e(bM,BJ),e(BJ,FCr),e(bM,TCr),e(Rr,MCr),M(vM,Rr,null),b(f,gVe,u),b(f,Fc,u),e(Fc,FM),e(FM,yTe),M(Q9,yTe,null),e(Fc,ECr),e(Fc,xTe),e(xTe,CCr),b(f,hVe,u),b(f,sr,u),M(H9,sr,null),e(sr,wCr),e(sr,Tc),e(Tc,ACr),e(Tc,IJ),e(IJ,LCr),e(Tc,yCr),e(Tc,NJ),e(NJ,xCr),e(Tc,$Cr),e(sr,kCr),e(sr,U9),e(U9,SCr),e(U9,$Te),e($Te,RCr),e(U9,PCr),e(sr,BCr),e(sr,Nt),M(J9,Nt,null),e(Nt,ICr),e(Nt,kTe),e(kTe,NCr),e(Nt,qCr),e(Nt,Mc),e(Mc,jCr),e(Mc,STe),e(STe,DCr),e(Mc,GCr),e(Mc,qJ),e(qJ,OCr),e(Mc,VCr),e(Nt,XCr),M(TM,Nt,null),e(sr,zCr),e(sr,Pr),M(Y9,Pr,null),e(Pr,WCr),e(Pr,RTe),e(RTe,QCr),e(Pr,HCr),e(Pr,mn),e(mn,UCr),e(mn,PTe),e(PTe,JCr),e(mn,YCr),e(mn,BTe),e(BTe,KCr),e(mn,ZCr),e(mn,ITe),e(ITe,e5r),e(mn,o5r),e(Pr,r5r),e(Pr,te),e(te,MM),e(MM,NTe),e(NTe,t5r),e(MM,a5r),e(MM,jJ),e(jJ,n5r),e(MM,s5r),e(te,l5r),e(te,EM),e(EM,qTe),e(qTe,i5r),e(EM,d5r),e(EM,DJ),e(DJ,c5r),e(EM,f5r),e(te,m5r),e(te,CM),e(CM,jTe),e(jTe,g5r),e(CM,h5r),e(CM,GJ),e(GJ,p5r),e(CM,_5r),e(te,u5r),e(te,wM),e(wM,DTe),e(DTe,b5r),e(wM,v5r),e(wM,OJ),e(OJ,F5r),e(wM,T5r),e(te,M5r),e(te,AM),e(AM,GTe),e(GTe,E5r),e(AM,C5r),e(AM,VJ),e(VJ,w5r),e(AM,A5r),e(te,L5r),e(te,LM),e(LM,OTe),e(OTe,y5r),e(LM,x5r),e(LM,XJ),e(XJ,$5r),e(LM,k5r),e(te,S5r),e(te,yM),e(yM,VTe),e(VTe,R5r),e(yM,P5r),e(yM,zJ),e(zJ,B5r),e(yM,I5r),e(te,N5r),e(te,xM),e(xM,XTe),e(XTe,q5r),e(xM,j5r),e(xM,WJ),e(WJ,D5r),e(xM,G5r),e(te,O5r),e(te,$M),e($M,zTe),e(zTe,V5r),e($M,X5r),e($M,QJ),e(QJ,z5r),e($M,W5r),e(te,Q5r),e(te,kM),e(kM,WTe),e(WTe,H5r),e(kM,U5r),e(kM,HJ),e(HJ,J5r),e(kM,Y5r),e(te,K5r),e(te,SM),e(SM,QTe),e(QTe,Z5r),e(SM,e3r),e(SM,UJ),e(UJ,o3r),e(SM,r3r),e(te,t3r),e(te,RM),e(RM,HTe),e(HTe,a3r),e(RM,n3r),e(RM,JJ),e(JJ,s3r),e(RM,l3r),e(te,i3r),e(te,PM),e(PM,UTe),e(UTe,d3r),e(PM,c3r),e(PM,YJ),e(YJ,f3r),e(PM,m3r),e(te,g3r),e(te,BM),e(BM,JTe),e(JTe,h3r),e(BM,p3r),e(BM,KJ),e(KJ,_3r),e(BM,u3r),e(te,b3r),e(te,IM),e(IM,YTe),e(YTe,v3r),e(IM,F3r),e(IM,ZJ),e(ZJ,T3r),e(IM,M3r),e(te,E3r),e(te,NM),e(NM,KTe),e(KTe,C3r),e(NM,w3r),e(NM,eY),e(eY,A3r),e(NM,L3r),e(te,y3r),e(te,qM),e(qM,ZTe),e(ZTe,x3r),e(qM,$3r),e(qM,oY),e(oY,k3r),e(qM,S3r),e(te,R3r),e(te,jM),e(jM,e7e),e(e7e,P3r),e(jM,B3r),e(jM,rY),e(rY,I3r),e(jM,N3r),e(te,q3r),e(te,DM),e(DM,o7e),e(o7e,j3r),e(DM,D3r),e(DM,tY),e(tY,G3r),e(DM,O3r),e(te,V3r),e(te,GM),e(GM,r7e),e(r7e,X3r),e(GM,z3r),e(GM,aY),e(aY,W3r),e(GM,Q3r),e(te,H3r),e(te,OM),e(OM,t7e),e(t7e,U3r),e(OM,J3r),e(OM,nY),e(nY,Y3r),e(OM,K3r),e(te,Z3r),e(te,VM),e(VM,a7e),e(a7e,ewr),e(VM,owr),e(VM,sY),e(sY,rwr),e(VM,twr),e(te,awr),e(te,XM),e(XM,n7e),e(n7e,nwr),e(XM,swr),e(XM,lY),e(lY,lwr),e(XM,iwr),e(te,dwr),e(te,zM),e(zM,s7e),e(s7e,cwr),e(zM,fwr),e(zM,iY),e(iY,mwr),e(zM,gwr),e(te,hwr),e(te,WM),e(WM,l7e),e(l7e,pwr),e(WM,_wr),e(WM,dY),e(dY,uwr),e(WM,bwr),e(te,vwr),e(te,QM),e(QM,i7e),e(i7e,Fwr),e(QM,Twr),e(QM,cY),e(cY,Mwr),e(QM,Ewr),e(Pr,Cwr),M(HM,Pr,null),b(f,pVe,u),b(f,Ec,u),e(Ec,UM),e(UM,d7e),M(K9,d7e,null),e(Ec,wwr),e(Ec,c7e),e(c7e,Awr),b(f,_Ve,u),b(f,lr,u),M(Z9,lr,null),e(lr,Lwr),e(lr,Cc),e(Cc,ywr),e(Cc,fY),e(fY,xwr),e(Cc,$wr),e(Cc,mY),e(mY,kwr),e(Cc,Swr),e(lr,Rwr),e(lr,ex),e(ex,Pwr),e(ex,f7e),e(f7e,Bwr),e(ex,Iwr),e(lr,Nwr),e(lr,qt),M(ox,qt,null),e(qt,qwr),e(qt,m7e),e(m7e,jwr),e(qt,Dwr),e(qt,wc),e(wc,Gwr),e(wc,g7e),e(g7e,Owr),e(wc,Vwr),e(wc,gY),e(gY,Xwr),e(wc,zwr),e(qt,Wwr),M(JM,qt,null),e(lr,Qwr),e(lr,Br),M(rx,Br,null),e(Br,Hwr),e(Br,h7e),e(h7e,Uwr),e(Br,Jwr),e(Br,gn),e(gn,Ywr),e(gn,p7e),e(p7e,Kwr),e(gn,Zwr),e(gn,_7e),e(_7e,eAr),e(gn,oAr),e(gn,u7e),e(u7e,rAr),e(gn,tAr),e(Br,aAr),e(Br,_e),e(_e,YM),e(YM,b7e),e(b7e,nAr),e(YM,sAr),e(YM,hY),e(hY,lAr),e(YM,iAr),e(_e,dAr),e(_e,KM),e(KM,v7e),e(v7e,cAr),e(KM,fAr),e(KM,pY),e(pY,mAr),e(KM,gAr),e(_e,hAr),e(_e,ZM),e(ZM,F7e),e(F7e,pAr),e(ZM,_Ar),e(ZM,_Y),e(_Y,uAr),e(ZM,bAr),e(_e,vAr),e(_e,eE),e(eE,T7e),e(T7e,FAr),e(eE,TAr),e(eE,uY),e(uY,MAr),e(eE,EAr),e(_e,CAr),e(_e,oE),e(oE,M7e),e(M7e,wAr),e(oE,AAr),e(oE,bY),e(bY,LAr),e(oE,yAr),e(_e,xAr),e(_e,rE),e(rE,E7e),e(E7e,$Ar),e(rE,kAr),e(rE,vY),e(vY,SAr),e(rE,RAr),e(_e,PAr),e(_e,tE),e(tE,C7e),e(C7e,BAr),e(tE,IAr),e(tE,FY),e(FY,NAr),e(tE,qAr),e(_e,jAr),e(_e,aE),e(aE,w7e),e(w7e,DAr),e(aE,GAr),e(aE,TY),e(TY,OAr),e(aE,VAr),e(_e,XAr),e(_e,nE),e(nE,A7e),e(A7e,zAr),e(nE,WAr),e(nE,MY),e(MY,QAr),e(nE,HAr),e(_e,UAr),e(_e,sE),e(sE,L7e),e(L7e,JAr),e(sE,YAr),e(sE,EY),e(EY,KAr),e(sE,ZAr),e(_e,eLr),e(_e,lE),e(lE,y7e),e(y7e,oLr),e(lE,rLr),e(lE,CY),e(CY,tLr),e(lE,aLr),e(_e,nLr),e(_e,iE),e(iE,x7e),e(x7e,sLr),e(iE,lLr),e(iE,wY),e(wY,iLr),e(iE,dLr),e(_e,cLr),e(_e,dE),e(dE,$7e),e($7e,fLr),e(dE,mLr),e(dE,AY),e(AY,gLr),e(dE,hLr),e(_e,pLr),e(_e,cE),e(cE,k7e),e(k7e,_Lr),e(cE,uLr),e(cE,LY),e(LY,bLr),e(cE,vLr),e(_e,FLr),e(_e,fE),e(fE,S7e),e(S7e,TLr),e(fE,MLr),e(fE,yY),e(yY,ELr),e(fE,CLr),e(_e,wLr),e(_e,mE),e(mE,R7e),e(R7e,ALr),e(mE,LLr),e(mE,xY),e(xY,yLr),e(mE,xLr),e(_e,$Lr),e(_e,gE),e(gE,P7e),e(P7e,kLr),e(gE,SLr),e(gE,$Y),e($Y,RLr),e(gE,PLr),e(Br,BLr),M(hE,Br,null),b(f,uVe,u),b(f,Ac,u),e(Ac,pE),e(pE,B7e),M(tx,B7e,null),e(Ac,ILr),e(Ac,I7e),e(I7e,NLr),b(f,bVe,u),b(f,ir,u),M(ax,ir,null),e(ir,qLr),e(ir,Lc),e(Lc,jLr),e(Lc,kY),e(kY,DLr),e(Lc,GLr),e(Lc,SY),e(SY,OLr),e(Lc,VLr),e(ir,XLr),e(ir,nx),e(nx,zLr),e(nx,N7e),e(N7e,WLr),e(nx,QLr),e(ir,HLr),e(ir,jt),M(sx,jt,null),e(jt,ULr),e(jt,q7e),e(q7e,JLr),e(jt,YLr),e(jt,yc),e(yc,KLr),e(yc,j7e),e(j7e,ZLr),e(yc,eyr),e(yc,RY),e(RY,oyr),e(yc,ryr),e(jt,tyr),M(_E,jt,null),e(ir,ayr),e(ir,Ir),M(lx,Ir,null),e(Ir,nyr),e(Ir,D7e),e(D7e,syr),e(Ir,lyr),e(Ir,hn),e(hn,iyr),e(hn,G7e),e(G7e,dyr),e(hn,cyr),e(hn,O7e),e(O7e,fyr),e(hn,myr),e(hn,V7e),e(V7e,gyr),e(hn,hyr),e(Ir,pyr),e(Ir,ix),e(ix,uE),e(uE,X7e),e(X7e,_yr),e(uE,uyr),e(uE,PY),e(PY,byr),e(uE,vyr),e(ix,Fyr),e(ix,bE),e(bE,z7e),e(z7e,Tyr),e(bE,Myr),e(bE,BY),e(BY,Eyr),e(bE,Cyr),e(Ir,wyr),M(vE,Ir,null),b(f,vVe,u),b(f,xc,u),e(xc,FE),e(FE,W7e),M(dx,W7e,null),e(xc,Ayr),e(xc,Q7e),e(Q7e,Lyr),b(f,FVe,u),b(f,dr,u),M(cx,dr,null),e(dr,yyr),e(dr,$c),e($c,xyr),e($c,IY),e(IY,$yr),e($c,kyr),e($c,NY),e(NY,Syr),e($c,Ryr),e(dr,Pyr),e(dr,fx),e(fx,Byr),e(fx,H7e),e(H7e,Iyr),e(fx,Nyr),e(dr,qyr),e(dr,Dt),M(mx,Dt,null),e(Dt,jyr),e(Dt,U7e),e(U7e,Dyr),e(Dt,Gyr),e(Dt,kc),e(kc,Oyr),e(kc,J7e),e(J7e,Vyr),e(kc,Xyr),e(kc,qY),e(qY,zyr),e(kc,Wyr),e(Dt,Qyr),M(TE,Dt,null),e(dr,Hyr),e(dr,Nr),M(gx,Nr,null),e(Nr,Uyr),e(Nr,Y7e),e(Y7e,Jyr),e(Nr,Yyr),e(Nr,pn),e(pn,Kyr),e(pn,K7e),e(K7e,Zyr),e(pn,e9r),e(pn,Z7e),e(Z7e,o9r),e(pn,r9r),e(pn,e8e),e(e8e,t9r),e(pn,a9r),e(Nr,n9r),e(Nr,o8e),e(o8e,ME),e(ME,r8e),e(r8e,s9r),e(ME,l9r),e(ME,jY),e(jY,i9r),e(ME,d9r),e(Nr,c9r),M(EE,Nr,null),b(f,TVe,u),b(f,Sc,u),e(Sc,CE),e(CE,t8e),M(hx,t8e,null),e(Sc,f9r),e(Sc,a8e),e(a8e,m9r),b(f,MVe,u),b(f,cr,u),M(px,cr,null),e(cr,g9r),e(cr,Rc),e(Rc,h9r),e(Rc,DY),e(DY,p9r),e(Rc,_9r),e(Rc,GY),e(GY,u9r),e(Rc,b9r),e(cr,v9r),e(cr,_x),e(_x,F9r),e(_x,n8e),e(n8e,T9r),e(_x,M9r),e(cr,E9r),e(cr,Gt),M(ux,Gt,null),e(Gt,C9r),e(Gt,s8e),e(s8e,w9r),e(Gt,A9r),e(Gt,Pc),e(Pc,L9r),e(Pc,l8e),e(l8e,y9r),e(Pc,x9r),e(Pc,OY),e(OY,$9r),e(Pc,k9r),e(Gt,S9r),M(wE,Gt,null),e(cr,R9r),e(cr,qr),M(bx,qr,null),e(qr,P9r),e(qr,i8e),e(i8e,B9r),e(qr,I9r),e(qr,_n),e(_n,N9r),e(_n,d8e),e(d8e,q9r),e(_n,j9r),e(_n,c8e),e(c8e,D9r),e(_n,G9r),e(_n,f8e),e(f8e,O9r),e(_n,V9r),e(qr,X9r),e(qr,de),e(de,AE),e(AE,m8e),e(m8e,z9r),e(AE,W9r),e(AE,VY),e(VY,Q9r),e(AE,H9r),e(de,U9r),e(de,LE),e(LE,g8e),e(g8e,J9r),e(LE,Y9r),e(LE,XY),e(XY,K9r),e(LE,Z9r),e(de,exr),e(de,yE),e(yE,h8e),e(h8e,oxr),e(yE,rxr),e(yE,zY),e(zY,txr),e(yE,axr),e(de,nxr),e(de,xE),e(xE,p8e),e(p8e,sxr),e(xE,lxr),e(xE,WY),e(WY,ixr),e(xE,dxr),e(de,cxr),e(de,$E),e($E,_8e),e(_8e,fxr),e($E,mxr),e($E,QY),e(QY,gxr),e($E,hxr),e(de,pxr),e(de,kE),e(kE,u8e),e(u8e,_xr),e(kE,uxr),e(kE,HY),e(HY,bxr),e(kE,vxr),e(de,Fxr),e(de,SE),e(SE,b8e),e(b8e,Txr),e(SE,Mxr),e(SE,UY),e(UY,Exr),e(SE,Cxr),e(de,wxr),e(de,RE),e(RE,v8e),e(v8e,Axr),e(RE,Lxr),e(RE,JY),e(JY,yxr),e(RE,xxr),e(de,$xr),e(de,PE),e(PE,F8e),e(F8e,kxr),e(PE,Sxr),e(PE,YY),e(YY,Rxr),e(PE,Pxr),e(de,Bxr),e(de,BE),e(BE,T8e),e(T8e,Ixr),e(BE,Nxr),e(BE,KY),e(KY,qxr),e(BE,jxr),e(de,Dxr),e(de,IE),e(IE,M8e),e(M8e,Gxr),e(IE,Oxr),e(IE,ZY),e(ZY,Vxr),e(IE,Xxr),e(de,zxr),e(de,NE),e(NE,E8e),e(E8e,Wxr),e(NE,Qxr),e(NE,eK),e(eK,Hxr),e(NE,Uxr),e(de,Jxr),e(de,qE),e(qE,C8e),e(C8e,Yxr),e(qE,Kxr),e(qE,oK),e(oK,Zxr),e(qE,e$r),e(de,o$r),e(de,jE),e(jE,w8e),e(w8e,r$r),e(jE,t$r),e(jE,rK),e(rK,a$r),e(jE,n$r),e(de,s$r),e(de,DE),e(DE,A8e),e(A8e,l$r),e(DE,i$r),e(DE,tK),e(tK,d$r),e(DE,c$r),e(de,f$r),e(de,GE),e(GE,L8e),e(L8e,m$r),e(GE,g$r),e(GE,aK),e(aK,h$r),e(GE,p$r),e(de,_$r),e(de,OE),e(OE,y8e),e(y8e,u$r),e(OE,b$r),e(OE,nK),e(nK,v$r),e(OE,F$r),e(de,T$r),e(de,VE),e(VE,x8e),e(x8e,M$r),e(VE,E$r),e(VE,sK),e(sK,C$r),e(VE,w$r),e(de,A$r),e(de,XE),e(XE,$8e),e($8e,L$r),e(XE,y$r),e(XE,lK),e(lK,x$r),e(XE,$$r),e(de,k$r),e(de,zE),e(zE,k8e),e(k8e,S$r),e(zE,R$r),e(zE,iK),e(iK,P$r),e(zE,B$r),e(qr,I$r),M(WE,qr,null),b(f,EVe,u),b(f,Bc,u),e(Bc,QE),e(QE,S8e),M(vx,S8e,null),e(Bc,N$r),e(Bc,R8e),e(R8e,q$r),b(f,CVe,u),b(f,fr,u),M(Fx,fr,null),e(fr,j$r),e(fr,Ic),e(Ic,D$r),e(Ic,dK),e(dK,G$r),e(Ic,O$r),e(Ic,cK),e(cK,V$r),e(Ic,X$r),e(fr,z$r),e(fr,Tx),e(Tx,W$r),e(Tx,P8e),e(P8e,Q$r),e(Tx,H$r),e(fr,U$r),e(fr,Ot),M(Mx,Ot,null),e(Ot,J$r),e(Ot,B8e),e(B8e,Y$r),e(Ot,K$r),e(Ot,Nc),e(Nc,Z$r),e(Nc,I8e),e(I8e,ekr),e(Nc,okr),e(Nc,fK),e(fK,rkr),e(Nc,tkr),e(Ot,akr),M(HE,Ot,null),e(fr,nkr),e(fr,jr),M(Ex,jr,null),e(jr,skr),e(jr,N8e),e(N8e,lkr),e(jr,ikr),e(jr,un),e(un,dkr),e(un,q8e),e(q8e,ckr),e(un,fkr),e(un,j8e),e(j8e,mkr),e(un,gkr),e(un,D8e),e(D8e,hkr),e(un,pkr),e(jr,_kr),e(jr,ce),e(ce,UE),e(UE,G8e),e(G8e,ukr),e(UE,bkr),e(UE,mK),e(mK,vkr),e(UE,Fkr),e(ce,Tkr),e(ce,JE),e(JE,O8e),e(O8e,Mkr),e(JE,Ekr),e(JE,gK),e(gK,Ckr),e(JE,wkr),e(ce,Akr),e(ce,YE),e(YE,V8e),e(V8e,Lkr),e(YE,ykr),e(YE,hK),e(hK,xkr),e(YE,$kr),e(ce,kkr),e(ce,KE),e(KE,X8e),e(X8e,Skr),e(KE,Rkr),e(KE,pK),e(pK,Pkr),e(KE,Bkr),e(ce,Ikr),e(ce,ZE),e(ZE,z8e),e(z8e,Nkr),e(ZE,qkr),e(ZE,_K),e(_K,jkr),e(ZE,Dkr),e(ce,Gkr),e(ce,e4),e(e4,W8e),e(W8e,Okr),e(e4,Vkr),e(e4,uK),e(uK,Xkr),e(e4,zkr),e(ce,Wkr),e(ce,o4),e(o4,Q8e),e(Q8e,Qkr),e(o4,Hkr),e(o4,bK),e(bK,Ukr),e(o4,Jkr),e(ce,Ykr),e(ce,r4),e(r4,H8e),e(H8e,Kkr),e(r4,Zkr),e(r4,vK),e(vK,eSr),e(r4,oSr),e(ce,rSr),e(ce,t4),e(t4,U8e),e(U8e,tSr),e(t4,aSr),e(t4,FK),e(FK,nSr),e(t4,sSr),e(ce,lSr),e(ce,a4),e(a4,J8e),e(J8e,iSr),e(a4,dSr),e(a4,TK),e(TK,cSr),e(a4,fSr),e(ce,mSr),e(ce,n4),e(n4,Y8e),e(Y8e,gSr),e(n4,hSr),e(n4,MK),e(MK,pSr),e(n4,_Sr),e(ce,uSr),e(ce,s4),e(s4,K8e),e(K8e,bSr),e(s4,vSr),e(s4,EK),e(EK,FSr),e(s4,TSr),e(ce,MSr),e(ce,l4),e(l4,Z8e),e(Z8e,ESr),e(l4,CSr),e(l4,CK),e(CK,wSr),e(l4,ASr),e(ce,LSr),e(ce,i4),e(i4,eMe),e(eMe,ySr),e(i4,xSr),e(i4,wK),e(wK,$Sr),e(i4,kSr),e(ce,SSr),e(ce,d4),e(d4,oMe),e(oMe,RSr),e(d4,PSr),e(d4,AK),e(AK,BSr),e(d4,ISr),e(ce,NSr),e(ce,c4),e(c4,rMe),e(rMe,qSr),e(c4,jSr),e(c4,LK),e(LK,DSr),e(c4,GSr),e(ce,OSr),e(ce,f4),e(f4,tMe),e(tMe,VSr),e(f4,XSr),e(f4,yK),e(yK,zSr),e(f4,WSr),e(ce,QSr),e(ce,m4),e(m4,aMe),e(aMe,HSr),e(m4,USr),e(m4,xK),e(xK,JSr),e(m4,YSr),e(ce,KSr),e(ce,g4),e(g4,nMe),e(nMe,ZSr),e(g4,eRr),e(g4,$K),e($K,oRr),e(g4,rRr),e(ce,tRr),e(ce,h4),e(h4,sMe),e(sMe,aRr),e(h4,nRr),e(h4,kK),e(kK,sRr),e(h4,lRr),e(jr,iRr),M(p4,jr,null),b(f,wVe,u),b(f,qc,u),e(qc,_4),e(_4,lMe),M(Cx,lMe,null),e(qc,dRr),e(qc,iMe),e(iMe,cRr),b(f,AVe,u),b(f,mr,u),M(wx,mr,null),e(mr,fRr),e(mr,jc),e(jc,mRr),e(jc,SK),e(SK,gRr),e(jc,hRr),e(jc,RK),e(RK,pRr),e(jc,_Rr),e(mr,uRr),e(mr,Ax),e(Ax,bRr),e(Ax,dMe),e(dMe,vRr),e(Ax,FRr),e(mr,TRr),e(mr,Vt),M(Lx,Vt,null),e(Vt,MRr),e(Vt,cMe),e(cMe,ERr),e(Vt,CRr),e(Vt,Dc),e(Dc,wRr),e(Dc,fMe),e(fMe,ARr),e(Dc,LRr),e(Dc,PK),e(PK,yRr),e(Dc,xRr),e(Vt,$Rr),M(u4,Vt,null),e(mr,kRr),e(mr,Dr),M(yx,Dr,null),e(Dr,SRr),e(Dr,mMe),e(mMe,RRr),e(Dr,PRr),e(Dr,bn),e(bn,BRr),e(bn,gMe),e(gMe,IRr),e(bn,NRr),e(bn,hMe),e(hMe,qRr),e(bn,jRr),e(bn,pMe),e(pMe,DRr),e(bn,GRr),e(Dr,ORr),e(Dr,_Me),e(_Me,b4),e(b4,uMe),e(uMe,VRr),e(b4,XRr),e(b4,BK),e(BK,zRr),e(b4,WRr),e(Dr,QRr),M(v4,Dr,null),b(f,LVe,u),b(f,Gc,u),e(Gc,F4),e(F4,bMe),M(xx,bMe,null),e(Gc,HRr),e(Gc,vMe),e(vMe,URr),b(f,yVe,u),b(f,gr,u),M($x,gr,null),e(gr,JRr),e(gr,Oc),e(Oc,YRr),e(Oc,IK),e(IK,KRr),e(Oc,ZRr),e(Oc,NK),e(NK,ePr),e(Oc,oPr),e(gr,rPr),e(gr,kx),e(kx,tPr),e(kx,FMe),e(FMe,aPr),e(kx,nPr),e(gr,sPr),e(gr,Xt),M(Sx,Xt,null),e(Xt,lPr),e(Xt,TMe),e(TMe,iPr),e(Xt,dPr),e(Xt,Vc),e(Vc,cPr),e(Vc,MMe),e(MMe,fPr),e(Vc,mPr),e(Vc,qK),e(qK,gPr),e(Vc,hPr),e(Xt,pPr),M(T4,Xt,null),e(gr,_Pr),e(gr,Gr),M(Rx,Gr,null),e(Gr,uPr),e(Gr,EMe),e(EMe,bPr),e(Gr,vPr),e(Gr,vn),e(vn,FPr),e(vn,CMe),e(CMe,TPr),e(vn,MPr),e(vn,wMe),e(wMe,EPr),e(vn,CPr),e(vn,AMe),e(AMe,wPr),e(vn,APr),e(Gr,LPr),e(Gr,LMe),e(LMe,M4),e(M4,yMe),e(yMe,yPr),e(M4,xPr),e(M4,jK),e(jK,$Pr),e(M4,kPr),e(Gr,SPr),M(E4,Gr,null),b(f,xVe,u),b(f,Xc,u),e(Xc,C4),e(C4,xMe),M(Px,xMe,null),e(Xc,RPr),e(Xc,$Me),e($Me,PPr),b(f,$Ve,u),b(f,hr,u),M(Bx,hr,null),e(hr,BPr),e(hr,zc),e(zc,IPr),e(zc,DK),e(DK,NPr),e(zc,qPr),e(zc,GK),e(GK,jPr),e(zc,DPr),e(hr,GPr),e(hr,Ix),e(Ix,OPr),e(Ix,kMe),e(kMe,VPr),e(Ix,XPr),e(hr,zPr),e(hr,zt),M(Nx,zt,null),e(zt,WPr),e(zt,SMe),e(SMe,QPr),e(zt,HPr),e(zt,Wc),e(Wc,UPr),e(Wc,RMe),e(RMe,JPr),e(Wc,YPr),e(Wc,OK),e(OK,KPr),e(Wc,ZPr),e(zt,eBr),M(w4,zt,null),e(hr,oBr),e(hr,Or),M(qx,Or,null),e(Or,rBr),e(Or,PMe),e(PMe,tBr),e(Or,aBr),e(Or,Fn),e(Fn,nBr),e(Fn,BMe),e(BMe,sBr),e(Fn,lBr),e(Fn,IMe),e(IMe,iBr),e(Fn,dBr),e(Fn,NMe),e(NMe,cBr),e(Fn,fBr),e(Or,mBr),e(Or,oe),e(oe,A4),e(A4,qMe),e(qMe,gBr),e(A4,hBr),e(A4,VK),e(VK,pBr),e(A4,_Br),e(oe,uBr),e(oe,L4),e(L4,jMe),e(jMe,bBr),e(L4,vBr),e(L4,XK),e(XK,FBr),e(L4,TBr),e(oe,MBr),e(oe,y4),e(y4,DMe),e(DMe,EBr),e(y4,CBr),e(y4,zK),e(zK,wBr),e(y4,ABr),e(oe,LBr),e(oe,x4),e(x4,GMe),e(GMe,yBr),e(x4,xBr),e(x4,WK),e(WK,$Br),e(x4,kBr),e(oe,SBr),e(oe,$4),e($4,OMe),e(OMe,RBr),e($4,PBr),e($4,QK),e(QK,BBr),e($4,IBr),e(oe,NBr),e(oe,k4),e(k4,VMe),e(VMe,qBr),e(k4,jBr),e(k4,HK),e(HK,DBr),e(k4,GBr),e(oe,OBr),e(oe,S4),e(S4,XMe),e(XMe,VBr),e(S4,XBr),e(S4,UK),e(UK,zBr),e(S4,WBr),e(oe,QBr),e(oe,R4),e(R4,zMe),e(zMe,HBr),e(R4,UBr),e(R4,JK),e(JK,JBr),e(R4,YBr),e(oe,KBr),e(oe,P4),e(P4,WMe),e(WMe,ZBr),e(P4,eIr),e(P4,YK),e(YK,oIr),e(P4,rIr),e(oe,tIr),e(oe,B4),e(B4,QMe),e(QMe,aIr),e(B4,nIr),e(B4,KK),e(KK,sIr),e(B4,lIr),e(oe,iIr),e(oe,I4),e(I4,HMe),e(HMe,dIr),e(I4,cIr),e(I4,ZK),e(ZK,fIr),e(I4,mIr),e(oe,gIr),e(oe,N4),e(N4,UMe),e(UMe,hIr),e(N4,pIr),e(N4,eZ),e(eZ,_Ir),e(N4,uIr),e(oe,bIr),e(oe,q4),e(q4,JMe),e(JMe,vIr),e(q4,FIr),e(q4,oZ),e(oZ,TIr),e(q4,MIr),e(oe,EIr),e(oe,j4),e(j4,YMe),e(YMe,CIr),e(j4,wIr),e(j4,rZ),e(rZ,AIr),e(j4,LIr),e(oe,yIr),e(oe,D4),e(D4,KMe),e(KMe,xIr),e(D4,$Ir),e(D4,tZ),e(tZ,kIr),e(D4,SIr),e(oe,RIr),e(oe,G4),e(G4,ZMe),e(ZMe,PIr),e(G4,BIr),e(G4,aZ),e(aZ,IIr),e(G4,NIr),e(oe,qIr),e(oe,O4),e(O4,eEe),e(eEe,jIr),e(O4,DIr),e(O4,nZ),e(nZ,GIr),e(O4,OIr),e(oe,VIr),e(oe,V4),e(V4,oEe),e(oEe,XIr),e(V4,zIr),e(V4,sZ),e(sZ,WIr),e(V4,QIr),e(oe,HIr),e(oe,X4),e(X4,rEe),e(rEe,UIr),e(X4,JIr),e(X4,lZ),e(lZ,YIr),e(X4,KIr),e(oe,ZIr),e(oe,z4),e(z4,tEe),e(tEe,eNr),e(z4,oNr),e(z4,iZ),e(iZ,rNr),e(z4,tNr),e(oe,aNr),e(oe,W4),e(W4,aEe),e(aEe,nNr),e(W4,sNr),e(W4,dZ),e(dZ,lNr),e(W4,iNr),e(oe,dNr),e(oe,Q4),e(Q4,nEe),e(nEe,cNr),e(Q4,fNr),e(Q4,cZ),e(cZ,mNr),e(Q4,gNr),e(oe,hNr),e(oe,H4),e(H4,sEe),e(sEe,pNr),e(H4,_Nr),e(H4,fZ),e(fZ,uNr),e(H4,bNr),e(oe,vNr),e(oe,U4),e(U4,lEe),e(lEe,FNr),e(U4,TNr),e(U4,mZ),e(mZ,MNr),e(U4,ENr),e(oe,CNr),e(oe,J4),e(J4,iEe),e(iEe,wNr),e(J4,ANr),e(J4,gZ),e(gZ,LNr),e(J4,yNr),e(oe,xNr),e(oe,Y4),e(Y4,dEe),e(dEe,$Nr),e(Y4,kNr),e(Y4,hZ),e(hZ,SNr),e(Y4,RNr),e(oe,PNr),e(oe,K4),e(K4,cEe),e(cEe,BNr),e(K4,INr),e(K4,pZ),e(pZ,NNr),e(K4,qNr),e(Or,jNr),M(Z4,Or,null),b(f,kVe,u),b(f,Qc,u),e(Qc,eC),e(eC,fEe),M(jx,fEe,null),e(Qc,DNr),e(Qc,mEe),e(mEe,GNr),b(f,SVe,u),b(f,pr,u),M(Dx,pr,null),e(pr,ONr),e(pr,Hc),e(Hc,VNr),e(Hc,_Z),e(_Z,XNr),e(Hc,zNr),e(Hc,uZ),e(uZ,WNr),e(Hc,QNr),e(pr,HNr),e(pr,Gx),e(Gx,UNr),e(Gx,gEe),e(gEe,JNr),e(Gx,YNr),e(pr,KNr),e(pr,Wt),M(Ox,Wt,null),e(Wt,ZNr),e(Wt,hEe),e(hEe,eqr),e(Wt,oqr),e(Wt,Uc),e(Uc,rqr),e(Uc,pEe),e(pEe,tqr),e(Uc,aqr),e(Uc,bZ),e(bZ,nqr),e(Uc,sqr),e(Wt,lqr),M(oC,Wt,null),e(pr,iqr),e(pr,Vr),M(Vx,Vr,null),e(Vr,dqr),e(Vr,_Ee),e(_Ee,cqr),e(Vr,fqr),e(Vr,Tn),e(Tn,mqr),e(Tn,uEe),e(uEe,gqr),e(Tn,hqr),e(Tn,bEe),e(bEe,pqr),e(Tn,_qr),e(Tn,vEe),e(vEe,uqr),e(Tn,bqr),e(Vr,vqr),e(Vr,xe),e(xe,rC),e(rC,FEe),e(FEe,Fqr),e(rC,Tqr),e(rC,vZ),e(vZ,Mqr),e(rC,Eqr),e(xe,Cqr),e(xe,tC),e(tC,TEe),e(TEe,wqr),e(tC,Aqr),e(tC,FZ),e(FZ,Lqr),e(tC,yqr),e(xe,xqr),e(xe,aC),e(aC,MEe),e(MEe,$qr),e(aC,kqr),e(aC,TZ),e(TZ,Sqr),e(aC,Rqr),e(xe,Pqr),e(xe,nC),e(nC,EEe),e(EEe,Bqr),e(nC,Iqr),e(nC,MZ),e(MZ,Nqr),e(nC,qqr),e(xe,jqr),e(xe,sC),e(sC,CEe),e(CEe,Dqr),e(sC,Gqr),e(sC,EZ),e(EZ,Oqr),e(sC,Vqr),e(xe,Xqr),e(xe,lC),e(lC,wEe),e(wEe,zqr),e(lC,Wqr),e(lC,CZ),e(CZ,Qqr),e(lC,Hqr),e(xe,Uqr),e(xe,iC),e(iC,AEe),e(AEe,Jqr),e(iC,Yqr),e(iC,wZ),e(wZ,Kqr),e(iC,Zqr),e(xe,ejr),e(xe,dC),e(dC,LEe),e(LEe,ojr),e(dC,rjr),e(dC,AZ),e(AZ,tjr),e(dC,ajr),e(xe,njr),e(xe,cC),e(cC,yEe),e(yEe,sjr),e(cC,ljr),e(cC,LZ),e(LZ,ijr),e(cC,djr),e(xe,cjr),e(xe,fC),e(fC,xEe),e(xEe,fjr),e(fC,mjr),e(fC,yZ),e(yZ,gjr),e(fC,hjr),e(Vr,pjr),M(mC,Vr,null),b(f,RVe,u),b(f,Jc,u),e(Jc,gC),e(gC,$Ee),M(Xx,$Ee,null),e(Jc,_jr),e(Jc,kEe),e(kEe,ujr),b(f,PVe,u),b(f,_r,u),M(zx,_r,null),e(_r,bjr),e(_r,Yc),e(Yc,vjr),e(Yc,xZ),e(xZ,Fjr),e(Yc,Tjr),e(Yc,$Z),e($Z,Mjr),e(Yc,Ejr),e(_r,Cjr),e(_r,Wx),e(Wx,wjr),e(Wx,SEe),e(SEe,Ajr),e(Wx,Ljr),e(_r,yjr),e(_r,Qt),M(Qx,Qt,null),e(Qt,xjr),e(Qt,REe),e(REe,$jr),e(Qt,kjr),e(Qt,Kc),e(Kc,Sjr),e(Kc,PEe),e(PEe,Rjr),e(Kc,Pjr),e(Kc,kZ),e(kZ,Bjr),e(Kc,Ijr),e(Qt,Njr),M(hC,Qt,null),e(_r,qjr),e(_r,Xr),M(Hx,Xr,null),e(Xr,jjr),e(Xr,BEe),e(BEe,Djr),e(Xr,Gjr),e(Xr,Mn),e(Mn,Ojr),e(Mn,IEe),e(IEe,Vjr),e(Mn,Xjr),e(Mn,NEe),e(NEe,zjr),e(Mn,Wjr),e(Mn,qEe),e(qEe,Qjr),e(Mn,Hjr),e(Xr,Ujr),e(Xr,Ee),e(Ee,pC),e(pC,jEe),e(jEe,Jjr),e(pC,Yjr),e(pC,SZ),e(SZ,Kjr),e(pC,Zjr),e(Ee,eDr),e(Ee,_C),e(_C,DEe),e(DEe,oDr),e(_C,rDr),e(_C,RZ),e(RZ,tDr),e(_C,aDr),e(Ee,nDr),e(Ee,uC),e(uC,GEe),e(GEe,sDr),e(uC,lDr),e(uC,PZ),e(PZ,iDr),e(uC,dDr),e(Ee,cDr),e(Ee,bC),e(bC,OEe),e(OEe,fDr),e(bC,mDr),e(bC,BZ),e(BZ,gDr),e(bC,hDr),e(Ee,pDr),e(Ee,vC),e(vC,VEe),e(VEe,_Dr),e(vC,uDr),e(vC,IZ),e(IZ,bDr),e(vC,vDr),e(Ee,FDr),e(Ee,FC),e(FC,XEe),e(XEe,TDr),e(FC,MDr),e(FC,NZ),e(NZ,EDr),e(FC,CDr),e(Ee,wDr),e(Ee,TC),e(TC,zEe),e(zEe,ADr),e(TC,LDr),e(TC,qZ),e(qZ,yDr),e(TC,xDr),e(Ee,$Dr),e(Ee,MC),e(MC,WEe),e(WEe,kDr),e(MC,SDr),e(MC,jZ),e(jZ,RDr),e(MC,PDr),e(Ee,BDr),e(Ee,EC),e(EC,QEe),e(QEe,IDr),e(EC,NDr),e(EC,DZ),e(DZ,qDr),e(EC,jDr),e(Ee,DDr),e(Ee,CC),e(CC,HEe),e(HEe,GDr),e(CC,ODr),e(CC,GZ),e(GZ,VDr),e(CC,XDr),e(Ee,zDr),e(Ee,wC),e(wC,UEe),e(UEe,WDr),e(wC,QDr),e(wC,OZ),e(OZ,HDr),e(wC,UDr),e(Ee,JDr),e(Ee,AC),e(AC,JEe),e(JEe,YDr),e(AC,KDr),e(AC,VZ),e(VZ,ZDr),e(AC,eGr),e(Ee,oGr),e(Ee,LC),e(LC,YEe),e(YEe,rGr),e(LC,tGr),e(LC,XZ),e(XZ,aGr),e(LC,nGr),e(Xr,sGr),M(yC,Xr,null),b(f,BVe,u),b(f,Zc,u),e(Zc,xC),e(xC,KEe),M(Ux,KEe,null),e(Zc,lGr),e(Zc,ZEe),e(ZEe,iGr),b(f,IVe,u),b(f,ur,u),M(Jx,ur,null),e(ur,dGr),e(ur,ef),e(ef,cGr),e(ef,zZ),e(zZ,fGr),e(ef,mGr),e(ef,WZ),e(WZ,gGr),e(ef,hGr),e(ur,pGr),e(ur,Yx),e(Yx,_Gr),e(Yx,e4e),e(e4e,uGr),e(Yx,bGr),e(ur,vGr),e(ur,Ht),M(Kx,Ht,null),e(Ht,FGr),e(Ht,o4e),e(o4e,TGr),e(Ht,MGr),e(Ht,of),e(of,EGr),e(of,r4e),e(r4e,CGr),e(of,wGr),e(of,QZ),e(QZ,AGr),e(of,LGr),e(Ht,yGr),M($C,Ht,null),e(ur,xGr),e(ur,zr),M(Zx,zr,null),e(zr,$Gr),e(zr,t4e),e(t4e,kGr),e(zr,SGr),e(zr,En),e(En,RGr),e(En,a4e),e(a4e,PGr),e(En,BGr),e(En,n4e),e(n4e,IGr),e(En,NGr),e(En,s4e),e(s4e,qGr),e(En,jGr),e(zr,DGr),e(zr,$e),e($e,kC),e(kC,l4e),e(l4e,GGr),e(kC,OGr),e(kC,HZ),e(HZ,VGr),e(kC,XGr),e($e,zGr),e($e,SC),e(SC,i4e),e(i4e,WGr),e(SC,QGr),e(SC,UZ),e(UZ,HGr),e(SC,UGr),e($e,JGr),e($e,RC),e(RC,d4e),e(d4e,YGr),e(RC,KGr),e(RC,JZ),e(JZ,ZGr),e(RC,eOr),e($e,oOr),e($e,PC),e(PC,c4e),e(c4e,rOr),e(PC,tOr),e(PC,YZ),e(YZ,aOr),e(PC,nOr),e($e,sOr),e($e,BC),e(BC,f4e),e(f4e,lOr),e(BC,iOr),e(BC,KZ),e(KZ,dOr),e(BC,cOr),e($e,fOr),e($e,IC),e(IC,m4e),e(m4e,mOr),e(IC,gOr),e(IC,ZZ),e(ZZ,hOr),e(IC,pOr),e($e,_Or),e($e,NC),e(NC,g4e),e(g4e,uOr),e(NC,bOr),e(NC,eee),e(eee,vOr),e(NC,FOr),e($e,TOr),e($e,qC),e(qC,h4e),e(h4e,MOr),e(qC,EOr),e(qC,oee),e(oee,COr),e(qC,wOr),e($e,AOr),e($e,jC),e(jC,p4e),e(p4e,LOr),e(jC,yOr),e(jC,ree),e(ree,xOr),e(jC,$Or),e($e,kOr),e($e,DC),e(DC,_4e),e(_4e,SOr),e(DC,ROr),e(DC,tee),e(tee,POr),e(DC,BOr),e(zr,IOr),M(GC,zr,null),b(f,NVe,u),b(f,rf,u),e(rf,OC),e(OC,u4e),M(e$,u4e,null),e(rf,NOr),e(rf,b4e),e(b4e,qOr),b(f,qVe,u),b(f,br,u),M(o$,br,null),e(br,jOr),e(br,tf),e(tf,DOr),e(tf,aee),e(aee,GOr),e(tf,OOr),e(tf,nee),e(nee,VOr),e(tf,XOr),e(br,zOr),e(br,r$),e(r$,WOr),e(r$,v4e),e(v4e,QOr),e(r$,HOr),e(br,UOr),e(br,Ut),M(t$,Ut,null),e(Ut,JOr),e(Ut,F4e),e(F4e,YOr),e(Ut,KOr),e(Ut,af),e(af,ZOr),e(af,T4e),e(T4e,eVr),e(af,oVr),e(af,see),e(see,rVr),e(af,tVr),e(Ut,aVr),M(VC,Ut,null),e(br,nVr),e(br,Wr),M(a$,Wr,null),e(Wr,sVr),e(Wr,M4e),e(M4e,lVr),e(Wr,iVr),e(Wr,Cn),e(Cn,dVr),e(Cn,E4e),e(E4e,cVr),e(Cn,fVr),e(Cn,C4e),e(C4e,mVr),e(Cn,gVr),e(Cn,w4e),e(w4e,hVr),e(Cn,pVr),e(Wr,_Vr),e(Wr,ke),e(ke,XC),e(XC,A4e),e(A4e,uVr),e(XC,bVr),e(XC,lee),e(lee,vVr),e(XC,FVr),e(ke,TVr),e(ke,zC),e(zC,L4e),e(L4e,MVr),e(zC,EVr),e(zC,iee),e(iee,CVr),e(zC,wVr),e(ke,AVr),e(ke,WC),e(WC,y4e),e(y4e,LVr),e(WC,yVr),e(WC,dee),e(dee,xVr),e(WC,$Vr),e(ke,kVr),e(ke,QC),e(QC,x4e),e(x4e,SVr),e(QC,RVr),e(QC,cee),e(cee,PVr),e(QC,BVr),e(ke,IVr),e(ke,HC),e(HC,$4e),e($4e,NVr),e(HC,qVr),e(HC,fee),e(fee,jVr),e(HC,DVr),e(ke,GVr),e(ke,UC),e(UC,k4e),e(k4e,OVr),e(UC,VVr),e(UC,mee),e(mee,XVr),e(UC,zVr),e(ke,WVr),e(ke,JC),e(JC,S4e),e(S4e,QVr),e(JC,HVr),e(JC,gee),e(gee,UVr),e(JC,JVr),e(ke,YVr),e(ke,YC),e(YC,R4e),e(R4e,KVr),e(YC,ZVr),e(YC,hee),e(hee,eXr),e(YC,oXr),e(ke,rXr),e(ke,KC),e(KC,P4e),e(P4e,tXr),e(KC,aXr),e(KC,pee),e(pee,nXr),e(KC,sXr),e(ke,lXr),e(ke,ZC),e(ZC,B4e),e(B4e,iXr),e(ZC,dXr),e(ZC,_ee),e(_ee,cXr),e(ZC,fXr),e(Wr,mXr),M(e5,Wr,null),b(f,jVe,u),b(f,nf,u),e(nf,o5),e(o5,I4e),M(n$,I4e,null),e(nf,gXr),e(nf,N4e),e(N4e,hXr),b(f,DVe,u),b(f,vr,u),M(s$,vr,null),e(vr,pXr),e(vr,sf),e(sf,_Xr),e(sf,uee),e(uee,uXr),e(sf,bXr),e(sf,bee),e(bee,vXr),e(sf,FXr),e(vr,TXr),e(vr,l$),e(l$,MXr),e(l$,q4e),e(q4e,EXr),e(l$,CXr),e(vr,wXr),e(vr,Jt),M(i$,Jt,null),e(Jt,AXr),e(Jt,j4e),e(j4e,LXr),e(Jt,yXr),e(Jt,lf),e(lf,xXr),e(lf,D4e),e(D4e,$Xr),e(lf,kXr),e(lf,vee),e(vee,SXr),e(lf,RXr),e(Jt,PXr),M(r5,Jt,null),e(vr,BXr),e(vr,Qr),M(d$,Qr,null),e(Qr,IXr),e(Qr,G4e),e(G4e,NXr),e(Qr,qXr),e(Qr,wn),e(wn,jXr),e(wn,O4e),e(O4e,DXr),e(wn,GXr),e(wn,V4e),e(V4e,OXr),e(wn,VXr),e(wn,X4e),e(X4e,XXr),e(wn,zXr),e(Qr,WXr),e(Qr,Se),e(Se,t5),e(t5,z4e),e(z4e,QXr),e(t5,HXr),e(t5,Fee),e(Fee,UXr),e(t5,JXr),e(Se,YXr),e(Se,a5),e(a5,W4e),e(W4e,KXr),e(a5,ZXr),e(a5,Tee),e(Tee,ezr),e(a5,ozr),e(Se,rzr),e(Se,n5),e(n5,Q4e),e(Q4e,tzr),e(n5,azr),e(n5,Mee),e(Mee,nzr),e(n5,szr),e(Se,lzr),e(Se,s5),e(s5,H4e),e(H4e,izr),e(s5,dzr),e(s5,Eee),e(Eee,czr),e(s5,fzr),e(Se,mzr),e(Se,l5),e(l5,U4e),e(U4e,gzr),e(l5,hzr),e(l5,Cee),e(Cee,pzr),e(l5,_zr),e(Se,uzr),e(Se,i5),e(i5,J4e),e(J4e,bzr),e(i5,vzr),e(i5,wee),e(wee,Fzr),e(i5,Tzr),e(Se,Mzr),e(Se,d5),e(d5,Y4e),e(Y4e,Ezr),e(d5,Czr),e(d5,Aee),e(Aee,wzr),e(d5,Azr),e(Se,Lzr),e(Se,c5),e(c5,K4e),e(K4e,yzr),e(c5,xzr),e(c5,Lee),e(Lee,$zr),e(c5,kzr),e(Se,Szr),e(Se,f5),e(f5,Z4e),e(Z4e,Rzr),e(f5,Pzr),e(f5,yee),e(yee,Bzr),e(f5,Izr),e(Se,Nzr),e(Se,m5),e(m5,eCe),e(eCe,qzr),e(m5,jzr),e(m5,xee),e(xee,Dzr),e(m5,Gzr),e(Qr,Ozr),M(g5,Qr,null),b(f,GVe,u),b(f,df,u),e(df,h5),e(h5,oCe),M(c$,oCe,null),e(df,Vzr),e(df,rCe),e(rCe,Xzr),b(f,OVe,u),b(f,Fr,u),M(f$,Fr,null),e(Fr,zzr),e(Fr,cf),e(cf,Wzr),e(cf,$ee),e($ee,Qzr),e(cf,Hzr),e(cf,kee),e(kee,Uzr),e(cf,Jzr),e(Fr,Yzr),e(Fr,m$),e(m$,Kzr),e(m$,tCe),e(tCe,Zzr),e(m$,eWr),e(Fr,oWr),e(Fr,Yt),M(g$,Yt,null),e(Yt,rWr),e(Yt,aCe),e(aCe,tWr),e(Yt,aWr),e(Yt,ff),e(ff,nWr),e(ff,nCe),e(nCe,sWr),e(ff,lWr),e(ff,See),e(See,iWr),e(ff,dWr),e(Yt,cWr),M(p5,Yt,null),e(Fr,fWr),e(Fr,Hr),M(h$,Hr,null),e(Hr,mWr),e(Hr,sCe),e(sCe,gWr),e(Hr,hWr),e(Hr,An),e(An,pWr),e(An,lCe),e(lCe,_Wr),e(An,uWr),e(An,iCe),e(iCe,bWr),e(An,vWr),e(An,dCe),e(dCe,FWr),e(An,TWr),e(Hr,MWr),e(Hr,Re),e(Re,_5),e(_5,cCe),e(cCe,EWr),e(_5,CWr),e(_5,Ree),e(Ree,wWr),e(_5,AWr),e(Re,LWr),e(Re,u5),e(u5,fCe),e(fCe,yWr),e(u5,xWr),e(u5,Pee),e(Pee,$Wr),e(u5,kWr),e(Re,SWr),e(Re,b5),e(b5,mCe),e(mCe,RWr),e(b5,PWr),e(b5,Bee),e(Bee,BWr),e(b5,IWr),e(Re,NWr),e(Re,v5),e(v5,gCe),e(gCe,qWr),e(v5,jWr),e(v5,Iee),e(Iee,DWr),e(v5,GWr),e(Re,OWr),e(Re,F5),e(F5,hCe),e(hCe,VWr),e(F5,XWr),e(F5,Nee),e(Nee,zWr),e(F5,WWr),e(Re,QWr),e(Re,T5),e(T5,pCe),e(pCe,HWr),e(T5,UWr),e(T5,qee),e(qee,JWr),e(T5,YWr),e(Re,KWr),e(Re,M5),e(M5,_Ce),e(_Ce,ZWr),e(M5,eQr),e(M5,jee),e(jee,oQr),e(M5,rQr),e(Re,tQr),e(Re,E5),e(E5,uCe),e(uCe,aQr),e(E5,nQr),e(E5,Dee),e(Dee,sQr),e(E5,lQr),e(Re,iQr),e(Re,C5),e(C5,bCe),e(bCe,dQr),e(C5,cQr),e(C5,Gee),e(Gee,fQr),e(C5,mQr),e(Re,gQr),e(Re,w5),e(w5,vCe),e(vCe,hQr),e(w5,pQr),e(w5,Oee),e(Oee,_Qr),e(w5,uQr),e(Hr,bQr),M(A5,Hr,null),b(f,VVe,u),b(f,mf,u),e(mf,L5),e(L5,FCe),M(p$,FCe,null),e(mf,vQr),e(mf,TCe),e(TCe,FQr),b(f,XVe,u),b(f,Tr,u),M(_$,Tr,null),e(Tr,TQr),e(Tr,gf),e(gf,MQr),e(gf,Vee),e(Vee,EQr),e(gf,CQr),e(gf,Xee),e(Xee,wQr),e(gf,AQr),e(Tr,LQr),e(Tr,u$),e(u$,yQr),e(u$,MCe),e(MCe,xQr),e(u$,$Qr),e(Tr,kQr),e(Tr,Kt),M(b$,Kt,null),e(Kt,SQr),e(Kt,ECe),e(ECe,RQr),e(Kt,PQr),e(Kt,hf),e(hf,BQr),e(hf,CCe),e(CCe,IQr),e(hf,NQr),e(hf,zee),e(zee,qQr),e(hf,jQr),e(Kt,DQr),M(y5,Kt,null),e(Tr,GQr),e(Tr,Ur),M(v$,Ur,null),e(Ur,OQr),e(Ur,wCe),e(wCe,VQr),e(Ur,XQr),e(Ur,Ln),e(Ln,zQr),e(Ln,ACe),e(ACe,WQr),e(Ln,QQr),e(Ln,LCe),e(LCe,HQr),e(Ln,UQr),e(Ln,yCe),e(yCe,JQr),e(Ln,YQr),e(Ur,KQr),e(Ur,Ve),e(Ve,x5),e(x5,xCe),e(xCe,ZQr),e(x5,eHr),e(x5,Wee),e(Wee,oHr),e(x5,rHr),e(Ve,tHr),e(Ve,$5),e($5,$Ce),e($Ce,aHr),e($5,nHr),e($5,Qee),e(Qee,sHr),e($5,lHr),e(Ve,iHr),e(Ve,k5),e(k5,kCe),e(kCe,dHr),e(k5,cHr),e(k5,Hee),e(Hee,fHr),e(k5,mHr),e(Ve,gHr),e(Ve,S5),e(S5,SCe),e(SCe,hHr),e(S5,pHr),e(S5,Uee),e(Uee,_Hr),e(S5,uHr),e(Ve,bHr),e(Ve,R5),e(R5,RCe),e(RCe,vHr),e(R5,FHr),e(R5,Jee),e(Jee,THr),e(R5,MHr),e(Ve,EHr),e(Ve,P5),e(P5,PCe),e(PCe,CHr),e(P5,wHr),e(P5,Yee),e(Yee,AHr),e(P5,LHr),e(Ve,yHr),e(Ve,B5),e(B5,BCe),e(BCe,xHr),e(B5,$Hr),e(B5,Kee),e(Kee,kHr),e(B5,SHr),e(Ve,RHr),e(Ve,I5),e(I5,ICe),e(ICe,PHr),e(I5,BHr),e(I5,Zee),e(Zee,IHr),e(I5,NHr),e(Ur,qHr),M(N5,Ur,null),b(f,zVe,u),b(f,pf,u),e(pf,q5),e(q5,NCe),M(F$,NCe,null),e(pf,jHr),e(pf,qCe),e(qCe,DHr),b(f,WVe,u),b(f,Mr,u),M(T$,Mr,null),e(Mr,GHr),e(Mr,_f),e(_f,OHr),e(_f,eoe),e(eoe,VHr),e(_f,XHr),e(_f,ooe),e(ooe,zHr),e(_f,WHr),e(Mr,QHr),e(Mr,M$),e(M$,HHr),e(M$,jCe),e(jCe,UHr),e(M$,JHr),e(Mr,YHr),e(Mr,Zt),M(E$,Zt,null),e(Zt,KHr),e(Zt,DCe),e(DCe,ZHr),e(Zt,eUr),e(Zt,uf),e(uf,oUr),e(uf,GCe),e(GCe,rUr),e(uf,tUr),e(uf,roe),e(roe,aUr),e(uf,nUr),e(Zt,sUr),M(j5,Zt,null),e(Mr,lUr),e(Mr,Jr),M(C$,Jr,null),e(Jr,iUr),e(Jr,OCe),e(OCe,dUr),e(Jr,cUr),e(Jr,yn),e(yn,fUr),e(yn,VCe),e(VCe,mUr),e(yn,gUr),e(yn,XCe),e(XCe,hUr),e(yn,pUr),e(yn,zCe),e(zCe,_Ur),e(yn,uUr),e(Jr,bUr),e(Jr,Xe),e(Xe,D5),e(D5,WCe),e(WCe,vUr),e(D5,FUr),e(D5,toe),e(toe,TUr),e(D5,MUr),e(Xe,EUr),e(Xe,G5),e(G5,QCe),e(QCe,CUr),e(G5,wUr),e(G5,aoe),e(aoe,AUr),e(G5,LUr),e(Xe,yUr),e(Xe,O5),e(O5,HCe),e(HCe,xUr),e(O5,$Ur),e(O5,noe),e(noe,kUr),e(O5,SUr),e(Xe,RUr),e(Xe,V5),e(V5,UCe),e(UCe,PUr),e(V5,BUr),e(V5,soe),e(soe,IUr),e(V5,NUr),e(Xe,qUr),e(Xe,X5),e(X5,JCe),e(JCe,jUr),e(X5,DUr),e(X5,loe),e(loe,GUr),e(X5,OUr),e(Xe,VUr),e(Xe,z5),e(z5,YCe),e(YCe,XUr),e(z5,zUr),e(z5,ioe),e(ioe,WUr),e(z5,QUr),e(Xe,HUr),e(Xe,W5),e(W5,KCe),e(KCe,UUr),e(W5,JUr),e(W5,doe),e(doe,YUr),e(W5,KUr),e(Xe,ZUr),e(Xe,Q5),e(Q5,ZCe),e(ZCe,eJr),e(Q5,oJr),e(Q5,coe),e(coe,rJr),e(Q5,tJr),e(Jr,aJr),M(H5,Jr,null),b(f,QVe,u),b(f,bf,u),e(bf,U5),e(U5,e5e),M(w$,e5e,null),e(bf,nJr),e(bf,o5e),e(o5e,sJr),b(f,HVe,u),b(f,Er,u),M(A$,Er,null),e(Er,lJr),e(Er,vf),e(vf,iJr),e(vf,foe),e(foe,dJr),e(vf,cJr),e(vf,moe),e(moe,fJr),e(vf,mJr),e(Er,gJr),e(Er,L$),e(L$,hJr),e(L$,r5e),e(r5e,pJr),e(L$,_Jr),e(Er,uJr),e(Er,ea),M(y$,ea,null),e(ea,bJr),e(ea,t5e),e(t5e,vJr),e(ea,FJr),e(ea,Ff),e(Ff,TJr),e(Ff,a5e),e(a5e,MJr),e(Ff,EJr),e(Ff,goe),e(goe,CJr),e(Ff,wJr),e(ea,AJr),M(J5,ea,null),e(Er,LJr),e(Er,Yr),M(x$,Yr,null),e(Yr,yJr),e(Yr,n5e),e(n5e,xJr),e(Yr,$Jr),e(Yr,xn),e(xn,kJr),e(xn,s5e),e(s5e,SJr),e(xn,RJr),e(xn,l5e),e(l5e,PJr),e(xn,BJr),e(xn,i5e),e(i5e,IJr),e(xn,NJr),e(Yr,qJr),e(Yr,d5e),e(d5e,Y5),e(Y5,c5e),e(c5e,jJr),e(Y5,DJr),e(Y5,hoe),e(hoe,GJr),e(Y5,OJr),e(Yr,VJr),M(K5,Yr,null),b(f,UVe,u),b(f,Tf,u),e(Tf,Z5),e(Z5,f5e),M($$,f5e,null),e(Tf,XJr),e(Tf,m5e),e(m5e,zJr),b(f,JVe,u),b(f,Cr,u),M(k$,Cr,null),e(Cr,WJr),e(Cr,Mf),e(Mf,QJr),e(Mf,poe),e(poe,HJr),e(Mf,UJr),e(Mf,_oe),e(_oe,JJr),e(Mf,YJr),e(Cr,KJr),e(Cr,S$),e(S$,ZJr),e(S$,g5e),e(g5e,eYr),e(S$,oYr),e(Cr,rYr),e(Cr,oa),M(R$,oa,null),e(oa,tYr),e(oa,h5e),e(h5e,aYr),e(oa,nYr),e(oa,Ef),e(Ef,sYr),e(Ef,p5e),e(p5e,lYr),e(Ef,iYr),e(Ef,uoe),e(uoe,dYr),e(Ef,cYr),e(oa,fYr),M(e3,oa,null),e(Cr,mYr),e(Cr,Kr),M(P$,Kr,null),e(Kr,gYr),e(Kr,_5e),e(_5e,hYr),e(Kr,pYr),e(Kr,$n),e($n,_Yr),e($n,u5e),e(u5e,uYr),e($n,bYr),e($n,b5e),e(b5e,vYr),e($n,FYr),e($n,v5e),e(v5e,TYr),e($n,MYr),e(Kr,EYr),e(Kr,B$),e(B$,o3),e(o3,F5e),e(F5e,CYr),e(o3,wYr),e(o3,boe),e(boe,AYr),e(o3,LYr),e(B$,yYr),e(B$,r3),e(r3,T5e),e(T5e,xYr),e(r3,$Yr),e(r3,voe),e(voe,kYr),e(r3,SYr),e(Kr,RYr),M(t3,Kr,null),b(f,YVe,u),b(f,Cf,u),e(Cf,a3),e(a3,M5e),M(I$,M5e,null),e(Cf,PYr),e(Cf,E5e),e(E5e,BYr),b(f,KVe,u),b(f,wr,u),M(N$,wr,null),e(wr,IYr),e(wr,wf),e(wf,NYr),e(wf,Foe),e(Foe,qYr),e(wf,jYr),e(wf,Toe),e(Toe,DYr),e(wf,GYr),e(wr,OYr),e(wr,q$),e(q$,VYr),e(q$,C5e),e(C5e,XYr),e(q$,zYr),e(wr,WYr),e(wr,ra),M(j$,ra,null),e(ra,QYr),e(ra,w5e),e(w5e,HYr),e(ra,UYr),e(ra,Af),e(Af,JYr),e(Af,A5e),e(A5e,YYr),e(Af,KYr),e(Af,Moe),e(Moe,ZYr),e(Af,eKr),e(ra,oKr),M(n3,ra,null),e(wr,rKr),e(wr,Zr),M(D$,Zr,null),e(Zr,tKr),e(Zr,L5e),e(L5e,aKr),e(Zr,nKr),e(Zr,kn),e(kn,sKr),e(kn,y5e),e(y5e,lKr),e(kn,iKr),e(kn,x5e),e(x5e,dKr),e(kn,cKr),e(kn,$5e),e($5e,fKr),e(kn,mKr),e(Zr,gKr),e(Zr,k5e),e(k5e,s3),e(s3,S5e),e(S5e,hKr),e(s3,pKr),e(s3,Eoe),e(Eoe,_Kr),e(s3,uKr),e(Zr,bKr),M(l3,Zr,null),ZVe=!0},p(f,[u]){const G$={};u&2&&(G$.$$scope={dirty:u,ctx:f}),Bf.$set(G$);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),Vg.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),wh.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),sp.$set(B5e);const O$={};u&2&&(O$.$$scope={dirty:u,ctx:f}),lp.$set(O$);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),Lp.$set(I5e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),yp.$set(Sn);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),kp.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),ku.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),Ru.$set(j5e);const V$={};u&2&&(V$.$$scope={dirty:u,ctx:f}),w1.$set(V$);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),L1.$set(D5e);const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),g2.$set(X$);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),p2.$set(G5e);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),eb.$set(z$);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),rb.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),Tb.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),Eb.$set(X5e);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),Fv.$set(Lf);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),Mv.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),e0.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),r0.$set(Q5e);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),c0.$set(W$);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),m0.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),J0.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),K0.$set(J5e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),GF.$set(tt);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),VF.$set(Q$);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),WF.$set(Y5e);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),HF.$set(H$);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),i6.$set(K5e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),c6.$set(at);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),g6.$set(Z5e);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),p6.$set(yf);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),b6.$set(e3e);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),F6.$set(o3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),k6.$set(L);const i3={};u&2&&(i3.$$scope={dirty:u,ctx:f}),R6.$set(i3);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),D6.$set(r3e);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),O6.$set(t3e);const d3={};u&2&&(d3.$$scope={dirty:u,ctx:f}),eT.$set(d3);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),rT.$set(a3e);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),sT.$set(n3e);const c3={};u&2&&(c3.$$scope={dirty:u,ctx:f}),iT.$set(c3);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),pT.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),uT.$set(l3e);const f3={};u&2&&(f3.$$scope={dirty:u,ctx:f}),MT.$set(f3);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),CT.$set(i3e);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),yT.$set(d3e);const m3={};u&2&&(m3.$$scope={dirty:u,ctx:f}),$T.$set(m3);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),RT.$set(c3e);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),BT.$set(f3e);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),GT.$set(g3);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),VT.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),WT.$set(g3e);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),HT.$set(h3);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),O7.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),X7.$set(p3e);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),h8.$set(p3);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),_8.$set(_3e);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),$8.$set(u3e);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),S8.$set(_3);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),N8.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),j8.$set(v3e);const u3={};u&2&&(u3.$$scope={dirty:u,ctx:f}),sM.$set(u3);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),iM.$set(F3e);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),vM.$set(T3e);const b3={};u&2&&(b3.$$scope={dirty:u,ctx:f}),TM.$set(b3);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),HM.$set(M3e);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),JM.$set(E3e);const v3={};u&2&&(v3.$$scope={dirty:u,ctx:f}),hE.$set(v3);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),_E.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),vE.$set(w3e);const F3={};u&2&&(F3.$$scope={dirty:u,ctx:f}),TE.$set(F3);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),EE.$set(A3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),wE.$set(L3e);const T3={};u&2&&(T3.$$scope={dirty:u,ctx:f}),WE.$set(T3);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),HE.$set(y3e);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),p4.$set(x3e);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),u4.$set(M3);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),v4.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),T4.$set(k3e);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),E4.$set(E3);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),w4.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),Z4.$set(R3e);const C3={};u&2&&(C3.$$scope={dirty:u,ctx:f}),oC.$set(C3);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),mC.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),hC.$set(B3e);const w3={};u&2&&(w3.$$scope={dirty:u,ctx:f}),yC.$set(w3);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),$C.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),GC.$set(N3e);const A3={};u&2&&(A3.$$scope={dirty:u,ctx:f}),VC.$set(A3);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),e5.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),r5.$set(j3e);const L3={};u&2&&(L3.$$scope={dirty:u,ctx:f}),g5.$set(L3);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),p5.$set(D3e);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),A5.$set(G3e);const y3={};u&2&&(y3.$$scope={dirty:u,ctx:f}),y5.$set(y3);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),N5.$set(O3e);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),j5.$set(V3e);const x3={};u&2&&(x3.$$scope={dirty:u,ctx:f}),H5.$set(x3);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),J5.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),K5.$set(z3e);const $3={};u&2&&($3.$$scope={dirty:u,ctx:f}),e3.$set($3);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),t3.$set(W3e);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),n3.$set(Q3e);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),l3.$set(k3)},i(f){ZVe||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(Bf.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(NA.$$.fragment,f),E(Vg.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(VA.$$.fragment,f),E(wh.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(oL.$$.fragment,f),E(Lp.$$.fragment,f),E(yp.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(kp.$$.fragment,f),E(lL.$$.fragment,f),E(ku.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(Ru.$$.fragment,f),E(mL.$$.fragment,f),E(w1.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(L1.$$.fragment,f),E(uL.$$.fragment,f),E(g2.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(p2.$$.fragment,f),E(ML.$$.fragment,f),E(eb.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(rb.$$.fragment,f),E(LL.$$.fragment,f),E(Tb.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(Eb.$$.fragment,f),E(SL.$$.fragment,f),E(Fv.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(Mv.$$.fragment,f),E(NL.$$.fragment,f),E(e0.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(r0.$$.fragment,f),E(OL.$$.fragment,f),E(c0.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(m0.$$.fragment,f),E(QL.$$.fragment,f),E(J0.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(K0.$$.fragment,f),E(KL.$$.fragment,f),E(GF.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(VF.$$.fragment,f),E(ty.$$.fragment,f),E(WF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(HF.$$.fragment,f),E(iy.$$.fragment,f),E(i6.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(c6.$$.fragment,f),E(gy.$$.fragment,f),E(g6.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(p6.$$.fragment,f),E(by.$$.fragment,f),E(b6.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(F6.$$.fragment,f),E(Ey.$$.fragment,f),E(k6.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(R6.$$.fragment,f),E(yy.$$.fragment,f),E(D6.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(O6.$$.fragment,f),E(Ry.$$.fragment,f),E(eT.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(rT.$$.fragment,f),E(qy.$$.fragment,f),E(sT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(iT.$$.fragment,f),E(Xy.$$.fragment,f),E(pT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(uT.$$.fragment,f),E(Uy.$$.fragment,f),E(MT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(CT.$$.fragment,f),E(e9.$$.fragment,f),E(yT.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E($T.$$.fragment,f),E(s9.$$.fragment,f),E(RT.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(BT.$$.fragment,f),E(f9.$$.fragment,f),E(GT.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(VT.$$.fragment,f),E(_9.$$.fragment,f),E(WT.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(HT.$$.fragment,f),E(T9.$$.fragment,f),E(O7.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(X7.$$.fragment,f),E(A9.$$.fragment,f),E(h8.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(_8.$$.fragment,f),E(k9.$$.fragment,f),E($8.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(S8.$$.fragment,f),E(I9.$$.fragment,f),E(N8.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(j8.$$.fragment,f),E(G9.$$.fragment,f),E(sM.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(iM.$$.fragment,f),E(W9.$$.fragment,f),E(vM.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(TM.$$.fragment,f),E(Y9.$$.fragment,f),E(HM.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(JM.$$.fragment,f),E(rx.$$.fragment,f),E(hE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(_E.$$.fragment,f),E(lx.$$.fragment,f),E(vE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(TE.$$.fragment,f),E(gx.$$.fragment,f),E(EE.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(wE.$$.fragment,f),E(bx.$$.fragment,f),E(WE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(HE.$$.fragment,f),E(Ex.$$.fragment,f),E(p4.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(u4.$$.fragment,f),E(yx.$$.fragment,f),E(v4.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(T4.$$.fragment,f),E(Rx.$$.fragment,f),E(E4.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(w4.$$.fragment,f),E(qx.$$.fragment,f),E(Z4.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(oC.$$.fragment,f),E(Vx.$$.fragment,f),E(mC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(hC.$$.fragment,f),E(Hx.$$.fragment,f),E(yC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E($C.$$.fragment,f),E(Zx.$$.fragment,f),E(GC.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(VC.$$.fragment,f),E(a$.$$.fragment,f),E(e5.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(r5.$$.fragment,f),E(d$.$$.fragment,f),E(g5.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(p5.$$.fragment,f),E(h$.$$.fragment,f),E(A5.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(y5.$$.fragment,f),E(v$.$$.fragment,f),E(N5.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(j5.$$.fragment,f),E(C$.$$.fragment,f),E(H5.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(J5.$$.fragment,f),E(x$.$$.fragment,f),E(K5.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(e3.$$.fragment,f),E(P$.$$.fragment,f),E(t3.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(n3.$$.fragment,f),E(D$.$$.fragment,f),E(l3.$$.fragment,f),ZVe=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(Bf.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(NA.$$.fragment,f),C(Vg.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(VA.$$.fragment,f),C(wh.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(oL.$$.fragment,f),C(Lp.$$.fragment,f),C(yp.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(kp.$$.fragment,f),C(lL.$$.fragment,f),C(ku.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(Ru.$$.fragment,f),C(mL.$$.fragment,f),C(w1.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(L1.$$.fragment,f),C(uL.$$.fragment,f),C(g2.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(p2.$$.fragment,f),C(ML.$$.fragment,f),C(eb.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(rb.$$.fragment,f),C(LL.$$.fragment,f),C(Tb.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(Eb.$$.fragment,f),C(SL.$$.fragment,f),C(Fv.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(Mv.$$.fragment,f),C(NL.$$.fragment,f),C(e0.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(r0.$$.fragment,f),C(OL.$$.fragment,f),C(c0.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(m0.$$.fragment,f),C(QL.$$.fragment,f),C(J0.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(K0.$$.fragment,f),C(KL.$$.fragment,f),C(GF.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(VF.$$.fragment,f),C(ty.$$.fragment,f),C(WF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(HF.$$.fragment,f),C(iy.$$.fragment,f),C(i6.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(c6.$$.fragment,f),C(gy.$$.fragment,f),C(g6.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(p6.$$.fragment,f),C(by.$$.fragment,f),C(b6.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(F6.$$.fragment,f),C(Ey.$$.fragment,f),C(k6.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(R6.$$.fragment,f),C(yy.$$.fragment,f),C(D6.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(O6.$$.fragment,f),C(Ry.$$.fragment,f),C(eT.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(rT.$$.fragment,f),C(qy.$$.fragment,f),C(sT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(iT.$$.fragment,f),C(Xy.$$.fragment,f),C(pT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(uT.$$.fragment,f),C(Uy.$$.fragment,f),C(MT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(CT.$$.fragment,f),C(e9.$$.fragment,f),C(yT.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C($T.$$.fragment,f),C(s9.$$.fragment,f),C(RT.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(BT.$$.fragment,f),C(f9.$$.fragment,f),C(GT.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(VT.$$.fragment,f),C(_9.$$.fragment,f),C(WT.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(HT.$$.fragment,f),C(T9.$$.fragment,f),C(O7.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(X7.$$.fragment,f),C(A9.$$.fragment,f),C(h8.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(_8.$$.fragment,f),C(k9.$$.fragment,f),C($8.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(S8.$$.fragment,f),C(I9.$$.fragment,f),C(N8.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(j8.$$.fragment,f),C(G9.$$.fragment,f),C(sM.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(iM.$$.fragment,f),C(W9.$$.fragment,f),C(vM.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(TM.$$.fragment,f),C(Y9.$$.fragment,f),C(HM.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(JM.$$.fragment,f),C(rx.$$.fragment,f),C(hE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(_E.$$.fragment,f),C(lx.$$.fragment,f),C(vE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(TE.$$.fragment,f),C(gx.$$.fragment,f),C(EE.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(wE.$$.fragment,f),C(bx.$$.fragment,f),C(WE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(HE.$$.fragment,f),C(Ex.$$.fragment,f),C(p4.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(u4.$$.fragment,f),C(yx.$$.fragment,f),C(v4.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(T4.$$.fragment,f),C(Rx.$$.fragment,f),C(E4.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(w4.$$.fragment,f),C(qx.$$.fragment,f),C(Z4.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(oC.$$.fragment,f),C(Vx.$$.fragment,f),C(mC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(hC.$$.fragment,f),C(Hx.$$.fragment,f),C(yC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C($C.$$.fragment,f),C(Zx.$$.fragment,f),C(GC.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(VC.$$.fragment,f),C(a$.$$.fragment,f),C(e5.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(r5.$$.fragment,f),C(d$.$$.fragment,f),C(g5.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(p5.$$.fragment,f),C(h$.$$.fragment,f),C(A5.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(y5.$$.fragment,f),C(v$.$$.fragment,f),C(N5.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(j5.$$.fragment,f),C(C$.$$.fragment,f),C(H5.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(J5.$$.fragment,f),C(x$.$$.fragment,f),C(K5.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(e3.$$.fragment,f),C(P$.$$.fragment,f),C(t3.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(n3.$$.fragment,f),C(D$.$$.fragment,f),C(l3.$$.fragment,f),ZVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t($f),f&&t(nt),f&&t(Oe),f&&t(We),f&&t(Sf),w($a,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(HGe),f&&t($i),w(kA),f&&t(UGe),f&&t(Nn),f&&t(JGe),w(SA,f),f&&t(YGe),f&&t(cS),f&&t(KGe),w(Bf,f),f&&t(ZGe),f&&t(ki),w(RA),f&&t(eOe),f&&t(wo),w(PA),w(NA),w(Vg),w(qA),f&&t(oOe),f&&t(Ri),w(jA),f&&t(rOe),f&&t(Ao),w(DA),w(VA),w(wh),w(XA),f&&t(tOe),f&&t(Pi),w(zA),f&&t(aOe),f&&t(Lo),w(WA),w(UA),w(sp),w(lp),w(JA),f&&t(nOe),f&&t(Bi),w(YA),f&&t(sOe),f&&t(yo),w(KA),w(oL),w(Lp),w(yp),w(rL),f&&t(lOe),f&&t(Ni),w(tL),f&&t(iOe),f&&t(xo),w(aL),w(sL),w(kp),w(lL),w(ku),f&&t(dOe),f&&t(Di),w(iL),f&&t(cOe),f&&t($o),w(dL),w(fL),w(Ru),w(mL),w(w1),f&&t(fOe),f&&t(Vi),w(gL),f&&t(mOe),f&&t(ko),w(hL),w(_L),w(L1),w(uL),w(g2),f&&t(gOe),f&&t(Wi),w(bL),f&&t(hOe),f&&t(So),w(vL),w(TL),w(p2),w(ML),w(eb),f&&t(pOe),f&&t(Ui),w(EL),f&&t(_Oe),f&&t(Ro),w(CL),w(AL),w(rb),w(LL),w(Tb),f&&t(uOe),f&&t(Ki),w(yL),f&&t(bOe),f&&t(Po),w(xL),w(kL),w(Eb),w(SL),w(Fv),f&&t(vOe),f&&t(od),w(RL),f&&t(FOe),f&&t(Bo),w(PL),w(IL),w(Mv),w(NL),w(e0),f&&t(TOe),f&&t(ad),w(qL),f&&t(MOe),f&&t(Io),w(jL),w(GL),w(r0),w(OL),w(c0),f&&t(EOe),f&&t(ld),w(VL),f&&t(COe),f&&t(qo),w(XL),w(WL),w(m0),w(QL),w(J0),f&&t(wOe),f&&t(cd),w(HL),f&&t(AOe),f&&t(jo),w(UL),w(YL),w(K0),w(KL),w(GF),f&&t(LOe),f&&t(gd),w(ZL),f&&t(yOe),f&&t(Do),w(ey),w(ry),w(VF),w(ty),w(WF),f&&t(xOe),f&&t(_d),w(ay),f&&t($Oe),f&&t(Go),w(ny),w(ly),w(HF),w(iy),w(i6),f&&t(kOe),f&&t(vd),w(dy),f&&t(SOe),f&&t(Oo),w(cy),w(my),w(c6),w(gy),w(g6),f&&t(ROe),f&&t(Md),w(hy),f&&t(POe),f&&t(Vo),w(py),w(uy),w(p6),w(by),w(b6),f&&t(BOe),f&&t(wd),w(vy),f&&t(IOe),f&&t(Xo),w(Fy),w(My),w(F6),w(Ey),w(k6),f&&t(NOe),f&&t(yd),w(Cy),f&&t(qOe),f&&t(zo),w(wy),w(Ly),w(R6),w(yy),w(D6),f&&t(jOe),f&&t(kd),w(xy),f&&t(DOe),f&&t(Wo),w($y),w(Sy),w(O6),w(Ry),w(eT),f&&t(GOe),f&&t(Pd),w(Py),f&&t(OOe),f&&t(Qo),w(By),w(Ny),w(rT),w(qy),w(sT),f&&t(VOe),f&&t(Nd),w(Dy),f&&t(XOe),f&&t(Ho),w(Gy),w(Vy),w(iT),w(Xy),w(pT),f&&t(zOe),f&&t(Dd),w(zy),f&&t(WOe),f&&t(Uo),w(Wy),w(Hy),w(uT),w(Uy),w(MT),f&&t(QOe),f&&t(Xd),w(Jy),f&&t(HOe),f&&t(Jo),w(Yy),w(Zy),w(CT),w(e9),w(yT),f&&t(UOe),f&&t(Qd),w(r9),f&&t(JOe),f&&t(Yo),w(t9),w(n9),w($T),w(s9),w(RT),f&&t(YOe),f&&t(Jd),w(l9),f&&t(KOe),f&&t(Ko),w(i9),w(c9),w(BT),w(f9),w(GT),f&&t(ZOe),f&&t(Zd),w(m9),f&&t(eVe),f&&t(Zo),w(g9),w(p9),w(VT),w(_9),w(WT),f&&t(oVe),f&&t(rc),w(u9),f&&t(rVe),f&&t(er),w(b9),w(F9),w(HT),w(T9),w(O7),f&&t(tVe),f&&t(nc),w(M9),f&&t(aVe),f&&t(or),w(E9),w(w9),w(X7),w(A9),w(h8),f&&t(nVe),f&&t(ic),w(L9),f&&t(sVe),f&&t(rr),w(y9),w($9),w(_8),w(k9),w($8),f&&t(lVe),f&&t(fc),w(S9),f&&t(iVe),f&&t(tr),w(R9),w(B9),w(S8),w(I9),w(N8),f&&t(dVe),f&&t(hc),w(N9),f&&t(cVe),f&&t(ar),w(q9),w(D9),w(j8),w(G9),w(sM),f&&t(fVe),f&&t(uc),w(O9),f&&t(mVe),f&&t(nr),w(V9),w(z9),w(iM),w(W9),w(vM),f&&t(gVe),f&&t(Fc),w(Q9),f&&t(hVe),f&&t(sr),w(H9),w(J9),w(TM),w(Y9),w(HM),f&&t(pVe),f&&t(Ec),w(K9),f&&t(_Ve),f&&t(lr),w(Z9),w(ox),w(JM),w(rx),w(hE),f&&t(uVe),f&&t(Ac),w(tx),f&&t(bVe),f&&t(ir),w(ax),w(sx),w(_E),w(lx),w(vE),f&&t(vVe),f&&t(xc),w(dx),f&&t(FVe),f&&t(dr),w(cx),w(mx),w(TE),w(gx),w(EE),f&&t(TVe),f&&t(Sc),w(hx),f&&t(MVe),f&&t(cr),w(px),w(ux),w(wE),w(bx),w(WE),f&&t(EVe),f&&t(Bc),w(vx),f&&t(CVe),f&&t(fr),w(Fx),w(Mx),w(HE),w(Ex),w(p4),f&&t(wVe),f&&t(qc),w(Cx),f&&t(AVe),f&&t(mr),w(wx),w(Lx),w(u4),w(yx),w(v4),f&&t(LVe),f&&t(Gc),w(xx),f&&t(yVe),f&&t(gr),w($x),w(Sx),w(T4),w(Rx),w(E4),f&&t(xVe),f&&t(Xc),w(Px),f&&t($Ve),f&&t(hr),w(Bx),w(Nx),w(w4),w(qx),w(Z4),f&&t(kVe),f&&t(Qc),w(jx),f&&t(SVe),f&&t(pr),w(Dx),w(Ox),w(oC),w(Vx),w(mC),f&&t(RVe),f&&t(Jc),w(Xx),f&&t(PVe),f&&t(_r),w(zx),w(Qx),w(hC),w(Hx),w(yC),f&&t(BVe),f&&t(Zc),w(Ux),f&&t(IVe),f&&t(ur),w(Jx),w(Kx),w($C),w(Zx),w(GC),f&&t(NVe),f&&t(rf),w(e$),f&&t(qVe),f&&t(br),w(o$),w(t$),w(VC),w(a$),w(e5),f&&t(jVe),f&&t(nf),w(n$),f&&t(DVe),f&&t(vr),w(s$),w(i$),w(r5),w(d$),w(g5),f&&t(GVe),f&&t(df),w(c$),f&&t(OVe),f&&t(Fr),w(f$),w(g$),w(p5),w(h$),w(A5),f&&t(VVe),f&&t(mf),w(p$),f&&t(XVe),f&&t(Tr),w(_$),w(b$),w(y5),w(v$),w(N5),f&&t(zVe),f&&t(pf),w(F$),f&&t(WVe),f&&t(Mr),w(T$),w(E$),w(j5),w(C$),w(H5),f&&t(QVe),f&&t(bf),w(w$),f&&t(HVe),f&&t(Er),w(A$),w(y$),w(J5),w(x$),w(K5),f&&t(UVe),f&&t(Tf),w($$),f&&t(JVe),f&&t(Cr),w(k$),w(R$),w(e3),w(P$),w(t3),f&&t(YVe),f&&t(Cf),w(I$),f&&t(KVe),f&&t(wr),w(N$),w(j$),w(n3),w(D$),w(l3)}}}const JOt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function YOt(x){return UDt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aVt extends zDt{constructor(g){super();WDt(this,g,YOt,UOt,QDt,{})}}export{aVt as default,JOt as metadata};
