import{S as jqt,i as Dqt,s as Gqt,e as a,k as l,w as F,t as o,M as Oqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Vqt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as PJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Xqt(y){let g,v,p,m,u,d,h,Eo,Mi,xf,nt,Ei,Ci,_A,$f,Oe,We,wi,Sn,bA,Rn,Pn,vA,Ai,Bn,FA,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),_A=o(")."),$f=l(),Oe=a("p"),We=o("Likewise, if your "),wi=a("code"),Sn=o("NewModel"),bA=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),vA=o(`, make sure its
`),Ai=a("code"),Bn=o("config_class"),FA=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Hk=s(p);m=r(Hk,"NewModelConfig"),Hk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var Uk=s(Mi);xf=r(Uk,"model_type"),Uk.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var Jk=s(Ei);Ci=r(Jk,'"new-model"'),Jk.forEach(t),_A=r(Ae,")."),Ae.forEach(t),$f=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Sn=r($a,"NewModel"),$a.forEach(t),bA=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Yk=s(Rn);Pn=r(Yk,"PreTrainedModel"),Yk.forEach(t),vA=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);Bn=r(Sf,"config_class"),Sf.forEach(t),FA=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var Kk=s(Li);kf=r(Kk,"NewModelConfig"),Kk.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,nt),e(g,Ei),e(Ei,Ci),e(g,_A),b(Qe,$f,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,wi),e(wi,Sn),e(Oe,bA),e(Oe,Rn),e(Rn,Pn),e(Oe,vA),e(Oe,Ai),e(Ai,Bn),e(Oe,FA),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(Qe){Qe&&t(g),Qe&&t($f),Qe&&t(Oe)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(y){let g,v,p,m,u,d,h,Eo,Mi,xf,nt,Ei,Ci,_A,$f,Oe,We,wi,Sn,bA,Rn,Pn,vA,Ai,Bn,FA,Li,kf,xa,Qe,Ae,Hk,yi,Uk,Jk,Co,$a,Yk,Sf,Kk,Mze,lGe,xi,Rf,Jre,TA,Eze,Yre,Cze,iGe,In,wze,Kre,Aze,Lze,Zre,yze,xze,dGe,MA,cGe,Zk,$ze,fGe,Pf,mGe,$i,Bf,ete,EA,kze,ote,Sze,gGe,wo,CA,Rze,wA,Pze,eS,Bze,Ize,Nze,AA,qze,rte,jze,Dze,Gze,wr,LA,Oze,tte,Vze,Xze,ki,zze,ate,Wze,Qze,nte,Hze,Uze,Jze,A,If,ste,Yze,Kze,oS,Zze,eWe,oWe,Nf,lte,rWe,tWe,rS,aWe,nWe,sWe,qf,ite,lWe,iWe,tS,dWe,cWe,fWe,jf,dte,mWe,gWe,aS,hWe,pWe,uWe,Df,cte,_We,bWe,nS,vWe,FWe,TWe,Gf,fte,MWe,EWe,sS,CWe,wWe,AWe,Of,mte,LWe,yWe,lS,xWe,$We,kWe,Vf,gte,SWe,RWe,iS,PWe,BWe,IWe,Xf,hte,NWe,qWe,dS,jWe,DWe,GWe,zf,pte,OWe,VWe,cS,XWe,zWe,WWe,Wf,ute,QWe,HWe,fS,UWe,JWe,YWe,Qf,_te,KWe,ZWe,mS,eQe,oQe,rQe,Hf,bte,tQe,aQe,gS,nQe,sQe,lQe,Uf,vte,iQe,dQe,hS,cQe,fQe,mQe,Jf,Fte,gQe,hQe,pS,pQe,uQe,_Qe,Yf,Tte,bQe,vQe,uS,FQe,TQe,MQe,Kf,Mte,EQe,CQe,_S,wQe,AQe,LQe,Zf,Ete,yQe,xQe,bS,$Qe,kQe,SQe,em,Cte,RQe,PQe,vS,BQe,IQe,NQe,om,wte,qQe,jQe,FS,DQe,GQe,OQe,rm,Ate,VQe,XQe,TS,zQe,WQe,QQe,tm,Lte,HQe,UQe,MS,JQe,YQe,KQe,am,yte,ZQe,eHe,ES,oHe,rHe,tHe,nm,xte,aHe,nHe,CS,sHe,lHe,iHe,sm,$te,dHe,cHe,wS,fHe,mHe,gHe,lm,kte,hHe,pHe,AS,uHe,_He,bHe,im,Ste,vHe,FHe,LS,THe,MHe,EHe,dm,Rte,CHe,wHe,yS,AHe,LHe,yHe,cm,Pte,xHe,$He,xS,kHe,SHe,RHe,fm,Bte,PHe,BHe,$S,IHe,NHe,qHe,mm,Ite,jHe,DHe,kS,GHe,OHe,VHe,gm,Nte,XHe,zHe,SS,WHe,QHe,HHe,hm,qte,UHe,JHe,RS,YHe,KHe,ZHe,pm,jte,eUe,oUe,PS,rUe,tUe,aUe,um,Dte,nUe,sUe,BS,lUe,iUe,dUe,_m,Gte,cUe,fUe,IS,mUe,gUe,hUe,bm,Ote,pUe,uUe,NS,_Ue,bUe,vUe,vm,Vte,FUe,TUe,qS,MUe,EUe,CUe,Fm,Xte,wUe,AUe,jS,LUe,yUe,xUe,Tm,zte,$Ue,kUe,DS,SUe,RUe,PUe,Mm,Wte,BUe,IUe,GS,NUe,qUe,jUe,Em,Qte,DUe,GUe,OS,OUe,VUe,XUe,Cm,Hte,zUe,WUe,VS,QUe,HUe,UUe,wm,Ute,JUe,YUe,XS,KUe,ZUe,eJe,Am,Jte,oJe,rJe,zS,tJe,aJe,nJe,Lm,Yte,sJe,lJe,WS,iJe,dJe,cJe,ym,Kte,fJe,mJe,QS,gJe,hJe,pJe,xm,Zte,uJe,_Je,HS,bJe,vJe,FJe,$m,eae,TJe,MJe,US,EJe,CJe,wJe,km,oae,AJe,LJe,JS,yJe,xJe,$Je,Sm,rae,kJe,SJe,YS,RJe,PJe,BJe,Rm,tae,IJe,NJe,KS,qJe,jJe,DJe,Pm,aae,GJe,OJe,ZS,VJe,XJe,zJe,Bm,nae,WJe,QJe,eR,HJe,UJe,JJe,Im,sae,YJe,KJe,oR,ZJe,eYe,oYe,Nm,lae,rYe,tYe,rR,aYe,nYe,sYe,qm,iae,lYe,iYe,tR,dYe,cYe,fYe,jm,dae,mYe,gYe,aR,hYe,pYe,uYe,Dm,cae,_Ye,bYe,nR,vYe,FYe,TYe,Gm,fae,MYe,EYe,sR,CYe,wYe,AYe,Om,mae,LYe,yYe,lR,xYe,$Ye,kYe,Vm,gae,SYe,RYe,iR,PYe,BYe,IYe,Xm,hae,NYe,qYe,dR,jYe,DYe,GYe,zm,pae,OYe,VYe,cR,XYe,zYe,WYe,Wm,uae,QYe,HYe,fR,UYe,JYe,YYe,Qm,_ae,KYe,ZYe,mR,eKe,oKe,rKe,Hm,bae,tKe,aKe,gR,nKe,sKe,lKe,Um,vae,iKe,dKe,hR,cKe,fKe,mKe,Jm,Fae,gKe,hKe,pR,pKe,uKe,_Ke,Ym,Tae,bKe,vKe,uR,FKe,TKe,MKe,Km,Mae,EKe,CKe,_R,wKe,AKe,LKe,Zm,Eae,yKe,xKe,bR,$Ke,kKe,SKe,eg,Cae,RKe,PKe,vR,BKe,IKe,NKe,og,wae,qKe,jKe,FR,DKe,GKe,OKe,rg,Aae,VKe,XKe,TR,zKe,WKe,QKe,tg,Lae,HKe,UKe,MR,JKe,YKe,KKe,ag,yae,ZKe,eZe,ER,oZe,rZe,tZe,ng,xae,aZe,nZe,CR,sZe,lZe,iZe,sg,$ae,dZe,cZe,wR,fZe,mZe,gZe,lg,kae,hZe,pZe,AR,uZe,_Ze,bZe,ig,Sae,vZe,FZe,LR,TZe,MZe,EZe,dg,Rae,CZe,wZe,yR,AZe,LZe,yZe,cg,Pae,xZe,$Ze,xR,kZe,SZe,RZe,fg,Bae,PZe,BZe,$R,IZe,NZe,qZe,mg,Iae,jZe,DZe,kR,GZe,OZe,VZe,gg,Nae,XZe,zZe,SR,WZe,QZe,HZe,hg,qae,UZe,JZe,RR,YZe,KZe,ZZe,pg,jae,eeo,oeo,PR,reo,teo,aeo,ug,Dae,neo,seo,BR,leo,ieo,deo,_g,Gae,ceo,feo,IR,meo,geo,heo,bg,Oae,peo,ueo,NR,_eo,beo,veo,vg,Vae,Feo,Teo,qR,Meo,Eeo,Ceo,Fg,Xae,weo,Aeo,jR,Leo,yeo,xeo,Tg,zae,$eo,keo,DR,Seo,Reo,Peo,Mg,Wae,Beo,Ieo,GR,Neo,qeo,jeo,Eg,Qae,Deo,Geo,OR,Oeo,Veo,Xeo,Cg,Hae,zeo,Weo,VR,Qeo,Heo,Ueo,wg,Uae,Jeo,Yeo,XR,Keo,Zeo,eoo,Ag,Jae,ooo,roo,zR,too,aoo,noo,Lg,Yae,soo,loo,WR,ioo,doo,coo,yg,Kae,foo,moo,QR,goo,hoo,poo,xg,Zae,uoo,_oo,HR,boo,voo,Foo,$g,ene,Too,Moo,UR,Eoo,Coo,woo,kg,one,Aoo,Loo,JR,yoo,xoo,$oo,Sg,rne,koo,Soo,YR,Roo,Poo,Boo,Rg,tne,Ioo,Noo,KR,qoo,joo,Doo,Pg,ane,Goo,Ooo,ZR,Voo,Xoo,zoo,Bg,nne,Woo,Qoo,eP,Hoo,Uoo,Joo,Ig,sne,Yoo,Koo,oP,Zoo,ero,oro,Ng,lne,rro,tro,rP,aro,nro,sro,qg,ine,lro,iro,tP,dro,cro,fro,jg,dne,mro,gro,aP,hro,pro,uro,Dg,cne,_ro,bro,nP,vro,Fro,Tro,Gg,Mro,Og,yA,Ero,fne,Cro,hGe,Si,Vg,mne,xA,wro,gne,Aro,pGe,Ao,$A,Lro,kA,yro,sP,xro,$ro,kro,SA,Sro,hne,Rro,Pro,Bro,Ar,RA,Iro,pne,Nro,qro,ka,jro,une,Dro,Gro,_ne,Oro,Vro,bne,Xro,zro,Wro,k,Nn,vne,Qro,Hro,lP,Uro,Jro,iP,Yro,Kro,Zro,qn,Fne,eto,oto,dP,rto,tto,cP,ato,nto,sto,jn,Tne,lto,ito,fP,dto,cto,mP,fto,mto,gto,Xg,Mne,hto,pto,gP,uto,_to,bto,Dn,Ene,vto,Fto,hP,Tto,Mto,pP,Eto,Cto,wto,zg,Cne,Ato,Lto,uP,yto,xto,$to,Wg,wne,kto,Sto,_P,Rto,Pto,Bto,Qg,Ane,Ito,Nto,bP,qto,jto,Dto,Gn,Lne,Gto,Oto,vP,Vto,Xto,FP,zto,Wto,Qto,On,yne,Hto,Uto,TP,Jto,Yto,MP,Kto,Zto,eao,Vn,xne,oao,rao,EP,tao,aao,CP,nao,sao,lao,Hg,$ne,iao,dao,wP,cao,fao,mao,Ug,kne,gao,hao,AP,pao,uao,_ao,Jg,Sne,bao,vao,LP,Fao,Tao,Mao,Xn,Rne,Eao,Cao,yP,wao,Aao,xP,Lao,yao,xao,Yg,Pne,$ao,kao,$P,Sao,Rao,Pao,zn,Bne,Bao,Iao,kP,Nao,qao,SP,jao,Dao,Gao,Wn,Ine,Oao,Vao,RP,Xao,zao,PP,Wao,Qao,Hao,Qn,Nne,Uao,Jao,BP,Yao,Kao,IP,Zao,eno,ono,Kg,qne,rno,tno,NP,ano,nno,sno,Hn,jne,lno,ino,qP,dno,cno,jP,fno,mno,gno,Un,Dne,hno,pno,DP,uno,_no,GP,bno,vno,Fno,Jn,Gne,Tno,Mno,OP,Eno,Cno,VP,wno,Ano,Lno,Yn,One,yno,xno,XP,$no,kno,zP,Sno,Rno,Pno,Kn,Vne,Bno,Ino,WP,Nno,qno,QP,jno,Dno,Gno,Zn,Xne,Ono,Vno,HP,Xno,zno,UP,Wno,Qno,Hno,Zg,zne,Uno,Jno,JP,Yno,Kno,Zno,es,Wne,eso,oso,YP,rso,tso,KP,aso,nso,sso,eh,Qne,lso,iso,ZP,dso,cso,fso,os,Hne,mso,gso,eB,hso,pso,oB,uso,_so,bso,rs,Une,vso,Fso,rB,Tso,Mso,tB,Eso,Cso,wso,ts,Jne,Aso,Lso,aB,yso,xso,nB,$so,kso,Sso,oh,Yne,Rso,Pso,sB,Bso,Iso,Nso,as,Kne,qso,jso,lB,Dso,Gso,iB,Oso,Vso,Xso,ns,Zne,zso,Wso,dB,Qso,Hso,cB,Uso,Jso,Yso,rh,ese,Kso,Zso,fB,elo,olo,rlo,ss,ose,tlo,alo,mB,nlo,slo,gB,llo,ilo,dlo,ls,rse,clo,flo,hB,mlo,glo,pB,hlo,plo,ulo,is,tse,_lo,blo,uB,vlo,Flo,_B,Tlo,Mlo,Elo,ds,ase,Clo,wlo,bB,Alo,Llo,vB,ylo,xlo,$lo,cs,nse,klo,Slo,FB,Rlo,Plo,TB,Blo,Ilo,Nlo,fs,sse,qlo,jlo,MB,Dlo,Glo,EB,Olo,Vlo,Xlo,ms,lse,zlo,Wlo,CB,Qlo,Hlo,wB,Ulo,Jlo,Ylo,gs,ise,Klo,Zlo,AB,eio,oio,LB,rio,tio,aio,th,dse,nio,sio,yB,lio,iio,dio,hs,cse,cio,fio,xB,mio,gio,$B,hio,pio,uio,ah,fse,_io,bio,kB,vio,Fio,Tio,nh,mse,Mio,Eio,SB,Cio,wio,Aio,ps,gse,Lio,yio,RB,xio,$io,PB,kio,Sio,Rio,us,hse,Pio,Bio,BB,Iio,Nio,IB,qio,jio,Dio,_s,pse,Gio,Oio,NB,Vio,Xio,qB,zio,Wio,Qio,sh,use,Hio,Uio,jB,Jio,Yio,Kio,bs,_se,Zio,edo,DB,odo,rdo,GB,tdo,ado,ndo,vs,bse,sdo,ldo,OB,ido,ddo,VB,cdo,fdo,mdo,Fs,vse,gdo,hdo,XB,pdo,udo,zB,_do,bdo,vdo,Ts,Fse,Fdo,Tdo,WB,Mdo,Edo,QB,Cdo,wdo,Ado,Ms,Tse,Ldo,ydo,HB,xdo,$do,UB,kdo,Sdo,Rdo,lh,Mse,Pdo,Bdo,JB,Ido,Ndo,qdo,Es,Ese,jdo,Ddo,YB,Gdo,Odo,KB,Vdo,Xdo,zdo,ih,Cse,Wdo,Qdo,ZB,Hdo,Udo,Jdo,dh,wse,Ydo,Kdo,eI,Zdo,eco,oco,ch,Ase,rco,tco,oI,aco,nco,sco,fh,Lse,lco,ico,rI,dco,cco,fco,Cs,yse,mco,gco,tI,hco,pco,aI,uco,_co,bco,mh,xse,vco,Fco,nI,Tco,Mco,Eco,ws,$se,Cco,wco,sI,Aco,Lco,lI,yco,xco,$co,As,kse,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,Ls,Sse,qco,jco,cI,Dco,Gco,fI,Oco,Vco,Xco,ys,Rse,zco,Wco,mI,Qco,Hco,gI,Uco,Jco,Yco,xs,Pse,Kco,Zco,hI,efo,ofo,pI,rfo,tfo,afo,$s,Bse,nfo,sfo,uI,lfo,ifo,_I,dfo,cfo,ffo,gh,Ise,mfo,gfo,bI,hfo,pfo,ufo,hh,Nse,_fo,bfo,vI,vfo,Ffo,Tfo,ks,qse,Mfo,Efo,FI,Cfo,wfo,TI,Afo,Lfo,yfo,Ss,jse,xfo,$fo,MI,kfo,Sfo,EI,Rfo,Pfo,Bfo,Rs,Dse,Ifo,Nfo,CI,qfo,jfo,wI,Dfo,Gfo,Ofo,ph,Gse,Vfo,Xfo,AI,zfo,Wfo,Qfo,uh,Ose,Hfo,Ufo,LI,Jfo,Yfo,Kfo,_h,Vse,Zfo,emo,yI,omo,rmo,tmo,Ps,Xse,amo,nmo,xI,smo,lmo,$I,imo,dmo,cmo,Bs,zse,fmo,mmo,kI,gmo,hmo,SI,pmo,umo,_mo,bh,Wse,bmo,vmo,RI,Fmo,Tmo,Mmo,vh,Qse,Emo,Cmo,PI,wmo,Amo,Lmo,Fh,Hse,ymo,xmo,BI,$mo,kmo,Smo,Is,Use,Rmo,Pmo,II,Bmo,Imo,NI,Nmo,qmo,jmo,Th,Jse,Dmo,Gmo,qI,Omo,Vmo,Xmo,Mh,Yse,zmo,Wmo,jI,Qmo,Hmo,Umo,Ns,Kse,Jmo,Ymo,DI,Kmo,Zmo,GI,ego,ogo,rgo,qs,Zse,tgo,ago,OI,ngo,sgo,VI,lgo,igo,dgo,js,ele,cgo,fgo,XI,mgo,ggo,zI,hgo,pgo,ugo,Ds,ole,_go,bgo,WI,vgo,Fgo,QI,Tgo,Mgo,Ego,Eh,Cgo,Ch,PA,wgo,rle,Ago,uGe,Ri,wh,tle,BA,Lgo,ale,ygo,_Ge,Lo,IA,xgo,NA,$go,HI,kgo,Sgo,Rgo,qA,Pgo,nle,Bgo,Igo,Ngo,He,jA,qgo,sle,jgo,Dgo,Sa,Ggo,lle,Ogo,Vgo,ile,Xgo,zgo,dle,Wgo,Qgo,Hgo,Y,Ah,cle,Ugo,Jgo,UI,Ygo,Kgo,Zgo,Lh,fle,eho,oho,JI,rho,tho,aho,yh,mle,nho,sho,YI,lho,iho,dho,xh,gle,cho,fho,KI,mho,gho,hho,$h,hle,pho,uho,ZI,_ho,bho,vho,kh,ple,Fho,Tho,eN,Mho,Eho,Cho,Sh,ule,who,Aho,oN,Lho,yho,xho,Rh,_le,$ho,kho,rN,Sho,Rho,Pho,Ph,ble,Bho,Iho,tN,Nho,qho,jho,Bh,vle,Dho,Gho,aN,Oho,Vho,Xho,Ih,Fle,zho,Who,nN,Qho,Hho,Uho,Nh,Tle,Jho,Yho,sN,Kho,Zho,epo,qh,Mle,opo,rpo,lN,tpo,apo,npo,jh,Ele,spo,lpo,iN,ipo,dpo,cpo,Dh,Cle,fpo,mpo,dN,gpo,hpo,ppo,Gh,wle,upo,_po,cN,bpo,vpo,Fpo,Oh,Ale,Tpo,Mpo,fN,Epo,Cpo,wpo,Vh,Lle,Apo,Lpo,mN,ypo,xpo,$po,Xh,yle,kpo,Spo,gN,Rpo,Ppo,Bpo,zh,xle,Ipo,Npo,hN,qpo,jpo,Dpo,Wh,$le,Gpo,Opo,pN,Vpo,Xpo,zpo,Qh,kle,Wpo,Qpo,uN,Hpo,Upo,Jpo,Hh,Sle,Ypo,Kpo,_N,Zpo,euo,ouo,Uh,Rle,ruo,tuo,bN,auo,nuo,suo,Jh,Ple,luo,iuo,vN,duo,cuo,fuo,Yh,Ble,muo,guo,FN,huo,puo,uuo,Kh,Ile,_uo,buo,TN,vuo,Fuo,Tuo,Zh,Nle,Muo,Euo,MN,Cuo,wuo,Auo,ep,qle,Luo,yuo,EN,xuo,$uo,kuo,op,jle,Suo,Ruo,CN,Puo,Buo,Iuo,rp,Dle,Nuo,quo,wN,juo,Duo,Guo,tp,Gle,Ouo,Vuo,AN,Xuo,zuo,Wuo,ap,Quo,np,Huo,sp,DA,Uuo,Ole,Juo,bGe,Pi,lp,Vle,GA,Yuo,Xle,Kuo,vGe,yo,OA,Zuo,VA,e_o,LN,o_o,r_o,t_o,XA,a_o,zle,n_o,s_o,l_o,Ue,zA,i_o,Wle,d_o,c_o,Bi,f_o,Qle,m_o,g_o,Hle,h_o,p_o,u_o,he,ip,Ule,__o,b_o,yN,v_o,F_o,T_o,dp,Jle,M_o,E_o,Yle,C_o,w_o,A_o,cp,Kle,L_o,y_o,xN,x_o,$_o,k_o,fp,Zle,S_o,R_o,$N,P_o,B_o,I_o,mp,eie,N_o,q_o,kN,j_o,D_o,G_o,gp,oie,O_o,V_o,SN,X_o,z_o,W_o,hp,rie,Q_o,H_o,RN,U_o,J_o,Y_o,pp,tie,K_o,Z_o,PN,e1o,o1o,r1o,up,aie,t1o,a1o,BN,n1o,s1o,l1o,_p,nie,i1o,d1o,IN,c1o,f1o,m1o,bp,sie,g1o,h1o,NN,p1o,u1o,_1o,vp,lie,b1o,v1o,qN,F1o,T1o,M1o,Fp,iie,E1o,C1o,jN,w1o,A1o,L1o,Tp,die,y1o,x1o,DN,$1o,k1o,S1o,Mp,cie,R1o,P1o,GN,B1o,I1o,N1o,Ep,fie,q1o,j1o,ON,D1o,G1o,O1o,Cp,mie,V1o,X1o,VN,z1o,W1o,Q1o,wp,H1o,Ap,U1o,Lp,WA,J1o,gie,Y1o,FGe,Ii,yp,hie,QA,K1o,pie,Z1o,TGe,xo,HA,e2o,Ni,o2o,XN,r2o,t2o,zN,a2o,n2o,s2o,UA,l2o,uie,i2o,d2o,c2o,st,JA,f2o,_ie,m2o,g2o,qi,h2o,bie,p2o,u2o,WN,_2o,b2o,v2o,xp,F2o,Je,YA,T2o,vie,M2o,E2o,Ra,C2o,Fie,w2o,A2o,Tie,L2o,y2o,Mie,x2o,$2o,k2o,x,$p,Eie,S2o,R2o,QN,P2o,B2o,I2o,kp,Cie,N2o,q2o,HN,j2o,D2o,G2o,Sp,wie,O2o,V2o,UN,X2o,z2o,W2o,Rp,Aie,Q2o,H2o,JN,U2o,J2o,Y2o,Pp,Lie,K2o,Z2o,YN,ebo,obo,rbo,Bp,yie,tbo,abo,KN,nbo,sbo,lbo,Ip,xie,ibo,dbo,ZN,cbo,fbo,mbo,Np,$ie,gbo,hbo,eq,pbo,ubo,_bo,qp,kie,bbo,vbo,oq,Fbo,Tbo,Mbo,jp,Sie,Ebo,Cbo,rq,wbo,Abo,Lbo,Dp,Rie,ybo,xbo,tq,$bo,kbo,Sbo,Gp,Pie,Rbo,Pbo,aq,Bbo,Ibo,Nbo,Op,Bie,qbo,jbo,nq,Dbo,Gbo,Obo,Vp,Iie,Vbo,Xbo,sq,zbo,Wbo,Qbo,Xp,Nie,Hbo,Ubo,lq,Jbo,Ybo,Kbo,zp,qie,Zbo,evo,iq,ovo,rvo,tvo,Wp,jie,avo,nvo,dq,svo,lvo,ivo,Qp,Die,dvo,cvo,cq,fvo,mvo,gvo,Hp,Gie,hvo,pvo,fq,uvo,_vo,bvo,Up,Oie,vvo,Fvo,mq,Tvo,Mvo,Evo,Jp,Vie,Cvo,wvo,gq,Avo,Lvo,yvo,Yp,Xie,xvo,$vo,hq,kvo,Svo,Rvo,Kp,zie,Pvo,Bvo,pq,Ivo,Nvo,qvo,Zp,Wie,jvo,Dvo,uq,Gvo,Ovo,Vvo,eu,Qie,Xvo,zvo,_q,Wvo,Qvo,Hvo,ou,Hie,Uvo,Jvo,bq,Yvo,Kvo,Zvo,ru,Uie,e0o,o0o,vq,r0o,t0o,a0o,tu,Jie,n0o,s0o,Fq,l0o,i0o,d0o,au,Yie,c0o,f0o,Tq,m0o,g0o,h0o,nu,Kie,p0o,u0o,Mq,_0o,b0o,v0o,su,Zie,F0o,T0o,Eq,M0o,E0o,C0o,lu,ede,w0o,A0o,Cq,L0o,y0o,x0o,iu,ode,$0o,k0o,wq,S0o,R0o,P0o,Gs,rde,B0o,I0o,Aq,N0o,q0o,Lq,j0o,D0o,G0o,du,tde,O0o,V0o,yq,X0o,z0o,W0o,cu,ade,Q0o,H0o,xq,U0o,J0o,Y0o,fu,nde,K0o,Z0o,$q,eFo,oFo,rFo,mu,sde,tFo,aFo,kq,nFo,sFo,lFo,gu,lde,iFo,dFo,Sq,cFo,fFo,mFo,hu,ide,gFo,hFo,Rq,pFo,uFo,_Fo,pu,dde,bFo,vFo,Pq,FFo,TFo,MFo,uu,cde,EFo,CFo,Bq,wFo,AFo,LFo,_u,fde,yFo,xFo,Iq,$Fo,kFo,SFo,bu,mde,RFo,PFo,Nq,BFo,IFo,NFo,vu,gde,qFo,jFo,qq,DFo,GFo,OFo,Fu,hde,VFo,XFo,jq,zFo,WFo,QFo,Tu,pde,HFo,UFo,Dq,JFo,YFo,KFo,Mu,ude,ZFo,e6o,Gq,o6o,r6o,t6o,Eu,_de,a6o,n6o,Oq,s6o,l6o,i6o,Cu,bde,d6o,c6o,Vq,f6o,m6o,g6o,wu,vde,h6o,p6o,Xq,u6o,_6o,b6o,Au,Fde,v6o,F6o,zq,T6o,M6o,E6o,Lu,Tde,C6o,w6o,Wq,A6o,L6o,y6o,yu,Mde,x6o,$6o,Qq,k6o,S6o,R6o,xu,Ede,P6o,B6o,Hq,I6o,N6o,q6o,$u,Cde,j6o,D6o,Uq,G6o,O6o,V6o,ku,wde,X6o,z6o,Jq,W6o,Q6o,H6o,Su,Ade,U6o,J6o,Yq,Y6o,K6o,Z6o,Ru,Lde,eTo,oTo,Kq,rTo,tTo,aTo,Pu,yde,nTo,sTo,Zq,lTo,iTo,dTo,Bu,xde,cTo,fTo,ej,mTo,gTo,hTo,Iu,$de,pTo,uTo,oj,_To,bTo,vTo,Nu,kde,FTo,TTo,rj,MTo,ETo,CTo,qu,Sde,wTo,ATo,tj,LTo,yTo,xTo,ju,Rde,$To,kTo,aj,STo,RTo,PTo,Du,Pde,BTo,ITo,nj,NTo,qTo,jTo,Gu,Bde,DTo,GTo,sj,OTo,VTo,XTo,Ou,Ide,zTo,WTo,lj,QTo,HTo,UTo,Vu,Nde,JTo,YTo,ij,KTo,ZTo,e7o,Xu,qde,o7o,r7o,dj,t7o,a7o,n7o,zu,jde,s7o,l7o,cj,i7o,d7o,c7o,Wu,Dde,f7o,m7o,fj,g7o,h7o,p7o,Qu,Gde,u7o,_7o,mj,b7o,v7o,F7o,Hu,Ode,T7o,M7o,gj,E7o,C7o,w7o,Uu,Vde,A7o,L7o,hj,y7o,x7o,$7o,Ju,Xde,k7o,S7o,pj,R7o,P7o,B7o,Yu,zde,I7o,N7o,uj,q7o,j7o,D7o,Ku,Wde,G7o,O7o,_j,V7o,X7o,z7o,Zu,Qde,W7o,Q7o,bj,H7o,U7o,J7o,e_,Hde,Y7o,K7o,vj,Z7o,e8o,o8o,o_,Ude,r8o,t8o,Fj,a8o,n8o,s8o,r_,Jde,l8o,i8o,Tj,d8o,c8o,f8o,t_,Yde,m8o,g8o,Mj,h8o,p8o,u8o,a_,Kde,_8o,b8o,Ej,v8o,F8o,T8o,n_,Zde,M8o,E8o,Cj,C8o,w8o,A8o,s_,ece,L8o,y8o,wj,x8o,$8o,k8o,l_,oce,S8o,R8o,Aj,P8o,B8o,I8o,i_,rce,N8o,q8o,Lj,j8o,D8o,G8o,d_,tce,O8o,V8o,yj,X8o,z8o,W8o,c_,ace,Q8o,H8o,xj,U8o,J8o,Y8o,f_,nce,K8o,Z8o,$j,eMo,oMo,rMo,m_,sce,tMo,aMo,kj,nMo,sMo,lMo,g_,lce,iMo,dMo,Sj,cMo,fMo,mMo,h_,ice,gMo,hMo,Rj,pMo,uMo,_Mo,p_,dce,bMo,vMo,Pj,FMo,TMo,MMo,u_,cce,EMo,CMo,Bj,wMo,AMo,LMo,__,fce,yMo,xMo,Ij,$Mo,kMo,SMo,b_,mce,RMo,PMo,Nj,BMo,IMo,NMo,v_,gce,qMo,jMo,qj,DMo,GMo,OMo,F_,hce,VMo,XMo,jj,zMo,WMo,QMo,T_,pce,HMo,UMo,Dj,JMo,YMo,KMo,M_,uce,ZMo,e4o,Gj,o4o,r4o,t4o,E_,_ce,a4o,n4o,Oj,s4o,l4o,i4o,C_,bce,d4o,c4o,Vj,f4o,m4o,g4o,w_,vce,h4o,p4o,Xj,u4o,_4o,b4o,A_,Fce,v4o,F4o,zj,T4o,M4o,E4o,L_,C4o,Tce,w4o,A4o,Mce,L4o,y4o,y_,MGe,ji,x_,Ece,KA,x4o,Cce,$4o,EGe,$o,ZA,k4o,Di,S4o,Wj,R4o,P4o,Qj,B4o,I4o,N4o,eL,q4o,wce,j4o,D4o,G4o,lt,oL,O4o,Ace,V4o,X4o,Gi,z4o,Lce,W4o,Q4o,Hj,H4o,U4o,J4o,$_,Y4o,Ye,rL,K4o,yce,Z4o,eEo,Pa,oEo,xce,rEo,tEo,$ce,aEo,nEo,kce,sEo,lEo,iEo,G,k_,Sce,dEo,cEo,Uj,fEo,mEo,gEo,S_,Rce,hEo,pEo,Jj,uEo,_Eo,bEo,R_,Pce,vEo,FEo,Yj,TEo,MEo,EEo,P_,Bce,CEo,wEo,Kj,AEo,LEo,yEo,B_,Ice,xEo,$Eo,Zj,kEo,SEo,REo,I_,Nce,PEo,BEo,eD,IEo,NEo,qEo,N_,qce,jEo,DEo,oD,GEo,OEo,VEo,q_,jce,XEo,zEo,rD,WEo,QEo,HEo,j_,Dce,UEo,JEo,tD,YEo,KEo,ZEo,D_,Gce,eCo,oCo,aD,rCo,tCo,aCo,G_,Oce,nCo,sCo,nD,lCo,iCo,dCo,O_,Vce,cCo,fCo,sD,mCo,gCo,hCo,V_,Xce,pCo,uCo,lD,_Co,bCo,vCo,X_,zce,FCo,TCo,iD,MCo,ECo,CCo,z_,Wce,wCo,ACo,dD,LCo,yCo,xCo,W_,Qce,$Co,kCo,cD,SCo,RCo,PCo,Q_,Hce,BCo,ICo,fD,NCo,qCo,jCo,H_,Uce,DCo,GCo,mD,OCo,VCo,XCo,U_,Jce,zCo,WCo,gD,QCo,HCo,UCo,J_,Yce,JCo,YCo,hD,KCo,ZCo,e5o,Y_,Kce,o5o,r5o,pD,t5o,a5o,n5o,K_,Zce,s5o,l5o,uD,i5o,d5o,c5o,Z_,efe,f5o,m5o,_D,g5o,h5o,p5o,e1,ofe,u5o,_5o,bD,b5o,v5o,F5o,o1,rfe,T5o,M5o,vD,E5o,C5o,w5o,r1,tfe,A5o,L5o,FD,y5o,x5o,$5o,t1,afe,k5o,S5o,TD,R5o,P5o,B5o,a1,nfe,I5o,N5o,MD,q5o,j5o,D5o,n1,sfe,G5o,O5o,ED,V5o,X5o,z5o,s1,lfe,W5o,Q5o,CD,H5o,U5o,J5o,l1,ife,Y5o,K5o,wD,Z5o,e3o,o3o,i1,dfe,r3o,t3o,AD,a3o,n3o,s3o,d1,cfe,l3o,i3o,LD,d3o,c3o,f3o,c1,ffe,m3o,g3o,yD,h3o,p3o,u3o,f1,mfe,_3o,b3o,xD,v3o,F3o,T3o,m1,gfe,M3o,E3o,$D,C3o,w3o,A3o,g1,hfe,L3o,y3o,kD,x3o,$3o,k3o,h1,pfe,S3o,R3o,SD,P3o,B3o,I3o,p1,ufe,N3o,q3o,RD,j3o,D3o,G3o,u1,_fe,O3o,V3o,PD,X3o,z3o,W3o,_1,bfe,Q3o,H3o,BD,U3o,J3o,Y3o,b1,vfe,K3o,Z3o,ID,ewo,owo,rwo,v1,Ffe,two,awo,ND,nwo,swo,lwo,F1,iwo,Tfe,dwo,cwo,Mfe,fwo,mwo,T1,CGe,Oi,M1,Efe,tL,gwo,Cfe,hwo,wGe,ko,aL,pwo,Vi,uwo,qD,_wo,bwo,jD,vwo,Fwo,Two,nL,Mwo,wfe,Ewo,Cwo,wwo,it,sL,Awo,Afe,Lwo,ywo,Xi,xwo,Lfe,$wo,kwo,DD,Swo,Rwo,Pwo,E1,Bwo,Ke,lL,Iwo,yfe,Nwo,qwo,Ba,jwo,xfe,Dwo,Gwo,$fe,Owo,Vwo,kfe,Xwo,zwo,Wwo,z,C1,Sfe,Qwo,Hwo,GD,Uwo,Jwo,Ywo,w1,Rfe,Kwo,Zwo,OD,eAo,oAo,rAo,A1,Pfe,tAo,aAo,VD,nAo,sAo,lAo,L1,Bfe,iAo,dAo,XD,cAo,fAo,mAo,y1,Ife,gAo,hAo,zD,pAo,uAo,_Ao,x1,Nfe,bAo,vAo,WD,FAo,TAo,MAo,$1,qfe,EAo,CAo,QD,wAo,AAo,LAo,k1,jfe,yAo,xAo,HD,$Ao,kAo,SAo,S1,Dfe,RAo,PAo,UD,BAo,IAo,NAo,R1,Gfe,qAo,jAo,JD,DAo,GAo,OAo,P1,Ofe,VAo,XAo,YD,zAo,WAo,QAo,B1,Vfe,HAo,UAo,KD,JAo,YAo,KAo,I1,Xfe,ZAo,eLo,ZD,oLo,rLo,tLo,N1,zfe,aLo,nLo,eG,sLo,lLo,iLo,q1,Wfe,dLo,cLo,oG,fLo,mLo,gLo,j1,Qfe,hLo,pLo,rG,uLo,_Lo,bLo,D1,Hfe,vLo,FLo,tG,TLo,MLo,ELo,G1,Ufe,CLo,wLo,aG,ALo,LLo,yLo,O1,Jfe,xLo,$Lo,nG,kLo,SLo,RLo,V1,Yfe,PLo,BLo,sG,ILo,NLo,qLo,X1,Kfe,jLo,DLo,lG,GLo,OLo,VLo,z1,Zfe,XLo,zLo,iG,WLo,QLo,HLo,W1,eme,ULo,JLo,dG,YLo,KLo,ZLo,Q1,ome,eyo,oyo,cG,ryo,tyo,ayo,H1,rme,nyo,syo,fG,lyo,iyo,dyo,U1,tme,cyo,fyo,mG,myo,gyo,hyo,J1,ame,pyo,uyo,gG,_yo,byo,vyo,Y1,nme,Fyo,Tyo,hG,Myo,Eyo,Cyo,K1,sme,wyo,Ayo,pG,Lyo,yyo,xyo,Z1,lme,$yo,kyo,uG,Syo,Ryo,Pyo,e2,ime,Byo,Iyo,_G,Nyo,qyo,jyo,o2,dme,Dyo,Gyo,bG,Oyo,Vyo,Xyo,r2,cme,zyo,Wyo,vG,Qyo,Hyo,Uyo,t2,fme,Jyo,Yyo,FG,Kyo,Zyo,e9o,a2,mme,o9o,r9o,TG,t9o,a9o,n9o,n2,gme,s9o,l9o,MG,i9o,d9o,c9o,s2,hme,f9o,m9o,EG,g9o,h9o,p9o,l2,pme,u9o,_9o,CG,b9o,v9o,F9o,i2,T9o,ume,M9o,E9o,_me,C9o,w9o,d2,AGe,zi,c2,bme,iL,A9o,vme,L9o,LGe,So,dL,y9o,Wi,x9o,wG,$9o,k9o,AG,S9o,R9o,P9o,cL,B9o,Fme,I9o,N9o,q9o,dt,fL,j9o,Tme,D9o,G9o,Qi,O9o,Mme,V9o,X9o,LG,z9o,W9o,Q9o,f2,H9o,Ze,mL,U9o,Eme,J9o,Y9o,Ia,K9o,Cme,Z9o,exo,wme,oxo,rxo,Ame,txo,axo,nxo,Q,m2,Lme,sxo,lxo,yG,ixo,dxo,cxo,g2,yme,fxo,mxo,xG,gxo,hxo,pxo,h2,xme,uxo,_xo,$G,bxo,vxo,Fxo,p2,$me,Txo,Mxo,kG,Exo,Cxo,wxo,u2,kme,Axo,Lxo,SG,yxo,xxo,$xo,_2,Sme,kxo,Sxo,RG,Rxo,Pxo,Bxo,b2,Rme,Ixo,Nxo,PG,qxo,jxo,Dxo,v2,Pme,Gxo,Oxo,BG,Vxo,Xxo,zxo,F2,Bme,Wxo,Qxo,IG,Hxo,Uxo,Jxo,T2,Ime,Yxo,Kxo,NG,Zxo,e$o,o$o,M2,Nme,r$o,t$o,qG,a$o,n$o,s$o,E2,qme,l$o,i$o,jG,d$o,c$o,f$o,C2,jme,m$o,g$o,DG,h$o,p$o,u$o,w2,Dme,_$o,b$o,GG,v$o,F$o,T$o,A2,Gme,M$o,E$o,OG,C$o,w$o,A$o,L2,Ome,L$o,y$o,VG,x$o,$$o,k$o,y2,Vme,S$o,R$o,XG,P$o,B$o,I$o,x2,Xme,N$o,q$o,zG,j$o,D$o,G$o,$2,zme,O$o,V$o,WG,X$o,z$o,W$o,k2,Wme,Q$o,H$o,QG,U$o,J$o,Y$o,S2,Qme,K$o,Z$o,HG,eko,oko,rko,R2,Hme,tko,ako,UG,nko,sko,lko,P2,Ume,iko,dko,JG,cko,fko,mko,B2,Jme,gko,hko,YG,pko,uko,_ko,I2,Yme,bko,vko,KG,Fko,Tko,Mko,N2,Kme,Eko,Cko,ZG,wko,Ako,Lko,q2,Zme,yko,xko,eO,$ko,kko,Sko,j2,ege,Rko,Pko,oO,Bko,Iko,Nko,D2,oge,qko,jko,rO,Dko,Gko,Oko,G2,rge,Vko,Xko,tO,zko,Wko,Qko,O2,tge,Hko,Uko,aO,Jko,Yko,Kko,V2,age,Zko,eSo,nge,oSo,rSo,tSo,X2,sge,aSo,nSo,nO,sSo,lSo,iSo,z2,lge,dSo,cSo,sO,fSo,mSo,gSo,W2,ige,hSo,pSo,lO,uSo,_So,bSo,Q2,dge,vSo,FSo,iO,TSo,MSo,ESo,H2,CSo,cge,wSo,ASo,fge,LSo,ySo,U2,yGe,Hi,J2,mge,gL,xSo,gge,$So,xGe,Ro,hL,kSo,Ui,SSo,dO,RSo,PSo,cO,BSo,ISo,NSo,pL,qSo,hge,jSo,DSo,GSo,ct,uL,OSo,pge,VSo,XSo,Ji,zSo,uge,WSo,QSo,fO,HSo,USo,JSo,Y2,YSo,eo,_L,KSo,_ge,ZSo,eRo,Na,oRo,bge,rRo,tRo,vge,aRo,nRo,Fge,sRo,lRo,iRo,pe,K2,Tge,dRo,cRo,mO,fRo,mRo,gRo,Z2,Mge,hRo,pRo,gO,uRo,_Ro,bRo,eb,Ege,vRo,FRo,hO,TRo,MRo,ERo,ob,Cge,CRo,wRo,pO,ARo,LRo,yRo,rb,wge,xRo,$Ro,uO,kRo,SRo,RRo,tb,Age,PRo,BRo,_O,IRo,NRo,qRo,ab,Lge,jRo,DRo,bO,GRo,ORo,VRo,nb,yge,XRo,zRo,vO,WRo,QRo,HRo,sb,xge,URo,JRo,FO,YRo,KRo,ZRo,lb,$ge,ePo,oPo,TO,rPo,tPo,aPo,ib,kge,nPo,sPo,MO,lPo,iPo,dPo,db,Sge,cPo,fPo,EO,mPo,gPo,hPo,cb,Rge,pPo,uPo,CO,_Po,bPo,vPo,fb,Pge,FPo,TPo,wO,MPo,EPo,CPo,mb,Bge,wPo,APo,AO,LPo,yPo,xPo,gb,Ige,$Po,kPo,LO,SPo,RPo,PPo,hb,Nge,BPo,IPo,yO,NPo,qPo,jPo,pb,DPo,qge,GPo,OPo,jge,VPo,XPo,ub,$Ge,Yi,_b,Dge,bL,zPo,Gge,WPo,kGe,Po,vL,QPo,Ki,HPo,xO,UPo,JPo,$O,YPo,KPo,ZPo,FL,eBo,Oge,oBo,rBo,tBo,ft,TL,aBo,Vge,nBo,sBo,Zi,lBo,Xge,iBo,dBo,kO,cBo,fBo,mBo,bb,gBo,oo,ML,hBo,zge,pBo,uBo,qa,_Bo,Wge,bBo,vBo,Qge,FBo,TBo,Hge,MBo,EBo,CBo,N,vb,Uge,wBo,ABo,SO,LBo,yBo,xBo,Fb,Jge,$Bo,kBo,RO,SBo,RBo,PBo,Tb,Yge,BBo,IBo,PO,NBo,qBo,jBo,Mb,Kge,DBo,GBo,BO,OBo,VBo,XBo,Eb,Zge,zBo,WBo,IO,QBo,HBo,UBo,Cb,ehe,JBo,YBo,NO,KBo,ZBo,eIo,wb,ohe,oIo,rIo,qO,tIo,aIo,nIo,Ab,rhe,sIo,lIo,jO,iIo,dIo,cIo,Lb,the,fIo,mIo,DO,gIo,hIo,pIo,yb,ahe,uIo,_Io,GO,bIo,vIo,FIo,xb,nhe,TIo,MIo,OO,EIo,CIo,wIo,$b,she,AIo,LIo,VO,yIo,xIo,$Io,kb,lhe,kIo,SIo,XO,RIo,PIo,BIo,Sb,ihe,IIo,NIo,zO,qIo,jIo,DIo,Rb,dhe,GIo,OIo,WO,VIo,XIo,zIo,Pb,che,WIo,QIo,QO,HIo,UIo,JIo,Bb,fhe,YIo,KIo,HO,ZIo,eNo,oNo,Ib,mhe,rNo,tNo,UO,aNo,nNo,sNo,Nb,ghe,lNo,iNo,JO,dNo,cNo,fNo,qb,hhe,mNo,gNo,YO,hNo,pNo,uNo,jb,phe,_No,bNo,KO,vNo,FNo,TNo,Db,uhe,MNo,ENo,ZO,CNo,wNo,ANo,Gb,_he,LNo,yNo,eV,xNo,$No,kNo,Ob,bhe,SNo,RNo,oV,PNo,BNo,INo,Vb,vhe,NNo,qNo,rV,jNo,DNo,GNo,Xb,Fhe,ONo,VNo,tV,XNo,zNo,WNo,zb,The,QNo,HNo,aV,UNo,JNo,YNo,Wb,Mhe,KNo,ZNo,nV,eqo,oqo,rqo,Qb,Ehe,tqo,aqo,sV,nqo,sqo,lqo,Hb,Che,iqo,dqo,lV,cqo,fqo,mqo,Ub,whe,gqo,hqo,iV,pqo,uqo,_qo,Jb,Ahe,bqo,vqo,dV,Fqo,Tqo,Mqo,Yb,Lhe,Eqo,Cqo,cV,wqo,Aqo,Lqo,Kb,yhe,yqo,xqo,fV,$qo,kqo,Sqo,Zb,xhe,Rqo,Pqo,mV,Bqo,Iqo,Nqo,ev,$he,qqo,jqo,gV,Dqo,Gqo,Oqo,ov,khe,Vqo,Xqo,hV,zqo,Wqo,Qqo,rv,She,Hqo,Uqo,pV,Jqo,Yqo,Kqo,tv,Rhe,Zqo,ejo,uV,ojo,rjo,tjo,av,Phe,ajo,njo,_V,sjo,ljo,ijo,nv,Bhe,djo,cjo,bV,fjo,mjo,gjo,sv,Ihe,hjo,pjo,vV,ujo,_jo,bjo,lv,Nhe,vjo,Fjo,FV,Tjo,Mjo,Ejo,iv,qhe,Cjo,wjo,TV,Ajo,Ljo,yjo,dv,jhe,xjo,$jo,MV,kjo,Sjo,Rjo,cv,Dhe,Pjo,Bjo,EV,Ijo,Njo,qjo,fv,Ghe,jjo,Djo,CV,Gjo,Ojo,Vjo,mv,Ohe,Xjo,zjo,wV,Wjo,Qjo,Hjo,gv,Ujo,Vhe,Jjo,Yjo,Xhe,Kjo,Zjo,hv,SGe,ed,pv,zhe,EL,eDo,Whe,oDo,RGe,Bo,CL,rDo,od,tDo,AV,aDo,nDo,LV,sDo,lDo,iDo,wL,dDo,Qhe,cDo,fDo,mDo,mt,AL,gDo,Hhe,hDo,pDo,rd,uDo,Uhe,_Do,bDo,yV,vDo,FDo,TDo,uv,MDo,ro,LL,EDo,Jhe,CDo,wDo,ja,ADo,Yhe,LDo,yDo,Khe,xDo,$Do,Zhe,kDo,SDo,RDo,Z,_v,epe,PDo,BDo,xV,IDo,NDo,qDo,bv,ope,jDo,DDo,$V,GDo,ODo,VDo,vv,rpe,XDo,zDo,kV,WDo,QDo,HDo,Fv,tpe,UDo,JDo,SV,YDo,KDo,ZDo,Tv,ape,eGo,oGo,RV,rGo,tGo,aGo,Mv,npe,nGo,sGo,PV,lGo,iGo,dGo,Ev,spe,cGo,fGo,BV,mGo,gGo,hGo,Cv,lpe,pGo,uGo,IV,_Go,bGo,vGo,wv,ipe,FGo,TGo,NV,MGo,EGo,CGo,Av,dpe,wGo,AGo,qV,LGo,yGo,xGo,Lv,cpe,$Go,kGo,jV,SGo,RGo,PGo,yv,fpe,BGo,IGo,DV,NGo,qGo,jGo,xv,mpe,DGo,GGo,GV,OGo,VGo,XGo,$v,gpe,zGo,WGo,OV,QGo,HGo,UGo,kv,hpe,JGo,YGo,VV,KGo,ZGo,eOo,Sv,ppe,oOo,rOo,XV,tOo,aOo,nOo,Rv,upe,sOo,lOo,zV,iOo,dOo,cOo,Pv,_pe,fOo,mOo,WV,gOo,hOo,pOo,Bv,bpe,uOo,_Oo,QV,bOo,vOo,FOo,Iv,vpe,TOo,MOo,HV,EOo,COo,wOo,Nv,Fpe,AOo,LOo,UV,yOo,xOo,$Oo,qv,Tpe,kOo,SOo,JV,ROo,POo,BOo,jv,Mpe,IOo,NOo,YV,qOo,jOo,DOo,Dv,Epe,GOo,OOo,KV,VOo,XOo,zOo,Gv,Cpe,WOo,QOo,ZV,HOo,UOo,JOo,Ov,wpe,YOo,KOo,eX,ZOo,eVo,oVo,Vv,Ape,rVo,tVo,oX,aVo,nVo,sVo,Xv,Lpe,lVo,iVo,rX,dVo,cVo,fVo,zv,ype,mVo,gVo,tX,hVo,pVo,uVo,Wv,_Vo,xpe,bVo,vVo,$pe,FVo,TVo,Qv,PGe,td,Hv,kpe,yL,MVo,Spe,EVo,BGe,Io,xL,CVo,ad,wVo,aX,AVo,LVo,nX,yVo,xVo,$Vo,$L,kVo,Rpe,SVo,RVo,PVo,gt,kL,BVo,Ppe,IVo,NVo,nd,qVo,Bpe,jVo,DVo,sX,GVo,OVo,VVo,Uv,XVo,to,SL,zVo,Ipe,WVo,QVo,Da,HVo,Npe,UVo,JVo,qpe,YVo,KVo,jpe,ZVo,eXo,oXo,Zr,Jv,Dpe,rXo,tXo,lX,aXo,nXo,sXo,Yv,Gpe,lXo,iXo,iX,dXo,cXo,fXo,Kv,Ope,mXo,gXo,dX,hXo,pXo,uXo,Zv,Vpe,_Xo,bXo,cX,vXo,FXo,TXo,e0,Xpe,MXo,EXo,fX,CXo,wXo,AXo,o0,LXo,zpe,yXo,xXo,Wpe,$Xo,kXo,r0,IGe,sd,t0,Qpe,RL,SXo,Hpe,RXo,NGe,No,PL,PXo,ld,BXo,mX,IXo,NXo,gX,qXo,jXo,DXo,BL,GXo,Upe,OXo,VXo,XXo,ht,IL,zXo,Jpe,WXo,QXo,id,HXo,Ype,UXo,JXo,hX,YXo,KXo,ZXo,a0,ezo,ao,NL,ozo,Kpe,rzo,tzo,Ga,azo,Zpe,nzo,szo,eue,lzo,izo,oue,dzo,czo,fzo,H,n0,rue,mzo,gzo,pX,hzo,pzo,uzo,s0,tue,_zo,bzo,uX,vzo,Fzo,Tzo,l0,aue,Mzo,Ezo,_X,Czo,wzo,Azo,i0,nue,Lzo,yzo,bX,xzo,$zo,kzo,d0,sue,Szo,Rzo,vX,Pzo,Bzo,Izo,c0,lue,Nzo,qzo,FX,jzo,Dzo,Gzo,f0,iue,Ozo,Vzo,TX,Xzo,zzo,Wzo,m0,due,Qzo,Hzo,MX,Uzo,Jzo,Yzo,g0,cue,Kzo,Zzo,EX,eWo,oWo,rWo,h0,fue,tWo,aWo,CX,nWo,sWo,lWo,p0,mue,iWo,dWo,wX,cWo,fWo,mWo,u0,gue,gWo,hWo,AX,pWo,uWo,_Wo,_0,hue,bWo,vWo,LX,FWo,TWo,MWo,b0,pue,EWo,CWo,yX,wWo,AWo,LWo,v0,uue,yWo,xWo,xX,$Wo,kWo,SWo,F0,_ue,RWo,PWo,$X,BWo,IWo,NWo,T0,bue,qWo,jWo,kX,DWo,GWo,OWo,M0,vue,VWo,XWo,SX,zWo,WWo,QWo,E0,Fue,HWo,UWo,RX,JWo,YWo,KWo,C0,Tue,ZWo,eQo,PX,oQo,rQo,tQo,w0,Mue,aQo,nQo,BX,sQo,lQo,iQo,A0,Eue,dQo,cQo,IX,fQo,mQo,gQo,L0,Cue,hQo,pQo,NX,uQo,_Qo,bQo,y0,wue,vQo,FQo,qX,TQo,MQo,EQo,x0,Aue,CQo,wQo,jX,AQo,LQo,yQo,$0,Lue,xQo,$Qo,DX,kQo,SQo,RQo,k0,yue,PQo,BQo,GX,IQo,NQo,qQo,S0,xue,jQo,DQo,OX,GQo,OQo,VQo,R0,$ue,XQo,zQo,VX,WQo,QQo,HQo,P0,kue,UQo,JQo,XX,YQo,KQo,ZQo,B0,Sue,eHo,oHo,zX,rHo,tHo,aHo,I0,Rue,nHo,sHo,WX,lHo,iHo,dHo,N0,Pue,cHo,fHo,QX,mHo,gHo,hHo,q0,Bue,pHo,uHo,HX,_Ho,bHo,vHo,j0,Iue,FHo,THo,UX,MHo,EHo,CHo,D0,wHo,Nue,AHo,LHo,que,yHo,xHo,G0,qGe,dd,O0,jue,qL,$Ho,Due,kHo,jGe,qo,jL,SHo,cd,RHo,JX,PHo,BHo,YX,IHo,NHo,qHo,DL,jHo,Gue,DHo,GHo,OHo,pt,GL,VHo,Oue,XHo,zHo,fd,WHo,Vue,QHo,HHo,KX,UHo,JHo,YHo,V0,KHo,no,OL,ZHo,Xue,eUo,oUo,Oa,rUo,zue,tUo,aUo,Wue,nUo,sUo,Que,lUo,iUo,dUo,V,X0,Hue,cUo,fUo,ZX,mUo,gUo,hUo,z0,Uue,pUo,uUo,ez,_Uo,bUo,vUo,W0,Jue,FUo,TUo,oz,MUo,EUo,CUo,Q0,Yue,wUo,AUo,rz,LUo,yUo,xUo,H0,Kue,$Uo,kUo,tz,SUo,RUo,PUo,U0,Zue,BUo,IUo,az,NUo,qUo,jUo,J0,e_e,DUo,GUo,nz,OUo,VUo,XUo,Y0,o_e,zUo,WUo,sz,QUo,HUo,UUo,K0,r_e,JUo,YUo,lz,KUo,ZUo,eJo,Z0,t_e,oJo,rJo,iz,tJo,aJo,nJo,eF,a_e,sJo,lJo,dz,iJo,dJo,cJo,oF,n_e,fJo,mJo,cz,gJo,hJo,pJo,rF,s_e,uJo,_Jo,fz,bJo,vJo,FJo,tF,l_e,TJo,MJo,mz,EJo,CJo,wJo,aF,i_e,AJo,LJo,gz,yJo,xJo,$Jo,nF,d_e,kJo,SJo,hz,RJo,PJo,BJo,sF,c_e,IJo,NJo,pz,qJo,jJo,DJo,lF,f_e,GJo,OJo,uz,VJo,XJo,zJo,iF,m_e,WJo,QJo,_z,HJo,UJo,JJo,dF,g_e,YJo,KJo,bz,ZJo,eYo,oYo,cF,h_e,rYo,tYo,vz,aYo,nYo,sYo,fF,p_e,lYo,iYo,Fz,dYo,cYo,fYo,mF,u_e,mYo,gYo,Tz,hYo,pYo,uYo,gF,__e,_Yo,bYo,Mz,vYo,FYo,TYo,hF,b_e,MYo,EYo,Ez,CYo,wYo,AYo,pF,v_e,LYo,yYo,Cz,xYo,$Yo,kYo,uF,F_e,SYo,RYo,wz,PYo,BYo,IYo,_F,T_e,NYo,qYo,Az,jYo,DYo,GYo,bF,M_e,OYo,VYo,Lz,XYo,zYo,WYo,vF,E_e,QYo,HYo,yz,UYo,JYo,YYo,FF,C_e,KYo,ZYo,xz,eKo,oKo,rKo,TF,w_e,tKo,aKo,$z,nKo,sKo,lKo,MF,A_e,iKo,dKo,kz,cKo,fKo,mKo,EF,L_e,gKo,hKo,Sz,pKo,uKo,_Ko,CF,y_e,bKo,vKo,Rz,FKo,TKo,MKo,wF,x_e,EKo,CKo,Pz,wKo,AKo,LKo,AF,$_e,yKo,xKo,Bz,$Ko,kKo,SKo,LF,k_e,RKo,PKo,Iz,BKo,IKo,NKo,yF,S_e,qKo,jKo,Nz,DKo,GKo,OKo,xF,R_e,VKo,XKo,qz,zKo,WKo,QKo,$F,HKo,P_e,UKo,JKo,B_e,YKo,KKo,kF,DGe,md,SF,I_e,VL,ZKo,N_e,eZo,GGe,jo,XL,oZo,gd,rZo,jz,tZo,aZo,Dz,nZo,sZo,lZo,zL,iZo,q_e,dZo,cZo,fZo,ut,WL,mZo,j_e,gZo,hZo,hd,pZo,D_e,uZo,_Zo,Gz,bZo,vZo,FZo,RF,TZo,so,QL,MZo,G_e,EZo,CZo,Va,wZo,O_e,AZo,LZo,V_e,yZo,xZo,X_e,$Zo,kZo,SZo,z_e,PF,W_e,RZo,PZo,Oz,BZo,IZo,NZo,BF,qZo,Q_e,jZo,DZo,H_e,GZo,OZo,IF,OGe,pd,NF,U_e,HL,VZo,J_e,XZo,VGe,Do,UL,zZo,ud,WZo,Vz,QZo,HZo,Xz,UZo,JZo,YZo,JL,KZo,Y_e,ZZo,eer,oer,_t,YL,rer,K_e,ter,aer,_d,ner,Z_e,ser,ler,zz,ier,der,cer,qF,fer,lo,KL,mer,e1e,ger,her,Xa,per,o1e,uer,_er,r1e,ber,ver,t1e,Fer,Ter,Mer,Fe,jF,a1e,Eer,Cer,Wz,wer,Aer,Ler,DF,n1e,yer,xer,Qz,$er,ker,Ser,GF,s1e,Rer,Per,Hz,Ber,Ier,Ner,OF,l1e,qer,jer,Uz,Der,Ger,Oer,Os,i1e,Ver,Xer,Jz,zer,Wer,Yz,Qer,Her,Uer,VF,d1e,Jer,Yer,Kz,Ker,Zer,eor,Vs,c1e,oor,ror,Zz,tor,aor,eW,nor,sor,lor,bt,f1e,ior,dor,oW,cor,mor,rW,gor,hor,tW,por,uor,_or,XF,m1e,bor,vor,aW,For,Tor,Mor,zF,g1e,Eor,Cor,nW,wor,Aor,Lor,WF,h1e,yor,xor,sW,$or,kor,Sor,QF,p1e,Ror,Por,lW,Bor,Ior,Nor,HF,u1e,qor,jor,iW,Dor,Gor,Oor,UF,_1e,Vor,Xor,dW,zor,Wor,Qor,JF,b1e,Hor,Uor,cW,Jor,Yor,Kor,YF,Zor,v1e,err,orr,F1e,rrr,trr,KF,XGe,bd,ZF,T1e,ZL,arr,M1e,nrr,zGe,Go,ey,srr,vd,lrr,fW,irr,drr,mW,crr,frr,mrr,oy,grr,E1e,hrr,prr,urr,vt,ry,_rr,C1e,brr,vrr,Fd,Frr,w1e,Trr,Mrr,gW,Err,Crr,wrr,e6,Arr,io,ty,Lrr,A1e,yrr,xrr,za,$rr,L1e,krr,Srr,y1e,Rrr,Prr,x1e,Brr,Irr,Nrr,$1e,o6,k1e,qrr,jrr,hW,Drr,Grr,Orr,r6,Vrr,S1e,Xrr,zrr,R1e,Wrr,Qrr,t6,WGe,Td,a6,P1e,ay,Hrr,B1e,Urr,QGe,Oo,ny,Jrr,Md,Yrr,pW,Krr,Zrr,uW,etr,otr,rtr,sy,ttr,I1e,atr,ntr,str,Ft,ly,ltr,N1e,itr,dtr,Ed,ctr,q1e,ftr,mtr,_W,gtr,htr,ptr,n6,utr,co,iy,_tr,j1e,btr,vtr,Wa,Ftr,D1e,Ttr,Mtr,G1e,Etr,Ctr,O1e,wtr,Atr,Ltr,V1e,s6,X1e,ytr,xtr,bW,$tr,ktr,Str,l6,Rtr,z1e,Ptr,Btr,W1e,Itr,Ntr,i6,HGe,Cd,d6,Q1e,dy,qtr,H1e,jtr,UGe,Vo,cy,Dtr,wd,Gtr,vW,Otr,Vtr,FW,Xtr,ztr,Wtr,fy,Qtr,U1e,Htr,Utr,Jtr,Tt,my,Ytr,J1e,Ktr,Ztr,Ad,ear,Y1e,oar,rar,TW,tar,aar,nar,c6,sar,fo,gy,lar,K1e,iar,dar,Qa,car,Z1e,far,mar,e2e,gar,har,o2e,par,uar,_ar,Pe,f6,r2e,bar,Far,MW,Tar,Mar,Ear,m6,t2e,Car,war,EW,Aar,Lar,yar,g6,a2e,xar,$ar,CW,kar,Sar,Rar,h6,n2e,Par,Bar,wW,Iar,Nar,qar,p6,s2e,jar,Dar,AW,Gar,Oar,Var,u6,l2e,Xar,zar,LW,War,Qar,Har,_6,i2e,Uar,Jar,yW,Yar,Kar,Zar,b6,d2e,enr,onr,xW,rnr,tnr,anr,v6,c2e,nnr,snr,$W,lnr,inr,dnr,F6,cnr,f2e,fnr,mnr,m2e,gnr,hnr,T6,JGe,Ld,M6,g2e,hy,pnr,h2e,unr,YGe,Xo,py,_nr,yd,bnr,kW,vnr,Fnr,SW,Tnr,Mnr,Enr,uy,Cnr,p2e,wnr,Anr,Lnr,Mt,_y,ynr,u2e,xnr,$nr,xd,knr,_2e,Snr,Rnr,RW,Pnr,Bnr,Inr,E6,Nnr,mo,by,qnr,b2e,jnr,Dnr,Ha,Gnr,v2e,Onr,Vnr,F2e,Xnr,znr,T2e,Wnr,Qnr,Hnr,et,C6,M2e,Unr,Jnr,PW,Ynr,Knr,Znr,w6,E2e,esr,osr,BW,rsr,tsr,asr,A6,C2e,nsr,ssr,IW,lsr,isr,dsr,L6,w2e,csr,fsr,NW,msr,gsr,hsr,y6,A2e,psr,usr,qW,_sr,bsr,vsr,x6,Fsr,L2e,Tsr,Msr,y2e,Esr,Csr,$6,KGe,$d,k6,x2e,vy,wsr,$2e,Asr,ZGe,zo,Fy,Lsr,kd,ysr,jW,xsr,$sr,DW,ksr,Ssr,Rsr,Ty,Psr,k2e,Bsr,Isr,Nsr,Et,My,qsr,S2e,jsr,Dsr,Sd,Gsr,R2e,Osr,Vsr,GW,Xsr,zsr,Wsr,S6,Qsr,go,Ey,Hsr,P2e,Usr,Jsr,Ua,Ysr,B2e,Ksr,Zsr,I2e,elr,olr,N2e,rlr,tlr,alr,Le,R6,q2e,nlr,slr,OW,llr,ilr,dlr,P6,j2e,clr,flr,VW,mlr,glr,hlr,B6,D2e,plr,ulr,XW,_lr,blr,vlr,I6,G2e,Flr,Tlr,zW,Mlr,Elr,Clr,N6,O2e,wlr,Alr,WW,Llr,ylr,xlr,q6,V2e,$lr,klr,QW,Slr,Rlr,Plr,j6,X2e,Blr,Ilr,HW,Nlr,qlr,jlr,D6,z2e,Dlr,Glr,UW,Olr,Vlr,Xlr,G6,W2e,zlr,Wlr,JW,Qlr,Hlr,Ulr,O6,Q2e,Jlr,Ylr,YW,Klr,Zlr,eir,V6,oir,H2e,rir,tir,U2e,air,nir,X6,eOe,Rd,z6,J2e,Cy,sir,Y2e,lir,oOe,Wo,wy,iir,Pd,dir,KW,cir,fir,ZW,mir,gir,hir,Ay,pir,K2e,uir,_ir,bir,Ct,Ly,vir,Z2e,Fir,Tir,Bd,Mir,ebe,Eir,Cir,eQ,wir,Air,Lir,W6,yir,ho,yy,xir,obe,$ir,kir,Ja,Sir,rbe,Rir,Pir,tbe,Bir,Iir,abe,Nir,qir,jir,xy,Q6,nbe,Dir,Gir,oQ,Oir,Vir,Xir,H6,sbe,zir,Wir,rQ,Qir,Hir,Uir,U6,Jir,lbe,Yir,Kir,ibe,Zir,edr,J6,rOe,Id,Y6,dbe,$y,odr,cbe,rdr,tOe,Qo,ky,tdr,Nd,adr,tQ,ndr,sdr,aQ,ldr,idr,ddr,Sy,cdr,fbe,fdr,mdr,gdr,wt,Ry,hdr,mbe,pdr,udr,qd,_dr,gbe,bdr,vdr,nQ,Fdr,Tdr,Mdr,K6,Edr,po,Py,Cdr,hbe,wdr,Adr,Ya,Ldr,pbe,ydr,xdr,ube,$dr,kdr,_be,Sdr,Rdr,Pdr,ot,Z6,bbe,Bdr,Idr,sQ,Ndr,qdr,jdr,eT,vbe,Ddr,Gdr,lQ,Odr,Vdr,Xdr,oT,Fbe,zdr,Wdr,iQ,Qdr,Hdr,Udr,rT,Tbe,Jdr,Ydr,dQ,Kdr,Zdr,ecr,tT,Mbe,ocr,rcr,cQ,tcr,acr,ncr,aT,scr,Ebe,lcr,icr,Cbe,dcr,ccr,nT,aOe,jd,sT,wbe,By,fcr,Abe,mcr,nOe,Ho,Iy,gcr,Dd,hcr,fQ,pcr,ucr,mQ,_cr,bcr,vcr,Ny,Fcr,Lbe,Tcr,Mcr,Ecr,At,qy,Ccr,ybe,wcr,Acr,Gd,Lcr,xbe,ycr,xcr,gQ,$cr,kcr,Scr,lT,Rcr,uo,jy,Pcr,$be,Bcr,Icr,Ka,Ncr,kbe,qcr,jcr,Sbe,Dcr,Gcr,Rbe,Ocr,Vcr,Xcr,Od,iT,Pbe,zcr,Wcr,hQ,Qcr,Hcr,Ucr,dT,Bbe,Jcr,Ycr,pQ,Kcr,Zcr,efr,cT,Ibe,ofr,rfr,uQ,tfr,afr,nfr,fT,sfr,Nbe,lfr,ifr,qbe,dfr,cfr,mT,sOe,Vd,gT,jbe,Dy,ffr,Dbe,mfr,lOe,Uo,Gy,gfr,Xd,hfr,_Q,pfr,ufr,bQ,_fr,bfr,vfr,Oy,Ffr,Gbe,Tfr,Mfr,Efr,Lt,Vy,Cfr,Obe,wfr,Afr,zd,Lfr,Vbe,yfr,xfr,vQ,$fr,kfr,Sfr,hT,Rfr,_o,Xy,Pfr,Xbe,Bfr,Ifr,Za,Nfr,zbe,qfr,jfr,Wbe,Dfr,Gfr,Qbe,Ofr,Vfr,Xfr,zy,pT,Hbe,zfr,Wfr,FQ,Qfr,Hfr,Ufr,uT,Ube,Jfr,Yfr,TQ,Kfr,Zfr,emr,_T,omr,Jbe,rmr,tmr,Ybe,amr,nmr,bT,iOe,Wd,vT,Kbe,Wy,smr,Zbe,lmr,dOe,Jo,Qy,imr,Qd,dmr,MQ,cmr,fmr,EQ,mmr,gmr,hmr,Hy,pmr,eve,umr,_mr,bmr,yt,Uy,vmr,ove,Fmr,Tmr,Hd,Mmr,rve,Emr,Cmr,CQ,wmr,Amr,Lmr,FT,ymr,bo,Jy,xmr,tve,$mr,kmr,en,Smr,ave,Rmr,Pmr,nve,Bmr,Imr,sve,Nmr,qmr,jmr,lve,TT,ive,Dmr,Gmr,wQ,Omr,Vmr,Xmr,MT,zmr,dve,Wmr,Qmr,cve,Hmr,Umr,ET,cOe,Ud,CT,fve,Yy,Jmr,mve,Ymr,fOe,Yo,Ky,Kmr,Jd,Zmr,AQ,egr,ogr,LQ,rgr,tgr,agr,Zy,ngr,gve,sgr,lgr,igr,xt,e9,dgr,hve,cgr,fgr,Yd,mgr,pve,ggr,hgr,yQ,pgr,ugr,_gr,wT,bgr,vo,o9,vgr,uve,Fgr,Tgr,on,Mgr,_ve,Egr,Cgr,bve,wgr,Agr,vve,Lgr,ygr,xgr,rn,AT,Fve,$gr,kgr,xQ,Sgr,Rgr,Pgr,LT,Tve,Bgr,Igr,$Q,Ngr,qgr,jgr,yT,Mve,Dgr,Ggr,kQ,Ogr,Vgr,Xgr,xT,Eve,zgr,Wgr,SQ,Qgr,Hgr,Ugr,$T,Jgr,Cve,Ygr,Kgr,wve,Zgr,ehr,kT,mOe,Kd,ST,Ave,r9,ohr,Lve,rhr,gOe,Ko,t9,thr,Zd,ahr,RQ,nhr,shr,PQ,lhr,ihr,dhr,a9,chr,yve,fhr,mhr,ghr,$t,n9,hhr,xve,phr,uhr,ec,_hr,$ve,bhr,vhr,BQ,Fhr,Thr,Mhr,RT,Ehr,Fo,s9,Chr,kve,whr,Ahr,tn,Lhr,Sve,yhr,xhr,Rve,$hr,khr,Pve,Shr,Rhr,Phr,Bve,PT,Ive,Bhr,Ihr,IQ,Nhr,qhr,jhr,BT,Dhr,Nve,Ghr,Ohr,qve,Vhr,Xhr,IT,hOe,oc,NT,jve,l9,zhr,Dve,Whr,pOe,Zo,i9,Qhr,rc,Hhr,NQ,Uhr,Jhr,qQ,Yhr,Khr,Zhr,d9,epr,Gve,opr,rpr,tpr,kt,c9,apr,Ove,npr,spr,tc,lpr,Vve,ipr,dpr,jQ,cpr,fpr,mpr,qT,gpr,Lr,f9,hpr,Xve,ppr,upr,an,_pr,zve,bpr,vpr,Wve,Fpr,Tpr,Qve,Mpr,Epr,Cpr,q,jT,Hve,wpr,Apr,DQ,Lpr,ypr,xpr,DT,Uve,$pr,kpr,GQ,Spr,Rpr,Ppr,GT,Jve,Bpr,Ipr,OQ,Npr,qpr,jpr,OT,Yve,Dpr,Gpr,VQ,Opr,Vpr,Xpr,VT,Kve,zpr,Wpr,XQ,Qpr,Hpr,Upr,XT,Zve,Jpr,Ypr,zQ,Kpr,Zpr,eur,zT,e0e,our,rur,WQ,tur,aur,nur,WT,o0e,sur,lur,QQ,iur,dur,cur,QT,r0e,fur,mur,HQ,gur,hur,pur,HT,t0e,uur,_ur,UQ,bur,vur,Fur,UT,a0e,Tur,Mur,JQ,Eur,Cur,wur,JT,n0e,Aur,Lur,YQ,yur,xur,$ur,YT,s0e,kur,Sur,KQ,Rur,Pur,Bur,KT,l0e,Iur,Nur,ZQ,qur,jur,Dur,ZT,i0e,Gur,Our,eH,Vur,Xur,zur,e7,d0e,Wur,Qur,oH,Hur,Uur,Jur,o7,c0e,Yur,Kur,rH,Zur,e_r,o_r,r7,f0e,r_r,t_r,tH,a_r,n_r,s_r,Xs,m0e,l_r,i_r,aH,d_r,c_r,nH,f_r,m_r,g_r,t7,g0e,h_r,p_r,sH,u_r,__r,b_r,a7,h0e,v_r,F_r,lH,T_r,M_r,E_r,n7,p0e,C_r,w_r,iH,A_r,L_r,y_r,s7,u0e,x_r,$_r,dH,k_r,S_r,R_r,l7,_0e,P_r,B_r,cH,I_r,N_r,q_r,i7,b0e,j_r,D_r,fH,G_r,O_r,V_r,d7,v0e,X_r,z_r,mH,W_r,Q_r,H_r,c7,F0e,U_r,J_r,gH,Y_r,K_r,Z_r,f7,T0e,e1r,o1r,hH,r1r,t1r,a1r,m7,M0e,n1r,s1r,pH,l1r,i1r,d1r,g7,E0e,c1r,f1r,uH,m1r,g1r,h1r,h7,C0e,p1r,u1r,_H,_1r,b1r,v1r,p7,w0e,F1r,T1r,bH,M1r,E1r,C1r,u7,A0e,w1r,A1r,vH,L1r,y1r,x1r,_7,L0e,$1r,k1r,FH,S1r,R1r,P1r,b7,y0e,B1r,I1r,TH,N1r,q1r,j1r,v7,x0e,D1r,G1r,MH,O1r,V1r,X1r,F7,$0e,z1r,W1r,EH,Q1r,H1r,U1r,T7,k0e,J1r,Y1r,CH,K1r,Z1r,e2r,M7,S0e,o2r,r2r,wH,t2r,a2r,n2r,E7,R0e,s2r,l2r,AH,i2r,d2r,c2r,C7,P0e,f2r,m2r,LH,g2r,h2r,p2r,w7,B0e,u2r,_2r,yH,b2r,v2r,F2r,A7,I0e,T2r,M2r,xH,E2r,C2r,w2r,L7,N0e,A2r,L2r,$H,y2r,x2r,$2r,y7,q0e,k2r,S2r,kH,R2r,P2r,B2r,x7,j0e,I2r,N2r,SH,q2r,j2r,D2r,$7,D0e,G2r,O2r,RH,V2r,X2r,z2r,k7,G0e,W2r,Q2r,PH,H2r,U2r,J2r,S7,uOe,ac,R7,O0e,m9,Y2r,V0e,K2r,_Oe,er,g9,Z2r,nc,ebr,BH,obr,rbr,IH,tbr,abr,nbr,h9,sbr,X0e,lbr,ibr,dbr,St,p9,cbr,z0e,fbr,mbr,sc,gbr,W0e,hbr,pbr,NH,ubr,_br,bbr,P7,vbr,yr,u9,Fbr,Q0e,Tbr,Mbr,nn,Ebr,H0e,Cbr,wbr,U0e,Abr,Lbr,J0e,ybr,xbr,$br,se,B7,Y0e,kbr,Sbr,qH,Rbr,Pbr,Bbr,I7,K0e,Ibr,Nbr,jH,qbr,jbr,Dbr,N7,Z0e,Gbr,Obr,DH,Vbr,Xbr,zbr,q7,eFe,Wbr,Qbr,GH,Hbr,Ubr,Jbr,j7,oFe,Ybr,Kbr,OH,Zbr,evr,ovr,D7,rFe,rvr,tvr,VH,avr,nvr,svr,G7,tFe,lvr,ivr,XH,dvr,cvr,fvr,O7,aFe,mvr,gvr,zH,hvr,pvr,uvr,V7,nFe,_vr,bvr,WH,vvr,Fvr,Tvr,X7,sFe,Mvr,Evr,QH,Cvr,wvr,Avr,z7,lFe,Lvr,yvr,HH,xvr,$vr,kvr,W7,iFe,Svr,Rvr,UH,Pvr,Bvr,Ivr,Q7,dFe,Nvr,qvr,JH,jvr,Dvr,Gvr,H7,cFe,Ovr,Vvr,YH,Xvr,zvr,Wvr,U7,fFe,Qvr,Hvr,KH,Uvr,Jvr,Yvr,J7,mFe,Kvr,Zvr,ZH,e0r,o0r,r0r,Y7,gFe,t0r,a0r,eU,n0r,s0r,l0r,K7,hFe,i0r,d0r,oU,c0r,f0r,m0r,Z7,pFe,g0r,h0r,rU,p0r,u0r,_0r,e8,uFe,b0r,v0r,tU,F0r,T0r,M0r,o8,_Fe,E0r,C0r,aU,w0r,A0r,L0r,r8,bFe,y0r,x0r,nU,$0r,k0r,S0r,t8,vFe,R0r,P0r,sU,B0r,I0r,N0r,a8,bOe,lc,n8,FFe,_9,q0r,TFe,j0r,vOe,or,b9,D0r,ic,G0r,lU,O0r,V0r,iU,X0r,z0r,W0r,v9,Q0r,MFe,H0r,U0r,J0r,Rt,F9,Y0r,EFe,K0r,Z0r,dc,eFr,CFe,oFr,rFr,dU,tFr,aFr,nFr,s8,sFr,xr,T9,lFr,wFe,iFr,dFr,sn,cFr,AFe,fFr,mFr,LFe,gFr,hFr,yFe,pFr,uFr,_Fr,Me,l8,xFe,bFr,vFr,cU,FFr,TFr,MFr,i8,$Fe,EFr,CFr,fU,wFr,AFr,LFr,d8,kFe,yFr,xFr,mU,$Fr,kFr,SFr,c8,SFe,RFr,PFr,gU,BFr,IFr,NFr,f8,RFe,qFr,jFr,hU,DFr,GFr,OFr,m8,PFe,VFr,XFr,pU,zFr,WFr,QFr,g8,BFe,HFr,UFr,uU,JFr,YFr,KFr,h8,IFe,ZFr,e6r,_U,o6r,r6r,t6r,p8,NFe,a6r,n6r,bU,s6r,l6r,i6r,u8,qFe,d6r,c6r,vU,f6r,m6r,g6r,_8,jFe,h6r,p6r,FU,u6r,_6r,b6r,b8,DFe,v6r,F6r,TU,T6r,M6r,E6r,v8,GFe,C6r,w6r,MU,A6r,L6r,y6r,F8,FOe,cc,T8,OFe,M9,x6r,VFe,$6r,TOe,rr,E9,k6r,fc,S6r,EU,R6r,P6r,CU,B6r,I6r,N6r,C9,q6r,XFe,j6r,D6r,G6r,Pt,w9,O6r,zFe,V6r,X6r,mc,z6r,WFe,W6r,Q6r,wU,H6r,U6r,J6r,M8,Y6r,$r,A9,K6r,QFe,Z6r,eTr,ln,oTr,HFe,rTr,tTr,UFe,aTr,nTr,JFe,sTr,lTr,iTr,rt,E8,YFe,dTr,cTr,AU,fTr,mTr,gTr,C8,KFe,hTr,pTr,LU,uTr,_Tr,bTr,zs,ZFe,vTr,FTr,yU,TTr,MTr,xU,ETr,CTr,wTr,w8,e6e,ATr,LTr,$U,yTr,xTr,$Tr,A8,o6e,kTr,STr,kU,RTr,PTr,BTr,L8,MOe,gc,y8,r6e,L9,ITr,t6e,NTr,EOe,tr,y9,qTr,hc,jTr,SU,DTr,GTr,RU,OTr,VTr,XTr,x9,zTr,a6e,WTr,QTr,HTr,Bt,$9,UTr,n6e,JTr,YTr,pc,KTr,s6e,ZTr,e7r,PU,o7r,r7r,t7r,x8,a7r,kr,k9,n7r,l6e,s7r,l7r,dn,i7r,i6e,d7r,c7r,d6e,f7r,m7r,c6e,g7r,h7r,p7r,ie,$8,f6e,u7r,_7r,BU,b7r,v7r,F7r,k8,m6e,T7r,M7r,IU,E7r,C7r,w7r,S8,g6e,A7r,L7r,NU,y7r,x7r,$7r,R8,h6e,k7r,S7r,qU,R7r,P7r,B7r,P8,p6e,I7r,N7r,jU,q7r,j7r,D7r,B8,u6e,G7r,O7r,DU,V7r,X7r,z7r,I8,_6e,W7r,Q7r,GU,H7r,U7r,J7r,N8,b6e,Y7r,K7r,OU,Z7r,e8r,o8r,q8,v6e,r8r,t8r,VU,a8r,n8r,s8r,j8,F6e,l8r,i8r,XU,d8r,c8r,f8r,D8,T6e,m8r,g8r,zU,h8r,p8r,u8r,G8,M6e,_8r,b8r,WU,v8r,F8r,T8r,O8,E6e,M8r,E8r,QU,C8r,w8r,A8r,V8,C6e,L8r,y8r,HU,x8r,$8r,k8r,X8,w6e,S8r,R8r,UU,P8r,B8r,I8r,z8,A6e,N8r,q8r,JU,j8r,D8r,G8r,W8,L6e,O8r,V8r,YU,X8r,z8r,W8r,Q8,y6e,Q8r,H8r,KU,U8r,J8r,Y8r,H8,x6e,K8r,Z8r,ZU,eMr,oMr,rMr,U8,$6e,tMr,aMr,eJ,nMr,sMr,lMr,J8,COe,uc,Y8,k6e,S9,iMr,S6e,dMr,wOe,ar,R9,cMr,_c,fMr,oJ,mMr,gMr,rJ,hMr,pMr,uMr,P9,_Mr,R6e,bMr,vMr,FMr,It,B9,TMr,P6e,MMr,EMr,bc,CMr,B6e,wMr,AMr,tJ,LMr,yMr,xMr,K8,$Mr,Sr,I9,kMr,I6e,SMr,RMr,cn,PMr,N6e,BMr,IMr,q6e,NMr,qMr,j6e,jMr,DMr,GMr,ye,Z8,D6e,OMr,VMr,aJ,XMr,zMr,WMr,eM,G6e,QMr,HMr,nJ,UMr,JMr,YMr,oM,O6e,KMr,ZMr,sJ,e4r,o4r,r4r,rM,V6e,t4r,a4r,lJ,n4r,s4r,l4r,tM,X6e,i4r,d4r,iJ,c4r,f4r,m4r,aM,z6e,g4r,h4r,dJ,p4r,u4r,_4r,nM,W6e,b4r,v4r,cJ,F4r,T4r,M4r,sM,Q6e,E4r,C4r,fJ,w4r,A4r,L4r,lM,H6e,y4r,x4r,mJ,$4r,k4r,S4r,iM,U6e,R4r,P4r,gJ,B4r,I4r,N4r,dM,AOe,vc,cM,J6e,N9,q4r,Y6e,j4r,LOe,nr,q9,D4r,Fc,G4r,hJ,O4r,V4r,pJ,X4r,z4r,W4r,j9,Q4r,K6e,H4r,U4r,J4r,Nt,D9,Y4r,Z6e,K4r,Z4r,Tc,eEr,eTe,oEr,rEr,uJ,tEr,aEr,nEr,fM,sEr,Rr,G9,lEr,oTe,iEr,dEr,fn,cEr,rTe,fEr,mEr,tTe,gEr,hEr,aTe,pEr,uEr,_Er,te,mM,nTe,bEr,vEr,_J,FEr,TEr,MEr,gM,sTe,EEr,CEr,bJ,wEr,AEr,LEr,hM,lTe,yEr,xEr,vJ,$Er,kEr,SEr,pM,iTe,REr,PEr,FJ,BEr,IEr,NEr,uM,dTe,qEr,jEr,TJ,DEr,GEr,OEr,_M,cTe,VEr,XEr,MJ,zEr,WEr,QEr,bM,fTe,HEr,UEr,EJ,JEr,YEr,KEr,vM,mTe,ZEr,eCr,CJ,oCr,rCr,tCr,FM,gTe,aCr,nCr,wJ,sCr,lCr,iCr,TM,hTe,dCr,cCr,AJ,fCr,mCr,gCr,MM,pTe,hCr,pCr,LJ,uCr,_Cr,bCr,EM,uTe,vCr,FCr,yJ,TCr,MCr,ECr,CM,_Te,CCr,wCr,xJ,ACr,LCr,yCr,wM,bTe,xCr,$Cr,$J,kCr,SCr,RCr,AM,vTe,PCr,BCr,kJ,ICr,NCr,qCr,LM,FTe,jCr,DCr,SJ,GCr,OCr,VCr,yM,TTe,XCr,zCr,RJ,WCr,QCr,HCr,xM,MTe,UCr,JCr,PJ,YCr,KCr,ZCr,$M,ETe,e5r,o5r,BJ,r5r,t5r,a5r,kM,CTe,n5r,s5r,IJ,l5r,i5r,d5r,SM,wTe,c5r,f5r,NJ,m5r,g5r,h5r,RM,ATe,p5r,u5r,qJ,_5r,b5r,v5r,PM,LTe,F5r,T5r,jJ,M5r,E5r,C5r,BM,yTe,w5r,A5r,DJ,L5r,y5r,x5r,IM,xTe,$5r,k5r,GJ,S5r,R5r,P5r,NM,$Te,B5r,I5r,OJ,N5r,q5r,j5r,qM,yOe,Mc,jM,kTe,O9,D5r,STe,G5r,xOe,sr,V9,O5r,Ec,V5r,VJ,X5r,z5r,XJ,W5r,Q5r,H5r,X9,U5r,RTe,J5r,Y5r,K5r,qt,z9,Z5r,PTe,e3r,o3r,Cc,r3r,BTe,t3r,a3r,zJ,n3r,s3r,l3r,DM,i3r,Pr,W9,d3r,ITe,c3r,f3r,mn,m3r,NTe,g3r,h3r,qTe,p3r,u3r,jTe,_3r,b3r,v3r,ue,GM,DTe,F3r,T3r,WJ,M3r,E3r,C3r,OM,GTe,w3r,A3r,QJ,L3r,y3r,x3r,VM,OTe,$3r,k3r,HJ,S3r,R3r,P3r,XM,VTe,B3r,I3r,UJ,N3r,q3r,j3r,zM,XTe,D3r,G3r,JJ,O3r,V3r,X3r,WM,zTe,z3r,W3r,YJ,Q3r,H3r,U3r,QM,WTe,J3r,Y3r,KJ,K3r,Z3r,ewr,HM,QTe,owr,rwr,ZJ,twr,awr,nwr,UM,HTe,swr,lwr,eY,iwr,dwr,cwr,JM,UTe,fwr,mwr,oY,gwr,hwr,pwr,YM,JTe,uwr,_wr,rY,bwr,vwr,Fwr,KM,YTe,Twr,Mwr,tY,Ewr,Cwr,wwr,ZM,KTe,Awr,Lwr,aY,ywr,xwr,$wr,e4,ZTe,kwr,Swr,nY,Rwr,Pwr,Bwr,o4,e7e,Iwr,Nwr,sY,qwr,jwr,Dwr,r4,o7e,Gwr,Owr,lY,Vwr,Xwr,zwr,t4,r7e,Wwr,Qwr,iY,Hwr,Uwr,Jwr,a4,$Oe,wc,n4,t7e,Q9,Ywr,a7e,Kwr,kOe,lr,H9,Zwr,Ac,eAr,dY,oAr,rAr,cY,tAr,aAr,nAr,U9,sAr,n7e,lAr,iAr,dAr,jt,J9,cAr,s7e,fAr,mAr,Lc,gAr,l7e,hAr,pAr,fY,uAr,_Ar,bAr,s4,vAr,Br,Y9,FAr,i7e,TAr,MAr,gn,EAr,d7e,CAr,wAr,c7e,AAr,LAr,f7e,yAr,xAr,$Ar,K9,l4,m7e,kAr,SAr,mY,RAr,PAr,BAr,i4,g7e,IAr,NAr,gY,qAr,jAr,DAr,d4,SOe,yc,c4,h7e,Z9,GAr,p7e,OAr,ROe,ir,ex,VAr,xc,XAr,hY,zAr,WAr,pY,QAr,HAr,UAr,ox,JAr,u7e,YAr,KAr,ZAr,Dt,rx,eLr,_7e,oLr,rLr,$c,tLr,b7e,aLr,nLr,uY,sLr,lLr,iLr,f4,dLr,Ir,tx,cLr,v7e,fLr,mLr,hn,gLr,F7e,hLr,pLr,T7e,uLr,_Lr,M7e,bLr,vLr,FLr,E7e,m4,C7e,TLr,MLr,_Y,ELr,CLr,wLr,g4,POe,kc,h4,w7e,ax,ALr,A7e,LLr,BOe,dr,nx,yLr,Sc,xLr,bY,$Lr,kLr,vY,SLr,RLr,PLr,sx,BLr,L7e,ILr,NLr,qLr,Gt,lx,jLr,y7e,DLr,GLr,Rc,OLr,x7e,VLr,XLr,FY,zLr,WLr,QLr,p4,HLr,Nr,ix,ULr,$7e,JLr,YLr,pn,KLr,k7e,ZLr,eyr,S7e,oyr,ryr,R7e,tyr,ayr,nyr,de,u4,P7e,syr,lyr,TY,iyr,dyr,cyr,_4,B7e,fyr,myr,MY,gyr,hyr,pyr,b4,I7e,uyr,_yr,EY,byr,vyr,Fyr,v4,N7e,Tyr,Myr,CY,Eyr,Cyr,wyr,F4,q7e,Ayr,Lyr,wY,yyr,xyr,$yr,T4,j7e,kyr,Syr,AY,Ryr,Pyr,Byr,M4,D7e,Iyr,Nyr,LY,qyr,jyr,Dyr,E4,G7e,Gyr,Oyr,yY,Vyr,Xyr,zyr,C4,O7e,Wyr,Qyr,xY,Hyr,Uyr,Jyr,w4,V7e,Yyr,Kyr,$Y,Zyr,e9r,o9r,A4,X7e,r9r,t9r,kY,a9r,n9r,s9r,L4,z7e,l9r,i9r,SY,d9r,c9r,f9r,y4,W7e,m9r,g9r,RY,h9r,p9r,u9r,x4,Q7e,_9r,b9r,PY,v9r,F9r,T9r,$4,H7e,M9r,E9r,BY,C9r,w9r,A9r,k4,U7e,L9r,y9r,IY,x9r,$9r,k9r,S4,J7e,S9r,R9r,NY,P9r,B9r,I9r,R4,Y7e,N9r,q9r,qY,j9r,D9r,G9r,P4,K7e,O9r,V9r,jY,X9r,z9r,W9r,B4,Z7e,Q9r,H9r,DY,U9r,J9r,Y9r,I4,IOe,Pc,N4,e8e,dx,K9r,o8e,Z9r,NOe,cr,cx,exr,Bc,oxr,GY,rxr,txr,OY,axr,nxr,sxr,fx,lxr,r8e,ixr,dxr,cxr,Ot,mx,fxr,t8e,mxr,gxr,Ic,hxr,a8e,pxr,uxr,VY,_xr,bxr,vxr,q4,Fxr,qr,gx,Txr,n8e,Mxr,Exr,un,Cxr,s8e,wxr,Axr,l8e,Lxr,yxr,i8e,xxr,$xr,kxr,ce,j4,d8e,Sxr,Rxr,XY,Pxr,Bxr,Ixr,D4,c8e,Nxr,qxr,zY,jxr,Dxr,Gxr,G4,f8e,Oxr,Vxr,WY,Xxr,zxr,Wxr,O4,m8e,Qxr,Hxr,QY,Uxr,Jxr,Yxr,V4,g8e,Kxr,Zxr,HY,e$r,o$r,r$r,X4,h8e,t$r,a$r,UY,n$r,s$r,l$r,z4,p8e,i$r,d$r,JY,c$r,f$r,m$r,W4,u8e,g$r,h$r,YY,p$r,u$r,_$r,Q4,_8e,b$r,v$r,KY,F$r,T$r,M$r,H4,b8e,E$r,C$r,ZY,w$r,A$r,L$r,U4,v8e,y$r,x$r,eK,$$r,k$r,S$r,J4,F8e,R$r,P$r,oK,B$r,I$r,N$r,Y4,T8e,q$r,j$r,rK,D$r,G$r,O$r,K4,M8e,V$r,X$r,tK,z$r,W$r,Q$r,Z4,E8e,H$r,U$r,aK,J$r,Y$r,K$r,eE,C8e,Z$r,ekr,nK,okr,rkr,tkr,oE,w8e,akr,nkr,sK,skr,lkr,ikr,rE,A8e,dkr,ckr,lK,fkr,mkr,gkr,tE,L8e,hkr,pkr,iK,ukr,_kr,bkr,aE,y8e,vkr,Fkr,dK,Tkr,Mkr,Ekr,nE,qOe,Nc,sE,x8e,hx,Ckr,$8e,wkr,jOe,fr,px,Akr,qc,Lkr,cK,ykr,xkr,fK,$kr,kkr,Skr,ux,Rkr,k8e,Pkr,Bkr,Ikr,Vt,_x,Nkr,S8e,qkr,jkr,jc,Dkr,R8e,Gkr,Okr,mK,Vkr,Xkr,zkr,lE,Wkr,jr,bx,Qkr,P8e,Hkr,Ukr,_n,Jkr,B8e,Ykr,Kkr,I8e,Zkr,eSr,N8e,oSr,rSr,tSr,q8e,iE,j8e,aSr,nSr,gK,sSr,lSr,iSr,dE,DOe,Dc,cE,D8e,vx,dSr,G8e,cSr,GOe,mr,Fx,fSr,Gc,mSr,hK,gSr,hSr,pK,pSr,uSr,_Sr,Tx,bSr,O8e,vSr,FSr,TSr,Xt,Mx,MSr,V8e,ESr,CSr,Oc,wSr,X8e,ASr,LSr,uK,ySr,xSr,$Sr,fE,kSr,Dr,Ex,SSr,z8e,RSr,PSr,bn,BSr,W8e,ISr,NSr,Q8e,qSr,jSr,H8e,DSr,GSr,OSr,U8e,mE,J8e,VSr,XSr,_K,zSr,WSr,QSr,gE,OOe,Vc,hE,Y8e,Cx,HSr,K8e,USr,VOe,gr,wx,JSr,Xc,YSr,bK,KSr,ZSr,vK,eRr,oRr,rRr,Ax,tRr,Z8e,aRr,nRr,sRr,zt,Lx,lRr,eMe,iRr,dRr,zc,cRr,oMe,fRr,mRr,FK,gRr,hRr,pRr,pE,uRr,Gr,yx,_Rr,rMe,bRr,vRr,vn,FRr,tMe,TRr,MRr,aMe,ERr,CRr,nMe,wRr,ARr,LRr,oe,uE,sMe,yRr,xRr,TK,$Rr,kRr,SRr,_E,lMe,RRr,PRr,MK,BRr,IRr,NRr,bE,iMe,qRr,jRr,EK,DRr,GRr,ORr,vE,dMe,VRr,XRr,CK,zRr,WRr,QRr,FE,cMe,HRr,URr,wK,JRr,YRr,KRr,TE,fMe,ZRr,ePr,AK,oPr,rPr,tPr,ME,mMe,aPr,nPr,LK,sPr,lPr,iPr,EE,gMe,dPr,cPr,yK,fPr,mPr,gPr,CE,hMe,hPr,pPr,xK,uPr,_Pr,bPr,wE,pMe,vPr,FPr,$K,TPr,MPr,EPr,AE,uMe,CPr,wPr,kK,APr,LPr,yPr,LE,_Me,xPr,$Pr,SK,kPr,SPr,RPr,yE,bMe,PPr,BPr,RK,IPr,NPr,qPr,xE,vMe,jPr,DPr,PK,GPr,OPr,VPr,$E,FMe,XPr,zPr,BK,WPr,QPr,HPr,kE,TMe,UPr,JPr,IK,YPr,KPr,ZPr,SE,MMe,eBr,oBr,NK,rBr,tBr,aBr,RE,EMe,nBr,sBr,qK,lBr,iBr,dBr,PE,CMe,cBr,fBr,jK,mBr,gBr,hBr,BE,wMe,pBr,uBr,DK,_Br,bBr,vBr,IE,AMe,FBr,TBr,GK,MBr,EBr,CBr,NE,LMe,wBr,ABr,OK,LBr,yBr,xBr,qE,yMe,$Br,kBr,VK,SBr,RBr,PBr,jE,xMe,BBr,IBr,XK,NBr,qBr,jBr,DE,$Me,DBr,GBr,zK,OBr,VBr,XBr,GE,kMe,zBr,WBr,WK,QBr,HBr,UBr,OE,SMe,JBr,YBr,QK,KBr,ZBr,eIr,VE,XOe,Wc,XE,RMe,xx,oIr,PMe,rIr,zOe,hr,$x,tIr,Qc,aIr,HK,nIr,sIr,UK,lIr,iIr,dIr,kx,cIr,BMe,fIr,mIr,gIr,Wt,Sx,hIr,IMe,pIr,uIr,Hc,_Ir,NMe,bIr,vIr,JK,FIr,TIr,MIr,zE,EIr,Or,Rx,CIr,qMe,wIr,AIr,Fn,LIr,jMe,yIr,xIr,DMe,$Ir,kIr,GMe,SIr,RIr,PIr,xe,WE,OMe,BIr,IIr,YK,NIr,qIr,jIr,QE,VMe,DIr,GIr,KK,OIr,VIr,XIr,HE,XMe,zIr,WIr,ZK,QIr,HIr,UIr,UE,zMe,JIr,YIr,eZ,KIr,ZIr,eNr,JE,WMe,oNr,rNr,oZ,tNr,aNr,nNr,YE,QMe,sNr,lNr,rZ,iNr,dNr,cNr,KE,HMe,fNr,mNr,tZ,gNr,hNr,pNr,ZE,UMe,uNr,_Nr,aZ,bNr,vNr,FNr,eC,JMe,TNr,MNr,nZ,ENr,CNr,wNr,oC,YMe,ANr,LNr,sZ,yNr,xNr,$Nr,rC,WOe,Uc,tC,KMe,Px,kNr,ZMe,SNr,QOe,pr,Bx,RNr,Jc,PNr,lZ,BNr,INr,iZ,NNr,qNr,jNr,Ix,DNr,e4e,GNr,ONr,VNr,Qt,Nx,XNr,o4e,zNr,WNr,Yc,QNr,r4e,HNr,UNr,dZ,JNr,YNr,KNr,aC,ZNr,Vr,qx,eqr,t4e,oqr,rqr,Tn,tqr,a4e,aqr,nqr,n4e,sqr,lqr,s4e,iqr,dqr,cqr,Ee,nC,l4e,fqr,mqr,cZ,gqr,hqr,pqr,sC,i4e,uqr,_qr,fZ,bqr,vqr,Fqr,lC,d4e,Tqr,Mqr,mZ,Eqr,Cqr,wqr,iC,c4e,Aqr,Lqr,gZ,yqr,xqr,$qr,dC,f4e,kqr,Sqr,hZ,Rqr,Pqr,Bqr,cC,m4e,Iqr,Nqr,pZ,qqr,jqr,Dqr,fC,g4e,Gqr,Oqr,uZ,Vqr,Xqr,zqr,mC,h4e,Wqr,Qqr,_Z,Hqr,Uqr,Jqr,gC,p4e,Yqr,Kqr,bZ,Zqr,ejr,ojr,hC,u4e,rjr,tjr,vZ,ajr,njr,sjr,pC,_4e,ljr,ijr,FZ,djr,cjr,fjr,uC,b4e,mjr,gjr,TZ,hjr,pjr,ujr,_C,v4e,_jr,bjr,MZ,vjr,Fjr,Tjr,bC,HOe,Kc,vC,F4e,jx,Mjr,T4e,Ejr,UOe,ur,Dx,Cjr,Zc,wjr,EZ,Ajr,Ljr,CZ,yjr,xjr,$jr,Gx,kjr,M4e,Sjr,Rjr,Pjr,Ht,Ox,Bjr,E4e,Ijr,Njr,ef,qjr,C4e,jjr,Djr,wZ,Gjr,Ojr,Vjr,FC,Xjr,Xr,Vx,zjr,w4e,Wjr,Qjr,Mn,Hjr,A4e,Ujr,Jjr,L4e,Yjr,Kjr,y4e,Zjr,eDr,oDr,$e,TC,x4e,rDr,tDr,AZ,aDr,nDr,sDr,MC,$4e,lDr,iDr,LZ,dDr,cDr,fDr,EC,k4e,mDr,gDr,yZ,hDr,pDr,uDr,CC,S4e,_Dr,bDr,xZ,vDr,FDr,TDr,wC,R4e,MDr,EDr,$Z,CDr,wDr,ADr,AC,P4e,LDr,yDr,kZ,xDr,$Dr,kDr,LC,B4e,SDr,RDr,SZ,PDr,BDr,IDr,yC,I4e,NDr,qDr,RZ,jDr,DDr,GDr,xC,N4e,ODr,VDr,PZ,XDr,zDr,WDr,$C,q4e,QDr,HDr,BZ,UDr,JDr,YDr,kC,JOe,of,SC,j4e,Xx,KDr,D4e,ZDr,YOe,_r,zx,eGr,rf,oGr,IZ,rGr,tGr,NZ,aGr,nGr,sGr,Wx,lGr,G4e,iGr,dGr,cGr,Ut,Qx,fGr,O4e,mGr,gGr,tf,hGr,V4e,pGr,uGr,qZ,_Gr,bGr,vGr,RC,FGr,zr,Hx,TGr,X4e,MGr,EGr,En,CGr,z4e,wGr,AGr,W4e,LGr,yGr,Q4e,xGr,$Gr,kGr,ke,PC,H4e,SGr,RGr,jZ,PGr,BGr,IGr,BC,U4e,NGr,qGr,DZ,jGr,DGr,GGr,IC,J4e,OGr,VGr,GZ,XGr,zGr,WGr,NC,Y4e,QGr,HGr,OZ,UGr,JGr,YGr,qC,K4e,KGr,ZGr,VZ,eOr,oOr,rOr,jC,Z4e,tOr,aOr,XZ,nOr,sOr,lOr,DC,eEe,iOr,dOr,zZ,cOr,fOr,mOr,GC,oEe,gOr,hOr,WZ,pOr,uOr,_Or,OC,rEe,bOr,vOr,QZ,FOr,TOr,MOr,VC,tEe,EOr,COr,HZ,wOr,AOr,LOr,XC,KOe,af,zC,aEe,Ux,yOr,nEe,xOr,ZOe,br,Jx,$Or,nf,kOr,UZ,SOr,ROr,JZ,POr,BOr,IOr,Yx,NOr,sEe,qOr,jOr,DOr,Jt,Kx,GOr,lEe,OOr,VOr,sf,XOr,iEe,zOr,WOr,YZ,QOr,HOr,UOr,WC,JOr,Wr,Zx,YOr,dEe,KOr,ZOr,Cn,eVr,cEe,oVr,rVr,fEe,tVr,aVr,mEe,nVr,sVr,lVr,Se,QC,gEe,iVr,dVr,KZ,cVr,fVr,mVr,HC,hEe,gVr,hVr,ZZ,pVr,uVr,_Vr,UC,pEe,bVr,vVr,eee,FVr,TVr,MVr,JC,uEe,EVr,CVr,oee,wVr,AVr,LVr,YC,_Ee,yVr,xVr,ree,$Vr,kVr,SVr,KC,bEe,RVr,PVr,tee,BVr,IVr,NVr,ZC,vEe,qVr,jVr,aee,DVr,GVr,OVr,e5,FEe,VVr,XVr,nee,zVr,WVr,QVr,o5,TEe,HVr,UVr,see,JVr,YVr,KVr,r5,MEe,ZVr,eXr,lee,oXr,rXr,tXr,t5,eVe,lf,a5,EEe,e$,aXr,CEe,nXr,oVe,vr,o$,sXr,df,lXr,iee,iXr,dXr,dee,cXr,fXr,mXr,r$,gXr,wEe,hXr,pXr,uXr,Yt,t$,_Xr,AEe,bXr,vXr,cf,FXr,LEe,TXr,MXr,cee,EXr,CXr,wXr,n5,AXr,Qr,a$,LXr,yEe,yXr,xXr,wn,$Xr,xEe,kXr,SXr,$Ee,RXr,PXr,kEe,BXr,IXr,NXr,Re,s5,SEe,qXr,jXr,fee,DXr,GXr,OXr,l5,REe,VXr,XXr,mee,zXr,WXr,QXr,i5,PEe,HXr,UXr,gee,JXr,YXr,KXr,d5,BEe,ZXr,ezr,hee,ozr,rzr,tzr,c5,IEe,azr,nzr,pee,szr,lzr,izr,f5,NEe,dzr,czr,uee,fzr,mzr,gzr,m5,qEe,hzr,pzr,_ee,uzr,_zr,bzr,g5,jEe,vzr,Fzr,bee,Tzr,Mzr,Ezr,h5,DEe,Czr,wzr,vee,Azr,Lzr,yzr,p5,GEe,xzr,$zr,Fee,kzr,Szr,Rzr,u5,rVe,ff,_5,OEe,n$,Pzr,VEe,Bzr,tVe,Fr,s$,Izr,mf,Nzr,Tee,qzr,jzr,Mee,Dzr,Gzr,Ozr,l$,Vzr,XEe,Xzr,zzr,Wzr,Kt,i$,Qzr,zEe,Hzr,Uzr,gf,Jzr,WEe,Yzr,Kzr,Eee,Zzr,eWr,oWr,b5,rWr,Hr,d$,tWr,QEe,aWr,nWr,An,sWr,HEe,lWr,iWr,UEe,dWr,cWr,JEe,fWr,mWr,gWr,Ve,v5,YEe,hWr,pWr,Cee,uWr,_Wr,bWr,F5,KEe,vWr,FWr,wee,TWr,MWr,EWr,T5,ZEe,CWr,wWr,Aee,AWr,LWr,yWr,M5,eCe,xWr,$Wr,Lee,kWr,SWr,RWr,E5,oCe,PWr,BWr,yee,IWr,NWr,qWr,C5,rCe,jWr,DWr,xee,GWr,OWr,VWr,w5,tCe,XWr,zWr,$ee,WWr,QWr,HWr,A5,aCe,UWr,JWr,kee,YWr,KWr,ZWr,L5,aVe,hf,y5,nCe,c$,eQr,sCe,oQr,nVe,Tr,f$,rQr,pf,tQr,See,aQr,nQr,Ree,sQr,lQr,iQr,m$,dQr,lCe,cQr,fQr,mQr,Zt,g$,gQr,iCe,hQr,pQr,uf,uQr,dCe,_Qr,bQr,Pee,vQr,FQr,TQr,x5,MQr,Ur,h$,EQr,cCe,CQr,wQr,Ln,AQr,fCe,LQr,yQr,mCe,xQr,$Qr,gCe,kQr,SQr,RQr,Xe,$5,hCe,PQr,BQr,Bee,IQr,NQr,qQr,k5,pCe,jQr,DQr,Iee,GQr,OQr,VQr,S5,uCe,XQr,zQr,Nee,WQr,QQr,HQr,R5,_Ce,UQr,JQr,qee,YQr,KQr,ZQr,P5,bCe,eHr,oHr,jee,rHr,tHr,aHr,B5,vCe,nHr,sHr,Dee,lHr,iHr,dHr,I5,FCe,cHr,fHr,Gee,mHr,gHr,hHr,N5,TCe,pHr,uHr,Oee,_Hr,bHr,vHr,q5,sVe,_f,j5,MCe,p$,FHr,ECe,THr,lVe,Mr,u$,MHr,bf,EHr,Vee,CHr,wHr,Xee,AHr,LHr,yHr,_$,xHr,CCe,$Hr,kHr,SHr,ea,b$,RHr,wCe,PHr,BHr,vf,IHr,ACe,NHr,qHr,zee,jHr,DHr,GHr,D5,OHr,Jr,v$,VHr,LCe,XHr,zHr,yn,WHr,yCe,QHr,HHr,xCe,UHr,JHr,$Ce,YHr,KHr,ZHr,kCe,G5,SCe,eUr,oUr,Wee,rUr,tUr,aUr,O5,iVe,Ff,V5,RCe,F$,nUr,PCe,sUr,dVe,Er,T$,lUr,Tf,iUr,Qee,dUr,cUr,Hee,fUr,mUr,gUr,M$,hUr,BCe,pUr,uUr,_Ur,oa,E$,bUr,ICe,vUr,FUr,Mf,TUr,NCe,MUr,EUr,Uee,CUr,wUr,AUr,X5,LUr,Yr,C$,yUr,qCe,xUr,$Ur,xn,kUr,jCe,SUr,RUr,DCe,PUr,BUr,GCe,IUr,NUr,qUr,w$,z5,OCe,jUr,DUr,Jee,GUr,OUr,VUr,W5,VCe,XUr,zUr,Yee,WUr,QUr,HUr,Q5,cVe,Ef,H5,XCe,A$,UUr,zCe,JUr,fVe,Cr,L$,YUr,Cf,KUr,Kee,ZUr,eJr,Zee,oJr,rJr,tJr,y$,aJr,WCe,nJr,sJr,lJr,ra,x$,iJr,QCe,dJr,cJr,wf,fJr,HCe,mJr,gJr,eoe,hJr,pJr,uJr,U5,_Jr,Kr,$$,bJr,UCe,vJr,FJr,$n,TJr,JCe,MJr,EJr,YCe,CJr,wJr,KCe,AJr,LJr,yJr,ZCe,J5,e5e,xJr,$Jr,ooe,kJr,SJr,RJr,Y5,mVe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),TA=new re({}),MA=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new PJr({props:{warning:!0,$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),EA=new re({}),CA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L595"}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L618"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),yA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L741"}}),xA=new re({}),$A=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L399"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17806/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L413"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L612"}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new PJr({props:{$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),GA=new re({}),OA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L88"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new PJr({props:{$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L255"}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L758"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),y_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L765"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),$_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),tL=new re({}),aL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L780"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),d2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L787"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),f2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),U2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L794"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Y2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L803"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L848"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L855"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L841"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L812"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L819"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L864"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L903"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L830"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L910"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L933"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L917"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L924"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L942"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L949"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L896"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L871"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L878"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L887"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),_9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),L9=new re({}),y9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),$9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),S9=new re({}),R9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),B9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),K8=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),N9=new re({}),q9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),D9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),O9=new re({}),V9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L515"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:y}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bDt]},$$scope:{ctx:y}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[vDt]},$$scope:{ctx:y}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[FDt]},$$scope:{ctx:y}}}),xx=new re({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[TDt]},$$scope:{ctx:y}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[MDt]},$$scope:{ctx:y}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[EDt]},$$scope:{ctx:y}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CDt]},$$scope:{ctx:y}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[wDt]},$$scope:{ctx:y}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ADt]},$$scope:{ctx:y}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[LDt]},$$scope:{ctx:y}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[yDt]},$$scope:{ctx:y}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[xDt]},$$scope:{ctx:y}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$Dt]},$$scope:{ctx:y}}}),e$=new re({}),o$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),t$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kDt]},$$scope:{ctx:y}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SDt]},$$scope:{ctx:y}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[RDt]},$$scope:{ctx:y}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[PDt]},$$scope:{ctx:y}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BDt]},$$scope:{ctx:y}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[IDt]},$$scope:{ctx:y}}}),p$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[NDt]},$$scope:{ctx:y}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qDt]},$$scope:{ctx:y}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[jDt]},$$scope:{ctx:y}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[DDt]},$$scope:{ctx:y}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[GDt]},$$scope:{ctx:y}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ODt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),nt=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),_A=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),wi=o("Instantiating one of "),Sn=a("a"),bA=o("AutoConfig"),Rn=o(", "),Pn=a("a"),vA=o("AutoModel"),Ai=o(`, and
`),Bn=a("a"),FA=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),Qe=l(),Ae=a("p"),Hk=o("will create a model that is an instance of "),yi=a("a"),Uk=o("BertModel"),Jk=o("."),Co=l(),$a=a("p"),Yk=o("There is one class of "),Sf=a("code"),Kk=o("AutoModel"),Mze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lGe=l(),xi=a("h2"),Rf=a("a"),Jre=a("span"),F(TA.$$.fragment),Eze=l(),Yre=a("span"),Cze=o("Extending the Auto Classes"),iGe=l(),In=a("p"),wze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kre=a("code"),Aze=o("NewModel"),Lze=o(", make sure you have a "),Zre=a("code"),yze=o("NewModelConfig"),xze=o(` then you can add those to the auto
classes like this:`),dGe=l(),F(MA.$$.fragment),cGe=l(),Zk=a("p"),$ze=o("You will then be able to use the auto classes like you would usually do!"),fGe=l(),F(Pf.$$.fragment),mGe=l(),$i=a("h2"),Bf=a("a"),ete=a("span"),F(EA.$$.fragment),kze=l(),ote=a("span"),Sze=o("AutoConfig"),gGe=l(),wo=a("div"),F(CA.$$.fragment),Rze=l(),wA=a("p"),Pze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eS=a("a"),Bze=o("from_pretrained()"),Ize=o(" class method."),Nze=l(),AA=a("p"),qze=o("This class cannot be instantiated directly using "),rte=a("code"),jze=o("__init__()"),Dze=o(" (throws an error)."),Gze=l(),wr=a("div"),F(LA.$$.fragment),Oze=l(),tte=a("p"),Vze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xze=l(),ki=a("p"),zze=o("The configuration class to instantiate is selected based on the "),ate=a("code"),Wze=o("model_type"),Qze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nte=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(":"),Jze=l(),A=a("ul"),If=a("li"),ste=a("strong"),Yze=o("albert"),Kze=o(" \u2014 "),oS=a("a"),Zze=o("AlbertConfig"),eWe=o(" (ALBERT model)"),oWe=l(),Nf=a("li"),lte=a("strong"),rWe=o("bart"),tWe=o(" \u2014 "),rS=a("a"),aWe=o("BartConfig"),nWe=o(" (BART model)"),sWe=l(),qf=a("li"),ite=a("strong"),lWe=o("beit"),iWe=o(" \u2014 "),tS=a("a"),dWe=o("BeitConfig"),cWe=o(" (BEiT model)"),fWe=l(),jf=a("li"),dte=a("strong"),mWe=o("bert"),gWe=o(" \u2014 "),aS=a("a"),hWe=o("BertConfig"),pWe=o(" (BERT model)"),uWe=l(),Df=a("li"),cte=a("strong"),_We=o("bert-generation"),bWe=o(" \u2014 "),nS=a("a"),vWe=o("BertGenerationConfig"),FWe=o(" (Bert Generation model)"),TWe=l(),Gf=a("li"),fte=a("strong"),MWe=o("big_bird"),EWe=o(" \u2014 "),sS=a("a"),CWe=o("BigBirdConfig"),wWe=o(" (BigBird model)"),AWe=l(),Of=a("li"),mte=a("strong"),LWe=o("bigbird_pegasus"),yWe=o(" \u2014 "),lS=a("a"),xWe=o("BigBirdPegasusConfig"),$We=o(" (BigBird-Pegasus model)"),kWe=l(),Vf=a("li"),gte=a("strong"),SWe=o("blenderbot"),RWe=o(" \u2014 "),iS=a("a"),PWe=o("BlenderbotConfig"),BWe=o(" (Blenderbot model)"),IWe=l(),Xf=a("li"),hte=a("strong"),NWe=o("blenderbot-small"),qWe=o(" \u2014 "),dS=a("a"),jWe=o("BlenderbotSmallConfig"),DWe=o(" (BlenderbotSmall model)"),GWe=l(),zf=a("li"),pte=a("strong"),OWe=o("bloom"),VWe=o(" \u2014 "),cS=a("a"),XWe=o("BloomConfig"),zWe=o(" (BLOOM model)"),WWe=l(),Wf=a("li"),ute=a("strong"),QWe=o("camembert"),HWe=o(" \u2014 "),fS=a("a"),UWe=o("CamembertConfig"),JWe=o(" (CamemBERT model)"),YWe=l(),Qf=a("li"),_te=a("strong"),KWe=o("canine"),ZWe=o(" \u2014 "),mS=a("a"),eQe=o("CanineConfig"),oQe=o(" (CANINE model)"),rQe=l(),Hf=a("li"),bte=a("strong"),tQe=o("clip"),aQe=o(" \u2014 "),gS=a("a"),nQe=o("CLIPConfig"),sQe=o(" (CLIP model)"),lQe=l(),Uf=a("li"),vte=a("strong"),iQe=o("convbert"),dQe=o(" \u2014 "),hS=a("a"),cQe=o("ConvBertConfig"),fQe=o(" (ConvBERT model)"),mQe=l(),Jf=a("li"),Fte=a("strong"),gQe=o("convnext"),hQe=o(" \u2014 "),pS=a("a"),pQe=o("ConvNextConfig"),uQe=o(" (ConvNeXT model)"),_Qe=l(),Yf=a("li"),Tte=a("strong"),bQe=o("ctrl"),vQe=o(" \u2014 "),uS=a("a"),FQe=o("CTRLConfig"),TQe=o(" (CTRL model)"),MQe=l(),Kf=a("li"),Mte=a("strong"),EQe=o("cvt"),CQe=o(" \u2014 "),_S=a("a"),wQe=o("CvtConfig"),AQe=o(" (CvT model)"),LQe=l(),Zf=a("li"),Ete=a("strong"),yQe=o("data2vec-audio"),xQe=o(" \u2014 "),bS=a("a"),$Qe=o("Data2VecAudioConfig"),kQe=o(" (Data2VecAudio model)"),SQe=l(),em=a("li"),Cte=a("strong"),RQe=o("data2vec-text"),PQe=o(" \u2014 "),vS=a("a"),BQe=o("Data2VecTextConfig"),IQe=o(" (Data2VecText model)"),NQe=l(),om=a("li"),wte=a("strong"),qQe=o("data2vec-vision"),jQe=o(" \u2014 "),FS=a("a"),DQe=o("Data2VecVisionConfig"),GQe=o(" (Data2VecVision model)"),OQe=l(),rm=a("li"),Ate=a("strong"),VQe=o("deberta"),XQe=o(" \u2014 "),TS=a("a"),zQe=o("DebertaConfig"),WQe=o(" (DeBERTa model)"),QQe=l(),tm=a("li"),Lte=a("strong"),HQe=o("deberta-v2"),UQe=o(" \u2014 "),MS=a("a"),JQe=o("DebertaV2Config"),YQe=o(" (DeBERTa-v2 model)"),KQe=l(),am=a("li"),yte=a("strong"),ZQe=o("decision_transformer"),eHe=o(" \u2014 "),ES=a("a"),oHe=o("DecisionTransformerConfig"),rHe=o(" (Decision Transformer model)"),tHe=l(),nm=a("li"),xte=a("strong"),aHe=o("deit"),nHe=o(" \u2014 "),CS=a("a"),sHe=o("DeiTConfig"),lHe=o(" (DeiT model)"),iHe=l(),sm=a("li"),$te=a("strong"),dHe=o("detr"),cHe=o(" \u2014 "),wS=a("a"),fHe=o("DetrConfig"),mHe=o(" (DETR model)"),gHe=l(),lm=a("li"),kte=a("strong"),hHe=o("distilbert"),pHe=o(" \u2014 "),AS=a("a"),uHe=o("DistilBertConfig"),_He=o(" (DistilBERT model)"),bHe=l(),im=a("li"),Ste=a("strong"),vHe=o("dpr"),FHe=o(" \u2014 "),LS=a("a"),THe=o("DPRConfig"),MHe=o(" (DPR model)"),EHe=l(),dm=a("li"),Rte=a("strong"),CHe=o("dpt"),wHe=o(" \u2014 "),yS=a("a"),AHe=o("DPTConfig"),LHe=o(" (DPT model)"),yHe=l(),cm=a("li"),Pte=a("strong"),xHe=o("electra"),$He=o(" \u2014 "),xS=a("a"),kHe=o("ElectraConfig"),SHe=o(" (ELECTRA model)"),RHe=l(),fm=a("li"),Bte=a("strong"),PHe=o("encoder-decoder"),BHe=o(" \u2014 "),$S=a("a"),IHe=o("EncoderDecoderConfig"),NHe=o(" (Encoder decoder model)"),qHe=l(),mm=a("li"),Ite=a("strong"),jHe=o("flaubert"),DHe=o(" \u2014 "),kS=a("a"),GHe=o("FlaubertConfig"),OHe=o(" (FlauBERT model)"),VHe=l(),gm=a("li"),Nte=a("strong"),XHe=o("flava"),zHe=o(" \u2014 "),SS=a("a"),WHe=o("FlavaConfig"),QHe=o(" (FLAVA model)"),HHe=l(),hm=a("li"),qte=a("strong"),UHe=o("fnet"),JHe=o(" \u2014 "),RS=a("a"),YHe=o("FNetConfig"),KHe=o(" (FNet model)"),ZHe=l(),pm=a("li"),jte=a("strong"),eUe=o("fsmt"),oUe=o(" \u2014 "),PS=a("a"),rUe=o("FSMTConfig"),tUe=o(" (FairSeq Machine-Translation model)"),aUe=l(),um=a("li"),Dte=a("strong"),nUe=o("funnel"),sUe=o(" \u2014 "),BS=a("a"),lUe=o("FunnelConfig"),iUe=o(" (Funnel Transformer model)"),dUe=l(),_m=a("li"),Gte=a("strong"),cUe=o("glpn"),fUe=o(" \u2014 "),IS=a("a"),mUe=o("GLPNConfig"),gUe=o(" (GLPN model)"),hUe=l(),bm=a("li"),Ote=a("strong"),pUe=o("gpt2"),uUe=o(" \u2014 "),NS=a("a"),_Ue=o("GPT2Config"),bUe=o(" (OpenAI GPT-2 model)"),vUe=l(),vm=a("li"),Vte=a("strong"),FUe=o("gpt_neo"),TUe=o(" \u2014 "),qS=a("a"),MUe=o("GPTNeoConfig"),EUe=o(" (GPT Neo model)"),CUe=l(),Fm=a("li"),Xte=a("strong"),wUe=o("gpt_neox"),AUe=o(" \u2014 "),jS=a("a"),LUe=o("GPTNeoXConfig"),yUe=o(" (GPT NeoX model)"),xUe=l(),Tm=a("li"),zte=a("strong"),$Ue=o("gptj"),kUe=o(" \u2014 "),DS=a("a"),SUe=o("GPTJConfig"),RUe=o(" (GPT-J model)"),PUe=l(),Mm=a("li"),Wte=a("strong"),BUe=o("hubert"),IUe=o(" \u2014 "),GS=a("a"),NUe=o("HubertConfig"),qUe=o(" (Hubert model)"),jUe=l(),Em=a("li"),Qte=a("strong"),DUe=o("ibert"),GUe=o(" \u2014 "),OS=a("a"),OUe=o("IBertConfig"),VUe=o(" (I-BERT model)"),XUe=l(),Cm=a("li"),Hte=a("strong"),zUe=o("imagegpt"),WUe=o(" \u2014 "),VS=a("a"),QUe=o("ImageGPTConfig"),HUe=o(" (ImageGPT model)"),UUe=l(),wm=a("li"),Ute=a("strong"),JUe=o("layoutlm"),YUe=o(" \u2014 "),XS=a("a"),KUe=o("LayoutLMConfig"),ZUe=o(" (LayoutLM model)"),eJe=l(),Am=a("li"),Jte=a("strong"),oJe=o("layoutlmv2"),rJe=o(" \u2014 "),zS=a("a"),tJe=o("LayoutLMv2Config"),aJe=o(" (LayoutLMv2 model)"),nJe=l(),Lm=a("li"),Yte=a("strong"),sJe=o("layoutlmv3"),lJe=o(" \u2014 "),WS=a("a"),iJe=o("LayoutLMv3Config"),dJe=o(" (LayoutLMv3 model)"),cJe=l(),ym=a("li"),Kte=a("strong"),fJe=o("led"),mJe=o(" \u2014 "),QS=a("a"),gJe=o("LEDConfig"),hJe=o(" (LED model)"),pJe=l(),xm=a("li"),Zte=a("strong"),uJe=o("levit"),_Je=o(" \u2014 "),HS=a("a"),bJe=o("LevitConfig"),vJe=o(" (LeViT model)"),FJe=l(),$m=a("li"),eae=a("strong"),TJe=o("longformer"),MJe=o(" \u2014 "),US=a("a"),EJe=o("LongformerConfig"),CJe=o(" (Longformer model)"),wJe=l(),km=a("li"),oae=a("strong"),AJe=o("longt5"),LJe=o(" \u2014 "),JS=a("a"),yJe=o("LongT5Config"),xJe=o(" (LongT5 model)"),$Je=l(),Sm=a("li"),rae=a("strong"),kJe=o("luke"),SJe=o(" \u2014 "),YS=a("a"),RJe=o("LukeConfig"),PJe=o(" (LUKE model)"),BJe=l(),Rm=a("li"),tae=a("strong"),IJe=o("lxmert"),NJe=o(" \u2014 "),KS=a("a"),qJe=o("LxmertConfig"),jJe=o(" (LXMERT model)"),DJe=l(),Pm=a("li"),aae=a("strong"),GJe=o("m2m_100"),OJe=o(" \u2014 "),ZS=a("a"),VJe=o("M2M100Config"),XJe=o(" (M2M100 model)"),zJe=l(),Bm=a("li"),nae=a("strong"),WJe=o("marian"),QJe=o(" \u2014 "),eR=a("a"),HJe=o("MarianConfig"),UJe=o(" (Marian model)"),JJe=l(),Im=a("li"),sae=a("strong"),YJe=o("maskformer"),KJe=o(" \u2014 "),oR=a("a"),ZJe=o("MaskFormerConfig"),eYe=o(" (MaskFormer model)"),oYe=l(),Nm=a("li"),lae=a("strong"),rYe=o("mbart"),tYe=o(" \u2014 "),rR=a("a"),aYe=o("MBartConfig"),nYe=o(" (mBART model)"),sYe=l(),qm=a("li"),iae=a("strong"),lYe=o("mctct"),iYe=o(" \u2014 "),tR=a("a"),dYe=o("MCTCTConfig"),cYe=o(" (M-CTC-T model)"),fYe=l(),jm=a("li"),dae=a("strong"),mYe=o("megatron-bert"),gYe=o(" \u2014 "),aR=a("a"),hYe=o("MegatronBertConfig"),pYe=o(" (Megatron-BERT model)"),uYe=l(),Dm=a("li"),cae=a("strong"),_Ye=o("mobilebert"),bYe=o(" \u2014 "),nR=a("a"),vYe=o("MobileBertConfig"),FYe=o(" (MobileBERT model)"),TYe=l(),Gm=a("li"),fae=a("strong"),MYe=o("mpnet"),EYe=o(" \u2014 "),sR=a("a"),CYe=o("MPNetConfig"),wYe=o(" (MPNet model)"),AYe=l(),Om=a("li"),mae=a("strong"),LYe=o("mt5"),yYe=o(" \u2014 "),lR=a("a"),xYe=o("MT5Config"),$Ye=o(" (MT5 model)"),kYe=l(),Vm=a("li"),gae=a("strong"),SYe=o("nystromformer"),RYe=o(" \u2014 "),iR=a("a"),PYe=o("NystromformerConfig"),BYe=o(" (Nystr\xF6mformer model)"),IYe=l(),Xm=a("li"),hae=a("strong"),NYe=o("openai-gpt"),qYe=o(" \u2014 "),dR=a("a"),jYe=o("OpenAIGPTConfig"),DYe=o(" (OpenAI GPT model)"),GYe=l(),zm=a("li"),pae=a("strong"),OYe=o("opt"),VYe=o(" \u2014 "),cR=a("a"),XYe=o("OPTConfig"),zYe=o(" (OPT model)"),WYe=l(),Wm=a("li"),uae=a("strong"),QYe=o("pegasus"),HYe=o(" \u2014 "),fR=a("a"),UYe=o("PegasusConfig"),JYe=o(" (Pegasus model)"),YYe=l(),Qm=a("li"),_ae=a("strong"),KYe=o("perceiver"),ZYe=o(" \u2014 "),mR=a("a"),eKe=o("PerceiverConfig"),oKe=o(" (Perceiver model)"),rKe=l(),Hm=a("li"),bae=a("strong"),tKe=o("plbart"),aKe=o(" \u2014 "),gR=a("a"),nKe=o("PLBartConfig"),sKe=o(" (PLBart model)"),lKe=l(),Um=a("li"),vae=a("strong"),iKe=o("poolformer"),dKe=o(" \u2014 "),hR=a("a"),cKe=o("PoolFormerConfig"),fKe=o(" (PoolFormer model)"),mKe=l(),Jm=a("li"),Fae=a("strong"),gKe=o("prophetnet"),hKe=o(" \u2014 "),pR=a("a"),pKe=o("ProphetNetConfig"),uKe=o(" (ProphetNet model)"),_Ke=l(),Ym=a("li"),Tae=a("strong"),bKe=o("qdqbert"),vKe=o(" \u2014 "),uR=a("a"),FKe=o("QDQBertConfig"),TKe=o(" (QDQBert model)"),MKe=l(),Km=a("li"),Mae=a("strong"),EKe=o("rag"),CKe=o(" \u2014 "),_R=a("a"),wKe=o("RagConfig"),AKe=o(" (RAG model)"),LKe=l(),Zm=a("li"),Eae=a("strong"),yKe=o("realm"),xKe=o(" \u2014 "),bR=a("a"),$Ke=o("RealmConfig"),kKe=o(" (REALM model)"),SKe=l(),eg=a("li"),Cae=a("strong"),RKe=o("reformer"),PKe=o(" \u2014 "),vR=a("a"),BKe=o("ReformerConfig"),IKe=o(" (Reformer model)"),NKe=l(),og=a("li"),wae=a("strong"),qKe=o("regnet"),jKe=o(" \u2014 "),FR=a("a"),DKe=o("RegNetConfig"),GKe=o(" (RegNet model)"),OKe=l(),rg=a("li"),Aae=a("strong"),VKe=o("rembert"),XKe=o(" \u2014 "),TR=a("a"),zKe=o("RemBertConfig"),WKe=o(" (RemBERT model)"),QKe=l(),tg=a("li"),Lae=a("strong"),HKe=o("resnet"),UKe=o(" \u2014 "),MR=a("a"),JKe=o("ResNetConfig"),YKe=o(" (ResNet model)"),KKe=l(),ag=a("li"),yae=a("strong"),ZKe=o("retribert"),eZe=o(" \u2014 "),ER=a("a"),oZe=o("RetriBertConfig"),rZe=o(" (RetriBERT model)"),tZe=l(),ng=a("li"),xae=a("strong"),aZe=o("roberta"),nZe=o(" \u2014 "),CR=a("a"),sZe=o("RobertaConfig"),lZe=o(" (RoBERTa model)"),iZe=l(),sg=a("li"),$ae=a("strong"),dZe=o("roformer"),cZe=o(" \u2014 "),wR=a("a"),fZe=o("RoFormerConfig"),mZe=o(" (RoFormer model)"),gZe=l(),lg=a("li"),kae=a("strong"),hZe=o("segformer"),pZe=o(" \u2014 "),AR=a("a"),uZe=o("SegformerConfig"),_Ze=o(" (SegFormer model)"),bZe=l(),ig=a("li"),Sae=a("strong"),vZe=o("sew"),FZe=o(" \u2014 "),LR=a("a"),TZe=o("SEWConfig"),MZe=o(" (SEW model)"),EZe=l(),dg=a("li"),Rae=a("strong"),CZe=o("sew-d"),wZe=o(" \u2014 "),yR=a("a"),AZe=o("SEWDConfig"),LZe=o(" (SEW-D model)"),yZe=l(),cg=a("li"),Pae=a("strong"),xZe=o("speech-encoder-decoder"),$Ze=o(" \u2014 "),xR=a("a"),kZe=o("SpeechEncoderDecoderConfig"),SZe=o(" (Speech Encoder decoder model)"),RZe=l(),fg=a("li"),Bae=a("strong"),PZe=o("speech_to_text"),BZe=o(" \u2014 "),$R=a("a"),IZe=o("Speech2TextConfig"),NZe=o(" (Speech2Text model)"),qZe=l(),mg=a("li"),Iae=a("strong"),jZe=o("speech_to_text_2"),DZe=o(" \u2014 "),kR=a("a"),GZe=o("Speech2Text2Config"),OZe=o(" (Speech2Text2 model)"),VZe=l(),gg=a("li"),Nae=a("strong"),XZe=o("splinter"),zZe=o(" \u2014 "),SR=a("a"),WZe=o("SplinterConfig"),QZe=o(" (Splinter model)"),HZe=l(),hg=a("li"),qae=a("strong"),UZe=o("squeezebert"),JZe=o(" \u2014 "),RR=a("a"),YZe=o("SqueezeBertConfig"),KZe=o(" (SqueezeBERT model)"),ZZe=l(),pg=a("li"),jae=a("strong"),eeo=o("swin"),oeo=o(" \u2014 "),PR=a("a"),reo=o("SwinConfig"),teo=o(" (Swin Transformer model)"),aeo=l(),ug=a("li"),Dae=a("strong"),neo=o("t5"),seo=o(" \u2014 "),BR=a("a"),leo=o("T5Config"),ieo=o(" (T5 model)"),deo=l(),_g=a("li"),Gae=a("strong"),ceo=o("tapas"),feo=o(" \u2014 "),IR=a("a"),meo=o("TapasConfig"),geo=o(" (TAPAS model)"),heo=l(),bg=a("li"),Oae=a("strong"),peo=o("trajectory_transformer"),ueo=o(" \u2014 "),NR=a("a"),_eo=o("TrajectoryTransformerConfig"),beo=o(" (Trajectory Transformer model)"),veo=l(),vg=a("li"),Vae=a("strong"),Feo=o("transfo-xl"),Teo=o(" \u2014 "),qR=a("a"),Meo=o("TransfoXLConfig"),Eeo=o(" (Transformer-XL model)"),Ceo=l(),Fg=a("li"),Xae=a("strong"),weo=o("trocr"),Aeo=o(" \u2014 "),jR=a("a"),Leo=o("TrOCRConfig"),yeo=o(" (TrOCR model)"),xeo=l(),Tg=a("li"),zae=a("strong"),$eo=o("unispeech"),keo=o(" \u2014 "),DR=a("a"),Seo=o("UniSpeechConfig"),Reo=o(" (UniSpeech model)"),Peo=l(),Mg=a("li"),Wae=a("strong"),Beo=o("unispeech-sat"),Ieo=o(" \u2014 "),GR=a("a"),Neo=o("UniSpeechSatConfig"),qeo=o(" (UniSpeechSat model)"),jeo=l(),Eg=a("li"),Qae=a("strong"),Deo=o("van"),Geo=o(" \u2014 "),OR=a("a"),Oeo=o("VanConfig"),Veo=o(" (VAN model)"),Xeo=l(),Cg=a("li"),Hae=a("strong"),zeo=o("vilt"),Weo=o(" \u2014 "),VR=a("a"),Qeo=o("ViltConfig"),Heo=o(" (ViLT model)"),Ueo=l(),wg=a("li"),Uae=a("strong"),Jeo=o("vision-encoder-decoder"),Yeo=o(" \u2014 "),XR=a("a"),Keo=o("VisionEncoderDecoderConfig"),Zeo=o(" (Vision Encoder decoder model)"),eoo=l(),Ag=a("li"),Jae=a("strong"),ooo=o("vision-text-dual-encoder"),roo=o(" \u2014 "),zR=a("a"),too=o("VisionTextDualEncoderConfig"),aoo=o(" (VisionTextDualEncoder model)"),noo=l(),Lg=a("li"),Yae=a("strong"),soo=o("visual_bert"),loo=o(" \u2014 "),WR=a("a"),ioo=o("VisualBertConfig"),doo=o(" (VisualBERT model)"),coo=l(),yg=a("li"),Kae=a("strong"),foo=o("vit"),moo=o(" \u2014 "),QR=a("a"),goo=o("ViTConfig"),hoo=o(" (ViT model)"),poo=l(),xg=a("li"),Zae=a("strong"),uoo=o("vit_mae"),_oo=o(" \u2014 "),HR=a("a"),boo=o("ViTMAEConfig"),voo=o(" (ViTMAE model)"),Foo=l(),$g=a("li"),ene=a("strong"),Too=o("wav2vec2"),Moo=o(" \u2014 "),UR=a("a"),Eoo=o("Wav2Vec2Config"),Coo=o(" (Wav2Vec2 model)"),woo=l(),kg=a("li"),one=a("strong"),Aoo=o("wav2vec2-conformer"),Loo=o(" \u2014 "),JR=a("a"),yoo=o("Wav2Vec2ConformerConfig"),xoo=o(" (Wav2Vec2-Conformer model)"),$oo=l(),Sg=a("li"),rne=a("strong"),koo=o("wavlm"),Soo=o(" \u2014 "),YR=a("a"),Roo=o("WavLMConfig"),Poo=o(" (WavLM model)"),Boo=l(),Rg=a("li"),tne=a("strong"),Ioo=o("xglm"),Noo=o(" \u2014 "),KR=a("a"),qoo=o("XGLMConfig"),joo=o(" (XGLM model)"),Doo=l(),Pg=a("li"),ane=a("strong"),Goo=o("xlm"),Ooo=o(" \u2014 "),ZR=a("a"),Voo=o("XLMConfig"),Xoo=o(" (XLM model)"),zoo=l(),Bg=a("li"),nne=a("strong"),Woo=o("xlm-prophetnet"),Qoo=o(" \u2014 "),eP=a("a"),Hoo=o("XLMProphetNetConfig"),Uoo=o(" (XLM-ProphetNet model)"),Joo=l(),Ig=a("li"),sne=a("strong"),Yoo=o("xlm-roberta"),Koo=o(" \u2014 "),oP=a("a"),Zoo=o("XLMRobertaConfig"),ero=o(" (XLM-RoBERTa model)"),oro=l(),Ng=a("li"),lne=a("strong"),rro=o("xlm-roberta-xl"),tro=o(" \u2014 "),rP=a("a"),aro=o("XLMRobertaXLConfig"),nro=o(" (XLM-RoBERTa-XL model)"),sro=l(),qg=a("li"),ine=a("strong"),lro=o("xlnet"),iro=o(" \u2014 "),tP=a("a"),dro=o("XLNetConfig"),cro=o(" (XLNet model)"),fro=l(),jg=a("li"),dne=a("strong"),mro=o("yolos"),gro=o(" \u2014 "),aP=a("a"),hro=o("YolosConfig"),pro=o(" (YOLOS model)"),uro=l(),Dg=a("li"),cne=a("strong"),_ro=o("yoso"),bro=o(" \u2014 "),nP=a("a"),vro=o("YosoConfig"),Fro=o(" (YOSO model)"),Tro=l(),F(Gg.$$.fragment),Mro=l(),Og=a("div"),F(yA.$$.fragment),Ero=l(),fne=a("p"),Cro=o("Register a new configuration for this class."),hGe=l(),Si=a("h2"),Vg=a("a"),mne=a("span"),F(xA.$$.fragment),wro=l(),gne=a("span"),Aro=o("AutoTokenizer"),pGe=l(),Ao=a("div"),F($A.$$.fragment),Lro=l(),kA=a("p"),yro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sP=a("a"),xro=o("AutoTokenizer.from_pretrained()"),$ro=o(" class method."),kro=l(),SA=a("p"),Sro=o("This class cannot be instantiated directly using "),hne=a("code"),Rro=o("__init__()"),Pro=o(" (throws an error)."),Bro=l(),Ar=a("div"),F(RA.$$.fragment),Iro=l(),pne=a("p"),Nro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qro=l(),ka=a("p"),jro=o("The tokenizer class to instantiate is selected based on the "),une=a("code"),Dro=o("model_type"),Gro=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),Oro=o("pretrained_model_name_or_path"),Vro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bne=a("code"),Xro=o("pretrained_model_name_or_path"),zro=o(":"),Wro=l(),k=a("ul"),Nn=a("li"),vne=a("strong"),Qro=o("albert"),Hro=o(" \u2014 "),lP=a("a"),Uro=o("AlbertTokenizer"),Jro=o(" or "),iP=a("a"),Yro=o("AlbertTokenizerFast"),Kro=o(" (ALBERT model)"),Zro=l(),qn=a("li"),Fne=a("strong"),eto=o("bart"),oto=o(" \u2014 "),dP=a("a"),rto=o("BartTokenizer"),tto=o(" or "),cP=a("a"),ato=o("BartTokenizerFast"),nto=o(" (BART model)"),sto=l(),jn=a("li"),Tne=a("strong"),lto=o("barthez"),ito=o(" \u2014 "),fP=a("a"),dto=o("BarthezTokenizer"),cto=o(" or "),mP=a("a"),fto=o("BarthezTokenizerFast"),mto=o(" (BARThez model)"),gto=l(),Xg=a("li"),Mne=a("strong"),hto=o("bartpho"),pto=o(" \u2014 "),gP=a("a"),uto=o("BartphoTokenizer"),_to=o(" (BARTpho model)"),bto=l(),Dn=a("li"),Ene=a("strong"),vto=o("bert"),Fto=o(" \u2014 "),hP=a("a"),Tto=o("BertTokenizer"),Mto=o(" or "),pP=a("a"),Eto=o("BertTokenizerFast"),Cto=o(" (BERT model)"),wto=l(),zg=a("li"),Cne=a("strong"),Ato=o("bert-generation"),Lto=o(" \u2014 "),uP=a("a"),yto=o("BertGenerationTokenizer"),xto=o(" (Bert Generation model)"),$to=l(),Wg=a("li"),wne=a("strong"),kto=o("bert-japanese"),Sto=o(" \u2014 "),_P=a("a"),Rto=o("BertJapaneseTokenizer"),Pto=o(" (BertJapanese model)"),Bto=l(),Qg=a("li"),Ane=a("strong"),Ito=o("bertweet"),Nto=o(" \u2014 "),bP=a("a"),qto=o("BertweetTokenizer"),jto=o(" (BERTweet model)"),Dto=l(),Gn=a("li"),Lne=a("strong"),Gto=o("big_bird"),Oto=o(" \u2014 "),vP=a("a"),Vto=o("BigBirdTokenizer"),Xto=o(" or "),FP=a("a"),zto=o("BigBirdTokenizerFast"),Wto=o(" (BigBird model)"),Qto=l(),On=a("li"),yne=a("strong"),Hto=o("bigbird_pegasus"),Uto=o(" \u2014 "),TP=a("a"),Jto=o("PegasusTokenizer"),Yto=o(" or "),MP=a("a"),Kto=o("PegasusTokenizerFast"),Zto=o(" (BigBird-Pegasus model)"),eao=l(),Vn=a("li"),xne=a("strong"),oao=o("blenderbot"),rao=o(" \u2014 "),EP=a("a"),tao=o("BlenderbotTokenizer"),aao=o(" or "),CP=a("a"),nao=o("BlenderbotTokenizerFast"),sao=o(" (Blenderbot model)"),lao=l(),Hg=a("li"),$ne=a("strong"),iao=o("blenderbot-small"),dao=o(" \u2014 "),wP=a("a"),cao=o("BlenderbotSmallTokenizer"),fao=o(" (BlenderbotSmall model)"),mao=l(),Ug=a("li"),kne=a("strong"),gao=o("bloom"),hao=o(" \u2014 "),AP=a("a"),pao=o("BloomTokenizerFast"),uao=o(" (BLOOM model)"),_ao=l(),Jg=a("li"),Sne=a("strong"),bao=o("byt5"),vao=o(" \u2014 "),LP=a("a"),Fao=o("ByT5Tokenizer"),Tao=o(" (ByT5 model)"),Mao=l(),Xn=a("li"),Rne=a("strong"),Eao=o("camembert"),Cao=o(" \u2014 "),yP=a("a"),wao=o("CamembertTokenizer"),Aao=o(" or "),xP=a("a"),Lao=o("CamembertTokenizerFast"),yao=o(" (CamemBERT model)"),xao=l(),Yg=a("li"),Pne=a("strong"),$ao=o("canine"),kao=o(" \u2014 "),$P=a("a"),Sao=o("CanineTokenizer"),Rao=o(" (CANINE model)"),Pao=l(),zn=a("li"),Bne=a("strong"),Bao=o("clip"),Iao=o(" \u2014 "),kP=a("a"),Nao=o("CLIPTokenizer"),qao=o(" or "),SP=a("a"),jao=o("CLIPTokenizerFast"),Dao=o(" (CLIP model)"),Gao=l(),Wn=a("li"),Ine=a("strong"),Oao=o("convbert"),Vao=o(" \u2014 "),RP=a("a"),Xao=o("ConvBertTokenizer"),zao=o(" or "),PP=a("a"),Wao=o("ConvBertTokenizerFast"),Qao=o(" (ConvBERT model)"),Hao=l(),Qn=a("li"),Nne=a("strong"),Uao=o("cpm"),Jao=o(" \u2014 "),BP=a("a"),Yao=o("CpmTokenizer"),Kao=o(" or "),IP=a("a"),Zao=o("CpmTokenizerFast"),eno=o(" (CPM model)"),ono=l(),Kg=a("li"),qne=a("strong"),rno=o("ctrl"),tno=o(" \u2014 "),NP=a("a"),ano=o("CTRLTokenizer"),nno=o(" (CTRL model)"),sno=l(),Hn=a("li"),jne=a("strong"),lno=o("data2vec-text"),ino=o(" \u2014 "),qP=a("a"),dno=o("RobertaTokenizer"),cno=o(" or "),jP=a("a"),fno=o("RobertaTokenizerFast"),mno=o(" (Data2VecText model)"),gno=l(),Un=a("li"),Dne=a("strong"),hno=o("deberta"),pno=o(" \u2014 "),DP=a("a"),uno=o("DebertaTokenizer"),_no=o(" or "),GP=a("a"),bno=o("DebertaTokenizerFast"),vno=o(" (DeBERTa model)"),Fno=l(),Jn=a("li"),Gne=a("strong"),Tno=o("deberta-v2"),Mno=o(" \u2014 "),OP=a("a"),Eno=o("DebertaV2Tokenizer"),Cno=o(" or "),VP=a("a"),wno=o("DebertaV2TokenizerFast"),Ano=o(" (DeBERTa-v2 model)"),Lno=l(),Yn=a("li"),One=a("strong"),yno=o("distilbert"),xno=o(" \u2014 "),XP=a("a"),$no=o("DistilBertTokenizer"),kno=o(" or "),zP=a("a"),Sno=o("DistilBertTokenizerFast"),Rno=o(" (DistilBERT model)"),Pno=l(),Kn=a("li"),Vne=a("strong"),Bno=o("dpr"),Ino=o(" \u2014 "),WP=a("a"),Nno=o("DPRQuestionEncoderTokenizer"),qno=o(" or "),QP=a("a"),jno=o("DPRQuestionEncoderTokenizerFast"),Dno=o(" (DPR model)"),Gno=l(),Zn=a("li"),Xne=a("strong"),Ono=o("electra"),Vno=o(" \u2014 "),HP=a("a"),Xno=o("ElectraTokenizer"),zno=o(" or "),UP=a("a"),Wno=o("ElectraTokenizerFast"),Qno=o(" (ELECTRA model)"),Hno=l(),Zg=a("li"),zne=a("strong"),Uno=o("flaubert"),Jno=o(" \u2014 "),JP=a("a"),Yno=o("FlaubertTokenizer"),Kno=o(" (FlauBERT model)"),Zno=l(),es=a("li"),Wne=a("strong"),eso=o("fnet"),oso=o(" \u2014 "),YP=a("a"),rso=o("FNetTokenizer"),tso=o(" or "),KP=a("a"),aso=o("FNetTokenizerFast"),nso=o(" (FNet model)"),sso=l(),eh=a("li"),Qne=a("strong"),lso=o("fsmt"),iso=o(" \u2014 "),ZP=a("a"),dso=o("FSMTTokenizer"),cso=o(" (FairSeq Machine-Translation model)"),fso=l(),os=a("li"),Hne=a("strong"),mso=o("funnel"),gso=o(" \u2014 "),eB=a("a"),hso=o("FunnelTokenizer"),pso=o(" or "),oB=a("a"),uso=o("FunnelTokenizerFast"),_so=o(" (Funnel Transformer model)"),bso=l(),rs=a("li"),Une=a("strong"),vso=o("gpt2"),Fso=o(" \u2014 "),rB=a("a"),Tso=o("GPT2Tokenizer"),Mso=o(" or "),tB=a("a"),Eso=o("GPT2TokenizerFast"),Cso=o(" (OpenAI GPT-2 model)"),wso=l(),ts=a("li"),Jne=a("strong"),Aso=o("gpt_neo"),Lso=o(" \u2014 "),aB=a("a"),yso=o("GPT2Tokenizer"),xso=o(" or "),nB=a("a"),$so=o("GPT2TokenizerFast"),kso=o(" (GPT Neo model)"),Sso=l(),oh=a("li"),Yne=a("strong"),Rso=o("gpt_neox"),Pso=o(" \u2014 "),sB=a("a"),Bso=o("GPTNeoXTokenizerFast"),Iso=o(" (GPT NeoX model)"),Nso=l(),as=a("li"),Kne=a("strong"),qso=o("gptj"),jso=o(" \u2014 "),lB=a("a"),Dso=o("GPT2Tokenizer"),Gso=o(" or "),iB=a("a"),Oso=o("GPT2TokenizerFast"),Vso=o(" (GPT-J model)"),Xso=l(),ns=a("li"),Zne=a("strong"),zso=o("herbert"),Wso=o(" \u2014 "),dB=a("a"),Qso=o("HerbertTokenizer"),Hso=o(" or "),cB=a("a"),Uso=o("HerbertTokenizerFast"),Jso=o(" (HerBERT model)"),Yso=l(),rh=a("li"),ese=a("strong"),Kso=o("hubert"),Zso=o(" \u2014 "),fB=a("a"),elo=o("Wav2Vec2CTCTokenizer"),olo=o(" (Hubert model)"),rlo=l(),ss=a("li"),ose=a("strong"),tlo=o("ibert"),alo=o(" \u2014 "),mB=a("a"),nlo=o("RobertaTokenizer"),slo=o(" or "),gB=a("a"),llo=o("RobertaTokenizerFast"),ilo=o(" (I-BERT model)"),dlo=l(),ls=a("li"),rse=a("strong"),clo=o("layoutlm"),flo=o(" \u2014 "),hB=a("a"),mlo=o("LayoutLMTokenizer"),glo=o(" or "),pB=a("a"),hlo=o("LayoutLMTokenizerFast"),plo=o(" (LayoutLM model)"),ulo=l(),is=a("li"),tse=a("strong"),_lo=o("layoutlmv2"),blo=o(" \u2014 "),uB=a("a"),vlo=o("LayoutLMv2Tokenizer"),Flo=o(" or "),_B=a("a"),Tlo=o("LayoutLMv2TokenizerFast"),Mlo=o(" (LayoutLMv2 model)"),Elo=l(),ds=a("li"),ase=a("strong"),Clo=o("layoutlmv3"),wlo=o(" \u2014 "),bB=a("a"),Alo=o("LayoutLMv3Tokenizer"),Llo=o(" or "),vB=a("a"),ylo=o("LayoutLMv3TokenizerFast"),xlo=o(" (LayoutLMv3 model)"),$lo=l(),cs=a("li"),nse=a("strong"),klo=o("layoutxlm"),Slo=o(" \u2014 "),FB=a("a"),Rlo=o("LayoutXLMTokenizer"),Plo=o(" or "),TB=a("a"),Blo=o("LayoutXLMTokenizerFast"),Ilo=o(" (LayoutXLM model)"),Nlo=l(),fs=a("li"),sse=a("strong"),qlo=o("led"),jlo=o(" \u2014 "),MB=a("a"),Dlo=o("LEDTokenizer"),Glo=o(" or "),EB=a("a"),Olo=o("LEDTokenizerFast"),Vlo=o(" (LED model)"),Xlo=l(),ms=a("li"),lse=a("strong"),zlo=o("longformer"),Wlo=o(" \u2014 "),CB=a("a"),Qlo=o("LongformerTokenizer"),Hlo=o(" or "),wB=a("a"),Ulo=o("LongformerTokenizerFast"),Jlo=o(" (Longformer model)"),Ylo=l(),gs=a("li"),ise=a("strong"),Klo=o("longt5"),Zlo=o(" \u2014 "),AB=a("a"),eio=o("T5Tokenizer"),oio=o(" or "),LB=a("a"),rio=o("T5TokenizerFast"),tio=o(" (LongT5 model)"),aio=l(),th=a("li"),dse=a("strong"),nio=o("luke"),sio=o(" \u2014 "),yB=a("a"),lio=o("LukeTokenizer"),iio=o(" (LUKE model)"),dio=l(),hs=a("li"),cse=a("strong"),cio=o("lxmert"),fio=o(" \u2014 "),xB=a("a"),mio=o("LxmertTokenizer"),gio=o(" or "),$B=a("a"),hio=o("LxmertTokenizerFast"),pio=o(" (LXMERT model)"),uio=l(),ah=a("li"),fse=a("strong"),_io=o("m2m_100"),bio=o(" \u2014 "),kB=a("a"),vio=o("M2M100Tokenizer"),Fio=o(" (M2M100 model)"),Tio=l(),nh=a("li"),mse=a("strong"),Mio=o("marian"),Eio=o(" \u2014 "),SB=a("a"),Cio=o("MarianTokenizer"),wio=o(" (Marian model)"),Aio=l(),ps=a("li"),gse=a("strong"),Lio=o("mbart"),yio=o(" \u2014 "),RB=a("a"),xio=o("MBartTokenizer"),$io=o(" or "),PB=a("a"),kio=o("MBartTokenizerFast"),Sio=o(" (mBART model)"),Rio=l(),us=a("li"),hse=a("strong"),Pio=o("mbart50"),Bio=o(" \u2014 "),BB=a("a"),Iio=o("MBart50Tokenizer"),Nio=o(" or "),IB=a("a"),qio=o("MBart50TokenizerFast"),jio=o(" (mBART-50 model)"),Dio=l(),_s=a("li"),pse=a("strong"),Gio=o("megatron-bert"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("BertTokenizer"),Xio=o(" or "),qB=a("a"),zio=o("BertTokenizerFast"),Wio=o(" (Megatron-BERT model)"),Qio=l(),sh=a("li"),use=a("strong"),Hio=o("mluke"),Uio=o(" \u2014 "),jB=a("a"),Jio=o("MLukeTokenizer"),Yio=o(" (mLUKE model)"),Kio=l(),bs=a("li"),_se=a("strong"),Zio=o("mobilebert"),edo=o(" \u2014 "),DB=a("a"),odo=o("MobileBertTokenizer"),rdo=o(" or "),GB=a("a"),tdo=o("MobileBertTokenizerFast"),ado=o(" (MobileBERT model)"),ndo=l(),vs=a("li"),bse=a("strong"),sdo=o("mpnet"),ldo=o(" \u2014 "),OB=a("a"),ido=o("MPNetTokenizer"),ddo=o(" or "),VB=a("a"),cdo=o("MPNetTokenizerFast"),fdo=o(" (MPNet model)"),mdo=l(),Fs=a("li"),vse=a("strong"),gdo=o("mt5"),hdo=o(" \u2014 "),XB=a("a"),pdo=o("MT5Tokenizer"),udo=o(" or "),zB=a("a"),_do=o("MT5TokenizerFast"),bdo=o(" (MT5 model)"),vdo=l(),Ts=a("li"),Fse=a("strong"),Fdo=o("nystromformer"),Tdo=o(" \u2014 "),WB=a("a"),Mdo=o("AlbertTokenizer"),Edo=o(" or "),QB=a("a"),Cdo=o("AlbertTokenizerFast"),wdo=o(" (Nystr\xF6mformer model)"),Ado=l(),Ms=a("li"),Tse=a("strong"),Ldo=o("openai-gpt"),ydo=o(" \u2014 "),HB=a("a"),xdo=o("OpenAIGPTTokenizer"),$do=o(" or "),UB=a("a"),kdo=o("OpenAIGPTTokenizerFast"),Sdo=o(" (OpenAI GPT model)"),Rdo=l(),lh=a("li"),Mse=a("strong"),Pdo=o("opt"),Bdo=o(" \u2014 "),JB=a("a"),Ido=o("GPT2Tokenizer"),Ndo=o(" (OPT model)"),qdo=l(),Es=a("li"),Ese=a("strong"),jdo=o("pegasus"),Ddo=o(" \u2014 "),YB=a("a"),Gdo=o("PegasusTokenizer"),Odo=o(" or "),KB=a("a"),Vdo=o("PegasusTokenizerFast"),Xdo=o(" (Pegasus model)"),zdo=l(),ih=a("li"),Cse=a("strong"),Wdo=o("perceiver"),Qdo=o(" \u2014 "),ZB=a("a"),Hdo=o("PerceiverTokenizer"),Udo=o(" (Perceiver model)"),Jdo=l(),dh=a("li"),wse=a("strong"),Ydo=o("phobert"),Kdo=o(" \u2014 "),eI=a("a"),Zdo=o("PhobertTokenizer"),eco=o(" (PhoBERT model)"),oco=l(),ch=a("li"),Ase=a("strong"),rco=o("plbart"),tco=o(" \u2014 "),oI=a("a"),aco=o("PLBartTokenizer"),nco=o(" (PLBart model)"),sco=l(),fh=a("li"),Lse=a("strong"),lco=o("prophetnet"),ico=o(" \u2014 "),rI=a("a"),dco=o("ProphetNetTokenizer"),cco=o(" (ProphetNet model)"),fco=l(),Cs=a("li"),yse=a("strong"),mco=o("qdqbert"),gco=o(" \u2014 "),tI=a("a"),hco=o("BertTokenizer"),pco=o(" or "),aI=a("a"),uco=o("BertTokenizerFast"),_co=o(" (QDQBert model)"),bco=l(),mh=a("li"),xse=a("strong"),vco=o("rag"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("RagTokenizer"),Mco=o(" (RAG model)"),Eco=l(),ws=a("li"),$se=a("strong"),Cco=o("realm"),wco=o(" \u2014 "),sI=a("a"),Aco=o("RealmTokenizer"),Lco=o(" or "),lI=a("a"),yco=o("RealmTokenizerFast"),xco=o(" (REALM model)"),$co=l(),As=a("li"),kse=a("strong"),kco=o("reformer"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("ReformerTokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("ReformerTokenizerFast"),Ico=o(" (Reformer model)"),Nco=l(),Ls=a("li"),Sse=a("strong"),qco=o("rembert"),jco=o(" \u2014 "),cI=a("a"),Dco=o("RemBertTokenizer"),Gco=o(" or "),fI=a("a"),Oco=o("RemBertTokenizerFast"),Vco=o(" (RemBERT model)"),Xco=l(),ys=a("li"),Rse=a("strong"),zco=o("retribert"),Wco=o(" \u2014 "),mI=a("a"),Qco=o("RetriBertTokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("RetriBertTokenizerFast"),Jco=o(" (RetriBERT model)"),Yco=l(),xs=a("li"),Pse=a("strong"),Kco=o("roberta"),Zco=o(" \u2014 "),hI=a("a"),efo=o("RobertaTokenizer"),ofo=o(" or "),pI=a("a"),rfo=o("RobertaTokenizerFast"),tfo=o(" (RoBERTa model)"),afo=l(),$s=a("li"),Bse=a("strong"),nfo=o("roformer"),sfo=o(" \u2014 "),uI=a("a"),lfo=o("RoFormerTokenizer"),ifo=o(" or "),_I=a("a"),dfo=o("RoFormerTokenizerFast"),cfo=o(" (RoFormer model)"),ffo=l(),gh=a("li"),Ise=a("strong"),mfo=o("speech_to_text"),gfo=o(" \u2014 "),bI=a("a"),hfo=o("Speech2TextTokenizer"),pfo=o(" (Speech2Text model)"),ufo=l(),hh=a("li"),Nse=a("strong"),_fo=o("speech_to_text_2"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("Speech2Text2Tokenizer"),Ffo=o(" (Speech2Text2 model)"),Tfo=l(),ks=a("li"),qse=a("strong"),Mfo=o("splinter"),Efo=o(" \u2014 "),FI=a("a"),Cfo=o("SplinterTokenizer"),wfo=o(" or "),TI=a("a"),Afo=o("SplinterTokenizerFast"),Lfo=o(" (Splinter model)"),yfo=l(),Ss=a("li"),jse=a("strong"),xfo=o("squeezebert"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("SqueezeBertTokenizer"),Sfo=o(" or "),EI=a("a"),Rfo=o("SqueezeBertTokenizerFast"),Pfo=o(" (SqueezeBERT model)"),Bfo=l(),Rs=a("li"),Dse=a("strong"),Ifo=o("t5"),Nfo=o(" \u2014 "),CI=a("a"),qfo=o("T5Tokenizer"),jfo=o(" or "),wI=a("a"),Dfo=o("T5TokenizerFast"),Gfo=o(" (T5 model)"),Ofo=l(),ph=a("li"),Gse=a("strong"),Vfo=o("tapas"),Xfo=o(" \u2014 "),AI=a("a"),zfo=o("TapasTokenizer"),Wfo=o(" (TAPAS model)"),Qfo=l(),uh=a("li"),Ose=a("strong"),Hfo=o("tapex"),Ufo=o(" \u2014 "),LI=a("a"),Jfo=o("TapexTokenizer"),Yfo=o(" (TAPEX model)"),Kfo=l(),_h=a("li"),Vse=a("strong"),Zfo=o("transfo-xl"),emo=o(" \u2014 "),yI=a("a"),omo=o("TransfoXLTokenizer"),rmo=o(" (Transformer-XL model)"),tmo=l(),Ps=a("li"),Xse=a("strong"),amo=o("vilt"),nmo=o(" \u2014 "),xI=a("a"),smo=o("BertTokenizer"),lmo=o(" or "),$I=a("a"),imo=o("BertTokenizerFast"),dmo=o(" (ViLT model)"),cmo=l(),Bs=a("li"),zse=a("strong"),fmo=o("visual_bert"),mmo=o(" \u2014 "),kI=a("a"),gmo=o("BertTokenizer"),hmo=o(" or "),SI=a("a"),pmo=o("BertTokenizerFast"),umo=o(" (VisualBERT model)"),_mo=l(),bh=a("li"),Wse=a("strong"),bmo=o("wav2vec2"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("Wav2Vec2CTCTokenizer"),Tmo=o(" (Wav2Vec2 model)"),Mmo=l(),vh=a("li"),Qse=a("strong"),Emo=o("wav2vec2-conformer"),Cmo=o(" \u2014 "),PI=a("a"),wmo=o("Wav2Vec2CTCTokenizer"),Amo=o(" (Wav2Vec2-Conformer model)"),Lmo=l(),Fh=a("li"),Hse=a("strong"),ymo=o("wav2vec2_phoneme"),xmo=o(" \u2014 "),BI=a("a"),$mo=o("Wav2Vec2PhonemeCTCTokenizer"),kmo=o(" (Wav2Vec2Phoneme model)"),Smo=l(),Is=a("li"),Use=a("strong"),Rmo=o("xglm"),Pmo=o(" \u2014 "),II=a("a"),Bmo=o("XGLMTokenizer"),Imo=o(" or "),NI=a("a"),Nmo=o("XGLMTokenizerFast"),qmo=o(" (XGLM model)"),jmo=l(),Th=a("li"),Jse=a("strong"),Dmo=o("xlm"),Gmo=o(" \u2014 "),qI=a("a"),Omo=o("XLMTokenizer"),Vmo=o(" (XLM model)"),Xmo=l(),Mh=a("li"),Yse=a("strong"),zmo=o("xlm-prophetnet"),Wmo=o(" \u2014 "),jI=a("a"),Qmo=o("XLMProphetNetTokenizer"),Hmo=o(" (XLM-ProphetNet model)"),Umo=l(),Ns=a("li"),Kse=a("strong"),Jmo=o("xlm-roberta"),Ymo=o(" \u2014 "),DI=a("a"),Kmo=o("XLMRobertaTokenizer"),Zmo=o(" or "),GI=a("a"),ego=o("XLMRobertaTokenizerFast"),ogo=o(" (XLM-RoBERTa model)"),rgo=l(),qs=a("li"),Zse=a("strong"),tgo=o("xlm-roberta-xl"),ago=o(" \u2014 "),OI=a("a"),ngo=o("RobertaTokenizer"),sgo=o(" or "),VI=a("a"),lgo=o("RobertaTokenizerFast"),igo=o(" (XLM-RoBERTa-XL model)"),dgo=l(),js=a("li"),ele=a("strong"),cgo=o("xlnet"),fgo=o(" \u2014 "),XI=a("a"),mgo=o("XLNetTokenizer"),ggo=o(" or "),zI=a("a"),hgo=o("XLNetTokenizerFast"),pgo=o(" (XLNet model)"),ugo=l(),Ds=a("li"),ole=a("strong"),_go=o("yoso"),bgo=o(" \u2014 "),WI=a("a"),vgo=o("AlbertTokenizer"),Fgo=o(" or "),QI=a("a"),Tgo=o("AlbertTokenizerFast"),Mgo=o(" (YOSO model)"),Ego=l(),F(Eh.$$.fragment),Cgo=l(),Ch=a("div"),F(PA.$$.fragment),wgo=l(),rle=a("p"),Ago=o("Register a new tokenizer in this mapping."),uGe=l(),Ri=a("h2"),wh=a("a"),tle=a("span"),F(BA.$$.fragment),Lgo=l(),ale=a("span"),ygo=o("AutoFeatureExtractor"),_Ge=l(),Lo=a("div"),F(IA.$$.fragment),xgo=l(),NA=a("p"),$go=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HI=a("a"),kgo=o("AutoFeatureExtractor.from_pretrained()"),Sgo=o(" class method."),Rgo=l(),qA=a("p"),Pgo=o("This class cannot be instantiated directly using "),nle=a("code"),Bgo=o("__init__()"),Igo=o(" (throws an error)."),Ngo=l(),He=a("div"),F(jA.$$.fragment),qgo=l(),sle=a("p"),jgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dgo=l(),Sa=a("p"),Ggo=o("The feature extractor class to instantiate is selected based on the "),lle=a("code"),Ogo=o("model_type"),Vgo=o(` property of the config object
(either passed as an argument or loaded from `),ile=a("code"),Xgo=o("pretrained_model_name_or_path"),zgo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dle=a("code"),Wgo=o("pretrained_model_name_or_path"),Qgo=o(":"),Hgo=l(),Y=a("ul"),Ah=a("li"),cle=a("strong"),Ugo=o("beit"),Jgo=o(" \u2014 "),UI=a("a"),Ygo=o("BeitFeatureExtractor"),Kgo=o(" (BEiT model)"),Zgo=l(),Lh=a("li"),fle=a("strong"),eho=o("clip"),oho=o(" \u2014 "),JI=a("a"),rho=o("CLIPFeatureExtractor"),tho=o(" (CLIP model)"),aho=l(),yh=a("li"),mle=a("strong"),nho=o("convnext"),sho=o(" \u2014 "),YI=a("a"),lho=o("ConvNextFeatureExtractor"),iho=o(" (ConvNeXT model)"),dho=l(),xh=a("li"),gle=a("strong"),cho=o("cvt"),fho=o(" \u2014 "),KI=a("a"),mho=o("ConvNextFeatureExtractor"),gho=o(" (CvT model)"),hho=l(),$h=a("li"),hle=a("strong"),pho=o("data2vec-audio"),uho=o(" \u2014 "),ZI=a("a"),_ho=o("Wav2Vec2FeatureExtractor"),bho=o(" (Data2VecAudio model)"),vho=l(),kh=a("li"),ple=a("strong"),Fho=o("data2vec-vision"),Tho=o(" \u2014 "),eN=a("a"),Mho=o("BeitFeatureExtractor"),Eho=o(" (Data2VecVision model)"),Cho=l(),Sh=a("li"),ule=a("strong"),who=o("deit"),Aho=o(" \u2014 "),oN=a("a"),Lho=o("DeiTFeatureExtractor"),yho=o(" (DeiT model)"),xho=l(),Rh=a("li"),_le=a("strong"),$ho=o("detr"),kho=o(" \u2014 "),rN=a("a"),Sho=o("DetrFeatureExtractor"),Rho=o(" (DETR model)"),Pho=l(),Ph=a("li"),ble=a("strong"),Bho=o("dpt"),Iho=o(" \u2014 "),tN=a("a"),Nho=o("DPTFeatureExtractor"),qho=o(" (DPT model)"),jho=l(),Bh=a("li"),vle=a("strong"),Dho=o("flava"),Gho=o(" \u2014 "),aN=a("a"),Oho=o("FlavaFeatureExtractor"),Vho=o(" (FLAVA model)"),Xho=l(),Ih=a("li"),Fle=a("strong"),zho=o("glpn"),Who=o(" \u2014 "),nN=a("a"),Qho=o("GLPNFeatureExtractor"),Hho=o(" (GLPN model)"),Uho=l(),Nh=a("li"),Tle=a("strong"),Jho=o("hubert"),Yho=o(" \u2014 "),sN=a("a"),Kho=o("Wav2Vec2FeatureExtractor"),Zho=o(" (Hubert model)"),epo=l(),qh=a("li"),Mle=a("strong"),opo=o("imagegpt"),rpo=o(" \u2014 "),lN=a("a"),tpo=o("ImageGPTFeatureExtractor"),apo=o(" (ImageGPT model)"),npo=l(),jh=a("li"),Ele=a("strong"),spo=o("layoutlmv2"),lpo=o(" \u2014 "),iN=a("a"),ipo=o("LayoutLMv2FeatureExtractor"),dpo=o(" (LayoutLMv2 model)"),cpo=l(),Dh=a("li"),Cle=a("strong"),fpo=o("layoutlmv3"),mpo=o(" \u2014 "),dN=a("a"),gpo=o("LayoutLMv3FeatureExtractor"),hpo=o(" (LayoutLMv3 model)"),ppo=l(),Gh=a("li"),wle=a("strong"),upo=o("levit"),_po=o(" \u2014 "),cN=a("a"),bpo=o("LevitFeatureExtractor"),vpo=o(" (LeViT model)"),Fpo=l(),Oh=a("li"),Ale=a("strong"),Tpo=o("maskformer"),Mpo=o(" \u2014 "),fN=a("a"),Epo=o("MaskFormerFeatureExtractor"),Cpo=o(" (MaskFormer model)"),wpo=l(),Vh=a("li"),Lle=a("strong"),Apo=o("mctct"),Lpo=o(" \u2014 "),mN=a("a"),ypo=o("MCTCTFeatureExtractor"),xpo=o(" (M-CTC-T model)"),$po=l(),Xh=a("li"),yle=a("strong"),kpo=o("perceiver"),Spo=o(" \u2014 "),gN=a("a"),Rpo=o("PerceiverFeatureExtractor"),Ppo=o(" (Perceiver model)"),Bpo=l(),zh=a("li"),xle=a("strong"),Ipo=o("poolformer"),Npo=o(" \u2014 "),hN=a("a"),qpo=o("PoolFormerFeatureExtractor"),jpo=o(" (PoolFormer model)"),Dpo=l(),Wh=a("li"),$le=a("strong"),Gpo=o("regnet"),Opo=o(" \u2014 "),pN=a("a"),Vpo=o("ConvNextFeatureExtractor"),Xpo=o(" (RegNet model)"),zpo=l(),Qh=a("li"),kle=a("strong"),Wpo=o("resnet"),Qpo=o(" \u2014 "),uN=a("a"),Hpo=o("ConvNextFeatureExtractor"),Upo=o(" (ResNet model)"),Jpo=l(),Hh=a("li"),Sle=a("strong"),Ypo=o("segformer"),Kpo=o(" \u2014 "),_N=a("a"),Zpo=o("SegformerFeatureExtractor"),euo=o(" (SegFormer model)"),ouo=l(),Uh=a("li"),Rle=a("strong"),ruo=o("speech_to_text"),tuo=o(" \u2014 "),bN=a("a"),auo=o("Speech2TextFeatureExtractor"),nuo=o(" (Speech2Text model)"),suo=l(),Jh=a("li"),Ple=a("strong"),luo=o("swin"),iuo=o(" \u2014 "),vN=a("a"),duo=o("ViTFeatureExtractor"),cuo=o(" (Swin Transformer model)"),fuo=l(),Yh=a("li"),Ble=a("strong"),muo=o("van"),guo=o(" \u2014 "),FN=a("a"),huo=o("ConvNextFeatureExtractor"),puo=o(" (VAN model)"),uuo=l(),Kh=a("li"),Ile=a("strong"),_uo=o("vilt"),buo=o(" \u2014 "),TN=a("a"),vuo=o("ViltFeatureExtractor"),Fuo=o(" (ViLT model)"),Tuo=l(),Zh=a("li"),Nle=a("strong"),Muo=o("vit"),Euo=o(" \u2014 "),MN=a("a"),Cuo=o("ViTFeatureExtractor"),wuo=o(" (ViT model)"),Auo=l(),ep=a("li"),qle=a("strong"),Luo=o("vit_mae"),yuo=o(" \u2014 "),EN=a("a"),xuo=o("ViTFeatureExtractor"),$uo=o(" (ViTMAE model)"),kuo=l(),op=a("li"),jle=a("strong"),Suo=o("wav2vec2"),Ruo=o(" \u2014 "),CN=a("a"),Puo=o("Wav2Vec2FeatureExtractor"),Buo=o(" (Wav2Vec2 model)"),Iuo=l(),rp=a("li"),Dle=a("strong"),Nuo=o("wav2vec2-conformer"),quo=o(" \u2014 "),wN=a("a"),juo=o("Wav2Vec2FeatureExtractor"),Duo=o(" (Wav2Vec2-Conformer model)"),Guo=l(),tp=a("li"),Gle=a("strong"),Ouo=o("yolos"),Vuo=o(" \u2014 "),AN=a("a"),Xuo=o("YolosFeatureExtractor"),zuo=o(" (YOLOS model)"),Wuo=l(),F(ap.$$.fragment),Quo=l(),F(np.$$.fragment),Huo=l(),sp=a("div"),F(DA.$$.fragment),Uuo=l(),Ole=a("p"),Juo=o("Register a new feature extractor for this class."),bGe=l(),Pi=a("h2"),lp=a("a"),Vle=a("span"),F(GA.$$.fragment),Yuo=l(),Xle=a("span"),Kuo=o("AutoProcessor"),vGe=l(),yo=a("div"),F(OA.$$.fragment),Zuo=l(),VA=a("p"),e_o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LN=a("a"),o_o=o("AutoProcessor.from_pretrained()"),r_o=o(" class method."),t_o=l(),XA=a("p"),a_o=o("This class cannot be instantiated directly using "),zle=a("code"),n_o=o("__init__()"),s_o=o(" (throws an error)."),l_o=l(),Ue=a("div"),F(zA.$$.fragment),i_o=l(),Wle=a("p"),d_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),c_o=l(),Bi=a("p"),f_o=o("The processor class to instantiate is selected based on the "),Qle=a("code"),m_o=o("model_type"),g_o=o(` property of the config object (either
passed as an argument or loaded from `),Hle=a("code"),h_o=o("pretrained_model_name_or_path"),p_o=o(" if possible):"),u_o=l(),he=a("ul"),ip=a("li"),Ule=a("strong"),__o=o("clip"),b_o=o(" \u2014 "),yN=a("a"),v_o=o("CLIPProcessor"),F_o=o(" (CLIP model)"),T_o=l(),dp=a("li"),Jle=a("strong"),M_o=o("flava"),E_o=o(" \u2014 "),Yle=a("code"),C_o=o("FLAVAProcessor"),w_o=o(" (FLAVA model)"),A_o=l(),cp=a("li"),Kle=a("strong"),L_o=o("layoutlmv2"),y_o=o(" \u2014 "),xN=a("a"),x_o=o("LayoutLMv2Processor"),$_o=o(" (LayoutLMv2 model)"),k_o=l(),fp=a("li"),Zle=a("strong"),S_o=o("layoutlmv3"),R_o=o(" \u2014 "),$N=a("a"),P_o=o("LayoutLMv3Processor"),B_o=o(" (LayoutLMv3 model)"),I_o=l(),mp=a("li"),eie=a("strong"),N_o=o("layoutxlm"),q_o=o(" \u2014 "),kN=a("a"),j_o=o("LayoutXLMProcessor"),D_o=o(" (LayoutXLM model)"),G_o=l(),gp=a("li"),oie=a("strong"),O_o=o("sew"),V_o=o(" \u2014 "),SN=a("a"),X_o=o("Wav2Vec2Processor"),z_o=o(" (SEW model)"),W_o=l(),hp=a("li"),rie=a("strong"),Q_o=o("sew-d"),H_o=o(" \u2014 "),RN=a("a"),U_o=o("Wav2Vec2Processor"),J_o=o(" (SEW-D model)"),Y_o=l(),pp=a("li"),tie=a("strong"),K_o=o("speech_to_text"),Z_o=o(" \u2014 "),PN=a("a"),e1o=o("Speech2TextProcessor"),o1o=o(" (Speech2Text model)"),r1o=l(),up=a("li"),aie=a("strong"),t1o=o("speech_to_text_2"),a1o=o(" \u2014 "),BN=a("a"),n1o=o("Speech2Text2Processor"),s1o=o(" (Speech2Text2 model)"),l1o=l(),_p=a("li"),nie=a("strong"),i1o=o("trocr"),d1o=o(" \u2014 "),IN=a("a"),c1o=o("TrOCRProcessor"),f1o=o(" (TrOCR model)"),m1o=l(),bp=a("li"),sie=a("strong"),g1o=o("unispeech"),h1o=o(" \u2014 "),NN=a("a"),p1o=o("Wav2Vec2Processor"),u1o=o(" (UniSpeech model)"),_1o=l(),vp=a("li"),lie=a("strong"),b1o=o("unispeech-sat"),v1o=o(" \u2014 "),qN=a("a"),F1o=o("Wav2Vec2Processor"),T1o=o(" (UniSpeechSat model)"),M1o=l(),Fp=a("li"),iie=a("strong"),E1o=o("vilt"),C1o=o(" \u2014 "),jN=a("a"),w1o=o("ViltProcessor"),A1o=o(" (ViLT model)"),L1o=l(),Tp=a("li"),die=a("strong"),y1o=o("vision-text-dual-encoder"),x1o=o(" \u2014 "),DN=a("a"),$1o=o("VisionTextDualEncoderProcessor"),k1o=o(" (VisionTextDualEncoder model)"),S1o=l(),Mp=a("li"),cie=a("strong"),R1o=o("wav2vec2"),P1o=o(" \u2014 "),GN=a("a"),B1o=o("Wav2Vec2Processor"),I1o=o(" (Wav2Vec2 model)"),N1o=l(),Ep=a("li"),fie=a("strong"),q1o=o("wav2vec2-conformer"),j1o=o(" \u2014 "),ON=a("a"),D1o=o("Wav2Vec2Processor"),G1o=o(" (Wav2Vec2-Conformer model)"),O1o=l(),Cp=a("li"),mie=a("strong"),V1o=o("wavlm"),X1o=o(" \u2014 "),VN=a("a"),z1o=o("Wav2Vec2Processor"),W1o=o(" (WavLM model)"),Q1o=l(),F(wp.$$.fragment),H1o=l(),F(Ap.$$.fragment),U1o=l(),Lp=a("div"),F(WA.$$.fragment),J1o=l(),gie=a("p"),Y1o=o("Register a new processor for this class."),FGe=l(),Ii=a("h2"),yp=a("a"),hie=a("span"),F(QA.$$.fragment),K1o=l(),pie=a("span"),Z1o=o("AutoModel"),TGe=l(),xo=a("div"),F(HA.$$.fragment),e2o=l(),Ni=a("p"),o2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XN=a("a"),r2o=o("from_pretrained()"),t2o=o(" class method or the "),zN=a("a"),a2o=o("from_config()"),n2o=o(` class
method.`),s2o=l(),UA=a("p"),l2o=o("This class cannot be instantiated directly using "),uie=a("code"),i2o=o("__init__()"),d2o=o(" (throws an error)."),c2o=l(),st=a("div"),F(JA.$$.fragment),f2o=l(),_ie=a("p"),m2o=o("Instantiates one of the base model classes of the library from a configuration."),g2o=l(),qi=a("p"),h2o=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),p2o=o("not"),u2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=a("a"),_2o=o("from_pretrained()"),b2o=o(" to load the model weights."),v2o=l(),F(xp.$$.fragment),F2o=l(),Je=a("div"),F(YA.$$.fragment),T2o=l(),vie=a("p"),M2o=o("Instantiate one of the base model classes of the library from a pretrained model."),E2o=l(),Ra=a("p"),C2o=o("The model class to instantiate is selected based on the "),Fie=a("code"),w2o=o("model_type"),A2o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),L2o=o("pretrained_model_name_or_path"),y2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),x2o=o("pretrained_model_name_or_path"),$2o=o(":"),k2o=l(),x=a("ul"),$p=a("li"),Eie=a("strong"),S2o=o("albert"),R2o=o(" \u2014 "),QN=a("a"),P2o=o("AlbertModel"),B2o=o(" (ALBERT model)"),I2o=l(),kp=a("li"),Cie=a("strong"),N2o=o("bart"),q2o=o(" \u2014 "),HN=a("a"),j2o=o("BartModel"),D2o=o(" (BART model)"),G2o=l(),Sp=a("li"),wie=a("strong"),O2o=o("beit"),V2o=o(" \u2014 "),UN=a("a"),X2o=o("BeitModel"),z2o=o(" (BEiT model)"),W2o=l(),Rp=a("li"),Aie=a("strong"),Q2o=o("bert"),H2o=o(" \u2014 "),JN=a("a"),U2o=o("BertModel"),J2o=o(" (BERT model)"),Y2o=l(),Pp=a("li"),Lie=a("strong"),K2o=o("bert-generation"),Z2o=o(" \u2014 "),YN=a("a"),ebo=o("BertGenerationEncoder"),obo=o(" (Bert Generation model)"),rbo=l(),Bp=a("li"),yie=a("strong"),tbo=o("big_bird"),abo=o(" \u2014 "),KN=a("a"),nbo=o("BigBirdModel"),sbo=o(" (BigBird model)"),lbo=l(),Ip=a("li"),xie=a("strong"),ibo=o("bigbird_pegasus"),dbo=o(" \u2014 "),ZN=a("a"),cbo=o("BigBirdPegasusModel"),fbo=o(" (BigBird-Pegasus model)"),mbo=l(),Np=a("li"),$ie=a("strong"),gbo=o("blenderbot"),hbo=o(" \u2014 "),eq=a("a"),pbo=o("BlenderbotModel"),ubo=o(" (Blenderbot model)"),_bo=l(),qp=a("li"),kie=a("strong"),bbo=o("blenderbot-small"),vbo=o(" \u2014 "),oq=a("a"),Fbo=o("BlenderbotSmallModel"),Tbo=o(" (BlenderbotSmall model)"),Mbo=l(),jp=a("li"),Sie=a("strong"),Ebo=o("bloom"),Cbo=o(" \u2014 "),rq=a("a"),wbo=o("BloomModel"),Abo=o(" (BLOOM model)"),Lbo=l(),Dp=a("li"),Rie=a("strong"),ybo=o("camembert"),xbo=o(" \u2014 "),tq=a("a"),$bo=o("CamembertModel"),kbo=o(" (CamemBERT model)"),Sbo=l(),Gp=a("li"),Pie=a("strong"),Rbo=o("canine"),Pbo=o(" \u2014 "),aq=a("a"),Bbo=o("CanineModel"),Ibo=o(" (CANINE model)"),Nbo=l(),Op=a("li"),Bie=a("strong"),qbo=o("clip"),jbo=o(" \u2014 "),nq=a("a"),Dbo=o("CLIPModel"),Gbo=o(" (CLIP model)"),Obo=l(),Vp=a("li"),Iie=a("strong"),Vbo=o("convbert"),Xbo=o(" \u2014 "),sq=a("a"),zbo=o("ConvBertModel"),Wbo=o(" (ConvBERT model)"),Qbo=l(),Xp=a("li"),Nie=a("strong"),Hbo=o("convnext"),Ubo=o(" \u2014 "),lq=a("a"),Jbo=o("ConvNextModel"),Ybo=o(" (ConvNeXT model)"),Kbo=l(),zp=a("li"),qie=a("strong"),Zbo=o("ctrl"),evo=o(" \u2014 "),iq=a("a"),ovo=o("CTRLModel"),rvo=o(" (CTRL model)"),tvo=l(),Wp=a("li"),jie=a("strong"),avo=o("cvt"),nvo=o(" \u2014 "),dq=a("a"),svo=o("CvtModel"),lvo=o(" (CvT model)"),ivo=l(),Qp=a("li"),Die=a("strong"),dvo=o("data2vec-audio"),cvo=o(" \u2014 "),cq=a("a"),fvo=o("Data2VecAudioModel"),mvo=o(" (Data2VecAudio model)"),gvo=l(),Hp=a("li"),Gie=a("strong"),hvo=o("data2vec-text"),pvo=o(" \u2014 "),fq=a("a"),uvo=o("Data2VecTextModel"),_vo=o(" (Data2VecText model)"),bvo=l(),Up=a("li"),Oie=a("strong"),vvo=o("data2vec-vision"),Fvo=o(" \u2014 "),mq=a("a"),Tvo=o("Data2VecVisionModel"),Mvo=o(" (Data2VecVision model)"),Evo=l(),Jp=a("li"),Vie=a("strong"),Cvo=o("deberta"),wvo=o(" \u2014 "),gq=a("a"),Avo=o("DebertaModel"),Lvo=o(" (DeBERTa model)"),yvo=l(),Yp=a("li"),Xie=a("strong"),xvo=o("deberta-v2"),$vo=o(" \u2014 "),hq=a("a"),kvo=o("DebertaV2Model"),Svo=o(" (DeBERTa-v2 model)"),Rvo=l(),Kp=a("li"),zie=a("strong"),Pvo=o("decision_transformer"),Bvo=o(" \u2014 "),pq=a("a"),Ivo=o("DecisionTransformerModel"),Nvo=o(" (Decision Transformer model)"),qvo=l(),Zp=a("li"),Wie=a("strong"),jvo=o("deit"),Dvo=o(" \u2014 "),uq=a("a"),Gvo=o("DeiTModel"),Ovo=o(" (DeiT model)"),Vvo=l(),eu=a("li"),Qie=a("strong"),Xvo=o("detr"),zvo=o(" \u2014 "),_q=a("a"),Wvo=o("DetrModel"),Qvo=o(" (DETR model)"),Hvo=l(),ou=a("li"),Hie=a("strong"),Uvo=o("distilbert"),Jvo=o(" \u2014 "),bq=a("a"),Yvo=o("DistilBertModel"),Kvo=o(" (DistilBERT model)"),Zvo=l(),ru=a("li"),Uie=a("strong"),e0o=o("dpr"),o0o=o(" \u2014 "),vq=a("a"),r0o=o("DPRQuestionEncoder"),t0o=o(" (DPR model)"),a0o=l(),tu=a("li"),Jie=a("strong"),n0o=o("dpt"),s0o=o(" \u2014 "),Fq=a("a"),l0o=o("DPTModel"),i0o=o(" (DPT model)"),d0o=l(),au=a("li"),Yie=a("strong"),c0o=o("electra"),f0o=o(" \u2014 "),Tq=a("a"),m0o=o("ElectraModel"),g0o=o(" (ELECTRA model)"),h0o=l(),nu=a("li"),Kie=a("strong"),p0o=o("flaubert"),u0o=o(" \u2014 "),Mq=a("a"),_0o=o("FlaubertModel"),b0o=o(" (FlauBERT model)"),v0o=l(),su=a("li"),Zie=a("strong"),F0o=o("flava"),T0o=o(" \u2014 "),Eq=a("a"),M0o=o("FlavaModel"),E0o=o(" (FLAVA model)"),C0o=l(),lu=a("li"),ede=a("strong"),w0o=o("fnet"),A0o=o(" \u2014 "),Cq=a("a"),L0o=o("FNetModel"),y0o=o(" (FNet model)"),x0o=l(),iu=a("li"),ode=a("strong"),$0o=o("fsmt"),k0o=o(" \u2014 "),wq=a("a"),S0o=o("FSMTModel"),R0o=o(" (FairSeq Machine-Translation model)"),P0o=l(),Gs=a("li"),rde=a("strong"),B0o=o("funnel"),I0o=o(" \u2014 "),Aq=a("a"),N0o=o("FunnelModel"),q0o=o(" or "),Lq=a("a"),j0o=o("FunnelBaseModel"),D0o=o(" (Funnel Transformer model)"),G0o=l(),du=a("li"),tde=a("strong"),O0o=o("glpn"),V0o=o(" \u2014 "),yq=a("a"),X0o=o("GLPNModel"),z0o=o(" (GLPN model)"),W0o=l(),cu=a("li"),ade=a("strong"),Q0o=o("gpt2"),H0o=o(" \u2014 "),xq=a("a"),U0o=o("GPT2Model"),J0o=o(" (OpenAI GPT-2 model)"),Y0o=l(),fu=a("li"),nde=a("strong"),K0o=o("gpt_neo"),Z0o=o(" \u2014 "),$q=a("a"),eFo=o("GPTNeoModel"),oFo=o(" (GPT Neo model)"),rFo=l(),mu=a("li"),sde=a("strong"),tFo=o("gpt_neox"),aFo=o(" \u2014 "),kq=a("a"),nFo=o("GPTNeoXModel"),sFo=o(" (GPT NeoX model)"),lFo=l(),gu=a("li"),lde=a("strong"),iFo=o("gptj"),dFo=o(" \u2014 "),Sq=a("a"),cFo=o("GPTJModel"),fFo=o(" (GPT-J model)"),mFo=l(),hu=a("li"),ide=a("strong"),gFo=o("hubert"),hFo=o(" \u2014 "),Rq=a("a"),pFo=o("HubertModel"),uFo=o(" (Hubert model)"),_Fo=l(),pu=a("li"),dde=a("strong"),bFo=o("ibert"),vFo=o(" \u2014 "),Pq=a("a"),FFo=o("IBertModel"),TFo=o(" (I-BERT model)"),MFo=l(),uu=a("li"),cde=a("strong"),EFo=o("imagegpt"),CFo=o(" \u2014 "),Bq=a("a"),wFo=o("ImageGPTModel"),AFo=o(" (ImageGPT model)"),LFo=l(),_u=a("li"),fde=a("strong"),yFo=o("layoutlm"),xFo=o(" \u2014 "),Iq=a("a"),$Fo=o("LayoutLMModel"),kFo=o(" (LayoutLM model)"),SFo=l(),bu=a("li"),mde=a("strong"),RFo=o("layoutlmv2"),PFo=o(" \u2014 "),Nq=a("a"),BFo=o("LayoutLMv2Model"),IFo=o(" (LayoutLMv2 model)"),NFo=l(),vu=a("li"),gde=a("strong"),qFo=o("layoutlmv3"),jFo=o(" \u2014 "),qq=a("a"),DFo=o("LayoutLMv3Model"),GFo=o(" (LayoutLMv3 model)"),OFo=l(),Fu=a("li"),hde=a("strong"),VFo=o("led"),XFo=o(" \u2014 "),jq=a("a"),zFo=o("LEDModel"),WFo=o(" (LED model)"),QFo=l(),Tu=a("li"),pde=a("strong"),HFo=o("levit"),UFo=o(" \u2014 "),Dq=a("a"),JFo=o("LevitModel"),YFo=o(" (LeViT model)"),KFo=l(),Mu=a("li"),ude=a("strong"),ZFo=o("longformer"),e6o=o(" \u2014 "),Gq=a("a"),o6o=o("LongformerModel"),r6o=o(" (Longformer model)"),t6o=l(),Eu=a("li"),_de=a("strong"),a6o=o("longt5"),n6o=o(" \u2014 "),Oq=a("a"),s6o=o("LongT5Model"),l6o=o(" (LongT5 model)"),i6o=l(),Cu=a("li"),bde=a("strong"),d6o=o("luke"),c6o=o(" \u2014 "),Vq=a("a"),f6o=o("LukeModel"),m6o=o(" (LUKE model)"),g6o=l(),wu=a("li"),vde=a("strong"),h6o=o("lxmert"),p6o=o(" \u2014 "),Xq=a("a"),u6o=o("LxmertModel"),_6o=o(" (LXMERT model)"),b6o=l(),Au=a("li"),Fde=a("strong"),v6o=o("m2m_100"),F6o=o(" \u2014 "),zq=a("a"),T6o=o("M2M100Model"),M6o=o(" (M2M100 model)"),E6o=l(),Lu=a("li"),Tde=a("strong"),C6o=o("marian"),w6o=o(" \u2014 "),Wq=a("a"),A6o=o("MarianModel"),L6o=o(" (Marian model)"),y6o=l(),yu=a("li"),Mde=a("strong"),x6o=o("maskformer"),$6o=o(" \u2014 "),Qq=a("a"),k6o=o("MaskFormerModel"),S6o=o(" (MaskFormer model)"),R6o=l(),xu=a("li"),Ede=a("strong"),P6o=o("mbart"),B6o=o(" \u2014 "),Hq=a("a"),I6o=o("MBartModel"),N6o=o(" (mBART model)"),q6o=l(),$u=a("li"),Cde=a("strong"),j6o=o("mctct"),D6o=o(" \u2014 "),Uq=a("a"),G6o=o("MCTCTModel"),O6o=o(" (M-CTC-T model)"),V6o=l(),ku=a("li"),wde=a("strong"),X6o=o("megatron-bert"),z6o=o(" \u2014 "),Jq=a("a"),W6o=o("MegatronBertModel"),Q6o=o(" (Megatron-BERT model)"),H6o=l(),Su=a("li"),Ade=a("strong"),U6o=o("mobilebert"),J6o=o(" \u2014 "),Yq=a("a"),Y6o=o("MobileBertModel"),K6o=o(" (MobileBERT model)"),Z6o=l(),Ru=a("li"),Lde=a("strong"),eTo=o("mpnet"),oTo=o(" \u2014 "),Kq=a("a"),rTo=o("MPNetModel"),tTo=o(" (MPNet model)"),aTo=l(),Pu=a("li"),yde=a("strong"),nTo=o("mt5"),sTo=o(" \u2014 "),Zq=a("a"),lTo=o("MT5Model"),iTo=o(" (MT5 model)"),dTo=l(),Bu=a("li"),xde=a("strong"),cTo=o("nystromformer"),fTo=o(" \u2014 "),ej=a("a"),mTo=o("NystromformerModel"),gTo=o(" (Nystr\xF6mformer model)"),hTo=l(),Iu=a("li"),$de=a("strong"),pTo=o("openai-gpt"),uTo=o(" \u2014 "),oj=a("a"),_To=o("OpenAIGPTModel"),bTo=o(" (OpenAI GPT model)"),vTo=l(),Nu=a("li"),kde=a("strong"),FTo=o("opt"),TTo=o(" \u2014 "),rj=a("a"),MTo=o("OPTModel"),ETo=o(" (OPT model)"),CTo=l(),qu=a("li"),Sde=a("strong"),wTo=o("pegasus"),ATo=o(" \u2014 "),tj=a("a"),LTo=o("PegasusModel"),yTo=o(" (Pegasus model)"),xTo=l(),ju=a("li"),Rde=a("strong"),$To=o("perceiver"),kTo=o(" \u2014 "),aj=a("a"),STo=o("PerceiverModel"),RTo=o(" (Perceiver model)"),PTo=l(),Du=a("li"),Pde=a("strong"),BTo=o("plbart"),ITo=o(" \u2014 "),nj=a("a"),NTo=o("PLBartModel"),qTo=o(" (PLBart model)"),jTo=l(),Gu=a("li"),Bde=a("strong"),DTo=o("poolformer"),GTo=o(" \u2014 "),sj=a("a"),OTo=o("PoolFormerModel"),VTo=o(" (PoolFormer model)"),XTo=l(),Ou=a("li"),Ide=a("strong"),zTo=o("prophetnet"),WTo=o(" \u2014 "),lj=a("a"),QTo=o("ProphetNetModel"),HTo=o(" (ProphetNet model)"),UTo=l(),Vu=a("li"),Nde=a("strong"),JTo=o("qdqbert"),YTo=o(" \u2014 "),ij=a("a"),KTo=o("QDQBertModel"),ZTo=o(" (QDQBert model)"),e7o=l(),Xu=a("li"),qde=a("strong"),o7o=o("reformer"),r7o=o(" \u2014 "),dj=a("a"),t7o=o("ReformerModel"),a7o=o(" (Reformer model)"),n7o=l(),zu=a("li"),jde=a("strong"),s7o=o("regnet"),l7o=o(" \u2014 "),cj=a("a"),i7o=o("RegNetModel"),d7o=o(" (RegNet model)"),c7o=l(),Wu=a("li"),Dde=a("strong"),f7o=o("rembert"),m7o=o(" \u2014 "),fj=a("a"),g7o=o("RemBertModel"),h7o=o(" (RemBERT model)"),p7o=l(),Qu=a("li"),Gde=a("strong"),u7o=o("resnet"),_7o=o(" \u2014 "),mj=a("a"),b7o=o("ResNetModel"),v7o=o(" (ResNet model)"),F7o=l(),Hu=a("li"),Ode=a("strong"),T7o=o("retribert"),M7o=o(" \u2014 "),gj=a("a"),E7o=o("RetriBertModel"),C7o=o(" (RetriBERT model)"),w7o=l(),Uu=a("li"),Vde=a("strong"),A7o=o("roberta"),L7o=o(" \u2014 "),hj=a("a"),y7o=o("RobertaModel"),x7o=o(" (RoBERTa model)"),$7o=l(),Ju=a("li"),Xde=a("strong"),k7o=o("roformer"),S7o=o(" \u2014 "),pj=a("a"),R7o=o("RoFormerModel"),P7o=o(" (RoFormer model)"),B7o=l(),Yu=a("li"),zde=a("strong"),I7o=o("segformer"),N7o=o(" \u2014 "),uj=a("a"),q7o=o("SegformerModel"),j7o=o(" (SegFormer model)"),D7o=l(),Ku=a("li"),Wde=a("strong"),G7o=o("sew"),O7o=o(" \u2014 "),_j=a("a"),V7o=o("SEWModel"),X7o=o(" (SEW model)"),z7o=l(),Zu=a("li"),Qde=a("strong"),W7o=o("sew-d"),Q7o=o(" \u2014 "),bj=a("a"),H7o=o("SEWDModel"),U7o=o(" (SEW-D model)"),J7o=l(),e_=a("li"),Hde=a("strong"),Y7o=o("speech_to_text"),K7o=o(" \u2014 "),vj=a("a"),Z7o=o("Speech2TextModel"),e8o=o(" (Speech2Text model)"),o8o=l(),o_=a("li"),Ude=a("strong"),r8o=o("splinter"),t8o=o(" \u2014 "),Fj=a("a"),a8o=o("SplinterModel"),n8o=o(" (Splinter model)"),s8o=l(),r_=a("li"),Jde=a("strong"),l8o=o("squeezebert"),i8o=o(" \u2014 "),Tj=a("a"),d8o=o("SqueezeBertModel"),c8o=o(" (SqueezeBERT model)"),f8o=l(),t_=a("li"),Yde=a("strong"),m8o=o("swin"),g8o=o(" \u2014 "),Mj=a("a"),h8o=o("SwinModel"),p8o=o(" (Swin Transformer model)"),u8o=l(),a_=a("li"),Kde=a("strong"),_8o=o("t5"),b8o=o(" \u2014 "),Ej=a("a"),v8o=o("T5Model"),F8o=o(" (T5 model)"),T8o=l(),n_=a("li"),Zde=a("strong"),M8o=o("tapas"),E8o=o(" \u2014 "),Cj=a("a"),C8o=o("TapasModel"),w8o=o(" (TAPAS model)"),A8o=l(),s_=a("li"),ece=a("strong"),L8o=o("trajectory_transformer"),y8o=o(" \u2014 "),wj=a("a"),x8o=o("TrajectoryTransformerModel"),$8o=o(" (Trajectory Transformer model)"),k8o=l(),l_=a("li"),oce=a("strong"),S8o=o("transfo-xl"),R8o=o(" \u2014 "),Aj=a("a"),P8o=o("TransfoXLModel"),B8o=o(" (Transformer-XL model)"),I8o=l(),i_=a("li"),rce=a("strong"),N8o=o("unispeech"),q8o=o(" \u2014 "),Lj=a("a"),j8o=o("UniSpeechModel"),D8o=o(" (UniSpeech model)"),G8o=l(),d_=a("li"),tce=a("strong"),O8o=o("unispeech-sat"),V8o=o(" \u2014 "),yj=a("a"),X8o=o("UniSpeechSatModel"),z8o=o(" (UniSpeechSat model)"),W8o=l(),c_=a("li"),ace=a("strong"),Q8o=o("van"),H8o=o(" \u2014 "),xj=a("a"),U8o=o("VanModel"),J8o=o(" (VAN model)"),Y8o=l(),f_=a("li"),nce=a("strong"),K8o=o("vilt"),Z8o=o(" \u2014 "),$j=a("a"),eMo=o("ViltModel"),oMo=o(" (ViLT model)"),rMo=l(),m_=a("li"),sce=a("strong"),tMo=o("vision-text-dual-encoder"),aMo=o(" \u2014 "),kj=a("a"),nMo=o("VisionTextDualEncoderModel"),sMo=o(" (VisionTextDualEncoder model)"),lMo=l(),g_=a("li"),lce=a("strong"),iMo=o("visual_bert"),dMo=o(" \u2014 "),Sj=a("a"),cMo=o("VisualBertModel"),fMo=o(" (VisualBERT model)"),mMo=l(),h_=a("li"),ice=a("strong"),gMo=o("vit"),hMo=o(" \u2014 "),Rj=a("a"),pMo=o("ViTModel"),uMo=o(" (ViT model)"),_Mo=l(),p_=a("li"),dce=a("strong"),bMo=o("vit_mae"),vMo=o(" \u2014 "),Pj=a("a"),FMo=o("ViTMAEModel"),TMo=o(" (ViTMAE model)"),MMo=l(),u_=a("li"),cce=a("strong"),EMo=o("wav2vec2"),CMo=o(" \u2014 "),Bj=a("a"),wMo=o("Wav2Vec2Model"),AMo=o(" (Wav2Vec2 model)"),LMo=l(),__=a("li"),fce=a("strong"),yMo=o("wav2vec2-conformer"),xMo=o(" \u2014 "),Ij=a("a"),$Mo=o("Wav2Vec2ConformerModel"),kMo=o(" (Wav2Vec2-Conformer model)"),SMo=l(),b_=a("li"),mce=a("strong"),RMo=o("wavlm"),PMo=o(" \u2014 "),Nj=a("a"),BMo=o("WavLMModel"),IMo=o(" (WavLM model)"),NMo=l(),v_=a("li"),gce=a("strong"),qMo=o("xglm"),jMo=o(" \u2014 "),qj=a("a"),DMo=o("XGLMModel"),GMo=o(" (XGLM model)"),OMo=l(),F_=a("li"),hce=a("strong"),VMo=o("xlm"),XMo=o(" \u2014 "),jj=a("a"),zMo=o("XLMModel"),WMo=o(" (XLM model)"),QMo=l(),T_=a("li"),pce=a("strong"),HMo=o("xlm-prophetnet"),UMo=o(" \u2014 "),Dj=a("a"),JMo=o("XLMProphetNetModel"),YMo=o(" (XLM-ProphetNet model)"),KMo=l(),M_=a("li"),uce=a("strong"),ZMo=o("xlm-roberta"),e4o=o(" \u2014 "),Gj=a("a"),o4o=o("XLMRobertaModel"),r4o=o(" (XLM-RoBERTa model)"),t4o=l(),E_=a("li"),_ce=a("strong"),a4o=o("xlm-roberta-xl"),n4o=o(" \u2014 "),Oj=a("a"),s4o=o("XLMRobertaXLModel"),l4o=o(" (XLM-RoBERTa-XL model)"),i4o=l(),C_=a("li"),bce=a("strong"),d4o=o("xlnet"),c4o=o(" \u2014 "),Vj=a("a"),f4o=o("XLNetModel"),m4o=o(" (XLNet model)"),g4o=l(),w_=a("li"),vce=a("strong"),h4o=o("yolos"),p4o=o(" \u2014 "),Xj=a("a"),u4o=o("YolosModel"),_4o=o(" (YOLOS model)"),b4o=l(),A_=a("li"),Fce=a("strong"),v4o=o("yoso"),F4o=o(" \u2014 "),zj=a("a"),T4o=o("YosoModel"),M4o=o(" (YOSO model)"),E4o=l(),L_=a("p"),C4o=o("The model is set in evaluation mode by default using "),Tce=a("code"),w4o=o("model.eval()"),A4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),L4o=o("model.train()"),y4o=l(),F(y_.$$.fragment),MGe=l(),ji=a("h2"),x_=a("a"),Ece=a("span"),F(KA.$$.fragment),x4o=l(),Cce=a("span"),$4o=o("AutoModelForPreTraining"),EGe=l(),$o=a("div"),F(ZA.$$.fragment),k4o=l(),Di=a("p"),S4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wj=a("a"),R4o=o("from_pretrained()"),P4o=o(" class method or the "),Qj=a("a"),B4o=o("from_config()"),I4o=o(` class
method.`),N4o=l(),eL=a("p"),q4o=o("This class cannot be instantiated directly using "),wce=a("code"),j4o=o("__init__()"),D4o=o(" (throws an error)."),G4o=l(),lt=a("div"),F(oL.$$.fragment),O4o=l(),Ace=a("p"),V4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X4o=l(),Gi=a("p"),z4o=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),W4o=o("not"),Q4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hj=a("a"),H4o=o("from_pretrained()"),U4o=o(" to load the model weights."),J4o=l(),F($_.$$.fragment),Y4o=l(),Ye=a("div"),F(rL.$$.fragment),K4o=l(),yce=a("p"),Z4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eEo=l(),Pa=a("p"),oEo=o("The model class to instantiate is selected based on the "),xce=a("code"),rEo=o("model_type"),tEo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),aEo=o("pretrained_model_name_or_path"),nEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),sEo=o("pretrained_model_name_or_path"),lEo=o(":"),iEo=l(),G=a("ul"),k_=a("li"),Sce=a("strong"),dEo=o("albert"),cEo=o(" \u2014 "),Uj=a("a"),fEo=o("AlbertForPreTraining"),mEo=o(" (ALBERT model)"),gEo=l(),S_=a("li"),Rce=a("strong"),hEo=o("bart"),pEo=o(" \u2014 "),Jj=a("a"),uEo=o("BartForConditionalGeneration"),_Eo=o(" (BART model)"),bEo=l(),R_=a("li"),Pce=a("strong"),vEo=o("bert"),FEo=o(" \u2014 "),Yj=a("a"),TEo=o("BertForPreTraining"),MEo=o(" (BERT model)"),EEo=l(),P_=a("li"),Bce=a("strong"),CEo=o("big_bird"),wEo=o(" \u2014 "),Kj=a("a"),AEo=o("BigBirdForPreTraining"),LEo=o(" (BigBird model)"),yEo=l(),B_=a("li"),Ice=a("strong"),xEo=o("bloom"),$Eo=o(" \u2014 "),Zj=a("a"),kEo=o("BloomForCausalLM"),SEo=o(" (BLOOM model)"),REo=l(),I_=a("li"),Nce=a("strong"),PEo=o("camembert"),BEo=o(" \u2014 "),eD=a("a"),IEo=o("CamembertForMaskedLM"),NEo=o(" (CamemBERT model)"),qEo=l(),N_=a("li"),qce=a("strong"),jEo=o("ctrl"),DEo=o(" \u2014 "),oD=a("a"),GEo=o("CTRLLMHeadModel"),OEo=o(" (CTRL model)"),VEo=l(),q_=a("li"),jce=a("strong"),XEo=o("data2vec-text"),zEo=o(" \u2014 "),rD=a("a"),WEo=o("Data2VecTextForMaskedLM"),QEo=o(" (Data2VecText model)"),HEo=l(),j_=a("li"),Dce=a("strong"),UEo=o("deberta"),JEo=o(" \u2014 "),tD=a("a"),YEo=o("DebertaForMaskedLM"),KEo=o(" (DeBERTa model)"),ZEo=l(),D_=a("li"),Gce=a("strong"),eCo=o("deberta-v2"),oCo=o(" \u2014 "),aD=a("a"),rCo=o("DebertaV2ForMaskedLM"),tCo=o(" (DeBERTa-v2 model)"),aCo=l(),G_=a("li"),Oce=a("strong"),nCo=o("distilbert"),sCo=o(" \u2014 "),nD=a("a"),lCo=o("DistilBertForMaskedLM"),iCo=o(" (DistilBERT model)"),dCo=l(),O_=a("li"),Vce=a("strong"),cCo=o("electra"),fCo=o(" \u2014 "),sD=a("a"),mCo=o("ElectraForPreTraining"),gCo=o(" (ELECTRA model)"),hCo=l(),V_=a("li"),Xce=a("strong"),pCo=o("flaubert"),uCo=o(" \u2014 "),lD=a("a"),_Co=o("FlaubertWithLMHeadModel"),bCo=o(" (FlauBERT model)"),vCo=l(),X_=a("li"),zce=a("strong"),FCo=o("flava"),TCo=o(" \u2014 "),iD=a("a"),MCo=o("FlavaForPreTraining"),ECo=o(" (FLAVA model)"),CCo=l(),z_=a("li"),Wce=a("strong"),wCo=o("fnet"),ACo=o(" \u2014 "),dD=a("a"),LCo=o("FNetForPreTraining"),yCo=o(" (FNet model)"),xCo=l(),W_=a("li"),Qce=a("strong"),$Co=o("fsmt"),kCo=o(" \u2014 "),cD=a("a"),SCo=o("FSMTForConditionalGeneration"),RCo=o(" (FairSeq Machine-Translation model)"),PCo=l(),Q_=a("li"),Hce=a("strong"),BCo=o("funnel"),ICo=o(" \u2014 "),fD=a("a"),NCo=o("FunnelForPreTraining"),qCo=o(" (Funnel Transformer model)"),jCo=l(),H_=a("li"),Uce=a("strong"),DCo=o("gpt2"),GCo=o(" \u2014 "),mD=a("a"),OCo=o("GPT2LMHeadModel"),VCo=o(" (OpenAI GPT-2 model)"),XCo=l(),U_=a("li"),Jce=a("strong"),zCo=o("ibert"),WCo=o(" \u2014 "),gD=a("a"),QCo=o("IBertForMaskedLM"),HCo=o(" (I-BERT model)"),UCo=l(),J_=a("li"),Yce=a("strong"),JCo=o("layoutlm"),YCo=o(" \u2014 "),hD=a("a"),KCo=o("LayoutLMForMaskedLM"),ZCo=o(" (LayoutLM model)"),e5o=l(),Y_=a("li"),Kce=a("strong"),o5o=o("longformer"),r5o=o(" \u2014 "),pD=a("a"),t5o=o("LongformerForMaskedLM"),a5o=o(" (Longformer model)"),n5o=l(),K_=a("li"),Zce=a("strong"),s5o=o("lxmert"),l5o=o(" \u2014 "),uD=a("a"),i5o=o("LxmertForPreTraining"),d5o=o(" (LXMERT model)"),c5o=l(),Z_=a("li"),efe=a("strong"),f5o=o("megatron-bert"),m5o=o(" \u2014 "),_D=a("a"),g5o=o("MegatronBertForPreTraining"),h5o=o(" (Megatron-BERT model)"),p5o=l(),e1=a("li"),ofe=a("strong"),u5o=o("mobilebert"),_5o=o(" \u2014 "),bD=a("a"),b5o=o("MobileBertForPreTraining"),v5o=o(" (MobileBERT model)"),F5o=l(),o1=a("li"),rfe=a("strong"),T5o=o("mpnet"),M5o=o(" \u2014 "),vD=a("a"),E5o=o("MPNetForMaskedLM"),C5o=o(" (MPNet model)"),w5o=l(),r1=a("li"),tfe=a("strong"),A5o=o("openai-gpt"),L5o=o(" \u2014 "),FD=a("a"),y5o=o("OpenAIGPTLMHeadModel"),x5o=o(" (OpenAI GPT model)"),$5o=l(),t1=a("li"),afe=a("strong"),k5o=o("retribert"),S5o=o(" \u2014 "),TD=a("a"),R5o=o("RetriBertModel"),P5o=o(" (RetriBERT model)"),B5o=l(),a1=a("li"),nfe=a("strong"),I5o=o("roberta"),N5o=o(" \u2014 "),MD=a("a"),q5o=o("RobertaForMaskedLM"),j5o=o(" (RoBERTa model)"),D5o=l(),n1=a("li"),sfe=a("strong"),G5o=o("splinter"),O5o=o(" \u2014 "),ED=a("a"),V5o=o("SplinterForPreTraining"),X5o=o(" (Splinter model)"),z5o=l(),s1=a("li"),lfe=a("strong"),W5o=o("squeezebert"),Q5o=o(" \u2014 "),CD=a("a"),H5o=o("SqueezeBertForMaskedLM"),U5o=o(" (SqueezeBERT model)"),J5o=l(),l1=a("li"),ife=a("strong"),Y5o=o("t5"),K5o=o(" \u2014 "),wD=a("a"),Z5o=o("T5ForConditionalGeneration"),e3o=o(" (T5 model)"),o3o=l(),i1=a("li"),dfe=a("strong"),r3o=o("tapas"),t3o=o(" \u2014 "),AD=a("a"),a3o=o("TapasForMaskedLM"),n3o=o(" (TAPAS model)"),s3o=l(),d1=a("li"),cfe=a("strong"),l3o=o("transfo-xl"),i3o=o(" \u2014 "),LD=a("a"),d3o=o("TransfoXLLMHeadModel"),c3o=o(" (Transformer-XL model)"),f3o=l(),c1=a("li"),ffe=a("strong"),m3o=o("unispeech"),g3o=o(" \u2014 "),yD=a("a"),h3o=o("UniSpeechForPreTraining"),p3o=o(" (UniSpeech model)"),u3o=l(),f1=a("li"),mfe=a("strong"),_3o=o("unispeech-sat"),b3o=o(" \u2014 "),xD=a("a"),v3o=o("UniSpeechSatForPreTraining"),F3o=o(" (UniSpeechSat model)"),T3o=l(),m1=a("li"),gfe=a("strong"),M3o=o("visual_bert"),E3o=o(" \u2014 "),$D=a("a"),C3o=o("VisualBertForPreTraining"),w3o=o(" (VisualBERT model)"),A3o=l(),g1=a("li"),hfe=a("strong"),L3o=o("vit_mae"),y3o=o(" \u2014 "),kD=a("a"),x3o=o("ViTMAEForPreTraining"),$3o=o(" (ViTMAE model)"),k3o=l(),h1=a("li"),pfe=a("strong"),S3o=o("wav2vec2"),R3o=o(" \u2014 "),SD=a("a"),P3o=o("Wav2Vec2ForPreTraining"),B3o=o(" (Wav2Vec2 model)"),I3o=l(),p1=a("li"),ufe=a("strong"),N3o=o("wav2vec2-conformer"),q3o=o(" \u2014 "),RD=a("a"),j3o=o("Wav2Vec2ConformerForPreTraining"),D3o=o(" (Wav2Vec2-Conformer model)"),G3o=l(),u1=a("li"),_fe=a("strong"),O3o=o("xlm"),V3o=o(" \u2014 "),PD=a("a"),X3o=o("XLMWithLMHeadModel"),z3o=o(" (XLM model)"),W3o=l(),_1=a("li"),bfe=a("strong"),Q3o=o("xlm-roberta"),H3o=o(" \u2014 "),BD=a("a"),U3o=o("XLMRobertaForMaskedLM"),J3o=o(" (XLM-RoBERTa model)"),Y3o=l(),b1=a("li"),vfe=a("strong"),K3o=o("xlm-roberta-xl"),Z3o=o(" \u2014 "),ID=a("a"),ewo=o("XLMRobertaXLForMaskedLM"),owo=o(" (XLM-RoBERTa-XL model)"),rwo=l(),v1=a("li"),Ffe=a("strong"),two=o("xlnet"),awo=o(" \u2014 "),ND=a("a"),nwo=o("XLNetLMHeadModel"),swo=o(" (XLNet model)"),lwo=l(),F1=a("p"),iwo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),dwo=o("model.eval()"),cwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),fwo=o("model.train()"),mwo=l(),F(T1.$$.fragment),CGe=l(),Oi=a("h2"),M1=a("a"),Efe=a("span"),F(tL.$$.fragment),gwo=l(),Cfe=a("span"),hwo=o("AutoModelForCausalLM"),wGe=l(),ko=a("div"),F(aL.$$.fragment),pwo=l(),Vi=a("p"),uwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qD=a("a"),_wo=o("from_pretrained()"),bwo=o(" class method or the "),jD=a("a"),vwo=o("from_config()"),Fwo=o(` class
method.`),Two=l(),nL=a("p"),Mwo=o("This class cannot be instantiated directly using "),wfe=a("code"),Ewo=o("__init__()"),Cwo=o(" (throws an error)."),wwo=l(),it=a("div"),F(sL.$$.fragment),Awo=l(),Afe=a("p"),Lwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ywo=l(),Xi=a("p"),xwo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),$wo=o("not"),kwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),Swo=o("from_pretrained()"),Rwo=o(" to load the model weights."),Pwo=l(),F(E1.$$.fragment),Bwo=l(),Ke=a("div"),F(lL.$$.fragment),Iwo=l(),yfe=a("p"),Nwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qwo=l(),Ba=a("p"),jwo=o("The model class to instantiate is selected based on the "),xfe=a("code"),Dwo=o("model_type"),Gwo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),Owo=o("pretrained_model_name_or_path"),Vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),Xwo=o("pretrained_model_name_or_path"),zwo=o(":"),Wwo=l(),z=a("ul"),C1=a("li"),Sfe=a("strong"),Qwo=o("bart"),Hwo=o(" \u2014 "),GD=a("a"),Uwo=o("BartForCausalLM"),Jwo=o(" (BART model)"),Ywo=l(),w1=a("li"),Rfe=a("strong"),Kwo=o("bert"),Zwo=o(" \u2014 "),OD=a("a"),eAo=o("BertLMHeadModel"),oAo=o(" (BERT model)"),rAo=l(),A1=a("li"),Pfe=a("strong"),tAo=o("bert-generation"),aAo=o(" \u2014 "),VD=a("a"),nAo=o("BertGenerationDecoder"),sAo=o(" (Bert Generation model)"),lAo=l(),L1=a("li"),Bfe=a("strong"),iAo=o("big_bird"),dAo=o(" \u2014 "),XD=a("a"),cAo=o("BigBirdForCausalLM"),fAo=o(" (BigBird model)"),mAo=l(),y1=a("li"),Ife=a("strong"),gAo=o("bigbird_pegasus"),hAo=o(" \u2014 "),zD=a("a"),pAo=o("BigBirdPegasusForCausalLM"),uAo=o(" (BigBird-Pegasus model)"),_Ao=l(),x1=a("li"),Nfe=a("strong"),bAo=o("blenderbot"),vAo=o(" \u2014 "),WD=a("a"),FAo=o("BlenderbotForCausalLM"),TAo=o(" (Blenderbot model)"),MAo=l(),$1=a("li"),qfe=a("strong"),EAo=o("blenderbot-small"),CAo=o(" \u2014 "),QD=a("a"),wAo=o("BlenderbotSmallForCausalLM"),AAo=o(" (BlenderbotSmall model)"),LAo=l(),k1=a("li"),jfe=a("strong"),yAo=o("bloom"),xAo=o(" \u2014 "),HD=a("a"),$Ao=o("BloomForCausalLM"),kAo=o(" (BLOOM model)"),SAo=l(),S1=a("li"),Dfe=a("strong"),RAo=o("camembert"),PAo=o(" \u2014 "),UD=a("a"),BAo=o("CamembertForCausalLM"),IAo=o(" (CamemBERT model)"),NAo=l(),R1=a("li"),Gfe=a("strong"),qAo=o("ctrl"),jAo=o(" \u2014 "),JD=a("a"),DAo=o("CTRLLMHeadModel"),GAo=o(" (CTRL model)"),OAo=l(),P1=a("li"),Ofe=a("strong"),VAo=o("data2vec-text"),XAo=o(" \u2014 "),YD=a("a"),zAo=o("Data2VecTextForCausalLM"),WAo=o(" (Data2VecText model)"),QAo=l(),B1=a("li"),Vfe=a("strong"),HAo=o("electra"),UAo=o(" \u2014 "),KD=a("a"),JAo=o("ElectraForCausalLM"),YAo=o(" (ELECTRA model)"),KAo=l(),I1=a("li"),Xfe=a("strong"),ZAo=o("gpt2"),eLo=o(" \u2014 "),ZD=a("a"),oLo=o("GPT2LMHeadModel"),rLo=o(" (OpenAI GPT-2 model)"),tLo=l(),N1=a("li"),zfe=a("strong"),aLo=o("gpt_neo"),nLo=o(" \u2014 "),eG=a("a"),sLo=o("GPTNeoForCausalLM"),lLo=o(" (GPT Neo model)"),iLo=l(),q1=a("li"),Wfe=a("strong"),dLo=o("gpt_neox"),cLo=o(" \u2014 "),oG=a("a"),fLo=o("GPTNeoXForCausalLM"),mLo=o(" (GPT NeoX model)"),gLo=l(),j1=a("li"),Qfe=a("strong"),hLo=o("gptj"),pLo=o(" \u2014 "),rG=a("a"),uLo=o("GPTJForCausalLM"),_Lo=o(" (GPT-J model)"),bLo=l(),D1=a("li"),Hfe=a("strong"),vLo=o("marian"),FLo=o(" \u2014 "),tG=a("a"),TLo=o("MarianForCausalLM"),MLo=o(" (Marian model)"),ELo=l(),G1=a("li"),Ufe=a("strong"),CLo=o("mbart"),wLo=o(" \u2014 "),aG=a("a"),ALo=o("MBartForCausalLM"),LLo=o(" (mBART model)"),yLo=l(),O1=a("li"),Jfe=a("strong"),xLo=o("megatron-bert"),$Lo=o(" \u2014 "),nG=a("a"),kLo=o("MegatronBertForCausalLM"),SLo=o(" (Megatron-BERT model)"),RLo=l(),V1=a("li"),Yfe=a("strong"),PLo=o("openai-gpt"),BLo=o(" \u2014 "),sG=a("a"),ILo=o("OpenAIGPTLMHeadModel"),NLo=o(" (OpenAI GPT model)"),qLo=l(),X1=a("li"),Kfe=a("strong"),jLo=o("opt"),DLo=o(" \u2014 "),lG=a("a"),GLo=o("OPTForCausalLM"),OLo=o(" (OPT model)"),VLo=l(),z1=a("li"),Zfe=a("strong"),XLo=o("pegasus"),zLo=o(" \u2014 "),iG=a("a"),WLo=o("PegasusForCausalLM"),QLo=o(" (Pegasus model)"),HLo=l(),W1=a("li"),eme=a("strong"),ULo=o("plbart"),JLo=o(" \u2014 "),dG=a("a"),YLo=o("PLBartForCausalLM"),KLo=o(" (PLBart model)"),ZLo=l(),Q1=a("li"),ome=a("strong"),eyo=o("prophetnet"),oyo=o(" \u2014 "),cG=a("a"),ryo=o("ProphetNetForCausalLM"),tyo=o(" (ProphetNet model)"),ayo=l(),H1=a("li"),rme=a("strong"),nyo=o("qdqbert"),syo=o(" \u2014 "),fG=a("a"),lyo=o("QDQBertLMHeadModel"),iyo=o(" (QDQBert model)"),dyo=l(),U1=a("li"),tme=a("strong"),cyo=o("reformer"),fyo=o(" \u2014 "),mG=a("a"),myo=o("ReformerModelWithLMHead"),gyo=o(" (Reformer model)"),hyo=l(),J1=a("li"),ame=a("strong"),pyo=o("rembert"),uyo=o(" \u2014 "),gG=a("a"),_yo=o("RemBertForCausalLM"),byo=o(" (RemBERT model)"),vyo=l(),Y1=a("li"),nme=a("strong"),Fyo=o("roberta"),Tyo=o(" \u2014 "),hG=a("a"),Myo=o("RobertaForCausalLM"),Eyo=o(" (RoBERTa model)"),Cyo=l(),K1=a("li"),sme=a("strong"),wyo=o("roformer"),Ayo=o(" \u2014 "),pG=a("a"),Lyo=o("RoFormerForCausalLM"),yyo=o(" (RoFormer model)"),xyo=l(),Z1=a("li"),lme=a("strong"),$yo=o("speech_to_text_2"),kyo=o(" \u2014 "),uG=a("a"),Syo=o("Speech2Text2ForCausalLM"),Ryo=o(" (Speech2Text2 model)"),Pyo=l(),e2=a("li"),ime=a("strong"),Byo=o("transfo-xl"),Iyo=o(" \u2014 "),_G=a("a"),Nyo=o("TransfoXLLMHeadModel"),qyo=o(" (Transformer-XL model)"),jyo=l(),o2=a("li"),dme=a("strong"),Dyo=o("trocr"),Gyo=o(" \u2014 "),bG=a("a"),Oyo=o("TrOCRForCausalLM"),Vyo=o(" (TrOCR model)"),Xyo=l(),r2=a("li"),cme=a("strong"),zyo=o("xglm"),Wyo=o(" \u2014 "),vG=a("a"),Qyo=o("XGLMForCausalLM"),Hyo=o(" (XGLM model)"),Uyo=l(),t2=a("li"),fme=a("strong"),Jyo=o("xlm"),Yyo=o(" \u2014 "),FG=a("a"),Kyo=o("XLMWithLMHeadModel"),Zyo=o(" (XLM model)"),e9o=l(),a2=a("li"),mme=a("strong"),o9o=o("xlm-prophetnet"),r9o=o(" \u2014 "),TG=a("a"),t9o=o("XLMProphetNetForCausalLM"),a9o=o(" (XLM-ProphetNet model)"),n9o=l(),n2=a("li"),gme=a("strong"),s9o=o("xlm-roberta"),l9o=o(" \u2014 "),MG=a("a"),i9o=o("XLMRobertaForCausalLM"),d9o=o(" (XLM-RoBERTa model)"),c9o=l(),s2=a("li"),hme=a("strong"),f9o=o("xlm-roberta-xl"),m9o=o(" \u2014 "),EG=a("a"),g9o=o("XLMRobertaXLForCausalLM"),h9o=o(" (XLM-RoBERTa-XL model)"),p9o=l(),l2=a("li"),pme=a("strong"),u9o=o("xlnet"),_9o=o(" \u2014 "),CG=a("a"),b9o=o("XLNetLMHeadModel"),v9o=o(" (XLNet model)"),F9o=l(),i2=a("p"),T9o=o("The model is set in evaluation mode by default using "),ume=a("code"),M9o=o("model.eval()"),E9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),C9o=o("model.train()"),w9o=l(),F(d2.$$.fragment),AGe=l(),zi=a("h2"),c2=a("a"),bme=a("span"),F(iL.$$.fragment),A9o=l(),vme=a("span"),L9o=o("AutoModelForMaskedLM"),LGe=l(),So=a("div"),F(dL.$$.fragment),y9o=l(),Wi=a("p"),x9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wG=a("a"),$9o=o("from_pretrained()"),k9o=o(" class method or the "),AG=a("a"),S9o=o("from_config()"),R9o=o(` class
method.`),P9o=l(),cL=a("p"),B9o=o("This class cannot be instantiated directly using "),Fme=a("code"),I9o=o("__init__()"),N9o=o(" (throws an error)."),q9o=l(),dt=a("div"),F(fL.$$.fragment),j9o=l(),Tme=a("p"),D9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G9o=l(),Qi=a("p"),O9o=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),V9o=o("not"),X9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),z9o=o("from_pretrained()"),W9o=o(" to load the model weights."),Q9o=l(),F(f2.$$.fragment),H9o=l(),Ze=a("div"),F(mL.$$.fragment),U9o=l(),Eme=a("p"),J9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y9o=l(),Ia=a("p"),K9o=o("The model class to instantiate is selected based on the "),Cme=a("code"),Z9o=o("model_type"),exo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),txo=o("pretrained_model_name_or_path"),axo=o(":"),nxo=l(),Q=a("ul"),m2=a("li"),Lme=a("strong"),sxo=o("albert"),lxo=o(" \u2014 "),yG=a("a"),ixo=o("AlbertForMaskedLM"),dxo=o(" (ALBERT model)"),cxo=l(),g2=a("li"),yme=a("strong"),fxo=o("bart"),mxo=o(" \u2014 "),xG=a("a"),gxo=o("BartForConditionalGeneration"),hxo=o(" (BART model)"),pxo=l(),h2=a("li"),xme=a("strong"),uxo=o("bert"),_xo=o(" \u2014 "),$G=a("a"),bxo=o("BertForMaskedLM"),vxo=o(" (BERT model)"),Fxo=l(),p2=a("li"),$me=a("strong"),Txo=o("big_bird"),Mxo=o(" \u2014 "),kG=a("a"),Exo=o("BigBirdForMaskedLM"),Cxo=o(" (BigBird model)"),wxo=l(),u2=a("li"),kme=a("strong"),Axo=o("camembert"),Lxo=o(" \u2014 "),SG=a("a"),yxo=o("CamembertForMaskedLM"),xxo=o(" (CamemBERT model)"),$xo=l(),_2=a("li"),Sme=a("strong"),kxo=o("convbert"),Sxo=o(" \u2014 "),RG=a("a"),Rxo=o("ConvBertForMaskedLM"),Pxo=o(" (ConvBERT model)"),Bxo=l(),b2=a("li"),Rme=a("strong"),Ixo=o("data2vec-text"),Nxo=o(" \u2014 "),PG=a("a"),qxo=o("Data2VecTextForMaskedLM"),jxo=o(" (Data2VecText model)"),Dxo=l(),v2=a("li"),Pme=a("strong"),Gxo=o("deberta"),Oxo=o(" \u2014 "),BG=a("a"),Vxo=o("DebertaForMaskedLM"),Xxo=o(" (DeBERTa model)"),zxo=l(),F2=a("li"),Bme=a("strong"),Wxo=o("deberta-v2"),Qxo=o(" \u2014 "),IG=a("a"),Hxo=o("DebertaV2ForMaskedLM"),Uxo=o(" (DeBERTa-v2 model)"),Jxo=l(),T2=a("li"),Ime=a("strong"),Yxo=o("distilbert"),Kxo=o(" \u2014 "),NG=a("a"),Zxo=o("DistilBertForMaskedLM"),e$o=o(" (DistilBERT model)"),o$o=l(),M2=a("li"),Nme=a("strong"),r$o=o("electra"),t$o=o(" \u2014 "),qG=a("a"),a$o=o("ElectraForMaskedLM"),n$o=o(" (ELECTRA model)"),s$o=l(),E2=a("li"),qme=a("strong"),l$o=o("flaubert"),i$o=o(" \u2014 "),jG=a("a"),d$o=o("FlaubertWithLMHeadModel"),c$o=o(" (FlauBERT model)"),f$o=l(),C2=a("li"),jme=a("strong"),m$o=o("fnet"),g$o=o(" \u2014 "),DG=a("a"),h$o=o("FNetForMaskedLM"),p$o=o(" (FNet model)"),u$o=l(),w2=a("li"),Dme=a("strong"),_$o=o("funnel"),b$o=o(" \u2014 "),GG=a("a"),v$o=o("FunnelForMaskedLM"),F$o=o(" (Funnel Transformer model)"),T$o=l(),A2=a("li"),Gme=a("strong"),M$o=o("ibert"),E$o=o(" \u2014 "),OG=a("a"),C$o=o("IBertForMaskedLM"),w$o=o(" (I-BERT model)"),A$o=l(),L2=a("li"),Ome=a("strong"),L$o=o("layoutlm"),y$o=o(" \u2014 "),VG=a("a"),x$o=o("LayoutLMForMaskedLM"),$$o=o(" (LayoutLM model)"),k$o=l(),y2=a("li"),Vme=a("strong"),S$o=o("longformer"),R$o=o(" \u2014 "),XG=a("a"),P$o=o("LongformerForMaskedLM"),B$o=o(" (Longformer model)"),I$o=l(),x2=a("li"),Xme=a("strong"),N$o=o("luke"),q$o=o(" \u2014 "),zG=a("a"),j$o=o("LukeForMaskedLM"),D$o=o(" (LUKE model)"),G$o=l(),$2=a("li"),zme=a("strong"),O$o=o("mbart"),V$o=o(" \u2014 "),WG=a("a"),X$o=o("MBartForConditionalGeneration"),z$o=o(" (mBART model)"),W$o=l(),k2=a("li"),Wme=a("strong"),Q$o=o("megatron-bert"),H$o=o(" \u2014 "),QG=a("a"),U$o=o("MegatronBertForMaskedLM"),J$o=o(" (Megatron-BERT model)"),Y$o=l(),S2=a("li"),Qme=a("strong"),K$o=o("mobilebert"),Z$o=o(" \u2014 "),HG=a("a"),eko=o("MobileBertForMaskedLM"),oko=o(" (MobileBERT model)"),rko=l(),R2=a("li"),Hme=a("strong"),tko=o("mpnet"),ako=o(" \u2014 "),UG=a("a"),nko=o("MPNetForMaskedLM"),sko=o(" (MPNet model)"),lko=l(),P2=a("li"),Ume=a("strong"),iko=o("nystromformer"),dko=o(" \u2014 "),JG=a("a"),cko=o("NystromformerForMaskedLM"),fko=o(" (Nystr\xF6mformer model)"),mko=l(),B2=a("li"),Jme=a("strong"),gko=o("perceiver"),hko=o(" \u2014 "),YG=a("a"),pko=o("PerceiverForMaskedLM"),uko=o(" (Perceiver model)"),_ko=l(),I2=a("li"),Yme=a("strong"),bko=o("qdqbert"),vko=o(" \u2014 "),KG=a("a"),Fko=o("QDQBertForMaskedLM"),Tko=o(" (QDQBert model)"),Mko=l(),N2=a("li"),Kme=a("strong"),Eko=o("reformer"),Cko=o(" \u2014 "),ZG=a("a"),wko=o("ReformerForMaskedLM"),Ako=o(" (Reformer model)"),Lko=l(),q2=a("li"),Zme=a("strong"),yko=o("rembert"),xko=o(" \u2014 "),eO=a("a"),$ko=o("RemBertForMaskedLM"),kko=o(" (RemBERT model)"),Sko=l(),j2=a("li"),ege=a("strong"),Rko=o("roberta"),Pko=o(" \u2014 "),oO=a("a"),Bko=o("RobertaForMaskedLM"),Iko=o(" (RoBERTa model)"),Nko=l(),D2=a("li"),oge=a("strong"),qko=o("roformer"),jko=o(" \u2014 "),rO=a("a"),Dko=o("RoFormerForMaskedLM"),Gko=o(" (RoFormer model)"),Oko=l(),G2=a("li"),rge=a("strong"),Vko=o("squeezebert"),Xko=o(" \u2014 "),tO=a("a"),zko=o("SqueezeBertForMaskedLM"),Wko=o(" (SqueezeBERT model)"),Qko=l(),O2=a("li"),tge=a("strong"),Hko=o("tapas"),Uko=o(" \u2014 "),aO=a("a"),Jko=o("TapasForMaskedLM"),Yko=o(" (TAPAS model)"),Kko=l(),V2=a("li"),age=a("strong"),Zko=o("wav2vec2"),eSo=o(" \u2014 "),nge=a("code"),oSo=o("Wav2Vec2ForMaskedLM"),rSo=o(" (Wav2Vec2 model)"),tSo=l(),X2=a("li"),sge=a("strong"),aSo=o("xlm"),nSo=o(" \u2014 "),nO=a("a"),sSo=o("XLMWithLMHeadModel"),lSo=o(" (XLM model)"),iSo=l(),z2=a("li"),lge=a("strong"),dSo=o("xlm-roberta"),cSo=o(" \u2014 "),sO=a("a"),fSo=o("XLMRobertaForMaskedLM"),mSo=o(" (XLM-RoBERTa model)"),gSo=l(),W2=a("li"),ige=a("strong"),hSo=o("xlm-roberta-xl"),pSo=o(" \u2014 "),lO=a("a"),uSo=o("XLMRobertaXLForMaskedLM"),_So=o(" (XLM-RoBERTa-XL model)"),bSo=l(),Q2=a("li"),dge=a("strong"),vSo=o("yoso"),FSo=o(" \u2014 "),iO=a("a"),TSo=o("YosoForMaskedLM"),MSo=o(" (YOSO model)"),ESo=l(),H2=a("p"),CSo=o("The model is set in evaluation mode by default using "),cge=a("code"),wSo=o("model.eval()"),ASo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),LSo=o("model.train()"),ySo=l(),F(U2.$$.fragment),yGe=l(),Hi=a("h2"),J2=a("a"),mge=a("span"),F(gL.$$.fragment),xSo=l(),gge=a("span"),$So=o("AutoModelForSeq2SeqLM"),xGe=l(),Ro=a("div"),F(hL.$$.fragment),kSo=l(),Ui=a("p"),SSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dO=a("a"),RSo=o("from_pretrained()"),PSo=o(" class method or the "),cO=a("a"),BSo=o("from_config()"),ISo=o(` class
method.`),NSo=l(),pL=a("p"),qSo=o("This class cannot be instantiated directly using "),hge=a("code"),jSo=o("__init__()"),DSo=o(" (throws an error)."),GSo=l(),ct=a("div"),F(uL.$$.fragment),OSo=l(),pge=a("p"),VSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XSo=l(),Ji=a("p"),zSo=o(`Note:
Loading a model from its configuration file does `),uge=a("strong"),WSo=o("not"),QSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),HSo=o("from_pretrained()"),USo=o(" to load the model weights."),JSo=l(),F(Y2.$$.fragment),YSo=l(),eo=a("div"),F(_L.$$.fragment),KSo=l(),_ge=a("p"),ZSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eRo=l(),Na=a("p"),oRo=o("The model class to instantiate is selected based on the "),bge=a("code"),rRo=o("model_type"),tRo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),aRo=o("pretrained_model_name_or_path"),nRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),sRo=o("pretrained_model_name_or_path"),lRo=o(":"),iRo=l(),pe=a("ul"),K2=a("li"),Tge=a("strong"),dRo=o("bart"),cRo=o(" \u2014 "),mO=a("a"),fRo=o("BartForConditionalGeneration"),mRo=o(" (BART model)"),gRo=l(),Z2=a("li"),Mge=a("strong"),hRo=o("bigbird_pegasus"),pRo=o(" \u2014 "),gO=a("a"),uRo=o("BigBirdPegasusForConditionalGeneration"),_Ro=o(" (BigBird-Pegasus model)"),bRo=l(),eb=a("li"),Ege=a("strong"),vRo=o("blenderbot"),FRo=o(" \u2014 "),hO=a("a"),TRo=o("BlenderbotForConditionalGeneration"),MRo=o(" (Blenderbot model)"),ERo=l(),ob=a("li"),Cge=a("strong"),CRo=o("blenderbot-small"),wRo=o(" \u2014 "),pO=a("a"),ARo=o("BlenderbotSmallForConditionalGeneration"),LRo=o(" (BlenderbotSmall model)"),yRo=l(),rb=a("li"),wge=a("strong"),xRo=o("encoder-decoder"),$Ro=o(" \u2014 "),uO=a("a"),kRo=o("EncoderDecoderModel"),SRo=o(" (Encoder decoder model)"),RRo=l(),tb=a("li"),Age=a("strong"),PRo=o("fsmt"),BRo=o(" \u2014 "),_O=a("a"),IRo=o("FSMTForConditionalGeneration"),NRo=o(" (FairSeq Machine-Translation model)"),qRo=l(),ab=a("li"),Lge=a("strong"),jRo=o("led"),DRo=o(" \u2014 "),bO=a("a"),GRo=o("LEDForConditionalGeneration"),ORo=o(" (LED model)"),VRo=l(),nb=a("li"),yge=a("strong"),XRo=o("longt5"),zRo=o(" \u2014 "),vO=a("a"),WRo=o("LongT5ForConditionalGeneration"),QRo=o(" (LongT5 model)"),HRo=l(),sb=a("li"),xge=a("strong"),URo=o("m2m_100"),JRo=o(" \u2014 "),FO=a("a"),YRo=o("M2M100ForConditionalGeneration"),KRo=o(" (M2M100 model)"),ZRo=l(),lb=a("li"),$ge=a("strong"),ePo=o("marian"),oPo=o(" \u2014 "),TO=a("a"),rPo=o("MarianMTModel"),tPo=o(" (Marian model)"),aPo=l(),ib=a("li"),kge=a("strong"),nPo=o("mbart"),sPo=o(" \u2014 "),MO=a("a"),lPo=o("MBartForConditionalGeneration"),iPo=o(" (mBART model)"),dPo=l(),db=a("li"),Sge=a("strong"),cPo=o("mt5"),fPo=o(" \u2014 "),EO=a("a"),mPo=o("MT5ForConditionalGeneration"),gPo=o(" (MT5 model)"),hPo=l(),cb=a("li"),Rge=a("strong"),pPo=o("pegasus"),uPo=o(" \u2014 "),CO=a("a"),_Po=o("PegasusForConditionalGeneration"),bPo=o(" (Pegasus model)"),vPo=l(),fb=a("li"),Pge=a("strong"),FPo=o("plbart"),TPo=o(" \u2014 "),wO=a("a"),MPo=o("PLBartForConditionalGeneration"),EPo=o(" (PLBart model)"),CPo=l(),mb=a("li"),Bge=a("strong"),wPo=o("prophetnet"),APo=o(" \u2014 "),AO=a("a"),LPo=o("ProphetNetForConditionalGeneration"),yPo=o(" (ProphetNet model)"),xPo=l(),gb=a("li"),Ige=a("strong"),$Po=o("t5"),kPo=o(" \u2014 "),LO=a("a"),SPo=o("T5ForConditionalGeneration"),RPo=o(" (T5 model)"),PPo=l(),hb=a("li"),Nge=a("strong"),BPo=o("xlm-prophetnet"),IPo=o(" \u2014 "),yO=a("a"),NPo=o("XLMProphetNetForConditionalGeneration"),qPo=o(" (XLM-ProphetNet model)"),jPo=l(),pb=a("p"),DPo=o("The model is set in evaluation mode by default using "),qge=a("code"),GPo=o("model.eval()"),OPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),VPo=o("model.train()"),XPo=l(),F(ub.$$.fragment),$Ge=l(),Yi=a("h2"),_b=a("a"),Dge=a("span"),F(bL.$$.fragment),zPo=l(),Gge=a("span"),WPo=o("AutoModelForSequenceClassification"),kGe=l(),Po=a("div"),F(vL.$$.fragment),QPo=l(),Ki=a("p"),HPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xO=a("a"),UPo=o("from_pretrained()"),JPo=o(" class method or the "),$O=a("a"),YPo=o("from_config()"),KPo=o(` class
method.`),ZPo=l(),FL=a("p"),eBo=o("This class cannot be instantiated directly using "),Oge=a("code"),oBo=o("__init__()"),rBo=o(" (throws an error)."),tBo=l(),ft=a("div"),F(TL.$$.fragment),aBo=l(),Vge=a("p"),nBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sBo=l(),Zi=a("p"),lBo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),iBo=o("not"),dBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=a("a"),cBo=o("from_pretrained()"),fBo=o(" to load the model weights."),mBo=l(),F(bb.$$.fragment),gBo=l(),oo=a("div"),F(ML.$$.fragment),hBo=l(),zge=a("p"),pBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uBo=l(),qa=a("p"),_Bo=o("The model class to instantiate is selected based on the "),Wge=a("code"),bBo=o("model_type"),vBo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),FBo=o("pretrained_model_name_or_path"),TBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=a("code"),MBo=o("pretrained_model_name_or_path"),EBo=o(":"),CBo=l(),N=a("ul"),vb=a("li"),Uge=a("strong"),wBo=o("albert"),ABo=o(" \u2014 "),SO=a("a"),LBo=o("AlbertForSequenceClassification"),yBo=o(" (ALBERT model)"),xBo=l(),Fb=a("li"),Jge=a("strong"),$Bo=o("bart"),kBo=o(" \u2014 "),RO=a("a"),SBo=o("BartForSequenceClassification"),RBo=o(" (BART model)"),PBo=l(),Tb=a("li"),Yge=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),PO=a("a"),NBo=o("BertForSequenceClassification"),qBo=o(" (BERT model)"),jBo=l(),Mb=a("li"),Kge=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),BO=a("a"),OBo=o("BigBirdForSequenceClassification"),VBo=o(" (BigBird model)"),XBo=l(),Eb=a("li"),Zge=a("strong"),zBo=o("bigbird_pegasus"),WBo=o(" \u2014 "),IO=a("a"),QBo=o("BigBirdPegasusForSequenceClassification"),HBo=o(" (BigBird-Pegasus model)"),UBo=l(),Cb=a("li"),ehe=a("strong"),JBo=o("bloom"),YBo=o(" \u2014 "),NO=a("a"),KBo=o("BloomForSequenceClassification"),ZBo=o(" (BLOOM model)"),eIo=l(),wb=a("li"),ohe=a("strong"),oIo=o("camembert"),rIo=o(" \u2014 "),qO=a("a"),tIo=o("CamembertForSequenceClassification"),aIo=o(" (CamemBERT model)"),nIo=l(),Ab=a("li"),rhe=a("strong"),sIo=o("canine"),lIo=o(" \u2014 "),jO=a("a"),iIo=o("CanineForSequenceClassification"),dIo=o(" (CANINE model)"),cIo=l(),Lb=a("li"),the=a("strong"),fIo=o("convbert"),mIo=o(" \u2014 "),DO=a("a"),gIo=o("ConvBertForSequenceClassification"),hIo=o(" (ConvBERT model)"),pIo=l(),yb=a("li"),ahe=a("strong"),uIo=o("ctrl"),_Io=o(" \u2014 "),GO=a("a"),bIo=o("CTRLForSequenceClassification"),vIo=o(" (CTRL model)"),FIo=l(),xb=a("li"),nhe=a("strong"),TIo=o("data2vec-text"),MIo=o(" \u2014 "),OO=a("a"),EIo=o("Data2VecTextForSequenceClassification"),CIo=o(" (Data2VecText model)"),wIo=l(),$b=a("li"),she=a("strong"),AIo=o("deberta"),LIo=o(" \u2014 "),VO=a("a"),yIo=o("DebertaForSequenceClassification"),xIo=o(" (DeBERTa model)"),$Io=l(),kb=a("li"),lhe=a("strong"),kIo=o("deberta-v2"),SIo=o(" \u2014 "),XO=a("a"),RIo=o("DebertaV2ForSequenceClassification"),PIo=o(" (DeBERTa-v2 model)"),BIo=l(),Sb=a("li"),ihe=a("strong"),IIo=o("distilbert"),NIo=o(" \u2014 "),zO=a("a"),qIo=o("DistilBertForSequenceClassification"),jIo=o(" (DistilBERT model)"),DIo=l(),Rb=a("li"),dhe=a("strong"),GIo=o("electra"),OIo=o(" \u2014 "),WO=a("a"),VIo=o("ElectraForSequenceClassification"),XIo=o(" (ELECTRA model)"),zIo=l(),Pb=a("li"),che=a("strong"),WIo=o("flaubert"),QIo=o(" \u2014 "),QO=a("a"),HIo=o("FlaubertForSequenceClassification"),UIo=o(" (FlauBERT model)"),JIo=l(),Bb=a("li"),fhe=a("strong"),YIo=o("fnet"),KIo=o(" \u2014 "),HO=a("a"),ZIo=o("FNetForSequenceClassification"),eNo=o(" (FNet model)"),oNo=l(),Ib=a("li"),mhe=a("strong"),rNo=o("funnel"),tNo=o(" \u2014 "),UO=a("a"),aNo=o("FunnelForSequenceClassification"),nNo=o(" (Funnel Transformer model)"),sNo=l(),Nb=a("li"),ghe=a("strong"),lNo=o("gpt2"),iNo=o(" \u2014 "),JO=a("a"),dNo=o("GPT2ForSequenceClassification"),cNo=o(" (OpenAI GPT-2 model)"),fNo=l(),qb=a("li"),hhe=a("strong"),mNo=o("gpt_neo"),gNo=o(" \u2014 "),YO=a("a"),hNo=o("GPTNeoForSequenceClassification"),pNo=o(" (GPT Neo model)"),uNo=l(),jb=a("li"),phe=a("strong"),_No=o("gptj"),bNo=o(" \u2014 "),KO=a("a"),vNo=o("GPTJForSequenceClassification"),FNo=o(" (GPT-J model)"),TNo=l(),Db=a("li"),uhe=a("strong"),MNo=o("ibert"),ENo=o(" \u2014 "),ZO=a("a"),CNo=o("IBertForSequenceClassification"),wNo=o(" (I-BERT model)"),ANo=l(),Gb=a("li"),_he=a("strong"),LNo=o("layoutlm"),yNo=o(" \u2014 "),eV=a("a"),xNo=o("LayoutLMForSequenceClassification"),$No=o(" (LayoutLM model)"),kNo=l(),Ob=a("li"),bhe=a("strong"),SNo=o("layoutlmv2"),RNo=o(" \u2014 "),oV=a("a"),PNo=o("LayoutLMv2ForSequenceClassification"),BNo=o(" (LayoutLMv2 model)"),INo=l(),Vb=a("li"),vhe=a("strong"),NNo=o("layoutlmv3"),qNo=o(" \u2014 "),rV=a("a"),jNo=o("LayoutLMv3ForSequenceClassification"),DNo=o(" (LayoutLMv3 model)"),GNo=l(),Xb=a("li"),Fhe=a("strong"),ONo=o("led"),VNo=o(" \u2014 "),tV=a("a"),XNo=o("LEDForSequenceClassification"),zNo=o(" (LED model)"),WNo=l(),zb=a("li"),The=a("strong"),QNo=o("longformer"),HNo=o(" \u2014 "),aV=a("a"),UNo=o("LongformerForSequenceClassification"),JNo=o(" (Longformer model)"),YNo=l(),Wb=a("li"),Mhe=a("strong"),KNo=o("mbart"),ZNo=o(" \u2014 "),nV=a("a"),eqo=o("MBartForSequenceClassification"),oqo=o(" (mBART model)"),rqo=l(),Qb=a("li"),Ehe=a("strong"),tqo=o("megatron-bert"),aqo=o(" \u2014 "),sV=a("a"),nqo=o("MegatronBertForSequenceClassification"),sqo=o(" (Megatron-BERT model)"),lqo=l(),Hb=a("li"),Che=a("strong"),iqo=o("mobilebert"),dqo=o(" \u2014 "),lV=a("a"),cqo=o("MobileBertForSequenceClassification"),fqo=o(" (MobileBERT model)"),mqo=l(),Ub=a("li"),whe=a("strong"),gqo=o("mpnet"),hqo=o(" \u2014 "),iV=a("a"),pqo=o("MPNetForSequenceClassification"),uqo=o(" (MPNet model)"),_qo=l(),Jb=a("li"),Ahe=a("strong"),bqo=o("nystromformer"),vqo=o(" \u2014 "),dV=a("a"),Fqo=o("NystromformerForSequenceClassification"),Tqo=o(" (Nystr\xF6mformer model)"),Mqo=l(),Yb=a("li"),Lhe=a("strong"),Eqo=o("openai-gpt"),Cqo=o(" \u2014 "),cV=a("a"),wqo=o("OpenAIGPTForSequenceClassification"),Aqo=o(" (OpenAI GPT model)"),Lqo=l(),Kb=a("li"),yhe=a("strong"),yqo=o("perceiver"),xqo=o(" \u2014 "),fV=a("a"),$qo=o("PerceiverForSequenceClassification"),kqo=o(" (Perceiver model)"),Sqo=l(),Zb=a("li"),xhe=a("strong"),Rqo=o("plbart"),Pqo=o(" \u2014 "),mV=a("a"),Bqo=o("PLBartForSequenceClassification"),Iqo=o(" (PLBart model)"),Nqo=l(),ev=a("li"),$he=a("strong"),qqo=o("qdqbert"),jqo=o(" \u2014 "),gV=a("a"),Dqo=o("QDQBertForSequenceClassification"),Gqo=o(" (QDQBert model)"),Oqo=l(),ov=a("li"),khe=a("strong"),Vqo=o("reformer"),Xqo=o(" \u2014 "),hV=a("a"),zqo=o("ReformerForSequenceClassification"),Wqo=o(" (Reformer model)"),Qqo=l(),rv=a("li"),She=a("strong"),Hqo=o("rembert"),Uqo=o(" \u2014 "),pV=a("a"),Jqo=o("RemBertForSequenceClassification"),Yqo=o(" (RemBERT model)"),Kqo=l(),tv=a("li"),Rhe=a("strong"),Zqo=o("roberta"),ejo=o(" \u2014 "),uV=a("a"),ojo=o("RobertaForSequenceClassification"),rjo=o(" (RoBERTa model)"),tjo=l(),av=a("li"),Phe=a("strong"),ajo=o("roformer"),njo=o(" \u2014 "),_V=a("a"),sjo=o("RoFormerForSequenceClassification"),ljo=o(" (RoFormer model)"),ijo=l(),nv=a("li"),Bhe=a("strong"),djo=o("squeezebert"),cjo=o(" \u2014 "),bV=a("a"),fjo=o("SqueezeBertForSequenceClassification"),mjo=o(" (SqueezeBERT model)"),gjo=l(),sv=a("li"),Ihe=a("strong"),hjo=o("tapas"),pjo=o(" \u2014 "),vV=a("a"),ujo=o("TapasForSequenceClassification"),_jo=o(" (TAPAS model)"),bjo=l(),lv=a("li"),Nhe=a("strong"),vjo=o("transfo-xl"),Fjo=o(" \u2014 "),FV=a("a"),Tjo=o("TransfoXLForSequenceClassification"),Mjo=o(" (Transformer-XL model)"),Ejo=l(),iv=a("li"),qhe=a("strong"),Cjo=o("xlm"),wjo=o(" \u2014 "),TV=a("a"),Ajo=o("XLMForSequenceClassification"),Ljo=o(" (XLM model)"),yjo=l(),dv=a("li"),jhe=a("strong"),xjo=o("xlm-roberta"),$jo=o(" \u2014 "),MV=a("a"),kjo=o("XLMRobertaForSequenceClassification"),Sjo=o(" (XLM-RoBERTa model)"),Rjo=l(),cv=a("li"),Dhe=a("strong"),Pjo=o("xlm-roberta-xl"),Bjo=o(" \u2014 "),EV=a("a"),Ijo=o("XLMRobertaXLForSequenceClassification"),Njo=o(" (XLM-RoBERTa-XL model)"),qjo=l(),fv=a("li"),Ghe=a("strong"),jjo=o("xlnet"),Djo=o(" \u2014 "),CV=a("a"),Gjo=o("XLNetForSequenceClassification"),Ojo=o(" (XLNet model)"),Vjo=l(),mv=a("li"),Ohe=a("strong"),Xjo=o("yoso"),zjo=o(" \u2014 "),wV=a("a"),Wjo=o("YosoForSequenceClassification"),Qjo=o(" (YOSO model)"),Hjo=l(),gv=a("p"),Ujo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),Kjo=o("model.train()"),Zjo=l(),F(hv.$$.fragment),SGe=l(),ed=a("h2"),pv=a("a"),zhe=a("span"),F(EL.$$.fragment),eDo=l(),Whe=a("span"),oDo=o("AutoModelForMultipleChoice"),RGe=l(),Bo=a("div"),F(CL.$$.fragment),rDo=l(),od=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AV=a("a"),aDo=o("from_pretrained()"),nDo=o(" class method or the "),LV=a("a"),sDo=o("from_config()"),lDo=o(` class
method.`),iDo=l(),wL=a("p"),dDo=o("This class cannot be instantiated directly using "),Qhe=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),mt=a("div"),F(AL.$$.fragment),gDo=l(),Hhe=a("p"),hDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pDo=l(),rd=a("p"),uDo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),_Do=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),vDo=o("from_pretrained()"),FDo=o(" to load the model weights."),TDo=l(),F(uv.$$.fragment),MDo=l(),ro=a("div"),F(LL.$$.fragment),EDo=l(),Jhe=a("p"),CDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wDo=l(),ja=a("p"),ADo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),LDo=o("model_type"),yDo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),xDo=o("pretrained_model_name_or_path"),$Do=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),kDo=o("pretrained_model_name_or_path"),SDo=o(":"),RDo=l(),Z=a("ul"),_v=a("li"),epe=a("strong"),PDo=o("albert"),BDo=o(" \u2014 "),xV=a("a"),IDo=o("AlbertForMultipleChoice"),NDo=o(" (ALBERT model)"),qDo=l(),bv=a("li"),ope=a("strong"),jDo=o("bert"),DDo=o(" \u2014 "),$V=a("a"),GDo=o("BertForMultipleChoice"),ODo=o(" (BERT model)"),VDo=l(),vv=a("li"),rpe=a("strong"),XDo=o("big_bird"),zDo=o(" \u2014 "),kV=a("a"),WDo=o("BigBirdForMultipleChoice"),QDo=o(" (BigBird model)"),HDo=l(),Fv=a("li"),tpe=a("strong"),UDo=o("camembert"),JDo=o(" \u2014 "),SV=a("a"),YDo=o("CamembertForMultipleChoice"),KDo=o(" (CamemBERT model)"),ZDo=l(),Tv=a("li"),ape=a("strong"),eGo=o("canine"),oGo=o(" \u2014 "),RV=a("a"),rGo=o("CanineForMultipleChoice"),tGo=o(" (CANINE model)"),aGo=l(),Mv=a("li"),npe=a("strong"),nGo=o("convbert"),sGo=o(" \u2014 "),PV=a("a"),lGo=o("ConvBertForMultipleChoice"),iGo=o(" (ConvBERT model)"),dGo=l(),Ev=a("li"),spe=a("strong"),cGo=o("data2vec-text"),fGo=o(" \u2014 "),BV=a("a"),mGo=o("Data2VecTextForMultipleChoice"),gGo=o(" (Data2VecText model)"),hGo=l(),Cv=a("li"),lpe=a("strong"),pGo=o("deberta-v2"),uGo=o(" \u2014 "),IV=a("a"),_Go=o("DebertaV2ForMultipleChoice"),bGo=o(" (DeBERTa-v2 model)"),vGo=l(),wv=a("li"),ipe=a("strong"),FGo=o("distilbert"),TGo=o(" \u2014 "),NV=a("a"),MGo=o("DistilBertForMultipleChoice"),EGo=o(" (DistilBERT model)"),CGo=l(),Av=a("li"),dpe=a("strong"),wGo=o("electra"),AGo=o(" \u2014 "),qV=a("a"),LGo=o("ElectraForMultipleChoice"),yGo=o(" (ELECTRA model)"),xGo=l(),Lv=a("li"),cpe=a("strong"),$Go=o("flaubert"),kGo=o(" \u2014 "),jV=a("a"),SGo=o("FlaubertForMultipleChoice"),RGo=o(" (FlauBERT model)"),PGo=l(),yv=a("li"),fpe=a("strong"),BGo=o("fnet"),IGo=o(" \u2014 "),DV=a("a"),NGo=o("FNetForMultipleChoice"),qGo=o(" (FNet model)"),jGo=l(),xv=a("li"),mpe=a("strong"),DGo=o("funnel"),GGo=o(" \u2014 "),GV=a("a"),OGo=o("FunnelForMultipleChoice"),VGo=o(" (Funnel Transformer model)"),XGo=l(),$v=a("li"),gpe=a("strong"),zGo=o("ibert"),WGo=o(" \u2014 "),OV=a("a"),QGo=o("IBertForMultipleChoice"),HGo=o(" (I-BERT model)"),UGo=l(),kv=a("li"),hpe=a("strong"),JGo=o("longformer"),YGo=o(" \u2014 "),VV=a("a"),KGo=o("LongformerForMultipleChoice"),ZGo=o(" (Longformer model)"),eOo=l(),Sv=a("li"),ppe=a("strong"),oOo=o("megatron-bert"),rOo=o(" \u2014 "),XV=a("a"),tOo=o("MegatronBertForMultipleChoice"),aOo=o(" (Megatron-BERT model)"),nOo=l(),Rv=a("li"),upe=a("strong"),sOo=o("mobilebert"),lOo=o(" \u2014 "),zV=a("a"),iOo=o("MobileBertForMultipleChoice"),dOo=o(" (MobileBERT model)"),cOo=l(),Pv=a("li"),_pe=a("strong"),fOo=o("mpnet"),mOo=o(" \u2014 "),WV=a("a"),gOo=o("MPNetForMultipleChoice"),hOo=o(" (MPNet model)"),pOo=l(),Bv=a("li"),bpe=a("strong"),uOo=o("nystromformer"),_Oo=o(" \u2014 "),QV=a("a"),bOo=o("NystromformerForMultipleChoice"),vOo=o(" (Nystr\xF6mformer model)"),FOo=l(),Iv=a("li"),vpe=a("strong"),TOo=o("qdqbert"),MOo=o(" \u2014 "),HV=a("a"),EOo=o("QDQBertForMultipleChoice"),COo=o(" (QDQBert model)"),wOo=l(),Nv=a("li"),Fpe=a("strong"),AOo=o("rembert"),LOo=o(" \u2014 "),UV=a("a"),yOo=o("RemBertForMultipleChoice"),xOo=o(" (RemBERT model)"),$Oo=l(),qv=a("li"),Tpe=a("strong"),kOo=o("roberta"),SOo=o(" \u2014 "),JV=a("a"),ROo=o("RobertaForMultipleChoice"),POo=o(" (RoBERTa model)"),BOo=l(),jv=a("li"),Mpe=a("strong"),IOo=o("roformer"),NOo=o(" \u2014 "),YV=a("a"),qOo=o("RoFormerForMultipleChoice"),jOo=o(" (RoFormer model)"),DOo=l(),Dv=a("li"),Epe=a("strong"),GOo=o("squeezebert"),OOo=o(" \u2014 "),KV=a("a"),VOo=o("SqueezeBertForMultipleChoice"),XOo=o(" (SqueezeBERT model)"),zOo=l(),Gv=a("li"),Cpe=a("strong"),WOo=o("xlm"),QOo=o(" \u2014 "),ZV=a("a"),HOo=o("XLMForMultipleChoice"),UOo=o(" (XLM model)"),JOo=l(),Ov=a("li"),wpe=a("strong"),YOo=o("xlm-roberta"),KOo=o(" \u2014 "),eX=a("a"),ZOo=o("XLMRobertaForMultipleChoice"),eVo=o(" (XLM-RoBERTa model)"),oVo=l(),Vv=a("li"),Ape=a("strong"),rVo=o("xlm-roberta-xl"),tVo=o(" \u2014 "),oX=a("a"),aVo=o("XLMRobertaXLForMultipleChoice"),nVo=o(" (XLM-RoBERTa-XL model)"),sVo=l(),Xv=a("li"),Lpe=a("strong"),lVo=o("xlnet"),iVo=o(" \u2014 "),rX=a("a"),dVo=o("XLNetForMultipleChoice"),cVo=o(" (XLNet model)"),fVo=l(),zv=a("li"),ype=a("strong"),mVo=o("yoso"),gVo=o(" \u2014 "),tX=a("a"),hVo=o("YosoForMultipleChoice"),pVo=o(" (YOSO model)"),uVo=l(),Wv=a("p"),_Vo=o("The model is set in evaluation mode by default using "),xpe=a("code"),bVo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),FVo=o("model.train()"),TVo=l(),F(Qv.$$.fragment),PGe=l(),td=a("h2"),Hv=a("a"),kpe=a("span"),F(yL.$$.fragment),MVo=l(),Spe=a("span"),EVo=o("AutoModelForNextSentencePrediction"),BGe=l(),Io=a("div"),F(xL.$$.fragment),CVo=l(),ad=a("p"),wVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aX=a("a"),AVo=o("from_pretrained()"),LVo=o(" class method or the "),nX=a("a"),yVo=o("from_config()"),xVo=o(` class
method.`),$Vo=l(),$L=a("p"),kVo=o("This class cannot be instantiated directly using "),Rpe=a("code"),SVo=o("__init__()"),RVo=o(" (throws an error)."),PVo=l(),gt=a("div"),F(kL.$$.fragment),BVo=l(),Ppe=a("p"),IVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NVo=l(),nd=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),jVo=o("not"),DVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),GVo=o("from_pretrained()"),OVo=o(" to load the model weights."),VVo=l(),F(Uv.$$.fragment),XVo=l(),to=a("div"),F(SL.$$.fragment),zVo=l(),Ipe=a("p"),WVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QVo=l(),Da=a("p"),HVo=o("The model class to instantiate is selected based on the "),Npe=a("code"),UVo=o("model_type"),JVo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),ZVo=o("pretrained_model_name_or_path"),eXo=o(":"),oXo=l(),Zr=a("ul"),Jv=a("li"),Dpe=a("strong"),rXo=o("bert"),tXo=o(" \u2014 "),lX=a("a"),aXo=o("BertForNextSentencePrediction"),nXo=o(" (BERT model)"),sXo=l(),Yv=a("li"),Gpe=a("strong"),lXo=o("fnet"),iXo=o(" \u2014 "),iX=a("a"),dXo=o("FNetForNextSentencePrediction"),cXo=o(" (FNet model)"),fXo=l(),Kv=a("li"),Ope=a("strong"),mXo=o("megatron-bert"),gXo=o(" \u2014 "),dX=a("a"),hXo=o("MegatronBertForNextSentencePrediction"),pXo=o(" (Megatron-BERT model)"),uXo=l(),Zv=a("li"),Vpe=a("strong"),_Xo=o("mobilebert"),bXo=o(" \u2014 "),cX=a("a"),vXo=o("MobileBertForNextSentencePrediction"),FXo=o(" (MobileBERT model)"),TXo=l(),e0=a("li"),Xpe=a("strong"),MXo=o("qdqbert"),EXo=o(" \u2014 "),fX=a("a"),CXo=o("QDQBertForNextSentencePrediction"),wXo=o(" (QDQBert model)"),AXo=l(),o0=a("p"),LXo=o("The model is set in evaluation mode by default using "),zpe=a("code"),yXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),$Xo=o("model.train()"),kXo=l(),F(r0.$$.fragment),IGe=l(),sd=a("h2"),t0=a("a"),Qpe=a("span"),F(RL.$$.fragment),SXo=l(),Hpe=a("span"),RXo=o("AutoModelForTokenClassification"),NGe=l(),No=a("div"),F(PL.$$.fragment),PXo=l(),ld=a("p"),BXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mX=a("a"),IXo=o("from_pretrained()"),NXo=o(" class method or the "),gX=a("a"),qXo=o("from_config()"),jXo=o(` class
method.`),DXo=l(),BL=a("p"),GXo=o("This class cannot be instantiated directly using "),Upe=a("code"),OXo=o("__init__()"),VXo=o(" (throws an error)."),XXo=l(),ht=a("div"),F(IL.$$.fragment),zXo=l(),Jpe=a("p"),WXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QXo=l(),id=a("p"),HXo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),UXo=o("not"),JXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),YXo=o("from_pretrained()"),KXo=o(" to load the model weights."),ZXo=l(),F(a0.$$.fragment),ezo=l(),ao=a("div"),F(NL.$$.fragment),ozo=l(),Kpe=a("p"),rzo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tzo=l(),Ga=a("p"),azo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),nzo=o("model_type"),szo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),lzo=o("pretrained_model_name_or_path"),izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(":"),fzo=l(),H=a("ul"),n0=a("li"),rue=a("strong"),mzo=o("albert"),gzo=o(" \u2014 "),pX=a("a"),hzo=o("AlbertForTokenClassification"),pzo=o(" (ALBERT model)"),uzo=l(),s0=a("li"),tue=a("strong"),_zo=o("bert"),bzo=o(" \u2014 "),uX=a("a"),vzo=o("BertForTokenClassification"),Fzo=o(" (BERT model)"),Tzo=l(),l0=a("li"),aue=a("strong"),Mzo=o("big_bird"),Ezo=o(" \u2014 "),_X=a("a"),Czo=o("BigBirdForTokenClassification"),wzo=o(" (BigBird model)"),Azo=l(),i0=a("li"),nue=a("strong"),Lzo=o("bloom"),yzo=o(" \u2014 "),bX=a("a"),xzo=o("BloomForTokenClassification"),$zo=o(" (BLOOM model)"),kzo=l(),d0=a("li"),sue=a("strong"),Szo=o("camembert"),Rzo=o(" \u2014 "),vX=a("a"),Pzo=o("CamembertForTokenClassification"),Bzo=o(" (CamemBERT model)"),Izo=l(),c0=a("li"),lue=a("strong"),Nzo=o("canine"),qzo=o(" \u2014 "),FX=a("a"),jzo=o("CanineForTokenClassification"),Dzo=o(" (CANINE model)"),Gzo=l(),f0=a("li"),iue=a("strong"),Ozo=o("convbert"),Vzo=o(" \u2014 "),TX=a("a"),Xzo=o("ConvBertForTokenClassification"),zzo=o(" (ConvBERT model)"),Wzo=l(),m0=a("li"),due=a("strong"),Qzo=o("data2vec-text"),Hzo=o(" \u2014 "),MX=a("a"),Uzo=o("Data2VecTextForTokenClassification"),Jzo=o(" (Data2VecText model)"),Yzo=l(),g0=a("li"),cue=a("strong"),Kzo=o("deberta"),Zzo=o(" \u2014 "),EX=a("a"),eWo=o("DebertaForTokenClassification"),oWo=o(" (DeBERTa model)"),rWo=l(),h0=a("li"),fue=a("strong"),tWo=o("deberta-v2"),aWo=o(" \u2014 "),CX=a("a"),nWo=o("DebertaV2ForTokenClassification"),sWo=o(" (DeBERTa-v2 model)"),lWo=l(),p0=a("li"),mue=a("strong"),iWo=o("distilbert"),dWo=o(" \u2014 "),wX=a("a"),cWo=o("DistilBertForTokenClassification"),fWo=o(" (DistilBERT model)"),mWo=l(),u0=a("li"),gue=a("strong"),gWo=o("electra"),hWo=o(" \u2014 "),AX=a("a"),pWo=o("ElectraForTokenClassification"),uWo=o(" (ELECTRA model)"),_Wo=l(),_0=a("li"),hue=a("strong"),bWo=o("flaubert"),vWo=o(" \u2014 "),LX=a("a"),FWo=o("FlaubertForTokenClassification"),TWo=o(" (FlauBERT model)"),MWo=l(),b0=a("li"),pue=a("strong"),EWo=o("fnet"),CWo=o(" \u2014 "),yX=a("a"),wWo=o("FNetForTokenClassification"),AWo=o(" (FNet model)"),LWo=l(),v0=a("li"),uue=a("strong"),yWo=o("funnel"),xWo=o(" \u2014 "),xX=a("a"),$Wo=o("FunnelForTokenClassification"),kWo=o(" (Funnel Transformer model)"),SWo=l(),F0=a("li"),_ue=a("strong"),RWo=o("gpt2"),PWo=o(" \u2014 "),$X=a("a"),BWo=o("GPT2ForTokenClassification"),IWo=o(" (OpenAI GPT-2 model)"),NWo=l(),T0=a("li"),bue=a("strong"),qWo=o("ibert"),jWo=o(" \u2014 "),kX=a("a"),DWo=o("IBertForTokenClassification"),GWo=o(" (I-BERT model)"),OWo=l(),M0=a("li"),vue=a("strong"),VWo=o("layoutlm"),XWo=o(" \u2014 "),SX=a("a"),zWo=o("LayoutLMForTokenClassification"),WWo=o(" (LayoutLM model)"),QWo=l(),E0=a("li"),Fue=a("strong"),HWo=o("layoutlmv2"),UWo=o(" \u2014 "),RX=a("a"),JWo=o("LayoutLMv2ForTokenClassification"),YWo=o(" (LayoutLMv2 model)"),KWo=l(),C0=a("li"),Tue=a("strong"),ZWo=o("layoutlmv3"),eQo=o(" \u2014 "),PX=a("a"),oQo=o("LayoutLMv3ForTokenClassification"),rQo=o(" (LayoutLMv3 model)"),tQo=l(),w0=a("li"),Mue=a("strong"),aQo=o("longformer"),nQo=o(" \u2014 "),BX=a("a"),sQo=o("LongformerForTokenClassification"),lQo=o(" (Longformer model)"),iQo=l(),A0=a("li"),Eue=a("strong"),dQo=o("megatron-bert"),cQo=o(" \u2014 "),IX=a("a"),fQo=o("MegatronBertForTokenClassification"),mQo=o(" (Megatron-BERT model)"),gQo=l(),L0=a("li"),Cue=a("strong"),hQo=o("mobilebert"),pQo=o(" \u2014 "),NX=a("a"),uQo=o("MobileBertForTokenClassification"),_Qo=o(" (MobileBERT model)"),bQo=l(),y0=a("li"),wue=a("strong"),vQo=o("mpnet"),FQo=o(" \u2014 "),qX=a("a"),TQo=o("MPNetForTokenClassification"),MQo=o(" (MPNet model)"),EQo=l(),x0=a("li"),Aue=a("strong"),CQo=o("nystromformer"),wQo=o(" \u2014 "),jX=a("a"),AQo=o("NystromformerForTokenClassification"),LQo=o(" (Nystr\xF6mformer model)"),yQo=l(),$0=a("li"),Lue=a("strong"),xQo=o("qdqbert"),$Qo=o(" \u2014 "),DX=a("a"),kQo=o("QDQBertForTokenClassification"),SQo=o(" (QDQBert model)"),RQo=l(),k0=a("li"),yue=a("strong"),PQo=o("rembert"),BQo=o(" \u2014 "),GX=a("a"),IQo=o("RemBertForTokenClassification"),NQo=o(" (RemBERT model)"),qQo=l(),S0=a("li"),xue=a("strong"),jQo=o("roberta"),DQo=o(" \u2014 "),OX=a("a"),GQo=o("RobertaForTokenClassification"),OQo=o(" (RoBERTa model)"),VQo=l(),R0=a("li"),$ue=a("strong"),XQo=o("roformer"),zQo=o(" \u2014 "),VX=a("a"),WQo=o("RoFormerForTokenClassification"),QQo=o(" (RoFormer model)"),HQo=l(),P0=a("li"),kue=a("strong"),UQo=o("squeezebert"),JQo=o(" \u2014 "),XX=a("a"),YQo=o("SqueezeBertForTokenClassification"),KQo=o(" (SqueezeBERT model)"),ZQo=l(),B0=a("li"),Sue=a("strong"),eHo=o("xlm"),oHo=o(" \u2014 "),zX=a("a"),rHo=o("XLMForTokenClassification"),tHo=o(" (XLM model)"),aHo=l(),I0=a("li"),Rue=a("strong"),nHo=o("xlm-roberta"),sHo=o(" \u2014 "),WX=a("a"),lHo=o("XLMRobertaForTokenClassification"),iHo=o(" (XLM-RoBERTa model)"),dHo=l(),N0=a("li"),Pue=a("strong"),cHo=o("xlm-roberta-xl"),fHo=o(" \u2014 "),QX=a("a"),mHo=o("XLMRobertaXLForTokenClassification"),gHo=o(" (XLM-RoBERTa-XL model)"),hHo=l(),q0=a("li"),Bue=a("strong"),pHo=o("xlnet"),uHo=o(" \u2014 "),HX=a("a"),_Ho=o("XLNetForTokenClassification"),bHo=o(" (XLNet model)"),vHo=l(),j0=a("li"),Iue=a("strong"),FHo=o("yoso"),THo=o(" \u2014 "),UX=a("a"),MHo=o("YosoForTokenClassification"),EHo=o(" (YOSO model)"),CHo=l(),D0=a("p"),wHo=o("The model is set in evaluation mode by default using "),Nue=a("code"),AHo=o("model.eval()"),LHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),yHo=o("model.train()"),xHo=l(),F(G0.$$.fragment),qGe=l(),dd=a("h2"),O0=a("a"),jue=a("span"),F(qL.$$.fragment),$Ho=l(),Due=a("span"),kHo=o("AutoModelForQuestionAnswering"),jGe=l(),qo=a("div"),F(jL.$$.fragment),SHo=l(),cd=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JX=a("a"),PHo=o("from_pretrained()"),BHo=o(" class method or the "),YX=a("a"),IHo=o("from_config()"),NHo=o(` class
method.`),qHo=l(),DL=a("p"),jHo=o("This class cannot be instantiated directly using "),Gue=a("code"),DHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),pt=a("div"),F(GL.$$.fragment),VHo=l(),Oue=a("p"),XHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zHo=l(),fd=a("p"),WHo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),QHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),UHo=o("from_pretrained()"),JHo=o(" to load the model weights."),YHo=l(),F(V0.$$.fragment),KHo=l(),no=a("div"),F(OL.$$.fragment),ZHo=l(),Xue=a("p"),eUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oUo=l(),Oa=a("p"),rUo=o("The model class to instantiate is selected based on the "),zue=a("code"),tUo=o("model_type"),aUo=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(":"),dUo=l(),V=a("ul"),X0=a("li"),Hue=a("strong"),cUo=o("albert"),fUo=o(" \u2014 "),ZX=a("a"),mUo=o("AlbertForQuestionAnswering"),gUo=o(" (ALBERT model)"),hUo=l(),z0=a("li"),Uue=a("strong"),pUo=o("bart"),uUo=o(" \u2014 "),ez=a("a"),_Uo=o("BartForQuestionAnswering"),bUo=o(" (BART model)"),vUo=l(),W0=a("li"),Jue=a("strong"),FUo=o("bert"),TUo=o(" \u2014 "),oz=a("a"),MUo=o("BertForQuestionAnswering"),EUo=o(" (BERT model)"),CUo=l(),Q0=a("li"),Yue=a("strong"),wUo=o("big_bird"),AUo=o(" \u2014 "),rz=a("a"),LUo=o("BigBirdForQuestionAnswering"),yUo=o(" (BigBird model)"),xUo=l(),H0=a("li"),Kue=a("strong"),$Uo=o("bigbird_pegasus"),kUo=o(" \u2014 "),tz=a("a"),SUo=o("BigBirdPegasusForQuestionAnswering"),RUo=o(" (BigBird-Pegasus model)"),PUo=l(),U0=a("li"),Zue=a("strong"),BUo=o("camembert"),IUo=o(" \u2014 "),az=a("a"),NUo=o("CamembertForQuestionAnswering"),qUo=o(" (CamemBERT model)"),jUo=l(),J0=a("li"),e_e=a("strong"),DUo=o("canine"),GUo=o(" \u2014 "),nz=a("a"),OUo=o("CanineForQuestionAnswering"),VUo=o(" (CANINE model)"),XUo=l(),Y0=a("li"),o_e=a("strong"),zUo=o("convbert"),WUo=o(" \u2014 "),sz=a("a"),QUo=o("ConvBertForQuestionAnswering"),HUo=o(" (ConvBERT model)"),UUo=l(),K0=a("li"),r_e=a("strong"),JUo=o("data2vec-text"),YUo=o(" \u2014 "),lz=a("a"),KUo=o("Data2VecTextForQuestionAnswering"),ZUo=o(" (Data2VecText model)"),eJo=l(),Z0=a("li"),t_e=a("strong"),oJo=o("deberta"),rJo=o(" \u2014 "),iz=a("a"),tJo=o("DebertaForQuestionAnswering"),aJo=o(" (DeBERTa model)"),nJo=l(),eF=a("li"),a_e=a("strong"),sJo=o("deberta-v2"),lJo=o(" \u2014 "),dz=a("a"),iJo=o("DebertaV2ForQuestionAnswering"),dJo=o(" (DeBERTa-v2 model)"),cJo=l(),oF=a("li"),n_e=a("strong"),fJo=o("distilbert"),mJo=o(" \u2014 "),cz=a("a"),gJo=o("DistilBertForQuestionAnswering"),hJo=o(" (DistilBERT model)"),pJo=l(),rF=a("li"),s_e=a("strong"),uJo=o("electra"),_Jo=o(" \u2014 "),fz=a("a"),bJo=o("ElectraForQuestionAnswering"),vJo=o(" (ELECTRA model)"),FJo=l(),tF=a("li"),l_e=a("strong"),TJo=o("flaubert"),MJo=o(" \u2014 "),mz=a("a"),EJo=o("FlaubertForQuestionAnsweringSimple"),CJo=o(" (FlauBERT model)"),wJo=l(),aF=a("li"),i_e=a("strong"),AJo=o("fnet"),LJo=o(" \u2014 "),gz=a("a"),yJo=o("FNetForQuestionAnswering"),xJo=o(" (FNet model)"),$Jo=l(),nF=a("li"),d_e=a("strong"),kJo=o("funnel"),SJo=o(" \u2014 "),hz=a("a"),RJo=o("FunnelForQuestionAnswering"),PJo=o(" (Funnel Transformer model)"),BJo=l(),sF=a("li"),c_e=a("strong"),IJo=o("gptj"),NJo=o(" \u2014 "),pz=a("a"),qJo=o("GPTJForQuestionAnswering"),jJo=o(" (GPT-J model)"),DJo=l(),lF=a("li"),f_e=a("strong"),GJo=o("ibert"),OJo=o(" \u2014 "),uz=a("a"),VJo=o("IBertForQuestionAnswering"),XJo=o(" (I-BERT model)"),zJo=l(),iF=a("li"),m_e=a("strong"),WJo=o("layoutlmv2"),QJo=o(" \u2014 "),_z=a("a"),HJo=o("LayoutLMv2ForQuestionAnswering"),UJo=o(" (LayoutLMv2 model)"),JJo=l(),dF=a("li"),g_e=a("strong"),YJo=o("layoutlmv3"),KJo=o(" \u2014 "),bz=a("a"),ZJo=o("LayoutLMv3ForQuestionAnswering"),eYo=o(" (LayoutLMv3 model)"),oYo=l(),cF=a("li"),h_e=a("strong"),rYo=o("led"),tYo=o(" \u2014 "),vz=a("a"),aYo=o("LEDForQuestionAnswering"),nYo=o(" (LED model)"),sYo=l(),fF=a("li"),p_e=a("strong"),lYo=o("longformer"),iYo=o(" \u2014 "),Fz=a("a"),dYo=o("LongformerForQuestionAnswering"),cYo=o(" (Longformer model)"),fYo=l(),mF=a("li"),u_e=a("strong"),mYo=o("lxmert"),gYo=o(" \u2014 "),Tz=a("a"),hYo=o("LxmertForQuestionAnswering"),pYo=o(" (LXMERT model)"),uYo=l(),gF=a("li"),__e=a("strong"),_Yo=o("mbart"),bYo=o(" \u2014 "),Mz=a("a"),vYo=o("MBartForQuestionAnswering"),FYo=o(" (mBART model)"),TYo=l(),hF=a("li"),b_e=a("strong"),MYo=o("megatron-bert"),EYo=o(" \u2014 "),Ez=a("a"),CYo=o("MegatronBertForQuestionAnswering"),wYo=o(" (Megatron-BERT model)"),AYo=l(),pF=a("li"),v_e=a("strong"),LYo=o("mobilebert"),yYo=o(" \u2014 "),Cz=a("a"),xYo=o("MobileBertForQuestionAnswering"),$Yo=o(" (MobileBERT model)"),kYo=l(),uF=a("li"),F_e=a("strong"),SYo=o("mpnet"),RYo=o(" \u2014 "),wz=a("a"),PYo=o("MPNetForQuestionAnswering"),BYo=o(" (MPNet model)"),IYo=l(),_F=a("li"),T_e=a("strong"),NYo=o("nystromformer"),qYo=o(" \u2014 "),Az=a("a"),jYo=o("NystromformerForQuestionAnswering"),DYo=o(" (Nystr\xF6mformer model)"),GYo=l(),bF=a("li"),M_e=a("strong"),OYo=o("qdqbert"),VYo=o(" \u2014 "),Lz=a("a"),XYo=o("QDQBertForQuestionAnswering"),zYo=o(" (QDQBert model)"),WYo=l(),vF=a("li"),E_e=a("strong"),QYo=o("reformer"),HYo=o(" \u2014 "),yz=a("a"),UYo=o("ReformerForQuestionAnswering"),JYo=o(" (Reformer model)"),YYo=l(),FF=a("li"),C_e=a("strong"),KYo=o("rembert"),ZYo=o(" \u2014 "),xz=a("a"),eKo=o("RemBertForQuestionAnswering"),oKo=o(" (RemBERT model)"),rKo=l(),TF=a("li"),w_e=a("strong"),tKo=o("roberta"),aKo=o(" \u2014 "),$z=a("a"),nKo=o("RobertaForQuestionAnswering"),sKo=o(" (RoBERTa model)"),lKo=l(),MF=a("li"),A_e=a("strong"),iKo=o("roformer"),dKo=o(" \u2014 "),kz=a("a"),cKo=o("RoFormerForQuestionAnswering"),fKo=o(" (RoFormer model)"),mKo=l(),EF=a("li"),L_e=a("strong"),gKo=o("splinter"),hKo=o(" \u2014 "),Sz=a("a"),pKo=o("SplinterForQuestionAnswering"),uKo=o(" (Splinter model)"),_Ko=l(),CF=a("li"),y_e=a("strong"),bKo=o("squeezebert"),vKo=o(" \u2014 "),Rz=a("a"),FKo=o("SqueezeBertForQuestionAnswering"),TKo=o(" (SqueezeBERT model)"),MKo=l(),wF=a("li"),x_e=a("strong"),EKo=o("xlm"),CKo=o(" \u2014 "),Pz=a("a"),wKo=o("XLMForQuestionAnsweringSimple"),AKo=o(" (XLM model)"),LKo=l(),AF=a("li"),$_e=a("strong"),yKo=o("xlm-roberta"),xKo=o(" \u2014 "),Bz=a("a"),$Ko=o("XLMRobertaForQuestionAnswering"),kKo=o(" (XLM-RoBERTa model)"),SKo=l(),LF=a("li"),k_e=a("strong"),RKo=o("xlm-roberta-xl"),PKo=o(" \u2014 "),Iz=a("a"),BKo=o("XLMRobertaXLForQuestionAnswering"),IKo=o(" (XLM-RoBERTa-XL model)"),NKo=l(),yF=a("li"),S_e=a("strong"),qKo=o("xlnet"),jKo=o(" \u2014 "),Nz=a("a"),DKo=o("XLNetForQuestionAnsweringSimple"),GKo=o(" (XLNet model)"),OKo=l(),xF=a("li"),R_e=a("strong"),VKo=o("yoso"),XKo=o(" \u2014 "),qz=a("a"),zKo=o("YosoForQuestionAnswering"),WKo=o(" (YOSO model)"),QKo=l(),$F=a("p"),HKo=o("The model is set in evaluation mode by default using "),P_e=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),YKo=o("model.train()"),KKo=l(),F(kF.$$.fragment),DGe=l(),md=a("h2"),SF=a("a"),I_e=a("span"),F(VL.$$.fragment),ZKo=l(),N_e=a("span"),eZo=o("AutoModelForTableQuestionAnswering"),GGe=l(),jo=a("div"),F(XL.$$.fragment),oZo=l(),gd=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jz=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),Dz=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),zL=a("p"),iZo=o("This class cannot be instantiated directly using "),q_e=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),ut=a("div"),F(WL.$$.fragment),mZo=l(),j_e=a("p"),gZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hZo=l(),hd=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),uZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(RF.$$.fragment),TZo=l(),so=a("div"),F(QL.$$.fragment),MZo=l(),G_e=a("p"),EZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CZo=l(),Va=a("p"),wZo=o("The model class to instantiate is selected based on the "),O_e=a("code"),AZo=o("model_type"),LZo=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),yZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),z_e=a("ul"),PF=a("li"),W_e=a("strong"),RZo=o("tapas"),PZo=o(" \u2014 "),Oz=a("a"),BZo=o("TapasForQuestionAnswering"),IZo=o(" (TAPAS model)"),NZo=l(),BF=a("p"),qZo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),jZo=o("model.eval()"),DZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),GZo=o("model.train()"),OZo=l(),F(IF.$$.fragment),OGe=l(),pd=a("h2"),NF=a("a"),U_e=a("span"),F(HL.$$.fragment),VZo=l(),J_e=a("span"),XZo=o("AutoModelForImageClassification"),VGe=l(),Do=a("div"),F(UL.$$.fragment),zZo=l(),ud=a("p"),WZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vz=a("a"),QZo=o("from_pretrained()"),HZo=o(" class method or the "),Xz=a("a"),UZo=o("from_config()"),JZo=o(` class
method.`),YZo=l(),JL=a("p"),KZo=o("This class cannot be instantiated directly using "),Y_e=a("code"),ZZo=o("__init__()"),eer=o(" (throws an error)."),oer=l(),_t=a("div"),F(YL.$$.fragment),rer=l(),K_e=a("p"),ter=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aer=l(),_d=a("p"),ner=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),ser=o("not"),ler=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),ier=o("from_pretrained()"),der=o(" to load the model weights."),cer=l(),F(qF.$$.fragment),fer=l(),lo=a("div"),F(KL.$$.fragment),mer=l(),e1e=a("p"),ger=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),her=l(),Xa=a("p"),per=o("The model class to instantiate is selected based on the "),o1e=a("code"),uer=o("model_type"),_er=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),Fer=o("pretrained_model_name_or_path"),Ter=o(":"),Mer=l(),Fe=a("ul"),jF=a("li"),a1e=a("strong"),Eer=o("beit"),Cer=o(" \u2014 "),Wz=a("a"),wer=o("BeitForImageClassification"),Aer=o(" (BEiT model)"),Ler=l(),DF=a("li"),n1e=a("strong"),yer=o("convnext"),xer=o(" \u2014 "),Qz=a("a"),$er=o("ConvNextForImageClassification"),ker=o(" (ConvNeXT model)"),Ser=l(),GF=a("li"),s1e=a("strong"),Rer=o("cvt"),Per=o(" \u2014 "),Hz=a("a"),Ber=o("CvtForImageClassification"),Ier=o(" (CvT model)"),Ner=l(),OF=a("li"),l1e=a("strong"),qer=o("data2vec-vision"),jer=o(" \u2014 "),Uz=a("a"),Der=o("Data2VecVisionForImageClassification"),Ger=o(" (Data2VecVision model)"),Oer=l(),Os=a("li"),i1e=a("strong"),Ver=o("deit"),Xer=o(" \u2014 "),Jz=a("a"),zer=o("DeiTForImageClassification"),Wer=o(" or "),Yz=a("a"),Qer=o("DeiTForImageClassificationWithTeacher"),Her=o(" (DeiT model)"),Uer=l(),VF=a("li"),d1e=a("strong"),Jer=o("imagegpt"),Yer=o(" \u2014 "),Kz=a("a"),Ker=o("ImageGPTForImageClassification"),Zer=o(" (ImageGPT model)"),eor=l(),Vs=a("li"),c1e=a("strong"),oor=o("levit"),ror=o(" \u2014 "),Zz=a("a"),tor=o("LevitForImageClassification"),aor=o(" or "),eW=a("a"),nor=o("LevitForImageClassificationWithTeacher"),sor=o(" (LeViT model)"),lor=l(),bt=a("li"),f1e=a("strong"),ior=o("perceiver"),dor=o(" \u2014 "),oW=a("a"),cor=o("PerceiverForImageClassificationLearned"),mor=o(" or "),rW=a("a"),gor=o("PerceiverForImageClassificationFourier"),hor=o(" or "),tW=a("a"),por=o("PerceiverForImageClassificationConvProcessing"),uor=o(" (Perceiver model)"),_or=l(),XF=a("li"),m1e=a("strong"),bor=o("poolformer"),vor=o(" \u2014 "),aW=a("a"),For=o("PoolFormerForImageClassification"),Tor=o(" (PoolFormer model)"),Mor=l(),zF=a("li"),g1e=a("strong"),Eor=o("regnet"),Cor=o(" \u2014 "),nW=a("a"),wor=o("RegNetForImageClassification"),Aor=o(" (RegNet model)"),Lor=l(),WF=a("li"),h1e=a("strong"),yor=o("resnet"),xor=o(" \u2014 "),sW=a("a"),$or=o("ResNetForImageClassification"),kor=o(" (ResNet model)"),Sor=l(),QF=a("li"),p1e=a("strong"),Ror=o("segformer"),Por=o(" \u2014 "),lW=a("a"),Bor=o("SegformerForImageClassification"),Ior=o(" (SegFormer model)"),Nor=l(),HF=a("li"),u1e=a("strong"),qor=o("swin"),jor=o(" \u2014 "),iW=a("a"),Dor=o("SwinForImageClassification"),Gor=o(" (Swin Transformer model)"),Oor=l(),UF=a("li"),_1e=a("strong"),Vor=o("van"),Xor=o(" \u2014 "),dW=a("a"),zor=o("VanForImageClassification"),Wor=o(" (VAN model)"),Qor=l(),JF=a("li"),b1e=a("strong"),Hor=o("vit"),Uor=o(" \u2014 "),cW=a("a"),Jor=o("ViTForImageClassification"),Yor=o(" (ViT model)"),Kor=l(),YF=a("p"),Zor=o("The model is set in evaluation mode by default using "),v1e=a("code"),err=o("model.eval()"),orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),rrr=o("model.train()"),trr=l(),F(KF.$$.fragment),XGe=l(),bd=a("h2"),ZF=a("a"),T1e=a("span"),F(ZL.$$.fragment),arr=l(),M1e=a("span"),nrr=o("AutoModelForVision2Seq"),zGe=l(),Go=a("div"),F(ey.$$.fragment),srr=l(),vd=a("p"),lrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fW=a("a"),irr=o("from_pretrained()"),drr=o(" class method or the "),mW=a("a"),crr=o("from_config()"),frr=o(` class
method.`),mrr=l(),oy=a("p"),grr=o("This class cannot be instantiated directly using "),E1e=a("code"),hrr=o("__init__()"),prr=o(" (throws an error)."),urr=l(),vt=a("div"),F(ry.$$.fragment),_rr=l(),C1e=a("p"),brr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vrr=l(),Fd=a("p"),Frr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Trr=o("not"),Mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Err=o("from_pretrained()"),Crr=o(" to load the model weights."),wrr=l(),F(e6.$$.fragment),Arr=l(),io=a("div"),F(ty.$$.fragment),Lrr=l(),A1e=a("p"),yrr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xrr=l(),za=a("p"),$rr=o("The model class to instantiate is selected based on the "),L1e=a("code"),krr=o("model_type"),Srr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Rrr=o("pretrained_model_name_or_path"),Prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),Brr=o("pretrained_model_name_or_path"),Irr=o(":"),Nrr=l(),$1e=a("ul"),o6=a("li"),k1e=a("strong"),qrr=o("vision-encoder-decoder"),jrr=o(" \u2014 "),hW=a("a"),Drr=o("VisionEncoderDecoderModel"),Grr=o(" (Vision Encoder decoder model)"),Orr=l(),r6=a("p"),Vrr=o("The model is set in evaluation mode by default using "),S1e=a("code"),Xrr=o("model.eval()"),zrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),Wrr=o("model.train()"),Qrr=l(),F(t6.$$.fragment),WGe=l(),Td=a("h2"),a6=a("a"),P1e=a("span"),F(ay.$$.fragment),Hrr=l(),B1e=a("span"),Urr=o("AutoModelForVisualQuestionAnswering"),QGe=l(),Oo=a("div"),F(ny.$$.fragment),Jrr=l(),Md=a("p"),Yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),pW=a("a"),Krr=o("from_pretrained()"),Zrr=o(" class method or the "),uW=a("a"),etr=o("from_config()"),otr=o(` class
method.`),rtr=l(),sy=a("p"),ttr=o("This class cannot be instantiated directly using "),I1e=a("code"),atr=o("__init__()"),ntr=o(" (throws an error)."),str=l(),Ft=a("div"),F(ly.$$.fragment),ltr=l(),N1e=a("p"),itr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),dtr=l(),Ed=a("p"),ctr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),ftr=o("not"),mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),gtr=o("from_pretrained()"),htr=o(" to load the model weights."),ptr=l(),F(n6.$$.fragment),utr=l(),co=a("div"),F(iy.$$.fragment),_tr=l(),j1e=a("p"),btr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),vtr=l(),Wa=a("p"),Ftr=o("The model class to instantiate is selected based on the "),D1e=a("code"),Ttr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),Etr=o("pretrained_model_name_or_path"),Ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),Ltr=l(),V1e=a("ul"),s6=a("li"),X1e=a("strong"),ytr=o("vilt"),xtr=o(" \u2014 "),bW=a("a"),$tr=o("ViltForQuestionAnswering"),ktr=o(" (ViLT model)"),Str=l(),l6=a("p"),Rtr=o("The model is set in evaluation mode by default using "),z1e=a("code"),Ptr=o("model.eval()"),Btr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=a("code"),Itr=o("model.train()"),Ntr=l(),F(i6.$$.fragment),HGe=l(),Cd=a("h2"),d6=a("a"),Q1e=a("span"),F(dy.$$.fragment),qtr=l(),H1e=a("span"),jtr=o("AutoModelForAudioClassification"),UGe=l(),Vo=a("div"),F(cy.$$.fragment),Dtr=l(),wd=a("p"),Gtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vW=a("a"),Otr=o("from_pretrained()"),Vtr=o(" class method or the "),FW=a("a"),Xtr=o("from_config()"),ztr=o(` class
method.`),Wtr=l(),fy=a("p"),Qtr=o("This class cannot be instantiated directly using "),U1e=a("code"),Htr=o("__init__()"),Utr=o(" (throws an error)."),Jtr=l(),Tt=a("div"),F(my.$$.fragment),Ytr=l(),J1e=a("p"),Ktr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ztr=l(),Ad=a("p"),ear=o(`Note:
Loading a model from its configuration file does `),Y1e=a("strong"),oar=o("not"),rar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),tar=o("from_pretrained()"),aar=o(" to load the model weights."),nar=l(),F(c6.$$.fragment),sar=l(),fo=a("div"),F(gy.$$.fragment),lar=l(),K1e=a("p"),iar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dar=l(),Qa=a("p"),car=o("The model class to instantiate is selected based on the "),Z1e=a("code"),far=o("model_type"),mar=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),gar=o("pretrained_model_name_or_path"),har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),par=o("pretrained_model_name_or_path"),uar=o(":"),_ar=l(),Pe=a("ul"),f6=a("li"),r2e=a("strong"),bar=o("data2vec-audio"),Far=o(" \u2014 "),MW=a("a"),Tar=o("Data2VecAudioForSequenceClassification"),Mar=o(" (Data2VecAudio model)"),Ear=l(),m6=a("li"),t2e=a("strong"),Car=o("hubert"),war=o(" \u2014 "),EW=a("a"),Aar=o("HubertForSequenceClassification"),Lar=o(" (Hubert model)"),yar=l(),g6=a("li"),a2e=a("strong"),xar=o("sew"),$ar=o(" \u2014 "),CW=a("a"),kar=o("SEWForSequenceClassification"),Sar=o(" (SEW model)"),Rar=l(),h6=a("li"),n2e=a("strong"),Par=o("sew-d"),Bar=o(" \u2014 "),wW=a("a"),Iar=o("SEWDForSequenceClassification"),Nar=o(" (SEW-D model)"),qar=l(),p6=a("li"),s2e=a("strong"),jar=o("unispeech"),Dar=o(" \u2014 "),AW=a("a"),Gar=o("UniSpeechForSequenceClassification"),Oar=o(" (UniSpeech model)"),Var=l(),u6=a("li"),l2e=a("strong"),Xar=o("unispeech-sat"),zar=o(" \u2014 "),LW=a("a"),War=o("UniSpeechSatForSequenceClassification"),Qar=o(" (UniSpeechSat model)"),Har=l(),_6=a("li"),i2e=a("strong"),Uar=o("wav2vec2"),Jar=o(" \u2014 "),yW=a("a"),Yar=o("Wav2Vec2ForSequenceClassification"),Kar=o(" (Wav2Vec2 model)"),Zar=l(),b6=a("li"),d2e=a("strong"),enr=o("wav2vec2-conformer"),onr=o(" \u2014 "),xW=a("a"),rnr=o("Wav2Vec2ConformerForSequenceClassification"),tnr=o(" (Wav2Vec2-Conformer model)"),anr=l(),v6=a("li"),c2e=a("strong"),nnr=o("wavlm"),snr=o(" \u2014 "),$W=a("a"),lnr=o("WavLMForSequenceClassification"),inr=o(" (WavLM model)"),dnr=l(),F6=a("p"),cnr=o("The model is set in evaluation mode by default using "),f2e=a("code"),fnr=o("model.eval()"),mnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),gnr=o("model.train()"),hnr=l(),F(T6.$$.fragment),JGe=l(),Ld=a("h2"),M6=a("a"),g2e=a("span"),F(hy.$$.fragment),pnr=l(),h2e=a("span"),unr=o("AutoModelForAudioFrameClassification"),YGe=l(),Xo=a("div"),F(py.$$.fragment),_nr=l(),yd=a("p"),bnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kW=a("a"),vnr=o("from_pretrained()"),Fnr=o(" class method or the "),SW=a("a"),Tnr=o("from_config()"),Mnr=o(` class
method.`),Enr=l(),uy=a("p"),Cnr=o("This class cannot be instantiated directly using "),p2e=a("code"),wnr=o("__init__()"),Anr=o(" (throws an error)."),Lnr=l(),Mt=a("div"),F(_y.$$.fragment),ynr=l(),u2e=a("p"),xnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$nr=l(),xd=a("p"),knr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),Snr=o("not"),Rnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Pnr=o("from_pretrained()"),Bnr=o(" to load the model weights."),Inr=l(),F(E6.$$.fragment),Nnr=l(),mo=a("div"),F(by.$$.fragment),qnr=l(),b2e=a("p"),jnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dnr=l(),Ha=a("p"),Gnr=o("The model class to instantiate is selected based on the "),v2e=a("code"),Onr=o("model_type"),Vnr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),Wnr=o("pretrained_model_name_or_path"),Qnr=o(":"),Hnr=l(),et=a("ul"),C6=a("li"),M2e=a("strong"),Unr=o("data2vec-audio"),Jnr=o(" \u2014 "),PW=a("a"),Ynr=o("Data2VecAudioForAudioFrameClassification"),Knr=o(" (Data2VecAudio model)"),Znr=l(),w6=a("li"),E2e=a("strong"),esr=o("unispeech-sat"),osr=o(" \u2014 "),BW=a("a"),rsr=o("UniSpeechSatForAudioFrameClassification"),tsr=o(" (UniSpeechSat model)"),asr=l(),A6=a("li"),C2e=a("strong"),nsr=o("wav2vec2"),ssr=o(" \u2014 "),IW=a("a"),lsr=o("Wav2Vec2ForAudioFrameClassification"),isr=o(" (Wav2Vec2 model)"),dsr=l(),L6=a("li"),w2e=a("strong"),csr=o("wav2vec2-conformer"),fsr=o(" \u2014 "),NW=a("a"),msr=o("Wav2Vec2ConformerForAudioFrameClassification"),gsr=o(" (Wav2Vec2-Conformer model)"),hsr=l(),y6=a("li"),A2e=a("strong"),psr=o("wavlm"),usr=o(" \u2014 "),qW=a("a"),_sr=o("WavLMForAudioFrameClassification"),bsr=o(" (WavLM model)"),vsr=l(),x6=a("p"),Fsr=o("The model is set in evaluation mode by default using "),L2e=a("code"),Tsr=o("model.eval()"),Msr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=a("code"),Esr=o("model.train()"),Csr=l(),F($6.$$.fragment),KGe=l(),$d=a("h2"),k6=a("a"),x2e=a("span"),F(vy.$$.fragment),wsr=l(),$2e=a("span"),Asr=o("AutoModelForCTC"),ZGe=l(),zo=a("div"),F(Fy.$$.fragment),Lsr=l(),kd=a("p"),ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),jW=a("a"),xsr=o("from_pretrained()"),$sr=o(" class method or the "),DW=a("a"),ksr=o("from_config()"),Ssr=o(` class
method.`),Rsr=l(),Ty=a("p"),Psr=o("This class cannot be instantiated directly using "),k2e=a("code"),Bsr=o("__init__()"),Isr=o(" (throws an error)."),Nsr=l(),Et=a("div"),F(My.$$.fragment),qsr=l(),S2e=a("p"),jsr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dsr=l(),Sd=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Osr=o("not"),Vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" to load the model weights."),Wsr=l(),F(S6.$$.fragment),Qsr=l(),go=a("div"),F(Ey.$$.fragment),Hsr=l(),P2e=a("p"),Usr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jsr=l(),Ua=a("p"),Ysr=o("The model class to instantiate is selected based on the "),B2e=a("code"),Ksr=o("model_type"),Zsr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(":"),alr=l(),Le=a("ul"),R6=a("li"),q2e=a("strong"),nlr=o("data2vec-audio"),slr=o(" \u2014 "),OW=a("a"),llr=o("Data2VecAudioForCTC"),ilr=o(" (Data2VecAudio model)"),dlr=l(),P6=a("li"),j2e=a("strong"),clr=o("hubert"),flr=o(" \u2014 "),VW=a("a"),mlr=o("HubertForCTC"),glr=o(" (Hubert model)"),hlr=l(),B6=a("li"),D2e=a("strong"),plr=o("mctct"),ulr=o(" \u2014 "),XW=a("a"),_lr=o("MCTCTForCTC"),blr=o(" (M-CTC-T model)"),vlr=l(),I6=a("li"),G2e=a("strong"),Flr=o("sew"),Tlr=o(" \u2014 "),zW=a("a"),Mlr=o("SEWForCTC"),Elr=o(" (SEW model)"),Clr=l(),N6=a("li"),O2e=a("strong"),wlr=o("sew-d"),Alr=o(" \u2014 "),WW=a("a"),Llr=o("SEWDForCTC"),ylr=o(" (SEW-D model)"),xlr=l(),q6=a("li"),V2e=a("strong"),$lr=o("unispeech"),klr=o(" \u2014 "),QW=a("a"),Slr=o("UniSpeechForCTC"),Rlr=o(" (UniSpeech model)"),Plr=l(),j6=a("li"),X2e=a("strong"),Blr=o("unispeech-sat"),Ilr=o(" \u2014 "),HW=a("a"),Nlr=o("UniSpeechSatForCTC"),qlr=o(" (UniSpeechSat model)"),jlr=l(),D6=a("li"),z2e=a("strong"),Dlr=o("wav2vec2"),Glr=o(" \u2014 "),UW=a("a"),Olr=o("Wav2Vec2ForCTC"),Vlr=o(" (Wav2Vec2 model)"),Xlr=l(),G6=a("li"),W2e=a("strong"),zlr=o("wav2vec2-conformer"),Wlr=o(" \u2014 "),JW=a("a"),Qlr=o("Wav2Vec2ConformerForCTC"),Hlr=o(" (Wav2Vec2-Conformer model)"),Ulr=l(),O6=a("li"),Q2e=a("strong"),Jlr=o("wavlm"),Ylr=o(" \u2014 "),YW=a("a"),Klr=o("WavLMForCTC"),Zlr=o(" (WavLM model)"),eir=l(),V6=a("p"),oir=o("The model is set in evaluation mode by default using "),H2e=a("code"),rir=o("model.eval()"),tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),air=o("model.train()"),nir=l(),F(X6.$$.fragment),eOe=l(),Rd=a("h2"),z6=a("a"),J2e=a("span"),F(Cy.$$.fragment),sir=l(),Y2e=a("span"),lir=o("AutoModelForSpeechSeq2Seq"),oOe=l(),Wo=a("div"),F(wy.$$.fragment),iir=l(),Pd=a("p"),dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KW=a("a"),cir=o("from_pretrained()"),fir=o(" class method or the "),ZW=a("a"),mir=o("from_config()"),gir=o(` class
method.`),hir=l(),Ay=a("p"),pir=o("This class cannot be instantiated directly using "),K2e=a("code"),uir=o("__init__()"),_ir=o(" (throws an error)."),bir=l(),Ct=a("div"),F(Ly.$$.fragment),vir=l(),Z2e=a("p"),Fir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tir=l(),Bd=a("p"),Mir=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Eir=o("not"),Cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),wir=o("from_pretrained()"),Air=o(" to load the model weights."),Lir=l(),F(W6.$$.fragment),yir=l(),ho=a("div"),F(yy.$$.fragment),xir=l(),obe=a("p"),$ir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kir=l(),Ja=a("p"),Sir=o("The model class to instantiate is selected based on the "),rbe=a("code"),Rir=o("model_type"),Pir=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Bir=o("pretrained_model_name_or_path"),Iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Nir=o("pretrained_model_name_or_path"),qir=o(":"),jir=l(),xy=a("ul"),Q6=a("li"),nbe=a("strong"),Dir=o("speech-encoder-decoder"),Gir=o(" \u2014 "),oQ=a("a"),Oir=o("SpeechEncoderDecoderModel"),Vir=o(" (Speech Encoder decoder model)"),Xir=l(),H6=a("li"),sbe=a("strong"),zir=o("speech_to_text"),Wir=o(" \u2014 "),rQ=a("a"),Qir=o("Speech2TextForConditionalGeneration"),Hir=o(" (Speech2Text model)"),Uir=l(),U6=a("p"),Jir=o("The model is set in evaluation mode by default using "),lbe=a("code"),Yir=o("model.eval()"),Kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),Zir=o("model.train()"),edr=l(),F(J6.$$.fragment),rOe=l(),Id=a("h2"),Y6=a("a"),dbe=a("span"),F($y.$$.fragment),odr=l(),cbe=a("span"),rdr=o("AutoModelForAudioXVector"),tOe=l(),Qo=a("div"),F(ky.$$.fragment),tdr=l(),Nd=a("p"),adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),tQ=a("a"),ndr=o("from_pretrained()"),sdr=o(" class method or the "),aQ=a("a"),ldr=o("from_config()"),idr=o(` class
method.`),ddr=l(),Sy=a("p"),cdr=o("This class cannot be instantiated directly using "),fbe=a("code"),fdr=o("__init__()"),mdr=o(" (throws an error)."),gdr=l(),wt=a("div"),F(Ry.$$.fragment),hdr=l(),mbe=a("p"),pdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),udr=l(),qd=a("p"),_dr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),bdr=o("not"),vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Fdr=o("from_pretrained()"),Tdr=o(" to load the model weights."),Mdr=l(),F(K6.$$.fragment),Edr=l(),po=a("div"),F(Py.$$.fragment),Cdr=l(),hbe=a("p"),wdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Adr=l(),Ya=a("p"),Ldr=o("The model class to instantiate is selected based on the "),pbe=a("code"),ydr=o("model_type"),xdr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),$dr=o("pretrained_model_name_or_path"),kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Sdr=o("pretrained_model_name_or_path"),Rdr=o(":"),Pdr=l(),ot=a("ul"),Z6=a("li"),bbe=a("strong"),Bdr=o("data2vec-audio"),Idr=o(" \u2014 "),sQ=a("a"),Ndr=o("Data2VecAudioForXVector"),qdr=o(" (Data2VecAudio model)"),jdr=l(),eT=a("li"),vbe=a("strong"),Ddr=o("unispeech-sat"),Gdr=o(" \u2014 "),lQ=a("a"),Odr=o("UniSpeechSatForXVector"),Vdr=o(" (UniSpeechSat model)"),Xdr=l(),oT=a("li"),Fbe=a("strong"),zdr=o("wav2vec2"),Wdr=o(" \u2014 "),iQ=a("a"),Qdr=o("Wav2Vec2ForXVector"),Hdr=o(" (Wav2Vec2 model)"),Udr=l(),rT=a("li"),Tbe=a("strong"),Jdr=o("wav2vec2-conformer"),Ydr=o(" \u2014 "),dQ=a("a"),Kdr=o("Wav2Vec2ConformerForXVector"),Zdr=o(" (Wav2Vec2-Conformer model)"),ecr=l(),tT=a("li"),Mbe=a("strong"),ocr=o("wavlm"),rcr=o(" \u2014 "),cQ=a("a"),tcr=o("WavLMForXVector"),acr=o(" (WavLM model)"),ncr=l(),aT=a("p"),scr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),lcr=o("model.eval()"),icr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),dcr=o("model.train()"),ccr=l(),F(nT.$$.fragment),aOe=l(),jd=a("h2"),sT=a("a"),wbe=a("span"),F(By.$$.fragment),fcr=l(),Abe=a("span"),mcr=o("AutoModelForMaskedImageModeling"),nOe=l(),Ho=a("div"),F(Iy.$$.fragment),gcr=l(),Dd=a("p"),hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fQ=a("a"),pcr=o("from_pretrained()"),ucr=o(" class method or the "),mQ=a("a"),_cr=o("from_config()"),bcr=o(` class
method.`),vcr=l(),Ny=a("p"),Fcr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Tcr=o("__init__()"),Mcr=o(" (throws an error)."),Ecr=l(),At=a("div"),F(qy.$$.fragment),Ccr=l(),ybe=a("p"),wcr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Acr=l(),Gd=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),ycr=o("not"),xcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),$cr=o("from_pretrained()"),kcr=o(" to load the model weights."),Scr=l(),F(lT.$$.fragment),Rcr=l(),uo=a("div"),F(jy.$$.fragment),Pcr=l(),$be=a("p"),Bcr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Icr=l(),Ka=a("p"),Ncr=o("The model class to instantiate is selected based on the "),kbe=a("code"),qcr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Ocr=o("pretrained_model_name_or_path"),Vcr=o(":"),Xcr=l(),Od=a("ul"),iT=a("li"),Pbe=a("strong"),zcr=o("deit"),Wcr=o(" \u2014 "),hQ=a("a"),Qcr=o("DeiTForMaskedImageModeling"),Hcr=o(" (DeiT model)"),Ucr=l(),dT=a("li"),Bbe=a("strong"),Jcr=o("swin"),Ycr=o(" \u2014 "),pQ=a("a"),Kcr=o("SwinForMaskedImageModeling"),Zcr=o(" (Swin Transformer model)"),efr=l(),cT=a("li"),Ibe=a("strong"),ofr=o("vit"),rfr=o(" \u2014 "),uQ=a("a"),tfr=o("ViTForMaskedImageModeling"),afr=o(" (ViT model)"),nfr=l(),fT=a("p"),sfr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),lfr=o("model.eval()"),ifr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),dfr=o("model.train()"),cfr=l(),F(mT.$$.fragment),sOe=l(),Vd=a("h2"),gT=a("a"),jbe=a("span"),F(Dy.$$.fragment),ffr=l(),Dbe=a("span"),mfr=o("AutoModelForObjectDetection"),lOe=l(),Uo=a("div"),F(Gy.$$.fragment),gfr=l(),Xd=a("p"),hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_Q=a("a"),pfr=o("from_pretrained()"),ufr=o(" class method or the "),bQ=a("a"),_fr=o("from_config()"),bfr=o(` class
method.`),vfr=l(),Oy=a("p"),Ffr=o("This class cannot be instantiated directly using "),Gbe=a("code"),Tfr=o("__init__()"),Mfr=o(" (throws an error)."),Efr=l(),Lt=a("div"),F(Vy.$$.fragment),Cfr=l(),Obe=a("p"),wfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Afr=l(),zd=a("p"),Lfr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),yfr=o("not"),xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),$fr=o("from_pretrained()"),kfr=o(" to load the model weights."),Sfr=l(),F(hT.$$.fragment),Rfr=l(),_o=a("div"),F(Xy.$$.fragment),Pfr=l(),Xbe=a("p"),Bfr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ifr=l(),Za=a("p"),Nfr=o("The model class to instantiate is selected based on the "),zbe=a("code"),qfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),zy=a("ul"),pT=a("li"),Hbe=a("strong"),zfr=o("detr"),Wfr=o(" \u2014 "),FQ=a("a"),Qfr=o("DetrForObjectDetection"),Hfr=o(" (DETR model)"),Ufr=l(),uT=a("li"),Ube=a("strong"),Jfr=o("yolos"),Yfr=o(" \u2014 "),TQ=a("a"),Kfr=o("YolosForObjectDetection"),Zfr=o(" (YOLOS model)"),emr=l(),_T=a("p"),omr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),rmr=o("model.eval()"),tmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),amr=o("model.train()"),nmr=l(),F(bT.$$.fragment),iOe=l(),Wd=a("h2"),vT=a("a"),Kbe=a("span"),F(Wy.$$.fragment),smr=l(),Zbe=a("span"),lmr=o("AutoModelForImageSegmentation"),dOe=l(),Jo=a("div"),F(Qy.$$.fragment),imr=l(),Qd=a("p"),dmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MQ=a("a"),cmr=o("from_pretrained()"),fmr=o(" class method or the "),EQ=a("a"),mmr=o("from_config()"),gmr=o(` class
method.`),hmr=l(),Hy=a("p"),pmr=o("This class cannot be instantiated directly using "),eve=a("code"),umr=o("__init__()"),_mr=o(" (throws an error)."),bmr=l(),yt=a("div"),F(Uy.$$.fragment),vmr=l(),ove=a("p"),Fmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tmr=l(),Hd=a("p"),Mmr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),Emr=o("not"),Cmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),wmr=o("from_pretrained()"),Amr=o(" to load the model weights."),Lmr=l(),F(FT.$$.fragment),ymr=l(),bo=a("div"),F(Jy.$$.fragment),xmr=l(),tve=a("p"),$mr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kmr=l(),en=a("p"),Smr=o("The model class to instantiate is selected based on the "),ave=a("code"),Rmr=o("model_type"),Pmr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),Bmr=o("pretrained_model_name_or_path"),Imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),Nmr=o("pretrained_model_name_or_path"),qmr=o(":"),jmr=l(),lve=a("ul"),TT=a("li"),ive=a("strong"),Dmr=o("detr"),Gmr=o(" \u2014 "),wQ=a("a"),Omr=o("DetrForSegmentation"),Vmr=o(" (DETR model)"),Xmr=l(),MT=a("p"),zmr=o("The model is set in evaluation mode by default using "),dve=a("code"),Wmr=o("model.eval()"),Qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=a("code"),Hmr=o("model.train()"),Umr=l(),F(ET.$$.fragment),cOe=l(),Ud=a("h2"),CT=a("a"),fve=a("span"),F(Yy.$$.fragment),Jmr=l(),mve=a("span"),Ymr=o("AutoModelForSemanticSegmentation"),fOe=l(),Yo=a("div"),F(Ky.$$.fragment),Kmr=l(),Jd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AQ=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),LQ=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),Zy=a("p"),ngr=o("This class cannot be instantiated directly using "),gve=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),xt=a("div"),F(e9.$$.fragment),dgr=l(),hve=a("p"),cgr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fgr=l(),Yd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),pgr=o("from_pretrained()"),ugr=o(" to load the model weights."),_gr=l(),F(wT.$$.fragment),bgr=l(),vo=a("div"),F(o9.$$.fragment),vgr=l(),uve=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Tgr=l(),on=a("p"),Mgr=o("The model class to instantiate is selected based on the "),_ve=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),bve=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(":"),xgr=l(),rn=a("ul"),AT=a("li"),Fve=a("strong"),$gr=o("beit"),kgr=o(" \u2014 "),xQ=a("a"),Sgr=o("BeitForSemanticSegmentation"),Rgr=o(" (BEiT model)"),Pgr=l(),LT=a("li"),Tve=a("strong"),Bgr=o("data2vec-vision"),Igr=o(" \u2014 "),$Q=a("a"),Ngr=o("Data2VecVisionForSemanticSegmentation"),qgr=o(" (Data2VecVision model)"),jgr=l(),yT=a("li"),Mve=a("strong"),Dgr=o("dpt"),Ggr=o(" \u2014 "),kQ=a("a"),Ogr=o("DPTForSemanticSegmentation"),Vgr=o(" (DPT model)"),Xgr=l(),xT=a("li"),Eve=a("strong"),zgr=o("segformer"),Wgr=o(" \u2014 "),SQ=a("a"),Qgr=o("SegformerForSemanticSegmentation"),Hgr=o(" (SegFormer model)"),Ugr=l(),$T=a("p"),Jgr=o("The model is set in evaluation mode by default using "),Cve=a("code"),Ygr=o("model.eval()"),Kgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wve=a("code"),Zgr=o("model.train()"),ehr=l(),F(kT.$$.fragment),mOe=l(),Kd=a("h2"),ST=a("a"),Ave=a("span"),F(r9.$$.fragment),ohr=l(),Lve=a("span"),rhr=o("AutoModelForInstanceSegmentation"),gOe=l(),Ko=a("div"),F(t9.$$.fragment),thr=l(),Zd=a("p"),ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RQ=a("a"),nhr=o("from_pretrained()"),shr=o(" class method or the "),PQ=a("a"),lhr=o("from_config()"),ihr=o(` class
method.`),dhr=l(),a9=a("p"),chr=o("This class cannot be instantiated directly using "),yve=a("code"),fhr=o("__init__()"),mhr=o(" (throws an error)."),ghr=l(),$t=a("div"),F(n9.$$.fragment),hhr=l(),xve=a("p"),phr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uhr=l(),ec=a("p"),_hr=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),bhr=o("not"),vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),Fhr=o("from_pretrained()"),Thr=o(" to load the model weights."),Mhr=l(),F(RT.$$.fragment),Ehr=l(),Fo=a("div"),F(s9.$$.fragment),Chr=l(),kve=a("p"),whr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ahr=l(),tn=a("p"),Lhr=o("The model class to instantiate is selected based on the "),Sve=a("code"),yhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),$hr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Phr=l(),Bve=a("ul"),PT=a("li"),Ive=a("strong"),Bhr=o("maskformer"),Ihr=o(" \u2014 "),IQ=a("a"),Nhr=o("MaskFormerForInstanceSegmentation"),qhr=o(" (MaskFormer model)"),jhr=l(),BT=a("p"),Dhr=o("The model is set in evaluation mode by default using "),Nve=a("code"),Ghr=o("model.eval()"),Ohr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),Vhr=o("model.train()"),Xhr=l(),F(IT.$$.fragment),hOe=l(),oc=a("h2"),NT=a("a"),jve=a("span"),F(l9.$$.fragment),zhr=l(),Dve=a("span"),Whr=o("TFAutoModel"),pOe=l(),Zo=a("div"),F(i9.$$.fragment),Qhr=l(),rc=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),qQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),d9=a("p"),epr=o("This class cannot be instantiated directly using "),Gve=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),kt=a("div"),F(c9.$$.fragment),apr=l(),Ove=a("p"),npr=o("Instantiates one of the base model classes of the library from a configuration."),spr=l(),tc=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(qT.$$.fragment),gpr=l(),Lr=a("div"),F(f9.$$.fragment),hpr=l(),Xve=a("p"),ppr=o("Instantiate one of the base model classes of the library from a pretrained model."),upr=l(),an=a("p"),_pr=o("The model class to instantiate is selected based on the "),zve=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),q=a("ul"),jT=a("li"),Hve=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),DQ=a("a"),Lpr=o("TFAlbertModel"),ypr=o(" (ALBERT model)"),xpr=l(),DT=a("li"),Uve=a("strong"),$pr=o("bart"),kpr=o(" \u2014 "),GQ=a("a"),Spr=o("TFBartModel"),Rpr=o(" (BART model)"),Ppr=l(),GT=a("li"),Jve=a("strong"),Bpr=o("bert"),Ipr=o(" \u2014 "),OQ=a("a"),Npr=o("TFBertModel"),qpr=o(" (BERT model)"),jpr=l(),OT=a("li"),Yve=a("strong"),Dpr=o("blenderbot"),Gpr=o(" \u2014 "),VQ=a("a"),Opr=o("TFBlenderbotModel"),Vpr=o(" (Blenderbot model)"),Xpr=l(),VT=a("li"),Kve=a("strong"),zpr=o("blenderbot-small"),Wpr=o(" \u2014 "),XQ=a("a"),Qpr=o("TFBlenderbotSmallModel"),Hpr=o(" (BlenderbotSmall model)"),Upr=l(),XT=a("li"),Zve=a("strong"),Jpr=o("camembert"),Ypr=o(" \u2014 "),zQ=a("a"),Kpr=o("TFCamembertModel"),Zpr=o(" (CamemBERT model)"),eur=l(),zT=a("li"),e0e=a("strong"),our=o("clip"),rur=o(" \u2014 "),WQ=a("a"),tur=o("TFCLIPModel"),aur=o(" (CLIP model)"),nur=l(),WT=a("li"),o0e=a("strong"),sur=o("convbert"),lur=o(" \u2014 "),QQ=a("a"),iur=o("TFConvBertModel"),dur=o(" (ConvBERT model)"),cur=l(),QT=a("li"),r0e=a("strong"),fur=o("convnext"),mur=o(" \u2014 "),HQ=a("a"),gur=o("TFConvNextModel"),hur=o(" (ConvNeXT model)"),pur=l(),HT=a("li"),t0e=a("strong"),uur=o("ctrl"),_ur=o(" \u2014 "),UQ=a("a"),bur=o("TFCTRLModel"),vur=o(" (CTRL model)"),Fur=l(),UT=a("li"),a0e=a("strong"),Tur=o("data2vec-vision"),Mur=o(" \u2014 "),JQ=a("a"),Eur=o("TFData2VecVisionModel"),Cur=o(" (Data2VecVision model)"),wur=l(),JT=a("li"),n0e=a("strong"),Aur=o("deberta"),Lur=o(" \u2014 "),YQ=a("a"),yur=o("TFDebertaModel"),xur=o(" (DeBERTa model)"),$ur=l(),YT=a("li"),s0e=a("strong"),kur=o("deberta-v2"),Sur=o(" \u2014 "),KQ=a("a"),Rur=o("TFDebertaV2Model"),Pur=o(" (DeBERTa-v2 model)"),Bur=l(),KT=a("li"),l0e=a("strong"),Iur=o("deit"),Nur=o(" \u2014 "),ZQ=a("a"),qur=o("TFDeiTModel"),jur=o(" (DeiT model)"),Dur=l(),ZT=a("li"),i0e=a("strong"),Gur=o("distilbert"),Our=o(" \u2014 "),eH=a("a"),Vur=o("TFDistilBertModel"),Xur=o(" (DistilBERT model)"),zur=l(),e7=a("li"),d0e=a("strong"),Wur=o("dpr"),Qur=o(" \u2014 "),oH=a("a"),Hur=o("TFDPRQuestionEncoder"),Uur=o(" (DPR model)"),Jur=l(),o7=a("li"),c0e=a("strong"),Yur=o("electra"),Kur=o(" \u2014 "),rH=a("a"),Zur=o("TFElectraModel"),e_r=o(" (ELECTRA model)"),o_r=l(),r7=a("li"),f0e=a("strong"),r_r=o("flaubert"),t_r=o(" \u2014 "),tH=a("a"),a_r=o("TFFlaubertModel"),n_r=o(" (FlauBERT model)"),s_r=l(),Xs=a("li"),m0e=a("strong"),l_r=o("funnel"),i_r=o(" \u2014 "),aH=a("a"),d_r=o("TFFunnelModel"),c_r=o(" or "),nH=a("a"),f_r=o("TFFunnelBaseModel"),m_r=o(" (Funnel Transformer model)"),g_r=l(),t7=a("li"),g0e=a("strong"),h_r=o("gpt2"),p_r=o(" \u2014 "),sH=a("a"),u_r=o("TFGPT2Model"),__r=o(" (OpenAI GPT-2 model)"),b_r=l(),a7=a("li"),h0e=a("strong"),v_r=o("gptj"),F_r=o(" \u2014 "),lH=a("a"),T_r=o("TFGPTJModel"),M_r=o(" (GPT-J model)"),E_r=l(),n7=a("li"),p0e=a("strong"),C_r=o("hubert"),w_r=o(" \u2014 "),iH=a("a"),A_r=o("TFHubertModel"),L_r=o(" (Hubert model)"),y_r=l(),s7=a("li"),u0e=a("strong"),x_r=o("layoutlm"),$_r=o(" \u2014 "),dH=a("a"),k_r=o("TFLayoutLMModel"),S_r=o(" (LayoutLM model)"),R_r=l(),l7=a("li"),_0e=a("strong"),P_r=o("led"),B_r=o(" \u2014 "),cH=a("a"),I_r=o("TFLEDModel"),N_r=o(" (LED model)"),q_r=l(),i7=a("li"),b0e=a("strong"),j_r=o("longformer"),D_r=o(" \u2014 "),fH=a("a"),G_r=o("TFLongformerModel"),O_r=o(" (Longformer model)"),V_r=l(),d7=a("li"),v0e=a("strong"),X_r=o("lxmert"),z_r=o(" \u2014 "),mH=a("a"),W_r=o("TFLxmertModel"),Q_r=o(" (LXMERT model)"),H_r=l(),c7=a("li"),F0e=a("strong"),U_r=o("marian"),J_r=o(" \u2014 "),gH=a("a"),Y_r=o("TFMarianModel"),K_r=o(" (Marian model)"),Z_r=l(),f7=a("li"),T0e=a("strong"),e1r=o("mbart"),o1r=o(" \u2014 "),hH=a("a"),r1r=o("TFMBartModel"),t1r=o(" (mBART model)"),a1r=l(),m7=a("li"),M0e=a("strong"),n1r=o("mobilebert"),s1r=o(" \u2014 "),pH=a("a"),l1r=o("TFMobileBertModel"),i1r=o(" (MobileBERT model)"),d1r=l(),g7=a("li"),E0e=a("strong"),c1r=o("mpnet"),f1r=o(" \u2014 "),uH=a("a"),m1r=o("TFMPNetModel"),g1r=o(" (MPNet model)"),h1r=l(),h7=a("li"),C0e=a("strong"),p1r=o("mt5"),u1r=o(" \u2014 "),_H=a("a"),_1r=o("TFMT5Model"),b1r=o(" (MT5 model)"),v1r=l(),p7=a("li"),w0e=a("strong"),F1r=o("openai-gpt"),T1r=o(" \u2014 "),bH=a("a"),M1r=o("TFOpenAIGPTModel"),E1r=o(" (OpenAI GPT model)"),C1r=l(),u7=a("li"),A0e=a("strong"),w1r=o("opt"),A1r=o(" \u2014 "),vH=a("a"),L1r=o("TFOPTModel"),y1r=o(" (OPT model)"),x1r=l(),_7=a("li"),L0e=a("strong"),$1r=o("pegasus"),k1r=o(" \u2014 "),FH=a("a"),S1r=o("TFPegasusModel"),R1r=o(" (Pegasus model)"),P1r=l(),b7=a("li"),y0e=a("strong"),B1r=o("rembert"),I1r=o(" \u2014 "),TH=a("a"),N1r=o("TFRemBertModel"),q1r=o(" (RemBERT model)"),j1r=l(),v7=a("li"),x0e=a("strong"),D1r=o("roberta"),G1r=o(" \u2014 "),MH=a("a"),O1r=o("TFRobertaModel"),V1r=o(" (RoBERTa model)"),X1r=l(),F7=a("li"),$0e=a("strong"),z1r=o("roformer"),W1r=o(" \u2014 "),EH=a("a"),Q1r=o("TFRoFormerModel"),H1r=o(" (RoFormer model)"),U1r=l(),T7=a("li"),k0e=a("strong"),J1r=o("speech_to_text"),Y1r=o(" \u2014 "),CH=a("a"),K1r=o("TFSpeech2TextModel"),Z1r=o(" (Speech2Text model)"),e2r=l(),M7=a("li"),S0e=a("strong"),o2r=o("swin"),r2r=o(" \u2014 "),wH=a("a"),t2r=o("TFSwinModel"),a2r=o(" (Swin Transformer model)"),n2r=l(),E7=a("li"),R0e=a("strong"),s2r=o("t5"),l2r=o(" \u2014 "),AH=a("a"),i2r=o("TFT5Model"),d2r=o(" (T5 model)"),c2r=l(),C7=a("li"),P0e=a("strong"),f2r=o("tapas"),m2r=o(" \u2014 "),LH=a("a"),g2r=o("TFTapasModel"),h2r=o(" (TAPAS model)"),p2r=l(),w7=a("li"),B0e=a("strong"),u2r=o("transfo-xl"),_2r=o(" \u2014 "),yH=a("a"),b2r=o("TFTransfoXLModel"),v2r=o(" (Transformer-XL model)"),F2r=l(),A7=a("li"),I0e=a("strong"),T2r=o("vit"),M2r=o(" \u2014 "),xH=a("a"),E2r=o("TFViTModel"),C2r=o(" (ViT model)"),w2r=l(),L7=a("li"),N0e=a("strong"),A2r=o("vit_mae"),L2r=o(" \u2014 "),$H=a("a"),y2r=o("TFViTMAEModel"),x2r=o(" (ViTMAE model)"),$2r=l(),y7=a("li"),q0e=a("strong"),k2r=o("wav2vec2"),S2r=o(" \u2014 "),kH=a("a"),R2r=o("TFWav2Vec2Model"),P2r=o(" (Wav2Vec2 model)"),B2r=l(),x7=a("li"),j0e=a("strong"),I2r=o("xlm"),N2r=o(" \u2014 "),SH=a("a"),q2r=o("TFXLMModel"),j2r=o(" (XLM model)"),D2r=l(),$7=a("li"),D0e=a("strong"),G2r=o("xlm-roberta"),O2r=o(" \u2014 "),RH=a("a"),V2r=o("TFXLMRobertaModel"),X2r=o(" (XLM-RoBERTa model)"),z2r=l(),k7=a("li"),G0e=a("strong"),W2r=o("xlnet"),Q2r=o(" \u2014 "),PH=a("a"),H2r=o("TFXLNetModel"),U2r=o(" (XLNet model)"),J2r=l(),F(S7.$$.fragment),uOe=l(),ac=a("h2"),R7=a("a"),O0e=a("span"),F(m9.$$.fragment),Y2r=l(),V0e=a("span"),K2r=o("TFAutoModelForPreTraining"),_Oe=l(),er=a("div"),F(g9.$$.fragment),Z2r=l(),nc=a("p"),ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=a("a"),obr=o("from_pretrained()"),rbr=o(" class method or the "),IH=a("a"),tbr=o("from_config()"),abr=o(` class
method.`),nbr=l(),h9=a("p"),sbr=o("This class cannot be instantiated directly using "),X0e=a("code"),lbr=o("__init__()"),ibr=o(" (throws an error)."),dbr=l(),St=a("div"),F(p9.$$.fragment),cbr=l(),z0e=a("p"),fbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mbr=l(),sc=a("p"),gbr=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),hbr=o("not"),pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),ubr=o("from_pretrained()"),_br=o(" to load the model weights."),bbr=l(),F(P7.$$.fragment),vbr=l(),yr=a("div"),F(u9.$$.fragment),Fbr=l(),Q0e=a("p"),Tbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mbr=l(),nn=a("p"),Ebr=o("The model class to instantiate is selected based on the "),H0e=a("code"),Cbr=o("model_type"),wbr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),ybr=o("pretrained_model_name_or_path"),xbr=o(":"),$br=l(),se=a("ul"),B7=a("li"),Y0e=a("strong"),kbr=o("albert"),Sbr=o(" \u2014 "),qH=a("a"),Rbr=o("TFAlbertForPreTraining"),Pbr=o(" (ALBERT model)"),Bbr=l(),I7=a("li"),K0e=a("strong"),Ibr=o("bart"),Nbr=o(" \u2014 "),jH=a("a"),qbr=o("TFBartForConditionalGeneration"),jbr=o(" (BART model)"),Dbr=l(),N7=a("li"),Z0e=a("strong"),Gbr=o("bert"),Obr=o(" \u2014 "),DH=a("a"),Vbr=o("TFBertForPreTraining"),Xbr=o(" (BERT model)"),zbr=l(),q7=a("li"),eFe=a("strong"),Wbr=o("camembert"),Qbr=o(" \u2014 "),GH=a("a"),Hbr=o("TFCamembertForMaskedLM"),Ubr=o(" (CamemBERT model)"),Jbr=l(),j7=a("li"),oFe=a("strong"),Ybr=o("ctrl"),Kbr=o(" \u2014 "),OH=a("a"),Zbr=o("TFCTRLLMHeadModel"),evr=o(" (CTRL model)"),ovr=l(),D7=a("li"),rFe=a("strong"),rvr=o("distilbert"),tvr=o(" \u2014 "),VH=a("a"),avr=o("TFDistilBertForMaskedLM"),nvr=o(" (DistilBERT model)"),svr=l(),G7=a("li"),tFe=a("strong"),lvr=o("electra"),ivr=o(" \u2014 "),XH=a("a"),dvr=o("TFElectraForPreTraining"),cvr=o(" (ELECTRA model)"),fvr=l(),O7=a("li"),aFe=a("strong"),mvr=o("flaubert"),gvr=o(" \u2014 "),zH=a("a"),hvr=o("TFFlaubertWithLMHeadModel"),pvr=o(" (FlauBERT model)"),uvr=l(),V7=a("li"),nFe=a("strong"),_vr=o("funnel"),bvr=o(" \u2014 "),WH=a("a"),vvr=o("TFFunnelForPreTraining"),Fvr=o(" (Funnel Transformer model)"),Tvr=l(),X7=a("li"),sFe=a("strong"),Mvr=o("gpt2"),Evr=o(" \u2014 "),QH=a("a"),Cvr=o("TFGPT2LMHeadModel"),wvr=o(" (OpenAI GPT-2 model)"),Avr=l(),z7=a("li"),lFe=a("strong"),Lvr=o("layoutlm"),yvr=o(" \u2014 "),HH=a("a"),xvr=o("TFLayoutLMForMaskedLM"),$vr=o(" (LayoutLM model)"),kvr=l(),W7=a("li"),iFe=a("strong"),Svr=o("lxmert"),Rvr=o(" \u2014 "),UH=a("a"),Pvr=o("TFLxmertForPreTraining"),Bvr=o(" (LXMERT model)"),Ivr=l(),Q7=a("li"),dFe=a("strong"),Nvr=o("mobilebert"),qvr=o(" \u2014 "),JH=a("a"),jvr=o("TFMobileBertForPreTraining"),Dvr=o(" (MobileBERT model)"),Gvr=l(),H7=a("li"),cFe=a("strong"),Ovr=o("mpnet"),Vvr=o(" \u2014 "),YH=a("a"),Xvr=o("TFMPNetForMaskedLM"),zvr=o(" (MPNet model)"),Wvr=l(),U7=a("li"),fFe=a("strong"),Qvr=o("openai-gpt"),Hvr=o(" \u2014 "),KH=a("a"),Uvr=o("TFOpenAIGPTLMHeadModel"),Jvr=o(" (OpenAI GPT model)"),Yvr=l(),J7=a("li"),mFe=a("strong"),Kvr=o("roberta"),Zvr=o(" \u2014 "),ZH=a("a"),e0r=o("TFRobertaForMaskedLM"),o0r=o(" (RoBERTa model)"),r0r=l(),Y7=a("li"),gFe=a("strong"),t0r=o("t5"),a0r=o(" \u2014 "),eU=a("a"),n0r=o("TFT5ForConditionalGeneration"),s0r=o(" (T5 model)"),l0r=l(),K7=a("li"),hFe=a("strong"),i0r=o("tapas"),d0r=o(" \u2014 "),oU=a("a"),c0r=o("TFTapasForMaskedLM"),f0r=o(" (TAPAS model)"),m0r=l(),Z7=a("li"),pFe=a("strong"),g0r=o("transfo-xl"),h0r=o(" \u2014 "),rU=a("a"),p0r=o("TFTransfoXLLMHeadModel"),u0r=o(" (Transformer-XL model)"),_0r=l(),e8=a("li"),uFe=a("strong"),b0r=o("vit_mae"),v0r=o(" \u2014 "),tU=a("a"),F0r=o("TFViTMAEForPreTraining"),T0r=o(" (ViTMAE model)"),M0r=l(),o8=a("li"),_Fe=a("strong"),E0r=o("xlm"),C0r=o(" \u2014 "),aU=a("a"),w0r=o("TFXLMWithLMHeadModel"),A0r=o(" (XLM model)"),L0r=l(),r8=a("li"),bFe=a("strong"),y0r=o("xlm-roberta"),x0r=o(" \u2014 "),nU=a("a"),$0r=o("TFXLMRobertaForMaskedLM"),k0r=o(" (XLM-RoBERTa model)"),S0r=l(),t8=a("li"),vFe=a("strong"),R0r=o("xlnet"),P0r=o(" \u2014 "),sU=a("a"),B0r=o("TFXLNetLMHeadModel"),I0r=o(" (XLNet model)"),N0r=l(),F(a8.$$.fragment),bOe=l(),lc=a("h2"),n8=a("a"),FFe=a("span"),F(_9.$$.fragment),q0r=l(),TFe=a("span"),j0r=o("TFAutoModelForCausalLM"),vOe=l(),or=a("div"),F(b9.$$.fragment),D0r=l(),ic=a("p"),G0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=a("a"),O0r=o("from_pretrained()"),V0r=o(" class method or the "),iU=a("a"),X0r=o("from_config()"),z0r=o(` class
method.`),W0r=l(),v9=a("p"),Q0r=o("This class cannot be instantiated directly using "),MFe=a("code"),H0r=o("__init__()"),U0r=o(" (throws an error)."),J0r=l(),Rt=a("div"),F(F9.$$.fragment),Y0r=l(),EFe=a("p"),K0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z0r=l(),dc=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),F(s8.$$.fragment),sFr=l(),xr=a("div"),F(T9.$$.fragment),lFr=l(),wFe=a("p"),iFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dFr=l(),sn=a("p"),cFr=o("The model class to instantiate is selected based on the "),AFe=a("code"),fFr=o("model_type"),mFr=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),pFr=o("pretrained_model_name_or_path"),uFr=o(":"),_Fr=l(),Me=a("ul"),l8=a("li"),xFe=a("strong"),bFr=o("bert"),vFr=o(" \u2014 "),cU=a("a"),FFr=o("TFBertLMHeadModel"),TFr=o(" (BERT model)"),MFr=l(),i8=a("li"),$Fe=a("strong"),EFr=o("camembert"),CFr=o(" \u2014 "),fU=a("a"),wFr=o("TFCamembertForCausalLM"),AFr=o(" (CamemBERT model)"),LFr=l(),d8=a("li"),kFe=a("strong"),yFr=o("ctrl"),xFr=o(" \u2014 "),mU=a("a"),$Fr=o("TFCTRLLMHeadModel"),kFr=o(" (CTRL model)"),SFr=l(),c8=a("li"),SFe=a("strong"),RFr=o("gpt2"),PFr=o(" \u2014 "),gU=a("a"),BFr=o("TFGPT2LMHeadModel"),IFr=o(" (OpenAI GPT-2 model)"),NFr=l(),f8=a("li"),RFe=a("strong"),qFr=o("gptj"),jFr=o(" \u2014 "),hU=a("a"),DFr=o("TFGPTJForCausalLM"),GFr=o(" (GPT-J model)"),OFr=l(),m8=a("li"),PFe=a("strong"),VFr=o("openai-gpt"),XFr=o(" \u2014 "),pU=a("a"),zFr=o("TFOpenAIGPTLMHeadModel"),WFr=o(" (OpenAI GPT model)"),QFr=l(),g8=a("li"),BFe=a("strong"),HFr=o("opt"),UFr=o(" \u2014 "),uU=a("a"),JFr=o("TFOPTForCausalLM"),YFr=o(" (OPT model)"),KFr=l(),h8=a("li"),IFe=a("strong"),ZFr=o("rembert"),e6r=o(" \u2014 "),_U=a("a"),o6r=o("TFRemBertForCausalLM"),r6r=o(" (RemBERT model)"),t6r=l(),p8=a("li"),NFe=a("strong"),a6r=o("roberta"),n6r=o(" \u2014 "),bU=a("a"),s6r=o("TFRobertaForCausalLM"),l6r=o(" (RoBERTa model)"),i6r=l(),u8=a("li"),qFe=a("strong"),d6r=o("roformer"),c6r=o(" \u2014 "),vU=a("a"),f6r=o("TFRoFormerForCausalLM"),m6r=o(" (RoFormer model)"),g6r=l(),_8=a("li"),jFe=a("strong"),h6r=o("transfo-xl"),p6r=o(" \u2014 "),FU=a("a"),u6r=o("TFTransfoXLLMHeadModel"),_6r=o(" (Transformer-XL model)"),b6r=l(),b8=a("li"),DFe=a("strong"),v6r=o("xlm"),F6r=o(" \u2014 "),TU=a("a"),T6r=o("TFXLMWithLMHeadModel"),M6r=o(" (XLM model)"),E6r=l(),v8=a("li"),GFe=a("strong"),C6r=o("xlnet"),w6r=o(" \u2014 "),MU=a("a"),A6r=o("TFXLNetLMHeadModel"),L6r=o(" (XLNet model)"),y6r=l(),F(F8.$$.fragment),FOe=l(),cc=a("h2"),T8=a("a"),OFe=a("span"),F(M9.$$.fragment),x6r=l(),VFe=a("span"),$6r=o("TFAutoModelForImageClassification"),TOe=l(),rr=a("div"),F(E9.$$.fragment),k6r=l(),fc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=a("a"),R6r=o("from_pretrained()"),P6r=o(" class method or the "),CU=a("a"),B6r=o("from_config()"),I6r=o(` class
method.`),N6r=l(),C9=a("p"),q6r=o("This class cannot be instantiated directly using "),XFe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),G6r=l(),Pt=a("div"),F(w9.$$.fragment),O6r=l(),zFe=a("p"),V6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X6r=l(),mc=a("p"),z6r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),W6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),H6r=o("from_pretrained()"),U6r=o(" to load the model weights."),J6r=l(),F(M8.$$.fragment),Y6r=l(),$r=a("div"),F(A9.$$.fragment),K6r=l(),QFe=a("p"),Z6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eTr=l(),ln=a("p"),oTr=o("The model class to instantiate is selected based on the "),HFe=a("code"),rTr=o("model_type"),tTr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),aTr=o("pretrained_model_name_or_path"),nTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(":"),iTr=l(),rt=a("ul"),E8=a("li"),YFe=a("strong"),dTr=o("convnext"),cTr=o(" \u2014 "),AU=a("a"),fTr=o("TFConvNextForImageClassification"),mTr=o(" (ConvNeXT model)"),gTr=l(),C8=a("li"),KFe=a("strong"),hTr=o("data2vec-vision"),pTr=o(" \u2014 "),LU=a("a"),uTr=o("TFData2VecVisionForImageClassification"),_Tr=o(" (Data2VecVision model)"),bTr=l(),zs=a("li"),ZFe=a("strong"),vTr=o("deit"),FTr=o(" \u2014 "),yU=a("a"),TTr=o("TFDeiTForImageClassification"),MTr=o(" or "),xU=a("a"),ETr=o("TFDeiTForImageClassificationWithTeacher"),CTr=o(" (DeiT model)"),wTr=l(),w8=a("li"),e6e=a("strong"),ATr=o("swin"),LTr=o(" \u2014 "),$U=a("a"),yTr=o("TFSwinForImageClassification"),xTr=o(" (Swin Transformer model)"),$Tr=l(),A8=a("li"),o6e=a("strong"),kTr=o("vit"),STr=o(" \u2014 "),kU=a("a"),RTr=o("TFViTForImageClassification"),PTr=o(" (ViT model)"),BTr=l(),F(L8.$$.fragment),MOe=l(),gc=a("h2"),y8=a("a"),r6e=a("span"),F(L9.$$.fragment),ITr=l(),t6e=a("span"),NTr=o("TFAutoModelForMaskedLM"),EOe=l(),tr=a("div"),F(y9.$$.fragment),qTr=l(),hc=a("p"),jTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=a("a"),DTr=o("from_pretrained()"),GTr=o(" class method or the "),RU=a("a"),OTr=o("from_config()"),VTr=o(` class
method.`),XTr=l(),x9=a("p"),zTr=o("This class cannot be instantiated directly using "),a6e=a("code"),WTr=o("__init__()"),QTr=o(" (throws an error)."),HTr=l(),Bt=a("div"),F($9.$$.fragment),UTr=l(),n6e=a("p"),JTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YTr=l(),pc=a("p"),KTr=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),ZTr=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),o7r=o("from_pretrained()"),r7r=o(" to load the model weights."),t7r=l(),F(x8.$$.fragment),a7r=l(),kr=a("div"),F(k9.$$.fragment),n7r=l(),l6e=a("p"),s7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l7r=l(),dn=a("p"),i7r=o("The model class to instantiate is selected based on the "),i6e=a("code"),d7r=o("model_type"),c7r=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(":"),p7r=l(),ie=a("ul"),$8=a("li"),f6e=a("strong"),u7r=o("albert"),_7r=o(" \u2014 "),BU=a("a"),b7r=o("TFAlbertForMaskedLM"),v7r=o(" (ALBERT model)"),F7r=l(),k8=a("li"),m6e=a("strong"),T7r=o("bert"),M7r=o(" \u2014 "),IU=a("a"),E7r=o("TFBertForMaskedLM"),C7r=o(" (BERT model)"),w7r=l(),S8=a("li"),g6e=a("strong"),A7r=o("camembert"),L7r=o(" \u2014 "),NU=a("a"),y7r=o("TFCamembertForMaskedLM"),x7r=o(" (CamemBERT model)"),$7r=l(),R8=a("li"),h6e=a("strong"),k7r=o("convbert"),S7r=o(" \u2014 "),qU=a("a"),R7r=o("TFConvBertForMaskedLM"),P7r=o(" (ConvBERT model)"),B7r=l(),P8=a("li"),p6e=a("strong"),I7r=o("deberta"),N7r=o(" \u2014 "),jU=a("a"),q7r=o("TFDebertaForMaskedLM"),j7r=o(" (DeBERTa model)"),D7r=l(),B8=a("li"),u6e=a("strong"),G7r=o("deberta-v2"),O7r=o(" \u2014 "),DU=a("a"),V7r=o("TFDebertaV2ForMaskedLM"),X7r=o(" (DeBERTa-v2 model)"),z7r=l(),I8=a("li"),_6e=a("strong"),W7r=o("distilbert"),Q7r=o(" \u2014 "),GU=a("a"),H7r=o("TFDistilBertForMaskedLM"),U7r=o(" (DistilBERT model)"),J7r=l(),N8=a("li"),b6e=a("strong"),Y7r=o("electra"),K7r=o(" \u2014 "),OU=a("a"),Z7r=o("TFElectraForMaskedLM"),e8r=o(" (ELECTRA model)"),o8r=l(),q8=a("li"),v6e=a("strong"),r8r=o("flaubert"),t8r=o(" \u2014 "),VU=a("a"),a8r=o("TFFlaubertWithLMHeadModel"),n8r=o(" (FlauBERT model)"),s8r=l(),j8=a("li"),F6e=a("strong"),l8r=o("funnel"),i8r=o(" \u2014 "),XU=a("a"),d8r=o("TFFunnelForMaskedLM"),c8r=o(" (Funnel Transformer model)"),f8r=l(),D8=a("li"),T6e=a("strong"),m8r=o("layoutlm"),g8r=o(" \u2014 "),zU=a("a"),h8r=o("TFLayoutLMForMaskedLM"),p8r=o(" (LayoutLM model)"),u8r=l(),G8=a("li"),M6e=a("strong"),_8r=o("longformer"),b8r=o(" \u2014 "),WU=a("a"),v8r=o("TFLongformerForMaskedLM"),F8r=o(" (Longformer model)"),T8r=l(),O8=a("li"),E6e=a("strong"),M8r=o("mobilebert"),E8r=o(" \u2014 "),QU=a("a"),C8r=o("TFMobileBertForMaskedLM"),w8r=o(" (MobileBERT model)"),A8r=l(),V8=a("li"),C6e=a("strong"),L8r=o("mpnet"),y8r=o(" \u2014 "),HU=a("a"),x8r=o("TFMPNetForMaskedLM"),$8r=o(" (MPNet model)"),k8r=l(),X8=a("li"),w6e=a("strong"),S8r=o("rembert"),R8r=o(" \u2014 "),UU=a("a"),P8r=o("TFRemBertForMaskedLM"),B8r=o(" (RemBERT model)"),I8r=l(),z8=a("li"),A6e=a("strong"),N8r=o("roberta"),q8r=o(" \u2014 "),JU=a("a"),j8r=o("TFRobertaForMaskedLM"),D8r=o(" (RoBERTa model)"),G8r=l(),W8=a("li"),L6e=a("strong"),O8r=o("roformer"),V8r=o(" \u2014 "),YU=a("a"),X8r=o("TFRoFormerForMaskedLM"),z8r=o(" (RoFormer model)"),W8r=l(),Q8=a("li"),y6e=a("strong"),Q8r=o("tapas"),H8r=o(" \u2014 "),KU=a("a"),U8r=o("TFTapasForMaskedLM"),J8r=o(" (TAPAS model)"),Y8r=l(),H8=a("li"),x6e=a("strong"),K8r=o("xlm"),Z8r=o(" \u2014 "),ZU=a("a"),eMr=o("TFXLMWithLMHeadModel"),oMr=o(" (XLM model)"),rMr=l(),U8=a("li"),$6e=a("strong"),tMr=o("xlm-roberta"),aMr=o(" \u2014 "),eJ=a("a"),nMr=o("TFXLMRobertaForMaskedLM"),sMr=o(" (XLM-RoBERTa model)"),lMr=l(),F(J8.$$.fragment),COe=l(),uc=a("h2"),Y8=a("a"),k6e=a("span"),F(S9.$$.fragment),iMr=l(),S6e=a("span"),dMr=o("TFAutoModelForSeq2SeqLM"),wOe=l(),ar=a("div"),F(R9.$$.fragment),cMr=l(),_c=a("p"),fMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oJ=a("a"),mMr=o("from_pretrained()"),gMr=o(" class method or the "),rJ=a("a"),hMr=o("from_config()"),pMr=o(` class
method.`),uMr=l(),P9=a("p"),_Mr=o("This class cannot be instantiated directly using "),R6e=a("code"),bMr=o("__init__()"),vMr=o(" (throws an error)."),FMr=l(),It=a("div"),F(B9.$$.fragment),TMr=l(),P6e=a("p"),MMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EMr=l(),bc=a("p"),CMr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),wMr=o("not"),AMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),LMr=o("from_pretrained()"),yMr=o(" to load the model weights."),xMr=l(),F(K8.$$.fragment),$Mr=l(),Sr=a("div"),F(I9.$$.fragment),kMr=l(),I6e=a("p"),SMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RMr=l(),cn=a("p"),PMr=o("The model class to instantiate is selected based on the "),N6e=a("code"),BMr=o("model_type"),IMr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),NMr=o("pretrained_model_name_or_path"),qMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(":"),GMr=l(),ye=a("ul"),Z8=a("li"),D6e=a("strong"),OMr=o("bart"),VMr=o(" \u2014 "),aJ=a("a"),XMr=o("TFBartForConditionalGeneration"),zMr=o(" (BART model)"),WMr=l(),eM=a("li"),G6e=a("strong"),QMr=o("blenderbot"),HMr=o(" \u2014 "),nJ=a("a"),UMr=o("TFBlenderbotForConditionalGeneration"),JMr=o(" (Blenderbot model)"),YMr=l(),oM=a("li"),O6e=a("strong"),KMr=o("blenderbot-small"),ZMr=o(" \u2014 "),sJ=a("a"),e4r=o("TFBlenderbotSmallForConditionalGeneration"),o4r=o(" (BlenderbotSmall model)"),r4r=l(),rM=a("li"),V6e=a("strong"),t4r=o("encoder-decoder"),a4r=o(" \u2014 "),lJ=a("a"),n4r=o("TFEncoderDecoderModel"),s4r=o(" (Encoder decoder model)"),l4r=l(),tM=a("li"),X6e=a("strong"),i4r=o("led"),d4r=o(" \u2014 "),iJ=a("a"),c4r=o("TFLEDForConditionalGeneration"),f4r=o(" (LED model)"),m4r=l(),aM=a("li"),z6e=a("strong"),g4r=o("marian"),h4r=o(" \u2014 "),dJ=a("a"),p4r=o("TFMarianMTModel"),u4r=o(" (Marian model)"),_4r=l(),nM=a("li"),W6e=a("strong"),b4r=o("mbart"),v4r=o(" \u2014 "),cJ=a("a"),F4r=o("TFMBartForConditionalGeneration"),T4r=o(" (mBART model)"),M4r=l(),sM=a("li"),Q6e=a("strong"),E4r=o("mt5"),C4r=o(" \u2014 "),fJ=a("a"),w4r=o("TFMT5ForConditionalGeneration"),A4r=o(" (MT5 model)"),L4r=l(),lM=a("li"),H6e=a("strong"),y4r=o("pegasus"),x4r=o(" \u2014 "),mJ=a("a"),$4r=o("TFPegasusForConditionalGeneration"),k4r=o(" (Pegasus model)"),S4r=l(),iM=a("li"),U6e=a("strong"),R4r=o("t5"),P4r=o(" \u2014 "),gJ=a("a"),B4r=o("TFT5ForConditionalGeneration"),I4r=o(" (T5 model)"),N4r=l(),F(dM.$$.fragment),AOe=l(),vc=a("h2"),cM=a("a"),J6e=a("span"),F(N9.$$.fragment),q4r=l(),Y6e=a("span"),j4r=o("TFAutoModelForSequenceClassification"),LOe=l(),nr=a("div"),F(q9.$$.fragment),D4r=l(),Fc=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hJ=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),pJ=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),W4r=l(),j9=a("p"),Q4r=o("This class cannot be instantiated directly using "),K6e=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),Nt=a("div"),F(D9.$$.fragment),Y4r=l(),Z6e=a("p"),K4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z4r=l(),Tc=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),F(fM.$$.fragment),sEr=l(),Rr=a("div"),F(G9.$$.fragment),lEr=l(),oTe=a("p"),iEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dEr=l(),fn=a("p"),cEr=o("The model class to instantiate is selected based on the "),rTe=a("code"),fEr=o("model_type"),mEr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),pEr=o("pretrained_model_name_or_path"),uEr=o(":"),_Er=l(),te=a("ul"),mM=a("li"),nTe=a("strong"),bEr=o("albert"),vEr=o(" \u2014 "),_J=a("a"),FEr=o("TFAlbertForSequenceClassification"),TEr=o(" (ALBERT model)"),MEr=l(),gM=a("li"),sTe=a("strong"),EEr=o("bert"),CEr=o(" \u2014 "),bJ=a("a"),wEr=o("TFBertForSequenceClassification"),AEr=o(" (BERT model)"),LEr=l(),hM=a("li"),lTe=a("strong"),yEr=o("camembert"),xEr=o(" \u2014 "),vJ=a("a"),$Er=o("TFCamembertForSequenceClassification"),kEr=o(" (CamemBERT model)"),SEr=l(),pM=a("li"),iTe=a("strong"),REr=o("convbert"),PEr=o(" \u2014 "),FJ=a("a"),BEr=o("TFConvBertForSequenceClassification"),IEr=o(" (ConvBERT model)"),NEr=l(),uM=a("li"),dTe=a("strong"),qEr=o("ctrl"),jEr=o(" \u2014 "),TJ=a("a"),DEr=o("TFCTRLForSequenceClassification"),GEr=o(" (CTRL model)"),OEr=l(),_M=a("li"),cTe=a("strong"),VEr=o("deberta"),XEr=o(" \u2014 "),MJ=a("a"),zEr=o("TFDebertaForSequenceClassification"),WEr=o(" (DeBERTa model)"),QEr=l(),bM=a("li"),fTe=a("strong"),HEr=o("deberta-v2"),UEr=o(" \u2014 "),EJ=a("a"),JEr=o("TFDebertaV2ForSequenceClassification"),YEr=o(" (DeBERTa-v2 model)"),KEr=l(),vM=a("li"),mTe=a("strong"),ZEr=o("distilbert"),eCr=o(" \u2014 "),CJ=a("a"),oCr=o("TFDistilBertForSequenceClassification"),rCr=o(" (DistilBERT model)"),tCr=l(),FM=a("li"),gTe=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),wJ=a("a"),sCr=o("TFElectraForSequenceClassification"),lCr=o(" (ELECTRA model)"),iCr=l(),TM=a("li"),hTe=a("strong"),dCr=o("flaubert"),cCr=o(" \u2014 "),AJ=a("a"),fCr=o("TFFlaubertForSequenceClassification"),mCr=o(" (FlauBERT model)"),gCr=l(),MM=a("li"),pTe=a("strong"),hCr=o("funnel"),pCr=o(" \u2014 "),LJ=a("a"),uCr=o("TFFunnelForSequenceClassification"),_Cr=o(" (Funnel Transformer model)"),bCr=l(),EM=a("li"),uTe=a("strong"),vCr=o("gpt2"),FCr=o(" \u2014 "),yJ=a("a"),TCr=o("TFGPT2ForSequenceClassification"),MCr=o(" (OpenAI GPT-2 model)"),ECr=l(),CM=a("li"),_Te=a("strong"),CCr=o("gptj"),wCr=o(" \u2014 "),xJ=a("a"),ACr=o("TFGPTJForSequenceClassification"),LCr=o(" (GPT-J model)"),yCr=l(),wM=a("li"),bTe=a("strong"),xCr=o("layoutlm"),$Cr=o(" \u2014 "),$J=a("a"),kCr=o("TFLayoutLMForSequenceClassification"),SCr=o(" (LayoutLM model)"),RCr=l(),AM=a("li"),vTe=a("strong"),PCr=o("longformer"),BCr=o(" \u2014 "),kJ=a("a"),ICr=o("TFLongformerForSequenceClassification"),NCr=o(" (Longformer model)"),qCr=l(),LM=a("li"),FTe=a("strong"),jCr=o("mobilebert"),DCr=o(" \u2014 "),SJ=a("a"),GCr=o("TFMobileBertForSequenceClassification"),OCr=o(" (MobileBERT model)"),VCr=l(),yM=a("li"),TTe=a("strong"),XCr=o("mpnet"),zCr=o(" \u2014 "),RJ=a("a"),WCr=o("TFMPNetForSequenceClassification"),QCr=o(" (MPNet model)"),HCr=l(),xM=a("li"),MTe=a("strong"),UCr=o("openai-gpt"),JCr=o(" \u2014 "),PJ=a("a"),YCr=o("TFOpenAIGPTForSequenceClassification"),KCr=o(" (OpenAI GPT model)"),ZCr=l(),$M=a("li"),ETe=a("strong"),e5r=o("rembert"),o5r=o(" \u2014 "),BJ=a("a"),r5r=o("TFRemBertForSequenceClassification"),t5r=o(" (RemBERT model)"),a5r=l(),kM=a("li"),CTe=a("strong"),n5r=o("roberta"),s5r=o(" \u2014 "),IJ=a("a"),l5r=o("TFRobertaForSequenceClassification"),i5r=o(" (RoBERTa model)"),d5r=l(),SM=a("li"),wTe=a("strong"),c5r=o("roformer"),f5r=o(" \u2014 "),NJ=a("a"),m5r=o("TFRoFormerForSequenceClassification"),g5r=o(" (RoFormer model)"),h5r=l(),RM=a("li"),ATe=a("strong"),p5r=o("tapas"),u5r=o(" \u2014 "),qJ=a("a"),_5r=o("TFTapasForSequenceClassification"),b5r=o(" (TAPAS model)"),v5r=l(),PM=a("li"),LTe=a("strong"),F5r=o("transfo-xl"),T5r=o(" \u2014 "),jJ=a("a"),M5r=o("TFTransfoXLForSequenceClassification"),E5r=o(" (Transformer-XL model)"),C5r=l(),BM=a("li"),yTe=a("strong"),w5r=o("xlm"),A5r=o(" \u2014 "),DJ=a("a"),L5r=o("TFXLMForSequenceClassification"),y5r=o(" (XLM model)"),x5r=l(),IM=a("li"),xTe=a("strong"),$5r=o("xlm-roberta"),k5r=o(" \u2014 "),GJ=a("a"),S5r=o("TFXLMRobertaForSequenceClassification"),R5r=o(" (XLM-RoBERTa model)"),P5r=l(),NM=a("li"),$Te=a("strong"),B5r=o("xlnet"),I5r=o(" \u2014 "),OJ=a("a"),N5r=o("TFXLNetForSequenceClassification"),q5r=o(" (XLNet model)"),j5r=l(),F(qM.$$.fragment),yOe=l(),Mc=a("h2"),jM=a("a"),kTe=a("span"),F(O9.$$.fragment),D5r=l(),STe=a("span"),G5r=o("TFAutoModelForMultipleChoice"),xOe=l(),sr=a("div"),F(V9.$$.fragment),O5r=l(),Ec=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VJ=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),XJ=a("a"),W5r=o("from_config()"),Q5r=o(` class
method.`),H5r=l(),X9=a("p"),U5r=o("This class cannot be instantiated directly using "),RTe=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),qt=a("div"),F(z9.$$.fragment),Z5r=l(),PTe=a("p"),e3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o3r=l(),Cc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(DM.$$.fragment),i3r=l(),Pr=a("div"),F(W9.$$.fragment),d3r=l(),ITe=a("p"),c3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f3r=l(),mn=a("p"),m3r=o("The model class to instantiate is selected based on the "),NTe=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),p3r=o("pretrained_model_name_or_path"),u3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),ue=a("ul"),GM=a("li"),DTe=a("strong"),F3r=o("albert"),T3r=o(" \u2014 "),WJ=a("a"),M3r=o("TFAlbertForMultipleChoice"),E3r=o(" (ALBERT model)"),C3r=l(),OM=a("li"),GTe=a("strong"),w3r=o("bert"),A3r=o(" \u2014 "),QJ=a("a"),L3r=o("TFBertForMultipleChoice"),y3r=o(" (BERT model)"),x3r=l(),VM=a("li"),OTe=a("strong"),$3r=o("camembert"),k3r=o(" \u2014 "),HJ=a("a"),S3r=o("TFCamembertForMultipleChoice"),R3r=o(" (CamemBERT model)"),P3r=l(),XM=a("li"),VTe=a("strong"),B3r=o("convbert"),I3r=o(" \u2014 "),UJ=a("a"),N3r=o("TFConvBertForMultipleChoice"),q3r=o(" (ConvBERT model)"),j3r=l(),zM=a("li"),XTe=a("strong"),D3r=o("distilbert"),G3r=o(" \u2014 "),JJ=a("a"),O3r=o("TFDistilBertForMultipleChoice"),V3r=o(" (DistilBERT model)"),X3r=l(),WM=a("li"),zTe=a("strong"),z3r=o("electra"),W3r=o(" \u2014 "),YJ=a("a"),Q3r=o("TFElectraForMultipleChoice"),H3r=o(" (ELECTRA model)"),U3r=l(),QM=a("li"),WTe=a("strong"),J3r=o("flaubert"),Y3r=o(" \u2014 "),KJ=a("a"),K3r=o("TFFlaubertForMultipleChoice"),Z3r=o(" (FlauBERT model)"),ewr=l(),HM=a("li"),QTe=a("strong"),owr=o("funnel"),rwr=o(" \u2014 "),ZJ=a("a"),twr=o("TFFunnelForMultipleChoice"),awr=o(" (Funnel Transformer model)"),nwr=l(),UM=a("li"),HTe=a("strong"),swr=o("longformer"),lwr=o(" \u2014 "),eY=a("a"),iwr=o("TFLongformerForMultipleChoice"),dwr=o(" (Longformer model)"),cwr=l(),JM=a("li"),UTe=a("strong"),fwr=o("mobilebert"),mwr=o(" \u2014 "),oY=a("a"),gwr=o("TFMobileBertForMultipleChoice"),hwr=o(" (MobileBERT model)"),pwr=l(),YM=a("li"),JTe=a("strong"),uwr=o("mpnet"),_wr=o(" \u2014 "),rY=a("a"),bwr=o("TFMPNetForMultipleChoice"),vwr=o(" (MPNet model)"),Fwr=l(),KM=a("li"),YTe=a("strong"),Twr=o("rembert"),Mwr=o(" \u2014 "),tY=a("a"),Ewr=o("TFRemBertForMultipleChoice"),Cwr=o(" (RemBERT model)"),wwr=l(),ZM=a("li"),KTe=a("strong"),Awr=o("roberta"),Lwr=o(" \u2014 "),aY=a("a"),ywr=o("TFRobertaForMultipleChoice"),xwr=o(" (RoBERTa model)"),$wr=l(),e4=a("li"),ZTe=a("strong"),kwr=o("roformer"),Swr=o(" \u2014 "),nY=a("a"),Rwr=o("TFRoFormerForMultipleChoice"),Pwr=o(" (RoFormer model)"),Bwr=l(),o4=a("li"),e7e=a("strong"),Iwr=o("xlm"),Nwr=o(" \u2014 "),sY=a("a"),qwr=o("TFXLMForMultipleChoice"),jwr=o(" (XLM model)"),Dwr=l(),r4=a("li"),o7e=a("strong"),Gwr=o("xlm-roberta"),Owr=o(" \u2014 "),lY=a("a"),Vwr=o("TFXLMRobertaForMultipleChoice"),Xwr=o(" (XLM-RoBERTa model)"),zwr=l(),t4=a("li"),r7e=a("strong"),Wwr=o("xlnet"),Qwr=o(" \u2014 "),iY=a("a"),Hwr=o("TFXLNetForMultipleChoice"),Uwr=o(" (XLNet model)"),Jwr=l(),F(a4.$$.fragment),$Oe=l(),wc=a("h2"),n4=a("a"),t7e=a("span"),F(Q9.$$.fragment),Ywr=l(),a7e=a("span"),Kwr=o("TFAutoModelForNextSentencePrediction"),kOe=l(),lr=a("div"),F(H9.$$.fragment),Zwr=l(),Ac=a("p"),eAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=a("a"),oAr=o("from_pretrained()"),rAr=o(" class method or the "),cY=a("a"),tAr=o("from_config()"),aAr=o(` class
method.`),nAr=l(),U9=a("p"),sAr=o("This class cannot be instantiated directly using "),n7e=a("code"),lAr=o("__init__()"),iAr=o(" (throws an error)."),dAr=l(),jt=a("div"),F(J9.$$.fragment),cAr=l(),s7e=a("p"),fAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mAr=l(),Lc=a("p"),gAr=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),hAr=o("not"),pAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),uAr=o("from_pretrained()"),_Ar=o(" to load the model weights."),bAr=l(),F(s4.$$.fragment),vAr=l(),Br=a("div"),F(Y9.$$.fragment),FAr=l(),i7e=a("p"),TAr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MAr=l(),gn=a("p"),EAr=o("The model class to instantiate is selected based on the "),d7e=a("code"),CAr=o("model_type"),wAr=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),AAr=o("pretrained_model_name_or_path"),LAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),yAr=o("pretrained_model_name_or_path"),xAr=o(":"),$Ar=l(),K9=a("ul"),l4=a("li"),m7e=a("strong"),kAr=o("bert"),SAr=o(" \u2014 "),mY=a("a"),RAr=o("TFBertForNextSentencePrediction"),PAr=o(" (BERT model)"),BAr=l(),i4=a("li"),g7e=a("strong"),IAr=o("mobilebert"),NAr=o(" \u2014 "),gY=a("a"),qAr=o("TFMobileBertForNextSentencePrediction"),jAr=o(" (MobileBERT model)"),DAr=l(),F(d4.$$.fragment),SOe=l(),yc=a("h2"),c4=a("a"),h7e=a("span"),F(Z9.$$.fragment),GAr=l(),p7e=a("span"),OAr=o("TFAutoModelForTableQuestionAnswering"),ROe=l(),ir=a("div"),F(ex.$$.fragment),VAr=l(),xc=a("p"),XAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hY=a("a"),zAr=o("from_pretrained()"),WAr=o(" class method or the "),pY=a("a"),QAr=o("from_config()"),HAr=o(` class
method.`),UAr=l(),ox=a("p"),JAr=o("This class cannot be instantiated directly using "),u7e=a("code"),YAr=o("__init__()"),KAr=o(" (throws an error)."),ZAr=l(),Dt=a("div"),F(rx.$$.fragment),eLr=l(),_7e=a("p"),oLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rLr=l(),$c=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),sLr=o("from_pretrained()"),lLr=o(" to load the model weights."),iLr=l(),F(f4.$$.fragment),dLr=l(),Ir=a("div"),F(tx.$$.fragment),cLr=l(),v7e=a("p"),fLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mLr=l(),hn=a("p"),gLr=o("The model class to instantiate is selected based on the "),F7e=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),uLr=o("pretrained_model_name_or_path"),_Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),FLr=l(),E7e=a("ul"),m4=a("li"),C7e=a("strong"),TLr=o("tapas"),MLr=o(" \u2014 "),_Y=a("a"),ELr=o("TFTapasForQuestionAnswering"),CLr=o(" (TAPAS model)"),wLr=l(),F(g4.$$.fragment),POe=l(),kc=a("h2"),h4=a("a"),w7e=a("span"),F(ax.$$.fragment),ALr=l(),A7e=a("span"),LLr=o("TFAutoModelForTokenClassification"),BOe=l(),dr=a("div"),F(nx.$$.fragment),yLr=l(),Sc=a("p"),xLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bY=a("a"),$Lr=o("from_pretrained()"),kLr=o(" class method or the "),vY=a("a"),SLr=o("from_config()"),RLr=o(` class
method.`),PLr=l(),sx=a("p"),BLr=o("This class cannot be instantiated directly using "),L7e=a("code"),ILr=o("__init__()"),NLr=o(" (throws an error)."),qLr=l(),Gt=a("div"),F(lx.$$.fragment),jLr=l(),y7e=a("p"),DLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GLr=l(),Rc=a("p"),OLr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),VLr=o("not"),XLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),zLr=o("from_pretrained()"),WLr=o(" to load the model weights."),QLr=l(),F(p4.$$.fragment),HLr=l(),Nr=a("div"),F(ix.$$.fragment),ULr=l(),$7e=a("p"),JLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YLr=l(),pn=a("p"),KLr=o("The model class to instantiate is selected based on the "),k7e=a("code"),ZLr=o("model_type"),eyr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),oyr=o("pretrained_model_name_or_path"),ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(":"),nyr=l(),de=a("ul"),u4=a("li"),P7e=a("strong"),syr=o("albert"),lyr=o(" \u2014 "),TY=a("a"),iyr=o("TFAlbertForTokenClassification"),dyr=o(" (ALBERT model)"),cyr=l(),_4=a("li"),B7e=a("strong"),fyr=o("bert"),myr=o(" \u2014 "),MY=a("a"),gyr=o("TFBertForTokenClassification"),hyr=o(" (BERT model)"),pyr=l(),b4=a("li"),I7e=a("strong"),uyr=o("camembert"),_yr=o(" \u2014 "),EY=a("a"),byr=o("TFCamembertForTokenClassification"),vyr=o(" (CamemBERT model)"),Fyr=l(),v4=a("li"),N7e=a("strong"),Tyr=o("convbert"),Myr=o(" \u2014 "),CY=a("a"),Eyr=o("TFConvBertForTokenClassification"),Cyr=o(" (ConvBERT model)"),wyr=l(),F4=a("li"),q7e=a("strong"),Ayr=o("deberta"),Lyr=o(" \u2014 "),wY=a("a"),yyr=o("TFDebertaForTokenClassification"),xyr=o(" (DeBERTa model)"),$yr=l(),T4=a("li"),j7e=a("strong"),kyr=o("deberta-v2"),Syr=o(" \u2014 "),AY=a("a"),Ryr=o("TFDebertaV2ForTokenClassification"),Pyr=o(" (DeBERTa-v2 model)"),Byr=l(),M4=a("li"),D7e=a("strong"),Iyr=o("distilbert"),Nyr=o(" \u2014 "),LY=a("a"),qyr=o("TFDistilBertForTokenClassification"),jyr=o(" (DistilBERT model)"),Dyr=l(),E4=a("li"),G7e=a("strong"),Gyr=o("electra"),Oyr=o(" \u2014 "),yY=a("a"),Vyr=o("TFElectraForTokenClassification"),Xyr=o(" (ELECTRA model)"),zyr=l(),C4=a("li"),O7e=a("strong"),Wyr=o("flaubert"),Qyr=o(" \u2014 "),xY=a("a"),Hyr=o("TFFlaubertForTokenClassification"),Uyr=o(" (FlauBERT model)"),Jyr=l(),w4=a("li"),V7e=a("strong"),Yyr=o("funnel"),Kyr=o(" \u2014 "),$Y=a("a"),Zyr=o("TFFunnelForTokenClassification"),e9r=o(" (Funnel Transformer model)"),o9r=l(),A4=a("li"),X7e=a("strong"),r9r=o("layoutlm"),t9r=o(" \u2014 "),kY=a("a"),a9r=o("TFLayoutLMForTokenClassification"),n9r=o(" (LayoutLM model)"),s9r=l(),L4=a("li"),z7e=a("strong"),l9r=o("longformer"),i9r=o(" \u2014 "),SY=a("a"),d9r=o("TFLongformerForTokenClassification"),c9r=o(" (Longformer model)"),f9r=l(),y4=a("li"),W7e=a("strong"),m9r=o("mobilebert"),g9r=o(" \u2014 "),RY=a("a"),h9r=o("TFMobileBertForTokenClassification"),p9r=o(" (MobileBERT model)"),u9r=l(),x4=a("li"),Q7e=a("strong"),_9r=o("mpnet"),b9r=o(" \u2014 "),PY=a("a"),v9r=o("TFMPNetForTokenClassification"),F9r=o(" (MPNet model)"),T9r=l(),$4=a("li"),H7e=a("strong"),M9r=o("rembert"),E9r=o(" \u2014 "),BY=a("a"),C9r=o("TFRemBertForTokenClassification"),w9r=o(" (RemBERT model)"),A9r=l(),k4=a("li"),U7e=a("strong"),L9r=o("roberta"),y9r=o(" \u2014 "),IY=a("a"),x9r=o("TFRobertaForTokenClassification"),$9r=o(" (RoBERTa model)"),k9r=l(),S4=a("li"),J7e=a("strong"),S9r=o("roformer"),R9r=o(" \u2014 "),NY=a("a"),P9r=o("TFRoFormerForTokenClassification"),B9r=o(" (RoFormer model)"),I9r=l(),R4=a("li"),Y7e=a("strong"),N9r=o("xlm"),q9r=o(" \u2014 "),qY=a("a"),j9r=o("TFXLMForTokenClassification"),D9r=o(" (XLM model)"),G9r=l(),P4=a("li"),K7e=a("strong"),O9r=o("xlm-roberta"),V9r=o(" \u2014 "),jY=a("a"),X9r=o("TFXLMRobertaForTokenClassification"),z9r=o(" (XLM-RoBERTa model)"),W9r=l(),B4=a("li"),Z7e=a("strong"),Q9r=o("xlnet"),H9r=o(" \u2014 "),DY=a("a"),U9r=o("TFXLNetForTokenClassification"),J9r=o(" (XLNet model)"),Y9r=l(),F(I4.$$.fragment),IOe=l(),Pc=a("h2"),N4=a("a"),e8e=a("span"),F(dx.$$.fragment),K9r=l(),o8e=a("span"),Z9r=o("TFAutoModelForQuestionAnswering"),NOe=l(),cr=a("div"),F(cx.$$.fragment),exr=l(),Bc=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GY=a("a"),rxr=o("from_pretrained()"),txr=o(" class method or the "),OY=a("a"),axr=o("from_config()"),nxr=o(` class
method.`),sxr=l(),fx=a("p"),lxr=o("This class cannot be instantiated directly using "),r8e=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),Ot=a("div"),F(mx.$$.fragment),fxr=l(),t8e=a("p"),mxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gxr=l(),Ic=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),pxr=o("not"),uxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),_xr=o("from_pretrained()"),bxr=o(" to load the model weights."),vxr=l(),F(q4.$$.fragment),Fxr=l(),qr=a("div"),F(gx.$$.fragment),Txr=l(),n8e=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Exr=l(),un=a("p"),Cxr=o("The model class to instantiate is selected based on the "),s8e=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),Lxr=o("pretrained_model_name_or_path"),yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),xxr=o("pretrained_model_name_or_path"),$xr=o(":"),kxr=l(),ce=a("ul"),j4=a("li"),d8e=a("strong"),Sxr=o("albert"),Rxr=o(" \u2014 "),XY=a("a"),Pxr=o("TFAlbertForQuestionAnswering"),Bxr=o(" (ALBERT model)"),Ixr=l(),D4=a("li"),c8e=a("strong"),Nxr=o("bert"),qxr=o(" \u2014 "),zY=a("a"),jxr=o("TFBertForQuestionAnswering"),Dxr=o(" (BERT model)"),Gxr=l(),G4=a("li"),f8e=a("strong"),Oxr=o("camembert"),Vxr=o(" \u2014 "),WY=a("a"),Xxr=o("TFCamembertForQuestionAnswering"),zxr=o(" (CamemBERT model)"),Wxr=l(),O4=a("li"),m8e=a("strong"),Qxr=o("convbert"),Hxr=o(" \u2014 "),QY=a("a"),Uxr=o("TFConvBertForQuestionAnswering"),Jxr=o(" (ConvBERT model)"),Yxr=l(),V4=a("li"),g8e=a("strong"),Kxr=o("deberta"),Zxr=o(" \u2014 "),HY=a("a"),e$r=o("TFDebertaForQuestionAnswering"),o$r=o(" (DeBERTa model)"),r$r=l(),X4=a("li"),h8e=a("strong"),t$r=o("deberta-v2"),a$r=o(" \u2014 "),UY=a("a"),n$r=o("TFDebertaV2ForQuestionAnswering"),s$r=o(" (DeBERTa-v2 model)"),l$r=l(),z4=a("li"),p8e=a("strong"),i$r=o("distilbert"),d$r=o(" \u2014 "),JY=a("a"),c$r=o("TFDistilBertForQuestionAnswering"),f$r=o(" (DistilBERT model)"),m$r=l(),W4=a("li"),u8e=a("strong"),g$r=o("electra"),h$r=o(" \u2014 "),YY=a("a"),p$r=o("TFElectraForQuestionAnswering"),u$r=o(" (ELECTRA model)"),_$r=l(),Q4=a("li"),_8e=a("strong"),b$r=o("flaubert"),v$r=o(" \u2014 "),KY=a("a"),F$r=o("TFFlaubertForQuestionAnsweringSimple"),T$r=o(" (FlauBERT model)"),M$r=l(),H4=a("li"),b8e=a("strong"),E$r=o("funnel"),C$r=o(" \u2014 "),ZY=a("a"),w$r=o("TFFunnelForQuestionAnswering"),A$r=o(" (Funnel Transformer model)"),L$r=l(),U4=a("li"),v8e=a("strong"),y$r=o("gptj"),x$r=o(" \u2014 "),eK=a("a"),$$r=o("TFGPTJForQuestionAnswering"),k$r=o(" (GPT-J model)"),S$r=l(),J4=a("li"),F8e=a("strong"),R$r=o("longformer"),P$r=o(" \u2014 "),oK=a("a"),B$r=o("TFLongformerForQuestionAnswering"),I$r=o(" (Longformer model)"),N$r=l(),Y4=a("li"),T8e=a("strong"),q$r=o("mobilebert"),j$r=o(" \u2014 "),rK=a("a"),D$r=o("TFMobileBertForQuestionAnswering"),G$r=o(" (MobileBERT model)"),O$r=l(),K4=a("li"),M8e=a("strong"),V$r=o("mpnet"),X$r=o(" \u2014 "),tK=a("a"),z$r=o("TFMPNetForQuestionAnswering"),W$r=o(" (MPNet model)"),Q$r=l(),Z4=a("li"),E8e=a("strong"),H$r=o("rembert"),U$r=o(" \u2014 "),aK=a("a"),J$r=o("TFRemBertForQuestionAnswering"),Y$r=o(" (RemBERT model)"),K$r=l(),eE=a("li"),C8e=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),nK=a("a"),okr=o("TFRobertaForQuestionAnswering"),rkr=o(" (RoBERTa model)"),tkr=l(),oE=a("li"),w8e=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),sK=a("a"),skr=o("TFRoFormerForQuestionAnswering"),lkr=o(" (RoFormer model)"),ikr=l(),rE=a("li"),A8e=a("strong"),dkr=o("xlm"),ckr=o(" \u2014 "),lK=a("a"),fkr=o("TFXLMForQuestionAnsweringSimple"),mkr=o(" (XLM model)"),gkr=l(),tE=a("li"),L8e=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),iK=a("a"),ukr=o("TFXLMRobertaForQuestionAnswering"),_kr=o(" (XLM-RoBERTa model)"),bkr=l(),aE=a("li"),y8e=a("strong"),vkr=o("xlnet"),Fkr=o(" \u2014 "),dK=a("a"),Tkr=o("TFXLNetForQuestionAnsweringSimple"),Mkr=o(" (XLNet model)"),Ekr=l(),F(nE.$$.fragment),qOe=l(),Nc=a("h2"),sE=a("a"),x8e=a("span"),F(hx.$$.fragment),Ckr=l(),$8e=a("span"),wkr=o("TFAutoModelForVision2Seq"),jOe=l(),fr=a("div"),F(px.$$.fragment),Akr=l(),qc=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cK=a("a"),ykr=o("from_pretrained()"),xkr=o(" class method or the "),fK=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),ux=a("p"),Rkr=o("This class cannot be instantiated directly using "),k8e=a("code"),Pkr=o("__init__()"),Bkr=o(" (throws an error)."),Ikr=l(),Vt=a("div"),F(_x.$$.fragment),Nkr=l(),S8e=a("p"),qkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jkr=l(),jc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),R8e=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(lE.$$.fragment),Wkr=l(),jr=a("div"),F(bx.$$.fragment),Qkr=l(),P8e=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ukr=l(),_n=a("p"),Jkr=o("The model class to instantiate is selected based on the "),B8e=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),I8e=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),q8e=a("ul"),iE=a("li"),j8e=a("strong"),aSr=o("vision-encoder-decoder"),nSr=o(" \u2014 "),gK=a("a"),sSr=o("TFVisionEncoderDecoderModel"),lSr=o(" (Vision Encoder decoder model)"),iSr=l(),F(dE.$$.fragment),DOe=l(),Dc=a("h2"),cE=a("a"),D8e=a("span"),F(vx.$$.fragment),dSr=l(),G8e=a("span"),cSr=o("TFAutoModelForSpeechSeq2Seq"),GOe=l(),mr=a("div"),F(Fx.$$.fragment),fSr=l(),Gc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hK=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),pK=a("a"),pSr=o("from_config()"),uSr=o(` class
method.`),_Sr=l(),Tx=a("p"),bSr=o("This class cannot be instantiated directly using "),O8e=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Xt=a("div"),F(Mx.$$.fragment),MSr=l(),V8e=a("p"),ESr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CSr=l(),Oc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),X8e=a("strong"),ASr=o("not"),LSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),ySr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(fE.$$.fragment),kSr=l(),Dr=a("div"),F(Ex.$$.fragment),SSr=l(),z8e=a("p"),RSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PSr=l(),bn=a("p"),BSr=o("The model class to instantiate is selected based on the "),W8e=a("code"),ISr=o("model_type"),NSr=o(` property of the config object (either
passed as an argument or loaded from `),Q8e=a("code"),qSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),U8e=a("ul"),mE=a("li"),J8e=a("strong"),VSr=o("speech_to_text"),XSr=o(" \u2014 "),_K=a("a"),zSr=o("TFSpeech2TextForConditionalGeneration"),WSr=o(" (Speech2Text model)"),QSr=l(),F(gE.$$.fragment),OOe=l(),Vc=a("h2"),hE=a("a"),Y8e=a("span"),F(Cx.$$.fragment),HSr=l(),K8e=a("span"),USr=o("FlaxAutoModel"),VOe=l(),gr=a("div"),F(wx.$$.fragment),JSr=l(),Xc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bK=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),vK=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),Ax=a("p"),tRr=o("This class cannot be instantiated directly using "),Z8e=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),zt=a("div"),F(Lx.$$.fragment),lRr=l(),eMe=a("p"),iRr=o("Instantiates one of the base model classes of the library from a configuration."),dRr=l(),zc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(pE.$$.fragment),uRr=l(),Gr=a("div"),F(yx.$$.fragment),_Rr=l(),rMe=a("p"),bRr=o("Instantiate one of the base model classes of the library from a pretrained model."),vRr=l(),vn=a("p"),FRr=o("The model class to instantiate is selected based on the "),tMe=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),LRr=l(),oe=a("ul"),uE=a("li"),sMe=a("strong"),yRr=o("albert"),xRr=o(" \u2014 "),TK=a("a"),$Rr=o("FlaxAlbertModel"),kRr=o(" (ALBERT model)"),SRr=l(),_E=a("li"),lMe=a("strong"),RRr=o("bart"),PRr=o(" \u2014 "),MK=a("a"),BRr=o("FlaxBartModel"),IRr=o(" (BART model)"),NRr=l(),bE=a("li"),iMe=a("strong"),qRr=o("beit"),jRr=o(" \u2014 "),EK=a("a"),DRr=o("FlaxBeitModel"),GRr=o(" (BEiT model)"),ORr=l(),vE=a("li"),dMe=a("strong"),VRr=o("bert"),XRr=o(" \u2014 "),CK=a("a"),zRr=o("FlaxBertModel"),WRr=o(" (BERT model)"),QRr=l(),FE=a("li"),cMe=a("strong"),HRr=o("big_bird"),URr=o(" \u2014 "),wK=a("a"),JRr=o("FlaxBigBirdModel"),YRr=o(" (BigBird model)"),KRr=l(),TE=a("li"),fMe=a("strong"),ZRr=o("blenderbot"),ePr=o(" \u2014 "),AK=a("a"),oPr=o("FlaxBlenderbotModel"),rPr=o(" (Blenderbot model)"),tPr=l(),ME=a("li"),mMe=a("strong"),aPr=o("blenderbot-small"),nPr=o(" \u2014 "),LK=a("a"),sPr=o("FlaxBlenderbotSmallModel"),lPr=o(" (BlenderbotSmall model)"),iPr=l(),EE=a("li"),gMe=a("strong"),dPr=o("clip"),cPr=o(" \u2014 "),yK=a("a"),fPr=o("FlaxCLIPModel"),mPr=o(" (CLIP model)"),gPr=l(),CE=a("li"),hMe=a("strong"),hPr=o("distilbert"),pPr=o(" \u2014 "),xK=a("a"),uPr=o("FlaxDistilBertModel"),_Pr=o(" (DistilBERT model)"),bPr=l(),wE=a("li"),pMe=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),$K=a("a"),TPr=o("FlaxElectraModel"),MPr=o(" (ELECTRA model)"),EPr=l(),AE=a("li"),uMe=a("strong"),CPr=o("gpt2"),wPr=o(" \u2014 "),kK=a("a"),APr=o("FlaxGPT2Model"),LPr=o(" (OpenAI GPT-2 model)"),yPr=l(),LE=a("li"),_Me=a("strong"),xPr=o("gpt_neo"),$Pr=o(" \u2014 "),SK=a("a"),kPr=o("FlaxGPTNeoModel"),SPr=o(" (GPT Neo model)"),RPr=l(),yE=a("li"),bMe=a("strong"),PPr=o("gptj"),BPr=o(" \u2014 "),RK=a("a"),IPr=o("FlaxGPTJModel"),NPr=o(" (GPT-J model)"),qPr=l(),xE=a("li"),vMe=a("strong"),jPr=o("longt5"),DPr=o(" \u2014 "),PK=a("a"),GPr=o("FlaxLongT5Model"),OPr=o(" (LongT5 model)"),VPr=l(),$E=a("li"),FMe=a("strong"),XPr=o("marian"),zPr=o(" \u2014 "),BK=a("a"),WPr=o("FlaxMarianModel"),QPr=o(" (Marian model)"),HPr=l(),kE=a("li"),TMe=a("strong"),UPr=o("mbart"),JPr=o(" \u2014 "),IK=a("a"),YPr=o("FlaxMBartModel"),KPr=o(" (mBART model)"),ZPr=l(),SE=a("li"),MMe=a("strong"),eBr=o("mt5"),oBr=o(" \u2014 "),NK=a("a"),rBr=o("FlaxMT5Model"),tBr=o(" (MT5 model)"),aBr=l(),RE=a("li"),EMe=a("strong"),nBr=o("opt"),sBr=o(" \u2014 "),qK=a("a"),lBr=o("FlaxOPTModel"),iBr=o(" (OPT model)"),dBr=l(),PE=a("li"),CMe=a("strong"),cBr=o("pegasus"),fBr=o(" \u2014 "),jK=a("a"),mBr=o("FlaxPegasusModel"),gBr=o(" (Pegasus model)"),hBr=l(),BE=a("li"),wMe=a("strong"),pBr=o("roberta"),uBr=o(" \u2014 "),DK=a("a"),_Br=o("FlaxRobertaModel"),bBr=o(" (RoBERTa model)"),vBr=l(),IE=a("li"),AMe=a("strong"),FBr=o("roformer"),TBr=o(" \u2014 "),GK=a("a"),MBr=o("FlaxRoFormerModel"),EBr=o(" (RoFormer model)"),CBr=l(),NE=a("li"),LMe=a("strong"),wBr=o("t5"),ABr=o(" \u2014 "),OK=a("a"),LBr=o("FlaxT5Model"),yBr=o(" (T5 model)"),xBr=l(),qE=a("li"),yMe=a("strong"),$Br=o("vision-text-dual-encoder"),kBr=o(" \u2014 "),VK=a("a"),SBr=o("FlaxVisionTextDualEncoderModel"),RBr=o(" (VisionTextDualEncoder model)"),PBr=l(),jE=a("li"),xMe=a("strong"),BBr=o("vit"),IBr=o(" \u2014 "),XK=a("a"),NBr=o("FlaxViTModel"),qBr=o(" (ViT model)"),jBr=l(),DE=a("li"),$Me=a("strong"),DBr=o("wav2vec2"),GBr=o(" \u2014 "),zK=a("a"),OBr=o("FlaxWav2Vec2Model"),VBr=o(" (Wav2Vec2 model)"),XBr=l(),GE=a("li"),kMe=a("strong"),zBr=o("xglm"),WBr=o(" \u2014 "),WK=a("a"),QBr=o("FlaxXGLMModel"),HBr=o(" (XGLM model)"),UBr=l(),OE=a("li"),SMe=a("strong"),JBr=o("xlm-roberta"),YBr=o(" \u2014 "),QK=a("a"),KBr=o("FlaxXLMRobertaModel"),ZBr=o(" (XLM-RoBERTa model)"),eIr=l(),F(VE.$$.fragment),XOe=l(),Wc=a("h2"),XE=a("a"),RMe=a("span"),F(xx.$$.fragment),oIr=l(),PMe=a("span"),rIr=o("FlaxAutoModelForCausalLM"),zOe=l(),hr=a("div"),F($x.$$.fragment),tIr=l(),Qc=a("p"),aIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HK=a("a"),nIr=o("from_pretrained()"),sIr=o(" class method or the "),UK=a("a"),lIr=o("from_config()"),iIr=o(` class
method.`),dIr=l(),kx=a("p"),cIr=o("This class cannot be instantiated directly using "),BMe=a("code"),fIr=o("__init__()"),mIr=o(" (throws an error)."),gIr=l(),Wt=a("div"),F(Sx.$$.fragment),hIr=l(),IMe=a("p"),pIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uIr=l(),Hc=a("p"),_Ir=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),bIr=o("not"),vIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),FIr=o("from_pretrained()"),TIr=o(" to load the model weights."),MIr=l(),F(zE.$$.fragment),EIr=l(),Or=a("div"),F(Rx.$$.fragment),CIr=l(),qMe=a("p"),wIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AIr=l(),Fn=a("p"),LIr=o("The model class to instantiate is selected based on the "),jMe=a("code"),yIr=o("model_type"),xIr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),$Ir=o("pretrained_model_name_or_path"),kIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),SIr=o("pretrained_model_name_or_path"),RIr=o(":"),PIr=l(),xe=a("ul"),WE=a("li"),OMe=a("strong"),BIr=o("bart"),IIr=o(" \u2014 "),YK=a("a"),NIr=o("FlaxBartForCausalLM"),qIr=o(" (BART model)"),jIr=l(),QE=a("li"),VMe=a("strong"),DIr=o("bert"),GIr=o(" \u2014 "),KK=a("a"),OIr=o("FlaxBertForCausalLM"),VIr=o(" (BERT model)"),XIr=l(),HE=a("li"),XMe=a("strong"),zIr=o("big_bird"),WIr=o(" \u2014 "),ZK=a("a"),QIr=o("FlaxBigBirdForCausalLM"),HIr=o(" (BigBird model)"),UIr=l(),UE=a("li"),zMe=a("strong"),JIr=o("electra"),YIr=o(" \u2014 "),eZ=a("a"),KIr=o("FlaxElectraForCausalLM"),ZIr=o(" (ELECTRA model)"),eNr=l(),JE=a("li"),WMe=a("strong"),oNr=o("gpt2"),rNr=o(" \u2014 "),oZ=a("a"),tNr=o("FlaxGPT2LMHeadModel"),aNr=o(" (OpenAI GPT-2 model)"),nNr=l(),YE=a("li"),QMe=a("strong"),sNr=o("gpt_neo"),lNr=o(" \u2014 "),rZ=a("a"),iNr=o("FlaxGPTNeoForCausalLM"),dNr=o(" (GPT Neo model)"),cNr=l(),KE=a("li"),HMe=a("strong"),fNr=o("gptj"),mNr=o(" \u2014 "),tZ=a("a"),gNr=o("FlaxGPTJForCausalLM"),hNr=o(" (GPT-J model)"),pNr=l(),ZE=a("li"),UMe=a("strong"),uNr=o("opt"),_Nr=o(" \u2014 "),aZ=a("a"),bNr=o("FlaxOPTForCausalLM"),vNr=o(" (OPT model)"),FNr=l(),eC=a("li"),JMe=a("strong"),TNr=o("roberta"),MNr=o(" \u2014 "),nZ=a("a"),ENr=o("FlaxRobertaForCausalLM"),CNr=o(" (RoBERTa model)"),wNr=l(),oC=a("li"),YMe=a("strong"),ANr=o("xglm"),LNr=o(" \u2014 "),sZ=a("a"),yNr=o("FlaxXGLMForCausalLM"),xNr=o(" (XGLM model)"),$Nr=l(),F(rC.$$.fragment),WOe=l(),Uc=a("h2"),tC=a("a"),KMe=a("span"),F(Px.$$.fragment),kNr=l(),ZMe=a("span"),SNr=o("FlaxAutoModelForPreTraining"),QOe=l(),pr=a("div"),F(Bx.$$.fragment),RNr=l(),Jc=a("p"),PNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lZ=a("a"),BNr=o("from_pretrained()"),INr=o(" class method or the "),iZ=a("a"),NNr=o("from_config()"),qNr=o(` class
method.`),jNr=l(),Ix=a("p"),DNr=o("This class cannot be instantiated directly using "),e4e=a("code"),GNr=o("__init__()"),ONr=o(" (throws an error)."),VNr=l(),Qt=a("div"),F(Nx.$$.fragment),XNr=l(),o4e=a("p"),zNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WNr=l(),Yc=a("p"),QNr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),HNr=o("not"),UNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),JNr=o("from_pretrained()"),YNr=o(" to load the model weights."),KNr=l(),F(aC.$$.fragment),ZNr=l(),Vr=a("div"),F(qx.$$.fragment),eqr=l(),t4e=a("p"),oqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rqr=l(),Tn=a("p"),tqr=o("The model class to instantiate is selected based on the "),a4e=a("code"),aqr=o("model_type"),nqr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),sqr=o("pretrained_model_name_or_path"),lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(":"),cqr=l(),Ee=a("ul"),nC=a("li"),l4e=a("strong"),fqr=o("albert"),mqr=o(" \u2014 "),cZ=a("a"),gqr=o("FlaxAlbertForPreTraining"),hqr=o(" (ALBERT model)"),pqr=l(),sC=a("li"),i4e=a("strong"),uqr=o("bart"),_qr=o(" \u2014 "),fZ=a("a"),bqr=o("FlaxBartForConditionalGeneration"),vqr=o(" (BART model)"),Fqr=l(),lC=a("li"),d4e=a("strong"),Tqr=o("bert"),Mqr=o(" \u2014 "),mZ=a("a"),Eqr=o("FlaxBertForPreTraining"),Cqr=o(" (BERT model)"),wqr=l(),iC=a("li"),c4e=a("strong"),Aqr=o("big_bird"),Lqr=o(" \u2014 "),gZ=a("a"),yqr=o("FlaxBigBirdForPreTraining"),xqr=o(" (BigBird model)"),$qr=l(),dC=a("li"),f4e=a("strong"),kqr=o("electra"),Sqr=o(" \u2014 "),hZ=a("a"),Rqr=o("FlaxElectraForPreTraining"),Pqr=o(" (ELECTRA model)"),Bqr=l(),cC=a("li"),m4e=a("strong"),Iqr=o("longt5"),Nqr=o(" \u2014 "),pZ=a("a"),qqr=o("FlaxLongT5ForConditionalGeneration"),jqr=o(" (LongT5 model)"),Dqr=l(),fC=a("li"),g4e=a("strong"),Gqr=o("mbart"),Oqr=o(" \u2014 "),uZ=a("a"),Vqr=o("FlaxMBartForConditionalGeneration"),Xqr=o(" (mBART model)"),zqr=l(),mC=a("li"),h4e=a("strong"),Wqr=o("mt5"),Qqr=o(" \u2014 "),_Z=a("a"),Hqr=o("FlaxMT5ForConditionalGeneration"),Uqr=o(" (MT5 model)"),Jqr=l(),gC=a("li"),p4e=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),bZ=a("a"),Zqr=o("FlaxRobertaForMaskedLM"),ejr=o(" (RoBERTa model)"),ojr=l(),hC=a("li"),u4e=a("strong"),rjr=o("roformer"),tjr=o(" \u2014 "),vZ=a("a"),ajr=o("FlaxRoFormerForMaskedLM"),njr=o(" (RoFormer model)"),sjr=l(),pC=a("li"),_4e=a("strong"),ljr=o("t5"),ijr=o(" \u2014 "),FZ=a("a"),djr=o("FlaxT5ForConditionalGeneration"),cjr=o(" (T5 model)"),fjr=l(),uC=a("li"),b4e=a("strong"),mjr=o("wav2vec2"),gjr=o(" \u2014 "),TZ=a("a"),hjr=o("FlaxWav2Vec2ForPreTraining"),pjr=o(" (Wav2Vec2 model)"),ujr=l(),_C=a("li"),v4e=a("strong"),_jr=o("xlm-roberta"),bjr=o(" \u2014 "),MZ=a("a"),vjr=o("FlaxXLMRobertaForMaskedLM"),Fjr=o(" (XLM-RoBERTa model)"),Tjr=l(),F(bC.$$.fragment),HOe=l(),Kc=a("h2"),vC=a("a"),F4e=a("span"),F(jx.$$.fragment),Mjr=l(),T4e=a("span"),Ejr=o("FlaxAutoModelForMaskedLM"),UOe=l(),ur=a("div"),F(Dx.$$.fragment),Cjr=l(),Zc=a("p"),wjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EZ=a("a"),Ajr=o("from_pretrained()"),Ljr=o(" class method or the "),CZ=a("a"),yjr=o("from_config()"),xjr=o(` class
method.`),$jr=l(),Gx=a("p"),kjr=o("This class cannot be instantiated directly using "),M4e=a("code"),Sjr=o("__init__()"),Rjr=o(" (throws an error)."),Pjr=l(),Ht=a("div"),F(Ox.$$.fragment),Bjr=l(),E4e=a("p"),Ijr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Njr=l(),ef=a("p"),qjr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),jjr=o("not"),Djr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),Gjr=o("from_pretrained()"),Ojr=o(" to load the model weights."),Vjr=l(),F(FC.$$.fragment),Xjr=l(),Xr=a("div"),F(Vx.$$.fragment),zjr=l(),w4e=a("p"),Wjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qjr=l(),Mn=a("p"),Hjr=o("The model class to instantiate is selected based on the "),A4e=a("code"),Ujr=o("model_type"),Jjr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),Yjr=o("pretrained_model_name_or_path"),Kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(":"),oDr=l(),$e=a("ul"),TC=a("li"),x4e=a("strong"),rDr=o("albert"),tDr=o(" \u2014 "),AZ=a("a"),aDr=o("FlaxAlbertForMaskedLM"),nDr=o(" (ALBERT model)"),sDr=l(),MC=a("li"),$4e=a("strong"),lDr=o("bart"),iDr=o(" \u2014 "),LZ=a("a"),dDr=o("FlaxBartForConditionalGeneration"),cDr=o(" (BART model)"),fDr=l(),EC=a("li"),k4e=a("strong"),mDr=o("bert"),gDr=o(" \u2014 "),yZ=a("a"),hDr=o("FlaxBertForMaskedLM"),pDr=o(" (BERT model)"),uDr=l(),CC=a("li"),S4e=a("strong"),_Dr=o("big_bird"),bDr=o(" \u2014 "),xZ=a("a"),vDr=o("FlaxBigBirdForMaskedLM"),FDr=o(" (BigBird model)"),TDr=l(),wC=a("li"),R4e=a("strong"),MDr=o("distilbert"),EDr=o(" \u2014 "),$Z=a("a"),CDr=o("FlaxDistilBertForMaskedLM"),wDr=o(" (DistilBERT model)"),ADr=l(),AC=a("li"),P4e=a("strong"),LDr=o("electra"),yDr=o(" \u2014 "),kZ=a("a"),xDr=o("FlaxElectraForMaskedLM"),$Dr=o(" (ELECTRA model)"),kDr=l(),LC=a("li"),B4e=a("strong"),SDr=o("mbart"),RDr=o(" \u2014 "),SZ=a("a"),PDr=o("FlaxMBartForConditionalGeneration"),BDr=o(" (mBART model)"),IDr=l(),yC=a("li"),I4e=a("strong"),NDr=o("roberta"),qDr=o(" \u2014 "),RZ=a("a"),jDr=o("FlaxRobertaForMaskedLM"),DDr=o(" (RoBERTa model)"),GDr=l(),xC=a("li"),N4e=a("strong"),ODr=o("roformer"),VDr=o(" \u2014 "),PZ=a("a"),XDr=o("FlaxRoFormerForMaskedLM"),zDr=o(" (RoFormer model)"),WDr=l(),$C=a("li"),q4e=a("strong"),QDr=o("xlm-roberta"),HDr=o(" \u2014 "),BZ=a("a"),UDr=o("FlaxXLMRobertaForMaskedLM"),JDr=o(" (XLM-RoBERTa model)"),YDr=l(),F(kC.$$.fragment),JOe=l(),of=a("h2"),SC=a("a"),j4e=a("span"),F(Xx.$$.fragment),KDr=l(),D4e=a("span"),ZDr=o("FlaxAutoModelForSeq2SeqLM"),YOe=l(),_r=a("div"),F(zx.$$.fragment),eGr=l(),rf=a("p"),oGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IZ=a("a"),rGr=o("from_pretrained()"),tGr=o(" class method or the "),NZ=a("a"),aGr=o("from_config()"),nGr=o(` class
method.`),sGr=l(),Wx=a("p"),lGr=o("This class cannot be instantiated directly using "),G4e=a("code"),iGr=o("__init__()"),dGr=o(" (throws an error)."),cGr=l(),Ut=a("div"),F(Qx.$$.fragment),fGr=l(),O4e=a("p"),mGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gGr=l(),tf=a("p"),hGr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),pGr=o("not"),uGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),_Gr=o("from_pretrained()"),bGr=o(" to load the model weights."),vGr=l(),F(RC.$$.fragment),FGr=l(),zr=a("div"),F(Hx.$$.fragment),TGr=l(),X4e=a("p"),MGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EGr=l(),En=a("p"),CGr=o("The model class to instantiate is selected based on the "),z4e=a("code"),wGr=o("model_type"),AGr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),LGr=o("pretrained_model_name_or_path"),yGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(":"),kGr=l(),ke=a("ul"),PC=a("li"),H4e=a("strong"),SGr=o("bart"),RGr=o(" \u2014 "),jZ=a("a"),PGr=o("FlaxBartForConditionalGeneration"),BGr=o(" (BART model)"),IGr=l(),BC=a("li"),U4e=a("strong"),NGr=o("blenderbot"),qGr=o(" \u2014 "),DZ=a("a"),jGr=o("FlaxBlenderbotForConditionalGeneration"),DGr=o(" (Blenderbot model)"),GGr=l(),IC=a("li"),J4e=a("strong"),OGr=o("blenderbot-small"),VGr=o(" \u2014 "),GZ=a("a"),XGr=o("FlaxBlenderbotSmallForConditionalGeneration"),zGr=o(" (BlenderbotSmall model)"),WGr=l(),NC=a("li"),Y4e=a("strong"),QGr=o("encoder-decoder"),HGr=o(" \u2014 "),OZ=a("a"),UGr=o("FlaxEncoderDecoderModel"),JGr=o(" (Encoder decoder model)"),YGr=l(),qC=a("li"),K4e=a("strong"),KGr=o("longt5"),ZGr=o(" \u2014 "),VZ=a("a"),eOr=o("FlaxLongT5ForConditionalGeneration"),oOr=o(" (LongT5 model)"),rOr=l(),jC=a("li"),Z4e=a("strong"),tOr=o("marian"),aOr=o(" \u2014 "),XZ=a("a"),nOr=o("FlaxMarianMTModel"),sOr=o(" (Marian model)"),lOr=l(),DC=a("li"),eEe=a("strong"),iOr=o("mbart"),dOr=o(" \u2014 "),zZ=a("a"),cOr=o("FlaxMBartForConditionalGeneration"),fOr=o(" (mBART model)"),mOr=l(),GC=a("li"),oEe=a("strong"),gOr=o("mt5"),hOr=o(" \u2014 "),WZ=a("a"),pOr=o("FlaxMT5ForConditionalGeneration"),uOr=o(" (MT5 model)"),_Or=l(),OC=a("li"),rEe=a("strong"),bOr=o("pegasus"),vOr=o(" \u2014 "),QZ=a("a"),FOr=o("FlaxPegasusForConditionalGeneration"),TOr=o(" (Pegasus model)"),MOr=l(),VC=a("li"),tEe=a("strong"),EOr=o("t5"),COr=o(" \u2014 "),HZ=a("a"),wOr=o("FlaxT5ForConditionalGeneration"),AOr=o(" (T5 model)"),LOr=l(),F(XC.$$.fragment),KOe=l(),af=a("h2"),zC=a("a"),aEe=a("span"),F(Ux.$$.fragment),yOr=l(),nEe=a("span"),xOr=o("FlaxAutoModelForSequenceClassification"),ZOe=l(),br=a("div"),F(Jx.$$.fragment),$Or=l(),nf=a("p"),kOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UZ=a("a"),SOr=o("from_pretrained()"),ROr=o(" class method or the "),JZ=a("a"),POr=o("from_config()"),BOr=o(` class
method.`),IOr=l(),Yx=a("p"),NOr=o("This class cannot be instantiated directly using "),sEe=a("code"),qOr=o("__init__()"),jOr=o(" (throws an error)."),DOr=l(),Jt=a("div"),F(Kx.$$.fragment),GOr=l(),lEe=a("p"),OOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VOr=l(),sf=a("p"),XOr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),zOr=o("not"),WOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),QOr=o("from_pretrained()"),HOr=o(" to load the model weights."),UOr=l(),F(WC.$$.fragment),JOr=l(),Wr=a("div"),F(Zx.$$.fragment),YOr=l(),dEe=a("p"),KOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZOr=l(),Cn=a("p"),eVr=o("The model class to instantiate is selected based on the "),cEe=a("code"),oVr=o("model_type"),rVr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),tVr=o("pretrained_model_name_or_path"),aVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),nVr=o("pretrained_model_name_or_path"),sVr=o(":"),lVr=l(),Se=a("ul"),QC=a("li"),gEe=a("strong"),iVr=o("albert"),dVr=o(" \u2014 "),KZ=a("a"),cVr=o("FlaxAlbertForSequenceClassification"),fVr=o(" (ALBERT model)"),mVr=l(),HC=a("li"),hEe=a("strong"),gVr=o("bart"),hVr=o(" \u2014 "),ZZ=a("a"),pVr=o("FlaxBartForSequenceClassification"),uVr=o(" (BART model)"),_Vr=l(),UC=a("li"),pEe=a("strong"),bVr=o("bert"),vVr=o(" \u2014 "),eee=a("a"),FVr=o("FlaxBertForSequenceClassification"),TVr=o(" (BERT model)"),MVr=l(),JC=a("li"),uEe=a("strong"),EVr=o("big_bird"),CVr=o(" \u2014 "),oee=a("a"),wVr=o("FlaxBigBirdForSequenceClassification"),AVr=o(" (BigBird model)"),LVr=l(),YC=a("li"),_Ee=a("strong"),yVr=o("distilbert"),xVr=o(" \u2014 "),ree=a("a"),$Vr=o("FlaxDistilBertForSequenceClassification"),kVr=o(" (DistilBERT model)"),SVr=l(),KC=a("li"),bEe=a("strong"),RVr=o("electra"),PVr=o(" \u2014 "),tee=a("a"),BVr=o("FlaxElectraForSequenceClassification"),IVr=o(" (ELECTRA model)"),NVr=l(),ZC=a("li"),vEe=a("strong"),qVr=o("mbart"),jVr=o(" \u2014 "),aee=a("a"),DVr=o("FlaxMBartForSequenceClassification"),GVr=o(" (mBART model)"),OVr=l(),e5=a("li"),FEe=a("strong"),VVr=o("roberta"),XVr=o(" \u2014 "),nee=a("a"),zVr=o("FlaxRobertaForSequenceClassification"),WVr=o(" (RoBERTa model)"),QVr=l(),o5=a("li"),TEe=a("strong"),HVr=o("roformer"),UVr=o(" \u2014 "),see=a("a"),JVr=o("FlaxRoFormerForSequenceClassification"),YVr=o(" (RoFormer model)"),KVr=l(),r5=a("li"),MEe=a("strong"),ZVr=o("xlm-roberta"),eXr=o(" \u2014 "),lee=a("a"),oXr=o("FlaxXLMRobertaForSequenceClassification"),rXr=o(" (XLM-RoBERTa model)"),tXr=l(),F(t5.$$.fragment),eVe=l(),lf=a("h2"),a5=a("a"),EEe=a("span"),F(e$.$$.fragment),aXr=l(),CEe=a("span"),nXr=o("FlaxAutoModelForQuestionAnswering"),oVe=l(),vr=a("div"),F(o$.$$.fragment),sXr=l(),df=a("p"),lXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iee=a("a"),iXr=o("from_pretrained()"),dXr=o(" class method or the "),dee=a("a"),cXr=o("from_config()"),fXr=o(` class
method.`),mXr=l(),r$=a("p"),gXr=o("This class cannot be instantiated directly using "),wEe=a("code"),hXr=o("__init__()"),pXr=o(" (throws an error)."),uXr=l(),Yt=a("div"),F(t$.$$.fragment),_Xr=l(),AEe=a("p"),bXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vXr=l(),cf=a("p"),FXr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),TXr=o("not"),MXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),EXr=o("from_pretrained()"),CXr=o(" to load the model weights."),wXr=l(),F(n5.$$.fragment),AXr=l(),Qr=a("div"),F(a$.$$.fragment),LXr=l(),yEe=a("p"),yXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xXr=l(),wn=a("p"),$Xr=o("The model class to instantiate is selected based on the "),xEe=a("code"),kXr=o("model_type"),SXr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),BXr=o("pretrained_model_name_or_path"),IXr=o(":"),NXr=l(),Re=a("ul"),s5=a("li"),SEe=a("strong"),qXr=o("albert"),jXr=o(" \u2014 "),fee=a("a"),DXr=o("FlaxAlbertForQuestionAnswering"),GXr=o(" (ALBERT model)"),OXr=l(),l5=a("li"),REe=a("strong"),VXr=o("bart"),XXr=o(" \u2014 "),mee=a("a"),zXr=o("FlaxBartForQuestionAnswering"),WXr=o(" (BART model)"),QXr=l(),i5=a("li"),PEe=a("strong"),HXr=o("bert"),UXr=o(" \u2014 "),gee=a("a"),JXr=o("FlaxBertForQuestionAnswering"),YXr=o(" (BERT model)"),KXr=l(),d5=a("li"),BEe=a("strong"),ZXr=o("big_bird"),ezr=o(" \u2014 "),hee=a("a"),ozr=o("FlaxBigBirdForQuestionAnswering"),rzr=o(" (BigBird model)"),tzr=l(),c5=a("li"),IEe=a("strong"),azr=o("distilbert"),nzr=o(" \u2014 "),pee=a("a"),szr=o("FlaxDistilBertForQuestionAnswering"),lzr=o(" (DistilBERT model)"),izr=l(),f5=a("li"),NEe=a("strong"),dzr=o("electra"),czr=o(" \u2014 "),uee=a("a"),fzr=o("FlaxElectraForQuestionAnswering"),mzr=o(" (ELECTRA model)"),gzr=l(),m5=a("li"),qEe=a("strong"),hzr=o("mbart"),pzr=o(" \u2014 "),_ee=a("a"),uzr=o("FlaxMBartForQuestionAnswering"),_zr=o(" (mBART model)"),bzr=l(),g5=a("li"),jEe=a("strong"),vzr=o("roberta"),Fzr=o(" \u2014 "),bee=a("a"),Tzr=o("FlaxRobertaForQuestionAnswering"),Mzr=o(" (RoBERTa model)"),Ezr=l(),h5=a("li"),DEe=a("strong"),Czr=o("roformer"),wzr=o(" \u2014 "),vee=a("a"),Azr=o("FlaxRoFormerForQuestionAnswering"),Lzr=o(" (RoFormer model)"),yzr=l(),p5=a("li"),GEe=a("strong"),xzr=o("xlm-roberta"),$zr=o(" \u2014 "),Fee=a("a"),kzr=o("FlaxXLMRobertaForQuestionAnswering"),Szr=o(" (XLM-RoBERTa model)"),Rzr=l(),F(u5.$$.fragment),rVe=l(),ff=a("h2"),_5=a("a"),OEe=a("span"),F(n$.$$.fragment),Pzr=l(),VEe=a("span"),Bzr=o("FlaxAutoModelForTokenClassification"),tVe=l(),Fr=a("div"),F(s$.$$.fragment),Izr=l(),mf=a("p"),Nzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tee=a("a"),qzr=o("from_pretrained()"),jzr=o(" class method or the "),Mee=a("a"),Dzr=o("from_config()"),Gzr=o(` class
method.`),Ozr=l(),l$=a("p"),Vzr=o("This class cannot be instantiated directly using "),XEe=a("code"),Xzr=o("__init__()"),zzr=o(" (throws an error)."),Wzr=l(),Kt=a("div"),F(i$.$$.fragment),Qzr=l(),zEe=a("p"),Hzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Uzr=l(),gf=a("p"),Jzr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),Yzr=o("not"),Kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),Zzr=o("from_pretrained()"),eWr=o(" to load the model weights."),oWr=l(),F(b5.$$.fragment),rWr=l(),Hr=a("div"),F(d$.$$.fragment),tWr=l(),QEe=a("p"),aWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nWr=l(),An=a("p"),sWr=o("The model class to instantiate is selected based on the "),HEe=a("code"),lWr=o("model_type"),iWr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),dWr=o("pretrained_model_name_or_path"),cWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),fWr=o("pretrained_model_name_or_path"),mWr=o(":"),gWr=l(),Ve=a("ul"),v5=a("li"),YEe=a("strong"),hWr=o("albert"),pWr=o(" \u2014 "),Cee=a("a"),uWr=o("FlaxAlbertForTokenClassification"),_Wr=o(" (ALBERT model)"),bWr=l(),F5=a("li"),KEe=a("strong"),vWr=o("bert"),FWr=o(" \u2014 "),wee=a("a"),TWr=o("FlaxBertForTokenClassification"),MWr=o(" (BERT model)"),EWr=l(),T5=a("li"),ZEe=a("strong"),CWr=o("big_bird"),wWr=o(" \u2014 "),Aee=a("a"),AWr=o("FlaxBigBirdForTokenClassification"),LWr=o(" (BigBird model)"),yWr=l(),M5=a("li"),eCe=a("strong"),xWr=o("distilbert"),$Wr=o(" \u2014 "),Lee=a("a"),kWr=o("FlaxDistilBertForTokenClassification"),SWr=o(" (DistilBERT model)"),RWr=l(),E5=a("li"),oCe=a("strong"),PWr=o("electra"),BWr=o(" \u2014 "),yee=a("a"),IWr=o("FlaxElectraForTokenClassification"),NWr=o(" (ELECTRA model)"),qWr=l(),C5=a("li"),rCe=a("strong"),jWr=o("roberta"),DWr=o(" \u2014 "),xee=a("a"),GWr=o("FlaxRobertaForTokenClassification"),OWr=o(" (RoBERTa model)"),VWr=l(),w5=a("li"),tCe=a("strong"),XWr=o("roformer"),zWr=o(" \u2014 "),$ee=a("a"),WWr=o("FlaxRoFormerForTokenClassification"),QWr=o(" (RoFormer model)"),HWr=l(),A5=a("li"),aCe=a("strong"),UWr=o("xlm-roberta"),JWr=o(" \u2014 "),kee=a("a"),YWr=o("FlaxXLMRobertaForTokenClassification"),KWr=o(" (XLM-RoBERTa model)"),ZWr=l(),F(L5.$$.fragment),aVe=l(),hf=a("h2"),y5=a("a"),nCe=a("span"),F(c$.$$.fragment),eQr=l(),sCe=a("span"),oQr=o("FlaxAutoModelForMultipleChoice"),nVe=l(),Tr=a("div"),F(f$.$$.fragment),rQr=l(),pf=a("p"),tQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=a("a"),aQr=o("from_pretrained()"),nQr=o(" class method or the "),Ree=a("a"),sQr=o("from_config()"),lQr=o(` class
method.`),iQr=l(),m$=a("p"),dQr=o("This class cannot be instantiated directly using "),lCe=a("code"),cQr=o("__init__()"),fQr=o(" (throws an error)."),mQr=l(),Zt=a("div"),F(g$.$$.fragment),gQr=l(),iCe=a("p"),hQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pQr=l(),uf=a("p"),uQr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),_Qr=o("not"),bQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),vQr=o("from_pretrained()"),FQr=o(" to load the model weights."),TQr=l(),F(x5.$$.fragment),MQr=l(),Ur=a("div"),F(h$.$$.fragment),EQr=l(),cCe=a("p"),CQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wQr=l(),Ln=a("p"),AQr=o("The model class to instantiate is selected based on the "),fCe=a("code"),LQr=o("model_type"),yQr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),xQr=o("pretrained_model_name_or_path"),$Qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),kQr=o("pretrained_model_name_or_path"),SQr=o(":"),RQr=l(),Xe=a("ul"),$5=a("li"),hCe=a("strong"),PQr=o("albert"),BQr=o(" \u2014 "),Bee=a("a"),IQr=o("FlaxAlbertForMultipleChoice"),NQr=o(" (ALBERT model)"),qQr=l(),k5=a("li"),pCe=a("strong"),jQr=o("bert"),DQr=o(" \u2014 "),Iee=a("a"),GQr=o("FlaxBertForMultipleChoice"),OQr=o(" (BERT model)"),VQr=l(),S5=a("li"),uCe=a("strong"),XQr=o("big_bird"),zQr=o(" \u2014 "),Nee=a("a"),WQr=o("FlaxBigBirdForMultipleChoice"),QQr=o(" (BigBird model)"),HQr=l(),R5=a("li"),_Ce=a("strong"),UQr=o("distilbert"),JQr=o(" \u2014 "),qee=a("a"),YQr=o("FlaxDistilBertForMultipleChoice"),KQr=o(" (DistilBERT model)"),ZQr=l(),P5=a("li"),bCe=a("strong"),eHr=o("electra"),oHr=o(" \u2014 "),jee=a("a"),rHr=o("FlaxElectraForMultipleChoice"),tHr=o(" (ELECTRA model)"),aHr=l(),B5=a("li"),vCe=a("strong"),nHr=o("roberta"),sHr=o(" \u2014 "),Dee=a("a"),lHr=o("FlaxRobertaForMultipleChoice"),iHr=o(" (RoBERTa model)"),dHr=l(),I5=a("li"),FCe=a("strong"),cHr=o("roformer"),fHr=o(" \u2014 "),Gee=a("a"),mHr=o("FlaxRoFormerForMultipleChoice"),gHr=o(" (RoFormer model)"),hHr=l(),N5=a("li"),TCe=a("strong"),pHr=o("xlm-roberta"),uHr=o(" \u2014 "),Oee=a("a"),_Hr=o("FlaxXLMRobertaForMultipleChoice"),bHr=o(" (XLM-RoBERTa model)"),vHr=l(),F(q5.$$.fragment),sVe=l(),_f=a("h2"),j5=a("a"),MCe=a("span"),F(p$.$$.fragment),FHr=l(),ECe=a("span"),THr=o("FlaxAutoModelForNextSentencePrediction"),lVe=l(),Mr=a("div"),F(u$.$$.fragment),MHr=l(),bf=a("p"),EHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Vee=a("a"),CHr=o("from_pretrained()"),wHr=o(" class method or the "),Xee=a("a"),AHr=o("from_config()"),LHr=o(` class
method.`),yHr=l(),_$=a("p"),xHr=o("This class cannot be instantiated directly using "),CCe=a("code"),$Hr=o("__init__()"),kHr=o(" (throws an error)."),SHr=l(),ea=a("div"),F(b$.$$.fragment),RHr=l(),wCe=a("p"),PHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BHr=l(),vf=a("p"),IHr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),NHr=o("not"),qHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),jHr=o("from_pretrained()"),DHr=o(" to load the model weights."),GHr=l(),F(D5.$$.fragment),OHr=l(),Jr=a("div"),F(v$.$$.fragment),VHr=l(),LCe=a("p"),XHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zHr=l(),yn=a("p"),WHr=o("The model class to instantiate is selected based on the "),yCe=a("code"),QHr=o("model_type"),HHr=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),UHr=o("pretrained_model_name_or_path"),JHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(":"),ZHr=l(),kCe=a("ul"),G5=a("li"),SCe=a("strong"),eUr=o("bert"),oUr=o(" \u2014 "),Wee=a("a"),rUr=o("FlaxBertForNextSentencePrediction"),tUr=o(" (BERT model)"),aUr=l(),F(O5.$$.fragment),iVe=l(),Ff=a("h2"),V5=a("a"),RCe=a("span"),F(F$.$$.fragment),nUr=l(),PCe=a("span"),sUr=o("FlaxAutoModelForImageClassification"),dVe=l(),Er=a("div"),F(T$.$$.fragment),lUr=l(),Tf=a("p"),iUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qee=a("a"),dUr=o("from_pretrained()"),cUr=o(" class method or the "),Hee=a("a"),fUr=o("from_config()"),mUr=o(` class
method.`),gUr=l(),M$=a("p"),hUr=o("This class cannot be instantiated directly using "),BCe=a("code"),pUr=o("__init__()"),uUr=o(" (throws an error)."),_Ur=l(),oa=a("div"),F(E$.$$.fragment),bUr=l(),ICe=a("p"),vUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FUr=l(),Mf=a("p"),TUr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),MUr=o("not"),EUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),CUr=o("from_pretrained()"),wUr=o(" to load the model weights."),AUr=l(),F(X5.$$.fragment),LUr=l(),Yr=a("div"),F(C$.$$.fragment),yUr=l(),qCe=a("p"),xUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Ur=l(),xn=a("p"),kUr=o("The model class to instantiate is selected based on the "),jCe=a("code"),SUr=o("model_type"),RUr=o(` property of the config object (either
passed as an argument or loaded from `),DCe=a("code"),PUr=o("pretrained_model_name_or_path"),BUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=a("code"),IUr=o("pretrained_model_name_or_path"),NUr=o(":"),qUr=l(),w$=a("ul"),z5=a("li"),OCe=a("strong"),jUr=o("beit"),DUr=o(" \u2014 "),Jee=a("a"),GUr=o("FlaxBeitForImageClassification"),OUr=o(" (BEiT model)"),VUr=l(),W5=a("li"),VCe=a("strong"),XUr=o("vit"),zUr=o(" \u2014 "),Yee=a("a"),WUr=o("FlaxViTForImageClassification"),QUr=o(" (ViT model)"),HUr=l(),F(Q5.$$.fragment),cVe=l(),Ef=a("h2"),H5=a("a"),XCe=a("span"),F(A$.$$.fragment),UUr=l(),zCe=a("span"),JUr=o("FlaxAutoModelForVision2Seq"),fVe=l(),Cr=a("div"),F(L$.$$.fragment),YUr=l(),Cf=a("p"),KUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Kee=a("a"),ZUr=o("from_pretrained()"),eJr=o(" class method or the "),Zee=a("a"),oJr=o("from_config()"),rJr=o(` class
method.`),tJr=l(),y$=a("p"),aJr=o("This class cannot be instantiated directly using "),WCe=a("code"),nJr=o("__init__()"),sJr=o(" (throws an error)."),lJr=l(),ra=a("div"),F(x$.$$.fragment),iJr=l(),QCe=a("p"),dJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cJr=l(),wf=a("p"),fJr=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),mJr=o("not"),gJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),hJr=o("from_pretrained()"),pJr=o(" to load the model weights."),uJr=l(),F(U5.$$.fragment),_Jr=l(),Kr=a("div"),F($$.$$.fragment),bJr=l(),UCe=a("p"),vJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FJr=l(),$n=a("p"),TJr=o("The model class to instantiate is selected based on the "),JCe=a("code"),MJr=o("model_type"),EJr=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),CJr=o("pretrained_model_name_or_path"),wJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(":"),yJr=l(),ZCe=a("ul"),J5=a("li"),e5e=a("strong"),xJr=o("vision-encoder-decoder"),$Jr=o(" \u2014 "),ooe=a("a"),kJr=o("FlaxVisionEncoderDecoderModel"),SJr=o(" (Vision Encoder decoder model)"),RJr=l(),F(Y5.$$.fragment),this.h()},l(f){const _=Oqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var k$=s(p);m=n(k$,"A",{id:!0,class:!0,href:!0});var o5e=s(m);u=n(o5e,"SPAN",{});var r5e=s(u);T(d.$$.fragment,r5e),r5e.forEach(t),o5e.forEach(t),h=i(k$),Eo=n(k$,"SPAN",{});var t5e=s(Eo);Mi=r(t5e,"Auto Classes"),t5e.forEach(t),k$.forEach(t),xf=i(f),nt=n(f,"P",{});var S$=s(nt);Ei=r(S$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(S$,"CODE",{});var a5e=s(Ci);_A=r(a5e,"from_pretrained()"),a5e.forEach(t),$f=r(S$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),S$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);wi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var n5e=s(Sn);bA=r(n5e,"AutoConfig"),n5e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var s5e=s(Pn);vA=r(s5e,"AutoModel"),s5e.forEach(t),Ai=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var l5e=s(Bn);FA=r(l5e,"AutoTokenizer"),l5e.forEach(t),Li=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),kf=i(f),T(xa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var R$=s(Ae);Hk=r(R$,"will create a model that is an instance of "),yi=n(R$,"A",{href:!0});var i5e=s(yi);Uk=r(i5e,"BertModel"),i5e.forEach(t),Jk=r(R$,"."),R$.forEach(t),Co=i(f),$a=n(f,"P",{});var P$=s($a);Yk=r(P$,"There is one class of "),Sf=n(P$,"CODE",{});var d5e=s(Sf);Kk=r(d5e,"AutoModel"),d5e.forEach(t),Mze=r(P$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),P$.forEach(t),lGe=i(f),xi=n(f,"H2",{class:!0});var B$=s(xi);Rf=n(B$,"A",{id:!0,class:!0,href:!0});var c5e=s(Rf);Jre=n(c5e,"SPAN",{});var f5e=s(Jre);T(TA.$$.fragment,f5e),f5e.forEach(t),c5e.forEach(t),Eze=i(B$),Yre=n(B$,"SPAN",{});var m5e=s(Yre);Cze=r(m5e,"Extending the Auto Classes"),m5e.forEach(t),B$.forEach(t),iGe=i(f),In=n(f,"P",{});var Af=s(In);wze=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kre=n(Af,"CODE",{});var g5e=s(Kre);Aze=r(g5e,"NewModel"),g5e.forEach(t),Lze=r(Af,", make sure you have a "),Zre=n(Af,"CODE",{});var h5e=s(Zre);yze=r(h5e,"NewModelConfig"),h5e.forEach(t),xze=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),dGe=i(f),T(MA.$$.fragment,f),cGe=i(f),Zk=n(f,"P",{});var p5e=s(Zk);$ze=r(p5e,"You will then be able to use the auto classes like you would usually do!"),p5e.forEach(t),fGe=i(f),T(Pf.$$.fragment,f),mGe=i(f),$i=n(f,"H2",{class:!0});var I$=s($i);Bf=n(I$,"A",{id:!0,class:!0,href:!0});var u5e=s(Bf);ete=n(u5e,"SPAN",{});var _5e=s(ete);T(EA.$$.fragment,_5e),_5e.forEach(t),u5e.forEach(t),kze=i(I$),ote=n(I$,"SPAN",{});var b5e=s(ote);Sze=r(b5e,"AutoConfig"),b5e.forEach(t),I$.forEach(t),gGe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(CA.$$.fragment,tt),Rze=i(tt),wA=n(tt,"P",{});var N$=s(wA);Pze=r(N$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eS=n(N$,"A",{href:!0});var v5e=s(eS);Bze=r(v5e,"from_pretrained()"),v5e.forEach(t),Ize=r(N$," class method."),N$.forEach(t),Nze=i(tt),AA=n(tt,"P",{});var q$=s(AA);qze=r(q$,"This class cannot be instantiated directly using "),rte=n(q$,"CODE",{});var F5e=s(rte);jze=r(F5e,"__init__()"),F5e.forEach(t),Dze=r(q$," (throws an error)."),q$.forEach(t),Gze=i(tt),wr=n(tt,"DIV",{class:!0});var at=s(wr);T(LA.$$.fragment,at),Oze=i(at),tte=n(at,"P",{});var T5e=s(tte);Vze=r(T5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),T5e.forEach(t),Xze=i(at),ki=n(at,"P",{});var Lf=s(ki);zze=r(Lf,"The configuration class to instantiate is selected based on the "),ate=n(Lf,"CODE",{});var M5e=s(ate);Wze=r(M5e,"model_type"),M5e.forEach(t),Qze=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nte=n(Lf,"CODE",{});var E5e=s(nte);Hze=r(E5e,"pretrained_model_name_or_path"),E5e.forEach(t),Uze=r(Lf,":"),Lf.forEach(t),Jze=i(at),A=n(at,"UL",{});var L=s(A);If=n(L,"LI",{});var K5=s(If);ste=n(K5,"STRONG",{});var C5e=s(ste);Yze=r(C5e,"albert"),C5e.forEach(t),Kze=r(K5," \u2014 "),oS=n(K5,"A",{href:!0});var w5e=s(oS);Zze=r(w5e,"AlbertConfig"),w5e.forEach(t),eWe=r(K5," (ALBERT model)"),K5.forEach(t),oWe=i(L),Nf=n(L,"LI",{});var Z5=s(Nf);lte=n(Z5,"STRONG",{});var A5e=s(lte);rWe=r(A5e,"bart"),A5e.forEach(t),tWe=r(Z5," \u2014 "),rS=n(Z5,"A",{href:!0});var L5e=s(rS);aWe=r(L5e,"BartConfig"),L5e.forEach(t),nWe=r(Z5," (BART model)"),Z5.forEach(t),sWe=i(L),qf=n(L,"LI",{});var e3=s(qf);ite=n(e3,"STRONG",{});var y5e=s(ite);lWe=r(y5e,"beit"),y5e.forEach(t),iWe=r(e3," \u2014 "),tS=n(e3,"A",{href:!0});var x5e=s(tS);dWe=r(x5e,"BeitConfig"),x5e.forEach(t),cWe=r(e3," (BEiT model)"),e3.forEach(t),fWe=i(L),jf=n(L,"LI",{});var o3=s(jf);dte=n(o3,"STRONG",{});var $5e=s(dte);mWe=r($5e,"bert"),$5e.forEach(t),gWe=r(o3," \u2014 "),aS=n(o3,"A",{href:!0});var k5e=s(aS);hWe=r(k5e,"BertConfig"),k5e.forEach(t),pWe=r(o3," (BERT model)"),o3.forEach(t),uWe=i(L),Df=n(L,"LI",{});var r3=s(Df);cte=n(r3,"STRONG",{});var S5e=s(cte);_We=r(S5e,"bert-generation"),S5e.forEach(t),bWe=r(r3," \u2014 "),nS=n(r3,"A",{href:!0});var R5e=s(nS);vWe=r(R5e,"BertGenerationConfig"),R5e.forEach(t),FWe=r(r3," (Bert Generation model)"),r3.forEach(t),TWe=i(L),Gf=n(L,"LI",{});var t3=s(Gf);fte=n(t3,"STRONG",{});var P5e=s(fte);MWe=r(P5e,"big_bird"),P5e.forEach(t),EWe=r(t3," \u2014 "),sS=n(t3,"A",{href:!0});var B5e=s(sS);CWe=r(B5e,"BigBirdConfig"),B5e.forEach(t),wWe=r(t3," (BigBird model)"),t3.forEach(t),AWe=i(L),Of=n(L,"LI",{});var a3=s(Of);mte=n(a3,"STRONG",{});var I5e=s(mte);LWe=r(I5e,"bigbird_pegasus"),I5e.forEach(t),yWe=r(a3," \u2014 "),lS=n(a3,"A",{href:!0});var N5e=s(lS);xWe=r(N5e,"BigBirdPegasusConfig"),N5e.forEach(t),$We=r(a3," (BigBird-Pegasus model)"),a3.forEach(t),kWe=i(L),Vf=n(L,"LI",{});var n3=s(Vf);gte=n(n3,"STRONG",{});var q5e=s(gte);SWe=r(q5e,"blenderbot"),q5e.forEach(t),RWe=r(n3," \u2014 "),iS=n(n3,"A",{href:!0});var j5e=s(iS);PWe=r(j5e,"BlenderbotConfig"),j5e.forEach(t),BWe=r(n3," (Blenderbot model)"),n3.forEach(t),IWe=i(L),Xf=n(L,"LI",{});var s3=s(Xf);hte=n(s3,"STRONG",{});var D5e=s(hte);NWe=r(D5e,"blenderbot-small"),D5e.forEach(t),qWe=r(s3," \u2014 "),dS=n(s3,"A",{href:!0});var G5e=s(dS);jWe=r(G5e,"BlenderbotSmallConfig"),G5e.forEach(t),DWe=r(s3," (BlenderbotSmall model)"),s3.forEach(t),GWe=i(L),zf=n(L,"LI",{});var l3=s(zf);pte=n(l3,"STRONG",{});var O5e=s(pte);OWe=r(O5e,"bloom"),O5e.forEach(t),VWe=r(l3," \u2014 "),cS=n(l3,"A",{href:!0});var V5e=s(cS);XWe=r(V5e,"BloomConfig"),V5e.forEach(t),zWe=r(l3," (BLOOM model)"),l3.forEach(t),WWe=i(L),Wf=n(L,"LI",{});var i3=s(Wf);ute=n(i3,"STRONG",{});var X5e=s(ute);QWe=r(X5e,"camembert"),X5e.forEach(t),HWe=r(i3," \u2014 "),fS=n(i3,"A",{href:!0});var z5e=s(fS);UWe=r(z5e,"CamembertConfig"),z5e.forEach(t),JWe=r(i3," (CamemBERT model)"),i3.forEach(t),YWe=i(L),Qf=n(L,"LI",{});var d3=s(Qf);_te=n(d3,"STRONG",{});var W5e=s(_te);KWe=r(W5e,"canine"),W5e.forEach(t),ZWe=r(d3," \u2014 "),mS=n(d3,"A",{href:!0});var Q5e=s(mS);eQe=r(Q5e,"CanineConfig"),Q5e.forEach(t),oQe=r(d3," (CANINE model)"),d3.forEach(t),rQe=i(L),Hf=n(L,"LI",{});var c3=s(Hf);bte=n(c3,"STRONG",{});var H5e=s(bte);tQe=r(H5e,"clip"),H5e.forEach(t),aQe=r(c3," \u2014 "),gS=n(c3,"A",{href:!0});var U5e=s(gS);nQe=r(U5e,"CLIPConfig"),U5e.forEach(t),sQe=r(c3," (CLIP model)"),c3.forEach(t),lQe=i(L),Uf=n(L,"LI",{});var f3=s(Uf);vte=n(f3,"STRONG",{});var J5e=s(vte);iQe=r(J5e,"convbert"),J5e.forEach(t),dQe=r(f3," \u2014 "),hS=n(f3,"A",{href:!0});var Y5e=s(hS);cQe=r(Y5e,"ConvBertConfig"),Y5e.forEach(t),fQe=r(f3," (ConvBERT model)"),f3.forEach(t),mQe=i(L),Jf=n(L,"LI",{});var m3=s(Jf);Fte=n(m3,"STRONG",{});var K5e=s(Fte);gQe=r(K5e,"convnext"),K5e.forEach(t),hQe=r(m3," \u2014 "),pS=n(m3,"A",{href:!0});var Z5e=s(pS);pQe=r(Z5e,"ConvNextConfig"),Z5e.forEach(t),uQe=r(m3," (ConvNeXT model)"),m3.forEach(t),_Qe=i(L),Yf=n(L,"LI",{});var g3=s(Yf);Tte=n(g3,"STRONG",{});var e3e=s(Tte);bQe=r(e3e,"ctrl"),e3e.forEach(t),vQe=r(g3," \u2014 "),uS=n(g3,"A",{href:!0});var o3e=s(uS);FQe=r(o3e,"CTRLConfig"),o3e.forEach(t),TQe=r(g3," (CTRL model)"),g3.forEach(t),MQe=i(L),Kf=n(L,"LI",{});var h3=s(Kf);Mte=n(h3,"STRONG",{});var r3e=s(Mte);EQe=r(r3e,"cvt"),r3e.forEach(t),CQe=r(h3," \u2014 "),_S=n(h3,"A",{href:!0});var t3e=s(_S);wQe=r(t3e,"CvtConfig"),t3e.forEach(t),AQe=r(h3," (CvT model)"),h3.forEach(t),LQe=i(L),Zf=n(L,"LI",{});var p3=s(Zf);Ete=n(p3,"STRONG",{});var a3e=s(Ete);yQe=r(a3e,"data2vec-audio"),a3e.forEach(t),xQe=r(p3," \u2014 "),bS=n(p3,"A",{href:!0});var n3e=s(bS);$Qe=r(n3e,"Data2VecAudioConfig"),n3e.forEach(t),kQe=r(p3," (Data2VecAudio model)"),p3.forEach(t),SQe=i(L),em=n(L,"LI",{});var u3=s(em);Cte=n(u3,"STRONG",{});var s3e=s(Cte);RQe=r(s3e,"data2vec-text"),s3e.forEach(t),PQe=r(u3," \u2014 "),vS=n(u3,"A",{href:!0});var l3e=s(vS);BQe=r(l3e,"Data2VecTextConfig"),l3e.forEach(t),IQe=r(u3," (Data2VecText model)"),u3.forEach(t),NQe=i(L),om=n(L,"LI",{});var _3=s(om);wte=n(_3,"STRONG",{});var i3e=s(wte);qQe=r(i3e,"data2vec-vision"),i3e.forEach(t),jQe=r(_3," \u2014 "),FS=n(_3,"A",{href:!0});var d3e=s(FS);DQe=r(d3e,"Data2VecVisionConfig"),d3e.forEach(t),GQe=r(_3," (Data2VecVision model)"),_3.forEach(t),OQe=i(L),rm=n(L,"LI",{});var b3=s(rm);Ate=n(b3,"STRONG",{});var c3e=s(Ate);VQe=r(c3e,"deberta"),c3e.forEach(t),XQe=r(b3," \u2014 "),TS=n(b3,"A",{href:!0});var f3e=s(TS);zQe=r(f3e,"DebertaConfig"),f3e.forEach(t),WQe=r(b3," (DeBERTa model)"),b3.forEach(t),QQe=i(L),tm=n(L,"LI",{});var v3=s(tm);Lte=n(v3,"STRONG",{});var m3e=s(Lte);HQe=r(m3e,"deberta-v2"),m3e.forEach(t),UQe=r(v3," \u2014 "),MS=n(v3,"A",{href:!0});var g3e=s(MS);JQe=r(g3e,"DebertaV2Config"),g3e.forEach(t),YQe=r(v3," (DeBERTa-v2 model)"),v3.forEach(t),KQe=i(L),am=n(L,"LI",{});var F3=s(am);yte=n(F3,"STRONG",{});var h3e=s(yte);ZQe=r(h3e,"decision_transformer"),h3e.forEach(t),eHe=r(F3," \u2014 "),ES=n(F3,"A",{href:!0});var p3e=s(ES);oHe=r(p3e,"DecisionTransformerConfig"),p3e.forEach(t),rHe=r(F3," (Decision Transformer model)"),F3.forEach(t),tHe=i(L),nm=n(L,"LI",{});var T3=s(nm);xte=n(T3,"STRONG",{});var BJr=s(xte);aHe=r(BJr,"deit"),BJr.forEach(t),nHe=r(T3," \u2014 "),CS=n(T3,"A",{href:!0});var IJr=s(CS);sHe=r(IJr,"DeiTConfig"),IJr.forEach(t),lHe=r(T3," (DeiT model)"),T3.forEach(t),iHe=i(L),sm=n(L,"LI",{});var u3e=s(sm);$te=n(u3e,"STRONG",{});var NJr=s($te);dHe=r(NJr,"detr"),NJr.forEach(t),cHe=r(u3e," \u2014 "),wS=n(u3e,"A",{href:!0});var qJr=s(wS);fHe=r(qJr,"DetrConfig"),qJr.forEach(t),mHe=r(u3e," (DETR model)"),u3e.forEach(t),gHe=i(L),lm=n(L,"LI",{});var _3e=s(lm);kte=n(_3e,"STRONG",{});var jJr=s(kte);hHe=r(jJr,"distilbert"),jJr.forEach(t),pHe=r(_3e," \u2014 "),AS=n(_3e,"A",{href:!0});var DJr=s(AS);uHe=r(DJr,"DistilBertConfig"),DJr.forEach(t),_He=r(_3e," (DistilBERT model)"),_3e.forEach(t),bHe=i(L),im=n(L,"LI",{});var b3e=s(im);Ste=n(b3e,"STRONG",{});var GJr=s(Ste);vHe=r(GJr,"dpr"),GJr.forEach(t),FHe=r(b3e," \u2014 "),LS=n(b3e,"A",{href:!0});var OJr=s(LS);THe=r(OJr,"DPRConfig"),OJr.forEach(t),MHe=r(b3e," (DPR model)"),b3e.forEach(t),EHe=i(L),dm=n(L,"LI",{});var v3e=s(dm);Rte=n(v3e,"STRONG",{});var VJr=s(Rte);CHe=r(VJr,"dpt"),VJr.forEach(t),wHe=r(v3e," \u2014 "),yS=n(v3e,"A",{href:!0});var XJr=s(yS);AHe=r(XJr,"DPTConfig"),XJr.forEach(t),LHe=r(v3e," (DPT model)"),v3e.forEach(t),yHe=i(L),cm=n(L,"LI",{});var F3e=s(cm);Pte=n(F3e,"STRONG",{});var zJr=s(Pte);xHe=r(zJr,"electra"),zJr.forEach(t),$He=r(F3e," \u2014 "),xS=n(F3e,"A",{href:!0});var WJr=s(xS);kHe=r(WJr,"ElectraConfig"),WJr.forEach(t),SHe=r(F3e," (ELECTRA model)"),F3e.forEach(t),RHe=i(L),fm=n(L,"LI",{});var T3e=s(fm);Bte=n(T3e,"STRONG",{});var QJr=s(Bte);PHe=r(QJr,"encoder-decoder"),QJr.forEach(t),BHe=r(T3e," \u2014 "),$S=n(T3e,"A",{href:!0});var HJr=s($S);IHe=r(HJr,"EncoderDecoderConfig"),HJr.forEach(t),NHe=r(T3e," (Encoder decoder model)"),T3e.forEach(t),qHe=i(L),mm=n(L,"LI",{});var M3e=s(mm);Ite=n(M3e,"STRONG",{});var UJr=s(Ite);jHe=r(UJr,"flaubert"),UJr.forEach(t),DHe=r(M3e," \u2014 "),kS=n(M3e,"A",{href:!0});var JJr=s(kS);GHe=r(JJr,"FlaubertConfig"),JJr.forEach(t),OHe=r(M3e," (FlauBERT model)"),M3e.forEach(t),VHe=i(L),gm=n(L,"LI",{});var E3e=s(gm);Nte=n(E3e,"STRONG",{});var YJr=s(Nte);XHe=r(YJr,"flava"),YJr.forEach(t),zHe=r(E3e," \u2014 "),SS=n(E3e,"A",{href:!0});var KJr=s(SS);WHe=r(KJr,"FlavaConfig"),KJr.forEach(t),QHe=r(E3e," (FLAVA model)"),E3e.forEach(t),HHe=i(L),hm=n(L,"LI",{});var C3e=s(hm);qte=n(C3e,"STRONG",{});var ZJr=s(qte);UHe=r(ZJr,"fnet"),ZJr.forEach(t),JHe=r(C3e," \u2014 "),RS=n(C3e,"A",{href:!0});var eYr=s(RS);YHe=r(eYr,"FNetConfig"),eYr.forEach(t),KHe=r(C3e," (FNet model)"),C3e.forEach(t),ZHe=i(L),pm=n(L,"LI",{});var w3e=s(pm);jte=n(w3e,"STRONG",{});var oYr=s(jte);eUe=r(oYr,"fsmt"),oYr.forEach(t),oUe=r(w3e," \u2014 "),PS=n(w3e,"A",{href:!0});var rYr=s(PS);rUe=r(rYr,"FSMTConfig"),rYr.forEach(t),tUe=r(w3e," (FairSeq Machine-Translation model)"),w3e.forEach(t),aUe=i(L),um=n(L,"LI",{});var A3e=s(um);Dte=n(A3e,"STRONG",{});var tYr=s(Dte);nUe=r(tYr,"funnel"),tYr.forEach(t),sUe=r(A3e," \u2014 "),BS=n(A3e,"A",{href:!0});var aYr=s(BS);lUe=r(aYr,"FunnelConfig"),aYr.forEach(t),iUe=r(A3e," (Funnel Transformer model)"),A3e.forEach(t),dUe=i(L),_m=n(L,"LI",{});var L3e=s(_m);Gte=n(L3e,"STRONG",{});var nYr=s(Gte);cUe=r(nYr,"glpn"),nYr.forEach(t),fUe=r(L3e," \u2014 "),IS=n(L3e,"A",{href:!0});var sYr=s(IS);mUe=r(sYr,"GLPNConfig"),sYr.forEach(t),gUe=r(L3e," (GLPN model)"),L3e.forEach(t),hUe=i(L),bm=n(L,"LI",{});var y3e=s(bm);Ote=n(y3e,"STRONG",{});var lYr=s(Ote);pUe=r(lYr,"gpt2"),lYr.forEach(t),uUe=r(y3e," \u2014 "),NS=n(y3e,"A",{href:!0});var iYr=s(NS);_Ue=r(iYr,"GPT2Config"),iYr.forEach(t),bUe=r(y3e," (OpenAI GPT-2 model)"),y3e.forEach(t),vUe=i(L),vm=n(L,"LI",{});var x3e=s(vm);Vte=n(x3e,"STRONG",{});var dYr=s(Vte);FUe=r(dYr,"gpt_neo"),dYr.forEach(t),TUe=r(x3e," \u2014 "),qS=n(x3e,"A",{href:!0});var cYr=s(qS);MUe=r(cYr,"GPTNeoConfig"),cYr.forEach(t),EUe=r(x3e," (GPT Neo model)"),x3e.forEach(t),CUe=i(L),Fm=n(L,"LI",{});var $3e=s(Fm);Xte=n($3e,"STRONG",{});var fYr=s(Xte);wUe=r(fYr,"gpt_neox"),fYr.forEach(t),AUe=r($3e," \u2014 "),jS=n($3e,"A",{href:!0});var mYr=s(jS);LUe=r(mYr,"GPTNeoXConfig"),mYr.forEach(t),yUe=r($3e," (GPT NeoX model)"),$3e.forEach(t),xUe=i(L),Tm=n(L,"LI",{});var k3e=s(Tm);zte=n(k3e,"STRONG",{});var gYr=s(zte);$Ue=r(gYr,"gptj"),gYr.forEach(t),kUe=r(k3e," \u2014 "),DS=n(k3e,"A",{href:!0});var hYr=s(DS);SUe=r(hYr,"GPTJConfig"),hYr.forEach(t),RUe=r(k3e," (GPT-J model)"),k3e.forEach(t),PUe=i(L),Mm=n(L,"LI",{});var S3e=s(Mm);Wte=n(S3e,"STRONG",{});var pYr=s(Wte);BUe=r(pYr,"hubert"),pYr.forEach(t),IUe=r(S3e," \u2014 "),GS=n(S3e,"A",{href:!0});var uYr=s(GS);NUe=r(uYr,"HubertConfig"),uYr.forEach(t),qUe=r(S3e," (Hubert model)"),S3e.forEach(t),jUe=i(L),Em=n(L,"LI",{});var R3e=s(Em);Qte=n(R3e,"STRONG",{});var _Yr=s(Qte);DUe=r(_Yr,"ibert"),_Yr.forEach(t),GUe=r(R3e," \u2014 "),OS=n(R3e,"A",{href:!0});var bYr=s(OS);OUe=r(bYr,"IBertConfig"),bYr.forEach(t),VUe=r(R3e," (I-BERT model)"),R3e.forEach(t),XUe=i(L),Cm=n(L,"LI",{});var P3e=s(Cm);Hte=n(P3e,"STRONG",{});var vYr=s(Hte);zUe=r(vYr,"imagegpt"),vYr.forEach(t),WUe=r(P3e," \u2014 "),VS=n(P3e,"A",{href:!0});var FYr=s(VS);QUe=r(FYr,"ImageGPTConfig"),FYr.forEach(t),HUe=r(P3e," (ImageGPT model)"),P3e.forEach(t),UUe=i(L),wm=n(L,"LI",{});var B3e=s(wm);Ute=n(B3e,"STRONG",{});var TYr=s(Ute);JUe=r(TYr,"layoutlm"),TYr.forEach(t),YUe=r(B3e," \u2014 "),XS=n(B3e,"A",{href:!0});var MYr=s(XS);KUe=r(MYr,"LayoutLMConfig"),MYr.forEach(t),ZUe=r(B3e," (LayoutLM model)"),B3e.forEach(t),eJe=i(L),Am=n(L,"LI",{});var I3e=s(Am);Jte=n(I3e,"STRONG",{});var EYr=s(Jte);oJe=r(EYr,"layoutlmv2"),EYr.forEach(t),rJe=r(I3e," \u2014 "),zS=n(I3e,"A",{href:!0});var CYr=s(zS);tJe=r(CYr,"LayoutLMv2Config"),CYr.forEach(t),aJe=r(I3e," (LayoutLMv2 model)"),I3e.forEach(t),nJe=i(L),Lm=n(L,"LI",{});var N3e=s(Lm);Yte=n(N3e,"STRONG",{});var wYr=s(Yte);sJe=r(wYr,"layoutlmv3"),wYr.forEach(t),lJe=r(N3e," \u2014 "),WS=n(N3e,"A",{href:!0});var AYr=s(WS);iJe=r(AYr,"LayoutLMv3Config"),AYr.forEach(t),dJe=r(N3e," (LayoutLMv3 model)"),N3e.forEach(t),cJe=i(L),ym=n(L,"LI",{});var q3e=s(ym);Kte=n(q3e,"STRONG",{});var LYr=s(Kte);fJe=r(LYr,"led"),LYr.forEach(t),mJe=r(q3e," \u2014 "),QS=n(q3e,"A",{href:!0});var yYr=s(QS);gJe=r(yYr,"LEDConfig"),yYr.forEach(t),hJe=r(q3e," (LED model)"),q3e.forEach(t),pJe=i(L),xm=n(L,"LI",{});var j3e=s(xm);Zte=n(j3e,"STRONG",{});var xYr=s(Zte);uJe=r(xYr,"levit"),xYr.forEach(t),_Je=r(j3e," \u2014 "),HS=n(j3e,"A",{href:!0});var $Yr=s(HS);bJe=r($Yr,"LevitConfig"),$Yr.forEach(t),vJe=r(j3e," (LeViT model)"),j3e.forEach(t),FJe=i(L),$m=n(L,"LI",{});var D3e=s($m);eae=n(D3e,"STRONG",{});var kYr=s(eae);TJe=r(kYr,"longformer"),kYr.forEach(t),MJe=r(D3e," \u2014 "),US=n(D3e,"A",{href:!0});var SYr=s(US);EJe=r(SYr,"LongformerConfig"),SYr.forEach(t),CJe=r(D3e," (Longformer model)"),D3e.forEach(t),wJe=i(L),km=n(L,"LI",{});var G3e=s(km);oae=n(G3e,"STRONG",{});var RYr=s(oae);AJe=r(RYr,"longt5"),RYr.forEach(t),LJe=r(G3e," \u2014 "),JS=n(G3e,"A",{href:!0});var PYr=s(JS);yJe=r(PYr,"LongT5Config"),PYr.forEach(t),xJe=r(G3e," (LongT5 model)"),G3e.forEach(t),$Je=i(L),Sm=n(L,"LI",{});var O3e=s(Sm);rae=n(O3e,"STRONG",{});var BYr=s(rae);kJe=r(BYr,"luke"),BYr.forEach(t),SJe=r(O3e," \u2014 "),YS=n(O3e,"A",{href:!0});var IYr=s(YS);RJe=r(IYr,"LukeConfig"),IYr.forEach(t),PJe=r(O3e," (LUKE model)"),O3e.forEach(t),BJe=i(L),Rm=n(L,"LI",{});var V3e=s(Rm);tae=n(V3e,"STRONG",{});var NYr=s(tae);IJe=r(NYr,"lxmert"),NYr.forEach(t),NJe=r(V3e," \u2014 "),KS=n(V3e,"A",{href:!0});var qYr=s(KS);qJe=r(qYr,"LxmertConfig"),qYr.forEach(t),jJe=r(V3e," (LXMERT model)"),V3e.forEach(t),DJe=i(L),Pm=n(L,"LI",{});var X3e=s(Pm);aae=n(X3e,"STRONG",{});var jYr=s(aae);GJe=r(jYr,"m2m_100"),jYr.forEach(t),OJe=r(X3e," \u2014 "),ZS=n(X3e,"A",{href:!0});var DYr=s(ZS);VJe=r(DYr,"M2M100Config"),DYr.forEach(t),XJe=r(X3e," (M2M100 model)"),X3e.forEach(t),zJe=i(L),Bm=n(L,"LI",{});var z3e=s(Bm);nae=n(z3e,"STRONG",{});var GYr=s(nae);WJe=r(GYr,"marian"),GYr.forEach(t),QJe=r(z3e," \u2014 "),eR=n(z3e,"A",{href:!0});var OYr=s(eR);HJe=r(OYr,"MarianConfig"),OYr.forEach(t),UJe=r(z3e," (Marian model)"),z3e.forEach(t),JJe=i(L),Im=n(L,"LI",{});var W3e=s(Im);sae=n(W3e,"STRONG",{});var VYr=s(sae);YJe=r(VYr,"maskformer"),VYr.forEach(t),KJe=r(W3e," \u2014 "),oR=n(W3e,"A",{href:!0});var XYr=s(oR);ZJe=r(XYr,"MaskFormerConfig"),XYr.forEach(t),eYe=r(W3e," (MaskFormer model)"),W3e.forEach(t),oYe=i(L),Nm=n(L,"LI",{});var Q3e=s(Nm);lae=n(Q3e,"STRONG",{});var zYr=s(lae);rYe=r(zYr,"mbart"),zYr.forEach(t),tYe=r(Q3e," \u2014 "),rR=n(Q3e,"A",{href:!0});var WYr=s(rR);aYe=r(WYr,"MBartConfig"),WYr.forEach(t),nYe=r(Q3e," (mBART model)"),Q3e.forEach(t),sYe=i(L),qm=n(L,"LI",{});var H3e=s(qm);iae=n(H3e,"STRONG",{});var QYr=s(iae);lYe=r(QYr,"mctct"),QYr.forEach(t),iYe=r(H3e," \u2014 "),tR=n(H3e,"A",{href:!0});var HYr=s(tR);dYe=r(HYr,"MCTCTConfig"),HYr.forEach(t),cYe=r(H3e," (M-CTC-T model)"),H3e.forEach(t),fYe=i(L),jm=n(L,"LI",{});var U3e=s(jm);dae=n(U3e,"STRONG",{});var UYr=s(dae);mYe=r(UYr,"megatron-bert"),UYr.forEach(t),gYe=r(U3e," \u2014 "),aR=n(U3e,"A",{href:!0});var JYr=s(aR);hYe=r(JYr,"MegatronBertConfig"),JYr.forEach(t),pYe=r(U3e," (Megatron-BERT model)"),U3e.forEach(t),uYe=i(L),Dm=n(L,"LI",{});var J3e=s(Dm);cae=n(J3e,"STRONG",{});var YYr=s(cae);_Ye=r(YYr,"mobilebert"),YYr.forEach(t),bYe=r(J3e," \u2014 "),nR=n(J3e,"A",{href:!0});var KYr=s(nR);vYe=r(KYr,"MobileBertConfig"),KYr.forEach(t),FYe=r(J3e," (MobileBERT model)"),J3e.forEach(t),TYe=i(L),Gm=n(L,"LI",{});var Y3e=s(Gm);fae=n(Y3e,"STRONG",{});var ZYr=s(fae);MYe=r(ZYr,"mpnet"),ZYr.forEach(t),EYe=r(Y3e," \u2014 "),sR=n(Y3e,"A",{href:!0});var eKr=s(sR);CYe=r(eKr,"MPNetConfig"),eKr.forEach(t),wYe=r(Y3e," (MPNet model)"),Y3e.forEach(t),AYe=i(L),Om=n(L,"LI",{});var K3e=s(Om);mae=n(K3e,"STRONG",{});var oKr=s(mae);LYe=r(oKr,"mt5"),oKr.forEach(t),yYe=r(K3e," \u2014 "),lR=n(K3e,"A",{href:!0});var rKr=s(lR);xYe=r(rKr,"MT5Config"),rKr.forEach(t),$Ye=r(K3e," (MT5 model)"),K3e.forEach(t),kYe=i(L),Vm=n(L,"LI",{});var Z3e=s(Vm);gae=n(Z3e,"STRONG",{});var tKr=s(gae);SYe=r(tKr,"nystromformer"),tKr.forEach(t),RYe=r(Z3e," \u2014 "),iR=n(Z3e,"A",{href:!0});var aKr=s(iR);PYe=r(aKr,"NystromformerConfig"),aKr.forEach(t),BYe=r(Z3e," (Nystr\xF6mformer model)"),Z3e.forEach(t),IYe=i(L),Xm=n(L,"LI",{});var ewe=s(Xm);hae=n(ewe,"STRONG",{});var nKr=s(hae);NYe=r(nKr,"openai-gpt"),nKr.forEach(t),qYe=r(ewe," \u2014 "),dR=n(ewe,"A",{href:!0});var sKr=s(dR);jYe=r(sKr,"OpenAIGPTConfig"),sKr.forEach(t),DYe=r(ewe," (OpenAI GPT model)"),ewe.forEach(t),GYe=i(L),zm=n(L,"LI",{});var owe=s(zm);pae=n(owe,"STRONG",{});var lKr=s(pae);OYe=r(lKr,"opt"),lKr.forEach(t),VYe=r(owe," \u2014 "),cR=n(owe,"A",{href:!0});var iKr=s(cR);XYe=r(iKr,"OPTConfig"),iKr.forEach(t),zYe=r(owe," (OPT model)"),owe.forEach(t),WYe=i(L),Wm=n(L,"LI",{});var rwe=s(Wm);uae=n(rwe,"STRONG",{});var dKr=s(uae);QYe=r(dKr,"pegasus"),dKr.forEach(t),HYe=r(rwe," \u2014 "),fR=n(rwe,"A",{href:!0});var cKr=s(fR);UYe=r(cKr,"PegasusConfig"),cKr.forEach(t),JYe=r(rwe," (Pegasus model)"),rwe.forEach(t),YYe=i(L),Qm=n(L,"LI",{});var twe=s(Qm);_ae=n(twe,"STRONG",{});var fKr=s(_ae);KYe=r(fKr,"perceiver"),fKr.forEach(t),ZYe=r(twe," \u2014 "),mR=n(twe,"A",{href:!0});var mKr=s(mR);eKe=r(mKr,"PerceiverConfig"),mKr.forEach(t),oKe=r(twe," (Perceiver model)"),twe.forEach(t),rKe=i(L),Hm=n(L,"LI",{});var awe=s(Hm);bae=n(awe,"STRONG",{});var gKr=s(bae);tKe=r(gKr,"plbart"),gKr.forEach(t),aKe=r(awe," \u2014 "),gR=n(awe,"A",{href:!0});var hKr=s(gR);nKe=r(hKr,"PLBartConfig"),hKr.forEach(t),sKe=r(awe," (PLBart model)"),awe.forEach(t),lKe=i(L),Um=n(L,"LI",{});var nwe=s(Um);vae=n(nwe,"STRONG",{});var pKr=s(vae);iKe=r(pKr,"poolformer"),pKr.forEach(t),dKe=r(nwe," \u2014 "),hR=n(nwe,"A",{href:!0});var uKr=s(hR);cKe=r(uKr,"PoolFormerConfig"),uKr.forEach(t),fKe=r(nwe," (PoolFormer model)"),nwe.forEach(t),mKe=i(L),Jm=n(L,"LI",{});var swe=s(Jm);Fae=n(swe,"STRONG",{});var _Kr=s(Fae);gKe=r(_Kr,"prophetnet"),_Kr.forEach(t),hKe=r(swe," \u2014 "),pR=n(swe,"A",{href:!0});var bKr=s(pR);pKe=r(bKr,"ProphetNetConfig"),bKr.forEach(t),uKe=r(swe," (ProphetNet model)"),swe.forEach(t),_Ke=i(L),Ym=n(L,"LI",{});var lwe=s(Ym);Tae=n(lwe,"STRONG",{});var vKr=s(Tae);bKe=r(vKr,"qdqbert"),vKr.forEach(t),vKe=r(lwe," \u2014 "),uR=n(lwe,"A",{href:!0});var FKr=s(uR);FKe=r(FKr,"QDQBertConfig"),FKr.forEach(t),TKe=r(lwe," (QDQBert model)"),lwe.forEach(t),MKe=i(L),Km=n(L,"LI",{});var iwe=s(Km);Mae=n(iwe,"STRONG",{});var TKr=s(Mae);EKe=r(TKr,"rag"),TKr.forEach(t),CKe=r(iwe," \u2014 "),_R=n(iwe,"A",{href:!0});var MKr=s(_R);wKe=r(MKr,"RagConfig"),MKr.forEach(t),AKe=r(iwe," (RAG model)"),iwe.forEach(t),LKe=i(L),Zm=n(L,"LI",{});var dwe=s(Zm);Eae=n(dwe,"STRONG",{});var EKr=s(Eae);yKe=r(EKr,"realm"),EKr.forEach(t),xKe=r(dwe," \u2014 "),bR=n(dwe,"A",{href:!0});var CKr=s(bR);$Ke=r(CKr,"RealmConfig"),CKr.forEach(t),kKe=r(dwe," (REALM model)"),dwe.forEach(t),SKe=i(L),eg=n(L,"LI",{});var cwe=s(eg);Cae=n(cwe,"STRONG",{});var wKr=s(Cae);RKe=r(wKr,"reformer"),wKr.forEach(t),PKe=r(cwe," \u2014 "),vR=n(cwe,"A",{href:!0});var AKr=s(vR);BKe=r(AKr,"ReformerConfig"),AKr.forEach(t),IKe=r(cwe," (Reformer model)"),cwe.forEach(t),NKe=i(L),og=n(L,"LI",{});var fwe=s(og);wae=n(fwe,"STRONG",{});var LKr=s(wae);qKe=r(LKr,"regnet"),LKr.forEach(t),jKe=r(fwe," \u2014 "),FR=n(fwe,"A",{href:!0});var yKr=s(FR);DKe=r(yKr,"RegNetConfig"),yKr.forEach(t),GKe=r(fwe," (RegNet model)"),fwe.forEach(t),OKe=i(L),rg=n(L,"LI",{});var mwe=s(rg);Aae=n(mwe,"STRONG",{});var xKr=s(Aae);VKe=r(xKr,"rembert"),xKr.forEach(t),XKe=r(mwe," \u2014 "),TR=n(mwe,"A",{href:!0});var $Kr=s(TR);zKe=r($Kr,"RemBertConfig"),$Kr.forEach(t),WKe=r(mwe," (RemBERT model)"),mwe.forEach(t),QKe=i(L),tg=n(L,"LI",{});var gwe=s(tg);Lae=n(gwe,"STRONG",{});var kKr=s(Lae);HKe=r(kKr,"resnet"),kKr.forEach(t),UKe=r(gwe," \u2014 "),MR=n(gwe,"A",{href:!0});var SKr=s(MR);JKe=r(SKr,"ResNetConfig"),SKr.forEach(t),YKe=r(gwe," (ResNet model)"),gwe.forEach(t),KKe=i(L),ag=n(L,"LI",{});var hwe=s(ag);yae=n(hwe,"STRONG",{});var RKr=s(yae);ZKe=r(RKr,"retribert"),RKr.forEach(t),eZe=r(hwe," \u2014 "),ER=n(hwe,"A",{href:!0});var PKr=s(ER);oZe=r(PKr,"RetriBertConfig"),PKr.forEach(t),rZe=r(hwe," (RetriBERT model)"),hwe.forEach(t),tZe=i(L),ng=n(L,"LI",{});var pwe=s(ng);xae=n(pwe,"STRONG",{});var BKr=s(xae);aZe=r(BKr,"roberta"),BKr.forEach(t),nZe=r(pwe," \u2014 "),CR=n(pwe,"A",{href:!0});var IKr=s(CR);sZe=r(IKr,"RobertaConfig"),IKr.forEach(t),lZe=r(pwe," (RoBERTa model)"),pwe.forEach(t),iZe=i(L),sg=n(L,"LI",{});var uwe=s(sg);$ae=n(uwe,"STRONG",{});var NKr=s($ae);dZe=r(NKr,"roformer"),NKr.forEach(t),cZe=r(uwe," \u2014 "),wR=n(uwe,"A",{href:!0});var qKr=s(wR);fZe=r(qKr,"RoFormerConfig"),qKr.forEach(t),mZe=r(uwe," (RoFormer model)"),uwe.forEach(t),gZe=i(L),lg=n(L,"LI",{});var _we=s(lg);kae=n(_we,"STRONG",{});var jKr=s(kae);hZe=r(jKr,"segformer"),jKr.forEach(t),pZe=r(_we," \u2014 "),AR=n(_we,"A",{href:!0});var DKr=s(AR);uZe=r(DKr,"SegformerConfig"),DKr.forEach(t),_Ze=r(_we," (SegFormer model)"),_we.forEach(t),bZe=i(L),ig=n(L,"LI",{});var bwe=s(ig);Sae=n(bwe,"STRONG",{});var GKr=s(Sae);vZe=r(GKr,"sew"),GKr.forEach(t),FZe=r(bwe," \u2014 "),LR=n(bwe,"A",{href:!0});var OKr=s(LR);TZe=r(OKr,"SEWConfig"),OKr.forEach(t),MZe=r(bwe," (SEW model)"),bwe.forEach(t),EZe=i(L),dg=n(L,"LI",{});var vwe=s(dg);Rae=n(vwe,"STRONG",{});var VKr=s(Rae);CZe=r(VKr,"sew-d"),VKr.forEach(t),wZe=r(vwe," \u2014 "),yR=n(vwe,"A",{href:!0});var XKr=s(yR);AZe=r(XKr,"SEWDConfig"),XKr.forEach(t),LZe=r(vwe," (SEW-D model)"),vwe.forEach(t),yZe=i(L),cg=n(L,"LI",{});var Fwe=s(cg);Pae=n(Fwe,"STRONG",{});var zKr=s(Pae);xZe=r(zKr,"speech-encoder-decoder"),zKr.forEach(t),$Ze=r(Fwe," \u2014 "),xR=n(Fwe,"A",{href:!0});var WKr=s(xR);kZe=r(WKr,"SpeechEncoderDecoderConfig"),WKr.forEach(t),SZe=r(Fwe," (Speech Encoder decoder model)"),Fwe.forEach(t),RZe=i(L),fg=n(L,"LI",{});var Twe=s(fg);Bae=n(Twe,"STRONG",{});var QKr=s(Bae);PZe=r(QKr,"speech_to_text"),QKr.forEach(t),BZe=r(Twe," \u2014 "),$R=n(Twe,"A",{href:!0});var HKr=s($R);IZe=r(HKr,"Speech2TextConfig"),HKr.forEach(t),NZe=r(Twe," (Speech2Text model)"),Twe.forEach(t),qZe=i(L),mg=n(L,"LI",{});var Mwe=s(mg);Iae=n(Mwe,"STRONG",{});var UKr=s(Iae);jZe=r(UKr,"speech_to_text_2"),UKr.forEach(t),DZe=r(Mwe," \u2014 "),kR=n(Mwe,"A",{href:!0});var JKr=s(kR);GZe=r(JKr,"Speech2Text2Config"),JKr.forEach(t),OZe=r(Mwe," (Speech2Text2 model)"),Mwe.forEach(t),VZe=i(L),gg=n(L,"LI",{});var Ewe=s(gg);Nae=n(Ewe,"STRONG",{});var YKr=s(Nae);XZe=r(YKr,"splinter"),YKr.forEach(t),zZe=r(Ewe," \u2014 "),SR=n(Ewe,"A",{href:!0});var KKr=s(SR);WZe=r(KKr,"SplinterConfig"),KKr.forEach(t),QZe=r(Ewe," (Splinter model)"),Ewe.forEach(t),HZe=i(L),hg=n(L,"LI",{});var Cwe=s(hg);qae=n(Cwe,"STRONG",{});var ZKr=s(qae);UZe=r(ZKr,"squeezebert"),ZKr.forEach(t),JZe=r(Cwe," \u2014 "),RR=n(Cwe,"A",{href:!0});var eZr=s(RR);YZe=r(eZr,"SqueezeBertConfig"),eZr.forEach(t),KZe=r(Cwe," (SqueezeBERT model)"),Cwe.forEach(t),ZZe=i(L),pg=n(L,"LI",{});var wwe=s(pg);jae=n(wwe,"STRONG",{});var oZr=s(jae);eeo=r(oZr,"swin"),oZr.forEach(t),oeo=r(wwe," \u2014 "),PR=n(wwe,"A",{href:!0});var rZr=s(PR);reo=r(rZr,"SwinConfig"),rZr.forEach(t),teo=r(wwe," (Swin Transformer model)"),wwe.forEach(t),aeo=i(L),ug=n(L,"LI",{});var Awe=s(ug);Dae=n(Awe,"STRONG",{});var tZr=s(Dae);neo=r(tZr,"t5"),tZr.forEach(t),seo=r(Awe," \u2014 "),BR=n(Awe,"A",{href:!0});var aZr=s(BR);leo=r(aZr,"T5Config"),aZr.forEach(t),ieo=r(Awe," (T5 model)"),Awe.forEach(t),deo=i(L),_g=n(L,"LI",{});var Lwe=s(_g);Gae=n(Lwe,"STRONG",{});var nZr=s(Gae);ceo=r(nZr,"tapas"),nZr.forEach(t),feo=r(Lwe," \u2014 "),IR=n(Lwe,"A",{href:!0});var sZr=s(IR);meo=r(sZr,"TapasConfig"),sZr.forEach(t),geo=r(Lwe," (TAPAS model)"),Lwe.forEach(t),heo=i(L),bg=n(L,"LI",{});var ywe=s(bg);Oae=n(ywe,"STRONG",{});var lZr=s(Oae);peo=r(lZr,"trajectory_transformer"),lZr.forEach(t),ueo=r(ywe," \u2014 "),NR=n(ywe,"A",{href:!0});var iZr=s(NR);_eo=r(iZr,"TrajectoryTransformerConfig"),iZr.forEach(t),beo=r(ywe," (Trajectory Transformer model)"),ywe.forEach(t),veo=i(L),vg=n(L,"LI",{});var xwe=s(vg);Vae=n(xwe,"STRONG",{});var dZr=s(Vae);Feo=r(dZr,"transfo-xl"),dZr.forEach(t),Teo=r(xwe," \u2014 "),qR=n(xwe,"A",{href:!0});var cZr=s(qR);Meo=r(cZr,"TransfoXLConfig"),cZr.forEach(t),Eeo=r(xwe," (Transformer-XL model)"),xwe.forEach(t),Ceo=i(L),Fg=n(L,"LI",{});var $we=s(Fg);Xae=n($we,"STRONG",{});var fZr=s(Xae);weo=r(fZr,"trocr"),fZr.forEach(t),Aeo=r($we," \u2014 "),jR=n($we,"A",{href:!0});var mZr=s(jR);Leo=r(mZr,"TrOCRConfig"),mZr.forEach(t),yeo=r($we," (TrOCR model)"),$we.forEach(t),xeo=i(L),Tg=n(L,"LI",{});var kwe=s(Tg);zae=n(kwe,"STRONG",{});var gZr=s(zae);$eo=r(gZr,"unispeech"),gZr.forEach(t),keo=r(kwe," \u2014 "),DR=n(kwe,"A",{href:!0});var hZr=s(DR);Seo=r(hZr,"UniSpeechConfig"),hZr.forEach(t),Reo=r(kwe," (UniSpeech model)"),kwe.forEach(t),Peo=i(L),Mg=n(L,"LI",{});var Swe=s(Mg);Wae=n(Swe,"STRONG",{});var pZr=s(Wae);Beo=r(pZr,"unispeech-sat"),pZr.forEach(t),Ieo=r(Swe," \u2014 "),GR=n(Swe,"A",{href:!0});var uZr=s(GR);Neo=r(uZr,"UniSpeechSatConfig"),uZr.forEach(t),qeo=r(Swe," (UniSpeechSat model)"),Swe.forEach(t),jeo=i(L),Eg=n(L,"LI",{});var Rwe=s(Eg);Qae=n(Rwe,"STRONG",{});var _Zr=s(Qae);Deo=r(_Zr,"van"),_Zr.forEach(t),Geo=r(Rwe," \u2014 "),OR=n(Rwe,"A",{href:!0});var bZr=s(OR);Oeo=r(bZr,"VanConfig"),bZr.forEach(t),Veo=r(Rwe," (VAN model)"),Rwe.forEach(t),Xeo=i(L),Cg=n(L,"LI",{});var Pwe=s(Cg);Hae=n(Pwe,"STRONG",{});var vZr=s(Hae);zeo=r(vZr,"vilt"),vZr.forEach(t),Weo=r(Pwe," \u2014 "),VR=n(Pwe,"A",{href:!0});var FZr=s(VR);Qeo=r(FZr,"ViltConfig"),FZr.forEach(t),Heo=r(Pwe," (ViLT model)"),Pwe.forEach(t),Ueo=i(L),wg=n(L,"LI",{});var Bwe=s(wg);Uae=n(Bwe,"STRONG",{});var TZr=s(Uae);Jeo=r(TZr,"vision-encoder-decoder"),TZr.forEach(t),Yeo=r(Bwe," \u2014 "),XR=n(Bwe,"A",{href:!0});var MZr=s(XR);Keo=r(MZr,"VisionEncoderDecoderConfig"),MZr.forEach(t),Zeo=r(Bwe," (Vision Encoder decoder model)"),Bwe.forEach(t),eoo=i(L),Ag=n(L,"LI",{});var Iwe=s(Ag);Jae=n(Iwe,"STRONG",{});var EZr=s(Jae);ooo=r(EZr,"vision-text-dual-encoder"),EZr.forEach(t),roo=r(Iwe," \u2014 "),zR=n(Iwe,"A",{href:!0});var CZr=s(zR);too=r(CZr,"VisionTextDualEncoderConfig"),CZr.forEach(t),aoo=r(Iwe," (VisionTextDualEncoder model)"),Iwe.forEach(t),noo=i(L),Lg=n(L,"LI",{});var Nwe=s(Lg);Yae=n(Nwe,"STRONG",{});var wZr=s(Yae);soo=r(wZr,"visual_bert"),wZr.forEach(t),loo=r(Nwe," \u2014 "),WR=n(Nwe,"A",{href:!0});var AZr=s(WR);ioo=r(AZr,"VisualBertConfig"),AZr.forEach(t),doo=r(Nwe," (VisualBERT model)"),Nwe.forEach(t),coo=i(L),yg=n(L,"LI",{});var qwe=s(yg);Kae=n(qwe,"STRONG",{});var LZr=s(Kae);foo=r(LZr,"vit"),LZr.forEach(t),moo=r(qwe," \u2014 "),QR=n(qwe,"A",{href:!0});var yZr=s(QR);goo=r(yZr,"ViTConfig"),yZr.forEach(t),hoo=r(qwe," (ViT model)"),qwe.forEach(t),poo=i(L),xg=n(L,"LI",{});var jwe=s(xg);Zae=n(jwe,"STRONG",{});var xZr=s(Zae);uoo=r(xZr,"vit_mae"),xZr.forEach(t),_oo=r(jwe," \u2014 "),HR=n(jwe,"A",{href:!0});var $Zr=s(HR);boo=r($Zr,"ViTMAEConfig"),$Zr.forEach(t),voo=r(jwe," (ViTMAE model)"),jwe.forEach(t),Foo=i(L),$g=n(L,"LI",{});var Dwe=s($g);ene=n(Dwe,"STRONG",{});var kZr=s(ene);Too=r(kZr,"wav2vec2"),kZr.forEach(t),Moo=r(Dwe," \u2014 "),UR=n(Dwe,"A",{href:!0});var SZr=s(UR);Eoo=r(SZr,"Wav2Vec2Config"),SZr.forEach(t),Coo=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),woo=i(L),kg=n(L,"LI",{});var Gwe=s(kg);one=n(Gwe,"STRONG",{});var RZr=s(one);Aoo=r(RZr,"wav2vec2-conformer"),RZr.forEach(t),Loo=r(Gwe," \u2014 "),JR=n(Gwe,"A",{href:!0});var PZr=s(JR);yoo=r(PZr,"Wav2Vec2ConformerConfig"),PZr.forEach(t),xoo=r(Gwe," (Wav2Vec2-Conformer model)"),Gwe.forEach(t),$oo=i(L),Sg=n(L,"LI",{});var Owe=s(Sg);rne=n(Owe,"STRONG",{});var BZr=s(rne);koo=r(BZr,"wavlm"),BZr.forEach(t),Soo=r(Owe," \u2014 "),YR=n(Owe,"A",{href:!0});var IZr=s(YR);Roo=r(IZr,"WavLMConfig"),IZr.forEach(t),Poo=r(Owe," (WavLM model)"),Owe.forEach(t),Boo=i(L),Rg=n(L,"LI",{});var Vwe=s(Rg);tne=n(Vwe,"STRONG",{});var NZr=s(tne);Ioo=r(NZr,"xglm"),NZr.forEach(t),Noo=r(Vwe," \u2014 "),KR=n(Vwe,"A",{href:!0});var qZr=s(KR);qoo=r(qZr,"XGLMConfig"),qZr.forEach(t),joo=r(Vwe," (XGLM model)"),Vwe.forEach(t),Doo=i(L),Pg=n(L,"LI",{});var Xwe=s(Pg);ane=n(Xwe,"STRONG",{});var jZr=s(ane);Goo=r(jZr,"xlm"),jZr.forEach(t),Ooo=r(Xwe," \u2014 "),ZR=n(Xwe,"A",{href:!0});var DZr=s(ZR);Voo=r(DZr,"XLMConfig"),DZr.forEach(t),Xoo=r(Xwe," (XLM model)"),Xwe.forEach(t),zoo=i(L),Bg=n(L,"LI",{});var zwe=s(Bg);nne=n(zwe,"STRONG",{});var GZr=s(nne);Woo=r(GZr,"xlm-prophetnet"),GZr.forEach(t),Qoo=r(zwe," \u2014 "),eP=n(zwe,"A",{href:!0});var OZr=s(eP);Hoo=r(OZr,"XLMProphetNetConfig"),OZr.forEach(t),Uoo=r(zwe," (XLM-ProphetNet model)"),zwe.forEach(t),Joo=i(L),Ig=n(L,"LI",{});var Wwe=s(Ig);sne=n(Wwe,"STRONG",{});var VZr=s(sne);Yoo=r(VZr,"xlm-roberta"),VZr.forEach(t),Koo=r(Wwe," \u2014 "),oP=n(Wwe,"A",{href:!0});var XZr=s(oP);Zoo=r(XZr,"XLMRobertaConfig"),XZr.forEach(t),ero=r(Wwe," (XLM-RoBERTa model)"),Wwe.forEach(t),oro=i(L),Ng=n(L,"LI",{});var Qwe=s(Ng);lne=n(Qwe,"STRONG",{});var zZr=s(lne);rro=r(zZr,"xlm-roberta-xl"),zZr.forEach(t),tro=r(Qwe," \u2014 "),rP=n(Qwe,"A",{href:!0});var WZr=s(rP);aro=r(WZr,"XLMRobertaXLConfig"),WZr.forEach(t),nro=r(Qwe," (XLM-RoBERTa-XL model)"),Qwe.forEach(t),sro=i(L),qg=n(L,"LI",{});var Hwe=s(qg);ine=n(Hwe,"STRONG",{});var QZr=s(ine);lro=r(QZr,"xlnet"),QZr.forEach(t),iro=r(Hwe," \u2014 "),tP=n(Hwe,"A",{href:!0});var HZr=s(tP);dro=r(HZr,"XLNetConfig"),HZr.forEach(t),cro=r(Hwe," (XLNet model)"),Hwe.forEach(t),fro=i(L),jg=n(L,"LI",{});var Uwe=s(jg);dne=n(Uwe,"STRONG",{});var UZr=s(dne);mro=r(UZr,"yolos"),UZr.forEach(t),gro=r(Uwe," \u2014 "),aP=n(Uwe,"A",{href:!0});var JZr=s(aP);hro=r(JZr,"YolosConfig"),JZr.forEach(t),pro=r(Uwe," (YOLOS model)"),Uwe.forEach(t),uro=i(L),Dg=n(L,"LI",{});var Jwe=s(Dg);cne=n(Jwe,"STRONG",{});var YZr=s(cne);_ro=r(YZr,"yoso"),YZr.forEach(t),bro=r(Jwe," \u2014 "),nP=n(Jwe,"A",{href:!0});var KZr=s(nP);vro=r(KZr,"YosoConfig"),KZr.forEach(t),Fro=r(Jwe," (YOSO model)"),Jwe.forEach(t),L.forEach(t),Tro=i(at),T(Gg.$$.fragment,at),at.forEach(t),Mro=i(tt),Og=n(tt,"DIV",{class:!0});var gVe=s(Og);T(yA.$$.fragment,gVe),Ero=i(gVe),fne=n(gVe,"P",{});var ZZr=s(fne);Cro=r(ZZr,"Register a new configuration for this class."),ZZr.forEach(t),gVe.forEach(t),tt.forEach(t),hGe=i(f),Si=n(f,"H2",{class:!0});var hVe=s(Si);Vg=n(hVe,"A",{id:!0,class:!0,href:!0});var eet=s(Vg);mne=n(eet,"SPAN",{});var oet=s(mne);T(xA.$$.fragment,oet),oet.forEach(t),eet.forEach(t),wro=i(hVe),gne=n(hVe,"SPAN",{});var ret=s(gne);Aro=r(ret,"AutoTokenizer"),ret.forEach(t),hVe.forEach(t),pGe=i(f),Ao=n(f,"DIV",{class:!0});var Ws=s(Ao);T($A.$$.fragment,Ws),Lro=i(Ws),kA=n(Ws,"P",{});var pVe=s(kA);yro=r(pVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sP=n(pVe,"A",{href:!0});var tet=s(sP);xro=r(tet,"AutoTokenizer.from_pretrained()"),tet.forEach(t),$ro=r(pVe," class method."),pVe.forEach(t),kro=i(Ws),SA=n(Ws,"P",{});var uVe=s(SA);Sro=r(uVe,"This class cannot be instantiated directly using "),hne=n(uVe,"CODE",{});var aet=s(hne);Rro=r(aet,"__init__()"),aet.forEach(t),Pro=r(uVe," (throws an error)."),uVe.forEach(t),Bro=i(Ws),Ar=n(Ws,"DIV",{class:!0});var Qs=s(Ar);T(RA.$$.fragment,Qs),Iro=i(Qs),pne=n(Qs,"P",{});var net=s(pne);Nro=r(net,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),net.forEach(t),qro=i(Qs),ka=n(Qs,"P",{});var M3=s(ka);jro=r(M3,"The tokenizer class to instantiate is selected based on the "),une=n(M3,"CODE",{});var set=s(une);Dro=r(set,"model_type"),set.forEach(t),Gro=r(M3,` property of the config object (either
passed as an argument or loaded from `),_ne=n(M3,"CODE",{});var iet=s(_ne);Oro=r(iet,"pretrained_model_name_or_path"),iet.forEach(t),Vro=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bne=n(M3,"CODE",{});var det=s(bne);Xro=r(det,"pretrained_model_name_or_path"),det.forEach(t),zro=r(M3,":"),M3.forEach(t),Wro=i(Qs),k=n(Qs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var j$=s(Nn);vne=n(j$,"STRONG",{});var cet=s(vne);Qro=r(cet,"albert"),cet.forEach(t),Hro=r(j$," \u2014 "),lP=n(j$,"A",{href:!0});var fet=s(lP);Uro=r(fet,"AlbertTokenizer"),fet.forEach(t),Jro=r(j$," or "),iP=n(j$,"A",{href:!0});var met=s(iP);Yro=r(met,"AlbertTokenizerFast"),met.forEach(t),Kro=r(j$," (ALBERT model)"),j$.forEach(t),Zro=i(S),qn=n(S,"LI",{});var D$=s(qn);Fne=n(D$,"STRONG",{});var get=s(Fne);eto=r(get,"bart"),get.forEach(t),oto=r(D$," \u2014 "),dP=n(D$,"A",{href:!0});var het=s(dP);rto=r(het,"BartTokenizer"),het.forEach(t),tto=r(D$," or "),cP=n(D$,"A",{href:!0});var pet=s(cP);ato=r(pet,"BartTokenizerFast"),pet.forEach(t),nto=r(D$," (BART model)"),D$.forEach(t),sto=i(S),jn=n(S,"LI",{});var G$=s(jn);Tne=n(G$,"STRONG",{});var uet=s(Tne);lto=r(uet,"barthez"),uet.forEach(t),ito=r(G$," \u2014 "),fP=n(G$,"A",{href:!0});var _et=s(fP);dto=r(_et,"BarthezTokenizer"),_et.forEach(t),cto=r(G$," or "),mP=n(G$,"A",{href:!0});var bet=s(mP);fto=r(bet,"BarthezTokenizerFast"),bet.forEach(t),mto=r(G$," (BARThez model)"),G$.forEach(t),gto=i(S),Xg=n(S,"LI",{});var Ywe=s(Xg);Mne=n(Ywe,"STRONG",{});var vet=s(Mne);hto=r(vet,"bartpho"),vet.forEach(t),pto=r(Ywe," \u2014 "),gP=n(Ywe,"A",{href:!0});var Fet=s(gP);uto=r(Fet,"BartphoTokenizer"),Fet.forEach(t),_to=r(Ywe," (BARTpho model)"),Ywe.forEach(t),bto=i(S),Dn=n(S,"LI",{});var O$=s(Dn);Ene=n(O$,"STRONG",{});var Tet=s(Ene);vto=r(Tet,"bert"),Tet.forEach(t),Fto=r(O$," \u2014 "),hP=n(O$,"A",{href:!0});var Met=s(hP);Tto=r(Met,"BertTokenizer"),Met.forEach(t),Mto=r(O$," or "),pP=n(O$,"A",{href:!0});var Eet=s(pP);Eto=r(Eet,"BertTokenizerFast"),Eet.forEach(t),Cto=r(O$," (BERT model)"),O$.forEach(t),wto=i(S),zg=n(S,"LI",{});var Kwe=s(zg);Cne=n(Kwe,"STRONG",{});var Cet=s(Cne);Ato=r(Cet,"bert-generation"),Cet.forEach(t),Lto=r(Kwe," \u2014 "),uP=n(Kwe,"A",{href:!0});var wet=s(uP);yto=r(wet,"BertGenerationTokenizer"),wet.forEach(t),xto=r(Kwe," (Bert Generation model)"),Kwe.forEach(t),$to=i(S),Wg=n(S,"LI",{});var Zwe=s(Wg);wne=n(Zwe,"STRONG",{});var Aet=s(wne);kto=r(Aet,"bert-japanese"),Aet.forEach(t),Sto=r(Zwe," \u2014 "),_P=n(Zwe,"A",{href:!0});var Let=s(_P);Rto=r(Let,"BertJapaneseTokenizer"),Let.forEach(t),Pto=r(Zwe," (BertJapanese model)"),Zwe.forEach(t),Bto=i(S),Qg=n(S,"LI",{});var eAe=s(Qg);Ane=n(eAe,"STRONG",{});var yet=s(Ane);Ito=r(yet,"bertweet"),yet.forEach(t),Nto=r(eAe," \u2014 "),bP=n(eAe,"A",{href:!0});var xet=s(bP);qto=r(xet,"BertweetTokenizer"),xet.forEach(t),jto=r(eAe," (BERTweet model)"),eAe.forEach(t),Dto=i(S),Gn=n(S,"LI",{});var V$=s(Gn);Lne=n(V$,"STRONG",{});var $et=s(Lne);Gto=r($et,"big_bird"),$et.forEach(t),Oto=r(V$," \u2014 "),vP=n(V$,"A",{href:!0});var ket=s(vP);Vto=r(ket,"BigBirdTokenizer"),ket.forEach(t),Xto=r(V$," or "),FP=n(V$,"A",{href:!0});var Set=s(FP);zto=r(Set,"BigBirdTokenizerFast"),Set.forEach(t),Wto=r(V$," (BigBird model)"),V$.forEach(t),Qto=i(S),On=n(S,"LI",{});var X$=s(On);yne=n(X$,"STRONG",{});var Ret=s(yne);Hto=r(Ret,"bigbird_pegasus"),Ret.forEach(t),Uto=r(X$," \u2014 "),TP=n(X$,"A",{href:!0});var Pet=s(TP);Jto=r(Pet,"PegasusTokenizer"),Pet.forEach(t),Yto=r(X$," or "),MP=n(X$,"A",{href:!0});var Bet=s(MP);Kto=r(Bet,"PegasusTokenizerFast"),Bet.forEach(t),Zto=r(X$," (BigBird-Pegasus model)"),X$.forEach(t),eao=i(S),Vn=n(S,"LI",{});var z$=s(Vn);xne=n(z$,"STRONG",{});var Iet=s(xne);oao=r(Iet,"blenderbot"),Iet.forEach(t),rao=r(z$," \u2014 "),EP=n(z$,"A",{href:!0});var Net=s(EP);tao=r(Net,"BlenderbotTokenizer"),Net.forEach(t),aao=r(z$," or "),CP=n(z$,"A",{href:!0});var qet=s(CP);nao=r(qet,"BlenderbotTokenizerFast"),qet.forEach(t),sao=r(z$," (Blenderbot model)"),z$.forEach(t),lao=i(S),Hg=n(S,"LI",{});var oAe=s(Hg);$ne=n(oAe,"STRONG",{});var jet=s($ne);iao=r(jet,"blenderbot-small"),jet.forEach(t),dao=r(oAe," \u2014 "),wP=n(oAe,"A",{href:!0});var Det=s(wP);cao=r(Det,"BlenderbotSmallTokenizer"),Det.forEach(t),fao=r(oAe," (BlenderbotSmall model)"),oAe.forEach(t),mao=i(S),Ug=n(S,"LI",{});var rAe=s(Ug);kne=n(rAe,"STRONG",{});var Get=s(kne);gao=r(Get,"bloom"),Get.forEach(t),hao=r(rAe," \u2014 "),AP=n(rAe,"A",{href:!0});var Oet=s(AP);pao=r(Oet,"BloomTokenizerFast"),Oet.forEach(t),uao=r(rAe," (BLOOM model)"),rAe.forEach(t),_ao=i(S),Jg=n(S,"LI",{});var tAe=s(Jg);Sne=n(tAe,"STRONG",{});var Vet=s(Sne);bao=r(Vet,"byt5"),Vet.forEach(t),vao=r(tAe," \u2014 "),LP=n(tAe,"A",{href:!0});var Xet=s(LP);Fao=r(Xet,"ByT5Tokenizer"),Xet.forEach(t),Tao=r(tAe," (ByT5 model)"),tAe.forEach(t),Mao=i(S),Xn=n(S,"LI",{});var W$=s(Xn);Rne=n(W$,"STRONG",{});var zet=s(Rne);Eao=r(zet,"camembert"),zet.forEach(t),Cao=r(W$," \u2014 "),yP=n(W$,"A",{href:!0});var Wet=s(yP);wao=r(Wet,"CamembertTokenizer"),Wet.forEach(t),Aao=r(W$," or "),xP=n(W$,"A",{href:!0});var Qet=s(xP);Lao=r(Qet,"CamembertTokenizerFast"),Qet.forEach(t),yao=r(W$," (CamemBERT model)"),W$.forEach(t),xao=i(S),Yg=n(S,"LI",{});var aAe=s(Yg);Pne=n(aAe,"STRONG",{});var Het=s(Pne);$ao=r(Het,"canine"),Het.forEach(t),kao=r(aAe," \u2014 "),$P=n(aAe,"A",{href:!0});var Uet=s($P);Sao=r(Uet,"CanineTokenizer"),Uet.forEach(t),Rao=r(aAe," (CANINE model)"),aAe.forEach(t),Pao=i(S),zn=n(S,"LI",{});var Q$=s(zn);Bne=n(Q$,"STRONG",{});var Jet=s(Bne);Bao=r(Jet,"clip"),Jet.forEach(t),Iao=r(Q$," \u2014 "),kP=n(Q$,"A",{href:!0});var Yet=s(kP);Nao=r(Yet,"CLIPTokenizer"),Yet.forEach(t),qao=r(Q$," or "),SP=n(Q$,"A",{href:!0});var Ket=s(SP);jao=r(Ket,"CLIPTokenizerFast"),Ket.forEach(t),Dao=r(Q$," (CLIP model)"),Q$.forEach(t),Gao=i(S),Wn=n(S,"LI",{});var H$=s(Wn);Ine=n(H$,"STRONG",{});var Zet=s(Ine);Oao=r(Zet,"convbert"),Zet.forEach(t),Vao=r(H$," \u2014 "),RP=n(H$,"A",{href:!0});var eot=s(RP);Xao=r(eot,"ConvBertTokenizer"),eot.forEach(t),zao=r(H$," or "),PP=n(H$,"A",{href:!0});var oot=s(PP);Wao=r(oot,"ConvBertTokenizerFast"),oot.forEach(t),Qao=r(H$," (ConvBERT model)"),H$.forEach(t),Hao=i(S),Qn=n(S,"LI",{});var U$=s(Qn);Nne=n(U$,"STRONG",{});var rot=s(Nne);Uao=r(rot,"cpm"),rot.forEach(t),Jao=r(U$," \u2014 "),BP=n(U$,"A",{href:!0});var tot=s(BP);Yao=r(tot,"CpmTokenizer"),tot.forEach(t),Kao=r(U$," or "),IP=n(U$,"A",{href:!0});var aot=s(IP);Zao=r(aot,"CpmTokenizerFast"),aot.forEach(t),eno=r(U$," (CPM model)"),U$.forEach(t),ono=i(S),Kg=n(S,"LI",{});var nAe=s(Kg);qne=n(nAe,"STRONG",{});var not=s(qne);rno=r(not,"ctrl"),not.forEach(t),tno=r(nAe," \u2014 "),NP=n(nAe,"A",{href:!0});var sot=s(NP);ano=r(sot,"CTRLTokenizer"),sot.forEach(t),nno=r(nAe," (CTRL model)"),nAe.forEach(t),sno=i(S),Hn=n(S,"LI",{});var J$=s(Hn);jne=n(J$,"STRONG",{});var lot=s(jne);lno=r(lot,"data2vec-text"),lot.forEach(t),ino=r(J$," \u2014 "),qP=n(J$,"A",{href:!0});var iot=s(qP);dno=r(iot,"RobertaTokenizer"),iot.forEach(t),cno=r(J$," or "),jP=n(J$,"A",{href:!0});var dot=s(jP);fno=r(dot,"RobertaTokenizerFast"),dot.forEach(t),mno=r(J$," (Data2VecText model)"),J$.forEach(t),gno=i(S),Un=n(S,"LI",{});var Y$=s(Un);Dne=n(Y$,"STRONG",{});var cot=s(Dne);hno=r(cot,"deberta"),cot.forEach(t),pno=r(Y$," \u2014 "),DP=n(Y$,"A",{href:!0});var fot=s(DP);uno=r(fot,"DebertaTokenizer"),fot.forEach(t),_no=r(Y$," or "),GP=n(Y$,"A",{href:!0});var mot=s(GP);bno=r(mot,"DebertaTokenizerFast"),mot.forEach(t),vno=r(Y$," (DeBERTa model)"),Y$.forEach(t),Fno=i(S),Jn=n(S,"LI",{});var K$=s(Jn);Gne=n(K$,"STRONG",{});var got=s(Gne);Tno=r(got,"deberta-v2"),got.forEach(t),Mno=r(K$," \u2014 "),OP=n(K$,"A",{href:!0});var hot=s(OP);Eno=r(hot,"DebertaV2Tokenizer"),hot.forEach(t),Cno=r(K$," or "),VP=n(K$,"A",{href:!0});var pot=s(VP);wno=r(pot,"DebertaV2TokenizerFast"),pot.forEach(t),Ano=r(K$," (DeBERTa-v2 model)"),K$.forEach(t),Lno=i(S),Yn=n(S,"LI",{});var Z$=s(Yn);One=n(Z$,"STRONG",{});var uot=s(One);yno=r(uot,"distilbert"),uot.forEach(t),xno=r(Z$," \u2014 "),XP=n(Z$,"A",{href:!0});var _ot=s(XP);$no=r(_ot,"DistilBertTokenizer"),_ot.forEach(t),kno=r(Z$," or "),zP=n(Z$,"A",{href:!0});var bot=s(zP);Sno=r(bot,"DistilBertTokenizerFast"),bot.forEach(t),Rno=r(Z$," (DistilBERT model)"),Z$.forEach(t),Pno=i(S),Kn=n(S,"LI",{});var ek=s(Kn);Vne=n(ek,"STRONG",{});var vot=s(Vne);Bno=r(vot,"dpr"),vot.forEach(t),Ino=r(ek," \u2014 "),WP=n(ek,"A",{href:!0});var Fot=s(WP);Nno=r(Fot,"DPRQuestionEncoderTokenizer"),Fot.forEach(t),qno=r(ek," or "),QP=n(ek,"A",{href:!0});var Tot=s(QP);jno=r(Tot,"DPRQuestionEncoderTokenizerFast"),Tot.forEach(t),Dno=r(ek," (DPR model)"),ek.forEach(t),Gno=i(S),Zn=n(S,"LI",{});var ok=s(Zn);Xne=n(ok,"STRONG",{});var Mot=s(Xne);Ono=r(Mot,"electra"),Mot.forEach(t),Vno=r(ok," \u2014 "),HP=n(ok,"A",{href:!0});var Eot=s(HP);Xno=r(Eot,"ElectraTokenizer"),Eot.forEach(t),zno=r(ok," or "),UP=n(ok,"A",{href:!0});var Cot=s(UP);Wno=r(Cot,"ElectraTokenizerFast"),Cot.forEach(t),Qno=r(ok," (ELECTRA model)"),ok.forEach(t),Hno=i(S),Zg=n(S,"LI",{});var sAe=s(Zg);zne=n(sAe,"STRONG",{});var wot=s(zne);Uno=r(wot,"flaubert"),wot.forEach(t),Jno=r(sAe," \u2014 "),JP=n(sAe,"A",{href:!0});var Aot=s(JP);Yno=r(Aot,"FlaubertTokenizer"),Aot.forEach(t),Kno=r(sAe," (FlauBERT model)"),sAe.forEach(t),Zno=i(S),es=n(S,"LI",{});var rk=s(es);Wne=n(rk,"STRONG",{});var Lot=s(Wne);eso=r(Lot,"fnet"),Lot.forEach(t),oso=r(rk," \u2014 "),YP=n(rk,"A",{href:!0});var yot=s(YP);rso=r(yot,"FNetTokenizer"),yot.forEach(t),tso=r(rk," or "),KP=n(rk,"A",{href:!0});var xot=s(KP);aso=r(xot,"FNetTokenizerFast"),xot.forEach(t),nso=r(rk," (FNet model)"),rk.forEach(t),sso=i(S),eh=n(S,"LI",{});var lAe=s(eh);Qne=n(lAe,"STRONG",{});var $ot=s(Qne);lso=r($ot,"fsmt"),$ot.forEach(t),iso=r(lAe," \u2014 "),ZP=n(lAe,"A",{href:!0});var kot=s(ZP);dso=r(kot,"FSMTTokenizer"),kot.forEach(t),cso=r(lAe," (FairSeq Machine-Translation model)"),lAe.forEach(t),fso=i(S),os=n(S,"LI",{});var tk=s(os);Hne=n(tk,"STRONG",{});var Sot=s(Hne);mso=r(Sot,"funnel"),Sot.forEach(t),gso=r(tk," \u2014 "),eB=n(tk,"A",{href:!0});var Rot=s(eB);hso=r(Rot,"FunnelTokenizer"),Rot.forEach(t),pso=r(tk," or "),oB=n(tk,"A",{href:!0});var Pot=s(oB);uso=r(Pot,"FunnelTokenizerFast"),Pot.forEach(t),_so=r(tk," (Funnel Transformer model)"),tk.forEach(t),bso=i(S),rs=n(S,"LI",{});var ak=s(rs);Une=n(ak,"STRONG",{});var Bot=s(Une);vso=r(Bot,"gpt2"),Bot.forEach(t),Fso=r(ak," \u2014 "),rB=n(ak,"A",{href:!0});var Iot=s(rB);Tso=r(Iot,"GPT2Tokenizer"),Iot.forEach(t),Mso=r(ak," or "),tB=n(ak,"A",{href:!0});var Not=s(tB);Eso=r(Not,"GPT2TokenizerFast"),Not.forEach(t),Cso=r(ak," (OpenAI GPT-2 model)"),ak.forEach(t),wso=i(S),ts=n(S,"LI",{});var nk=s(ts);Jne=n(nk,"STRONG",{});var qot=s(Jne);Aso=r(qot,"gpt_neo"),qot.forEach(t),Lso=r(nk," \u2014 "),aB=n(nk,"A",{href:!0});var jot=s(aB);yso=r(jot,"GPT2Tokenizer"),jot.forEach(t),xso=r(nk," or "),nB=n(nk,"A",{href:!0});var Dot=s(nB);$so=r(Dot,"GPT2TokenizerFast"),Dot.forEach(t),kso=r(nk," (GPT Neo model)"),nk.forEach(t),Sso=i(S),oh=n(S,"LI",{});var iAe=s(oh);Yne=n(iAe,"STRONG",{});var Got=s(Yne);Rso=r(Got,"gpt_neox"),Got.forEach(t),Pso=r(iAe," \u2014 "),sB=n(iAe,"A",{href:!0});var Oot=s(sB);Bso=r(Oot,"GPTNeoXTokenizerFast"),Oot.forEach(t),Iso=r(iAe," (GPT NeoX model)"),iAe.forEach(t),Nso=i(S),as=n(S,"LI",{});var sk=s(as);Kne=n(sk,"STRONG",{});var Vot=s(Kne);qso=r(Vot,"gptj"),Vot.forEach(t),jso=r(sk," \u2014 "),lB=n(sk,"A",{href:!0});var Xot=s(lB);Dso=r(Xot,"GPT2Tokenizer"),Xot.forEach(t),Gso=r(sk," or "),iB=n(sk,"A",{href:!0});var zot=s(iB);Oso=r(zot,"GPT2TokenizerFast"),zot.forEach(t),Vso=r(sk," (GPT-J model)"),sk.forEach(t),Xso=i(S),ns=n(S,"LI",{});var lk=s(ns);Zne=n(lk,"STRONG",{});var Wot=s(Zne);zso=r(Wot,"herbert"),Wot.forEach(t),Wso=r(lk," \u2014 "),dB=n(lk,"A",{href:!0});var Qot=s(dB);Qso=r(Qot,"HerbertTokenizer"),Qot.forEach(t),Hso=r(lk," or "),cB=n(lk,"A",{href:!0});var Hot=s(cB);Uso=r(Hot,"HerbertTokenizerFast"),Hot.forEach(t),Jso=r(lk," (HerBERT model)"),lk.forEach(t),Yso=i(S),rh=n(S,"LI",{});var dAe=s(rh);ese=n(dAe,"STRONG",{});var Uot=s(ese);Kso=r(Uot,"hubert"),Uot.forEach(t),Zso=r(dAe," \u2014 "),fB=n(dAe,"A",{href:!0});var Jot=s(fB);elo=r(Jot,"Wav2Vec2CTCTokenizer"),Jot.forEach(t),olo=r(dAe," (Hubert model)"),dAe.forEach(t),rlo=i(S),ss=n(S,"LI",{});var ik=s(ss);ose=n(ik,"STRONG",{});var Yot=s(ose);tlo=r(Yot,"ibert"),Yot.forEach(t),alo=r(ik," \u2014 "),mB=n(ik,"A",{href:!0});var Kot=s(mB);nlo=r(Kot,"RobertaTokenizer"),Kot.forEach(t),slo=r(ik," or "),gB=n(ik,"A",{href:!0});var Zot=s(gB);llo=r(Zot,"RobertaTokenizerFast"),Zot.forEach(t),ilo=r(ik," (I-BERT model)"),ik.forEach(t),dlo=i(S),ls=n(S,"LI",{});var dk=s(ls);rse=n(dk,"STRONG",{});var ert=s(rse);clo=r(ert,"layoutlm"),ert.forEach(t),flo=r(dk," \u2014 "),hB=n(dk,"A",{href:!0});var ort=s(hB);mlo=r(ort,"LayoutLMTokenizer"),ort.forEach(t),glo=r(dk," or "),pB=n(dk,"A",{href:!0});var rrt=s(pB);hlo=r(rrt,"LayoutLMTokenizerFast"),rrt.forEach(t),plo=r(dk," (LayoutLM model)"),dk.forEach(t),ulo=i(S),is=n(S,"LI",{});var ck=s(is);tse=n(ck,"STRONG",{});var trt=s(tse);_lo=r(trt,"layoutlmv2"),trt.forEach(t),blo=r(ck," \u2014 "),uB=n(ck,"A",{href:!0});var art=s(uB);vlo=r(art,"LayoutLMv2Tokenizer"),art.forEach(t),Flo=r(ck," or "),_B=n(ck,"A",{href:!0});var nrt=s(_B);Tlo=r(nrt,"LayoutLMv2TokenizerFast"),nrt.forEach(t),Mlo=r(ck," (LayoutLMv2 model)"),ck.forEach(t),Elo=i(S),ds=n(S,"LI",{});var fk=s(ds);ase=n(fk,"STRONG",{});var srt=s(ase);Clo=r(srt,"layoutlmv3"),srt.forEach(t),wlo=r(fk," \u2014 "),bB=n(fk,"A",{href:!0});var lrt=s(bB);Alo=r(lrt,"LayoutLMv3Tokenizer"),lrt.forEach(t),Llo=r(fk," or "),vB=n(fk,"A",{href:!0});var irt=s(vB);ylo=r(irt,"LayoutLMv3TokenizerFast"),irt.forEach(t),xlo=r(fk," (LayoutLMv3 model)"),fk.forEach(t),$lo=i(S),cs=n(S,"LI",{});var mk=s(cs);nse=n(mk,"STRONG",{});var drt=s(nse);klo=r(drt,"layoutxlm"),drt.forEach(t),Slo=r(mk," \u2014 "),FB=n(mk,"A",{href:!0});var crt=s(FB);Rlo=r(crt,"LayoutXLMTokenizer"),crt.forEach(t),Plo=r(mk," or "),TB=n(mk,"A",{href:!0});var frt=s(TB);Blo=r(frt,"LayoutXLMTokenizerFast"),frt.forEach(t),Ilo=r(mk," (LayoutXLM model)"),mk.forEach(t),Nlo=i(S),fs=n(S,"LI",{});var gk=s(fs);sse=n(gk,"STRONG",{});var mrt=s(sse);qlo=r(mrt,"led"),mrt.forEach(t),jlo=r(gk," \u2014 "),MB=n(gk,"A",{href:!0});var grt=s(MB);Dlo=r(grt,"LEDTokenizer"),grt.forEach(t),Glo=r(gk," or "),EB=n(gk,"A",{href:!0});var hrt=s(EB);Olo=r(hrt,"LEDTokenizerFast"),hrt.forEach(t),Vlo=r(gk," (LED model)"),gk.forEach(t),Xlo=i(S),ms=n(S,"LI",{});var hk=s(ms);lse=n(hk,"STRONG",{});var prt=s(lse);zlo=r(prt,"longformer"),prt.forEach(t),Wlo=r(hk," \u2014 "),CB=n(hk,"A",{href:!0});var urt=s(CB);Qlo=r(urt,"LongformerTokenizer"),urt.forEach(t),Hlo=r(hk," or "),wB=n(hk,"A",{href:!0});var _rt=s(wB);Ulo=r(_rt,"LongformerTokenizerFast"),_rt.forEach(t),Jlo=r(hk," (Longformer model)"),hk.forEach(t),Ylo=i(S),gs=n(S,"LI",{});var pk=s(gs);ise=n(pk,"STRONG",{});var brt=s(ise);Klo=r(brt,"longt5"),brt.forEach(t),Zlo=r(pk," \u2014 "),AB=n(pk,"A",{href:!0});var vrt=s(AB);eio=r(vrt,"T5Tokenizer"),vrt.forEach(t),oio=r(pk," or "),LB=n(pk,"A",{href:!0});var Frt=s(LB);rio=r(Frt,"T5TokenizerFast"),Frt.forEach(t),tio=r(pk," (LongT5 model)"),pk.forEach(t),aio=i(S),th=n(S,"LI",{});var cAe=s(th);dse=n(cAe,"STRONG",{});var Trt=s(dse);nio=r(Trt,"luke"),Trt.forEach(t),sio=r(cAe," \u2014 "),yB=n(cAe,"A",{href:!0});var Mrt=s(yB);lio=r(Mrt,"LukeTokenizer"),Mrt.forEach(t),iio=r(cAe," (LUKE model)"),cAe.forEach(t),dio=i(S),hs=n(S,"LI",{});var uk=s(hs);cse=n(uk,"STRONG",{});var Ert=s(cse);cio=r(Ert,"lxmert"),Ert.forEach(t),fio=r(uk," \u2014 "),xB=n(uk,"A",{href:!0});var Crt=s(xB);mio=r(Crt,"LxmertTokenizer"),Crt.forEach(t),gio=r(uk," or "),$B=n(uk,"A",{href:!0});var wrt=s($B);hio=r(wrt,"LxmertTokenizerFast"),wrt.forEach(t),pio=r(uk," (LXMERT model)"),uk.forEach(t),uio=i(S),ah=n(S,"LI",{});var fAe=s(ah);fse=n(fAe,"STRONG",{});var Art=s(fse);_io=r(Art,"m2m_100"),Art.forEach(t),bio=r(fAe," \u2014 "),kB=n(fAe,"A",{href:!0});var Lrt=s(kB);vio=r(Lrt,"M2M100Tokenizer"),Lrt.forEach(t),Fio=r(fAe," (M2M100 model)"),fAe.forEach(t),Tio=i(S),nh=n(S,"LI",{});var mAe=s(nh);mse=n(mAe,"STRONG",{});var yrt=s(mse);Mio=r(yrt,"marian"),yrt.forEach(t),Eio=r(mAe," \u2014 "),SB=n(mAe,"A",{href:!0});var xrt=s(SB);Cio=r(xrt,"MarianTokenizer"),xrt.forEach(t),wio=r(mAe," (Marian model)"),mAe.forEach(t),Aio=i(S),ps=n(S,"LI",{});var _k=s(ps);gse=n(_k,"STRONG",{});var $rt=s(gse);Lio=r($rt,"mbart"),$rt.forEach(t),yio=r(_k," \u2014 "),RB=n(_k,"A",{href:!0});var krt=s(RB);xio=r(krt,"MBartTokenizer"),krt.forEach(t),$io=r(_k," or "),PB=n(_k,"A",{href:!0});var Srt=s(PB);kio=r(Srt,"MBartTokenizerFast"),Srt.forEach(t),Sio=r(_k," (mBART model)"),_k.forEach(t),Rio=i(S),us=n(S,"LI",{});var bk=s(us);hse=n(bk,"STRONG",{});var Rrt=s(hse);Pio=r(Rrt,"mbart50"),Rrt.forEach(t),Bio=r(bk," \u2014 "),BB=n(bk,"A",{href:!0});var Prt=s(BB);Iio=r(Prt,"MBart50Tokenizer"),Prt.forEach(t),Nio=r(bk," or "),IB=n(bk,"A",{href:!0});var Brt=s(IB);qio=r(Brt,"MBart50TokenizerFast"),Brt.forEach(t),jio=r(bk," (mBART-50 model)"),bk.forEach(t),Dio=i(S),_s=n(S,"LI",{});var vk=s(_s);pse=n(vk,"STRONG",{});var Irt=s(pse);Gio=r(Irt,"megatron-bert"),Irt.forEach(t),Oio=r(vk," \u2014 "),NB=n(vk,"A",{href:!0});var Nrt=s(NB);Vio=r(Nrt,"BertTokenizer"),Nrt.forEach(t),Xio=r(vk," or "),qB=n(vk,"A",{href:!0});var qrt=s(qB);zio=r(qrt,"BertTokenizerFast"),qrt.forEach(t),Wio=r(vk," (Megatron-BERT model)"),vk.forEach(t),Qio=i(S),sh=n(S,"LI",{});var gAe=s(sh);use=n(gAe,"STRONG",{});var jrt=s(use);Hio=r(jrt,"mluke"),jrt.forEach(t),Uio=r(gAe," \u2014 "),jB=n(gAe,"A",{href:!0});var Drt=s(jB);Jio=r(Drt,"MLukeTokenizer"),Drt.forEach(t),Yio=r(gAe," (mLUKE model)"),gAe.forEach(t),Kio=i(S),bs=n(S,"LI",{});var Fk=s(bs);_se=n(Fk,"STRONG",{});var Grt=s(_se);Zio=r(Grt,"mobilebert"),Grt.forEach(t),edo=r(Fk," \u2014 "),DB=n(Fk,"A",{href:!0});var Ort=s(DB);odo=r(Ort,"MobileBertTokenizer"),Ort.forEach(t),rdo=r(Fk," or "),GB=n(Fk,"A",{href:!0});var Vrt=s(GB);tdo=r(Vrt,"MobileBertTokenizerFast"),Vrt.forEach(t),ado=r(Fk," (MobileBERT model)"),Fk.forEach(t),ndo=i(S),vs=n(S,"LI",{});var Tk=s(vs);bse=n(Tk,"STRONG",{});var Xrt=s(bse);sdo=r(Xrt,"mpnet"),Xrt.forEach(t),ldo=r(Tk," \u2014 "),OB=n(Tk,"A",{href:!0});var zrt=s(OB);ido=r(zrt,"MPNetTokenizer"),zrt.forEach(t),ddo=r(Tk," or "),VB=n(Tk,"A",{href:!0});var Wrt=s(VB);cdo=r(Wrt,"MPNetTokenizerFast"),Wrt.forEach(t),fdo=r(Tk," (MPNet model)"),Tk.forEach(t),mdo=i(S),Fs=n(S,"LI",{});var Mk=s(Fs);vse=n(Mk,"STRONG",{});var Qrt=s(vse);gdo=r(Qrt,"mt5"),Qrt.forEach(t),hdo=r(Mk," \u2014 "),XB=n(Mk,"A",{href:!0});var Hrt=s(XB);pdo=r(Hrt,"MT5Tokenizer"),Hrt.forEach(t),udo=r(Mk," or "),zB=n(Mk,"A",{href:!0});var Urt=s(zB);_do=r(Urt,"MT5TokenizerFast"),Urt.forEach(t),bdo=r(Mk," (MT5 model)"),Mk.forEach(t),vdo=i(S),Ts=n(S,"LI",{});var Ek=s(Ts);Fse=n(Ek,"STRONG",{});var Jrt=s(Fse);Fdo=r(Jrt,"nystromformer"),Jrt.forEach(t),Tdo=r(Ek," \u2014 "),WB=n(Ek,"A",{href:!0});var Yrt=s(WB);Mdo=r(Yrt,"AlbertTokenizer"),Yrt.forEach(t),Edo=r(Ek," or "),QB=n(Ek,"A",{href:!0});var Krt=s(QB);Cdo=r(Krt,"AlbertTokenizerFast"),Krt.forEach(t),wdo=r(Ek," (Nystr\xF6mformer model)"),Ek.forEach(t),Ado=i(S),Ms=n(S,"LI",{});var Ck=s(Ms);Tse=n(Ck,"STRONG",{});var Zrt=s(Tse);Ldo=r(Zrt,"openai-gpt"),Zrt.forEach(t),ydo=r(Ck," \u2014 "),HB=n(Ck,"A",{href:!0});var ett=s(HB);xdo=r(ett,"OpenAIGPTTokenizer"),ett.forEach(t),$do=r(Ck," or "),UB=n(Ck,"A",{href:!0});var ott=s(UB);kdo=r(ott,"OpenAIGPTTokenizerFast"),ott.forEach(t),Sdo=r(Ck," (OpenAI GPT model)"),Ck.forEach(t),Rdo=i(S),lh=n(S,"LI",{});var hAe=s(lh);Mse=n(hAe,"STRONG",{});var rtt=s(Mse);Pdo=r(rtt,"opt"),rtt.forEach(t),Bdo=r(hAe," \u2014 "),JB=n(hAe,"A",{href:!0});var ttt=s(JB);Ido=r(ttt,"GPT2Tokenizer"),ttt.forEach(t),Ndo=r(hAe," (OPT model)"),hAe.forEach(t),qdo=i(S),Es=n(S,"LI",{});var wk=s(Es);Ese=n(wk,"STRONG",{});var att=s(Ese);jdo=r(att,"pegasus"),att.forEach(t),Ddo=r(wk," \u2014 "),YB=n(wk,"A",{href:!0});var ntt=s(YB);Gdo=r(ntt,"PegasusTokenizer"),ntt.forEach(t),Odo=r(wk," or "),KB=n(wk,"A",{href:!0});var stt=s(KB);Vdo=r(stt,"PegasusTokenizerFast"),stt.forEach(t),Xdo=r(wk," (Pegasus model)"),wk.forEach(t),zdo=i(S),ih=n(S,"LI",{});var pAe=s(ih);Cse=n(pAe,"STRONG",{});var ltt=s(Cse);Wdo=r(ltt,"perceiver"),ltt.forEach(t),Qdo=r(pAe," \u2014 "),ZB=n(pAe,"A",{href:!0});var itt=s(ZB);Hdo=r(itt,"PerceiverTokenizer"),itt.forEach(t),Udo=r(pAe," (Perceiver model)"),pAe.forEach(t),Jdo=i(S),dh=n(S,"LI",{});var uAe=s(dh);wse=n(uAe,"STRONG",{});var dtt=s(wse);Ydo=r(dtt,"phobert"),dtt.forEach(t),Kdo=r(uAe," \u2014 "),eI=n(uAe,"A",{href:!0});var ctt=s(eI);Zdo=r(ctt,"PhobertTokenizer"),ctt.forEach(t),eco=r(uAe," (PhoBERT model)"),uAe.forEach(t),oco=i(S),ch=n(S,"LI",{});var _Ae=s(ch);Ase=n(_Ae,"STRONG",{});var ftt=s(Ase);rco=r(ftt,"plbart"),ftt.forEach(t),tco=r(_Ae," \u2014 "),oI=n(_Ae,"A",{href:!0});var mtt=s(oI);aco=r(mtt,"PLBartTokenizer"),mtt.forEach(t),nco=r(_Ae," (PLBart model)"),_Ae.forEach(t),sco=i(S),fh=n(S,"LI",{});var bAe=s(fh);Lse=n(bAe,"STRONG",{});var gtt=s(Lse);lco=r(gtt,"prophetnet"),gtt.forEach(t),ico=r(bAe," \u2014 "),rI=n(bAe,"A",{href:!0});var htt=s(rI);dco=r(htt,"ProphetNetTokenizer"),htt.forEach(t),cco=r(bAe," (ProphetNet model)"),bAe.forEach(t),fco=i(S),Cs=n(S,"LI",{});var Ak=s(Cs);yse=n(Ak,"STRONG",{});var ptt=s(yse);mco=r(ptt,"qdqbert"),ptt.forEach(t),gco=r(Ak," \u2014 "),tI=n(Ak,"A",{href:!0});var utt=s(tI);hco=r(utt,"BertTokenizer"),utt.forEach(t),pco=r(Ak," or "),aI=n(Ak,"A",{href:!0});var _tt=s(aI);uco=r(_tt,"BertTokenizerFast"),_tt.forEach(t),_co=r(Ak," (QDQBert model)"),Ak.forEach(t),bco=i(S),mh=n(S,"LI",{});var vAe=s(mh);xse=n(vAe,"STRONG",{});var btt=s(xse);vco=r(btt,"rag"),btt.forEach(t),Fco=r(vAe," \u2014 "),nI=n(vAe,"A",{href:!0});var vtt=s(nI);Tco=r(vtt,"RagTokenizer"),vtt.forEach(t),Mco=r(vAe," (RAG model)"),vAe.forEach(t),Eco=i(S),ws=n(S,"LI",{});var Lk=s(ws);$se=n(Lk,"STRONG",{});var Ftt=s($se);Cco=r(Ftt,"realm"),Ftt.forEach(t),wco=r(Lk," \u2014 "),sI=n(Lk,"A",{href:!0});var Ttt=s(sI);Aco=r(Ttt,"RealmTokenizer"),Ttt.forEach(t),Lco=r(Lk," or "),lI=n(Lk,"A",{href:!0});var Mtt=s(lI);yco=r(Mtt,"RealmTokenizerFast"),Mtt.forEach(t),xco=r(Lk," (REALM model)"),Lk.forEach(t),$co=i(S),As=n(S,"LI",{});var yk=s(As);kse=n(yk,"STRONG",{});var Ett=s(kse);kco=r(Ett,"reformer"),Ett.forEach(t),Sco=r(yk," \u2014 "),iI=n(yk,"A",{href:!0});var Ctt=s(iI);Rco=r(Ctt,"ReformerTokenizer"),Ctt.forEach(t),Pco=r(yk," or "),dI=n(yk,"A",{href:!0});var wtt=s(dI);Bco=r(wtt,"ReformerTokenizerFast"),wtt.forEach(t),Ico=r(yk," (Reformer model)"),yk.forEach(t),Nco=i(S),Ls=n(S,"LI",{});var xk=s(Ls);Sse=n(xk,"STRONG",{});var Att=s(Sse);qco=r(Att,"rembert"),Att.forEach(t),jco=r(xk," \u2014 "),cI=n(xk,"A",{href:!0});var Ltt=s(cI);Dco=r(Ltt,"RemBertTokenizer"),Ltt.forEach(t),Gco=r(xk," or "),fI=n(xk,"A",{href:!0});var ytt=s(fI);Oco=r(ytt,"RemBertTokenizerFast"),ytt.forEach(t),Vco=r(xk," (RemBERT model)"),xk.forEach(t),Xco=i(S),ys=n(S,"LI",{});var $k=s(ys);Rse=n($k,"STRONG",{});var xtt=s(Rse);zco=r(xtt,"retribert"),xtt.forEach(t),Wco=r($k," \u2014 "),mI=n($k,"A",{href:!0});var $tt=s(mI);Qco=r($tt,"RetriBertTokenizer"),$tt.forEach(t),Hco=r($k," or "),gI=n($k,"A",{href:!0});var ktt=s(gI);Uco=r(ktt,"RetriBertTokenizerFast"),ktt.forEach(t),Jco=r($k," (RetriBERT model)"),$k.forEach(t),Yco=i(S),xs=n(S,"LI",{});var kk=s(xs);Pse=n(kk,"STRONG",{});var Stt=s(Pse);Kco=r(Stt,"roberta"),Stt.forEach(t),Zco=r(kk," \u2014 "),hI=n(kk,"A",{href:!0});var Rtt=s(hI);efo=r(Rtt,"RobertaTokenizer"),Rtt.forEach(t),ofo=r(kk," or "),pI=n(kk,"A",{href:!0});var Ptt=s(pI);rfo=r(Ptt,"RobertaTokenizerFast"),Ptt.forEach(t),tfo=r(kk," (RoBERTa model)"),kk.forEach(t),afo=i(S),$s=n(S,"LI",{});var Sk=s($s);Bse=n(Sk,"STRONG",{});var Btt=s(Bse);nfo=r(Btt,"roformer"),Btt.forEach(t),sfo=r(Sk," \u2014 "),uI=n(Sk,"A",{href:!0});var Itt=s(uI);lfo=r(Itt,"RoFormerTokenizer"),Itt.forEach(t),ifo=r(Sk," or "),_I=n(Sk,"A",{href:!0});var Ntt=s(_I);dfo=r(Ntt,"RoFormerTokenizerFast"),Ntt.forEach(t),cfo=r(Sk," (RoFormer model)"),Sk.forEach(t),ffo=i(S),gh=n(S,"LI",{});var FAe=s(gh);Ise=n(FAe,"STRONG",{});var qtt=s(Ise);mfo=r(qtt,"speech_to_text"),qtt.forEach(t),gfo=r(FAe," \u2014 "),bI=n(FAe,"A",{href:!0});var jtt=s(bI);hfo=r(jtt,"Speech2TextTokenizer"),jtt.forEach(t),pfo=r(FAe," (Speech2Text model)"),FAe.forEach(t),ufo=i(S),hh=n(S,"LI",{});var TAe=s(hh);Nse=n(TAe,"STRONG",{});var Dtt=s(Nse);_fo=r(Dtt,"speech_to_text_2"),Dtt.forEach(t),bfo=r(TAe," \u2014 "),vI=n(TAe,"A",{href:!0});var Gtt=s(vI);vfo=r(Gtt,"Speech2Text2Tokenizer"),Gtt.forEach(t),Ffo=r(TAe," (Speech2Text2 model)"),TAe.forEach(t),Tfo=i(S),ks=n(S,"LI",{});var Rk=s(ks);qse=n(Rk,"STRONG",{});var Ott=s(qse);Mfo=r(Ott,"splinter"),Ott.forEach(t),Efo=r(Rk," \u2014 "),FI=n(Rk,"A",{href:!0});var Vtt=s(FI);Cfo=r(Vtt,"SplinterTokenizer"),Vtt.forEach(t),wfo=r(Rk," or "),TI=n(Rk,"A",{href:!0});var Xtt=s(TI);Afo=r(Xtt,"SplinterTokenizerFast"),Xtt.forEach(t),Lfo=r(Rk," (Splinter model)"),Rk.forEach(t),yfo=i(S),Ss=n(S,"LI",{});var Pk=s(Ss);jse=n(Pk,"STRONG",{});var ztt=s(jse);xfo=r(ztt,"squeezebert"),ztt.forEach(t),$fo=r(Pk," \u2014 "),MI=n(Pk,"A",{href:!0});var Wtt=s(MI);kfo=r(Wtt,"SqueezeBertTokenizer"),Wtt.forEach(t),Sfo=r(Pk," or "),EI=n(Pk,"A",{href:!0});var Qtt=s(EI);Rfo=r(Qtt,"SqueezeBertTokenizerFast"),Qtt.forEach(t),Pfo=r(Pk," (SqueezeBERT model)"),Pk.forEach(t),Bfo=i(S),Rs=n(S,"LI",{});var Bk=s(Rs);Dse=n(Bk,"STRONG",{});var Htt=s(Dse);Ifo=r(Htt,"t5"),Htt.forEach(t),Nfo=r(Bk," \u2014 "),CI=n(Bk,"A",{href:!0});var Utt=s(CI);qfo=r(Utt,"T5Tokenizer"),Utt.forEach(t),jfo=r(Bk," or "),wI=n(Bk,"A",{href:!0});var Jtt=s(wI);Dfo=r(Jtt,"T5TokenizerFast"),Jtt.forEach(t),Gfo=r(Bk," (T5 model)"),Bk.forEach(t),Ofo=i(S),ph=n(S,"LI",{});var MAe=s(ph);Gse=n(MAe,"STRONG",{});var Ytt=s(Gse);Vfo=r(Ytt,"tapas"),Ytt.forEach(t),Xfo=r(MAe," \u2014 "),AI=n(MAe,"A",{href:!0});var Ktt=s(AI);zfo=r(Ktt,"TapasTokenizer"),Ktt.forEach(t),Wfo=r(MAe," (TAPAS model)"),MAe.forEach(t),Qfo=i(S),uh=n(S,"LI",{});var EAe=s(uh);Ose=n(EAe,"STRONG",{});var Ztt=s(Ose);Hfo=r(Ztt,"tapex"),Ztt.forEach(t),Ufo=r(EAe," \u2014 "),LI=n(EAe,"A",{href:!0});var eat=s(LI);Jfo=r(eat,"TapexTokenizer"),eat.forEach(t),Yfo=r(EAe," (TAPEX model)"),EAe.forEach(t),Kfo=i(S),_h=n(S,"LI",{});var CAe=s(_h);Vse=n(CAe,"STRONG",{});var oat=s(Vse);Zfo=r(oat,"transfo-xl"),oat.forEach(t),emo=r(CAe," \u2014 "),yI=n(CAe,"A",{href:!0});var rat=s(yI);omo=r(rat,"TransfoXLTokenizer"),rat.forEach(t),rmo=r(CAe," (Transformer-XL model)"),CAe.forEach(t),tmo=i(S),Ps=n(S,"LI",{});var Ik=s(Ps);Xse=n(Ik,"STRONG",{});var tat=s(Xse);amo=r(tat,"vilt"),tat.forEach(t),nmo=r(Ik," \u2014 "),xI=n(Ik,"A",{href:!0});var aat=s(xI);smo=r(aat,"BertTokenizer"),aat.forEach(t),lmo=r(Ik," or "),$I=n(Ik,"A",{href:!0});var nat=s($I);imo=r(nat,"BertTokenizerFast"),nat.forEach(t),dmo=r(Ik," (ViLT model)"),Ik.forEach(t),cmo=i(S),Bs=n(S,"LI",{});var Nk=s(Bs);zse=n(Nk,"STRONG",{});var sat=s(zse);fmo=r(sat,"visual_bert"),sat.forEach(t),mmo=r(Nk," \u2014 "),kI=n(Nk,"A",{href:!0});var lat=s(kI);gmo=r(lat,"BertTokenizer"),lat.forEach(t),hmo=r(Nk," or "),SI=n(Nk,"A",{href:!0});var iat=s(SI);pmo=r(iat,"BertTokenizerFast"),iat.forEach(t),umo=r(Nk," (VisualBERT model)"),Nk.forEach(t),_mo=i(S),bh=n(S,"LI",{});var wAe=s(bh);Wse=n(wAe,"STRONG",{});var dat=s(Wse);bmo=r(dat,"wav2vec2"),dat.forEach(t),vmo=r(wAe," \u2014 "),RI=n(wAe,"A",{href:!0});var cat=s(RI);Fmo=r(cat,"Wav2Vec2CTCTokenizer"),cat.forEach(t),Tmo=r(wAe," (Wav2Vec2 model)"),wAe.forEach(t),Mmo=i(S),vh=n(S,"LI",{});var AAe=s(vh);Qse=n(AAe,"STRONG",{});var fat=s(Qse);Emo=r(fat,"wav2vec2-conformer"),fat.forEach(t),Cmo=r(AAe," \u2014 "),PI=n(AAe,"A",{href:!0});var mat=s(PI);wmo=r(mat,"Wav2Vec2CTCTokenizer"),mat.forEach(t),Amo=r(AAe," (Wav2Vec2-Conformer model)"),AAe.forEach(t),Lmo=i(S),Fh=n(S,"LI",{});var LAe=s(Fh);Hse=n(LAe,"STRONG",{});var gat=s(Hse);ymo=r(gat,"wav2vec2_phoneme"),gat.forEach(t),xmo=r(LAe," \u2014 "),BI=n(LAe,"A",{href:!0});var hat=s(BI);$mo=r(hat,"Wav2Vec2PhonemeCTCTokenizer"),hat.forEach(t),kmo=r(LAe," (Wav2Vec2Phoneme model)"),LAe.forEach(t),Smo=i(S),Is=n(S,"LI",{});var qk=s(Is);Use=n(qk,"STRONG",{});var pat=s(Use);Rmo=r(pat,"xglm"),pat.forEach(t),Pmo=r(qk," \u2014 "),II=n(qk,"A",{href:!0});var uat=s(II);Bmo=r(uat,"XGLMTokenizer"),uat.forEach(t),Imo=r(qk," or "),NI=n(qk,"A",{href:!0});var _at=s(NI);Nmo=r(_at,"XGLMTokenizerFast"),_at.forEach(t),qmo=r(qk," (XGLM model)"),qk.forEach(t),jmo=i(S),Th=n(S,"LI",{});var yAe=s(Th);Jse=n(yAe,"STRONG",{});var bat=s(Jse);Dmo=r(bat,"xlm"),bat.forEach(t),Gmo=r(yAe," \u2014 "),qI=n(yAe,"A",{href:!0});var vat=s(qI);Omo=r(vat,"XLMTokenizer"),vat.forEach(t),Vmo=r(yAe," (XLM model)"),yAe.forEach(t),Xmo=i(S),Mh=n(S,"LI",{});var xAe=s(Mh);Yse=n(xAe,"STRONG",{});var Fat=s(Yse);zmo=r(Fat,"xlm-prophetnet"),Fat.forEach(t),Wmo=r(xAe," \u2014 "),jI=n(xAe,"A",{href:!0});var Tat=s(jI);Qmo=r(Tat,"XLMProphetNetTokenizer"),Tat.forEach(t),Hmo=r(xAe," (XLM-ProphetNet model)"),xAe.forEach(t),Umo=i(S),Ns=n(S,"LI",{});var jk=s(Ns);Kse=n(jk,"STRONG",{});var Mat=s(Kse);Jmo=r(Mat,"xlm-roberta"),Mat.forEach(t),Ymo=r(jk," \u2014 "),DI=n(jk,"A",{href:!0});var Eat=s(DI);Kmo=r(Eat,"XLMRobertaTokenizer"),Eat.forEach(t),Zmo=r(jk," or "),GI=n(jk,"A",{href:!0});var Cat=s(GI);ego=r(Cat,"XLMRobertaTokenizerFast"),Cat.forEach(t),ogo=r(jk," (XLM-RoBERTa model)"),jk.forEach(t),rgo=i(S),qs=n(S,"LI",{});var Dk=s(qs);Zse=n(Dk,"STRONG",{});var wat=s(Zse);tgo=r(wat,"xlm-roberta-xl"),wat.forEach(t),ago=r(Dk," \u2014 "),OI=n(Dk,"A",{href:!0});var Aat=s(OI);ngo=r(Aat,"RobertaTokenizer"),Aat.forEach(t),sgo=r(Dk," or "),VI=n(Dk,"A",{href:!0});var Lat=s(VI);lgo=r(Lat,"RobertaTokenizerFast"),Lat.forEach(t),igo=r(Dk," (XLM-RoBERTa-XL model)"),Dk.forEach(t),dgo=i(S),js=n(S,"LI",{});var Gk=s(js);ele=n(Gk,"STRONG",{});var yat=s(ele);cgo=r(yat,"xlnet"),yat.forEach(t),fgo=r(Gk," \u2014 "),XI=n(Gk,"A",{href:!0});var xat=s(XI);mgo=r(xat,"XLNetTokenizer"),xat.forEach(t),ggo=r(Gk," or "),zI=n(Gk,"A",{href:!0});var $at=s(zI);hgo=r($at,"XLNetTokenizerFast"),$at.forEach(t),pgo=r(Gk," (XLNet model)"),Gk.forEach(t),ugo=i(S),Ds=n(S,"LI",{});var Ok=s(Ds);ole=n(Ok,"STRONG",{});var kat=s(ole);_go=r(kat,"yoso"),kat.forEach(t),bgo=r(Ok," \u2014 "),WI=n(Ok,"A",{href:!0});var Sat=s(WI);vgo=r(Sat,"AlbertTokenizer"),Sat.forEach(t),Fgo=r(Ok," or "),QI=n(Ok,"A",{href:!0});var Rat=s(QI);Tgo=r(Rat,"AlbertTokenizerFast"),Rat.forEach(t),Mgo=r(Ok," (YOSO model)"),Ok.forEach(t),S.forEach(t),Ego=i(Qs),T(Eh.$$.fragment,Qs),Qs.forEach(t),Cgo=i(Ws),Ch=n(Ws,"DIV",{class:!0});var _Ve=s(Ch);T(PA.$$.fragment,_Ve),wgo=i(_Ve),rle=n(_Ve,"P",{});var Pat=s(rle);Ago=r(Pat,"Register a new tokenizer in this mapping."),Pat.forEach(t),_Ve.forEach(t),Ws.forEach(t),uGe=i(f),Ri=n(f,"H2",{class:!0});var bVe=s(Ri);wh=n(bVe,"A",{id:!0,class:!0,href:!0});var Bat=s(wh);tle=n(Bat,"SPAN",{});var Iat=s(tle);T(BA.$$.fragment,Iat),Iat.forEach(t),Bat.forEach(t),Lgo=i(bVe),ale=n(bVe,"SPAN",{});var Nat=s(ale);ygo=r(Nat,"AutoFeatureExtractor"),Nat.forEach(t),bVe.forEach(t),_Ge=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(IA.$$.fragment,Hs),xgo=i(Hs),NA=n(Hs,"P",{});var vVe=s(NA);$go=r(vVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HI=n(vVe,"A",{href:!0});var qat=s(HI);kgo=r(qat,"AutoFeatureExtractor.from_pretrained()"),qat.forEach(t),Sgo=r(vVe," class method."),vVe.forEach(t),Rgo=i(Hs),qA=n(Hs,"P",{});var FVe=s(qA);Pgo=r(FVe,"This class cannot be instantiated directly using "),nle=n(FVe,"CODE",{});var jat=s(nle);Bgo=r(jat,"__init__()"),jat.forEach(t),Igo=r(FVe," (throws an error)."),FVe.forEach(t),Ngo=i(Hs),He=n(Hs,"DIV",{class:!0});var ta=s(He);T(jA.$$.fragment,ta),qgo=i(ta),sle=n(ta,"P",{});var Dat=s(sle);jgo=r(Dat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dat.forEach(t),Dgo=i(ta),Sa=n(ta,"P",{});var E3=s(Sa);Ggo=r(E3,"The feature extractor class to instantiate is selected based on the "),lle=n(E3,"CODE",{});var Gat=s(lle);Ogo=r(Gat,"model_type"),Gat.forEach(t),Vgo=r(E3,` property of the config object
(either passed as an argument or loaded from `),ile=n(E3,"CODE",{});var Oat=s(ile);Xgo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),zgo=r(E3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),dle=n(E3,"CODE",{});var Vat=s(dle);Wgo=r(Vat,"pretrained_model_name_or_path"),Vat.forEach(t),Qgo=r(E3,":"),E3.forEach(t),Hgo=i(ta),Y=n(ta,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var $Ae=s(Ah);cle=n($Ae,"STRONG",{});var Xat=s(cle);Ugo=r(Xat,"beit"),Xat.forEach(t),Jgo=r($Ae," \u2014 "),UI=n($Ae,"A",{href:!0});var zat=s(UI);Ygo=r(zat,"BeitFeatureExtractor"),zat.forEach(t),Kgo=r($Ae," (BEiT model)"),$Ae.forEach(t),Zgo=i(K),Lh=n(K,"LI",{});var kAe=s(Lh);fle=n(kAe,"STRONG",{});var Wat=s(fle);eho=r(Wat,"clip"),Wat.forEach(t),oho=r(kAe," \u2014 "),JI=n(kAe,"A",{href:!0});var Qat=s(JI);rho=r(Qat,"CLIPFeatureExtractor"),Qat.forEach(t),tho=r(kAe," (CLIP model)"),kAe.forEach(t),aho=i(K),yh=n(K,"LI",{});var SAe=s(yh);mle=n(SAe,"STRONG",{});var Hat=s(mle);nho=r(Hat,"convnext"),Hat.forEach(t),sho=r(SAe," \u2014 "),YI=n(SAe,"A",{href:!0});var Uat=s(YI);lho=r(Uat,"ConvNextFeatureExtractor"),Uat.forEach(t),iho=r(SAe," (ConvNeXT model)"),SAe.forEach(t),dho=i(K),xh=n(K,"LI",{});var RAe=s(xh);gle=n(RAe,"STRONG",{});var Jat=s(gle);cho=r(Jat,"cvt"),Jat.forEach(t),fho=r(RAe," \u2014 "),KI=n(RAe,"A",{href:!0});var Yat=s(KI);mho=r(Yat,"ConvNextFeatureExtractor"),Yat.forEach(t),gho=r(RAe," (CvT model)"),RAe.forEach(t),hho=i(K),$h=n(K,"LI",{});var PAe=s($h);hle=n(PAe,"STRONG",{});var Kat=s(hle);pho=r(Kat,"data2vec-audio"),Kat.forEach(t),uho=r(PAe," \u2014 "),ZI=n(PAe,"A",{href:!0});var Zat=s(ZI);_ho=r(Zat,"Wav2Vec2FeatureExtractor"),Zat.forEach(t),bho=r(PAe," (Data2VecAudio model)"),PAe.forEach(t),vho=i(K),kh=n(K,"LI",{});var BAe=s(kh);ple=n(BAe,"STRONG",{});var ent=s(ple);Fho=r(ent,"data2vec-vision"),ent.forEach(t),Tho=r(BAe," \u2014 "),eN=n(BAe,"A",{href:!0});var ont=s(eN);Mho=r(ont,"BeitFeatureExtractor"),ont.forEach(t),Eho=r(BAe," (Data2VecVision model)"),BAe.forEach(t),Cho=i(K),Sh=n(K,"LI",{});var IAe=s(Sh);ule=n(IAe,"STRONG",{});var rnt=s(ule);who=r(rnt,"deit"),rnt.forEach(t),Aho=r(IAe," \u2014 "),oN=n(IAe,"A",{href:!0});var tnt=s(oN);Lho=r(tnt,"DeiTFeatureExtractor"),tnt.forEach(t),yho=r(IAe," (DeiT model)"),IAe.forEach(t),xho=i(K),Rh=n(K,"LI",{});var NAe=s(Rh);_le=n(NAe,"STRONG",{});var ant=s(_le);$ho=r(ant,"detr"),ant.forEach(t),kho=r(NAe," \u2014 "),rN=n(NAe,"A",{href:!0});var nnt=s(rN);Sho=r(nnt,"DetrFeatureExtractor"),nnt.forEach(t),Rho=r(NAe," (DETR model)"),NAe.forEach(t),Pho=i(K),Ph=n(K,"LI",{});var qAe=s(Ph);ble=n(qAe,"STRONG",{});var snt=s(ble);Bho=r(snt,"dpt"),snt.forEach(t),Iho=r(qAe," \u2014 "),tN=n(qAe,"A",{href:!0});var lnt=s(tN);Nho=r(lnt,"DPTFeatureExtractor"),lnt.forEach(t),qho=r(qAe," (DPT model)"),qAe.forEach(t),jho=i(K),Bh=n(K,"LI",{});var jAe=s(Bh);vle=n(jAe,"STRONG",{});var int=s(vle);Dho=r(int,"flava"),int.forEach(t),Gho=r(jAe," \u2014 "),aN=n(jAe,"A",{href:!0});var dnt=s(aN);Oho=r(dnt,"FlavaFeatureExtractor"),dnt.forEach(t),Vho=r(jAe," (FLAVA model)"),jAe.forEach(t),Xho=i(K),Ih=n(K,"LI",{});var DAe=s(Ih);Fle=n(DAe,"STRONG",{});var cnt=s(Fle);zho=r(cnt,"glpn"),cnt.forEach(t),Who=r(DAe," \u2014 "),nN=n(DAe,"A",{href:!0});var fnt=s(nN);Qho=r(fnt,"GLPNFeatureExtractor"),fnt.forEach(t),Hho=r(DAe," (GLPN model)"),DAe.forEach(t),Uho=i(K),Nh=n(K,"LI",{});var GAe=s(Nh);Tle=n(GAe,"STRONG",{});var mnt=s(Tle);Jho=r(mnt,"hubert"),mnt.forEach(t),Yho=r(GAe," \u2014 "),sN=n(GAe,"A",{href:!0});var gnt=s(sN);Kho=r(gnt,"Wav2Vec2FeatureExtractor"),gnt.forEach(t),Zho=r(GAe," (Hubert model)"),GAe.forEach(t),epo=i(K),qh=n(K,"LI",{});var OAe=s(qh);Mle=n(OAe,"STRONG",{});var hnt=s(Mle);opo=r(hnt,"imagegpt"),hnt.forEach(t),rpo=r(OAe," \u2014 "),lN=n(OAe,"A",{href:!0});var pnt=s(lN);tpo=r(pnt,"ImageGPTFeatureExtractor"),pnt.forEach(t),apo=r(OAe," (ImageGPT model)"),OAe.forEach(t),npo=i(K),jh=n(K,"LI",{});var VAe=s(jh);Ele=n(VAe,"STRONG",{});var unt=s(Ele);spo=r(unt,"layoutlmv2"),unt.forEach(t),lpo=r(VAe," \u2014 "),iN=n(VAe,"A",{href:!0});var _nt=s(iN);ipo=r(_nt,"LayoutLMv2FeatureExtractor"),_nt.forEach(t),dpo=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),cpo=i(K),Dh=n(K,"LI",{});var XAe=s(Dh);Cle=n(XAe,"STRONG",{});var bnt=s(Cle);fpo=r(bnt,"layoutlmv3"),bnt.forEach(t),mpo=r(XAe," \u2014 "),dN=n(XAe,"A",{href:!0});var vnt=s(dN);gpo=r(vnt,"LayoutLMv3FeatureExtractor"),vnt.forEach(t),hpo=r(XAe," (LayoutLMv3 model)"),XAe.forEach(t),ppo=i(K),Gh=n(K,"LI",{});var zAe=s(Gh);wle=n(zAe,"STRONG",{});var Fnt=s(wle);upo=r(Fnt,"levit"),Fnt.forEach(t),_po=r(zAe," \u2014 "),cN=n(zAe,"A",{href:!0});var Tnt=s(cN);bpo=r(Tnt,"LevitFeatureExtractor"),Tnt.forEach(t),vpo=r(zAe," (LeViT model)"),zAe.forEach(t),Fpo=i(K),Oh=n(K,"LI",{});var WAe=s(Oh);Ale=n(WAe,"STRONG",{});var Mnt=s(Ale);Tpo=r(Mnt,"maskformer"),Mnt.forEach(t),Mpo=r(WAe," \u2014 "),fN=n(WAe,"A",{href:!0});var Ent=s(fN);Epo=r(Ent,"MaskFormerFeatureExtractor"),Ent.forEach(t),Cpo=r(WAe," (MaskFormer model)"),WAe.forEach(t),wpo=i(K),Vh=n(K,"LI",{});var QAe=s(Vh);Lle=n(QAe,"STRONG",{});var Cnt=s(Lle);Apo=r(Cnt,"mctct"),Cnt.forEach(t),Lpo=r(QAe," \u2014 "),mN=n(QAe,"A",{href:!0});var wnt=s(mN);ypo=r(wnt,"MCTCTFeatureExtractor"),wnt.forEach(t),xpo=r(QAe," (M-CTC-T model)"),QAe.forEach(t),$po=i(K),Xh=n(K,"LI",{});var HAe=s(Xh);yle=n(HAe,"STRONG",{});var Ant=s(yle);kpo=r(Ant,"perceiver"),Ant.forEach(t),Spo=r(HAe," \u2014 "),gN=n(HAe,"A",{href:!0});var Lnt=s(gN);Rpo=r(Lnt,"PerceiverFeatureExtractor"),Lnt.forEach(t),Ppo=r(HAe," (Perceiver model)"),HAe.forEach(t),Bpo=i(K),zh=n(K,"LI",{});var UAe=s(zh);xle=n(UAe,"STRONG",{});var ynt=s(xle);Ipo=r(ynt,"poolformer"),ynt.forEach(t),Npo=r(UAe," \u2014 "),hN=n(UAe,"A",{href:!0});var xnt=s(hN);qpo=r(xnt,"PoolFormerFeatureExtractor"),xnt.forEach(t),jpo=r(UAe," (PoolFormer model)"),UAe.forEach(t),Dpo=i(K),Wh=n(K,"LI",{});var JAe=s(Wh);$le=n(JAe,"STRONG",{});var $nt=s($le);Gpo=r($nt,"regnet"),$nt.forEach(t),Opo=r(JAe," \u2014 "),pN=n(JAe,"A",{href:!0});var knt=s(pN);Vpo=r(knt,"ConvNextFeatureExtractor"),knt.forEach(t),Xpo=r(JAe," (RegNet model)"),JAe.forEach(t),zpo=i(K),Qh=n(K,"LI",{});var YAe=s(Qh);kle=n(YAe,"STRONG",{});var Snt=s(kle);Wpo=r(Snt,"resnet"),Snt.forEach(t),Qpo=r(YAe," \u2014 "),uN=n(YAe,"A",{href:!0});var Rnt=s(uN);Hpo=r(Rnt,"ConvNextFeatureExtractor"),Rnt.forEach(t),Upo=r(YAe," (ResNet model)"),YAe.forEach(t),Jpo=i(K),Hh=n(K,"LI",{});var KAe=s(Hh);Sle=n(KAe,"STRONG",{});var Pnt=s(Sle);Ypo=r(Pnt,"segformer"),Pnt.forEach(t),Kpo=r(KAe," \u2014 "),_N=n(KAe,"A",{href:!0});var Bnt=s(_N);Zpo=r(Bnt,"SegformerFeatureExtractor"),Bnt.forEach(t),euo=r(KAe," (SegFormer model)"),KAe.forEach(t),ouo=i(K),Uh=n(K,"LI",{});var ZAe=s(Uh);Rle=n(ZAe,"STRONG",{});var Int=s(Rle);ruo=r(Int,"speech_to_text"),Int.forEach(t),tuo=r(ZAe," \u2014 "),bN=n(ZAe,"A",{href:!0});var Nnt=s(bN);auo=r(Nnt,"Speech2TextFeatureExtractor"),Nnt.forEach(t),nuo=r(ZAe," (Speech2Text model)"),ZAe.forEach(t),suo=i(K),Jh=n(K,"LI",{});var eLe=s(Jh);Ple=n(eLe,"STRONG",{});var qnt=s(Ple);luo=r(qnt,"swin"),qnt.forEach(t),iuo=r(eLe," \u2014 "),vN=n(eLe,"A",{href:!0});var jnt=s(vN);duo=r(jnt,"ViTFeatureExtractor"),jnt.forEach(t),cuo=r(eLe," (Swin Transformer model)"),eLe.forEach(t),fuo=i(K),Yh=n(K,"LI",{});var oLe=s(Yh);Ble=n(oLe,"STRONG",{});var Dnt=s(Ble);muo=r(Dnt,"van"),Dnt.forEach(t),guo=r(oLe," \u2014 "),FN=n(oLe,"A",{href:!0});var Gnt=s(FN);huo=r(Gnt,"ConvNextFeatureExtractor"),Gnt.forEach(t),puo=r(oLe," (VAN model)"),oLe.forEach(t),uuo=i(K),Kh=n(K,"LI",{});var rLe=s(Kh);Ile=n(rLe,"STRONG",{});var Ont=s(Ile);_uo=r(Ont,"vilt"),Ont.forEach(t),buo=r(rLe," \u2014 "),TN=n(rLe,"A",{href:!0});var Vnt=s(TN);vuo=r(Vnt,"ViltFeatureExtractor"),Vnt.forEach(t),Fuo=r(rLe," (ViLT model)"),rLe.forEach(t),Tuo=i(K),Zh=n(K,"LI",{});var tLe=s(Zh);Nle=n(tLe,"STRONG",{});var Xnt=s(Nle);Muo=r(Xnt,"vit"),Xnt.forEach(t),Euo=r(tLe," \u2014 "),MN=n(tLe,"A",{href:!0});var znt=s(MN);Cuo=r(znt,"ViTFeatureExtractor"),znt.forEach(t),wuo=r(tLe," (ViT model)"),tLe.forEach(t),Auo=i(K),ep=n(K,"LI",{});var aLe=s(ep);qle=n(aLe,"STRONG",{});var Wnt=s(qle);Luo=r(Wnt,"vit_mae"),Wnt.forEach(t),yuo=r(aLe," \u2014 "),EN=n(aLe,"A",{href:!0});var Qnt=s(EN);xuo=r(Qnt,"ViTFeatureExtractor"),Qnt.forEach(t),$uo=r(aLe," (ViTMAE model)"),aLe.forEach(t),kuo=i(K),op=n(K,"LI",{});var nLe=s(op);jle=n(nLe,"STRONG",{});var Hnt=s(jle);Suo=r(Hnt,"wav2vec2"),Hnt.forEach(t),Ruo=r(nLe," \u2014 "),CN=n(nLe,"A",{href:!0});var Unt=s(CN);Puo=r(Unt,"Wav2Vec2FeatureExtractor"),Unt.forEach(t),Buo=r(nLe," (Wav2Vec2 model)"),nLe.forEach(t),Iuo=i(K),rp=n(K,"LI",{});var sLe=s(rp);Dle=n(sLe,"STRONG",{});var Jnt=s(Dle);Nuo=r(Jnt,"wav2vec2-conformer"),Jnt.forEach(t),quo=r(sLe," \u2014 "),wN=n(sLe,"A",{href:!0});var Ynt=s(wN);juo=r(Ynt,"Wav2Vec2FeatureExtractor"),Ynt.forEach(t),Duo=r(sLe," (Wav2Vec2-Conformer model)"),sLe.forEach(t),Guo=i(K),tp=n(K,"LI",{});var lLe=s(tp);Gle=n(lLe,"STRONG",{});var Knt=s(Gle);Ouo=r(Knt,"yolos"),Knt.forEach(t),Vuo=r(lLe," \u2014 "),AN=n(lLe,"A",{href:!0});var Znt=s(AN);Xuo=r(Znt,"YolosFeatureExtractor"),Znt.forEach(t),zuo=r(lLe," (YOLOS model)"),lLe.forEach(t),K.forEach(t),Wuo=i(ta),T(ap.$$.fragment,ta),Quo=i(ta),T(np.$$.fragment,ta),ta.forEach(t),Huo=i(Hs),sp=n(Hs,"DIV",{class:!0});var TVe=s(sp);T(DA.$$.fragment,TVe),Uuo=i(TVe),Ole=n(TVe,"P",{});var est=s(Ole);Juo=r(est,"Register a new feature extractor for this class."),est.forEach(t),TVe.forEach(t),Hs.forEach(t),bGe=i(f),Pi=n(f,"H2",{class:!0});var MVe=s(Pi);lp=n(MVe,"A",{id:!0,class:!0,href:!0});var ost=s(lp);Vle=n(ost,"SPAN",{});var rst=s(Vle);T(GA.$$.fragment,rst),rst.forEach(t),ost.forEach(t),Yuo=i(MVe),Xle=n(MVe,"SPAN",{});var tst=s(Xle);Kuo=r(tst,"AutoProcessor"),tst.forEach(t),MVe.forEach(t),vGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(OA.$$.fragment,Us),Zuo=i(Us),VA=n(Us,"P",{});var EVe=s(VA);e_o=r(EVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LN=n(EVe,"A",{href:!0});var ast=s(LN);o_o=r(ast,"AutoProcessor.from_pretrained()"),ast.forEach(t),r_o=r(EVe," class method."),EVe.forEach(t),t_o=i(Us),XA=n(Us,"P",{});var CVe=s(XA);a_o=r(CVe,"This class cannot be instantiated directly using "),zle=n(CVe,"CODE",{});var nst=s(zle);n_o=r(nst,"__init__()"),nst.forEach(t),s_o=r(CVe," (throws an error)."),CVe.forEach(t),l_o=i(Us),Ue=n(Us,"DIV",{class:!0});var aa=s(Ue);T(zA.$$.fragment,aa),i_o=i(aa),Wle=n(aa,"P",{});var sst=s(Wle);d_o=r(sst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sst.forEach(t),c_o=i(aa),Bi=n(aa,"P",{});var roe=s(Bi);f_o=r(roe,"The processor class to instantiate is selected based on the "),Qle=n(roe,"CODE",{});var lst=s(Qle);m_o=r(lst,"model_type"),lst.forEach(t),g_o=r(roe,` property of the config object (either
passed as an argument or loaded from `),Hle=n(roe,"CODE",{});var ist=s(Hle);h_o=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),p_o=r(roe," if possible):"),roe.forEach(t),u_o=i(aa),he=n(aa,"UL",{});var _e=s(he);ip=n(_e,"LI",{});var iLe=s(ip);Ule=n(iLe,"STRONG",{});var dst=s(Ule);__o=r(dst,"clip"),dst.forEach(t),b_o=r(iLe," \u2014 "),yN=n(iLe,"A",{href:!0});var cst=s(yN);v_o=r(cst,"CLIPProcessor"),cst.forEach(t),F_o=r(iLe," (CLIP model)"),iLe.forEach(t),T_o=i(_e),dp=n(_e,"LI",{});var dLe=s(dp);Jle=n(dLe,"STRONG",{});var fst=s(Jle);M_o=r(fst,"flava"),fst.forEach(t),E_o=r(dLe," \u2014 "),Yle=n(dLe,"CODE",{});var mst=s(Yle);C_o=r(mst,"FLAVAProcessor"),mst.forEach(t),w_o=r(dLe," (FLAVA model)"),dLe.forEach(t),A_o=i(_e),cp=n(_e,"LI",{});var cLe=s(cp);Kle=n(cLe,"STRONG",{});var gst=s(Kle);L_o=r(gst,"layoutlmv2"),gst.forEach(t),y_o=r(cLe," \u2014 "),xN=n(cLe,"A",{href:!0});var hst=s(xN);x_o=r(hst,"LayoutLMv2Processor"),hst.forEach(t),$_o=r(cLe," (LayoutLMv2 model)"),cLe.forEach(t),k_o=i(_e),fp=n(_e,"LI",{});var fLe=s(fp);Zle=n(fLe,"STRONG",{});var pst=s(Zle);S_o=r(pst,"layoutlmv3"),pst.forEach(t),R_o=r(fLe," \u2014 "),$N=n(fLe,"A",{href:!0});var ust=s($N);P_o=r(ust,"LayoutLMv3Processor"),ust.forEach(t),B_o=r(fLe," (LayoutLMv3 model)"),fLe.forEach(t),I_o=i(_e),mp=n(_e,"LI",{});var mLe=s(mp);eie=n(mLe,"STRONG",{});var _st=s(eie);N_o=r(_st,"layoutxlm"),_st.forEach(t),q_o=r(mLe," \u2014 "),kN=n(mLe,"A",{href:!0});var bst=s(kN);j_o=r(bst,"LayoutXLMProcessor"),bst.forEach(t),D_o=r(mLe," (LayoutXLM model)"),mLe.forEach(t),G_o=i(_e),gp=n(_e,"LI",{});var gLe=s(gp);oie=n(gLe,"STRONG",{});var vst=s(oie);O_o=r(vst,"sew"),vst.forEach(t),V_o=r(gLe," \u2014 "),SN=n(gLe,"A",{href:!0});var Fst=s(SN);X_o=r(Fst,"Wav2Vec2Processor"),Fst.forEach(t),z_o=r(gLe," (SEW model)"),gLe.forEach(t),W_o=i(_e),hp=n(_e,"LI",{});var hLe=s(hp);rie=n(hLe,"STRONG",{});var Tst=s(rie);Q_o=r(Tst,"sew-d"),Tst.forEach(t),H_o=r(hLe," \u2014 "),RN=n(hLe,"A",{href:!0});var Mst=s(RN);U_o=r(Mst,"Wav2Vec2Processor"),Mst.forEach(t),J_o=r(hLe," (SEW-D model)"),hLe.forEach(t),Y_o=i(_e),pp=n(_e,"LI",{});var pLe=s(pp);tie=n(pLe,"STRONG",{});var Est=s(tie);K_o=r(Est,"speech_to_text"),Est.forEach(t),Z_o=r(pLe," \u2014 "),PN=n(pLe,"A",{href:!0});var Cst=s(PN);e1o=r(Cst,"Speech2TextProcessor"),Cst.forEach(t),o1o=r(pLe," (Speech2Text model)"),pLe.forEach(t),r1o=i(_e),up=n(_e,"LI",{});var uLe=s(up);aie=n(uLe,"STRONG",{});var wst=s(aie);t1o=r(wst,"speech_to_text_2"),wst.forEach(t),a1o=r(uLe," \u2014 "),BN=n(uLe,"A",{href:!0});var Ast=s(BN);n1o=r(Ast,"Speech2Text2Processor"),Ast.forEach(t),s1o=r(uLe," (Speech2Text2 model)"),uLe.forEach(t),l1o=i(_e),_p=n(_e,"LI",{});var _Le=s(_p);nie=n(_Le,"STRONG",{});var Lst=s(nie);i1o=r(Lst,"trocr"),Lst.forEach(t),d1o=r(_Le," \u2014 "),IN=n(_Le,"A",{href:!0});var yst=s(IN);c1o=r(yst,"TrOCRProcessor"),yst.forEach(t),f1o=r(_Le," (TrOCR model)"),_Le.forEach(t),m1o=i(_e),bp=n(_e,"LI",{});var bLe=s(bp);sie=n(bLe,"STRONG",{});var xst=s(sie);g1o=r(xst,"unispeech"),xst.forEach(t),h1o=r(bLe," \u2014 "),NN=n(bLe,"A",{href:!0});var $st=s(NN);p1o=r($st,"Wav2Vec2Processor"),$st.forEach(t),u1o=r(bLe," (UniSpeech model)"),bLe.forEach(t),_1o=i(_e),vp=n(_e,"LI",{});var vLe=s(vp);lie=n(vLe,"STRONG",{});var kst=s(lie);b1o=r(kst,"unispeech-sat"),kst.forEach(t),v1o=r(vLe," \u2014 "),qN=n(vLe,"A",{href:!0});var Sst=s(qN);F1o=r(Sst,"Wav2Vec2Processor"),Sst.forEach(t),T1o=r(vLe," (UniSpeechSat model)"),vLe.forEach(t),M1o=i(_e),Fp=n(_e,"LI",{});var FLe=s(Fp);iie=n(FLe,"STRONG",{});var Rst=s(iie);E1o=r(Rst,"vilt"),Rst.forEach(t),C1o=r(FLe," \u2014 "),jN=n(FLe,"A",{href:!0});var Pst=s(jN);w1o=r(Pst,"ViltProcessor"),Pst.forEach(t),A1o=r(FLe," (ViLT model)"),FLe.forEach(t),L1o=i(_e),Tp=n(_e,"LI",{});var TLe=s(Tp);die=n(TLe,"STRONG",{});var Bst=s(die);y1o=r(Bst,"vision-text-dual-encoder"),Bst.forEach(t),x1o=r(TLe," \u2014 "),DN=n(TLe,"A",{href:!0});var Ist=s(DN);$1o=r(Ist,"VisionTextDualEncoderProcessor"),Ist.forEach(t),k1o=r(TLe," (VisionTextDualEncoder model)"),TLe.forEach(t),S1o=i(_e),Mp=n(_e,"LI",{});var MLe=s(Mp);cie=n(MLe,"STRONG",{});var Nst=s(cie);R1o=r(Nst,"wav2vec2"),Nst.forEach(t),P1o=r(MLe," \u2014 "),GN=n(MLe,"A",{href:!0});var qst=s(GN);B1o=r(qst,"Wav2Vec2Processor"),qst.forEach(t),I1o=r(MLe," (Wav2Vec2 model)"),MLe.forEach(t),N1o=i(_e),Ep=n(_e,"LI",{});var ELe=s(Ep);fie=n(ELe,"STRONG",{});var jst=s(fie);q1o=r(jst,"wav2vec2-conformer"),jst.forEach(t),j1o=r(ELe," \u2014 "),ON=n(ELe,"A",{href:!0});var Dst=s(ON);D1o=r(Dst,"Wav2Vec2Processor"),Dst.forEach(t),G1o=r(ELe," (Wav2Vec2-Conformer model)"),ELe.forEach(t),O1o=i(_e),Cp=n(_e,"LI",{});var CLe=s(Cp);mie=n(CLe,"STRONG",{});var Gst=s(mie);V1o=r(Gst,"wavlm"),Gst.forEach(t),X1o=r(CLe," \u2014 "),VN=n(CLe,"A",{href:!0});var Ost=s(VN);z1o=r(Ost,"Wav2Vec2Processor"),Ost.forEach(t),W1o=r(CLe," (WavLM model)"),CLe.forEach(t),_e.forEach(t),Q1o=i(aa),T(wp.$$.fragment,aa),H1o=i(aa),T(Ap.$$.fragment,aa),aa.forEach(t),U1o=i(Us),Lp=n(Us,"DIV",{class:!0});var wVe=s(Lp);T(WA.$$.fragment,wVe),J1o=i(wVe),gie=n(wVe,"P",{});var Vst=s(gie);Y1o=r(Vst,"Register a new processor for this class."),Vst.forEach(t),wVe.forEach(t),Us.forEach(t),FGe=i(f),Ii=n(f,"H2",{class:!0});var AVe=s(Ii);yp=n(AVe,"A",{id:!0,class:!0,href:!0});var Xst=s(yp);hie=n(Xst,"SPAN",{});var zst=s(hie);T(QA.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),K1o=i(AVe),pie=n(AVe,"SPAN",{});var Wst=s(pie);Z1o=r(Wst,"AutoModel"),Wst.forEach(t),AVe.forEach(t),TGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(HA.$$.fragment,Js),e2o=i(Js),Ni=n(Js,"P",{});var toe=s(Ni);o2o=r(toe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XN=n(toe,"A",{href:!0});var Qst=s(XN);r2o=r(Qst,"from_pretrained()"),Qst.forEach(t),t2o=r(toe," class method or the "),zN=n(toe,"A",{href:!0});var Hst=s(zN);a2o=r(Hst,"from_config()"),Hst.forEach(t),n2o=r(toe,` class
method.`),toe.forEach(t),s2o=i(Js),UA=n(Js,"P",{});var LVe=s(UA);l2o=r(LVe,"This class cannot be instantiated directly using "),uie=n(LVe,"CODE",{});var Ust=s(uie);i2o=r(Ust,"__init__()"),Ust.forEach(t),d2o=r(LVe," (throws an error)."),LVe.forEach(t),c2o=i(Js),st=n(Js,"DIV",{class:!0});var C3=s(st);T(JA.$$.fragment,C3),f2o=i(C3),_ie=n(C3,"P",{});var Jst=s(_ie);m2o=r(Jst,"Instantiates one of the base model classes of the library from a configuration."),Jst.forEach(t),g2o=i(C3),qi=n(C3,"P",{});var aoe=s(qi);h2o=r(aoe,`Note:
Loading a model from its configuration file does `),bie=n(aoe,"STRONG",{});var Yst=s(bie);p2o=r(Yst,"not"),Yst.forEach(t),u2o=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=n(aoe,"A",{href:!0});var Kst=s(WN);_2o=r(Kst,"from_pretrained()"),Kst.forEach(t),b2o=r(aoe," to load the model weights."),aoe.forEach(t),v2o=i(C3),T(xp.$$.fragment,C3),C3.forEach(t),F2o=i(Js),Je=n(Js,"DIV",{class:!0});var na=s(Je);T(YA.$$.fragment,na),T2o=i(na),vie=n(na,"P",{});var Zst=s(vie);M2o=r(Zst,"Instantiate one of the base model classes of the library from a pretrained model."),Zst.forEach(t),E2o=i(na),Ra=n(na,"P",{});var w3=s(Ra);C2o=r(w3,"The model class to instantiate is selected based on the "),Fie=n(w3,"CODE",{});var elt=s(Fie);w2o=r(elt,"model_type"),elt.forEach(t),A2o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Tie=n(w3,"CODE",{});var olt=s(Tie);L2o=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),y2o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(w3,"CODE",{});var rlt=s(Mie);x2o=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),$2o=r(w3,":"),w3.forEach(t),k2o=i(na),x=n(na,"UL",{});var $=s(x);$p=n($,"LI",{});var wLe=s($p);Eie=n(wLe,"STRONG",{});var tlt=s(Eie);S2o=r(tlt,"albert"),tlt.forEach(t),R2o=r(wLe," \u2014 "),QN=n(wLe,"A",{href:!0});var alt=s(QN);P2o=r(alt,"AlbertModel"),alt.forEach(t),B2o=r(wLe," (ALBERT model)"),wLe.forEach(t),I2o=i($),kp=n($,"LI",{});var ALe=s(kp);Cie=n(ALe,"STRONG",{});var nlt=s(Cie);N2o=r(nlt,"bart"),nlt.forEach(t),q2o=r(ALe," \u2014 "),HN=n(ALe,"A",{href:!0});var slt=s(HN);j2o=r(slt,"BartModel"),slt.forEach(t),D2o=r(ALe," (BART model)"),ALe.forEach(t),G2o=i($),Sp=n($,"LI",{});var LLe=s(Sp);wie=n(LLe,"STRONG",{});var llt=s(wie);O2o=r(llt,"beit"),llt.forEach(t),V2o=r(LLe," \u2014 "),UN=n(LLe,"A",{href:!0});var ilt=s(UN);X2o=r(ilt,"BeitModel"),ilt.forEach(t),z2o=r(LLe," (BEiT model)"),LLe.forEach(t),W2o=i($),Rp=n($,"LI",{});var yLe=s(Rp);Aie=n(yLe,"STRONG",{});var dlt=s(Aie);Q2o=r(dlt,"bert"),dlt.forEach(t),H2o=r(yLe," \u2014 "),JN=n(yLe,"A",{href:!0});var clt=s(JN);U2o=r(clt,"BertModel"),clt.forEach(t),J2o=r(yLe," (BERT model)"),yLe.forEach(t),Y2o=i($),Pp=n($,"LI",{});var xLe=s(Pp);Lie=n(xLe,"STRONG",{});var flt=s(Lie);K2o=r(flt,"bert-generation"),flt.forEach(t),Z2o=r(xLe," \u2014 "),YN=n(xLe,"A",{href:!0});var mlt=s(YN);ebo=r(mlt,"BertGenerationEncoder"),mlt.forEach(t),obo=r(xLe," (Bert Generation model)"),xLe.forEach(t),rbo=i($),Bp=n($,"LI",{});var $Le=s(Bp);yie=n($Le,"STRONG",{});var glt=s(yie);tbo=r(glt,"big_bird"),glt.forEach(t),abo=r($Le," \u2014 "),KN=n($Le,"A",{href:!0});var hlt=s(KN);nbo=r(hlt,"BigBirdModel"),hlt.forEach(t),sbo=r($Le," (BigBird model)"),$Le.forEach(t),lbo=i($),Ip=n($,"LI",{});var kLe=s(Ip);xie=n(kLe,"STRONG",{});var plt=s(xie);ibo=r(plt,"bigbird_pegasus"),plt.forEach(t),dbo=r(kLe," \u2014 "),ZN=n(kLe,"A",{href:!0});var ult=s(ZN);cbo=r(ult,"BigBirdPegasusModel"),ult.forEach(t),fbo=r(kLe," (BigBird-Pegasus model)"),kLe.forEach(t),mbo=i($),Np=n($,"LI",{});var SLe=s(Np);$ie=n(SLe,"STRONG",{});var _lt=s($ie);gbo=r(_lt,"blenderbot"),_lt.forEach(t),hbo=r(SLe," \u2014 "),eq=n(SLe,"A",{href:!0});var blt=s(eq);pbo=r(blt,"BlenderbotModel"),blt.forEach(t),ubo=r(SLe," (Blenderbot model)"),SLe.forEach(t),_bo=i($),qp=n($,"LI",{});var RLe=s(qp);kie=n(RLe,"STRONG",{});var vlt=s(kie);bbo=r(vlt,"blenderbot-small"),vlt.forEach(t),vbo=r(RLe," \u2014 "),oq=n(RLe,"A",{href:!0});var Flt=s(oq);Fbo=r(Flt,"BlenderbotSmallModel"),Flt.forEach(t),Tbo=r(RLe," (BlenderbotSmall model)"),RLe.forEach(t),Mbo=i($),jp=n($,"LI",{});var PLe=s(jp);Sie=n(PLe,"STRONG",{});var Tlt=s(Sie);Ebo=r(Tlt,"bloom"),Tlt.forEach(t),Cbo=r(PLe," \u2014 "),rq=n(PLe,"A",{href:!0});var Mlt=s(rq);wbo=r(Mlt,"BloomModel"),Mlt.forEach(t),Abo=r(PLe," (BLOOM model)"),PLe.forEach(t),Lbo=i($),Dp=n($,"LI",{});var BLe=s(Dp);Rie=n(BLe,"STRONG",{});var Elt=s(Rie);ybo=r(Elt,"camembert"),Elt.forEach(t),xbo=r(BLe," \u2014 "),tq=n(BLe,"A",{href:!0});var Clt=s(tq);$bo=r(Clt,"CamembertModel"),Clt.forEach(t),kbo=r(BLe," (CamemBERT model)"),BLe.forEach(t),Sbo=i($),Gp=n($,"LI",{});var ILe=s(Gp);Pie=n(ILe,"STRONG",{});var wlt=s(Pie);Rbo=r(wlt,"canine"),wlt.forEach(t),Pbo=r(ILe," \u2014 "),aq=n(ILe,"A",{href:!0});var Alt=s(aq);Bbo=r(Alt,"CanineModel"),Alt.forEach(t),Ibo=r(ILe," (CANINE model)"),ILe.forEach(t),Nbo=i($),Op=n($,"LI",{});var NLe=s(Op);Bie=n(NLe,"STRONG",{});var Llt=s(Bie);qbo=r(Llt,"clip"),Llt.forEach(t),jbo=r(NLe," \u2014 "),nq=n(NLe,"A",{href:!0});var ylt=s(nq);Dbo=r(ylt,"CLIPModel"),ylt.forEach(t),Gbo=r(NLe," (CLIP model)"),NLe.forEach(t),Obo=i($),Vp=n($,"LI",{});var qLe=s(Vp);Iie=n(qLe,"STRONG",{});var xlt=s(Iie);Vbo=r(xlt,"convbert"),xlt.forEach(t),Xbo=r(qLe," \u2014 "),sq=n(qLe,"A",{href:!0});var $lt=s(sq);zbo=r($lt,"ConvBertModel"),$lt.forEach(t),Wbo=r(qLe," (ConvBERT model)"),qLe.forEach(t),Qbo=i($),Xp=n($,"LI",{});var jLe=s(Xp);Nie=n(jLe,"STRONG",{});var klt=s(Nie);Hbo=r(klt,"convnext"),klt.forEach(t),Ubo=r(jLe," \u2014 "),lq=n(jLe,"A",{href:!0});var Slt=s(lq);Jbo=r(Slt,"ConvNextModel"),Slt.forEach(t),Ybo=r(jLe," (ConvNeXT model)"),jLe.forEach(t),Kbo=i($),zp=n($,"LI",{});var DLe=s(zp);qie=n(DLe,"STRONG",{});var Rlt=s(qie);Zbo=r(Rlt,"ctrl"),Rlt.forEach(t),evo=r(DLe," \u2014 "),iq=n(DLe,"A",{href:!0});var Plt=s(iq);ovo=r(Plt,"CTRLModel"),Plt.forEach(t),rvo=r(DLe," (CTRL model)"),DLe.forEach(t),tvo=i($),Wp=n($,"LI",{});var GLe=s(Wp);jie=n(GLe,"STRONG",{});var Blt=s(jie);avo=r(Blt,"cvt"),Blt.forEach(t),nvo=r(GLe," \u2014 "),dq=n(GLe,"A",{href:!0});var Ilt=s(dq);svo=r(Ilt,"CvtModel"),Ilt.forEach(t),lvo=r(GLe," (CvT model)"),GLe.forEach(t),ivo=i($),Qp=n($,"LI",{});var OLe=s(Qp);Die=n(OLe,"STRONG",{});var Nlt=s(Die);dvo=r(Nlt,"data2vec-audio"),Nlt.forEach(t),cvo=r(OLe," \u2014 "),cq=n(OLe,"A",{href:!0});var qlt=s(cq);fvo=r(qlt,"Data2VecAudioModel"),qlt.forEach(t),mvo=r(OLe," (Data2VecAudio model)"),OLe.forEach(t),gvo=i($),Hp=n($,"LI",{});var VLe=s(Hp);Gie=n(VLe,"STRONG",{});var jlt=s(Gie);hvo=r(jlt,"data2vec-text"),jlt.forEach(t),pvo=r(VLe," \u2014 "),fq=n(VLe,"A",{href:!0});var Dlt=s(fq);uvo=r(Dlt,"Data2VecTextModel"),Dlt.forEach(t),_vo=r(VLe," (Data2VecText model)"),VLe.forEach(t),bvo=i($),Up=n($,"LI",{});var XLe=s(Up);Oie=n(XLe,"STRONG",{});var Glt=s(Oie);vvo=r(Glt,"data2vec-vision"),Glt.forEach(t),Fvo=r(XLe," \u2014 "),mq=n(XLe,"A",{href:!0});var Olt=s(mq);Tvo=r(Olt,"Data2VecVisionModel"),Olt.forEach(t),Mvo=r(XLe," (Data2VecVision model)"),XLe.forEach(t),Evo=i($),Jp=n($,"LI",{});var zLe=s(Jp);Vie=n(zLe,"STRONG",{});var Vlt=s(Vie);Cvo=r(Vlt,"deberta"),Vlt.forEach(t),wvo=r(zLe," \u2014 "),gq=n(zLe,"A",{href:!0});var Xlt=s(gq);Avo=r(Xlt,"DebertaModel"),Xlt.forEach(t),Lvo=r(zLe," (DeBERTa model)"),zLe.forEach(t),yvo=i($),Yp=n($,"LI",{});var WLe=s(Yp);Xie=n(WLe,"STRONG",{});var zlt=s(Xie);xvo=r(zlt,"deberta-v2"),zlt.forEach(t),$vo=r(WLe," \u2014 "),hq=n(WLe,"A",{href:!0});var Wlt=s(hq);kvo=r(Wlt,"DebertaV2Model"),Wlt.forEach(t),Svo=r(WLe," (DeBERTa-v2 model)"),WLe.forEach(t),Rvo=i($),Kp=n($,"LI",{});var QLe=s(Kp);zie=n(QLe,"STRONG",{});var Qlt=s(zie);Pvo=r(Qlt,"decision_transformer"),Qlt.forEach(t),Bvo=r(QLe," \u2014 "),pq=n(QLe,"A",{href:!0});var Hlt=s(pq);Ivo=r(Hlt,"DecisionTransformerModel"),Hlt.forEach(t),Nvo=r(QLe," (Decision Transformer model)"),QLe.forEach(t),qvo=i($),Zp=n($,"LI",{});var HLe=s(Zp);Wie=n(HLe,"STRONG",{});var Ult=s(Wie);jvo=r(Ult,"deit"),Ult.forEach(t),Dvo=r(HLe," \u2014 "),uq=n(HLe,"A",{href:!0});var Jlt=s(uq);Gvo=r(Jlt,"DeiTModel"),Jlt.forEach(t),Ovo=r(HLe," (DeiT model)"),HLe.forEach(t),Vvo=i($),eu=n($,"LI",{});var ULe=s(eu);Qie=n(ULe,"STRONG",{});var Ylt=s(Qie);Xvo=r(Ylt,"detr"),Ylt.forEach(t),zvo=r(ULe," \u2014 "),_q=n(ULe,"A",{href:!0});var Klt=s(_q);Wvo=r(Klt,"DetrModel"),Klt.forEach(t),Qvo=r(ULe," (DETR model)"),ULe.forEach(t),Hvo=i($),ou=n($,"LI",{});var JLe=s(ou);Hie=n(JLe,"STRONG",{});var Zlt=s(Hie);Uvo=r(Zlt,"distilbert"),Zlt.forEach(t),Jvo=r(JLe," \u2014 "),bq=n(JLe,"A",{href:!0});var eit=s(bq);Yvo=r(eit,"DistilBertModel"),eit.forEach(t),Kvo=r(JLe," (DistilBERT model)"),JLe.forEach(t),Zvo=i($),ru=n($,"LI",{});var YLe=s(ru);Uie=n(YLe,"STRONG",{});var oit=s(Uie);e0o=r(oit,"dpr"),oit.forEach(t),o0o=r(YLe," \u2014 "),vq=n(YLe,"A",{href:!0});var rit=s(vq);r0o=r(rit,"DPRQuestionEncoder"),rit.forEach(t),t0o=r(YLe," (DPR model)"),YLe.forEach(t),a0o=i($),tu=n($,"LI",{});var KLe=s(tu);Jie=n(KLe,"STRONG",{});var tit=s(Jie);n0o=r(tit,"dpt"),tit.forEach(t),s0o=r(KLe," \u2014 "),Fq=n(KLe,"A",{href:!0});var ait=s(Fq);l0o=r(ait,"DPTModel"),ait.forEach(t),i0o=r(KLe," (DPT model)"),KLe.forEach(t),d0o=i($),au=n($,"LI",{});var ZLe=s(au);Yie=n(ZLe,"STRONG",{});var nit=s(Yie);c0o=r(nit,"electra"),nit.forEach(t),f0o=r(ZLe," \u2014 "),Tq=n(ZLe,"A",{href:!0});var sit=s(Tq);m0o=r(sit,"ElectraModel"),sit.forEach(t),g0o=r(ZLe," (ELECTRA model)"),ZLe.forEach(t),h0o=i($),nu=n($,"LI",{});var eye=s(nu);Kie=n(eye,"STRONG",{});var lit=s(Kie);p0o=r(lit,"flaubert"),lit.forEach(t),u0o=r(eye," \u2014 "),Mq=n(eye,"A",{href:!0});var iit=s(Mq);_0o=r(iit,"FlaubertModel"),iit.forEach(t),b0o=r(eye," (FlauBERT model)"),eye.forEach(t),v0o=i($),su=n($,"LI",{});var oye=s(su);Zie=n(oye,"STRONG",{});var dit=s(Zie);F0o=r(dit,"flava"),dit.forEach(t),T0o=r(oye," \u2014 "),Eq=n(oye,"A",{href:!0});var cit=s(Eq);M0o=r(cit,"FlavaModel"),cit.forEach(t),E0o=r(oye," (FLAVA model)"),oye.forEach(t),C0o=i($),lu=n($,"LI",{});var rye=s(lu);ede=n(rye,"STRONG",{});var fit=s(ede);w0o=r(fit,"fnet"),fit.forEach(t),A0o=r(rye," \u2014 "),Cq=n(rye,"A",{href:!0});var mit=s(Cq);L0o=r(mit,"FNetModel"),mit.forEach(t),y0o=r(rye," (FNet model)"),rye.forEach(t),x0o=i($),iu=n($,"LI",{});var tye=s(iu);ode=n(tye,"STRONG",{});var git=s(ode);$0o=r(git,"fsmt"),git.forEach(t),k0o=r(tye," \u2014 "),wq=n(tye,"A",{href:!0});var hit=s(wq);S0o=r(hit,"FSMTModel"),hit.forEach(t),R0o=r(tye," (FairSeq Machine-Translation model)"),tye.forEach(t),P0o=i($),Gs=n($,"LI",{});var Vk=s(Gs);rde=n(Vk,"STRONG",{});var pit=s(rde);B0o=r(pit,"funnel"),pit.forEach(t),I0o=r(Vk," \u2014 "),Aq=n(Vk,"A",{href:!0});var uit=s(Aq);N0o=r(uit,"FunnelModel"),uit.forEach(t),q0o=r(Vk," or "),Lq=n(Vk,"A",{href:!0});var _it=s(Lq);j0o=r(_it,"FunnelBaseModel"),_it.forEach(t),D0o=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),G0o=i($),du=n($,"LI",{});var aye=s(du);tde=n(aye,"STRONG",{});var bit=s(tde);O0o=r(bit,"glpn"),bit.forEach(t),V0o=r(aye," \u2014 "),yq=n(aye,"A",{href:!0});var vit=s(yq);X0o=r(vit,"GLPNModel"),vit.forEach(t),z0o=r(aye," (GLPN model)"),aye.forEach(t),W0o=i($),cu=n($,"LI",{});var nye=s(cu);ade=n(nye,"STRONG",{});var Fit=s(ade);Q0o=r(Fit,"gpt2"),Fit.forEach(t),H0o=r(nye," \u2014 "),xq=n(nye,"A",{href:!0});var Tit=s(xq);U0o=r(Tit,"GPT2Model"),Tit.forEach(t),J0o=r(nye," (OpenAI GPT-2 model)"),nye.forEach(t),Y0o=i($),fu=n($,"LI",{});var sye=s(fu);nde=n(sye,"STRONG",{});var Mit=s(nde);K0o=r(Mit,"gpt_neo"),Mit.forEach(t),Z0o=r(sye," \u2014 "),$q=n(sye,"A",{href:!0});var Eit=s($q);eFo=r(Eit,"GPTNeoModel"),Eit.forEach(t),oFo=r(sye," (GPT Neo model)"),sye.forEach(t),rFo=i($),mu=n($,"LI",{});var lye=s(mu);sde=n(lye,"STRONG",{});var Cit=s(sde);tFo=r(Cit,"gpt_neox"),Cit.forEach(t),aFo=r(lye," \u2014 "),kq=n(lye,"A",{href:!0});var wit=s(kq);nFo=r(wit,"GPTNeoXModel"),wit.forEach(t),sFo=r(lye," (GPT NeoX model)"),lye.forEach(t),lFo=i($),gu=n($,"LI",{});var iye=s(gu);lde=n(iye,"STRONG",{});var Ait=s(lde);iFo=r(Ait,"gptj"),Ait.forEach(t),dFo=r(iye," \u2014 "),Sq=n(iye,"A",{href:!0});var Lit=s(Sq);cFo=r(Lit,"GPTJModel"),Lit.forEach(t),fFo=r(iye," (GPT-J model)"),iye.forEach(t),mFo=i($),hu=n($,"LI",{});var dye=s(hu);ide=n(dye,"STRONG",{});var yit=s(ide);gFo=r(yit,"hubert"),yit.forEach(t),hFo=r(dye," \u2014 "),Rq=n(dye,"A",{href:!0});var xit=s(Rq);pFo=r(xit,"HubertModel"),xit.forEach(t),uFo=r(dye," (Hubert model)"),dye.forEach(t),_Fo=i($),pu=n($,"LI",{});var cye=s(pu);dde=n(cye,"STRONG",{});var $it=s(dde);bFo=r($it,"ibert"),$it.forEach(t),vFo=r(cye," \u2014 "),Pq=n(cye,"A",{href:!0});var kit=s(Pq);FFo=r(kit,"IBertModel"),kit.forEach(t),TFo=r(cye," (I-BERT model)"),cye.forEach(t),MFo=i($),uu=n($,"LI",{});var fye=s(uu);cde=n(fye,"STRONG",{});var Sit=s(cde);EFo=r(Sit,"imagegpt"),Sit.forEach(t),CFo=r(fye," \u2014 "),Bq=n(fye,"A",{href:!0});var Rit=s(Bq);wFo=r(Rit,"ImageGPTModel"),Rit.forEach(t),AFo=r(fye," (ImageGPT model)"),fye.forEach(t),LFo=i($),_u=n($,"LI",{});var mye=s(_u);fde=n(mye,"STRONG",{});var Pit=s(fde);yFo=r(Pit,"layoutlm"),Pit.forEach(t),xFo=r(mye," \u2014 "),Iq=n(mye,"A",{href:!0});var Bit=s(Iq);$Fo=r(Bit,"LayoutLMModel"),Bit.forEach(t),kFo=r(mye," (LayoutLM model)"),mye.forEach(t),SFo=i($),bu=n($,"LI",{});var gye=s(bu);mde=n(gye,"STRONG",{});var Iit=s(mde);RFo=r(Iit,"layoutlmv2"),Iit.forEach(t),PFo=r(gye," \u2014 "),Nq=n(gye,"A",{href:!0});var Nit=s(Nq);BFo=r(Nit,"LayoutLMv2Model"),Nit.forEach(t),IFo=r(gye," (LayoutLMv2 model)"),gye.forEach(t),NFo=i($),vu=n($,"LI",{});var hye=s(vu);gde=n(hye,"STRONG",{});var qit=s(gde);qFo=r(qit,"layoutlmv3"),qit.forEach(t),jFo=r(hye," \u2014 "),qq=n(hye,"A",{href:!0});var jit=s(qq);DFo=r(jit,"LayoutLMv3Model"),jit.forEach(t),GFo=r(hye," (LayoutLMv3 model)"),hye.forEach(t),OFo=i($),Fu=n($,"LI",{});var pye=s(Fu);hde=n(pye,"STRONG",{});var Dit=s(hde);VFo=r(Dit,"led"),Dit.forEach(t),XFo=r(pye," \u2014 "),jq=n(pye,"A",{href:!0});var Git=s(jq);zFo=r(Git,"LEDModel"),Git.forEach(t),WFo=r(pye," (LED model)"),pye.forEach(t),QFo=i($),Tu=n($,"LI",{});var uye=s(Tu);pde=n(uye,"STRONG",{});var Oit=s(pde);HFo=r(Oit,"levit"),Oit.forEach(t),UFo=r(uye," \u2014 "),Dq=n(uye,"A",{href:!0});var Vit=s(Dq);JFo=r(Vit,"LevitModel"),Vit.forEach(t),YFo=r(uye," (LeViT model)"),uye.forEach(t),KFo=i($),Mu=n($,"LI",{});var _ye=s(Mu);ude=n(_ye,"STRONG",{});var Xit=s(ude);ZFo=r(Xit,"longformer"),Xit.forEach(t),e6o=r(_ye," \u2014 "),Gq=n(_ye,"A",{href:!0});var zit=s(Gq);o6o=r(zit,"LongformerModel"),zit.forEach(t),r6o=r(_ye," (Longformer model)"),_ye.forEach(t),t6o=i($),Eu=n($,"LI",{});var bye=s(Eu);_de=n(bye,"STRONG",{});var Wit=s(_de);a6o=r(Wit,"longt5"),Wit.forEach(t),n6o=r(bye," \u2014 "),Oq=n(bye,"A",{href:!0});var Qit=s(Oq);s6o=r(Qit,"LongT5Model"),Qit.forEach(t),l6o=r(bye," (LongT5 model)"),bye.forEach(t),i6o=i($),Cu=n($,"LI",{});var vye=s(Cu);bde=n(vye,"STRONG",{});var Hit=s(bde);d6o=r(Hit,"luke"),Hit.forEach(t),c6o=r(vye," \u2014 "),Vq=n(vye,"A",{href:!0});var Uit=s(Vq);f6o=r(Uit,"LukeModel"),Uit.forEach(t),m6o=r(vye," (LUKE model)"),vye.forEach(t),g6o=i($),wu=n($,"LI",{});var Fye=s(wu);vde=n(Fye,"STRONG",{});var Jit=s(vde);h6o=r(Jit,"lxmert"),Jit.forEach(t),p6o=r(Fye," \u2014 "),Xq=n(Fye,"A",{href:!0});var Yit=s(Xq);u6o=r(Yit,"LxmertModel"),Yit.forEach(t),_6o=r(Fye," (LXMERT model)"),Fye.forEach(t),b6o=i($),Au=n($,"LI",{});var Tye=s(Au);Fde=n(Tye,"STRONG",{});var Kit=s(Fde);v6o=r(Kit,"m2m_100"),Kit.forEach(t),F6o=r(Tye," \u2014 "),zq=n(Tye,"A",{href:!0});var Zit=s(zq);T6o=r(Zit,"M2M100Model"),Zit.forEach(t),M6o=r(Tye," (M2M100 model)"),Tye.forEach(t),E6o=i($),Lu=n($,"LI",{});var Mye=s(Lu);Tde=n(Mye,"STRONG",{});var edt=s(Tde);C6o=r(edt,"marian"),edt.forEach(t),w6o=r(Mye," \u2014 "),Wq=n(Mye,"A",{href:!0});var odt=s(Wq);A6o=r(odt,"MarianModel"),odt.forEach(t),L6o=r(Mye," (Marian model)"),Mye.forEach(t),y6o=i($),yu=n($,"LI",{});var Eye=s(yu);Mde=n(Eye,"STRONG",{});var rdt=s(Mde);x6o=r(rdt,"maskformer"),rdt.forEach(t),$6o=r(Eye," \u2014 "),Qq=n(Eye,"A",{href:!0});var tdt=s(Qq);k6o=r(tdt,"MaskFormerModel"),tdt.forEach(t),S6o=r(Eye," (MaskFormer model)"),Eye.forEach(t),R6o=i($),xu=n($,"LI",{});var Cye=s(xu);Ede=n(Cye,"STRONG",{});var adt=s(Ede);P6o=r(adt,"mbart"),adt.forEach(t),B6o=r(Cye," \u2014 "),Hq=n(Cye,"A",{href:!0});var ndt=s(Hq);I6o=r(ndt,"MBartModel"),ndt.forEach(t),N6o=r(Cye," (mBART model)"),Cye.forEach(t),q6o=i($),$u=n($,"LI",{});var wye=s($u);Cde=n(wye,"STRONG",{});var sdt=s(Cde);j6o=r(sdt,"mctct"),sdt.forEach(t),D6o=r(wye," \u2014 "),Uq=n(wye,"A",{href:!0});var ldt=s(Uq);G6o=r(ldt,"MCTCTModel"),ldt.forEach(t),O6o=r(wye," (M-CTC-T model)"),wye.forEach(t),V6o=i($),ku=n($,"LI",{});var Aye=s(ku);wde=n(Aye,"STRONG",{});var idt=s(wde);X6o=r(idt,"megatron-bert"),idt.forEach(t),z6o=r(Aye," \u2014 "),Jq=n(Aye,"A",{href:!0});var ddt=s(Jq);W6o=r(ddt,"MegatronBertModel"),ddt.forEach(t),Q6o=r(Aye," (Megatron-BERT model)"),Aye.forEach(t),H6o=i($),Su=n($,"LI",{});var Lye=s(Su);Ade=n(Lye,"STRONG",{});var cdt=s(Ade);U6o=r(cdt,"mobilebert"),cdt.forEach(t),J6o=r(Lye," \u2014 "),Yq=n(Lye,"A",{href:!0});var fdt=s(Yq);Y6o=r(fdt,"MobileBertModel"),fdt.forEach(t),K6o=r(Lye," (MobileBERT model)"),Lye.forEach(t),Z6o=i($),Ru=n($,"LI",{});var yye=s(Ru);Lde=n(yye,"STRONG",{});var mdt=s(Lde);eTo=r(mdt,"mpnet"),mdt.forEach(t),oTo=r(yye," \u2014 "),Kq=n(yye,"A",{href:!0});var gdt=s(Kq);rTo=r(gdt,"MPNetModel"),gdt.forEach(t),tTo=r(yye," (MPNet model)"),yye.forEach(t),aTo=i($),Pu=n($,"LI",{});var xye=s(Pu);yde=n(xye,"STRONG",{});var hdt=s(yde);nTo=r(hdt,"mt5"),hdt.forEach(t),sTo=r(xye," \u2014 "),Zq=n(xye,"A",{href:!0});var pdt=s(Zq);lTo=r(pdt,"MT5Model"),pdt.forEach(t),iTo=r(xye," (MT5 model)"),xye.forEach(t),dTo=i($),Bu=n($,"LI",{});var $ye=s(Bu);xde=n($ye,"STRONG",{});var udt=s(xde);cTo=r(udt,"nystromformer"),udt.forEach(t),fTo=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var _dt=s(ej);mTo=r(_dt,"NystromformerModel"),_dt.forEach(t),gTo=r($ye," (Nystr\xF6mformer model)"),$ye.forEach(t),hTo=i($),Iu=n($,"LI",{});var kye=s(Iu);$de=n(kye,"STRONG",{});var bdt=s($de);pTo=r(bdt,"openai-gpt"),bdt.forEach(t),uTo=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var vdt=s(oj);_To=r(vdt,"OpenAIGPTModel"),vdt.forEach(t),bTo=r(kye," (OpenAI GPT model)"),kye.forEach(t),vTo=i($),Nu=n($,"LI",{});var Sye=s(Nu);kde=n(Sye,"STRONG",{});var Fdt=s(kde);FTo=r(Fdt,"opt"),Fdt.forEach(t),TTo=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var Tdt=s(rj);MTo=r(Tdt,"OPTModel"),Tdt.forEach(t),ETo=r(Sye," (OPT model)"),Sye.forEach(t),CTo=i($),qu=n($,"LI",{});var Rye=s(qu);Sde=n(Rye,"STRONG",{});var Mdt=s(Sde);wTo=r(Mdt,"pegasus"),Mdt.forEach(t),ATo=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var Edt=s(tj);LTo=r(Edt,"PegasusModel"),Edt.forEach(t),yTo=r(Rye," (Pegasus model)"),Rye.forEach(t),xTo=i($),ju=n($,"LI",{});var Pye=s(ju);Rde=n(Pye,"STRONG",{});var Cdt=s(Rde);$To=r(Cdt,"perceiver"),Cdt.forEach(t),kTo=r(Pye," \u2014 "),aj=n(Pye,"A",{href:!0});var wdt=s(aj);STo=r(wdt,"PerceiverModel"),wdt.forEach(t),RTo=r(Pye," (Perceiver model)"),Pye.forEach(t),PTo=i($),Du=n($,"LI",{});var Bye=s(Du);Pde=n(Bye,"STRONG",{});var Adt=s(Pde);BTo=r(Adt,"plbart"),Adt.forEach(t),ITo=r(Bye," \u2014 "),nj=n(Bye,"A",{href:!0});var Ldt=s(nj);NTo=r(Ldt,"PLBartModel"),Ldt.forEach(t),qTo=r(Bye," (PLBart model)"),Bye.forEach(t),jTo=i($),Gu=n($,"LI",{});var Iye=s(Gu);Bde=n(Iye,"STRONG",{});var ydt=s(Bde);DTo=r(ydt,"poolformer"),ydt.forEach(t),GTo=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var xdt=s(sj);OTo=r(xdt,"PoolFormerModel"),xdt.forEach(t),VTo=r(Iye," (PoolFormer model)"),Iye.forEach(t),XTo=i($),Ou=n($,"LI",{});var Nye=s(Ou);Ide=n(Nye,"STRONG",{});var $dt=s(Ide);zTo=r($dt,"prophetnet"),$dt.forEach(t),WTo=r(Nye," \u2014 "),lj=n(Nye,"A",{href:!0});var kdt=s(lj);QTo=r(kdt,"ProphetNetModel"),kdt.forEach(t),HTo=r(Nye," (ProphetNet model)"),Nye.forEach(t),UTo=i($),Vu=n($,"LI",{});var qye=s(Vu);Nde=n(qye,"STRONG",{});var Sdt=s(Nde);JTo=r(Sdt,"qdqbert"),Sdt.forEach(t),YTo=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var Rdt=s(ij);KTo=r(Rdt,"QDQBertModel"),Rdt.forEach(t),ZTo=r(qye," (QDQBert model)"),qye.forEach(t),e7o=i($),Xu=n($,"LI",{});var jye=s(Xu);qde=n(jye,"STRONG",{});var Pdt=s(qde);o7o=r(Pdt,"reformer"),Pdt.forEach(t),r7o=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var Bdt=s(dj);t7o=r(Bdt,"ReformerModel"),Bdt.forEach(t),a7o=r(jye," (Reformer model)"),jye.forEach(t),n7o=i($),zu=n($,"LI",{});var Dye=s(zu);jde=n(Dye,"STRONG",{});var Idt=s(jde);s7o=r(Idt,"regnet"),Idt.forEach(t),l7o=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var Ndt=s(cj);i7o=r(Ndt,"RegNetModel"),Ndt.forEach(t),d7o=r(Dye," (RegNet model)"),Dye.forEach(t),c7o=i($),Wu=n($,"LI",{});var Gye=s(Wu);Dde=n(Gye,"STRONG",{});var qdt=s(Dde);f7o=r(qdt,"rembert"),qdt.forEach(t),m7o=r(Gye," \u2014 "),fj=n(Gye,"A",{href:!0});var jdt=s(fj);g7o=r(jdt,"RemBertModel"),jdt.forEach(t),h7o=r(Gye," (RemBERT model)"),Gye.forEach(t),p7o=i($),Qu=n($,"LI",{});var Oye=s(Qu);Gde=n(Oye,"STRONG",{});var Ddt=s(Gde);u7o=r(Ddt,"resnet"),Ddt.forEach(t),_7o=r(Oye," \u2014 "),mj=n(Oye,"A",{href:!0});var Gdt=s(mj);b7o=r(Gdt,"ResNetModel"),Gdt.forEach(t),v7o=r(Oye," (ResNet model)"),Oye.forEach(t),F7o=i($),Hu=n($,"LI",{});var Vye=s(Hu);Ode=n(Vye,"STRONG",{});var Odt=s(Ode);T7o=r(Odt,"retribert"),Odt.forEach(t),M7o=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var Vdt=s(gj);E7o=r(Vdt,"RetriBertModel"),Vdt.forEach(t),C7o=r(Vye," (RetriBERT model)"),Vye.forEach(t),w7o=i($),Uu=n($,"LI",{});var Xye=s(Uu);Vde=n(Xye,"STRONG",{});var Xdt=s(Vde);A7o=r(Xdt,"roberta"),Xdt.forEach(t),L7o=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var zdt=s(hj);y7o=r(zdt,"RobertaModel"),zdt.forEach(t),x7o=r(Xye," (RoBERTa model)"),Xye.forEach(t),$7o=i($),Ju=n($,"LI",{});var zye=s(Ju);Xde=n(zye,"STRONG",{});var Wdt=s(Xde);k7o=r(Wdt,"roformer"),Wdt.forEach(t),S7o=r(zye," \u2014 "),pj=n(zye,"A",{href:!0});var Qdt=s(pj);R7o=r(Qdt,"RoFormerModel"),Qdt.forEach(t),P7o=r(zye," (RoFormer model)"),zye.forEach(t),B7o=i($),Yu=n($,"LI",{});var Wye=s(Yu);zde=n(Wye,"STRONG",{});var Hdt=s(zde);I7o=r(Hdt,"segformer"),Hdt.forEach(t),N7o=r(Wye," \u2014 "),uj=n(Wye,"A",{href:!0});var Udt=s(uj);q7o=r(Udt,"SegformerModel"),Udt.forEach(t),j7o=r(Wye," (SegFormer model)"),Wye.forEach(t),D7o=i($),Ku=n($,"LI",{});var Qye=s(Ku);Wde=n(Qye,"STRONG",{});var Jdt=s(Wde);G7o=r(Jdt,"sew"),Jdt.forEach(t),O7o=r(Qye," \u2014 "),_j=n(Qye,"A",{href:!0});var Ydt=s(_j);V7o=r(Ydt,"SEWModel"),Ydt.forEach(t),X7o=r(Qye," (SEW model)"),Qye.forEach(t),z7o=i($),Zu=n($,"LI",{});var Hye=s(Zu);Qde=n(Hye,"STRONG",{});var Kdt=s(Qde);W7o=r(Kdt,"sew-d"),Kdt.forEach(t),Q7o=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var Zdt=s(bj);H7o=r(Zdt,"SEWDModel"),Zdt.forEach(t),U7o=r(Hye," (SEW-D model)"),Hye.forEach(t),J7o=i($),e_=n($,"LI",{});var Uye=s(e_);Hde=n(Uye,"STRONG",{});var ect=s(Hde);Y7o=r(ect,"speech_to_text"),ect.forEach(t),K7o=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var oct=s(vj);Z7o=r(oct,"Speech2TextModel"),oct.forEach(t),e8o=r(Uye," (Speech2Text model)"),Uye.forEach(t),o8o=i($),o_=n($,"LI",{});var Jye=s(o_);Ude=n(Jye,"STRONG",{});var rct=s(Ude);r8o=r(rct,"splinter"),rct.forEach(t),t8o=r(Jye," \u2014 "),Fj=n(Jye,"A",{href:!0});var tct=s(Fj);a8o=r(tct,"SplinterModel"),tct.forEach(t),n8o=r(Jye," (Splinter model)"),Jye.forEach(t),s8o=i($),r_=n($,"LI",{});var Yye=s(r_);Jde=n(Yye,"STRONG",{});var act=s(Jde);l8o=r(act,"squeezebert"),act.forEach(t),i8o=r(Yye," \u2014 "),Tj=n(Yye,"A",{href:!0});var nct=s(Tj);d8o=r(nct,"SqueezeBertModel"),nct.forEach(t),c8o=r(Yye," (SqueezeBERT model)"),Yye.forEach(t),f8o=i($),t_=n($,"LI",{});var Kye=s(t_);Yde=n(Kye,"STRONG",{});var sct=s(Yde);m8o=r(sct,"swin"),sct.forEach(t),g8o=r(Kye," \u2014 "),Mj=n(Kye,"A",{href:!0});var lct=s(Mj);h8o=r(lct,"SwinModel"),lct.forEach(t),p8o=r(Kye," (Swin Transformer model)"),Kye.forEach(t),u8o=i($),a_=n($,"LI",{});var Zye=s(a_);Kde=n(Zye,"STRONG",{});var ict=s(Kde);_8o=r(ict,"t5"),ict.forEach(t),b8o=r(Zye," \u2014 "),Ej=n(Zye,"A",{href:!0});var dct=s(Ej);v8o=r(dct,"T5Model"),dct.forEach(t),F8o=r(Zye," (T5 model)"),Zye.forEach(t),T8o=i($),n_=n($,"LI",{});var e9e=s(n_);Zde=n(e9e,"STRONG",{});var cct=s(Zde);M8o=r(cct,"tapas"),cct.forEach(t),E8o=r(e9e," \u2014 "),Cj=n(e9e,"A",{href:!0});var fct=s(Cj);C8o=r(fct,"TapasModel"),fct.forEach(t),w8o=r(e9e," (TAPAS model)"),e9e.forEach(t),A8o=i($),s_=n($,"LI",{});var o9e=s(s_);ece=n(o9e,"STRONG",{});var mct=s(ece);L8o=r(mct,"trajectory_transformer"),mct.forEach(t),y8o=r(o9e," \u2014 "),wj=n(o9e,"A",{href:!0});var gct=s(wj);x8o=r(gct,"TrajectoryTransformerModel"),gct.forEach(t),$8o=r(o9e," (Trajectory Transformer model)"),o9e.forEach(t),k8o=i($),l_=n($,"LI",{});var r9e=s(l_);oce=n(r9e,"STRONG",{});var hct=s(oce);S8o=r(hct,"transfo-xl"),hct.forEach(t),R8o=r(r9e," \u2014 "),Aj=n(r9e,"A",{href:!0});var pct=s(Aj);P8o=r(pct,"TransfoXLModel"),pct.forEach(t),B8o=r(r9e," (Transformer-XL model)"),r9e.forEach(t),I8o=i($),i_=n($,"LI",{});var t9e=s(i_);rce=n(t9e,"STRONG",{});var uct=s(rce);N8o=r(uct,"unispeech"),uct.forEach(t),q8o=r(t9e," \u2014 "),Lj=n(t9e,"A",{href:!0});var _ct=s(Lj);j8o=r(_ct,"UniSpeechModel"),_ct.forEach(t),D8o=r(t9e," (UniSpeech model)"),t9e.forEach(t),G8o=i($),d_=n($,"LI",{});var a9e=s(d_);tce=n(a9e,"STRONG",{});var bct=s(tce);O8o=r(bct,"unispeech-sat"),bct.forEach(t),V8o=r(a9e," \u2014 "),yj=n(a9e,"A",{href:!0});var vct=s(yj);X8o=r(vct,"UniSpeechSatModel"),vct.forEach(t),z8o=r(a9e," (UniSpeechSat model)"),a9e.forEach(t),W8o=i($),c_=n($,"LI",{});var n9e=s(c_);ace=n(n9e,"STRONG",{});var Fct=s(ace);Q8o=r(Fct,"van"),Fct.forEach(t),H8o=r(n9e," \u2014 "),xj=n(n9e,"A",{href:!0});var Tct=s(xj);U8o=r(Tct,"VanModel"),Tct.forEach(t),J8o=r(n9e," (VAN model)"),n9e.forEach(t),Y8o=i($),f_=n($,"LI",{});var s9e=s(f_);nce=n(s9e,"STRONG",{});var Mct=s(nce);K8o=r(Mct,"vilt"),Mct.forEach(t),Z8o=r(s9e," \u2014 "),$j=n(s9e,"A",{href:!0});var Ect=s($j);eMo=r(Ect,"ViltModel"),Ect.forEach(t),oMo=r(s9e," (ViLT model)"),s9e.forEach(t),rMo=i($),m_=n($,"LI",{});var l9e=s(m_);sce=n(l9e,"STRONG",{});var Cct=s(sce);tMo=r(Cct,"vision-text-dual-encoder"),Cct.forEach(t),aMo=r(l9e," \u2014 "),kj=n(l9e,"A",{href:!0});var wct=s(kj);nMo=r(wct,"VisionTextDualEncoderModel"),wct.forEach(t),sMo=r(l9e," (VisionTextDualEncoder model)"),l9e.forEach(t),lMo=i($),g_=n($,"LI",{});var i9e=s(g_);lce=n(i9e,"STRONG",{});var Act=s(lce);iMo=r(Act,"visual_bert"),Act.forEach(t),dMo=r(i9e," \u2014 "),Sj=n(i9e,"A",{href:!0});var Lct=s(Sj);cMo=r(Lct,"VisualBertModel"),Lct.forEach(t),fMo=r(i9e," (VisualBERT model)"),i9e.forEach(t),mMo=i($),h_=n($,"LI",{});var d9e=s(h_);ice=n(d9e,"STRONG",{});var yct=s(ice);gMo=r(yct,"vit"),yct.forEach(t),hMo=r(d9e," \u2014 "),Rj=n(d9e,"A",{href:!0});var xct=s(Rj);pMo=r(xct,"ViTModel"),xct.forEach(t),uMo=r(d9e," (ViT model)"),d9e.forEach(t),_Mo=i($),p_=n($,"LI",{});var c9e=s(p_);dce=n(c9e,"STRONG",{});var $ct=s(dce);bMo=r($ct,"vit_mae"),$ct.forEach(t),vMo=r(c9e," \u2014 "),Pj=n(c9e,"A",{href:!0});var kct=s(Pj);FMo=r(kct,"ViTMAEModel"),kct.forEach(t),TMo=r(c9e," (ViTMAE model)"),c9e.forEach(t),MMo=i($),u_=n($,"LI",{});var f9e=s(u_);cce=n(f9e,"STRONG",{});var Sct=s(cce);EMo=r(Sct,"wav2vec2"),Sct.forEach(t),CMo=r(f9e," \u2014 "),Bj=n(f9e,"A",{href:!0});var Rct=s(Bj);wMo=r(Rct,"Wav2Vec2Model"),Rct.forEach(t),AMo=r(f9e," (Wav2Vec2 model)"),f9e.forEach(t),LMo=i($),__=n($,"LI",{});var m9e=s(__);fce=n(m9e,"STRONG",{});var Pct=s(fce);yMo=r(Pct,"wav2vec2-conformer"),Pct.forEach(t),xMo=r(m9e," \u2014 "),Ij=n(m9e,"A",{href:!0});var Bct=s(Ij);$Mo=r(Bct,"Wav2Vec2ConformerModel"),Bct.forEach(t),kMo=r(m9e," (Wav2Vec2-Conformer model)"),m9e.forEach(t),SMo=i($),b_=n($,"LI",{});var g9e=s(b_);mce=n(g9e,"STRONG",{});var Ict=s(mce);RMo=r(Ict,"wavlm"),Ict.forEach(t),PMo=r(g9e," \u2014 "),Nj=n(g9e,"A",{href:!0});var Nct=s(Nj);BMo=r(Nct,"WavLMModel"),Nct.forEach(t),IMo=r(g9e," (WavLM model)"),g9e.forEach(t),NMo=i($),v_=n($,"LI",{});var h9e=s(v_);gce=n(h9e,"STRONG",{});var qct=s(gce);qMo=r(qct,"xglm"),qct.forEach(t),jMo=r(h9e," \u2014 "),qj=n(h9e,"A",{href:!0});var jct=s(qj);DMo=r(jct,"XGLMModel"),jct.forEach(t),GMo=r(h9e," (XGLM model)"),h9e.forEach(t),OMo=i($),F_=n($,"LI",{});var p9e=s(F_);hce=n(p9e,"STRONG",{});var Dct=s(hce);VMo=r(Dct,"xlm"),Dct.forEach(t),XMo=r(p9e," \u2014 "),jj=n(p9e,"A",{href:!0});var Gct=s(jj);zMo=r(Gct,"XLMModel"),Gct.forEach(t),WMo=r(p9e," (XLM model)"),p9e.forEach(t),QMo=i($),T_=n($,"LI",{});var u9e=s(T_);pce=n(u9e,"STRONG",{});var Oct=s(pce);HMo=r(Oct,"xlm-prophetnet"),Oct.forEach(t),UMo=r(u9e," \u2014 "),Dj=n(u9e,"A",{href:!0});var Vct=s(Dj);JMo=r(Vct,"XLMProphetNetModel"),Vct.forEach(t),YMo=r(u9e," (XLM-ProphetNet model)"),u9e.forEach(t),KMo=i($),M_=n($,"LI",{});var _9e=s(M_);uce=n(_9e,"STRONG",{});var Xct=s(uce);ZMo=r(Xct,"xlm-roberta"),Xct.forEach(t),e4o=r(_9e," \u2014 "),Gj=n(_9e,"A",{href:!0});var zct=s(Gj);o4o=r(zct,"XLMRobertaModel"),zct.forEach(t),r4o=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),t4o=i($),E_=n($,"LI",{});var b9e=s(E_);_ce=n(b9e,"STRONG",{});var Wct=s(_ce);a4o=r(Wct,"xlm-roberta-xl"),Wct.forEach(t),n4o=r(b9e," \u2014 "),Oj=n(b9e,"A",{href:!0});var Qct=s(Oj);s4o=r(Qct,"XLMRobertaXLModel"),Qct.forEach(t),l4o=r(b9e," (XLM-RoBERTa-XL model)"),b9e.forEach(t),i4o=i($),C_=n($,"LI",{});var v9e=s(C_);bce=n(v9e,"STRONG",{});var Hct=s(bce);d4o=r(Hct,"xlnet"),Hct.forEach(t),c4o=r(v9e," \u2014 "),Vj=n(v9e,"A",{href:!0});var Uct=s(Vj);f4o=r(Uct,"XLNetModel"),Uct.forEach(t),m4o=r(v9e," (XLNet model)"),v9e.forEach(t),g4o=i($),w_=n($,"LI",{});var F9e=s(w_);vce=n(F9e,"STRONG",{});var Jct=s(vce);h4o=r(Jct,"yolos"),Jct.forEach(t),p4o=r(F9e," \u2014 "),Xj=n(F9e,"A",{href:!0});var Yct=s(Xj);u4o=r(Yct,"YolosModel"),Yct.forEach(t),_4o=r(F9e," (YOLOS model)"),F9e.forEach(t),b4o=i($),A_=n($,"LI",{});var T9e=s(A_);Fce=n(T9e,"STRONG",{});var Kct=s(Fce);v4o=r(Kct,"yoso"),Kct.forEach(t),F4o=r(T9e," \u2014 "),zj=n(T9e,"A",{href:!0});var Zct=s(zj);T4o=r(Zct,"YosoModel"),Zct.forEach(t),M4o=r(T9e," (YOSO model)"),T9e.forEach(t),$.forEach(t),E4o=i(na),L_=n(na,"P",{});var M9e=s(L_);C4o=r(M9e,"The model is set in evaluation mode by default using "),Tce=n(M9e,"CODE",{});var eft=s(Tce);w4o=r(eft,"model.eval()"),eft.forEach(t),A4o=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(M9e,"CODE",{});var oft=s(Mce);L4o=r(oft,"model.train()"),oft.forEach(t),M9e.forEach(t),y4o=i(na),T(y_.$$.fragment,na),na.forEach(t),Js.forEach(t),MGe=i(f),ji=n(f,"H2",{class:!0});var yVe=s(ji);x_=n(yVe,"A",{id:!0,class:!0,href:!0});var rft=s(x_);Ece=n(rft,"SPAN",{});var tft=s(Ece);T(KA.$$.fragment,tft),tft.forEach(t),rft.forEach(t),x4o=i(yVe),Cce=n(yVe,"SPAN",{});var aft=s(Cce);$4o=r(aft,"AutoModelForPreTraining"),aft.forEach(t),yVe.forEach(t),EGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(ZA.$$.fragment,Ys),k4o=i(Ys),Di=n(Ys,"P",{});var noe=s(Di);S4o=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wj=n(noe,"A",{href:!0});var nft=s(Wj);R4o=r(nft,"from_pretrained()"),nft.forEach(t),P4o=r(noe," class method or the "),Qj=n(noe,"A",{href:!0});var sft=s(Qj);B4o=r(sft,"from_config()"),sft.forEach(t),I4o=r(noe,` class
method.`),noe.forEach(t),N4o=i(Ys),eL=n(Ys,"P",{});var xVe=s(eL);q4o=r(xVe,"This class cannot be instantiated directly using "),wce=n(xVe,"CODE",{});var lft=s(wce);j4o=r(lft,"__init__()"),lft.forEach(t),D4o=r(xVe," (throws an error)."),xVe.forEach(t),G4o=i(Ys),lt=n(Ys,"DIV",{class:!0});var A3=s(lt);T(oL.$$.fragment,A3),O4o=i(A3),Ace=n(A3,"P",{});var ift=s(Ace);V4o=r(ift,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ift.forEach(t),X4o=i(A3),Gi=n(A3,"P",{});var soe=s(Gi);z4o=r(soe,`Note:
Loading a model from its configuration file does `),Lce=n(soe,"STRONG",{});var dft=s(Lce);W4o=r(dft,"not"),dft.forEach(t),Q4o=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hj=n(soe,"A",{href:!0});var cft=s(Hj);H4o=r(cft,"from_pretrained()"),cft.forEach(t),U4o=r(soe," to load the model weights."),soe.forEach(t),J4o=i(A3),T($_.$$.fragment,A3),A3.forEach(t),Y4o=i(Ys),Ye=n(Ys,"DIV",{class:!0});var sa=s(Ye);T(rL.$$.fragment,sa),K4o=i(sa),yce=n(sa,"P",{});var fft=s(yce);Z4o=r(fft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fft.forEach(t),eEo=i(sa),Pa=n(sa,"P",{});var L3=s(Pa);oEo=r(L3,"The model class to instantiate is selected based on the "),xce=n(L3,"CODE",{});var mft=s(xce);rEo=r(mft,"model_type"),mft.forEach(t),tEo=r(L3,` property of the config object (either
passed as an argument or loaded from `),$ce=n(L3,"CODE",{});var gft=s($ce);aEo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),nEo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(L3,"CODE",{});var hft=s(kce);sEo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),lEo=r(L3,":"),L3.forEach(t),iEo=i(sa),G=n(sa,"UL",{});var O=s(G);k_=n(O,"LI",{});var E9e=s(k_);Sce=n(E9e,"STRONG",{});var pft=s(Sce);dEo=r(pft,"albert"),pft.forEach(t),cEo=r(E9e," \u2014 "),Uj=n(E9e,"A",{href:!0});var uft=s(Uj);fEo=r(uft,"AlbertForPreTraining"),uft.forEach(t),mEo=r(E9e," (ALBERT model)"),E9e.forEach(t),gEo=i(O),S_=n(O,"LI",{});var C9e=s(S_);Rce=n(C9e,"STRONG",{});var _ft=s(Rce);hEo=r(_ft,"bart"),_ft.forEach(t),pEo=r(C9e," \u2014 "),Jj=n(C9e,"A",{href:!0});var bft=s(Jj);uEo=r(bft,"BartForConditionalGeneration"),bft.forEach(t),_Eo=r(C9e," (BART model)"),C9e.forEach(t),bEo=i(O),R_=n(O,"LI",{});var w9e=s(R_);Pce=n(w9e,"STRONG",{});var vft=s(Pce);vEo=r(vft,"bert"),vft.forEach(t),FEo=r(w9e," \u2014 "),Yj=n(w9e,"A",{href:!0});var Fft=s(Yj);TEo=r(Fft,"BertForPreTraining"),Fft.forEach(t),MEo=r(w9e," (BERT model)"),w9e.forEach(t),EEo=i(O),P_=n(O,"LI",{});var A9e=s(P_);Bce=n(A9e,"STRONG",{});var Tft=s(Bce);CEo=r(Tft,"big_bird"),Tft.forEach(t),wEo=r(A9e," \u2014 "),Kj=n(A9e,"A",{href:!0});var Mft=s(Kj);AEo=r(Mft,"BigBirdForPreTraining"),Mft.forEach(t),LEo=r(A9e," (BigBird model)"),A9e.forEach(t),yEo=i(O),B_=n(O,"LI",{});var L9e=s(B_);Ice=n(L9e,"STRONG",{});var Eft=s(Ice);xEo=r(Eft,"bloom"),Eft.forEach(t),$Eo=r(L9e," \u2014 "),Zj=n(L9e,"A",{href:!0});var Cft=s(Zj);kEo=r(Cft,"BloomForCausalLM"),Cft.forEach(t),SEo=r(L9e," (BLOOM model)"),L9e.forEach(t),REo=i(O),I_=n(O,"LI",{});var y9e=s(I_);Nce=n(y9e,"STRONG",{});var wft=s(Nce);PEo=r(wft,"camembert"),wft.forEach(t),BEo=r(y9e," \u2014 "),eD=n(y9e,"A",{href:!0});var Aft=s(eD);IEo=r(Aft,"CamembertForMaskedLM"),Aft.forEach(t),NEo=r(y9e," (CamemBERT model)"),y9e.forEach(t),qEo=i(O),N_=n(O,"LI",{});var x9e=s(N_);qce=n(x9e,"STRONG",{});var Lft=s(qce);jEo=r(Lft,"ctrl"),Lft.forEach(t),DEo=r(x9e," \u2014 "),oD=n(x9e,"A",{href:!0});var yft=s(oD);GEo=r(yft,"CTRLLMHeadModel"),yft.forEach(t),OEo=r(x9e," (CTRL model)"),x9e.forEach(t),VEo=i(O),q_=n(O,"LI",{});var $9e=s(q_);jce=n($9e,"STRONG",{});var xft=s(jce);XEo=r(xft,"data2vec-text"),xft.forEach(t),zEo=r($9e," \u2014 "),rD=n($9e,"A",{href:!0});var $ft=s(rD);WEo=r($ft,"Data2VecTextForMaskedLM"),$ft.forEach(t),QEo=r($9e," (Data2VecText model)"),$9e.forEach(t),HEo=i(O),j_=n(O,"LI",{});var k9e=s(j_);Dce=n(k9e,"STRONG",{});var kft=s(Dce);UEo=r(kft,"deberta"),kft.forEach(t),JEo=r(k9e," \u2014 "),tD=n(k9e,"A",{href:!0});var Sft=s(tD);YEo=r(Sft,"DebertaForMaskedLM"),Sft.forEach(t),KEo=r(k9e," (DeBERTa model)"),k9e.forEach(t),ZEo=i(O),D_=n(O,"LI",{});var S9e=s(D_);Gce=n(S9e,"STRONG",{});var Rft=s(Gce);eCo=r(Rft,"deberta-v2"),Rft.forEach(t),oCo=r(S9e," \u2014 "),aD=n(S9e,"A",{href:!0});var Pft=s(aD);rCo=r(Pft,"DebertaV2ForMaskedLM"),Pft.forEach(t),tCo=r(S9e," (DeBERTa-v2 model)"),S9e.forEach(t),aCo=i(O),G_=n(O,"LI",{});var R9e=s(G_);Oce=n(R9e,"STRONG",{});var Bft=s(Oce);nCo=r(Bft,"distilbert"),Bft.forEach(t),sCo=r(R9e," \u2014 "),nD=n(R9e,"A",{href:!0});var Ift=s(nD);lCo=r(Ift,"DistilBertForMaskedLM"),Ift.forEach(t),iCo=r(R9e," (DistilBERT model)"),R9e.forEach(t),dCo=i(O),O_=n(O,"LI",{});var P9e=s(O_);Vce=n(P9e,"STRONG",{});var Nft=s(Vce);cCo=r(Nft,"electra"),Nft.forEach(t),fCo=r(P9e," \u2014 "),sD=n(P9e,"A",{href:!0});var qft=s(sD);mCo=r(qft,"ElectraForPreTraining"),qft.forEach(t),gCo=r(P9e," (ELECTRA model)"),P9e.forEach(t),hCo=i(O),V_=n(O,"LI",{});var B9e=s(V_);Xce=n(B9e,"STRONG",{});var jft=s(Xce);pCo=r(jft,"flaubert"),jft.forEach(t),uCo=r(B9e," \u2014 "),lD=n(B9e,"A",{href:!0});var Dft=s(lD);_Co=r(Dft,"FlaubertWithLMHeadModel"),Dft.forEach(t),bCo=r(B9e," (FlauBERT model)"),B9e.forEach(t),vCo=i(O),X_=n(O,"LI",{});var I9e=s(X_);zce=n(I9e,"STRONG",{});var Gft=s(zce);FCo=r(Gft,"flava"),Gft.forEach(t),TCo=r(I9e," \u2014 "),iD=n(I9e,"A",{href:!0});var Oft=s(iD);MCo=r(Oft,"FlavaForPreTraining"),Oft.forEach(t),ECo=r(I9e," (FLAVA model)"),I9e.forEach(t),CCo=i(O),z_=n(O,"LI",{});var N9e=s(z_);Wce=n(N9e,"STRONG",{});var Vft=s(Wce);wCo=r(Vft,"fnet"),Vft.forEach(t),ACo=r(N9e," \u2014 "),dD=n(N9e,"A",{href:!0});var Xft=s(dD);LCo=r(Xft,"FNetForPreTraining"),Xft.forEach(t),yCo=r(N9e," (FNet model)"),N9e.forEach(t),xCo=i(O),W_=n(O,"LI",{});var q9e=s(W_);Qce=n(q9e,"STRONG",{});var zft=s(Qce);$Co=r(zft,"fsmt"),zft.forEach(t),kCo=r(q9e," \u2014 "),cD=n(q9e,"A",{href:!0});var Wft=s(cD);SCo=r(Wft,"FSMTForConditionalGeneration"),Wft.forEach(t),RCo=r(q9e," (FairSeq Machine-Translation model)"),q9e.forEach(t),PCo=i(O),Q_=n(O,"LI",{});var j9e=s(Q_);Hce=n(j9e,"STRONG",{});var Qft=s(Hce);BCo=r(Qft,"funnel"),Qft.forEach(t),ICo=r(j9e," \u2014 "),fD=n(j9e,"A",{href:!0});var Hft=s(fD);NCo=r(Hft,"FunnelForPreTraining"),Hft.forEach(t),qCo=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),jCo=i(O),H_=n(O,"LI",{});var D9e=s(H_);Uce=n(D9e,"STRONG",{});var Uft=s(Uce);DCo=r(Uft,"gpt2"),Uft.forEach(t),GCo=r(D9e," \u2014 "),mD=n(D9e,"A",{href:!0});var Jft=s(mD);OCo=r(Jft,"GPT2LMHeadModel"),Jft.forEach(t),VCo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),XCo=i(O),U_=n(O,"LI",{});var G9e=s(U_);Jce=n(G9e,"STRONG",{});var Yft=s(Jce);zCo=r(Yft,"ibert"),Yft.forEach(t),WCo=r(G9e," \u2014 "),gD=n(G9e,"A",{href:!0});var Kft=s(gD);QCo=r(Kft,"IBertForMaskedLM"),Kft.forEach(t),HCo=r(G9e," (I-BERT model)"),G9e.forEach(t),UCo=i(O),J_=n(O,"LI",{});var O9e=s(J_);Yce=n(O9e,"STRONG",{});var Zft=s(Yce);JCo=r(Zft,"layoutlm"),Zft.forEach(t),YCo=r(O9e," \u2014 "),hD=n(O9e,"A",{href:!0});var emt=s(hD);KCo=r(emt,"LayoutLMForMaskedLM"),emt.forEach(t),ZCo=r(O9e," (LayoutLM model)"),O9e.forEach(t),e5o=i(O),Y_=n(O,"LI",{});var V9e=s(Y_);Kce=n(V9e,"STRONG",{});var omt=s(Kce);o5o=r(omt,"longformer"),omt.forEach(t),r5o=r(V9e," \u2014 "),pD=n(V9e,"A",{href:!0});var rmt=s(pD);t5o=r(rmt,"LongformerForMaskedLM"),rmt.forEach(t),a5o=r(V9e," (Longformer model)"),V9e.forEach(t),n5o=i(O),K_=n(O,"LI",{});var X9e=s(K_);Zce=n(X9e,"STRONG",{});var tmt=s(Zce);s5o=r(tmt,"lxmert"),tmt.forEach(t),l5o=r(X9e," \u2014 "),uD=n(X9e,"A",{href:!0});var amt=s(uD);i5o=r(amt,"LxmertForPreTraining"),amt.forEach(t),d5o=r(X9e," (LXMERT model)"),X9e.forEach(t),c5o=i(O),Z_=n(O,"LI",{});var z9e=s(Z_);efe=n(z9e,"STRONG",{});var nmt=s(efe);f5o=r(nmt,"megatron-bert"),nmt.forEach(t),m5o=r(z9e," \u2014 "),_D=n(z9e,"A",{href:!0});var smt=s(_D);g5o=r(smt,"MegatronBertForPreTraining"),smt.forEach(t),h5o=r(z9e," (Megatron-BERT model)"),z9e.forEach(t),p5o=i(O),e1=n(O,"LI",{});var W9e=s(e1);ofe=n(W9e,"STRONG",{});var lmt=s(ofe);u5o=r(lmt,"mobilebert"),lmt.forEach(t),_5o=r(W9e," \u2014 "),bD=n(W9e,"A",{href:!0});var imt=s(bD);b5o=r(imt,"MobileBertForPreTraining"),imt.forEach(t),v5o=r(W9e," (MobileBERT model)"),W9e.forEach(t),F5o=i(O),o1=n(O,"LI",{});var Q9e=s(o1);rfe=n(Q9e,"STRONG",{});var dmt=s(rfe);T5o=r(dmt,"mpnet"),dmt.forEach(t),M5o=r(Q9e," \u2014 "),vD=n(Q9e,"A",{href:!0});var cmt=s(vD);E5o=r(cmt,"MPNetForMaskedLM"),cmt.forEach(t),C5o=r(Q9e," (MPNet model)"),Q9e.forEach(t),w5o=i(O),r1=n(O,"LI",{});var H9e=s(r1);tfe=n(H9e,"STRONG",{});var fmt=s(tfe);A5o=r(fmt,"openai-gpt"),fmt.forEach(t),L5o=r(H9e," \u2014 "),FD=n(H9e,"A",{href:!0});var mmt=s(FD);y5o=r(mmt,"OpenAIGPTLMHeadModel"),mmt.forEach(t),x5o=r(H9e," (OpenAI GPT model)"),H9e.forEach(t),$5o=i(O),t1=n(O,"LI",{});var U9e=s(t1);afe=n(U9e,"STRONG",{});var gmt=s(afe);k5o=r(gmt,"retribert"),gmt.forEach(t),S5o=r(U9e," \u2014 "),TD=n(U9e,"A",{href:!0});var hmt=s(TD);R5o=r(hmt,"RetriBertModel"),hmt.forEach(t),P5o=r(U9e," (RetriBERT model)"),U9e.forEach(t),B5o=i(O),a1=n(O,"LI",{});var J9e=s(a1);nfe=n(J9e,"STRONG",{});var pmt=s(nfe);I5o=r(pmt,"roberta"),pmt.forEach(t),N5o=r(J9e," \u2014 "),MD=n(J9e,"A",{href:!0});var umt=s(MD);q5o=r(umt,"RobertaForMaskedLM"),umt.forEach(t),j5o=r(J9e," (RoBERTa model)"),J9e.forEach(t),D5o=i(O),n1=n(O,"LI",{});var Y9e=s(n1);sfe=n(Y9e,"STRONG",{});var _mt=s(sfe);G5o=r(_mt,"splinter"),_mt.forEach(t),O5o=r(Y9e," \u2014 "),ED=n(Y9e,"A",{href:!0});var bmt=s(ED);V5o=r(bmt,"SplinterForPreTraining"),bmt.forEach(t),X5o=r(Y9e," (Splinter model)"),Y9e.forEach(t),z5o=i(O),s1=n(O,"LI",{});var K9e=s(s1);lfe=n(K9e,"STRONG",{});var vmt=s(lfe);W5o=r(vmt,"squeezebert"),vmt.forEach(t),Q5o=r(K9e," \u2014 "),CD=n(K9e,"A",{href:!0});var Fmt=s(CD);H5o=r(Fmt,"SqueezeBertForMaskedLM"),Fmt.forEach(t),U5o=r(K9e," (SqueezeBERT model)"),K9e.forEach(t),J5o=i(O),l1=n(O,"LI",{});var Z9e=s(l1);ife=n(Z9e,"STRONG",{});var Tmt=s(ife);Y5o=r(Tmt,"t5"),Tmt.forEach(t),K5o=r(Z9e," \u2014 "),wD=n(Z9e,"A",{href:!0});var Mmt=s(wD);Z5o=r(Mmt,"T5ForConditionalGeneration"),Mmt.forEach(t),e3o=r(Z9e," (T5 model)"),Z9e.forEach(t),o3o=i(O),i1=n(O,"LI",{});var exe=s(i1);dfe=n(exe,"STRONG",{});var Emt=s(dfe);r3o=r(Emt,"tapas"),Emt.forEach(t),t3o=r(exe," \u2014 "),AD=n(exe,"A",{href:!0});var Cmt=s(AD);a3o=r(Cmt,"TapasForMaskedLM"),Cmt.forEach(t),n3o=r(exe," (TAPAS model)"),exe.forEach(t),s3o=i(O),d1=n(O,"LI",{});var oxe=s(d1);cfe=n(oxe,"STRONG",{});var wmt=s(cfe);l3o=r(wmt,"transfo-xl"),wmt.forEach(t),i3o=r(oxe," \u2014 "),LD=n(oxe,"A",{href:!0});var Amt=s(LD);d3o=r(Amt,"TransfoXLLMHeadModel"),Amt.forEach(t),c3o=r(oxe," (Transformer-XL model)"),oxe.forEach(t),f3o=i(O),c1=n(O,"LI",{});var rxe=s(c1);ffe=n(rxe,"STRONG",{});var Lmt=s(ffe);m3o=r(Lmt,"unispeech"),Lmt.forEach(t),g3o=r(rxe," \u2014 "),yD=n(rxe,"A",{href:!0});var ymt=s(yD);h3o=r(ymt,"UniSpeechForPreTraining"),ymt.forEach(t),p3o=r(rxe," (UniSpeech model)"),rxe.forEach(t),u3o=i(O),f1=n(O,"LI",{});var txe=s(f1);mfe=n(txe,"STRONG",{});var xmt=s(mfe);_3o=r(xmt,"unispeech-sat"),xmt.forEach(t),b3o=r(txe," \u2014 "),xD=n(txe,"A",{href:!0});var $mt=s(xD);v3o=r($mt,"UniSpeechSatForPreTraining"),$mt.forEach(t),F3o=r(txe," (UniSpeechSat model)"),txe.forEach(t),T3o=i(O),m1=n(O,"LI",{});var axe=s(m1);gfe=n(axe,"STRONG",{});var kmt=s(gfe);M3o=r(kmt,"visual_bert"),kmt.forEach(t),E3o=r(axe," \u2014 "),$D=n(axe,"A",{href:!0});var Smt=s($D);C3o=r(Smt,"VisualBertForPreTraining"),Smt.forEach(t),w3o=r(axe," (VisualBERT model)"),axe.forEach(t),A3o=i(O),g1=n(O,"LI",{});var nxe=s(g1);hfe=n(nxe,"STRONG",{});var Rmt=s(hfe);L3o=r(Rmt,"vit_mae"),Rmt.forEach(t),y3o=r(nxe," \u2014 "),kD=n(nxe,"A",{href:!0});var Pmt=s(kD);x3o=r(Pmt,"ViTMAEForPreTraining"),Pmt.forEach(t),$3o=r(nxe," (ViTMAE model)"),nxe.forEach(t),k3o=i(O),h1=n(O,"LI",{});var sxe=s(h1);pfe=n(sxe,"STRONG",{});var Bmt=s(pfe);S3o=r(Bmt,"wav2vec2"),Bmt.forEach(t),R3o=r(sxe," \u2014 "),SD=n(sxe,"A",{href:!0});var Imt=s(SD);P3o=r(Imt,"Wav2Vec2ForPreTraining"),Imt.forEach(t),B3o=r(sxe," (Wav2Vec2 model)"),sxe.forEach(t),I3o=i(O),p1=n(O,"LI",{});var lxe=s(p1);ufe=n(lxe,"STRONG",{});var Nmt=s(ufe);N3o=r(Nmt,"wav2vec2-conformer"),Nmt.forEach(t),q3o=r(lxe," \u2014 "),RD=n(lxe,"A",{href:!0});var qmt=s(RD);j3o=r(qmt,"Wav2Vec2ConformerForPreTraining"),qmt.forEach(t),D3o=r(lxe," (Wav2Vec2-Conformer model)"),lxe.forEach(t),G3o=i(O),u1=n(O,"LI",{});var ixe=s(u1);_fe=n(ixe,"STRONG",{});var jmt=s(_fe);O3o=r(jmt,"xlm"),jmt.forEach(t),V3o=r(ixe," \u2014 "),PD=n(ixe,"A",{href:!0});var Dmt=s(PD);X3o=r(Dmt,"XLMWithLMHeadModel"),Dmt.forEach(t),z3o=r(ixe," (XLM model)"),ixe.forEach(t),W3o=i(O),_1=n(O,"LI",{});var dxe=s(_1);bfe=n(dxe,"STRONG",{});var Gmt=s(bfe);Q3o=r(Gmt,"xlm-roberta"),Gmt.forEach(t),H3o=r(dxe," \u2014 "),BD=n(dxe,"A",{href:!0});var Omt=s(BD);U3o=r(Omt,"XLMRobertaForMaskedLM"),Omt.forEach(t),J3o=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),Y3o=i(O),b1=n(O,"LI",{});var cxe=s(b1);vfe=n(cxe,"STRONG",{});var Vmt=s(vfe);K3o=r(Vmt,"xlm-roberta-xl"),Vmt.forEach(t),Z3o=r(cxe," \u2014 "),ID=n(cxe,"A",{href:!0});var Xmt=s(ID);ewo=r(Xmt,"XLMRobertaXLForMaskedLM"),Xmt.forEach(t),owo=r(cxe," (XLM-RoBERTa-XL model)"),cxe.forEach(t),rwo=i(O),v1=n(O,"LI",{});var fxe=s(v1);Ffe=n(fxe,"STRONG",{});var zmt=s(Ffe);two=r(zmt,"xlnet"),zmt.forEach(t),awo=r(fxe," \u2014 "),ND=n(fxe,"A",{href:!0});var Wmt=s(ND);nwo=r(Wmt,"XLNetLMHeadModel"),Wmt.forEach(t),swo=r(fxe," (XLNet model)"),fxe.forEach(t),O.forEach(t),lwo=i(sa),F1=n(sa,"P",{});var mxe=s(F1);iwo=r(mxe,"The model is set in evaluation mode by default using "),Tfe=n(mxe,"CODE",{});var Qmt=s(Tfe);dwo=r(Qmt,"model.eval()"),Qmt.forEach(t),cwo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(mxe,"CODE",{});var Hmt=s(Mfe);fwo=r(Hmt,"model.train()"),Hmt.forEach(t),mxe.forEach(t),mwo=i(sa),T(T1.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),CGe=i(f),Oi=n(f,"H2",{class:!0});var $Ve=s(Oi);M1=n($Ve,"A",{id:!0,class:!0,href:!0});var Umt=s(M1);Efe=n(Umt,"SPAN",{});var Jmt=s(Efe);T(tL.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),gwo=i($Ve),Cfe=n($Ve,"SPAN",{});var Ymt=s(Cfe);hwo=r(Ymt,"AutoModelForCausalLM"),Ymt.forEach(t),$Ve.forEach(t),wGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(aL.$$.fragment,Ks),pwo=i(Ks),Vi=n(Ks,"P",{});var loe=s(Vi);uwo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qD=n(loe,"A",{href:!0});var Kmt=s(qD);_wo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),bwo=r(loe," class method or the "),jD=n(loe,"A",{href:!0});var Zmt=s(jD);vwo=r(Zmt,"from_config()"),Zmt.forEach(t),Fwo=r(loe,` class
method.`),loe.forEach(t),Two=i(Ks),nL=n(Ks,"P",{});var kVe=s(nL);Mwo=r(kVe,"This class cannot be instantiated directly using "),wfe=n(kVe,"CODE",{});var egt=s(wfe);Ewo=r(egt,"__init__()"),egt.forEach(t),Cwo=r(kVe," (throws an error)."),kVe.forEach(t),wwo=i(Ks),it=n(Ks,"DIV",{class:!0});var y3=s(it);T(sL.$$.fragment,y3),Awo=i(y3),Afe=n(y3,"P",{});var ogt=s(Afe);Lwo=r(ogt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ogt.forEach(t),ywo=i(y3),Xi=n(y3,"P",{});var ioe=s(Xi);xwo=r(ioe,`Note:
Loading a model from its configuration file does `),Lfe=n(ioe,"STRONG",{});var rgt=s(Lfe);$wo=r(rgt,"not"),rgt.forEach(t),kwo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(ioe,"A",{href:!0});var tgt=s(DD);Swo=r(tgt,"from_pretrained()"),tgt.forEach(t),Rwo=r(ioe," to load the model weights."),ioe.forEach(t),Pwo=i(y3),T(E1.$$.fragment,y3),y3.forEach(t),Bwo=i(Ks),Ke=n(Ks,"DIV",{class:!0});var la=s(Ke);T(lL.$$.fragment,la),Iwo=i(la),yfe=n(la,"P",{});var agt=s(yfe);Nwo=r(agt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),agt.forEach(t),qwo=i(la),Ba=n(la,"P",{});var x3=s(Ba);jwo=r(x3,"The model class to instantiate is selected based on the "),xfe=n(x3,"CODE",{});var ngt=s(xfe);Dwo=r(ngt,"model_type"),ngt.forEach(t),Gwo=r(x3,` property of the config object (either
passed as an argument or loaded from `),$fe=n(x3,"CODE",{});var sgt=s($fe);Owo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),Vwo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(x3,"CODE",{});var lgt=s(kfe);Xwo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),zwo=r(x3,":"),x3.forEach(t),Wwo=i(la),z=n(la,"UL",{});var W=s(z);C1=n(W,"LI",{});var gxe=s(C1);Sfe=n(gxe,"STRONG",{});var igt=s(Sfe);Qwo=r(igt,"bart"),igt.forEach(t),Hwo=r(gxe," \u2014 "),GD=n(gxe,"A",{href:!0});var dgt=s(GD);Uwo=r(dgt,"BartForCausalLM"),dgt.forEach(t),Jwo=r(gxe," (BART model)"),gxe.forEach(t),Ywo=i(W),w1=n(W,"LI",{});var hxe=s(w1);Rfe=n(hxe,"STRONG",{});var cgt=s(Rfe);Kwo=r(cgt,"bert"),cgt.forEach(t),Zwo=r(hxe," \u2014 "),OD=n(hxe,"A",{href:!0});var fgt=s(OD);eAo=r(fgt,"BertLMHeadModel"),fgt.forEach(t),oAo=r(hxe," (BERT model)"),hxe.forEach(t),rAo=i(W),A1=n(W,"LI",{});var pxe=s(A1);Pfe=n(pxe,"STRONG",{});var mgt=s(Pfe);tAo=r(mgt,"bert-generation"),mgt.forEach(t),aAo=r(pxe," \u2014 "),VD=n(pxe,"A",{href:!0});var ggt=s(VD);nAo=r(ggt,"BertGenerationDecoder"),ggt.forEach(t),sAo=r(pxe," (Bert Generation model)"),pxe.forEach(t),lAo=i(W),L1=n(W,"LI",{});var uxe=s(L1);Bfe=n(uxe,"STRONG",{});var hgt=s(Bfe);iAo=r(hgt,"big_bird"),hgt.forEach(t),dAo=r(uxe," \u2014 "),XD=n(uxe,"A",{href:!0});var pgt=s(XD);cAo=r(pgt,"BigBirdForCausalLM"),pgt.forEach(t),fAo=r(uxe," (BigBird model)"),uxe.forEach(t),mAo=i(W),y1=n(W,"LI",{});var _xe=s(y1);Ife=n(_xe,"STRONG",{});var ugt=s(Ife);gAo=r(ugt,"bigbird_pegasus"),ugt.forEach(t),hAo=r(_xe," \u2014 "),zD=n(_xe,"A",{href:!0});var _gt=s(zD);pAo=r(_gt,"BigBirdPegasusForCausalLM"),_gt.forEach(t),uAo=r(_xe," (BigBird-Pegasus model)"),_xe.forEach(t),_Ao=i(W),x1=n(W,"LI",{});var bxe=s(x1);Nfe=n(bxe,"STRONG",{});var bgt=s(Nfe);bAo=r(bgt,"blenderbot"),bgt.forEach(t),vAo=r(bxe," \u2014 "),WD=n(bxe,"A",{href:!0});var vgt=s(WD);FAo=r(vgt,"BlenderbotForCausalLM"),vgt.forEach(t),TAo=r(bxe," (Blenderbot model)"),bxe.forEach(t),MAo=i(W),$1=n(W,"LI",{});var vxe=s($1);qfe=n(vxe,"STRONG",{});var Fgt=s(qfe);EAo=r(Fgt,"blenderbot-small"),Fgt.forEach(t),CAo=r(vxe," \u2014 "),QD=n(vxe,"A",{href:!0});var Tgt=s(QD);wAo=r(Tgt,"BlenderbotSmallForCausalLM"),Tgt.forEach(t),AAo=r(vxe," (BlenderbotSmall model)"),vxe.forEach(t),LAo=i(W),k1=n(W,"LI",{});var Fxe=s(k1);jfe=n(Fxe,"STRONG",{});var Mgt=s(jfe);yAo=r(Mgt,"bloom"),Mgt.forEach(t),xAo=r(Fxe," \u2014 "),HD=n(Fxe,"A",{href:!0});var Egt=s(HD);$Ao=r(Egt,"BloomForCausalLM"),Egt.forEach(t),kAo=r(Fxe," (BLOOM model)"),Fxe.forEach(t),SAo=i(W),S1=n(W,"LI",{});var Txe=s(S1);Dfe=n(Txe,"STRONG",{});var Cgt=s(Dfe);RAo=r(Cgt,"camembert"),Cgt.forEach(t),PAo=r(Txe," \u2014 "),UD=n(Txe,"A",{href:!0});var wgt=s(UD);BAo=r(wgt,"CamembertForCausalLM"),wgt.forEach(t),IAo=r(Txe," (CamemBERT model)"),Txe.forEach(t),NAo=i(W),R1=n(W,"LI",{});var Mxe=s(R1);Gfe=n(Mxe,"STRONG",{});var Agt=s(Gfe);qAo=r(Agt,"ctrl"),Agt.forEach(t),jAo=r(Mxe," \u2014 "),JD=n(Mxe,"A",{href:!0});var Lgt=s(JD);DAo=r(Lgt,"CTRLLMHeadModel"),Lgt.forEach(t),GAo=r(Mxe," (CTRL model)"),Mxe.forEach(t),OAo=i(W),P1=n(W,"LI",{});var Exe=s(P1);Ofe=n(Exe,"STRONG",{});var ygt=s(Ofe);VAo=r(ygt,"data2vec-text"),ygt.forEach(t),XAo=r(Exe," \u2014 "),YD=n(Exe,"A",{href:!0});var xgt=s(YD);zAo=r(xgt,"Data2VecTextForCausalLM"),xgt.forEach(t),WAo=r(Exe," (Data2VecText model)"),Exe.forEach(t),QAo=i(W),B1=n(W,"LI",{});var Cxe=s(B1);Vfe=n(Cxe,"STRONG",{});var $gt=s(Vfe);HAo=r($gt,"electra"),$gt.forEach(t),UAo=r(Cxe," \u2014 "),KD=n(Cxe,"A",{href:!0});var kgt=s(KD);JAo=r(kgt,"ElectraForCausalLM"),kgt.forEach(t),YAo=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),KAo=i(W),I1=n(W,"LI",{});var wxe=s(I1);Xfe=n(wxe,"STRONG",{});var Sgt=s(Xfe);ZAo=r(Sgt,"gpt2"),Sgt.forEach(t),eLo=r(wxe," \u2014 "),ZD=n(wxe,"A",{href:!0});var Rgt=s(ZD);oLo=r(Rgt,"GPT2LMHeadModel"),Rgt.forEach(t),rLo=r(wxe," (OpenAI GPT-2 model)"),wxe.forEach(t),tLo=i(W),N1=n(W,"LI",{});var Axe=s(N1);zfe=n(Axe,"STRONG",{});var Pgt=s(zfe);aLo=r(Pgt,"gpt_neo"),Pgt.forEach(t),nLo=r(Axe," \u2014 "),eG=n(Axe,"A",{href:!0});var Bgt=s(eG);sLo=r(Bgt,"GPTNeoForCausalLM"),Bgt.forEach(t),lLo=r(Axe," (GPT Neo model)"),Axe.forEach(t),iLo=i(W),q1=n(W,"LI",{});var Lxe=s(q1);Wfe=n(Lxe,"STRONG",{});var Igt=s(Wfe);dLo=r(Igt,"gpt_neox"),Igt.forEach(t),cLo=r(Lxe," \u2014 "),oG=n(Lxe,"A",{href:!0});var Ngt=s(oG);fLo=r(Ngt,"GPTNeoXForCausalLM"),Ngt.forEach(t),mLo=r(Lxe," (GPT NeoX model)"),Lxe.forEach(t),gLo=i(W),j1=n(W,"LI",{});var yxe=s(j1);Qfe=n(yxe,"STRONG",{});var qgt=s(Qfe);hLo=r(qgt,"gptj"),qgt.forEach(t),pLo=r(yxe," \u2014 "),rG=n(yxe,"A",{href:!0});var jgt=s(rG);uLo=r(jgt,"GPTJForCausalLM"),jgt.forEach(t),_Lo=r(yxe," (GPT-J model)"),yxe.forEach(t),bLo=i(W),D1=n(W,"LI",{});var xxe=s(D1);Hfe=n(xxe,"STRONG",{});var Dgt=s(Hfe);vLo=r(Dgt,"marian"),Dgt.forEach(t),FLo=r(xxe," \u2014 "),tG=n(xxe,"A",{href:!0});var Ggt=s(tG);TLo=r(Ggt,"MarianForCausalLM"),Ggt.forEach(t),MLo=r(xxe," (Marian model)"),xxe.forEach(t),ELo=i(W),G1=n(W,"LI",{});var $xe=s(G1);Ufe=n($xe,"STRONG",{});var Ogt=s(Ufe);CLo=r(Ogt,"mbart"),Ogt.forEach(t),wLo=r($xe," \u2014 "),aG=n($xe,"A",{href:!0});var Vgt=s(aG);ALo=r(Vgt,"MBartForCausalLM"),Vgt.forEach(t),LLo=r($xe," (mBART model)"),$xe.forEach(t),yLo=i(W),O1=n(W,"LI",{});var kxe=s(O1);Jfe=n(kxe,"STRONG",{});var Xgt=s(Jfe);xLo=r(Xgt,"megatron-bert"),Xgt.forEach(t),$Lo=r(kxe," \u2014 "),nG=n(kxe,"A",{href:!0});var zgt=s(nG);kLo=r(zgt,"MegatronBertForCausalLM"),zgt.forEach(t),SLo=r(kxe," (Megatron-BERT model)"),kxe.forEach(t),RLo=i(W),V1=n(W,"LI",{});var Sxe=s(V1);Yfe=n(Sxe,"STRONG",{});var Wgt=s(Yfe);PLo=r(Wgt,"openai-gpt"),Wgt.forEach(t),BLo=r(Sxe," \u2014 "),sG=n(Sxe,"A",{href:!0});var Qgt=s(sG);ILo=r(Qgt,"OpenAIGPTLMHeadModel"),Qgt.forEach(t),NLo=r(Sxe," (OpenAI GPT model)"),Sxe.forEach(t),qLo=i(W),X1=n(W,"LI",{});var Rxe=s(X1);Kfe=n(Rxe,"STRONG",{});var Hgt=s(Kfe);jLo=r(Hgt,"opt"),Hgt.forEach(t),DLo=r(Rxe," \u2014 "),lG=n(Rxe,"A",{href:!0});var Ugt=s(lG);GLo=r(Ugt,"OPTForCausalLM"),Ugt.forEach(t),OLo=r(Rxe," (OPT model)"),Rxe.forEach(t),VLo=i(W),z1=n(W,"LI",{});var Pxe=s(z1);Zfe=n(Pxe,"STRONG",{});var Jgt=s(Zfe);XLo=r(Jgt,"pegasus"),Jgt.forEach(t),zLo=r(Pxe," \u2014 "),iG=n(Pxe,"A",{href:!0});var Ygt=s(iG);WLo=r(Ygt,"PegasusForCausalLM"),Ygt.forEach(t),QLo=r(Pxe," (Pegasus model)"),Pxe.forEach(t),HLo=i(W),W1=n(W,"LI",{});var Bxe=s(W1);eme=n(Bxe,"STRONG",{});var Kgt=s(eme);ULo=r(Kgt,"plbart"),Kgt.forEach(t),JLo=r(Bxe," \u2014 "),dG=n(Bxe,"A",{href:!0});var Zgt=s(dG);YLo=r(Zgt,"PLBartForCausalLM"),Zgt.forEach(t),KLo=r(Bxe," (PLBart model)"),Bxe.forEach(t),ZLo=i(W),Q1=n(W,"LI",{});var Ixe=s(Q1);ome=n(Ixe,"STRONG",{});var eht=s(ome);eyo=r(eht,"prophetnet"),eht.forEach(t),oyo=r(Ixe," \u2014 "),cG=n(Ixe,"A",{href:!0});var oht=s(cG);ryo=r(oht,"ProphetNetForCausalLM"),oht.forEach(t),tyo=r(Ixe," (ProphetNet model)"),Ixe.forEach(t),ayo=i(W),H1=n(W,"LI",{});var Nxe=s(H1);rme=n(Nxe,"STRONG",{});var rht=s(rme);nyo=r(rht,"qdqbert"),rht.forEach(t),syo=r(Nxe," \u2014 "),fG=n(Nxe,"A",{href:!0});var tht=s(fG);lyo=r(tht,"QDQBertLMHeadModel"),tht.forEach(t),iyo=r(Nxe," (QDQBert model)"),Nxe.forEach(t),dyo=i(W),U1=n(W,"LI",{});var qxe=s(U1);tme=n(qxe,"STRONG",{});var aht=s(tme);cyo=r(aht,"reformer"),aht.forEach(t),fyo=r(qxe," \u2014 "),mG=n(qxe,"A",{href:!0});var nht=s(mG);myo=r(nht,"ReformerModelWithLMHead"),nht.forEach(t),gyo=r(qxe," (Reformer model)"),qxe.forEach(t),hyo=i(W),J1=n(W,"LI",{});var jxe=s(J1);ame=n(jxe,"STRONG",{});var sht=s(ame);pyo=r(sht,"rembert"),sht.forEach(t),uyo=r(jxe," \u2014 "),gG=n(jxe,"A",{href:!0});var lht=s(gG);_yo=r(lht,"RemBertForCausalLM"),lht.forEach(t),byo=r(jxe," (RemBERT model)"),jxe.forEach(t),vyo=i(W),Y1=n(W,"LI",{});var Dxe=s(Y1);nme=n(Dxe,"STRONG",{});var iht=s(nme);Fyo=r(iht,"roberta"),iht.forEach(t),Tyo=r(Dxe," \u2014 "),hG=n(Dxe,"A",{href:!0});var dht=s(hG);Myo=r(dht,"RobertaForCausalLM"),dht.forEach(t),Eyo=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),Cyo=i(W),K1=n(W,"LI",{});var Gxe=s(K1);sme=n(Gxe,"STRONG",{});var cht=s(sme);wyo=r(cht,"roformer"),cht.forEach(t),Ayo=r(Gxe," \u2014 "),pG=n(Gxe,"A",{href:!0});var fht=s(pG);Lyo=r(fht,"RoFormerForCausalLM"),fht.forEach(t),yyo=r(Gxe," (RoFormer model)"),Gxe.forEach(t),xyo=i(W),Z1=n(W,"LI",{});var Oxe=s(Z1);lme=n(Oxe,"STRONG",{});var mht=s(lme);$yo=r(mht,"speech_to_text_2"),mht.forEach(t),kyo=r(Oxe," \u2014 "),uG=n(Oxe,"A",{href:!0});var ght=s(uG);Syo=r(ght,"Speech2Text2ForCausalLM"),ght.forEach(t),Ryo=r(Oxe," (Speech2Text2 model)"),Oxe.forEach(t),Pyo=i(W),e2=n(W,"LI",{});var Vxe=s(e2);ime=n(Vxe,"STRONG",{});var hht=s(ime);Byo=r(hht,"transfo-xl"),hht.forEach(t),Iyo=r(Vxe," \u2014 "),_G=n(Vxe,"A",{href:!0});var pht=s(_G);Nyo=r(pht,"TransfoXLLMHeadModel"),pht.forEach(t),qyo=r(Vxe," (Transformer-XL model)"),Vxe.forEach(t),jyo=i(W),o2=n(W,"LI",{});var Xxe=s(o2);dme=n(Xxe,"STRONG",{});var uht=s(dme);Dyo=r(uht,"trocr"),uht.forEach(t),Gyo=r(Xxe," \u2014 "),bG=n(Xxe,"A",{href:!0});var _ht=s(bG);Oyo=r(_ht,"TrOCRForCausalLM"),_ht.forEach(t),Vyo=r(Xxe," (TrOCR model)"),Xxe.forEach(t),Xyo=i(W),r2=n(W,"LI",{});var zxe=s(r2);cme=n(zxe,"STRONG",{});var bht=s(cme);zyo=r(bht,"xglm"),bht.forEach(t),Wyo=r(zxe," \u2014 "),vG=n(zxe,"A",{href:!0});var vht=s(vG);Qyo=r(vht,"XGLMForCausalLM"),vht.forEach(t),Hyo=r(zxe," (XGLM model)"),zxe.forEach(t),Uyo=i(W),t2=n(W,"LI",{});var Wxe=s(t2);fme=n(Wxe,"STRONG",{});var Fht=s(fme);Jyo=r(Fht,"xlm"),Fht.forEach(t),Yyo=r(Wxe," \u2014 "),FG=n(Wxe,"A",{href:!0});var Tht=s(FG);Kyo=r(Tht,"XLMWithLMHeadModel"),Tht.forEach(t),Zyo=r(Wxe," (XLM model)"),Wxe.forEach(t),e9o=i(W),a2=n(W,"LI",{});var Qxe=s(a2);mme=n(Qxe,"STRONG",{});var Mht=s(mme);o9o=r(Mht,"xlm-prophetnet"),Mht.forEach(t),r9o=r(Qxe," \u2014 "),TG=n(Qxe,"A",{href:!0});var Eht=s(TG);t9o=r(Eht,"XLMProphetNetForCausalLM"),Eht.forEach(t),a9o=r(Qxe," (XLM-ProphetNet model)"),Qxe.forEach(t),n9o=i(W),n2=n(W,"LI",{});var Hxe=s(n2);gme=n(Hxe,"STRONG",{});var Cht=s(gme);s9o=r(Cht,"xlm-roberta"),Cht.forEach(t),l9o=r(Hxe," \u2014 "),MG=n(Hxe,"A",{href:!0});var wht=s(MG);i9o=r(wht,"XLMRobertaForCausalLM"),wht.forEach(t),d9o=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),c9o=i(W),s2=n(W,"LI",{});var Uxe=s(s2);hme=n(Uxe,"STRONG",{});var Aht=s(hme);f9o=r(Aht,"xlm-roberta-xl"),Aht.forEach(t),m9o=r(Uxe," \u2014 "),EG=n(Uxe,"A",{href:!0});var Lht=s(EG);g9o=r(Lht,"XLMRobertaXLForCausalLM"),Lht.forEach(t),h9o=r(Uxe," (XLM-RoBERTa-XL model)"),Uxe.forEach(t),p9o=i(W),l2=n(W,"LI",{});var Jxe=s(l2);pme=n(Jxe,"STRONG",{});var yht=s(pme);u9o=r(yht,"xlnet"),yht.forEach(t),_9o=r(Jxe," \u2014 "),CG=n(Jxe,"A",{href:!0});var xht=s(CG);b9o=r(xht,"XLNetLMHeadModel"),xht.forEach(t),v9o=r(Jxe," (XLNet model)"),Jxe.forEach(t),W.forEach(t),F9o=i(la),i2=n(la,"P",{});var Yxe=s(i2);T9o=r(Yxe,"The model is set in evaluation mode by default using "),ume=n(Yxe,"CODE",{});var $ht=s(ume);M9o=r($ht,"model.eval()"),$ht.forEach(t),E9o=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(Yxe,"CODE",{});var kht=s(_me);C9o=r(kht,"model.train()"),kht.forEach(t),Yxe.forEach(t),w9o=i(la),T(d2.$$.fragment,la),la.forEach(t),Ks.forEach(t),AGe=i(f),zi=n(f,"H2",{class:!0});var SVe=s(zi);c2=n(SVe,"A",{id:!0,class:!0,href:!0});var Sht=s(c2);bme=n(Sht,"SPAN",{});var Rht=s(bme);T(iL.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),A9o=i(SVe),vme=n(SVe,"SPAN",{});var Pht=s(vme);L9o=r(Pht,"AutoModelForMaskedLM"),Pht.forEach(t),SVe.forEach(t),LGe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(dL.$$.fragment,Zs),y9o=i(Zs),Wi=n(Zs,"P",{});var doe=s(Wi);x9o=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wG=n(doe,"A",{href:!0});var Bht=s(wG);$9o=r(Bht,"from_pretrained()"),Bht.forEach(t),k9o=r(doe," class method or the "),AG=n(doe,"A",{href:!0});var Iht=s(AG);S9o=r(Iht,"from_config()"),Iht.forEach(t),R9o=r(doe,` class
method.`),doe.forEach(t),P9o=i(Zs),cL=n(Zs,"P",{});var RVe=s(cL);B9o=r(RVe,"This class cannot be instantiated directly using "),Fme=n(RVe,"CODE",{});var Nht=s(Fme);I9o=r(Nht,"__init__()"),Nht.forEach(t),N9o=r(RVe," (throws an error)."),RVe.forEach(t),q9o=i(Zs),dt=n(Zs,"DIV",{class:!0});var $3=s(dt);T(fL.$$.fragment,$3),j9o=i($3),Tme=n($3,"P",{});var qht=s(Tme);D9o=r(qht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qht.forEach(t),G9o=i($3),Qi=n($3,"P",{});var coe=s(Qi);O9o=r(coe,`Note:
Loading a model from its configuration file does `),Mme=n(coe,"STRONG",{});var jht=s(Mme);V9o=r(jht,"not"),jht.forEach(t),X9o=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(coe,"A",{href:!0});var Dht=s(LG);z9o=r(Dht,"from_pretrained()"),Dht.forEach(t),W9o=r(coe," to load the model weights."),coe.forEach(t),Q9o=i($3),T(f2.$$.fragment,$3),$3.forEach(t),H9o=i(Zs),Ze=n(Zs,"DIV",{class:!0});var ia=s(Ze);T(mL.$$.fragment,ia),U9o=i(ia),Eme=n(ia,"P",{});var Ght=s(Eme);J9o=r(Ght,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ght.forEach(t),Y9o=i(ia),Ia=n(ia,"P",{});var k3=s(Ia);K9o=r(k3,"The model class to instantiate is selected based on the "),Cme=n(k3,"CODE",{});var Oht=s(Cme);Z9o=r(Oht,"model_type"),Oht.forEach(t),exo=r(k3,` property of the config object (either
passed as an argument or loaded from `),wme=n(k3,"CODE",{});var Vht=s(wme);oxo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),rxo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(k3,"CODE",{});var Xht=s(Ame);txo=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),axo=r(k3,":"),k3.forEach(t),nxo=i(ia),Q=n(ia,"UL",{});var U=s(Q);m2=n(U,"LI",{});var Kxe=s(m2);Lme=n(Kxe,"STRONG",{});var zht=s(Lme);sxo=r(zht,"albert"),zht.forEach(t),lxo=r(Kxe," \u2014 "),yG=n(Kxe,"A",{href:!0});var Wht=s(yG);ixo=r(Wht,"AlbertForMaskedLM"),Wht.forEach(t),dxo=r(Kxe," (ALBERT model)"),Kxe.forEach(t),cxo=i(U),g2=n(U,"LI",{});var Zxe=s(g2);yme=n(Zxe,"STRONG",{});var Qht=s(yme);fxo=r(Qht,"bart"),Qht.forEach(t),mxo=r(Zxe," \u2014 "),xG=n(Zxe,"A",{href:!0});var Hht=s(xG);gxo=r(Hht,"BartForConditionalGeneration"),Hht.forEach(t),hxo=r(Zxe," (BART model)"),Zxe.forEach(t),pxo=i(U),h2=n(U,"LI",{});var e$e=s(h2);xme=n(e$e,"STRONG",{});var Uht=s(xme);uxo=r(Uht,"bert"),Uht.forEach(t),_xo=r(e$e," \u2014 "),$G=n(e$e,"A",{href:!0});var Jht=s($G);bxo=r(Jht,"BertForMaskedLM"),Jht.forEach(t),vxo=r(e$e," (BERT model)"),e$e.forEach(t),Fxo=i(U),p2=n(U,"LI",{});var o$e=s(p2);$me=n(o$e,"STRONG",{});var Yht=s($me);Txo=r(Yht,"big_bird"),Yht.forEach(t),Mxo=r(o$e," \u2014 "),kG=n(o$e,"A",{href:!0});var Kht=s(kG);Exo=r(Kht,"BigBirdForMaskedLM"),Kht.forEach(t),Cxo=r(o$e," (BigBird model)"),o$e.forEach(t),wxo=i(U),u2=n(U,"LI",{});var r$e=s(u2);kme=n(r$e,"STRONG",{});var Zht=s(kme);Axo=r(Zht,"camembert"),Zht.forEach(t),Lxo=r(r$e," \u2014 "),SG=n(r$e,"A",{href:!0});var ept=s(SG);yxo=r(ept,"CamembertForMaskedLM"),ept.forEach(t),xxo=r(r$e," (CamemBERT model)"),r$e.forEach(t),$xo=i(U),_2=n(U,"LI",{});var t$e=s(_2);Sme=n(t$e,"STRONG",{});var opt=s(Sme);kxo=r(opt,"convbert"),opt.forEach(t),Sxo=r(t$e," \u2014 "),RG=n(t$e,"A",{href:!0});var rpt=s(RG);Rxo=r(rpt,"ConvBertForMaskedLM"),rpt.forEach(t),Pxo=r(t$e," (ConvBERT model)"),t$e.forEach(t),Bxo=i(U),b2=n(U,"LI",{});var a$e=s(b2);Rme=n(a$e,"STRONG",{});var tpt=s(Rme);Ixo=r(tpt,"data2vec-text"),tpt.forEach(t),Nxo=r(a$e," \u2014 "),PG=n(a$e,"A",{href:!0});var apt=s(PG);qxo=r(apt,"Data2VecTextForMaskedLM"),apt.forEach(t),jxo=r(a$e," (Data2VecText model)"),a$e.forEach(t),Dxo=i(U),v2=n(U,"LI",{});var n$e=s(v2);Pme=n(n$e,"STRONG",{});var npt=s(Pme);Gxo=r(npt,"deberta"),npt.forEach(t),Oxo=r(n$e," \u2014 "),BG=n(n$e,"A",{href:!0});var spt=s(BG);Vxo=r(spt,"DebertaForMaskedLM"),spt.forEach(t),Xxo=r(n$e," (DeBERTa model)"),n$e.forEach(t),zxo=i(U),F2=n(U,"LI",{});var s$e=s(F2);Bme=n(s$e,"STRONG",{});var lpt=s(Bme);Wxo=r(lpt,"deberta-v2"),lpt.forEach(t),Qxo=r(s$e," \u2014 "),IG=n(s$e,"A",{href:!0});var ipt=s(IG);Hxo=r(ipt,"DebertaV2ForMaskedLM"),ipt.forEach(t),Uxo=r(s$e," (DeBERTa-v2 model)"),s$e.forEach(t),Jxo=i(U),T2=n(U,"LI",{});var l$e=s(T2);Ime=n(l$e,"STRONG",{});var dpt=s(Ime);Yxo=r(dpt,"distilbert"),dpt.forEach(t),Kxo=r(l$e," \u2014 "),NG=n(l$e,"A",{href:!0});var cpt=s(NG);Zxo=r(cpt,"DistilBertForMaskedLM"),cpt.forEach(t),e$o=r(l$e," (DistilBERT model)"),l$e.forEach(t),o$o=i(U),M2=n(U,"LI",{});var i$e=s(M2);Nme=n(i$e,"STRONG",{});var fpt=s(Nme);r$o=r(fpt,"electra"),fpt.forEach(t),t$o=r(i$e," \u2014 "),qG=n(i$e,"A",{href:!0});var mpt=s(qG);a$o=r(mpt,"ElectraForMaskedLM"),mpt.forEach(t),n$o=r(i$e," (ELECTRA model)"),i$e.forEach(t),s$o=i(U),E2=n(U,"LI",{});var d$e=s(E2);qme=n(d$e,"STRONG",{});var gpt=s(qme);l$o=r(gpt,"flaubert"),gpt.forEach(t),i$o=r(d$e," \u2014 "),jG=n(d$e,"A",{href:!0});var hpt=s(jG);d$o=r(hpt,"FlaubertWithLMHeadModel"),hpt.forEach(t),c$o=r(d$e," (FlauBERT model)"),d$e.forEach(t),f$o=i(U),C2=n(U,"LI",{});var c$e=s(C2);jme=n(c$e,"STRONG",{});var ppt=s(jme);m$o=r(ppt,"fnet"),ppt.forEach(t),g$o=r(c$e," \u2014 "),DG=n(c$e,"A",{href:!0});var upt=s(DG);h$o=r(upt,"FNetForMaskedLM"),upt.forEach(t),p$o=r(c$e," (FNet model)"),c$e.forEach(t),u$o=i(U),w2=n(U,"LI",{});var f$e=s(w2);Dme=n(f$e,"STRONG",{});var _pt=s(Dme);_$o=r(_pt,"funnel"),_pt.forEach(t),b$o=r(f$e," \u2014 "),GG=n(f$e,"A",{href:!0});var bpt=s(GG);v$o=r(bpt,"FunnelForMaskedLM"),bpt.forEach(t),F$o=r(f$e," (Funnel Transformer model)"),f$e.forEach(t),T$o=i(U),A2=n(U,"LI",{});var m$e=s(A2);Gme=n(m$e,"STRONG",{});var vpt=s(Gme);M$o=r(vpt,"ibert"),vpt.forEach(t),E$o=r(m$e," \u2014 "),OG=n(m$e,"A",{href:!0});var Fpt=s(OG);C$o=r(Fpt,"IBertForMaskedLM"),Fpt.forEach(t),w$o=r(m$e," (I-BERT model)"),m$e.forEach(t),A$o=i(U),L2=n(U,"LI",{});var g$e=s(L2);Ome=n(g$e,"STRONG",{});var Tpt=s(Ome);L$o=r(Tpt,"layoutlm"),Tpt.forEach(t),y$o=r(g$e," \u2014 "),VG=n(g$e,"A",{href:!0});var Mpt=s(VG);x$o=r(Mpt,"LayoutLMForMaskedLM"),Mpt.forEach(t),$$o=r(g$e," (LayoutLM model)"),g$e.forEach(t),k$o=i(U),y2=n(U,"LI",{});var h$e=s(y2);Vme=n(h$e,"STRONG",{});var Ept=s(Vme);S$o=r(Ept,"longformer"),Ept.forEach(t),R$o=r(h$e," \u2014 "),XG=n(h$e,"A",{href:!0});var Cpt=s(XG);P$o=r(Cpt,"LongformerForMaskedLM"),Cpt.forEach(t),B$o=r(h$e," (Longformer model)"),h$e.forEach(t),I$o=i(U),x2=n(U,"LI",{});var p$e=s(x2);Xme=n(p$e,"STRONG",{});var wpt=s(Xme);N$o=r(wpt,"luke"),wpt.forEach(t),q$o=r(p$e," \u2014 "),zG=n(p$e,"A",{href:!0});var Apt=s(zG);j$o=r(Apt,"LukeForMaskedLM"),Apt.forEach(t),D$o=r(p$e," (LUKE model)"),p$e.forEach(t),G$o=i(U),$2=n(U,"LI",{});var u$e=s($2);zme=n(u$e,"STRONG",{});var Lpt=s(zme);O$o=r(Lpt,"mbart"),Lpt.forEach(t),V$o=r(u$e," \u2014 "),WG=n(u$e,"A",{href:!0});var ypt=s(WG);X$o=r(ypt,"MBartForConditionalGeneration"),ypt.forEach(t),z$o=r(u$e," (mBART model)"),u$e.forEach(t),W$o=i(U),k2=n(U,"LI",{});var _$e=s(k2);Wme=n(_$e,"STRONG",{});var xpt=s(Wme);Q$o=r(xpt,"megatron-bert"),xpt.forEach(t),H$o=r(_$e," \u2014 "),QG=n(_$e,"A",{href:!0});var $pt=s(QG);U$o=r($pt,"MegatronBertForMaskedLM"),$pt.forEach(t),J$o=r(_$e," (Megatron-BERT model)"),_$e.forEach(t),Y$o=i(U),S2=n(U,"LI",{});var b$e=s(S2);Qme=n(b$e,"STRONG",{});var kpt=s(Qme);K$o=r(kpt,"mobilebert"),kpt.forEach(t),Z$o=r(b$e," \u2014 "),HG=n(b$e,"A",{href:!0});var Spt=s(HG);eko=r(Spt,"MobileBertForMaskedLM"),Spt.forEach(t),oko=r(b$e," (MobileBERT model)"),b$e.forEach(t),rko=i(U),R2=n(U,"LI",{});var v$e=s(R2);Hme=n(v$e,"STRONG",{});var Rpt=s(Hme);tko=r(Rpt,"mpnet"),Rpt.forEach(t),ako=r(v$e," \u2014 "),UG=n(v$e,"A",{href:!0});var Ppt=s(UG);nko=r(Ppt,"MPNetForMaskedLM"),Ppt.forEach(t),sko=r(v$e," (MPNet model)"),v$e.forEach(t),lko=i(U),P2=n(U,"LI",{});var F$e=s(P2);Ume=n(F$e,"STRONG",{});var Bpt=s(Ume);iko=r(Bpt,"nystromformer"),Bpt.forEach(t),dko=r(F$e," \u2014 "),JG=n(F$e,"A",{href:!0});var Ipt=s(JG);cko=r(Ipt,"NystromformerForMaskedLM"),Ipt.forEach(t),fko=r(F$e," (Nystr\xF6mformer model)"),F$e.forEach(t),mko=i(U),B2=n(U,"LI",{});var T$e=s(B2);Jme=n(T$e,"STRONG",{});var Npt=s(Jme);gko=r(Npt,"perceiver"),Npt.forEach(t),hko=r(T$e," \u2014 "),YG=n(T$e,"A",{href:!0});var qpt=s(YG);pko=r(qpt,"PerceiverForMaskedLM"),qpt.forEach(t),uko=r(T$e," (Perceiver model)"),T$e.forEach(t),_ko=i(U),I2=n(U,"LI",{});var M$e=s(I2);Yme=n(M$e,"STRONG",{});var jpt=s(Yme);bko=r(jpt,"qdqbert"),jpt.forEach(t),vko=r(M$e," \u2014 "),KG=n(M$e,"A",{href:!0});var Dpt=s(KG);Fko=r(Dpt,"QDQBertForMaskedLM"),Dpt.forEach(t),Tko=r(M$e," (QDQBert model)"),M$e.forEach(t),Mko=i(U),N2=n(U,"LI",{});var E$e=s(N2);Kme=n(E$e,"STRONG",{});var Gpt=s(Kme);Eko=r(Gpt,"reformer"),Gpt.forEach(t),Cko=r(E$e," \u2014 "),ZG=n(E$e,"A",{href:!0});var Opt=s(ZG);wko=r(Opt,"ReformerForMaskedLM"),Opt.forEach(t),Ako=r(E$e," (Reformer model)"),E$e.forEach(t),Lko=i(U),q2=n(U,"LI",{});var C$e=s(q2);Zme=n(C$e,"STRONG",{});var Vpt=s(Zme);yko=r(Vpt,"rembert"),Vpt.forEach(t),xko=r(C$e," \u2014 "),eO=n(C$e,"A",{href:!0});var Xpt=s(eO);$ko=r(Xpt,"RemBertForMaskedLM"),Xpt.forEach(t),kko=r(C$e," (RemBERT model)"),C$e.forEach(t),Sko=i(U),j2=n(U,"LI",{});var w$e=s(j2);ege=n(w$e,"STRONG",{});var zpt=s(ege);Rko=r(zpt,"roberta"),zpt.forEach(t),Pko=r(w$e," \u2014 "),oO=n(w$e,"A",{href:!0});var Wpt=s(oO);Bko=r(Wpt,"RobertaForMaskedLM"),Wpt.forEach(t),Iko=r(w$e," (RoBERTa model)"),w$e.forEach(t),Nko=i(U),D2=n(U,"LI",{});var A$e=s(D2);oge=n(A$e,"STRONG",{});var Qpt=s(oge);qko=r(Qpt,"roformer"),Qpt.forEach(t),jko=r(A$e," \u2014 "),rO=n(A$e,"A",{href:!0});var Hpt=s(rO);Dko=r(Hpt,"RoFormerForMaskedLM"),Hpt.forEach(t),Gko=r(A$e," (RoFormer model)"),A$e.forEach(t),Oko=i(U),G2=n(U,"LI",{});var L$e=s(G2);rge=n(L$e,"STRONG",{});var Upt=s(rge);Vko=r(Upt,"squeezebert"),Upt.forEach(t),Xko=r(L$e," \u2014 "),tO=n(L$e,"A",{href:!0});var Jpt=s(tO);zko=r(Jpt,"SqueezeBertForMaskedLM"),Jpt.forEach(t),Wko=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),Qko=i(U),O2=n(U,"LI",{});var y$e=s(O2);tge=n(y$e,"STRONG",{});var Ypt=s(tge);Hko=r(Ypt,"tapas"),Ypt.forEach(t),Uko=r(y$e," \u2014 "),aO=n(y$e,"A",{href:!0});var Kpt=s(aO);Jko=r(Kpt,"TapasForMaskedLM"),Kpt.forEach(t),Yko=r(y$e," (TAPAS model)"),y$e.forEach(t),Kko=i(U),V2=n(U,"LI",{});var x$e=s(V2);age=n(x$e,"STRONG",{});var Zpt=s(age);Zko=r(Zpt,"wav2vec2"),Zpt.forEach(t),eSo=r(x$e," \u2014 "),nge=n(x$e,"CODE",{});var eut=s(nge);oSo=r(eut,"Wav2Vec2ForMaskedLM"),eut.forEach(t),rSo=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),tSo=i(U),X2=n(U,"LI",{});var $$e=s(X2);sge=n($$e,"STRONG",{});var out=s(sge);aSo=r(out,"xlm"),out.forEach(t),nSo=r($$e," \u2014 "),nO=n($$e,"A",{href:!0});var rut=s(nO);sSo=r(rut,"XLMWithLMHeadModel"),rut.forEach(t),lSo=r($$e," (XLM model)"),$$e.forEach(t),iSo=i(U),z2=n(U,"LI",{});var k$e=s(z2);lge=n(k$e,"STRONG",{});var tut=s(lge);dSo=r(tut,"xlm-roberta"),tut.forEach(t),cSo=r(k$e," \u2014 "),sO=n(k$e,"A",{href:!0});var aut=s(sO);fSo=r(aut,"XLMRobertaForMaskedLM"),aut.forEach(t),mSo=r(k$e," (XLM-RoBERTa model)"),k$e.forEach(t),gSo=i(U),W2=n(U,"LI",{});var S$e=s(W2);ige=n(S$e,"STRONG",{});var nut=s(ige);hSo=r(nut,"xlm-roberta-xl"),nut.forEach(t),pSo=r(S$e," \u2014 "),lO=n(S$e,"A",{href:!0});var sut=s(lO);uSo=r(sut,"XLMRobertaXLForMaskedLM"),sut.forEach(t),_So=r(S$e," (XLM-RoBERTa-XL model)"),S$e.forEach(t),bSo=i(U),Q2=n(U,"LI",{});var R$e=s(Q2);dge=n(R$e,"STRONG",{});var lut=s(dge);vSo=r(lut,"yoso"),lut.forEach(t),FSo=r(R$e," \u2014 "),iO=n(R$e,"A",{href:!0});var iut=s(iO);TSo=r(iut,"YosoForMaskedLM"),iut.forEach(t),MSo=r(R$e," (YOSO model)"),R$e.forEach(t),U.forEach(t),ESo=i(ia),H2=n(ia,"P",{});var P$e=s(H2);CSo=r(P$e,"The model is set in evaluation mode by default using "),cge=n(P$e,"CODE",{});var dut=s(cge);wSo=r(dut,"model.eval()"),dut.forEach(t),ASo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(P$e,"CODE",{});var cut=s(fge);LSo=r(cut,"model.train()"),cut.forEach(t),P$e.forEach(t),ySo=i(ia),T(U2.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),yGe=i(f),Hi=n(f,"H2",{class:!0});var PVe=s(Hi);J2=n(PVe,"A",{id:!0,class:!0,href:!0});var fut=s(J2);mge=n(fut,"SPAN",{});var mut=s(mge);T(gL.$$.fragment,mut),mut.forEach(t),fut.forEach(t),xSo=i(PVe),gge=n(PVe,"SPAN",{});var gut=s(gge);$So=r(gut,"AutoModelForSeq2SeqLM"),gut.forEach(t),PVe.forEach(t),xGe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(hL.$$.fragment,el),kSo=i(el),Ui=n(el,"P",{});var foe=s(Ui);SSo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dO=n(foe,"A",{href:!0});var hut=s(dO);RSo=r(hut,"from_pretrained()"),hut.forEach(t),PSo=r(foe," class method or the "),cO=n(foe,"A",{href:!0});var put=s(cO);BSo=r(put,"from_config()"),put.forEach(t),ISo=r(foe,` class
method.`),foe.forEach(t),NSo=i(el),pL=n(el,"P",{});var BVe=s(pL);qSo=r(BVe,"This class cannot be instantiated directly using "),hge=n(BVe,"CODE",{});var uut=s(hge);jSo=r(uut,"__init__()"),uut.forEach(t),DSo=r(BVe," (throws an error)."),BVe.forEach(t),GSo=i(el),ct=n(el,"DIV",{class:!0});var S3=s(ct);T(uL.$$.fragment,S3),OSo=i(S3),pge=n(S3,"P",{});var _ut=s(pge);VSo=r(_ut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_ut.forEach(t),XSo=i(S3),Ji=n(S3,"P",{});var moe=s(Ji);zSo=r(moe,`Note:
Loading a model from its configuration file does `),uge=n(moe,"STRONG",{});var but=s(uge);WSo=r(but,"not"),but.forEach(t),QSo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(moe,"A",{href:!0});var vut=s(fO);HSo=r(vut,"from_pretrained()"),vut.forEach(t),USo=r(moe," to load the model weights."),moe.forEach(t),JSo=i(S3),T(Y2.$$.fragment,S3),S3.forEach(t),YSo=i(el),eo=n(el,"DIV",{class:!0});var da=s(eo);T(_L.$$.fragment,da),KSo=i(da),_ge=n(da,"P",{});var Fut=s(_ge);ZSo=r(Fut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Fut.forEach(t),eRo=i(da),Na=n(da,"P",{});var R3=s(Na);oRo=r(R3,"The model class to instantiate is selected based on the "),bge=n(R3,"CODE",{});var Tut=s(bge);rRo=r(Tut,"model_type"),Tut.forEach(t),tRo=r(R3,` property of the config object (either
passed as an argument or loaded from `),vge=n(R3,"CODE",{});var Mut=s(vge);aRo=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),nRo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(R3,"CODE",{});var Eut=s(Fge);sRo=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),lRo=r(R3,":"),R3.forEach(t),iRo=i(da),pe=n(da,"UL",{});var be=s(pe);K2=n(be,"LI",{});var B$e=s(K2);Tge=n(B$e,"STRONG",{});var Cut=s(Tge);dRo=r(Cut,"bart"),Cut.forEach(t),cRo=r(B$e," \u2014 "),mO=n(B$e,"A",{href:!0});var wut=s(mO);fRo=r(wut,"BartForConditionalGeneration"),wut.forEach(t),mRo=r(B$e," (BART model)"),B$e.forEach(t),gRo=i(be),Z2=n(be,"LI",{});var I$e=s(Z2);Mge=n(I$e,"STRONG",{});var Aut=s(Mge);hRo=r(Aut,"bigbird_pegasus"),Aut.forEach(t),pRo=r(I$e," \u2014 "),gO=n(I$e,"A",{href:!0});var Lut=s(gO);uRo=r(Lut,"BigBirdPegasusForConditionalGeneration"),Lut.forEach(t),_Ro=r(I$e," (BigBird-Pegasus model)"),I$e.forEach(t),bRo=i(be),eb=n(be,"LI",{});var N$e=s(eb);Ege=n(N$e,"STRONG",{});var yut=s(Ege);vRo=r(yut,"blenderbot"),yut.forEach(t),FRo=r(N$e," \u2014 "),hO=n(N$e,"A",{href:!0});var xut=s(hO);TRo=r(xut,"BlenderbotForConditionalGeneration"),xut.forEach(t),MRo=r(N$e," (Blenderbot model)"),N$e.forEach(t),ERo=i(be),ob=n(be,"LI",{});var q$e=s(ob);Cge=n(q$e,"STRONG",{});var $ut=s(Cge);CRo=r($ut,"blenderbot-small"),$ut.forEach(t),wRo=r(q$e," \u2014 "),pO=n(q$e,"A",{href:!0});var kut=s(pO);ARo=r(kut,"BlenderbotSmallForConditionalGeneration"),kut.forEach(t),LRo=r(q$e," (BlenderbotSmall model)"),q$e.forEach(t),yRo=i(be),rb=n(be,"LI",{});var j$e=s(rb);wge=n(j$e,"STRONG",{});var Sut=s(wge);xRo=r(Sut,"encoder-decoder"),Sut.forEach(t),$Ro=r(j$e," \u2014 "),uO=n(j$e,"A",{href:!0});var Rut=s(uO);kRo=r(Rut,"EncoderDecoderModel"),Rut.forEach(t),SRo=r(j$e," (Encoder decoder model)"),j$e.forEach(t),RRo=i(be),tb=n(be,"LI",{});var D$e=s(tb);Age=n(D$e,"STRONG",{});var Put=s(Age);PRo=r(Put,"fsmt"),Put.forEach(t),BRo=r(D$e," \u2014 "),_O=n(D$e,"A",{href:!0});var But=s(_O);IRo=r(But,"FSMTForConditionalGeneration"),But.forEach(t),NRo=r(D$e," (FairSeq Machine-Translation model)"),D$e.forEach(t),qRo=i(be),ab=n(be,"LI",{});var G$e=s(ab);Lge=n(G$e,"STRONG",{});var Iut=s(Lge);jRo=r(Iut,"led"),Iut.forEach(t),DRo=r(G$e," \u2014 "),bO=n(G$e,"A",{href:!0});var Nut=s(bO);GRo=r(Nut,"LEDForConditionalGeneration"),Nut.forEach(t),ORo=r(G$e," (LED model)"),G$e.forEach(t),VRo=i(be),nb=n(be,"LI",{});var O$e=s(nb);yge=n(O$e,"STRONG",{});var qut=s(yge);XRo=r(qut,"longt5"),qut.forEach(t),zRo=r(O$e," \u2014 "),vO=n(O$e,"A",{href:!0});var jut=s(vO);WRo=r(jut,"LongT5ForConditionalGeneration"),jut.forEach(t),QRo=r(O$e," (LongT5 model)"),O$e.forEach(t),HRo=i(be),sb=n(be,"LI",{});var V$e=s(sb);xge=n(V$e,"STRONG",{});var Dut=s(xge);URo=r(Dut,"m2m_100"),Dut.forEach(t),JRo=r(V$e," \u2014 "),FO=n(V$e,"A",{href:!0});var Gut=s(FO);YRo=r(Gut,"M2M100ForConditionalGeneration"),Gut.forEach(t),KRo=r(V$e," (M2M100 model)"),V$e.forEach(t),ZRo=i(be),lb=n(be,"LI",{});var X$e=s(lb);$ge=n(X$e,"STRONG",{});var Out=s($ge);ePo=r(Out,"marian"),Out.forEach(t),oPo=r(X$e," \u2014 "),TO=n(X$e,"A",{href:!0});var Vut=s(TO);rPo=r(Vut,"MarianMTModel"),Vut.forEach(t),tPo=r(X$e," (Marian model)"),X$e.forEach(t),aPo=i(be),ib=n(be,"LI",{});var z$e=s(ib);kge=n(z$e,"STRONG",{});var Xut=s(kge);nPo=r(Xut,"mbart"),Xut.forEach(t),sPo=r(z$e," \u2014 "),MO=n(z$e,"A",{href:!0});var zut=s(MO);lPo=r(zut,"MBartForConditionalGeneration"),zut.forEach(t),iPo=r(z$e," (mBART model)"),z$e.forEach(t),dPo=i(be),db=n(be,"LI",{});var W$e=s(db);Sge=n(W$e,"STRONG",{});var Wut=s(Sge);cPo=r(Wut,"mt5"),Wut.forEach(t),fPo=r(W$e," \u2014 "),EO=n(W$e,"A",{href:!0});var Qut=s(EO);mPo=r(Qut,"MT5ForConditionalGeneration"),Qut.forEach(t),gPo=r(W$e," (MT5 model)"),W$e.forEach(t),hPo=i(be),cb=n(be,"LI",{});var Q$e=s(cb);Rge=n(Q$e,"STRONG",{});var Hut=s(Rge);pPo=r(Hut,"pegasus"),Hut.forEach(t),uPo=r(Q$e," \u2014 "),CO=n(Q$e,"A",{href:!0});var Uut=s(CO);_Po=r(Uut,"PegasusForConditionalGeneration"),Uut.forEach(t),bPo=r(Q$e," (Pegasus model)"),Q$e.forEach(t),vPo=i(be),fb=n(be,"LI",{});var H$e=s(fb);Pge=n(H$e,"STRONG",{});var Jut=s(Pge);FPo=r(Jut,"plbart"),Jut.forEach(t),TPo=r(H$e," \u2014 "),wO=n(H$e,"A",{href:!0});var Yut=s(wO);MPo=r(Yut,"PLBartForConditionalGeneration"),Yut.forEach(t),EPo=r(H$e," (PLBart model)"),H$e.forEach(t),CPo=i(be),mb=n(be,"LI",{});var U$e=s(mb);Bge=n(U$e,"STRONG",{});var Kut=s(Bge);wPo=r(Kut,"prophetnet"),Kut.forEach(t),APo=r(U$e," \u2014 "),AO=n(U$e,"A",{href:!0});var Zut=s(AO);LPo=r(Zut,"ProphetNetForConditionalGeneration"),Zut.forEach(t),yPo=r(U$e," (ProphetNet model)"),U$e.forEach(t),xPo=i(be),gb=n(be,"LI",{});var J$e=s(gb);Ige=n(J$e,"STRONG",{});var e_t=s(Ige);$Po=r(e_t,"t5"),e_t.forEach(t),kPo=r(J$e," \u2014 "),LO=n(J$e,"A",{href:!0});var o_t=s(LO);SPo=r(o_t,"T5ForConditionalGeneration"),o_t.forEach(t),RPo=r(J$e," (T5 model)"),J$e.forEach(t),PPo=i(be),hb=n(be,"LI",{});var Y$e=s(hb);Nge=n(Y$e,"STRONG",{});var r_t=s(Nge);BPo=r(r_t,"xlm-prophetnet"),r_t.forEach(t),IPo=r(Y$e," \u2014 "),yO=n(Y$e,"A",{href:!0});var t_t=s(yO);NPo=r(t_t,"XLMProphetNetForConditionalGeneration"),t_t.forEach(t),qPo=r(Y$e," (XLM-ProphetNet model)"),Y$e.forEach(t),be.forEach(t),jPo=i(da),pb=n(da,"P",{});var K$e=s(pb);DPo=r(K$e,"The model is set in evaluation mode by default using "),qge=n(K$e,"CODE",{});var a_t=s(qge);GPo=r(a_t,"model.eval()"),a_t.forEach(t),OPo=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(K$e,"CODE",{});var n_t=s(jge);VPo=r(n_t,"model.train()"),n_t.forEach(t),K$e.forEach(t),XPo=i(da),T(ub.$$.fragment,da),da.forEach(t),el.forEach(t),$Ge=i(f),Yi=n(f,"H2",{class:!0});var IVe=s(Yi);_b=n(IVe,"A",{id:!0,class:!0,href:!0});var s_t=s(_b);Dge=n(s_t,"SPAN",{});var l_t=s(Dge);T(bL.$$.fragment,l_t),l_t.forEach(t),s_t.forEach(t),zPo=i(IVe),Gge=n(IVe,"SPAN",{});var i_t=s(Gge);WPo=r(i_t,"AutoModelForSequenceClassification"),i_t.forEach(t),IVe.forEach(t),kGe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(vL.$$.fragment,ol),QPo=i(ol),Ki=n(ol,"P",{});var goe=s(Ki);HPo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xO=n(goe,"A",{href:!0});var d_t=s(xO);UPo=r(d_t,"from_pretrained()"),d_t.forEach(t),JPo=r(goe," class method or the "),$O=n(goe,"A",{href:!0});var c_t=s($O);YPo=r(c_t,"from_config()"),c_t.forEach(t),KPo=r(goe,` class
method.`),goe.forEach(t),ZPo=i(ol),FL=n(ol,"P",{});var NVe=s(FL);eBo=r(NVe,"This class cannot be instantiated directly using "),Oge=n(NVe,"CODE",{});var f_t=s(Oge);oBo=r(f_t,"__init__()"),f_t.forEach(t),rBo=r(NVe," (throws an error)."),NVe.forEach(t),tBo=i(ol),ft=n(ol,"DIV",{class:!0});var P3=s(ft);T(TL.$$.fragment,P3),aBo=i(P3),Vge=n(P3,"P",{});var m_t=s(Vge);nBo=r(m_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m_t.forEach(t),sBo=i(P3),Zi=n(P3,"P",{});var hoe=s(Zi);lBo=r(hoe,`Note:
Loading a model from its configuration file does `),Xge=n(hoe,"STRONG",{});var g_t=s(Xge);iBo=r(g_t,"not"),g_t.forEach(t),dBo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=n(hoe,"A",{href:!0});var h_t=s(kO);cBo=r(h_t,"from_pretrained()"),h_t.forEach(t),fBo=r(hoe," to load the model weights."),hoe.forEach(t),mBo=i(P3),T(bb.$$.fragment,P3),P3.forEach(t),gBo=i(ol),oo=n(ol,"DIV",{class:!0});var ca=s(oo);T(ML.$$.fragment,ca),hBo=i(ca),zge=n(ca,"P",{});var p_t=s(zge);pBo=r(p_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p_t.forEach(t),uBo=i(ca),qa=n(ca,"P",{});var B3=s(qa);_Bo=r(B3,"The model class to instantiate is selected based on the "),Wge=n(B3,"CODE",{});var u_t=s(Wge);bBo=r(u_t,"model_type"),u_t.forEach(t),vBo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Qge=n(B3,"CODE",{});var __t=s(Qge);FBo=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),TBo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=n(B3,"CODE",{});var b_t=s(Hge);MBo=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),EBo=r(B3,":"),B3.forEach(t),CBo=i(ca),N=n(ca,"UL",{});var j=s(N);vb=n(j,"LI",{});var Z$e=s(vb);Uge=n(Z$e,"STRONG",{});var v_t=s(Uge);wBo=r(v_t,"albert"),v_t.forEach(t),ABo=r(Z$e," \u2014 "),SO=n(Z$e,"A",{href:!0});var F_t=s(SO);LBo=r(F_t,"AlbertForSequenceClassification"),F_t.forEach(t),yBo=r(Z$e," (ALBERT model)"),Z$e.forEach(t),xBo=i(j),Fb=n(j,"LI",{});var eke=s(Fb);Jge=n(eke,"STRONG",{});var T_t=s(Jge);$Bo=r(T_t,"bart"),T_t.forEach(t),kBo=r(eke," \u2014 "),RO=n(eke,"A",{href:!0});var M_t=s(RO);SBo=r(M_t,"BartForSequenceClassification"),M_t.forEach(t),RBo=r(eke," (BART model)"),eke.forEach(t),PBo=i(j),Tb=n(j,"LI",{});var oke=s(Tb);Yge=n(oke,"STRONG",{});var E_t=s(Yge);BBo=r(E_t,"bert"),E_t.forEach(t),IBo=r(oke," \u2014 "),PO=n(oke,"A",{href:!0});var C_t=s(PO);NBo=r(C_t,"BertForSequenceClassification"),C_t.forEach(t),qBo=r(oke," (BERT model)"),oke.forEach(t),jBo=i(j),Mb=n(j,"LI",{});var rke=s(Mb);Kge=n(rke,"STRONG",{});var w_t=s(Kge);DBo=r(w_t,"big_bird"),w_t.forEach(t),GBo=r(rke," \u2014 "),BO=n(rke,"A",{href:!0});var A_t=s(BO);OBo=r(A_t,"BigBirdForSequenceClassification"),A_t.forEach(t),VBo=r(rke," (BigBird model)"),rke.forEach(t),XBo=i(j),Eb=n(j,"LI",{});var tke=s(Eb);Zge=n(tke,"STRONG",{});var L_t=s(Zge);zBo=r(L_t,"bigbird_pegasus"),L_t.forEach(t),WBo=r(tke," \u2014 "),IO=n(tke,"A",{href:!0});var y_t=s(IO);QBo=r(y_t,"BigBirdPegasusForSequenceClassification"),y_t.forEach(t),HBo=r(tke," (BigBird-Pegasus model)"),tke.forEach(t),UBo=i(j),Cb=n(j,"LI",{});var ake=s(Cb);ehe=n(ake,"STRONG",{});var x_t=s(ehe);JBo=r(x_t,"bloom"),x_t.forEach(t),YBo=r(ake," \u2014 "),NO=n(ake,"A",{href:!0});var $_t=s(NO);KBo=r($_t,"BloomForSequenceClassification"),$_t.forEach(t),ZBo=r(ake," (BLOOM model)"),ake.forEach(t),eIo=i(j),wb=n(j,"LI",{});var nke=s(wb);ohe=n(nke,"STRONG",{});var k_t=s(ohe);oIo=r(k_t,"camembert"),k_t.forEach(t),rIo=r(nke," \u2014 "),qO=n(nke,"A",{href:!0});var S_t=s(qO);tIo=r(S_t,"CamembertForSequenceClassification"),S_t.forEach(t),aIo=r(nke," (CamemBERT model)"),nke.forEach(t),nIo=i(j),Ab=n(j,"LI",{});var ske=s(Ab);rhe=n(ske,"STRONG",{});var R_t=s(rhe);sIo=r(R_t,"canine"),R_t.forEach(t),lIo=r(ske," \u2014 "),jO=n(ske,"A",{href:!0});var P_t=s(jO);iIo=r(P_t,"CanineForSequenceClassification"),P_t.forEach(t),dIo=r(ske," (CANINE model)"),ske.forEach(t),cIo=i(j),Lb=n(j,"LI",{});var lke=s(Lb);the=n(lke,"STRONG",{});var B_t=s(the);fIo=r(B_t,"convbert"),B_t.forEach(t),mIo=r(lke," \u2014 "),DO=n(lke,"A",{href:!0});var I_t=s(DO);gIo=r(I_t,"ConvBertForSequenceClassification"),I_t.forEach(t),hIo=r(lke," (ConvBERT model)"),lke.forEach(t),pIo=i(j),yb=n(j,"LI",{});var ike=s(yb);ahe=n(ike,"STRONG",{});var N_t=s(ahe);uIo=r(N_t,"ctrl"),N_t.forEach(t),_Io=r(ike," \u2014 "),GO=n(ike,"A",{href:!0});var q_t=s(GO);bIo=r(q_t,"CTRLForSequenceClassification"),q_t.forEach(t),vIo=r(ike," (CTRL model)"),ike.forEach(t),FIo=i(j),xb=n(j,"LI",{});var dke=s(xb);nhe=n(dke,"STRONG",{});var j_t=s(nhe);TIo=r(j_t,"data2vec-text"),j_t.forEach(t),MIo=r(dke," \u2014 "),OO=n(dke,"A",{href:!0});var D_t=s(OO);EIo=r(D_t,"Data2VecTextForSequenceClassification"),D_t.forEach(t),CIo=r(dke," (Data2VecText model)"),dke.forEach(t),wIo=i(j),$b=n(j,"LI",{});var cke=s($b);she=n(cke,"STRONG",{});var G_t=s(she);AIo=r(G_t,"deberta"),G_t.forEach(t),LIo=r(cke," \u2014 "),VO=n(cke,"A",{href:!0});var O_t=s(VO);yIo=r(O_t,"DebertaForSequenceClassification"),O_t.forEach(t),xIo=r(cke," (DeBERTa model)"),cke.forEach(t),$Io=i(j),kb=n(j,"LI",{});var fke=s(kb);lhe=n(fke,"STRONG",{});var V_t=s(lhe);kIo=r(V_t,"deberta-v2"),V_t.forEach(t),SIo=r(fke," \u2014 "),XO=n(fke,"A",{href:!0});var X_t=s(XO);RIo=r(X_t,"DebertaV2ForSequenceClassification"),X_t.forEach(t),PIo=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),BIo=i(j),Sb=n(j,"LI",{});var mke=s(Sb);ihe=n(mke,"STRONG",{});var z_t=s(ihe);IIo=r(z_t,"distilbert"),z_t.forEach(t),NIo=r(mke," \u2014 "),zO=n(mke,"A",{href:!0});var W_t=s(zO);qIo=r(W_t,"DistilBertForSequenceClassification"),W_t.forEach(t),jIo=r(mke," (DistilBERT model)"),mke.forEach(t),DIo=i(j),Rb=n(j,"LI",{});var gke=s(Rb);dhe=n(gke,"STRONG",{});var Q_t=s(dhe);GIo=r(Q_t,"electra"),Q_t.forEach(t),OIo=r(gke," \u2014 "),WO=n(gke,"A",{href:!0});var H_t=s(WO);VIo=r(H_t,"ElectraForSequenceClassification"),H_t.forEach(t),XIo=r(gke," (ELECTRA model)"),gke.forEach(t),zIo=i(j),Pb=n(j,"LI",{});var hke=s(Pb);che=n(hke,"STRONG",{});var U_t=s(che);WIo=r(U_t,"flaubert"),U_t.forEach(t),QIo=r(hke," \u2014 "),QO=n(hke,"A",{href:!0});var J_t=s(QO);HIo=r(J_t,"FlaubertForSequenceClassification"),J_t.forEach(t),UIo=r(hke," (FlauBERT model)"),hke.forEach(t),JIo=i(j),Bb=n(j,"LI",{});var pke=s(Bb);fhe=n(pke,"STRONG",{});var Y_t=s(fhe);YIo=r(Y_t,"fnet"),Y_t.forEach(t),KIo=r(pke," \u2014 "),HO=n(pke,"A",{href:!0});var K_t=s(HO);ZIo=r(K_t,"FNetForSequenceClassification"),K_t.forEach(t),eNo=r(pke," (FNet model)"),pke.forEach(t),oNo=i(j),Ib=n(j,"LI",{});var uke=s(Ib);mhe=n(uke,"STRONG",{});var Z_t=s(mhe);rNo=r(Z_t,"funnel"),Z_t.forEach(t),tNo=r(uke," \u2014 "),UO=n(uke,"A",{href:!0});var e1t=s(UO);aNo=r(e1t,"FunnelForSequenceClassification"),e1t.forEach(t),nNo=r(uke," (Funnel Transformer model)"),uke.forEach(t),sNo=i(j),Nb=n(j,"LI",{});var _ke=s(Nb);ghe=n(_ke,"STRONG",{});var o1t=s(ghe);lNo=r(o1t,"gpt2"),o1t.forEach(t),iNo=r(_ke," \u2014 "),JO=n(_ke,"A",{href:!0});var r1t=s(JO);dNo=r(r1t,"GPT2ForSequenceClassification"),r1t.forEach(t),cNo=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),fNo=i(j),qb=n(j,"LI",{});var bke=s(qb);hhe=n(bke,"STRONG",{});var t1t=s(hhe);mNo=r(t1t,"gpt_neo"),t1t.forEach(t),gNo=r(bke," \u2014 "),YO=n(bke,"A",{href:!0});var a1t=s(YO);hNo=r(a1t,"GPTNeoForSequenceClassification"),a1t.forEach(t),pNo=r(bke," (GPT Neo model)"),bke.forEach(t),uNo=i(j),jb=n(j,"LI",{});var vke=s(jb);phe=n(vke,"STRONG",{});var n1t=s(phe);_No=r(n1t,"gptj"),n1t.forEach(t),bNo=r(vke," \u2014 "),KO=n(vke,"A",{href:!0});var s1t=s(KO);vNo=r(s1t,"GPTJForSequenceClassification"),s1t.forEach(t),FNo=r(vke," (GPT-J model)"),vke.forEach(t),TNo=i(j),Db=n(j,"LI",{});var Fke=s(Db);uhe=n(Fke,"STRONG",{});var l1t=s(uhe);MNo=r(l1t,"ibert"),l1t.forEach(t),ENo=r(Fke," \u2014 "),ZO=n(Fke,"A",{href:!0});var i1t=s(ZO);CNo=r(i1t,"IBertForSequenceClassification"),i1t.forEach(t),wNo=r(Fke," (I-BERT model)"),Fke.forEach(t),ANo=i(j),Gb=n(j,"LI",{});var Tke=s(Gb);_he=n(Tke,"STRONG",{});var d1t=s(_he);LNo=r(d1t,"layoutlm"),d1t.forEach(t),yNo=r(Tke," \u2014 "),eV=n(Tke,"A",{href:!0});var c1t=s(eV);xNo=r(c1t,"LayoutLMForSequenceClassification"),c1t.forEach(t),$No=r(Tke," (LayoutLM model)"),Tke.forEach(t),kNo=i(j),Ob=n(j,"LI",{});var Mke=s(Ob);bhe=n(Mke,"STRONG",{});var f1t=s(bhe);SNo=r(f1t,"layoutlmv2"),f1t.forEach(t),RNo=r(Mke," \u2014 "),oV=n(Mke,"A",{href:!0});var m1t=s(oV);PNo=r(m1t,"LayoutLMv2ForSequenceClassification"),m1t.forEach(t),BNo=r(Mke," (LayoutLMv2 model)"),Mke.forEach(t),INo=i(j),Vb=n(j,"LI",{});var Eke=s(Vb);vhe=n(Eke,"STRONG",{});var g1t=s(vhe);NNo=r(g1t,"layoutlmv3"),g1t.forEach(t),qNo=r(Eke," \u2014 "),rV=n(Eke,"A",{href:!0});var h1t=s(rV);jNo=r(h1t,"LayoutLMv3ForSequenceClassification"),h1t.forEach(t),DNo=r(Eke," (LayoutLMv3 model)"),Eke.forEach(t),GNo=i(j),Xb=n(j,"LI",{});var Cke=s(Xb);Fhe=n(Cke,"STRONG",{});var p1t=s(Fhe);ONo=r(p1t,"led"),p1t.forEach(t),VNo=r(Cke," \u2014 "),tV=n(Cke,"A",{href:!0});var u1t=s(tV);XNo=r(u1t,"LEDForSequenceClassification"),u1t.forEach(t),zNo=r(Cke," (LED model)"),Cke.forEach(t),WNo=i(j),zb=n(j,"LI",{});var wke=s(zb);The=n(wke,"STRONG",{});var _1t=s(The);QNo=r(_1t,"longformer"),_1t.forEach(t),HNo=r(wke," \u2014 "),aV=n(wke,"A",{href:!0});var b1t=s(aV);UNo=r(b1t,"LongformerForSequenceClassification"),b1t.forEach(t),JNo=r(wke," (Longformer model)"),wke.forEach(t),YNo=i(j),Wb=n(j,"LI",{});var Ake=s(Wb);Mhe=n(Ake,"STRONG",{});var v1t=s(Mhe);KNo=r(v1t,"mbart"),v1t.forEach(t),ZNo=r(Ake," \u2014 "),nV=n(Ake,"A",{href:!0});var F1t=s(nV);eqo=r(F1t,"MBartForSequenceClassification"),F1t.forEach(t),oqo=r(Ake," (mBART model)"),Ake.forEach(t),rqo=i(j),Qb=n(j,"LI",{});var Lke=s(Qb);Ehe=n(Lke,"STRONG",{});var T1t=s(Ehe);tqo=r(T1t,"megatron-bert"),T1t.forEach(t),aqo=r(Lke," \u2014 "),sV=n(Lke,"A",{href:!0});var M1t=s(sV);nqo=r(M1t,"MegatronBertForSequenceClassification"),M1t.forEach(t),sqo=r(Lke," (Megatron-BERT model)"),Lke.forEach(t),lqo=i(j),Hb=n(j,"LI",{});var yke=s(Hb);Che=n(yke,"STRONG",{});var E1t=s(Che);iqo=r(E1t,"mobilebert"),E1t.forEach(t),dqo=r(yke," \u2014 "),lV=n(yke,"A",{href:!0});var C1t=s(lV);cqo=r(C1t,"MobileBertForSequenceClassification"),C1t.forEach(t),fqo=r(yke," (MobileBERT model)"),yke.forEach(t),mqo=i(j),Ub=n(j,"LI",{});var xke=s(Ub);whe=n(xke,"STRONG",{});var w1t=s(whe);gqo=r(w1t,"mpnet"),w1t.forEach(t),hqo=r(xke," \u2014 "),iV=n(xke,"A",{href:!0});var A1t=s(iV);pqo=r(A1t,"MPNetForSequenceClassification"),A1t.forEach(t),uqo=r(xke," (MPNet model)"),xke.forEach(t),_qo=i(j),Jb=n(j,"LI",{});var $ke=s(Jb);Ahe=n($ke,"STRONG",{});var L1t=s(Ahe);bqo=r(L1t,"nystromformer"),L1t.forEach(t),vqo=r($ke," \u2014 "),dV=n($ke,"A",{href:!0});var y1t=s(dV);Fqo=r(y1t,"NystromformerForSequenceClassification"),y1t.forEach(t),Tqo=r($ke," (Nystr\xF6mformer model)"),$ke.forEach(t),Mqo=i(j),Yb=n(j,"LI",{});var kke=s(Yb);Lhe=n(kke,"STRONG",{});var x1t=s(Lhe);Eqo=r(x1t,"openai-gpt"),x1t.forEach(t),Cqo=r(kke," \u2014 "),cV=n(kke,"A",{href:!0});var $1t=s(cV);wqo=r($1t,"OpenAIGPTForSequenceClassification"),$1t.forEach(t),Aqo=r(kke," (OpenAI GPT model)"),kke.forEach(t),Lqo=i(j),Kb=n(j,"LI",{});var Ske=s(Kb);yhe=n(Ske,"STRONG",{});var k1t=s(yhe);yqo=r(k1t,"perceiver"),k1t.forEach(t),xqo=r(Ske," \u2014 "),fV=n(Ske,"A",{href:!0});var S1t=s(fV);$qo=r(S1t,"PerceiverForSequenceClassification"),S1t.forEach(t),kqo=r(Ske," (Perceiver model)"),Ske.forEach(t),Sqo=i(j),Zb=n(j,"LI",{});var Rke=s(Zb);xhe=n(Rke,"STRONG",{});var R1t=s(xhe);Rqo=r(R1t,"plbart"),R1t.forEach(t),Pqo=r(Rke," \u2014 "),mV=n(Rke,"A",{href:!0});var P1t=s(mV);Bqo=r(P1t,"PLBartForSequenceClassification"),P1t.forEach(t),Iqo=r(Rke," (PLBart model)"),Rke.forEach(t),Nqo=i(j),ev=n(j,"LI",{});var Pke=s(ev);$he=n(Pke,"STRONG",{});var B1t=s($he);qqo=r(B1t,"qdqbert"),B1t.forEach(t),jqo=r(Pke," \u2014 "),gV=n(Pke,"A",{href:!0});var I1t=s(gV);Dqo=r(I1t,"QDQBertForSequenceClassification"),I1t.forEach(t),Gqo=r(Pke," (QDQBert model)"),Pke.forEach(t),Oqo=i(j),ov=n(j,"LI",{});var Bke=s(ov);khe=n(Bke,"STRONG",{});var N1t=s(khe);Vqo=r(N1t,"reformer"),N1t.forEach(t),Xqo=r(Bke," \u2014 "),hV=n(Bke,"A",{href:!0});var q1t=s(hV);zqo=r(q1t,"ReformerForSequenceClassification"),q1t.forEach(t),Wqo=r(Bke," (Reformer model)"),Bke.forEach(t),Qqo=i(j),rv=n(j,"LI",{});var Ike=s(rv);She=n(Ike,"STRONG",{});var j1t=s(She);Hqo=r(j1t,"rembert"),j1t.forEach(t),Uqo=r(Ike," \u2014 "),pV=n(Ike,"A",{href:!0});var D1t=s(pV);Jqo=r(D1t,"RemBertForSequenceClassification"),D1t.forEach(t),Yqo=r(Ike," (RemBERT model)"),Ike.forEach(t),Kqo=i(j),tv=n(j,"LI",{});var Nke=s(tv);Rhe=n(Nke,"STRONG",{});var G1t=s(Rhe);Zqo=r(G1t,"roberta"),G1t.forEach(t),ejo=r(Nke," \u2014 "),uV=n(Nke,"A",{href:!0});var O1t=s(uV);ojo=r(O1t,"RobertaForSequenceClassification"),O1t.forEach(t),rjo=r(Nke," (RoBERTa model)"),Nke.forEach(t),tjo=i(j),av=n(j,"LI",{});var qke=s(av);Phe=n(qke,"STRONG",{});var V1t=s(Phe);ajo=r(V1t,"roformer"),V1t.forEach(t),njo=r(qke," \u2014 "),_V=n(qke,"A",{href:!0});var X1t=s(_V);sjo=r(X1t,"RoFormerForSequenceClassification"),X1t.forEach(t),ljo=r(qke," (RoFormer model)"),qke.forEach(t),ijo=i(j),nv=n(j,"LI",{});var jke=s(nv);Bhe=n(jke,"STRONG",{});var z1t=s(Bhe);djo=r(z1t,"squeezebert"),z1t.forEach(t),cjo=r(jke," \u2014 "),bV=n(jke,"A",{href:!0});var W1t=s(bV);fjo=r(W1t,"SqueezeBertForSequenceClassification"),W1t.forEach(t),mjo=r(jke," (SqueezeBERT model)"),jke.forEach(t),gjo=i(j),sv=n(j,"LI",{});var Dke=s(sv);Ihe=n(Dke,"STRONG",{});var Q1t=s(Ihe);hjo=r(Q1t,"tapas"),Q1t.forEach(t),pjo=r(Dke," \u2014 "),vV=n(Dke,"A",{href:!0});var H1t=s(vV);ujo=r(H1t,"TapasForSequenceClassification"),H1t.forEach(t),_jo=r(Dke," (TAPAS model)"),Dke.forEach(t),bjo=i(j),lv=n(j,"LI",{});var Gke=s(lv);Nhe=n(Gke,"STRONG",{});var U1t=s(Nhe);vjo=r(U1t,"transfo-xl"),U1t.forEach(t),Fjo=r(Gke," \u2014 "),FV=n(Gke,"A",{href:!0});var J1t=s(FV);Tjo=r(J1t,"TransfoXLForSequenceClassification"),J1t.forEach(t),Mjo=r(Gke," (Transformer-XL model)"),Gke.forEach(t),Ejo=i(j),iv=n(j,"LI",{});var Oke=s(iv);qhe=n(Oke,"STRONG",{});var Y1t=s(qhe);Cjo=r(Y1t,"xlm"),Y1t.forEach(t),wjo=r(Oke," \u2014 "),TV=n(Oke,"A",{href:!0});var K1t=s(TV);Ajo=r(K1t,"XLMForSequenceClassification"),K1t.forEach(t),Ljo=r(Oke," (XLM model)"),Oke.forEach(t),yjo=i(j),dv=n(j,"LI",{});var Vke=s(dv);jhe=n(Vke,"STRONG",{});var Z1t=s(jhe);xjo=r(Z1t,"xlm-roberta"),Z1t.forEach(t),$jo=r(Vke," \u2014 "),MV=n(Vke,"A",{href:!0});var e2t=s(MV);kjo=r(e2t,"XLMRobertaForSequenceClassification"),e2t.forEach(t),Sjo=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),Rjo=i(j),cv=n(j,"LI",{});var Xke=s(cv);Dhe=n(Xke,"STRONG",{});var o2t=s(Dhe);Pjo=r(o2t,"xlm-roberta-xl"),o2t.forEach(t),Bjo=r(Xke," \u2014 "),EV=n(Xke,"A",{href:!0});var r2t=s(EV);Ijo=r(r2t,"XLMRobertaXLForSequenceClassification"),r2t.forEach(t),Njo=r(Xke," (XLM-RoBERTa-XL model)"),Xke.forEach(t),qjo=i(j),fv=n(j,"LI",{});var zke=s(fv);Ghe=n(zke,"STRONG",{});var t2t=s(Ghe);jjo=r(t2t,"xlnet"),t2t.forEach(t),Djo=r(zke," \u2014 "),CV=n(zke,"A",{href:!0});var a2t=s(CV);Gjo=r(a2t,"XLNetForSequenceClassification"),a2t.forEach(t),Ojo=r(zke," (XLNet model)"),zke.forEach(t),Vjo=i(j),mv=n(j,"LI",{});var Wke=s(mv);Ohe=n(Wke,"STRONG",{});var n2t=s(Ohe);Xjo=r(n2t,"yoso"),n2t.forEach(t),zjo=r(Wke," \u2014 "),wV=n(Wke,"A",{href:!0});var s2t=s(wV);Wjo=r(s2t,"YosoForSequenceClassification"),s2t.forEach(t),Qjo=r(Wke," (YOSO model)"),Wke.forEach(t),j.forEach(t),Hjo=i(ca),gv=n(ca,"P",{});var Qke=s(gv);Ujo=r(Qke,"The model is set in evaluation mode by default using "),Vhe=n(Qke,"CODE",{});var l2t=s(Vhe);Jjo=r(l2t,"model.eval()"),l2t.forEach(t),Yjo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(Qke,"CODE",{});var i2t=s(Xhe);Kjo=r(i2t,"model.train()"),i2t.forEach(t),Qke.forEach(t),Zjo=i(ca),T(hv.$$.fragment,ca),ca.forEach(t),ol.forEach(t),SGe=i(f),ed=n(f,"H2",{class:!0});var qVe=s(ed);pv=n(qVe,"A",{id:!0,class:!0,href:!0});var d2t=s(pv);zhe=n(d2t,"SPAN",{});var c2t=s(zhe);T(EL.$$.fragment,c2t),c2t.forEach(t),d2t.forEach(t),eDo=i(qVe),Whe=n(qVe,"SPAN",{});var f2t=s(Whe);oDo=r(f2t,"AutoModelForMultipleChoice"),f2t.forEach(t),qVe.forEach(t),RGe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(CL.$$.fragment,rl),rDo=i(rl),od=n(rl,"P",{});var poe=s(od);tDo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AV=n(poe,"A",{href:!0});var m2t=s(AV);aDo=r(m2t,"from_pretrained()"),m2t.forEach(t),nDo=r(poe," class method or the "),LV=n(poe,"A",{href:!0});var g2t=s(LV);sDo=r(g2t,"from_config()"),g2t.forEach(t),lDo=r(poe,` class
method.`),poe.forEach(t),iDo=i(rl),wL=n(rl,"P",{});var jVe=s(wL);dDo=r(jVe,"This class cannot be instantiated directly using "),Qhe=n(jVe,"CODE",{});var h2t=s(Qhe);cDo=r(h2t,"__init__()"),h2t.forEach(t),fDo=r(jVe," (throws an error)."),jVe.forEach(t),mDo=i(rl),mt=n(rl,"DIV",{class:!0});var I3=s(mt);T(AL.$$.fragment,I3),gDo=i(I3),Hhe=n(I3,"P",{});var p2t=s(Hhe);hDo=r(p2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),p2t.forEach(t),pDo=i(I3),rd=n(I3,"P",{});var uoe=s(rd);uDo=r(uoe,`Note:
Loading a model from its configuration file does `),Uhe=n(uoe,"STRONG",{});var u2t=s(Uhe);_Do=r(u2t,"not"),u2t.forEach(t),bDo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(uoe,"A",{href:!0});var _2t=s(yV);vDo=r(_2t,"from_pretrained()"),_2t.forEach(t),FDo=r(uoe," to load the model weights."),uoe.forEach(t),TDo=i(I3),T(uv.$$.fragment,I3),I3.forEach(t),MDo=i(rl),ro=n(rl,"DIV",{class:!0});var fa=s(ro);T(LL.$$.fragment,fa),EDo=i(fa),Jhe=n(fa,"P",{});var b2t=s(Jhe);CDo=r(b2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b2t.forEach(t),wDo=i(fa),ja=n(fa,"P",{});var N3=s(ja);ADo=r(N3,"The model class to instantiate is selected based on the "),Yhe=n(N3,"CODE",{});var v2t=s(Yhe);LDo=r(v2t,"model_type"),v2t.forEach(t),yDo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Khe=n(N3,"CODE",{});var F2t=s(Khe);xDo=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),$Do=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(N3,"CODE",{});var T2t=s(Zhe);kDo=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),SDo=r(N3,":"),N3.forEach(t),RDo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);_v=n(ee,"LI",{});var Hke=s(_v);epe=n(Hke,"STRONG",{});var M2t=s(epe);PDo=r(M2t,"albert"),M2t.forEach(t),BDo=r(Hke," \u2014 "),xV=n(Hke,"A",{href:!0});var E2t=s(xV);IDo=r(E2t,"AlbertForMultipleChoice"),E2t.forEach(t),NDo=r(Hke," (ALBERT model)"),Hke.forEach(t),qDo=i(ee),bv=n(ee,"LI",{});var Uke=s(bv);ope=n(Uke,"STRONG",{});var C2t=s(ope);jDo=r(C2t,"bert"),C2t.forEach(t),DDo=r(Uke," \u2014 "),$V=n(Uke,"A",{href:!0});var w2t=s($V);GDo=r(w2t,"BertForMultipleChoice"),w2t.forEach(t),ODo=r(Uke," (BERT model)"),Uke.forEach(t),VDo=i(ee),vv=n(ee,"LI",{});var Jke=s(vv);rpe=n(Jke,"STRONG",{});var A2t=s(rpe);XDo=r(A2t,"big_bird"),A2t.forEach(t),zDo=r(Jke," \u2014 "),kV=n(Jke,"A",{href:!0});var L2t=s(kV);WDo=r(L2t,"BigBirdForMultipleChoice"),L2t.forEach(t),QDo=r(Jke," (BigBird model)"),Jke.forEach(t),HDo=i(ee),Fv=n(ee,"LI",{});var Yke=s(Fv);tpe=n(Yke,"STRONG",{});var y2t=s(tpe);UDo=r(y2t,"camembert"),y2t.forEach(t),JDo=r(Yke," \u2014 "),SV=n(Yke,"A",{href:!0});var x2t=s(SV);YDo=r(x2t,"CamembertForMultipleChoice"),x2t.forEach(t),KDo=r(Yke," (CamemBERT model)"),Yke.forEach(t),ZDo=i(ee),Tv=n(ee,"LI",{});var Kke=s(Tv);ape=n(Kke,"STRONG",{});var $2t=s(ape);eGo=r($2t,"canine"),$2t.forEach(t),oGo=r(Kke," \u2014 "),RV=n(Kke,"A",{href:!0});var k2t=s(RV);rGo=r(k2t,"CanineForMultipleChoice"),k2t.forEach(t),tGo=r(Kke," (CANINE model)"),Kke.forEach(t),aGo=i(ee),Mv=n(ee,"LI",{});var Zke=s(Mv);npe=n(Zke,"STRONG",{});var S2t=s(npe);nGo=r(S2t,"convbert"),S2t.forEach(t),sGo=r(Zke," \u2014 "),PV=n(Zke,"A",{href:!0});var R2t=s(PV);lGo=r(R2t,"ConvBertForMultipleChoice"),R2t.forEach(t),iGo=r(Zke," (ConvBERT model)"),Zke.forEach(t),dGo=i(ee),Ev=n(ee,"LI",{});var eSe=s(Ev);spe=n(eSe,"STRONG",{});var P2t=s(spe);cGo=r(P2t,"data2vec-text"),P2t.forEach(t),fGo=r(eSe," \u2014 "),BV=n(eSe,"A",{href:!0});var B2t=s(BV);mGo=r(B2t,"Data2VecTextForMultipleChoice"),B2t.forEach(t),gGo=r(eSe," (Data2VecText model)"),eSe.forEach(t),hGo=i(ee),Cv=n(ee,"LI",{});var oSe=s(Cv);lpe=n(oSe,"STRONG",{});var I2t=s(lpe);pGo=r(I2t,"deberta-v2"),I2t.forEach(t),uGo=r(oSe," \u2014 "),IV=n(oSe,"A",{href:!0});var N2t=s(IV);_Go=r(N2t,"DebertaV2ForMultipleChoice"),N2t.forEach(t),bGo=r(oSe," (DeBERTa-v2 model)"),oSe.forEach(t),vGo=i(ee),wv=n(ee,"LI",{});var rSe=s(wv);ipe=n(rSe,"STRONG",{});var q2t=s(ipe);FGo=r(q2t,"distilbert"),q2t.forEach(t),TGo=r(rSe," \u2014 "),NV=n(rSe,"A",{href:!0});var j2t=s(NV);MGo=r(j2t,"DistilBertForMultipleChoice"),j2t.forEach(t),EGo=r(rSe," (DistilBERT model)"),rSe.forEach(t),CGo=i(ee),Av=n(ee,"LI",{});var tSe=s(Av);dpe=n(tSe,"STRONG",{});var D2t=s(dpe);wGo=r(D2t,"electra"),D2t.forEach(t),AGo=r(tSe," \u2014 "),qV=n(tSe,"A",{href:!0});var G2t=s(qV);LGo=r(G2t,"ElectraForMultipleChoice"),G2t.forEach(t),yGo=r(tSe," (ELECTRA model)"),tSe.forEach(t),xGo=i(ee),Lv=n(ee,"LI",{});var aSe=s(Lv);cpe=n(aSe,"STRONG",{});var O2t=s(cpe);$Go=r(O2t,"flaubert"),O2t.forEach(t),kGo=r(aSe," \u2014 "),jV=n(aSe,"A",{href:!0});var V2t=s(jV);SGo=r(V2t,"FlaubertForMultipleChoice"),V2t.forEach(t),RGo=r(aSe," (FlauBERT model)"),aSe.forEach(t),PGo=i(ee),yv=n(ee,"LI",{});var nSe=s(yv);fpe=n(nSe,"STRONG",{});var X2t=s(fpe);BGo=r(X2t,"fnet"),X2t.forEach(t),IGo=r(nSe," \u2014 "),DV=n(nSe,"A",{href:!0});var z2t=s(DV);NGo=r(z2t,"FNetForMultipleChoice"),z2t.forEach(t),qGo=r(nSe," (FNet model)"),nSe.forEach(t),jGo=i(ee),xv=n(ee,"LI",{});var sSe=s(xv);mpe=n(sSe,"STRONG",{});var W2t=s(mpe);DGo=r(W2t,"funnel"),W2t.forEach(t),GGo=r(sSe," \u2014 "),GV=n(sSe,"A",{href:!0});var Q2t=s(GV);OGo=r(Q2t,"FunnelForMultipleChoice"),Q2t.forEach(t),VGo=r(sSe," (Funnel Transformer model)"),sSe.forEach(t),XGo=i(ee),$v=n(ee,"LI",{});var lSe=s($v);gpe=n(lSe,"STRONG",{});var H2t=s(gpe);zGo=r(H2t,"ibert"),H2t.forEach(t),WGo=r(lSe," \u2014 "),OV=n(lSe,"A",{href:!0});var U2t=s(OV);QGo=r(U2t,"IBertForMultipleChoice"),U2t.forEach(t),HGo=r(lSe," (I-BERT model)"),lSe.forEach(t),UGo=i(ee),kv=n(ee,"LI",{});var iSe=s(kv);hpe=n(iSe,"STRONG",{});var J2t=s(hpe);JGo=r(J2t,"longformer"),J2t.forEach(t),YGo=r(iSe," \u2014 "),VV=n(iSe,"A",{href:!0});var Y2t=s(VV);KGo=r(Y2t,"LongformerForMultipleChoice"),Y2t.forEach(t),ZGo=r(iSe," (Longformer model)"),iSe.forEach(t),eOo=i(ee),Sv=n(ee,"LI",{});var dSe=s(Sv);ppe=n(dSe,"STRONG",{});var K2t=s(ppe);oOo=r(K2t,"megatron-bert"),K2t.forEach(t),rOo=r(dSe," \u2014 "),XV=n(dSe,"A",{href:!0});var Z2t=s(XV);tOo=r(Z2t,"MegatronBertForMultipleChoice"),Z2t.forEach(t),aOo=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),nOo=i(ee),Rv=n(ee,"LI",{});var cSe=s(Rv);upe=n(cSe,"STRONG",{});var ebt=s(upe);sOo=r(ebt,"mobilebert"),ebt.forEach(t),lOo=r(cSe," \u2014 "),zV=n(cSe,"A",{href:!0});var obt=s(zV);iOo=r(obt,"MobileBertForMultipleChoice"),obt.forEach(t),dOo=r(cSe," (MobileBERT model)"),cSe.forEach(t),cOo=i(ee),Pv=n(ee,"LI",{});var fSe=s(Pv);_pe=n(fSe,"STRONG",{});var rbt=s(_pe);fOo=r(rbt,"mpnet"),rbt.forEach(t),mOo=r(fSe," \u2014 "),WV=n(fSe,"A",{href:!0});var tbt=s(WV);gOo=r(tbt,"MPNetForMultipleChoice"),tbt.forEach(t),hOo=r(fSe," (MPNet model)"),fSe.forEach(t),pOo=i(ee),Bv=n(ee,"LI",{});var mSe=s(Bv);bpe=n(mSe,"STRONG",{});var abt=s(bpe);uOo=r(abt,"nystromformer"),abt.forEach(t),_Oo=r(mSe," \u2014 "),QV=n(mSe,"A",{href:!0});var nbt=s(QV);bOo=r(nbt,"NystromformerForMultipleChoice"),nbt.forEach(t),vOo=r(mSe," (Nystr\xF6mformer model)"),mSe.forEach(t),FOo=i(ee),Iv=n(ee,"LI",{});var gSe=s(Iv);vpe=n(gSe,"STRONG",{});var sbt=s(vpe);TOo=r(sbt,"qdqbert"),sbt.forEach(t),MOo=r(gSe," \u2014 "),HV=n(gSe,"A",{href:!0});var lbt=s(HV);EOo=r(lbt,"QDQBertForMultipleChoice"),lbt.forEach(t),COo=r(gSe," (QDQBert model)"),gSe.forEach(t),wOo=i(ee),Nv=n(ee,"LI",{});var hSe=s(Nv);Fpe=n(hSe,"STRONG",{});var ibt=s(Fpe);AOo=r(ibt,"rembert"),ibt.forEach(t),LOo=r(hSe," \u2014 "),UV=n(hSe,"A",{href:!0});var dbt=s(UV);yOo=r(dbt,"RemBertForMultipleChoice"),dbt.forEach(t),xOo=r(hSe," (RemBERT model)"),hSe.forEach(t),$Oo=i(ee),qv=n(ee,"LI",{});var pSe=s(qv);Tpe=n(pSe,"STRONG",{});var cbt=s(Tpe);kOo=r(cbt,"roberta"),cbt.forEach(t),SOo=r(pSe," \u2014 "),JV=n(pSe,"A",{href:!0});var fbt=s(JV);ROo=r(fbt,"RobertaForMultipleChoice"),fbt.forEach(t),POo=r(pSe," (RoBERTa model)"),pSe.forEach(t),BOo=i(ee),jv=n(ee,"LI",{});var uSe=s(jv);Mpe=n(uSe,"STRONG",{});var mbt=s(Mpe);IOo=r(mbt,"roformer"),mbt.forEach(t),NOo=r(uSe," \u2014 "),YV=n(uSe,"A",{href:!0});var gbt=s(YV);qOo=r(gbt,"RoFormerForMultipleChoice"),gbt.forEach(t),jOo=r(uSe," (RoFormer model)"),uSe.forEach(t),DOo=i(ee),Dv=n(ee,"LI",{});var _Se=s(Dv);Epe=n(_Se,"STRONG",{});var hbt=s(Epe);GOo=r(hbt,"squeezebert"),hbt.forEach(t),OOo=r(_Se," \u2014 "),KV=n(_Se,"A",{href:!0});var pbt=s(KV);VOo=r(pbt,"SqueezeBertForMultipleChoice"),pbt.forEach(t),XOo=r(_Se," (SqueezeBERT model)"),_Se.forEach(t),zOo=i(ee),Gv=n(ee,"LI",{});var bSe=s(Gv);Cpe=n(bSe,"STRONG",{});var ubt=s(Cpe);WOo=r(ubt,"xlm"),ubt.forEach(t),QOo=r(bSe," \u2014 "),ZV=n(bSe,"A",{href:!0});var _bt=s(ZV);HOo=r(_bt,"XLMForMultipleChoice"),_bt.forEach(t),UOo=r(bSe," (XLM model)"),bSe.forEach(t),JOo=i(ee),Ov=n(ee,"LI",{});var vSe=s(Ov);wpe=n(vSe,"STRONG",{});var bbt=s(wpe);YOo=r(bbt,"xlm-roberta"),bbt.forEach(t),KOo=r(vSe," \u2014 "),eX=n(vSe,"A",{href:!0});var vbt=s(eX);ZOo=r(vbt,"XLMRobertaForMultipleChoice"),vbt.forEach(t),eVo=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),oVo=i(ee),Vv=n(ee,"LI",{});var FSe=s(Vv);Ape=n(FSe,"STRONG",{});var Fbt=s(Ape);rVo=r(Fbt,"xlm-roberta-xl"),Fbt.forEach(t),tVo=r(FSe," \u2014 "),oX=n(FSe,"A",{href:!0});var Tbt=s(oX);aVo=r(Tbt,"XLMRobertaXLForMultipleChoice"),Tbt.forEach(t),nVo=r(FSe," (XLM-RoBERTa-XL model)"),FSe.forEach(t),sVo=i(ee),Xv=n(ee,"LI",{});var TSe=s(Xv);Lpe=n(TSe,"STRONG",{});var Mbt=s(Lpe);lVo=r(Mbt,"xlnet"),Mbt.forEach(t),iVo=r(TSe," \u2014 "),rX=n(TSe,"A",{href:!0});var Ebt=s(rX);dVo=r(Ebt,"XLNetForMultipleChoice"),Ebt.forEach(t),cVo=r(TSe," (XLNet model)"),TSe.forEach(t),fVo=i(ee),zv=n(ee,"LI",{});var MSe=s(zv);ype=n(MSe,"STRONG",{});var Cbt=s(ype);mVo=r(Cbt,"yoso"),Cbt.forEach(t),gVo=r(MSe," \u2014 "),tX=n(MSe,"A",{href:!0});var wbt=s(tX);hVo=r(wbt,"YosoForMultipleChoice"),wbt.forEach(t),pVo=r(MSe," (YOSO model)"),MSe.forEach(t),ee.forEach(t),uVo=i(fa),Wv=n(fa,"P",{});var ESe=s(Wv);_Vo=r(ESe,"The model is set in evaluation mode by default using "),xpe=n(ESe,"CODE",{});var Abt=s(xpe);bVo=r(Abt,"model.eval()"),Abt.forEach(t),vVo=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(ESe,"CODE",{});var Lbt=s($pe);FVo=r(Lbt,"model.train()"),Lbt.forEach(t),ESe.forEach(t),TVo=i(fa),T(Qv.$$.fragment,fa),fa.forEach(t),rl.forEach(t),PGe=i(f),td=n(f,"H2",{class:!0});var DVe=s(td);Hv=n(DVe,"A",{id:!0,class:!0,href:!0});var ybt=s(Hv);kpe=n(ybt,"SPAN",{});var xbt=s(kpe);T(yL.$$.fragment,xbt),xbt.forEach(t),ybt.forEach(t),MVo=i(DVe),Spe=n(DVe,"SPAN",{});var $bt=s(Spe);EVo=r($bt,"AutoModelForNextSentencePrediction"),$bt.forEach(t),DVe.forEach(t),BGe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(xL.$$.fragment,tl),CVo=i(tl),ad=n(tl,"P",{});var _oe=s(ad);wVo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aX=n(_oe,"A",{href:!0});var kbt=s(aX);AVo=r(kbt,"from_pretrained()"),kbt.forEach(t),LVo=r(_oe," class method or the "),nX=n(_oe,"A",{href:!0});var Sbt=s(nX);yVo=r(Sbt,"from_config()"),Sbt.forEach(t),xVo=r(_oe,` class
method.`),_oe.forEach(t),$Vo=i(tl),$L=n(tl,"P",{});var GVe=s($L);kVo=r(GVe,"This class cannot be instantiated directly using "),Rpe=n(GVe,"CODE",{});var Rbt=s(Rpe);SVo=r(Rbt,"__init__()"),Rbt.forEach(t),RVo=r(GVe," (throws an error)."),GVe.forEach(t),PVo=i(tl),gt=n(tl,"DIV",{class:!0});var q3=s(gt);T(kL.$$.fragment,q3),BVo=i(q3),Ppe=n(q3,"P",{});var Pbt=s(Ppe);IVo=r(Pbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pbt.forEach(t),NVo=i(q3),nd=n(q3,"P",{});var boe=s(nd);qVo=r(boe,`Note:
Loading a model from its configuration file does `),Bpe=n(boe,"STRONG",{});var Bbt=s(Bpe);jVo=r(Bbt,"not"),Bbt.forEach(t),DVo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(boe,"A",{href:!0});var Ibt=s(sX);GVo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),OVo=r(boe," to load the model weights."),boe.forEach(t),VVo=i(q3),T(Uv.$$.fragment,q3),q3.forEach(t),XVo=i(tl),to=n(tl,"DIV",{class:!0});var ma=s(to);T(SL.$$.fragment,ma),zVo=i(ma),Ipe=n(ma,"P",{});var Nbt=s(Ipe);WVo=r(Nbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nbt.forEach(t),QVo=i(ma),Da=n(ma,"P",{});var j3=s(Da);HVo=r(j3,"The model class to instantiate is selected based on the "),Npe=n(j3,"CODE",{});var qbt=s(Npe);UVo=r(qbt,"model_type"),qbt.forEach(t),JVo=r(j3,` property of the config object (either
passed as an argument or loaded from `),qpe=n(j3,"CODE",{});var jbt=s(qpe);YVo=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),KVo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(j3,"CODE",{});var Dbt=s(jpe);ZVo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),eXo=r(j3,":"),j3.forEach(t),oXo=i(ma),Zr=n(ma,"UL",{});var al=s(Zr);Jv=n(al,"LI",{});var CSe=s(Jv);Dpe=n(CSe,"STRONG",{});var Gbt=s(Dpe);rXo=r(Gbt,"bert"),Gbt.forEach(t),tXo=r(CSe," \u2014 "),lX=n(CSe,"A",{href:!0});var Obt=s(lX);aXo=r(Obt,"BertForNextSentencePrediction"),Obt.forEach(t),nXo=r(CSe," (BERT model)"),CSe.forEach(t),sXo=i(al),Yv=n(al,"LI",{});var wSe=s(Yv);Gpe=n(wSe,"STRONG",{});var Vbt=s(Gpe);lXo=r(Vbt,"fnet"),Vbt.forEach(t),iXo=r(wSe," \u2014 "),iX=n(wSe,"A",{href:!0});var Xbt=s(iX);dXo=r(Xbt,"FNetForNextSentencePrediction"),Xbt.forEach(t),cXo=r(wSe," (FNet model)"),wSe.forEach(t),fXo=i(al),Kv=n(al,"LI",{});var ASe=s(Kv);Ope=n(ASe,"STRONG",{});var zbt=s(Ope);mXo=r(zbt,"megatron-bert"),zbt.forEach(t),gXo=r(ASe," \u2014 "),dX=n(ASe,"A",{href:!0});var Wbt=s(dX);hXo=r(Wbt,"MegatronBertForNextSentencePrediction"),Wbt.forEach(t),pXo=r(ASe," (Megatron-BERT model)"),ASe.forEach(t),uXo=i(al),Zv=n(al,"LI",{});var LSe=s(Zv);Vpe=n(LSe,"STRONG",{});var Qbt=s(Vpe);_Xo=r(Qbt,"mobilebert"),Qbt.forEach(t),bXo=r(LSe," \u2014 "),cX=n(LSe,"A",{href:!0});var Hbt=s(cX);vXo=r(Hbt,"MobileBertForNextSentencePrediction"),Hbt.forEach(t),FXo=r(LSe," (MobileBERT model)"),LSe.forEach(t),TXo=i(al),e0=n(al,"LI",{});var ySe=s(e0);Xpe=n(ySe,"STRONG",{});var Ubt=s(Xpe);MXo=r(Ubt,"qdqbert"),Ubt.forEach(t),EXo=r(ySe," \u2014 "),fX=n(ySe,"A",{href:!0});var Jbt=s(fX);CXo=r(Jbt,"QDQBertForNextSentencePrediction"),Jbt.forEach(t),wXo=r(ySe," (QDQBert model)"),ySe.forEach(t),al.forEach(t),AXo=i(ma),o0=n(ma,"P",{});var xSe=s(o0);LXo=r(xSe,"The model is set in evaluation mode by default using "),zpe=n(xSe,"CODE",{});var Ybt=s(zpe);yXo=r(Ybt,"model.eval()"),Ybt.forEach(t),xXo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(xSe,"CODE",{});var Kbt=s(Wpe);$Xo=r(Kbt,"model.train()"),Kbt.forEach(t),xSe.forEach(t),kXo=i(ma),T(r0.$$.fragment,ma),ma.forEach(t),tl.forEach(t),IGe=i(f),sd=n(f,"H2",{class:!0});var OVe=s(sd);t0=n(OVe,"A",{id:!0,class:!0,href:!0});var Zbt=s(t0);Qpe=n(Zbt,"SPAN",{});var evt=s(Qpe);T(RL.$$.fragment,evt),evt.forEach(t),Zbt.forEach(t),SXo=i(OVe),Hpe=n(OVe,"SPAN",{});var ovt=s(Hpe);RXo=r(ovt,"AutoModelForTokenClassification"),ovt.forEach(t),OVe.forEach(t),NGe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(PL.$$.fragment,nl),PXo=i(nl),ld=n(nl,"P",{});var voe=s(ld);BXo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mX=n(voe,"A",{href:!0});var rvt=s(mX);IXo=r(rvt,"from_pretrained()"),rvt.forEach(t),NXo=r(voe," class method or the "),gX=n(voe,"A",{href:!0});var tvt=s(gX);qXo=r(tvt,"from_config()"),tvt.forEach(t),jXo=r(voe,` class
method.`),voe.forEach(t),DXo=i(nl),BL=n(nl,"P",{});var VVe=s(BL);GXo=r(VVe,"This class cannot be instantiated directly using "),Upe=n(VVe,"CODE",{});var avt=s(Upe);OXo=r(avt,"__init__()"),avt.forEach(t),VXo=r(VVe," (throws an error)."),VVe.forEach(t),XXo=i(nl),ht=n(nl,"DIV",{class:!0});var D3=s(ht);T(IL.$$.fragment,D3),zXo=i(D3),Jpe=n(D3,"P",{});var nvt=s(Jpe);WXo=r(nvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nvt.forEach(t),QXo=i(D3),id=n(D3,"P",{});var Foe=s(id);HXo=r(Foe,`Note:
Loading a model from its configuration file does `),Ype=n(Foe,"STRONG",{});var svt=s(Ype);UXo=r(svt,"not"),svt.forEach(t),JXo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(Foe,"A",{href:!0});var lvt=s(hX);YXo=r(lvt,"from_pretrained()"),lvt.forEach(t),KXo=r(Foe," to load the model weights."),Foe.forEach(t),ZXo=i(D3),T(a0.$$.fragment,D3),D3.forEach(t),ezo=i(nl),ao=n(nl,"DIV",{class:!0});var ga=s(ao);T(NL.$$.fragment,ga),ozo=i(ga),Kpe=n(ga,"P",{});var ivt=s(Kpe);rzo=r(ivt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ivt.forEach(t),tzo=i(ga),Ga=n(ga,"P",{});var G3=s(Ga);azo=r(G3,"The model class to instantiate is selected based on the "),Zpe=n(G3,"CODE",{});var dvt=s(Zpe);nzo=r(dvt,"model_type"),dvt.forEach(t),szo=r(G3,` property of the config object (either
passed as an argument or loaded from `),eue=n(G3,"CODE",{});var cvt=s(eue);lzo=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),izo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(G3,"CODE",{});var fvt=s(oue);dzo=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),czo=r(G3,":"),G3.forEach(t),fzo=i(ga),H=n(ga,"UL",{});var J=s(H);n0=n(J,"LI",{});var $Se=s(n0);rue=n($Se,"STRONG",{});var mvt=s(rue);mzo=r(mvt,"albert"),mvt.forEach(t),gzo=r($Se," \u2014 "),pX=n($Se,"A",{href:!0});var gvt=s(pX);hzo=r(gvt,"AlbertForTokenClassification"),gvt.forEach(t),pzo=r($Se," (ALBERT model)"),$Se.forEach(t),uzo=i(J),s0=n(J,"LI",{});var kSe=s(s0);tue=n(kSe,"STRONG",{});var hvt=s(tue);_zo=r(hvt,"bert"),hvt.forEach(t),bzo=r(kSe," \u2014 "),uX=n(kSe,"A",{href:!0});var pvt=s(uX);vzo=r(pvt,"BertForTokenClassification"),pvt.forEach(t),Fzo=r(kSe," (BERT model)"),kSe.forEach(t),Tzo=i(J),l0=n(J,"LI",{});var SSe=s(l0);aue=n(SSe,"STRONG",{});var uvt=s(aue);Mzo=r(uvt,"big_bird"),uvt.forEach(t),Ezo=r(SSe," \u2014 "),_X=n(SSe,"A",{href:!0});var _vt=s(_X);Czo=r(_vt,"BigBirdForTokenClassification"),_vt.forEach(t),wzo=r(SSe," (BigBird model)"),SSe.forEach(t),Azo=i(J),i0=n(J,"LI",{});var RSe=s(i0);nue=n(RSe,"STRONG",{});var bvt=s(nue);Lzo=r(bvt,"bloom"),bvt.forEach(t),yzo=r(RSe," \u2014 "),bX=n(RSe,"A",{href:!0});var vvt=s(bX);xzo=r(vvt,"BloomForTokenClassification"),vvt.forEach(t),$zo=r(RSe," (BLOOM model)"),RSe.forEach(t),kzo=i(J),d0=n(J,"LI",{});var PSe=s(d0);sue=n(PSe,"STRONG",{});var Fvt=s(sue);Szo=r(Fvt,"camembert"),Fvt.forEach(t),Rzo=r(PSe," \u2014 "),vX=n(PSe,"A",{href:!0});var Tvt=s(vX);Pzo=r(Tvt,"CamembertForTokenClassification"),Tvt.forEach(t),Bzo=r(PSe," (CamemBERT model)"),PSe.forEach(t),Izo=i(J),c0=n(J,"LI",{});var BSe=s(c0);lue=n(BSe,"STRONG",{});var Mvt=s(lue);Nzo=r(Mvt,"canine"),Mvt.forEach(t),qzo=r(BSe," \u2014 "),FX=n(BSe,"A",{href:!0});var Evt=s(FX);jzo=r(Evt,"CanineForTokenClassification"),Evt.forEach(t),Dzo=r(BSe," (CANINE model)"),BSe.forEach(t),Gzo=i(J),f0=n(J,"LI",{});var ISe=s(f0);iue=n(ISe,"STRONG",{});var Cvt=s(iue);Ozo=r(Cvt,"convbert"),Cvt.forEach(t),Vzo=r(ISe," \u2014 "),TX=n(ISe,"A",{href:!0});var wvt=s(TX);Xzo=r(wvt,"ConvBertForTokenClassification"),wvt.forEach(t),zzo=r(ISe," (ConvBERT model)"),ISe.forEach(t),Wzo=i(J),m0=n(J,"LI",{});var NSe=s(m0);due=n(NSe,"STRONG",{});var Avt=s(due);Qzo=r(Avt,"data2vec-text"),Avt.forEach(t),Hzo=r(NSe," \u2014 "),MX=n(NSe,"A",{href:!0});var Lvt=s(MX);Uzo=r(Lvt,"Data2VecTextForTokenClassification"),Lvt.forEach(t),Jzo=r(NSe," (Data2VecText model)"),NSe.forEach(t),Yzo=i(J),g0=n(J,"LI",{});var qSe=s(g0);cue=n(qSe,"STRONG",{});var yvt=s(cue);Kzo=r(yvt,"deberta"),yvt.forEach(t),Zzo=r(qSe," \u2014 "),EX=n(qSe,"A",{href:!0});var xvt=s(EX);eWo=r(xvt,"DebertaForTokenClassification"),xvt.forEach(t),oWo=r(qSe," (DeBERTa model)"),qSe.forEach(t),rWo=i(J),h0=n(J,"LI",{});var jSe=s(h0);fue=n(jSe,"STRONG",{});var $vt=s(fue);tWo=r($vt,"deberta-v2"),$vt.forEach(t),aWo=r(jSe," \u2014 "),CX=n(jSe,"A",{href:!0});var kvt=s(CX);nWo=r(kvt,"DebertaV2ForTokenClassification"),kvt.forEach(t),sWo=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),lWo=i(J),p0=n(J,"LI",{});var DSe=s(p0);mue=n(DSe,"STRONG",{});var Svt=s(mue);iWo=r(Svt,"distilbert"),Svt.forEach(t),dWo=r(DSe," \u2014 "),wX=n(DSe,"A",{href:!0});var Rvt=s(wX);cWo=r(Rvt,"DistilBertForTokenClassification"),Rvt.forEach(t),fWo=r(DSe," (DistilBERT model)"),DSe.forEach(t),mWo=i(J),u0=n(J,"LI",{});var GSe=s(u0);gue=n(GSe,"STRONG",{});var Pvt=s(gue);gWo=r(Pvt,"electra"),Pvt.forEach(t),hWo=r(GSe," \u2014 "),AX=n(GSe,"A",{href:!0});var Bvt=s(AX);pWo=r(Bvt,"ElectraForTokenClassification"),Bvt.forEach(t),uWo=r(GSe," (ELECTRA model)"),GSe.forEach(t),_Wo=i(J),_0=n(J,"LI",{});var OSe=s(_0);hue=n(OSe,"STRONG",{});var Ivt=s(hue);bWo=r(Ivt,"flaubert"),Ivt.forEach(t),vWo=r(OSe," \u2014 "),LX=n(OSe,"A",{href:!0});var Nvt=s(LX);FWo=r(Nvt,"FlaubertForTokenClassification"),Nvt.forEach(t),TWo=r(OSe," (FlauBERT model)"),OSe.forEach(t),MWo=i(J),b0=n(J,"LI",{});var VSe=s(b0);pue=n(VSe,"STRONG",{});var qvt=s(pue);EWo=r(qvt,"fnet"),qvt.forEach(t),CWo=r(VSe," \u2014 "),yX=n(VSe,"A",{href:!0});var jvt=s(yX);wWo=r(jvt,"FNetForTokenClassification"),jvt.forEach(t),AWo=r(VSe," (FNet model)"),VSe.forEach(t),LWo=i(J),v0=n(J,"LI",{});var XSe=s(v0);uue=n(XSe,"STRONG",{});var Dvt=s(uue);yWo=r(Dvt,"funnel"),Dvt.forEach(t),xWo=r(XSe," \u2014 "),xX=n(XSe,"A",{href:!0});var Gvt=s(xX);$Wo=r(Gvt,"FunnelForTokenClassification"),Gvt.forEach(t),kWo=r(XSe," (Funnel Transformer model)"),XSe.forEach(t),SWo=i(J),F0=n(J,"LI",{});var zSe=s(F0);_ue=n(zSe,"STRONG",{});var Ovt=s(_ue);RWo=r(Ovt,"gpt2"),Ovt.forEach(t),PWo=r(zSe," \u2014 "),$X=n(zSe,"A",{href:!0});var Vvt=s($X);BWo=r(Vvt,"GPT2ForTokenClassification"),Vvt.forEach(t),IWo=r(zSe," (OpenAI GPT-2 model)"),zSe.forEach(t),NWo=i(J),T0=n(J,"LI",{});var WSe=s(T0);bue=n(WSe,"STRONG",{});var Xvt=s(bue);qWo=r(Xvt,"ibert"),Xvt.forEach(t),jWo=r(WSe," \u2014 "),kX=n(WSe,"A",{href:!0});var zvt=s(kX);DWo=r(zvt,"IBertForTokenClassification"),zvt.forEach(t),GWo=r(WSe," (I-BERT model)"),WSe.forEach(t),OWo=i(J),M0=n(J,"LI",{});var QSe=s(M0);vue=n(QSe,"STRONG",{});var Wvt=s(vue);VWo=r(Wvt,"layoutlm"),Wvt.forEach(t),XWo=r(QSe," \u2014 "),SX=n(QSe,"A",{href:!0});var Qvt=s(SX);zWo=r(Qvt,"LayoutLMForTokenClassification"),Qvt.forEach(t),WWo=r(QSe," (LayoutLM model)"),QSe.forEach(t),QWo=i(J),E0=n(J,"LI",{});var HSe=s(E0);Fue=n(HSe,"STRONG",{});var Hvt=s(Fue);HWo=r(Hvt,"layoutlmv2"),Hvt.forEach(t),UWo=r(HSe," \u2014 "),RX=n(HSe,"A",{href:!0});var Uvt=s(RX);JWo=r(Uvt,"LayoutLMv2ForTokenClassification"),Uvt.forEach(t),YWo=r(HSe," (LayoutLMv2 model)"),HSe.forEach(t),KWo=i(J),C0=n(J,"LI",{});var USe=s(C0);Tue=n(USe,"STRONG",{});var Jvt=s(Tue);ZWo=r(Jvt,"layoutlmv3"),Jvt.forEach(t),eQo=r(USe," \u2014 "),PX=n(USe,"A",{href:!0});var Yvt=s(PX);oQo=r(Yvt,"LayoutLMv3ForTokenClassification"),Yvt.forEach(t),rQo=r(USe," (LayoutLMv3 model)"),USe.forEach(t),tQo=i(J),w0=n(J,"LI",{});var JSe=s(w0);Mue=n(JSe,"STRONG",{});var Kvt=s(Mue);aQo=r(Kvt,"longformer"),Kvt.forEach(t),nQo=r(JSe," \u2014 "),BX=n(JSe,"A",{href:!0});var Zvt=s(BX);sQo=r(Zvt,"LongformerForTokenClassification"),Zvt.forEach(t),lQo=r(JSe," (Longformer model)"),JSe.forEach(t),iQo=i(J),A0=n(J,"LI",{});var YSe=s(A0);Eue=n(YSe,"STRONG",{});var e0t=s(Eue);dQo=r(e0t,"megatron-bert"),e0t.forEach(t),cQo=r(YSe," \u2014 "),IX=n(YSe,"A",{href:!0});var o0t=s(IX);fQo=r(o0t,"MegatronBertForTokenClassification"),o0t.forEach(t),mQo=r(YSe," (Megatron-BERT model)"),YSe.forEach(t),gQo=i(J),L0=n(J,"LI",{});var KSe=s(L0);Cue=n(KSe,"STRONG",{});var r0t=s(Cue);hQo=r(r0t,"mobilebert"),r0t.forEach(t),pQo=r(KSe," \u2014 "),NX=n(KSe,"A",{href:!0});var t0t=s(NX);uQo=r(t0t,"MobileBertForTokenClassification"),t0t.forEach(t),_Qo=r(KSe," (MobileBERT model)"),KSe.forEach(t),bQo=i(J),y0=n(J,"LI",{});var ZSe=s(y0);wue=n(ZSe,"STRONG",{});var a0t=s(wue);vQo=r(a0t,"mpnet"),a0t.forEach(t),FQo=r(ZSe," \u2014 "),qX=n(ZSe,"A",{href:!0});var n0t=s(qX);TQo=r(n0t,"MPNetForTokenClassification"),n0t.forEach(t),MQo=r(ZSe," (MPNet model)"),ZSe.forEach(t),EQo=i(J),x0=n(J,"LI",{});var eRe=s(x0);Aue=n(eRe,"STRONG",{});var s0t=s(Aue);CQo=r(s0t,"nystromformer"),s0t.forEach(t),wQo=r(eRe," \u2014 "),jX=n(eRe,"A",{href:!0});var l0t=s(jX);AQo=r(l0t,"NystromformerForTokenClassification"),l0t.forEach(t),LQo=r(eRe," (Nystr\xF6mformer model)"),eRe.forEach(t),yQo=i(J),$0=n(J,"LI",{});var oRe=s($0);Lue=n(oRe,"STRONG",{});var i0t=s(Lue);xQo=r(i0t,"qdqbert"),i0t.forEach(t),$Qo=r(oRe," \u2014 "),DX=n(oRe,"A",{href:!0});var d0t=s(DX);kQo=r(d0t,"QDQBertForTokenClassification"),d0t.forEach(t),SQo=r(oRe," (QDQBert model)"),oRe.forEach(t),RQo=i(J),k0=n(J,"LI",{});var rRe=s(k0);yue=n(rRe,"STRONG",{});var c0t=s(yue);PQo=r(c0t,"rembert"),c0t.forEach(t),BQo=r(rRe," \u2014 "),GX=n(rRe,"A",{href:!0});var f0t=s(GX);IQo=r(f0t,"RemBertForTokenClassification"),f0t.forEach(t),NQo=r(rRe," (RemBERT model)"),rRe.forEach(t),qQo=i(J),S0=n(J,"LI",{});var tRe=s(S0);xue=n(tRe,"STRONG",{});var m0t=s(xue);jQo=r(m0t,"roberta"),m0t.forEach(t),DQo=r(tRe," \u2014 "),OX=n(tRe,"A",{href:!0});var g0t=s(OX);GQo=r(g0t,"RobertaForTokenClassification"),g0t.forEach(t),OQo=r(tRe," (RoBERTa model)"),tRe.forEach(t),VQo=i(J),R0=n(J,"LI",{});var aRe=s(R0);$ue=n(aRe,"STRONG",{});var h0t=s($ue);XQo=r(h0t,"roformer"),h0t.forEach(t),zQo=r(aRe," \u2014 "),VX=n(aRe,"A",{href:!0});var p0t=s(VX);WQo=r(p0t,"RoFormerForTokenClassification"),p0t.forEach(t),QQo=r(aRe," (RoFormer model)"),aRe.forEach(t),HQo=i(J),P0=n(J,"LI",{});var nRe=s(P0);kue=n(nRe,"STRONG",{});var u0t=s(kue);UQo=r(u0t,"squeezebert"),u0t.forEach(t),JQo=r(nRe," \u2014 "),XX=n(nRe,"A",{href:!0});var _0t=s(XX);YQo=r(_0t,"SqueezeBertForTokenClassification"),_0t.forEach(t),KQo=r(nRe," (SqueezeBERT model)"),nRe.forEach(t),ZQo=i(J),B0=n(J,"LI",{});var sRe=s(B0);Sue=n(sRe,"STRONG",{});var b0t=s(Sue);eHo=r(b0t,"xlm"),b0t.forEach(t),oHo=r(sRe," \u2014 "),zX=n(sRe,"A",{href:!0});var v0t=s(zX);rHo=r(v0t,"XLMForTokenClassification"),v0t.forEach(t),tHo=r(sRe," (XLM model)"),sRe.forEach(t),aHo=i(J),I0=n(J,"LI",{});var lRe=s(I0);Rue=n(lRe,"STRONG",{});var F0t=s(Rue);nHo=r(F0t,"xlm-roberta"),F0t.forEach(t),sHo=r(lRe," \u2014 "),WX=n(lRe,"A",{href:!0});var T0t=s(WX);lHo=r(T0t,"XLMRobertaForTokenClassification"),T0t.forEach(t),iHo=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),dHo=i(J),N0=n(J,"LI",{});var iRe=s(N0);Pue=n(iRe,"STRONG",{});var M0t=s(Pue);cHo=r(M0t,"xlm-roberta-xl"),M0t.forEach(t),fHo=r(iRe," \u2014 "),QX=n(iRe,"A",{href:!0});var E0t=s(QX);mHo=r(E0t,"XLMRobertaXLForTokenClassification"),E0t.forEach(t),gHo=r(iRe," (XLM-RoBERTa-XL model)"),iRe.forEach(t),hHo=i(J),q0=n(J,"LI",{});var dRe=s(q0);Bue=n(dRe,"STRONG",{});var C0t=s(Bue);pHo=r(C0t,"xlnet"),C0t.forEach(t),uHo=r(dRe," \u2014 "),HX=n(dRe,"A",{href:!0});var w0t=s(HX);_Ho=r(w0t,"XLNetForTokenClassification"),w0t.forEach(t),bHo=r(dRe," (XLNet model)"),dRe.forEach(t),vHo=i(J),j0=n(J,"LI",{});var cRe=s(j0);Iue=n(cRe,"STRONG",{});var A0t=s(Iue);FHo=r(A0t,"yoso"),A0t.forEach(t),THo=r(cRe," \u2014 "),UX=n(cRe,"A",{href:!0});var L0t=s(UX);MHo=r(L0t,"YosoForTokenClassification"),L0t.forEach(t),EHo=r(cRe," (YOSO model)"),cRe.forEach(t),J.forEach(t),CHo=i(ga),D0=n(ga,"P",{});var fRe=s(D0);wHo=r(fRe,"The model is set in evaluation mode by default using "),Nue=n(fRe,"CODE",{});var y0t=s(Nue);AHo=r(y0t,"model.eval()"),y0t.forEach(t),LHo=r(fRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(fRe,"CODE",{});var x0t=s(que);yHo=r(x0t,"model.train()"),x0t.forEach(t),fRe.forEach(t),xHo=i(ga),T(G0.$$.fragment,ga),ga.forEach(t),nl.forEach(t),qGe=i(f),dd=n(f,"H2",{class:!0});var XVe=s(dd);O0=n(XVe,"A",{id:!0,class:!0,href:!0});var $0t=s(O0);jue=n($0t,"SPAN",{});var k0t=s(jue);T(qL.$$.fragment,k0t),k0t.forEach(t),$0t.forEach(t),$Ho=i(XVe),Due=n(XVe,"SPAN",{});var S0t=s(Due);kHo=r(S0t,"AutoModelForQuestionAnswering"),S0t.forEach(t),XVe.forEach(t),jGe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(jL.$$.fragment,sl),SHo=i(sl),cd=n(sl,"P",{});var Toe=s(cd);RHo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JX=n(Toe,"A",{href:!0});var R0t=s(JX);PHo=r(R0t,"from_pretrained()"),R0t.forEach(t),BHo=r(Toe," class method or the "),YX=n(Toe,"A",{href:!0});var P0t=s(YX);IHo=r(P0t,"from_config()"),P0t.forEach(t),NHo=r(Toe,` class
method.`),Toe.forEach(t),qHo=i(sl),DL=n(sl,"P",{});var zVe=s(DL);jHo=r(zVe,"This class cannot be instantiated directly using "),Gue=n(zVe,"CODE",{});var B0t=s(Gue);DHo=r(B0t,"__init__()"),B0t.forEach(t),GHo=r(zVe," (throws an error)."),zVe.forEach(t),OHo=i(sl),pt=n(sl,"DIV",{class:!0});var O3=s(pt);T(GL.$$.fragment,O3),VHo=i(O3),Oue=n(O3,"P",{});var I0t=s(Oue);XHo=r(I0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I0t.forEach(t),zHo=i(O3),fd=n(O3,"P",{});var Moe=s(fd);WHo=r(Moe,`Note:
Loading a model from its configuration file does `),Vue=n(Moe,"STRONG",{});var N0t=s(Vue);QHo=r(N0t,"not"),N0t.forEach(t),HHo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(Moe,"A",{href:!0});var q0t=s(KX);UHo=r(q0t,"from_pretrained()"),q0t.forEach(t),JHo=r(Moe," to load the model weights."),Moe.forEach(t),YHo=i(O3),T(V0.$$.fragment,O3),O3.forEach(t),KHo=i(sl),no=n(sl,"DIV",{class:!0});var ha=s(no);T(OL.$$.fragment,ha),ZHo=i(ha),Xue=n(ha,"P",{});var j0t=s(Xue);eUo=r(j0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j0t.forEach(t),oUo=i(ha),Oa=n(ha,"P",{});var V3=s(Oa);rUo=r(V3,"The model class to instantiate is selected based on the "),zue=n(V3,"CODE",{});var D0t=s(zue);tUo=r(D0t,"model_type"),D0t.forEach(t),aUo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Wue=n(V3,"CODE",{});var G0t=s(Wue);nUo=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),sUo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(V3,"CODE",{});var O0t=s(Que);lUo=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),iUo=r(V3,":"),V3.forEach(t),dUo=i(ha),V=n(ha,"UL",{});var X=s(V);X0=n(X,"LI",{});var mRe=s(X0);Hue=n(mRe,"STRONG",{});var V0t=s(Hue);cUo=r(V0t,"albert"),V0t.forEach(t),fUo=r(mRe," \u2014 "),ZX=n(mRe,"A",{href:!0});var X0t=s(ZX);mUo=r(X0t,"AlbertForQuestionAnswering"),X0t.forEach(t),gUo=r(mRe," (ALBERT model)"),mRe.forEach(t),hUo=i(X),z0=n(X,"LI",{});var gRe=s(z0);Uue=n(gRe,"STRONG",{});var z0t=s(Uue);pUo=r(z0t,"bart"),z0t.forEach(t),uUo=r(gRe," \u2014 "),ez=n(gRe,"A",{href:!0});var W0t=s(ez);_Uo=r(W0t,"BartForQuestionAnswering"),W0t.forEach(t),bUo=r(gRe," (BART model)"),gRe.forEach(t),vUo=i(X),W0=n(X,"LI",{});var hRe=s(W0);Jue=n(hRe,"STRONG",{});var Q0t=s(Jue);FUo=r(Q0t,"bert"),Q0t.forEach(t),TUo=r(hRe," \u2014 "),oz=n(hRe,"A",{href:!0});var H0t=s(oz);MUo=r(H0t,"BertForQuestionAnswering"),H0t.forEach(t),EUo=r(hRe," (BERT model)"),hRe.forEach(t),CUo=i(X),Q0=n(X,"LI",{});var pRe=s(Q0);Yue=n(pRe,"STRONG",{});var U0t=s(Yue);wUo=r(U0t,"big_bird"),U0t.forEach(t),AUo=r(pRe," \u2014 "),rz=n(pRe,"A",{href:!0});var J0t=s(rz);LUo=r(J0t,"BigBirdForQuestionAnswering"),J0t.forEach(t),yUo=r(pRe," (BigBird model)"),pRe.forEach(t),xUo=i(X),H0=n(X,"LI",{});var uRe=s(H0);Kue=n(uRe,"STRONG",{});var Y0t=s(Kue);$Uo=r(Y0t,"bigbird_pegasus"),Y0t.forEach(t),kUo=r(uRe," \u2014 "),tz=n(uRe,"A",{href:!0});var K0t=s(tz);SUo=r(K0t,"BigBirdPegasusForQuestionAnswering"),K0t.forEach(t),RUo=r(uRe," (BigBird-Pegasus model)"),uRe.forEach(t),PUo=i(X),U0=n(X,"LI",{});var _Re=s(U0);Zue=n(_Re,"STRONG",{});var Z0t=s(Zue);BUo=r(Z0t,"camembert"),Z0t.forEach(t),IUo=r(_Re," \u2014 "),az=n(_Re,"A",{href:!0});var eFt=s(az);NUo=r(eFt,"CamembertForQuestionAnswering"),eFt.forEach(t),qUo=r(_Re," (CamemBERT model)"),_Re.forEach(t),jUo=i(X),J0=n(X,"LI",{});var bRe=s(J0);e_e=n(bRe,"STRONG",{});var oFt=s(e_e);DUo=r(oFt,"canine"),oFt.forEach(t),GUo=r(bRe," \u2014 "),nz=n(bRe,"A",{href:!0});var rFt=s(nz);OUo=r(rFt,"CanineForQuestionAnswering"),rFt.forEach(t),VUo=r(bRe," (CANINE model)"),bRe.forEach(t),XUo=i(X),Y0=n(X,"LI",{});var vRe=s(Y0);o_e=n(vRe,"STRONG",{});var tFt=s(o_e);zUo=r(tFt,"convbert"),tFt.forEach(t),WUo=r(vRe," \u2014 "),sz=n(vRe,"A",{href:!0});var aFt=s(sz);QUo=r(aFt,"ConvBertForQuestionAnswering"),aFt.forEach(t),HUo=r(vRe," (ConvBERT model)"),vRe.forEach(t),UUo=i(X),K0=n(X,"LI",{});var FRe=s(K0);r_e=n(FRe,"STRONG",{});var nFt=s(r_e);JUo=r(nFt,"data2vec-text"),nFt.forEach(t),YUo=r(FRe," \u2014 "),lz=n(FRe,"A",{href:!0});var sFt=s(lz);KUo=r(sFt,"Data2VecTextForQuestionAnswering"),sFt.forEach(t),ZUo=r(FRe," (Data2VecText model)"),FRe.forEach(t),eJo=i(X),Z0=n(X,"LI",{});var TRe=s(Z0);t_e=n(TRe,"STRONG",{});var lFt=s(t_e);oJo=r(lFt,"deberta"),lFt.forEach(t),rJo=r(TRe," \u2014 "),iz=n(TRe,"A",{href:!0});var iFt=s(iz);tJo=r(iFt,"DebertaForQuestionAnswering"),iFt.forEach(t),aJo=r(TRe," (DeBERTa model)"),TRe.forEach(t),nJo=i(X),eF=n(X,"LI",{});var MRe=s(eF);a_e=n(MRe,"STRONG",{});var dFt=s(a_e);sJo=r(dFt,"deberta-v2"),dFt.forEach(t),lJo=r(MRe," \u2014 "),dz=n(MRe,"A",{href:!0});var cFt=s(dz);iJo=r(cFt,"DebertaV2ForQuestionAnswering"),cFt.forEach(t),dJo=r(MRe," (DeBERTa-v2 model)"),MRe.forEach(t),cJo=i(X),oF=n(X,"LI",{});var ERe=s(oF);n_e=n(ERe,"STRONG",{});var fFt=s(n_e);fJo=r(fFt,"distilbert"),fFt.forEach(t),mJo=r(ERe," \u2014 "),cz=n(ERe,"A",{href:!0});var mFt=s(cz);gJo=r(mFt,"DistilBertForQuestionAnswering"),mFt.forEach(t),hJo=r(ERe," (DistilBERT model)"),ERe.forEach(t),pJo=i(X),rF=n(X,"LI",{});var CRe=s(rF);s_e=n(CRe,"STRONG",{});var gFt=s(s_e);uJo=r(gFt,"electra"),gFt.forEach(t),_Jo=r(CRe," \u2014 "),fz=n(CRe,"A",{href:!0});var hFt=s(fz);bJo=r(hFt,"ElectraForQuestionAnswering"),hFt.forEach(t),vJo=r(CRe," (ELECTRA model)"),CRe.forEach(t),FJo=i(X),tF=n(X,"LI",{});var wRe=s(tF);l_e=n(wRe,"STRONG",{});var pFt=s(l_e);TJo=r(pFt,"flaubert"),pFt.forEach(t),MJo=r(wRe," \u2014 "),mz=n(wRe,"A",{href:!0});var uFt=s(mz);EJo=r(uFt,"FlaubertForQuestionAnsweringSimple"),uFt.forEach(t),CJo=r(wRe," (FlauBERT model)"),wRe.forEach(t),wJo=i(X),aF=n(X,"LI",{});var ARe=s(aF);i_e=n(ARe,"STRONG",{});var _Ft=s(i_e);AJo=r(_Ft,"fnet"),_Ft.forEach(t),LJo=r(ARe," \u2014 "),gz=n(ARe,"A",{href:!0});var bFt=s(gz);yJo=r(bFt,"FNetForQuestionAnswering"),bFt.forEach(t),xJo=r(ARe," (FNet model)"),ARe.forEach(t),$Jo=i(X),nF=n(X,"LI",{});var LRe=s(nF);d_e=n(LRe,"STRONG",{});var vFt=s(d_e);kJo=r(vFt,"funnel"),vFt.forEach(t),SJo=r(LRe," \u2014 "),hz=n(LRe,"A",{href:!0});var FFt=s(hz);RJo=r(FFt,"FunnelForQuestionAnswering"),FFt.forEach(t),PJo=r(LRe," (Funnel Transformer model)"),LRe.forEach(t),BJo=i(X),sF=n(X,"LI",{});var yRe=s(sF);c_e=n(yRe,"STRONG",{});var TFt=s(c_e);IJo=r(TFt,"gptj"),TFt.forEach(t),NJo=r(yRe," \u2014 "),pz=n(yRe,"A",{href:!0});var MFt=s(pz);qJo=r(MFt,"GPTJForQuestionAnswering"),MFt.forEach(t),jJo=r(yRe," (GPT-J model)"),yRe.forEach(t),DJo=i(X),lF=n(X,"LI",{});var xRe=s(lF);f_e=n(xRe,"STRONG",{});var EFt=s(f_e);GJo=r(EFt,"ibert"),EFt.forEach(t),OJo=r(xRe," \u2014 "),uz=n(xRe,"A",{href:!0});var CFt=s(uz);VJo=r(CFt,"IBertForQuestionAnswering"),CFt.forEach(t),XJo=r(xRe," (I-BERT model)"),xRe.forEach(t),zJo=i(X),iF=n(X,"LI",{});var $Re=s(iF);m_e=n($Re,"STRONG",{});var wFt=s(m_e);WJo=r(wFt,"layoutlmv2"),wFt.forEach(t),QJo=r($Re," \u2014 "),_z=n($Re,"A",{href:!0});var AFt=s(_z);HJo=r(AFt,"LayoutLMv2ForQuestionAnswering"),AFt.forEach(t),UJo=r($Re," (LayoutLMv2 model)"),$Re.forEach(t),JJo=i(X),dF=n(X,"LI",{});var kRe=s(dF);g_e=n(kRe,"STRONG",{});var LFt=s(g_e);YJo=r(LFt,"layoutlmv3"),LFt.forEach(t),KJo=r(kRe," \u2014 "),bz=n(kRe,"A",{href:!0});var yFt=s(bz);ZJo=r(yFt,"LayoutLMv3ForQuestionAnswering"),yFt.forEach(t),eYo=r(kRe," (LayoutLMv3 model)"),kRe.forEach(t),oYo=i(X),cF=n(X,"LI",{});var SRe=s(cF);h_e=n(SRe,"STRONG",{});var xFt=s(h_e);rYo=r(xFt,"led"),xFt.forEach(t),tYo=r(SRe," \u2014 "),vz=n(SRe,"A",{href:!0});var $Ft=s(vz);aYo=r($Ft,"LEDForQuestionAnswering"),$Ft.forEach(t),nYo=r(SRe," (LED model)"),SRe.forEach(t),sYo=i(X),fF=n(X,"LI",{});var RRe=s(fF);p_e=n(RRe,"STRONG",{});var kFt=s(p_e);lYo=r(kFt,"longformer"),kFt.forEach(t),iYo=r(RRe," \u2014 "),Fz=n(RRe,"A",{href:!0});var SFt=s(Fz);dYo=r(SFt,"LongformerForQuestionAnswering"),SFt.forEach(t),cYo=r(RRe," (Longformer model)"),RRe.forEach(t),fYo=i(X),mF=n(X,"LI",{});var PRe=s(mF);u_e=n(PRe,"STRONG",{});var RFt=s(u_e);mYo=r(RFt,"lxmert"),RFt.forEach(t),gYo=r(PRe," \u2014 "),Tz=n(PRe,"A",{href:!0});var PFt=s(Tz);hYo=r(PFt,"LxmertForQuestionAnswering"),PFt.forEach(t),pYo=r(PRe," (LXMERT model)"),PRe.forEach(t),uYo=i(X),gF=n(X,"LI",{});var BRe=s(gF);__e=n(BRe,"STRONG",{});var BFt=s(__e);_Yo=r(BFt,"mbart"),BFt.forEach(t),bYo=r(BRe," \u2014 "),Mz=n(BRe,"A",{href:!0});var IFt=s(Mz);vYo=r(IFt,"MBartForQuestionAnswering"),IFt.forEach(t),FYo=r(BRe," (mBART model)"),BRe.forEach(t),TYo=i(X),hF=n(X,"LI",{});var IRe=s(hF);b_e=n(IRe,"STRONG",{});var NFt=s(b_e);MYo=r(NFt,"megatron-bert"),NFt.forEach(t),EYo=r(IRe," \u2014 "),Ez=n(IRe,"A",{href:!0});var qFt=s(Ez);CYo=r(qFt,"MegatronBertForQuestionAnswering"),qFt.forEach(t),wYo=r(IRe," (Megatron-BERT model)"),IRe.forEach(t),AYo=i(X),pF=n(X,"LI",{});var NRe=s(pF);v_e=n(NRe,"STRONG",{});var jFt=s(v_e);LYo=r(jFt,"mobilebert"),jFt.forEach(t),yYo=r(NRe," \u2014 "),Cz=n(NRe,"A",{href:!0});var DFt=s(Cz);xYo=r(DFt,"MobileBertForQuestionAnswering"),DFt.forEach(t),$Yo=r(NRe," (MobileBERT model)"),NRe.forEach(t),kYo=i(X),uF=n(X,"LI",{});var qRe=s(uF);F_e=n(qRe,"STRONG",{});var GFt=s(F_e);SYo=r(GFt,"mpnet"),GFt.forEach(t),RYo=r(qRe," \u2014 "),wz=n(qRe,"A",{href:!0});var OFt=s(wz);PYo=r(OFt,"MPNetForQuestionAnswering"),OFt.forEach(t),BYo=r(qRe," (MPNet model)"),qRe.forEach(t),IYo=i(X),_F=n(X,"LI",{});var jRe=s(_F);T_e=n(jRe,"STRONG",{});var VFt=s(T_e);NYo=r(VFt,"nystromformer"),VFt.forEach(t),qYo=r(jRe," \u2014 "),Az=n(jRe,"A",{href:!0});var XFt=s(Az);jYo=r(XFt,"NystromformerForQuestionAnswering"),XFt.forEach(t),DYo=r(jRe," (Nystr\xF6mformer model)"),jRe.forEach(t),GYo=i(X),bF=n(X,"LI",{});var DRe=s(bF);M_e=n(DRe,"STRONG",{});var zFt=s(M_e);OYo=r(zFt,"qdqbert"),zFt.forEach(t),VYo=r(DRe," \u2014 "),Lz=n(DRe,"A",{href:!0});var WFt=s(Lz);XYo=r(WFt,"QDQBertForQuestionAnswering"),WFt.forEach(t),zYo=r(DRe," (QDQBert model)"),DRe.forEach(t),WYo=i(X),vF=n(X,"LI",{});var GRe=s(vF);E_e=n(GRe,"STRONG",{});var QFt=s(E_e);QYo=r(QFt,"reformer"),QFt.forEach(t),HYo=r(GRe," \u2014 "),yz=n(GRe,"A",{href:!0});var HFt=s(yz);UYo=r(HFt,"ReformerForQuestionAnswering"),HFt.forEach(t),JYo=r(GRe," (Reformer model)"),GRe.forEach(t),YYo=i(X),FF=n(X,"LI",{});var ORe=s(FF);C_e=n(ORe,"STRONG",{});var UFt=s(C_e);KYo=r(UFt,"rembert"),UFt.forEach(t),ZYo=r(ORe," \u2014 "),xz=n(ORe,"A",{href:!0});var JFt=s(xz);eKo=r(JFt,"RemBertForQuestionAnswering"),JFt.forEach(t),oKo=r(ORe," (RemBERT model)"),ORe.forEach(t),rKo=i(X),TF=n(X,"LI",{});var VRe=s(TF);w_e=n(VRe,"STRONG",{});var YFt=s(w_e);tKo=r(YFt,"roberta"),YFt.forEach(t),aKo=r(VRe," \u2014 "),$z=n(VRe,"A",{href:!0});var KFt=s($z);nKo=r(KFt,"RobertaForQuestionAnswering"),KFt.forEach(t),sKo=r(VRe," (RoBERTa model)"),VRe.forEach(t),lKo=i(X),MF=n(X,"LI",{});var XRe=s(MF);A_e=n(XRe,"STRONG",{});var ZFt=s(A_e);iKo=r(ZFt,"roformer"),ZFt.forEach(t),dKo=r(XRe," \u2014 "),kz=n(XRe,"A",{href:!0});var e6t=s(kz);cKo=r(e6t,"RoFormerForQuestionAnswering"),e6t.forEach(t),fKo=r(XRe," (RoFormer model)"),XRe.forEach(t),mKo=i(X),EF=n(X,"LI",{});var zRe=s(EF);L_e=n(zRe,"STRONG",{});var o6t=s(L_e);gKo=r(o6t,"splinter"),o6t.forEach(t),hKo=r(zRe," \u2014 "),Sz=n(zRe,"A",{href:!0});var r6t=s(Sz);pKo=r(r6t,"SplinterForQuestionAnswering"),r6t.forEach(t),uKo=r(zRe," (Splinter model)"),zRe.forEach(t),_Ko=i(X),CF=n(X,"LI",{});var WRe=s(CF);y_e=n(WRe,"STRONG",{});var t6t=s(y_e);bKo=r(t6t,"squeezebert"),t6t.forEach(t),vKo=r(WRe," \u2014 "),Rz=n(WRe,"A",{href:!0});var a6t=s(Rz);FKo=r(a6t,"SqueezeBertForQuestionAnswering"),a6t.forEach(t),TKo=r(WRe," (SqueezeBERT model)"),WRe.forEach(t),MKo=i(X),wF=n(X,"LI",{});var QRe=s(wF);x_e=n(QRe,"STRONG",{});var n6t=s(x_e);EKo=r(n6t,"xlm"),n6t.forEach(t),CKo=r(QRe," \u2014 "),Pz=n(QRe,"A",{href:!0});var s6t=s(Pz);wKo=r(s6t,"XLMForQuestionAnsweringSimple"),s6t.forEach(t),AKo=r(QRe," (XLM model)"),QRe.forEach(t),LKo=i(X),AF=n(X,"LI",{});var HRe=s(AF);$_e=n(HRe,"STRONG",{});var l6t=s($_e);yKo=r(l6t,"xlm-roberta"),l6t.forEach(t),xKo=r(HRe," \u2014 "),Bz=n(HRe,"A",{href:!0});var i6t=s(Bz);$Ko=r(i6t,"XLMRobertaForQuestionAnswering"),i6t.forEach(t),kKo=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),SKo=i(X),LF=n(X,"LI",{});var URe=s(LF);k_e=n(URe,"STRONG",{});var d6t=s(k_e);RKo=r(d6t,"xlm-roberta-xl"),d6t.forEach(t),PKo=r(URe," \u2014 "),Iz=n(URe,"A",{href:!0});var c6t=s(Iz);BKo=r(c6t,"XLMRobertaXLForQuestionAnswering"),c6t.forEach(t),IKo=r(URe," (XLM-RoBERTa-XL model)"),URe.forEach(t),NKo=i(X),yF=n(X,"LI",{});var JRe=s(yF);S_e=n(JRe,"STRONG",{});var f6t=s(S_e);qKo=r(f6t,"xlnet"),f6t.forEach(t),jKo=r(JRe," \u2014 "),Nz=n(JRe,"A",{href:!0});var m6t=s(Nz);DKo=r(m6t,"XLNetForQuestionAnsweringSimple"),m6t.forEach(t),GKo=r(JRe," (XLNet model)"),JRe.forEach(t),OKo=i(X),xF=n(X,"LI",{});var YRe=s(xF);R_e=n(YRe,"STRONG",{});var g6t=s(R_e);VKo=r(g6t,"yoso"),g6t.forEach(t),XKo=r(YRe," \u2014 "),qz=n(YRe,"A",{href:!0});var h6t=s(qz);zKo=r(h6t,"YosoForQuestionAnswering"),h6t.forEach(t),WKo=r(YRe," (YOSO model)"),YRe.forEach(t),X.forEach(t),QKo=i(ha),$F=n(ha,"P",{});var KRe=s($F);HKo=r(KRe,"The model is set in evaluation mode by default using "),P_e=n(KRe,"CODE",{});var p6t=s(P_e);UKo=r(p6t,"model.eval()"),p6t.forEach(t),JKo=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(KRe,"CODE",{});var u6t=s(B_e);YKo=r(u6t,"model.train()"),u6t.forEach(t),KRe.forEach(t),KKo=i(ha),T(kF.$$.fragment,ha),ha.forEach(t),sl.forEach(t),DGe=i(f),md=n(f,"H2",{class:!0});var WVe=s(md);SF=n(WVe,"A",{id:!0,class:!0,href:!0});var _6t=s(SF);I_e=n(_6t,"SPAN",{});var b6t=s(I_e);T(VL.$$.fragment,b6t),b6t.forEach(t),_6t.forEach(t),ZKo=i(WVe),N_e=n(WVe,"SPAN",{});var v6t=s(N_e);eZo=r(v6t,"AutoModelForTableQuestionAnswering"),v6t.forEach(t),WVe.forEach(t),GGe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(XL.$$.fragment,ll),oZo=i(ll),gd=n(ll,"P",{});var Eoe=s(gd);rZo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jz=n(Eoe,"A",{href:!0});var F6t=s(jz);tZo=r(F6t,"from_pretrained()"),F6t.forEach(t),aZo=r(Eoe," class method or the "),Dz=n(Eoe,"A",{href:!0});var T6t=s(Dz);nZo=r(T6t,"from_config()"),T6t.forEach(t),sZo=r(Eoe,` class
method.`),Eoe.forEach(t),lZo=i(ll),zL=n(ll,"P",{});var QVe=s(zL);iZo=r(QVe,"This class cannot be instantiated directly using "),q_e=n(QVe,"CODE",{});var M6t=s(q_e);dZo=r(M6t,"__init__()"),M6t.forEach(t),cZo=r(QVe," (throws an error)."),QVe.forEach(t),fZo=i(ll),ut=n(ll,"DIV",{class:!0});var X3=s(ut);T(WL.$$.fragment,X3),mZo=i(X3),j_e=n(X3,"P",{});var E6t=s(j_e);gZo=r(E6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E6t.forEach(t),hZo=i(X3),hd=n(X3,"P",{});var Coe=s(hd);pZo=r(Coe,`Note:
Loading a model from its configuration file does `),D_e=n(Coe,"STRONG",{});var C6t=s(D_e);uZo=r(C6t,"not"),C6t.forEach(t),_Zo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(Coe,"A",{href:!0});var w6t=s(Gz);bZo=r(w6t,"from_pretrained()"),w6t.forEach(t),vZo=r(Coe," to load the model weights."),Coe.forEach(t),FZo=i(X3),T(RF.$$.fragment,X3),X3.forEach(t),TZo=i(ll),so=n(ll,"DIV",{class:!0});var pa=s(so);T(QL.$$.fragment,pa),MZo=i(pa),G_e=n(pa,"P",{});var A6t=s(G_e);EZo=r(A6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),A6t.forEach(t),CZo=i(pa),Va=n(pa,"P",{});var z3=s(Va);wZo=r(z3,"The model class to instantiate is selected based on the "),O_e=n(z3,"CODE",{});var L6t=s(O_e);AZo=r(L6t,"model_type"),L6t.forEach(t),LZo=r(z3,` property of the config object (either
passed as an argument or loaded from `),V_e=n(z3,"CODE",{});var y6t=s(V_e);yZo=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),xZo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(z3,"CODE",{});var x6t=s(X_e);$Zo=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),kZo=r(z3,":"),z3.forEach(t),SZo=i(pa),z_e=n(pa,"UL",{});var $6t=s(z_e);PF=n($6t,"LI",{});var ZRe=s(PF);W_e=n(ZRe,"STRONG",{});var k6t=s(W_e);RZo=r(k6t,"tapas"),k6t.forEach(t),PZo=r(ZRe," \u2014 "),Oz=n(ZRe,"A",{href:!0});var S6t=s(Oz);BZo=r(S6t,"TapasForQuestionAnswering"),S6t.forEach(t),IZo=r(ZRe," (TAPAS model)"),ZRe.forEach(t),$6t.forEach(t),NZo=i(pa),BF=n(pa,"P",{});var ePe=s(BF);qZo=r(ePe,"The model is set in evaluation mode by default using "),Q_e=n(ePe,"CODE",{});var R6t=s(Q_e);jZo=r(R6t,"model.eval()"),R6t.forEach(t),DZo=r(ePe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(ePe,"CODE",{});var P6t=s(H_e);GZo=r(P6t,"model.train()"),P6t.forEach(t),ePe.forEach(t),OZo=i(pa),T(IF.$$.fragment,pa),pa.forEach(t),ll.forEach(t),OGe=i(f),pd=n(f,"H2",{class:!0});var HVe=s(pd);NF=n(HVe,"A",{id:!0,class:!0,href:!0});var B6t=s(NF);U_e=n(B6t,"SPAN",{});var I6t=s(U_e);T(HL.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),VZo=i(HVe),J_e=n(HVe,"SPAN",{});var N6t=s(J_e);XZo=r(N6t,"AutoModelForImageClassification"),N6t.forEach(t),HVe.forEach(t),VGe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(UL.$$.fragment,il),zZo=i(il),ud=n(il,"P",{});var woe=s(ud);WZo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vz=n(woe,"A",{href:!0});var q6t=s(Vz);QZo=r(q6t,"from_pretrained()"),q6t.forEach(t),HZo=r(woe," class method or the "),Xz=n(woe,"A",{href:!0});var j6t=s(Xz);UZo=r(j6t,"from_config()"),j6t.forEach(t),JZo=r(woe,` class
method.`),woe.forEach(t),YZo=i(il),JL=n(il,"P",{});var UVe=s(JL);KZo=r(UVe,"This class cannot be instantiated directly using "),Y_e=n(UVe,"CODE",{});var D6t=s(Y_e);ZZo=r(D6t,"__init__()"),D6t.forEach(t),eer=r(UVe," (throws an error)."),UVe.forEach(t),oer=i(il),_t=n(il,"DIV",{class:!0});var W3=s(_t);T(YL.$$.fragment,W3),rer=i(W3),K_e=n(W3,"P",{});var G6t=s(K_e);ter=r(G6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G6t.forEach(t),aer=i(W3),_d=n(W3,"P",{});var Aoe=s(_d);ner=r(Aoe,`Note:
Loading a model from its configuration file does `),Z_e=n(Aoe,"STRONG",{});var O6t=s(Z_e);ser=r(O6t,"not"),O6t.forEach(t),ler=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(Aoe,"A",{href:!0});var V6t=s(zz);ier=r(V6t,"from_pretrained()"),V6t.forEach(t),der=r(Aoe," to load the model weights."),Aoe.forEach(t),cer=i(W3),T(qF.$$.fragment,W3),W3.forEach(t),fer=i(il),lo=n(il,"DIV",{class:!0});var ua=s(lo);T(KL.$$.fragment,ua),mer=i(ua),e1e=n(ua,"P",{});var X6t=s(e1e);ger=r(X6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X6t.forEach(t),her=i(ua),Xa=n(ua,"P",{});var Q3=s(Xa);per=r(Q3,"The model class to instantiate is selected based on the "),o1e=n(Q3,"CODE",{});var z6t=s(o1e);uer=r(z6t,"model_type"),z6t.forEach(t),_er=r(Q3,` property of the config object (either
passed as an argument or loaded from `),r1e=n(Q3,"CODE",{});var W6t=s(r1e);ber=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),ver=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(Q3,"CODE",{});var Q6t=s(t1e);Fer=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),Ter=r(Q3,":"),Q3.forEach(t),Mer=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);jF=n(Te,"LI",{});var oPe=s(jF);a1e=n(oPe,"STRONG",{});var H6t=s(a1e);Eer=r(H6t,"beit"),H6t.forEach(t),Cer=r(oPe," \u2014 "),Wz=n(oPe,"A",{href:!0});var U6t=s(Wz);wer=r(U6t,"BeitForImageClassification"),U6t.forEach(t),Aer=r(oPe," (BEiT model)"),oPe.forEach(t),Ler=i(Te),DF=n(Te,"LI",{});var rPe=s(DF);n1e=n(rPe,"STRONG",{});var J6t=s(n1e);yer=r(J6t,"convnext"),J6t.forEach(t),xer=r(rPe," \u2014 "),Qz=n(rPe,"A",{href:!0});var Y6t=s(Qz);$er=r(Y6t,"ConvNextForImageClassification"),Y6t.forEach(t),ker=r(rPe," (ConvNeXT model)"),rPe.forEach(t),Ser=i(Te),GF=n(Te,"LI",{});var tPe=s(GF);s1e=n(tPe,"STRONG",{});var K6t=s(s1e);Rer=r(K6t,"cvt"),K6t.forEach(t),Per=r(tPe," \u2014 "),Hz=n(tPe,"A",{href:!0});var Z6t=s(Hz);Ber=r(Z6t,"CvtForImageClassification"),Z6t.forEach(t),Ier=r(tPe," (CvT model)"),tPe.forEach(t),Ner=i(Te),OF=n(Te,"LI",{});var aPe=s(OF);l1e=n(aPe,"STRONG",{});var eTt=s(l1e);qer=r(eTt,"data2vec-vision"),eTt.forEach(t),jer=r(aPe," \u2014 "),Uz=n(aPe,"A",{href:!0});var oTt=s(Uz);Der=r(oTt,"Data2VecVisionForImageClassification"),oTt.forEach(t),Ger=r(aPe," (Data2VecVision model)"),aPe.forEach(t),Oer=i(Te),Os=n(Te,"LI",{});var Xk=s(Os);i1e=n(Xk,"STRONG",{});var rTt=s(i1e);Ver=r(rTt,"deit"),rTt.forEach(t),Xer=r(Xk," \u2014 "),Jz=n(Xk,"A",{href:!0});var tTt=s(Jz);zer=r(tTt,"DeiTForImageClassification"),tTt.forEach(t),Wer=r(Xk," or "),Yz=n(Xk,"A",{href:!0});var aTt=s(Yz);Qer=r(aTt,"DeiTForImageClassificationWithTeacher"),aTt.forEach(t),Her=r(Xk," (DeiT model)"),Xk.forEach(t),Uer=i(Te),VF=n(Te,"LI",{});var nPe=s(VF);d1e=n(nPe,"STRONG",{});var nTt=s(d1e);Jer=r(nTt,"imagegpt"),nTt.forEach(t),Yer=r(nPe," \u2014 "),Kz=n(nPe,"A",{href:!0});var sTt=s(Kz);Ker=r(sTt,"ImageGPTForImageClassification"),sTt.forEach(t),Zer=r(nPe," (ImageGPT model)"),nPe.forEach(t),eor=i(Te),Vs=n(Te,"LI",{});var zk=s(Vs);c1e=n(zk,"STRONG",{});var lTt=s(c1e);oor=r(lTt,"levit"),lTt.forEach(t),ror=r(zk," \u2014 "),Zz=n(zk,"A",{href:!0});var iTt=s(Zz);tor=r(iTt,"LevitForImageClassification"),iTt.forEach(t),aor=r(zk," or "),eW=n(zk,"A",{href:!0});var dTt=s(eW);nor=r(dTt,"LevitForImageClassificationWithTeacher"),dTt.forEach(t),sor=r(zk," (LeViT model)"),zk.forEach(t),lor=i(Te),bt=n(Te,"LI",{});var yf=s(bt);f1e=n(yf,"STRONG",{});var cTt=s(f1e);ior=r(cTt,"perceiver"),cTt.forEach(t),dor=r(yf," \u2014 "),oW=n(yf,"A",{href:!0});var fTt=s(oW);cor=r(fTt,"PerceiverForImageClassificationLearned"),fTt.forEach(t),mor=r(yf," or "),rW=n(yf,"A",{href:!0});var mTt=s(rW);gor=r(mTt,"PerceiverForImageClassificationFourier"),mTt.forEach(t),hor=r(yf," or "),tW=n(yf,"A",{href:!0});var gTt=s(tW);por=r(gTt,"PerceiverForImageClassificationConvProcessing"),gTt.forEach(t),uor=r(yf," (Perceiver model)"),yf.forEach(t),_or=i(Te),XF=n(Te,"LI",{});var sPe=s(XF);m1e=n(sPe,"STRONG",{});var hTt=s(m1e);bor=r(hTt,"poolformer"),hTt.forEach(t),vor=r(sPe," \u2014 "),aW=n(sPe,"A",{href:!0});var pTt=s(aW);For=r(pTt,"PoolFormerForImageClassification"),pTt.forEach(t),Tor=r(sPe," (PoolFormer model)"),sPe.forEach(t),Mor=i(Te),zF=n(Te,"LI",{});var lPe=s(zF);g1e=n(lPe,"STRONG",{});var uTt=s(g1e);Eor=r(uTt,"regnet"),uTt.forEach(t),Cor=r(lPe," \u2014 "),nW=n(lPe,"A",{href:!0});var _Tt=s(nW);wor=r(_Tt,"RegNetForImageClassification"),_Tt.forEach(t),Aor=r(lPe," (RegNet model)"),lPe.forEach(t),Lor=i(Te),WF=n(Te,"LI",{});var iPe=s(WF);h1e=n(iPe,"STRONG",{});var bTt=s(h1e);yor=r(bTt,"resnet"),bTt.forEach(t),xor=r(iPe," \u2014 "),sW=n(iPe,"A",{href:!0});var vTt=s(sW);$or=r(vTt,"ResNetForImageClassification"),vTt.forEach(t),kor=r(iPe," (ResNet model)"),iPe.forEach(t),Sor=i(Te),QF=n(Te,"LI",{});var dPe=s(QF);p1e=n(dPe,"STRONG",{});var FTt=s(p1e);Ror=r(FTt,"segformer"),FTt.forEach(t),Por=r(dPe," \u2014 "),lW=n(dPe,"A",{href:!0});var TTt=s(lW);Bor=r(TTt,"SegformerForImageClassification"),TTt.forEach(t),Ior=r(dPe," (SegFormer model)"),dPe.forEach(t),Nor=i(Te),HF=n(Te,"LI",{});var cPe=s(HF);u1e=n(cPe,"STRONG",{});var MTt=s(u1e);qor=r(MTt,"swin"),MTt.forEach(t),jor=r(cPe," \u2014 "),iW=n(cPe,"A",{href:!0});var ETt=s(iW);Dor=r(ETt,"SwinForImageClassification"),ETt.forEach(t),Gor=r(cPe," (Swin Transformer model)"),cPe.forEach(t),Oor=i(Te),UF=n(Te,"LI",{});var fPe=s(UF);_1e=n(fPe,"STRONG",{});var CTt=s(_1e);Vor=r(CTt,"van"),CTt.forEach(t),Xor=r(fPe," \u2014 "),dW=n(fPe,"A",{href:!0});var wTt=s(dW);zor=r(wTt,"VanForImageClassification"),wTt.forEach(t),Wor=r(fPe," (VAN model)"),fPe.forEach(t),Qor=i(Te),JF=n(Te,"LI",{});var mPe=s(JF);b1e=n(mPe,"STRONG",{});var ATt=s(b1e);Hor=r(ATt,"vit"),ATt.forEach(t),Uor=r(mPe," \u2014 "),cW=n(mPe,"A",{href:!0});var LTt=s(cW);Jor=r(LTt,"ViTForImageClassification"),LTt.forEach(t),Yor=r(mPe," (ViT model)"),mPe.forEach(t),Te.forEach(t),Kor=i(ua),YF=n(ua,"P",{});var gPe=s(YF);Zor=r(gPe,"The model is set in evaluation mode by default using "),v1e=n(gPe,"CODE",{});var yTt=s(v1e);err=r(yTt,"model.eval()"),yTt.forEach(t),orr=r(gPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(gPe,"CODE",{});var xTt=s(F1e);rrr=r(xTt,"model.train()"),xTt.forEach(t),gPe.forEach(t),trr=i(ua),T(KF.$$.fragment,ua),ua.forEach(t),il.forEach(t),XGe=i(f),bd=n(f,"H2",{class:!0});var JVe=s(bd);ZF=n(JVe,"A",{id:!0,class:!0,href:!0});var $Tt=s(ZF);T1e=n($Tt,"SPAN",{});var kTt=s(T1e);T(ZL.$$.fragment,kTt),kTt.forEach(t),$Tt.forEach(t),arr=i(JVe),M1e=n(JVe,"SPAN",{});var STt=s(M1e);nrr=r(STt,"AutoModelForVision2Seq"),STt.forEach(t),JVe.forEach(t),zGe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(ey.$$.fragment,dl),srr=i(dl),vd=n(dl,"P",{});var Loe=s(vd);lrr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fW=n(Loe,"A",{href:!0});var RTt=s(fW);irr=r(RTt,"from_pretrained()"),RTt.forEach(t),drr=r(Loe," class method or the "),mW=n(Loe,"A",{href:!0});var PTt=s(mW);crr=r(PTt,"from_config()"),PTt.forEach(t),frr=r(Loe,` class
method.`),Loe.forEach(t),mrr=i(dl),oy=n(dl,"P",{});var YVe=s(oy);grr=r(YVe,"This class cannot be instantiated directly using "),E1e=n(YVe,"CODE",{});var BTt=s(E1e);hrr=r(BTt,"__init__()"),BTt.forEach(t),prr=r(YVe," (throws an error)."),YVe.forEach(t),urr=i(dl),vt=n(dl,"DIV",{class:!0});var H3=s(vt);T(ry.$$.fragment,H3),_rr=i(H3),C1e=n(H3,"P",{});var ITt=s(C1e);brr=r(ITt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ITt.forEach(t),vrr=i(H3),Fd=n(H3,"P",{});var yoe=s(Fd);Frr=r(yoe,`Note:
Loading a model from its configuration file does `),w1e=n(yoe,"STRONG",{});var NTt=s(w1e);Trr=r(NTt,"not"),NTt.forEach(t),Mrr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(yoe,"A",{href:!0});var qTt=s(gW);Err=r(qTt,"from_pretrained()"),qTt.forEach(t),Crr=r(yoe," to load the model weights."),yoe.forEach(t),wrr=i(H3),T(e6.$$.fragment,H3),H3.forEach(t),Arr=i(dl),io=n(dl,"DIV",{class:!0});var _a=s(io);T(ty.$$.fragment,_a),Lrr=i(_a),A1e=n(_a,"P",{});var jTt=s(A1e);yrr=r(jTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jTt.forEach(t),xrr=i(_a),za=n(_a,"P",{});var U3=s(za);$rr=r(U3,"The model class to instantiate is selected based on the "),L1e=n(U3,"CODE",{});var DTt=s(L1e);krr=r(DTt,"model_type"),DTt.forEach(t),Srr=r(U3,` property of the config object (either
passed as an argument or loaded from `),y1e=n(U3,"CODE",{});var GTt=s(y1e);Rrr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),Prr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(U3,"CODE",{});var OTt=s(x1e);Brr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),Irr=r(U3,":"),U3.forEach(t),Nrr=i(_a),$1e=n(_a,"UL",{});var VTt=s($1e);o6=n(VTt,"LI",{});var hPe=s(o6);k1e=n(hPe,"STRONG",{});var XTt=s(k1e);qrr=r(XTt,"vision-encoder-decoder"),XTt.forEach(t),jrr=r(hPe," \u2014 "),hW=n(hPe,"A",{href:!0});var zTt=s(hW);Drr=r(zTt,"VisionEncoderDecoderModel"),zTt.forEach(t),Grr=r(hPe," (Vision Encoder decoder model)"),hPe.forEach(t),VTt.forEach(t),Orr=i(_a),r6=n(_a,"P",{});var pPe=s(r6);Vrr=r(pPe,"The model is set in evaluation mode by default using "),S1e=n(pPe,"CODE",{});var WTt=s(S1e);Xrr=r(WTt,"model.eval()"),WTt.forEach(t),zrr=r(pPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(pPe,"CODE",{});var QTt=s(R1e);Wrr=r(QTt,"model.train()"),QTt.forEach(t),pPe.forEach(t),Qrr=i(_a),T(t6.$$.fragment,_a),_a.forEach(t),dl.forEach(t),WGe=i(f),Td=n(f,"H2",{class:!0});var KVe=s(Td);a6=n(KVe,"A",{id:!0,class:!0,href:!0});var HTt=s(a6);P1e=n(HTt,"SPAN",{});var UTt=s(P1e);T(ay.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),Hrr=i(KVe),B1e=n(KVe,"SPAN",{});var JTt=s(B1e);Urr=r(JTt,"AutoModelForVisualQuestionAnswering"),JTt.forEach(t),KVe.forEach(t),QGe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(ny.$$.fragment,cl),Jrr=i(cl),Md=n(cl,"P",{});var xoe=s(Md);Yrr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),pW=n(xoe,"A",{href:!0});var YTt=s(pW);Krr=r(YTt,"from_pretrained()"),YTt.forEach(t),Zrr=r(xoe," class method or the "),uW=n(xoe,"A",{href:!0});var KTt=s(uW);etr=r(KTt,"from_config()"),KTt.forEach(t),otr=r(xoe,` class
method.`),xoe.forEach(t),rtr=i(cl),sy=n(cl,"P",{});var ZVe=s(sy);ttr=r(ZVe,"This class cannot be instantiated directly using "),I1e=n(ZVe,"CODE",{});var ZTt=s(I1e);atr=r(ZTt,"__init__()"),ZTt.forEach(t),ntr=r(ZVe," (throws an error)."),ZVe.forEach(t),str=i(cl),Ft=n(cl,"DIV",{class:!0});var J3=s(Ft);T(ly.$$.fragment,J3),ltr=i(J3),N1e=n(J3,"P",{});var e7t=s(N1e);itr=r(e7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),e7t.forEach(t),dtr=i(J3),Ed=n(J3,"P",{});var $oe=s(Ed);ctr=r($oe,`Note:
Loading a model from its configuration file does `),q1e=n($oe,"STRONG",{});var o7t=s(q1e);ftr=r(o7t,"not"),o7t.forEach(t),mtr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n($oe,"A",{href:!0});var r7t=s(_W);gtr=r(r7t,"from_pretrained()"),r7t.forEach(t),htr=r($oe," to load the model weights."),$oe.forEach(t),ptr=i(J3),T(n6.$$.fragment,J3),J3.forEach(t),utr=i(cl),co=n(cl,"DIV",{class:!0});var ba=s(co);T(iy.$$.fragment,ba),_tr=i(ba),j1e=n(ba,"P",{});var t7t=s(j1e);btr=r(t7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),t7t.forEach(t),vtr=i(ba),Wa=n(ba,"P",{});var Y3=s(Wa);Ftr=r(Y3,"The model class to instantiate is selected based on the "),D1e=n(Y3,"CODE",{});var a7t=s(D1e);Ttr=r(a7t,"model_type"),a7t.forEach(t),Mtr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),G1e=n(Y3,"CODE",{});var n7t=s(G1e);Etr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),Ctr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(Y3,"CODE",{});var s7t=s(O1e);wtr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),Atr=r(Y3,":"),Y3.forEach(t),Ltr=i(ba),V1e=n(ba,"UL",{});var l7t=s(V1e);s6=n(l7t,"LI",{});var uPe=s(s6);X1e=n(uPe,"STRONG",{});var i7t=s(X1e);ytr=r(i7t,"vilt"),i7t.forEach(t),xtr=r(uPe," \u2014 "),bW=n(uPe,"A",{href:!0});var d7t=s(bW);$tr=r(d7t,"ViltForQuestionAnswering"),d7t.forEach(t),ktr=r(uPe," (ViLT model)"),uPe.forEach(t),l7t.forEach(t),Str=i(ba),l6=n(ba,"P",{});var _Pe=s(l6);Rtr=r(_Pe,"The model is set in evaluation mode by default using "),z1e=n(_Pe,"CODE",{});var c7t=s(z1e);Ptr=r(c7t,"model.eval()"),c7t.forEach(t),Btr=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=n(_Pe,"CODE",{});var f7t=s(W1e);Itr=r(f7t,"model.train()"),f7t.forEach(t),_Pe.forEach(t),Ntr=i(ba),T(i6.$$.fragment,ba),ba.forEach(t),cl.forEach(t),HGe=i(f),Cd=n(f,"H2",{class:!0});var eXe=s(Cd);d6=n(eXe,"A",{id:!0,class:!0,href:!0});var m7t=s(d6);Q1e=n(m7t,"SPAN",{});var g7t=s(Q1e);T(dy.$$.fragment,g7t),g7t.forEach(t),m7t.forEach(t),qtr=i(eXe),H1e=n(eXe,"SPAN",{});var h7t=s(H1e);jtr=r(h7t,"AutoModelForAudioClassification"),h7t.forEach(t),eXe.forEach(t),UGe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(cy.$$.fragment,fl),Dtr=i(fl),wd=n(fl,"P",{});var koe=s(wd);Gtr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vW=n(koe,"A",{href:!0});var p7t=s(vW);Otr=r(p7t,"from_pretrained()"),p7t.forEach(t),Vtr=r(koe," class method or the "),FW=n(koe,"A",{href:!0});var u7t=s(FW);Xtr=r(u7t,"from_config()"),u7t.forEach(t),ztr=r(koe,` class
method.`),koe.forEach(t),Wtr=i(fl),fy=n(fl,"P",{});var oXe=s(fy);Qtr=r(oXe,"This class cannot be instantiated directly using "),U1e=n(oXe,"CODE",{});var _7t=s(U1e);Htr=r(_7t,"__init__()"),_7t.forEach(t),Utr=r(oXe," (throws an error)."),oXe.forEach(t),Jtr=i(fl),Tt=n(fl,"DIV",{class:!0});var K3=s(Tt);T(my.$$.fragment,K3),Ytr=i(K3),J1e=n(K3,"P",{});var b7t=s(J1e);Ktr=r(b7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),b7t.forEach(t),Ztr=i(K3),Ad=n(K3,"P",{});var Soe=s(Ad);ear=r(Soe,`Note:
Loading a model from its configuration file does `),Y1e=n(Soe,"STRONG",{});var v7t=s(Y1e);oar=r(v7t,"not"),v7t.forEach(t),rar=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Soe,"A",{href:!0});var F7t=s(TW);tar=r(F7t,"from_pretrained()"),F7t.forEach(t),aar=r(Soe," to load the model weights."),Soe.forEach(t),nar=i(K3),T(c6.$$.fragment,K3),K3.forEach(t),sar=i(fl),fo=n(fl,"DIV",{class:!0});var va=s(fo);T(gy.$$.fragment,va),lar=i(va),K1e=n(va,"P",{});var T7t=s(K1e);iar=r(T7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),T7t.forEach(t),dar=i(va),Qa=n(va,"P",{});var Z3=s(Qa);car=r(Z3,"The model class to instantiate is selected based on the "),Z1e=n(Z3,"CODE",{});var M7t=s(Z1e);far=r(M7t,"model_type"),M7t.forEach(t),mar=r(Z3,` property of the config object (either
passed as an argument or loaded from `),e2e=n(Z3,"CODE",{});var E7t=s(e2e);gar=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),har=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(Z3,"CODE",{});var C7t=s(o2e);par=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),uar=r(Z3,":"),Z3.forEach(t),_ar=i(va),Pe=n(va,"UL",{});var ze=s(Pe);f6=n(ze,"LI",{});var bPe=s(f6);r2e=n(bPe,"STRONG",{});var w7t=s(r2e);bar=r(w7t,"data2vec-audio"),w7t.forEach(t),Far=r(bPe," \u2014 "),MW=n(bPe,"A",{href:!0});var A7t=s(MW);Tar=r(A7t,"Data2VecAudioForSequenceClassification"),A7t.forEach(t),Mar=r(bPe," (Data2VecAudio model)"),bPe.forEach(t),Ear=i(ze),m6=n(ze,"LI",{});var vPe=s(m6);t2e=n(vPe,"STRONG",{});var L7t=s(t2e);Car=r(L7t,"hubert"),L7t.forEach(t),war=r(vPe," \u2014 "),EW=n(vPe,"A",{href:!0});var y7t=s(EW);Aar=r(y7t,"HubertForSequenceClassification"),y7t.forEach(t),Lar=r(vPe," (Hubert model)"),vPe.forEach(t),yar=i(ze),g6=n(ze,"LI",{});var FPe=s(g6);a2e=n(FPe,"STRONG",{});var x7t=s(a2e);xar=r(x7t,"sew"),x7t.forEach(t),$ar=r(FPe," \u2014 "),CW=n(FPe,"A",{href:!0});var $7t=s(CW);kar=r($7t,"SEWForSequenceClassification"),$7t.forEach(t),Sar=r(FPe," (SEW model)"),FPe.forEach(t),Rar=i(ze),h6=n(ze,"LI",{});var TPe=s(h6);n2e=n(TPe,"STRONG",{});var k7t=s(n2e);Par=r(k7t,"sew-d"),k7t.forEach(t),Bar=r(TPe," \u2014 "),wW=n(TPe,"A",{href:!0});var S7t=s(wW);Iar=r(S7t,"SEWDForSequenceClassification"),S7t.forEach(t),Nar=r(TPe," (SEW-D model)"),TPe.forEach(t),qar=i(ze),p6=n(ze,"LI",{});var MPe=s(p6);s2e=n(MPe,"STRONG",{});var R7t=s(s2e);jar=r(R7t,"unispeech"),R7t.forEach(t),Dar=r(MPe," \u2014 "),AW=n(MPe,"A",{href:!0});var P7t=s(AW);Gar=r(P7t,"UniSpeechForSequenceClassification"),P7t.forEach(t),Oar=r(MPe," (UniSpeech model)"),MPe.forEach(t),Var=i(ze),u6=n(ze,"LI",{});var EPe=s(u6);l2e=n(EPe,"STRONG",{});var B7t=s(l2e);Xar=r(B7t,"unispeech-sat"),B7t.forEach(t),zar=r(EPe," \u2014 "),LW=n(EPe,"A",{href:!0});var I7t=s(LW);War=r(I7t,"UniSpeechSatForSequenceClassification"),I7t.forEach(t),Qar=r(EPe," (UniSpeechSat model)"),EPe.forEach(t),Har=i(ze),_6=n(ze,"LI",{});var CPe=s(_6);i2e=n(CPe,"STRONG",{});var N7t=s(i2e);Uar=r(N7t,"wav2vec2"),N7t.forEach(t),Jar=r(CPe," \u2014 "),yW=n(CPe,"A",{href:!0});var q7t=s(yW);Yar=r(q7t,"Wav2Vec2ForSequenceClassification"),q7t.forEach(t),Kar=r(CPe," (Wav2Vec2 model)"),CPe.forEach(t),Zar=i(ze),b6=n(ze,"LI",{});var wPe=s(b6);d2e=n(wPe,"STRONG",{});var j7t=s(d2e);enr=r(j7t,"wav2vec2-conformer"),j7t.forEach(t),onr=r(wPe," \u2014 "),xW=n(wPe,"A",{href:!0});var D7t=s(xW);rnr=r(D7t,"Wav2Vec2ConformerForSequenceClassification"),D7t.forEach(t),tnr=r(wPe," (Wav2Vec2-Conformer model)"),wPe.forEach(t),anr=i(ze),v6=n(ze,"LI",{});var APe=s(v6);c2e=n(APe,"STRONG",{});var G7t=s(c2e);nnr=r(G7t,"wavlm"),G7t.forEach(t),snr=r(APe," \u2014 "),$W=n(APe,"A",{href:!0});var O7t=s($W);lnr=r(O7t,"WavLMForSequenceClassification"),O7t.forEach(t),inr=r(APe," (WavLM model)"),APe.forEach(t),ze.forEach(t),dnr=i(va),F6=n(va,"P",{});var LPe=s(F6);cnr=r(LPe,"The model is set in evaluation mode by default using "),f2e=n(LPe,"CODE",{});var V7t=s(f2e);fnr=r(V7t,"model.eval()"),V7t.forEach(t),mnr=r(LPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(LPe,"CODE",{});var X7t=s(m2e);gnr=r(X7t,"model.train()"),X7t.forEach(t),LPe.forEach(t),hnr=i(va),T(T6.$$.fragment,va),va.forEach(t),fl.forEach(t),JGe=i(f),Ld=n(f,"H2",{class:!0});var rXe=s(Ld);M6=n(rXe,"A",{id:!0,class:!0,href:!0});var z7t=s(M6);g2e=n(z7t,"SPAN",{});var W7t=s(g2e);T(hy.$$.fragment,W7t),W7t.forEach(t),z7t.forEach(t),pnr=i(rXe),h2e=n(rXe,"SPAN",{});var Q7t=s(h2e);unr=r(Q7t,"AutoModelForAudioFrameClassification"),Q7t.forEach(t),rXe.forEach(t),YGe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(py.$$.fragment,ml),_nr=i(ml),yd=n(ml,"P",{});var Roe=s(yd);bnr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kW=n(Roe,"A",{href:!0});var H7t=s(kW);vnr=r(H7t,"from_pretrained()"),H7t.forEach(t),Fnr=r(Roe," class method or the "),SW=n(Roe,"A",{href:!0});var U7t=s(SW);Tnr=r(U7t,"from_config()"),U7t.forEach(t),Mnr=r(Roe,` class
method.`),Roe.forEach(t),Enr=i(ml),uy=n(ml,"P",{});var tXe=s(uy);Cnr=r(tXe,"This class cannot be instantiated directly using "),p2e=n(tXe,"CODE",{});var J7t=s(p2e);wnr=r(J7t,"__init__()"),J7t.forEach(t),Anr=r(tXe," (throws an error)."),tXe.forEach(t),Lnr=i(ml),Mt=n(ml,"DIV",{class:!0});var ew=s(Mt);T(_y.$$.fragment,ew),ynr=i(ew),u2e=n(ew,"P",{});var Y7t=s(u2e);xnr=r(Y7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Y7t.forEach(t),$nr=i(ew),xd=n(ew,"P",{});var Poe=s(xd);knr=r(Poe,`Note:
Loading a model from its configuration file does `),_2e=n(Poe,"STRONG",{});var K7t=s(_2e);Snr=r(K7t,"not"),K7t.forEach(t),Rnr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(Poe,"A",{href:!0});var Z7t=s(RW);Pnr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),Bnr=r(Poe," to load the model weights."),Poe.forEach(t),Inr=i(ew),T(E6.$$.fragment,ew),ew.forEach(t),Nnr=i(ml),mo=n(ml,"DIV",{class:!0});var Fa=s(mo);T(by.$$.fragment,Fa),qnr=i(Fa),b2e=n(Fa,"P",{});var e8t=s(b2e);jnr=r(e8t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),e8t.forEach(t),Dnr=i(Fa),Ha=n(Fa,"P",{});var ow=s(Ha);Gnr=r(ow,"The model class to instantiate is selected based on the "),v2e=n(ow,"CODE",{});var o8t=s(v2e);Onr=r(o8t,"model_type"),o8t.forEach(t),Vnr=r(ow,` property of the config object (either
passed as an argument or loaded from `),F2e=n(ow,"CODE",{});var r8t=s(F2e);Xnr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),znr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(ow,"CODE",{});var t8t=s(T2e);Wnr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Qnr=r(ow,":"),ow.forEach(t),Hnr=i(Fa),et=n(Fa,"UL",{});var gl=s(et);C6=n(gl,"LI",{});var yPe=s(C6);M2e=n(yPe,"STRONG",{});var a8t=s(M2e);Unr=r(a8t,"data2vec-audio"),a8t.forEach(t),Jnr=r(yPe," \u2014 "),PW=n(yPe,"A",{href:!0});var n8t=s(PW);Ynr=r(n8t,"Data2VecAudioForAudioFrameClassification"),n8t.forEach(t),Knr=r(yPe," (Data2VecAudio model)"),yPe.forEach(t),Znr=i(gl),w6=n(gl,"LI",{});var xPe=s(w6);E2e=n(xPe,"STRONG",{});var s8t=s(E2e);esr=r(s8t,"unispeech-sat"),s8t.forEach(t),osr=r(xPe," \u2014 "),BW=n(xPe,"A",{href:!0});var l8t=s(BW);rsr=r(l8t,"UniSpeechSatForAudioFrameClassification"),l8t.forEach(t),tsr=r(xPe," (UniSpeechSat model)"),xPe.forEach(t),asr=i(gl),A6=n(gl,"LI",{});var $Pe=s(A6);C2e=n($Pe,"STRONG",{});var i8t=s(C2e);nsr=r(i8t,"wav2vec2"),i8t.forEach(t),ssr=r($Pe," \u2014 "),IW=n($Pe,"A",{href:!0});var d8t=s(IW);lsr=r(d8t,"Wav2Vec2ForAudioFrameClassification"),d8t.forEach(t),isr=r($Pe," (Wav2Vec2 model)"),$Pe.forEach(t),dsr=i(gl),L6=n(gl,"LI",{});var kPe=s(L6);w2e=n(kPe,"STRONG",{});var c8t=s(w2e);csr=r(c8t,"wav2vec2-conformer"),c8t.forEach(t),fsr=r(kPe," \u2014 "),NW=n(kPe,"A",{href:!0});var f8t=s(NW);msr=r(f8t,"Wav2Vec2ConformerForAudioFrameClassification"),f8t.forEach(t),gsr=r(kPe," (Wav2Vec2-Conformer model)"),kPe.forEach(t),hsr=i(gl),y6=n(gl,"LI",{});var SPe=s(y6);A2e=n(SPe,"STRONG",{});var m8t=s(A2e);psr=r(m8t,"wavlm"),m8t.forEach(t),usr=r(SPe," \u2014 "),qW=n(SPe,"A",{href:!0});var g8t=s(qW);_sr=r(g8t,"WavLMForAudioFrameClassification"),g8t.forEach(t),bsr=r(SPe," (WavLM model)"),SPe.forEach(t),gl.forEach(t),vsr=i(Fa),x6=n(Fa,"P",{});var RPe=s(x6);Fsr=r(RPe,"The model is set in evaluation mode by default using "),L2e=n(RPe,"CODE",{});var h8t=s(L2e);Tsr=r(h8t,"model.eval()"),h8t.forEach(t),Msr=r(RPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=n(RPe,"CODE",{});var p8t=s(y2e);Esr=r(p8t,"model.train()"),p8t.forEach(t),RPe.forEach(t),Csr=i(Fa),T($6.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),KGe=i(f),$d=n(f,"H2",{class:!0});var aXe=s($d);k6=n(aXe,"A",{id:!0,class:!0,href:!0});var u8t=s(k6);x2e=n(u8t,"SPAN",{});var _8t=s(x2e);T(vy.$$.fragment,_8t),_8t.forEach(t),u8t.forEach(t),wsr=i(aXe),$2e=n(aXe,"SPAN",{});var b8t=s($2e);Asr=r(b8t,"AutoModelForCTC"),b8t.forEach(t),aXe.forEach(t),ZGe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(Fy.$$.fragment,hl),Lsr=i(hl),kd=n(hl,"P",{});var Boe=s(kd);ysr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),jW=n(Boe,"A",{href:!0});var v8t=s(jW);xsr=r(v8t,"from_pretrained()"),v8t.forEach(t),$sr=r(Boe," class method or the "),DW=n(Boe,"A",{href:!0});var F8t=s(DW);ksr=r(F8t,"from_config()"),F8t.forEach(t),Ssr=r(Boe,` class
method.`),Boe.forEach(t),Rsr=i(hl),Ty=n(hl,"P",{});var nXe=s(Ty);Psr=r(nXe,"This class cannot be instantiated directly using "),k2e=n(nXe,"CODE",{});var T8t=s(k2e);Bsr=r(T8t,"__init__()"),T8t.forEach(t),Isr=r(nXe," (throws an error)."),nXe.forEach(t),Nsr=i(hl),Et=n(hl,"DIV",{class:!0});var rw=s(Et);T(My.$$.fragment,rw),qsr=i(rw),S2e=n(rw,"P",{});var M8t=s(S2e);jsr=r(M8t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),M8t.forEach(t),Dsr=i(rw),Sd=n(rw,"P",{});var Ioe=s(Sd);Gsr=r(Ioe,`Note:
Loading a model from its configuration file does `),R2e=n(Ioe,"STRONG",{});var E8t=s(R2e);Osr=r(E8t,"not"),E8t.forEach(t),Vsr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Ioe,"A",{href:!0});var C8t=s(GW);Xsr=r(C8t,"from_pretrained()"),C8t.forEach(t),zsr=r(Ioe," to load the model weights."),Ioe.forEach(t),Wsr=i(rw),T(S6.$$.fragment,rw),rw.forEach(t),Qsr=i(hl),go=n(hl,"DIV",{class:!0});var Ta=s(go);T(Ey.$$.fragment,Ta),Hsr=i(Ta),P2e=n(Ta,"P",{});var w8t=s(P2e);Usr=r(w8t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),w8t.forEach(t),Jsr=i(Ta),Ua=n(Ta,"P",{});var tw=s(Ua);Ysr=r(tw,"The model class to instantiate is selected based on the "),B2e=n(tw,"CODE",{});var A8t=s(B2e);Ksr=r(A8t,"model_type"),A8t.forEach(t),Zsr=r(tw,` property of the config object (either
passed as an argument or loaded from `),I2e=n(tw,"CODE",{});var L8t=s(I2e);elr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),olr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(tw,"CODE",{});var y8t=s(N2e);rlr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),tlr=r(tw,":"),tw.forEach(t),alr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);R6=n(Be,"LI",{});var PPe=s(R6);q2e=n(PPe,"STRONG",{});var x8t=s(q2e);nlr=r(x8t,"data2vec-audio"),x8t.forEach(t),slr=r(PPe," \u2014 "),OW=n(PPe,"A",{href:!0});var $8t=s(OW);llr=r($8t,"Data2VecAudioForCTC"),$8t.forEach(t),ilr=r(PPe," (Data2VecAudio model)"),PPe.forEach(t),dlr=i(Be),P6=n(Be,"LI",{});var BPe=s(P6);j2e=n(BPe,"STRONG",{});var k8t=s(j2e);clr=r(k8t,"hubert"),k8t.forEach(t),flr=r(BPe," \u2014 "),VW=n(BPe,"A",{href:!0});var S8t=s(VW);mlr=r(S8t,"HubertForCTC"),S8t.forEach(t),glr=r(BPe," (Hubert model)"),BPe.forEach(t),hlr=i(Be),B6=n(Be,"LI",{});var IPe=s(B6);D2e=n(IPe,"STRONG",{});var R8t=s(D2e);plr=r(R8t,"mctct"),R8t.forEach(t),ulr=r(IPe," \u2014 "),XW=n(IPe,"A",{href:!0});var P8t=s(XW);_lr=r(P8t,"MCTCTForCTC"),P8t.forEach(t),blr=r(IPe," (M-CTC-T model)"),IPe.forEach(t),vlr=i(Be),I6=n(Be,"LI",{});var NPe=s(I6);G2e=n(NPe,"STRONG",{});var B8t=s(G2e);Flr=r(B8t,"sew"),B8t.forEach(t),Tlr=r(NPe," \u2014 "),zW=n(NPe,"A",{href:!0});var I8t=s(zW);Mlr=r(I8t,"SEWForCTC"),I8t.forEach(t),Elr=r(NPe," (SEW model)"),NPe.forEach(t),Clr=i(Be),N6=n(Be,"LI",{});var qPe=s(N6);O2e=n(qPe,"STRONG",{});var N8t=s(O2e);wlr=r(N8t,"sew-d"),N8t.forEach(t),Alr=r(qPe," \u2014 "),WW=n(qPe,"A",{href:!0});var q8t=s(WW);Llr=r(q8t,"SEWDForCTC"),q8t.forEach(t),ylr=r(qPe," (SEW-D model)"),qPe.forEach(t),xlr=i(Be),q6=n(Be,"LI",{});var jPe=s(q6);V2e=n(jPe,"STRONG",{});var j8t=s(V2e);$lr=r(j8t,"unispeech"),j8t.forEach(t),klr=r(jPe," \u2014 "),QW=n(jPe,"A",{href:!0});var D8t=s(QW);Slr=r(D8t,"UniSpeechForCTC"),D8t.forEach(t),Rlr=r(jPe," (UniSpeech model)"),jPe.forEach(t),Plr=i(Be),j6=n(Be,"LI",{});var DPe=s(j6);X2e=n(DPe,"STRONG",{});var G8t=s(X2e);Blr=r(G8t,"unispeech-sat"),G8t.forEach(t),Ilr=r(DPe," \u2014 "),HW=n(DPe,"A",{href:!0});var O8t=s(HW);Nlr=r(O8t,"UniSpeechSatForCTC"),O8t.forEach(t),qlr=r(DPe," (UniSpeechSat model)"),DPe.forEach(t),jlr=i(Be),D6=n(Be,"LI",{});var GPe=s(D6);z2e=n(GPe,"STRONG",{});var V8t=s(z2e);Dlr=r(V8t,"wav2vec2"),V8t.forEach(t),Glr=r(GPe," \u2014 "),UW=n(GPe,"A",{href:!0});var X8t=s(UW);Olr=r(X8t,"Wav2Vec2ForCTC"),X8t.forEach(t),Vlr=r(GPe," (Wav2Vec2 model)"),GPe.forEach(t),Xlr=i(Be),G6=n(Be,"LI",{});var OPe=s(G6);W2e=n(OPe,"STRONG",{});var z8t=s(W2e);zlr=r(z8t,"wav2vec2-conformer"),z8t.forEach(t),Wlr=r(OPe," \u2014 "),JW=n(OPe,"A",{href:!0});var W8t=s(JW);Qlr=r(W8t,"Wav2Vec2ConformerForCTC"),W8t.forEach(t),Hlr=r(OPe," (Wav2Vec2-Conformer model)"),OPe.forEach(t),Ulr=i(Be),O6=n(Be,"LI",{});var VPe=s(O6);Q2e=n(VPe,"STRONG",{});var Q8t=s(Q2e);Jlr=r(Q8t,"wavlm"),Q8t.forEach(t),Ylr=r(VPe," \u2014 "),YW=n(VPe,"A",{href:!0});var H8t=s(YW);Klr=r(H8t,"WavLMForCTC"),H8t.forEach(t),Zlr=r(VPe," (WavLM model)"),VPe.forEach(t),Be.forEach(t),eir=i(Ta),V6=n(Ta,"P",{});var XPe=s(V6);oir=r(XPe,"The model is set in evaluation mode by default using "),H2e=n(XPe,"CODE",{});var U8t=s(H2e);rir=r(U8t,"model.eval()"),U8t.forEach(t),tir=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(XPe,"CODE",{});var J8t=s(U2e);air=r(J8t,"model.train()"),J8t.forEach(t),XPe.forEach(t),nir=i(Ta),T(X6.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),eOe=i(f),Rd=n(f,"H2",{class:!0});var sXe=s(Rd);z6=n(sXe,"A",{id:!0,class:!0,href:!0});var Y8t=s(z6);J2e=n(Y8t,"SPAN",{});var K8t=s(J2e);T(Cy.$$.fragment,K8t),K8t.forEach(t),Y8t.forEach(t),sir=i(sXe),Y2e=n(sXe,"SPAN",{});var Z8t=s(Y2e);lir=r(Z8t,"AutoModelForSpeechSeq2Seq"),Z8t.forEach(t),sXe.forEach(t),oOe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T(wy.$$.fragment,pl),iir=i(pl),Pd=n(pl,"P",{});var Noe=s(Pd);dir=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KW=n(Noe,"A",{href:!0});var eMt=s(KW);cir=r(eMt,"from_pretrained()"),eMt.forEach(t),fir=r(Noe," class method or the "),ZW=n(Noe,"A",{href:!0});var oMt=s(ZW);mir=r(oMt,"from_config()"),oMt.forEach(t),gir=r(Noe,` class
method.`),Noe.forEach(t),hir=i(pl),Ay=n(pl,"P",{});var lXe=s(Ay);pir=r(lXe,"This class cannot be instantiated directly using "),K2e=n(lXe,"CODE",{});var rMt=s(K2e);uir=r(rMt,"__init__()"),rMt.forEach(t),_ir=r(lXe," (throws an error)."),lXe.forEach(t),bir=i(pl),Ct=n(pl,"DIV",{class:!0});var aw=s(Ct);T(Ly.$$.fragment,aw),vir=i(aw),Z2e=n(aw,"P",{});var tMt=s(Z2e);Fir=r(tMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tMt.forEach(t),Tir=i(aw),Bd=n(aw,"P",{});var qoe=s(Bd);Mir=r(qoe,`Note:
Loading a model from its configuration file does `),ebe=n(qoe,"STRONG",{});var aMt=s(ebe);Eir=r(aMt,"not"),aMt.forEach(t),Cir=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(qoe,"A",{href:!0});var nMt=s(eQ);wir=r(nMt,"from_pretrained()"),nMt.forEach(t),Air=r(qoe," to load the model weights."),qoe.forEach(t),Lir=i(aw),T(W6.$$.fragment,aw),aw.forEach(t),yir=i(pl),ho=n(pl,"DIV",{class:!0});var Ma=s(ho);T(yy.$$.fragment,Ma),xir=i(Ma),obe=n(Ma,"P",{});var sMt=s(obe);$ir=r(sMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sMt.forEach(t),kir=i(Ma),Ja=n(Ma,"P",{});var nw=s(Ja);Sir=r(nw,"The model class to instantiate is selected based on the "),rbe=n(nw,"CODE",{});var lMt=s(rbe);Rir=r(lMt,"model_type"),lMt.forEach(t),Pir=r(nw,` property of the config object (either
passed as an argument or loaded from `),tbe=n(nw,"CODE",{});var iMt=s(tbe);Bir=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),Iir=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(nw,"CODE",{});var dMt=s(abe);Nir=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),qir=r(nw,":"),nw.forEach(t),jir=i(Ma),xy=n(Ma,"UL",{});var iXe=s(xy);Q6=n(iXe,"LI",{});var zPe=s(Q6);nbe=n(zPe,"STRONG",{});var cMt=s(nbe);Dir=r(cMt,"speech-encoder-decoder"),cMt.forEach(t),Gir=r(zPe," \u2014 "),oQ=n(zPe,"A",{href:!0});var fMt=s(oQ);Oir=r(fMt,"SpeechEncoderDecoderModel"),fMt.forEach(t),Vir=r(zPe," (Speech Encoder decoder model)"),zPe.forEach(t),Xir=i(iXe),H6=n(iXe,"LI",{});var WPe=s(H6);sbe=n(WPe,"STRONG",{});var mMt=s(sbe);zir=r(mMt,"speech_to_text"),mMt.forEach(t),Wir=r(WPe," \u2014 "),rQ=n(WPe,"A",{href:!0});var gMt=s(rQ);Qir=r(gMt,"Speech2TextForConditionalGeneration"),gMt.forEach(t),Hir=r(WPe," (Speech2Text model)"),WPe.forEach(t),iXe.forEach(t),Uir=i(Ma),U6=n(Ma,"P",{});var QPe=s(U6);Jir=r(QPe,"The model is set in evaluation mode by default using "),lbe=n(QPe,"CODE",{});var hMt=s(lbe);Yir=r(hMt,"model.eval()"),hMt.forEach(t),Kir=r(QPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(QPe,"CODE",{});var pMt=s(ibe);Zir=r(pMt,"model.train()"),pMt.forEach(t),QPe.forEach(t),edr=i(Ma),T(J6.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),rOe=i(f),Id=n(f,"H2",{class:!0});var dXe=s(Id);Y6=n(dXe,"A",{id:!0,class:!0,href:!0});var uMt=s(Y6);dbe=n(uMt,"SPAN",{});var _Mt=s(dbe);T($y.$$.fragment,_Mt),_Mt.forEach(t),uMt.forEach(t),odr=i(dXe),cbe=n(dXe,"SPAN",{});var bMt=s(cbe);rdr=r(bMt,"AutoModelForAudioXVector"),bMt.forEach(t),dXe.forEach(t),tOe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(ky.$$.fragment,ul),tdr=i(ul),Nd=n(ul,"P",{});var joe=s(Nd);adr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),tQ=n(joe,"A",{href:!0});var vMt=s(tQ);ndr=r(vMt,"from_pretrained()"),vMt.forEach(t),sdr=r(joe," class method or the "),aQ=n(joe,"A",{href:!0});var FMt=s(aQ);ldr=r(FMt,"from_config()"),FMt.forEach(t),idr=r(joe,` class
method.`),joe.forEach(t),ddr=i(ul),Sy=n(ul,"P",{});var cXe=s(Sy);cdr=r(cXe,"This class cannot be instantiated directly using "),fbe=n(cXe,"CODE",{});var TMt=s(fbe);fdr=r(TMt,"__init__()"),TMt.forEach(t),mdr=r(cXe," (throws an error)."),cXe.forEach(t),gdr=i(ul),wt=n(ul,"DIV",{class:!0});var sw=s(wt);T(Ry.$$.fragment,sw),hdr=i(sw),mbe=n(sw,"P",{});var MMt=s(mbe);pdr=r(MMt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),MMt.forEach(t),udr=i(sw),qd=n(sw,"P",{});var Doe=s(qd);_dr=r(Doe,`Note:
Loading a model from its configuration file does `),gbe=n(Doe,"STRONG",{});var EMt=s(gbe);bdr=r(EMt,"not"),EMt.forEach(t),vdr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(Doe,"A",{href:!0});var CMt=s(nQ);Fdr=r(CMt,"from_pretrained()"),CMt.forEach(t),Tdr=r(Doe," to load the model weights."),Doe.forEach(t),Mdr=i(sw),T(K6.$$.fragment,sw),sw.forEach(t),Edr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(Py.$$.fragment,Ea),Cdr=i(Ea),hbe=n(Ea,"P",{});var wMt=s(hbe);wdr=r(wMt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wMt.forEach(t),Adr=i(Ea),Ya=n(Ea,"P",{});var lw=s(Ya);Ldr=r(lw,"The model class to instantiate is selected based on the "),pbe=n(lw,"CODE",{});var AMt=s(pbe);ydr=r(AMt,"model_type"),AMt.forEach(t),xdr=r(lw,` property of the config object (either
passed as an argument or loaded from `),ube=n(lw,"CODE",{});var LMt=s(ube);$dr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),kdr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(lw,"CODE",{});var yMt=s(_be);Sdr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),Rdr=r(lw,":"),lw.forEach(t),Pdr=i(Ea),ot=n(Ea,"UL",{});var _l=s(ot);Z6=n(_l,"LI",{});var HPe=s(Z6);bbe=n(HPe,"STRONG",{});var xMt=s(bbe);Bdr=r(xMt,"data2vec-audio"),xMt.forEach(t),Idr=r(HPe," \u2014 "),sQ=n(HPe,"A",{href:!0});var $Mt=s(sQ);Ndr=r($Mt,"Data2VecAudioForXVector"),$Mt.forEach(t),qdr=r(HPe," (Data2VecAudio model)"),HPe.forEach(t),jdr=i(_l),eT=n(_l,"LI",{});var UPe=s(eT);vbe=n(UPe,"STRONG",{});var kMt=s(vbe);Ddr=r(kMt,"unispeech-sat"),kMt.forEach(t),Gdr=r(UPe," \u2014 "),lQ=n(UPe,"A",{href:!0});var SMt=s(lQ);Odr=r(SMt,"UniSpeechSatForXVector"),SMt.forEach(t),Vdr=r(UPe," (UniSpeechSat model)"),UPe.forEach(t),Xdr=i(_l),oT=n(_l,"LI",{});var JPe=s(oT);Fbe=n(JPe,"STRONG",{});var RMt=s(Fbe);zdr=r(RMt,"wav2vec2"),RMt.forEach(t),Wdr=r(JPe," \u2014 "),iQ=n(JPe,"A",{href:!0});var PMt=s(iQ);Qdr=r(PMt,"Wav2Vec2ForXVector"),PMt.forEach(t),Hdr=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),Udr=i(_l),rT=n(_l,"LI",{});var YPe=s(rT);Tbe=n(YPe,"STRONG",{});var BMt=s(Tbe);Jdr=r(BMt,"wav2vec2-conformer"),BMt.forEach(t),Ydr=r(YPe," \u2014 "),dQ=n(YPe,"A",{href:!0});var IMt=s(dQ);Kdr=r(IMt,"Wav2Vec2ConformerForXVector"),IMt.forEach(t),Zdr=r(YPe," (Wav2Vec2-Conformer model)"),YPe.forEach(t),ecr=i(_l),tT=n(_l,"LI",{});var KPe=s(tT);Mbe=n(KPe,"STRONG",{});var NMt=s(Mbe);ocr=r(NMt,"wavlm"),NMt.forEach(t),rcr=r(KPe," \u2014 "),cQ=n(KPe,"A",{href:!0});var qMt=s(cQ);tcr=r(qMt,"WavLMForXVector"),qMt.forEach(t),acr=r(KPe," (WavLM model)"),KPe.forEach(t),_l.forEach(t),ncr=i(Ea),aT=n(Ea,"P",{});var ZPe=s(aT);scr=r(ZPe,"The model is set in evaluation mode by default using "),Ebe=n(ZPe,"CODE",{});var jMt=s(Ebe);lcr=r(jMt,"model.eval()"),jMt.forEach(t),icr=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(ZPe,"CODE",{});var DMt=s(Cbe);dcr=r(DMt,"model.train()"),DMt.forEach(t),ZPe.forEach(t),ccr=i(Ea),T(nT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),aOe=i(f),jd=n(f,"H2",{class:!0});var fXe=s(jd);sT=n(fXe,"A",{id:!0,class:!0,href:!0});var GMt=s(sT);wbe=n(GMt,"SPAN",{});var OMt=s(wbe);T(By.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),fcr=i(fXe),Abe=n(fXe,"SPAN",{});var VMt=s(Abe);mcr=r(VMt,"AutoModelForMaskedImageModeling"),VMt.forEach(t),fXe.forEach(t),nOe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(Iy.$$.fragment,bl),gcr=i(bl),Dd=n(bl,"P",{});var Goe=s(Dd);hcr=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fQ=n(Goe,"A",{href:!0});var XMt=s(fQ);pcr=r(XMt,"from_pretrained()"),XMt.forEach(t),ucr=r(Goe," class method or the "),mQ=n(Goe,"A",{href:!0});var zMt=s(mQ);_cr=r(zMt,"from_config()"),zMt.forEach(t),bcr=r(Goe,` class
method.`),Goe.forEach(t),vcr=i(bl),Ny=n(bl,"P",{});var mXe=s(Ny);Fcr=r(mXe,"This class cannot be instantiated directly using "),Lbe=n(mXe,"CODE",{});var WMt=s(Lbe);Tcr=r(WMt,"__init__()"),WMt.forEach(t),Mcr=r(mXe," (throws an error)."),mXe.forEach(t),Ecr=i(bl),At=n(bl,"DIV",{class:!0});var iw=s(At);T(qy.$$.fragment,iw),Ccr=i(iw),ybe=n(iw,"P",{});var QMt=s(ybe);wcr=r(QMt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QMt.forEach(t),Acr=i(iw),Gd=n(iw,"P",{});var Ooe=s(Gd);Lcr=r(Ooe,`Note:
Loading a model from its configuration file does `),xbe=n(Ooe,"STRONG",{});var HMt=s(xbe);ycr=r(HMt,"not"),HMt.forEach(t),xcr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(Ooe,"A",{href:!0});var UMt=s(gQ);$cr=r(UMt,"from_pretrained()"),UMt.forEach(t),kcr=r(Ooe," to load the model weights."),Ooe.forEach(t),Scr=i(iw),T(lT.$$.fragment,iw),iw.forEach(t),Rcr=i(bl),uo=n(bl,"DIV",{class:!0});var Ca=s(uo);T(jy.$$.fragment,Ca),Pcr=i(Ca),$be=n(Ca,"P",{});var JMt=s($be);Bcr=r(JMt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JMt.forEach(t),Icr=i(Ca),Ka=n(Ca,"P",{});var dw=s(Ka);Ncr=r(dw,"The model class to instantiate is selected based on the "),kbe=n(dw,"CODE",{});var YMt=s(kbe);qcr=r(YMt,"model_type"),YMt.forEach(t),jcr=r(dw,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(dw,"CODE",{});var KMt=s(Sbe);Dcr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),Gcr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(dw,"CODE",{});var ZMt=s(Rbe);Ocr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),Vcr=r(dw,":"),dw.forEach(t),Xcr=i(Ca),Od=n(Ca,"UL",{});var Voe=s(Od);iT=n(Voe,"LI",{});var eBe=s(iT);Pbe=n(eBe,"STRONG",{});var e4t=s(Pbe);zcr=r(e4t,"deit"),e4t.forEach(t),Wcr=r(eBe," \u2014 "),hQ=n(eBe,"A",{href:!0});var o4t=s(hQ);Qcr=r(o4t,"DeiTForMaskedImageModeling"),o4t.forEach(t),Hcr=r(eBe," (DeiT model)"),eBe.forEach(t),Ucr=i(Voe),dT=n(Voe,"LI",{});var oBe=s(dT);Bbe=n(oBe,"STRONG",{});var r4t=s(Bbe);Jcr=r(r4t,"swin"),r4t.forEach(t),Ycr=r(oBe," \u2014 "),pQ=n(oBe,"A",{href:!0});var t4t=s(pQ);Kcr=r(t4t,"SwinForMaskedImageModeling"),t4t.forEach(t),Zcr=r(oBe," (Swin Transformer model)"),oBe.forEach(t),efr=i(Voe),cT=n(Voe,"LI",{});var rBe=s(cT);Ibe=n(rBe,"STRONG",{});var a4t=s(Ibe);ofr=r(a4t,"vit"),a4t.forEach(t),rfr=r(rBe," \u2014 "),uQ=n(rBe,"A",{href:!0});var n4t=s(uQ);tfr=r(n4t,"ViTForMaskedImageModeling"),n4t.forEach(t),afr=r(rBe," (ViT model)"),rBe.forEach(t),Voe.forEach(t),nfr=i(Ca),fT=n(Ca,"P",{});var tBe=s(fT);sfr=r(tBe,"The model is set in evaluation mode by default using "),Nbe=n(tBe,"CODE",{});var s4t=s(Nbe);lfr=r(s4t,"model.eval()"),s4t.forEach(t),ifr=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(tBe,"CODE",{});var l4t=s(qbe);dfr=r(l4t,"model.train()"),l4t.forEach(t),tBe.forEach(t),cfr=i(Ca),T(mT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),sOe=i(f),Vd=n(f,"H2",{class:!0});var gXe=s(Vd);gT=n(gXe,"A",{id:!0,class:!0,href:!0});var i4t=s(gT);jbe=n(i4t,"SPAN",{});var d4t=s(jbe);T(Dy.$$.fragment,d4t),d4t.forEach(t),i4t.forEach(t),ffr=i(gXe),Dbe=n(gXe,"SPAN",{});var c4t=s(Dbe);mfr=r(c4t,"AutoModelForObjectDetection"),c4t.forEach(t),gXe.forEach(t),lOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Gy.$$.fragment,vl),gfr=i(vl),Xd=n(vl,"P",{});var Xoe=s(Xd);hfr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_Q=n(Xoe,"A",{href:!0});var f4t=s(_Q);pfr=r(f4t,"from_pretrained()"),f4t.forEach(t),ufr=r(Xoe," class method or the "),bQ=n(Xoe,"A",{href:!0});var m4t=s(bQ);_fr=r(m4t,"from_config()"),m4t.forEach(t),bfr=r(Xoe,` class
method.`),Xoe.forEach(t),vfr=i(vl),Oy=n(vl,"P",{});var hXe=s(Oy);Ffr=r(hXe,"This class cannot be instantiated directly using "),Gbe=n(hXe,"CODE",{});var g4t=s(Gbe);Tfr=r(g4t,"__init__()"),g4t.forEach(t),Mfr=r(hXe," (throws an error)."),hXe.forEach(t),Efr=i(vl),Lt=n(vl,"DIV",{class:!0});var cw=s(Lt);T(Vy.$$.fragment,cw),Cfr=i(cw),Obe=n(cw,"P",{});var h4t=s(Obe);wfr=r(h4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),h4t.forEach(t),Afr=i(cw),zd=n(cw,"P",{});var zoe=s(zd);Lfr=r(zoe,`Note:
Loading a model from its configuration file does `),Vbe=n(zoe,"STRONG",{});var p4t=s(Vbe);yfr=r(p4t,"not"),p4t.forEach(t),xfr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(zoe,"A",{href:!0});var u4t=s(vQ);$fr=r(u4t,"from_pretrained()"),u4t.forEach(t),kfr=r(zoe," to load the model weights."),zoe.forEach(t),Sfr=i(cw),T(hT.$$.fragment,cw),cw.forEach(t),Rfr=i(vl),_o=n(vl,"DIV",{class:!0});var wa=s(_o);T(Xy.$$.fragment,wa),Pfr=i(wa),Xbe=n(wa,"P",{});var _4t=s(Xbe);Bfr=r(_4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_4t.forEach(t),Ifr=i(wa),Za=n(wa,"P",{});var fw=s(Za);Nfr=r(fw,"The model class to instantiate is selected based on the "),zbe=n(fw,"CODE",{});var b4t=s(zbe);qfr=r(b4t,"model_type"),b4t.forEach(t),jfr=r(fw,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(fw,"CODE",{});var v4t=s(Wbe);Dfr=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),Gfr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(fw,"CODE",{});var F4t=s(Qbe);Ofr=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),Vfr=r(fw,":"),fw.forEach(t),Xfr=i(wa),zy=n(wa,"UL",{});var pXe=s(zy);pT=n(pXe,"LI",{});var aBe=s(pT);Hbe=n(aBe,"STRONG",{});var T4t=s(Hbe);zfr=r(T4t,"detr"),T4t.forEach(t),Wfr=r(aBe," \u2014 "),FQ=n(aBe,"A",{href:!0});var M4t=s(FQ);Qfr=r(M4t,"DetrForObjectDetection"),M4t.forEach(t),Hfr=r(aBe," (DETR model)"),aBe.forEach(t),Ufr=i(pXe),uT=n(pXe,"LI",{});var nBe=s(uT);Ube=n(nBe,"STRONG",{});var E4t=s(Ube);Jfr=r(E4t,"yolos"),E4t.forEach(t),Yfr=r(nBe," \u2014 "),TQ=n(nBe,"A",{href:!0});var C4t=s(TQ);Kfr=r(C4t,"YolosForObjectDetection"),C4t.forEach(t),Zfr=r(nBe," (YOLOS model)"),nBe.forEach(t),pXe.forEach(t),emr=i(wa),_T=n(wa,"P",{});var sBe=s(_T);omr=r(sBe,"The model is set in evaluation mode by default using "),Jbe=n(sBe,"CODE",{});var w4t=s(Jbe);rmr=r(w4t,"model.eval()"),w4t.forEach(t),tmr=r(sBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(sBe,"CODE",{});var A4t=s(Ybe);amr=r(A4t,"model.train()"),A4t.forEach(t),sBe.forEach(t),nmr=i(wa),T(bT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),iOe=i(f),Wd=n(f,"H2",{class:!0});var uXe=s(Wd);vT=n(uXe,"A",{id:!0,class:!0,href:!0});var L4t=s(vT);Kbe=n(L4t,"SPAN",{});var y4t=s(Kbe);T(Wy.$$.fragment,y4t),y4t.forEach(t),L4t.forEach(t),smr=i(uXe),Zbe=n(uXe,"SPAN",{});var x4t=s(Zbe);lmr=r(x4t,"AutoModelForImageSegmentation"),x4t.forEach(t),uXe.forEach(t),dOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Qy.$$.fragment,Fl),imr=i(Fl),Qd=n(Fl,"P",{});var Woe=s(Qd);dmr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MQ=n(Woe,"A",{href:!0});var $4t=s(MQ);cmr=r($4t,"from_pretrained()"),$4t.forEach(t),fmr=r(Woe," class method or the "),EQ=n(Woe,"A",{href:!0});var k4t=s(EQ);mmr=r(k4t,"from_config()"),k4t.forEach(t),gmr=r(Woe,` class
method.`),Woe.forEach(t),hmr=i(Fl),Hy=n(Fl,"P",{});var _Xe=s(Hy);pmr=r(_Xe,"This class cannot be instantiated directly using "),eve=n(_Xe,"CODE",{});var S4t=s(eve);umr=r(S4t,"__init__()"),S4t.forEach(t),_mr=r(_Xe," (throws an error)."),_Xe.forEach(t),bmr=i(Fl),yt=n(Fl,"DIV",{class:!0});var mw=s(yt);T(Uy.$$.fragment,mw),vmr=i(mw),ove=n(mw,"P",{});var R4t=s(ove);Fmr=r(R4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),R4t.forEach(t),Tmr=i(mw),Hd=n(mw,"P",{});var Qoe=s(Hd);Mmr=r(Qoe,`Note:
Loading a model from its configuration file does `),rve=n(Qoe,"STRONG",{});var P4t=s(rve);Emr=r(P4t,"not"),P4t.forEach(t),Cmr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(Qoe,"A",{href:!0});var B4t=s(CQ);wmr=r(B4t,"from_pretrained()"),B4t.forEach(t),Amr=r(Qoe," to load the model weights."),Qoe.forEach(t),Lmr=i(mw),T(FT.$$.fragment,mw),mw.forEach(t),ymr=i(Fl),bo=n(Fl,"DIV",{class:!0});var Aa=s(bo);T(Jy.$$.fragment,Aa),xmr=i(Aa),tve=n(Aa,"P",{});var I4t=s(tve);$mr=r(I4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),I4t.forEach(t),kmr=i(Aa),en=n(Aa,"P",{});var gw=s(en);Smr=r(gw,"The model class to instantiate is selected based on the "),ave=n(gw,"CODE",{});var N4t=s(ave);Rmr=r(N4t,"model_type"),N4t.forEach(t),Pmr=r(gw,` property of the config object (either
passed as an argument or loaded from `),nve=n(gw,"CODE",{});var q4t=s(nve);Bmr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),Imr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(gw,"CODE",{});var j4t=s(sve);Nmr=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),qmr=r(gw,":"),gw.forEach(t),jmr=i(Aa),lve=n(Aa,"UL",{});var D4t=s(lve);TT=n(D4t,"LI",{});var lBe=s(TT);ive=n(lBe,"STRONG",{});var G4t=s(ive);Dmr=r(G4t,"detr"),G4t.forEach(t),Gmr=r(lBe," \u2014 "),wQ=n(lBe,"A",{href:!0});var O4t=s(wQ);Omr=r(O4t,"DetrForSegmentation"),O4t.forEach(t),Vmr=r(lBe," (DETR model)"),lBe.forEach(t),D4t.forEach(t),Xmr=i(Aa),MT=n(Aa,"P",{});var iBe=s(MT);zmr=r(iBe,"The model is set in evaluation mode by default using "),dve=n(iBe,"CODE",{});var V4t=s(dve);Wmr=r(V4t,"model.eval()"),V4t.forEach(t),Qmr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=n(iBe,"CODE",{});var X4t=s(cve);Hmr=r(X4t,"model.train()"),X4t.forEach(t),iBe.forEach(t),Umr=i(Aa),T(ET.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),cOe=i(f),Ud=n(f,"H2",{class:!0});var bXe=s(Ud);CT=n(bXe,"A",{id:!0,class:!0,href:!0});var z4t=s(CT);fve=n(z4t,"SPAN",{});var W4t=s(fve);T(Yy.$$.fragment,W4t),W4t.forEach(t),z4t.forEach(t),Jmr=i(bXe),mve=n(bXe,"SPAN",{});var Q4t=s(mve);Ymr=r(Q4t,"AutoModelForSemanticSegmentation"),Q4t.forEach(t),bXe.forEach(t),fOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(Ky.$$.fragment,Tl),Kmr=i(Tl),Jd=n(Tl,"P",{});var Hoe=s(Jd);Zmr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AQ=n(Hoe,"A",{href:!0});var H4t=s(AQ);egr=r(H4t,"from_pretrained()"),H4t.forEach(t),ogr=r(Hoe," class method or the "),LQ=n(Hoe,"A",{href:!0});var U4t=s(LQ);rgr=r(U4t,"from_config()"),U4t.forEach(t),tgr=r(Hoe,` class
method.`),Hoe.forEach(t),agr=i(Tl),Zy=n(Tl,"P",{});var vXe=s(Zy);ngr=r(vXe,"This class cannot be instantiated directly using "),gve=n(vXe,"CODE",{});var J4t=s(gve);sgr=r(J4t,"__init__()"),J4t.forEach(t),lgr=r(vXe," (throws an error)."),vXe.forEach(t),igr=i(Tl),xt=n(Tl,"DIV",{class:!0});var hw=s(xt);T(e9.$$.fragment,hw),dgr=i(hw),hve=n(hw,"P",{});var Y4t=s(hve);cgr=r(Y4t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Y4t.forEach(t),fgr=i(hw),Yd=n(hw,"P",{});var Uoe=s(Yd);mgr=r(Uoe,`Note:
Loading a model from its configuration file does `),pve=n(Uoe,"STRONG",{});var K4t=s(pve);ggr=r(K4t,"not"),K4t.forEach(t),hgr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(Uoe,"A",{href:!0});var Z4t=s(yQ);pgr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),ugr=r(Uoe," to load the model weights."),Uoe.forEach(t),_gr=i(hw),T(wT.$$.fragment,hw),hw.forEach(t),bgr=i(Tl),vo=n(Tl,"DIV",{class:!0});var La=s(vo);T(o9.$$.fragment,La),vgr=i(La),uve=n(La,"P",{});var eEt=s(uve);Fgr=r(eEt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eEt.forEach(t),Tgr=i(La),on=n(La,"P",{});var pw=s(on);Mgr=r(pw,"The model class to instantiate is selected based on the "),_ve=n(pw,"CODE",{});var oEt=s(_ve);Egr=r(oEt,"model_type"),oEt.forEach(t),Cgr=r(pw,` property of the config object (either
passed as an argument or loaded from `),bve=n(pw,"CODE",{});var rEt=s(bve);wgr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Agr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(pw,"CODE",{});var tEt=s(vve);Lgr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),ygr=r(pw,":"),pw.forEach(t),xgr=i(La),rn=n(La,"UL",{});var uw=s(rn);AT=n(uw,"LI",{});var dBe=s(AT);Fve=n(dBe,"STRONG",{});var aEt=s(Fve);$gr=r(aEt,"beit"),aEt.forEach(t),kgr=r(dBe," \u2014 "),xQ=n(dBe,"A",{href:!0});var nEt=s(xQ);Sgr=r(nEt,"BeitForSemanticSegmentation"),nEt.forEach(t),Rgr=r(dBe," (BEiT model)"),dBe.forEach(t),Pgr=i(uw),LT=n(uw,"LI",{});var cBe=s(LT);Tve=n(cBe,"STRONG",{});var sEt=s(Tve);Bgr=r(sEt,"data2vec-vision"),sEt.forEach(t),Igr=r(cBe," \u2014 "),$Q=n(cBe,"A",{href:!0});var lEt=s($Q);Ngr=r(lEt,"Data2VecVisionForSemanticSegmentation"),lEt.forEach(t),qgr=r(cBe," (Data2VecVision model)"),cBe.forEach(t),jgr=i(uw),yT=n(uw,"LI",{});var fBe=s(yT);Mve=n(fBe,"STRONG",{});var iEt=s(Mve);Dgr=r(iEt,"dpt"),iEt.forEach(t),Ggr=r(fBe," \u2014 "),kQ=n(fBe,"A",{href:!0});var dEt=s(kQ);Ogr=r(dEt,"DPTForSemanticSegmentation"),dEt.forEach(t),Vgr=r(fBe," (DPT model)"),fBe.forEach(t),Xgr=i(uw),xT=n(uw,"LI",{});var mBe=s(xT);Eve=n(mBe,"STRONG",{});var cEt=s(Eve);zgr=r(cEt,"segformer"),cEt.forEach(t),Wgr=r(mBe," \u2014 "),SQ=n(mBe,"A",{href:!0});var fEt=s(SQ);Qgr=r(fEt,"SegformerForSemanticSegmentation"),fEt.forEach(t),Hgr=r(mBe," (SegFormer model)"),mBe.forEach(t),uw.forEach(t),Ugr=i(La),$T=n(La,"P",{});var gBe=s($T);Jgr=r(gBe,"The model is set in evaluation mode by default using "),Cve=n(gBe,"CODE",{});var mEt=s(Cve);Ygr=r(mEt,"model.eval()"),mEt.forEach(t),Kgr=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wve=n(gBe,"CODE",{});var gEt=s(wve);Zgr=r(gEt,"model.train()"),gEt.forEach(t),gBe.forEach(t),ehr=i(La),T(kT.$$.fragment,La),La.forEach(t),Tl.forEach(t),mOe=i(f),Kd=n(f,"H2",{class:!0});var FXe=s(Kd);ST=n(FXe,"A",{id:!0,class:!0,href:!0});var hEt=s(ST);Ave=n(hEt,"SPAN",{});var pEt=s(Ave);T(r9.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),ohr=i(FXe),Lve=n(FXe,"SPAN",{});var uEt=s(Lve);rhr=r(uEt,"AutoModelForInstanceSegmentation"),uEt.forEach(t),FXe.forEach(t),gOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(t9.$$.fragment,Ml),thr=i(Ml),Zd=n(Ml,"P",{});var Joe=s(Zd);ahr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RQ=n(Joe,"A",{href:!0});var _Et=s(RQ);nhr=r(_Et,"from_pretrained()"),_Et.forEach(t),shr=r(Joe," class method or the "),PQ=n(Joe,"A",{href:!0});var bEt=s(PQ);lhr=r(bEt,"from_config()"),bEt.forEach(t),ihr=r(Joe,` class
method.`),Joe.forEach(t),dhr=i(Ml),a9=n(Ml,"P",{});var TXe=s(a9);chr=r(TXe,"This class cannot be instantiated directly using "),yve=n(TXe,"CODE",{});var vEt=s(yve);fhr=r(vEt,"__init__()"),vEt.forEach(t),mhr=r(TXe," (throws an error)."),TXe.forEach(t),ghr=i(Ml),$t=n(Ml,"DIV",{class:!0});var _w=s($t);T(n9.$$.fragment,_w),hhr=i(_w),xve=n(_w,"P",{});var FEt=s(xve);phr=r(FEt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),FEt.forEach(t),uhr=i(_w),ec=n(_w,"P",{});var Yoe=s(ec);_hr=r(Yoe,`Note:
Loading a model from its configuration file does `),$ve=n(Yoe,"STRONG",{});var TEt=s($ve);bhr=r(TEt,"not"),TEt.forEach(t),vhr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(Yoe,"A",{href:!0});var MEt=s(BQ);Fhr=r(MEt,"from_pretrained()"),MEt.forEach(t),Thr=r(Yoe," to load the model weights."),Yoe.forEach(t),Mhr=i(_w),T(RT.$$.fragment,_w),_w.forEach(t),Ehr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var ya=s(Fo);T(s9.$$.fragment,ya),Chr=i(ya),kve=n(ya,"P",{});var EEt=s(kve);whr=r(EEt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),EEt.forEach(t),Ahr=i(ya),tn=n(ya,"P",{});var bw=s(tn);Lhr=r(bw,"The model class to instantiate is selected based on the "),Sve=n(bw,"CODE",{});var CEt=s(Sve);yhr=r(CEt,"model_type"),CEt.forEach(t),xhr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Rve=n(bw,"CODE",{});var wEt=s(Rve);$hr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),khr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(bw,"CODE",{});var AEt=s(Pve);Shr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Rhr=r(bw,":"),bw.forEach(t),Phr=i(ya),Bve=n(ya,"UL",{});var LEt=s(Bve);PT=n(LEt,"LI",{});var hBe=s(PT);Ive=n(hBe,"STRONG",{});var yEt=s(Ive);Bhr=r(yEt,"maskformer"),yEt.forEach(t),Ihr=r(hBe," \u2014 "),IQ=n(hBe,"A",{href:!0});var xEt=s(IQ);Nhr=r(xEt,"MaskFormerForInstanceSegmentation"),xEt.forEach(t),qhr=r(hBe," (MaskFormer model)"),hBe.forEach(t),LEt.forEach(t),jhr=i(ya),BT=n(ya,"P",{});var pBe=s(BT);Dhr=r(pBe,"The model is set in evaluation mode by default using "),Nve=n(pBe,"CODE",{});var $Et=s(Nve);Ghr=r($Et,"model.eval()"),$Et.forEach(t),Ohr=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(pBe,"CODE",{});var kEt=s(qve);Vhr=r(kEt,"model.train()"),kEt.forEach(t),pBe.forEach(t),Xhr=i(ya),T(IT.$$.fragment,ya),ya.forEach(t),Ml.forEach(t),hOe=i(f),oc=n(f,"H2",{class:!0});var MXe=s(oc);NT=n(MXe,"A",{id:!0,class:!0,href:!0});var SEt=s(NT);jve=n(SEt,"SPAN",{});var REt=s(jve);T(l9.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),zhr=i(MXe),Dve=n(MXe,"SPAN",{});var PEt=s(Dve);Whr=r(PEt,"TFAutoModel"),PEt.forEach(t),MXe.forEach(t),pOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(i9.$$.fragment,El),Qhr=i(El),rc=n(El,"P",{});var Koe=s(rc);Hhr=r(Koe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NQ=n(Koe,"A",{href:!0});var BEt=s(NQ);Uhr=r(BEt,"from_pretrained()"),BEt.forEach(t),Jhr=r(Koe," class method or the "),qQ=n(Koe,"A",{href:!0});var IEt=s(qQ);Yhr=r(IEt,"from_config()"),IEt.forEach(t),Khr=r(Koe,` class
method.`),Koe.forEach(t),Zhr=i(El),d9=n(El,"P",{});var EXe=s(d9);epr=r(EXe,"This class cannot be instantiated directly using "),Gve=n(EXe,"CODE",{});var NEt=s(Gve);opr=r(NEt,"__init__()"),NEt.forEach(t),rpr=r(EXe," (throws an error)."),EXe.forEach(t),tpr=i(El),kt=n(El,"DIV",{class:!0});var vw=s(kt);T(c9.$$.fragment,vw),apr=i(vw),Ove=n(vw,"P",{});var qEt=s(Ove);npr=r(qEt,"Instantiates one of the base model classes of the library from a configuration."),qEt.forEach(t),spr=i(vw),tc=n(vw,"P",{});var Zoe=s(tc);lpr=r(Zoe,`Note:
Loading a model from its configuration file does `),Vve=n(Zoe,"STRONG",{});var jEt=s(Vve);ipr=r(jEt,"not"),jEt.forEach(t),dpr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(Zoe,"A",{href:!0});var DEt=s(jQ);cpr=r(DEt,"from_pretrained()"),DEt.forEach(t),fpr=r(Zoe," to load the model weights."),Zoe.forEach(t),mpr=i(vw),T(qT.$$.fragment,vw),vw.forEach(t),gpr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(f9.$$.fragment,Cl),hpr=i(Cl),Xve=n(Cl,"P",{});var GEt=s(Xve);ppr=r(GEt,"Instantiate one of the base model classes of the library from a pretrained model."),GEt.forEach(t),upr=i(Cl),an=n(Cl,"P",{});var Fw=s(an);_pr=r(Fw,"The model class to instantiate is selected based on the "),zve=n(Fw,"CODE",{});var OEt=s(zve);bpr=r(OEt,"model_type"),OEt.forEach(t),vpr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Wve=n(Fw,"CODE",{});var VEt=s(Wve);Fpr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),Tpr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(Fw,"CODE",{});var XEt=s(Qve);Mpr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),Epr=r(Fw,":"),Fw.forEach(t),Cpr=i(Cl),q=n(Cl,"UL",{});var D=s(q);jT=n(D,"LI",{});var uBe=s(jT);Hve=n(uBe,"STRONG",{});var zEt=s(Hve);wpr=r(zEt,"albert"),zEt.forEach(t),Apr=r(uBe," \u2014 "),DQ=n(uBe,"A",{href:!0});var WEt=s(DQ);Lpr=r(WEt,"TFAlbertModel"),WEt.forEach(t),ypr=r(uBe," (ALBERT model)"),uBe.forEach(t),xpr=i(D),DT=n(D,"LI",{});var _Be=s(DT);Uve=n(_Be,"STRONG",{});var QEt=s(Uve);$pr=r(QEt,"bart"),QEt.forEach(t),kpr=r(_Be," \u2014 "),GQ=n(_Be,"A",{href:!0});var HEt=s(GQ);Spr=r(HEt,"TFBartModel"),HEt.forEach(t),Rpr=r(_Be," (BART model)"),_Be.forEach(t),Ppr=i(D),GT=n(D,"LI",{});var bBe=s(GT);Jve=n(bBe,"STRONG",{});var UEt=s(Jve);Bpr=r(UEt,"bert"),UEt.forEach(t),Ipr=r(bBe," \u2014 "),OQ=n(bBe,"A",{href:!0});var JEt=s(OQ);Npr=r(JEt,"TFBertModel"),JEt.forEach(t),qpr=r(bBe," (BERT model)"),bBe.forEach(t),jpr=i(D),OT=n(D,"LI",{});var vBe=s(OT);Yve=n(vBe,"STRONG",{});var YEt=s(Yve);Dpr=r(YEt,"blenderbot"),YEt.forEach(t),Gpr=r(vBe," \u2014 "),VQ=n(vBe,"A",{href:!0});var KEt=s(VQ);Opr=r(KEt,"TFBlenderbotModel"),KEt.forEach(t),Vpr=r(vBe," (Blenderbot model)"),vBe.forEach(t),Xpr=i(D),VT=n(D,"LI",{});var FBe=s(VT);Kve=n(FBe,"STRONG",{});var ZEt=s(Kve);zpr=r(ZEt,"blenderbot-small"),ZEt.forEach(t),Wpr=r(FBe," \u2014 "),XQ=n(FBe,"A",{href:!0});var eCt=s(XQ);Qpr=r(eCt,"TFBlenderbotSmallModel"),eCt.forEach(t),Hpr=r(FBe," (BlenderbotSmall model)"),FBe.forEach(t),Upr=i(D),XT=n(D,"LI",{});var TBe=s(XT);Zve=n(TBe,"STRONG",{});var oCt=s(Zve);Jpr=r(oCt,"camembert"),oCt.forEach(t),Ypr=r(TBe," \u2014 "),zQ=n(TBe,"A",{href:!0});var rCt=s(zQ);Kpr=r(rCt,"TFCamembertModel"),rCt.forEach(t),Zpr=r(TBe," (CamemBERT model)"),TBe.forEach(t),eur=i(D),zT=n(D,"LI",{});var MBe=s(zT);e0e=n(MBe,"STRONG",{});var tCt=s(e0e);our=r(tCt,"clip"),tCt.forEach(t),rur=r(MBe," \u2014 "),WQ=n(MBe,"A",{href:!0});var aCt=s(WQ);tur=r(aCt,"TFCLIPModel"),aCt.forEach(t),aur=r(MBe," (CLIP model)"),MBe.forEach(t),nur=i(D),WT=n(D,"LI",{});var EBe=s(WT);o0e=n(EBe,"STRONG",{});var nCt=s(o0e);sur=r(nCt,"convbert"),nCt.forEach(t),lur=r(EBe," \u2014 "),QQ=n(EBe,"A",{href:!0});var sCt=s(QQ);iur=r(sCt,"TFConvBertModel"),sCt.forEach(t),dur=r(EBe," (ConvBERT model)"),EBe.forEach(t),cur=i(D),QT=n(D,"LI",{});var CBe=s(QT);r0e=n(CBe,"STRONG",{});var lCt=s(r0e);fur=r(lCt,"convnext"),lCt.forEach(t),mur=r(CBe," \u2014 "),HQ=n(CBe,"A",{href:!0});var iCt=s(HQ);gur=r(iCt,"TFConvNextModel"),iCt.forEach(t),hur=r(CBe," (ConvNeXT model)"),CBe.forEach(t),pur=i(D),HT=n(D,"LI",{});var wBe=s(HT);t0e=n(wBe,"STRONG",{});var dCt=s(t0e);uur=r(dCt,"ctrl"),dCt.forEach(t),_ur=r(wBe," \u2014 "),UQ=n(wBe,"A",{href:!0});var cCt=s(UQ);bur=r(cCt,"TFCTRLModel"),cCt.forEach(t),vur=r(wBe," (CTRL model)"),wBe.forEach(t),Fur=i(D),UT=n(D,"LI",{});var ABe=s(UT);a0e=n(ABe,"STRONG",{});var fCt=s(a0e);Tur=r(fCt,"data2vec-vision"),fCt.forEach(t),Mur=r(ABe," \u2014 "),JQ=n(ABe,"A",{href:!0});var mCt=s(JQ);Eur=r(mCt,"TFData2VecVisionModel"),mCt.forEach(t),Cur=r(ABe," (Data2VecVision model)"),ABe.forEach(t),wur=i(D),JT=n(D,"LI",{});var LBe=s(JT);n0e=n(LBe,"STRONG",{});var gCt=s(n0e);Aur=r(gCt,"deberta"),gCt.forEach(t),Lur=r(LBe," \u2014 "),YQ=n(LBe,"A",{href:!0});var hCt=s(YQ);yur=r(hCt,"TFDebertaModel"),hCt.forEach(t),xur=r(LBe," (DeBERTa model)"),LBe.forEach(t),$ur=i(D),YT=n(D,"LI",{});var yBe=s(YT);s0e=n(yBe,"STRONG",{});var pCt=s(s0e);kur=r(pCt,"deberta-v2"),pCt.forEach(t),Sur=r(yBe," \u2014 "),KQ=n(yBe,"A",{href:!0});var uCt=s(KQ);Rur=r(uCt,"TFDebertaV2Model"),uCt.forEach(t),Pur=r(yBe," (DeBERTa-v2 model)"),yBe.forEach(t),Bur=i(D),KT=n(D,"LI",{});var xBe=s(KT);l0e=n(xBe,"STRONG",{});var _Ct=s(l0e);Iur=r(_Ct,"deit"),_Ct.forEach(t),Nur=r(xBe," \u2014 "),ZQ=n(xBe,"A",{href:!0});var bCt=s(ZQ);qur=r(bCt,"TFDeiTModel"),bCt.forEach(t),jur=r(xBe," (DeiT model)"),xBe.forEach(t),Dur=i(D),ZT=n(D,"LI",{});var $Be=s(ZT);i0e=n($Be,"STRONG",{});var vCt=s(i0e);Gur=r(vCt,"distilbert"),vCt.forEach(t),Our=r($Be," \u2014 "),eH=n($Be,"A",{href:!0});var FCt=s(eH);Vur=r(FCt,"TFDistilBertModel"),FCt.forEach(t),Xur=r($Be," (DistilBERT model)"),$Be.forEach(t),zur=i(D),e7=n(D,"LI",{});var kBe=s(e7);d0e=n(kBe,"STRONG",{});var TCt=s(d0e);Wur=r(TCt,"dpr"),TCt.forEach(t),Qur=r(kBe," \u2014 "),oH=n(kBe,"A",{href:!0});var MCt=s(oH);Hur=r(MCt,"TFDPRQuestionEncoder"),MCt.forEach(t),Uur=r(kBe," (DPR model)"),kBe.forEach(t),Jur=i(D),o7=n(D,"LI",{});var SBe=s(o7);c0e=n(SBe,"STRONG",{});var ECt=s(c0e);Yur=r(ECt,"electra"),ECt.forEach(t),Kur=r(SBe," \u2014 "),rH=n(SBe,"A",{href:!0});var CCt=s(rH);Zur=r(CCt,"TFElectraModel"),CCt.forEach(t),e_r=r(SBe," (ELECTRA model)"),SBe.forEach(t),o_r=i(D),r7=n(D,"LI",{});var RBe=s(r7);f0e=n(RBe,"STRONG",{});var wCt=s(f0e);r_r=r(wCt,"flaubert"),wCt.forEach(t),t_r=r(RBe," \u2014 "),tH=n(RBe,"A",{href:!0});var ACt=s(tH);a_r=r(ACt,"TFFlaubertModel"),ACt.forEach(t),n_r=r(RBe," (FlauBERT model)"),RBe.forEach(t),s_r=i(D),Xs=n(D,"LI",{});var Wk=s(Xs);m0e=n(Wk,"STRONG",{});var LCt=s(m0e);l_r=r(LCt,"funnel"),LCt.forEach(t),i_r=r(Wk," \u2014 "),aH=n(Wk,"A",{href:!0});var yCt=s(aH);d_r=r(yCt,"TFFunnelModel"),yCt.forEach(t),c_r=r(Wk," or "),nH=n(Wk,"A",{href:!0});var xCt=s(nH);f_r=r(xCt,"TFFunnelBaseModel"),xCt.forEach(t),m_r=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),g_r=i(D),t7=n(D,"LI",{});var PBe=s(t7);g0e=n(PBe,"STRONG",{});var $Ct=s(g0e);h_r=r($Ct,"gpt2"),$Ct.forEach(t),p_r=r(PBe," \u2014 "),sH=n(PBe,"A",{href:!0});var kCt=s(sH);u_r=r(kCt,"TFGPT2Model"),kCt.forEach(t),__r=r(PBe," (OpenAI GPT-2 model)"),PBe.forEach(t),b_r=i(D),a7=n(D,"LI",{});var BBe=s(a7);h0e=n(BBe,"STRONG",{});var SCt=s(h0e);v_r=r(SCt,"gptj"),SCt.forEach(t),F_r=r(BBe," \u2014 "),lH=n(BBe,"A",{href:!0});var RCt=s(lH);T_r=r(RCt,"TFGPTJModel"),RCt.forEach(t),M_r=r(BBe," (GPT-J model)"),BBe.forEach(t),E_r=i(D),n7=n(D,"LI",{});var IBe=s(n7);p0e=n(IBe,"STRONG",{});var PCt=s(p0e);C_r=r(PCt,"hubert"),PCt.forEach(t),w_r=r(IBe," \u2014 "),iH=n(IBe,"A",{href:!0});var BCt=s(iH);A_r=r(BCt,"TFHubertModel"),BCt.forEach(t),L_r=r(IBe," (Hubert model)"),IBe.forEach(t),y_r=i(D),s7=n(D,"LI",{});var NBe=s(s7);u0e=n(NBe,"STRONG",{});var ICt=s(u0e);x_r=r(ICt,"layoutlm"),ICt.forEach(t),$_r=r(NBe," \u2014 "),dH=n(NBe,"A",{href:!0});var NCt=s(dH);k_r=r(NCt,"TFLayoutLMModel"),NCt.forEach(t),S_r=r(NBe," (LayoutLM model)"),NBe.forEach(t),R_r=i(D),l7=n(D,"LI",{});var qBe=s(l7);_0e=n(qBe,"STRONG",{});var qCt=s(_0e);P_r=r(qCt,"led"),qCt.forEach(t),B_r=r(qBe," \u2014 "),cH=n(qBe,"A",{href:!0});var jCt=s(cH);I_r=r(jCt,"TFLEDModel"),jCt.forEach(t),N_r=r(qBe," (LED model)"),qBe.forEach(t),q_r=i(D),i7=n(D,"LI",{});var jBe=s(i7);b0e=n(jBe,"STRONG",{});var DCt=s(b0e);j_r=r(DCt,"longformer"),DCt.forEach(t),D_r=r(jBe," \u2014 "),fH=n(jBe,"A",{href:!0});var GCt=s(fH);G_r=r(GCt,"TFLongformerModel"),GCt.forEach(t),O_r=r(jBe," (Longformer model)"),jBe.forEach(t),V_r=i(D),d7=n(D,"LI",{});var DBe=s(d7);v0e=n(DBe,"STRONG",{});var OCt=s(v0e);X_r=r(OCt,"lxmert"),OCt.forEach(t),z_r=r(DBe," \u2014 "),mH=n(DBe,"A",{href:!0});var VCt=s(mH);W_r=r(VCt,"TFLxmertModel"),VCt.forEach(t),Q_r=r(DBe," (LXMERT model)"),DBe.forEach(t),H_r=i(D),c7=n(D,"LI",{});var GBe=s(c7);F0e=n(GBe,"STRONG",{});var XCt=s(F0e);U_r=r(XCt,"marian"),XCt.forEach(t),J_r=r(GBe," \u2014 "),gH=n(GBe,"A",{href:!0});var zCt=s(gH);Y_r=r(zCt,"TFMarianModel"),zCt.forEach(t),K_r=r(GBe," (Marian model)"),GBe.forEach(t),Z_r=i(D),f7=n(D,"LI",{});var OBe=s(f7);T0e=n(OBe,"STRONG",{});var WCt=s(T0e);e1r=r(WCt,"mbart"),WCt.forEach(t),o1r=r(OBe," \u2014 "),hH=n(OBe,"A",{href:!0});var QCt=s(hH);r1r=r(QCt,"TFMBartModel"),QCt.forEach(t),t1r=r(OBe," (mBART model)"),OBe.forEach(t),a1r=i(D),m7=n(D,"LI",{});var VBe=s(m7);M0e=n(VBe,"STRONG",{});var HCt=s(M0e);n1r=r(HCt,"mobilebert"),HCt.forEach(t),s1r=r(VBe," \u2014 "),pH=n(VBe,"A",{href:!0});var UCt=s(pH);l1r=r(UCt,"TFMobileBertModel"),UCt.forEach(t),i1r=r(VBe," (MobileBERT model)"),VBe.forEach(t),d1r=i(D),g7=n(D,"LI",{});var XBe=s(g7);E0e=n(XBe,"STRONG",{});var JCt=s(E0e);c1r=r(JCt,"mpnet"),JCt.forEach(t),f1r=r(XBe," \u2014 "),uH=n(XBe,"A",{href:!0});var YCt=s(uH);m1r=r(YCt,"TFMPNetModel"),YCt.forEach(t),g1r=r(XBe," (MPNet model)"),XBe.forEach(t),h1r=i(D),h7=n(D,"LI",{});var zBe=s(h7);C0e=n(zBe,"STRONG",{});var KCt=s(C0e);p1r=r(KCt,"mt5"),KCt.forEach(t),u1r=r(zBe," \u2014 "),_H=n(zBe,"A",{href:!0});var ZCt=s(_H);_1r=r(ZCt,"TFMT5Model"),ZCt.forEach(t),b1r=r(zBe," (MT5 model)"),zBe.forEach(t),v1r=i(D),p7=n(D,"LI",{});var WBe=s(p7);w0e=n(WBe,"STRONG",{});var e5t=s(w0e);F1r=r(e5t,"openai-gpt"),e5t.forEach(t),T1r=r(WBe," \u2014 "),bH=n(WBe,"A",{href:!0});var o5t=s(bH);M1r=r(o5t,"TFOpenAIGPTModel"),o5t.forEach(t),E1r=r(WBe," (OpenAI GPT model)"),WBe.forEach(t),C1r=i(D),u7=n(D,"LI",{});var QBe=s(u7);A0e=n(QBe,"STRONG",{});var r5t=s(A0e);w1r=r(r5t,"opt"),r5t.forEach(t),A1r=r(QBe," \u2014 "),vH=n(QBe,"A",{href:!0});var t5t=s(vH);L1r=r(t5t,"TFOPTModel"),t5t.forEach(t),y1r=r(QBe," (OPT model)"),QBe.forEach(t),x1r=i(D),_7=n(D,"LI",{});var HBe=s(_7);L0e=n(HBe,"STRONG",{});var a5t=s(L0e);$1r=r(a5t,"pegasus"),a5t.forEach(t),k1r=r(HBe," \u2014 "),FH=n(HBe,"A",{href:!0});var n5t=s(FH);S1r=r(n5t,"TFPegasusModel"),n5t.forEach(t),R1r=r(HBe," (Pegasus model)"),HBe.forEach(t),P1r=i(D),b7=n(D,"LI",{});var UBe=s(b7);y0e=n(UBe,"STRONG",{});var s5t=s(y0e);B1r=r(s5t,"rembert"),s5t.forEach(t),I1r=r(UBe," \u2014 "),TH=n(UBe,"A",{href:!0});var l5t=s(TH);N1r=r(l5t,"TFRemBertModel"),l5t.forEach(t),q1r=r(UBe," (RemBERT model)"),UBe.forEach(t),j1r=i(D),v7=n(D,"LI",{});var JBe=s(v7);x0e=n(JBe,"STRONG",{});var i5t=s(x0e);D1r=r(i5t,"roberta"),i5t.forEach(t),G1r=r(JBe," \u2014 "),MH=n(JBe,"A",{href:!0});var d5t=s(MH);O1r=r(d5t,"TFRobertaModel"),d5t.forEach(t),V1r=r(JBe," (RoBERTa model)"),JBe.forEach(t),X1r=i(D),F7=n(D,"LI",{});var YBe=s(F7);$0e=n(YBe,"STRONG",{});var c5t=s($0e);z1r=r(c5t,"roformer"),c5t.forEach(t),W1r=r(YBe," \u2014 "),EH=n(YBe,"A",{href:!0});var f5t=s(EH);Q1r=r(f5t,"TFRoFormerModel"),f5t.forEach(t),H1r=r(YBe," (RoFormer model)"),YBe.forEach(t),U1r=i(D),T7=n(D,"LI",{});var KBe=s(T7);k0e=n(KBe,"STRONG",{});var m5t=s(k0e);J1r=r(m5t,"speech_to_text"),m5t.forEach(t),Y1r=r(KBe," \u2014 "),CH=n(KBe,"A",{href:!0});var g5t=s(CH);K1r=r(g5t,"TFSpeech2TextModel"),g5t.forEach(t),Z1r=r(KBe," (Speech2Text model)"),KBe.forEach(t),e2r=i(D),M7=n(D,"LI",{});var ZBe=s(M7);S0e=n(ZBe,"STRONG",{});var h5t=s(S0e);o2r=r(h5t,"swin"),h5t.forEach(t),r2r=r(ZBe," \u2014 "),wH=n(ZBe,"A",{href:!0});var p5t=s(wH);t2r=r(p5t,"TFSwinModel"),p5t.forEach(t),a2r=r(ZBe," (Swin Transformer model)"),ZBe.forEach(t),n2r=i(D),E7=n(D,"LI",{});var eIe=s(E7);R0e=n(eIe,"STRONG",{});var u5t=s(R0e);s2r=r(u5t,"t5"),u5t.forEach(t),l2r=r(eIe," \u2014 "),AH=n(eIe,"A",{href:!0});var _5t=s(AH);i2r=r(_5t,"TFT5Model"),_5t.forEach(t),d2r=r(eIe," (T5 model)"),eIe.forEach(t),c2r=i(D),C7=n(D,"LI",{});var oIe=s(C7);P0e=n(oIe,"STRONG",{});var b5t=s(P0e);f2r=r(b5t,"tapas"),b5t.forEach(t),m2r=r(oIe," \u2014 "),LH=n(oIe,"A",{href:!0});var v5t=s(LH);g2r=r(v5t,"TFTapasModel"),v5t.forEach(t),h2r=r(oIe," (TAPAS model)"),oIe.forEach(t),p2r=i(D),w7=n(D,"LI",{});var rIe=s(w7);B0e=n(rIe,"STRONG",{});var F5t=s(B0e);u2r=r(F5t,"transfo-xl"),F5t.forEach(t),_2r=r(rIe," \u2014 "),yH=n(rIe,"A",{href:!0});var T5t=s(yH);b2r=r(T5t,"TFTransfoXLModel"),T5t.forEach(t),v2r=r(rIe," (Transformer-XL model)"),rIe.forEach(t),F2r=i(D),A7=n(D,"LI",{});var tIe=s(A7);I0e=n(tIe,"STRONG",{});var M5t=s(I0e);T2r=r(M5t,"vit"),M5t.forEach(t),M2r=r(tIe," \u2014 "),xH=n(tIe,"A",{href:!0});var E5t=s(xH);E2r=r(E5t,"TFViTModel"),E5t.forEach(t),C2r=r(tIe," (ViT model)"),tIe.forEach(t),w2r=i(D),L7=n(D,"LI",{});var aIe=s(L7);N0e=n(aIe,"STRONG",{});var C5t=s(N0e);A2r=r(C5t,"vit_mae"),C5t.forEach(t),L2r=r(aIe," \u2014 "),$H=n(aIe,"A",{href:!0});var w5t=s($H);y2r=r(w5t,"TFViTMAEModel"),w5t.forEach(t),x2r=r(aIe," (ViTMAE model)"),aIe.forEach(t),$2r=i(D),y7=n(D,"LI",{});var nIe=s(y7);q0e=n(nIe,"STRONG",{});var A5t=s(q0e);k2r=r(A5t,"wav2vec2"),A5t.forEach(t),S2r=r(nIe," \u2014 "),kH=n(nIe,"A",{href:!0});var L5t=s(kH);R2r=r(L5t,"TFWav2Vec2Model"),L5t.forEach(t),P2r=r(nIe," (Wav2Vec2 model)"),nIe.forEach(t),B2r=i(D),x7=n(D,"LI",{});var sIe=s(x7);j0e=n(sIe,"STRONG",{});var y5t=s(j0e);I2r=r(y5t,"xlm"),y5t.forEach(t),N2r=r(sIe," \u2014 "),SH=n(sIe,"A",{href:!0});var x5t=s(SH);q2r=r(x5t,"TFXLMModel"),x5t.forEach(t),j2r=r(sIe," (XLM model)"),sIe.forEach(t),D2r=i(D),$7=n(D,"LI",{});var lIe=s($7);D0e=n(lIe,"STRONG",{});var $5t=s(D0e);G2r=r($5t,"xlm-roberta"),$5t.forEach(t),O2r=r(lIe," \u2014 "),RH=n(lIe,"A",{href:!0});var k5t=s(RH);V2r=r(k5t,"TFXLMRobertaModel"),k5t.forEach(t),X2r=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),z2r=i(D),k7=n(D,"LI",{});var iIe=s(k7);G0e=n(iIe,"STRONG",{});var S5t=s(G0e);W2r=r(S5t,"xlnet"),S5t.forEach(t),Q2r=r(iIe," \u2014 "),PH=n(iIe,"A",{href:!0});var R5t=s(PH);H2r=r(R5t,"TFXLNetModel"),R5t.forEach(t),U2r=r(iIe," (XLNet model)"),iIe.forEach(t),D.forEach(t),J2r=i(Cl),T(S7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),uOe=i(f),ac=n(f,"H2",{class:!0});var CXe=s(ac);R7=n(CXe,"A",{id:!0,class:!0,href:!0});var P5t=s(R7);O0e=n(P5t,"SPAN",{});var B5t=s(O0e);T(m9.$$.fragment,B5t),B5t.forEach(t),P5t.forEach(t),Y2r=i(CXe),V0e=n(CXe,"SPAN",{});var I5t=s(V0e);K2r=r(I5t,"TFAutoModelForPreTraining"),I5t.forEach(t),CXe.forEach(t),_Oe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(g9.$$.fragment,wl),Z2r=i(wl),nc=n(wl,"P",{});var ere=s(nc);ebr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=n(ere,"A",{href:!0});var N5t=s(BH);obr=r(N5t,"from_pretrained()"),N5t.forEach(t),rbr=r(ere," class method or the "),IH=n(ere,"A",{href:!0});var q5t=s(IH);tbr=r(q5t,"from_config()"),q5t.forEach(t),abr=r(ere,` class
method.`),ere.forEach(t),nbr=i(wl),h9=n(wl,"P",{});var wXe=s(h9);sbr=r(wXe,"This class cannot be instantiated directly using "),X0e=n(wXe,"CODE",{});var j5t=s(X0e);lbr=r(j5t,"__init__()"),j5t.forEach(t),ibr=r(wXe," (throws an error)."),wXe.forEach(t),dbr=i(wl),St=n(wl,"DIV",{class:!0});var Tw=s(St);T(p9.$$.fragment,Tw),cbr=i(Tw),z0e=n(Tw,"P",{});var D5t=s(z0e);fbr=r(D5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D5t.forEach(t),mbr=i(Tw),sc=n(Tw,"P",{});var ore=s(sc);gbr=r(ore,`Note:
Loading a model from its configuration file does `),W0e=n(ore,"STRONG",{});var G5t=s(W0e);hbr=r(G5t,"not"),G5t.forEach(t),pbr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(ore,"A",{href:!0});var O5t=s(NH);ubr=r(O5t,"from_pretrained()"),O5t.forEach(t),_br=r(ore," to load the model weights."),ore.forEach(t),bbr=i(Tw),T(P7.$$.fragment,Tw),Tw.forEach(t),vbr=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(u9.$$.fragment,Al),Fbr=i(Al),Q0e=n(Al,"P",{});var V5t=s(Q0e);Tbr=r(V5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),V5t.forEach(t),Mbr=i(Al),nn=n(Al,"P",{});var Mw=s(nn);Ebr=r(Mw,"The model class to instantiate is selected based on the "),H0e=n(Mw,"CODE",{});var X5t=s(H0e);Cbr=r(X5t,"model_type"),X5t.forEach(t),wbr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),U0e=n(Mw,"CODE",{});var z5t=s(U0e);Abr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),Lbr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(Mw,"CODE",{});var W5t=s(J0e);ybr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),xbr=r(Mw,":"),Mw.forEach(t),$br=i(Al),se=n(Al,"UL",{});var le=s(se);B7=n(le,"LI",{});var dIe=s(B7);Y0e=n(dIe,"STRONG",{});var Q5t=s(Y0e);kbr=r(Q5t,"albert"),Q5t.forEach(t),Sbr=r(dIe," \u2014 "),qH=n(dIe,"A",{href:!0});var H5t=s(qH);Rbr=r(H5t,"TFAlbertForPreTraining"),H5t.forEach(t),Pbr=r(dIe," (ALBERT model)"),dIe.forEach(t),Bbr=i(le),I7=n(le,"LI",{});var cIe=s(I7);K0e=n(cIe,"STRONG",{});var U5t=s(K0e);Ibr=r(U5t,"bart"),U5t.forEach(t),Nbr=r(cIe," \u2014 "),jH=n(cIe,"A",{href:!0});var J5t=s(jH);qbr=r(J5t,"TFBartForConditionalGeneration"),J5t.forEach(t),jbr=r(cIe," (BART model)"),cIe.forEach(t),Dbr=i(le),N7=n(le,"LI",{});var fIe=s(N7);Z0e=n(fIe,"STRONG",{});var Y5t=s(Z0e);Gbr=r(Y5t,"bert"),Y5t.forEach(t),Obr=r(fIe," \u2014 "),DH=n(fIe,"A",{href:!0});var K5t=s(DH);Vbr=r(K5t,"TFBertForPreTraining"),K5t.forEach(t),Xbr=r(fIe," (BERT model)"),fIe.forEach(t),zbr=i(le),q7=n(le,"LI",{});var mIe=s(q7);eFe=n(mIe,"STRONG",{});var Z5t=s(eFe);Wbr=r(Z5t,"camembert"),Z5t.forEach(t),Qbr=r(mIe," \u2014 "),GH=n(mIe,"A",{href:!0});var e3t=s(GH);Hbr=r(e3t,"TFCamembertForMaskedLM"),e3t.forEach(t),Ubr=r(mIe," (CamemBERT model)"),mIe.forEach(t),Jbr=i(le),j7=n(le,"LI",{});var gIe=s(j7);oFe=n(gIe,"STRONG",{});var o3t=s(oFe);Ybr=r(o3t,"ctrl"),o3t.forEach(t),Kbr=r(gIe," \u2014 "),OH=n(gIe,"A",{href:!0});var r3t=s(OH);Zbr=r(r3t,"TFCTRLLMHeadModel"),r3t.forEach(t),evr=r(gIe," (CTRL model)"),gIe.forEach(t),ovr=i(le),D7=n(le,"LI",{});var hIe=s(D7);rFe=n(hIe,"STRONG",{});var t3t=s(rFe);rvr=r(t3t,"distilbert"),t3t.forEach(t),tvr=r(hIe," \u2014 "),VH=n(hIe,"A",{href:!0});var a3t=s(VH);avr=r(a3t,"TFDistilBertForMaskedLM"),a3t.forEach(t),nvr=r(hIe," (DistilBERT model)"),hIe.forEach(t),svr=i(le),G7=n(le,"LI",{});var pIe=s(G7);tFe=n(pIe,"STRONG",{});var n3t=s(tFe);lvr=r(n3t,"electra"),n3t.forEach(t),ivr=r(pIe," \u2014 "),XH=n(pIe,"A",{href:!0});var s3t=s(XH);dvr=r(s3t,"TFElectraForPreTraining"),s3t.forEach(t),cvr=r(pIe," (ELECTRA model)"),pIe.forEach(t),fvr=i(le),O7=n(le,"LI",{});var uIe=s(O7);aFe=n(uIe,"STRONG",{});var l3t=s(aFe);mvr=r(l3t,"flaubert"),l3t.forEach(t),gvr=r(uIe," \u2014 "),zH=n(uIe,"A",{href:!0});var i3t=s(zH);hvr=r(i3t,"TFFlaubertWithLMHeadModel"),i3t.forEach(t),pvr=r(uIe," (FlauBERT model)"),uIe.forEach(t),uvr=i(le),V7=n(le,"LI",{});var _Ie=s(V7);nFe=n(_Ie,"STRONG",{});var d3t=s(nFe);_vr=r(d3t,"funnel"),d3t.forEach(t),bvr=r(_Ie," \u2014 "),WH=n(_Ie,"A",{href:!0});var c3t=s(WH);vvr=r(c3t,"TFFunnelForPreTraining"),c3t.forEach(t),Fvr=r(_Ie," (Funnel Transformer model)"),_Ie.forEach(t),Tvr=i(le),X7=n(le,"LI",{});var bIe=s(X7);sFe=n(bIe,"STRONG",{});var f3t=s(sFe);Mvr=r(f3t,"gpt2"),f3t.forEach(t),Evr=r(bIe," \u2014 "),QH=n(bIe,"A",{href:!0});var m3t=s(QH);Cvr=r(m3t,"TFGPT2LMHeadModel"),m3t.forEach(t),wvr=r(bIe," (OpenAI GPT-2 model)"),bIe.forEach(t),Avr=i(le),z7=n(le,"LI",{});var vIe=s(z7);lFe=n(vIe,"STRONG",{});var g3t=s(lFe);Lvr=r(g3t,"layoutlm"),g3t.forEach(t),yvr=r(vIe," \u2014 "),HH=n(vIe,"A",{href:!0});var h3t=s(HH);xvr=r(h3t,"TFLayoutLMForMaskedLM"),h3t.forEach(t),$vr=r(vIe," (LayoutLM model)"),vIe.forEach(t),kvr=i(le),W7=n(le,"LI",{});var FIe=s(W7);iFe=n(FIe,"STRONG",{});var p3t=s(iFe);Svr=r(p3t,"lxmert"),p3t.forEach(t),Rvr=r(FIe," \u2014 "),UH=n(FIe,"A",{href:!0});var u3t=s(UH);Pvr=r(u3t,"TFLxmertForPreTraining"),u3t.forEach(t),Bvr=r(FIe," (LXMERT model)"),FIe.forEach(t),Ivr=i(le),Q7=n(le,"LI",{});var TIe=s(Q7);dFe=n(TIe,"STRONG",{});var _3t=s(dFe);Nvr=r(_3t,"mobilebert"),_3t.forEach(t),qvr=r(TIe," \u2014 "),JH=n(TIe,"A",{href:!0});var b3t=s(JH);jvr=r(b3t,"TFMobileBertForPreTraining"),b3t.forEach(t),Dvr=r(TIe," (MobileBERT model)"),TIe.forEach(t),Gvr=i(le),H7=n(le,"LI",{});var MIe=s(H7);cFe=n(MIe,"STRONG",{});var v3t=s(cFe);Ovr=r(v3t,"mpnet"),v3t.forEach(t),Vvr=r(MIe," \u2014 "),YH=n(MIe,"A",{href:!0});var F3t=s(YH);Xvr=r(F3t,"TFMPNetForMaskedLM"),F3t.forEach(t),zvr=r(MIe," (MPNet model)"),MIe.forEach(t),Wvr=i(le),U7=n(le,"LI",{});var EIe=s(U7);fFe=n(EIe,"STRONG",{});var T3t=s(fFe);Qvr=r(T3t,"openai-gpt"),T3t.forEach(t),Hvr=r(EIe," \u2014 "),KH=n(EIe,"A",{href:!0});var M3t=s(KH);Uvr=r(M3t,"TFOpenAIGPTLMHeadModel"),M3t.forEach(t),Jvr=r(EIe," (OpenAI GPT model)"),EIe.forEach(t),Yvr=i(le),J7=n(le,"LI",{});var CIe=s(J7);mFe=n(CIe,"STRONG",{});var E3t=s(mFe);Kvr=r(E3t,"roberta"),E3t.forEach(t),Zvr=r(CIe," \u2014 "),ZH=n(CIe,"A",{href:!0});var C3t=s(ZH);e0r=r(C3t,"TFRobertaForMaskedLM"),C3t.forEach(t),o0r=r(CIe," (RoBERTa model)"),CIe.forEach(t),r0r=i(le),Y7=n(le,"LI",{});var wIe=s(Y7);gFe=n(wIe,"STRONG",{});var w3t=s(gFe);t0r=r(w3t,"t5"),w3t.forEach(t),a0r=r(wIe," \u2014 "),eU=n(wIe,"A",{href:!0});var A3t=s(eU);n0r=r(A3t,"TFT5ForConditionalGeneration"),A3t.forEach(t),s0r=r(wIe," (T5 model)"),wIe.forEach(t),l0r=i(le),K7=n(le,"LI",{});var AIe=s(K7);hFe=n(AIe,"STRONG",{});var L3t=s(hFe);i0r=r(L3t,"tapas"),L3t.forEach(t),d0r=r(AIe," \u2014 "),oU=n(AIe,"A",{href:!0});var y3t=s(oU);c0r=r(y3t,"TFTapasForMaskedLM"),y3t.forEach(t),f0r=r(AIe," (TAPAS model)"),AIe.forEach(t),m0r=i(le),Z7=n(le,"LI",{});var LIe=s(Z7);pFe=n(LIe,"STRONG",{});var x3t=s(pFe);g0r=r(x3t,"transfo-xl"),x3t.forEach(t),h0r=r(LIe," \u2014 "),rU=n(LIe,"A",{href:!0});var $3t=s(rU);p0r=r($3t,"TFTransfoXLLMHeadModel"),$3t.forEach(t),u0r=r(LIe," (Transformer-XL model)"),LIe.forEach(t),_0r=i(le),e8=n(le,"LI",{});var yIe=s(e8);uFe=n(yIe,"STRONG",{});var k3t=s(uFe);b0r=r(k3t,"vit_mae"),k3t.forEach(t),v0r=r(yIe," \u2014 "),tU=n(yIe,"A",{href:!0});var S3t=s(tU);F0r=r(S3t,"TFViTMAEForPreTraining"),S3t.forEach(t),T0r=r(yIe," (ViTMAE model)"),yIe.forEach(t),M0r=i(le),o8=n(le,"LI",{});var xIe=s(o8);_Fe=n(xIe,"STRONG",{});var R3t=s(_Fe);E0r=r(R3t,"xlm"),R3t.forEach(t),C0r=r(xIe," \u2014 "),aU=n(xIe,"A",{href:!0});var P3t=s(aU);w0r=r(P3t,"TFXLMWithLMHeadModel"),P3t.forEach(t),A0r=r(xIe," (XLM model)"),xIe.forEach(t),L0r=i(le),r8=n(le,"LI",{});var $Ie=s(r8);bFe=n($Ie,"STRONG",{});var B3t=s(bFe);y0r=r(B3t,"xlm-roberta"),B3t.forEach(t),x0r=r($Ie," \u2014 "),nU=n($Ie,"A",{href:!0});var I3t=s(nU);$0r=r(I3t,"TFXLMRobertaForMaskedLM"),I3t.forEach(t),k0r=r($Ie," (XLM-RoBERTa model)"),$Ie.forEach(t),S0r=i(le),t8=n(le,"LI",{});var kIe=s(t8);vFe=n(kIe,"STRONG",{});var N3t=s(vFe);R0r=r(N3t,"xlnet"),N3t.forEach(t),P0r=r(kIe," \u2014 "),sU=n(kIe,"A",{href:!0});var q3t=s(sU);B0r=r(q3t,"TFXLNetLMHeadModel"),q3t.forEach(t),I0r=r(kIe," (XLNet model)"),kIe.forEach(t),le.forEach(t),N0r=i(Al),T(a8.$$.fragment,Al),Al.forEach(t),wl.forEach(t),bOe=i(f),lc=n(f,"H2",{class:!0});var AXe=s(lc);n8=n(AXe,"A",{id:!0,class:!0,href:!0});var j3t=s(n8);FFe=n(j3t,"SPAN",{});var D3t=s(FFe);T(_9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),q0r=i(AXe),TFe=n(AXe,"SPAN",{});var G3t=s(TFe);j0r=r(G3t,"TFAutoModelForCausalLM"),G3t.forEach(t),AXe.forEach(t),vOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(b9.$$.fragment,Ll),D0r=i(Ll),ic=n(Ll,"P",{});var rre=s(ic);G0r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=n(rre,"A",{href:!0});var O3t=s(lU);O0r=r(O3t,"from_pretrained()"),O3t.forEach(t),V0r=r(rre," class method or the "),iU=n(rre,"A",{href:!0});var V3t=s(iU);X0r=r(V3t,"from_config()"),V3t.forEach(t),z0r=r(rre,` class
method.`),rre.forEach(t),W0r=i(Ll),v9=n(Ll,"P",{});var LXe=s(v9);Q0r=r(LXe,"This class cannot be instantiated directly using "),MFe=n(LXe,"CODE",{});var X3t=s(MFe);H0r=r(X3t,"__init__()"),X3t.forEach(t),U0r=r(LXe," (throws an error)."),LXe.forEach(t),J0r=i(Ll),Rt=n(Ll,"DIV",{class:!0});var Ew=s(Rt);T(F9.$$.fragment,Ew),Y0r=i(Ew),EFe=n(Ew,"P",{});var z3t=s(EFe);K0r=r(z3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z3t.forEach(t),Z0r=i(Ew),dc=n(Ew,"P",{});var tre=s(dc);eFr=r(tre,`Note:
Loading a model from its configuration file does `),CFe=n(tre,"STRONG",{});var W3t=s(CFe);oFr=r(W3t,"not"),W3t.forEach(t),rFr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(tre,"A",{href:!0});var Q3t=s(dU);tFr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),aFr=r(tre," to load the model weights."),tre.forEach(t),nFr=i(Ew),T(s8.$$.fragment,Ew),Ew.forEach(t),sFr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(T9.$$.fragment,yl),lFr=i(yl),wFe=n(yl,"P",{});var H3t=s(wFe);iFr=r(H3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H3t.forEach(t),dFr=i(yl),sn=n(yl,"P",{});var Cw=s(sn);cFr=r(Cw,"The model class to instantiate is selected based on the "),AFe=n(Cw,"CODE",{});var U3t=s(AFe);fFr=r(U3t,"model_type"),U3t.forEach(t),mFr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),LFe=n(Cw,"CODE",{});var J3t=s(LFe);gFr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),hFr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(Cw,"CODE",{});var Y3t=s(yFe);pFr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),uFr=r(Cw,":"),Cw.forEach(t),_Fr=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);l8=n(Ce,"LI",{});var SIe=s(l8);xFe=n(SIe,"STRONG",{});var K3t=s(xFe);bFr=r(K3t,"bert"),K3t.forEach(t),vFr=r(SIe," \u2014 "),cU=n(SIe,"A",{href:!0});var Z3t=s(cU);FFr=r(Z3t,"TFBertLMHeadModel"),Z3t.forEach(t),TFr=r(SIe," (BERT model)"),SIe.forEach(t),MFr=i(Ce),i8=n(Ce,"LI",{});var RIe=s(i8);$Fe=n(RIe,"STRONG",{});var ewt=s($Fe);EFr=r(ewt,"camembert"),ewt.forEach(t),CFr=r(RIe," \u2014 "),fU=n(RIe,"A",{href:!0});var owt=s(fU);wFr=r(owt,"TFCamembertForCausalLM"),owt.forEach(t),AFr=r(RIe," (CamemBERT model)"),RIe.forEach(t),LFr=i(Ce),d8=n(Ce,"LI",{});var PIe=s(d8);kFe=n(PIe,"STRONG",{});var rwt=s(kFe);yFr=r(rwt,"ctrl"),rwt.forEach(t),xFr=r(PIe," \u2014 "),mU=n(PIe,"A",{href:!0});var twt=s(mU);$Fr=r(twt,"TFCTRLLMHeadModel"),twt.forEach(t),kFr=r(PIe," (CTRL model)"),PIe.forEach(t),SFr=i(Ce),c8=n(Ce,"LI",{});var BIe=s(c8);SFe=n(BIe,"STRONG",{});var awt=s(SFe);RFr=r(awt,"gpt2"),awt.forEach(t),PFr=r(BIe," \u2014 "),gU=n(BIe,"A",{href:!0});var nwt=s(gU);BFr=r(nwt,"TFGPT2LMHeadModel"),nwt.forEach(t),IFr=r(BIe," (OpenAI GPT-2 model)"),BIe.forEach(t),NFr=i(Ce),f8=n(Ce,"LI",{});var IIe=s(f8);RFe=n(IIe,"STRONG",{});var swt=s(RFe);qFr=r(swt,"gptj"),swt.forEach(t),jFr=r(IIe," \u2014 "),hU=n(IIe,"A",{href:!0});var lwt=s(hU);DFr=r(lwt,"TFGPTJForCausalLM"),lwt.forEach(t),GFr=r(IIe," (GPT-J model)"),IIe.forEach(t),OFr=i(Ce),m8=n(Ce,"LI",{});var NIe=s(m8);PFe=n(NIe,"STRONG",{});var iwt=s(PFe);VFr=r(iwt,"openai-gpt"),iwt.forEach(t),XFr=r(NIe," \u2014 "),pU=n(NIe,"A",{href:!0});var dwt=s(pU);zFr=r(dwt,"TFOpenAIGPTLMHeadModel"),dwt.forEach(t),WFr=r(NIe," (OpenAI GPT model)"),NIe.forEach(t),QFr=i(Ce),g8=n(Ce,"LI",{});var qIe=s(g8);BFe=n(qIe,"STRONG",{});var cwt=s(BFe);HFr=r(cwt,"opt"),cwt.forEach(t),UFr=r(qIe," \u2014 "),uU=n(qIe,"A",{href:!0});var fwt=s(uU);JFr=r(fwt,"TFOPTForCausalLM"),fwt.forEach(t),YFr=r(qIe," (OPT model)"),qIe.forEach(t),KFr=i(Ce),h8=n(Ce,"LI",{});var jIe=s(h8);IFe=n(jIe,"STRONG",{});var mwt=s(IFe);ZFr=r(mwt,"rembert"),mwt.forEach(t),e6r=r(jIe," \u2014 "),_U=n(jIe,"A",{href:!0});var gwt=s(_U);o6r=r(gwt,"TFRemBertForCausalLM"),gwt.forEach(t),r6r=r(jIe," (RemBERT model)"),jIe.forEach(t),t6r=i(Ce),p8=n(Ce,"LI",{});var DIe=s(p8);NFe=n(DIe,"STRONG",{});var hwt=s(NFe);a6r=r(hwt,"roberta"),hwt.forEach(t),n6r=r(DIe," \u2014 "),bU=n(DIe,"A",{href:!0});var pwt=s(bU);s6r=r(pwt,"TFRobertaForCausalLM"),pwt.forEach(t),l6r=r(DIe," (RoBERTa model)"),DIe.forEach(t),i6r=i(Ce),u8=n(Ce,"LI",{});var GIe=s(u8);qFe=n(GIe,"STRONG",{});var uwt=s(qFe);d6r=r(uwt,"roformer"),uwt.forEach(t),c6r=r(GIe," \u2014 "),vU=n(GIe,"A",{href:!0});var _wt=s(vU);f6r=r(_wt,"TFRoFormerForCausalLM"),_wt.forEach(t),m6r=r(GIe," (RoFormer model)"),GIe.forEach(t),g6r=i(Ce),_8=n(Ce,"LI",{});var OIe=s(_8);jFe=n(OIe,"STRONG",{});var bwt=s(jFe);h6r=r(bwt,"transfo-xl"),bwt.forEach(t),p6r=r(OIe," \u2014 "),FU=n(OIe,"A",{href:!0});var vwt=s(FU);u6r=r(vwt,"TFTransfoXLLMHeadModel"),vwt.forEach(t),_6r=r(OIe," (Transformer-XL model)"),OIe.forEach(t),b6r=i(Ce),b8=n(Ce,"LI",{});var VIe=s(b8);DFe=n(VIe,"STRONG",{});var Fwt=s(DFe);v6r=r(Fwt,"xlm"),Fwt.forEach(t),F6r=r(VIe," \u2014 "),TU=n(VIe,"A",{href:!0});var Twt=s(TU);T6r=r(Twt,"TFXLMWithLMHeadModel"),Twt.forEach(t),M6r=r(VIe," (XLM model)"),VIe.forEach(t),E6r=i(Ce),v8=n(Ce,"LI",{});var XIe=s(v8);GFe=n(XIe,"STRONG",{});var Mwt=s(GFe);C6r=r(Mwt,"xlnet"),Mwt.forEach(t),w6r=r(XIe," \u2014 "),MU=n(XIe,"A",{href:!0});var Ewt=s(MU);A6r=r(Ewt,"TFXLNetLMHeadModel"),Ewt.forEach(t),L6r=r(XIe," (XLNet model)"),XIe.forEach(t),Ce.forEach(t),y6r=i(yl),T(F8.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),FOe=i(f),cc=n(f,"H2",{class:!0});var yXe=s(cc);T8=n(yXe,"A",{id:!0,class:!0,href:!0});var Cwt=s(T8);OFe=n(Cwt,"SPAN",{});var wwt=s(OFe);T(M9.$$.fragment,wwt),wwt.forEach(t),Cwt.forEach(t),x6r=i(yXe),VFe=n(yXe,"SPAN",{});var Awt=s(VFe);$6r=r(Awt,"TFAutoModelForImageClassification"),Awt.forEach(t),yXe.forEach(t),TOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(E9.$$.fragment,xl),k6r=i(xl),fc=n(xl,"P",{});var are=s(fc);S6r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=n(are,"A",{href:!0});var Lwt=s(EU);R6r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),P6r=r(are," class method or the "),CU=n(are,"A",{href:!0});var ywt=s(CU);B6r=r(ywt,"from_config()"),ywt.forEach(t),I6r=r(are,` class
method.`),are.forEach(t),N6r=i(xl),C9=n(xl,"P",{});var xXe=s(C9);q6r=r(xXe,"This class cannot be instantiated directly using "),XFe=n(xXe,"CODE",{});var xwt=s(XFe);j6r=r(xwt,"__init__()"),xwt.forEach(t),D6r=r(xXe," (throws an error)."),xXe.forEach(t),G6r=i(xl),Pt=n(xl,"DIV",{class:!0});var ww=s(Pt);T(w9.$$.fragment,ww),O6r=i(ww),zFe=n(ww,"P",{});var $wt=s(zFe);V6r=r($wt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$wt.forEach(t),X6r=i(ww),mc=n(ww,"P",{});var nre=s(mc);z6r=r(nre,`Note:
Loading a model from its configuration file does `),WFe=n(nre,"STRONG",{});var kwt=s(WFe);W6r=r(kwt,"not"),kwt.forEach(t),Q6r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(nre,"A",{href:!0});var Swt=s(wU);H6r=r(Swt,"from_pretrained()"),Swt.forEach(t),U6r=r(nre," to load the model weights."),nre.forEach(t),J6r=i(ww),T(M8.$$.fragment,ww),ww.forEach(t),Y6r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(A9.$$.fragment,$l),K6r=i($l),QFe=n($l,"P",{});var Rwt=s(QFe);Z6r=r(Rwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rwt.forEach(t),eTr=i($l),ln=n($l,"P",{});var Aw=s(ln);oTr=r(Aw,"The model class to instantiate is selected based on the "),HFe=n(Aw,"CODE",{});var Pwt=s(HFe);rTr=r(Pwt,"model_type"),Pwt.forEach(t),tTr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),UFe=n(Aw,"CODE",{});var Bwt=s(UFe);aTr=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),nTr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(Aw,"CODE",{});var Iwt=s(JFe);sTr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),lTr=r(Aw,":"),Aw.forEach(t),iTr=i($l),rt=n($l,"UL",{});var kl=s(rt);E8=n(kl,"LI",{});var zIe=s(E8);YFe=n(zIe,"STRONG",{});var Nwt=s(YFe);dTr=r(Nwt,"convnext"),Nwt.forEach(t),cTr=r(zIe," \u2014 "),AU=n(zIe,"A",{href:!0});var qwt=s(AU);fTr=r(qwt,"TFConvNextForImageClassification"),qwt.forEach(t),mTr=r(zIe," (ConvNeXT model)"),zIe.forEach(t),gTr=i(kl),C8=n(kl,"LI",{});var WIe=s(C8);KFe=n(WIe,"STRONG",{});var jwt=s(KFe);hTr=r(jwt,"data2vec-vision"),jwt.forEach(t),pTr=r(WIe," \u2014 "),LU=n(WIe,"A",{href:!0});var Dwt=s(LU);uTr=r(Dwt,"TFData2VecVisionForImageClassification"),Dwt.forEach(t),_Tr=r(WIe," (Data2VecVision model)"),WIe.forEach(t),bTr=i(kl),zs=n(kl,"LI",{});var Qk=s(zs);ZFe=n(Qk,"STRONG",{});var Gwt=s(ZFe);vTr=r(Gwt,"deit"),Gwt.forEach(t),FTr=r(Qk," \u2014 "),yU=n(Qk,"A",{href:!0});var Owt=s(yU);TTr=r(Owt,"TFDeiTForImageClassification"),Owt.forEach(t),MTr=r(Qk," or "),xU=n(Qk,"A",{href:!0});var Vwt=s(xU);ETr=r(Vwt,"TFDeiTForImageClassificationWithTeacher"),Vwt.forEach(t),CTr=r(Qk," (DeiT model)"),Qk.forEach(t),wTr=i(kl),w8=n(kl,"LI",{});var QIe=s(w8);e6e=n(QIe,"STRONG",{});var Xwt=s(e6e);ATr=r(Xwt,"swin"),Xwt.forEach(t),LTr=r(QIe," \u2014 "),$U=n(QIe,"A",{href:!0});var zwt=s($U);yTr=r(zwt,"TFSwinForImageClassification"),zwt.forEach(t),xTr=r(QIe," (Swin Transformer model)"),QIe.forEach(t),$Tr=i(kl),A8=n(kl,"LI",{});var HIe=s(A8);o6e=n(HIe,"STRONG",{});var Wwt=s(o6e);kTr=r(Wwt,"vit"),Wwt.forEach(t),STr=r(HIe," \u2014 "),kU=n(HIe,"A",{href:!0});var Qwt=s(kU);RTr=r(Qwt,"TFViTForImageClassification"),Qwt.forEach(t),PTr=r(HIe," (ViT model)"),HIe.forEach(t),kl.forEach(t),BTr=i($l),T(L8.$$.fragment,$l),$l.forEach(t),xl.forEach(t),MOe=i(f),gc=n(f,"H2",{class:!0});var $Xe=s(gc);y8=n($Xe,"A",{id:!0,class:!0,href:!0});var Hwt=s(y8);r6e=n(Hwt,"SPAN",{});var Uwt=s(r6e);T(L9.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),ITr=i($Xe),t6e=n($Xe,"SPAN",{});var Jwt=s(t6e);NTr=r(Jwt,"TFAutoModelForMaskedLM"),Jwt.forEach(t),$Xe.forEach(t),EOe=i(f),tr=n(f,"DIV",{class:!0});var Sl=s(tr);T(y9.$$.fragment,Sl),qTr=i(Sl),hc=n(Sl,"P",{});var sre=s(hc);jTr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=n(sre,"A",{href:!0});var Ywt=s(SU);DTr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),GTr=r(sre," class method or the "),RU=n(sre,"A",{href:!0});var Kwt=s(RU);OTr=r(Kwt,"from_config()"),Kwt.forEach(t),VTr=r(sre,` class
method.`),sre.forEach(t),XTr=i(Sl),x9=n(Sl,"P",{});var kXe=s(x9);zTr=r(kXe,"This class cannot be instantiated directly using "),a6e=n(kXe,"CODE",{});var Zwt=s(a6e);WTr=r(Zwt,"__init__()"),Zwt.forEach(t),QTr=r(kXe," (throws an error)."),kXe.forEach(t),HTr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var Lw=s(Bt);T($9.$$.fragment,Lw),UTr=i(Lw),n6e=n(Lw,"P",{});var eAt=s(n6e);JTr=r(eAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eAt.forEach(t),YTr=i(Lw),pc=n(Lw,"P",{});var lre=s(pc);KTr=r(lre,`Note:
Loading a model from its configuration file does `),s6e=n(lre,"STRONG",{});var oAt=s(s6e);ZTr=r(oAt,"not"),oAt.forEach(t),e7r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(lre,"A",{href:!0});var rAt=s(PU);o7r=r(rAt,"from_pretrained()"),rAt.forEach(t),r7r=r(lre," to load the model weights."),lre.forEach(t),t7r=i(Lw),T(x8.$$.fragment,Lw),Lw.forEach(t),a7r=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(k9.$$.fragment,Rl),n7r=i(Rl),l6e=n(Rl,"P",{});var tAt=s(l6e);s7r=r(tAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tAt.forEach(t),l7r=i(Rl),dn=n(Rl,"P",{});var yw=s(dn);i7r=r(yw,"The model class to instantiate is selected based on the "),i6e=n(yw,"CODE",{});var aAt=s(i6e);d7r=r(aAt,"model_type"),aAt.forEach(t),c7r=r(yw,` property of the config object (either
passed as an argument or loaded from `),d6e=n(yw,"CODE",{});var nAt=s(d6e);f7r=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),m7r=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(yw,"CODE",{});var sAt=s(c6e);g7r=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),h7r=r(yw,":"),yw.forEach(t),p7r=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);$8=n(fe,"LI",{});var UIe=s($8);f6e=n(UIe,"STRONG",{});var lAt=s(f6e);u7r=r(lAt,"albert"),lAt.forEach(t),_7r=r(UIe," \u2014 "),BU=n(UIe,"A",{href:!0});var iAt=s(BU);b7r=r(iAt,"TFAlbertForMaskedLM"),iAt.forEach(t),v7r=r(UIe," (ALBERT model)"),UIe.forEach(t),F7r=i(fe),k8=n(fe,"LI",{});var JIe=s(k8);m6e=n(JIe,"STRONG",{});var dAt=s(m6e);T7r=r(dAt,"bert"),dAt.forEach(t),M7r=r(JIe," \u2014 "),IU=n(JIe,"A",{href:!0});var cAt=s(IU);E7r=r(cAt,"TFBertForMaskedLM"),cAt.forEach(t),C7r=r(JIe," (BERT model)"),JIe.forEach(t),w7r=i(fe),S8=n(fe,"LI",{});var YIe=s(S8);g6e=n(YIe,"STRONG",{});var fAt=s(g6e);A7r=r(fAt,"camembert"),fAt.forEach(t),L7r=r(YIe," \u2014 "),NU=n(YIe,"A",{href:!0});var mAt=s(NU);y7r=r(mAt,"TFCamembertForMaskedLM"),mAt.forEach(t),x7r=r(YIe," (CamemBERT model)"),YIe.forEach(t),$7r=i(fe),R8=n(fe,"LI",{});var KIe=s(R8);h6e=n(KIe,"STRONG",{});var gAt=s(h6e);k7r=r(gAt,"convbert"),gAt.forEach(t),S7r=r(KIe," \u2014 "),qU=n(KIe,"A",{href:!0});var hAt=s(qU);R7r=r(hAt,"TFConvBertForMaskedLM"),hAt.forEach(t),P7r=r(KIe," (ConvBERT model)"),KIe.forEach(t),B7r=i(fe),P8=n(fe,"LI",{});var ZIe=s(P8);p6e=n(ZIe,"STRONG",{});var pAt=s(p6e);I7r=r(pAt,"deberta"),pAt.forEach(t),N7r=r(ZIe," \u2014 "),jU=n(ZIe,"A",{href:!0});var uAt=s(jU);q7r=r(uAt,"TFDebertaForMaskedLM"),uAt.forEach(t),j7r=r(ZIe," (DeBERTa model)"),ZIe.forEach(t),D7r=i(fe),B8=n(fe,"LI",{});var eNe=s(B8);u6e=n(eNe,"STRONG",{});var _At=s(u6e);G7r=r(_At,"deberta-v2"),_At.forEach(t),O7r=r(eNe," \u2014 "),DU=n(eNe,"A",{href:!0});var bAt=s(DU);V7r=r(bAt,"TFDebertaV2ForMaskedLM"),bAt.forEach(t),X7r=r(eNe," (DeBERTa-v2 model)"),eNe.forEach(t),z7r=i(fe),I8=n(fe,"LI",{});var oNe=s(I8);_6e=n(oNe,"STRONG",{});var vAt=s(_6e);W7r=r(vAt,"distilbert"),vAt.forEach(t),Q7r=r(oNe," \u2014 "),GU=n(oNe,"A",{href:!0});var FAt=s(GU);H7r=r(FAt,"TFDistilBertForMaskedLM"),FAt.forEach(t),U7r=r(oNe," (DistilBERT model)"),oNe.forEach(t),J7r=i(fe),N8=n(fe,"LI",{});var rNe=s(N8);b6e=n(rNe,"STRONG",{});var TAt=s(b6e);Y7r=r(TAt,"electra"),TAt.forEach(t),K7r=r(rNe," \u2014 "),OU=n(rNe,"A",{href:!0});var MAt=s(OU);Z7r=r(MAt,"TFElectraForMaskedLM"),MAt.forEach(t),e8r=r(rNe," (ELECTRA model)"),rNe.forEach(t),o8r=i(fe),q8=n(fe,"LI",{});var tNe=s(q8);v6e=n(tNe,"STRONG",{});var EAt=s(v6e);r8r=r(EAt,"flaubert"),EAt.forEach(t),t8r=r(tNe," \u2014 "),VU=n(tNe,"A",{href:!0});var CAt=s(VU);a8r=r(CAt,"TFFlaubertWithLMHeadModel"),CAt.forEach(t),n8r=r(tNe," (FlauBERT model)"),tNe.forEach(t),s8r=i(fe),j8=n(fe,"LI",{});var aNe=s(j8);F6e=n(aNe,"STRONG",{});var wAt=s(F6e);l8r=r(wAt,"funnel"),wAt.forEach(t),i8r=r(aNe," \u2014 "),XU=n(aNe,"A",{href:!0});var AAt=s(XU);d8r=r(AAt,"TFFunnelForMaskedLM"),AAt.forEach(t),c8r=r(aNe," (Funnel Transformer model)"),aNe.forEach(t),f8r=i(fe),D8=n(fe,"LI",{});var nNe=s(D8);T6e=n(nNe,"STRONG",{});var LAt=s(T6e);m8r=r(LAt,"layoutlm"),LAt.forEach(t),g8r=r(nNe," \u2014 "),zU=n(nNe,"A",{href:!0});var yAt=s(zU);h8r=r(yAt,"TFLayoutLMForMaskedLM"),yAt.forEach(t),p8r=r(nNe," (LayoutLM model)"),nNe.forEach(t),u8r=i(fe),G8=n(fe,"LI",{});var sNe=s(G8);M6e=n(sNe,"STRONG",{});var xAt=s(M6e);_8r=r(xAt,"longformer"),xAt.forEach(t),b8r=r(sNe," \u2014 "),WU=n(sNe,"A",{href:!0});var $At=s(WU);v8r=r($At,"TFLongformerForMaskedLM"),$At.forEach(t),F8r=r(sNe," (Longformer model)"),sNe.forEach(t),T8r=i(fe),O8=n(fe,"LI",{});var lNe=s(O8);E6e=n(lNe,"STRONG",{});var kAt=s(E6e);M8r=r(kAt,"mobilebert"),kAt.forEach(t),E8r=r(lNe," \u2014 "),QU=n(lNe,"A",{href:!0});var SAt=s(QU);C8r=r(SAt,"TFMobileBertForMaskedLM"),SAt.forEach(t),w8r=r(lNe," (MobileBERT model)"),lNe.forEach(t),A8r=i(fe),V8=n(fe,"LI",{});var iNe=s(V8);C6e=n(iNe,"STRONG",{});var RAt=s(C6e);L8r=r(RAt,"mpnet"),RAt.forEach(t),y8r=r(iNe," \u2014 "),HU=n(iNe,"A",{href:!0});var PAt=s(HU);x8r=r(PAt,"TFMPNetForMaskedLM"),PAt.forEach(t),$8r=r(iNe," (MPNet model)"),iNe.forEach(t),k8r=i(fe),X8=n(fe,"LI",{});var dNe=s(X8);w6e=n(dNe,"STRONG",{});var BAt=s(w6e);S8r=r(BAt,"rembert"),BAt.forEach(t),R8r=r(dNe," \u2014 "),UU=n(dNe,"A",{href:!0});var IAt=s(UU);P8r=r(IAt,"TFRemBertForMaskedLM"),IAt.forEach(t),B8r=r(dNe," (RemBERT model)"),dNe.forEach(t),I8r=i(fe),z8=n(fe,"LI",{});var cNe=s(z8);A6e=n(cNe,"STRONG",{});var NAt=s(A6e);N8r=r(NAt,"roberta"),NAt.forEach(t),q8r=r(cNe," \u2014 "),JU=n(cNe,"A",{href:!0});var qAt=s(JU);j8r=r(qAt,"TFRobertaForMaskedLM"),qAt.forEach(t),D8r=r(cNe," (RoBERTa model)"),cNe.forEach(t),G8r=i(fe),W8=n(fe,"LI",{});var fNe=s(W8);L6e=n(fNe,"STRONG",{});var jAt=s(L6e);O8r=r(jAt,"roformer"),jAt.forEach(t),V8r=r(fNe," \u2014 "),YU=n(fNe,"A",{href:!0});var DAt=s(YU);X8r=r(DAt,"TFRoFormerForMaskedLM"),DAt.forEach(t),z8r=r(fNe," (RoFormer model)"),fNe.forEach(t),W8r=i(fe),Q8=n(fe,"LI",{});var mNe=s(Q8);y6e=n(mNe,"STRONG",{});var GAt=s(y6e);Q8r=r(GAt,"tapas"),GAt.forEach(t),H8r=r(mNe," \u2014 "),KU=n(mNe,"A",{href:!0});var OAt=s(KU);U8r=r(OAt,"TFTapasForMaskedLM"),OAt.forEach(t),J8r=r(mNe," (TAPAS model)"),mNe.forEach(t),Y8r=i(fe),H8=n(fe,"LI",{});var gNe=s(H8);x6e=n(gNe,"STRONG",{});var VAt=s(x6e);K8r=r(VAt,"xlm"),VAt.forEach(t),Z8r=r(gNe," \u2014 "),ZU=n(gNe,"A",{href:!0});var XAt=s(ZU);eMr=r(XAt,"TFXLMWithLMHeadModel"),XAt.forEach(t),oMr=r(gNe," (XLM model)"),gNe.forEach(t),rMr=i(fe),U8=n(fe,"LI",{});var hNe=s(U8);$6e=n(hNe,"STRONG",{});var zAt=s($6e);tMr=r(zAt,"xlm-roberta"),zAt.forEach(t),aMr=r(hNe," \u2014 "),eJ=n(hNe,"A",{href:!0});var WAt=s(eJ);nMr=r(WAt,"TFXLMRobertaForMaskedLM"),WAt.forEach(t),sMr=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),fe.forEach(t),lMr=i(Rl),T(J8.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),COe=i(f),uc=n(f,"H2",{class:!0});var SXe=s(uc);Y8=n(SXe,"A",{id:!0,class:!0,href:!0});var QAt=s(Y8);k6e=n(QAt,"SPAN",{});var HAt=s(k6e);T(S9.$$.fragment,HAt),HAt.forEach(t),QAt.forEach(t),iMr=i(SXe),S6e=n(SXe,"SPAN",{});var UAt=s(S6e);dMr=r(UAt,"TFAutoModelForSeq2SeqLM"),UAt.forEach(t),SXe.forEach(t),wOe=i(f),ar=n(f,"DIV",{class:!0});var Pl=s(ar);T(R9.$$.fragment,Pl),cMr=i(Pl),_c=n(Pl,"P",{});var ire=s(_c);fMr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oJ=n(ire,"A",{href:!0});var JAt=s(oJ);mMr=r(JAt,"from_pretrained()"),JAt.forEach(t),gMr=r(ire," class method or the "),rJ=n(ire,"A",{href:!0});var YAt=s(rJ);hMr=r(YAt,"from_config()"),YAt.forEach(t),pMr=r(ire,` class
method.`),ire.forEach(t),uMr=i(Pl),P9=n(Pl,"P",{});var RXe=s(P9);_Mr=r(RXe,"This class cannot be instantiated directly using "),R6e=n(RXe,"CODE",{});var KAt=s(R6e);bMr=r(KAt,"__init__()"),KAt.forEach(t),vMr=r(RXe," (throws an error)."),RXe.forEach(t),FMr=i(Pl),It=n(Pl,"DIV",{class:!0});var xw=s(It);T(B9.$$.fragment,xw),TMr=i(xw),P6e=n(xw,"P",{});var ZAt=s(P6e);MMr=r(ZAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZAt.forEach(t),EMr=i(xw),bc=n(xw,"P",{});var dre=s(bc);CMr=r(dre,`Note:
Loading a model from its configuration file does `),B6e=n(dre,"STRONG",{});var eLt=s(B6e);wMr=r(eLt,"not"),eLt.forEach(t),AMr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(dre,"A",{href:!0});var oLt=s(tJ);LMr=r(oLt,"from_pretrained()"),oLt.forEach(t),yMr=r(dre," to load the model weights."),dre.forEach(t),xMr=i(xw),T(K8.$$.fragment,xw),xw.forEach(t),$Mr=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(I9.$$.fragment,Bl),kMr=i(Bl),I6e=n(Bl,"P",{});var rLt=s(I6e);SMr=r(rLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rLt.forEach(t),RMr=i(Bl),cn=n(Bl,"P",{});var $w=s(cn);PMr=r($w,"The model class to instantiate is selected based on the "),N6e=n($w,"CODE",{});var tLt=s(N6e);BMr=r(tLt,"model_type"),tLt.forEach(t),IMr=r($w,` property of the config object (either
passed as an argument or loaded from `),q6e=n($w,"CODE",{});var aLt=s(q6e);NMr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),qMr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n($w,"CODE",{});var nLt=s(j6e);jMr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),DMr=r($w,":"),$w.forEach(t),GMr=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);Z8=n(Ie,"LI",{});var pNe=s(Z8);D6e=n(pNe,"STRONG",{});var sLt=s(D6e);OMr=r(sLt,"bart"),sLt.forEach(t),VMr=r(pNe," \u2014 "),aJ=n(pNe,"A",{href:!0});var lLt=s(aJ);XMr=r(lLt,"TFBartForConditionalGeneration"),lLt.forEach(t),zMr=r(pNe," (BART model)"),pNe.forEach(t),WMr=i(Ie),eM=n(Ie,"LI",{});var uNe=s(eM);G6e=n(uNe,"STRONG",{});var iLt=s(G6e);QMr=r(iLt,"blenderbot"),iLt.forEach(t),HMr=r(uNe," \u2014 "),nJ=n(uNe,"A",{href:!0});var dLt=s(nJ);UMr=r(dLt,"TFBlenderbotForConditionalGeneration"),dLt.forEach(t),JMr=r(uNe," (Blenderbot model)"),uNe.forEach(t),YMr=i(Ie),oM=n(Ie,"LI",{});var _Ne=s(oM);O6e=n(_Ne,"STRONG",{});var cLt=s(O6e);KMr=r(cLt,"blenderbot-small"),cLt.forEach(t),ZMr=r(_Ne," \u2014 "),sJ=n(_Ne,"A",{href:!0});var fLt=s(sJ);e4r=r(fLt,"TFBlenderbotSmallForConditionalGeneration"),fLt.forEach(t),o4r=r(_Ne," (BlenderbotSmall model)"),_Ne.forEach(t),r4r=i(Ie),rM=n(Ie,"LI",{});var bNe=s(rM);V6e=n(bNe,"STRONG",{});var mLt=s(V6e);t4r=r(mLt,"encoder-decoder"),mLt.forEach(t),a4r=r(bNe," \u2014 "),lJ=n(bNe,"A",{href:!0});var gLt=s(lJ);n4r=r(gLt,"TFEncoderDecoderModel"),gLt.forEach(t),s4r=r(bNe," (Encoder decoder model)"),bNe.forEach(t),l4r=i(Ie),tM=n(Ie,"LI",{});var vNe=s(tM);X6e=n(vNe,"STRONG",{});var hLt=s(X6e);i4r=r(hLt,"led"),hLt.forEach(t),d4r=r(vNe," \u2014 "),iJ=n(vNe,"A",{href:!0});var pLt=s(iJ);c4r=r(pLt,"TFLEDForConditionalGeneration"),pLt.forEach(t),f4r=r(vNe," (LED model)"),vNe.forEach(t),m4r=i(Ie),aM=n(Ie,"LI",{});var FNe=s(aM);z6e=n(FNe,"STRONG",{});var uLt=s(z6e);g4r=r(uLt,"marian"),uLt.forEach(t),h4r=r(FNe," \u2014 "),dJ=n(FNe,"A",{href:!0});var _Lt=s(dJ);p4r=r(_Lt,"TFMarianMTModel"),_Lt.forEach(t),u4r=r(FNe," (Marian model)"),FNe.forEach(t),_4r=i(Ie),nM=n(Ie,"LI",{});var TNe=s(nM);W6e=n(TNe,"STRONG",{});var bLt=s(W6e);b4r=r(bLt,"mbart"),bLt.forEach(t),v4r=r(TNe," \u2014 "),cJ=n(TNe,"A",{href:!0});var vLt=s(cJ);F4r=r(vLt,"TFMBartForConditionalGeneration"),vLt.forEach(t),T4r=r(TNe," (mBART model)"),TNe.forEach(t),M4r=i(Ie),sM=n(Ie,"LI",{});var MNe=s(sM);Q6e=n(MNe,"STRONG",{});var FLt=s(Q6e);E4r=r(FLt,"mt5"),FLt.forEach(t),C4r=r(MNe," \u2014 "),fJ=n(MNe,"A",{href:!0});var TLt=s(fJ);w4r=r(TLt,"TFMT5ForConditionalGeneration"),TLt.forEach(t),A4r=r(MNe," (MT5 model)"),MNe.forEach(t),L4r=i(Ie),lM=n(Ie,"LI",{});var ENe=s(lM);H6e=n(ENe,"STRONG",{});var MLt=s(H6e);y4r=r(MLt,"pegasus"),MLt.forEach(t),x4r=r(ENe," \u2014 "),mJ=n(ENe,"A",{href:!0});var ELt=s(mJ);$4r=r(ELt,"TFPegasusForConditionalGeneration"),ELt.forEach(t),k4r=r(ENe," (Pegasus model)"),ENe.forEach(t),S4r=i(Ie),iM=n(Ie,"LI",{});var CNe=s(iM);U6e=n(CNe,"STRONG",{});var CLt=s(U6e);R4r=r(CLt,"t5"),CLt.forEach(t),P4r=r(CNe," \u2014 "),gJ=n(CNe,"A",{href:!0});var wLt=s(gJ);B4r=r(wLt,"TFT5ForConditionalGeneration"),wLt.forEach(t),I4r=r(CNe," (T5 model)"),CNe.forEach(t),Ie.forEach(t),N4r=i(Bl),T(dM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),AOe=i(f),vc=n(f,"H2",{class:!0});var PXe=s(vc);cM=n(PXe,"A",{id:!0,class:!0,href:!0});var ALt=s(cM);J6e=n(ALt,"SPAN",{});var LLt=s(J6e);T(N9.$$.fragment,LLt),LLt.forEach(t),ALt.forEach(t),q4r=i(PXe),Y6e=n(PXe,"SPAN",{});var yLt=s(Y6e);j4r=r(yLt,"TFAutoModelForSequenceClassification"),yLt.forEach(t),PXe.forEach(t),LOe=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(q9.$$.fragment,Il),D4r=i(Il),Fc=n(Il,"P",{});var cre=s(Fc);G4r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hJ=n(cre,"A",{href:!0});var xLt=s(hJ);O4r=r(xLt,"from_pretrained()"),xLt.forEach(t),V4r=r(cre," class method or the "),pJ=n(cre,"A",{href:!0});var $Lt=s(pJ);X4r=r($Lt,"from_config()"),$Lt.forEach(t),z4r=r(cre,` class
method.`),cre.forEach(t),W4r=i(Il),j9=n(Il,"P",{});var BXe=s(j9);Q4r=r(BXe,"This class cannot be instantiated directly using "),K6e=n(BXe,"CODE",{});var kLt=s(K6e);H4r=r(kLt,"__init__()"),kLt.forEach(t),U4r=r(BXe," (throws an error)."),BXe.forEach(t),J4r=i(Il),Nt=n(Il,"DIV",{class:!0});var kw=s(Nt);T(D9.$$.fragment,kw),Y4r=i(kw),Z6e=n(kw,"P",{});var SLt=s(Z6e);K4r=r(SLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SLt.forEach(t),Z4r=i(kw),Tc=n(kw,"P",{});var fre=s(Tc);eEr=r(fre,`Note:
Loading a model from its configuration file does `),eTe=n(fre,"STRONG",{});var RLt=s(eTe);oEr=r(RLt,"not"),RLt.forEach(t),rEr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(fre,"A",{href:!0});var PLt=s(uJ);tEr=r(PLt,"from_pretrained()"),PLt.forEach(t),aEr=r(fre," to load the model weights."),fre.forEach(t),nEr=i(kw),T(fM.$$.fragment,kw),kw.forEach(t),sEr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(G9.$$.fragment,Nl),lEr=i(Nl),oTe=n(Nl,"P",{});var BLt=s(oTe);iEr=r(BLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BLt.forEach(t),dEr=i(Nl),fn=n(Nl,"P",{});var Sw=s(fn);cEr=r(Sw,"The model class to instantiate is selected based on the "),rTe=n(Sw,"CODE",{});var ILt=s(rTe);fEr=r(ILt,"model_type"),ILt.forEach(t),mEr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),tTe=n(Sw,"CODE",{});var NLt=s(tTe);gEr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),hEr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(Sw,"CODE",{});var qLt=s(aTe);pEr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),uEr=r(Sw,":"),Sw.forEach(t),_Er=i(Nl),te=n(Nl,"UL",{});var ne=s(te);mM=n(ne,"LI",{});var wNe=s(mM);nTe=n(wNe,"STRONG",{});var jLt=s(nTe);bEr=r(jLt,"albert"),jLt.forEach(t),vEr=r(wNe," \u2014 "),_J=n(wNe,"A",{href:!0});var DLt=s(_J);FEr=r(DLt,"TFAlbertForSequenceClassification"),DLt.forEach(t),TEr=r(wNe," (ALBERT model)"),wNe.forEach(t),MEr=i(ne),gM=n(ne,"LI",{});var ANe=s(gM);sTe=n(ANe,"STRONG",{});var GLt=s(sTe);EEr=r(GLt,"bert"),GLt.forEach(t),CEr=r(ANe," \u2014 "),bJ=n(ANe,"A",{href:!0});var OLt=s(bJ);wEr=r(OLt,"TFBertForSequenceClassification"),OLt.forEach(t),AEr=r(ANe," (BERT model)"),ANe.forEach(t),LEr=i(ne),hM=n(ne,"LI",{});var LNe=s(hM);lTe=n(LNe,"STRONG",{});var VLt=s(lTe);yEr=r(VLt,"camembert"),VLt.forEach(t),xEr=r(LNe," \u2014 "),vJ=n(LNe,"A",{href:!0});var XLt=s(vJ);$Er=r(XLt,"TFCamembertForSequenceClassification"),XLt.forEach(t),kEr=r(LNe," (CamemBERT model)"),LNe.forEach(t),SEr=i(ne),pM=n(ne,"LI",{});var yNe=s(pM);iTe=n(yNe,"STRONG",{});var zLt=s(iTe);REr=r(zLt,"convbert"),zLt.forEach(t),PEr=r(yNe," \u2014 "),FJ=n(yNe,"A",{href:!0});var WLt=s(FJ);BEr=r(WLt,"TFConvBertForSequenceClassification"),WLt.forEach(t),IEr=r(yNe," (ConvBERT model)"),yNe.forEach(t),NEr=i(ne),uM=n(ne,"LI",{});var xNe=s(uM);dTe=n(xNe,"STRONG",{});var QLt=s(dTe);qEr=r(QLt,"ctrl"),QLt.forEach(t),jEr=r(xNe," \u2014 "),TJ=n(xNe,"A",{href:!0});var HLt=s(TJ);DEr=r(HLt,"TFCTRLForSequenceClassification"),HLt.forEach(t),GEr=r(xNe," (CTRL model)"),xNe.forEach(t),OEr=i(ne),_M=n(ne,"LI",{});var $Ne=s(_M);cTe=n($Ne,"STRONG",{});var ULt=s(cTe);VEr=r(ULt,"deberta"),ULt.forEach(t),XEr=r($Ne," \u2014 "),MJ=n($Ne,"A",{href:!0});var JLt=s(MJ);zEr=r(JLt,"TFDebertaForSequenceClassification"),JLt.forEach(t),WEr=r($Ne," (DeBERTa model)"),$Ne.forEach(t),QEr=i(ne),bM=n(ne,"LI",{});var kNe=s(bM);fTe=n(kNe,"STRONG",{});var YLt=s(fTe);HEr=r(YLt,"deberta-v2"),YLt.forEach(t),UEr=r(kNe," \u2014 "),EJ=n(kNe,"A",{href:!0});var KLt=s(EJ);JEr=r(KLt,"TFDebertaV2ForSequenceClassification"),KLt.forEach(t),YEr=r(kNe," (DeBERTa-v2 model)"),kNe.forEach(t),KEr=i(ne),vM=n(ne,"LI",{});var SNe=s(vM);mTe=n(SNe,"STRONG",{});var ZLt=s(mTe);ZEr=r(ZLt,"distilbert"),ZLt.forEach(t),eCr=r(SNe," \u2014 "),CJ=n(SNe,"A",{href:!0});var eyt=s(CJ);oCr=r(eyt,"TFDistilBertForSequenceClassification"),eyt.forEach(t),rCr=r(SNe," (DistilBERT model)"),SNe.forEach(t),tCr=i(ne),FM=n(ne,"LI",{});var RNe=s(FM);gTe=n(RNe,"STRONG",{});var oyt=s(gTe);aCr=r(oyt,"electra"),oyt.forEach(t),nCr=r(RNe," \u2014 "),wJ=n(RNe,"A",{href:!0});var ryt=s(wJ);sCr=r(ryt,"TFElectraForSequenceClassification"),ryt.forEach(t),lCr=r(RNe," (ELECTRA model)"),RNe.forEach(t),iCr=i(ne),TM=n(ne,"LI",{});var PNe=s(TM);hTe=n(PNe,"STRONG",{});var tyt=s(hTe);dCr=r(tyt,"flaubert"),tyt.forEach(t),cCr=r(PNe," \u2014 "),AJ=n(PNe,"A",{href:!0});var ayt=s(AJ);fCr=r(ayt,"TFFlaubertForSequenceClassification"),ayt.forEach(t),mCr=r(PNe," (FlauBERT model)"),PNe.forEach(t),gCr=i(ne),MM=n(ne,"LI",{});var BNe=s(MM);pTe=n(BNe,"STRONG",{});var nyt=s(pTe);hCr=r(nyt,"funnel"),nyt.forEach(t),pCr=r(BNe," \u2014 "),LJ=n(BNe,"A",{href:!0});var syt=s(LJ);uCr=r(syt,"TFFunnelForSequenceClassification"),syt.forEach(t),_Cr=r(BNe," (Funnel Transformer model)"),BNe.forEach(t),bCr=i(ne),EM=n(ne,"LI",{});var INe=s(EM);uTe=n(INe,"STRONG",{});var lyt=s(uTe);vCr=r(lyt,"gpt2"),lyt.forEach(t),FCr=r(INe," \u2014 "),yJ=n(INe,"A",{href:!0});var iyt=s(yJ);TCr=r(iyt,"TFGPT2ForSequenceClassification"),iyt.forEach(t),MCr=r(INe," (OpenAI GPT-2 model)"),INe.forEach(t),ECr=i(ne),CM=n(ne,"LI",{});var NNe=s(CM);_Te=n(NNe,"STRONG",{});var dyt=s(_Te);CCr=r(dyt,"gptj"),dyt.forEach(t),wCr=r(NNe," \u2014 "),xJ=n(NNe,"A",{href:!0});var cyt=s(xJ);ACr=r(cyt,"TFGPTJForSequenceClassification"),cyt.forEach(t),LCr=r(NNe," (GPT-J model)"),NNe.forEach(t),yCr=i(ne),wM=n(ne,"LI",{});var qNe=s(wM);bTe=n(qNe,"STRONG",{});var fyt=s(bTe);xCr=r(fyt,"layoutlm"),fyt.forEach(t),$Cr=r(qNe," \u2014 "),$J=n(qNe,"A",{href:!0});var myt=s($J);kCr=r(myt,"TFLayoutLMForSequenceClassification"),myt.forEach(t),SCr=r(qNe," (LayoutLM model)"),qNe.forEach(t),RCr=i(ne),AM=n(ne,"LI",{});var jNe=s(AM);vTe=n(jNe,"STRONG",{});var gyt=s(vTe);PCr=r(gyt,"longformer"),gyt.forEach(t),BCr=r(jNe," \u2014 "),kJ=n(jNe,"A",{href:!0});var hyt=s(kJ);ICr=r(hyt,"TFLongformerForSequenceClassification"),hyt.forEach(t),NCr=r(jNe," (Longformer model)"),jNe.forEach(t),qCr=i(ne),LM=n(ne,"LI",{});var DNe=s(LM);FTe=n(DNe,"STRONG",{});var pyt=s(FTe);jCr=r(pyt,"mobilebert"),pyt.forEach(t),DCr=r(DNe," \u2014 "),SJ=n(DNe,"A",{href:!0});var uyt=s(SJ);GCr=r(uyt,"TFMobileBertForSequenceClassification"),uyt.forEach(t),OCr=r(DNe," (MobileBERT model)"),DNe.forEach(t),VCr=i(ne),yM=n(ne,"LI",{});var GNe=s(yM);TTe=n(GNe,"STRONG",{});var _yt=s(TTe);XCr=r(_yt,"mpnet"),_yt.forEach(t),zCr=r(GNe," \u2014 "),RJ=n(GNe,"A",{href:!0});var byt=s(RJ);WCr=r(byt,"TFMPNetForSequenceClassification"),byt.forEach(t),QCr=r(GNe," (MPNet model)"),GNe.forEach(t),HCr=i(ne),xM=n(ne,"LI",{});var ONe=s(xM);MTe=n(ONe,"STRONG",{});var vyt=s(MTe);UCr=r(vyt,"openai-gpt"),vyt.forEach(t),JCr=r(ONe," \u2014 "),PJ=n(ONe,"A",{href:!0});var Fyt=s(PJ);YCr=r(Fyt,"TFOpenAIGPTForSequenceClassification"),Fyt.forEach(t),KCr=r(ONe," (OpenAI GPT model)"),ONe.forEach(t),ZCr=i(ne),$M=n(ne,"LI",{});var VNe=s($M);ETe=n(VNe,"STRONG",{});var Tyt=s(ETe);e5r=r(Tyt,"rembert"),Tyt.forEach(t),o5r=r(VNe," \u2014 "),BJ=n(VNe,"A",{href:!0});var Myt=s(BJ);r5r=r(Myt,"TFRemBertForSequenceClassification"),Myt.forEach(t),t5r=r(VNe," (RemBERT model)"),VNe.forEach(t),a5r=i(ne),kM=n(ne,"LI",{});var XNe=s(kM);CTe=n(XNe,"STRONG",{});var Eyt=s(CTe);n5r=r(Eyt,"roberta"),Eyt.forEach(t),s5r=r(XNe," \u2014 "),IJ=n(XNe,"A",{href:!0});var Cyt=s(IJ);l5r=r(Cyt,"TFRobertaForSequenceClassification"),Cyt.forEach(t),i5r=r(XNe," (RoBERTa model)"),XNe.forEach(t),d5r=i(ne),SM=n(ne,"LI",{});var zNe=s(SM);wTe=n(zNe,"STRONG",{});var wyt=s(wTe);c5r=r(wyt,"roformer"),wyt.forEach(t),f5r=r(zNe," \u2014 "),NJ=n(zNe,"A",{href:!0});var Ayt=s(NJ);m5r=r(Ayt,"TFRoFormerForSequenceClassification"),Ayt.forEach(t),g5r=r(zNe," (RoFormer model)"),zNe.forEach(t),h5r=i(ne),RM=n(ne,"LI",{});var WNe=s(RM);ATe=n(WNe,"STRONG",{});var Lyt=s(ATe);p5r=r(Lyt,"tapas"),Lyt.forEach(t),u5r=r(WNe," \u2014 "),qJ=n(WNe,"A",{href:!0});var yyt=s(qJ);_5r=r(yyt,"TFTapasForSequenceClassification"),yyt.forEach(t),b5r=r(WNe," (TAPAS model)"),WNe.forEach(t),v5r=i(ne),PM=n(ne,"LI",{});var QNe=s(PM);LTe=n(QNe,"STRONG",{});var xyt=s(LTe);F5r=r(xyt,"transfo-xl"),xyt.forEach(t),T5r=r(QNe," \u2014 "),jJ=n(QNe,"A",{href:!0});var $yt=s(jJ);M5r=r($yt,"TFTransfoXLForSequenceClassification"),$yt.forEach(t),E5r=r(QNe," (Transformer-XL model)"),QNe.forEach(t),C5r=i(ne),BM=n(ne,"LI",{});var HNe=s(BM);yTe=n(HNe,"STRONG",{});var kyt=s(yTe);w5r=r(kyt,"xlm"),kyt.forEach(t),A5r=r(HNe," \u2014 "),DJ=n(HNe,"A",{href:!0});var Syt=s(DJ);L5r=r(Syt,"TFXLMForSequenceClassification"),Syt.forEach(t),y5r=r(HNe," (XLM model)"),HNe.forEach(t),x5r=i(ne),IM=n(ne,"LI",{});var UNe=s(IM);xTe=n(UNe,"STRONG",{});var Ryt=s(xTe);$5r=r(Ryt,"xlm-roberta"),Ryt.forEach(t),k5r=r(UNe," \u2014 "),GJ=n(UNe,"A",{href:!0});var Pyt=s(GJ);S5r=r(Pyt,"TFXLMRobertaForSequenceClassification"),Pyt.forEach(t),R5r=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),P5r=i(ne),NM=n(ne,"LI",{});var JNe=s(NM);$Te=n(JNe,"STRONG",{});var Byt=s($Te);B5r=r(Byt,"xlnet"),Byt.forEach(t),I5r=r(JNe," \u2014 "),OJ=n(JNe,"A",{href:!0});var Iyt=s(OJ);N5r=r(Iyt,"TFXLNetForSequenceClassification"),Iyt.forEach(t),q5r=r(JNe," (XLNet model)"),JNe.forEach(t),ne.forEach(t),j5r=i(Nl),T(qM.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),yOe=i(f),Mc=n(f,"H2",{class:!0});var IXe=s(Mc);jM=n(IXe,"A",{id:!0,class:!0,href:!0});var Nyt=s(jM);kTe=n(Nyt,"SPAN",{});var qyt=s(kTe);T(O9.$$.fragment,qyt),qyt.forEach(t),Nyt.forEach(t),D5r=i(IXe),STe=n(IXe,"SPAN",{});var jyt=s(STe);G5r=r(jyt,"TFAutoModelForMultipleChoice"),jyt.forEach(t),IXe.forEach(t),xOe=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(V9.$$.fragment,ql),O5r=i(ql),Ec=n(ql,"P",{});var mre=s(Ec);V5r=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VJ=n(mre,"A",{href:!0});var Dyt=s(VJ);X5r=r(Dyt,"from_pretrained()"),Dyt.forEach(t),z5r=r(mre," class method or the "),XJ=n(mre,"A",{href:!0});var Gyt=s(XJ);W5r=r(Gyt,"from_config()"),Gyt.forEach(t),Q5r=r(mre,` class
method.`),mre.forEach(t),H5r=i(ql),X9=n(ql,"P",{});var NXe=s(X9);U5r=r(NXe,"This class cannot be instantiated directly using "),RTe=n(NXe,"CODE",{});var Oyt=s(RTe);J5r=r(Oyt,"__init__()"),Oyt.forEach(t),Y5r=r(NXe," (throws an error)."),NXe.forEach(t),K5r=i(ql),qt=n(ql,"DIV",{class:!0});var Rw=s(qt);T(z9.$$.fragment,Rw),Z5r=i(Rw),PTe=n(Rw,"P",{});var Vyt=s(PTe);e3r=r(Vyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vyt.forEach(t),o3r=i(Rw),Cc=n(Rw,"P",{});var gre=s(Cc);r3r=r(gre,`Note:
Loading a model from its configuration file does `),BTe=n(gre,"STRONG",{});var Xyt=s(BTe);t3r=r(Xyt,"not"),Xyt.forEach(t),a3r=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(gre,"A",{href:!0});var zyt=s(zJ);n3r=r(zyt,"from_pretrained()"),zyt.forEach(t),s3r=r(gre," to load the model weights."),gre.forEach(t),l3r=i(Rw),T(DM.$$.fragment,Rw),Rw.forEach(t),i3r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(W9.$$.fragment,jl),d3r=i(jl),ITe=n(jl,"P",{});var Wyt=s(ITe);c3r=r(Wyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wyt.forEach(t),f3r=i(jl),mn=n(jl,"P",{});var Pw=s(mn);m3r=r(Pw,"The model class to instantiate is selected based on the "),NTe=n(Pw,"CODE",{});var Qyt=s(NTe);g3r=r(Qyt,"model_type"),Qyt.forEach(t),h3r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),qTe=n(Pw,"CODE",{});var Hyt=s(qTe);p3r=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),u3r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(Pw,"CODE",{});var Uyt=s(jTe);_3r=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),b3r=r(Pw,":"),Pw.forEach(t),v3r=i(jl),ue=n(jl,"UL",{});var ve=s(ue);GM=n(ve,"LI",{});var YNe=s(GM);DTe=n(YNe,"STRONG",{});var Jyt=s(DTe);F3r=r(Jyt,"albert"),Jyt.forEach(t),T3r=r(YNe," \u2014 "),WJ=n(YNe,"A",{href:!0});var Yyt=s(WJ);M3r=r(Yyt,"TFAlbertForMultipleChoice"),Yyt.forEach(t),E3r=r(YNe," (ALBERT model)"),YNe.forEach(t),C3r=i(ve),OM=n(ve,"LI",{});var KNe=s(OM);GTe=n(KNe,"STRONG",{});var Kyt=s(GTe);w3r=r(Kyt,"bert"),Kyt.forEach(t),A3r=r(KNe," \u2014 "),QJ=n(KNe,"A",{href:!0});var Zyt=s(QJ);L3r=r(Zyt,"TFBertForMultipleChoice"),Zyt.forEach(t),y3r=r(KNe," (BERT model)"),KNe.forEach(t),x3r=i(ve),VM=n(ve,"LI",{});var ZNe=s(VM);OTe=n(ZNe,"STRONG",{});var e9t=s(OTe);$3r=r(e9t,"camembert"),e9t.forEach(t),k3r=r(ZNe," \u2014 "),HJ=n(ZNe,"A",{href:!0});var o9t=s(HJ);S3r=r(o9t,"TFCamembertForMultipleChoice"),o9t.forEach(t),R3r=r(ZNe," (CamemBERT model)"),ZNe.forEach(t),P3r=i(ve),XM=n(ve,"LI",{});var eqe=s(XM);VTe=n(eqe,"STRONG",{});var r9t=s(VTe);B3r=r(r9t,"convbert"),r9t.forEach(t),I3r=r(eqe," \u2014 "),UJ=n(eqe,"A",{href:!0});var t9t=s(UJ);N3r=r(t9t,"TFConvBertForMultipleChoice"),t9t.forEach(t),q3r=r(eqe," (ConvBERT model)"),eqe.forEach(t),j3r=i(ve),zM=n(ve,"LI",{});var oqe=s(zM);XTe=n(oqe,"STRONG",{});var a9t=s(XTe);D3r=r(a9t,"distilbert"),a9t.forEach(t),G3r=r(oqe," \u2014 "),JJ=n(oqe,"A",{href:!0});var n9t=s(JJ);O3r=r(n9t,"TFDistilBertForMultipleChoice"),n9t.forEach(t),V3r=r(oqe," (DistilBERT model)"),oqe.forEach(t),X3r=i(ve),WM=n(ve,"LI",{});var rqe=s(WM);zTe=n(rqe,"STRONG",{});var s9t=s(zTe);z3r=r(s9t,"electra"),s9t.forEach(t),W3r=r(rqe," \u2014 "),YJ=n(rqe,"A",{href:!0});var l9t=s(YJ);Q3r=r(l9t,"TFElectraForMultipleChoice"),l9t.forEach(t),H3r=r(rqe," (ELECTRA model)"),rqe.forEach(t),U3r=i(ve),QM=n(ve,"LI",{});var tqe=s(QM);WTe=n(tqe,"STRONG",{});var i9t=s(WTe);J3r=r(i9t,"flaubert"),i9t.forEach(t),Y3r=r(tqe," \u2014 "),KJ=n(tqe,"A",{href:!0});var d9t=s(KJ);K3r=r(d9t,"TFFlaubertForMultipleChoice"),d9t.forEach(t),Z3r=r(tqe," (FlauBERT model)"),tqe.forEach(t),ewr=i(ve),HM=n(ve,"LI",{});var aqe=s(HM);QTe=n(aqe,"STRONG",{});var c9t=s(QTe);owr=r(c9t,"funnel"),c9t.forEach(t),rwr=r(aqe," \u2014 "),ZJ=n(aqe,"A",{href:!0});var f9t=s(ZJ);twr=r(f9t,"TFFunnelForMultipleChoice"),f9t.forEach(t),awr=r(aqe," (Funnel Transformer model)"),aqe.forEach(t),nwr=i(ve),UM=n(ve,"LI",{});var nqe=s(UM);HTe=n(nqe,"STRONG",{});var m9t=s(HTe);swr=r(m9t,"longformer"),m9t.forEach(t),lwr=r(nqe," \u2014 "),eY=n(nqe,"A",{href:!0});var g9t=s(eY);iwr=r(g9t,"TFLongformerForMultipleChoice"),g9t.forEach(t),dwr=r(nqe," (Longformer model)"),nqe.forEach(t),cwr=i(ve),JM=n(ve,"LI",{});var sqe=s(JM);UTe=n(sqe,"STRONG",{});var h9t=s(UTe);fwr=r(h9t,"mobilebert"),h9t.forEach(t),mwr=r(sqe," \u2014 "),oY=n(sqe,"A",{href:!0});var p9t=s(oY);gwr=r(p9t,"TFMobileBertForMultipleChoice"),p9t.forEach(t),hwr=r(sqe," (MobileBERT model)"),sqe.forEach(t),pwr=i(ve),YM=n(ve,"LI",{});var lqe=s(YM);JTe=n(lqe,"STRONG",{});var u9t=s(JTe);uwr=r(u9t,"mpnet"),u9t.forEach(t),_wr=r(lqe," \u2014 "),rY=n(lqe,"A",{href:!0});var _9t=s(rY);bwr=r(_9t,"TFMPNetForMultipleChoice"),_9t.forEach(t),vwr=r(lqe," (MPNet model)"),lqe.forEach(t),Fwr=i(ve),KM=n(ve,"LI",{});var iqe=s(KM);YTe=n(iqe,"STRONG",{});var b9t=s(YTe);Twr=r(b9t,"rembert"),b9t.forEach(t),Mwr=r(iqe," \u2014 "),tY=n(iqe,"A",{href:!0});var v9t=s(tY);Ewr=r(v9t,"TFRemBertForMultipleChoice"),v9t.forEach(t),Cwr=r(iqe," (RemBERT model)"),iqe.forEach(t),wwr=i(ve),ZM=n(ve,"LI",{});var dqe=s(ZM);KTe=n(dqe,"STRONG",{});var F9t=s(KTe);Awr=r(F9t,"roberta"),F9t.forEach(t),Lwr=r(dqe," \u2014 "),aY=n(dqe,"A",{href:!0});var T9t=s(aY);ywr=r(T9t,"TFRobertaForMultipleChoice"),T9t.forEach(t),xwr=r(dqe," (RoBERTa model)"),dqe.forEach(t),$wr=i(ve),e4=n(ve,"LI",{});var cqe=s(e4);ZTe=n(cqe,"STRONG",{});var M9t=s(ZTe);kwr=r(M9t,"roformer"),M9t.forEach(t),Swr=r(cqe," \u2014 "),nY=n(cqe,"A",{href:!0});var E9t=s(nY);Rwr=r(E9t,"TFRoFormerForMultipleChoice"),E9t.forEach(t),Pwr=r(cqe," (RoFormer model)"),cqe.forEach(t),Bwr=i(ve),o4=n(ve,"LI",{});var fqe=s(o4);e7e=n(fqe,"STRONG",{});var C9t=s(e7e);Iwr=r(C9t,"xlm"),C9t.forEach(t),Nwr=r(fqe," \u2014 "),sY=n(fqe,"A",{href:!0});var w9t=s(sY);qwr=r(w9t,"TFXLMForMultipleChoice"),w9t.forEach(t),jwr=r(fqe," (XLM model)"),fqe.forEach(t),Dwr=i(ve),r4=n(ve,"LI",{});var mqe=s(r4);o7e=n(mqe,"STRONG",{});var A9t=s(o7e);Gwr=r(A9t,"xlm-roberta"),A9t.forEach(t),Owr=r(mqe," \u2014 "),lY=n(mqe,"A",{href:!0});var L9t=s(lY);Vwr=r(L9t,"TFXLMRobertaForMultipleChoice"),L9t.forEach(t),Xwr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),zwr=i(ve),t4=n(ve,"LI",{});var gqe=s(t4);r7e=n(gqe,"STRONG",{});var y9t=s(r7e);Wwr=r(y9t,"xlnet"),y9t.forEach(t),Qwr=r(gqe," \u2014 "),iY=n(gqe,"A",{href:!0});var x9t=s(iY);Hwr=r(x9t,"TFXLNetForMultipleChoice"),x9t.forEach(t),Uwr=r(gqe," (XLNet model)"),gqe.forEach(t),ve.forEach(t),Jwr=i(jl),T(a4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),$Oe=i(f),wc=n(f,"H2",{class:!0});var qXe=s(wc);n4=n(qXe,"A",{id:!0,class:!0,href:!0});var $9t=s(n4);t7e=n($9t,"SPAN",{});var k9t=s(t7e);T(Q9.$$.fragment,k9t),k9t.forEach(t),$9t.forEach(t),Ywr=i(qXe),a7e=n(qXe,"SPAN",{});var S9t=s(a7e);Kwr=r(S9t,"TFAutoModelForNextSentencePrediction"),S9t.forEach(t),qXe.forEach(t),kOe=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(H9.$$.fragment,Dl),Zwr=i(Dl),Ac=n(Dl,"P",{});var hre=s(Ac);eAr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=n(hre,"A",{href:!0});var R9t=s(dY);oAr=r(R9t,"from_pretrained()"),R9t.forEach(t),rAr=r(hre," class method or the "),cY=n(hre,"A",{href:!0});var P9t=s(cY);tAr=r(P9t,"from_config()"),P9t.forEach(t),aAr=r(hre,` class
method.`),hre.forEach(t),nAr=i(Dl),U9=n(Dl,"P",{});var jXe=s(U9);sAr=r(jXe,"This class cannot be instantiated directly using "),n7e=n(jXe,"CODE",{});var B9t=s(n7e);lAr=r(B9t,"__init__()"),B9t.forEach(t),iAr=r(jXe," (throws an error)."),jXe.forEach(t),dAr=i(Dl),jt=n(Dl,"DIV",{class:!0});var Bw=s(jt);T(J9.$$.fragment,Bw),cAr=i(Bw),s7e=n(Bw,"P",{});var I9t=s(s7e);fAr=r(I9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),I9t.forEach(t),mAr=i(Bw),Lc=n(Bw,"P",{});var pre=s(Lc);gAr=r(pre,`Note:
Loading a model from its configuration file does `),l7e=n(pre,"STRONG",{});var N9t=s(l7e);hAr=r(N9t,"not"),N9t.forEach(t),pAr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(pre,"A",{href:!0});var q9t=s(fY);uAr=r(q9t,"from_pretrained()"),q9t.forEach(t),_Ar=r(pre," to load the model weights."),pre.forEach(t),bAr=i(Bw),T(s4.$$.fragment,Bw),Bw.forEach(t),vAr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Y9.$$.fragment,Gl),FAr=i(Gl),i7e=n(Gl,"P",{});var j9t=s(i7e);TAr=r(j9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),j9t.forEach(t),MAr=i(Gl),gn=n(Gl,"P",{});var Iw=s(gn);EAr=r(Iw,"The model class to instantiate is selected based on the "),d7e=n(Iw,"CODE",{});var D9t=s(d7e);CAr=r(D9t,"model_type"),D9t.forEach(t),wAr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),c7e=n(Iw,"CODE",{});var G9t=s(c7e);AAr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),LAr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(Iw,"CODE",{});var O9t=s(f7e);yAr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),xAr=r(Iw,":"),Iw.forEach(t),$Ar=i(Gl),K9=n(Gl,"UL",{});var DXe=s(K9);l4=n(DXe,"LI",{});var hqe=s(l4);m7e=n(hqe,"STRONG",{});var V9t=s(m7e);kAr=r(V9t,"bert"),V9t.forEach(t),SAr=r(hqe," \u2014 "),mY=n(hqe,"A",{href:!0});var X9t=s(mY);RAr=r(X9t,"TFBertForNextSentencePrediction"),X9t.forEach(t),PAr=r(hqe," (BERT model)"),hqe.forEach(t),BAr=i(DXe),i4=n(DXe,"LI",{});var pqe=s(i4);g7e=n(pqe,"STRONG",{});var z9t=s(g7e);IAr=r(z9t,"mobilebert"),z9t.forEach(t),NAr=r(pqe," \u2014 "),gY=n(pqe,"A",{href:!0});var W9t=s(gY);qAr=r(W9t,"TFMobileBertForNextSentencePrediction"),W9t.forEach(t),jAr=r(pqe," (MobileBERT model)"),pqe.forEach(t),DXe.forEach(t),DAr=i(Gl),T(d4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),SOe=i(f),yc=n(f,"H2",{class:!0});var GXe=s(yc);c4=n(GXe,"A",{id:!0,class:!0,href:!0});var Q9t=s(c4);h7e=n(Q9t,"SPAN",{});var H9t=s(h7e);T(Z9.$$.fragment,H9t),H9t.forEach(t),Q9t.forEach(t),GAr=i(GXe),p7e=n(GXe,"SPAN",{});var U9t=s(p7e);OAr=r(U9t,"TFAutoModelForTableQuestionAnswering"),U9t.forEach(t),GXe.forEach(t),ROe=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(ex.$$.fragment,Ol),VAr=i(Ol),xc=n(Ol,"P",{});var ure=s(xc);XAr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hY=n(ure,"A",{href:!0});var J9t=s(hY);zAr=r(J9t,"from_pretrained()"),J9t.forEach(t),WAr=r(ure," class method or the "),pY=n(ure,"A",{href:!0});var Y9t=s(pY);QAr=r(Y9t,"from_config()"),Y9t.forEach(t),HAr=r(ure,` class
method.`),ure.forEach(t),UAr=i(Ol),ox=n(Ol,"P",{});var OXe=s(ox);JAr=r(OXe,"This class cannot be instantiated directly using "),u7e=n(OXe,"CODE",{});var K9t=s(u7e);YAr=r(K9t,"__init__()"),K9t.forEach(t),KAr=r(OXe," (throws an error)."),OXe.forEach(t),ZAr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var Nw=s(Dt);T(rx.$$.fragment,Nw),eLr=i(Nw),_7e=n(Nw,"P",{});var Z9t=s(_7e);oLr=r(Z9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z9t.forEach(t),rLr=i(Nw),$c=n(Nw,"P",{});var _re=s($c);tLr=r(_re,`Note:
Loading a model from its configuration file does `),b7e=n(_re,"STRONG",{});var ext=s(b7e);aLr=r(ext,"not"),ext.forEach(t),nLr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(_re,"A",{href:!0});var oxt=s(uY);sLr=r(oxt,"from_pretrained()"),oxt.forEach(t),lLr=r(_re," to load the model weights."),_re.forEach(t),iLr=i(Nw),T(f4.$$.fragment,Nw),Nw.forEach(t),dLr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(tx.$$.fragment,Vl),cLr=i(Vl),v7e=n(Vl,"P",{});var rxt=s(v7e);fLr=r(rxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rxt.forEach(t),mLr=i(Vl),hn=n(Vl,"P",{});var qw=s(hn);gLr=r(qw,"The model class to instantiate is selected based on the "),F7e=n(qw,"CODE",{});var txt=s(F7e);hLr=r(txt,"model_type"),txt.forEach(t),pLr=r(qw,` property of the config object (either
passed as an argument or loaded from `),T7e=n(qw,"CODE",{});var axt=s(T7e);uLr=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),_Lr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(qw,"CODE",{});var nxt=s(M7e);bLr=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),vLr=r(qw,":"),qw.forEach(t),FLr=i(Vl),E7e=n(Vl,"UL",{});var sxt=s(E7e);m4=n(sxt,"LI",{});var uqe=s(m4);C7e=n(uqe,"STRONG",{});var lxt=s(C7e);TLr=r(lxt,"tapas"),lxt.forEach(t),MLr=r(uqe," \u2014 "),_Y=n(uqe,"A",{href:!0});var ixt=s(_Y);ELr=r(ixt,"TFTapasForQuestionAnswering"),ixt.forEach(t),CLr=r(uqe," (TAPAS model)"),uqe.forEach(t),sxt.forEach(t),wLr=i(Vl),T(g4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),POe=i(f),kc=n(f,"H2",{class:!0});var VXe=s(kc);h4=n(VXe,"A",{id:!0,class:!0,href:!0});var dxt=s(h4);w7e=n(dxt,"SPAN",{});var cxt=s(w7e);T(ax.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),ALr=i(VXe),A7e=n(VXe,"SPAN",{});var fxt=s(A7e);LLr=r(fxt,"TFAutoModelForTokenClassification"),fxt.forEach(t),VXe.forEach(t),BOe=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(nx.$$.fragment,Xl),yLr=i(Xl),Sc=n(Xl,"P",{});var bre=s(Sc);xLr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bY=n(bre,"A",{href:!0});var mxt=s(bY);$Lr=r(mxt,"from_pretrained()"),mxt.forEach(t),kLr=r(bre," class method or the "),vY=n(bre,"A",{href:!0});var gxt=s(vY);SLr=r(gxt,"from_config()"),gxt.forEach(t),RLr=r(bre,` class
method.`),bre.forEach(t),PLr=i(Xl),sx=n(Xl,"P",{});var XXe=s(sx);BLr=r(XXe,"This class cannot be instantiated directly using "),L7e=n(XXe,"CODE",{});var hxt=s(L7e);ILr=r(hxt,"__init__()"),hxt.forEach(t),NLr=r(XXe," (throws an error)."),XXe.forEach(t),qLr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var jw=s(Gt);T(lx.$$.fragment,jw),jLr=i(jw),y7e=n(jw,"P",{});var pxt=s(y7e);DLr=r(pxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pxt.forEach(t),GLr=i(jw),Rc=n(jw,"P",{});var vre=s(Rc);OLr=r(vre,`Note:
Loading a model from its configuration file does `),x7e=n(vre,"STRONG",{});var uxt=s(x7e);VLr=r(uxt,"not"),uxt.forEach(t),XLr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(vre,"A",{href:!0});var _xt=s(FY);zLr=r(_xt,"from_pretrained()"),_xt.forEach(t),WLr=r(vre," to load the model weights."),vre.forEach(t),QLr=i(jw),T(p4.$$.fragment,jw),jw.forEach(t),HLr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(ix.$$.fragment,zl),ULr=i(zl),$7e=n(zl,"P",{});var bxt=s($7e);JLr=r(bxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bxt.forEach(t),YLr=i(zl),pn=n(zl,"P",{});var Dw=s(pn);KLr=r(Dw,"The model class to instantiate is selected based on the "),k7e=n(Dw,"CODE",{});var vxt=s(k7e);ZLr=r(vxt,"model_type"),vxt.forEach(t),eyr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),S7e=n(Dw,"CODE",{});var Fxt=s(S7e);oyr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),ryr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(Dw,"CODE",{});var Txt=s(R7e);tyr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),ayr=r(Dw,":"),Dw.forEach(t),nyr=i(zl),de=n(zl,"UL",{});var me=s(de);u4=n(me,"LI",{});var _qe=s(u4);P7e=n(_qe,"STRONG",{});var Mxt=s(P7e);syr=r(Mxt,"albert"),Mxt.forEach(t),lyr=r(_qe," \u2014 "),TY=n(_qe,"A",{href:!0});var Ext=s(TY);iyr=r(Ext,"TFAlbertForTokenClassification"),Ext.forEach(t),dyr=r(_qe," (ALBERT model)"),_qe.forEach(t),cyr=i(me),_4=n(me,"LI",{});var bqe=s(_4);B7e=n(bqe,"STRONG",{});var Cxt=s(B7e);fyr=r(Cxt,"bert"),Cxt.forEach(t),myr=r(bqe," \u2014 "),MY=n(bqe,"A",{href:!0});var wxt=s(MY);gyr=r(wxt,"TFBertForTokenClassification"),wxt.forEach(t),hyr=r(bqe," (BERT model)"),bqe.forEach(t),pyr=i(me),b4=n(me,"LI",{});var vqe=s(b4);I7e=n(vqe,"STRONG",{});var Axt=s(I7e);uyr=r(Axt,"camembert"),Axt.forEach(t),_yr=r(vqe," \u2014 "),EY=n(vqe,"A",{href:!0});var Lxt=s(EY);byr=r(Lxt,"TFCamembertForTokenClassification"),Lxt.forEach(t),vyr=r(vqe," (CamemBERT model)"),vqe.forEach(t),Fyr=i(me),v4=n(me,"LI",{});var Fqe=s(v4);N7e=n(Fqe,"STRONG",{});var yxt=s(N7e);Tyr=r(yxt,"convbert"),yxt.forEach(t),Myr=r(Fqe," \u2014 "),CY=n(Fqe,"A",{href:!0});var xxt=s(CY);Eyr=r(xxt,"TFConvBertForTokenClassification"),xxt.forEach(t),Cyr=r(Fqe," (ConvBERT model)"),Fqe.forEach(t),wyr=i(me),F4=n(me,"LI",{});var Tqe=s(F4);q7e=n(Tqe,"STRONG",{});var $xt=s(q7e);Ayr=r($xt,"deberta"),$xt.forEach(t),Lyr=r(Tqe," \u2014 "),wY=n(Tqe,"A",{href:!0});var kxt=s(wY);yyr=r(kxt,"TFDebertaForTokenClassification"),kxt.forEach(t),xyr=r(Tqe," (DeBERTa model)"),Tqe.forEach(t),$yr=i(me),T4=n(me,"LI",{});var Mqe=s(T4);j7e=n(Mqe,"STRONG",{});var Sxt=s(j7e);kyr=r(Sxt,"deberta-v2"),Sxt.forEach(t),Syr=r(Mqe," \u2014 "),AY=n(Mqe,"A",{href:!0});var Rxt=s(AY);Ryr=r(Rxt,"TFDebertaV2ForTokenClassification"),Rxt.forEach(t),Pyr=r(Mqe," (DeBERTa-v2 model)"),Mqe.forEach(t),Byr=i(me),M4=n(me,"LI",{});var Eqe=s(M4);D7e=n(Eqe,"STRONG",{});var Pxt=s(D7e);Iyr=r(Pxt,"distilbert"),Pxt.forEach(t),Nyr=r(Eqe," \u2014 "),LY=n(Eqe,"A",{href:!0});var Bxt=s(LY);qyr=r(Bxt,"TFDistilBertForTokenClassification"),Bxt.forEach(t),jyr=r(Eqe," (DistilBERT model)"),Eqe.forEach(t),Dyr=i(me),E4=n(me,"LI",{});var Cqe=s(E4);G7e=n(Cqe,"STRONG",{});var Ixt=s(G7e);Gyr=r(Ixt,"electra"),Ixt.forEach(t),Oyr=r(Cqe," \u2014 "),yY=n(Cqe,"A",{href:!0});var Nxt=s(yY);Vyr=r(Nxt,"TFElectraForTokenClassification"),Nxt.forEach(t),Xyr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),zyr=i(me),C4=n(me,"LI",{});var wqe=s(C4);O7e=n(wqe,"STRONG",{});var qxt=s(O7e);Wyr=r(qxt,"flaubert"),qxt.forEach(t),Qyr=r(wqe," \u2014 "),xY=n(wqe,"A",{href:!0});var jxt=s(xY);Hyr=r(jxt,"TFFlaubertForTokenClassification"),jxt.forEach(t),Uyr=r(wqe," (FlauBERT model)"),wqe.forEach(t),Jyr=i(me),w4=n(me,"LI",{});var Aqe=s(w4);V7e=n(Aqe,"STRONG",{});var Dxt=s(V7e);Yyr=r(Dxt,"funnel"),Dxt.forEach(t),Kyr=r(Aqe," \u2014 "),$Y=n(Aqe,"A",{href:!0});var Gxt=s($Y);Zyr=r(Gxt,"TFFunnelForTokenClassification"),Gxt.forEach(t),e9r=r(Aqe," (Funnel Transformer model)"),Aqe.forEach(t),o9r=i(me),A4=n(me,"LI",{});var Lqe=s(A4);X7e=n(Lqe,"STRONG",{});var Oxt=s(X7e);r9r=r(Oxt,"layoutlm"),Oxt.forEach(t),t9r=r(Lqe," \u2014 "),kY=n(Lqe,"A",{href:!0});var Vxt=s(kY);a9r=r(Vxt,"TFLayoutLMForTokenClassification"),Vxt.forEach(t),n9r=r(Lqe," (LayoutLM model)"),Lqe.forEach(t),s9r=i(me),L4=n(me,"LI",{});var yqe=s(L4);z7e=n(yqe,"STRONG",{});var Xxt=s(z7e);l9r=r(Xxt,"longformer"),Xxt.forEach(t),i9r=r(yqe," \u2014 "),SY=n(yqe,"A",{href:!0});var zxt=s(SY);d9r=r(zxt,"TFLongformerForTokenClassification"),zxt.forEach(t),c9r=r(yqe," (Longformer model)"),yqe.forEach(t),f9r=i(me),y4=n(me,"LI",{});var xqe=s(y4);W7e=n(xqe,"STRONG",{});var Wxt=s(W7e);m9r=r(Wxt,"mobilebert"),Wxt.forEach(t),g9r=r(xqe," \u2014 "),RY=n(xqe,"A",{href:!0});var Qxt=s(RY);h9r=r(Qxt,"TFMobileBertForTokenClassification"),Qxt.forEach(t),p9r=r(xqe," (MobileBERT model)"),xqe.forEach(t),u9r=i(me),x4=n(me,"LI",{});var $qe=s(x4);Q7e=n($qe,"STRONG",{});var Hxt=s(Q7e);_9r=r(Hxt,"mpnet"),Hxt.forEach(t),b9r=r($qe," \u2014 "),PY=n($qe,"A",{href:!0});var Uxt=s(PY);v9r=r(Uxt,"TFMPNetForTokenClassification"),Uxt.forEach(t),F9r=r($qe," (MPNet model)"),$qe.forEach(t),T9r=i(me),$4=n(me,"LI",{});var kqe=s($4);H7e=n(kqe,"STRONG",{});var Jxt=s(H7e);M9r=r(Jxt,"rembert"),Jxt.forEach(t),E9r=r(kqe," \u2014 "),BY=n(kqe,"A",{href:!0});var Yxt=s(BY);C9r=r(Yxt,"TFRemBertForTokenClassification"),Yxt.forEach(t),w9r=r(kqe," (RemBERT model)"),kqe.forEach(t),A9r=i(me),k4=n(me,"LI",{});var Sqe=s(k4);U7e=n(Sqe,"STRONG",{});var Kxt=s(U7e);L9r=r(Kxt,"roberta"),Kxt.forEach(t),y9r=r(Sqe," \u2014 "),IY=n(Sqe,"A",{href:!0});var Zxt=s(IY);x9r=r(Zxt,"TFRobertaForTokenClassification"),Zxt.forEach(t),$9r=r(Sqe," (RoBERTa model)"),Sqe.forEach(t),k9r=i(me),S4=n(me,"LI",{});var Rqe=s(S4);J7e=n(Rqe,"STRONG",{});var e$t=s(J7e);S9r=r(e$t,"roformer"),e$t.forEach(t),R9r=r(Rqe," \u2014 "),NY=n(Rqe,"A",{href:!0});var o$t=s(NY);P9r=r(o$t,"TFRoFormerForTokenClassification"),o$t.forEach(t),B9r=r(Rqe," (RoFormer model)"),Rqe.forEach(t),I9r=i(me),R4=n(me,"LI",{});var Pqe=s(R4);Y7e=n(Pqe,"STRONG",{});var r$t=s(Y7e);N9r=r(r$t,"xlm"),r$t.forEach(t),q9r=r(Pqe," \u2014 "),qY=n(Pqe,"A",{href:!0});var t$t=s(qY);j9r=r(t$t,"TFXLMForTokenClassification"),t$t.forEach(t),D9r=r(Pqe," (XLM model)"),Pqe.forEach(t),G9r=i(me),P4=n(me,"LI",{});var Bqe=s(P4);K7e=n(Bqe,"STRONG",{});var a$t=s(K7e);O9r=r(a$t,"xlm-roberta"),a$t.forEach(t),V9r=r(Bqe," \u2014 "),jY=n(Bqe,"A",{href:!0});var n$t=s(jY);X9r=r(n$t,"TFXLMRobertaForTokenClassification"),n$t.forEach(t),z9r=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),W9r=i(me),B4=n(me,"LI",{});var Iqe=s(B4);Z7e=n(Iqe,"STRONG",{});var s$t=s(Z7e);Q9r=r(s$t,"xlnet"),s$t.forEach(t),H9r=r(Iqe," \u2014 "),DY=n(Iqe,"A",{href:!0});var l$t=s(DY);U9r=r(l$t,"TFXLNetForTokenClassification"),l$t.forEach(t),J9r=r(Iqe," (XLNet model)"),Iqe.forEach(t),me.forEach(t),Y9r=i(zl),T(I4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),IOe=i(f),Pc=n(f,"H2",{class:!0});var zXe=s(Pc);N4=n(zXe,"A",{id:!0,class:!0,href:!0});var i$t=s(N4);e8e=n(i$t,"SPAN",{});var d$t=s(e8e);T(dx.$$.fragment,d$t),d$t.forEach(t),i$t.forEach(t),K9r=i(zXe),o8e=n(zXe,"SPAN",{});var c$t=s(o8e);Z9r=r(c$t,"TFAutoModelForQuestionAnswering"),c$t.forEach(t),zXe.forEach(t),NOe=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(cx.$$.fragment,Wl),exr=i(Wl),Bc=n(Wl,"P",{});var Fre=s(Bc);oxr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GY=n(Fre,"A",{href:!0});var f$t=s(GY);rxr=r(f$t,"from_pretrained()"),f$t.forEach(t),txr=r(Fre," class method or the "),OY=n(Fre,"A",{href:!0});var m$t=s(OY);axr=r(m$t,"from_config()"),m$t.forEach(t),nxr=r(Fre,` class
method.`),Fre.forEach(t),sxr=i(Wl),fx=n(Wl,"P",{});var WXe=s(fx);lxr=r(WXe,"This class cannot be instantiated directly using "),r8e=n(WXe,"CODE",{});var g$t=s(r8e);ixr=r(g$t,"__init__()"),g$t.forEach(t),dxr=r(WXe," (throws an error)."),WXe.forEach(t),cxr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var Gw=s(Ot);T(mx.$$.fragment,Gw),fxr=i(Gw),t8e=n(Gw,"P",{});var h$t=s(t8e);mxr=r(h$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h$t.forEach(t),gxr=i(Gw),Ic=n(Gw,"P",{});var Tre=s(Ic);hxr=r(Tre,`Note:
Loading a model from its configuration file does `),a8e=n(Tre,"STRONG",{});var p$t=s(a8e);pxr=r(p$t,"not"),p$t.forEach(t),uxr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Tre,"A",{href:!0});var u$t=s(VY);_xr=r(u$t,"from_pretrained()"),u$t.forEach(t),bxr=r(Tre," to load the model weights."),Tre.forEach(t),vxr=i(Gw),T(q4.$$.fragment,Gw),Gw.forEach(t),Fxr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Ql=s(qr);T(gx.$$.fragment,Ql),Txr=i(Ql),n8e=n(Ql,"P",{});var _$t=s(n8e);Mxr=r(_$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_$t.forEach(t),Exr=i(Ql),un=n(Ql,"P",{});var Ow=s(un);Cxr=r(Ow,"The model class to instantiate is selected based on the "),s8e=n(Ow,"CODE",{});var b$t=s(s8e);wxr=r(b$t,"model_type"),b$t.forEach(t),Axr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),l8e=n(Ow,"CODE",{});var v$t=s(l8e);Lxr=r(v$t,"pretrained_model_name_or_path"),v$t.forEach(t),yxr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(Ow,"CODE",{});var F$t=s(i8e);xxr=r(F$t,"pretrained_model_name_or_path"),F$t.forEach(t),$xr=r(Ow,":"),Ow.forEach(t),kxr=i(Ql),ce=n(Ql,"UL",{});var ge=s(ce);j4=n(ge,"LI",{});var Nqe=s(j4);d8e=n(Nqe,"STRONG",{});var T$t=s(d8e);Sxr=r(T$t,"albert"),T$t.forEach(t),Rxr=r(Nqe," \u2014 "),XY=n(Nqe,"A",{href:!0});var M$t=s(XY);Pxr=r(M$t,"TFAlbertForQuestionAnswering"),M$t.forEach(t),Bxr=r(Nqe," (ALBERT model)"),Nqe.forEach(t),Ixr=i(ge),D4=n(ge,"LI",{});var qqe=s(D4);c8e=n(qqe,"STRONG",{});var E$t=s(c8e);Nxr=r(E$t,"bert"),E$t.forEach(t),qxr=r(qqe," \u2014 "),zY=n(qqe,"A",{href:!0});var C$t=s(zY);jxr=r(C$t,"TFBertForQuestionAnswering"),C$t.forEach(t),Dxr=r(qqe," (BERT model)"),qqe.forEach(t),Gxr=i(ge),G4=n(ge,"LI",{});var jqe=s(G4);f8e=n(jqe,"STRONG",{});var w$t=s(f8e);Oxr=r(w$t,"camembert"),w$t.forEach(t),Vxr=r(jqe," \u2014 "),WY=n(jqe,"A",{href:!0});var A$t=s(WY);Xxr=r(A$t,"TFCamembertForQuestionAnswering"),A$t.forEach(t),zxr=r(jqe," (CamemBERT model)"),jqe.forEach(t),Wxr=i(ge),O4=n(ge,"LI",{});var Dqe=s(O4);m8e=n(Dqe,"STRONG",{});var L$t=s(m8e);Qxr=r(L$t,"convbert"),L$t.forEach(t),Hxr=r(Dqe," \u2014 "),QY=n(Dqe,"A",{href:!0});var y$t=s(QY);Uxr=r(y$t,"TFConvBertForQuestionAnswering"),y$t.forEach(t),Jxr=r(Dqe," (ConvBERT model)"),Dqe.forEach(t),Yxr=i(ge),V4=n(ge,"LI",{});var Gqe=s(V4);g8e=n(Gqe,"STRONG",{});var x$t=s(g8e);Kxr=r(x$t,"deberta"),x$t.forEach(t),Zxr=r(Gqe," \u2014 "),HY=n(Gqe,"A",{href:!0});var $$t=s(HY);e$r=r($$t,"TFDebertaForQuestionAnswering"),$$t.forEach(t),o$r=r(Gqe," (DeBERTa model)"),Gqe.forEach(t),r$r=i(ge),X4=n(ge,"LI",{});var Oqe=s(X4);h8e=n(Oqe,"STRONG",{});var k$t=s(h8e);t$r=r(k$t,"deberta-v2"),k$t.forEach(t),a$r=r(Oqe," \u2014 "),UY=n(Oqe,"A",{href:!0});var S$t=s(UY);n$r=r(S$t,"TFDebertaV2ForQuestionAnswering"),S$t.forEach(t),s$r=r(Oqe," (DeBERTa-v2 model)"),Oqe.forEach(t),l$r=i(ge),z4=n(ge,"LI",{});var Vqe=s(z4);p8e=n(Vqe,"STRONG",{});var R$t=s(p8e);i$r=r(R$t,"distilbert"),R$t.forEach(t),d$r=r(Vqe," \u2014 "),JY=n(Vqe,"A",{href:!0});var P$t=s(JY);c$r=r(P$t,"TFDistilBertForQuestionAnswering"),P$t.forEach(t),f$r=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),m$r=i(ge),W4=n(ge,"LI",{});var Xqe=s(W4);u8e=n(Xqe,"STRONG",{});var B$t=s(u8e);g$r=r(B$t,"electra"),B$t.forEach(t),h$r=r(Xqe," \u2014 "),YY=n(Xqe,"A",{href:!0});var I$t=s(YY);p$r=r(I$t,"TFElectraForQuestionAnswering"),I$t.forEach(t),u$r=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),_$r=i(ge),Q4=n(ge,"LI",{});var zqe=s(Q4);_8e=n(zqe,"STRONG",{});var N$t=s(_8e);b$r=r(N$t,"flaubert"),N$t.forEach(t),v$r=r(zqe," \u2014 "),KY=n(zqe,"A",{href:!0});var q$t=s(KY);F$r=r(q$t,"TFFlaubertForQuestionAnsweringSimple"),q$t.forEach(t),T$r=r(zqe," (FlauBERT model)"),zqe.forEach(t),M$r=i(ge),H4=n(ge,"LI",{});var Wqe=s(H4);b8e=n(Wqe,"STRONG",{});var j$t=s(b8e);E$r=r(j$t,"funnel"),j$t.forEach(t),C$r=r(Wqe," \u2014 "),ZY=n(Wqe,"A",{href:!0});var D$t=s(ZY);w$r=r(D$t,"TFFunnelForQuestionAnswering"),D$t.forEach(t),A$r=r(Wqe," (Funnel Transformer model)"),Wqe.forEach(t),L$r=i(ge),U4=n(ge,"LI",{});var Qqe=s(U4);v8e=n(Qqe,"STRONG",{});var G$t=s(v8e);y$r=r(G$t,"gptj"),G$t.forEach(t),x$r=r(Qqe," \u2014 "),eK=n(Qqe,"A",{href:!0});var O$t=s(eK);$$r=r(O$t,"TFGPTJForQuestionAnswering"),O$t.forEach(t),k$r=r(Qqe," (GPT-J model)"),Qqe.forEach(t),S$r=i(ge),J4=n(ge,"LI",{});var Hqe=s(J4);F8e=n(Hqe,"STRONG",{});var V$t=s(F8e);R$r=r(V$t,"longformer"),V$t.forEach(t),P$r=r(Hqe," \u2014 "),oK=n(Hqe,"A",{href:!0});var X$t=s(oK);B$r=r(X$t,"TFLongformerForQuestionAnswering"),X$t.forEach(t),I$r=r(Hqe," (Longformer model)"),Hqe.forEach(t),N$r=i(ge),Y4=n(ge,"LI",{});var Uqe=s(Y4);T8e=n(Uqe,"STRONG",{});var z$t=s(T8e);q$r=r(z$t,"mobilebert"),z$t.forEach(t),j$r=r(Uqe," \u2014 "),rK=n(Uqe,"A",{href:!0});var W$t=s(rK);D$r=r(W$t,"TFMobileBertForQuestionAnswering"),W$t.forEach(t),G$r=r(Uqe," (MobileBERT model)"),Uqe.forEach(t),O$r=i(ge),K4=n(ge,"LI",{});var Jqe=s(K4);M8e=n(Jqe,"STRONG",{});var Q$t=s(M8e);V$r=r(Q$t,"mpnet"),Q$t.forEach(t),X$r=r(Jqe," \u2014 "),tK=n(Jqe,"A",{href:!0});var H$t=s(tK);z$r=r(H$t,"TFMPNetForQuestionAnswering"),H$t.forEach(t),W$r=r(Jqe," (MPNet model)"),Jqe.forEach(t),Q$r=i(ge),Z4=n(ge,"LI",{});var Yqe=s(Z4);E8e=n(Yqe,"STRONG",{});var U$t=s(E8e);H$r=r(U$t,"rembert"),U$t.forEach(t),U$r=r(Yqe," \u2014 "),aK=n(Yqe,"A",{href:!0});var J$t=s(aK);J$r=r(J$t,"TFRemBertForQuestionAnswering"),J$t.forEach(t),Y$r=r(Yqe," (RemBERT model)"),Yqe.forEach(t),K$r=i(ge),eE=n(ge,"LI",{});var Kqe=s(eE);C8e=n(Kqe,"STRONG",{});var Y$t=s(C8e);Z$r=r(Y$t,"roberta"),Y$t.forEach(t),ekr=r(Kqe," \u2014 "),nK=n(Kqe,"A",{href:!0});var K$t=s(nK);okr=r(K$t,"TFRobertaForQuestionAnswering"),K$t.forEach(t),rkr=r(Kqe," (RoBERTa model)"),Kqe.forEach(t),tkr=i(ge),oE=n(ge,"LI",{});var Zqe=s(oE);w8e=n(Zqe,"STRONG",{});var Z$t=s(w8e);akr=r(Z$t,"roformer"),Z$t.forEach(t),nkr=r(Zqe," \u2014 "),sK=n(Zqe,"A",{href:!0});var ekt=s(sK);skr=r(ekt,"TFRoFormerForQuestionAnswering"),ekt.forEach(t),lkr=r(Zqe," (RoFormer model)"),Zqe.forEach(t),ikr=i(ge),rE=n(ge,"LI",{});var eje=s(rE);A8e=n(eje,"STRONG",{});var okt=s(A8e);dkr=r(okt,"xlm"),okt.forEach(t),ckr=r(eje," \u2014 "),lK=n(eje,"A",{href:!0});var rkt=s(lK);fkr=r(rkt,"TFXLMForQuestionAnsweringSimple"),rkt.forEach(t),mkr=r(eje," (XLM model)"),eje.forEach(t),gkr=i(ge),tE=n(ge,"LI",{});var oje=s(tE);L8e=n(oje,"STRONG",{});var tkt=s(L8e);hkr=r(tkt,"xlm-roberta"),tkt.forEach(t),pkr=r(oje," \u2014 "),iK=n(oje,"A",{href:!0});var akt=s(iK);ukr=r(akt,"TFXLMRobertaForQuestionAnswering"),akt.forEach(t),_kr=r(oje," (XLM-RoBERTa model)"),oje.forEach(t),bkr=i(ge),aE=n(ge,"LI",{});var rje=s(aE);y8e=n(rje,"STRONG",{});var nkt=s(y8e);vkr=r(nkt,"xlnet"),nkt.forEach(t),Fkr=r(rje," \u2014 "),dK=n(rje,"A",{href:!0});var skt=s(dK);Tkr=r(skt,"TFXLNetForQuestionAnsweringSimple"),skt.forEach(t),Mkr=r(rje," (XLNet model)"),rje.forEach(t),ge.forEach(t),Ekr=i(Ql),T(nE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),qOe=i(f),Nc=n(f,"H2",{class:!0});var QXe=s(Nc);sE=n(QXe,"A",{id:!0,class:!0,href:!0});var lkt=s(sE);x8e=n(lkt,"SPAN",{});var ikt=s(x8e);T(hx.$$.fragment,ikt),ikt.forEach(t),lkt.forEach(t),Ckr=i(QXe),$8e=n(QXe,"SPAN",{});var dkt=s($8e);wkr=r(dkt,"TFAutoModelForVision2Seq"),dkt.forEach(t),QXe.forEach(t),jOe=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(px.$$.fragment,Hl),Akr=i(Hl),qc=n(Hl,"P",{});var Mre=s(qc);Lkr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cK=n(Mre,"A",{href:!0});var ckt=s(cK);ykr=r(ckt,"from_pretrained()"),ckt.forEach(t),xkr=r(Mre," class method or the "),fK=n(Mre,"A",{href:!0});var fkt=s(fK);$kr=r(fkt,"from_config()"),fkt.forEach(t),kkr=r(Mre,` class
method.`),Mre.forEach(t),Skr=i(Hl),ux=n(Hl,"P",{});var HXe=s(ux);Rkr=r(HXe,"This class cannot be instantiated directly using "),k8e=n(HXe,"CODE",{});var mkt=s(k8e);Pkr=r(mkt,"__init__()"),mkt.forEach(t),Bkr=r(HXe," (throws an error)."),HXe.forEach(t),Ikr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var Vw=s(Vt);T(_x.$$.fragment,Vw),Nkr=i(Vw),S8e=n(Vw,"P",{});var gkt=s(S8e);qkr=r(gkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gkt.forEach(t),jkr=i(Vw),jc=n(Vw,"P",{});var Ere=s(jc);Dkr=r(Ere,`Note:
Loading a model from its configuration file does `),R8e=n(Ere,"STRONG",{});var hkt=s(R8e);Gkr=r(hkt,"not"),hkt.forEach(t),Okr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(Ere,"A",{href:!0});var pkt=s(mK);Vkr=r(pkt,"from_pretrained()"),pkt.forEach(t),Xkr=r(Ere," to load the model weights."),Ere.forEach(t),zkr=i(Vw),T(lE.$$.fragment,Vw),Vw.forEach(t),Wkr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(bx.$$.fragment,Ul),Qkr=i(Ul),P8e=n(Ul,"P",{});var ukt=s(P8e);Hkr=r(ukt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ukt.forEach(t),Ukr=i(Ul),_n=n(Ul,"P",{});var Xw=s(_n);Jkr=r(Xw,"The model class to instantiate is selected based on the "),B8e=n(Xw,"CODE",{});var _kt=s(B8e);Ykr=r(_kt,"model_type"),_kt.forEach(t),Kkr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),I8e=n(Xw,"CODE",{});var bkt=s(I8e);Zkr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),eSr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(Xw,"CODE",{});var vkt=s(N8e);oSr=r(vkt,"pretrained_model_name_or_path"),vkt.forEach(t),rSr=r(Xw,":"),Xw.forEach(t),tSr=i(Ul),q8e=n(Ul,"UL",{});var Fkt=s(q8e);iE=n(Fkt,"LI",{});var tje=s(iE);j8e=n(tje,"STRONG",{});var Tkt=s(j8e);aSr=r(Tkt,"vision-encoder-decoder"),Tkt.forEach(t),nSr=r(tje," \u2014 "),gK=n(tje,"A",{href:!0});var Mkt=s(gK);sSr=r(Mkt,"TFVisionEncoderDecoderModel"),Mkt.forEach(t),lSr=r(tje," (Vision Encoder decoder model)"),tje.forEach(t),Fkt.forEach(t),iSr=i(Ul),T(dE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),DOe=i(f),Dc=n(f,"H2",{class:!0});var UXe=s(Dc);cE=n(UXe,"A",{id:!0,class:!0,href:!0});var Ekt=s(cE);D8e=n(Ekt,"SPAN",{});var Ckt=s(D8e);T(vx.$$.fragment,Ckt),Ckt.forEach(t),Ekt.forEach(t),dSr=i(UXe),G8e=n(UXe,"SPAN",{});var wkt=s(G8e);cSr=r(wkt,"TFAutoModelForSpeechSeq2Seq"),wkt.forEach(t),UXe.forEach(t),GOe=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Fx.$$.fragment,Jl),fSr=i(Jl),Gc=n(Jl,"P",{});var Cre=s(Gc);mSr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hK=n(Cre,"A",{href:!0});var Akt=s(hK);gSr=r(Akt,"from_pretrained()"),Akt.forEach(t),hSr=r(Cre," class method or the "),pK=n(Cre,"A",{href:!0});var Lkt=s(pK);pSr=r(Lkt,"from_config()"),Lkt.forEach(t),uSr=r(Cre,` class
method.`),Cre.forEach(t),_Sr=i(Jl),Tx=n(Jl,"P",{});var JXe=s(Tx);bSr=r(JXe,"This class cannot be instantiated directly using "),O8e=n(JXe,"CODE",{});var ykt=s(O8e);vSr=r(ykt,"__init__()"),ykt.forEach(t),FSr=r(JXe," (throws an error)."),JXe.forEach(t),TSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var zw=s(Xt);T(Mx.$$.fragment,zw),MSr=i(zw),V8e=n(zw,"P",{});var xkt=s(V8e);ESr=r(xkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xkt.forEach(t),CSr=i(zw),Oc=n(zw,"P",{});var wre=s(Oc);wSr=r(wre,`Note:
Loading a model from its configuration file does `),X8e=n(wre,"STRONG",{});var $kt=s(X8e);ASr=r($kt,"not"),$kt.forEach(t),LSr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(wre,"A",{href:!0});var kkt=s(uK);ySr=r(kkt,"from_pretrained()"),kkt.forEach(t),xSr=r(wre," to load the model weights."),wre.forEach(t),$Sr=i(zw),T(fE.$$.fragment,zw),zw.forEach(t),kSr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Ex.$$.fragment,Yl),SSr=i(Yl),z8e=n(Yl,"P",{});var Skt=s(z8e);RSr=r(Skt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Skt.forEach(t),PSr=i(Yl),bn=n(Yl,"P",{});var Ww=s(bn);BSr=r(Ww,"The model class to instantiate is selected based on the "),W8e=n(Ww,"CODE",{});var Rkt=s(W8e);ISr=r(Rkt,"model_type"),Rkt.forEach(t),NSr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Q8e=n(Ww,"CODE",{});var Pkt=s(Q8e);qSr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),jSr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=n(Ww,"CODE",{});var Bkt=s(H8e);DSr=r(Bkt,"pretrained_model_name_or_path"),Bkt.forEach(t),GSr=r(Ww,":"),Ww.forEach(t),OSr=i(Yl),U8e=n(Yl,"UL",{});var Ikt=s(U8e);mE=n(Ikt,"LI",{});var aje=s(mE);J8e=n(aje,"STRONG",{});var Nkt=s(J8e);VSr=r(Nkt,"speech_to_text"),Nkt.forEach(t),XSr=r(aje," \u2014 "),_K=n(aje,"A",{href:!0});var qkt=s(_K);zSr=r(qkt,"TFSpeech2TextForConditionalGeneration"),qkt.forEach(t),WSr=r(aje," (Speech2Text model)"),aje.forEach(t),Ikt.forEach(t),QSr=i(Yl),T(gE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),OOe=i(f),Vc=n(f,"H2",{class:!0});var YXe=s(Vc);hE=n(YXe,"A",{id:!0,class:!0,href:!0});var jkt=s(hE);Y8e=n(jkt,"SPAN",{});var Dkt=s(Y8e);T(Cx.$$.fragment,Dkt),Dkt.forEach(t),jkt.forEach(t),HSr=i(YXe),K8e=n(YXe,"SPAN",{});var Gkt=s(K8e);USr=r(Gkt,"FlaxAutoModel"),Gkt.forEach(t),YXe.forEach(t),VOe=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(wx.$$.fragment,Kl),JSr=i(Kl),Xc=n(Kl,"P",{});var Are=s(Xc);YSr=r(Are,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bK=n(Are,"A",{href:!0});var Okt=s(bK);KSr=r(Okt,"from_pretrained()"),Okt.forEach(t),ZSr=r(Are," class method or the "),vK=n(Are,"A",{href:!0});var Vkt=s(vK);eRr=r(Vkt,"from_config()"),Vkt.forEach(t),oRr=r(Are,` class
method.`),Are.forEach(t),rRr=i(Kl),Ax=n(Kl,"P",{});var KXe=s(Ax);tRr=r(KXe,"This class cannot be instantiated directly using "),Z8e=n(KXe,"CODE",{});var Xkt=s(Z8e);aRr=r(Xkt,"__init__()"),Xkt.forEach(t),nRr=r(KXe," (throws an error)."),KXe.forEach(t),sRr=i(Kl),zt=n(Kl,"DIV",{class:!0});var Qw=s(zt);T(Lx.$$.fragment,Qw),lRr=i(Qw),eMe=n(Qw,"P",{});var zkt=s(eMe);iRr=r(zkt,"Instantiates one of the base model classes of the library from a configuration."),zkt.forEach(t),dRr=i(Qw),zc=n(Qw,"P",{});var Lre=s(zc);cRr=r(Lre,`Note:
Loading a model from its configuration file does `),oMe=n(Lre,"STRONG",{});var Wkt=s(oMe);fRr=r(Wkt,"not"),Wkt.forEach(t),mRr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(Lre,"A",{href:!0});var Qkt=s(FK);gRr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),hRr=r(Lre," to load the model weights."),Lre.forEach(t),pRr=i(Qw),T(pE.$$.fragment,Qw),Qw.forEach(t),uRr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(yx.$$.fragment,Zl),_Rr=i(Zl),rMe=n(Zl,"P",{});var Hkt=s(rMe);bRr=r(Hkt,"Instantiate one of the base model classes of the library from a pretrained model."),Hkt.forEach(t),vRr=i(Zl),vn=n(Zl,"P",{});var Hw=s(vn);FRr=r(Hw,"The model class to instantiate is selected based on the "),tMe=n(Hw,"CODE",{});var Ukt=s(tMe);TRr=r(Ukt,"model_type"),Ukt.forEach(t),MRr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),aMe=n(Hw,"CODE",{});var Jkt=s(aMe);ERr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),CRr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(Hw,"CODE",{});var Ykt=s(nMe);wRr=r(Ykt,"pretrained_model_name_or_path"),Ykt.forEach(t),ARr=r(Hw,":"),Hw.forEach(t),LRr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);uE=n(ae,"LI",{});var nje=s(uE);sMe=n(nje,"STRONG",{});var Kkt=s(sMe);yRr=r(Kkt,"albert"),Kkt.forEach(t),xRr=r(nje," \u2014 "),TK=n(nje,"A",{href:!0});var Zkt=s(TK);$Rr=r(Zkt,"FlaxAlbertModel"),Zkt.forEach(t),kRr=r(nje," (ALBERT model)"),nje.forEach(t),SRr=i(ae),_E=n(ae,"LI",{});var sje=s(_E);lMe=n(sje,"STRONG",{});var eSt=s(lMe);RRr=r(eSt,"bart"),eSt.forEach(t),PRr=r(sje," \u2014 "),MK=n(sje,"A",{href:!0});var oSt=s(MK);BRr=r(oSt,"FlaxBartModel"),oSt.forEach(t),IRr=r(sje," (BART model)"),sje.forEach(t),NRr=i(ae),bE=n(ae,"LI",{});var lje=s(bE);iMe=n(lje,"STRONG",{});var rSt=s(iMe);qRr=r(rSt,"beit"),rSt.forEach(t),jRr=r(lje," \u2014 "),EK=n(lje,"A",{href:!0});var tSt=s(EK);DRr=r(tSt,"FlaxBeitModel"),tSt.forEach(t),GRr=r(lje," (BEiT model)"),lje.forEach(t),ORr=i(ae),vE=n(ae,"LI",{});var ije=s(vE);dMe=n(ije,"STRONG",{});var aSt=s(dMe);VRr=r(aSt,"bert"),aSt.forEach(t),XRr=r(ije," \u2014 "),CK=n(ije,"A",{href:!0});var nSt=s(CK);zRr=r(nSt,"FlaxBertModel"),nSt.forEach(t),WRr=r(ije," (BERT model)"),ije.forEach(t),QRr=i(ae),FE=n(ae,"LI",{});var dje=s(FE);cMe=n(dje,"STRONG",{});var sSt=s(cMe);HRr=r(sSt,"big_bird"),sSt.forEach(t),URr=r(dje," \u2014 "),wK=n(dje,"A",{href:!0});var lSt=s(wK);JRr=r(lSt,"FlaxBigBirdModel"),lSt.forEach(t),YRr=r(dje," (BigBird model)"),dje.forEach(t),KRr=i(ae),TE=n(ae,"LI",{});var cje=s(TE);fMe=n(cje,"STRONG",{});var iSt=s(fMe);ZRr=r(iSt,"blenderbot"),iSt.forEach(t),ePr=r(cje," \u2014 "),AK=n(cje,"A",{href:!0});var dSt=s(AK);oPr=r(dSt,"FlaxBlenderbotModel"),dSt.forEach(t),rPr=r(cje," (Blenderbot model)"),cje.forEach(t),tPr=i(ae),ME=n(ae,"LI",{});var fje=s(ME);mMe=n(fje,"STRONG",{});var cSt=s(mMe);aPr=r(cSt,"blenderbot-small"),cSt.forEach(t),nPr=r(fje," \u2014 "),LK=n(fje,"A",{href:!0});var fSt=s(LK);sPr=r(fSt,"FlaxBlenderbotSmallModel"),fSt.forEach(t),lPr=r(fje," (BlenderbotSmall model)"),fje.forEach(t),iPr=i(ae),EE=n(ae,"LI",{});var mje=s(EE);gMe=n(mje,"STRONG",{});var mSt=s(gMe);dPr=r(mSt,"clip"),mSt.forEach(t),cPr=r(mje," \u2014 "),yK=n(mje,"A",{href:!0});var gSt=s(yK);fPr=r(gSt,"FlaxCLIPModel"),gSt.forEach(t),mPr=r(mje," (CLIP model)"),mje.forEach(t),gPr=i(ae),CE=n(ae,"LI",{});var gje=s(CE);hMe=n(gje,"STRONG",{});var hSt=s(hMe);hPr=r(hSt,"distilbert"),hSt.forEach(t),pPr=r(gje," \u2014 "),xK=n(gje,"A",{href:!0});var pSt=s(xK);uPr=r(pSt,"FlaxDistilBertModel"),pSt.forEach(t),_Pr=r(gje," (DistilBERT model)"),gje.forEach(t),bPr=i(ae),wE=n(ae,"LI",{});var hje=s(wE);pMe=n(hje,"STRONG",{});var uSt=s(pMe);vPr=r(uSt,"electra"),uSt.forEach(t),FPr=r(hje," \u2014 "),$K=n(hje,"A",{href:!0});var _St=s($K);TPr=r(_St,"FlaxElectraModel"),_St.forEach(t),MPr=r(hje," (ELECTRA model)"),hje.forEach(t),EPr=i(ae),AE=n(ae,"LI",{});var pje=s(AE);uMe=n(pje,"STRONG",{});var bSt=s(uMe);CPr=r(bSt,"gpt2"),bSt.forEach(t),wPr=r(pje," \u2014 "),kK=n(pje,"A",{href:!0});var vSt=s(kK);APr=r(vSt,"FlaxGPT2Model"),vSt.forEach(t),LPr=r(pje," (OpenAI GPT-2 model)"),pje.forEach(t),yPr=i(ae),LE=n(ae,"LI",{});var uje=s(LE);_Me=n(uje,"STRONG",{});var FSt=s(_Me);xPr=r(FSt,"gpt_neo"),FSt.forEach(t),$Pr=r(uje," \u2014 "),SK=n(uje,"A",{href:!0});var TSt=s(SK);kPr=r(TSt,"FlaxGPTNeoModel"),TSt.forEach(t),SPr=r(uje," (GPT Neo model)"),uje.forEach(t),RPr=i(ae),yE=n(ae,"LI",{});var _je=s(yE);bMe=n(_je,"STRONG",{});var MSt=s(bMe);PPr=r(MSt,"gptj"),MSt.forEach(t),BPr=r(_je," \u2014 "),RK=n(_je,"A",{href:!0});var ESt=s(RK);IPr=r(ESt,"FlaxGPTJModel"),ESt.forEach(t),NPr=r(_je," (GPT-J model)"),_je.forEach(t),qPr=i(ae),xE=n(ae,"LI",{});var bje=s(xE);vMe=n(bje,"STRONG",{});var CSt=s(vMe);jPr=r(CSt,"longt5"),CSt.forEach(t),DPr=r(bje," \u2014 "),PK=n(bje,"A",{href:!0});var wSt=s(PK);GPr=r(wSt,"FlaxLongT5Model"),wSt.forEach(t),OPr=r(bje," (LongT5 model)"),bje.forEach(t),VPr=i(ae),$E=n(ae,"LI",{});var vje=s($E);FMe=n(vje,"STRONG",{});var ASt=s(FMe);XPr=r(ASt,"marian"),ASt.forEach(t),zPr=r(vje," \u2014 "),BK=n(vje,"A",{href:!0});var LSt=s(BK);WPr=r(LSt,"FlaxMarianModel"),LSt.forEach(t),QPr=r(vje," (Marian model)"),vje.forEach(t),HPr=i(ae),kE=n(ae,"LI",{});var Fje=s(kE);TMe=n(Fje,"STRONG",{});var ySt=s(TMe);UPr=r(ySt,"mbart"),ySt.forEach(t),JPr=r(Fje," \u2014 "),IK=n(Fje,"A",{href:!0});var xSt=s(IK);YPr=r(xSt,"FlaxMBartModel"),xSt.forEach(t),KPr=r(Fje," (mBART model)"),Fje.forEach(t),ZPr=i(ae),SE=n(ae,"LI",{});var Tje=s(SE);MMe=n(Tje,"STRONG",{});var $St=s(MMe);eBr=r($St,"mt5"),$St.forEach(t),oBr=r(Tje," \u2014 "),NK=n(Tje,"A",{href:!0});var kSt=s(NK);rBr=r(kSt,"FlaxMT5Model"),kSt.forEach(t),tBr=r(Tje," (MT5 model)"),Tje.forEach(t),aBr=i(ae),RE=n(ae,"LI",{});var Mje=s(RE);EMe=n(Mje,"STRONG",{});var SSt=s(EMe);nBr=r(SSt,"opt"),SSt.forEach(t),sBr=r(Mje," \u2014 "),qK=n(Mje,"A",{href:!0});var RSt=s(qK);lBr=r(RSt,"FlaxOPTModel"),RSt.forEach(t),iBr=r(Mje," (OPT model)"),Mje.forEach(t),dBr=i(ae),PE=n(ae,"LI",{});var Eje=s(PE);CMe=n(Eje,"STRONG",{});var PSt=s(CMe);cBr=r(PSt,"pegasus"),PSt.forEach(t),fBr=r(Eje," \u2014 "),jK=n(Eje,"A",{href:!0});var BSt=s(jK);mBr=r(BSt,"FlaxPegasusModel"),BSt.forEach(t),gBr=r(Eje," (Pegasus model)"),Eje.forEach(t),hBr=i(ae),BE=n(ae,"LI",{});var Cje=s(BE);wMe=n(Cje,"STRONG",{});var ISt=s(wMe);pBr=r(ISt,"roberta"),ISt.forEach(t),uBr=r(Cje," \u2014 "),DK=n(Cje,"A",{href:!0});var NSt=s(DK);_Br=r(NSt,"FlaxRobertaModel"),NSt.forEach(t),bBr=r(Cje," (RoBERTa model)"),Cje.forEach(t),vBr=i(ae),IE=n(ae,"LI",{});var wje=s(IE);AMe=n(wje,"STRONG",{});var qSt=s(AMe);FBr=r(qSt,"roformer"),qSt.forEach(t),TBr=r(wje," \u2014 "),GK=n(wje,"A",{href:!0});var jSt=s(GK);MBr=r(jSt,"FlaxRoFormerModel"),jSt.forEach(t),EBr=r(wje," (RoFormer model)"),wje.forEach(t),CBr=i(ae),NE=n(ae,"LI",{});var Aje=s(NE);LMe=n(Aje,"STRONG",{});var DSt=s(LMe);wBr=r(DSt,"t5"),DSt.forEach(t),ABr=r(Aje," \u2014 "),OK=n(Aje,"A",{href:!0});var GSt=s(OK);LBr=r(GSt,"FlaxT5Model"),GSt.forEach(t),yBr=r(Aje," (T5 model)"),Aje.forEach(t),xBr=i(ae),qE=n(ae,"LI",{});var Lje=s(qE);yMe=n(Lje,"STRONG",{});var OSt=s(yMe);$Br=r(OSt,"vision-text-dual-encoder"),OSt.forEach(t),kBr=r(Lje," \u2014 "),VK=n(Lje,"A",{href:!0});var VSt=s(VK);SBr=r(VSt,"FlaxVisionTextDualEncoderModel"),VSt.forEach(t),RBr=r(Lje," (VisionTextDualEncoder model)"),Lje.forEach(t),PBr=i(ae),jE=n(ae,"LI",{});var yje=s(jE);xMe=n(yje,"STRONG",{});var XSt=s(xMe);BBr=r(XSt,"vit"),XSt.forEach(t),IBr=r(yje," \u2014 "),XK=n(yje,"A",{href:!0});var zSt=s(XK);NBr=r(zSt,"FlaxViTModel"),zSt.forEach(t),qBr=r(yje," (ViT model)"),yje.forEach(t),jBr=i(ae),DE=n(ae,"LI",{});var xje=s(DE);$Me=n(xje,"STRONG",{});var WSt=s($Me);DBr=r(WSt,"wav2vec2"),WSt.forEach(t),GBr=r(xje," \u2014 "),zK=n(xje,"A",{href:!0});var QSt=s(zK);OBr=r(QSt,"FlaxWav2Vec2Model"),QSt.forEach(t),VBr=r(xje," (Wav2Vec2 model)"),xje.forEach(t),XBr=i(ae),GE=n(ae,"LI",{});var $je=s(GE);kMe=n($je,"STRONG",{});var HSt=s(kMe);zBr=r(HSt,"xglm"),HSt.forEach(t),WBr=r($je," \u2014 "),WK=n($je,"A",{href:!0});var USt=s(WK);QBr=r(USt,"FlaxXGLMModel"),USt.forEach(t),HBr=r($je," (XGLM model)"),$je.forEach(t),UBr=i(ae),OE=n(ae,"LI",{});var kje=s(OE);SMe=n(kje,"STRONG",{});var JSt=s(SMe);JBr=r(JSt,"xlm-roberta"),JSt.forEach(t),YBr=r(kje," \u2014 "),QK=n(kje,"A",{href:!0});var YSt=s(QK);KBr=r(YSt,"FlaxXLMRobertaModel"),YSt.forEach(t),ZBr=r(kje," (XLM-RoBERTa model)"),kje.forEach(t),ae.forEach(t),eIr=i(Zl),T(VE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),XOe=i(f),Wc=n(f,"H2",{class:!0});var ZXe=s(Wc);XE=n(ZXe,"A",{id:!0,class:!0,href:!0});var KSt=s(XE);RMe=n(KSt,"SPAN",{});var ZSt=s(RMe);T(xx.$$.fragment,ZSt),ZSt.forEach(t),KSt.forEach(t),oIr=i(ZXe),PMe=n(ZXe,"SPAN",{});var eRt=s(PMe);rIr=r(eRt,"FlaxAutoModelForCausalLM"),eRt.forEach(t),ZXe.forEach(t),zOe=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T($x.$$.fragment,ei),tIr=i(ei),Qc=n(ei,"P",{});var yre=s(Qc);aIr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HK=n(yre,"A",{href:!0});var oRt=s(HK);nIr=r(oRt,"from_pretrained()"),oRt.forEach(t),sIr=r(yre," class method or the "),UK=n(yre,"A",{href:!0});var rRt=s(UK);lIr=r(rRt,"from_config()"),rRt.forEach(t),iIr=r(yre,` class
method.`),yre.forEach(t),dIr=i(ei),kx=n(ei,"P",{});var eze=s(kx);cIr=r(eze,"This class cannot be instantiated directly using "),BMe=n(eze,"CODE",{});var tRt=s(BMe);fIr=r(tRt,"__init__()"),tRt.forEach(t),mIr=r(eze," (throws an error)."),eze.forEach(t),gIr=i(ei),Wt=n(ei,"DIV",{class:!0});var Uw=s(Wt);T(Sx.$$.fragment,Uw),hIr=i(Uw),IMe=n(Uw,"P",{});var aRt=s(IMe);pIr=r(aRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aRt.forEach(t),uIr=i(Uw),Hc=n(Uw,"P",{});var xre=s(Hc);_Ir=r(xre,`Note:
Loading a model from its configuration file does `),NMe=n(xre,"STRONG",{});var nRt=s(NMe);bIr=r(nRt,"not"),nRt.forEach(t),vIr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(xre,"A",{href:!0});var sRt=s(JK);FIr=r(sRt,"from_pretrained()"),sRt.forEach(t),TIr=r(xre," to load the model weights."),xre.forEach(t),MIr=i(Uw),T(zE.$$.fragment,Uw),Uw.forEach(t),EIr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(Rx.$$.fragment,oi),CIr=i(oi),qMe=n(oi,"P",{});var lRt=s(qMe);wIr=r(lRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lRt.forEach(t),AIr=i(oi),Fn=n(oi,"P",{});var Jw=s(Fn);LIr=r(Jw,"The model class to instantiate is selected based on the "),jMe=n(Jw,"CODE",{});var iRt=s(jMe);yIr=r(iRt,"model_type"),iRt.forEach(t),xIr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),DMe=n(Jw,"CODE",{});var dRt=s(DMe);$Ir=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),kIr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(Jw,"CODE",{});var cRt=s(GMe);SIr=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),RIr=r(Jw,":"),Jw.forEach(t),PIr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);WE=n(Ne,"LI",{});var Sje=s(WE);OMe=n(Sje,"STRONG",{});var fRt=s(OMe);BIr=r(fRt,"bart"),fRt.forEach(t),IIr=r(Sje," \u2014 "),YK=n(Sje,"A",{href:!0});var mRt=s(YK);NIr=r(mRt,"FlaxBartForCausalLM"),mRt.forEach(t),qIr=r(Sje," (BART model)"),Sje.forEach(t),jIr=i(Ne),QE=n(Ne,"LI",{});var Rje=s(QE);VMe=n(Rje,"STRONG",{});var gRt=s(VMe);DIr=r(gRt,"bert"),gRt.forEach(t),GIr=r(Rje," \u2014 "),KK=n(Rje,"A",{href:!0});var hRt=s(KK);OIr=r(hRt,"FlaxBertForCausalLM"),hRt.forEach(t),VIr=r(Rje," (BERT model)"),Rje.forEach(t),XIr=i(Ne),HE=n(Ne,"LI",{});var Pje=s(HE);XMe=n(Pje,"STRONG",{});var pRt=s(XMe);zIr=r(pRt,"big_bird"),pRt.forEach(t),WIr=r(Pje," \u2014 "),ZK=n(Pje,"A",{href:!0});var uRt=s(ZK);QIr=r(uRt,"FlaxBigBirdForCausalLM"),uRt.forEach(t),HIr=r(Pje," (BigBird model)"),Pje.forEach(t),UIr=i(Ne),UE=n(Ne,"LI",{});var Bje=s(UE);zMe=n(Bje,"STRONG",{});var _Rt=s(zMe);JIr=r(_Rt,"electra"),_Rt.forEach(t),YIr=r(Bje," \u2014 "),eZ=n(Bje,"A",{href:!0});var bRt=s(eZ);KIr=r(bRt,"FlaxElectraForCausalLM"),bRt.forEach(t),ZIr=r(Bje," (ELECTRA model)"),Bje.forEach(t),eNr=i(Ne),JE=n(Ne,"LI",{});var Ije=s(JE);WMe=n(Ije,"STRONG",{});var vRt=s(WMe);oNr=r(vRt,"gpt2"),vRt.forEach(t),rNr=r(Ije," \u2014 "),oZ=n(Ije,"A",{href:!0});var FRt=s(oZ);tNr=r(FRt,"FlaxGPT2LMHeadModel"),FRt.forEach(t),aNr=r(Ije," (OpenAI GPT-2 model)"),Ije.forEach(t),nNr=i(Ne),YE=n(Ne,"LI",{});var Nje=s(YE);QMe=n(Nje,"STRONG",{});var TRt=s(QMe);sNr=r(TRt,"gpt_neo"),TRt.forEach(t),lNr=r(Nje," \u2014 "),rZ=n(Nje,"A",{href:!0});var MRt=s(rZ);iNr=r(MRt,"FlaxGPTNeoForCausalLM"),MRt.forEach(t),dNr=r(Nje," (GPT Neo model)"),Nje.forEach(t),cNr=i(Ne),KE=n(Ne,"LI",{});var qje=s(KE);HMe=n(qje,"STRONG",{});var ERt=s(HMe);fNr=r(ERt,"gptj"),ERt.forEach(t),mNr=r(qje," \u2014 "),tZ=n(qje,"A",{href:!0});var CRt=s(tZ);gNr=r(CRt,"FlaxGPTJForCausalLM"),CRt.forEach(t),hNr=r(qje," (GPT-J model)"),qje.forEach(t),pNr=i(Ne),ZE=n(Ne,"LI",{});var jje=s(ZE);UMe=n(jje,"STRONG",{});var wRt=s(UMe);uNr=r(wRt,"opt"),wRt.forEach(t),_Nr=r(jje," \u2014 "),aZ=n(jje,"A",{href:!0});var ARt=s(aZ);bNr=r(ARt,"FlaxOPTForCausalLM"),ARt.forEach(t),vNr=r(jje," (OPT model)"),jje.forEach(t),FNr=i(Ne),eC=n(Ne,"LI",{});var Dje=s(eC);JMe=n(Dje,"STRONG",{});var LRt=s(JMe);TNr=r(LRt,"roberta"),LRt.forEach(t),MNr=r(Dje," \u2014 "),nZ=n(Dje,"A",{href:!0});var yRt=s(nZ);ENr=r(yRt,"FlaxRobertaForCausalLM"),yRt.forEach(t),CNr=r(Dje," (RoBERTa model)"),Dje.forEach(t),wNr=i(Ne),oC=n(Ne,"LI",{});var Gje=s(oC);YMe=n(Gje,"STRONG",{});var xRt=s(YMe);ANr=r(xRt,"xglm"),xRt.forEach(t),LNr=r(Gje," \u2014 "),sZ=n(Gje,"A",{href:!0});var $Rt=s(sZ);yNr=r($Rt,"FlaxXGLMForCausalLM"),$Rt.forEach(t),xNr=r(Gje," (XGLM model)"),Gje.forEach(t),Ne.forEach(t),$Nr=i(oi),T(rC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),WOe=i(f),Uc=n(f,"H2",{class:!0});var oze=s(Uc);tC=n(oze,"A",{id:!0,class:!0,href:!0});var kRt=s(tC);KMe=n(kRt,"SPAN",{});var SRt=s(KMe);T(Px.$$.fragment,SRt),SRt.forEach(t),kRt.forEach(t),kNr=i(oze),ZMe=n(oze,"SPAN",{});var RRt=s(ZMe);SNr=r(RRt,"FlaxAutoModelForPreTraining"),RRt.forEach(t),oze.forEach(t),QOe=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(Bx.$$.fragment,ri),RNr=i(ri),Jc=n(ri,"P",{});var $re=s(Jc);PNr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lZ=n($re,"A",{href:!0});var PRt=s(lZ);BNr=r(PRt,"from_pretrained()"),PRt.forEach(t),INr=r($re," class method or the "),iZ=n($re,"A",{href:!0});var BRt=s(iZ);NNr=r(BRt,"from_config()"),BRt.forEach(t),qNr=r($re,` class
method.`),$re.forEach(t),jNr=i(ri),Ix=n(ri,"P",{});var rze=s(Ix);DNr=r(rze,"This class cannot be instantiated directly using "),e4e=n(rze,"CODE",{});var IRt=s(e4e);GNr=r(IRt,"__init__()"),IRt.forEach(t),ONr=r(rze," (throws an error)."),rze.forEach(t),VNr=i(ri),Qt=n(ri,"DIV",{class:!0});var Yw=s(Qt);T(Nx.$$.fragment,Yw),XNr=i(Yw),o4e=n(Yw,"P",{});var NRt=s(o4e);zNr=r(NRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NRt.forEach(t),WNr=i(Yw),Yc=n(Yw,"P",{});var kre=s(Yc);QNr=r(kre,`Note:
Loading a model from its configuration file does `),r4e=n(kre,"STRONG",{});var qRt=s(r4e);HNr=r(qRt,"not"),qRt.forEach(t),UNr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(kre,"A",{href:!0});var jRt=s(dZ);JNr=r(jRt,"from_pretrained()"),jRt.forEach(t),YNr=r(kre," to load the model weights."),kre.forEach(t),KNr=i(Yw),T(aC.$$.fragment,Yw),Yw.forEach(t),ZNr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(qx.$$.fragment,ti),eqr=i(ti),t4e=n(ti,"P",{});var DRt=s(t4e);oqr=r(DRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DRt.forEach(t),rqr=i(ti),Tn=n(ti,"P",{});var Kw=s(Tn);tqr=r(Kw,"The model class to instantiate is selected based on the "),a4e=n(Kw,"CODE",{});var GRt=s(a4e);aqr=r(GRt,"model_type"),GRt.forEach(t),nqr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),n4e=n(Kw,"CODE",{});var ORt=s(n4e);sqr=r(ORt,"pretrained_model_name_or_path"),ORt.forEach(t),lqr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(Kw,"CODE",{});var VRt=s(s4e);iqr=r(VRt,"pretrained_model_name_or_path"),VRt.forEach(t),dqr=r(Kw,":"),Kw.forEach(t),cqr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);nC=n(we,"LI",{});var Oje=s(nC);l4e=n(Oje,"STRONG",{});var XRt=s(l4e);fqr=r(XRt,"albert"),XRt.forEach(t),mqr=r(Oje," \u2014 "),cZ=n(Oje,"A",{href:!0});var zRt=s(cZ);gqr=r(zRt,"FlaxAlbertForPreTraining"),zRt.forEach(t),hqr=r(Oje," (ALBERT model)"),Oje.forEach(t),pqr=i(we),sC=n(we,"LI",{});var Vje=s(sC);i4e=n(Vje,"STRONG",{});var WRt=s(i4e);uqr=r(WRt,"bart"),WRt.forEach(t),_qr=r(Vje," \u2014 "),fZ=n(Vje,"A",{href:!0});var QRt=s(fZ);bqr=r(QRt,"FlaxBartForConditionalGeneration"),QRt.forEach(t),vqr=r(Vje," (BART model)"),Vje.forEach(t),Fqr=i(we),lC=n(we,"LI",{});var Xje=s(lC);d4e=n(Xje,"STRONG",{});var HRt=s(d4e);Tqr=r(HRt,"bert"),HRt.forEach(t),Mqr=r(Xje," \u2014 "),mZ=n(Xje,"A",{href:!0});var URt=s(mZ);Eqr=r(URt,"FlaxBertForPreTraining"),URt.forEach(t),Cqr=r(Xje," (BERT model)"),Xje.forEach(t),wqr=i(we),iC=n(we,"LI",{});var zje=s(iC);c4e=n(zje,"STRONG",{});var JRt=s(c4e);Aqr=r(JRt,"big_bird"),JRt.forEach(t),Lqr=r(zje," \u2014 "),gZ=n(zje,"A",{href:!0});var YRt=s(gZ);yqr=r(YRt,"FlaxBigBirdForPreTraining"),YRt.forEach(t),xqr=r(zje," (BigBird model)"),zje.forEach(t),$qr=i(we),dC=n(we,"LI",{});var Wje=s(dC);f4e=n(Wje,"STRONG",{});var KRt=s(f4e);kqr=r(KRt,"electra"),KRt.forEach(t),Sqr=r(Wje," \u2014 "),hZ=n(Wje,"A",{href:!0});var ZRt=s(hZ);Rqr=r(ZRt,"FlaxElectraForPreTraining"),ZRt.forEach(t),Pqr=r(Wje," (ELECTRA model)"),Wje.forEach(t),Bqr=i(we),cC=n(we,"LI",{});var Qje=s(cC);m4e=n(Qje,"STRONG",{});var ePt=s(m4e);Iqr=r(ePt,"longt5"),ePt.forEach(t),Nqr=r(Qje," \u2014 "),pZ=n(Qje,"A",{href:!0});var oPt=s(pZ);qqr=r(oPt,"FlaxLongT5ForConditionalGeneration"),oPt.forEach(t),jqr=r(Qje," (LongT5 model)"),Qje.forEach(t),Dqr=i(we),fC=n(we,"LI",{});var Hje=s(fC);g4e=n(Hje,"STRONG",{});var rPt=s(g4e);Gqr=r(rPt,"mbart"),rPt.forEach(t),Oqr=r(Hje," \u2014 "),uZ=n(Hje,"A",{href:!0});var tPt=s(uZ);Vqr=r(tPt,"FlaxMBartForConditionalGeneration"),tPt.forEach(t),Xqr=r(Hje," (mBART model)"),Hje.forEach(t),zqr=i(we),mC=n(we,"LI",{});var Uje=s(mC);h4e=n(Uje,"STRONG",{});var aPt=s(h4e);Wqr=r(aPt,"mt5"),aPt.forEach(t),Qqr=r(Uje," \u2014 "),_Z=n(Uje,"A",{href:!0});var nPt=s(_Z);Hqr=r(nPt,"FlaxMT5ForConditionalGeneration"),nPt.forEach(t),Uqr=r(Uje," (MT5 model)"),Uje.forEach(t),Jqr=i(we),gC=n(we,"LI",{});var Jje=s(gC);p4e=n(Jje,"STRONG",{});var sPt=s(p4e);Yqr=r(sPt,"roberta"),sPt.forEach(t),Kqr=r(Jje," \u2014 "),bZ=n(Jje,"A",{href:!0});var lPt=s(bZ);Zqr=r(lPt,"FlaxRobertaForMaskedLM"),lPt.forEach(t),ejr=r(Jje," (RoBERTa model)"),Jje.forEach(t),ojr=i(we),hC=n(we,"LI",{});var Yje=s(hC);u4e=n(Yje,"STRONG",{});var iPt=s(u4e);rjr=r(iPt,"roformer"),iPt.forEach(t),tjr=r(Yje," \u2014 "),vZ=n(Yje,"A",{href:!0});var dPt=s(vZ);ajr=r(dPt,"FlaxRoFormerForMaskedLM"),dPt.forEach(t),njr=r(Yje," (RoFormer model)"),Yje.forEach(t),sjr=i(we),pC=n(we,"LI",{});var Kje=s(pC);_4e=n(Kje,"STRONG",{});var cPt=s(_4e);ljr=r(cPt,"t5"),cPt.forEach(t),ijr=r(Kje," \u2014 "),FZ=n(Kje,"A",{href:!0});var fPt=s(FZ);djr=r(fPt,"FlaxT5ForConditionalGeneration"),fPt.forEach(t),cjr=r(Kje," (T5 model)"),Kje.forEach(t),fjr=i(we),uC=n(we,"LI",{});var Zje=s(uC);b4e=n(Zje,"STRONG",{});var mPt=s(b4e);mjr=r(mPt,"wav2vec2"),mPt.forEach(t),gjr=r(Zje," \u2014 "),TZ=n(Zje,"A",{href:!0});var gPt=s(TZ);hjr=r(gPt,"FlaxWav2Vec2ForPreTraining"),gPt.forEach(t),pjr=r(Zje," (Wav2Vec2 model)"),Zje.forEach(t),ujr=i(we),_C=n(we,"LI",{});var eDe=s(_C);v4e=n(eDe,"STRONG",{});var hPt=s(v4e);_jr=r(hPt,"xlm-roberta"),hPt.forEach(t),bjr=r(eDe," \u2014 "),MZ=n(eDe,"A",{href:!0});var pPt=s(MZ);vjr=r(pPt,"FlaxXLMRobertaForMaskedLM"),pPt.forEach(t),Fjr=r(eDe," (XLM-RoBERTa model)"),eDe.forEach(t),we.forEach(t),Tjr=i(ti),T(bC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),HOe=i(f),Kc=n(f,"H2",{class:!0});var tze=s(Kc);vC=n(tze,"A",{id:!0,class:!0,href:!0});var uPt=s(vC);F4e=n(uPt,"SPAN",{});var _Pt=s(F4e);T(jx.$$.fragment,_Pt),_Pt.forEach(t),uPt.forEach(t),Mjr=i(tze),T4e=n(tze,"SPAN",{});var bPt=s(T4e);Ejr=r(bPt,"FlaxAutoModelForMaskedLM"),bPt.forEach(t),tze.forEach(t),UOe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(Dx.$$.fragment,ai),Cjr=i(ai),Zc=n(ai,"P",{});var Sre=s(Zc);wjr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EZ=n(Sre,"A",{href:!0});var vPt=s(EZ);Ajr=r(vPt,"from_pretrained()"),vPt.forEach(t),Ljr=r(Sre," class method or the "),CZ=n(Sre,"A",{href:!0});var FPt=s(CZ);yjr=r(FPt,"from_config()"),FPt.forEach(t),xjr=r(Sre,` class
method.`),Sre.forEach(t),$jr=i(ai),Gx=n(ai,"P",{});var aze=s(Gx);kjr=r(aze,"This class cannot be instantiated directly using "),M4e=n(aze,"CODE",{});var TPt=s(M4e);Sjr=r(TPt,"__init__()"),TPt.forEach(t),Rjr=r(aze," (throws an error)."),aze.forEach(t),Pjr=i(ai),Ht=n(ai,"DIV",{class:!0});var Zw=s(Ht);T(Ox.$$.fragment,Zw),Bjr=i(Zw),E4e=n(Zw,"P",{});var MPt=s(E4e);Ijr=r(MPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MPt.forEach(t),Njr=i(Zw),ef=n(Zw,"P",{});var Rre=s(ef);qjr=r(Rre,`Note:
Loading a model from its configuration file does `),C4e=n(Rre,"STRONG",{});var EPt=s(C4e);jjr=r(EPt,"not"),EPt.forEach(t),Djr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Rre,"A",{href:!0});var CPt=s(wZ);Gjr=r(CPt,"from_pretrained()"),CPt.forEach(t),Ojr=r(Rre," to load the model weights."),Rre.forEach(t),Vjr=i(Zw),T(FC.$$.fragment,Zw),Zw.forEach(t),Xjr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(Vx.$$.fragment,ni),zjr=i(ni),w4e=n(ni,"P",{});var wPt=s(w4e);Wjr=r(wPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wPt.forEach(t),Qjr=i(ni),Mn=n(ni,"P",{});var eA=s(Mn);Hjr=r(eA,"The model class to instantiate is selected based on the "),A4e=n(eA,"CODE",{});var APt=s(A4e);Ujr=r(APt,"model_type"),APt.forEach(t),Jjr=r(eA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(eA,"CODE",{});var LPt=s(L4e);Yjr=r(LPt,"pretrained_model_name_or_path"),LPt.forEach(t),Kjr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(eA,"CODE",{});var yPt=s(y4e);Zjr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),eDr=r(eA,":"),eA.forEach(t),oDr=i(ni),$e=n(ni,"UL",{});var qe=s($e);TC=n(qe,"LI",{});var oDe=s(TC);x4e=n(oDe,"STRONG",{});var xPt=s(x4e);rDr=r(xPt,"albert"),xPt.forEach(t),tDr=r(oDe," \u2014 "),AZ=n(oDe,"A",{href:!0});var $Pt=s(AZ);aDr=r($Pt,"FlaxAlbertForMaskedLM"),$Pt.forEach(t),nDr=r(oDe," (ALBERT model)"),oDe.forEach(t),sDr=i(qe),MC=n(qe,"LI",{});var rDe=s(MC);$4e=n(rDe,"STRONG",{});var kPt=s($4e);lDr=r(kPt,"bart"),kPt.forEach(t),iDr=r(rDe," \u2014 "),LZ=n(rDe,"A",{href:!0});var SPt=s(LZ);dDr=r(SPt,"FlaxBartForConditionalGeneration"),SPt.forEach(t),cDr=r(rDe," (BART model)"),rDe.forEach(t),fDr=i(qe),EC=n(qe,"LI",{});var tDe=s(EC);k4e=n(tDe,"STRONG",{});var RPt=s(k4e);mDr=r(RPt,"bert"),RPt.forEach(t),gDr=r(tDe," \u2014 "),yZ=n(tDe,"A",{href:!0});var PPt=s(yZ);hDr=r(PPt,"FlaxBertForMaskedLM"),PPt.forEach(t),pDr=r(tDe," (BERT model)"),tDe.forEach(t),uDr=i(qe),CC=n(qe,"LI",{});var aDe=s(CC);S4e=n(aDe,"STRONG",{});var BPt=s(S4e);_Dr=r(BPt,"big_bird"),BPt.forEach(t),bDr=r(aDe," \u2014 "),xZ=n(aDe,"A",{href:!0});var IPt=s(xZ);vDr=r(IPt,"FlaxBigBirdForMaskedLM"),IPt.forEach(t),FDr=r(aDe," (BigBird model)"),aDe.forEach(t),TDr=i(qe),wC=n(qe,"LI",{});var nDe=s(wC);R4e=n(nDe,"STRONG",{});var NPt=s(R4e);MDr=r(NPt,"distilbert"),NPt.forEach(t),EDr=r(nDe," \u2014 "),$Z=n(nDe,"A",{href:!0});var qPt=s($Z);CDr=r(qPt,"FlaxDistilBertForMaskedLM"),qPt.forEach(t),wDr=r(nDe," (DistilBERT model)"),nDe.forEach(t),ADr=i(qe),AC=n(qe,"LI",{});var sDe=s(AC);P4e=n(sDe,"STRONG",{});var jPt=s(P4e);LDr=r(jPt,"electra"),jPt.forEach(t),yDr=r(sDe," \u2014 "),kZ=n(sDe,"A",{href:!0});var DPt=s(kZ);xDr=r(DPt,"FlaxElectraForMaskedLM"),DPt.forEach(t),$Dr=r(sDe," (ELECTRA model)"),sDe.forEach(t),kDr=i(qe),LC=n(qe,"LI",{});var lDe=s(LC);B4e=n(lDe,"STRONG",{});var GPt=s(B4e);SDr=r(GPt,"mbart"),GPt.forEach(t),RDr=r(lDe," \u2014 "),SZ=n(lDe,"A",{href:!0});var OPt=s(SZ);PDr=r(OPt,"FlaxMBartForConditionalGeneration"),OPt.forEach(t),BDr=r(lDe," (mBART model)"),lDe.forEach(t),IDr=i(qe),yC=n(qe,"LI",{});var iDe=s(yC);I4e=n(iDe,"STRONG",{});var VPt=s(I4e);NDr=r(VPt,"roberta"),VPt.forEach(t),qDr=r(iDe," \u2014 "),RZ=n(iDe,"A",{href:!0});var XPt=s(RZ);jDr=r(XPt,"FlaxRobertaForMaskedLM"),XPt.forEach(t),DDr=r(iDe," (RoBERTa model)"),iDe.forEach(t),GDr=i(qe),xC=n(qe,"LI",{});var dDe=s(xC);N4e=n(dDe,"STRONG",{});var zPt=s(N4e);ODr=r(zPt,"roformer"),zPt.forEach(t),VDr=r(dDe," \u2014 "),PZ=n(dDe,"A",{href:!0});var WPt=s(PZ);XDr=r(WPt,"FlaxRoFormerForMaskedLM"),WPt.forEach(t),zDr=r(dDe," (RoFormer model)"),dDe.forEach(t),WDr=i(qe),$C=n(qe,"LI",{});var cDe=s($C);q4e=n(cDe,"STRONG",{});var QPt=s(q4e);QDr=r(QPt,"xlm-roberta"),QPt.forEach(t),HDr=r(cDe," \u2014 "),BZ=n(cDe,"A",{href:!0});var HPt=s(BZ);UDr=r(HPt,"FlaxXLMRobertaForMaskedLM"),HPt.forEach(t),JDr=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),qe.forEach(t),YDr=i(ni),T(kC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),JOe=i(f),of=n(f,"H2",{class:!0});var nze=s(of);SC=n(nze,"A",{id:!0,class:!0,href:!0});var UPt=s(SC);j4e=n(UPt,"SPAN",{});var JPt=s(j4e);T(Xx.$$.fragment,JPt),JPt.forEach(t),UPt.forEach(t),KDr=i(nze),D4e=n(nze,"SPAN",{});var YPt=s(D4e);ZDr=r(YPt,"FlaxAutoModelForSeq2SeqLM"),YPt.forEach(t),nze.forEach(t),YOe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(zx.$$.fragment,si),eGr=i(si),rf=n(si,"P",{});var Pre=s(rf);oGr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IZ=n(Pre,"A",{href:!0});var KPt=s(IZ);rGr=r(KPt,"from_pretrained()"),KPt.forEach(t),tGr=r(Pre," class method or the "),NZ=n(Pre,"A",{href:!0});var ZPt=s(NZ);aGr=r(ZPt,"from_config()"),ZPt.forEach(t),nGr=r(Pre,` class
method.`),Pre.forEach(t),sGr=i(si),Wx=n(si,"P",{});var sze=s(Wx);lGr=r(sze,"This class cannot be instantiated directly using "),G4e=n(sze,"CODE",{});var eBt=s(G4e);iGr=r(eBt,"__init__()"),eBt.forEach(t),dGr=r(sze," (throws an error)."),sze.forEach(t),cGr=i(si),Ut=n(si,"DIV",{class:!0});var oA=s(Ut);T(Qx.$$.fragment,oA),fGr=i(oA),O4e=n(oA,"P",{});var oBt=s(O4e);mGr=r(oBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oBt.forEach(t),gGr=i(oA),tf=n(oA,"P",{});var Bre=s(tf);hGr=r(Bre,`Note:
Loading a model from its configuration file does `),V4e=n(Bre,"STRONG",{});var rBt=s(V4e);pGr=r(rBt,"not"),rBt.forEach(t),uGr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Bre,"A",{href:!0});var tBt=s(qZ);_Gr=r(tBt,"from_pretrained()"),tBt.forEach(t),bGr=r(Bre," to load the model weights."),Bre.forEach(t),vGr=i(oA),T(RC.$$.fragment,oA),oA.forEach(t),FGr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(Hx.$$.fragment,li),TGr=i(li),X4e=n(li,"P",{});var aBt=s(X4e);MGr=r(aBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aBt.forEach(t),EGr=i(li),En=n(li,"P",{});var rA=s(En);CGr=r(rA,"The model class to instantiate is selected based on the "),z4e=n(rA,"CODE",{});var nBt=s(z4e);wGr=r(nBt,"model_type"),nBt.forEach(t),AGr=r(rA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(rA,"CODE",{});var sBt=s(W4e);LGr=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),yGr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(rA,"CODE",{});var lBt=s(Q4e);xGr=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),$Gr=r(rA,":"),rA.forEach(t),kGr=i(li),ke=n(li,"UL",{});var je=s(ke);PC=n(je,"LI",{});var fDe=s(PC);H4e=n(fDe,"STRONG",{});var iBt=s(H4e);SGr=r(iBt,"bart"),iBt.forEach(t),RGr=r(fDe," \u2014 "),jZ=n(fDe,"A",{href:!0});var dBt=s(jZ);PGr=r(dBt,"FlaxBartForConditionalGeneration"),dBt.forEach(t),BGr=r(fDe," (BART model)"),fDe.forEach(t),IGr=i(je),BC=n(je,"LI",{});var mDe=s(BC);U4e=n(mDe,"STRONG",{});var cBt=s(U4e);NGr=r(cBt,"blenderbot"),cBt.forEach(t),qGr=r(mDe," \u2014 "),DZ=n(mDe,"A",{href:!0});var fBt=s(DZ);jGr=r(fBt,"FlaxBlenderbotForConditionalGeneration"),fBt.forEach(t),DGr=r(mDe," (Blenderbot model)"),mDe.forEach(t),GGr=i(je),IC=n(je,"LI",{});var gDe=s(IC);J4e=n(gDe,"STRONG",{});var mBt=s(J4e);OGr=r(mBt,"blenderbot-small"),mBt.forEach(t),VGr=r(gDe," \u2014 "),GZ=n(gDe,"A",{href:!0});var gBt=s(GZ);XGr=r(gBt,"FlaxBlenderbotSmallForConditionalGeneration"),gBt.forEach(t),zGr=r(gDe," (BlenderbotSmall model)"),gDe.forEach(t),WGr=i(je),NC=n(je,"LI",{});var hDe=s(NC);Y4e=n(hDe,"STRONG",{});var hBt=s(Y4e);QGr=r(hBt,"encoder-decoder"),hBt.forEach(t),HGr=r(hDe," \u2014 "),OZ=n(hDe,"A",{href:!0});var pBt=s(OZ);UGr=r(pBt,"FlaxEncoderDecoderModel"),pBt.forEach(t),JGr=r(hDe," (Encoder decoder model)"),hDe.forEach(t),YGr=i(je),qC=n(je,"LI",{});var pDe=s(qC);K4e=n(pDe,"STRONG",{});var uBt=s(K4e);KGr=r(uBt,"longt5"),uBt.forEach(t),ZGr=r(pDe," \u2014 "),VZ=n(pDe,"A",{href:!0});var _Bt=s(VZ);eOr=r(_Bt,"FlaxLongT5ForConditionalGeneration"),_Bt.forEach(t),oOr=r(pDe," (LongT5 model)"),pDe.forEach(t),rOr=i(je),jC=n(je,"LI",{});var uDe=s(jC);Z4e=n(uDe,"STRONG",{});var bBt=s(Z4e);tOr=r(bBt,"marian"),bBt.forEach(t),aOr=r(uDe," \u2014 "),XZ=n(uDe,"A",{href:!0});var vBt=s(XZ);nOr=r(vBt,"FlaxMarianMTModel"),vBt.forEach(t),sOr=r(uDe," (Marian model)"),uDe.forEach(t),lOr=i(je),DC=n(je,"LI",{});var _De=s(DC);eEe=n(_De,"STRONG",{});var FBt=s(eEe);iOr=r(FBt,"mbart"),FBt.forEach(t),dOr=r(_De," \u2014 "),zZ=n(_De,"A",{href:!0});var TBt=s(zZ);cOr=r(TBt,"FlaxMBartForConditionalGeneration"),TBt.forEach(t),fOr=r(_De," (mBART model)"),_De.forEach(t),mOr=i(je),GC=n(je,"LI",{});var bDe=s(GC);oEe=n(bDe,"STRONG",{});var MBt=s(oEe);gOr=r(MBt,"mt5"),MBt.forEach(t),hOr=r(bDe," \u2014 "),WZ=n(bDe,"A",{href:!0});var EBt=s(WZ);pOr=r(EBt,"FlaxMT5ForConditionalGeneration"),EBt.forEach(t),uOr=r(bDe," (MT5 model)"),bDe.forEach(t),_Or=i(je),OC=n(je,"LI",{});var vDe=s(OC);rEe=n(vDe,"STRONG",{});var CBt=s(rEe);bOr=r(CBt,"pegasus"),CBt.forEach(t),vOr=r(vDe," \u2014 "),QZ=n(vDe,"A",{href:!0});var wBt=s(QZ);FOr=r(wBt,"FlaxPegasusForConditionalGeneration"),wBt.forEach(t),TOr=r(vDe," (Pegasus model)"),vDe.forEach(t),MOr=i(je),VC=n(je,"LI",{});var FDe=s(VC);tEe=n(FDe,"STRONG",{});var ABt=s(tEe);EOr=r(ABt,"t5"),ABt.forEach(t),COr=r(FDe," \u2014 "),HZ=n(FDe,"A",{href:!0});var LBt=s(HZ);wOr=r(LBt,"FlaxT5ForConditionalGeneration"),LBt.forEach(t),AOr=r(FDe," (T5 model)"),FDe.forEach(t),je.forEach(t),LOr=i(li),T(XC.$$.fragment,li),li.forEach(t),si.forEach(t),KOe=i(f),af=n(f,"H2",{class:!0});var lze=s(af);zC=n(lze,"A",{id:!0,class:!0,href:!0});var yBt=s(zC);aEe=n(yBt,"SPAN",{});var xBt=s(aEe);T(Ux.$$.fragment,xBt),xBt.forEach(t),yBt.forEach(t),yOr=i(lze),nEe=n(lze,"SPAN",{});var $Bt=s(nEe);xOr=r($Bt,"FlaxAutoModelForSequenceClassification"),$Bt.forEach(t),lze.forEach(t),ZOe=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(Jx.$$.fragment,ii),$Or=i(ii),nf=n(ii,"P",{});var Ire=s(nf);kOr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UZ=n(Ire,"A",{href:!0});var kBt=s(UZ);SOr=r(kBt,"from_pretrained()"),kBt.forEach(t),ROr=r(Ire," class method or the "),JZ=n(Ire,"A",{href:!0});var SBt=s(JZ);POr=r(SBt,"from_config()"),SBt.forEach(t),BOr=r(Ire,` class
method.`),Ire.forEach(t),IOr=i(ii),Yx=n(ii,"P",{});var ize=s(Yx);NOr=r(ize,"This class cannot be instantiated directly using "),sEe=n(ize,"CODE",{});var RBt=s(sEe);qOr=r(RBt,"__init__()"),RBt.forEach(t),jOr=r(ize," (throws an error)."),ize.forEach(t),DOr=i(ii),Jt=n(ii,"DIV",{class:!0});var tA=s(Jt);T(Kx.$$.fragment,tA),GOr=i(tA),lEe=n(tA,"P",{});var PBt=s(lEe);OOr=r(PBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PBt.forEach(t),VOr=i(tA),sf=n(tA,"P",{});var Nre=s(sf);XOr=r(Nre,`Note:
Loading a model from its configuration file does `),iEe=n(Nre,"STRONG",{});var BBt=s(iEe);zOr=r(BBt,"not"),BBt.forEach(t),WOr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(Nre,"A",{href:!0});var IBt=s(YZ);QOr=r(IBt,"from_pretrained()"),IBt.forEach(t),HOr=r(Nre," to load the model weights."),Nre.forEach(t),UOr=i(tA),T(WC.$$.fragment,tA),tA.forEach(t),JOr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(Zx.$$.fragment,di),YOr=i(di),dEe=n(di,"P",{});var NBt=s(dEe);KOr=r(NBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NBt.forEach(t),ZOr=i(di),Cn=n(di,"P",{});var aA=s(Cn);eVr=r(aA,"The model class to instantiate is selected based on the "),cEe=n(aA,"CODE",{});var qBt=s(cEe);oVr=r(qBt,"model_type"),qBt.forEach(t),rVr=r(aA,` property of the config object (either
passed as an argument or loaded from `),fEe=n(aA,"CODE",{});var jBt=s(fEe);tVr=r(jBt,"pretrained_model_name_or_path"),jBt.forEach(t),aVr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(aA,"CODE",{});var DBt=s(mEe);nVr=r(DBt,"pretrained_model_name_or_path"),DBt.forEach(t),sVr=r(aA,":"),aA.forEach(t),lVr=i(di),Se=n(di,"UL",{});var De=s(Se);QC=n(De,"LI",{});var TDe=s(QC);gEe=n(TDe,"STRONG",{});var GBt=s(gEe);iVr=r(GBt,"albert"),GBt.forEach(t),dVr=r(TDe," \u2014 "),KZ=n(TDe,"A",{href:!0});var OBt=s(KZ);cVr=r(OBt,"FlaxAlbertForSequenceClassification"),OBt.forEach(t),fVr=r(TDe," (ALBERT model)"),TDe.forEach(t),mVr=i(De),HC=n(De,"LI",{});var MDe=s(HC);hEe=n(MDe,"STRONG",{});var VBt=s(hEe);gVr=r(VBt,"bart"),VBt.forEach(t),hVr=r(MDe," \u2014 "),ZZ=n(MDe,"A",{href:!0});var XBt=s(ZZ);pVr=r(XBt,"FlaxBartForSequenceClassification"),XBt.forEach(t),uVr=r(MDe," (BART model)"),MDe.forEach(t),_Vr=i(De),UC=n(De,"LI",{});var EDe=s(UC);pEe=n(EDe,"STRONG",{});var zBt=s(pEe);bVr=r(zBt,"bert"),zBt.forEach(t),vVr=r(EDe," \u2014 "),eee=n(EDe,"A",{href:!0});var WBt=s(eee);FVr=r(WBt,"FlaxBertForSequenceClassification"),WBt.forEach(t),TVr=r(EDe," (BERT model)"),EDe.forEach(t),MVr=i(De),JC=n(De,"LI",{});var CDe=s(JC);uEe=n(CDe,"STRONG",{});var QBt=s(uEe);EVr=r(QBt,"big_bird"),QBt.forEach(t),CVr=r(CDe," \u2014 "),oee=n(CDe,"A",{href:!0});var HBt=s(oee);wVr=r(HBt,"FlaxBigBirdForSequenceClassification"),HBt.forEach(t),AVr=r(CDe," (BigBird model)"),CDe.forEach(t),LVr=i(De),YC=n(De,"LI",{});var wDe=s(YC);_Ee=n(wDe,"STRONG",{});var UBt=s(_Ee);yVr=r(UBt,"distilbert"),UBt.forEach(t),xVr=r(wDe," \u2014 "),ree=n(wDe,"A",{href:!0});var JBt=s(ree);$Vr=r(JBt,"FlaxDistilBertForSequenceClassification"),JBt.forEach(t),kVr=r(wDe," (DistilBERT model)"),wDe.forEach(t),SVr=i(De),KC=n(De,"LI",{});var ADe=s(KC);bEe=n(ADe,"STRONG",{});var YBt=s(bEe);RVr=r(YBt,"electra"),YBt.forEach(t),PVr=r(ADe," \u2014 "),tee=n(ADe,"A",{href:!0});var KBt=s(tee);BVr=r(KBt,"FlaxElectraForSequenceClassification"),KBt.forEach(t),IVr=r(ADe," (ELECTRA model)"),ADe.forEach(t),NVr=i(De),ZC=n(De,"LI",{});var LDe=s(ZC);vEe=n(LDe,"STRONG",{});var ZBt=s(vEe);qVr=r(ZBt,"mbart"),ZBt.forEach(t),jVr=r(LDe," \u2014 "),aee=n(LDe,"A",{href:!0});var eIt=s(aee);DVr=r(eIt,"FlaxMBartForSequenceClassification"),eIt.forEach(t),GVr=r(LDe," (mBART model)"),LDe.forEach(t),OVr=i(De),e5=n(De,"LI",{});var yDe=s(e5);FEe=n(yDe,"STRONG",{});var oIt=s(FEe);VVr=r(oIt,"roberta"),oIt.forEach(t),XVr=r(yDe," \u2014 "),nee=n(yDe,"A",{href:!0});var rIt=s(nee);zVr=r(rIt,"FlaxRobertaForSequenceClassification"),rIt.forEach(t),WVr=r(yDe," (RoBERTa model)"),yDe.forEach(t),QVr=i(De),o5=n(De,"LI",{});var xDe=s(o5);TEe=n(xDe,"STRONG",{});var tIt=s(TEe);HVr=r(tIt,"roformer"),tIt.forEach(t),UVr=r(xDe," \u2014 "),see=n(xDe,"A",{href:!0});var aIt=s(see);JVr=r(aIt,"FlaxRoFormerForSequenceClassification"),aIt.forEach(t),YVr=r(xDe," (RoFormer model)"),xDe.forEach(t),KVr=i(De),r5=n(De,"LI",{});var $De=s(r5);MEe=n($De,"STRONG",{});var nIt=s(MEe);ZVr=r(nIt,"xlm-roberta"),nIt.forEach(t),eXr=r($De," \u2014 "),lee=n($De,"A",{href:!0});var sIt=s(lee);oXr=r(sIt,"FlaxXLMRobertaForSequenceClassification"),sIt.forEach(t),rXr=r($De," (XLM-RoBERTa model)"),$De.forEach(t),De.forEach(t),tXr=i(di),T(t5.$$.fragment,di),di.forEach(t),ii.forEach(t),eVe=i(f),lf=n(f,"H2",{class:!0});var dze=s(lf);a5=n(dze,"A",{id:!0,class:!0,href:!0});var lIt=s(a5);EEe=n(lIt,"SPAN",{});var iIt=s(EEe);T(e$.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),aXr=i(dze),CEe=n(dze,"SPAN",{});var dIt=s(CEe);nXr=r(dIt,"FlaxAutoModelForQuestionAnswering"),dIt.forEach(t),dze.forEach(t),oVe=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(o$.$$.fragment,ci),sXr=i(ci),df=n(ci,"P",{});var qre=s(df);lXr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iee=n(qre,"A",{href:!0});var cIt=s(iee);iXr=r(cIt,"from_pretrained()"),cIt.forEach(t),dXr=r(qre," class method or the "),dee=n(qre,"A",{href:!0});var fIt=s(dee);cXr=r(fIt,"from_config()"),fIt.forEach(t),fXr=r(qre,` class
method.`),qre.forEach(t),mXr=i(ci),r$=n(ci,"P",{});var cze=s(r$);gXr=r(cze,"This class cannot be instantiated directly using "),wEe=n(cze,"CODE",{});var mIt=s(wEe);hXr=r(mIt,"__init__()"),mIt.forEach(t),pXr=r(cze," (throws an error)."),cze.forEach(t),uXr=i(ci),Yt=n(ci,"DIV",{class:!0});var nA=s(Yt);T(t$.$$.fragment,nA),_Xr=i(nA),AEe=n(nA,"P",{});var gIt=s(AEe);bXr=r(gIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gIt.forEach(t),vXr=i(nA),cf=n(nA,"P",{});var jre=s(cf);FXr=r(jre,`Note:
Loading a model from its configuration file does `),LEe=n(jre,"STRONG",{});var hIt=s(LEe);TXr=r(hIt,"not"),hIt.forEach(t),MXr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(jre,"A",{href:!0});var pIt=s(cee);EXr=r(pIt,"from_pretrained()"),pIt.forEach(t),CXr=r(jre," to load the model weights."),jre.forEach(t),wXr=i(nA),T(n5.$$.fragment,nA),nA.forEach(t),AXr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(a$.$$.fragment,fi),LXr=i(fi),yEe=n(fi,"P",{});var uIt=s(yEe);yXr=r(uIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uIt.forEach(t),xXr=i(fi),wn=n(fi,"P",{});var sA=s(wn);$Xr=r(sA,"The model class to instantiate is selected based on the "),xEe=n(sA,"CODE",{});var _It=s(xEe);kXr=r(_It,"model_type"),_It.forEach(t),SXr=r(sA,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(sA,"CODE",{});var bIt=s($Ee);RXr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),PXr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(sA,"CODE",{});var vIt=s(kEe);BXr=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),IXr=r(sA,":"),sA.forEach(t),NXr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);s5=n(Ge,"LI",{});var kDe=s(s5);SEe=n(kDe,"STRONG",{});var FIt=s(SEe);qXr=r(FIt,"albert"),FIt.forEach(t),jXr=r(kDe," \u2014 "),fee=n(kDe,"A",{href:!0});var TIt=s(fee);DXr=r(TIt,"FlaxAlbertForQuestionAnswering"),TIt.forEach(t),GXr=r(kDe," (ALBERT model)"),kDe.forEach(t),OXr=i(Ge),l5=n(Ge,"LI",{});var SDe=s(l5);REe=n(SDe,"STRONG",{});var MIt=s(REe);VXr=r(MIt,"bart"),MIt.forEach(t),XXr=r(SDe," \u2014 "),mee=n(SDe,"A",{href:!0});var EIt=s(mee);zXr=r(EIt,"FlaxBartForQuestionAnswering"),EIt.forEach(t),WXr=r(SDe," (BART model)"),SDe.forEach(t),QXr=i(Ge),i5=n(Ge,"LI",{});var RDe=s(i5);PEe=n(RDe,"STRONG",{});var CIt=s(PEe);HXr=r(CIt,"bert"),CIt.forEach(t),UXr=r(RDe," \u2014 "),gee=n(RDe,"A",{href:!0});var wIt=s(gee);JXr=r(wIt,"FlaxBertForQuestionAnswering"),wIt.forEach(t),YXr=r(RDe," (BERT model)"),RDe.forEach(t),KXr=i(Ge),d5=n(Ge,"LI",{});var PDe=s(d5);BEe=n(PDe,"STRONG",{});var AIt=s(BEe);ZXr=r(AIt,"big_bird"),AIt.forEach(t),ezr=r(PDe," \u2014 "),hee=n(PDe,"A",{href:!0});var LIt=s(hee);ozr=r(LIt,"FlaxBigBirdForQuestionAnswering"),LIt.forEach(t),rzr=r(PDe," (BigBird model)"),PDe.forEach(t),tzr=i(Ge),c5=n(Ge,"LI",{});var BDe=s(c5);IEe=n(BDe,"STRONG",{});var yIt=s(IEe);azr=r(yIt,"distilbert"),yIt.forEach(t),nzr=r(BDe," \u2014 "),pee=n(BDe,"A",{href:!0});var xIt=s(pee);szr=r(xIt,"FlaxDistilBertForQuestionAnswering"),xIt.forEach(t),lzr=r(BDe," (DistilBERT model)"),BDe.forEach(t),izr=i(Ge),f5=n(Ge,"LI",{});var IDe=s(f5);NEe=n(IDe,"STRONG",{});var $It=s(NEe);dzr=r($It,"electra"),$It.forEach(t),czr=r(IDe," \u2014 "),uee=n(IDe,"A",{href:!0});var kIt=s(uee);fzr=r(kIt,"FlaxElectraForQuestionAnswering"),kIt.forEach(t),mzr=r(IDe," (ELECTRA model)"),IDe.forEach(t),gzr=i(Ge),m5=n(Ge,"LI",{});var NDe=s(m5);qEe=n(NDe,"STRONG",{});var SIt=s(qEe);hzr=r(SIt,"mbart"),SIt.forEach(t),pzr=r(NDe," \u2014 "),_ee=n(NDe,"A",{href:!0});var RIt=s(_ee);uzr=r(RIt,"FlaxMBartForQuestionAnswering"),RIt.forEach(t),_zr=r(NDe," (mBART model)"),NDe.forEach(t),bzr=i(Ge),g5=n(Ge,"LI",{});var qDe=s(g5);jEe=n(qDe,"STRONG",{});var PIt=s(jEe);vzr=r(PIt,"roberta"),PIt.forEach(t),Fzr=r(qDe," \u2014 "),bee=n(qDe,"A",{href:!0});var BIt=s(bee);Tzr=r(BIt,"FlaxRobertaForQuestionAnswering"),BIt.forEach(t),Mzr=r(qDe," (RoBERTa model)"),qDe.forEach(t),Ezr=i(Ge),h5=n(Ge,"LI",{});var jDe=s(h5);DEe=n(jDe,"STRONG",{});var IIt=s(DEe);Czr=r(IIt,"roformer"),IIt.forEach(t),wzr=r(jDe," \u2014 "),vee=n(jDe,"A",{href:!0});var NIt=s(vee);Azr=r(NIt,"FlaxRoFormerForQuestionAnswering"),NIt.forEach(t),Lzr=r(jDe," (RoFormer model)"),jDe.forEach(t),yzr=i(Ge),p5=n(Ge,"LI",{});var DDe=s(p5);GEe=n(DDe,"STRONG",{});var qIt=s(GEe);xzr=r(qIt,"xlm-roberta"),qIt.forEach(t),$zr=r(DDe," \u2014 "),Fee=n(DDe,"A",{href:!0});var jIt=s(Fee);kzr=r(jIt,"FlaxXLMRobertaForQuestionAnswering"),jIt.forEach(t),Szr=r(DDe," (XLM-RoBERTa model)"),DDe.forEach(t),Ge.forEach(t),Rzr=i(fi),T(u5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),rVe=i(f),ff=n(f,"H2",{class:!0});var fze=s(ff);_5=n(fze,"A",{id:!0,class:!0,href:!0});var DIt=s(_5);OEe=n(DIt,"SPAN",{});var GIt=s(OEe);T(n$.$$.fragment,GIt),GIt.forEach(t),DIt.forEach(t),Pzr=i(fze),VEe=n(fze,"SPAN",{});var OIt=s(VEe);Bzr=r(OIt,"FlaxAutoModelForTokenClassification"),OIt.forEach(t),fze.forEach(t),tVe=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(s$.$$.fragment,mi),Izr=i(mi),mf=n(mi,"P",{});var Dre=s(mf);Nzr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tee=n(Dre,"A",{href:!0});var VIt=s(Tee);qzr=r(VIt,"from_pretrained()"),VIt.forEach(t),jzr=r(Dre," class method or the "),Mee=n(Dre,"A",{href:!0});var XIt=s(Mee);Dzr=r(XIt,"from_config()"),XIt.forEach(t),Gzr=r(Dre,` class
method.`),Dre.forEach(t),Ozr=i(mi),l$=n(mi,"P",{});var mze=s(l$);Vzr=r(mze,"This class cannot be instantiated directly using "),XEe=n(mze,"CODE",{});var zIt=s(XEe);Xzr=r(zIt,"__init__()"),zIt.forEach(t),zzr=r(mze," (throws an error)."),mze.forEach(t),Wzr=i(mi),Kt=n(mi,"DIV",{class:!0});var lA=s(Kt);T(i$.$$.fragment,lA),Qzr=i(lA),zEe=n(lA,"P",{});var WIt=s(zEe);Hzr=r(WIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WIt.forEach(t),Uzr=i(lA),gf=n(lA,"P",{});var Gre=s(gf);Jzr=r(Gre,`Note:
Loading a model from its configuration file does `),WEe=n(Gre,"STRONG",{});var QIt=s(WEe);Yzr=r(QIt,"not"),QIt.forEach(t),Kzr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(Gre,"A",{href:!0});var HIt=s(Eee);Zzr=r(HIt,"from_pretrained()"),HIt.forEach(t),eWr=r(Gre," to load the model weights."),Gre.forEach(t),oWr=i(lA),T(b5.$$.fragment,lA),lA.forEach(t),rWr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(d$.$$.fragment,gi),tWr=i(gi),QEe=n(gi,"P",{});var UIt=s(QEe);aWr=r(UIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UIt.forEach(t),nWr=i(gi),An=n(gi,"P",{});var iA=s(An);sWr=r(iA,"The model class to instantiate is selected based on the "),HEe=n(iA,"CODE",{});var JIt=s(HEe);lWr=r(JIt,"model_type"),JIt.forEach(t),iWr=r(iA,` property of the config object (either
passed as an argument or loaded from `),UEe=n(iA,"CODE",{});var YIt=s(UEe);dWr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),cWr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(iA,"CODE",{});var KIt=s(JEe);fWr=r(KIt,"pretrained_model_name_or_path"),KIt.forEach(t),mWr=r(iA,":"),iA.forEach(t),gWr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);v5=n(To,"LI",{});var GDe=s(v5);YEe=n(GDe,"STRONG",{});var ZIt=s(YEe);hWr=r(ZIt,"albert"),ZIt.forEach(t),pWr=r(GDe," \u2014 "),Cee=n(GDe,"A",{href:!0});var eNt=s(Cee);uWr=r(eNt,"FlaxAlbertForTokenClassification"),eNt.forEach(t),_Wr=r(GDe," (ALBERT model)"),GDe.forEach(t),bWr=i(To),F5=n(To,"LI",{});var ODe=s(F5);KEe=n(ODe,"STRONG",{});var oNt=s(KEe);vWr=r(oNt,"bert"),oNt.forEach(t),FWr=r(ODe," \u2014 "),wee=n(ODe,"A",{href:!0});var rNt=s(wee);TWr=r(rNt,"FlaxBertForTokenClassification"),rNt.forEach(t),MWr=r(ODe," (BERT model)"),ODe.forEach(t),EWr=i(To),T5=n(To,"LI",{});var VDe=s(T5);ZEe=n(VDe,"STRONG",{});var tNt=s(ZEe);CWr=r(tNt,"big_bird"),tNt.forEach(t),wWr=r(VDe," \u2014 "),Aee=n(VDe,"A",{href:!0});var aNt=s(Aee);AWr=r(aNt,"FlaxBigBirdForTokenClassification"),aNt.forEach(t),LWr=r(VDe," (BigBird model)"),VDe.forEach(t),yWr=i(To),M5=n(To,"LI",{});var XDe=s(M5);eCe=n(XDe,"STRONG",{});var nNt=s(eCe);xWr=r(nNt,"distilbert"),nNt.forEach(t),$Wr=r(XDe," \u2014 "),Lee=n(XDe,"A",{href:!0});var sNt=s(Lee);kWr=r(sNt,"FlaxDistilBertForTokenClassification"),sNt.forEach(t),SWr=r(XDe," (DistilBERT model)"),XDe.forEach(t),RWr=i(To),E5=n(To,"LI",{});var zDe=s(E5);oCe=n(zDe,"STRONG",{});var lNt=s(oCe);PWr=r(lNt,"electra"),lNt.forEach(t),BWr=r(zDe," \u2014 "),yee=n(zDe,"A",{href:!0});var iNt=s(yee);IWr=r(iNt,"FlaxElectraForTokenClassification"),iNt.forEach(t),NWr=r(zDe," (ELECTRA model)"),zDe.forEach(t),qWr=i(To),C5=n(To,"LI",{});var WDe=s(C5);rCe=n(WDe,"STRONG",{});var dNt=s(rCe);jWr=r(dNt,"roberta"),dNt.forEach(t),DWr=r(WDe," \u2014 "),xee=n(WDe,"A",{href:!0});var cNt=s(xee);GWr=r(cNt,"FlaxRobertaForTokenClassification"),cNt.forEach(t),OWr=r(WDe," (RoBERTa model)"),WDe.forEach(t),VWr=i(To),w5=n(To,"LI",{});var QDe=s(w5);tCe=n(QDe,"STRONG",{});var fNt=s(tCe);XWr=r(fNt,"roformer"),fNt.forEach(t),zWr=r(QDe," \u2014 "),$ee=n(QDe,"A",{href:!0});var mNt=s($ee);WWr=r(mNt,"FlaxRoFormerForTokenClassification"),mNt.forEach(t),QWr=r(QDe," (RoFormer model)"),QDe.forEach(t),HWr=i(To),A5=n(To,"LI",{});var HDe=s(A5);aCe=n(HDe,"STRONG",{});var gNt=s(aCe);UWr=r(gNt,"xlm-roberta"),gNt.forEach(t),JWr=r(HDe," \u2014 "),kee=n(HDe,"A",{href:!0});var hNt=s(kee);YWr=r(hNt,"FlaxXLMRobertaForTokenClassification"),hNt.forEach(t),KWr=r(HDe," (XLM-RoBERTa model)"),HDe.forEach(t),To.forEach(t),ZWr=i(gi),T(L5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),aVe=i(f),hf=n(f,"H2",{class:!0});var gze=s(hf);y5=n(gze,"A",{id:!0,class:!0,href:!0});var pNt=s(y5);nCe=n(pNt,"SPAN",{});var uNt=s(nCe);T(c$.$$.fragment,uNt),uNt.forEach(t),pNt.forEach(t),eQr=i(gze),sCe=n(gze,"SPAN",{});var _Nt=s(sCe);oQr=r(_Nt,"FlaxAutoModelForMultipleChoice"),_Nt.forEach(t),gze.forEach(t),nVe=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(f$.$$.fragment,hi),rQr=i(hi),pf=n(hi,"P",{});var Ore=s(pf);tQr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=n(Ore,"A",{href:!0});var bNt=s(See);aQr=r(bNt,"from_pretrained()"),bNt.forEach(t),nQr=r(Ore," class method or the "),Ree=n(Ore,"A",{href:!0});var vNt=s(Ree);sQr=r(vNt,"from_config()"),vNt.forEach(t),lQr=r(Ore,` class
method.`),Ore.forEach(t),iQr=i(hi),m$=n(hi,"P",{});var hze=s(m$);dQr=r(hze,"This class cannot be instantiated directly using "),lCe=n(hze,"CODE",{});var FNt=s(lCe);cQr=r(FNt,"__init__()"),FNt.forEach(t),fQr=r(hze," (throws an error)."),hze.forEach(t),mQr=i(hi),Zt=n(hi,"DIV",{class:!0});var dA=s(Zt);T(g$.$$.fragment,dA),gQr=i(dA),iCe=n(dA,"P",{});var TNt=s(iCe);hQr=r(TNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TNt.forEach(t),pQr=i(dA),uf=n(dA,"P",{});var Vre=s(uf);uQr=r(Vre,`Note:
Loading a model from its configuration file does `),dCe=n(Vre,"STRONG",{});var MNt=s(dCe);_Qr=r(MNt,"not"),MNt.forEach(t),bQr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Vre,"A",{href:!0});var ENt=s(Pee);vQr=r(ENt,"from_pretrained()"),ENt.forEach(t),FQr=r(Vre," to load the model weights."),Vre.forEach(t),TQr=i(dA),T(x5.$$.fragment,dA),dA.forEach(t),MQr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(h$.$$.fragment,pi),EQr=i(pi),cCe=n(pi,"P",{});var CNt=s(cCe);CQr=r(CNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CNt.forEach(t),wQr=i(pi),Ln=n(pi,"P",{});var cA=s(Ln);AQr=r(cA,"The model class to instantiate is selected based on the "),fCe=n(cA,"CODE",{});var wNt=s(fCe);LQr=r(wNt,"model_type"),wNt.forEach(t),yQr=r(cA,` property of the config object (either
passed as an argument or loaded from `),mCe=n(cA,"CODE",{});var ANt=s(mCe);xQr=r(ANt,"pretrained_model_name_or_path"),ANt.forEach(t),$Qr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(cA,"CODE",{});var LNt=s(gCe);kQr=r(LNt,"pretrained_model_name_or_path"),LNt.forEach(t),SQr=r(cA,":"),cA.forEach(t),RQr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);$5=n(Mo,"LI",{});var UDe=s($5);hCe=n(UDe,"STRONG",{});var yNt=s(hCe);PQr=r(yNt,"albert"),yNt.forEach(t),BQr=r(UDe," \u2014 "),Bee=n(UDe,"A",{href:!0});var xNt=s(Bee);IQr=r(xNt,"FlaxAlbertForMultipleChoice"),xNt.forEach(t),NQr=r(UDe," (ALBERT model)"),UDe.forEach(t),qQr=i(Mo),k5=n(Mo,"LI",{});var JDe=s(k5);pCe=n(JDe,"STRONG",{});var $Nt=s(pCe);jQr=r($Nt,"bert"),$Nt.forEach(t),DQr=r(JDe," \u2014 "),Iee=n(JDe,"A",{href:!0});var kNt=s(Iee);GQr=r(kNt,"FlaxBertForMultipleChoice"),kNt.forEach(t),OQr=r(JDe," (BERT model)"),JDe.forEach(t),VQr=i(Mo),S5=n(Mo,"LI",{});var YDe=s(S5);uCe=n(YDe,"STRONG",{});var SNt=s(uCe);XQr=r(SNt,"big_bird"),SNt.forEach(t),zQr=r(YDe," \u2014 "),Nee=n(YDe,"A",{href:!0});var RNt=s(Nee);WQr=r(RNt,"FlaxBigBirdForMultipleChoice"),RNt.forEach(t),QQr=r(YDe," (BigBird model)"),YDe.forEach(t),HQr=i(Mo),R5=n(Mo,"LI",{});var KDe=s(R5);_Ce=n(KDe,"STRONG",{});var PNt=s(_Ce);UQr=r(PNt,"distilbert"),PNt.forEach(t),JQr=r(KDe," \u2014 "),qee=n(KDe,"A",{href:!0});var BNt=s(qee);YQr=r(BNt,"FlaxDistilBertForMultipleChoice"),BNt.forEach(t),KQr=r(KDe," (DistilBERT model)"),KDe.forEach(t),ZQr=i(Mo),P5=n(Mo,"LI",{});var ZDe=s(P5);bCe=n(ZDe,"STRONG",{});var INt=s(bCe);eHr=r(INt,"electra"),INt.forEach(t),oHr=r(ZDe," \u2014 "),jee=n(ZDe,"A",{href:!0});var NNt=s(jee);rHr=r(NNt,"FlaxElectraForMultipleChoice"),NNt.forEach(t),tHr=r(ZDe," (ELECTRA model)"),ZDe.forEach(t),aHr=i(Mo),B5=n(Mo,"LI",{});var eGe=s(B5);vCe=n(eGe,"STRONG",{});var qNt=s(vCe);nHr=r(qNt,"roberta"),qNt.forEach(t),sHr=r(eGe," \u2014 "),Dee=n(eGe,"A",{href:!0});var jNt=s(Dee);lHr=r(jNt,"FlaxRobertaForMultipleChoice"),jNt.forEach(t),iHr=r(eGe," (RoBERTa model)"),eGe.forEach(t),dHr=i(Mo),I5=n(Mo,"LI",{});var oGe=s(I5);FCe=n(oGe,"STRONG",{});var DNt=s(FCe);cHr=r(DNt,"roformer"),DNt.forEach(t),fHr=r(oGe," \u2014 "),Gee=n(oGe,"A",{href:!0});var GNt=s(Gee);mHr=r(GNt,"FlaxRoFormerForMultipleChoice"),GNt.forEach(t),gHr=r(oGe," (RoFormer model)"),oGe.forEach(t),hHr=i(Mo),N5=n(Mo,"LI",{});var rGe=s(N5);TCe=n(rGe,"STRONG",{});var ONt=s(TCe);pHr=r(ONt,"xlm-roberta"),ONt.forEach(t),uHr=r(rGe," \u2014 "),Oee=n(rGe,"A",{href:!0});var VNt=s(Oee);_Hr=r(VNt,"FlaxXLMRobertaForMultipleChoice"),VNt.forEach(t),bHr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),Mo.forEach(t),vHr=i(pi),T(q5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),sVe=i(f),_f=n(f,"H2",{class:!0});var pze=s(_f);j5=n(pze,"A",{id:!0,class:!0,href:!0});var XNt=s(j5);MCe=n(XNt,"SPAN",{});var zNt=s(MCe);T(p$.$$.fragment,zNt),zNt.forEach(t),XNt.forEach(t),FHr=i(pze),ECe=n(pze,"SPAN",{});var WNt=s(ECe);THr=r(WNt,"FlaxAutoModelForNextSentencePrediction"),WNt.forEach(t),pze.forEach(t),lVe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(u$.$$.fragment,ui),MHr=i(ui),bf=n(ui,"P",{});var Xre=s(bf);EHr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Vee=n(Xre,"A",{href:!0});var QNt=s(Vee);CHr=r(QNt,"from_pretrained()"),QNt.forEach(t),wHr=r(Xre," class method or the "),Xee=n(Xre,"A",{href:!0});var HNt=s(Xee);AHr=r(HNt,"from_config()"),HNt.forEach(t),LHr=r(Xre,` class
method.`),Xre.forEach(t),yHr=i(ui),_$=n(ui,"P",{});var uze=s(_$);xHr=r(uze,"This class cannot be instantiated directly using "),CCe=n(uze,"CODE",{});var UNt=s(CCe);$Hr=r(UNt,"__init__()"),UNt.forEach(t),kHr=r(uze," (throws an error)."),uze.forEach(t),SHr=i(ui),ea=n(ui,"DIV",{class:!0});var fA=s(ea);T(b$.$$.fragment,fA),RHr=i(fA),wCe=n(fA,"P",{});var JNt=s(wCe);PHr=r(JNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JNt.forEach(t),BHr=i(fA),vf=n(fA,"P",{});var zre=s(vf);IHr=r(zre,`Note:
Loading a model from its configuration file does `),ACe=n(zre,"STRONG",{});var YNt=s(ACe);NHr=r(YNt,"not"),YNt.forEach(t),qHr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(zre,"A",{href:!0});var KNt=s(zee);jHr=r(KNt,"from_pretrained()"),KNt.forEach(t),DHr=r(zre," to load the model weights."),zre.forEach(t),GHr=i(fA),T(D5.$$.fragment,fA),fA.forEach(t),OHr=i(ui),Jr=n(ui,"DIV",{class:!0});var _i=s(Jr);T(v$.$$.fragment,_i),VHr=i(_i),LCe=n(_i,"P",{});var ZNt=s(LCe);XHr=r(ZNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZNt.forEach(t),zHr=i(_i),yn=n(_i,"P",{});var mA=s(yn);WHr=r(mA,"The model class to instantiate is selected based on the "),yCe=n(mA,"CODE",{});var eqt=s(yCe);QHr=r(eqt,"model_type"),eqt.forEach(t),HHr=r(mA,` property of the config object (either
passed as an argument or loaded from `),xCe=n(mA,"CODE",{});var oqt=s(xCe);UHr=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),JHr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(mA,"CODE",{});var rqt=s($Ce);YHr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),KHr=r(mA,":"),mA.forEach(t),ZHr=i(_i),kCe=n(_i,"UL",{});var tqt=s(kCe);G5=n(tqt,"LI",{});var tGe=s(G5);SCe=n(tGe,"STRONG",{});var aqt=s(SCe);eUr=r(aqt,"bert"),aqt.forEach(t),oUr=r(tGe," \u2014 "),Wee=n(tGe,"A",{href:!0});var nqt=s(Wee);rUr=r(nqt,"FlaxBertForNextSentencePrediction"),nqt.forEach(t),tUr=r(tGe," (BERT model)"),tGe.forEach(t),tqt.forEach(t),aUr=i(_i),T(O5.$$.fragment,_i),_i.forEach(t),ui.forEach(t),iVe=i(f),Ff=n(f,"H2",{class:!0});var _ze=s(Ff);V5=n(_ze,"A",{id:!0,class:!0,href:!0});var sqt=s(V5);RCe=n(sqt,"SPAN",{});var lqt=s(RCe);T(F$.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),nUr=i(_ze),PCe=n(_ze,"SPAN",{});var iqt=s(PCe);sUr=r(iqt,"FlaxAutoModelForImageClassification"),iqt.forEach(t),_ze.forEach(t),dVe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(T$.$$.fragment,bi),lUr=i(bi),Tf=n(bi,"P",{});var Wre=s(Tf);iUr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qee=n(Wre,"A",{href:!0});var dqt=s(Qee);dUr=r(dqt,"from_pretrained()"),dqt.forEach(t),cUr=r(Wre," class method or the "),Hee=n(Wre,"A",{href:!0});var cqt=s(Hee);fUr=r(cqt,"from_config()"),cqt.forEach(t),mUr=r(Wre,` class
method.`),Wre.forEach(t),gUr=i(bi),M$=n(bi,"P",{});var bze=s(M$);hUr=r(bze,"This class cannot be instantiated directly using "),BCe=n(bze,"CODE",{});var fqt=s(BCe);pUr=r(fqt,"__init__()"),fqt.forEach(t),uUr=r(bze," (throws an error)."),bze.forEach(t),_Ur=i(bi),oa=n(bi,"DIV",{class:!0});var gA=s(oa);T(E$.$$.fragment,gA),bUr=i(gA),ICe=n(gA,"P",{});var mqt=s(ICe);vUr=r(mqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mqt.forEach(t),FUr=i(gA),Mf=n(gA,"P",{});var Qre=s(Mf);TUr=r(Qre,`Note:
Loading a model from its configuration file does `),NCe=n(Qre,"STRONG",{});var gqt=s(NCe);MUr=r(gqt,"not"),gqt.forEach(t),EUr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(Qre,"A",{href:!0});var hqt=s(Uee);CUr=r(hqt,"from_pretrained()"),hqt.forEach(t),wUr=r(Qre," to load the model weights."),Qre.forEach(t),AUr=i(gA),T(X5.$$.fragment,gA),gA.forEach(t),LUr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(C$.$$.fragment,vi),yUr=i(vi),qCe=n(vi,"P",{});var pqt=s(qCe);xUr=r(pqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pqt.forEach(t),$Ur=i(vi),xn=n(vi,"P",{});var hA=s(xn);kUr=r(hA,"The model class to instantiate is selected based on the "),jCe=n(hA,"CODE",{});var uqt=s(jCe);SUr=r(uqt,"model_type"),uqt.forEach(t),RUr=r(hA,` property of the config object (either
passed as an argument or loaded from `),DCe=n(hA,"CODE",{});var _qt=s(DCe);PUr=r(_qt,"pretrained_model_name_or_path"),_qt.forEach(t),BUr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=n(hA,"CODE",{});var bqt=s(GCe);IUr=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),NUr=r(hA,":"),hA.forEach(t),qUr=i(vi),w$=n(vi,"UL",{});var vze=s(w$);z5=n(vze,"LI",{});var aGe=s(z5);OCe=n(aGe,"STRONG",{});var vqt=s(OCe);jUr=r(vqt,"beit"),vqt.forEach(t),DUr=r(aGe," \u2014 "),Jee=n(aGe,"A",{href:!0});var Fqt=s(Jee);GUr=r(Fqt,"FlaxBeitForImageClassification"),Fqt.forEach(t),OUr=r(aGe," (BEiT model)"),aGe.forEach(t),VUr=i(vze),W5=n(vze,"LI",{});var nGe=s(W5);VCe=n(nGe,"STRONG",{});var Tqt=s(VCe);XUr=r(Tqt,"vit"),Tqt.forEach(t),zUr=r(nGe," \u2014 "),Yee=n(nGe,"A",{href:!0});var Mqt=s(Yee);WUr=r(Mqt,"FlaxViTForImageClassification"),Mqt.forEach(t),QUr=r(nGe," (ViT model)"),nGe.forEach(t),vze.forEach(t),HUr=i(vi),T(Q5.$$.fragment,vi),vi.forEach(t),bi.forEach(t),cVe=i(f),Ef=n(f,"H2",{class:!0});var Fze=s(Ef);H5=n(Fze,"A",{id:!0,class:!0,href:!0});var Eqt=s(H5);XCe=n(Eqt,"SPAN",{});var Cqt=s(XCe);T(A$.$$.fragment,Cqt),Cqt.forEach(t),Eqt.forEach(t),UUr=i(Fze),zCe=n(Fze,"SPAN",{});var wqt=s(zCe);JUr=r(wqt,"FlaxAutoModelForVision2Seq"),wqt.forEach(t),Fze.forEach(t),fVe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(L$.$$.fragment,Fi),YUr=i(Fi),Cf=n(Fi,"P",{});var Hre=s(Cf);KUr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Kee=n(Hre,"A",{href:!0});var Aqt=s(Kee);ZUr=r(Aqt,"from_pretrained()"),Aqt.forEach(t),eJr=r(Hre," class method or the "),Zee=n(Hre,"A",{href:!0});var Lqt=s(Zee);oJr=r(Lqt,"from_config()"),Lqt.forEach(t),rJr=r(Hre,` class
method.`),Hre.forEach(t),tJr=i(Fi),y$=n(Fi,"P",{});var Tze=s(y$);aJr=r(Tze,"This class cannot be instantiated directly using "),WCe=n(Tze,"CODE",{});var yqt=s(WCe);nJr=r(yqt,"__init__()"),yqt.forEach(t),sJr=r(Tze," (throws an error)."),Tze.forEach(t),lJr=i(Fi),ra=n(Fi,"DIV",{class:!0});var pA=s(ra);T(x$.$$.fragment,pA),iJr=i(pA),QCe=n(pA,"P",{});var xqt=s(QCe);dJr=r(xqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xqt.forEach(t),cJr=i(pA),wf=n(pA,"P",{});var Ure=s(wf);fJr=r(Ure,`Note:
Loading a model from its configuration file does `),HCe=n(Ure,"STRONG",{});var $qt=s(HCe);mJr=r($qt,"not"),$qt.forEach(t),gJr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(Ure,"A",{href:!0});var kqt=s(eoe);hJr=r(kqt,"from_pretrained()"),kqt.forEach(t),pJr=r(Ure," to load the model weights."),Ure.forEach(t),uJr=i(pA),T(U5.$$.fragment,pA),pA.forEach(t),_Jr=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T($$.$$.fragment,Ti),bJr=i(Ti),UCe=n(Ti,"P",{});var Sqt=s(UCe);vJr=r(Sqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sqt.forEach(t),FJr=i(Ti),$n=n(Ti,"P",{});var uA=s($n);TJr=r(uA,"The model class to instantiate is selected based on the "),JCe=n(uA,"CODE",{});var Rqt=s(JCe);MJr=r(Rqt,"model_type"),Rqt.forEach(t),EJr=r(uA,` property of the config object (either
passed as an argument or loaded from `),YCe=n(uA,"CODE",{});var Pqt=s(YCe);CJr=r(Pqt,"pretrained_model_name_or_path"),Pqt.forEach(t),wJr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(uA,"CODE",{});var Bqt=s(KCe);AJr=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),LJr=r(uA,":"),uA.forEach(t),yJr=i(Ti),ZCe=n(Ti,"UL",{});var Iqt=s(ZCe);J5=n(Iqt,"LI",{});var sGe=s(J5);e5e=n(sGe,"STRONG",{});var Nqt=s(e5e);xJr=r(Nqt,"vision-encoder-decoder"),Nqt.forEach(t),$Jr=r(sGe," \u2014 "),ooe=n(sGe,"A",{href:!0});var qqt=s(ooe);kJr=r(qqt,"FlaxVisionEncoderDecoderModel"),qqt.forEach(t),SJr=r(sGe," (Vision Encoder decoder model)"),sGe.forEach(t),Iqt.forEach(t),RJr=i(Ti),T(Y5.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(XDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(eS,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(oS,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig"),c(rS,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig"),c(tS,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig"),c(aS,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig"),c(nS,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(sS,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig"),c(lS,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(iS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(dS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(cS,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig"),c(fS,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig"),c(mS,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig"),c(gS,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig"),c(hS,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig"),c(pS,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig"),c(uS,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig"),c(_S,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig"),c(bS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(vS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(FS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(TS,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig"),c(MS,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ES,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(CS,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig"),c(wS,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig"),c(AS,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig"),c(LS,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig"),c(yS,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig"),c(xS,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig"),c($S,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(kS,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig"),c(SS,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig"),c(RS,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig"),c(PS,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig"),c(BS,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig"),c(IS,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig"),c(NS,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config"),c(qS,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jS,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(DS,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig"),c(GS,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig"),c(OS,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig"),c(VS,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(XS,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zS,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(WS,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(QS,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig"),c(HS,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig"),c(US,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig"),c(JS,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config"),c(YS,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig"),c(KS,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig"),c(ZS,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config"),c(eR,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig"),c(oR,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rR,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig"),c(tR,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig"),c(aR,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(nR,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(sR,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig"),c(lR,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config"),c(iR,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(dR,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(cR,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig"),c(fR,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig"),c(mR,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig"),c(gR,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig"),c(hR,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pR,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uR,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_R,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagConfig"),c(bR,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmConfig"),c(vR,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig"),c(FR,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig"),c(TR,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig"),c(MR,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig"),c(ER,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig"),c(CR,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig"),c(wR,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig"),c(AR,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig"),c(LR,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig"),c(yR,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig"),c(xR,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c($R,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(kR,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(SR,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig"),c(RR,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(PR,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig"),c(BR,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config"),c(IR,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig"),c(NR,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(qR,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(jR,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig"),c(DR,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(GR,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(OR,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig"),c(VR,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig"),c(XR,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(zR,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(WR,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(QR,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig"),c(HR,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(UR,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(JR,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(YR,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig"),c(KR,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig"),c(ZR,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig"),c(eP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tP,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig"),c(aP,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig"),c(nP,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(sP,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(iP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizer"),c(cP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizerFast"),c(fP,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mP,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gP,"href","/docs/transformers/pr_17806/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(pP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_P,"href","/docs/transformers/pr_17806/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bP,"href","/docs/transformers/pr_17806/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(FP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AP,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(LP,"href","/docs/transformers/pr_17806/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($P,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineTokenizer"),c(kP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizer"),c(SP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RP,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(PP,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizer"),c(IP,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NP,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qP,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jP,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DP,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GP,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VP,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XP,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zP,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QP,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HP,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizer"),c(UP,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JP,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YP,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizer"),c(KP,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(lB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dB,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cB,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_B,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizer"),c(EB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizerFast"),c(CB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(LB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeTokenizer"),c(xB,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($B,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SB,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianTokenizer"),c(RB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizer"),c(PB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NB,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17806/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DB,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GB,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VB,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(WB,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HB,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UB,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KB,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eI,"href","/docs/transformers/pr_17806/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oI,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rI,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(aI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagTokenizer"),c(sI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizer"),c(lI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iI,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dI,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uI,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_I,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MI,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EI,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(wI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(AI,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasTokenizer"),c(LI,"href","/docs/transformers/pr_17806/en/model_doc/tapex#transformers.TapexTokenizer"),c(yI,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c($I,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(SI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(II,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NI,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qI,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMTokenizer"),c(jI,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DI,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GI,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(OI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XI,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zI,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(QI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(HI,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UI,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cN,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AN,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(LN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yN,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPProcessor"),c(xN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($N,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(kN,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(SN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(BN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IN,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRProcessor"),c(NN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltProcessor"),c(DN,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(GN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ON,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(XN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QN,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel"),c(HN,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel"),c(UN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel"),c(JN,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(YN,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(KN,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel"),c(ZN,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(eq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rq,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel"),c(tq,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel"),c(aq,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel"),c(nq,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel"),c(sq,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel"),c(lq,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel"),c(iq,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel"),c(dq,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel"),c(cq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(fq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(mq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(gq,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel"),c(hq,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(pq,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(uq,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel"),c(_q,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel"),c(bq,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel"),c(vq,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Fq,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel"),c(Tq,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel"),c(Mq,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel"),c(Eq,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel"),c(Cq,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel"),c(wq,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel"),c(Aq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel"),c(Lq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel"),c(yq,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel"),c(xq,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model"),c($q,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(kq,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Sq,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel"),c(Rq,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel"),c(Pq,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel"),c(Bq,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Iq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Nq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qq,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(jq,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel"),c(Dq,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel"),c(Gq,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel"),c(Oq,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model"),c(Vq,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel"),c(Xq,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel"),c(zq,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model"),c(Wq,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel"),c(Qq,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Hq,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel"),c(Uq,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel"),c(Jq,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Yq,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Kq,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel"),c(Zq,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model"),c(ej,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oj,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rj,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel"),c(tj,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel"),c(aj,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel"),c(nj,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel"),c(sj,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lj,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(ij,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dj,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel"),c(cj,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel"),c(fj,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel"),c(mj,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel"),c(gj,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(hj,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel"),c(pj,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel"),c(uj,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel"),c(_j,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel"),c(bj,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel"),c(vj,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Fj,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel"),c(Tj,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Mj,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel"),c(Ej,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model"),c(Cj,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel"),c(wj,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Aj,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Lj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(xj,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel"),c($j,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel"),c(kj,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Sj,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Rj,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel"),c(Pj,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Bj,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Ij,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Nj,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel"),c(qj,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel"),c(jj,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel"),c(Dj,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Gj,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Oj,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Vj,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel"),c(Xj,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel"),c(zj,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x_,"id","transformers.AutoModelForPreTraining"),c(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x_,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(Wj,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qj,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hj,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uj,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Jj,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining"),c(Kj,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Zj,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(eD,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oD,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rD,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tD,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aD,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nD,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lD,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iD,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining"),c(dD,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining"),c(cD,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mD,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gD,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pD,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uD,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(_D,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bD,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vD,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TD,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(MD,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ED,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(CD,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LD,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yD,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xD,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c($D,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kD,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(SD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(RD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(PD,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ND,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForCausalLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(qD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GD,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM"),c(OD,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel"),c(VD,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(XD,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zD,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(WD,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(QD,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(HD,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(UD,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(JD,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(YD,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(KD,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ZD,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(eG,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(oG,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(rG,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(tG,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM"),c(aG,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM"),c(nG,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(sG,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(lG,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM"),c(iG,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(dG,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(cG,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(fG,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(mG,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(gG,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(hG,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(pG,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(uG,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(_G,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(bG,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(vG,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(FG,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(MG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(EG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(CG,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c2,"id","transformers.AutoModelForMaskedLM"),c(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c2,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(wG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yG,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(xG,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(SG,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(RG,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(BG,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(IG,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(NG,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(jG,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(DG,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(GG,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(OG,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(XG,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zG,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM"),c(WG,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QG,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(HG,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(UG,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(JG,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(YG,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(KG,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rO,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tO,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nO,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iO,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J2,"id","transformers.AutoModelForSeq2SeqLM"),c(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_O,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel"),c(MO,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForSequenceClassification"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(xO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($O,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SO,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForMultipleChoice"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(AV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c($V,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForNextSentencePrediction"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(aX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(iX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(dX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(cX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(fX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.AutoModelForTokenClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(mX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(uX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(bX,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(vX,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(FX,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification"),c(TX,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(MX,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(EX,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(CX,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(wX,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(AX,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(LX,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(yX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(xX,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c($X,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(kX,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(SX,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(RX,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(PX,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(BX,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(IX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(jX,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(DX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(GX,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(VX,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(XX,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(WX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(QX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(HX,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(UX,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.AutoModelForQuestionAnswering"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(gz,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Bz,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(qz,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForTableQuestionAnswering"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(jz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForImageClassification"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification"),c(Qz,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Hz,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Uz,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Jz,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Yz,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Kz,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Zz,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification"),c(eW,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(oW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(rW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(tW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(aW,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(nW,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(sW,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(lW,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(iW,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification"),c(dW,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification"),c(cW,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForVision2Seq"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(pW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForAudioClassification"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c($W,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForAudioFrameClassification"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(kW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(BW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(IW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(NW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(qW,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.AutoModelForCTC"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(jW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(VW,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC"),c(XW,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC"),c(zW,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC"),c(WW,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC"),c(QW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HW,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(UW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(JW,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(YW,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(KW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oQ,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(rQ,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y6,"id","transformers.AutoModelForAudioXVector"),c(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y6,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(lQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(iQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(dQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(cQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForMaskedImageModeling"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(pQ,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(uQ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForObjectDetection"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection"),c(TQ,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageSegmentation"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForSemanticSegmentation"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($Q,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kQ,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(SQ,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForInstanceSegmentation"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModel"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel"),c(GQ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel"),c(OQ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel"),c(VQ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(XQ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zQ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel"),c(WQ,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel"),c(QQ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel"),c(HQ,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel"),c(UQ,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel"),c(JQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(YQ,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel"),c(KQ,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ZQ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel"),c(eH,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oH,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(rH,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel"),c(tH,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(aH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel"),c(nH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(sH,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lH,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel"),c(iH,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel"),c(dH,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cH,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel"),c(fH,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel"),c(mH,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gH,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel"),c(hH,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel"),c(pH,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uH,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_H,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model"),c(bH,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vH,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel"),c(FH,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel"),c(TH,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel"),c(MH,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel"),c(EH,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel"),c(CH,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(wH,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel"),c(AH,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model"),c(LH,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel"),c(yH,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(xH,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel"),c($H,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(kH,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(SH,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel"),c(RH,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(PH,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.TFAutoModelForPreTraining"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(BH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(jH,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining"),c(GH,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OH,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VH,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XH,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(zH,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(QH,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HH,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UH,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(JH,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(YH,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KH,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eU,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(oU,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tU,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(aU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nU,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.TFAutoModelForCausalLM"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(mU,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gU,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hU,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(pU,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uU,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(_U,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(bU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(vU,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(FU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(TU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.TFAutoModelForImageClassification"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LU,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(yU,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(xU,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c($U,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(kU,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y8,"id","transformers.TFAutoModelForMaskedLM"),c(y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y8,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qU,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(jU,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(DU,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(GU,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(VU,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(XU,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(zU,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(WU,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(QU,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(UU,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(YU,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(KU,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y8,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(iJ,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel"),c(cJ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSequenceClassification"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c($J,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForMultipleChoice"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(gY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(hY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTokenClassification"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AY,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xY,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(kY,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SY,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(RY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(BY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(jY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(DY,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForQuestionAnswering"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ZY,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(iK,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForVision2Seq"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(hK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.FlaxAutoModel"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel"),c(MK,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel"),c(EK,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel"),c(CK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel"),c(wK,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(AK,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(LK,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yK,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel"),c(xK,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c($K,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel"),c(kK,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(SK,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(RK,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(PK,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(BK,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel"),c(IK,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel"),c(NK,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model"),c(qK,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel"),c(jK,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(DK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(GK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(OK,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model"),c(VK,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(XK,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel"),c(zK,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(WK,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(QK,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.FlaxAutoModelForCausalLM"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(KK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ZK,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(eZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(oZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tZ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aZ,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(nZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(sZ,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForPreTraining"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(lZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_Z,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(bZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(FZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(MZ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForMaskedLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(EZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c($Z,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(RZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BZ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(GZ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(VZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(see,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(iee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(vee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Fee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForTokenClassification"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Tee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Aee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(xee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c($ee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(kee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(See,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(_f,"class","relative group"),c(Vee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForImageClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Yee,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForVision2Seq"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(Kee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,_),b(f,nt,_),e(nt,Ei),e(nt,Ci),e(Ci,_A),e(nt,$f),b(f,Oe,_),b(f,We,_),e(We,wi),e(We,Sn),e(Sn,bA),e(We,Rn),e(We,Pn),e(Pn,vA),e(We,Ai),e(We,Bn),e(Bn,FA),e(We,Li),b(f,kf,_),M(xa,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Hk),e(Ae,yi),e(yi,Uk),e(Ae,Jk),b(f,Co,_),b(f,$a,_),e($a,Yk),e($a,Sf),e(Sf,Kk),e($a,Mze),b(f,lGe,_),b(f,xi,_),e(xi,Rf),e(Rf,Jre),M(TA,Jre,null),e(xi,Eze),e(xi,Yre),e(Yre,Cze),b(f,iGe,_),b(f,In,_),e(In,wze),e(In,Kre),e(Kre,Aze),e(In,Lze),e(In,Zre),e(Zre,yze),e(In,xze),b(f,dGe,_),M(MA,f,_),b(f,cGe,_),b(f,Zk,_),e(Zk,$ze),b(f,fGe,_),M(Pf,f,_),b(f,mGe,_),b(f,$i,_),e($i,Bf),e(Bf,ete),M(EA,ete,null),e($i,kze),e($i,ote),e(ote,Sze),b(f,gGe,_),b(f,wo,_),M(CA,wo,null),e(wo,Rze),e(wo,wA),e(wA,Pze),e(wA,eS),e(eS,Bze),e(wA,Ize),e(wo,Nze),e(wo,AA),e(AA,qze),e(AA,rte),e(rte,jze),e(AA,Dze),e(wo,Gze),e(wo,wr),M(LA,wr,null),e(wr,Oze),e(wr,tte),e(tte,Vze),e(wr,Xze),e(wr,ki),e(ki,zze),e(ki,ate),e(ate,Wze),e(ki,Qze),e(ki,nte),e(nte,Hze),e(ki,Uze),e(wr,Jze),e(wr,A),e(A,If),e(If,ste),e(ste,Yze),e(If,Kze),e(If,oS),e(oS,Zze),e(If,eWe),e(A,oWe),e(A,Nf),e(Nf,lte),e(lte,rWe),e(Nf,tWe),e(Nf,rS),e(rS,aWe),e(Nf,nWe),e(A,sWe),e(A,qf),e(qf,ite),e(ite,lWe),e(qf,iWe),e(qf,tS),e(tS,dWe),e(qf,cWe),e(A,fWe),e(A,jf),e(jf,dte),e(dte,mWe),e(jf,gWe),e(jf,aS),e(aS,hWe),e(jf,pWe),e(A,uWe),e(A,Df),e(Df,cte),e(cte,_We),e(Df,bWe),e(Df,nS),e(nS,vWe),e(Df,FWe),e(A,TWe),e(A,Gf),e(Gf,fte),e(fte,MWe),e(Gf,EWe),e(Gf,sS),e(sS,CWe),e(Gf,wWe),e(A,AWe),e(A,Of),e(Of,mte),e(mte,LWe),e(Of,yWe),e(Of,lS),e(lS,xWe),e(Of,$We),e(A,kWe),e(A,Vf),e(Vf,gte),e(gte,SWe),e(Vf,RWe),e(Vf,iS),e(iS,PWe),e(Vf,BWe),e(A,IWe),e(A,Xf),e(Xf,hte),e(hte,NWe),e(Xf,qWe),e(Xf,dS),e(dS,jWe),e(Xf,DWe),e(A,GWe),e(A,zf),e(zf,pte),e(pte,OWe),e(zf,VWe),e(zf,cS),e(cS,XWe),e(zf,zWe),e(A,WWe),e(A,Wf),e(Wf,ute),e(ute,QWe),e(Wf,HWe),e(Wf,fS),e(fS,UWe),e(Wf,JWe),e(A,YWe),e(A,Qf),e(Qf,_te),e(_te,KWe),e(Qf,ZWe),e(Qf,mS),e(mS,eQe),e(Qf,oQe),e(A,rQe),e(A,Hf),e(Hf,bte),e(bte,tQe),e(Hf,aQe),e(Hf,gS),e(gS,nQe),e(Hf,sQe),e(A,lQe),e(A,Uf),e(Uf,vte),e(vte,iQe),e(Uf,dQe),e(Uf,hS),e(hS,cQe),e(Uf,fQe),e(A,mQe),e(A,Jf),e(Jf,Fte),e(Fte,gQe),e(Jf,hQe),e(Jf,pS),e(pS,pQe),e(Jf,uQe),e(A,_Qe),e(A,Yf),e(Yf,Tte),e(Tte,bQe),e(Yf,vQe),e(Yf,uS),e(uS,FQe),e(Yf,TQe),e(A,MQe),e(A,Kf),e(Kf,Mte),e(Mte,EQe),e(Kf,CQe),e(Kf,_S),e(_S,wQe),e(Kf,AQe),e(A,LQe),e(A,Zf),e(Zf,Ete),e(Ete,yQe),e(Zf,xQe),e(Zf,bS),e(bS,$Qe),e(Zf,kQe),e(A,SQe),e(A,em),e(em,Cte),e(Cte,RQe),e(em,PQe),e(em,vS),e(vS,BQe),e(em,IQe),e(A,NQe),e(A,om),e(om,wte),e(wte,qQe),e(om,jQe),e(om,FS),e(FS,DQe),e(om,GQe),e(A,OQe),e(A,rm),e(rm,Ate),e(Ate,VQe),e(rm,XQe),e(rm,TS),e(TS,zQe),e(rm,WQe),e(A,QQe),e(A,tm),e(tm,Lte),e(Lte,HQe),e(tm,UQe),e(tm,MS),e(MS,JQe),e(tm,YQe),e(A,KQe),e(A,am),e(am,yte),e(yte,ZQe),e(am,eHe),e(am,ES),e(ES,oHe),e(am,rHe),e(A,tHe),e(A,nm),e(nm,xte),e(xte,aHe),e(nm,nHe),e(nm,CS),e(CS,sHe),e(nm,lHe),e(A,iHe),e(A,sm),e(sm,$te),e($te,dHe),e(sm,cHe),e(sm,wS),e(wS,fHe),e(sm,mHe),e(A,gHe),e(A,lm),e(lm,kte),e(kte,hHe),e(lm,pHe),e(lm,AS),e(AS,uHe),e(lm,_He),e(A,bHe),e(A,im),e(im,Ste),e(Ste,vHe),e(im,FHe),e(im,LS),e(LS,THe),e(im,MHe),e(A,EHe),e(A,dm),e(dm,Rte),e(Rte,CHe),e(dm,wHe),e(dm,yS),e(yS,AHe),e(dm,LHe),e(A,yHe),e(A,cm),e(cm,Pte),e(Pte,xHe),e(cm,$He),e(cm,xS),e(xS,kHe),e(cm,SHe),e(A,RHe),e(A,fm),e(fm,Bte),e(Bte,PHe),e(fm,BHe),e(fm,$S),e($S,IHe),e(fm,NHe),e(A,qHe),e(A,mm),e(mm,Ite),e(Ite,jHe),e(mm,DHe),e(mm,kS),e(kS,GHe),e(mm,OHe),e(A,VHe),e(A,gm),e(gm,Nte),e(Nte,XHe),e(gm,zHe),e(gm,SS),e(SS,WHe),e(gm,QHe),e(A,HHe),e(A,hm),e(hm,qte),e(qte,UHe),e(hm,JHe),e(hm,RS),e(RS,YHe),e(hm,KHe),e(A,ZHe),e(A,pm),e(pm,jte),e(jte,eUe),e(pm,oUe),e(pm,PS),e(PS,rUe),e(pm,tUe),e(A,aUe),e(A,um),e(um,Dte),e(Dte,nUe),e(um,sUe),e(um,BS),e(BS,lUe),e(um,iUe),e(A,dUe),e(A,_m),e(_m,Gte),e(Gte,cUe),e(_m,fUe),e(_m,IS),e(IS,mUe),e(_m,gUe),e(A,hUe),e(A,bm),e(bm,Ote),e(Ote,pUe),e(bm,uUe),e(bm,NS),e(NS,_Ue),e(bm,bUe),e(A,vUe),e(A,vm),e(vm,Vte),e(Vte,FUe),e(vm,TUe),e(vm,qS),e(qS,MUe),e(vm,EUe),e(A,CUe),e(A,Fm),e(Fm,Xte),e(Xte,wUe),e(Fm,AUe),e(Fm,jS),e(jS,LUe),e(Fm,yUe),e(A,xUe),e(A,Tm),e(Tm,zte),e(zte,$Ue),e(Tm,kUe),e(Tm,DS),e(DS,SUe),e(Tm,RUe),e(A,PUe),e(A,Mm),e(Mm,Wte),e(Wte,BUe),e(Mm,IUe),e(Mm,GS),e(GS,NUe),e(Mm,qUe),e(A,jUe),e(A,Em),e(Em,Qte),e(Qte,DUe),e(Em,GUe),e(Em,OS),e(OS,OUe),e(Em,VUe),e(A,XUe),e(A,Cm),e(Cm,Hte),e(Hte,zUe),e(Cm,WUe),e(Cm,VS),e(VS,QUe),e(Cm,HUe),e(A,UUe),e(A,wm),e(wm,Ute),e(Ute,JUe),e(wm,YUe),e(wm,XS),e(XS,KUe),e(wm,ZUe),e(A,eJe),e(A,Am),e(Am,Jte),e(Jte,oJe),e(Am,rJe),e(Am,zS),e(zS,tJe),e(Am,aJe),e(A,nJe),e(A,Lm),e(Lm,Yte),e(Yte,sJe),e(Lm,lJe),e(Lm,WS),e(WS,iJe),e(Lm,dJe),e(A,cJe),e(A,ym),e(ym,Kte),e(Kte,fJe),e(ym,mJe),e(ym,QS),e(QS,gJe),e(ym,hJe),e(A,pJe),e(A,xm),e(xm,Zte),e(Zte,uJe),e(xm,_Je),e(xm,HS),e(HS,bJe),e(xm,vJe),e(A,FJe),e(A,$m),e($m,eae),e(eae,TJe),e($m,MJe),e($m,US),e(US,EJe),e($m,CJe),e(A,wJe),e(A,km),e(km,oae),e(oae,AJe),e(km,LJe),e(km,JS),e(JS,yJe),e(km,xJe),e(A,$Je),e(A,Sm),e(Sm,rae),e(rae,kJe),e(Sm,SJe),e(Sm,YS),e(YS,RJe),e(Sm,PJe),e(A,BJe),e(A,Rm),e(Rm,tae),e(tae,IJe),e(Rm,NJe),e(Rm,KS),e(KS,qJe),e(Rm,jJe),e(A,DJe),e(A,Pm),e(Pm,aae),e(aae,GJe),e(Pm,OJe),e(Pm,ZS),e(ZS,VJe),e(Pm,XJe),e(A,zJe),e(A,Bm),e(Bm,nae),e(nae,WJe),e(Bm,QJe),e(Bm,eR),e(eR,HJe),e(Bm,UJe),e(A,JJe),e(A,Im),e(Im,sae),e(sae,YJe),e(Im,KJe),e(Im,oR),e(oR,ZJe),e(Im,eYe),e(A,oYe),e(A,Nm),e(Nm,lae),e(lae,rYe),e(Nm,tYe),e(Nm,rR),e(rR,aYe),e(Nm,nYe),e(A,sYe),e(A,qm),e(qm,iae),e(iae,lYe),e(qm,iYe),e(qm,tR),e(tR,dYe),e(qm,cYe),e(A,fYe),e(A,jm),e(jm,dae),e(dae,mYe),e(jm,gYe),e(jm,aR),e(aR,hYe),e(jm,pYe),e(A,uYe),e(A,Dm),e(Dm,cae),e(cae,_Ye),e(Dm,bYe),e(Dm,nR),e(nR,vYe),e(Dm,FYe),e(A,TYe),e(A,Gm),e(Gm,fae),e(fae,MYe),e(Gm,EYe),e(Gm,sR),e(sR,CYe),e(Gm,wYe),e(A,AYe),e(A,Om),e(Om,mae),e(mae,LYe),e(Om,yYe),e(Om,lR),e(lR,xYe),e(Om,$Ye),e(A,kYe),e(A,Vm),e(Vm,gae),e(gae,SYe),e(Vm,RYe),e(Vm,iR),e(iR,PYe),e(Vm,BYe),e(A,IYe),e(A,Xm),e(Xm,hae),e(hae,NYe),e(Xm,qYe),e(Xm,dR),e(dR,jYe),e(Xm,DYe),e(A,GYe),e(A,zm),e(zm,pae),e(pae,OYe),e(zm,VYe),e(zm,cR),e(cR,XYe),e(zm,zYe),e(A,WYe),e(A,Wm),e(Wm,uae),e(uae,QYe),e(Wm,HYe),e(Wm,fR),e(fR,UYe),e(Wm,JYe),e(A,YYe),e(A,Qm),e(Qm,_ae),e(_ae,KYe),e(Qm,ZYe),e(Qm,mR),e(mR,eKe),e(Qm,oKe),e(A,rKe),e(A,Hm),e(Hm,bae),e(bae,tKe),e(Hm,aKe),e(Hm,gR),e(gR,nKe),e(Hm,sKe),e(A,lKe),e(A,Um),e(Um,vae),e(vae,iKe),e(Um,dKe),e(Um,hR),e(hR,cKe),e(Um,fKe),e(A,mKe),e(A,Jm),e(Jm,Fae),e(Fae,gKe),e(Jm,hKe),e(Jm,pR),e(pR,pKe),e(Jm,uKe),e(A,_Ke),e(A,Ym),e(Ym,Tae),e(Tae,bKe),e(Ym,vKe),e(Ym,uR),e(uR,FKe),e(Ym,TKe),e(A,MKe),e(A,Km),e(Km,Mae),e(Mae,EKe),e(Km,CKe),e(Km,_R),e(_R,wKe),e(Km,AKe),e(A,LKe),e(A,Zm),e(Zm,Eae),e(Eae,yKe),e(Zm,xKe),e(Zm,bR),e(bR,$Ke),e(Zm,kKe),e(A,SKe),e(A,eg),e(eg,Cae),e(Cae,RKe),e(eg,PKe),e(eg,vR),e(vR,BKe),e(eg,IKe),e(A,NKe),e(A,og),e(og,wae),e(wae,qKe),e(og,jKe),e(og,FR),e(FR,DKe),e(og,GKe),e(A,OKe),e(A,rg),e(rg,Aae),e(Aae,VKe),e(rg,XKe),e(rg,TR),e(TR,zKe),e(rg,WKe),e(A,QKe),e(A,tg),e(tg,Lae),e(Lae,HKe),e(tg,UKe),e(tg,MR),e(MR,JKe),e(tg,YKe),e(A,KKe),e(A,ag),e(ag,yae),e(yae,ZKe),e(ag,eZe),e(ag,ER),e(ER,oZe),e(ag,rZe),e(A,tZe),e(A,ng),e(ng,xae),e(xae,aZe),e(ng,nZe),e(ng,CR),e(CR,sZe),e(ng,lZe),e(A,iZe),e(A,sg),e(sg,$ae),e($ae,dZe),e(sg,cZe),e(sg,wR),e(wR,fZe),e(sg,mZe),e(A,gZe),e(A,lg),e(lg,kae),e(kae,hZe),e(lg,pZe),e(lg,AR),e(AR,uZe),e(lg,_Ze),e(A,bZe),e(A,ig),e(ig,Sae),e(Sae,vZe),e(ig,FZe),e(ig,LR),e(LR,TZe),e(ig,MZe),e(A,EZe),e(A,dg),e(dg,Rae),e(Rae,CZe),e(dg,wZe),e(dg,yR),e(yR,AZe),e(dg,LZe),e(A,yZe),e(A,cg),e(cg,Pae),e(Pae,xZe),e(cg,$Ze),e(cg,xR),e(xR,kZe),e(cg,SZe),e(A,RZe),e(A,fg),e(fg,Bae),e(Bae,PZe),e(fg,BZe),e(fg,$R),e($R,IZe),e(fg,NZe),e(A,qZe),e(A,mg),e(mg,Iae),e(Iae,jZe),e(mg,DZe),e(mg,kR),e(kR,GZe),e(mg,OZe),e(A,VZe),e(A,gg),e(gg,Nae),e(Nae,XZe),e(gg,zZe),e(gg,SR),e(SR,WZe),e(gg,QZe),e(A,HZe),e(A,hg),e(hg,qae),e(qae,UZe),e(hg,JZe),e(hg,RR),e(RR,YZe),e(hg,KZe),e(A,ZZe),e(A,pg),e(pg,jae),e(jae,eeo),e(pg,oeo),e(pg,PR),e(PR,reo),e(pg,teo),e(A,aeo),e(A,ug),e(ug,Dae),e(Dae,neo),e(ug,seo),e(ug,BR),e(BR,leo),e(ug,ieo),e(A,deo),e(A,_g),e(_g,Gae),e(Gae,ceo),e(_g,feo),e(_g,IR),e(IR,meo),e(_g,geo),e(A,heo),e(A,bg),e(bg,Oae),e(Oae,peo),e(bg,ueo),e(bg,NR),e(NR,_eo),e(bg,beo),e(A,veo),e(A,vg),e(vg,Vae),e(Vae,Feo),e(vg,Teo),e(vg,qR),e(qR,Meo),e(vg,Eeo),e(A,Ceo),e(A,Fg),e(Fg,Xae),e(Xae,weo),e(Fg,Aeo),e(Fg,jR),e(jR,Leo),e(Fg,yeo),e(A,xeo),e(A,Tg),e(Tg,zae),e(zae,$eo),e(Tg,keo),e(Tg,DR),e(DR,Seo),e(Tg,Reo),e(A,Peo),e(A,Mg),e(Mg,Wae),e(Wae,Beo),e(Mg,Ieo),e(Mg,GR),e(GR,Neo),e(Mg,qeo),e(A,jeo),e(A,Eg),e(Eg,Qae),e(Qae,Deo),e(Eg,Geo),e(Eg,OR),e(OR,Oeo),e(Eg,Veo),e(A,Xeo),e(A,Cg),e(Cg,Hae),e(Hae,zeo),e(Cg,Weo),e(Cg,VR),e(VR,Qeo),e(Cg,Heo),e(A,Ueo),e(A,wg),e(wg,Uae),e(Uae,Jeo),e(wg,Yeo),e(wg,XR),e(XR,Keo),e(wg,Zeo),e(A,eoo),e(A,Ag),e(Ag,Jae),e(Jae,ooo),e(Ag,roo),e(Ag,zR),e(zR,too),e(Ag,aoo),e(A,noo),e(A,Lg),e(Lg,Yae),e(Yae,soo),e(Lg,loo),e(Lg,WR),e(WR,ioo),e(Lg,doo),e(A,coo),e(A,yg),e(yg,Kae),e(Kae,foo),e(yg,moo),e(yg,QR),e(QR,goo),e(yg,hoo),e(A,poo),e(A,xg),e(xg,Zae),e(Zae,uoo),e(xg,_oo),e(xg,HR),e(HR,boo),e(xg,voo),e(A,Foo),e(A,$g),e($g,ene),e(ene,Too),e($g,Moo),e($g,UR),e(UR,Eoo),e($g,Coo),e(A,woo),e(A,kg),e(kg,one),e(one,Aoo),e(kg,Loo),e(kg,JR),e(JR,yoo),e(kg,xoo),e(A,$oo),e(A,Sg),e(Sg,rne),e(rne,koo),e(Sg,Soo),e(Sg,YR),e(YR,Roo),e(Sg,Poo),e(A,Boo),e(A,Rg),e(Rg,tne),e(tne,Ioo),e(Rg,Noo),e(Rg,KR),e(KR,qoo),e(Rg,joo),e(A,Doo),e(A,Pg),e(Pg,ane),e(ane,Goo),e(Pg,Ooo),e(Pg,ZR),e(ZR,Voo),e(Pg,Xoo),e(A,zoo),e(A,Bg),e(Bg,nne),e(nne,Woo),e(Bg,Qoo),e(Bg,eP),e(eP,Hoo),e(Bg,Uoo),e(A,Joo),e(A,Ig),e(Ig,sne),e(sne,Yoo),e(Ig,Koo),e(Ig,oP),e(oP,Zoo),e(Ig,ero),e(A,oro),e(A,Ng),e(Ng,lne),e(lne,rro),e(Ng,tro),e(Ng,rP),e(rP,aro),e(Ng,nro),e(A,sro),e(A,qg),e(qg,ine),e(ine,lro),e(qg,iro),e(qg,tP),e(tP,dro),e(qg,cro),e(A,fro),e(A,jg),e(jg,dne),e(dne,mro),e(jg,gro),e(jg,aP),e(aP,hro),e(jg,pro),e(A,uro),e(A,Dg),e(Dg,cne),e(cne,_ro),e(Dg,bro),e(Dg,nP),e(nP,vro),e(Dg,Fro),e(wr,Tro),M(Gg,wr,null),e(wo,Mro),e(wo,Og),M(yA,Og,null),e(Og,Ero),e(Og,fne),e(fne,Cro),b(f,hGe,_),b(f,Si,_),e(Si,Vg),e(Vg,mne),M(xA,mne,null),e(Si,wro),e(Si,gne),e(gne,Aro),b(f,pGe,_),b(f,Ao,_),M($A,Ao,null),e(Ao,Lro),e(Ao,kA),e(kA,yro),e(kA,sP),e(sP,xro),e(kA,$ro),e(Ao,kro),e(Ao,SA),e(SA,Sro),e(SA,hne),e(hne,Rro),e(SA,Pro),e(Ao,Bro),e(Ao,Ar),M(RA,Ar,null),e(Ar,Iro),e(Ar,pne),e(pne,Nro),e(Ar,qro),e(Ar,ka),e(ka,jro),e(ka,une),e(une,Dro),e(ka,Gro),e(ka,_ne),e(_ne,Oro),e(ka,Vro),e(ka,bne),e(bne,Xro),e(ka,zro),e(Ar,Wro),e(Ar,k),e(k,Nn),e(Nn,vne),e(vne,Qro),e(Nn,Hro),e(Nn,lP),e(lP,Uro),e(Nn,Jro),e(Nn,iP),e(iP,Yro),e(Nn,Kro),e(k,Zro),e(k,qn),e(qn,Fne),e(Fne,eto),e(qn,oto),e(qn,dP),e(dP,rto),e(qn,tto),e(qn,cP),e(cP,ato),e(qn,nto),e(k,sto),e(k,jn),e(jn,Tne),e(Tne,lto),e(jn,ito),e(jn,fP),e(fP,dto),e(jn,cto),e(jn,mP),e(mP,fto),e(jn,mto),e(k,gto),e(k,Xg),e(Xg,Mne),e(Mne,hto),e(Xg,pto),e(Xg,gP),e(gP,uto),e(Xg,_to),e(k,bto),e(k,Dn),e(Dn,Ene),e(Ene,vto),e(Dn,Fto),e(Dn,hP),e(hP,Tto),e(Dn,Mto),e(Dn,pP),e(pP,Eto),e(Dn,Cto),e(k,wto),e(k,zg),e(zg,Cne),e(Cne,Ato),e(zg,Lto),e(zg,uP),e(uP,yto),e(zg,xto),e(k,$to),e(k,Wg),e(Wg,wne),e(wne,kto),e(Wg,Sto),e(Wg,_P),e(_P,Rto),e(Wg,Pto),e(k,Bto),e(k,Qg),e(Qg,Ane),e(Ane,Ito),e(Qg,Nto),e(Qg,bP),e(bP,qto),e(Qg,jto),e(k,Dto),e(k,Gn),e(Gn,Lne),e(Lne,Gto),e(Gn,Oto),e(Gn,vP),e(vP,Vto),e(Gn,Xto),e(Gn,FP),e(FP,zto),e(Gn,Wto),e(k,Qto),e(k,On),e(On,yne),e(yne,Hto),e(On,Uto),e(On,TP),e(TP,Jto),e(On,Yto),e(On,MP),e(MP,Kto),e(On,Zto),e(k,eao),e(k,Vn),e(Vn,xne),e(xne,oao),e(Vn,rao),e(Vn,EP),e(EP,tao),e(Vn,aao),e(Vn,CP),e(CP,nao),e(Vn,sao),e(k,lao),e(k,Hg),e(Hg,$ne),e($ne,iao),e(Hg,dao),e(Hg,wP),e(wP,cao),e(Hg,fao),e(k,mao),e(k,Ug),e(Ug,kne),e(kne,gao),e(Ug,hao),e(Ug,AP),e(AP,pao),e(Ug,uao),e(k,_ao),e(k,Jg),e(Jg,Sne),e(Sne,bao),e(Jg,vao),e(Jg,LP),e(LP,Fao),e(Jg,Tao),e(k,Mao),e(k,Xn),e(Xn,Rne),e(Rne,Eao),e(Xn,Cao),e(Xn,yP),e(yP,wao),e(Xn,Aao),e(Xn,xP),e(xP,Lao),e(Xn,yao),e(k,xao),e(k,Yg),e(Yg,Pne),e(Pne,$ao),e(Yg,kao),e(Yg,$P),e($P,Sao),e(Yg,Rao),e(k,Pao),e(k,zn),e(zn,Bne),e(Bne,Bao),e(zn,Iao),e(zn,kP),e(kP,Nao),e(zn,qao),e(zn,SP),e(SP,jao),e(zn,Dao),e(k,Gao),e(k,Wn),e(Wn,Ine),e(Ine,Oao),e(Wn,Vao),e(Wn,RP),e(RP,Xao),e(Wn,zao),e(Wn,PP),e(PP,Wao),e(Wn,Qao),e(k,Hao),e(k,Qn),e(Qn,Nne),e(Nne,Uao),e(Qn,Jao),e(Qn,BP),e(BP,Yao),e(Qn,Kao),e(Qn,IP),e(IP,Zao),e(Qn,eno),e(k,ono),e(k,Kg),e(Kg,qne),e(qne,rno),e(Kg,tno),e(Kg,NP),e(NP,ano),e(Kg,nno),e(k,sno),e(k,Hn),e(Hn,jne),e(jne,lno),e(Hn,ino),e(Hn,qP),e(qP,dno),e(Hn,cno),e(Hn,jP),e(jP,fno),e(Hn,mno),e(k,gno),e(k,Un),e(Un,Dne),e(Dne,hno),e(Un,pno),e(Un,DP),e(DP,uno),e(Un,_no),e(Un,GP),e(GP,bno),e(Un,vno),e(k,Fno),e(k,Jn),e(Jn,Gne),e(Gne,Tno),e(Jn,Mno),e(Jn,OP),e(OP,Eno),e(Jn,Cno),e(Jn,VP),e(VP,wno),e(Jn,Ano),e(k,Lno),e(k,Yn),e(Yn,One),e(One,yno),e(Yn,xno),e(Yn,XP),e(XP,$no),e(Yn,kno),e(Yn,zP),e(zP,Sno),e(Yn,Rno),e(k,Pno),e(k,Kn),e(Kn,Vne),e(Vne,Bno),e(Kn,Ino),e(Kn,WP),e(WP,Nno),e(Kn,qno),e(Kn,QP),e(QP,jno),e(Kn,Dno),e(k,Gno),e(k,Zn),e(Zn,Xne),e(Xne,Ono),e(Zn,Vno),e(Zn,HP),e(HP,Xno),e(Zn,zno),e(Zn,UP),e(UP,Wno),e(Zn,Qno),e(k,Hno),e(k,Zg),e(Zg,zne),e(zne,Uno),e(Zg,Jno),e(Zg,JP),e(JP,Yno),e(Zg,Kno),e(k,Zno),e(k,es),e(es,Wne),e(Wne,eso),e(es,oso),e(es,YP),e(YP,rso),e(es,tso),e(es,KP),e(KP,aso),e(es,nso),e(k,sso),e(k,eh),e(eh,Qne),e(Qne,lso),e(eh,iso),e(eh,ZP),e(ZP,dso),e(eh,cso),e(k,fso),e(k,os),e(os,Hne),e(Hne,mso),e(os,gso),e(os,eB),e(eB,hso),e(os,pso),e(os,oB),e(oB,uso),e(os,_so),e(k,bso),e(k,rs),e(rs,Une),e(Une,vso),e(rs,Fso),e(rs,rB),e(rB,Tso),e(rs,Mso),e(rs,tB),e(tB,Eso),e(rs,Cso),e(k,wso),e(k,ts),e(ts,Jne),e(Jne,Aso),e(ts,Lso),e(ts,aB),e(aB,yso),e(ts,xso),e(ts,nB),e(nB,$so),e(ts,kso),e(k,Sso),e(k,oh),e(oh,Yne),e(Yne,Rso),e(oh,Pso),e(oh,sB),e(sB,Bso),e(oh,Iso),e(k,Nso),e(k,as),e(as,Kne),e(Kne,qso),e(as,jso),e(as,lB),e(lB,Dso),e(as,Gso),e(as,iB),e(iB,Oso),e(as,Vso),e(k,Xso),e(k,ns),e(ns,Zne),e(Zne,zso),e(ns,Wso),e(ns,dB),e(dB,Qso),e(ns,Hso),e(ns,cB),e(cB,Uso),e(ns,Jso),e(k,Yso),e(k,rh),e(rh,ese),e(ese,Kso),e(rh,Zso),e(rh,fB),e(fB,elo),e(rh,olo),e(k,rlo),e(k,ss),e(ss,ose),e(ose,tlo),e(ss,alo),e(ss,mB),e(mB,nlo),e(ss,slo),e(ss,gB),e(gB,llo),e(ss,ilo),e(k,dlo),e(k,ls),e(ls,rse),e(rse,clo),e(ls,flo),e(ls,hB),e(hB,mlo),e(ls,glo),e(ls,pB),e(pB,hlo),e(ls,plo),e(k,ulo),e(k,is),e(is,tse),e(tse,_lo),e(is,blo),e(is,uB),e(uB,vlo),e(is,Flo),e(is,_B),e(_B,Tlo),e(is,Mlo),e(k,Elo),e(k,ds),e(ds,ase),e(ase,Clo),e(ds,wlo),e(ds,bB),e(bB,Alo),e(ds,Llo),e(ds,vB),e(vB,ylo),e(ds,xlo),e(k,$lo),e(k,cs),e(cs,nse),e(nse,klo),e(cs,Slo),e(cs,FB),e(FB,Rlo),e(cs,Plo),e(cs,TB),e(TB,Blo),e(cs,Ilo),e(k,Nlo),e(k,fs),e(fs,sse),e(sse,qlo),e(fs,jlo),e(fs,MB),e(MB,Dlo),e(fs,Glo),e(fs,EB),e(EB,Olo),e(fs,Vlo),e(k,Xlo),e(k,ms),e(ms,lse),e(lse,zlo),e(ms,Wlo),e(ms,CB),e(CB,Qlo),e(ms,Hlo),e(ms,wB),e(wB,Ulo),e(ms,Jlo),e(k,Ylo),e(k,gs),e(gs,ise),e(ise,Klo),e(gs,Zlo),e(gs,AB),e(AB,eio),e(gs,oio),e(gs,LB),e(LB,rio),e(gs,tio),e(k,aio),e(k,th),e(th,dse),e(dse,nio),e(th,sio),e(th,yB),e(yB,lio),e(th,iio),e(k,dio),e(k,hs),e(hs,cse),e(cse,cio),e(hs,fio),e(hs,xB),e(xB,mio),e(hs,gio),e(hs,$B),e($B,hio),e(hs,pio),e(k,uio),e(k,ah),e(ah,fse),e(fse,_io),e(ah,bio),e(ah,kB),e(kB,vio),e(ah,Fio),e(k,Tio),e(k,nh),e(nh,mse),e(mse,Mio),e(nh,Eio),e(nh,SB),e(SB,Cio),e(nh,wio),e(k,Aio),e(k,ps),e(ps,gse),e(gse,Lio),e(ps,yio),e(ps,RB),e(RB,xio),e(ps,$io),e(ps,PB),e(PB,kio),e(ps,Sio),e(k,Rio),e(k,us),e(us,hse),e(hse,Pio),e(us,Bio),e(us,BB),e(BB,Iio),e(us,Nio),e(us,IB),e(IB,qio),e(us,jio),e(k,Dio),e(k,_s),e(_s,pse),e(pse,Gio),e(_s,Oio),e(_s,NB),e(NB,Vio),e(_s,Xio),e(_s,qB),e(qB,zio),e(_s,Wio),e(k,Qio),e(k,sh),e(sh,use),e(use,Hio),e(sh,Uio),e(sh,jB),e(jB,Jio),e(sh,Yio),e(k,Kio),e(k,bs),e(bs,_se),e(_se,Zio),e(bs,edo),e(bs,DB),e(DB,odo),e(bs,rdo),e(bs,GB),e(GB,tdo),e(bs,ado),e(k,ndo),e(k,vs),e(vs,bse),e(bse,sdo),e(vs,ldo),e(vs,OB),e(OB,ido),e(vs,ddo),e(vs,VB),e(VB,cdo),e(vs,fdo),e(k,mdo),e(k,Fs),e(Fs,vse),e(vse,gdo),e(Fs,hdo),e(Fs,XB),e(XB,pdo),e(Fs,udo),e(Fs,zB),e(zB,_do),e(Fs,bdo),e(k,vdo),e(k,Ts),e(Ts,Fse),e(Fse,Fdo),e(Ts,Tdo),e(Ts,WB),e(WB,Mdo),e(Ts,Edo),e(Ts,QB),e(QB,Cdo),e(Ts,wdo),e(k,Ado),e(k,Ms),e(Ms,Tse),e(Tse,Ldo),e(Ms,ydo),e(Ms,HB),e(HB,xdo),e(Ms,$do),e(Ms,UB),e(UB,kdo),e(Ms,Sdo),e(k,Rdo),e(k,lh),e(lh,Mse),e(Mse,Pdo),e(lh,Bdo),e(lh,JB),e(JB,Ido),e(lh,Ndo),e(k,qdo),e(k,Es),e(Es,Ese),e(Ese,jdo),e(Es,Ddo),e(Es,YB),e(YB,Gdo),e(Es,Odo),e(Es,KB),e(KB,Vdo),e(Es,Xdo),e(k,zdo),e(k,ih),e(ih,Cse),e(Cse,Wdo),e(ih,Qdo),e(ih,ZB),e(ZB,Hdo),e(ih,Udo),e(k,Jdo),e(k,dh),e(dh,wse),e(wse,Ydo),e(dh,Kdo),e(dh,eI),e(eI,Zdo),e(dh,eco),e(k,oco),e(k,ch),e(ch,Ase),e(Ase,rco),e(ch,tco),e(ch,oI),e(oI,aco),e(ch,nco),e(k,sco),e(k,fh),e(fh,Lse),e(Lse,lco),e(fh,ico),e(fh,rI),e(rI,dco),e(fh,cco),e(k,fco),e(k,Cs),e(Cs,yse),e(yse,mco),e(Cs,gco),e(Cs,tI),e(tI,hco),e(Cs,pco),e(Cs,aI),e(aI,uco),e(Cs,_co),e(k,bco),e(k,mh),e(mh,xse),e(xse,vco),e(mh,Fco),e(mh,nI),e(nI,Tco),e(mh,Mco),e(k,Eco),e(k,ws),e(ws,$se),e($se,Cco),e(ws,wco),e(ws,sI),e(sI,Aco),e(ws,Lco),e(ws,lI),e(lI,yco),e(ws,xco),e(k,$co),e(k,As),e(As,kse),e(kse,kco),e(As,Sco),e(As,iI),e(iI,Rco),e(As,Pco),e(As,dI),e(dI,Bco),e(As,Ico),e(k,Nco),e(k,Ls),e(Ls,Sse),e(Sse,qco),e(Ls,jco),e(Ls,cI),e(cI,Dco),e(Ls,Gco),e(Ls,fI),e(fI,Oco),e(Ls,Vco),e(k,Xco),e(k,ys),e(ys,Rse),e(Rse,zco),e(ys,Wco),e(ys,mI),e(mI,Qco),e(ys,Hco),e(ys,gI),e(gI,Uco),e(ys,Jco),e(k,Yco),e(k,xs),e(xs,Pse),e(Pse,Kco),e(xs,Zco),e(xs,hI),e(hI,efo),e(xs,ofo),e(xs,pI),e(pI,rfo),e(xs,tfo),e(k,afo),e(k,$s),e($s,Bse),e(Bse,nfo),e($s,sfo),e($s,uI),e(uI,lfo),e($s,ifo),e($s,_I),e(_I,dfo),e($s,cfo),e(k,ffo),e(k,gh),e(gh,Ise),e(Ise,mfo),e(gh,gfo),e(gh,bI),e(bI,hfo),e(gh,pfo),e(k,ufo),e(k,hh),e(hh,Nse),e(Nse,_fo),e(hh,bfo),e(hh,vI),e(vI,vfo),e(hh,Ffo),e(k,Tfo),e(k,ks),e(ks,qse),e(qse,Mfo),e(ks,Efo),e(ks,FI),e(FI,Cfo),e(ks,wfo),e(ks,TI),e(TI,Afo),e(ks,Lfo),e(k,yfo),e(k,Ss),e(Ss,jse),e(jse,xfo),e(Ss,$fo),e(Ss,MI),e(MI,kfo),e(Ss,Sfo),e(Ss,EI),e(EI,Rfo),e(Ss,Pfo),e(k,Bfo),e(k,Rs),e(Rs,Dse),e(Dse,Ifo),e(Rs,Nfo),e(Rs,CI),e(CI,qfo),e(Rs,jfo),e(Rs,wI),e(wI,Dfo),e(Rs,Gfo),e(k,Ofo),e(k,ph),e(ph,Gse),e(Gse,Vfo),e(ph,Xfo),e(ph,AI),e(AI,zfo),e(ph,Wfo),e(k,Qfo),e(k,uh),e(uh,Ose),e(Ose,Hfo),e(uh,Ufo),e(uh,LI),e(LI,Jfo),e(uh,Yfo),e(k,Kfo),e(k,_h),e(_h,Vse),e(Vse,Zfo),e(_h,emo),e(_h,yI),e(yI,omo),e(_h,rmo),e(k,tmo),e(k,Ps),e(Ps,Xse),e(Xse,amo),e(Ps,nmo),e(Ps,xI),e(xI,smo),e(Ps,lmo),e(Ps,$I),e($I,imo),e(Ps,dmo),e(k,cmo),e(k,Bs),e(Bs,zse),e(zse,fmo),e(Bs,mmo),e(Bs,kI),e(kI,gmo),e(Bs,hmo),e(Bs,SI),e(SI,pmo),e(Bs,umo),e(k,_mo),e(k,bh),e(bh,Wse),e(Wse,bmo),e(bh,vmo),e(bh,RI),e(RI,Fmo),e(bh,Tmo),e(k,Mmo),e(k,vh),e(vh,Qse),e(Qse,Emo),e(vh,Cmo),e(vh,PI),e(PI,wmo),e(vh,Amo),e(k,Lmo),e(k,Fh),e(Fh,Hse),e(Hse,ymo),e(Fh,xmo),e(Fh,BI),e(BI,$mo),e(Fh,kmo),e(k,Smo),e(k,Is),e(Is,Use),e(Use,Rmo),e(Is,Pmo),e(Is,II),e(II,Bmo),e(Is,Imo),e(Is,NI),e(NI,Nmo),e(Is,qmo),e(k,jmo),e(k,Th),e(Th,Jse),e(Jse,Dmo),e(Th,Gmo),e(Th,qI),e(qI,Omo),e(Th,Vmo),e(k,Xmo),e(k,Mh),e(Mh,Yse),e(Yse,zmo),e(Mh,Wmo),e(Mh,jI),e(jI,Qmo),e(Mh,Hmo),e(k,Umo),e(k,Ns),e(Ns,Kse),e(Kse,Jmo),e(Ns,Ymo),e(Ns,DI),e(DI,Kmo),e(Ns,Zmo),e(Ns,GI),e(GI,ego),e(Ns,ogo),e(k,rgo),e(k,qs),e(qs,Zse),e(Zse,tgo),e(qs,ago),e(qs,OI),e(OI,ngo),e(qs,sgo),e(qs,VI),e(VI,lgo),e(qs,igo),e(k,dgo),e(k,js),e(js,ele),e(ele,cgo),e(js,fgo),e(js,XI),e(XI,mgo),e(js,ggo),e(js,zI),e(zI,hgo),e(js,pgo),e(k,ugo),e(k,Ds),e(Ds,ole),e(ole,_go),e(Ds,bgo),e(Ds,WI),e(WI,vgo),e(Ds,Fgo),e(Ds,QI),e(QI,Tgo),e(Ds,Mgo),e(Ar,Ego),M(Eh,Ar,null),e(Ao,Cgo),e(Ao,Ch),M(PA,Ch,null),e(Ch,wgo),e(Ch,rle),e(rle,Ago),b(f,uGe,_),b(f,Ri,_),e(Ri,wh),e(wh,tle),M(BA,tle,null),e(Ri,Lgo),e(Ri,ale),e(ale,ygo),b(f,_Ge,_),b(f,Lo,_),M(IA,Lo,null),e(Lo,xgo),e(Lo,NA),e(NA,$go),e(NA,HI),e(HI,kgo),e(NA,Sgo),e(Lo,Rgo),e(Lo,qA),e(qA,Pgo),e(qA,nle),e(nle,Bgo),e(qA,Igo),e(Lo,Ngo),e(Lo,He),M(jA,He,null),e(He,qgo),e(He,sle),e(sle,jgo),e(He,Dgo),e(He,Sa),e(Sa,Ggo),e(Sa,lle),e(lle,Ogo),e(Sa,Vgo),e(Sa,ile),e(ile,Xgo),e(Sa,zgo),e(Sa,dle),e(dle,Wgo),e(Sa,Qgo),e(He,Hgo),e(He,Y),e(Y,Ah),e(Ah,cle),e(cle,Ugo),e(Ah,Jgo),e(Ah,UI),e(UI,Ygo),e(Ah,Kgo),e(Y,Zgo),e(Y,Lh),e(Lh,fle),e(fle,eho),e(Lh,oho),e(Lh,JI),e(JI,rho),e(Lh,tho),e(Y,aho),e(Y,yh),e(yh,mle),e(mle,nho),e(yh,sho),e(yh,YI),e(YI,lho),e(yh,iho),e(Y,dho),e(Y,xh),e(xh,gle),e(gle,cho),e(xh,fho),e(xh,KI),e(KI,mho),e(xh,gho),e(Y,hho),e(Y,$h),e($h,hle),e(hle,pho),e($h,uho),e($h,ZI),e(ZI,_ho),e($h,bho),e(Y,vho),e(Y,kh),e(kh,ple),e(ple,Fho),e(kh,Tho),e(kh,eN),e(eN,Mho),e(kh,Eho),e(Y,Cho),e(Y,Sh),e(Sh,ule),e(ule,who),e(Sh,Aho),e(Sh,oN),e(oN,Lho),e(Sh,yho),e(Y,xho),e(Y,Rh),e(Rh,_le),e(_le,$ho),e(Rh,kho),e(Rh,rN),e(rN,Sho),e(Rh,Rho),e(Y,Pho),e(Y,Ph),e(Ph,ble),e(ble,Bho),e(Ph,Iho),e(Ph,tN),e(tN,Nho),e(Ph,qho),e(Y,jho),e(Y,Bh),e(Bh,vle),e(vle,Dho),e(Bh,Gho),e(Bh,aN),e(aN,Oho),e(Bh,Vho),e(Y,Xho),e(Y,Ih),e(Ih,Fle),e(Fle,zho),e(Ih,Who),e(Ih,nN),e(nN,Qho),e(Ih,Hho),e(Y,Uho),e(Y,Nh),e(Nh,Tle),e(Tle,Jho),e(Nh,Yho),e(Nh,sN),e(sN,Kho),e(Nh,Zho),e(Y,epo),e(Y,qh),e(qh,Mle),e(Mle,opo),e(qh,rpo),e(qh,lN),e(lN,tpo),e(qh,apo),e(Y,npo),e(Y,jh),e(jh,Ele),e(Ele,spo),e(jh,lpo),e(jh,iN),e(iN,ipo),e(jh,dpo),e(Y,cpo),e(Y,Dh),e(Dh,Cle),e(Cle,fpo),e(Dh,mpo),e(Dh,dN),e(dN,gpo),e(Dh,hpo),e(Y,ppo),e(Y,Gh),e(Gh,wle),e(wle,upo),e(Gh,_po),e(Gh,cN),e(cN,bpo),e(Gh,vpo),e(Y,Fpo),e(Y,Oh),e(Oh,Ale),e(Ale,Tpo),e(Oh,Mpo),e(Oh,fN),e(fN,Epo),e(Oh,Cpo),e(Y,wpo),e(Y,Vh),e(Vh,Lle),e(Lle,Apo),e(Vh,Lpo),e(Vh,mN),e(mN,ypo),e(Vh,xpo),e(Y,$po),e(Y,Xh),e(Xh,yle),e(yle,kpo),e(Xh,Spo),e(Xh,gN),e(gN,Rpo),e(Xh,Ppo),e(Y,Bpo),e(Y,zh),e(zh,xle),e(xle,Ipo),e(zh,Npo),e(zh,hN),e(hN,qpo),e(zh,jpo),e(Y,Dpo),e(Y,Wh),e(Wh,$le),e($le,Gpo),e(Wh,Opo),e(Wh,pN),e(pN,Vpo),e(Wh,Xpo),e(Y,zpo),e(Y,Qh),e(Qh,kle),e(kle,Wpo),e(Qh,Qpo),e(Qh,uN),e(uN,Hpo),e(Qh,Upo),e(Y,Jpo),e(Y,Hh),e(Hh,Sle),e(Sle,Ypo),e(Hh,Kpo),e(Hh,_N),e(_N,Zpo),e(Hh,euo),e(Y,ouo),e(Y,Uh),e(Uh,Rle),e(Rle,ruo),e(Uh,tuo),e(Uh,bN),e(bN,auo),e(Uh,nuo),e(Y,suo),e(Y,Jh),e(Jh,Ple),e(Ple,luo),e(Jh,iuo),e(Jh,vN),e(vN,duo),e(Jh,cuo),e(Y,fuo),e(Y,Yh),e(Yh,Ble),e(Ble,muo),e(Yh,guo),e(Yh,FN),e(FN,huo),e(Yh,puo),e(Y,uuo),e(Y,Kh),e(Kh,Ile),e(Ile,_uo),e(Kh,buo),e(Kh,TN),e(TN,vuo),e(Kh,Fuo),e(Y,Tuo),e(Y,Zh),e(Zh,Nle),e(Nle,Muo),e(Zh,Euo),e(Zh,MN),e(MN,Cuo),e(Zh,wuo),e(Y,Auo),e(Y,ep),e(ep,qle),e(qle,Luo),e(ep,yuo),e(ep,EN),e(EN,xuo),e(ep,$uo),e(Y,kuo),e(Y,op),e(op,jle),e(jle,Suo),e(op,Ruo),e(op,CN),e(CN,Puo),e(op,Buo),e(Y,Iuo),e(Y,rp),e(rp,Dle),e(Dle,Nuo),e(rp,quo),e(rp,wN),e(wN,juo),e(rp,Duo),e(Y,Guo),e(Y,tp),e(tp,Gle),e(Gle,Ouo),e(tp,Vuo),e(tp,AN),e(AN,Xuo),e(tp,zuo),e(He,Wuo),M(ap,He,null),e(He,Quo),M(np,He,null),e(Lo,Huo),e(Lo,sp),M(DA,sp,null),e(sp,Uuo),e(sp,Ole),e(Ole,Juo),b(f,bGe,_),b(f,Pi,_),e(Pi,lp),e(lp,Vle),M(GA,Vle,null),e(Pi,Yuo),e(Pi,Xle),e(Xle,Kuo),b(f,vGe,_),b(f,yo,_),M(OA,yo,null),e(yo,Zuo),e(yo,VA),e(VA,e_o),e(VA,LN),e(LN,o_o),e(VA,r_o),e(yo,t_o),e(yo,XA),e(XA,a_o),e(XA,zle),e(zle,n_o),e(XA,s_o),e(yo,l_o),e(yo,Ue),M(zA,Ue,null),e(Ue,i_o),e(Ue,Wle),e(Wle,d_o),e(Ue,c_o),e(Ue,Bi),e(Bi,f_o),e(Bi,Qle),e(Qle,m_o),e(Bi,g_o),e(Bi,Hle),e(Hle,h_o),e(Bi,p_o),e(Ue,u_o),e(Ue,he),e(he,ip),e(ip,Ule),e(Ule,__o),e(ip,b_o),e(ip,yN),e(yN,v_o),e(ip,F_o),e(he,T_o),e(he,dp),e(dp,Jle),e(Jle,M_o),e(dp,E_o),e(dp,Yle),e(Yle,C_o),e(dp,w_o),e(he,A_o),e(he,cp),e(cp,Kle),e(Kle,L_o),e(cp,y_o),e(cp,xN),e(xN,x_o),e(cp,$_o),e(he,k_o),e(he,fp),e(fp,Zle),e(Zle,S_o),e(fp,R_o),e(fp,$N),e($N,P_o),e(fp,B_o),e(he,I_o),e(he,mp),e(mp,eie),e(eie,N_o),e(mp,q_o),e(mp,kN),e(kN,j_o),e(mp,D_o),e(he,G_o),e(he,gp),e(gp,oie),e(oie,O_o),e(gp,V_o),e(gp,SN),e(SN,X_o),e(gp,z_o),e(he,W_o),e(he,hp),e(hp,rie),e(rie,Q_o),e(hp,H_o),e(hp,RN),e(RN,U_o),e(hp,J_o),e(he,Y_o),e(he,pp),e(pp,tie),e(tie,K_o),e(pp,Z_o),e(pp,PN),e(PN,e1o),e(pp,o1o),e(he,r1o),e(he,up),e(up,aie),e(aie,t1o),e(up,a1o),e(up,BN),e(BN,n1o),e(up,s1o),e(he,l1o),e(he,_p),e(_p,nie),e(nie,i1o),e(_p,d1o),e(_p,IN),e(IN,c1o),e(_p,f1o),e(he,m1o),e(he,bp),e(bp,sie),e(sie,g1o),e(bp,h1o),e(bp,NN),e(NN,p1o),e(bp,u1o),e(he,_1o),e(he,vp),e(vp,lie),e(lie,b1o),e(vp,v1o),e(vp,qN),e(qN,F1o),e(vp,T1o),e(he,M1o),e(he,Fp),e(Fp,iie),e(iie,E1o),e(Fp,C1o),e(Fp,jN),e(jN,w1o),e(Fp,A1o),e(he,L1o),e(he,Tp),e(Tp,die),e(die,y1o),e(Tp,x1o),e(Tp,DN),e(DN,$1o),e(Tp,k1o),e(he,S1o),e(he,Mp),e(Mp,cie),e(cie,R1o),e(Mp,P1o),e(Mp,GN),e(GN,B1o),e(Mp,I1o),e(he,N1o),e(he,Ep),e(Ep,fie),e(fie,q1o),e(Ep,j1o),e(Ep,ON),e(ON,D1o),e(Ep,G1o),e(he,O1o),e(he,Cp),e(Cp,mie),e(mie,V1o),e(Cp,X1o),e(Cp,VN),e(VN,z1o),e(Cp,W1o),e(Ue,Q1o),M(wp,Ue,null),e(Ue,H1o),M(Ap,Ue,null),e(yo,U1o),e(yo,Lp),M(WA,Lp,null),e(Lp,J1o),e(Lp,gie),e(gie,Y1o),b(f,FGe,_),b(f,Ii,_),e(Ii,yp),e(yp,hie),M(QA,hie,null),e(Ii,K1o),e(Ii,pie),e(pie,Z1o),b(f,TGe,_),b(f,xo,_),M(HA,xo,null),e(xo,e2o),e(xo,Ni),e(Ni,o2o),e(Ni,XN),e(XN,r2o),e(Ni,t2o),e(Ni,zN),e(zN,a2o),e(Ni,n2o),e(xo,s2o),e(xo,UA),e(UA,l2o),e(UA,uie),e(uie,i2o),e(UA,d2o),e(xo,c2o),e(xo,st),M(JA,st,null),e(st,f2o),e(st,_ie),e(_ie,m2o),e(st,g2o),e(st,qi),e(qi,h2o),e(qi,bie),e(bie,p2o),e(qi,u2o),e(qi,WN),e(WN,_2o),e(qi,b2o),e(st,v2o),M(xp,st,null),e(xo,F2o),e(xo,Je),M(YA,Je,null),e(Je,T2o),e(Je,vie),e(vie,M2o),e(Je,E2o),e(Je,Ra),e(Ra,C2o),e(Ra,Fie),e(Fie,w2o),e(Ra,A2o),e(Ra,Tie),e(Tie,L2o),e(Ra,y2o),e(Ra,Mie),e(Mie,x2o),e(Ra,$2o),e(Je,k2o),e(Je,x),e(x,$p),e($p,Eie),e(Eie,S2o),e($p,R2o),e($p,QN),e(QN,P2o),e($p,B2o),e(x,I2o),e(x,kp),e(kp,Cie),e(Cie,N2o),e(kp,q2o),e(kp,HN),e(HN,j2o),e(kp,D2o),e(x,G2o),e(x,Sp),e(Sp,wie),e(wie,O2o),e(Sp,V2o),e(Sp,UN),e(UN,X2o),e(Sp,z2o),e(x,W2o),e(x,Rp),e(Rp,Aie),e(Aie,Q2o),e(Rp,H2o),e(Rp,JN),e(JN,U2o),e(Rp,J2o),e(x,Y2o),e(x,Pp),e(Pp,Lie),e(Lie,K2o),e(Pp,Z2o),e(Pp,YN),e(YN,ebo),e(Pp,obo),e(x,rbo),e(x,Bp),e(Bp,yie),e(yie,tbo),e(Bp,abo),e(Bp,KN),e(KN,nbo),e(Bp,sbo),e(x,lbo),e(x,Ip),e(Ip,xie),e(xie,ibo),e(Ip,dbo),e(Ip,ZN),e(ZN,cbo),e(Ip,fbo),e(x,mbo),e(x,Np),e(Np,$ie),e($ie,gbo),e(Np,hbo),e(Np,eq),e(eq,pbo),e(Np,ubo),e(x,_bo),e(x,qp),e(qp,kie),e(kie,bbo),e(qp,vbo),e(qp,oq),e(oq,Fbo),e(qp,Tbo),e(x,Mbo),e(x,jp),e(jp,Sie),e(Sie,Ebo),e(jp,Cbo),e(jp,rq),e(rq,wbo),e(jp,Abo),e(x,Lbo),e(x,Dp),e(Dp,Rie),e(Rie,ybo),e(Dp,xbo),e(Dp,tq),e(tq,$bo),e(Dp,kbo),e(x,Sbo),e(x,Gp),e(Gp,Pie),e(Pie,Rbo),e(Gp,Pbo),e(Gp,aq),e(aq,Bbo),e(Gp,Ibo),e(x,Nbo),e(x,Op),e(Op,Bie),e(Bie,qbo),e(Op,jbo),e(Op,nq),e(nq,Dbo),e(Op,Gbo),e(x,Obo),e(x,Vp),e(Vp,Iie),e(Iie,Vbo),e(Vp,Xbo),e(Vp,sq),e(sq,zbo),e(Vp,Wbo),e(x,Qbo),e(x,Xp),e(Xp,Nie),e(Nie,Hbo),e(Xp,Ubo),e(Xp,lq),e(lq,Jbo),e(Xp,Ybo),e(x,Kbo),e(x,zp),e(zp,qie),e(qie,Zbo),e(zp,evo),e(zp,iq),e(iq,ovo),e(zp,rvo),e(x,tvo),e(x,Wp),e(Wp,jie),e(jie,avo),e(Wp,nvo),e(Wp,dq),e(dq,svo),e(Wp,lvo),e(x,ivo),e(x,Qp),e(Qp,Die),e(Die,dvo),e(Qp,cvo),e(Qp,cq),e(cq,fvo),e(Qp,mvo),e(x,gvo),e(x,Hp),e(Hp,Gie),e(Gie,hvo),e(Hp,pvo),e(Hp,fq),e(fq,uvo),e(Hp,_vo),e(x,bvo),e(x,Up),e(Up,Oie),e(Oie,vvo),e(Up,Fvo),e(Up,mq),e(mq,Tvo),e(Up,Mvo),e(x,Evo),e(x,Jp),e(Jp,Vie),e(Vie,Cvo),e(Jp,wvo),e(Jp,gq),e(gq,Avo),e(Jp,Lvo),e(x,yvo),e(x,Yp),e(Yp,Xie),e(Xie,xvo),e(Yp,$vo),e(Yp,hq),e(hq,kvo),e(Yp,Svo),e(x,Rvo),e(x,Kp),e(Kp,zie),e(zie,Pvo),e(Kp,Bvo),e(Kp,pq),e(pq,Ivo),e(Kp,Nvo),e(x,qvo),e(x,Zp),e(Zp,Wie),e(Wie,jvo),e(Zp,Dvo),e(Zp,uq),e(uq,Gvo),e(Zp,Ovo),e(x,Vvo),e(x,eu),e(eu,Qie),e(Qie,Xvo),e(eu,zvo),e(eu,_q),e(_q,Wvo),e(eu,Qvo),e(x,Hvo),e(x,ou),e(ou,Hie),e(Hie,Uvo),e(ou,Jvo),e(ou,bq),e(bq,Yvo),e(ou,Kvo),e(x,Zvo),e(x,ru),e(ru,Uie),e(Uie,e0o),e(ru,o0o),e(ru,vq),e(vq,r0o),e(ru,t0o),e(x,a0o),e(x,tu),e(tu,Jie),e(Jie,n0o),e(tu,s0o),e(tu,Fq),e(Fq,l0o),e(tu,i0o),e(x,d0o),e(x,au),e(au,Yie),e(Yie,c0o),e(au,f0o),e(au,Tq),e(Tq,m0o),e(au,g0o),e(x,h0o),e(x,nu),e(nu,Kie),e(Kie,p0o),e(nu,u0o),e(nu,Mq),e(Mq,_0o),e(nu,b0o),e(x,v0o),e(x,su),e(su,Zie),e(Zie,F0o),e(su,T0o),e(su,Eq),e(Eq,M0o),e(su,E0o),e(x,C0o),e(x,lu),e(lu,ede),e(ede,w0o),e(lu,A0o),e(lu,Cq),e(Cq,L0o),e(lu,y0o),e(x,x0o),e(x,iu),e(iu,ode),e(ode,$0o),e(iu,k0o),e(iu,wq),e(wq,S0o),e(iu,R0o),e(x,P0o),e(x,Gs),e(Gs,rde),e(rde,B0o),e(Gs,I0o),e(Gs,Aq),e(Aq,N0o),e(Gs,q0o),e(Gs,Lq),e(Lq,j0o),e(Gs,D0o),e(x,G0o),e(x,du),e(du,tde),e(tde,O0o),e(du,V0o),e(du,yq),e(yq,X0o),e(du,z0o),e(x,W0o),e(x,cu),e(cu,ade),e(ade,Q0o),e(cu,H0o),e(cu,xq),e(xq,U0o),e(cu,J0o),e(x,Y0o),e(x,fu),e(fu,nde),e(nde,K0o),e(fu,Z0o),e(fu,$q),e($q,eFo),e(fu,oFo),e(x,rFo),e(x,mu),e(mu,sde),e(sde,tFo),e(mu,aFo),e(mu,kq),e(kq,nFo),e(mu,sFo),e(x,lFo),e(x,gu),e(gu,lde),e(lde,iFo),e(gu,dFo),e(gu,Sq),e(Sq,cFo),e(gu,fFo),e(x,mFo),e(x,hu),e(hu,ide),e(ide,gFo),e(hu,hFo),e(hu,Rq),e(Rq,pFo),e(hu,uFo),e(x,_Fo),e(x,pu),e(pu,dde),e(dde,bFo),e(pu,vFo),e(pu,Pq),e(Pq,FFo),e(pu,TFo),e(x,MFo),e(x,uu),e(uu,cde),e(cde,EFo),e(uu,CFo),e(uu,Bq),e(Bq,wFo),e(uu,AFo),e(x,LFo),e(x,_u),e(_u,fde),e(fde,yFo),e(_u,xFo),e(_u,Iq),e(Iq,$Fo),e(_u,kFo),e(x,SFo),e(x,bu),e(bu,mde),e(mde,RFo),e(bu,PFo),e(bu,Nq),e(Nq,BFo),e(bu,IFo),e(x,NFo),e(x,vu),e(vu,gde),e(gde,qFo),e(vu,jFo),e(vu,qq),e(qq,DFo),e(vu,GFo),e(x,OFo),e(x,Fu),e(Fu,hde),e(hde,VFo),e(Fu,XFo),e(Fu,jq),e(jq,zFo),e(Fu,WFo),e(x,QFo),e(x,Tu),e(Tu,pde),e(pde,HFo),e(Tu,UFo),e(Tu,Dq),e(Dq,JFo),e(Tu,YFo),e(x,KFo),e(x,Mu),e(Mu,ude),e(ude,ZFo),e(Mu,e6o),e(Mu,Gq),e(Gq,o6o),e(Mu,r6o),e(x,t6o),e(x,Eu),e(Eu,_de),e(_de,a6o),e(Eu,n6o),e(Eu,Oq),e(Oq,s6o),e(Eu,l6o),e(x,i6o),e(x,Cu),e(Cu,bde),e(bde,d6o),e(Cu,c6o),e(Cu,Vq),e(Vq,f6o),e(Cu,m6o),e(x,g6o),e(x,wu),e(wu,vde),e(vde,h6o),e(wu,p6o),e(wu,Xq),e(Xq,u6o),e(wu,_6o),e(x,b6o),e(x,Au),e(Au,Fde),e(Fde,v6o),e(Au,F6o),e(Au,zq),e(zq,T6o),e(Au,M6o),e(x,E6o),e(x,Lu),e(Lu,Tde),e(Tde,C6o),e(Lu,w6o),e(Lu,Wq),e(Wq,A6o),e(Lu,L6o),e(x,y6o),e(x,yu),e(yu,Mde),e(Mde,x6o),e(yu,$6o),e(yu,Qq),e(Qq,k6o),e(yu,S6o),e(x,R6o),e(x,xu),e(xu,Ede),e(Ede,P6o),e(xu,B6o),e(xu,Hq),e(Hq,I6o),e(xu,N6o),e(x,q6o),e(x,$u),e($u,Cde),e(Cde,j6o),e($u,D6o),e($u,Uq),e(Uq,G6o),e($u,O6o),e(x,V6o),e(x,ku),e(ku,wde),e(wde,X6o),e(ku,z6o),e(ku,Jq),e(Jq,W6o),e(ku,Q6o),e(x,H6o),e(x,Su),e(Su,Ade),e(Ade,U6o),e(Su,J6o),e(Su,Yq),e(Yq,Y6o),e(Su,K6o),e(x,Z6o),e(x,Ru),e(Ru,Lde),e(Lde,eTo),e(Ru,oTo),e(Ru,Kq),e(Kq,rTo),e(Ru,tTo),e(x,aTo),e(x,Pu),e(Pu,yde),e(yde,nTo),e(Pu,sTo),e(Pu,Zq),e(Zq,lTo),e(Pu,iTo),e(x,dTo),e(x,Bu),e(Bu,xde),e(xde,cTo),e(Bu,fTo),e(Bu,ej),e(ej,mTo),e(Bu,gTo),e(x,hTo),e(x,Iu),e(Iu,$de),e($de,pTo),e(Iu,uTo),e(Iu,oj),e(oj,_To),e(Iu,bTo),e(x,vTo),e(x,Nu),e(Nu,kde),e(kde,FTo),e(Nu,TTo),e(Nu,rj),e(rj,MTo),e(Nu,ETo),e(x,CTo),e(x,qu),e(qu,Sde),e(Sde,wTo),e(qu,ATo),e(qu,tj),e(tj,LTo),e(qu,yTo),e(x,xTo),e(x,ju),e(ju,Rde),e(Rde,$To),e(ju,kTo),e(ju,aj),e(aj,STo),e(ju,RTo),e(x,PTo),e(x,Du),e(Du,Pde),e(Pde,BTo),e(Du,ITo),e(Du,nj),e(nj,NTo),e(Du,qTo),e(x,jTo),e(x,Gu),e(Gu,Bde),e(Bde,DTo),e(Gu,GTo),e(Gu,sj),e(sj,OTo),e(Gu,VTo),e(x,XTo),e(x,Ou),e(Ou,Ide),e(Ide,zTo),e(Ou,WTo),e(Ou,lj),e(lj,QTo),e(Ou,HTo),e(x,UTo),e(x,Vu),e(Vu,Nde),e(Nde,JTo),e(Vu,YTo),e(Vu,ij),e(ij,KTo),e(Vu,ZTo),e(x,e7o),e(x,Xu),e(Xu,qde),e(qde,o7o),e(Xu,r7o),e(Xu,dj),e(dj,t7o),e(Xu,a7o),e(x,n7o),e(x,zu),e(zu,jde),e(jde,s7o),e(zu,l7o),e(zu,cj),e(cj,i7o),e(zu,d7o),e(x,c7o),e(x,Wu),e(Wu,Dde),e(Dde,f7o),e(Wu,m7o),e(Wu,fj),e(fj,g7o),e(Wu,h7o),e(x,p7o),e(x,Qu),e(Qu,Gde),e(Gde,u7o),e(Qu,_7o),e(Qu,mj),e(mj,b7o),e(Qu,v7o),e(x,F7o),e(x,Hu),e(Hu,Ode),e(Ode,T7o),e(Hu,M7o),e(Hu,gj),e(gj,E7o),e(Hu,C7o),e(x,w7o),e(x,Uu),e(Uu,Vde),e(Vde,A7o),e(Uu,L7o),e(Uu,hj),e(hj,y7o),e(Uu,x7o),e(x,$7o),e(x,Ju),e(Ju,Xde),e(Xde,k7o),e(Ju,S7o),e(Ju,pj),e(pj,R7o),e(Ju,P7o),e(x,B7o),e(x,Yu),e(Yu,zde),e(zde,I7o),e(Yu,N7o),e(Yu,uj),e(uj,q7o),e(Yu,j7o),e(x,D7o),e(x,Ku),e(Ku,Wde),e(Wde,G7o),e(Ku,O7o),e(Ku,_j),e(_j,V7o),e(Ku,X7o),e(x,z7o),e(x,Zu),e(Zu,Qde),e(Qde,W7o),e(Zu,Q7o),e(Zu,bj),e(bj,H7o),e(Zu,U7o),e(x,J7o),e(x,e_),e(e_,Hde),e(Hde,Y7o),e(e_,K7o),e(e_,vj),e(vj,Z7o),e(e_,e8o),e(x,o8o),e(x,o_),e(o_,Ude),e(Ude,r8o),e(o_,t8o),e(o_,Fj),e(Fj,a8o),e(o_,n8o),e(x,s8o),e(x,r_),e(r_,Jde),e(Jde,l8o),e(r_,i8o),e(r_,Tj),e(Tj,d8o),e(r_,c8o),e(x,f8o),e(x,t_),e(t_,Yde),e(Yde,m8o),e(t_,g8o),e(t_,Mj),e(Mj,h8o),e(t_,p8o),e(x,u8o),e(x,a_),e(a_,Kde),e(Kde,_8o),e(a_,b8o),e(a_,Ej),e(Ej,v8o),e(a_,F8o),e(x,T8o),e(x,n_),e(n_,Zde),e(Zde,M8o),e(n_,E8o),e(n_,Cj),e(Cj,C8o),e(n_,w8o),e(x,A8o),e(x,s_),e(s_,ece),e(ece,L8o),e(s_,y8o),e(s_,wj),e(wj,x8o),e(s_,$8o),e(x,k8o),e(x,l_),e(l_,oce),e(oce,S8o),e(l_,R8o),e(l_,Aj),e(Aj,P8o),e(l_,B8o),e(x,I8o),e(x,i_),e(i_,rce),e(rce,N8o),e(i_,q8o),e(i_,Lj),e(Lj,j8o),e(i_,D8o),e(x,G8o),e(x,d_),e(d_,tce),e(tce,O8o),e(d_,V8o),e(d_,yj),e(yj,X8o),e(d_,z8o),e(x,W8o),e(x,c_),e(c_,ace),e(ace,Q8o),e(c_,H8o),e(c_,xj),e(xj,U8o),e(c_,J8o),e(x,Y8o),e(x,f_),e(f_,nce),e(nce,K8o),e(f_,Z8o),e(f_,$j),e($j,eMo),e(f_,oMo),e(x,rMo),e(x,m_),e(m_,sce),e(sce,tMo),e(m_,aMo),e(m_,kj),e(kj,nMo),e(m_,sMo),e(x,lMo),e(x,g_),e(g_,lce),e(lce,iMo),e(g_,dMo),e(g_,Sj),e(Sj,cMo),e(g_,fMo),e(x,mMo),e(x,h_),e(h_,ice),e(ice,gMo),e(h_,hMo),e(h_,Rj),e(Rj,pMo),e(h_,uMo),e(x,_Mo),e(x,p_),e(p_,dce),e(dce,bMo),e(p_,vMo),e(p_,Pj),e(Pj,FMo),e(p_,TMo),e(x,MMo),e(x,u_),e(u_,cce),e(cce,EMo),e(u_,CMo),e(u_,Bj),e(Bj,wMo),e(u_,AMo),e(x,LMo),e(x,__),e(__,fce),e(fce,yMo),e(__,xMo),e(__,Ij),e(Ij,$Mo),e(__,kMo),e(x,SMo),e(x,b_),e(b_,mce),e(mce,RMo),e(b_,PMo),e(b_,Nj),e(Nj,BMo),e(b_,IMo),e(x,NMo),e(x,v_),e(v_,gce),e(gce,qMo),e(v_,jMo),e(v_,qj),e(qj,DMo),e(v_,GMo),e(x,OMo),e(x,F_),e(F_,hce),e(hce,VMo),e(F_,XMo),e(F_,jj),e(jj,zMo),e(F_,WMo),e(x,QMo),e(x,T_),e(T_,pce),e(pce,HMo),e(T_,UMo),e(T_,Dj),e(Dj,JMo),e(T_,YMo),e(x,KMo),e(x,M_),e(M_,uce),e(uce,ZMo),e(M_,e4o),e(M_,Gj),e(Gj,o4o),e(M_,r4o),e(x,t4o),e(x,E_),e(E_,_ce),e(_ce,a4o),e(E_,n4o),e(E_,Oj),e(Oj,s4o),e(E_,l4o),e(x,i4o),e(x,C_),e(C_,bce),e(bce,d4o),e(C_,c4o),e(C_,Vj),e(Vj,f4o),e(C_,m4o),e(x,g4o),e(x,w_),e(w_,vce),e(vce,h4o),e(w_,p4o),e(w_,Xj),e(Xj,u4o),e(w_,_4o),e(x,b4o),e(x,A_),e(A_,Fce),e(Fce,v4o),e(A_,F4o),e(A_,zj),e(zj,T4o),e(A_,M4o),e(Je,E4o),e(Je,L_),e(L_,C4o),e(L_,Tce),e(Tce,w4o),e(L_,A4o),e(L_,Mce),e(Mce,L4o),e(Je,y4o),M(y_,Je,null),b(f,MGe,_),b(f,ji,_),e(ji,x_),e(x_,Ece),M(KA,Ece,null),e(ji,x4o),e(ji,Cce),e(Cce,$4o),b(f,EGe,_),b(f,$o,_),M(ZA,$o,null),e($o,k4o),e($o,Di),e(Di,S4o),e(Di,Wj),e(Wj,R4o),e(Di,P4o),e(Di,Qj),e(Qj,B4o),e(Di,I4o),e($o,N4o),e($o,eL),e(eL,q4o),e(eL,wce),e(wce,j4o),e(eL,D4o),e($o,G4o),e($o,lt),M(oL,lt,null),e(lt,O4o),e(lt,Ace),e(Ace,V4o),e(lt,X4o),e(lt,Gi),e(Gi,z4o),e(Gi,Lce),e(Lce,W4o),e(Gi,Q4o),e(Gi,Hj),e(Hj,H4o),e(Gi,U4o),e(lt,J4o),M($_,lt,null),e($o,Y4o),e($o,Ye),M(rL,Ye,null),e(Ye,K4o),e(Ye,yce),e(yce,Z4o),e(Ye,eEo),e(Ye,Pa),e(Pa,oEo),e(Pa,xce),e(xce,rEo),e(Pa,tEo),e(Pa,$ce),e($ce,aEo),e(Pa,nEo),e(Pa,kce),e(kce,sEo),e(Pa,lEo),e(Ye,iEo),e(Ye,G),e(G,k_),e(k_,Sce),e(Sce,dEo),e(k_,cEo),e(k_,Uj),e(Uj,fEo),e(k_,mEo),e(G,gEo),e(G,S_),e(S_,Rce),e(Rce,hEo),e(S_,pEo),e(S_,Jj),e(Jj,uEo),e(S_,_Eo),e(G,bEo),e(G,R_),e(R_,Pce),e(Pce,vEo),e(R_,FEo),e(R_,Yj),e(Yj,TEo),e(R_,MEo),e(G,EEo),e(G,P_),e(P_,Bce),e(Bce,CEo),e(P_,wEo),e(P_,Kj),e(Kj,AEo),e(P_,LEo),e(G,yEo),e(G,B_),e(B_,Ice),e(Ice,xEo),e(B_,$Eo),e(B_,Zj),e(Zj,kEo),e(B_,SEo),e(G,REo),e(G,I_),e(I_,Nce),e(Nce,PEo),e(I_,BEo),e(I_,eD),e(eD,IEo),e(I_,NEo),e(G,qEo),e(G,N_),e(N_,qce),e(qce,jEo),e(N_,DEo),e(N_,oD),e(oD,GEo),e(N_,OEo),e(G,VEo),e(G,q_),e(q_,jce),e(jce,XEo),e(q_,zEo),e(q_,rD),e(rD,WEo),e(q_,QEo),e(G,HEo),e(G,j_),e(j_,Dce),e(Dce,UEo),e(j_,JEo),e(j_,tD),e(tD,YEo),e(j_,KEo),e(G,ZEo),e(G,D_),e(D_,Gce),e(Gce,eCo),e(D_,oCo),e(D_,aD),e(aD,rCo),e(D_,tCo),e(G,aCo),e(G,G_),e(G_,Oce),e(Oce,nCo),e(G_,sCo),e(G_,nD),e(nD,lCo),e(G_,iCo),e(G,dCo),e(G,O_),e(O_,Vce),e(Vce,cCo),e(O_,fCo),e(O_,sD),e(sD,mCo),e(O_,gCo),e(G,hCo),e(G,V_),e(V_,Xce),e(Xce,pCo),e(V_,uCo),e(V_,lD),e(lD,_Co),e(V_,bCo),e(G,vCo),e(G,X_),e(X_,zce),e(zce,FCo),e(X_,TCo),e(X_,iD),e(iD,MCo),e(X_,ECo),e(G,CCo),e(G,z_),e(z_,Wce),e(Wce,wCo),e(z_,ACo),e(z_,dD),e(dD,LCo),e(z_,yCo),e(G,xCo),e(G,W_),e(W_,Qce),e(Qce,$Co),e(W_,kCo),e(W_,cD),e(cD,SCo),e(W_,RCo),e(G,PCo),e(G,Q_),e(Q_,Hce),e(Hce,BCo),e(Q_,ICo),e(Q_,fD),e(fD,NCo),e(Q_,qCo),e(G,jCo),e(G,H_),e(H_,Uce),e(Uce,DCo),e(H_,GCo),e(H_,mD),e(mD,OCo),e(H_,VCo),e(G,XCo),e(G,U_),e(U_,Jce),e(Jce,zCo),e(U_,WCo),e(U_,gD),e(gD,QCo),e(U_,HCo),e(G,UCo),e(G,J_),e(J_,Yce),e(Yce,JCo),e(J_,YCo),e(J_,hD),e(hD,KCo),e(J_,ZCo),e(G,e5o),e(G,Y_),e(Y_,Kce),e(Kce,o5o),e(Y_,r5o),e(Y_,pD),e(pD,t5o),e(Y_,a5o),e(G,n5o),e(G,K_),e(K_,Zce),e(Zce,s5o),e(K_,l5o),e(K_,uD),e(uD,i5o),e(K_,d5o),e(G,c5o),e(G,Z_),e(Z_,efe),e(efe,f5o),e(Z_,m5o),e(Z_,_D),e(_D,g5o),e(Z_,h5o),e(G,p5o),e(G,e1),e(e1,ofe),e(ofe,u5o),e(e1,_5o),e(e1,bD),e(bD,b5o),e(e1,v5o),e(G,F5o),e(G,o1),e(o1,rfe),e(rfe,T5o),e(o1,M5o),e(o1,vD),e(vD,E5o),e(o1,C5o),e(G,w5o),e(G,r1),e(r1,tfe),e(tfe,A5o),e(r1,L5o),e(r1,FD),e(FD,y5o),e(r1,x5o),e(G,$5o),e(G,t1),e(t1,afe),e(afe,k5o),e(t1,S5o),e(t1,TD),e(TD,R5o),e(t1,P5o),e(G,B5o),e(G,a1),e(a1,nfe),e(nfe,I5o),e(a1,N5o),e(a1,MD),e(MD,q5o),e(a1,j5o),e(G,D5o),e(G,n1),e(n1,sfe),e(sfe,G5o),e(n1,O5o),e(n1,ED),e(ED,V5o),e(n1,X5o),e(G,z5o),e(G,s1),e(s1,lfe),e(lfe,W5o),e(s1,Q5o),e(s1,CD),e(CD,H5o),e(s1,U5o),e(G,J5o),e(G,l1),e(l1,ife),e(ife,Y5o),e(l1,K5o),e(l1,wD),e(wD,Z5o),e(l1,e3o),e(G,o3o),e(G,i1),e(i1,dfe),e(dfe,r3o),e(i1,t3o),e(i1,AD),e(AD,a3o),e(i1,n3o),e(G,s3o),e(G,d1),e(d1,cfe),e(cfe,l3o),e(d1,i3o),e(d1,LD),e(LD,d3o),e(d1,c3o),e(G,f3o),e(G,c1),e(c1,ffe),e(ffe,m3o),e(c1,g3o),e(c1,yD),e(yD,h3o),e(c1,p3o),e(G,u3o),e(G,f1),e(f1,mfe),e(mfe,_3o),e(f1,b3o),e(f1,xD),e(xD,v3o),e(f1,F3o),e(G,T3o),e(G,m1),e(m1,gfe),e(gfe,M3o),e(m1,E3o),e(m1,$D),e($D,C3o),e(m1,w3o),e(G,A3o),e(G,g1),e(g1,hfe),e(hfe,L3o),e(g1,y3o),e(g1,kD),e(kD,x3o),e(g1,$3o),e(G,k3o),e(G,h1),e(h1,pfe),e(pfe,S3o),e(h1,R3o),e(h1,SD),e(SD,P3o),e(h1,B3o),e(G,I3o),e(G,p1),e(p1,ufe),e(ufe,N3o),e(p1,q3o),e(p1,RD),e(RD,j3o),e(p1,D3o),e(G,G3o),e(G,u1),e(u1,_fe),e(_fe,O3o),e(u1,V3o),e(u1,PD),e(PD,X3o),e(u1,z3o),e(G,W3o),e(G,_1),e(_1,bfe),e(bfe,Q3o),e(_1,H3o),e(_1,BD),e(BD,U3o),e(_1,J3o),e(G,Y3o),e(G,b1),e(b1,vfe),e(vfe,K3o),e(b1,Z3o),e(b1,ID),e(ID,ewo),e(b1,owo),e(G,rwo),e(G,v1),e(v1,Ffe),e(Ffe,two),e(v1,awo),e(v1,ND),e(ND,nwo),e(v1,swo),e(Ye,lwo),e(Ye,F1),e(F1,iwo),e(F1,Tfe),e(Tfe,dwo),e(F1,cwo),e(F1,Mfe),e(Mfe,fwo),e(Ye,mwo),M(T1,Ye,null),b(f,CGe,_),b(f,Oi,_),e(Oi,M1),e(M1,Efe),M(tL,Efe,null),e(Oi,gwo),e(Oi,Cfe),e(Cfe,hwo),b(f,wGe,_),b(f,ko,_),M(aL,ko,null),e(ko,pwo),e(ko,Vi),e(Vi,uwo),e(Vi,qD),e(qD,_wo),e(Vi,bwo),e(Vi,jD),e(jD,vwo),e(Vi,Fwo),e(ko,Two),e(ko,nL),e(nL,Mwo),e(nL,wfe),e(wfe,Ewo),e(nL,Cwo),e(ko,wwo),e(ko,it),M(sL,it,null),e(it,Awo),e(it,Afe),e(Afe,Lwo),e(it,ywo),e(it,Xi),e(Xi,xwo),e(Xi,Lfe),e(Lfe,$wo),e(Xi,kwo),e(Xi,DD),e(DD,Swo),e(Xi,Rwo),e(it,Pwo),M(E1,it,null),e(ko,Bwo),e(ko,Ke),M(lL,Ke,null),e(Ke,Iwo),e(Ke,yfe),e(yfe,Nwo),e(Ke,qwo),e(Ke,Ba),e(Ba,jwo),e(Ba,xfe),e(xfe,Dwo),e(Ba,Gwo),e(Ba,$fe),e($fe,Owo),e(Ba,Vwo),e(Ba,kfe),e(kfe,Xwo),e(Ba,zwo),e(Ke,Wwo),e(Ke,z),e(z,C1),e(C1,Sfe),e(Sfe,Qwo),e(C1,Hwo),e(C1,GD),e(GD,Uwo),e(C1,Jwo),e(z,Ywo),e(z,w1),e(w1,Rfe),e(Rfe,Kwo),e(w1,Zwo),e(w1,OD),e(OD,eAo),e(w1,oAo),e(z,rAo),e(z,A1),e(A1,Pfe),e(Pfe,tAo),e(A1,aAo),e(A1,VD),e(VD,nAo),e(A1,sAo),e(z,lAo),e(z,L1),e(L1,Bfe),e(Bfe,iAo),e(L1,dAo),e(L1,XD),e(XD,cAo),e(L1,fAo),e(z,mAo),e(z,y1),e(y1,Ife),e(Ife,gAo),e(y1,hAo),e(y1,zD),e(zD,pAo),e(y1,uAo),e(z,_Ao),e(z,x1),e(x1,Nfe),e(Nfe,bAo),e(x1,vAo),e(x1,WD),e(WD,FAo),e(x1,TAo),e(z,MAo),e(z,$1),e($1,qfe),e(qfe,EAo),e($1,CAo),e($1,QD),e(QD,wAo),e($1,AAo),e(z,LAo),e(z,k1),e(k1,jfe),e(jfe,yAo),e(k1,xAo),e(k1,HD),e(HD,$Ao),e(k1,kAo),e(z,SAo),e(z,S1),e(S1,Dfe),e(Dfe,RAo),e(S1,PAo),e(S1,UD),e(UD,BAo),e(S1,IAo),e(z,NAo),e(z,R1),e(R1,Gfe),e(Gfe,qAo),e(R1,jAo),e(R1,JD),e(JD,DAo),e(R1,GAo),e(z,OAo),e(z,P1),e(P1,Ofe),e(Ofe,VAo),e(P1,XAo),e(P1,YD),e(YD,zAo),e(P1,WAo),e(z,QAo),e(z,B1),e(B1,Vfe),e(Vfe,HAo),e(B1,UAo),e(B1,KD),e(KD,JAo),e(B1,YAo),e(z,KAo),e(z,I1),e(I1,Xfe),e(Xfe,ZAo),e(I1,eLo),e(I1,ZD),e(ZD,oLo),e(I1,rLo),e(z,tLo),e(z,N1),e(N1,zfe),e(zfe,aLo),e(N1,nLo),e(N1,eG),e(eG,sLo),e(N1,lLo),e(z,iLo),e(z,q1),e(q1,Wfe),e(Wfe,dLo),e(q1,cLo),e(q1,oG),e(oG,fLo),e(q1,mLo),e(z,gLo),e(z,j1),e(j1,Qfe),e(Qfe,hLo),e(j1,pLo),e(j1,rG),e(rG,uLo),e(j1,_Lo),e(z,bLo),e(z,D1),e(D1,Hfe),e(Hfe,vLo),e(D1,FLo),e(D1,tG),e(tG,TLo),e(D1,MLo),e(z,ELo),e(z,G1),e(G1,Ufe),e(Ufe,CLo),e(G1,wLo),e(G1,aG),e(aG,ALo),e(G1,LLo),e(z,yLo),e(z,O1),e(O1,Jfe),e(Jfe,xLo),e(O1,$Lo),e(O1,nG),e(nG,kLo),e(O1,SLo),e(z,RLo),e(z,V1),e(V1,Yfe),e(Yfe,PLo),e(V1,BLo),e(V1,sG),e(sG,ILo),e(V1,NLo),e(z,qLo),e(z,X1),e(X1,Kfe),e(Kfe,jLo),e(X1,DLo),e(X1,lG),e(lG,GLo),e(X1,OLo),e(z,VLo),e(z,z1),e(z1,Zfe),e(Zfe,XLo),e(z1,zLo),e(z1,iG),e(iG,WLo),e(z1,QLo),e(z,HLo),e(z,W1),e(W1,eme),e(eme,ULo),e(W1,JLo),e(W1,dG),e(dG,YLo),e(W1,KLo),e(z,ZLo),e(z,Q1),e(Q1,ome),e(ome,eyo),e(Q1,oyo),e(Q1,cG),e(cG,ryo),e(Q1,tyo),e(z,ayo),e(z,H1),e(H1,rme),e(rme,nyo),e(H1,syo),e(H1,fG),e(fG,lyo),e(H1,iyo),e(z,dyo),e(z,U1),e(U1,tme),e(tme,cyo),e(U1,fyo),e(U1,mG),e(mG,myo),e(U1,gyo),e(z,hyo),e(z,J1),e(J1,ame),e(ame,pyo),e(J1,uyo),e(J1,gG),e(gG,_yo),e(J1,byo),e(z,vyo),e(z,Y1),e(Y1,nme),e(nme,Fyo),e(Y1,Tyo),e(Y1,hG),e(hG,Myo),e(Y1,Eyo),e(z,Cyo),e(z,K1),e(K1,sme),e(sme,wyo),e(K1,Ayo),e(K1,pG),e(pG,Lyo),e(K1,yyo),e(z,xyo),e(z,Z1),e(Z1,lme),e(lme,$yo),e(Z1,kyo),e(Z1,uG),e(uG,Syo),e(Z1,Ryo),e(z,Pyo),e(z,e2),e(e2,ime),e(ime,Byo),e(e2,Iyo),e(e2,_G),e(_G,Nyo),e(e2,qyo),e(z,jyo),e(z,o2),e(o2,dme),e(dme,Dyo),e(o2,Gyo),e(o2,bG),e(bG,Oyo),e(o2,Vyo),e(z,Xyo),e(z,r2),e(r2,cme),e(cme,zyo),e(r2,Wyo),e(r2,vG),e(vG,Qyo),e(r2,Hyo),e(z,Uyo),e(z,t2),e(t2,fme),e(fme,Jyo),e(t2,Yyo),e(t2,FG),e(FG,Kyo),e(t2,Zyo),e(z,e9o),e(z,a2),e(a2,mme),e(mme,o9o),e(a2,r9o),e(a2,TG),e(TG,t9o),e(a2,a9o),e(z,n9o),e(z,n2),e(n2,gme),e(gme,s9o),e(n2,l9o),e(n2,MG),e(MG,i9o),e(n2,d9o),e(z,c9o),e(z,s2),e(s2,hme),e(hme,f9o),e(s2,m9o),e(s2,EG),e(EG,g9o),e(s2,h9o),e(z,p9o),e(z,l2),e(l2,pme),e(pme,u9o),e(l2,_9o),e(l2,CG),e(CG,b9o),e(l2,v9o),e(Ke,F9o),e(Ke,i2),e(i2,T9o),e(i2,ume),e(ume,M9o),e(i2,E9o),e(i2,_me),e(_me,C9o),e(Ke,w9o),M(d2,Ke,null),b(f,AGe,_),b(f,zi,_),e(zi,c2),e(c2,bme),M(iL,bme,null),e(zi,A9o),e(zi,vme),e(vme,L9o),b(f,LGe,_),b(f,So,_),M(dL,So,null),e(So,y9o),e(So,Wi),e(Wi,x9o),e(Wi,wG),e(wG,$9o),e(Wi,k9o),e(Wi,AG),e(AG,S9o),e(Wi,R9o),e(So,P9o),e(So,cL),e(cL,B9o),e(cL,Fme),e(Fme,I9o),e(cL,N9o),e(So,q9o),e(So,dt),M(fL,dt,null),e(dt,j9o),e(dt,Tme),e(Tme,D9o),e(dt,G9o),e(dt,Qi),e(Qi,O9o),e(Qi,Mme),e(Mme,V9o),e(Qi,X9o),e(Qi,LG),e(LG,z9o),e(Qi,W9o),e(dt,Q9o),M(f2,dt,null),e(So,H9o),e(So,Ze),M(mL,Ze,null),e(Ze,U9o),e(Ze,Eme),e(Eme,J9o),e(Ze,Y9o),e(Ze,Ia),e(Ia,K9o),e(Ia,Cme),e(Cme,Z9o),e(Ia,exo),e(Ia,wme),e(wme,oxo),e(Ia,rxo),e(Ia,Ame),e(Ame,txo),e(Ia,axo),e(Ze,nxo),e(Ze,Q),e(Q,m2),e(m2,Lme),e(Lme,sxo),e(m2,lxo),e(m2,yG),e(yG,ixo),e(m2,dxo),e(Q,cxo),e(Q,g2),e(g2,yme),e(yme,fxo),e(g2,mxo),e(g2,xG),e(xG,gxo),e(g2,hxo),e(Q,pxo),e(Q,h2),e(h2,xme),e(xme,uxo),e(h2,_xo),e(h2,$G),e($G,bxo),e(h2,vxo),e(Q,Fxo),e(Q,p2),e(p2,$me),e($me,Txo),e(p2,Mxo),e(p2,kG),e(kG,Exo),e(p2,Cxo),e(Q,wxo),e(Q,u2),e(u2,kme),e(kme,Axo),e(u2,Lxo),e(u2,SG),e(SG,yxo),e(u2,xxo),e(Q,$xo),e(Q,_2),e(_2,Sme),e(Sme,kxo),e(_2,Sxo),e(_2,RG),e(RG,Rxo),e(_2,Pxo),e(Q,Bxo),e(Q,b2),e(b2,Rme),e(Rme,Ixo),e(b2,Nxo),e(b2,PG),e(PG,qxo),e(b2,jxo),e(Q,Dxo),e(Q,v2),e(v2,Pme),e(Pme,Gxo),e(v2,Oxo),e(v2,BG),e(BG,Vxo),e(v2,Xxo),e(Q,zxo),e(Q,F2),e(F2,Bme),e(Bme,Wxo),e(F2,Qxo),e(F2,IG),e(IG,Hxo),e(F2,Uxo),e(Q,Jxo),e(Q,T2),e(T2,Ime),e(Ime,Yxo),e(T2,Kxo),e(T2,NG),e(NG,Zxo),e(T2,e$o),e(Q,o$o),e(Q,M2),e(M2,Nme),e(Nme,r$o),e(M2,t$o),e(M2,qG),e(qG,a$o),e(M2,n$o),e(Q,s$o),e(Q,E2),e(E2,qme),e(qme,l$o),e(E2,i$o),e(E2,jG),e(jG,d$o),e(E2,c$o),e(Q,f$o),e(Q,C2),e(C2,jme),e(jme,m$o),e(C2,g$o),e(C2,DG),e(DG,h$o),e(C2,p$o),e(Q,u$o),e(Q,w2),e(w2,Dme),e(Dme,_$o),e(w2,b$o),e(w2,GG),e(GG,v$o),e(w2,F$o),e(Q,T$o),e(Q,A2),e(A2,Gme),e(Gme,M$o),e(A2,E$o),e(A2,OG),e(OG,C$o),e(A2,w$o),e(Q,A$o),e(Q,L2),e(L2,Ome),e(Ome,L$o),e(L2,y$o),e(L2,VG),e(VG,x$o),e(L2,$$o),e(Q,k$o),e(Q,y2),e(y2,Vme),e(Vme,S$o),e(y2,R$o),e(y2,XG),e(XG,P$o),e(y2,B$o),e(Q,I$o),e(Q,x2),e(x2,Xme),e(Xme,N$o),e(x2,q$o),e(x2,zG),e(zG,j$o),e(x2,D$o),e(Q,G$o),e(Q,$2),e($2,zme),e(zme,O$o),e($2,V$o),e($2,WG),e(WG,X$o),e($2,z$o),e(Q,W$o),e(Q,k2),e(k2,Wme),e(Wme,Q$o),e(k2,H$o),e(k2,QG),e(QG,U$o),e(k2,J$o),e(Q,Y$o),e(Q,S2),e(S2,Qme),e(Qme,K$o),e(S2,Z$o),e(S2,HG),e(HG,eko),e(S2,oko),e(Q,rko),e(Q,R2),e(R2,Hme),e(Hme,tko),e(R2,ako),e(R2,UG),e(UG,nko),e(R2,sko),e(Q,lko),e(Q,P2),e(P2,Ume),e(Ume,iko),e(P2,dko),e(P2,JG),e(JG,cko),e(P2,fko),e(Q,mko),e(Q,B2),e(B2,Jme),e(Jme,gko),e(B2,hko),e(B2,YG),e(YG,pko),e(B2,uko),e(Q,_ko),e(Q,I2),e(I2,Yme),e(Yme,bko),e(I2,vko),e(I2,KG),e(KG,Fko),e(I2,Tko),e(Q,Mko),e(Q,N2),e(N2,Kme),e(Kme,Eko),e(N2,Cko),e(N2,ZG),e(ZG,wko),e(N2,Ako),e(Q,Lko),e(Q,q2),e(q2,Zme),e(Zme,yko),e(q2,xko),e(q2,eO),e(eO,$ko),e(q2,kko),e(Q,Sko),e(Q,j2),e(j2,ege),e(ege,Rko),e(j2,Pko),e(j2,oO),e(oO,Bko),e(j2,Iko),e(Q,Nko),e(Q,D2),e(D2,oge),e(oge,qko),e(D2,jko),e(D2,rO),e(rO,Dko),e(D2,Gko),e(Q,Oko),e(Q,G2),e(G2,rge),e(rge,Vko),e(G2,Xko),e(G2,tO),e(tO,zko),e(G2,Wko),e(Q,Qko),e(Q,O2),e(O2,tge),e(tge,Hko),e(O2,Uko),e(O2,aO),e(aO,Jko),e(O2,Yko),e(Q,Kko),e(Q,V2),e(V2,age),e(age,Zko),e(V2,eSo),e(V2,nge),e(nge,oSo),e(V2,rSo),e(Q,tSo),e(Q,X2),e(X2,sge),e(sge,aSo),e(X2,nSo),e(X2,nO),e(nO,sSo),e(X2,lSo),e(Q,iSo),e(Q,z2),e(z2,lge),e(lge,dSo),e(z2,cSo),e(z2,sO),e(sO,fSo),e(z2,mSo),e(Q,gSo),e(Q,W2),e(W2,ige),e(ige,hSo),e(W2,pSo),e(W2,lO),e(lO,uSo),e(W2,_So),e(Q,bSo),e(Q,Q2),e(Q2,dge),e(dge,vSo),e(Q2,FSo),e(Q2,iO),e(iO,TSo),e(Q2,MSo),e(Ze,ESo),e(Ze,H2),e(H2,CSo),e(H2,cge),e(cge,wSo),e(H2,ASo),e(H2,fge),e(fge,LSo),e(Ze,ySo),M(U2,Ze,null),b(f,yGe,_),b(f,Hi,_),e(Hi,J2),e(J2,mge),M(gL,mge,null),e(Hi,xSo),e(Hi,gge),e(gge,$So),b(f,xGe,_),b(f,Ro,_),M(hL,Ro,null),e(Ro,kSo),e(Ro,Ui),e(Ui,SSo),e(Ui,dO),e(dO,RSo),e(Ui,PSo),e(Ui,cO),e(cO,BSo),e(Ui,ISo),e(Ro,NSo),e(Ro,pL),e(pL,qSo),e(pL,hge),e(hge,jSo),e(pL,DSo),e(Ro,GSo),e(Ro,ct),M(uL,ct,null),e(ct,OSo),e(ct,pge),e(pge,VSo),e(ct,XSo),e(ct,Ji),e(Ji,zSo),e(Ji,uge),e(uge,WSo),e(Ji,QSo),e(Ji,fO),e(fO,HSo),e(Ji,USo),e(ct,JSo),M(Y2,ct,null),e(Ro,YSo),e(Ro,eo),M(_L,eo,null),e(eo,KSo),e(eo,_ge),e(_ge,ZSo),e(eo,eRo),e(eo,Na),e(Na,oRo),e(Na,bge),e(bge,rRo),e(Na,tRo),e(Na,vge),e(vge,aRo),e(Na,nRo),e(Na,Fge),e(Fge,sRo),e(Na,lRo),e(eo,iRo),e(eo,pe),e(pe,K2),e(K2,Tge),e(Tge,dRo),e(K2,cRo),e(K2,mO),e(mO,fRo),e(K2,mRo),e(pe,gRo),e(pe,Z2),e(Z2,Mge),e(Mge,hRo),e(Z2,pRo),e(Z2,gO),e(gO,uRo),e(Z2,_Ro),e(pe,bRo),e(pe,eb),e(eb,Ege),e(Ege,vRo),e(eb,FRo),e(eb,hO),e(hO,TRo),e(eb,MRo),e(pe,ERo),e(pe,ob),e(ob,Cge),e(Cge,CRo),e(ob,wRo),e(ob,pO),e(pO,ARo),e(ob,LRo),e(pe,yRo),e(pe,rb),e(rb,wge),e(wge,xRo),e(rb,$Ro),e(rb,uO),e(uO,kRo),e(rb,SRo),e(pe,RRo),e(pe,tb),e(tb,Age),e(Age,PRo),e(tb,BRo),e(tb,_O),e(_O,IRo),e(tb,NRo),e(pe,qRo),e(pe,ab),e(ab,Lge),e(Lge,jRo),e(ab,DRo),e(ab,bO),e(bO,GRo),e(ab,ORo),e(pe,VRo),e(pe,nb),e(nb,yge),e(yge,XRo),e(nb,zRo),e(nb,vO),e(vO,WRo),e(nb,QRo),e(pe,HRo),e(pe,sb),e(sb,xge),e(xge,URo),e(sb,JRo),e(sb,FO),e(FO,YRo),e(sb,KRo),e(pe,ZRo),e(pe,lb),e(lb,$ge),e($ge,ePo),e(lb,oPo),e(lb,TO),e(TO,rPo),e(lb,tPo),e(pe,aPo),e(pe,ib),e(ib,kge),e(kge,nPo),e(ib,sPo),e(ib,MO),e(MO,lPo),e(ib,iPo),e(pe,dPo),e(pe,db),e(db,Sge),e(Sge,cPo),e(db,fPo),e(db,EO),e(EO,mPo),e(db,gPo),e(pe,hPo),e(pe,cb),e(cb,Rge),e(Rge,pPo),e(cb,uPo),e(cb,CO),e(CO,_Po),e(cb,bPo),e(pe,vPo),e(pe,fb),e(fb,Pge),e(Pge,FPo),e(fb,TPo),e(fb,wO),e(wO,MPo),e(fb,EPo),e(pe,CPo),e(pe,mb),e(mb,Bge),e(Bge,wPo),e(mb,APo),e(mb,AO),e(AO,LPo),e(mb,yPo),e(pe,xPo),e(pe,gb),e(gb,Ige),e(Ige,$Po),e(gb,kPo),e(gb,LO),e(LO,SPo),e(gb,RPo),e(pe,PPo),e(pe,hb),e(hb,Nge),e(Nge,BPo),e(hb,IPo),e(hb,yO),e(yO,NPo),e(hb,qPo),e(eo,jPo),e(eo,pb),e(pb,DPo),e(pb,qge),e(qge,GPo),e(pb,OPo),e(pb,jge),e(jge,VPo),e(eo,XPo),M(ub,eo,null),b(f,$Ge,_),b(f,Yi,_),e(Yi,_b),e(_b,Dge),M(bL,Dge,null),e(Yi,zPo),e(Yi,Gge),e(Gge,WPo),b(f,kGe,_),b(f,Po,_),M(vL,Po,null),e(Po,QPo),e(Po,Ki),e(Ki,HPo),e(Ki,xO),e(xO,UPo),e(Ki,JPo),e(Ki,$O),e($O,YPo),e(Ki,KPo),e(Po,ZPo),e(Po,FL),e(FL,eBo),e(FL,Oge),e(Oge,oBo),e(FL,rBo),e(Po,tBo),e(Po,ft),M(TL,ft,null),e(ft,aBo),e(ft,Vge),e(Vge,nBo),e(ft,sBo),e(ft,Zi),e(Zi,lBo),e(Zi,Xge),e(Xge,iBo),e(Zi,dBo),e(Zi,kO),e(kO,cBo),e(Zi,fBo),e(ft,mBo),M(bb,ft,null),e(Po,gBo),e(Po,oo),M(ML,oo,null),e(oo,hBo),e(oo,zge),e(zge,pBo),e(oo,uBo),e(oo,qa),e(qa,_Bo),e(qa,Wge),e(Wge,bBo),e(qa,vBo),e(qa,Qge),e(Qge,FBo),e(qa,TBo),e(qa,Hge),e(Hge,MBo),e(qa,EBo),e(oo,CBo),e(oo,N),e(N,vb),e(vb,Uge),e(Uge,wBo),e(vb,ABo),e(vb,SO),e(SO,LBo),e(vb,yBo),e(N,xBo),e(N,Fb),e(Fb,Jge),e(Jge,$Bo),e(Fb,kBo),e(Fb,RO),e(RO,SBo),e(Fb,RBo),e(N,PBo),e(N,Tb),e(Tb,Yge),e(Yge,BBo),e(Tb,IBo),e(Tb,PO),e(PO,NBo),e(Tb,qBo),e(N,jBo),e(N,Mb),e(Mb,Kge),e(Kge,DBo),e(Mb,GBo),e(Mb,BO),e(BO,OBo),e(Mb,VBo),e(N,XBo),e(N,Eb),e(Eb,Zge),e(Zge,zBo),e(Eb,WBo),e(Eb,IO),e(IO,QBo),e(Eb,HBo),e(N,UBo),e(N,Cb),e(Cb,ehe),e(ehe,JBo),e(Cb,YBo),e(Cb,NO),e(NO,KBo),e(Cb,ZBo),e(N,eIo),e(N,wb),e(wb,ohe),e(ohe,oIo),e(wb,rIo),e(wb,qO),e(qO,tIo),e(wb,aIo),e(N,nIo),e(N,Ab),e(Ab,rhe),e(rhe,sIo),e(Ab,lIo),e(Ab,jO),e(jO,iIo),e(Ab,dIo),e(N,cIo),e(N,Lb),e(Lb,the),e(the,fIo),e(Lb,mIo),e(Lb,DO),e(DO,gIo),e(Lb,hIo),e(N,pIo),e(N,yb),e(yb,ahe),e(ahe,uIo),e(yb,_Io),e(yb,GO),e(GO,bIo),e(yb,vIo),e(N,FIo),e(N,xb),e(xb,nhe),e(nhe,TIo),e(xb,MIo),e(xb,OO),e(OO,EIo),e(xb,CIo),e(N,wIo),e(N,$b),e($b,she),e(she,AIo),e($b,LIo),e($b,VO),e(VO,yIo),e($b,xIo),e(N,$Io),e(N,kb),e(kb,lhe),e(lhe,kIo),e(kb,SIo),e(kb,XO),e(XO,RIo),e(kb,PIo),e(N,BIo),e(N,Sb),e(Sb,ihe),e(ihe,IIo),e(Sb,NIo),e(Sb,zO),e(zO,qIo),e(Sb,jIo),e(N,DIo),e(N,Rb),e(Rb,dhe),e(dhe,GIo),e(Rb,OIo),e(Rb,WO),e(WO,VIo),e(Rb,XIo),e(N,zIo),e(N,Pb),e(Pb,che),e(che,WIo),e(Pb,QIo),e(Pb,QO),e(QO,HIo),e(Pb,UIo),e(N,JIo),e(N,Bb),e(Bb,fhe),e(fhe,YIo),e(Bb,KIo),e(Bb,HO),e(HO,ZIo),e(Bb,eNo),e(N,oNo),e(N,Ib),e(Ib,mhe),e(mhe,rNo),e(Ib,tNo),e(Ib,UO),e(UO,aNo),e(Ib,nNo),e(N,sNo),e(N,Nb),e(Nb,ghe),e(ghe,lNo),e(Nb,iNo),e(Nb,JO),e(JO,dNo),e(Nb,cNo),e(N,fNo),e(N,qb),e(qb,hhe),e(hhe,mNo),e(qb,gNo),e(qb,YO),e(YO,hNo),e(qb,pNo),e(N,uNo),e(N,jb),e(jb,phe),e(phe,_No),e(jb,bNo),e(jb,KO),e(KO,vNo),e(jb,FNo),e(N,TNo),e(N,Db),e(Db,uhe),e(uhe,MNo),e(Db,ENo),e(Db,ZO),e(ZO,CNo),e(Db,wNo),e(N,ANo),e(N,Gb),e(Gb,_he),e(_he,LNo),e(Gb,yNo),e(Gb,eV),e(eV,xNo),e(Gb,$No),e(N,kNo),e(N,Ob),e(Ob,bhe),e(bhe,SNo),e(Ob,RNo),e(Ob,oV),e(oV,PNo),e(Ob,BNo),e(N,INo),e(N,Vb),e(Vb,vhe),e(vhe,NNo),e(Vb,qNo),e(Vb,rV),e(rV,jNo),e(Vb,DNo),e(N,GNo),e(N,Xb),e(Xb,Fhe),e(Fhe,ONo),e(Xb,VNo),e(Xb,tV),e(tV,XNo),e(Xb,zNo),e(N,WNo),e(N,zb),e(zb,The),e(The,QNo),e(zb,HNo),e(zb,aV),e(aV,UNo),e(zb,JNo),e(N,YNo),e(N,Wb),e(Wb,Mhe),e(Mhe,KNo),e(Wb,ZNo),e(Wb,nV),e(nV,eqo),e(Wb,oqo),e(N,rqo),e(N,Qb),e(Qb,Ehe),e(Ehe,tqo),e(Qb,aqo),e(Qb,sV),e(sV,nqo),e(Qb,sqo),e(N,lqo),e(N,Hb),e(Hb,Che),e(Che,iqo),e(Hb,dqo),e(Hb,lV),e(lV,cqo),e(Hb,fqo),e(N,mqo),e(N,Ub),e(Ub,whe),e(whe,gqo),e(Ub,hqo),e(Ub,iV),e(iV,pqo),e(Ub,uqo),e(N,_qo),e(N,Jb),e(Jb,Ahe),e(Ahe,bqo),e(Jb,vqo),e(Jb,dV),e(dV,Fqo),e(Jb,Tqo),e(N,Mqo),e(N,Yb),e(Yb,Lhe),e(Lhe,Eqo),e(Yb,Cqo),e(Yb,cV),e(cV,wqo),e(Yb,Aqo),e(N,Lqo),e(N,Kb),e(Kb,yhe),e(yhe,yqo),e(Kb,xqo),e(Kb,fV),e(fV,$qo),e(Kb,kqo),e(N,Sqo),e(N,Zb),e(Zb,xhe),e(xhe,Rqo),e(Zb,Pqo),e(Zb,mV),e(mV,Bqo),e(Zb,Iqo),e(N,Nqo),e(N,ev),e(ev,$he),e($he,qqo),e(ev,jqo),e(ev,gV),e(gV,Dqo),e(ev,Gqo),e(N,Oqo),e(N,ov),e(ov,khe),e(khe,Vqo),e(ov,Xqo),e(ov,hV),e(hV,zqo),e(ov,Wqo),e(N,Qqo),e(N,rv),e(rv,She),e(She,Hqo),e(rv,Uqo),e(rv,pV),e(pV,Jqo),e(rv,Yqo),e(N,Kqo),e(N,tv),e(tv,Rhe),e(Rhe,Zqo),e(tv,ejo),e(tv,uV),e(uV,ojo),e(tv,rjo),e(N,tjo),e(N,av),e(av,Phe),e(Phe,ajo),e(av,njo),e(av,_V),e(_V,sjo),e(av,ljo),e(N,ijo),e(N,nv),e(nv,Bhe),e(Bhe,djo),e(nv,cjo),e(nv,bV),e(bV,fjo),e(nv,mjo),e(N,gjo),e(N,sv),e(sv,Ihe),e(Ihe,hjo),e(sv,pjo),e(sv,vV),e(vV,ujo),e(sv,_jo),e(N,bjo),e(N,lv),e(lv,Nhe),e(Nhe,vjo),e(lv,Fjo),e(lv,FV),e(FV,Tjo),e(lv,Mjo),e(N,Ejo),e(N,iv),e(iv,qhe),e(qhe,Cjo),e(iv,wjo),e(iv,TV),e(TV,Ajo),e(iv,Ljo),e(N,yjo),e(N,dv),e(dv,jhe),e(jhe,xjo),e(dv,$jo),e(dv,MV),e(MV,kjo),e(dv,Sjo),e(N,Rjo),e(N,cv),e(cv,Dhe),e(Dhe,Pjo),e(cv,Bjo),e(cv,EV),e(EV,Ijo),e(cv,Njo),e(N,qjo),e(N,fv),e(fv,Ghe),e(Ghe,jjo),e(fv,Djo),e(fv,CV),e(CV,Gjo),e(fv,Ojo),e(N,Vjo),e(N,mv),e(mv,Ohe),e(Ohe,Xjo),e(mv,zjo),e(mv,wV),e(wV,Wjo),e(mv,Qjo),e(oo,Hjo),e(oo,gv),e(gv,Ujo),e(gv,Vhe),e(Vhe,Jjo),e(gv,Yjo),e(gv,Xhe),e(Xhe,Kjo),e(oo,Zjo),M(hv,oo,null),b(f,SGe,_),b(f,ed,_),e(ed,pv),e(pv,zhe),M(EL,zhe,null),e(ed,eDo),e(ed,Whe),e(Whe,oDo),b(f,RGe,_),b(f,Bo,_),M(CL,Bo,null),e(Bo,rDo),e(Bo,od),e(od,tDo),e(od,AV),e(AV,aDo),e(od,nDo),e(od,LV),e(LV,sDo),e(od,lDo),e(Bo,iDo),e(Bo,wL),e(wL,dDo),e(wL,Qhe),e(Qhe,cDo),e(wL,fDo),e(Bo,mDo),e(Bo,mt),M(AL,mt,null),e(mt,gDo),e(mt,Hhe),e(Hhe,hDo),e(mt,pDo),e(mt,rd),e(rd,uDo),e(rd,Uhe),e(Uhe,_Do),e(rd,bDo),e(rd,yV),e(yV,vDo),e(rd,FDo),e(mt,TDo),M(uv,mt,null),e(Bo,MDo),e(Bo,ro),M(LL,ro,null),e(ro,EDo),e(ro,Jhe),e(Jhe,CDo),e(ro,wDo),e(ro,ja),e(ja,ADo),e(ja,Yhe),e(Yhe,LDo),e(ja,yDo),e(ja,Khe),e(Khe,xDo),e(ja,$Do),e(ja,Zhe),e(Zhe,kDo),e(ja,SDo),e(ro,RDo),e(ro,Z),e(Z,_v),e(_v,epe),e(epe,PDo),e(_v,BDo),e(_v,xV),e(xV,IDo),e(_v,NDo),e(Z,qDo),e(Z,bv),e(bv,ope),e(ope,jDo),e(bv,DDo),e(bv,$V),e($V,GDo),e(bv,ODo),e(Z,VDo),e(Z,vv),e(vv,rpe),e(rpe,XDo),e(vv,zDo),e(vv,kV),e(kV,WDo),e(vv,QDo),e(Z,HDo),e(Z,Fv),e(Fv,tpe),e(tpe,UDo),e(Fv,JDo),e(Fv,SV),e(SV,YDo),e(Fv,KDo),e(Z,ZDo),e(Z,Tv),e(Tv,ape),e(ape,eGo),e(Tv,oGo),e(Tv,RV),e(RV,rGo),e(Tv,tGo),e(Z,aGo),e(Z,Mv),e(Mv,npe),e(npe,nGo),e(Mv,sGo),e(Mv,PV),e(PV,lGo),e(Mv,iGo),e(Z,dGo),e(Z,Ev),e(Ev,spe),e(spe,cGo),e(Ev,fGo),e(Ev,BV),e(BV,mGo),e(Ev,gGo),e(Z,hGo),e(Z,Cv),e(Cv,lpe),e(lpe,pGo),e(Cv,uGo),e(Cv,IV),e(IV,_Go),e(Cv,bGo),e(Z,vGo),e(Z,wv),e(wv,ipe),e(ipe,FGo),e(wv,TGo),e(wv,NV),e(NV,MGo),e(wv,EGo),e(Z,CGo),e(Z,Av),e(Av,dpe),e(dpe,wGo),e(Av,AGo),e(Av,qV),e(qV,LGo),e(Av,yGo),e(Z,xGo),e(Z,Lv),e(Lv,cpe),e(cpe,$Go),e(Lv,kGo),e(Lv,jV),e(jV,SGo),e(Lv,RGo),e(Z,PGo),e(Z,yv),e(yv,fpe),e(fpe,BGo),e(yv,IGo),e(yv,DV),e(DV,NGo),e(yv,qGo),e(Z,jGo),e(Z,xv),e(xv,mpe),e(mpe,DGo),e(xv,GGo),e(xv,GV),e(GV,OGo),e(xv,VGo),e(Z,XGo),e(Z,$v),e($v,gpe),e(gpe,zGo),e($v,WGo),e($v,OV),e(OV,QGo),e($v,HGo),e(Z,UGo),e(Z,kv),e(kv,hpe),e(hpe,JGo),e(kv,YGo),e(kv,VV),e(VV,KGo),e(kv,ZGo),e(Z,eOo),e(Z,Sv),e(Sv,ppe),e(ppe,oOo),e(Sv,rOo),e(Sv,XV),e(XV,tOo),e(Sv,aOo),e(Z,nOo),e(Z,Rv),e(Rv,upe),e(upe,sOo),e(Rv,lOo),e(Rv,zV),e(zV,iOo),e(Rv,dOo),e(Z,cOo),e(Z,Pv),e(Pv,_pe),e(_pe,fOo),e(Pv,mOo),e(Pv,WV),e(WV,gOo),e(Pv,hOo),e(Z,pOo),e(Z,Bv),e(Bv,bpe),e(bpe,uOo),e(Bv,_Oo),e(Bv,QV),e(QV,bOo),e(Bv,vOo),e(Z,FOo),e(Z,Iv),e(Iv,vpe),e(vpe,TOo),e(Iv,MOo),e(Iv,HV),e(HV,EOo),e(Iv,COo),e(Z,wOo),e(Z,Nv),e(Nv,Fpe),e(Fpe,AOo),e(Nv,LOo),e(Nv,UV),e(UV,yOo),e(Nv,xOo),e(Z,$Oo),e(Z,qv),e(qv,Tpe),e(Tpe,kOo),e(qv,SOo),e(qv,JV),e(JV,ROo),e(qv,POo),e(Z,BOo),e(Z,jv),e(jv,Mpe),e(Mpe,IOo),e(jv,NOo),e(jv,YV),e(YV,qOo),e(jv,jOo),e(Z,DOo),e(Z,Dv),e(Dv,Epe),e(Epe,GOo),e(Dv,OOo),e(Dv,KV),e(KV,VOo),e(Dv,XOo),e(Z,zOo),e(Z,Gv),e(Gv,Cpe),e(Cpe,WOo),e(Gv,QOo),e(Gv,ZV),e(ZV,HOo),e(Gv,UOo),e(Z,JOo),e(Z,Ov),e(Ov,wpe),e(wpe,YOo),e(Ov,KOo),e(Ov,eX),e(eX,ZOo),e(Ov,eVo),e(Z,oVo),e(Z,Vv),e(Vv,Ape),e(Ape,rVo),e(Vv,tVo),e(Vv,oX),e(oX,aVo),e(Vv,nVo),e(Z,sVo),e(Z,Xv),e(Xv,Lpe),e(Lpe,lVo),e(Xv,iVo),e(Xv,rX),e(rX,dVo),e(Xv,cVo),e(Z,fVo),e(Z,zv),e(zv,ype),e(ype,mVo),e(zv,gVo),e(zv,tX),e(tX,hVo),e(zv,pVo),e(ro,uVo),e(ro,Wv),e(Wv,_Vo),e(Wv,xpe),e(xpe,bVo),e(Wv,vVo),e(Wv,$pe),e($pe,FVo),e(ro,TVo),M(Qv,ro,null),b(f,PGe,_),b(f,td,_),e(td,Hv),e(Hv,kpe),M(yL,kpe,null),e(td,MVo),e(td,Spe),e(Spe,EVo),b(f,BGe,_),b(f,Io,_),M(xL,Io,null),e(Io,CVo),e(Io,ad),e(ad,wVo),e(ad,aX),e(aX,AVo),e(ad,LVo),e(ad,nX),e(nX,yVo),e(ad,xVo),e(Io,$Vo),e(Io,$L),e($L,kVo),e($L,Rpe),e(Rpe,SVo),e($L,RVo),e(Io,PVo),e(Io,gt),M(kL,gt,null),e(gt,BVo),e(gt,Ppe),e(Ppe,IVo),e(gt,NVo),e(gt,nd),e(nd,qVo),e(nd,Bpe),e(Bpe,jVo),e(nd,DVo),e(nd,sX),e(sX,GVo),e(nd,OVo),e(gt,VVo),M(Uv,gt,null),e(Io,XVo),e(Io,to),M(SL,to,null),e(to,zVo),e(to,Ipe),e(Ipe,WVo),e(to,QVo),e(to,Da),e(Da,HVo),e(Da,Npe),e(Npe,UVo),e(Da,JVo),e(Da,qpe),e(qpe,YVo),e(Da,KVo),e(Da,jpe),e(jpe,ZVo),e(Da,eXo),e(to,oXo),e(to,Zr),e(Zr,Jv),e(Jv,Dpe),e(Dpe,rXo),e(Jv,tXo),e(Jv,lX),e(lX,aXo),e(Jv,nXo),e(Zr,sXo),e(Zr,Yv),e(Yv,Gpe),e(Gpe,lXo),e(Yv,iXo),e(Yv,iX),e(iX,dXo),e(Yv,cXo),e(Zr,fXo),e(Zr,Kv),e(Kv,Ope),e(Ope,mXo),e(Kv,gXo),e(Kv,dX),e(dX,hXo),e(Kv,pXo),e(Zr,uXo),e(Zr,Zv),e(Zv,Vpe),e(Vpe,_Xo),e(Zv,bXo),e(Zv,cX),e(cX,vXo),e(Zv,FXo),e(Zr,TXo),e(Zr,e0),e(e0,Xpe),e(Xpe,MXo),e(e0,EXo),e(e0,fX),e(fX,CXo),e(e0,wXo),e(to,AXo),e(to,o0),e(o0,LXo),e(o0,zpe),e(zpe,yXo),e(o0,xXo),e(o0,Wpe),e(Wpe,$Xo),e(to,kXo),M(r0,to,null),b(f,IGe,_),b(f,sd,_),e(sd,t0),e(t0,Qpe),M(RL,Qpe,null),e(sd,SXo),e(sd,Hpe),e(Hpe,RXo),b(f,NGe,_),b(f,No,_),M(PL,No,null),e(No,PXo),e(No,ld),e(ld,BXo),e(ld,mX),e(mX,IXo),e(ld,NXo),e(ld,gX),e(gX,qXo),e(ld,jXo),e(No,DXo),e(No,BL),e(BL,GXo),e(BL,Upe),e(Upe,OXo),e(BL,VXo),e(No,XXo),e(No,ht),M(IL,ht,null),e(ht,zXo),e(ht,Jpe),e(Jpe,WXo),e(ht,QXo),e(ht,id),e(id,HXo),e(id,Ype),e(Ype,UXo),e(id,JXo),e(id,hX),e(hX,YXo),e(id,KXo),e(ht,ZXo),M(a0,ht,null),e(No,ezo),e(No,ao),M(NL,ao,null),e(ao,ozo),e(ao,Kpe),e(Kpe,rzo),e(ao,tzo),e(ao,Ga),e(Ga,azo),e(Ga,Zpe),e(Zpe,nzo),e(Ga,szo),e(Ga,eue),e(eue,lzo),e(Ga,izo),e(Ga,oue),e(oue,dzo),e(Ga,czo),e(ao,fzo),e(ao,H),e(H,n0),e(n0,rue),e(rue,mzo),e(n0,gzo),e(n0,pX),e(pX,hzo),e(n0,pzo),e(H,uzo),e(H,s0),e(s0,tue),e(tue,_zo),e(s0,bzo),e(s0,uX),e(uX,vzo),e(s0,Fzo),e(H,Tzo),e(H,l0),e(l0,aue),e(aue,Mzo),e(l0,Ezo),e(l0,_X),e(_X,Czo),e(l0,wzo),e(H,Azo),e(H,i0),e(i0,nue),e(nue,Lzo),e(i0,yzo),e(i0,bX),e(bX,xzo),e(i0,$zo),e(H,kzo),e(H,d0),e(d0,sue),e(sue,Szo),e(d0,Rzo),e(d0,vX),e(vX,Pzo),e(d0,Bzo),e(H,Izo),e(H,c0),e(c0,lue),e(lue,Nzo),e(c0,qzo),e(c0,FX),e(FX,jzo),e(c0,Dzo),e(H,Gzo),e(H,f0),e(f0,iue),e(iue,Ozo),e(f0,Vzo),e(f0,TX),e(TX,Xzo),e(f0,zzo),e(H,Wzo),e(H,m0),e(m0,due),e(due,Qzo),e(m0,Hzo),e(m0,MX),e(MX,Uzo),e(m0,Jzo),e(H,Yzo),e(H,g0),e(g0,cue),e(cue,Kzo),e(g0,Zzo),e(g0,EX),e(EX,eWo),e(g0,oWo),e(H,rWo),e(H,h0),e(h0,fue),e(fue,tWo),e(h0,aWo),e(h0,CX),e(CX,nWo),e(h0,sWo),e(H,lWo),e(H,p0),e(p0,mue),e(mue,iWo),e(p0,dWo),e(p0,wX),e(wX,cWo),e(p0,fWo),e(H,mWo),e(H,u0),e(u0,gue),e(gue,gWo),e(u0,hWo),e(u0,AX),e(AX,pWo),e(u0,uWo),e(H,_Wo),e(H,_0),e(_0,hue),e(hue,bWo),e(_0,vWo),e(_0,LX),e(LX,FWo),e(_0,TWo),e(H,MWo),e(H,b0),e(b0,pue),e(pue,EWo),e(b0,CWo),e(b0,yX),e(yX,wWo),e(b0,AWo),e(H,LWo),e(H,v0),e(v0,uue),e(uue,yWo),e(v0,xWo),e(v0,xX),e(xX,$Wo),e(v0,kWo),e(H,SWo),e(H,F0),e(F0,_ue),e(_ue,RWo),e(F0,PWo),e(F0,$X),e($X,BWo),e(F0,IWo),e(H,NWo),e(H,T0),e(T0,bue),e(bue,qWo),e(T0,jWo),e(T0,kX),e(kX,DWo),e(T0,GWo),e(H,OWo),e(H,M0),e(M0,vue),e(vue,VWo),e(M0,XWo),e(M0,SX),e(SX,zWo),e(M0,WWo),e(H,QWo),e(H,E0),e(E0,Fue),e(Fue,HWo),e(E0,UWo),e(E0,RX),e(RX,JWo),e(E0,YWo),e(H,KWo),e(H,C0),e(C0,Tue),e(Tue,ZWo),e(C0,eQo),e(C0,PX),e(PX,oQo),e(C0,rQo),e(H,tQo),e(H,w0),e(w0,Mue),e(Mue,aQo),e(w0,nQo),e(w0,BX),e(BX,sQo),e(w0,lQo),e(H,iQo),e(H,A0),e(A0,Eue),e(Eue,dQo),e(A0,cQo),e(A0,IX),e(IX,fQo),e(A0,mQo),e(H,gQo),e(H,L0),e(L0,Cue),e(Cue,hQo),e(L0,pQo),e(L0,NX),e(NX,uQo),e(L0,_Qo),e(H,bQo),e(H,y0),e(y0,wue),e(wue,vQo),e(y0,FQo),e(y0,qX),e(qX,TQo),e(y0,MQo),e(H,EQo),e(H,x0),e(x0,Aue),e(Aue,CQo),e(x0,wQo),e(x0,jX),e(jX,AQo),e(x0,LQo),e(H,yQo),e(H,$0),e($0,Lue),e(Lue,xQo),e($0,$Qo),e($0,DX),e(DX,kQo),e($0,SQo),e(H,RQo),e(H,k0),e(k0,yue),e(yue,PQo),e(k0,BQo),e(k0,GX),e(GX,IQo),e(k0,NQo),e(H,qQo),e(H,S0),e(S0,xue),e(xue,jQo),e(S0,DQo),e(S0,OX),e(OX,GQo),e(S0,OQo),e(H,VQo),e(H,R0),e(R0,$ue),e($ue,XQo),e(R0,zQo),e(R0,VX),e(VX,WQo),e(R0,QQo),e(H,HQo),e(H,P0),e(P0,kue),e(kue,UQo),e(P0,JQo),e(P0,XX),e(XX,YQo),e(P0,KQo),e(H,ZQo),e(H,B0),e(B0,Sue),e(Sue,eHo),e(B0,oHo),e(B0,zX),e(zX,rHo),e(B0,tHo),e(H,aHo),e(H,I0),e(I0,Rue),e(Rue,nHo),e(I0,sHo),e(I0,WX),e(WX,lHo),e(I0,iHo),e(H,dHo),e(H,N0),e(N0,Pue),e(Pue,cHo),e(N0,fHo),e(N0,QX),e(QX,mHo),e(N0,gHo),e(H,hHo),e(H,q0),e(q0,Bue),e(Bue,pHo),e(q0,uHo),e(q0,HX),e(HX,_Ho),e(q0,bHo),e(H,vHo),e(H,j0),e(j0,Iue),e(Iue,FHo),e(j0,THo),e(j0,UX),e(UX,MHo),e(j0,EHo),e(ao,CHo),e(ao,D0),e(D0,wHo),e(D0,Nue),e(Nue,AHo),e(D0,LHo),e(D0,que),e(que,yHo),e(ao,xHo),M(G0,ao,null),b(f,qGe,_),b(f,dd,_),e(dd,O0),e(O0,jue),M(qL,jue,null),e(dd,$Ho),e(dd,Due),e(Due,kHo),b(f,jGe,_),b(f,qo,_),M(jL,qo,null),e(qo,SHo),e(qo,cd),e(cd,RHo),e(cd,JX),e(JX,PHo),e(cd,BHo),e(cd,YX),e(YX,IHo),e(cd,NHo),e(qo,qHo),e(qo,DL),e(DL,jHo),e(DL,Gue),e(Gue,DHo),e(DL,GHo),e(qo,OHo),e(qo,pt),M(GL,pt,null),e(pt,VHo),e(pt,Oue),e(Oue,XHo),e(pt,zHo),e(pt,fd),e(fd,WHo),e(fd,Vue),e(Vue,QHo),e(fd,HHo),e(fd,KX),e(KX,UHo),e(fd,JHo),e(pt,YHo),M(V0,pt,null),e(qo,KHo),e(qo,no),M(OL,no,null),e(no,ZHo),e(no,Xue),e(Xue,eUo),e(no,oUo),e(no,Oa),e(Oa,rUo),e(Oa,zue),e(zue,tUo),e(Oa,aUo),e(Oa,Wue),e(Wue,nUo),e(Oa,sUo),e(Oa,Que),e(Que,lUo),e(Oa,iUo),e(no,dUo),e(no,V),e(V,X0),e(X0,Hue),e(Hue,cUo),e(X0,fUo),e(X0,ZX),e(ZX,mUo),e(X0,gUo),e(V,hUo),e(V,z0),e(z0,Uue),e(Uue,pUo),e(z0,uUo),e(z0,ez),e(ez,_Uo),e(z0,bUo),e(V,vUo),e(V,W0),e(W0,Jue),e(Jue,FUo),e(W0,TUo),e(W0,oz),e(oz,MUo),e(W0,EUo),e(V,CUo),e(V,Q0),e(Q0,Yue),e(Yue,wUo),e(Q0,AUo),e(Q0,rz),e(rz,LUo),e(Q0,yUo),e(V,xUo),e(V,H0),e(H0,Kue),e(Kue,$Uo),e(H0,kUo),e(H0,tz),e(tz,SUo),e(H0,RUo),e(V,PUo),e(V,U0),e(U0,Zue),e(Zue,BUo),e(U0,IUo),e(U0,az),e(az,NUo),e(U0,qUo),e(V,jUo),e(V,J0),e(J0,e_e),e(e_e,DUo),e(J0,GUo),e(J0,nz),e(nz,OUo),e(J0,VUo),e(V,XUo),e(V,Y0),e(Y0,o_e),e(o_e,zUo),e(Y0,WUo),e(Y0,sz),e(sz,QUo),e(Y0,HUo),e(V,UUo),e(V,K0),e(K0,r_e),e(r_e,JUo),e(K0,YUo),e(K0,lz),e(lz,KUo),e(K0,ZUo),e(V,eJo),e(V,Z0),e(Z0,t_e),e(t_e,oJo),e(Z0,rJo),e(Z0,iz),e(iz,tJo),e(Z0,aJo),e(V,nJo),e(V,eF),e(eF,a_e),e(a_e,sJo),e(eF,lJo),e(eF,dz),e(dz,iJo),e(eF,dJo),e(V,cJo),e(V,oF),e(oF,n_e),e(n_e,fJo),e(oF,mJo),e(oF,cz),e(cz,gJo),e(oF,hJo),e(V,pJo),e(V,rF),e(rF,s_e),e(s_e,uJo),e(rF,_Jo),e(rF,fz),e(fz,bJo),e(rF,vJo),e(V,FJo),e(V,tF),e(tF,l_e),e(l_e,TJo),e(tF,MJo),e(tF,mz),e(mz,EJo),e(tF,CJo),e(V,wJo),e(V,aF),e(aF,i_e),e(i_e,AJo),e(aF,LJo),e(aF,gz),e(gz,yJo),e(aF,xJo),e(V,$Jo),e(V,nF),e(nF,d_e),e(d_e,kJo),e(nF,SJo),e(nF,hz),e(hz,RJo),e(nF,PJo),e(V,BJo),e(V,sF),e(sF,c_e),e(c_e,IJo),e(sF,NJo),e(sF,pz),e(pz,qJo),e(sF,jJo),e(V,DJo),e(V,lF),e(lF,f_e),e(f_e,GJo),e(lF,OJo),e(lF,uz),e(uz,VJo),e(lF,XJo),e(V,zJo),e(V,iF),e(iF,m_e),e(m_e,WJo),e(iF,QJo),e(iF,_z),e(_z,HJo),e(iF,UJo),e(V,JJo),e(V,dF),e(dF,g_e),e(g_e,YJo),e(dF,KJo),e(dF,bz),e(bz,ZJo),e(dF,eYo),e(V,oYo),e(V,cF),e(cF,h_e),e(h_e,rYo),e(cF,tYo),e(cF,vz),e(vz,aYo),e(cF,nYo),e(V,sYo),e(V,fF),e(fF,p_e),e(p_e,lYo),e(fF,iYo),e(fF,Fz),e(Fz,dYo),e(fF,cYo),e(V,fYo),e(V,mF),e(mF,u_e),e(u_e,mYo),e(mF,gYo),e(mF,Tz),e(Tz,hYo),e(mF,pYo),e(V,uYo),e(V,gF),e(gF,__e),e(__e,_Yo),e(gF,bYo),e(gF,Mz),e(Mz,vYo),e(gF,FYo),e(V,TYo),e(V,hF),e(hF,b_e),e(b_e,MYo),e(hF,EYo),e(hF,Ez),e(Ez,CYo),e(hF,wYo),e(V,AYo),e(V,pF),e(pF,v_e),e(v_e,LYo),e(pF,yYo),e(pF,Cz),e(Cz,xYo),e(pF,$Yo),e(V,kYo),e(V,uF),e(uF,F_e),e(F_e,SYo),e(uF,RYo),e(uF,wz),e(wz,PYo),e(uF,BYo),e(V,IYo),e(V,_F),e(_F,T_e),e(T_e,NYo),e(_F,qYo),e(_F,Az),e(Az,jYo),e(_F,DYo),e(V,GYo),e(V,bF),e(bF,M_e),e(M_e,OYo),e(bF,VYo),e(bF,Lz),e(Lz,XYo),e(bF,zYo),e(V,WYo),e(V,vF),e(vF,E_e),e(E_e,QYo),e(vF,HYo),e(vF,yz),e(yz,UYo),e(vF,JYo),e(V,YYo),e(V,FF),e(FF,C_e),e(C_e,KYo),e(FF,ZYo),e(FF,xz),e(xz,eKo),e(FF,oKo),e(V,rKo),e(V,TF),e(TF,w_e),e(w_e,tKo),e(TF,aKo),e(TF,$z),e($z,nKo),e(TF,sKo),e(V,lKo),e(V,MF),e(MF,A_e),e(A_e,iKo),e(MF,dKo),e(MF,kz),e(kz,cKo),e(MF,fKo),e(V,mKo),e(V,EF),e(EF,L_e),e(L_e,gKo),e(EF,hKo),e(EF,Sz),e(Sz,pKo),e(EF,uKo),e(V,_Ko),e(V,CF),e(CF,y_e),e(y_e,bKo),e(CF,vKo),e(CF,Rz),e(Rz,FKo),e(CF,TKo),e(V,MKo),e(V,wF),e(wF,x_e),e(x_e,EKo),e(wF,CKo),e(wF,Pz),e(Pz,wKo),e(wF,AKo),e(V,LKo),e(V,AF),e(AF,$_e),e($_e,yKo),e(AF,xKo),e(AF,Bz),e(Bz,$Ko),e(AF,kKo),e(V,SKo),e(V,LF),e(LF,k_e),e(k_e,RKo),e(LF,PKo),e(LF,Iz),e(Iz,BKo),e(LF,IKo),e(V,NKo),e(V,yF),e(yF,S_e),e(S_e,qKo),e(yF,jKo),e(yF,Nz),e(Nz,DKo),e(yF,GKo),e(V,OKo),e(V,xF),e(xF,R_e),e(R_e,VKo),e(xF,XKo),e(xF,qz),e(qz,zKo),e(xF,WKo),e(no,QKo),e(no,$F),e($F,HKo),e($F,P_e),e(P_e,UKo),e($F,JKo),e($F,B_e),e(B_e,YKo),e(no,KKo),M(kF,no,null),b(f,DGe,_),b(f,md,_),e(md,SF),e(SF,I_e),M(VL,I_e,null),e(md,ZKo),e(md,N_e),e(N_e,eZo),b(f,GGe,_),b(f,jo,_),M(XL,jo,null),e(jo,oZo),e(jo,gd),e(gd,rZo),e(gd,jz),e(jz,tZo),e(gd,aZo),e(gd,Dz),e(Dz,nZo),e(gd,sZo),e(jo,lZo),e(jo,zL),e(zL,iZo),e(zL,q_e),e(q_e,dZo),e(zL,cZo),e(jo,fZo),e(jo,ut),M(WL,ut,null),e(ut,mZo),e(ut,j_e),e(j_e,gZo),e(ut,hZo),e(ut,hd),e(hd,pZo),e(hd,D_e),e(D_e,uZo),e(hd,_Zo),e(hd,Gz),e(Gz,bZo),e(hd,vZo),e(ut,FZo),M(RF,ut,null),e(jo,TZo),e(jo,so),M(QL,so,null),e(so,MZo),e(so,G_e),e(G_e,EZo),e(so,CZo),e(so,Va),e(Va,wZo),e(Va,O_e),e(O_e,AZo),e(Va,LZo),e(Va,V_e),e(V_e,yZo),e(Va,xZo),e(Va,X_e),e(X_e,$Zo),e(Va,kZo),e(so,SZo),e(so,z_e),e(z_e,PF),e(PF,W_e),e(W_e,RZo),e(PF,PZo),e(PF,Oz),e(Oz,BZo),e(PF,IZo),e(so,NZo),e(so,BF),e(BF,qZo),e(BF,Q_e),e(Q_e,jZo),e(BF,DZo),e(BF,H_e),e(H_e,GZo),e(so,OZo),M(IF,so,null),b(f,OGe,_),b(f,pd,_),e(pd,NF),e(NF,U_e),M(HL,U_e,null),e(pd,VZo),e(pd,J_e),e(J_e,XZo),b(f,VGe,_),b(f,Do,_),M(UL,Do,null),e(Do,zZo),e(Do,ud),e(ud,WZo),e(ud,Vz),e(Vz,QZo),e(ud,HZo),e(ud,Xz),e(Xz,UZo),e(ud,JZo),e(Do,YZo),e(Do,JL),e(JL,KZo),e(JL,Y_e),e(Y_e,ZZo),e(JL,eer),e(Do,oer),e(Do,_t),M(YL,_t,null),e(_t,rer),e(_t,K_e),e(K_e,ter),e(_t,aer),e(_t,_d),e(_d,ner),e(_d,Z_e),e(Z_e,ser),e(_d,ler),e(_d,zz),e(zz,ier),e(_d,der),e(_t,cer),M(qF,_t,null),e(Do,fer),e(Do,lo),M(KL,lo,null),e(lo,mer),e(lo,e1e),e(e1e,ger),e(lo,her),e(lo,Xa),e(Xa,per),e(Xa,o1e),e(o1e,uer),e(Xa,_er),e(Xa,r1e),e(r1e,ber),e(Xa,ver),e(Xa,t1e),e(t1e,Fer),e(Xa,Ter),e(lo,Mer),e(lo,Fe),e(Fe,jF),e(jF,a1e),e(a1e,Eer),e(jF,Cer),e(jF,Wz),e(Wz,wer),e(jF,Aer),e(Fe,Ler),e(Fe,DF),e(DF,n1e),e(n1e,yer),e(DF,xer),e(DF,Qz),e(Qz,$er),e(DF,ker),e(Fe,Ser),e(Fe,GF),e(GF,s1e),e(s1e,Rer),e(GF,Per),e(GF,Hz),e(Hz,Ber),e(GF,Ier),e(Fe,Ner),e(Fe,OF),e(OF,l1e),e(l1e,qer),e(OF,jer),e(OF,Uz),e(Uz,Der),e(OF,Ger),e(Fe,Oer),e(Fe,Os),e(Os,i1e),e(i1e,Ver),e(Os,Xer),e(Os,Jz),e(Jz,zer),e(Os,Wer),e(Os,Yz),e(Yz,Qer),e(Os,Her),e(Fe,Uer),e(Fe,VF),e(VF,d1e),e(d1e,Jer),e(VF,Yer),e(VF,Kz),e(Kz,Ker),e(VF,Zer),e(Fe,eor),e(Fe,Vs),e(Vs,c1e),e(c1e,oor),e(Vs,ror),e(Vs,Zz),e(Zz,tor),e(Vs,aor),e(Vs,eW),e(eW,nor),e(Vs,sor),e(Fe,lor),e(Fe,bt),e(bt,f1e),e(f1e,ior),e(bt,dor),e(bt,oW),e(oW,cor),e(bt,mor),e(bt,rW),e(rW,gor),e(bt,hor),e(bt,tW),e(tW,por),e(bt,uor),e(Fe,_or),e(Fe,XF),e(XF,m1e),e(m1e,bor),e(XF,vor),e(XF,aW),e(aW,For),e(XF,Tor),e(Fe,Mor),e(Fe,zF),e(zF,g1e),e(g1e,Eor),e(zF,Cor),e(zF,nW),e(nW,wor),e(zF,Aor),e(Fe,Lor),e(Fe,WF),e(WF,h1e),e(h1e,yor),e(WF,xor),e(WF,sW),e(sW,$or),e(WF,kor),e(Fe,Sor),e(Fe,QF),e(QF,p1e),e(p1e,Ror),e(QF,Por),e(QF,lW),e(lW,Bor),e(QF,Ior),e(Fe,Nor),e(Fe,HF),e(HF,u1e),e(u1e,qor),e(HF,jor),e(HF,iW),e(iW,Dor),e(HF,Gor),e(Fe,Oor),e(Fe,UF),e(UF,_1e),e(_1e,Vor),e(UF,Xor),e(UF,dW),e(dW,zor),e(UF,Wor),e(Fe,Qor),e(Fe,JF),e(JF,b1e),e(b1e,Hor),e(JF,Uor),e(JF,cW),e(cW,Jor),e(JF,Yor),e(lo,Kor),e(lo,YF),e(YF,Zor),e(YF,v1e),e(v1e,err),e(YF,orr),e(YF,F1e),e(F1e,rrr),e(lo,trr),M(KF,lo,null),b(f,XGe,_),b(f,bd,_),e(bd,ZF),e(ZF,T1e),M(ZL,T1e,null),e(bd,arr),e(bd,M1e),e(M1e,nrr),b(f,zGe,_),b(f,Go,_),M(ey,Go,null),e(Go,srr),e(Go,vd),e(vd,lrr),e(vd,fW),e(fW,irr),e(vd,drr),e(vd,mW),e(mW,crr),e(vd,frr),e(Go,mrr),e(Go,oy),e(oy,grr),e(oy,E1e),e(E1e,hrr),e(oy,prr),e(Go,urr),e(Go,vt),M(ry,vt,null),e(vt,_rr),e(vt,C1e),e(C1e,brr),e(vt,vrr),e(vt,Fd),e(Fd,Frr),e(Fd,w1e),e(w1e,Trr),e(Fd,Mrr),e(Fd,gW),e(gW,Err),e(Fd,Crr),e(vt,wrr),M(e6,vt,null),e(Go,Arr),e(Go,io),M(ty,io,null),e(io,Lrr),e(io,A1e),e(A1e,yrr),e(io,xrr),e(io,za),e(za,$rr),e(za,L1e),e(L1e,krr),e(za,Srr),e(za,y1e),e(y1e,Rrr),e(za,Prr),e(za,x1e),e(x1e,Brr),e(za,Irr),e(io,Nrr),e(io,$1e),e($1e,o6),e(o6,k1e),e(k1e,qrr),e(o6,jrr),e(o6,hW),e(hW,Drr),e(o6,Grr),e(io,Orr),e(io,r6),e(r6,Vrr),e(r6,S1e),e(S1e,Xrr),e(r6,zrr),e(r6,R1e),e(R1e,Wrr),e(io,Qrr),M(t6,io,null),b(f,WGe,_),b(f,Td,_),e(Td,a6),e(a6,P1e),M(ay,P1e,null),e(Td,Hrr),e(Td,B1e),e(B1e,Urr),b(f,QGe,_),b(f,Oo,_),M(ny,Oo,null),e(Oo,Jrr),e(Oo,Md),e(Md,Yrr),e(Md,pW),e(pW,Krr),e(Md,Zrr),e(Md,uW),e(uW,etr),e(Md,otr),e(Oo,rtr),e(Oo,sy),e(sy,ttr),e(sy,I1e),e(I1e,atr),e(sy,ntr),e(Oo,str),e(Oo,Ft),M(ly,Ft,null),e(Ft,ltr),e(Ft,N1e),e(N1e,itr),e(Ft,dtr),e(Ft,Ed),e(Ed,ctr),e(Ed,q1e),e(q1e,ftr),e(Ed,mtr),e(Ed,_W),e(_W,gtr),e(Ed,htr),e(Ft,ptr),M(n6,Ft,null),e(Oo,utr),e(Oo,co),M(iy,co,null),e(co,_tr),e(co,j1e),e(j1e,btr),e(co,vtr),e(co,Wa),e(Wa,Ftr),e(Wa,D1e),e(D1e,Ttr),e(Wa,Mtr),e(Wa,G1e),e(G1e,Etr),e(Wa,Ctr),e(Wa,O1e),e(O1e,wtr),e(Wa,Atr),e(co,Ltr),e(co,V1e),e(V1e,s6),e(s6,X1e),e(X1e,ytr),e(s6,xtr),e(s6,bW),e(bW,$tr),e(s6,ktr),e(co,Str),e(co,l6),e(l6,Rtr),e(l6,z1e),e(z1e,Ptr),e(l6,Btr),e(l6,W1e),e(W1e,Itr),e(co,Ntr),M(i6,co,null),b(f,HGe,_),b(f,Cd,_),e(Cd,d6),e(d6,Q1e),M(dy,Q1e,null),e(Cd,qtr),e(Cd,H1e),e(H1e,jtr),b(f,UGe,_),b(f,Vo,_),M(cy,Vo,null),e(Vo,Dtr),e(Vo,wd),e(wd,Gtr),e(wd,vW),e(vW,Otr),e(wd,Vtr),e(wd,FW),e(FW,Xtr),e(wd,ztr),e(Vo,Wtr),e(Vo,fy),e(fy,Qtr),e(fy,U1e),e(U1e,Htr),e(fy,Utr),e(Vo,Jtr),e(Vo,Tt),M(my,Tt,null),e(Tt,Ytr),e(Tt,J1e),e(J1e,Ktr),e(Tt,Ztr),e(Tt,Ad),e(Ad,ear),e(Ad,Y1e),e(Y1e,oar),e(Ad,rar),e(Ad,TW),e(TW,tar),e(Ad,aar),e(Tt,nar),M(c6,Tt,null),e(Vo,sar),e(Vo,fo),M(gy,fo,null),e(fo,lar),e(fo,K1e),e(K1e,iar),e(fo,dar),e(fo,Qa),e(Qa,car),e(Qa,Z1e),e(Z1e,far),e(Qa,mar),e(Qa,e2e),e(e2e,gar),e(Qa,har),e(Qa,o2e),e(o2e,par),e(Qa,uar),e(fo,_ar),e(fo,Pe),e(Pe,f6),e(f6,r2e),e(r2e,bar),e(f6,Far),e(f6,MW),e(MW,Tar),e(f6,Mar),e(Pe,Ear),e(Pe,m6),e(m6,t2e),e(t2e,Car),e(m6,war),e(m6,EW),e(EW,Aar),e(m6,Lar),e(Pe,yar),e(Pe,g6),e(g6,a2e),e(a2e,xar),e(g6,$ar),e(g6,CW),e(CW,kar),e(g6,Sar),e(Pe,Rar),e(Pe,h6),e(h6,n2e),e(n2e,Par),e(h6,Bar),e(h6,wW),e(wW,Iar),e(h6,Nar),e(Pe,qar),e(Pe,p6),e(p6,s2e),e(s2e,jar),e(p6,Dar),e(p6,AW),e(AW,Gar),e(p6,Oar),e(Pe,Var),e(Pe,u6),e(u6,l2e),e(l2e,Xar),e(u6,zar),e(u6,LW),e(LW,War),e(u6,Qar),e(Pe,Har),e(Pe,_6),e(_6,i2e),e(i2e,Uar),e(_6,Jar),e(_6,yW),e(yW,Yar),e(_6,Kar),e(Pe,Zar),e(Pe,b6),e(b6,d2e),e(d2e,enr),e(b6,onr),e(b6,xW),e(xW,rnr),e(b6,tnr),e(Pe,anr),e(Pe,v6),e(v6,c2e),e(c2e,nnr),e(v6,snr),e(v6,$W),e($W,lnr),e(v6,inr),e(fo,dnr),e(fo,F6),e(F6,cnr),e(F6,f2e),e(f2e,fnr),e(F6,mnr),e(F6,m2e),e(m2e,gnr),e(fo,hnr),M(T6,fo,null),b(f,JGe,_),b(f,Ld,_),e(Ld,M6),e(M6,g2e),M(hy,g2e,null),e(Ld,pnr),e(Ld,h2e),e(h2e,unr),b(f,YGe,_),b(f,Xo,_),M(py,Xo,null),e(Xo,_nr),e(Xo,yd),e(yd,bnr),e(yd,kW),e(kW,vnr),e(yd,Fnr),e(yd,SW),e(SW,Tnr),e(yd,Mnr),e(Xo,Enr),e(Xo,uy),e(uy,Cnr),e(uy,p2e),e(p2e,wnr),e(uy,Anr),e(Xo,Lnr),e(Xo,Mt),M(_y,Mt,null),e(Mt,ynr),e(Mt,u2e),e(u2e,xnr),e(Mt,$nr),e(Mt,xd),e(xd,knr),e(xd,_2e),e(_2e,Snr),e(xd,Rnr),e(xd,RW),e(RW,Pnr),e(xd,Bnr),e(Mt,Inr),M(E6,Mt,null),e(Xo,Nnr),e(Xo,mo),M(by,mo,null),e(mo,qnr),e(mo,b2e),e(b2e,jnr),e(mo,Dnr),e(mo,Ha),e(Ha,Gnr),e(Ha,v2e),e(v2e,Onr),e(Ha,Vnr),e(Ha,F2e),e(F2e,Xnr),e(Ha,znr),e(Ha,T2e),e(T2e,Wnr),e(Ha,Qnr),e(mo,Hnr),e(mo,et),e(et,C6),e(C6,M2e),e(M2e,Unr),e(C6,Jnr),e(C6,PW),e(PW,Ynr),e(C6,Knr),e(et,Znr),e(et,w6),e(w6,E2e),e(E2e,esr),e(w6,osr),e(w6,BW),e(BW,rsr),e(w6,tsr),e(et,asr),e(et,A6),e(A6,C2e),e(C2e,nsr),e(A6,ssr),e(A6,IW),e(IW,lsr),e(A6,isr),e(et,dsr),e(et,L6),e(L6,w2e),e(w2e,csr),e(L6,fsr),e(L6,NW),e(NW,msr),e(L6,gsr),e(et,hsr),e(et,y6),e(y6,A2e),e(A2e,psr),e(y6,usr),e(y6,qW),e(qW,_sr),e(y6,bsr),e(mo,vsr),e(mo,x6),e(x6,Fsr),e(x6,L2e),e(L2e,Tsr),e(x6,Msr),e(x6,y2e),e(y2e,Esr),e(mo,Csr),M($6,mo,null),b(f,KGe,_),b(f,$d,_),e($d,k6),e(k6,x2e),M(vy,x2e,null),e($d,wsr),e($d,$2e),e($2e,Asr),b(f,ZGe,_),b(f,zo,_),M(Fy,zo,null),e(zo,Lsr),e(zo,kd),e(kd,ysr),e(kd,jW),e(jW,xsr),e(kd,$sr),e(kd,DW),e(DW,ksr),e(kd,Ssr),e(zo,Rsr),e(zo,Ty),e(Ty,Psr),e(Ty,k2e),e(k2e,Bsr),e(Ty,Isr),e(zo,Nsr),e(zo,Et),M(My,Et,null),e(Et,qsr),e(Et,S2e),e(S2e,jsr),e(Et,Dsr),e(Et,Sd),e(Sd,Gsr),e(Sd,R2e),e(R2e,Osr),e(Sd,Vsr),e(Sd,GW),e(GW,Xsr),e(Sd,zsr),e(Et,Wsr),M(S6,Et,null),e(zo,Qsr),e(zo,go),M(Ey,go,null),e(go,Hsr),e(go,P2e),e(P2e,Usr),e(go,Jsr),e(go,Ua),e(Ua,Ysr),e(Ua,B2e),e(B2e,Ksr),e(Ua,Zsr),e(Ua,I2e),e(I2e,elr),e(Ua,olr),e(Ua,N2e),e(N2e,rlr),e(Ua,tlr),e(go,alr),e(go,Le),e(Le,R6),e(R6,q2e),e(q2e,nlr),e(R6,slr),e(R6,OW),e(OW,llr),e(R6,ilr),e(Le,dlr),e(Le,P6),e(P6,j2e),e(j2e,clr),e(P6,flr),e(P6,VW),e(VW,mlr),e(P6,glr),e(Le,hlr),e(Le,B6),e(B6,D2e),e(D2e,plr),e(B6,ulr),e(B6,XW),e(XW,_lr),e(B6,blr),e(Le,vlr),e(Le,I6),e(I6,G2e),e(G2e,Flr),e(I6,Tlr),e(I6,zW),e(zW,Mlr),e(I6,Elr),e(Le,Clr),e(Le,N6),e(N6,O2e),e(O2e,wlr),e(N6,Alr),e(N6,WW),e(WW,Llr),e(N6,ylr),e(Le,xlr),e(Le,q6),e(q6,V2e),e(V2e,$lr),e(q6,klr),e(q6,QW),e(QW,Slr),e(q6,Rlr),e(Le,Plr),e(Le,j6),e(j6,X2e),e(X2e,Blr),e(j6,Ilr),e(j6,HW),e(HW,Nlr),e(j6,qlr),e(Le,jlr),e(Le,D6),e(D6,z2e),e(z2e,Dlr),e(D6,Glr),e(D6,UW),e(UW,Olr),e(D6,Vlr),e(Le,Xlr),e(Le,G6),e(G6,W2e),e(W2e,zlr),e(G6,Wlr),e(G6,JW),e(JW,Qlr),e(G6,Hlr),e(Le,Ulr),e(Le,O6),e(O6,Q2e),e(Q2e,Jlr),e(O6,Ylr),e(O6,YW),e(YW,Klr),e(O6,Zlr),e(go,eir),e(go,V6),e(V6,oir),e(V6,H2e),e(H2e,rir),e(V6,tir),e(V6,U2e),e(U2e,air),e(go,nir),M(X6,go,null),b(f,eOe,_),b(f,Rd,_),e(Rd,z6),e(z6,J2e),M(Cy,J2e,null),e(Rd,sir),e(Rd,Y2e),e(Y2e,lir),b(f,oOe,_),b(f,Wo,_),M(wy,Wo,null),e(Wo,iir),e(Wo,Pd),e(Pd,dir),e(Pd,KW),e(KW,cir),e(Pd,fir),e(Pd,ZW),e(ZW,mir),e(Pd,gir),e(Wo,hir),e(Wo,Ay),e(Ay,pir),e(Ay,K2e),e(K2e,uir),e(Ay,_ir),e(Wo,bir),e(Wo,Ct),M(Ly,Ct,null),e(Ct,vir),e(Ct,Z2e),e(Z2e,Fir),e(Ct,Tir),e(Ct,Bd),e(Bd,Mir),e(Bd,ebe),e(ebe,Eir),e(Bd,Cir),e(Bd,eQ),e(eQ,wir),e(Bd,Air),e(Ct,Lir),M(W6,Ct,null),e(Wo,yir),e(Wo,ho),M(yy,ho,null),e(ho,xir),e(ho,obe),e(obe,$ir),e(ho,kir),e(ho,Ja),e(Ja,Sir),e(Ja,rbe),e(rbe,Rir),e(Ja,Pir),e(Ja,tbe),e(tbe,Bir),e(Ja,Iir),e(Ja,abe),e(abe,Nir),e(Ja,qir),e(ho,jir),e(ho,xy),e(xy,Q6),e(Q6,nbe),e(nbe,Dir),e(Q6,Gir),e(Q6,oQ),e(oQ,Oir),e(Q6,Vir),e(xy,Xir),e(xy,H6),e(H6,sbe),e(sbe,zir),e(H6,Wir),e(H6,rQ),e(rQ,Qir),e(H6,Hir),e(ho,Uir),e(ho,U6),e(U6,Jir),e(U6,lbe),e(lbe,Yir),e(U6,Kir),e(U6,ibe),e(ibe,Zir),e(ho,edr),M(J6,ho,null),b(f,rOe,_),b(f,Id,_),e(Id,Y6),e(Y6,dbe),M($y,dbe,null),e(Id,odr),e(Id,cbe),e(cbe,rdr),b(f,tOe,_),b(f,Qo,_),M(ky,Qo,null),e(Qo,tdr),e(Qo,Nd),e(Nd,adr),e(Nd,tQ),e(tQ,ndr),e(Nd,sdr),e(Nd,aQ),e(aQ,ldr),e(Nd,idr),e(Qo,ddr),e(Qo,Sy),e(Sy,cdr),e(Sy,fbe),e(fbe,fdr),e(Sy,mdr),e(Qo,gdr),e(Qo,wt),M(Ry,wt,null),e(wt,hdr),e(wt,mbe),e(mbe,pdr),e(wt,udr),e(wt,qd),e(qd,_dr),e(qd,gbe),e(gbe,bdr),e(qd,vdr),e(qd,nQ),e(nQ,Fdr),e(qd,Tdr),e(wt,Mdr),M(K6,wt,null),e(Qo,Edr),e(Qo,po),M(Py,po,null),e(po,Cdr),e(po,hbe),e(hbe,wdr),e(po,Adr),e(po,Ya),e(Ya,Ldr),e(Ya,pbe),e(pbe,ydr),e(Ya,xdr),e(Ya,ube),e(ube,$dr),e(Ya,kdr),e(Ya,_be),e(_be,Sdr),e(Ya,Rdr),e(po,Pdr),e(po,ot),e(ot,Z6),e(Z6,bbe),e(bbe,Bdr),e(Z6,Idr),e(Z6,sQ),e(sQ,Ndr),e(Z6,qdr),e(ot,jdr),e(ot,eT),e(eT,vbe),e(vbe,Ddr),e(eT,Gdr),e(eT,lQ),e(lQ,Odr),e(eT,Vdr),e(ot,Xdr),e(ot,oT),e(oT,Fbe),e(Fbe,zdr),e(oT,Wdr),e(oT,iQ),e(iQ,Qdr),e(oT,Hdr),e(ot,Udr),e(ot,rT),e(rT,Tbe),e(Tbe,Jdr),e(rT,Ydr),e(rT,dQ),e(dQ,Kdr),e(rT,Zdr),e(ot,ecr),e(ot,tT),e(tT,Mbe),e(Mbe,ocr),e(tT,rcr),e(tT,cQ),e(cQ,tcr),e(tT,acr),e(po,ncr),e(po,aT),e(aT,scr),e(aT,Ebe),e(Ebe,lcr),e(aT,icr),e(aT,Cbe),e(Cbe,dcr),e(po,ccr),M(nT,po,null),b(f,aOe,_),b(f,jd,_),e(jd,sT),e(sT,wbe),M(By,wbe,null),e(jd,fcr),e(jd,Abe),e(Abe,mcr),b(f,nOe,_),b(f,Ho,_),M(Iy,Ho,null),e(Ho,gcr),e(Ho,Dd),e(Dd,hcr),e(Dd,fQ),e(fQ,pcr),e(Dd,ucr),e(Dd,mQ),e(mQ,_cr),e(Dd,bcr),e(Ho,vcr),e(Ho,Ny),e(Ny,Fcr),e(Ny,Lbe),e(Lbe,Tcr),e(Ny,Mcr),e(Ho,Ecr),e(Ho,At),M(qy,At,null),e(At,Ccr),e(At,ybe),e(ybe,wcr),e(At,Acr),e(At,Gd),e(Gd,Lcr),e(Gd,xbe),e(xbe,ycr),e(Gd,xcr),e(Gd,gQ),e(gQ,$cr),e(Gd,kcr),e(At,Scr),M(lT,At,null),e(Ho,Rcr),e(Ho,uo),M(jy,uo,null),e(uo,Pcr),e(uo,$be),e($be,Bcr),e(uo,Icr),e(uo,Ka),e(Ka,Ncr),e(Ka,kbe),e(kbe,qcr),e(Ka,jcr),e(Ka,Sbe),e(Sbe,Dcr),e(Ka,Gcr),e(Ka,Rbe),e(Rbe,Ocr),e(Ka,Vcr),e(uo,Xcr),e(uo,Od),e(Od,iT),e(iT,Pbe),e(Pbe,zcr),e(iT,Wcr),e(iT,hQ),e(hQ,Qcr),e(iT,Hcr),e(Od,Ucr),e(Od,dT),e(dT,Bbe),e(Bbe,Jcr),e(dT,Ycr),e(dT,pQ),e(pQ,Kcr),e(dT,Zcr),e(Od,efr),e(Od,cT),e(cT,Ibe),e(Ibe,ofr),e(cT,rfr),e(cT,uQ),e(uQ,tfr),e(cT,afr),e(uo,nfr),e(uo,fT),e(fT,sfr),e(fT,Nbe),e(Nbe,lfr),e(fT,ifr),e(fT,qbe),e(qbe,dfr),e(uo,cfr),M(mT,uo,null),b(f,sOe,_),b(f,Vd,_),e(Vd,gT),e(gT,jbe),M(Dy,jbe,null),e(Vd,ffr),e(Vd,Dbe),e(Dbe,mfr),b(f,lOe,_),b(f,Uo,_),M(Gy,Uo,null),e(Uo,gfr),e(Uo,Xd),e(Xd,hfr),e(Xd,_Q),e(_Q,pfr),e(Xd,ufr),e(Xd,bQ),e(bQ,_fr),e(Xd,bfr),e(Uo,vfr),e(Uo,Oy),e(Oy,Ffr),e(Oy,Gbe),e(Gbe,Tfr),e(Oy,Mfr),e(Uo,Efr),e(Uo,Lt),M(Vy,Lt,null),e(Lt,Cfr),e(Lt,Obe),e(Obe,wfr),e(Lt,Afr),e(Lt,zd),e(zd,Lfr),e(zd,Vbe),e(Vbe,yfr),e(zd,xfr),e(zd,vQ),e(vQ,$fr),e(zd,kfr),e(Lt,Sfr),M(hT,Lt,null),e(Uo,Rfr),e(Uo,_o),M(Xy,_o,null),e(_o,Pfr),e(_o,Xbe),e(Xbe,Bfr),e(_o,Ifr),e(_o,Za),e(Za,Nfr),e(Za,zbe),e(zbe,qfr),e(Za,jfr),e(Za,Wbe),e(Wbe,Dfr),e(Za,Gfr),e(Za,Qbe),e(Qbe,Ofr),e(Za,Vfr),e(_o,Xfr),e(_o,zy),e(zy,pT),e(pT,Hbe),e(Hbe,zfr),e(pT,Wfr),e(pT,FQ),e(FQ,Qfr),e(pT,Hfr),e(zy,Ufr),e(zy,uT),e(uT,Ube),e(Ube,Jfr),e(uT,Yfr),e(uT,TQ),e(TQ,Kfr),e(uT,Zfr),e(_o,emr),e(_o,_T),e(_T,omr),e(_T,Jbe),e(Jbe,rmr),e(_T,tmr),e(_T,Ybe),e(Ybe,amr),e(_o,nmr),M(bT,_o,null),b(f,iOe,_),b(f,Wd,_),e(Wd,vT),e(vT,Kbe),M(Wy,Kbe,null),e(Wd,smr),e(Wd,Zbe),e(Zbe,lmr),b(f,dOe,_),b(f,Jo,_),M(Qy,Jo,null),e(Jo,imr),e(Jo,Qd),e(Qd,dmr),e(Qd,MQ),e(MQ,cmr),e(Qd,fmr),e(Qd,EQ),e(EQ,mmr),e(Qd,gmr),e(Jo,hmr),e(Jo,Hy),e(Hy,pmr),e(Hy,eve),e(eve,umr),e(Hy,_mr),e(Jo,bmr),e(Jo,yt),M(Uy,yt,null),e(yt,vmr),e(yt,ove),e(ove,Fmr),e(yt,Tmr),e(yt,Hd),e(Hd,Mmr),e(Hd,rve),e(rve,Emr),e(Hd,Cmr),e(Hd,CQ),e(CQ,wmr),e(Hd,Amr),e(yt,Lmr),M(FT,yt,null),e(Jo,ymr),e(Jo,bo),M(Jy,bo,null),e(bo,xmr),e(bo,tve),e(tve,$mr),e(bo,kmr),e(bo,en),e(en,Smr),e(en,ave),e(ave,Rmr),e(en,Pmr),e(en,nve),e(nve,Bmr),e(en,Imr),e(en,sve),e(sve,Nmr),e(en,qmr),e(bo,jmr),e(bo,lve),e(lve,TT),e(TT,ive),e(ive,Dmr),e(TT,Gmr),e(TT,wQ),e(wQ,Omr),e(TT,Vmr),e(bo,Xmr),e(bo,MT),e(MT,zmr),e(MT,dve),e(dve,Wmr),e(MT,Qmr),e(MT,cve),e(cve,Hmr),e(bo,Umr),M(ET,bo,null),b(f,cOe,_),b(f,Ud,_),e(Ud,CT),e(CT,fve),M(Yy,fve,null),e(Ud,Jmr),e(Ud,mve),e(mve,Ymr),b(f,fOe,_),b(f,Yo,_),M(Ky,Yo,null),e(Yo,Kmr),e(Yo,Jd),e(Jd,Zmr),e(Jd,AQ),e(AQ,egr),e(Jd,ogr),e(Jd,LQ),e(LQ,rgr),e(Jd,tgr),e(Yo,agr),e(Yo,Zy),e(Zy,ngr),e(Zy,gve),e(gve,sgr),e(Zy,lgr),e(Yo,igr),e(Yo,xt),M(e9,xt,null),e(xt,dgr),e(xt,hve),e(hve,cgr),e(xt,fgr),e(xt,Yd),e(Yd,mgr),e(Yd,pve),e(pve,ggr),e(Yd,hgr),e(Yd,yQ),e(yQ,pgr),e(Yd,ugr),e(xt,_gr),M(wT,xt,null),e(Yo,bgr),e(Yo,vo),M(o9,vo,null),e(vo,vgr),e(vo,uve),e(uve,Fgr),e(vo,Tgr),e(vo,on),e(on,Mgr),e(on,_ve),e(_ve,Egr),e(on,Cgr),e(on,bve),e(bve,wgr),e(on,Agr),e(on,vve),e(vve,Lgr),e(on,ygr),e(vo,xgr),e(vo,rn),e(rn,AT),e(AT,Fve),e(Fve,$gr),e(AT,kgr),e(AT,xQ),e(xQ,Sgr),e(AT,Rgr),e(rn,Pgr),e(rn,LT),e(LT,Tve),e(Tve,Bgr),e(LT,Igr),e(LT,$Q),e($Q,Ngr),e(LT,qgr),e(rn,jgr),e(rn,yT),e(yT,Mve),e(Mve,Dgr),e(yT,Ggr),e(yT,kQ),e(kQ,Ogr),e(yT,Vgr),e(rn,Xgr),e(rn,xT),e(xT,Eve),e(Eve,zgr),e(xT,Wgr),e(xT,SQ),e(SQ,Qgr),e(xT,Hgr),e(vo,Ugr),e(vo,$T),e($T,Jgr),e($T,Cve),e(Cve,Ygr),e($T,Kgr),e($T,wve),e(wve,Zgr),e(vo,ehr),M(kT,vo,null),b(f,mOe,_),b(f,Kd,_),e(Kd,ST),e(ST,Ave),M(r9,Ave,null),e(Kd,ohr),e(Kd,Lve),e(Lve,rhr),b(f,gOe,_),b(f,Ko,_),M(t9,Ko,null),e(Ko,thr),e(Ko,Zd),e(Zd,ahr),e(Zd,RQ),e(RQ,nhr),e(Zd,shr),e(Zd,PQ),e(PQ,lhr),e(Zd,ihr),e(Ko,dhr),e(Ko,a9),e(a9,chr),e(a9,yve),e(yve,fhr),e(a9,mhr),e(Ko,ghr),e(Ko,$t),M(n9,$t,null),e($t,hhr),e($t,xve),e(xve,phr),e($t,uhr),e($t,ec),e(ec,_hr),e(ec,$ve),e($ve,bhr),e(ec,vhr),e(ec,BQ),e(BQ,Fhr),e(ec,Thr),e($t,Mhr),M(RT,$t,null),e(Ko,Ehr),e(Ko,Fo),M(s9,Fo,null),e(Fo,Chr),e(Fo,kve),e(kve,whr),e(Fo,Ahr),e(Fo,tn),e(tn,Lhr),e(tn,Sve),e(Sve,yhr),e(tn,xhr),e(tn,Rve),e(Rve,$hr),e(tn,khr),e(tn,Pve),e(Pve,Shr),e(tn,Rhr),e(Fo,Phr),e(Fo,Bve),e(Bve,PT),e(PT,Ive),e(Ive,Bhr),e(PT,Ihr),e(PT,IQ),e(IQ,Nhr),e(PT,qhr),e(Fo,jhr),e(Fo,BT),e(BT,Dhr),e(BT,Nve),e(Nve,Ghr),e(BT,Ohr),e(BT,qve),e(qve,Vhr),e(Fo,Xhr),M(IT,Fo,null),b(f,hOe,_),b(f,oc,_),e(oc,NT),e(NT,jve),M(l9,jve,null),e(oc,zhr),e(oc,Dve),e(Dve,Whr),b(f,pOe,_),b(f,Zo,_),M(i9,Zo,null),e(Zo,Qhr),e(Zo,rc),e(rc,Hhr),e(rc,NQ),e(NQ,Uhr),e(rc,Jhr),e(rc,qQ),e(qQ,Yhr),e(rc,Khr),e(Zo,Zhr),e(Zo,d9),e(d9,epr),e(d9,Gve),e(Gve,opr),e(d9,rpr),e(Zo,tpr),e(Zo,kt),M(c9,kt,null),e(kt,apr),e(kt,Ove),e(Ove,npr),e(kt,spr),e(kt,tc),e(tc,lpr),e(tc,Vve),e(Vve,ipr),e(tc,dpr),e(tc,jQ),e(jQ,cpr),e(tc,fpr),e(kt,mpr),M(qT,kt,null),e(Zo,gpr),e(Zo,Lr),M(f9,Lr,null),e(Lr,hpr),e(Lr,Xve),e(Xve,ppr),e(Lr,upr),e(Lr,an),e(an,_pr),e(an,zve),e(zve,bpr),e(an,vpr),e(an,Wve),e(Wve,Fpr),e(an,Tpr),e(an,Qve),e(Qve,Mpr),e(an,Epr),e(Lr,Cpr),e(Lr,q),e(q,jT),e(jT,Hve),e(Hve,wpr),e(jT,Apr),e(jT,DQ),e(DQ,Lpr),e(jT,ypr),e(q,xpr),e(q,DT),e(DT,Uve),e(Uve,$pr),e(DT,kpr),e(DT,GQ),e(GQ,Spr),e(DT,Rpr),e(q,Ppr),e(q,GT),e(GT,Jve),e(Jve,Bpr),e(GT,Ipr),e(GT,OQ),e(OQ,Npr),e(GT,qpr),e(q,jpr),e(q,OT),e(OT,Yve),e(Yve,Dpr),e(OT,Gpr),e(OT,VQ),e(VQ,Opr),e(OT,Vpr),e(q,Xpr),e(q,VT),e(VT,Kve),e(Kve,zpr),e(VT,Wpr),e(VT,XQ),e(XQ,Qpr),e(VT,Hpr),e(q,Upr),e(q,XT),e(XT,Zve),e(Zve,Jpr),e(XT,Ypr),e(XT,zQ),e(zQ,Kpr),e(XT,Zpr),e(q,eur),e(q,zT),e(zT,e0e),e(e0e,our),e(zT,rur),e(zT,WQ),e(WQ,tur),e(zT,aur),e(q,nur),e(q,WT),e(WT,o0e),e(o0e,sur),e(WT,lur),e(WT,QQ),e(QQ,iur),e(WT,dur),e(q,cur),e(q,QT),e(QT,r0e),e(r0e,fur),e(QT,mur),e(QT,HQ),e(HQ,gur),e(QT,hur),e(q,pur),e(q,HT),e(HT,t0e),e(t0e,uur),e(HT,_ur),e(HT,UQ),e(UQ,bur),e(HT,vur),e(q,Fur),e(q,UT),e(UT,a0e),e(a0e,Tur),e(UT,Mur),e(UT,JQ),e(JQ,Eur),e(UT,Cur),e(q,wur),e(q,JT),e(JT,n0e),e(n0e,Aur),e(JT,Lur),e(JT,YQ),e(YQ,yur),e(JT,xur),e(q,$ur),e(q,YT),e(YT,s0e),e(s0e,kur),e(YT,Sur),e(YT,KQ),e(KQ,Rur),e(YT,Pur),e(q,Bur),e(q,KT),e(KT,l0e),e(l0e,Iur),e(KT,Nur),e(KT,ZQ),e(ZQ,qur),e(KT,jur),e(q,Dur),e(q,ZT),e(ZT,i0e),e(i0e,Gur),e(ZT,Our),e(ZT,eH),e(eH,Vur),e(ZT,Xur),e(q,zur),e(q,e7),e(e7,d0e),e(d0e,Wur),e(e7,Qur),e(e7,oH),e(oH,Hur),e(e7,Uur),e(q,Jur),e(q,o7),e(o7,c0e),e(c0e,Yur),e(o7,Kur),e(o7,rH),e(rH,Zur),e(o7,e_r),e(q,o_r),e(q,r7),e(r7,f0e),e(f0e,r_r),e(r7,t_r),e(r7,tH),e(tH,a_r),e(r7,n_r),e(q,s_r),e(q,Xs),e(Xs,m0e),e(m0e,l_r),e(Xs,i_r),e(Xs,aH),e(aH,d_r),e(Xs,c_r),e(Xs,nH),e(nH,f_r),e(Xs,m_r),e(q,g_r),e(q,t7),e(t7,g0e),e(g0e,h_r),e(t7,p_r),e(t7,sH),e(sH,u_r),e(t7,__r),e(q,b_r),e(q,a7),e(a7,h0e),e(h0e,v_r),e(a7,F_r),e(a7,lH),e(lH,T_r),e(a7,M_r),e(q,E_r),e(q,n7),e(n7,p0e),e(p0e,C_r),e(n7,w_r),e(n7,iH),e(iH,A_r),e(n7,L_r),e(q,y_r),e(q,s7),e(s7,u0e),e(u0e,x_r),e(s7,$_r),e(s7,dH),e(dH,k_r),e(s7,S_r),e(q,R_r),e(q,l7),e(l7,_0e),e(_0e,P_r),e(l7,B_r),e(l7,cH),e(cH,I_r),e(l7,N_r),e(q,q_r),e(q,i7),e(i7,b0e),e(b0e,j_r),e(i7,D_r),e(i7,fH),e(fH,G_r),e(i7,O_r),e(q,V_r),e(q,d7),e(d7,v0e),e(v0e,X_r),e(d7,z_r),e(d7,mH),e(mH,W_r),e(d7,Q_r),e(q,H_r),e(q,c7),e(c7,F0e),e(F0e,U_r),e(c7,J_r),e(c7,gH),e(gH,Y_r),e(c7,K_r),e(q,Z_r),e(q,f7),e(f7,T0e),e(T0e,e1r),e(f7,o1r),e(f7,hH),e(hH,r1r),e(f7,t1r),e(q,a1r),e(q,m7),e(m7,M0e),e(M0e,n1r),e(m7,s1r),e(m7,pH),e(pH,l1r),e(m7,i1r),e(q,d1r),e(q,g7),e(g7,E0e),e(E0e,c1r),e(g7,f1r),e(g7,uH),e(uH,m1r),e(g7,g1r),e(q,h1r),e(q,h7),e(h7,C0e),e(C0e,p1r),e(h7,u1r),e(h7,_H),e(_H,_1r),e(h7,b1r),e(q,v1r),e(q,p7),e(p7,w0e),e(w0e,F1r),e(p7,T1r),e(p7,bH),e(bH,M1r),e(p7,E1r),e(q,C1r),e(q,u7),e(u7,A0e),e(A0e,w1r),e(u7,A1r),e(u7,vH),e(vH,L1r),e(u7,y1r),e(q,x1r),e(q,_7),e(_7,L0e),e(L0e,$1r),e(_7,k1r),e(_7,FH),e(FH,S1r),e(_7,R1r),e(q,P1r),e(q,b7),e(b7,y0e),e(y0e,B1r),e(b7,I1r),e(b7,TH),e(TH,N1r),e(b7,q1r),e(q,j1r),e(q,v7),e(v7,x0e),e(x0e,D1r),e(v7,G1r),e(v7,MH),e(MH,O1r),e(v7,V1r),e(q,X1r),e(q,F7),e(F7,$0e),e($0e,z1r),e(F7,W1r),e(F7,EH),e(EH,Q1r),e(F7,H1r),e(q,U1r),e(q,T7),e(T7,k0e),e(k0e,J1r),e(T7,Y1r),e(T7,CH),e(CH,K1r),e(T7,Z1r),e(q,e2r),e(q,M7),e(M7,S0e),e(S0e,o2r),e(M7,r2r),e(M7,wH),e(wH,t2r),e(M7,a2r),e(q,n2r),e(q,E7),e(E7,R0e),e(R0e,s2r),e(E7,l2r),e(E7,AH),e(AH,i2r),e(E7,d2r),e(q,c2r),e(q,C7),e(C7,P0e),e(P0e,f2r),e(C7,m2r),e(C7,LH),e(LH,g2r),e(C7,h2r),e(q,p2r),e(q,w7),e(w7,B0e),e(B0e,u2r),e(w7,_2r),e(w7,yH),e(yH,b2r),e(w7,v2r),e(q,F2r),e(q,A7),e(A7,I0e),e(I0e,T2r),e(A7,M2r),e(A7,xH),e(xH,E2r),e(A7,C2r),e(q,w2r),e(q,L7),e(L7,N0e),e(N0e,A2r),e(L7,L2r),e(L7,$H),e($H,y2r),e(L7,x2r),e(q,$2r),e(q,y7),e(y7,q0e),e(q0e,k2r),e(y7,S2r),e(y7,kH),e(kH,R2r),e(y7,P2r),e(q,B2r),e(q,x7),e(x7,j0e),e(j0e,I2r),e(x7,N2r),e(x7,SH),e(SH,q2r),e(x7,j2r),e(q,D2r),e(q,$7),e($7,D0e),e(D0e,G2r),e($7,O2r),e($7,RH),e(RH,V2r),e($7,X2r),e(q,z2r),e(q,k7),e(k7,G0e),e(G0e,W2r),e(k7,Q2r),e(k7,PH),e(PH,H2r),e(k7,U2r),e(Lr,J2r),M(S7,Lr,null),b(f,uOe,_),b(f,ac,_),e(ac,R7),e(R7,O0e),M(m9,O0e,null),e(ac,Y2r),e(ac,V0e),e(V0e,K2r),b(f,_Oe,_),b(f,er,_),M(g9,er,null),e(er,Z2r),e(er,nc),e(nc,ebr),e(nc,BH),e(BH,obr),e(nc,rbr),e(nc,IH),e(IH,tbr),e(nc,abr),e(er,nbr),e(er,h9),e(h9,sbr),e(h9,X0e),e(X0e,lbr),e(h9,ibr),e(er,dbr),e(er,St),M(p9,St,null),e(St,cbr),e(St,z0e),e(z0e,fbr),e(St,mbr),e(St,sc),e(sc,gbr),e(sc,W0e),e(W0e,hbr),e(sc,pbr),e(sc,NH),e(NH,ubr),e(sc,_br),e(St,bbr),M(P7,St,null),e(er,vbr),e(er,yr),M(u9,yr,null),e(yr,Fbr),e(yr,Q0e),e(Q0e,Tbr),e(yr,Mbr),e(yr,nn),e(nn,Ebr),e(nn,H0e),e(H0e,Cbr),e(nn,wbr),e(nn,U0e),e(U0e,Abr),e(nn,Lbr),e(nn,J0e),e(J0e,ybr),e(nn,xbr),e(yr,$br),e(yr,se),e(se,B7),e(B7,Y0e),e(Y0e,kbr),e(B7,Sbr),e(B7,qH),e(qH,Rbr),e(B7,Pbr),e(se,Bbr),e(se,I7),e(I7,K0e),e(K0e,Ibr),e(I7,Nbr),e(I7,jH),e(jH,qbr),e(I7,jbr),e(se,Dbr),e(se,N7),e(N7,Z0e),e(Z0e,Gbr),e(N7,Obr),e(N7,DH),e(DH,Vbr),e(N7,Xbr),e(se,zbr),e(se,q7),e(q7,eFe),e(eFe,Wbr),e(q7,Qbr),e(q7,GH),e(GH,Hbr),e(q7,Ubr),e(se,Jbr),e(se,j7),e(j7,oFe),e(oFe,Ybr),e(j7,Kbr),e(j7,OH),e(OH,Zbr),e(j7,evr),e(se,ovr),e(se,D7),e(D7,rFe),e(rFe,rvr),e(D7,tvr),e(D7,VH),e(VH,avr),e(D7,nvr),e(se,svr),e(se,G7),e(G7,tFe),e(tFe,lvr),e(G7,ivr),e(G7,XH),e(XH,dvr),e(G7,cvr),e(se,fvr),e(se,O7),e(O7,aFe),e(aFe,mvr),e(O7,gvr),e(O7,zH),e(zH,hvr),e(O7,pvr),e(se,uvr),e(se,V7),e(V7,nFe),e(nFe,_vr),e(V7,bvr),e(V7,WH),e(WH,vvr),e(V7,Fvr),e(se,Tvr),e(se,X7),e(X7,sFe),e(sFe,Mvr),e(X7,Evr),e(X7,QH),e(QH,Cvr),e(X7,wvr),e(se,Avr),e(se,z7),e(z7,lFe),e(lFe,Lvr),e(z7,yvr),e(z7,HH),e(HH,xvr),e(z7,$vr),e(se,kvr),e(se,W7),e(W7,iFe),e(iFe,Svr),e(W7,Rvr),e(W7,UH),e(UH,Pvr),e(W7,Bvr),e(se,Ivr),e(se,Q7),e(Q7,dFe),e(dFe,Nvr),e(Q7,qvr),e(Q7,JH),e(JH,jvr),e(Q7,Dvr),e(se,Gvr),e(se,H7),e(H7,cFe),e(cFe,Ovr),e(H7,Vvr),e(H7,YH),e(YH,Xvr),e(H7,zvr),e(se,Wvr),e(se,U7),e(U7,fFe),e(fFe,Qvr),e(U7,Hvr),e(U7,KH),e(KH,Uvr),e(U7,Jvr),e(se,Yvr),e(se,J7),e(J7,mFe),e(mFe,Kvr),e(J7,Zvr),e(J7,ZH),e(ZH,e0r),e(J7,o0r),e(se,r0r),e(se,Y7),e(Y7,gFe),e(gFe,t0r),e(Y7,a0r),e(Y7,eU),e(eU,n0r),e(Y7,s0r),e(se,l0r),e(se,K7),e(K7,hFe),e(hFe,i0r),e(K7,d0r),e(K7,oU),e(oU,c0r),e(K7,f0r),e(se,m0r),e(se,Z7),e(Z7,pFe),e(pFe,g0r),e(Z7,h0r),e(Z7,rU),e(rU,p0r),e(Z7,u0r),e(se,_0r),e(se,e8),e(e8,uFe),e(uFe,b0r),e(e8,v0r),e(e8,tU),e(tU,F0r),e(e8,T0r),e(se,M0r),e(se,o8),e(o8,_Fe),e(_Fe,E0r),e(o8,C0r),e(o8,aU),e(aU,w0r),e(o8,A0r),e(se,L0r),e(se,r8),e(r8,bFe),e(bFe,y0r),e(r8,x0r),e(r8,nU),e(nU,$0r),e(r8,k0r),e(se,S0r),e(se,t8),e(t8,vFe),e(vFe,R0r),e(t8,P0r),e(t8,sU),e(sU,B0r),e(t8,I0r),e(yr,N0r),M(a8,yr,null),b(f,bOe,_),b(f,lc,_),e(lc,n8),e(n8,FFe),M(_9,FFe,null),e(lc,q0r),e(lc,TFe),e(TFe,j0r),b(f,vOe,_),b(f,or,_),M(b9,or,null),e(or,D0r),e(or,ic),e(ic,G0r),e(ic,lU),e(lU,O0r),e(ic,V0r),e(ic,iU),e(iU,X0r),e(ic,z0r),e(or,W0r),e(or,v9),e(v9,Q0r),e(v9,MFe),e(MFe,H0r),e(v9,U0r),e(or,J0r),e(or,Rt),M(F9,Rt,null),e(Rt,Y0r),e(Rt,EFe),e(EFe,K0r),e(Rt,Z0r),e(Rt,dc),e(dc,eFr),e(dc,CFe),e(CFe,oFr),e(dc,rFr),e(dc,dU),e(dU,tFr),e(dc,aFr),e(Rt,nFr),M(s8,Rt,null),e(or,sFr),e(or,xr),M(T9,xr,null),e(xr,lFr),e(xr,wFe),e(wFe,iFr),e(xr,dFr),e(xr,sn),e(sn,cFr),e(sn,AFe),e(AFe,fFr),e(sn,mFr),e(sn,LFe),e(LFe,gFr),e(sn,hFr),e(sn,yFe),e(yFe,pFr),e(sn,uFr),e(xr,_Fr),e(xr,Me),e(Me,l8),e(l8,xFe),e(xFe,bFr),e(l8,vFr),e(l8,cU),e(cU,FFr),e(l8,TFr),e(Me,MFr),e(Me,i8),e(i8,$Fe),e($Fe,EFr),e(i8,CFr),e(i8,fU),e(fU,wFr),e(i8,AFr),e(Me,LFr),e(Me,d8),e(d8,kFe),e(kFe,yFr),e(d8,xFr),e(d8,mU),e(mU,$Fr),e(d8,kFr),e(Me,SFr),e(Me,c8),e(c8,SFe),e(SFe,RFr),e(c8,PFr),e(c8,gU),e(gU,BFr),e(c8,IFr),e(Me,NFr),e(Me,f8),e(f8,RFe),e(RFe,qFr),e(f8,jFr),e(f8,hU),e(hU,DFr),e(f8,GFr),e(Me,OFr),e(Me,m8),e(m8,PFe),e(PFe,VFr),e(m8,XFr),e(m8,pU),e(pU,zFr),e(m8,WFr),e(Me,QFr),e(Me,g8),e(g8,BFe),e(BFe,HFr),e(g8,UFr),e(g8,uU),e(uU,JFr),e(g8,YFr),e(Me,KFr),e(Me,h8),e(h8,IFe),e(IFe,ZFr),e(h8,e6r),e(h8,_U),e(_U,o6r),e(h8,r6r),e(Me,t6r),e(Me,p8),e(p8,NFe),e(NFe,a6r),e(p8,n6r),e(p8,bU),e(bU,s6r),e(p8,l6r),e(Me,i6r),e(Me,u8),e(u8,qFe),e(qFe,d6r),e(u8,c6r),e(u8,vU),e(vU,f6r),e(u8,m6r),e(Me,g6r),e(Me,_8),e(_8,jFe),e(jFe,h6r),e(_8,p6r),e(_8,FU),e(FU,u6r),e(_8,_6r),e(Me,b6r),e(Me,b8),e(b8,DFe),e(DFe,v6r),e(b8,F6r),e(b8,TU),e(TU,T6r),e(b8,M6r),e(Me,E6r),e(Me,v8),e(v8,GFe),e(GFe,C6r),e(v8,w6r),e(v8,MU),e(MU,A6r),e(v8,L6r),e(xr,y6r),M(F8,xr,null),b(f,FOe,_),b(f,cc,_),e(cc,T8),e(T8,OFe),M(M9,OFe,null),e(cc,x6r),e(cc,VFe),e(VFe,$6r),b(f,TOe,_),b(f,rr,_),M(E9,rr,null),e(rr,k6r),e(rr,fc),e(fc,S6r),e(fc,EU),e(EU,R6r),e(fc,P6r),e(fc,CU),e(CU,B6r),e(fc,I6r),e(rr,N6r),e(rr,C9),e(C9,q6r),e(C9,XFe),e(XFe,j6r),e(C9,D6r),e(rr,G6r),e(rr,Pt),M(w9,Pt,null),e(Pt,O6r),e(Pt,zFe),e(zFe,V6r),e(Pt,X6r),e(Pt,mc),e(mc,z6r),e(mc,WFe),e(WFe,W6r),e(mc,Q6r),e(mc,wU),e(wU,H6r),e(mc,U6r),e(Pt,J6r),M(M8,Pt,null),e(rr,Y6r),e(rr,$r),M(A9,$r,null),e($r,K6r),e($r,QFe),e(QFe,Z6r),e($r,eTr),e($r,ln),e(ln,oTr),e(ln,HFe),e(HFe,rTr),e(ln,tTr),e(ln,UFe),e(UFe,aTr),e(ln,nTr),e(ln,JFe),e(JFe,sTr),e(ln,lTr),e($r,iTr),e($r,rt),e(rt,E8),e(E8,YFe),e(YFe,dTr),e(E8,cTr),e(E8,AU),e(AU,fTr),e(E8,mTr),e(rt,gTr),e(rt,C8),e(C8,KFe),e(KFe,hTr),e(C8,pTr),e(C8,LU),e(LU,uTr),e(C8,_Tr),e(rt,bTr),e(rt,zs),e(zs,ZFe),e(ZFe,vTr),e(zs,FTr),e(zs,yU),e(yU,TTr),e(zs,MTr),e(zs,xU),e(xU,ETr),e(zs,CTr),e(rt,wTr),e(rt,w8),e(w8,e6e),e(e6e,ATr),e(w8,LTr),e(w8,$U),e($U,yTr),e(w8,xTr),e(rt,$Tr),e(rt,A8),e(A8,o6e),e(o6e,kTr),e(A8,STr),e(A8,kU),e(kU,RTr),e(A8,PTr),e($r,BTr),M(L8,$r,null),b(f,MOe,_),b(f,gc,_),e(gc,y8),e(y8,r6e),M(L9,r6e,null),e(gc,ITr),e(gc,t6e),e(t6e,NTr),b(f,EOe,_),b(f,tr,_),M(y9,tr,null),e(tr,qTr),e(tr,hc),e(hc,jTr),e(hc,SU),e(SU,DTr),e(hc,GTr),e(hc,RU),e(RU,OTr),e(hc,VTr),e(tr,XTr),e(tr,x9),e(x9,zTr),e(x9,a6e),e(a6e,WTr),e(x9,QTr),e(tr,HTr),e(tr,Bt),M($9,Bt,null),e(Bt,UTr),e(Bt,n6e),e(n6e,JTr),e(Bt,YTr),e(Bt,pc),e(pc,KTr),e(pc,s6e),e(s6e,ZTr),e(pc,e7r),e(pc,PU),e(PU,o7r),e(pc,r7r),e(Bt,t7r),M(x8,Bt,null),e(tr,a7r),e(tr,kr),M(k9,kr,null),e(kr,n7r),e(kr,l6e),e(l6e,s7r),e(kr,l7r),e(kr,dn),e(dn,i7r),e(dn,i6e),e(i6e,d7r),e(dn,c7r),e(dn,d6e),e(d6e,f7r),e(dn,m7r),e(dn,c6e),e(c6e,g7r),e(dn,h7r),e(kr,p7r),e(kr,ie),e(ie,$8),e($8,f6e),e(f6e,u7r),e($8,_7r),e($8,BU),e(BU,b7r),e($8,v7r),e(ie,F7r),e(ie,k8),e(k8,m6e),e(m6e,T7r),e(k8,M7r),e(k8,IU),e(IU,E7r),e(k8,C7r),e(ie,w7r),e(ie,S8),e(S8,g6e),e(g6e,A7r),e(S8,L7r),e(S8,NU),e(NU,y7r),e(S8,x7r),e(ie,$7r),e(ie,R8),e(R8,h6e),e(h6e,k7r),e(R8,S7r),e(R8,qU),e(qU,R7r),e(R8,P7r),e(ie,B7r),e(ie,P8),e(P8,p6e),e(p6e,I7r),e(P8,N7r),e(P8,jU),e(jU,q7r),e(P8,j7r),e(ie,D7r),e(ie,B8),e(B8,u6e),e(u6e,G7r),e(B8,O7r),e(B8,DU),e(DU,V7r),e(B8,X7r),e(ie,z7r),e(ie,I8),e(I8,_6e),e(_6e,W7r),e(I8,Q7r),e(I8,GU),e(GU,H7r),e(I8,U7r),e(ie,J7r),e(ie,N8),e(N8,b6e),e(b6e,Y7r),e(N8,K7r),e(N8,OU),e(OU,Z7r),e(N8,e8r),e(ie,o8r),e(ie,q8),e(q8,v6e),e(v6e,r8r),e(q8,t8r),e(q8,VU),e(VU,a8r),e(q8,n8r),e(ie,s8r),e(ie,j8),e(j8,F6e),e(F6e,l8r),e(j8,i8r),e(j8,XU),e(XU,d8r),e(j8,c8r),e(ie,f8r),e(ie,D8),e(D8,T6e),e(T6e,m8r),e(D8,g8r),e(D8,zU),e(zU,h8r),e(D8,p8r),e(ie,u8r),e(ie,G8),e(G8,M6e),e(M6e,_8r),e(G8,b8r),e(G8,WU),e(WU,v8r),e(G8,F8r),e(ie,T8r),e(ie,O8),e(O8,E6e),e(E6e,M8r),e(O8,E8r),e(O8,QU),e(QU,C8r),e(O8,w8r),e(ie,A8r),e(ie,V8),e(V8,C6e),e(C6e,L8r),e(V8,y8r),e(V8,HU),e(HU,x8r),e(V8,$8r),e(ie,k8r),e(ie,X8),e(X8,w6e),e(w6e,S8r),e(X8,R8r),e(X8,UU),e(UU,P8r),e(X8,B8r),e(ie,I8r),e(ie,z8),e(z8,A6e),e(A6e,N8r),e(z8,q8r),e(z8,JU),e(JU,j8r),e(z8,D8r),e(ie,G8r),e(ie,W8),e(W8,L6e),e(L6e,O8r),e(W8,V8r),e(W8,YU),e(YU,X8r),e(W8,z8r),e(ie,W8r),e(ie,Q8),e(Q8,y6e),e(y6e,Q8r),e(Q8,H8r),e(Q8,KU),e(KU,U8r),e(Q8,J8r),e(ie,Y8r),e(ie,H8),e(H8,x6e),e(x6e,K8r),e(H8,Z8r),e(H8,ZU),e(ZU,eMr),e(H8,oMr),e(ie,rMr),e(ie,U8),e(U8,$6e),e($6e,tMr),e(U8,aMr),e(U8,eJ),e(eJ,nMr),e(U8,sMr),e(kr,lMr),M(J8,kr,null),b(f,COe,_),b(f,uc,_),e(uc,Y8),e(Y8,k6e),M(S9,k6e,null),e(uc,iMr),e(uc,S6e),e(S6e,dMr),b(f,wOe,_),b(f,ar,_),M(R9,ar,null),e(ar,cMr),e(ar,_c),e(_c,fMr),e(_c,oJ),e(oJ,mMr),e(_c,gMr),e(_c,rJ),e(rJ,hMr),e(_c,pMr),e(ar,uMr),e(ar,P9),e(P9,_Mr),e(P9,R6e),e(R6e,bMr),e(P9,vMr),e(ar,FMr),e(ar,It),M(B9,It,null),e(It,TMr),e(It,P6e),e(P6e,MMr),e(It,EMr),e(It,bc),e(bc,CMr),e(bc,B6e),e(B6e,wMr),e(bc,AMr),e(bc,tJ),e(tJ,LMr),e(bc,yMr),e(It,xMr),M(K8,It,null),e(ar,$Mr),e(ar,Sr),M(I9,Sr,null),e(Sr,kMr),e(Sr,I6e),e(I6e,SMr),e(Sr,RMr),e(Sr,cn),e(cn,PMr),e(cn,N6e),e(N6e,BMr),e(cn,IMr),e(cn,q6e),e(q6e,NMr),e(cn,qMr),e(cn,j6e),e(j6e,jMr),e(cn,DMr),e(Sr,GMr),e(Sr,ye),e(ye,Z8),e(Z8,D6e),e(D6e,OMr),e(Z8,VMr),e(Z8,aJ),e(aJ,XMr),e(Z8,zMr),e(ye,WMr),e(ye,eM),e(eM,G6e),e(G6e,QMr),e(eM,HMr),e(eM,nJ),e(nJ,UMr),e(eM,JMr),e(ye,YMr),e(ye,oM),e(oM,O6e),e(O6e,KMr),e(oM,ZMr),e(oM,sJ),e(sJ,e4r),e(oM,o4r),e(ye,r4r),e(ye,rM),e(rM,V6e),e(V6e,t4r),e(rM,a4r),e(rM,lJ),e(lJ,n4r),e(rM,s4r),e(ye,l4r),e(ye,tM),e(tM,X6e),e(X6e,i4r),e(tM,d4r),e(tM,iJ),e(iJ,c4r),e(tM,f4r),e(ye,m4r),e(ye,aM),e(aM,z6e),e(z6e,g4r),e(aM,h4r),e(aM,dJ),e(dJ,p4r),e(aM,u4r),e(ye,_4r),e(ye,nM),e(nM,W6e),e(W6e,b4r),e(nM,v4r),e(nM,cJ),e(cJ,F4r),e(nM,T4r),e(ye,M4r),e(ye,sM),e(sM,Q6e),e(Q6e,E4r),e(sM,C4r),e(sM,fJ),e(fJ,w4r),e(sM,A4r),e(ye,L4r),e(ye,lM),e(lM,H6e),e(H6e,y4r),e(lM,x4r),e(lM,mJ),e(mJ,$4r),e(lM,k4r),e(ye,S4r),e(ye,iM),e(iM,U6e),e(U6e,R4r),e(iM,P4r),e(iM,gJ),e(gJ,B4r),e(iM,I4r),e(Sr,N4r),M(dM,Sr,null),b(f,AOe,_),b(f,vc,_),e(vc,cM),e(cM,J6e),M(N9,J6e,null),e(vc,q4r),e(vc,Y6e),e(Y6e,j4r),b(f,LOe,_),b(f,nr,_),M(q9,nr,null),e(nr,D4r),e(nr,Fc),e(Fc,G4r),e(Fc,hJ),e(hJ,O4r),e(Fc,V4r),e(Fc,pJ),e(pJ,X4r),e(Fc,z4r),e(nr,W4r),e(nr,j9),e(j9,Q4r),e(j9,K6e),e(K6e,H4r),e(j9,U4r),e(nr,J4r),e(nr,Nt),M(D9,Nt,null),e(Nt,Y4r),e(Nt,Z6e),e(Z6e,K4r),e(Nt,Z4r),e(Nt,Tc),e(Tc,eEr),e(Tc,eTe),e(eTe,oEr),e(Tc,rEr),e(Tc,uJ),e(uJ,tEr),e(Tc,aEr),e(Nt,nEr),M(fM,Nt,null),e(nr,sEr),e(nr,Rr),M(G9,Rr,null),e(Rr,lEr),e(Rr,oTe),e(oTe,iEr),e(Rr,dEr),e(Rr,fn),e(fn,cEr),e(fn,rTe),e(rTe,fEr),e(fn,mEr),e(fn,tTe),e(tTe,gEr),e(fn,hEr),e(fn,aTe),e(aTe,pEr),e(fn,uEr),e(Rr,_Er),e(Rr,te),e(te,mM),e(mM,nTe),e(nTe,bEr),e(mM,vEr),e(mM,_J),e(_J,FEr),e(mM,TEr),e(te,MEr),e(te,gM),e(gM,sTe),e(sTe,EEr),e(gM,CEr),e(gM,bJ),e(bJ,wEr),e(gM,AEr),e(te,LEr),e(te,hM),e(hM,lTe),e(lTe,yEr),e(hM,xEr),e(hM,vJ),e(vJ,$Er),e(hM,kEr),e(te,SEr),e(te,pM),e(pM,iTe),e(iTe,REr),e(pM,PEr),e(pM,FJ),e(FJ,BEr),e(pM,IEr),e(te,NEr),e(te,uM),e(uM,dTe),e(dTe,qEr),e(uM,jEr),e(uM,TJ),e(TJ,DEr),e(uM,GEr),e(te,OEr),e(te,_M),e(_M,cTe),e(cTe,VEr),e(_M,XEr),e(_M,MJ),e(MJ,zEr),e(_M,WEr),e(te,QEr),e(te,bM),e(bM,fTe),e(fTe,HEr),e(bM,UEr),e(bM,EJ),e(EJ,JEr),e(bM,YEr),e(te,KEr),e(te,vM),e(vM,mTe),e(mTe,ZEr),e(vM,eCr),e(vM,CJ),e(CJ,oCr),e(vM,rCr),e(te,tCr),e(te,FM),e(FM,gTe),e(gTe,aCr),e(FM,nCr),e(FM,wJ),e(wJ,sCr),e(FM,lCr),e(te,iCr),e(te,TM),e(TM,hTe),e(hTe,dCr),e(TM,cCr),e(TM,AJ),e(AJ,fCr),e(TM,mCr),e(te,gCr),e(te,MM),e(MM,pTe),e(pTe,hCr),e(MM,pCr),e(MM,LJ),e(LJ,uCr),e(MM,_Cr),e(te,bCr),e(te,EM),e(EM,uTe),e(uTe,vCr),e(EM,FCr),e(EM,yJ),e(yJ,TCr),e(EM,MCr),e(te,ECr),e(te,CM),e(CM,_Te),e(_Te,CCr),e(CM,wCr),e(CM,xJ),e(xJ,ACr),e(CM,LCr),e(te,yCr),e(te,wM),e(wM,bTe),e(bTe,xCr),e(wM,$Cr),e(wM,$J),e($J,kCr),e(wM,SCr),e(te,RCr),e(te,AM),e(AM,vTe),e(vTe,PCr),e(AM,BCr),e(AM,kJ),e(kJ,ICr),e(AM,NCr),e(te,qCr),e(te,LM),e(LM,FTe),e(FTe,jCr),e(LM,DCr),e(LM,SJ),e(SJ,GCr),e(LM,OCr),e(te,VCr),e(te,yM),e(yM,TTe),e(TTe,XCr),e(yM,zCr),e(yM,RJ),e(RJ,WCr),e(yM,QCr),e(te,HCr),e(te,xM),e(xM,MTe),e(MTe,UCr),e(xM,JCr),e(xM,PJ),e(PJ,YCr),e(xM,KCr),e(te,ZCr),e(te,$M),e($M,ETe),e(ETe,e5r),e($M,o5r),e($M,BJ),e(BJ,r5r),e($M,t5r),e(te,a5r),e(te,kM),e(kM,CTe),e(CTe,n5r),e(kM,s5r),e(kM,IJ),e(IJ,l5r),e(kM,i5r),e(te,d5r),e(te,SM),e(SM,wTe),e(wTe,c5r),e(SM,f5r),e(SM,NJ),e(NJ,m5r),e(SM,g5r),e(te,h5r),e(te,RM),e(RM,ATe),e(ATe,p5r),e(RM,u5r),e(RM,qJ),e(qJ,_5r),e(RM,b5r),e(te,v5r),e(te,PM),e(PM,LTe),e(LTe,F5r),e(PM,T5r),e(PM,jJ),e(jJ,M5r),e(PM,E5r),e(te,C5r),e(te,BM),e(BM,yTe),e(yTe,w5r),e(BM,A5r),e(BM,DJ),e(DJ,L5r),e(BM,y5r),e(te,x5r),e(te,IM),e(IM,xTe),e(xTe,$5r),e(IM,k5r),e(IM,GJ),e(GJ,S5r),e(IM,R5r),e(te,P5r),e(te,NM),e(NM,$Te),e($Te,B5r),e(NM,I5r),e(NM,OJ),e(OJ,N5r),e(NM,q5r),e(Rr,j5r),M(qM,Rr,null),b(f,yOe,_),b(f,Mc,_),e(Mc,jM),e(jM,kTe),M(O9,kTe,null),e(Mc,D5r),e(Mc,STe),e(STe,G5r),b(f,xOe,_),b(f,sr,_),M(V9,sr,null),e(sr,O5r),e(sr,Ec),e(Ec,V5r),e(Ec,VJ),e(VJ,X5r),e(Ec,z5r),e(Ec,XJ),e(XJ,W5r),e(Ec,Q5r),e(sr,H5r),e(sr,X9),e(X9,U5r),e(X9,RTe),e(RTe,J5r),e(X9,Y5r),e(sr,K5r),e(sr,qt),M(z9,qt,null),e(qt,Z5r),e(qt,PTe),e(PTe,e3r),e(qt,o3r),e(qt,Cc),e(Cc,r3r),e(Cc,BTe),e(BTe,t3r),e(Cc,a3r),e(Cc,zJ),e(zJ,n3r),e(Cc,s3r),e(qt,l3r),M(DM,qt,null),e(sr,i3r),e(sr,Pr),M(W9,Pr,null),e(Pr,d3r),e(Pr,ITe),e(ITe,c3r),e(Pr,f3r),e(Pr,mn),e(mn,m3r),e(mn,NTe),e(NTe,g3r),e(mn,h3r),e(mn,qTe),e(qTe,p3r),e(mn,u3r),e(mn,jTe),e(jTe,_3r),e(mn,b3r),e(Pr,v3r),e(Pr,ue),e(ue,GM),e(GM,DTe),e(DTe,F3r),e(GM,T3r),e(GM,WJ),e(WJ,M3r),e(GM,E3r),e(ue,C3r),e(ue,OM),e(OM,GTe),e(GTe,w3r),e(OM,A3r),e(OM,QJ),e(QJ,L3r),e(OM,y3r),e(ue,x3r),e(ue,VM),e(VM,OTe),e(OTe,$3r),e(VM,k3r),e(VM,HJ),e(HJ,S3r),e(VM,R3r),e(ue,P3r),e(ue,XM),e(XM,VTe),e(VTe,B3r),e(XM,I3r),e(XM,UJ),e(UJ,N3r),e(XM,q3r),e(ue,j3r),e(ue,zM),e(zM,XTe),e(XTe,D3r),e(zM,G3r),e(zM,JJ),e(JJ,O3r),e(zM,V3r),e(ue,X3r),e(ue,WM),e(WM,zTe),e(zTe,z3r),e(WM,W3r),e(WM,YJ),e(YJ,Q3r),e(WM,H3r),e(ue,U3r),e(ue,QM),e(QM,WTe),e(WTe,J3r),e(QM,Y3r),e(QM,KJ),e(KJ,K3r),e(QM,Z3r),e(ue,ewr),e(ue,HM),e(HM,QTe),e(QTe,owr),e(HM,rwr),e(HM,ZJ),e(ZJ,twr),e(HM,awr),e(ue,nwr),e(ue,UM),e(UM,HTe),e(HTe,swr),e(UM,lwr),e(UM,eY),e(eY,iwr),e(UM,dwr),e(ue,cwr),e(ue,JM),e(JM,UTe),e(UTe,fwr),e(JM,mwr),e(JM,oY),e(oY,gwr),e(JM,hwr),e(ue,pwr),e(ue,YM),e(YM,JTe),e(JTe,uwr),e(YM,_wr),e(YM,rY),e(rY,bwr),e(YM,vwr),e(ue,Fwr),e(ue,KM),e(KM,YTe),e(YTe,Twr),e(KM,Mwr),e(KM,tY),e(tY,Ewr),e(KM,Cwr),e(ue,wwr),e(ue,ZM),e(ZM,KTe),e(KTe,Awr),e(ZM,Lwr),e(ZM,aY),e(aY,ywr),e(ZM,xwr),e(ue,$wr),e(ue,e4),e(e4,ZTe),e(ZTe,kwr),e(e4,Swr),e(e4,nY),e(nY,Rwr),e(e4,Pwr),e(ue,Bwr),e(ue,o4),e(o4,e7e),e(e7e,Iwr),e(o4,Nwr),e(o4,sY),e(sY,qwr),e(o4,jwr),e(ue,Dwr),e(ue,r4),e(r4,o7e),e(o7e,Gwr),e(r4,Owr),e(r4,lY),e(lY,Vwr),e(r4,Xwr),e(ue,zwr),e(ue,t4),e(t4,r7e),e(r7e,Wwr),e(t4,Qwr),e(t4,iY),e(iY,Hwr),e(t4,Uwr),e(Pr,Jwr),M(a4,Pr,null),b(f,$Oe,_),b(f,wc,_),e(wc,n4),e(n4,t7e),M(Q9,t7e,null),e(wc,Ywr),e(wc,a7e),e(a7e,Kwr),b(f,kOe,_),b(f,lr,_),M(H9,lr,null),e(lr,Zwr),e(lr,Ac),e(Ac,eAr),e(Ac,dY),e(dY,oAr),e(Ac,rAr),e(Ac,cY),e(cY,tAr),e(Ac,aAr),e(lr,nAr),e(lr,U9),e(U9,sAr),e(U9,n7e),e(n7e,lAr),e(U9,iAr),e(lr,dAr),e(lr,jt),M(J9,jt,null),e(jt,cAr),e(jt,s7e),e(s7e,fAr),e(jt,mAr),e(jt,Lc),e(Lc,gAr),e(Lc,l7e),e(l7e,hAr),e(Lc,pAr),e(Lc,fY),e(fY,uAr),e(Lc,_Ar),e(jt,bAr),M(s4,jt,null),e(lr,vAr),e(lr,Br),M(Y9,Br,null),e(Br,FAr),e(Br,i7e),e(i7e,TAr),e(Br,MAr),e(Br,gn),e(gn,EAr),e(gn,d7e),e(d7e,CAr),e(gn,wAr),e(gn,c7e),e(c7e,AAr),e(gn,LAr),e(gn,f7e),e(f7e,yAr),e(gn,xAr),e(Br,$Ar),e(Br,K9),e(K9,l4),e(l4,m7e),e(m7e,kAr),e(l4,SAr),e(l4,mY),e(mY,RAr),e(l4,PAr),e(K9,BAr),e(K9,i4),e(i4,g7e),e(g7e,IAr),e(i4,NAr),e(i4,gY),e(gY,qAr),e(i4,jAr),e(Br,DAr),M(d4,Br,null),b(f,SOe,_),b(f,yc,_),e(yc,c4),e(c4,h7e),M(Z9,h7e,null),e(yc,GAr),e(yc,p7e),e(p7e,OAr),b(f,ROe,_),b(f,ir,_),M(ex,ir,null),e(ir,VAr),e(ir,xc),e(xc,XAr),e(xc,hY),e(hY,zAr),e(xc,WAr),e(xc,pY),e(pY,QAr),e(xc,HAr),e(ir,UAr),e(ir,ox),e(ox,JAr),e(ox,u7e),e(u7e,YAr),e(ox,KAr),e(ir,ZAr),e(ir,Dt),M(rx,Dt,null),e(Dt,eLr),e(Dt,_7e),e(_7e,oLr),e(Dt,rLr),e(Dt,$c),e($c,tLr),e($c,b7e),e(b7e,aLr),e($c,nLr),e($c,uY),e(uY,sLr),e($c,lLr),e(Dt,iLr),M(f4,Dt,null),e(ir,dLr),e(ir,Ir),M(tx,Ir,null),e(Ir,cLr),e(Ir,v7e),e(v7e,fLr),e(Ir,mLr),e(Ir,hn),e(hn,gLr),e(hn,F7e),e(F7e,hLr),e(hn,pLr),e(hn,T7e),e(T7e,uLr),e(hn,_Lr),e(hn,M7e),e(M7e,bLr),e(hn,vLr),e(Ir,FLr),e(Ir,E7e),e(E7e,m4),e(m4,C7e),e(C7e,TLr),e(m4,MLr),e(m4,_Y),e(_Y,ELr),e(m4,CLr),e(Ir,wLr),M(g4,Ir,null),b(f,POe,_),b(f,kc,_),e(kc,h4),e(h4,w7e),M(ax,w7e,null),e(kc,ALr),e(kc,A7e),e(A7e,LLr),b(f,BOe,_),b(f,dr,_),M(nx,dr,null),e(dr,yLr),e(dr,Sc),e(Sc,xLr),e(Sc,bY),e(bY,$Lr),e(Sc,kLr),e(Sc,vY),e(vY,SLr),e(Sc,RLr),e(dr,PLr),e(dr,sx),e(sx,BLr),e(sx,L7e),e(L7e,ILr),e(sx,NLr),e(dr,qLr),e(dr,Gt),M(lx,Gt,null),e(Gt,jLr),e(Gt,y7e),e(y7e,DLr),e(Gt,GLr),e(Gt,Rc),e(Rc,OLr),e(Rc,x7e),e(x7e,VLr),e(Rc,XLr),e(Rc,FY),e(FY,zLr),e(Rc,WLr),e(Gt,QLr),M(p4,Gt,null),e(dr,HLr),e(dr,Nr),M(ix,Nr,null),e(Nr,ULr),e(Nr,$7e),e($7e,JLr),e(Nr,YLr),e(Nr,pn),e(pn,KLr),e(pn,k7e),e(k7e,ZLr),e(pn,eyr),e(pn,S7e),e(S7e,oyr),e(pn,ryr),e(pn,R7e),e(R7e,tyr),e(pn,ayr),e(Nr,nyr),e(Nr,de),e(de,u4),e(u4,P7e),e(P7e,syr),e(u4,lyr),e(u4,TY),e(TY,iyr),e(u4,dyr),e(de,cyr),e(de,_4),e(_4,B7e),e(B7e,fyr),e(_4,myr),e(_4,MY),e(MY,gyr),e(_4,hyr),e(de,pyr),e(de,b4),e(b4,I7e),e(I7e,uyr),e(b4,_yr),e(b4,EY),e(EY,byr),e(b4,vyr),e(de,Fyr),e(de,v4),e(v4,N7e),e(N7e,Tyr),e(v4,Myr),e(v4,CY),e(CY,Eyr),e(v4,Cyr),e(de,wyr),e(de,F4),e(F4,q7e),e(q7e,Ayr),e(F4,Lyr),e(F4,wY),e(wY,yyr),e(F4,xyr),e(de,$yr),e(de,T4),e(T4,j7e),e(j7e,kyr),e(T4,Syr),e(T4,AY),e(AY,Ryr),e(T4,Pyr),e(de,Byr),e(de,M4),e(M4,D7e),e(D7e,Iyr),e(M4,Nyr),e(M4,LY),e(LY,qyr),e(M4,jyr),e(de,Dyr),e(de,E4),e(E4,G7e),e(G7e,Gyr),e(E4,Oyr),e(E4,yY),e(yY,Vyr),e(E4,Xyr),e(de,zyr),e(de,C4),e(C4,O7e),e(O7e,Wyr),e(C4,Qyr),e(C4,xY),e(xY,Hyr),e(C4,Uyr),e(de,Jyr),e(de,w4),e(w4,V7e),e(V7e,Yyr),e(w4,Kyr),e(w4,$Y),e($Y,Zyr),e(w4,e9r),e(de,o9r),e(de,A4),e(A4,X7e),e(X7e,r9r),e(A4,t9r),e(A4,kY),e(kY,a9r),e(A4,n9r),e(de,s9r),e(de,L4),e(L4,z7e),e(z7e,l9r),e(L4,i9r),e(L4,SY),e(SY,d9r),e(L4,c9r),e(de,f9r),e(de,y4),e(y4,W7e),e(W7e,m9r),e(y4,g9r),e(y4,RY),e(RY,h9r),e(y4,p9r),e(de,u9r),e(de,x4),e(x4,Q7e),e(Q7e,_9r),e(x4,b9r),e(x4,PY),e(PY,v9r),e(x4,F9r),e(de,T9r),e(de,$4),e($4,H7e),e(H7e,M9r),e($4,E9r),e($4,BY),e(BY,C9r),e($4,w9r),e(de,A9r),e(de,k4),e(k4,U7e),e(U7e,L9r),e(k4,y9r),e(k4,IY),e(IY,x9r),e(k4,$9r),e(de,k9r),e(de,S4),e(S4,J7e),e(J7e,S9r),e(S4,R9r),e(S4,NY),e(NY,P9r),e(S4,B9r),e(de,I9r),e(de,R4),e(R4,Y7e),e(Y7e,N9r),e(R4,q9r),e(R4,qY),e(qY,j9r),e(R4,D9r),e(de,G9r),e(de,P4),e(P4,K7e),e(K7e,O9r),e(P4,V9r),e(P4,jY),e(jY,X9r),e(P4,z9r),e(de,W9r),e(de,B4),e(B4,Z7e),e(Z7e,Q9r),e(B4,H9r),e(B4,DY),e(DY,U9r),e(B4,J9r),e(Nr,Y9r),M(I4,Nr,null),b(f,IOe,_),b(f,Pc,_),e(Pc,N4),e(N4,e8e),M(dx,e8e,null),e(Pc,K9r),e(Pc,o8e),e(o8e,Z9r),b(f,NOe,_),b(f,cr,_),M(cx,cr,null),e(cr,exr),e(cr,Bc),e(Bc,oxr),e(Bc,GY),e(GY,rxr),e(Bc,txr),e(Bc,OY),e(OY,axr),e(Bc,nxr),e(cr,sxr),e(cr,fx),e(fx,lxr),e(fx,r8e),e(r8e,ixr),e(fx,dxr),e(cr,cxr),e(cr,Ot),M(mx,Ot,null),e(Ot,fxr),e(Ot,t8e),e(t8e,mxr),e(Ot,gxr),e(Ot,Ic),e(Ic,hxr),e(Ic,a8e),e(a8e,pxr),e(Ic,uxr),e(Ic,VY),e(VY,_xr),e(Ic,bxr),e(Ot,vxr),M(q4,Ot,null),e(cr,Fxr),e(cr,qr),M(gx,qr,null),e(qr,Txr),e(qr,n8e),e(n8e,Mxr),e(qr,Exr),e(qr,un),e(un,Cxr),e(un,s8e),e(s8e,wxr),e(un,Axr),e(un,l8e),e(l8e,Lxr),e(un,yxr),e(un,i8e),e(i8e,xxr),e(un,$xr),e(qr,kxr),e(qr,ce),e(ce,j4),e(j4,d8e),e(d8e,Sxr),e(j4,Rxr),e(j4,XY),e(XY,Pxr),e(j4,Bxr),e(ce,Ixr),e(ce,D4),e(D4,c8e),e(c8e,Nxr),e(D4,qxr),e(D4,zY),e(zY,jxr),e(D4,Dxr),e(ce,Gxr),e(ce,G4),e(G4,f8e),e(f8e,Oxr),e(G4,Vxr),e(G4,WY),e(WY,Xxr),e(G4,zxr),e(ce,Wxr),e(ce,O4),e(O4,m8e),e(m8e,Qxr),e(O4,Hxr),e(O4,QY),e(QY,Uxr),e(O4,Jxr),e(ce,Yxr),e(ce,V4),e(V4,g8e),e(g8e,Kxr),e(V4,Zxr),e(V4,HY),e(HY,e$r),e(V4,o$r),e(ce,r$r),e(ce,X4),e(X4,h8e),e(h8e,t$r),e(X4,a$r),e(X4,UY),e(UY,n$r),e(X4,s$r),e(ce,l$r),e(ce,z4),e(z4,p8e),e(p8e,i$r),e(z4,d$r),e(z4,JY),e(JY,c$r),e(z4,f$r),e(ce,m$r),e(ce,W4),e(W4,u8e),e(u8e,g$r),e(W4,h$r),e(W4,YY),e(YY,p$r),e(W4,u$r),e(ce,_$r),e(ce,Q4),e(Q4,_8e),e(_8e,b$r),e(Q4,v$r),e(Q4,KY),e(KY,F$r),e(Q4,T$r),e(ce,M$r),e(ce,H4),e(H4,b8e),e(b8e,E$r),e(H4,C$r),e(H4,ZY),e(ZY,w$r),e(H4,A$r),e(ce,L$r),e(ce,U4),e(U4,v8e),e(v8e,y$r),e(U4,x$r),e(U4,eK),e(eK,$$r),e(U4,k$r),e(ce,S$r),e(ce,J4),e(J4,F8e),e(F8e,R$r),e(J4,P$r),e(J4,oK),e(oK,B$r),e(J4,I$r),e(ce,N$r),e(ce,Y4),e(Y4,T8e),e(T8e,q$r),e(Y4,j$r),e(Y4,rK),e(rK,D$r),e(Y4,G$r),e(ce,O$r),e(ce,K4),e(K4,M8e),e(M8e,V$r),e(K4,X$r),e(K4,tK),e(tK,z$r),e(K4,W$r),e(ce,Q$r),e(ce,Z4),e(Z4,E8e),e(E8e,H$r),e(Z4,U$r),e(Z4,aK),e(aK,J$r),e(Z4,Y$r),e(ce,K$r),e(ce,eE),e(eE,C8e),e(C8e,Z$r),e(eE,ekr),e(eE,nK),e(nK,okr),e(eE,rkr),e(ce,tkr),e(ce,oE),e(oE,w8e),e(w8e,akr),e(oE,nkr),e(oE,sK),e(sK,skr),e(oE,lkr),e(ce,ikr),e(ce,rE),e(rE,A8e),e(A8e,dkr),e(rE,ckr),e(rE,lK),e(lK,fkr),e(rE,mkr),e(ce,gkr),e(ce,tE),e(tE,L8e),e(L8e,hkr),e(tE,pkr),e(tE,iK),e(iK,ukr),e(tE,_kr),e(ce,bkr),e(ce,aE),e(aE,y8e),e(y8e,vkr),e(aE,Fkr),e(aE,dK),e(dK,Tkr),e(aE,Mkr),e(qr,Ekr),M(nE,qr,null),b(f,qOe,_),b(f,Nc,_),e(Nc,sE),e(sE,x8e),M(hx,x8e,null),e(Nc,Ckr),e(Nc,$8e),e($8e,wkr),b(f,jOe,_),b(f,fr,_),M(px,fr,null),e(fr,Akr),e(fr,qc),e(qc,Lkr),e(qc,cK),e(cK,ykr),e(qc,xkr),e(qc,fK),e(fK,$kr),e(qc,kkr),e(fr,Skr),e(fr,ux),e(ux,Rkr),e(ux,k8e),e(k8e,Pkr),e(ux,Bkr),e(fr,Ikr),e(fr,Vt),M(_x,Vt,null),e(Vt,Nkr),e(Vt,S8e),e(S8e,qkr),e(Vt,jkr),e(Vt,jc),e(jc,Dkr),e(jc,R8e),e(R8e,Gkr),e(jc,Okr),e(jc,mK),e(mK,Vkr),e(jc,Xkr),e(Vt,zkr),M(lE,Vt,null),e(fr,Wkr),e(fr,jr),M(bx,jr,null),e(jr,Qkr),e(jr,P8e),e(P8e,Hkr),e(jr,Ukr),e(jr,_n),e(_n,Jkr),e(_n,B8e),e(B8e,Ykr),e(_n,Kkr),e(_n,I8e),e(I8e,Zkr),e(_n,eSr),e(_n,N8e),e(N8e,oSr),e(_n,rSr),e(jr,tSr),e(jr,q8e),e(q8e,iE),e(iE,j8e),e(j8e,aSr),e(iE,nSr),e(iE,gK),e(gK,sSr),e(iE,lSr),e(jr,iSr),M(dE,jr,null),b(f,DOe,_),b(f,Dc,_),e(Dc,cE),e(cE,D8e),M(vx,D8e,null),e(Dc,dSr),e(Dc,G8e),e(G8e,cSr),b(f,GOe,_),b(f,mr,_),M(Fx,mr,null),e(mr,fSr),e(mr,Gc),e(Gc,mSr),e(Gc,hK),e(hK,gSr),e(Gc,hSr),e(Gc,pK),e(pK,pSr),e(Gc,uSr),e(mr,_Sr),e(mr,Tx),e(Tx,bSr),e(Tx,O8e),e(O8e,vSr),e(Tx,FSr),e(mr,TSr),e(mr,Xt),M(Mx,Xt,null),e(Xt,MSr),e(Xt,V8e),e(V8e,ESr),e(Xt,CSr),e(Xt,Oc),e(Oc,wSr),e(Oc,X8e),e(X8e,ASr),e(Oc,LSr),e(Oc,uK),e(uK,ySr),e(Oc,xSr),e(Xt,$Sr),M(fE,Xt,null),e(mr,kSr),e(mr,Dr),M(Ex,Dr,null),e(Dr,SSr),e(Dr,z8e),e(z8e,RSr),e(Dr,PSr),e(Dr,bn),e(bn,BSr),e(bn,W8e),e(W8e,ISr),e(bn,NSr),e(bn,Q8e),e(Q8e,qSr),e(bn,jSr),e(bn,H8e),e(H8e,DSr),e(bn,GSr),e(Dr,OSr),e(Dr,U8e),e(U8e,mE),e(mE,J8e),e(J8e,VSr),e(mE,XSr),e(mE,_K),e(_K,zSr),e(mE,WSr),e(Dr,QSr),M(gE,Dr,null),b(f,OOe,_),b(f,Vc,_),e(Vc,hE),e(hE,Y8e),M(Cx,Y8e,null),e(Vc,HSr),e(Vc,K8e),e(K8e,USr),b(f,VOe,_),b(f,gr,_),M(wx,gr,null),e(gr,JSr),e(gr,Xc),e(Xc,YSr),e(Xc,bK),e(bK,KSr),e(Xc,ZSr),e(Xc,vK),e(vK,eRr),e(Xc,oRr),e(gr,rRr),e(gr,Ax),e(Ax,tRr),e(Ax,Z8e),e(Z8e,aRr),e(Ax,nRr),e(gr,sRr),e(gr,zt),M(Lx,zt,null),e(zt,lRr),e(zt,eMe),e(eMe,iRr),e(zt,dRr),e(zt,zc),e(zc,cRr),e(zc,oMe),e(oMe,fRr),e(zc,mRr),e(zc,FK),e(FK,gRr),e(zc,hRr),e(zt,pRr),M(pE,zt,null),e(gr,uRr),e(gr,Gr),M(yx,Gr,null),e(Gr,_Rr),e(Gr,rMe),e(rMe,bRr),e(Gr,vRr),e(Gr,vn),e(vn,FRr),e(vn,tMe),e(tMe,TRr),e(vn,MRr),e(vn,aMe),e(aMe,ERr),e(vn,CRr),e(vn,nMe),e(nMe,wRr),e(vn,ARr),e(Gr,LRr),e(Gr,oe),e(oe,uE),e(uE,sMe),e(sMe,yRr),e(uE,xRr),e(uE,TK),e(TK,$Rr),e(uE,kRr),e(oe,SRr),e(oe,_E),e(_E,lMe),e(lMe,RRr),e(_E,PRr),e(_E,MK),e(MK,BRr),e(_E,IRr),e(oe,NRr),e(oe,bE),e(bE,iMe),e(iMe,qRr),e(bE,jRr),e(bE,EK),e(EK,DRr),e(bE,GRr),e(oe,ORr),e(oe,vE),e(vE,dMe),e(dMe,VRr),e(vE,XRr),e(vE,CK),e(CK,zRr),e(vE,WRr),e(oe,QRr),e(oe,FE),e(FE,cMe),e(cMe,HRr),e(FE,URr),e(FE,wK),e(wK,JRr),e(FE,YRr),e(oe,KRr),e(oe,TE),e(TE,fMe),e(fMe,ZRr),e(TE,ePr),e(TE,AK),e(AK,oPr),e(TE,rPr),e(oe,tPr),e(oe,ME),e(ME,mMe),e(mMe,aPr),e(ME,nPr),e(ME,LK),e(LK,sPr),e(ME,lPr),e(oe,iPr),e(oe,EE),e(EE,gMe),e(gMe,dPr),e(EE,cPr),e(EE,yK),e(yK,fPr),e(EE,mPr),e(oe,gPr),e(oe,CE),e(CE,hMe),e(hMe,hPr),e(CE,pPr),e(CE,xK),e(xK,uPr),e(CE,_Pr),e(oe,bPr),e(oe,wE),e(wE,pMe),e(pMe,vPr),e(wE,FPr),e(wE,$K),e($K,TPr),e(wE,MPr),e(oe,EPr),e(oe,AE),e(AE,uMe),e(uMe,CPr),e(AE,wPr),e(AE,kK),e(kK,APr),e(AE,LPr),e(oe,yPr),e(oe,LE),e(LE,_Me),e(_Me,xPr),e(LE,$Pr),e(LE,SK),e(SK,kPr),e(LE,SPr),e(oe,RPr),e(oe,yE),e(yE,bMe),e(bMe,PPr),e(yE,BPr),e(yE,RK),e(RK,IPr),e(yE,NPr),e(oe,qPr),e(oe,xE),e(xE,vMe),e(vMe,jPr),e(xE,DPr),e(xE,PK),e(PK,GPr),e(xE,OPr),e(oe,VPr),e(oe,$E),e($E,FMe),e(FMe,XPr),e($E,zPr),e($E,BK),e(BK,WPr),e($E,QPr),e(oe,HPr),e(oe,kE),e(kE,TMe),e(TMe,UPr),e(kE,JPr),e(kE,IK),e(IK,YPr),e(kE,KPr),e(oe,ZPr),e(oe,SE),e(SE,MMe),e(MMe,eBr),e(SE,oBr),e(SE,NK),e(NK,rBr),e(SE,tBr),e(oe,aBr),e(oe,RE),e(RE,EMe),e(EMe,nBr),e(RE,sBr),e(RE,qK),e(qK,lBr),e(RE,iBr),e(oe,dBr),e(oe,PE),e(PE,CMe),e(CMe,cBr),e(PE,fBr),e(PE,jK),e(jK,mBr),e(PE,gBr),e(oe,hBr),e(oe,BE),e(BE,wMe),e(wMe,pBr),e(BE,uBr),e(BE,DK),e(DK,_Br),e(BE,bBr),e(oe,vBr),e(oe,IE),e(IE,AMe),e(AMe,FBr),e(IE,TBr),e(IE,GK),e(GK,MBr),e(IE,EBr),e(oe,CBr),e(oe,NE),e(NE,LMe),e(LMe,wBr),e(NE,ABr),e(NE,OK),e(OK,LBr),e(NE,yBr),e(oe,xBr),e(oe,qE),e(qE,yMe),e(yMe,$Br),e(qE,kBr),e(qE,VK),e(VK,SBr),e(qE,RBr),e(oe,PBr),e(oe,jE),e(jE,xMe),e(xMe,BBr),e(jE,IBr),e(jE,XK),e(XK,NBr),e(jE,qBr),e(oe,jBr),e(oe,DE),e(DE,$Me),e($Me,DBr),e(DE,GBr),e(DE,zK),e(zK,OBr),e(DE,VBr),e(oe,XBr),e(oe,GE),e(GE,kMe),e(kMe,zBr),e(GE,WBr),e(GE,WK),e(WK,QBr),e(GE,HBr),e(oe,UBr),e(oe,OE),e(OE,SMe),e(SMe,JBr),e(OE,YBr),e(OE,QK),e(QK,KBr),e(OE,ZBr),e(Gr,eIr),M(VE,Gr,null),b(f,XOe,_),b(f,Wc,_),e(Wc,XE),e(XE,RMe),M(xx,RMe,null),e(Wc,oIr),e(Wc,PMe),e(PMe,rIr),b(f,zOe,_),b(f,hr,_),M($x,hr,null),e(hr,tIr),e(hr,Qc),e(Qc,aIr),e(Qc,HK),e(HK,nIr),e(Qc,sIr),e(Qc,UK),e(UK,lIr),e(Qc,iIr),e(hr,dIr),e(hr,kx),e(kx,cIr),e(kx,BMe),e(BMe,fIr),e(kx,mIr),e(hr,gIr),e(hr,Wt),M(Sx,Wt,null),e(Wt,hIr),e(Wt,IMe),e(IMe,pIr),e(Wt,uIr),e(Wt,Hc),e(Hc,_Ir),e(Hc,NMe),e(NMe,bIr),e(Hc,vIr),e(Hc,JK),e(JK,FIr),e(Hc,TIr),e(Wt,MIr),M(zE,Wt,null),e(hr,EIr),e(hr,Or),M(Rx,Or,null),e(Or,CIr),e(Or,qMe),e(qMe,wIr),e(Or,AIr),e(Or,Fn),e(Fn,LIr),e(Fn,jMe),e(jMe,yIr),e(Fn,xIr),e(Fn,DMe),e(DMe,$Ir),e(Fn,kIr),e(Fn,GMe),e(GMe,SIr),e(Fn,RIr),e(Or,PIr),e(Or,xe),e(xe,WE),e(WE,OMe),e(OMe,BIr),e(WE,IIr),e(WE,YK),e(YK,NIr),e(WE,qIr),e(xe,jIr),e(xe,QE),e(QE,VMe),e(VMe,DIr),e(QE,GIr),e(QE,KK),e(KK,OIr),e(QE,VIr),e(xe,XIr),e(xe,HE),e(HE,XMe),e(XMe,zIr),e(HE,WIr),e(HE,ZK),e(ZK,QIr),e(HE,HIr),e(xe,UIr),e(xe,UE),e(UE,zMe),e(zMe,JIr),e(UE,YIr),e(UE,eZ),e(eZ,KIr),e(UE,ZIr),e(xe,eNr),e(xe,JE),e(JE,WMe),e(WMe,oNr),e(JE,rNr),e(JE,oZ),e(oZ,tNr),e(JE,aNr),e(xe,nNr),e(xe,YE),e(YE,QMe),e(QMe,sNr),e(YE,lNr),e(YE,rZ),e(rZ,iNr),e(YE,dNr),e(xe,cNr),e(xe,KE),e(KE,HMe),e(HMe,fNr),e(KE,mNr),e(KE,tZ),e(tZ,gNr),e(KE,hNr),e(xe,pNr),e(xe,ZE),e(ZE,UMe),e(UMe,uNr),e(ZE,_Nr),e(ZE,aZ),e(aZ,bNr),e(ZE,vNr),e(xe,FNr),e(xe,eC),e(eC,JMe),e(JMe,TNr),e(eC,MNr),e(eC,nZ),e(nZ,ENr),e(eC,CNr),e(xe,wNr),e(xe,oC),e(oC,YMe),e(YMe,ANr),e(oC,LNr),e(oC,sZ),e(sZ,yNr),e(oC,xNr),e(Or,$Nr),M(rC,Or,null),b(f,WOe,_),b(f,Uc,_),e(Uc,tC),e(tC,KMe),M(Px,KMe,null),e(Uc,kNr),e(Uc,ZMe),e(ZMe,SNr),b(f,QOe,_),b(f,pr,_),M(Bx,pr,null),e(pr,RNr),e(pr,Jc),e(Jc,PNr),e(Jc,lZ),e(lZ,BNr),e(Jc,INr),e(Jc,iZ),e(iZ,NNr),e(Jc,qNr),e(pr,jNr),e(pr,Ix),e(Ix,DNr),e(Ix,e4e),e(e4e,GNr),e(Ix,ONr),e(pr,VNr),e(pr,Qt),M(Nx,Qt,null),e(Qt,XNr),e(Qt,o4e),e(o4e,zNr),e(Qt,WNr),e(Qt,Yc),e(Yc,QNr),e(Yc,r4e),e(r4e,HNr),e(Yc,UNr),e(Yc,dZ),e(dZ,JNr),e(Yc,YNr),e(Qt,KNr),M(aC,Qt,null),e(pr,ZNr),e(pr,Vr),M(qx,Vr,null),e(Vr,eqr),e(Vr,t4e),e(t4e,oqr),e(Vr,rqr),e(Vr,Tn),e(Tn,tqr),e(Tn,a4e),e(a4e,aqr),e(Tn,nqr),e(Tn,n4e),e(n4e,sqr),e(Tn,lqr),e(Tn,s4e),e(s4e,iqr),e(Tn,dqr),e(Vr,cqr),e(Vr,Ee),e(Ee,nC),e(nC,l4e),e(l4e,fqr),e(nC,mqr),e(nC,cZ),e(cZ,gqr),e(nC,hqr),e(Ee,pqr),e(Ee,sC),e(sC,i4e),e(i4e,uqr),e(sC,_qr),e(sC,fZ),e(fZ,bqr),e(sC,vqr),e(Ee,Fqr),e(Ee,lC),e(lC,d4e),e(d4e,Tqr),e(lC,Mqr),e(lC,mZ),e(mZ,Eqr),e(lC,Cqr),e(Ee,wqr),e(Ee,iC),e(iC,c4e),e(c4e,Aqr),e(iC,Lqr),e(iC,gZ),e(gZ,yqr),e(iC,xqr),e(Ee,$qr),e(Ee,dC),e(dC,f4e),e(f4e,kqr),e(dC,Sqr),e(dC,hZ),e(hZ,Rqr),e(dC,Pqr),e(Ee,Bqr),e(Ee,cC),e(cC,m4e),e(m4e,Iqr),e(cC,Nqr),e(cC,pZ),e(pZ,qqr),e(cC,jqr),e(Ee,Dqr),e(Ee,fC),e(fC,g4e),e(g4e,Gqr),e(fC,Oqr),e(fC,uZ),e(uZ,Vqr),e(fC,Xqr),e(Ee,zqr),e(Ee,mC),e(mC,h4e),e(h4e,Wqr),e(mC,Qqr),e(mC,_Z),e(_Z,Hqr),e(mC,Uqr),e(Ee,Jqr),e(Ee,gC),e(gC,p4e),e(p4e,Yqr),e(gC,Kqr),e(gC,bZ),e(bZ,Zqr),e(gC,ejr),e(Ee,ojr),e(Ee,hC),e(hC,u4e),e(u4e,rjr),e(hC,tjr),e(hC,vZ),e(vZ,ajr),e(hC,njr),e(Ee,sjr),e(Ee,pC),e(pC,_4e),e(_4e,ljr),e(pC,ijr),e(pC,FZ),e(FZ,djr),e(pC,cjr),e(Ee,fjr),e(Ee,uC),e(uC,b4e),e(b4e,mjr),e(uC,gjr),e(uC,TZ),e(TZ,hjr),e(uC,pjr),e(Ee,ujr),e(Ee,_C),e(_C,v4e),e(v4e,_jr),e(_C,bjr),e(_C,MZ),e(MZ,vjr),e(_C,Fjr),e(Vr,Tjr),M(bC,Vr,null),b(f,HOe,_),b(f,Kc,_),e(Kc,vC),e(vC,F4e),M(jx,F4e,null),e(Kc,Mjr),e(Kc,T4e),e(T4e,Ejr),b(f,UOe,_),b(f,ur,_),M(Dx,ur,null),e(ur,Cjr),e(ur,Zc),e(Zc,wjr),e(Zc,EZ),e(EZ,Ajr),e(Zc,Ljr),e(Zc,CZ),e(CZ,yjr),e(Zc,xjr),e(ur,$jr),e(ur,Gx),e(Gx,kjr),e(Gx,M4e),e(M4e,Sjr),e(Gx,Rjr),e(ur,Pjr),e(ur,Ht),M(Ox,Ht,null),e(Ht,Bjr),e(Ht,E4e),e(E4e,Ijr),e(Ht,Njr),e(Ht,ef),e(ef,qjr),e(ef,C4e),e(C4e,jjr),e(ef,Djr),e(ef,wZ),e(wZ,Gjr),e(ef,Ojr),e(Ht,Vjr),M(FC,Ht,null),e(ur,Xjr),e(ur,Xr),M(Vx,Xr,null),e(Xr,zjr),e(Xr,w4e),e(w4e,Wjr),e(Xr,Qjr),e(Xr,Mn),e(Mn,Hjr),e(Mn,A4e),e(A4e,Ujr),e(Mn,Jjr),e(Mn,L4e),e(L4e,Yjr),e(Mn,Kjr),e(Mn,y4e),e(y4e,Zjr),e(Mn,eDr),e(Xr,oDr),e(Xr,$e),e($e,TC),e(TC,x4e),e(x4e,rDr),e(TC,tDr),e(TC,AZ),e(AZ,aDr),e(TC,nDr),e($e,sDr),e($e,MC),e(MC,$4e),e($4e,lDr),e(MC,iDr),e(MC,LZ),e(LZ,dDr),e(MC,cDr),e($e,fDr),e($e,EC),e(EC,k4e),e(k4e,mDr),e(EC,gDr),e(EC,yZ),e(yZ,hDr),e(EC,pDr),e($e,uDr),e($e,CC),e(CC,S4e),e(S4e,_Dr),e(CC,bDr),e(CC,xZ),e(xZ,vDr),e(CC,FDr),e($e,TDr),e($e,wC),e(wC,R4e),e(R4e,MDr),e(wC,EDr),e(wC,$Z),e($Z,CDr),e(wC,wDr),e($e,ADr),e($e,AC),e(AC,P4e),e(P4e,LDr),e(AC,yDr),e(AC,kZ),e(kZ,xDr),e(AC,$Dr),e($e,kDr),e($e,LC),e(LC,B4e),e(B4e,SDr),e(LC,RDr),e(LC,SZ),e(SZ,PDr),e(LC,BDr),e($e,IDr),e($e,yC),e(yC,I4e),e(I4e,NDr),e(yC,qDr),e(yC,RZ),e(RZ,jDr),e(yC,DDr),e($e,GDr),e($e,xC),e(xC,N4e),e(N4e,ODr),e(xC,VDr),e(xC,PZ),e(PZ,XDr),e(xC,zDr),e($e,WDr),e($e,$C),e($C,q4e),e(q4e,QDr),e($C,HDr),e($C,BZ),e(BZ,UDr),e($C,JDr),e(Xr,YDr),M(kC,Xr,null),b(f,JOe,_),b(f,of,_),e(of,SC),e(SC,j4e),M(Xx,j4e,null),e(of,KDr),e(of,D4e),e(D4e,ZDr),b(f,YOe,_),b(f,_r,_),M(zx,_r,null),e(_r,eGr),e(_r,rf),e(rf,oGr),e(rf,IZ),e(IZ,rGr),e(rf,tGr),e(rf,NZ),e(NZ,aGr),e(rf,nGr),e(_r,sGr),e(_r,Wx),e(Wx,lGr),e(Wx,G4e),e(G4e,iGr),e(Wx,dGr),e(_r,cGr),e(_r,Ut),M(Qx,Ut,null),e(Ut,fGr),e(Ut,O4e),e(O4e,mGr),e(Ut,gGr),e(Ut,tf),e(tf,hGr),e(tf,V4e),e(V4e,pGr),e(tf,uGr),e(tf,qZ),e(qZ,_Gr),e(tf,bGr),e(Ut,vGr),M(RC,Ut,null),e(_r,FGr),e(_r,zr),M(Hx,zr,null),e(zr,TGr),e(zr,X4e),e(X4e,MGr),e(zr,EGr),e(zr,En),e(En,CGr),e(En,z4e),e(z4e,wGr),e(En,AGr),e(En,W4e),e(W4e,LGr),e(En,yGr),e(En,Q4e),e(Q4e,xGr),e(En,$Gr),e(zr,kGr),e(zr,ke),e(ke,PC),e(PC,H4e),e(H4e,SGr),e(PC,RGr),e(PC,jZ),e(jZ,PGr),e(PC,BGr),e(ke,IGr),e(ke,BC),e(BC,U4e),e(U4e,NGr),e(BC,qGr),e(BC,DZ),e(DZ,jGr),e(BC,DGr),e(ke,GGr),e(ke,IC),e(IC,J4e),e(J4e,OGr),e(IC,VGr),e(IC,GZ),e(GZ,XGr),e(IC,zGr),e(ke,WGr),e(ke,NC),e(NC,Y4e),e(Y4e,QGr),e(NC,HGr),e(NC,OZ),e(OZ,UGr),e(NC,JGr),e(ke,YGr),e(ke,qC),e(qC,K4e),e(K4e,KGr),e(qC,ZGr),e(qC,VZ),e(VZ,eOr),e(qC,oOr),e(ke,rOr),e(ke,jC),e(jC,Z4e),e(Z4e,tOr),e(jC,aOr),e(jC,XZ),e(XZ,nOr),e(jC,sOr),e(ke,lOr),e(ke,DC),e(DC,eEe),e(eEe,iOr),e(DC,dOr),e(DC,zZ),e(zZ,cOr),e(DC,fOr),e(ke,mOr),e(ke,GC),e(GC,oEe),e(oEe,gOr),e(GC,hOr),e(GC,WZ),e(WZ,pOr),e(GC,uOr),e(ke,_Or),e(ke,OC),e(OC,rEe),e(rEe,bOr),e(OC,vOr),e(OC,QZ),e(QZ,FOr),e(OC,TOr),e(ke,MOr),e(ke,VC),e(VC,tEe),e(tEe,EOr),e(VC,COr),e(VC,HZ),e(HZ,wOr),e(VC,AOr),e(zr,LOr),M(XC,zr,null),b(f,KOe,_),b(f,af,_),e(af,zC),e(zC,aEe),M(Ux,aEe,null),e(af,yOr),e(af,nEe),e(nEe,xOr),b(f,ZOe,_),b(f,br,_),M(Jx,br,null),e(br,$Or),e(br,nf),e(nf,kOr),e(nf,UZ),e(UZ,SOr),e(nf,ROr),e(nf,JZ),e(JZ,POr),e(nf,BOr),e(br,IOr),e(br,Yx),e(Yx,NOr),e(Yx,sEe),e(sEe,qOr),e(Yx,jOr),e(br,DOr),e(br,Jt),M(Kx,Jt,null),e(Jt,GOr),e(Jt,lEe),e(lEe,OOr),e(Jt,VOr),e(Jt,sf),e(sf,XOr),e(sf,iEe),e(iEe,zOr),e(sf,WOr),e(sf,YZ),e(YZ,QOr),e(sf,HOr),e(Jt,UOr),M(WC,Jt,null),e(br,JOr),e(br,Wr),M(Zx,Wr,null),e(Wr,YOr),e(Wr,dEe),e(dEe,KOr),e(Wr,ZOr),e(Wr,Cn),e(Cn,eVr),e(Cn,cEe),e(cEe,oVr),e(Cn,rVr),e(Cn,fEe),e(fEe,tVr),e(Cn,aVr),e(Cn,mEe),e(mEe,nVr),e(Cn,sVr),e(Wr,lVr),e(Wr,Se),e(Se,QC),e(QC,gEe),e(gEe,iVr),e(QC,dVr),e(QC,KZ),e(KZ,cVr),e(QC,fVr),e(Se,mVr),e(Se,HC),e(HC,hEe),e(hEe,gVr),e(HC,hVr),e(HC,ZZ),e(ZZ,pVr),e(HC,uVr),e(Se,_Vr),e(Se,UC),e(UC,pEe),e(pEe,bVr),e(UC,vVr),e(UC,eee),e(eee,FVr),e(UC,TVr),e(Se,MVr),e(Se,JC),e(JC,uEe),e(uEe,EVr),e(JC,CVr),e(JC,oee),e(oee,wVr),e(JC,AVr),e(Se,LVr),e(Se,YC),e(YC,_Ee),e(_Ee,yVr),e(YC,xVr),e(YC,ree),e(ree,$Vr),e(YC,kVr),e(Se,SVr),e(Se,KC),e(KC,bEe),e(bEe,RVr),e(KC,PVr),e(KC,tee),e(tee,BVr),e(KC,IVr),e(Se,NVr),e(Se,ZC),e(ZC,vEe),e(vEe,qVr),e(ZC,jVr),e(ZC,aee),e(aee,DVr),e(ZC,GVr),e(Se,OVr),e(Se,e5),e(e5,FEe),e(FEe,VVr),e(e5,XVr),e(e5,nee),e(nee,zVr),e(e5,WVr),e(Se,QVr),e(Se,o5),e(o5,TEe),e(TEe,HVr),e(o5,UVr),e(o5,see),e(see,JVr),e(o5,YVr),e(Se,KVr),e(Se,r5),e(r5,MEe),e(MEe,ZVr),e(r5,eXr),e(r5,lee),e(lee,oXr),e(r5,rXr),e(Wr,tXr),M(t5,Wr,null),b(f,eVe,_),b(f,lf,_),e(lf,a5),e(a5,EEe),M(e$,EEe,null),e(lf,aXr),e(lf,CEe),e(CEe,nXr),b(f,oVe,_),b(f,vr,_),M(o$,vr,null),e(vr,sXr),e(vr,df),e(df,lXr),e(df,iee),e(iee,iXr),e(df,dXr),e(df,dee),e(dee,cXr),e(df,fXr),e(vr,mXr),e(vr,r$),e(r$,gXr),e(r$,wEe),e(wEe,hXr),e(r$,pXr),e(vr,uXr),e(vr,Yt),M(t$,Yt,null),e(Yt,_Xr),e(Yt,AEe),e(AEe,bXr),e(Yt,vXr),e(Yt,cf),e(cf,FXr),e(cf,LEe),e(LEe,TXr),e(cf,MXr),e(cf,cee),e(cee,EXr),e(cf,CXr),e(Yt,wXr),M(n5,Yt,null),e(vr,AXr),e(vr,Qr),M(a$,Qr,null),e(Qr,LXr),e(Qr,yEe),e(yEe,yXr),e(Qr,xXr),e(Qr,wn),e(wn,$Xr),e(wn,xEe),e(xEe,kXr),e(wn,SXr),e(wn,$Ee),e($Ee,RXr),e(wn,PXr),e(wn,kEe),e(kEe,BXr),e(wn,IXr),e(Qr,NXr),e(Qr,Re),e(Re,s5),e(s5,SEe),e(SEe,qXr),e(s5,jXr),e(s5,fee),e(fee,DXr),e(s5,GXr),e(Re,OXr),e(Re,l5),e(l5,REe),e(REe,VXr),e(l5,XXr),e(l5,mee),e(mee,zXr),e(l5,WXr),e(Re,QXr),e(Re,i5),e(i5,PEe),e(PEe,HXr),e(i5,UXr),e(i5,gee),e(gee,JXr),e(i5,YXr),e(Re,KXr),e(Re,d5),e(d5,BEe),e(BEe,ZXr),e(d5,ezr),e(d5,hee),e(hee,ozr),e(d5,rzr),e(Re,tzr),e(Re,c5),e(c5,IEe),e(IEe,azr),e(c5,nzr),e(c5,pee),e(pee,szr),e(c5,lzr),e(Re,izr),e(Re,f5),e(f5,NEe),e(NEe,dzr),e(f5,czr),e(f5,uee),e(uee,fzr),e(f5,mzr),e(Re,gzr),e(Re,m5),e(m5,qEe),e(qEe,hzr),e(m5,pzr),e(m5,_ee),e(_ee,uzr),e(m5,_zr),e(Re,bzr),e(Re,g5),e(g5,jEe),e(jEe,vzr),e(g5,Fzr),e(g5,bee),e(bee,Tzr),e(g5,Mzr),e(Re,Ezr),e(Re,h5),e(h5,DEe),e(DEe,Czr),e(h5,wzr),e(h5,vee),e(vee,Azr),e(h5,Lzr),e(Re,yzr),e(Re,p5),e(p5,GEe),e(GEe,xzr),e(p5,$zr),e(p5,Fee),e(Fee,kzr),e(p5,Szr),e(Qr,Rzr),M(u5,Qr,null),b(f,rVe,_),b(f,ff,_),e(ff,_5),e(_5,OEe),M(n$,OEe,null),e(ff,Pzr),e(ff,VEe),e(VEe,Bzr),b(f,tVe,_),b(f,Fr,_),M(s$,Fr,null),e(Fr,Izr),e(Fr,mf),e(mf,Nzr),e(mf,Tee),e(Tee,qzr),e(mf,jzr),e(mf,Mee),e(Mee,Dzr),e(mf,Gzr),e(Fr,Ozr),e(Fr,l$),e(l$,Vzr),e(l$,XEe),e(XEe,Xzr),e(l$,zzr),e(Fr,Wzr),e(Fr,Kt),M(i$,Kt,null),e(Kt,Qzr),e(Kt,zEe),e(zEe,Hzr),e(Kt,Uzr),e(Kt,gf),e(gf,Jzr),e(gf,WEe),e(WEe,Yzr),e(gf,Kzr),e(gf,Eee),e(Eee,Zzr),e(gf,eWr),e(Kt,oWr),M(b5,Kt,null),e(Fr,rWr),e(Fr,Hr),M(d$,Hr,null),e(Hr,tWr),e(Hr,QEe),e(QEe,aWr),e(Hr,nWr),e(Hr,An),e(An,sWr),e(An,HEe),e(HEe,lWr),e(An,iWr),e(An,UEe),e(UEe,dWr),e(An,cWr),e(An,JEe),e(JEe,fWr),e(An,mWr),e(Hr,gWr),e(Hr,Ve),e(Ve,v5),e(v5,YEe),e(YEe,hWr),e(v5,pWr),e(v5,Cee),e(Cee,uWr),e(v5,_Wr),e(Ve,bWr),e(Ve,F5),e(F5,KEe),e(KEe,vWr),e(F5,FWr),e(F5,wee),e(wee,TWr),e(F5,MWr),e(Ve,EWr),e(Ve,T5),e(T5,ZEe),e(ZEe,CWr),e(T5,wWr),e(T5,Aee),e(Aee,AWr),e(T5,LWr),e(Ve,yWr),e(Ve,M5),e(M5,eCe),e(eCe,xWr),e(M5,$Wr),e(M5,Lee),e(Lee,kWr),e(M5,SWr),e(Ve,RWr),e(Ve,E5),e(E5,oCe),e(oCe,PWr),e(E5,BWr),e(E5,yee),e(yee,IWr),e(E5,NWr),e(Ve,qWr),e(Ve,C5),e(C5,rCe),e(rCe,jWr),e(C5,DWr),e(C5,xee),e(xee,GWr),e(C5,OWr),e(Ve,VWr),e(Ve,w5),e(w5,tCe),e(tCe,XWr),e(w5,zWr),e(w5,$ee),e($ee,WWr),e(w5,QWr),e(Ve,HWr),e(Ve,A5),e(A5,aCe),e(aCe,UWr),e(A5,JWr),e(A5,kee),e(kee,YWr),e(A5,KWr),e(Hr,ZWr),M(L5,Hr,null),b(f,aVe,_),b(f,hf,_),e(hf,y5),e(y5,nCe),M(c$,nCe,null),e(hf,eQr),e(hf,sCe),e(sCe,oQr),b(f,nVe,_),b(f,Tr,_),M(f$,Tr,null),e(Tr,rQr),e(Tr,pf),e(pf,tQr),e(pf,See),e(See,aQr),e(pf,nQr),e(pf,Ree),e(Ree,sQr),e(pf,lQr),e(Tr,iQr),e(Tr,m$),e(m$,dQr),e(m$,lCe),e(lCe,cQr),e(m$,fQr),e(Tr,mQr),e(Tr,Zt),M(g$,Zt,null),e(Zt,gQr),e(Zt,iCe),e(iCe,hQr),e(Zt,pQr),e(Zt,uf),e(uf,uQr),e(uf,dCe),e(dCe,_Qr),e(uf,bQr),e(uf,Pee),e(Pee,vQr),e(uf,FQr),e(Zt,TQr),M(x5,Zt,null),e(Tr,MQr),e(Tr,Ur),M(h$,Ur,null),e(Ur,EQr),e(Ur,cCe),e(cCe,CQr),e(Ur,wQr),e(Ur,Ln),e(Ln,AQr),e(Ln,fCe),e(fCe,LQr),e(Ln,yQr),e(Ln,mCe),e(mCe,xQr),e(Ln,$Qr),e(Ln,gCe),e(gCe,kQr),e(Ln,SQr),e(Ur,RQr),e(Ur,Xe),e(Xe,$5),e($5,hCe),e(hCe,PQr),e($5,BQr),e($5,Bee),e(Bee,IQr),e($5,NQr),e(Xe,qQr),e(Xe,k5),e(k5,pCe),e(pCe,jQr),e(k5,DQr),e(k5,Iee),e(Iee,GQr),e(k5,OQr),e(Xe,VQr),e(Xe,S5),e(S5,uCe),e(uCe,XQr),e(S5,zQr),e(S5,Nee),e(Nee,WQr),e(S5,QQr),e(Xe,HQr),e(Xe,R5),e(R5,_Ce),e(_Ce,UQr),e(R5,JQr),e(R5,qee),e(qee,YQr),e(R5,KQr),e(Xe,ZQr),e(Xe,P5),e(P5,bCe),e(bCe,eHr),e(P5,oHr),e(P5,jee),e(jee,rHr),e(P5,tHr),e(Xe,aHr),e(Xe,B5),e(B5,vCe),e(vCe,nHr),e(B5,sHr),e(B5,Dee),e(Dee,lHr),e(B5,iHr),e(Xe,dHr),e(Xe,I5),e(I5,FCe),e(FCe,cHr),e(I5,fHr),e(I5,Gee),e(Gee,mHr),e(I5,gHr),e(Xe,hHr),e(Xe,N5),e(N5,TCe),e(TCe,pHr),e(N5,uHr),e(N5,Oee),e(Oee,_Hr),e(N5,bHr),e(Ur,vHr),M(q5,Ur,null),b(f,sVe,_),b(f,_f,_),e(_f,j5),e(j5,MCe),M(p$,MCe,null),e(_f,FHr),e(_f,ECe),e(ECe,THr),b(f,lVe,_),b(f,Mr,_),M(u$,Mr,null),e(Mr,MHr),e(Mr,bf),e(bf,EHr),e(bf,Vee),e(Vee,CHr),e(bf,wHr),e(bf,Xee),e(Xee,AHr),e(bf,LHr),e(Mr,yHr),e(Mr,_$),e(_$,xHr),e(_$,CCe),e(CCe,$Hr),e(_$,kHr),e(Mr,SHr),e(Mr,ea),M(b$,ea,null),e(ea,RHr),e(ea,wCe),e(wCe,PHr),e(ea,BHr),e(ea,vf),e(vf,IHr),e(vf,ACe),e(ACe,NHr),e(vf,qHr),e(vf,zee),e(zee,jHr),e(vf,DHr),e(ea,GHr),M(D5,ea,null),e(Mr,OHr),e(Mr,Jr),M(v$,Jr,null),e(Jr,VHr),e(Jr,LCe),e(LCe,XHr),e(Jr,zHr),e(Jr,yn),e(yn,WHr),e(yn,yCe),e(yCe,QHr),e(yn,HHr),e(yn,xCe),e(xCe,UHr),e(yn,JHr),e(yn,$Ce),e($Ce,YHr),e(yn,KHr),e(Jr,ZHr),e(Jr,kCe),e(kCe,G5),e(G5,SCe),e(SCe,eUr),e(G5,oUr),e(G5,Wee),e(Wee,rUr),e(G5,tUr),e(Jr,aUr),M(O5,Jr,null),b(f,iVe,_),b(f,Ff,_),e(Ff,V5),e(V5,RCe),M(F$,RCe,null),e(Ff,nUr),e(Ff,PCe),e(PCe,sUr),b(f,dVe,_),b(f,Er,_),M(T$,Er,null),e(Er,lUr),e(Er,Tf),e(Tf,iUr),e(Tf,Qee),e(Qee,dUr),e(Tf,cUr),e(Tf,Hee),e(Hee,fUr),e(Tf,mUr),e(Er,gUr),e(Er,M$),e(M$,hUr),e(M$,BCe),e(BCe,pUr),e(M$,uUr),e(Er,_Ur),e(Er,oa),M(E$,oa,null),e(oa,bUr),e(oa,ICe),e(ICe,vUr),e(oa,FUr),e(oa,Mf),e(Mf,TUr),e(Mf,NCe),e(NCe,MUr),e(Mf,EUr),e(Mf,Uee),e(Uee,CUr),e(Mf,wUr),e(oa,AUr),M(X5,oa,null),e(Er,LUr),e(Er,Yr),M(C$,Yr,null),e(Yr,yUr),e(Yr,qCe),e(qCe,xUr),e(Yr,$Ur),e(Yr,xn),e(xn,kUr),e(xn,jCe),e(jCe,SUr),e(xn,RUr),e(xn,DCe),e(DCe,PUr),e(xn,BUr),e(xn,GCe),e(GCe,IUr),e(xn,NUr),e(Yr,qUr),e(Yr,w$),e(w$,z5),e(z5,OCe),e(OCe,jUr),e(z5,DUr),e(z5,Jee),e(Jee,GUr),e(z5,OUr),e(w$,VUr),e(w$,W5),e(W5,VCe),e(VCe,XUr),e(W5,zUr),e(W5,Yee),e(Yee,WUr),e(W5,QUr),e(Yr,HUr),M(Q5,Yr,null),b(f,cVe,_),b(f,Ef,_),e(Ef,H5),e(H5,XCe),M(A$,XCe,null),e(Ef,UUr),e(Ef,zCe),e(zCe,JUr),b(f,fVe,_),b(f,Cr,_),M(L$,Cr,null),e(Cr,YUr),e(Cr,Cf),e(Cf,KUr),e(Cf,Kee),e(Kee,ZUr),e(Cf,eJr),e(Cf,Zee),e(Zee,oJr),e(Cf,rJr),e(Cr,tJr),e(Cr,y$),e(y$,aJr),e(y$,WCe),e(WCe,nJr),e(y$,sJr),e(Cr,lJr),e(Cr,ra),M(x$,ra,null),e(ra,iJr),e(ra,QCe),e(QCe,dJr),e(ra,cJr),e(ra,wf),e(wf,fJr),e(wf,HCe),e(HCe,mJr),e(wf,gJr),e(wf,eoe),e(eoe,hJr),e(wf,pJr),e(ra,uJr),M(U5,ra,null),e(Cr,_Jr),e(Cr,Kr),M($$,Kr,null),e(Kr,bJr),e(Kr,UCe),e(UCe,vJr),e(Kr,FJr),e(Kr,$n),e($n,TJr),e($n,JCe),e(JCe,MJr),e($n,EJr),e($n,YCe),e(YCe,CJr),e($n,wJr),e($n,KCe),e(KCe,AJr),e($n,LJr),e(Kr,yJr),e(Kr,ZCe),e(ZCe,J5),e(J5,e5e),e(e5e,xJr),e(J5,$Jr),e(J5,ooe),e(ooe,kJr),e(J5,SJr),e(Kr,RJr),M(Y5,Kr,null),mVe=!0},p(f,[_]){const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),Pf.$set(k$);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),Gg.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),Eh.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),ap.$set(t5e);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),np.$set(S$);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),wp.$set(a5e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ap.$set(kn);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),xp.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),y_.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),$_.$set(l5e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),T1.$set(R$);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),E1.$set(i5e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),d2.$set(P$);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),f2.$set(d5e);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),U2.$set(B$);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),Y2.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),ub.$set(f5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),bb.$set(m5e);const Af={};_&2&&(Af.$$scope={dirty:_,ctx:f}),hv.$set(Af);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),uv.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),Qv.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),Uv.$set(p5e);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),r0.$set(I$);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),a0.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),G0.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),V0.$set(b5e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),kF.$set(tt);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),RF.$set(N$);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),IF.$set(v5e);const q$={};_&2&&(q$.$$scope={dirty:_,ctx:f}),qF.$set(q$);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),KF.$set(F5e);const at={};_&2&&(at.$$scope={dirty:_,ctx:f}),e6.$set(at);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),t6.$set(T5e);const Lf={};_&2&&(Lf.$$scope={dirty:_,ctx:f}),n6.$set(Lf);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),i6.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),c6.$set(E5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),T6.$set(L);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),E6.$set(K5);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),$6.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),S6.$set(w5e);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),X6.$set(Z5);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),W6.$set(A5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),J6.$set(L5e);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),K6.$set(e3);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),nT.$set(y5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),lT.$set(x5e);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),mT.$set(o3);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),hT.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),bT.$set(k5e);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),FT.$set(r3);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),ET.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),wT.$set(R5e);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),kT.$set(t3);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),RT.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),IT.$set(B5e);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),qT.$set(a3);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),S7.$set(I5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),P7.$set(N5e);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),a8.$set(n3);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),s8.$set(q5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),F8.$set(j5e);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),M8.$set(s3);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),L8.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),x8.$set(G5e);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),J8.$set(l3);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),K8.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),dM.$set(V5e);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),fM.$set(i3);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),qM.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),DM.$set(z5e);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),a4.$set(d3);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),s4.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),d4.$set(Q5e);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),f4.$set(c3);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),g4.$set(H5e);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),p4.$set(U5e);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),I4.$set(f3);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),q4.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),nE.$set(Y5e);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),lE.$set(m3);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),dE.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),fE.$set(Z5e);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),gE.$set(g3);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:f}),pE.$set(e3e);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:f}),VE.$set(o3e);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),zE.$set(h3);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),rC.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),aC.$set(t3e);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),bC.$set(p3);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),FC.$set(a3e);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),kC.$set(n3e);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),RC.$set(u3);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),XC.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),WC.$set(l3e);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),t5.$set(_3);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),n5.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),u5.$set(d3e);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),b5.$set(b3);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),L5.$set(c3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),x5.$set(f3e);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),q5.$set(v3);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),D5.$set(m3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),O5.$set(g3e);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),X5.$set(F3);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),Q5.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),U5.$set(p3e);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),Y5.$set(T3)},i(f){mVe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(Pf.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(LA.$$.fragment,f),E(Gg.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(Eh.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(xp.$$.fragment,f),E(YA.$$.fragment,f),E(y_.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oL.$$.fragment,f),E($_.$$.fragment,f),E(rL.$$.fragment,f),E(T1.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(E1.$$.fragment,f),E(lL.$$.fragment,f),E(d2.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(f2.$$.fragment,f),E(mL.$$.fragment,f),E(U2.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Y2.$$.fragment,f),E(_L.$$.fragment,f),E(ub.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(bb.$$.fragment,f),E(ML.$$.fragment,f),E(hv.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(uv.$$.fragment,f),E(LL.$$.fragment,f),E(Qv.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(Uv.$$.fragment,f),E(SL.$$.fragment,f),E(r0.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(a0.$$.fragment,f),E(NL.$$.fragment,f),E(G0.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(V0.$$.fragment,f),E(OL.$$.fragment,f),E(kF.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(RF.$$.fragment,f),E(QL.$$.fragment,f),E(IF.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(qF.$$.fragment,f),E(KL.$$.fragment,f),E(KF.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(e6.$$.fragment,f),E(ty.$$.fragment,f),E(t6.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(n6.$$.fragment,f),E(iy.$$.fragment,f),E(i6.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(c6.$$.fragment,f),E(gy.$$.fragment,f),E(T6.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(E6.$$.fragment,f),E(by.$$.fragment,f),E($6.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(S6.$$.fragment,f),E(Ey.$$.fragment,f),E(X6.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(W6.$$.fragment,f),E(yy.$$.fragment,f),E(J6.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(K6.$$.fragment,f),E(Py.$$.fragment,f),E(nT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(lT.$$.fragment,f),E(jy.$$.fragment,f),E(mT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(hT.$$.fragment,f),E(Xy.$$.fragment,f),E(bT.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(FT.$$.fragment,f),E(Jy.$$.fragment,f),E(ET.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e9.$$.fragment,f),E(wT.$$.fragment,f),E(o9.$$.fragment,f),E(kT.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(RT.$$.fragment,f),E(s9.$$.fragment,f),E(IT.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(qT.$$.fragment,f),E(f9.$$.fragment,f),E(S7.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(P7.$$.fragment,f),E(u9.$$.fragment,f),E(a8.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(s8.$$.fragment,f),E(T9.$$.fragment,f),E(F8.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(M8.$$.fragment,f),E(A9.$$.fragment,f),E(L8.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(x8.$$.fragment,f),E(k9.$$.fragment,f),E(J8.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(K8.$$.fragment,f),E(I9.$$.fragment,f),E(dM.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(fM.$$.fragment,f),E(G9.$$.fragment,f),E(qM.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(DM.$$.fragment,f),E(W9.$$.fragment,f),E(a4.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(s4.$$.fragment,f),E(Y9.$$.fragment,f),E(d4.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(f4.$$.fragment,f),E(tx.$$.fragment,f),E(g4.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(p4.$$.fragment,f),E(ix.$$.fragment,f),E(I4.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(q4.$$.fragment,f),E(gx.$$.fragment,f),E(nE.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(lE.$$.fragment,f),E(bx.$$.fragment,f),E(dE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(fE.$$.fragment,f),E(Ex.$$.fragment,f),E(gE.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(pE.$$.fragment,f),E(yx.$$.fragment,f),E(VE.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(zE.$$.fragment,f),E(Rx.$$.fragment,f),E(rC.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(aC.$$.fragment,f),E(qx.$$.fragment,f),E(bC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(FC.$$.fragment,f),E(Vx.$$.fragment,f),E(kC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(RC.$$.fragment,f),E(Hx.$$.fragment,f),E(XC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(WC.$$.fragment,f),E(Zx.$$.fragment,f),E(t5.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(n5.$$.fragment,f),E(a$.$$.fragment,f),E(u5.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(b5.$$.fragment,f),E(d$.$$.fragment,f),E(L5.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(x5.$$.fragment,f),E(h$.$$.fragment,f),E(q5.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(D5.$$.fragment,f),E(v$.$$.fragment,f),E(O5.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(X5.$$.fragment,f),E(C$.$$.fragment,f),E(Q5.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(U5.$$.fragment,f),E($$.$$.fragment,f),E(Y5.$$.fragment,f),mVe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(Pf.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(LA.$$.fragment,f),C(Gg.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(Eh.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(xp.$$.fragment,f),C(YA.$$.fragment,f),C(y_.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oL.$$.fragment,f),C($_.$$.fragment,f),C(rL.$$.fragment,f),C(T1.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(E1.$$.fragment,f),C(lL.$$.fragment,f),C(d2.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(f2.$$.fragment,f),C(mL.$$.fragment,f),C(U2.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Y2.$$.fragment,f),C(_L.$$.fragment,f),C(ub.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(bb.$$.fragment,f),C(ML.$$.fragment,f),C(hv.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(uv.$$.fragment,f),C(LL.$$.fragment,f),C(Qv.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(Uv.$$.fragment,f),C(SL.$$.fragment,f),C(r0.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(a0.$$.fragment,f),C(NL.$$.fragment,f),C(G0.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(V0.$$.fragment,f),C(OL.$$.fragment,f),C(kF.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(RF.$$.fragment,f),C(QL.$$.fragment,f),C(IF.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(qF.$$.fragment,f),C(KL.$$.fragment,f),C(KF.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(e6.$$.fragment,f),C(ty.$$.fragment,f),C(t6.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(n6.$$.fragment,f),C(iy.$$.fragment,f),C(i6.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(c6.$$.fragment,f),C(gy.$$.fragment,f),C(T6.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(E6.$$.fragment,f),C(by.$$.fragment,f),C($6.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(S6.$$.fragment,f),C(Ey.$$.fragment,f),C(X6.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(W6.$$.fragment,f),C(yy.$$.fragment,f),C(J6.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(K6.$$.fragment,f),C(Py.$$.fragment,f),C(nT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(lT.$$.fragment,f),C(jy.$$.fragment,f),C(mT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(hT.$$.fragment,f),C(Xy.$$.fragment,f),C(bT.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(FT.$$.fragment,f),C(Jy.$$.fragment,f),C(ET.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e9.$$.fragment,f),C(wT.$$.fragment,f),C(o9.$$.fragment,f),C(kT.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(RT.$$.fragment,f),C(s9.$$.fragment,f),C(IT.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(qT.$$.fragment,f),C(f9.$$.fragment,f),C(S7.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(P7.$$.fragment,f),C(u9.$$.fragment,f),C(a8.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(s8.$$.fragment,f),C(T9.$$.fragment,f),C(F8.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(M8.$$.fragment,f),C(A9.$$.fragment,f),C(L8.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(x8.$$.fragment,f),C(k9.$$.fragment,f),C(J8.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(K8.$$.fragment,f),C(I9.$$.fragment,f),C(dM.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(fM.$$.fragment,f),C(G9.$$.fragment,f),C(qM.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(DM.$$.fragment,f),C(W9.$$.fragment,f),C(a4.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(s4.$$.fragment,f),C(Y9.$$.fragment,f),C(d4.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(f4.$$.fragment,f),C(tx.$$.fragment,f),C(g4.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(p4.$$.fragment,f),C(ix.$$.fragment,f),C(I4.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(q4.$$.fragment,f),C(gx.$$.fragment,f),C(nE.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(lE.$$.fragment,f),C(bx.$$.fragment,f),C(dE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(fE.$$.fragment,f),C(Ex.$$.fragment,f),C(gE.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(pE.$$.fragment,f),C(yx.$$.fragment,f),C(VE.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(zE.$$.fragment,f),C(Rx.$$.fragment,f),C(rC.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(aC.$$.fragment,f),C(qx.$$.fragment,f),C(bC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(FC.$$.fragment,f),C(Vx.$$.fragment,f),C(kC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(RC.$$.fragment,f),C(Hx.$$.fragment,f),C(XC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(WC.$$.fragment,f),C(Zx.$$.fragment,f),C(t5.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(n5.$$.fragment,f),C(a$.$$.fragment,f),C(u5.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(b5.$$.fragment,f),C(d$.$$.fragment,f),C(L5.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(x5.$$.fragment,f),C(h$.$$.fragment,f),C(q5.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(D5.$$.fragment,f),C(v$.$$.fragment,f),C(O5.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(X5.$$.fragment,f),C(C$.$$.fragment,f),C(Q5.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(U5.$$.fragment,f),C($$.$$.fragment,f),C(Y5.$$.fragment,f),mVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(nt),f&&t(Oe),f&&t(We),f&&t(kf),w(xa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(lGe),f&&t(xi),w(TA),f&&t(iGe),f&&t(In),f&&t(dGe),w(MA,f),f&&t(cGe),f&&t(Zk),f&&t(fGe),w(Pf,f),f&&t(mGe),f&&t($i),w(EA),f&&t(gGe),f&&t(wo),w(CA),w(LA),w(Gg),w(yA),f&&t(hGe),f&&t(Si),w(xA),f&&t(pGe),f&&t(Ao),w($A),w(RA),w(Eh),w(PA),f&&t(uGe),f&&t(Ri),w(BA),f&&t(_Ge),f&&t(Lo),w(IA),w(jA),w(ap),w(np),w(DA),f&&t(bGe),f&&t(Pi),w(GA),f&&t(vGe),f&&t(yo),w(OA),w(zA),w(wp),w(Ap),w(WA),f&&t(FGe),f&&t(Ii),w(QA),f&&t(TGe),f&&t(xo),w(HA),w(JA),w(xp),w(YA),w(y_),f&&t(MGe),f&&t(ji),w(KA),f&&t(EGe),f&&t($o),w(ZA),w(oL),w($_),w(rL),w(T1),f&&t(CGe),f&&t(Oi),w(tL),f&&t(wGe),f&&t(ko),w(aL),w(sL),w(E1),w(lL),w(d2),f&&t(AGe),f&&t(zi),w(iL),f&&t(LGe),f&&t(So),w(dL),w(fL),w(f2),w(mL),w(U2),f&&t(yGe),f&&t(Hi),w(gL),f&&t(xGe),f&&t(Ro),w(hL),w(uL),w(Y2),w(_L),w(ub),f&&t($Ge),f&&t(Yi),w(bL),f&&t(kGe),f&&t(Po),w(vL),w(TL),w(bb),w(ML),w(hv),f&&t(SGe),f&&t(ed),w(EL),f&&t(RGe),f&&t(Bo),w(CL),w(AL),w(uv),w(LL),w(Qv),f&&t(PGe),f&&t(td),w(yL),f&&t(BGe),f&&t(Io),w(xL),w(kL),w(Uv),w(SL),w(r0),f&&t(IGe),f&&t(sd),w(RL),f&&t(NGe),f&&t(No),w(PL),w(IL),w(a0),w(NL),w(G0),f&&t(qGe),f&&t(dd),w(qL),f&&t(jGe),f&&t(qo),w(jL),w(GL),w(V0),w(OL),w(kF),f&&t(DGe),f&&t(md),w(VL),f&&t(GGe),f&&t(jo),w(XL),w(WL),w(RF),w(QL),w(IF),f&&t(OGe),f&&t(pd),w(HL),f&&t(VGe),f&&t(Do),w(UL),w(YL),w(qF),w(KL),w(KF),f&&t(XGe),f&&t(bd),w(ZL),f&&t(zGe),f&&t(Go),w(ey),w(ry),w(e6),w(ty),w(t6),f&&t(WGe),f&&t(Td),w(ay),f&&t(QGe),f&&t(Oo),w(ny),w(ly),w(n6),w(iy),w(i6),f&&t(HGe),f&&t(Cd),w(dy),f&&t(UGe),f&&t(Vo),w(cy),w(my),w(c6),w(gy),w(T6),f&&t(JGe),f&&t(Ld),w(hy),f&&t(YGe),f&&t(Xo),w(py),w(_y),w(E6),w(by),w($6),f&&t(KGe),f&&t($d),w(vy),f&&t(ZGe),f&&t(zo),w(Fy),w(My),w(S6),w(Ey),w(X6),f&&t(eOe),f&&t(Rd),w(Cy),f&&t(oOe),f&&t(Wo),w(wy),w(Ly),w(W6),w(yy),w(J6),f&&t(rOe),f&&t(Id),w($y),f&&t(tOe),f&&t(Qo),w(ky),w(Ry),w(K6),w(Py),w(nT),f&&t(aOe),f&&t(jd),w(By),f&&t(nOe),f&&t(Ho),w(Iy),w(qy),w(lT),w(jy),w(mT),f&&t(sOe),f&&t(Vd),w(Dy),f&&t(lOe),f&&t(Uo),w(Gy),w(Vy),w(hT),w(Xy),w(bT),f&&t(iOe),f&&t(Wd),w(Wy),f&&t(dOe),f&&t(Jo),w(Qy),w(Uy),w(FT),w(Jy),w(ET),f&&t(cOe),f&&t(Ud),w(Yy),f&&t(fOe),f&&t(Yo),w(Ky),w(e9),w(wT),w(o9),w(kT),f&&t(mOe),f&&t(Kd),w(r9),f&&t(gOe),f&&t(Ko),w(t9),w(n9),w(RT),w(s9),w(IT),f&&t(hOe),f&&t(oc),w(l9),f&&t(pOe),f&&t(Zo),w(i9),w(c9),w(qT),w(f9),w(S7),f&&t(uOe),f&&t(ac),w(m9),f&&t(_Oe),f&&t(er),w(g9),w(p9),w(P7),w(u9),w(a8),f&&t(bOe),f&&t(lc),w(_9),f&&t(vOe),f&&t(or),w(b9),w(F9),w(s8),w(T9),w(F8),f&&t(FOe),f&&t(cc),w(M9),f&&t(TOe),f&&t(rr),w(E9),w(w9),w(M8),w(A9),w(L8),f&&t(MOe),f&&t(gc),w(L9),f&&t(EOe),f&&t(tr),w(y9),w($9),w(x8),w(k9),w(J8),f&&t(COe),f&&t(uc),w(S9),f&&t(wOe),f&&t(ar),w(R9),w(B9),w(K8),w(I9),w(dM),f&&t(AOe),f&&t(vc),w(N9),f&&t(LOe),f&&t(nr),w(q9),w(D9),w(fM),w(G9),w(qM),f&&t(yOe),f&&t(Mc),w(O9),f&&t(xOe),f&&t(sr),w(V9),w(z9),w(DM),w(W9),w(a4),f&&t($Oe),f&&t(wc),w(Q9),f&&t(kOe),f&&t(lr),w(H9),w(J9),w(s4),w(Y9),w(d4),f&&t(SOe),f&&t(yc),w(Z9),f&&t(ROe),f&&t(ir),w(ex),w(rx),w(f4),w(tx),w(g4),f&&t(POe),f&&t(kc),w(ax),f&&t(BOe),f&&t(dr),w(nx),w(lx),w(p4),w(ix),w(I4),f&&t(IOe),f&&t(Pc),w(dx),f&&t(NOe),f&&t(cr),w(cx),w(mx),w(q4),w(gx),w(nE),f&&t(qOe),f&&t(Nc),w(hx),f&&t(jOe),f&&t(fr),w(px),w(_x),w(lE),w(bx),w(dE),f&&t(DOe),f&&t(Dc),w(vx),f&&t(GOe),f&&t(mr),w(Fx),w(Mx),w(fE),w(Ex),w(gE),f&&t(OOe),f&&t(Vc),w(Cx),f&&t(VOe),f&&t(gr),w(wx),w(Lx),w(pE),w(yx),w(VE),f&&t(XOe),f&&t(Wc),w(xx),f&&t(zOe),f&&t(hr),w($x),w(Sx),w(zE),w(Rx),w(rC),f&&t(WOe),f&&t(Uc),w(Px),f&&t(QOe),f&&t(pr),w(Bx),w(Nx),w(aC),w(qx),w(bC),f&&t(HOe),f&&t(Kc),w(jx),f&&t(UOe),f&&t(ur),w(Dx),w(Ox),w(FC),w(Vx),w(kC),f&&t(JOe),f&&t(of),w(Xx),f&&t(YOe),f&&t(_r),w(zx),w(Qx),w(RC),w(Hx),w(XC),f&&t(KOe),f&&t(af),w(Ux),f&&t(ZOe),f&&t(br),w(Jx),w(Kx),w(WC),w(Zx),w(t5),f&&t(eVe),f&&t(lf),w(e$),f&&t(oVe),f&&t(vr),w(o$),w(t$),w(n5),w(a$),w(u5),f&&t(rVe),f&&t(ff),w(n$),f&&t(tVe),f&&t(Fr),w(s$),w(i$),w(b5),w(d$),w(L5),f&&t(aVe),f&&t(hf),w(c$),f&&t(nVe),f&&t(Tr),w(f$),w(g$),w(x5),w(h$),w(q5),f&&t(sVe),f&&t(_f),w(p$),f&&t(lVe),f&&t(Mr),w(u$),w(b$),w(D5),w(v$),w(O5),f&&t(iVe),f&&t(Ff),w(F$),f&&t(dVe),f&&t(Er),w(T$),w(E$),w(X5),w(C$),w(Q5),f&&t(cVe),f&&t(Ef),w(A$),f&&t(fVe),f&&t(Cr),w(L$),w(x$),w(U5),w($$),w(Y5)}}}const XDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function zDt(y){return Vqt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class KDt extends jqt{constructor(g){super();Dqt(this,g,zDt,VDt,Gqt,{})}}export{KDt as default,XDt as metadata};
