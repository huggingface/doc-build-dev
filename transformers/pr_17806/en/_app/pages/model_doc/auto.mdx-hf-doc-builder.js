import{S as jGt,i as DGt,s as GGt,e as a,k as l,w as F,t as o,M as OGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as VGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as aZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function XGt(x){let g,v,p,m,_,d,h,Eo,Ci,kf,nt,wi,Ai,kA,Sf,Oe,We,Li,Rn,SA,Pn,Bn,RA,yi,In,PA,xi,Rf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ci=a("code"),kf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),wi=a("code"),Ai=o('"new-model"'),kA=o(")."),Sf=l(),Oe=a("p"),We=o("Likewise, if your "),Li=a("code"),Rn=o("NewModel"),SA=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),RA=o(`, make sure its
`),yi=a("code"),In=o("config_class"),PA=o(` attribute is set to the same class you use when registering the model (here
`),xi=a("code"),Rf=o("NewModelConfig"),$a=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var cS=s(p);m=r(cS,"NewModelConfig"),cS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var $i=s(d);h=r($i,"PretrainedConfig"),$i.forEach(t),Eo=r(Ae,`, make sure its
`),Ci=n(Ae,"CODE",{});var fS=s(Ci);kf=r(fS,"model_type"),fS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),wi=n(Ae,"CODE",{});var mS=s(wi);Ai=r(mS,'"new-model"'),mS.forEach(t),kA=r(Ae,")."),Ae.forEach(t),Sf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Li=n(Co,"CODE",{});var ka=s(Li);Rn=r(ka,"NewModel"),ka.forEach(t),SA=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var gS=s(Pn);Bn=r(gS,"PreTrainedModel"),gS.forEach(t),RA=r(Co,`, make sure its
`),yi=n(Co,"CODE",{});var Pf=s(yi);In=r(Pf,"config_class"),Pf.forEach(t),PA=r(Co,` attribute is set to the same class you use when registering the model (here
`),xi=n(Co,"CODE",{});var hS=s(xi);Rf=r(hS,"NewModelConfig"),hS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ci),e(Ci,kf),e(g,nt),e(g,wi),e(wi,Ai),e(g,kA),b(Qe,Sf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Li),e(Li,Rn),e(Oe,SA),e(Oe,Pn),e(Pn,Bn),e(Oe,RA),e(Oe,yi),e(yi,In),e(Oe,PA),e(Oe,xi),e(xi,Rf),e(Oe,$a)},d(Qe){Qe&&t(g),Qe&&t(Sf),Qe&&t(Oe)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt(x){let g,v,p,m,_,d,h,Eo,Ci,kf,nt,wi,Ai,kA,Sf,Oe,We,Li,Rn,SA,Pn,Bn,RA,yi,In,PA,xi,Rf,$a,Qe,Ae,cS,$i,fS,mS,Co,ka,gS,Pf,hS,AWe,fOe,ki,Bf,yte,BA,LWe,xte,yWe,mOe,Nn,xWe,$te,$We,kWe,kte,SWe,RWe,gOe,IA,hOe,pS,PWe,pOe,If,_Oe,Si,Nf,Ste,NA,BWe,Rte,IWe,uOe,wo,qA,NWe,jA,qWe,_S,jWe,DWe,GWe,DA,OWe,Pte,VWe,XWe,zWe,Ar,GA,WWe,Bte,QWe,HWe,Ri,UWe,Ite,JWe,YWe,Nte,KWe,ZWe,eQe,A,qf,qte,oQe,rQe,uS,tQe,aQe,nQe,jf,jte,sQe,lQe,bS,iQe,dQe,cQe,Df,Dte,fQe,mQe,vS,gQe,hQe,pQe,Gf,Gte,_Qe,uQe,FS,bQe,vQe,FQe,Of,Ote,TQe,MQe,TS,EQe,CQe,wQe,Vf,Vte,AQe,LQe,MS,yQe,xQe,$Qe,Xf,Xte,kQe,SQe,ES,RQe,PQe,BQe,zf,zte,IQe,NQe,CS,qQe,jQe,DQe,Wf,Wte,GQe,OQe,wS,VQe,XQe,zQe,Qf,Qte,WQe,QQe,AS,HQe,UQe,JQe,Hf,Hte,YQe,KQe,LS,ZQe,eHe,oHe,Uf,Ute,rHe,tHe,yS,aHe,nHe,sHe,Jf,Jte,lHe,iHe,xS,dHe,cHe,fHe,Yf,Yte,mHe,gHe,$S,hHe,pHe,_He,Kf,Kte,uHe,bHe,kS,vHe,FHe,THe,Zf,Zte,MHe,EHe,SS,CHe,wHe,AHe,em,eae,LHe,yHe,RS,xHe,$He,kHe,om,oae,SHe,RHe,PS,PHe,BHe,IHe,rm,rae,NHe,qHe,BS,jHe,DHe,GHe,tm,tae,OHe,VHe,IS,XHe,zHe,WHe,am,aae,QHe,HHe,NS,UHe,JHe,YHe,nm,nae,KHe,ZHe,qS,eUe,oUe,rUe,sm,sae,tUe,aUe,jS,nUe,sUe,lUe,lm,lae,iUe,dUe,DS,cUe,fUe,mUe,im,iae,gUe,hUe,GS,pUe,_Ue,uUe,dm,dae,bUe,vUe,OS,FUe,TUe,MUe,cm,cae,EUe,CUe,VS,wUe,AUe,LUe,fm,fae,yUe,xUe,XS,$Ue,kUe,SUe,mm,mae,RUe,PUe,zS,BUe,IUe,NUe,gm,gae,qUe,jUe,WS,DUe,GUe,OUe,hm,hae,VUe,XUe,QS,zUe,WUe,QUe,pm,pae,HUe,UUe,HS,JUe,YUe,KUe,_m,_ae,ZUe,eJe,US,oJe,rJe,tJe,um,uae,aJe,nJe,JS,sJe,lJe,iJe,bm,bae,dJe,cJe,YS,fJe,mJe,gJe,vm,vae,hJe,pJe,KS,_Je,uJe,bJe,Fm,Fae,vJe,FJe,ZS,TJe,MJe,EJe,Tm,Tae,CJe,wJe,eR,AJe,LJe,yJe,Mm,Mae,xJe,$Je,oR,kJe,SJe,RJe,Em,Eae,PJe,BJe,rR,IJe,NJe,qJe,Cm,Cae,jJe,DJe,tR,GJe,OJe,VJe,wm,wae,XJe,zJe,aR,WJe,QJe,HJe,Am,Aae,UJe,JJe,nR,YJe,KJe,ZJe,Lm,Lae,eYe,oYe,sR,rYe,tYe,aYe,ym,yae,nYe,sYe,lR,lYe,iYe,dYe,xm,xae,cYe,fYe,iR,mYe,gYe,hYe,$m,$ae,pYe,_Ye,dR,uYe,bYe,vYe,km,kae,FYe,TYe,cR,MYe,EYe,CYe,Sm,Sae,wYe,AYe,fR,LYe,yYe,xYe,Rm,Rae,$Ye,kYe,mR,SYe,RYe,PYe,Pm,Pae,BYe,IYe,gR,NYe,qYe,jYe,Bm,Bae,DYe,GYe,hR,OYe,VYe,XYe,Im,Iae,zYe,WYe,pR,QYe,HYe,UYe,Nm,Nae,JYe,YYe,_R,KYe,ZYe,eKe,qm,qae,oKe,rKe,uR,tKe,aKe,nKe,jm,jae,sKe,lKe,bR,iKe,dKe,cKe,Dm,Dae,fKe,mKe,vR,gKe,hKe,pKe,Gm,Gae,_Ke,uKe,FR,bKe,vKe,FKe,Om,Oae,TKe,MKe,TR,EKe,CKe,wKe,Vm,Vae,AKe,LKe,MR,yKe,xKe,$Ke,Xm,Xae,kKe,SKe,ER,RKe,PKe,BKe,zm,zae,IKe,NKe,CR,qKe,jKe,DKe,Wm,Wae,GKe,OKe,wR,VKe,XKe,zKe,Qm,Qae,WKe,QKe,AR,HKe,UKe,JKe,Hm,Hae,YKe,KKe,LR,ZKe,eZe,oZe,Um,Uae,rZe,tZe,yR,aZe,nZe,sZe,Jm,Jae,lZe,iZe,xR,dZe,cZe,fZe,Ym,Yae,mZe,gZe,$R,hZe,pZe,_Ze,Km,Kae,uZe,bZe,kR,vZe,FZe,TZe,Zm,Zae,MZe,EZe,SR,CZe,wZe,AZe,eg,ene,LZe,yZe,RR,xZe,$Ze,kZe,og,one,SZe,RZe,PR,PZe,BZe,IZe,rg,rne,NZe,qZe,BR,jZe,DZe,GZe,tg,tne,OZe,VZe,IR,XZe,zZe,WZe,ag,ane,QZe,HZe,NR,UZe,JZe,YZe,ng,nne,KZe,ZZe,qR,eeo,oeo,reo,sg,sne,teo,aeo,jR,neo,seo,leo,lg,lne,ieo,deo,DR,ceo,feo,meo,ig,ine,geo,heo,GR,peo,_eo,ueo,dg,dne,beo,veo,OR,Feo,Teo,Meo,cg,cne,Eeo,Ceo,VR,weo,Aeo,Leo,fg,fne,yeo,xeo,XR,$eo,keo,Seo,mg,mne,Reo,Peo,zR,Beo,Ieo,Neo,gg,gne,qeo,jeo,WR,Deo,Geo,Oeo,hg,hne,Veo,Xeo,QR,zeo,Weo,Qeo,pg,pne,Heo,Ueo,HR,Jeo,Yeo,Keo,_g,_ne,Zeo,eoo,UR,ooo,roo,too,ug,une,aoo,noo,JR,soo,loo,ioo,bg,bne,doo,coo,YR,foo,moo,goo,vg,vne,hoo,poo,KR,_oo,uoo,boo,Fg,Fne,voo,Foo,ZR,Too,Moo,Eoo,Tg,Tne,Coo,woo,eP,Aoo,Loo,yoo,Mg,Mne,xoo,$oo,oP,koo,Soo,Roo,Eg,Ene,Poo,Boo,rP,Ioo,Noo,qoo,Cg,Cne,joo,Doo,tP,Goo,Ooo,Voo,wg,wne,Xoo,zoo,aP,Woo,Qoo,Hoo,Ag,Ane,Uoo,Joo,nP,Yoo,Koo,Zoo,Lg,Lne,ero,oro,sP,rro,tro,aro,yg,yne,nro,sro,lP,lro,iro,dro,xg,xne,cro,fro,iP,mro,gro,hro,$g,$ne,pro,_ro,dP,uro,bro,vro,kg,kne,Fro,Tro,cP,Mro,Ero,Cro,Sg,Sne,wro,Aro,fP,Lro,yro,xro,Rg,Rne,$ro,kro,mP,Sro,Rro,Pro,Pg,Pne,Bro,Iro,gP,Nro,qro,jro,Bg,Bne,Dro,Gro,hP,Oro,Vro,Xro,Ig,Ine,zro,Wro,pP,Qro,Hro,Uro,Ng,Nne,Jro,Yro,_P,Kro,Zro,eto,qg,qne,oto,rto,uP,tto,ato,nto,jg,jne,sto,lto,bP,ito,dto,cto,Dg,Dne,fto,mto,vP,gto,hto,pto,Gg,Gne,_to,uto,FP,bto,vto,Fto,Og,One,Tto,Mto,TP,Eto,Cto,wto,Vg,Vne,Ato,Lto,MP,yto,xto,$to,Xg,Xne,kto,Sto,EP,Rto,Pto,Bto,zg,Ito,Wg,OA,Nto,zne,qto,bOe,Pi,Qg,Wne,VA,jto,Qne,Dto,vOe,Ao,XA,Gto,zA,Oto,CP,Vto,Xto,zto,WA,Wto,Hne,Qto,Hto,Uto,Lr,QA,Jto,Une,Yto,Kto,Sa,Zto,Jne,eao,oao,Yne,rao,tao,Kne,aao,nao,sao,k,qn,Zne,lao,iao,wP,dao,cao,AP,fao,mao,gao,jn,ese,hao,pao,LP,_ao,uao,yP,bao,vao,Fao,Dn,ose,Tao,Mao,xP,Eao,Cao,$P,wao,Aao,Lao,Hg,rse,yao,xao,kP,$ao,kao,Sao,Gn,tse,Rao,Pao,SP,Bao,Iao,RP,Nao,qao,jao,Ug,ase,Dao,Gao,PP,Oao,Vao,Xao,Jg,nse,zao,Wao,BP,Qao,Hao,Uao,Yg,sse,Jao,Yao,IP,Kao,Zao,eno,On,lse,ono,rno,NP,tno,ano,qP,nno,sno,lno,Vn,ise,ino,dno,jP,cno,fno,DP,mno,gno,hno,Xn,dse,pno,_no,GP,uno,bno,OP,vno,Fno,Tno,Kg,cse,Mno,Eno,VP,Cno,wno,Ano,Zg,fse,Lno,yno,XP,xno,$no,kno,eh,mse,Sno,Rno,zP,Pno,Bno,Ino,zn,gse,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,oh,hse,Xno,zno,HP,Wno,Qno,Hno,Wn,pse,Uno,Jno,UP,Yno,Kno,JP,Zno,eso,oso,Qn,_se,rso,tso,YP,aso,nso,KP,sso,lso,iso,Hn,use,dso,cso,ZP,fso,mso,eB,gso,hso,pso,Un,bse,_so,uso,oB,bso,vso,rB,Fso,Tso,Mso,rh,vse,Eso,Cso,tB,wso,Aso,Lso,Jn,Fse,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,Yn,Tse,Bso,Iso,sB,Nso,qso,lB,jso,Dso,Gso,Kn,Mse,Oso,Vso,iB,Xso,zso,dB,Wso,Qso,Hso,Zn,Ese,Uso,Jso,cB,Yso,Kso,fB,Zso,elo,olo,es,Cse,rlo,tlo,mB,alo,nlo,gB,slo,llo,ilo,os,wse,dlo,clo,hB,flo,mlo,pB,glo,hlo,plo,th,Ase,_lo,ulo,_B,blo,vlo,Flo,rs,Lse,Tlo,Mlo,uB,Elo,Clo,bB,wlo,Alo,Llo,ah,yse,ylo,xlo,vB,$lo,klo,Slo,ts,xse,Rlo,Plo,FB,Blo,Ilo,TB,Nlo,qlo,jlo,as,$se,Dlo,Glo,MB,Olo,Vlo,EB,Xlo,zlo,Wlo,ns,kse,Qlo,Hlo,CB,Ulo,Jlo,wB,Ylo,Klo,Zlo,nh,Sse,eio,oio,AB,rio,tio,aio,ss,Rse,nio,sio,LB,lio,iio,yB,dio,cio,fio,ls,Pse,mio,gio,xB,hio,pio,$B,_io,uio,bio,sh,Bse,vio,Fio,kB,Tio,Mio,Eio,is,Ise,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,ds,Nse,kio,Sio,PB,Rio,Pio,BB,Bio,Iio,Nio,cs,qse,qio,jio,IB,Dio,Gio,NB,Oio,Vio,Xio,fs,jse,zio,Wio,qB,Qio,Hio,jB,Uio,Jio,Yio,ms,Dse,Kio,Zio,DB,edo,odo,GB,rdo,tdo,ado,gs,Gse,ndo,sdo,OB,ldo,ido,VB,ddo,cdo,fdo,hs,Ose,mdo,gdo,XB,hdo,pdo,zB,_do,udo,bdo,ps,Vse,vdo,Fdo,WB,Tdo,Mdo,QB,Edo,Cdo,wdo,lh,Xse,Ado,Ldo,HB,ydo,xdo,$do,_s,zse,kdo,Sdo,UB,Rdo,Pdo,JB,Bdo,Ido,Ndo,ih,Wse,qdo,jdo,YB,Ddo,Gdo,Odo,dh,Qse,Vdo,Xdo,KB,zdo,Wdo,Qdo,us,Hse,Hdo,Udo,ZB,Jdo,Ydo,eI,Kdo,Zdo,eco,bs,Use,oco,rco,oI,tco,aco,rI,nco,sco,lco,vs,Jse,ico,dco,tI,cco,fco,aI,mco,gco,hco,ch,Yse,pco,_co,nI,uco,bco,vco,Fs,Kse,Fco,Tco,sI,Mco,Eco,lI,Cco,wco,Aco,Ts,Zse,Lco,yco,iI,xco,$co,dI,kco,Sco,Rco,Ms,ele,Pco,Bco,cI,Ico,Nco,fI,qco,jco,Dco,Es,ole,Gco,Oco,mI,Vco,Xco,gI,zco,Wco,Qco,Cs,rle,Hco,Uco,hI,Jco,Yco,pI,Kco,Zco,efo,ws,tle,ofo,rfo,_I,tfo,afo,uI,nfo,sfo,lfo,fh,ale,ifo,dfo,bI,cfo,ffo,mfo,As,nle,gfo,hfo,vI,pfo,_fo,FI,ufo,bfo,vfo,mh,sle,Ffo,Tfo,TI,Mfo,Efo,Cfo,gh,lle,wfo,Afo,MI,Lfo,yfo,xfo,hh,ile,$fo,kfo,EI,Sfo,Rfo,Pfo,ph,dle,Bfo,Ifo,CI,Nfo,qfo,jfo,Ls,cle,Dfo,Gfo,wI,Ofo,Vfo,AI,Xfo,zfo,Wfo,_h,fle,Qfo,Hfo,LI,Ufo,Jfo,Yfo,ys,mle,Kfo,Zfo,yI,emo,omo,xI,rmo,tmo,amo,xs,gle,nmo,smo,$I,lmo,imo,kI,dmo,cmo,fmo,$s,hle,mmo,gmo,SI,hmo,pmo,RI,_mo,umo,bmo,ks,ple,vmo,Fmo,PI,Tmo,Mmo,BI,Emo,Cmo,wmo,Ss,_le,Amo,Lmo,II,ymo,xmo,NI,$mo,kmo,Smo,Rs,ule,Rmo,Pmo,qI,Bmo,Imo,jI,Nmo,qmo,jmo,uh,ble,Dmo,Gmo,DI,Omo,Vmo,Xmo,bh,vle,zmo,Wmo,GI,Qmo,Hmo,Umo,Ps,Fle,Jmo,Ymo,OI,Kmo,Zmo,VI,ego,ogo,rgo,Bs,Tle,tgo,ago,XI,ngo,sgo,zI,lgo,igo,dgo,Is,Mle,cgo,fgo,WI,mgo,ggo,QI,hgo,pgo,_go,vh,Ele,ugo,bgo,HI,vgo,Fgo,Tgo,Fh,Cle,Mgo,Ego,UI,Cgo,wgo,Ago,Th,wle,Lgo,ygo,JI,xgo,$go,kgo,Ns,Ale,Sgo,Rgo,YI,Pgo,Bgo,KI,Igo,Ngo,qgo,qs,Lle,jgo,Dgo,ZI,Ggo,Ogo,eN,Vgo,Xgo,zgo,Mh,yle,Wgo,Qgo,oN,Hgo,Ugo,Jgo,Eh,xle,Ygo,Kgo,rN,Zgo,eho,oho,Ch,$le,rho,tho,tN,aho,nho,sho,js,kle,lho,iho,aN,dho,cho,nN,fho,mho,gho,wh,Sle,hho,pho,sN,_ho,uho,bho,Ah,Rle,vho,Fho,lN,Tho,Mho,Eho,Ds,Ple,Cho,who,iN,Aho,Lho,dN,yho,xho,$ho,Gs,Ble,kho,Sho,cN,Rho,Pho,fN,Bho,Iho,Nho,Os,Ile,qho,jho,mN,Dho,Gho,gN,Oho,Vho,Xho,Vs,Nle,zho,Who,hN,Qho,Hho,pN,Uho,Jho,Yho,Lh,Kho,yh,HA,Zho,qle,epo,FOe,Bi,xh,jle,UA,opo,Dle,rpo,TOe,Lo,JA,tpo,YA,apo,_N,npo,spo,lpo,KA,ipo,Gle,dpo,cpo,fpo,He,ZA,mpo,Ole,gpo,hpo,Ra,ppo,Vle,_po,upo,Xle,bpo,vpo,zle,Fpo,Tpo,Mpo,Y,$h,Wle,Epo,Cpo,uN,wpo,Apo,Lpo,kh,Qle,ypo,xpo,bN,$po,kpo,Spo,Sh,Hle,Rpo,Ppo,vN,Bpo,Ipo,Npo,Rh,Ule,qpo,jpo,FN,Dpo,Gpo,Opo,Ph,Jle,Vpo,Xpo,TN,zpo,Wpo,Qpo,Bh,Yle,Hpo,Upo,MN,Jpo,Ypo,Kpo,Ih,Kle,Zpo,e_o,EN,o_o,r_o,t_o,Nh,Zle,a_o,n_o,CN,s_o,l_o,i_o,qh,eie,d_o,c_o,wN,f_o,m_o,g_o,jh,oie,h_o,p_o,AN,__o,u_o,b_o,Dh,rie,v_o,F_o,LN,T_o,M_o,E_o,Gh,tie,C_o,w_o,yN,A_o,L_o,y_o,Oh,aie,x_o,$_o,xN,k_o,S_o,R_o,Vh,nie,P_o,B_o,$N,I_o,N_o,q_o,Xh,sie,j_o,D_o,kN,G_o,O_o,V_o,zh,lie,X_o,z_o,SN,W_o,Q_o,H_o,Wh,iie,U_o,J_o,RN,Y_o,K_o,Z_o,Qh,die,euo,ouo,PN,ruo,tuo,auo,Hh,cie,nuo,suo,BN,luo,iuo,duo,Uh,fie,cuo,fuo,IN,muo,guo,huo,Jh,mie,puo,_uo,NN,uuo,buo,vuo,Yh,gie,Fuo,Tuo,qN,Muo,Euo,Cuo,Kh,hie,wuo,Auo,jN,Luo,yuo,xuo,Zh,pie,$uo,kuo,DN,Suo,Ruo,Puo,ep,_ie,Buo,Iuo,GN,Nuo,quo,juo,op,uie,Duo,Guo,ON,Ouo,Vuo,Xuo,rp,bie,zuo,Wuo,VN,Quo,Huo,Uuo,tp,vie,Juo,Yuo,XN,Kuo,Zuo,e1o,ap,Fie,o1o,r1o,zN,t1o,a1o,n1o,np,Tie,s1o,l1o,WN,i1o,d1o,c1o,sp,Mie,f1o,m1o,QN,g1o,h1o,p1o,lp,Eie,_1o,u1o,HN,b1o,v1o,F1o,ip,T1o,dp,M1o,cp,eL,E1o,Cie,C1o,MOe,Ii,fp,wie,oL,w1o,Aie,A1o,EOe,yo,rL,L1o,tL,y1o,UN,x1o,$1o,k1o,aL,S1o,Lie,R1o,P1o,B1o,Ue,nL,I1o,yie,N1o,q1o,Ni,j1o,xie,D1o,G1o,$ie,O1o,V1o,X1o,he,mp,kie,z1o,W1o,JN,Q1o,H1o,U1o,gp,Sie,J1o,Y1o,Rie,K1o,Z1o,e2o,hp,Pie,o2o,r2o,YN,t2o,a2o,n2o,pp,Bie,s2o,l2o,KN,i2o,d2o,c2o,_p,Iie,f2o,m2o,ZN,g2o,h2o,p2o,up,Nie,_2o,u2o,eq,b2o,v2o,F2o,bp,qie,T2o,M2o,oq,E2o,C2o,w2o,vp,jie,A2o,L2o,rq,y2o,x2o,$2o,Fp,Die,k2o,S2o,tq,R2o,P2o,B2o,Tp,Gie,I2o,N2o,aq,q2o,j2o,D2o,Mp,Oie,G2o,O2o,nq,V2o,X2o,z2o,Ep,Vie,W2o,Q2o,sq,H2o,U2o,J2o,Cp,Xie,Y2o,K2o,lq,Z2o,ebo,obo,wp,zie,rbo,tbo,iq,abo,nbo,sbo,Ap,Wie,lbo,ibo,dq,dbo,cbo,fbo,Lp,Qie,mbo,gbo,cq,hbo,pbo,_bo,yp,Hie,ubo,bbo,fq,vbo,Fbo,Tbo,xp,Mbo,$p,Ebo,kp,sL,Cbo,Uie,wbo,COe,qi,Sp,Jie,lL,Abo,Yie,Lbo,wOe,xo,iL,ybo,ji,xbo,mq,$bo,kbo,gq,Sbo,Rbo,Pbo,dL,Bbo,Kie,Ibo,Nbo,qbo,st,cL,jbo,Zie,Dbo,Gbo,Di,Obo,ede,Vbo,Xbo,hq,zbo,Wbo,Qbo,Rp,Hbo,Je,fL,Ubo,ode,Jbo,Ybo,Pa,Kbo,rde,Zbo,evo,tde,ovo,rvo,ade,tvo,avo,nvo,y,Pp,nde,svo,lvo,pq,ivo,dvo,cvo,Bp,sde,fvo,mvo,_q,gvo,hvo,pvo,Ip,lde,_vo,uvo,uq,bvo,vvo,Fvo,Np,ide,Tvo,Mvo,bq,Evo,Cvo,wvo,qp,dde,Avo,Lvo,vq,yvo,xvo,$vo,jp,cde,kvo,Svo,Fq,Rvo,Pvo,Bvo,Dp,fde,Ivo,Nvo,Tq,qvo,jvo,Dvo,Gp,mde,Gvo,Ovo,Mq,Vvo,Xvo,zvo,Op,gde,Wvo,Qvo,Eq,Hvo,Uvo,Jvo,Vp,hde,Yvo,Kvo,Cq,Zvo,e0o,o0o,Xp,pde,r0o,t0o,wq,a0o,n0o,s0o,zp,_de,l0o,i0o,Aq,d0o,c0o,f0o,Wp,ude,m0o,g0o,Lq,h0o,p0o,_0o,Qp,bde,u0o,b0o,yq,v0o,F0o,T0o,Hp,vde,M0o,E0o,xq,C0o,w0o,A0o,Up,Fde,L0o,y0o,$q,x0o,$0o,k0o,Jp,Tde,S0o,R0o,kq,P0o,B0o,I0o,Yp,Mde,N0o,q0o,Sq,j0o,D0o,G0o,Kp,Ede,O0o,V0o,Rq,X0o,z0o,W0o,Zp,Cde,Q0o,H0o,Pq,U0o,J0o,Y0o,e_,wde,K0o,Z0o,Bq,eFo,oFo,rFo,o_,Ade,tFo,aFo,Iq,nFo,sFo,lFo,r_,Lde,iFo,dFo,Nq,cFo,fFo,mFo,t_,yde,gFo,hFo,qq,pFo,_Fo,uFo,a_,xde,bFo,vFo,jq,FFo,TFo,MFo,n_,$de,EFo,CFo,Dq,wFo,AFo,LFo,s_,kde,yFo,xFo,Gq,$Fo,kFo,SFo,l_,Sde,RFo,PFo,Oq,BFo,IFo,NFo,i_,Rde,qFo,jFo,Vq,DFo,GFo,OFo,d_,Pde,VFo,XFo,Xq,zFo,WFo,QFo,c_,Bde,HFo,UFo,zq,JFo,YFo,KFo,f_,Ide,ZFo,e6o,Wq,o6o,r6o,t6o,m_,Nde,a6o,n6o,Qq,s6o,l6o,i6o,g_,qde,d6o,c6o,Hq,f6o,m6o,g6o,Xs,jde,h6o,p6o,Uq,_6o,u6o,Jq,b6o,v6o,F6o,h_,Dde,T6o,M6o,Yq,E6o,C6o,w6o,p_,Gde,A6o,L6o,Kq,y6o,x6o,$6o,__,Ode,k6o,S6o,Zq,R6o,P6o,B6o,u_,Vde,I6o,N6o,ej,q6o,j6o,D6o,b_,Xde,G6o,O6o,oj,V6o,X6o,z6o,v_,zde,W6o,Q6o,rj,H6o,U6o,J6o,F_,Wde,Y6o,K6o,tj,Z6o,eTo,oTo,T_,Qde,rTo,tTo,aj,aTo,nTo,sTo,M_,Hde,lTo,iTo,nj,dTo,cTo,fTo,E_,Ude,mTo,gTo,sj,hTo,pTo,_To,C_,Jde,uTo,bTo,lj,vTo,FTo,TTo,w_,Yde,MTo,ETo,ij,CTo,wTo,ATo,A_,Kde,LTo,yTo,dj,xTo,$To,kTo,L_,Zde,STo,RTo,cj,PTo,BTo,ITo,y_,ece,NTo,qTo,fj,jTo,DTo,GTo,x_,oce,OTo,VTo,mj,XTo,zTo,WTo,$_,rce,QTo,HTo,gj,UTo,JTo,YTo,k_,tce,KTo,ZTo,hj,e7o,o7o,r7o,S_,ace,t7o,a7o,pj,n7o,s7o,l7o,R_,nce,i7o,d7o,_j,c7o,f7o,m7o,P_,sce,g7o,h7o,uj,p7o,_7o,u7o,B_,lce,b7o,v7o,bj,F7o,T7o,M7o,I_,ice,E7o,C7o,vj,w7o,A7o,L7o,N_,dce,y7o,x7o,Fj,$7o,k7o,S7o,q_,cce,R7o,P7o,Tj,B7o,I7o,N7o,j_,fce,q7o,j7o,Mj,D7o,G7o,O7o,D_,mce,V7o,X7o,Ej,z7o,W7o,Q7o,G_,gce,H7o,U7o,Cj,J7o,Y7o,K7o,O_,hce,Z7o,e8o,wj,o8o,r8o,t8o,V_,pce,a8o,n8o,Aj,s8o,l8o,i8o,X_,_ce,d8o,c8o,Lj,f8o,m8o,g8o,z_,uce,h8o,p8o,yj,_8o,u8o,b8o,W_,bce,v8o,F8o,xj,T8o,M8o,E8o,Q_,vce,C8o,w8o,$j,A8o,L8o,y8o,H_,Fce,x8o,$8o,kj,k8o,S8o,R8o,U_,Tce,P8o,B8o,Sj,I8o,N8o,q8o,J_,Mce,j8o,D8o,Rj,G8o,O8o,V8o,Y_,Ece,X8o,z8o,Pj,W8o,Q8o,H8o,K_,Cce,U8o,J8o,Bj,Y8o,K8o,Z8o,Z_,wce,eMo,oMo,Ij,rMo,tMo,aMo,eu,Ace,nMo,sMo,Nj,lMo,iMo,dMo,ou,Lce,cMo,fMo,qj,mMo,gMo,hMo,ru,yce,pMo,_Mo,jj,uMo,bMo,vMo,tu,xce,FMo,TMo,Dj,MMo,EMo,CMo,au,$ce,wMo,AMo,Gj,LMo,yMo,xMo,nu,kce,$Mo,kMo,Oj,SMo,RMo,PMo,su,Sce,BMo,IMo,Vj,NMo,qMo,jMo,lu,Rce,DMo,GMo,Xj,OMo,VMo,XMo,iu,Pce,zMo,WMo,zj,QMo,HMo,UMo,du,Bce,JMo,YMo,Wj,KMo,ZMo,eEo,cu,Ice,oEo,rEo,Qj,tEo,aEo,nEo,fu,Nce,sEo,lEo,Hj,iEo,dEo,cEo,mu,qce,fEo,mEo,Uj,gEo,hEo,pEo,gu,jce,_Eo,uEo,Jj,bEo,vEo,FEo,hu,Dce,TEo,MEo,Yj,EEo,CEo,wEo,pu,Gce,AEo,LEo,Kj,yEo,xEo,$Eo,_u,Oce,kEo,SEo,Zj,REo,PEo,BEo,uu,Vce,IEo,NEo,eD,qEo,jEo,DEo,bu,Xce,GEo,OEo,oD,VEo,XEo,zEo,vu,zce,WEo,QEo,rD,HEo,UEo,JEo,Fu,Wce,YEo,KEo,tD,ZEo,e4o,o4o,Tu,Qce,r4o,t4o,aD,a4o,n4o,s4o,Mu,Hce,l4o,i4o,nD,d4o,c4o,f4o,Eu,Uce,m4o,g4o,sD,h4o,p4o,_4o,Cu,Jce,u4o,b4o,lD,v4o,F4o,T4o,wu,Yce,M4o,E4o,iD,C4o,w4o,A4o,Au,Kce,L4o,y4o,dD,x4o,$4o,k4o,Lu,Zce,S4o,R4o,cD,P4o,B4o,I4o,yu,efe,N4o,q4o,fD,j4o,D4o,G4o,xu,ofe,O4o,V4o,mD,X4o,z4o,W4o,$u,rfe,Q4o,H4o,gD,U4o,J4o,Y4o,ku,tfe,K4o,Z4o,hD,eCo,oCo,rCo,Su,afe,tCo,aCo,pD,nCo,sCo,lCo,Ru,iCo,nfe,dCo,cCo,sfe,fCo,mCo,Pu,AOe,Gi,Bu,lfe,mL,gCo,ife,hCo,LOe,$o,gL,pCo,Oi,_Co,_D,uCo,bCo,uD,vCo,FCo,TCo,hL,MCo,dfe,ECo,CCo,wCo,lt,pL,ACo,cfe,LCo,yCo,Vi,xCo,ffe,$Co,kCo,bD,SCo,RCo,PCo,Iu,BCo,Ye,_L,ICo,mfe,NCo,qCo,Ba,jCo,gfe,DCo,GCo,hfe,OCo,VCo,pfe,XCo,zCo,WCo,G,Nu,_fe,QCo,HCo,vD,UCo,JCo,YCo,qu,ufe,KCo,ZCo,FD,e5o,o5o,r5o,ju,bfe,t5o,a5o,TD,n5o,s5o,l5o,Du,vfe,i5o,d5o,MD,c5o,f5o,m5o,Gu,Ffe,g5o,h5o,ED,p5o,_5o,u5o,Ou,Tfe,b5o,v5o,CD,F5o,T5o,M5o,Vu,Mfe,E5o,C5o,wD,w5o,A5o,L5o,Xu,Efe,y5o,x5o,AD,$5o,k5o,S5o,zu,Cfe,R5o,P5o,LD,B5o,I5o,N5o,Wu,wfe,q5o,j5o,yD,D5o,G5o,O5o,Qu,Afe,V5o,X5o,xD,z5o,W5o,Q5o,Hu,Lfe,H5o,U5o,$D,J5o,Y5o,K5o,Uu,yfe,Z5o,e3o,kD,o3o,r3o,t3o,Ju,xfe,a3o,n3o,SD,s3o,l3o,i3o,Yu,$fe,d3o,c3o,RD,f3o,m3o,g3o,Ku,kfe,h3o,p3o,PD,_3o,u3o,b3o,Zu,Sfe,v3o,F3o,BD,T3o,M3o,E3o,e1,Rfe,C3o,w3o,ID,A3o,L3o,y3o,o1,Pfe,x3o,$3o,ND,k3o,S3o,R3o,r1,Bfe,P3o,B3o,qD,I3o,N3o,q3o,t1,Ife,j3o,D3o,jD,G3o,O3o,V3o,a1,Nfe,X3o,z3o,DD,W3o,Q3o,H3o,n1,qfe,U3o,J3o,GD,Y3o,K3o,Z3o,s1,jfe,ewo,owo,OD,rwo,two,awo,l1,Dfe,nwo,swo,VD,lwo,iwo,dwo,i1,Gfe,cwo,fwo,XD,mwo,gwo,hwo,d1,Ofe,pwo,_wo,zD,uwo,bwo,vwo,c1,Vfe,Fwo,Two,WD,Mwo,Ewo,Cwo,f1,Xfe,wwo,Awo,QD,Lwo,ywo,xwo,m1,zfe,$wo,kwo,HD,Swo,Rwo,Pwo,g1,Wfe,Bwo,Iwo,UD,Nwo,qwo,jwo,h1,Qfe,Dwo,Gwo,JD,Owo,Vwo,Xwo,p1,Hfe,zwo,Wwo,YD,Qwo,Hwo,Uwo,_1,Ufe,Jwo,Ywo,KD,Kwo,Zwo,eAo,u1,Jfe,oAo,rAo,ZD,tAo,aAo,nAo,b1,Yfe,sAo,lAo,eG,iAo,dAo,cAo,v1,Kfe,fAo,mAo,oG,gAo,hAo,pAo,F1,Zfe,_Ao,uAo,rG,bAo,vAo,FAo,T1,eme,TAo,MAo,tG,EAo,CAo,wAo,M1,ome,AAo,LAo,aG,yAo,xAo,$Ao,E1,rme,kAo,SAo,nG,RAo,PAo,BAo,C1,tme,IAo,NAo,sG,qAo,jAo,DAo,w1,ame,GAo,OAo,lG,VAo,XAo,zAo,A1,nme,WAo,QAo,iG,HAo,UAo,JAo,L1,YAo,sme,KAo,ZAo,lme,eLo,oLo,y1,yOe,Xi,x1,ime,uL,rLo,dme,tLo,xOe,ko,bL,aLo,zi,nLo,dG,sLo,lLo,cG,iLo,dLo,cLo,vL,fLo,cme,mLo,gLo,hLo,it,FL,pLo,fme,_Lo,uLo,Wi,bLo,mme,vLo,FLo,fG,TLo,MLo,ELo,$1,CLo,Ke,TL,wLo,gme,ALo,LLo,Ia,yLo,hme,xLo,$Lo,pme,kLo,SLo,_me,RLo,PLo,BLo,z,k1,ume,ILo,NLo,mG,qLo,jLo,DLo,S1,bme,GLo,OLo,gG,VLo,XLo,zLo,R1,vme,WLo,QLo,hG,HLo,ULo,JLo,P1,Fme,YLo,KLo,pG,ZLo,eyo,oyo,B1,Tme,ryo,tyo,_G,ayo,nyo,syo,I1,Mme,lyo,iyo,uG,dyo,cyo,fyo,N1,Eme,myo,gyo,bG,hyo,pyo,_yo,q1,Cme,uyo,byo,vG,vyo,Fyo,Tyo,j1,wme,Myo,Eyo,FG,Cyo,wyo,Ayo,D1,Ame,Lyo,yyo,TG,xyo,$yo,kyo,G1,Lme,Syo,Ryo,MG,Pyo,Byo,Iyo,O1,yme,Nyo,qyo,EG,jyo,Dyo,Gyo,V1,xme,Oyo,Vyo,CG,Xyo,zyo,Wyo,X1,$me,Qyo,Hyo,wG,Uyo,Jyo,Yyo,z1,kme,Kyo,Zyo,AG,e9o,o9o,r9o,W1,Sme,t9o,a9o,LG,n9o,s9o,l9o,Q1,Rme,i9o,d9o,yG,c9o,f9o,m9o,H1,Pme,g9o,h9o,xG,p9o,_9o,u9o,U1,Bme,b9o,v9o,$G,F9o,T9o,M9o,J1,Ime,E9o,C9o,kG,w9o,A9o,L9o,Y1,Nme,y9o,x9o,SG,$9o,k9o,S9o,K1,qme,R9o,P9o,RG,B9o,I9o,N9o,Z1,jme,q9o,j9o,PG,D9o,G9o,O9o,e2,Dme,V9o,X9o,BG,z9o,W9o,Q9o,o2,Gme,H9o,U9o,IG,J9o,Y9o,K9o,r2,Ome,Z9o,exo,NG,oxo,rxo,txo,t2,Vme,axo,nxo,qG,sxo,lxo,ixo,a2,Xme,dxo,cxo,jG,fxo,mxo,gxo,n2,zme,hxo,pxo,DG,_xo,uxo,bxo,s2,Wme,vxo,Fxo,GG,Txo,Mxo,Exo,l2,Qme,Cxo,wxo,OG,Axo,Lxo,yxo,i2,Hme,xxo,$xo,VG,kxo,Sxo,Rxo,d2,Ume,Pxo,Bxo,XG,Ixo,Nxo,qxo,c2,Jme,jxo,Dxo,zG,Gxo,Oxo,Vxo,f2,Yme,Xxo,zxo,WG,Wxo,Qxo,Hxo,m2,Kme,Uxo,Jxo,QG,Yxo,Kxo,Zxo,g2,Zme,e$o,o$o,HG,r$o,t$o,a$o,h2,ege,n$o,s$o,UG,l$o,i$o,d$o,p2,oge,c$o,f$o,JG,m$o,g$o,h$o,_2,p$o,rge,_$o,u$o,tge,b$o,v$o,u2,$Oe,Qi,b2,age,ML,F$o,nge,T$o,kOe,So,EL,M$o,Hi,E$o,YG,C$o,w$o,KG,A$o,L$o,y$o,CL,x$o,sge,$$o,k$o,S$o,dt,wL,R$o,lge,P$o,B$o,Ui,I$o,ige,N$o,q$o,ZG,j$o,D$o,G$o,v2,O$o,Ze,AL,V$o,dge,X$o,z$o,Na,W$o,cge,Q$o,H$o,fge,U$o,J$o,mge,Y$o,K$o,Z$o,Q,F2,gge,eko,oko,eO,rko,tko,ako,T2,hge,nko,sko,oO,lko,iko,dko,M2,pge,cko,fko,rO,mko,gko,hko,E2,_ge,pko,_ko,tO,uko,bko,vko,C2,uge,Fko,Tko,aO,Mko,Eko,Cko,w2,bge,wko,Ako,nO,Lko,yko,xko,A2,vge,$ko,kko,sO,Sko,Rko,Pko,L2,Fge,Bko,Iko,lO,Nko,qko,jko,y2,Tge,Dko,Gko,iO,Oko,Vko,Xko,x2,Mge,zko,Wko,dO,Qko,Hko,Uko,$2,Ege,Jko,Yko,cO,Kko,Zko,eSo,k2,Cge,oSo,rSo,fO,tSo,aSo,nSo,S2,wge,sSo,lSo,mO,iSo,dSo,cSo,R2,Age,fSo,mSo,gO,gSo,hSo,pSo,P2,Lge,_So,uSo,hO,bSo,vSo,FSo,B2,yge,TSo,MSo,pO,ESo,CSo,wSo,I2,xge,ASo,LSo,_O,ySo,xSo,$So,N2,$ge,kSo,SSo,uO,RSo,PSo,BSo,q2,kge,ISo,NSo,bO,qSo,jSo,DSo,j2,Sge,GSo,OSo,vO,VSo,XSo,zSo,D2,Rge,WSo,QSo,FO,HSo,USo,JSo,G2,Pge,YSo,KSo,TO,ZSo,eRo,oRo,O2,Bge,rRo,tRo,MO,aRo,nRo,sRo,V2,Ige,lRo,iRo,EO,dRo,cRo,fRo,X2,Nge,mRo,gRo,CO,hRo,pRo,_Ro,z2,qge,uRo,bRo,wO,vRo,FRo,TRo,W2,jge,MRo,ERo,AO,CRo,wRo,ARo,Q2,Dge,LRo,yRo,LO,xRo,$Ro,kRo,H2,Gge,SRo,RRo,yO,PRo,BRo,IRo,U2,Oge,NRo,qRo,xO,jRo,DRo,GRo,J2,Vge,ORo,VRo,$O,XRo,zRo,WRo,Y2,Xge,QRo,HRo,kO,URo,JRo,YRo,K2,zge,KRo,ZRo,Wge,ePo,oPo,rPo,Z2,Qge,tPo,aPo,SO,nPo,sPo,lPo,eb,Hge,iPo,dPo,RO,cPo,fPo,mPo,ob,Uge,gPo,hPo,PO,pPo,_Po,uPo,rb,Jge,bPo,vPo,BO,FPo,TPo,MPo,tb,EPo,Yge,CPo,wPo,Kge,APo,LPo,ab,SOe,Ji,nb,Zge,LL,yPo,ehe,xPo,ROe,Ro,yL,$Po,Yi,kPo,IO,SPo,RPo,NO,PPo,BPo,IPo,xL,NPo,ohe,qPo,jPo,DPo,ct,$L,GPo,rhe,OPo,VPo,Ki,XPo,the,zPo,WPo,qO,QPo,HPo,UPo,sb,JPo,eo,kL,YPo,ahe,KPo,ZPo,qa,eBo,nhe,oBo,rBo,she,tBo,aBo,lhe,nBo,sBo,lBo,pe,lb,ihe,iBo,dBo,jO,cBo,fBo,mBo,ib,dhe,gBo,hBo,DO,pBo,_Bo,uBo,db,che,bBo,vBo,GO,FBo,TBo,MBo,cb,fhe,EBo,CBo,OO,wBo,ABo,LBo,fb,mhe,yBo,xBo,VO,$Bo,kBo,SBo,mb,ghe,RBo,PBo,XO,BBo,IBo,NBo,gb,hhe,qBo,jBo,zO,DBo,GBo,OBo,hb,phe,VBo,XBo,WO,zBo,WBo,QBo,pb,_he,HBo,UBo,QO,JBo,YBo,KBo,_b,uhe,ZBo,eIo,HO,oIo,rIo,tIo,ub,bhe,aIo,nIo,UO,sIo,lIo,iIo,bb,vhe,dIo,cIo,JO,fIo,mIo,gIo,vb,Fhe,hIo,pIo,YO,_Io,uIo,bIo,Fb,The,vIo,FIo,KO,TIo,MIo,EIo,Tb,Mhe,CIo,wIo,ZO,AIo,LIo,yIo,Mb,Ehe,xIo,$Io,eV,kIo,SIo,RIo,Eb,Che,PIo,BIo,oV,IIo,NIo,qIo,Cb,jIo,whe,DIo,GIo,Ahe,OIo,VIo,wb,POe,Zi,Ab,Lhe,SL,XIo,yhe,zIo,BOe,Po,RL,WIo,ed,QIo,rV,HIo,UIo,tV,JIo,YIo,KIo,PL,ZIo,xhe,eNo,oNo,rNo,ft,BL,tNo,$he,aNo,nNo,od,sNo,khe,lNo,iNo,aV,dNo,cNo,fNo,Lb,mNo,oo,IL,gNo,She,hNo,pNo,ja,_No,Rhe,uNo,bNo,Phe,vNo,FNo,Bhe,TNo,MNo,ENo,N,yb,Ihe,CNo,wNo,nV,ANo,LNo,yNo,xb,Nhe,xNo,$No,sV,kNo,SNo,RNo,$b,qhe,PNo,BNo,lV,INo,NNo,qNo,kb,jhe,jNo,DNo,iV,GNo,ONo,VNo,Sb,Dhe,XNo,zNo,dV,WNo,QNo,HNo,Rb,Ghe,UNo,JNo,cV,YNo,KNo,ZNo,Pb,Ohe,eqo,oqo,fV,rqo,tqo,aqo,Bb,Vhe,nqo,sqo,mV,lqo,iqo,dqo,Ib,Xhe,cqo,fqo,gV,mqo,gqo,hqo,Nb,zhe,pqo,_qo,hV,uqo,bqo,vqo,qb,Whe,Fqo,Tqo,pV,Mqo,Eqo,Cqo,jb,Qhe,wqo,Aqo,_V,Lqo,yqo,xqo,Db,Hhe,$qo,kqo,uV,Sqo,Rqo,Pqo,Gb,Uhe,Bqo,Iqo,bV,Nqo,qqo,jqo,Ob,Jhe,Dqo,Gqo,vV,Oqo,Vqo,Xqo,Vb,Yhe,zqo,Wqo,FV,Qqo,Hqo,Uqo,Xb,Khe,Jqo,Yqo,TV,Kqo,Zqo,ejo,zb,Zhe,ojo,rjo,MV,tjo,ajo,njo,Wb,epe,sjo,ljo,EV,ijo,djo,cjo,Qb,ope,fjo,mjo,CV,gjo,hjo,pjo,Hb,rpe,_jo,ujo,wV,bjo,vjo,Fjo,Ub,tpe,Tjo,Mjo,AV,Ejo,Cjo,wjo,Jb,ape,Ajo,Ljo,LV,yjo,xjo,$jo,Yb,npe,kjo,Sjo,yV,Rjo,Pjo,Bjo,Kb,spe,Ijo,Njo,xV,qjo,jjo,Djo,Zb,lpe,Gjo,Ojo,$V,Vjo,Xjo,zjo,ev,ipe,Wjo,Qjo,kV,Hjo,Ujo,Jjo,ov,dpe,Yjo,Kjo,SV,Zjo,eDo,oDo,rv,cpe,rDo,tDo,RV,aDo,nDo,sDo,tv,fpe,lDo,iDo,PV,dDo,cDo,fDo,av,mpe,mDo,gDo,BV,hDo,pDo,_Do,nv,gpe,uDo,bDo,IV,vDo,FDo,TDo,sv,hpe,MDo,EDo,NV,CDo,wDo,ADo,lv,ppe,LDo,yDo,qV,xDo,$Do,kDo,iv,_pe,SDo,RDo,jV,PDo,BDo,IDo,dv,upe,NDo,qDo,DV,jDo,DDo,GDo,cv,bpe,ODo,VDo,GV,XDo,zDo,WDo,fv,vpe,QDo,HDo,OV,UDo,JDo,YDo,mv,Fpe,KDo,ZDo,VV,eGo,oGo,rGo,gv,Tpe,tGo,aGo,XV,nGo,sGo,lGo,hv,Mpe,iGo,dGo,zV,cGo,fGo,mGo,pv,Epe,gGo,hGo,WV,pGo,_Go,uGo,_v,Cpe,bGo,vGo,QV,FGo,TGo,MGo,uv,wpe,EGo,CGo,HV,wGo,AGo,LGo,bv,Ape,yGo,xGo,UV,$Go,kGo,SGo,vv,Lpe,RGo,PGo,JV,BGo,IGo,NGo,Fv,ype,qGo,jGo,YV,DGo,GGo,OGo,Tv,xpe,VGo,XGo,KV,zGo,WGo,QGo,Mv,$pe,HGo,UGo,ZV,JGo,YGo,KGo,Ev,ZGo,kpe,eOo,oOo,Spe,rOo,tOo,Cv,IOe,rd,wv,Rpe,NL,aOo,Ppe,nOo,NOe,Bo,qL,sOo,td,lOo,eX,iOo,dOo,oX,cOo,fOo,mOo,jL,gOo,Bpe,hOo,pOo,_Oo,mt,DL,uOo,Ipe,bOo,vOo,ad,FOo,Npe,TOo,MOo,rX,EOo,COo,wOo,Av,AOo,ro,GL,LOo,qpe,yOo,xOo,Da,$Oo,jpe,kOo,SOo,Dpe,ROo,POo,Gpe,BOo,IOo,NOo,Z,Lv,Ope,qOo,jOo,tX,DOo,GOo,OOo,yv,Vpe,VOo,XOo,aX,zOo,WOo,QOo,xv,Xpe,HOo,UOo,nX,JOo,YOo,KOo,$v,zpe,ZOo,eVo,sX,oVo,rVo,tVo,kv,Wpe,aVo,nVo,lX,sVo,lVo,iVo,Sv,Qpe,dVo,cVo,iX,fVo,mVo,gVo,Rv,Hpe,hVo,pVo,dX,_Vo,uVo,bVo,Pv,Upe,vVo,FVo,cX,TVo,MVo,EVo,Bv,Jpe,CVo,wVo,fX,AVo,LVo,yVo,Iv,Ype,xVo,$Vo,mX,kVo,SVo,RVo,Nv,Kpe,PVo,BVo,gX,IVo,NVo,qVo,qv,Zpe,jVo,DVo,hX,GVo,OVo,VVo,jv,e_e,XVo,zVo,pX,WVo,QVo,HVo,Dv,o_e,UVo,JVo,_X,YVo,KVo,ZVo,Gv,r_e,eXo,oXo,uX,rXo,tXo,aXo,Ov,t_e,nXo,sXo,bX,lXo,iXo,dXo,Vv,a_e,cXo,fXo,vX,mXo,gXo,hXo,Xv,n_e,pXo,_Xo,FX,uXo,bXo,vXo,zv,s_e,FXo,TXo,TX,MXo,EXo,CXo,Wv,l_e,wXo,AXo,MX,LXo,yXo,xXo,Qv,i_e,$Xo,kXo,EX,SXo,RXo,PXo,Hv,d_e,BXo,IXo,CX,NXo,qXo,jXo,Uv,c_e,DXo,GXo,wX,OXo,VXo,XXo,Jv,f_e,zXo,WXo,AX,QXo,HXo,UXo,Yv,m_e,JXo,YXo,LX,KXo,ZXo,ezo,Kv,g_e,ozo,rzo,yX,tzo,azo,nzo,Zv,h_e,szo,lzo,xX,izo,dzo,czo,e0,p_e,fzo,mzo,$X,gzo,hzo,pzo,o0,__e,_zo,uzo,kX,bzo,vzo,Fzo,r0,u_e,Tzo,Mzo,SX,Ezo,Czo,wzo,t0,Azo,b_e,Lzo,yzo,v_e,xzo,$zo,a0,qOe,nd,n0,F_e,OL,kzo,T_e,Szo,jOe,Io,VL,Rzo,sd,Pzo,RX,Bzo,Izo,PX,Nzo,qzo,jzo,XL,Dzo,M_e,Gzo,Ozo,Vzo,gt,zL,Xzo,E_e,zzo,Wzo,ld,Qzo,C_e,Hzo,Uzo,BX,Jzo,Yzo,Kzo,s0,Zzo,to,WL,eWo,w_e,oWo,rWo,Ga,tWo,A_e,aWo,nWo,L_e,sWo,lWo,y_e,iWo,dWo,cWo,No,l0,x_e,fWo,mWo,IX,gWo,hWo,pWo,i0,$_e,_Wo,uWo,NX,bWo,vWo,FWo,d0,k_e,TWo,MWo,qX,EWo,CWo,wWo,c0,S_e,AWo,LWo,jX,yWo,xWo,$Wo,f0,R_e,kWo,SWo,DX,RWo,PWo,BWo,m0,P_e,IWo,NWo,GX,qWo,jWo,DWo,g0,GWo,B_e,OWo,VWo,I_e,XWo,zWo,h0,DOe,id,p0,N_e,QL,WWo,q_e,QWo,GOe,qo,HL,HWo,dd,UWo,OX,JWo,YWo,VX,KWo,ZWo,eQo,UL,oQo,j_e,rQo,tQo,aQo,ht,JL,nQo,D_e,sQo,lQo,cd,iQo,G_e,dQo,cQo,XX,fQo,mQo,gQo,_0,hQo,ao,YL,pQo,O_e,_Qo,uQo,Oa,bQo,V_e,vQo,FQo,X_e,TQo,MQo,z_e,EQo,CQo,wQo,H,u0,W_e,AQo,LQo,zX,yQo,xQo,$Qo,b0,Q_e,kQo,SQo,WX,RQo,PQo,BQo,v0,H_e,IQo,NQo,QX,qQo,jQo,DQo,F0,U_e,GQo,OQo,HX,VQo,XQo,zQo,T0,J_e,WQo,QQo,UX,HQo,UQo,JQo,M0,Y_e,YQo,KQo,JX,ZQo,eHo,oHo,E0,K_e,rHo,tHo,YX,aHo,nHo,sHo,C0,Z_e,lHo,iHo,KX,dHo,cHo,fHo,w0,eue,mHo,gHo,ZX,hHo,pHo,_Ho,A0,oue,uHo,bHo,ez,vHo,FHo,THo,L0,rue,MHo,EHo,oz,CHo,wHo,AHo,y0,tue,LHo,yHo,rz,xHo,$Ho,kHo,x0,aue,SHo,RHo,tz,PHo,BHo,IHo,$0,nue,NHo,qHo,az,jHo,DHo,GHo,k0,sue,OHo,VHo,nz,XHo,zHo,WHo,S0,lue,QHo,HHo,sz,UHo,JHo,YHo,R0,iue,KHo,ZHo,lz,eUo,oUo,rUo,P0,due,tUo,aUo,iz,nUo,sUo,lUo,B0,cue,iUo,dUo,dz,cUo,fUo,mUo,I0,fue,gUo,hUo,cz,pUo,_Uo,uUo,N0,mue,bUo,vUo,fz,FUo,TUo,MUo,q0,gue,EUo,CUo,mz,wUo,AUo,LUo,j0,hue,yUo,xUo,gz,$Uo,kUo,SUo,D0,pue,RUo,PUo,hz,BUo,IUo,NUo,G0,_ue,qUo,jUo,pz,DUo,GUo,OUo,O0,uue,VUo,XUo,_z,zUo,WUo,QUo,V0,bue,HUo,UUo,uz,JUo,YUo,KUo,X0,vue,ZUo,eJo,bz,oJo,rJo,tJo,z0,Fue,aJo,nJo,vz,sJo,lJo,iJo,W0,Tue,dJo,cJo,Fz,fJo,mJo,gJo,Q0,Mue,hJo,pJo,Tz,_Jo,uJo,bJo,H0,Eue,vJo,FJo,Mz,TJo,MJo,EJo,U0,Cue,CJo,wJo,Ez,AJo,LJo,yJo,J0,wue,xJo,$Jo,Cz,kJo,SJo,RJo,Y0,Aue,PJo,BJo,wz,IJo,NJo,qJo,K0,Lue,jJo,DJo,Az,GJo,OJo,VJo,Z0,XJo,yue,zJo,WJo,xue,QJo,HJo,eF,OOe,fd,oF,$ue,KL,UJo,kue,JJo,VOe,jo,ZL,YJo,md,KJo,Lz,ZJo,eYo,yz,oYo,rYo,tYo,ey,aYo,Sue,nYo,sYo,lYo,pt,oy,iYo,Rue,dYo,cYo,gd,fYo,Pue,mYo,gYo,xz,hYo,pYo,_Yo,rF,uYo,no,ry,bYo,Bue,vYo,FYo,Va,TYo,Iue,MYo,EYo,Nue,CYo,wYo,que,AYo,LYo,yYo,V,tF,jue,xYo,$Yo,$z,kYo,SYo,RYo,aF,Due,PYo,BYo,kz,IYo,NYo,qYo,nF,Gue,jYo,DYo,Sz,GYo,OYo,VYo,sF,Oue,XYo,zYo,Rz,WYo,QYo,HYo,lF,Vue,UYo,JYo,Pz,YYo,KYo,ZYo,iF,Xue,eKo,oKo,Bz,rKo,tKo,aKo,dF,zue,nKo,sKo,Iz,lKo,iKo,dKo,cF,Wue,cKo,fKo,Nz,mKo,gKo,hKo,fF,Que,pKo,_Ko,qz,uKo,bKo,vKo,mF,Hue,FKo,TKo,jz,MKo,EKo,CKo,gF,Uue,wKo,AKo,Dz,LKo,yKo,xKo,hF,Jue,$Ko,kKo,Gz,SKo,RKo,PKo,pF,Yue,BKo,IKo,Oz,NKo,qKo,jKo,_F,Kue,DKo,GKo,Vz,OKo,VKo,XKo,uF,Zue,zKo,WKo,Xz,QKo,HKo,UKo,bF,e1e,JKo,YKo,zz,KKo,ZKo,eZo,vF,o1e,oZo,rZo,Wz,tZo,aZo,nZo,FF,r1e,sZo,lZo,Qz,iZo,dZo,cZo,TF,t1e,fZo,mZo,Hz,gZo,hZo,pZo,MF,a1e,_Zo,uZo,Uz,bZo,vZo,FZo,EF,n1e,TZo,MZo,Jz,EZo,CZo,wZo,CF,s1e,AZo,LZo,Yz,yZo,xZo,$Zo,wF,l1e,kZo,SZo,Kz,RZo,PZo,BZo,AF,i1e,IZo,NZo,Zz,qZo,jZo,DZo,LF,d1e,GZo,OZo,eW,VZo,XZo,zZo,yF,c1e,WZo,QZo,oW,HZo,UZo,JZo,xF,f1e,YZo,KZo,rW,ZZo,eer,oer,$F,m1e,rer,ter,tW,aer,ner,ser,kF,g1e,ler,ier,aW,der,cer,fer,SF,h1e,mer,ger,nW,her,per,_er,RF,p1e,uer,ber,sW,ver,Fer,Ter,PF,_1e,Mer,Eer,lW,Cer,wer,Aer,BF,u1e,Ler,yer,iW,xer,$er,ker,IF,b1e,Ser,Rer,dW,Per,Ber,Ier,NF,v1e,Ner,qer,cW,jer,Der,Ger,qF,F1e,Oer,Ver,fW,Xer,zer,Wer,jF,T1e,Qer,Her,mW,Uer,Jer,Yer,DF,M1e,Ker,Zer,gW,eor,oor,ror,GF,E1e,tor,aor,hW,nor,sor,lor,OF,C1e,ior,dor,pW,cor,mor,gor,VF,w1e,hor,por,_W,_or,uor,bor,XF,vor,A1e,For,Tor,L1e,Mor,Eor,zF,XOe,hd,WF,y1e,ty,Cor,x1e,wor,zOe,Do,ay,Aor,pd,Lor,uW,yor,xor,bW,$or,kor,Sor,ny,Ror,$1e,Por,Bor,Ior,_t,sy,Nor,k1e,qor,jor,_d,Dor,S1e,Gor,Oor,vW,Vor,Xor,zor,QF,Wor,so,ly,Qor,R1e,Hor,Uor,Xa,Jor,P1e,Yor,Kor,B1e,Zor,err,I1e,orr,rrr,trr,N1e,HF,q1e,arr,nrr,FW,srr,lrr,irr,UF,drr,j1e,crr,frr,D1e,mrr,grr,JF,WOe,ud,YF,G1e,iy,hrr,O1e,prr,QOe,Go,dy,_rr,bd,urr,TW,brr,vrr,MW,Frr,Trr,Mrr,cy,Err,V1e,Crr,wrr,Arr,ut,fy,Lrr,X1e,yrr,xrr,vd,$rr,z1e,krr,Srr,EW,Rrr,Prr,Brr,KF,Irr,lo,my,Nrr,W1e,qrr,jrr,za,Drr,Q1e,Grr,Orr,H1e,Vrr,Xrr,U1e,zrr,Wrr,Qrr,Fe,ZF,J1e,Hrr,Urr,CW,Jrr,Yrr,Krr,e6,Y1e,Zrr,etr,wW,otr,rtr,ttr,o6,K1e,atr,ntr,AW,str,ltr,itr,r6,Z1e,dtr,ctr,LW,ftr,mtr,gtr,zs,e2e,htr,ptr,yW,_tr,utr,xW,btr,vtr,Ftr,t6,o2e,Ttr,Mtr,$W,Etr,Ctr,wtr,Ws,r2e,Atr,Ltr,kW,ytr,xtr,SW,$tr,ktr,Str,bt,t2e,Rtr,Ptr,RW,Btr,Itr,PW,Ntr,qtr,BW,jtr,Dtr,Gtr,a6,a2e,Otr,Vtr,IW,Xtr,ztr,Wtr,n6,n2e,Qtr,Htr,NW,Utr,Jtr,Ytr,s6,s2e,Ktr,Ztr,qW,ear,oar,rar,l6,l2e,tar,aar,jW,nar,sar,lar,i6,i2e,iar,dar,DW,car,far,mar,d6,d2e,gar,har,GW,par,_ar,uar,c6,c2e,bar,Far,OW,Tar,Mar,Ear,f6,Car,f2e,war,Aar,m2e,Lar,yar,m6,HOe,Fd,g6,g2e,gy,xar,h2e,$ar,UOe,Oo,hy,kar,Td,Sar,VW,Rar,Par,XW,Bar,Iar,Nar,py,qar,p2e,jar,Dar,Gar,vt,_y,Oar,_2e,Var,Xar,Md,zar,u2e,War,Qar,zW,Har,Uar,Jar,h6,Yar,io,uy,Kar,b2e,Zar,enr,Wa,onr,v2e,rnr,tnr,F2e,anr,nnr,T2e,snr,lnr,inr,M2e,p6,E2e,dnr,cnr,WW,fnr,mnr,gnr,_6,hnr,C2e,pnr,_nr,w2e,unr,bnr,u6,JOe,Ed,b6,A2e,by,vnr,L2e,Fnr,YOe,Vo,vy,Tnr,Cd,Mnr,QW,Enr,Cnr,HW,wnr,Anr,Lnr,Fy,ynr,y2e,xnr,$nr,knr,Ft,Ty,Snr,x2e,Rnr,Pnr,wd,Bnr,$2e,Inr,Nnr,UW,qnr,jnr,Dnr,v6,Gnr,co,My,Onr,k2e,Vnr,Xnr,Qa,znr,S2e,Wnr,Qnr,R2e,Hnr,Unr,P2e,Jnr,Ynr,Knr,B2e,F6,I2e,Znr,esr,JW,osr,rsr,tsr,T6,asr,N2e,nsr,ssr,q2e,lsr,isr,M6,KOe,Ad,E6,j2e,Ey,dsr,D2e,csr,ZOe,Xo,Cy,fsr,Ld,msr,YW,gsr,hsr,KW,psr,_sr,usr,wy,bsr,G2e,vsr,Fsr,Tsr,Tt,Ay,Msr,O2e,Esr,Csr,yd,wsr,V2e,Asr,Lsr,ZW,ysr,xsr,$sr,C6,ksr,fo,Ly,Ssr,X2e,Rsr,Psr,Ha,Bsr,z2e,Isr,Nsr,W2e,qsr,jsr,Q2e,Dsr,Gsr,Osr,Pe,w6,H2e,Vsr,Xsr,eQ,zsr,Wsr,Qsr,A6,U2e,Hsr,Usr,oQ,Jsr,Ysr,Ksr,L6,J2e,Zsr,elr,rQ,olr,rlr,tlr,y6,Y2e,alr,nlr,tQ,slr,llr,ilr,x6,K2e,dlr,clr,aQ,flr,mlr,glr,$6,Z2e,hlr,plr,nQ,_lr,ulr,blr,k6,ebe,vlr,Flr,sQ,Tlr,Mlr,Elr,S6,obe,Clr,wlr,lQ,Alr,Llr,ylr,R6,rbe,xlr,$lr,iQ,klr,Slr,Rlr,P6,Plr,tbe,Blr,Ilr,abe,Nlr,qlr,B6,eVe,xd,I6,nbe,yy,jlr,sbe,Dlr,oVe,zo,xy,Glr,$d,Olr,dQ,Vlr,Xlr,cQ,zlr,Wlr,Qlr,$y,Hlr,lbe,Ulr,Jlr,Ylr,Mt,ky,Klr,ibe,Zlr,eir,kd,oir,dbe,rir,tir,fQ,air,nir,sir,N6,lir,mo,Sy,iir,cbe,dir,cir,Ua,fir,fbe,mir,gir,mbe,hir,pir,gbe,_ir,uir,bir,et,q6,hbe,vir,Fir,mQ,Tir,Mir,Eir,j6,pbe,Cir,wir,gQ,Air,Lir,yir,D6,_be,xir,$ir,hQ,kir,Sir,Rir,G6,ube,Pir,Bir,pQ,Iir,Nir,qir,O6,bbe,jir,Dir,_Q,Gir,Oir,Vir,V6,Xir,vbe,zir,Wir,Fbe,Qir,Hir,X6,rVe,Sd,z6,Tbe,Ry,Uir,Mbe,Jir,tVe,Wo,Py,Yir,Rd,Kir,uQ,Zir,edr,bQ,odr,rdr,tdr,By,adr,Ebe,ndr,sdr,ldr,Et,Iy,idr,Cbe,ddr,cdr,Pd,fdr,wbe,mdr,gdr,vQ,hdr,pdr,_dr,W6,udr,go,Ny,bdr,Abe,vdr,Fdr,Ja,Tdr,Lbe,Mdr,Edr,ybe,Cdr,wdr,xbe,Adr,Ldr,ydr,Le,Q6,$be,xdr,$dr,FQ,kdr,Sdr,Rdr,H6,kbe,Pdr,Bdr,TQ,Idr,Ndr,qdr,U6,Sbe,jdr,Ddr,MQ,Gdr,Odr,Vdr,J6,Rbe,Xdr,zdr,EQ,Wdr,Qdr,Hdr,Y6,Pbe,Udr,Jdr,CQ,Ydr,Kdr,Zdr,K6,Bbe,ecr,ocr,wQ,rcr,tcr,acr,Z6,Ibe,ncr,scr,AQ,lcr,icr,dcr,eT,Nbe,ccr,fcr,LQ,mcr,gcr,hcr,oT,qbe,pcr,_cr,yQ,ucr,bcr,vcr,rT,jbe,Fcr,Tcr,xQ,Mcr,Ecr,Ccr,tT,wcr,Dbe,Acr,Lcr,Gbe,ycr,xcr,aT,aVe,Bd,nT,Obe,qy,$cr,Vbe,kcr,nVe,Qo,jy,Scr,Id,Rcr,$Q,Pcr,Bcr,kQ,Icr,Ncr,qcr,Dy,jcr,Xbe,Dcr,Gcr,Ocr,Ct,Gy,Vcr,zbe,Xcr,zcr,Nd,Wcr,Wbe,Qcr,Hcr,SQ,Ucr,Jcr,Ycr,sT,Kcr,ho,Oy,Zcr,Qbe,efr,ofr,Ya,rfr,Hbe,tfr,afr,Ube,nfr,sfr,Jbe,lfr,ifr,dfr,Vy,lT,Ybe,cfr,ffr,RQ,mfr,gfr,hfr,iT,Kbe,pfr,_fr,PQ,ufr,bfr,vfr,dT,Ffr,Zbe,Tfr,Mfr,eve,Efr,Cfr,cT,sVe,qd,fT,ove,Xy,wfr,rve,Afr,lVe,Ho,zy,Lfr,jd,yfr,BQ,xfr,$fr,IQ,kfr,Sfr,Rfr,Wy,Pfr,tve,Bfr,Ifr,Nfr,wt,Qy,qfr,ave,jfr,Dfr,Dd,Gfr,nve,Ofr,Vfr,NQ,Xfr,zfr,Wfr,mT,Qfr,po,Hy,Hfr,sve,Ufr,Jfr,Ka,Yfr,lve,Kfr,Zfr,ive,emr,omr,dve,rmr,tmr,amr,ot,gT,cve,nmr,smr,qQ,lmr,imr,dmr,hT,fve,cmr,fmr,jQ,mmr,gmr,hmr,pT,mve,pmr,_mr,DQ,umr,bmr,vmr,_T,gve,Fmr,Tmr,GQ,Mmr,Emr,Cmr,uT,hve,wmr,Amr,OQ,Lmr,ymr,xmr,bT,$mr,pve,kmr,Smr,_ve,Rmr,Pmr,vT,iVe,Gd,FT,uve,Uy,Bmr,bve,Imr,dVe,Uo,Jy,Nmr,Od,qmr,VQ,jmr,Dmr,XQ,Gmr,Omr,Vmr,Yy,Xmr,vve,zmr,Wmr,Qmr,At,Ky,Hmr,Fve,Umr,Jmr,Vd,Ymr,Tve,Kmr,Zmr,zQ,egr,ogr,rgr,TT,tgr,_o,Zy,agr,Mve,ngr,sgr,Za,lgr,Eve,igr,dgr,Cve,cgr,fgr,wve,mgr,ggr,hgr,Xd,MT,Ave,pgr,_gr,WQ,ugr,bgr,vgr,ET,Lve,Fgr,Tgr,QQ,Mgr,Egr,Cgr,CT,yve,wgr,Agr,HQ,Lgr,ygr,xgr,wT,$gr,xve,kgr,Sgr,$ve,Rgr,Pgr,AT,cVe,zd,LT,kve,e9,Bgr,Sve,Igr,fVe,Jo,o9,Ngr,Wd,qgr,UQ,jgr,Dgr,JQ,Ggr,Ogr,Vgr,r9,Xgr,Rve,zgr,Wgr,Qgr,Lt,t9,Hgr,Pve,Ugr,Jgr,Qd,Ygr,Bve,Kgr,Zgr,YQ,ehr,ohr,rhr,yT,thr,uo,a9,ahr,Ive,nhr,shr,en,lhr,Nve,ihr,dhr,qve,chr,fhr,jve,mhr,ghr,hhr,n9,xT,Dve,phr,_hr,KQ,uhr,bhr,vhr,$T,Gve,Fhr,Thr,ZQ,Mhr,Ehr,Chr,kT,whr,Ove,Ahr,Lhr,Vve,yhr,xhr,ST,mVe,Hd,RT,Xve,s9,$hr,zve,khr,gVe,Yo,l9,Shr,Ud,Rhr,eH,Phr,Bhr,oH,Ihr,Nhr,qhr,i9,jhr,Wve,Dhr,Ghr,Ohr,yt,d9,Vhr,Qve,Xhr,zhr,Jd,Whr,Hve,Qhr,Hhr,rH,Uhr,Jhr,Yhr,PT,Khr,bo,c9,Zhr,Uve,epr,opr,on,rpr,Jve,tpr,apr,Yve,npr,spr,Kve,lpr,ipr,dpr,Zve,BT,e0e,cpr,fpr,tH,mpr,gpr,hpr,IT,ppr,o0e,_pr,upr,r0e,bpr,vpr,NT,hVe,Yd,qT,t0e,f9,Fpr,a0e,Tpr,pVe,Ko,m9,Mpr,Kd,Epr,aH,Cpr,wpr,nH,Apr,Lpr,ypr,g9,xpr,n0e,$pr,kpr,Spr,xt,h9,Rpr,s0e,Ppr,Bpr,Zd,Ipr,l0e,Npr,qpr,sH,jpr,Dpr,Gpr,jT,Opr,vo,p9,Vpr,i0e,Xpr,zpr,rn,Wpr,d0e,Qpr,Hpr,c0e,Upr,Jpr,f0e,Ypr,Kpr,Zpr,tn,DT,m0e,e_r,o_r,lH,r_r,t_r,a_r,GT,g0e,n_r,s_r,iH,l_r,i_r,d_r,OT,h0e,c_r,f_r,dH,m_r,g_r,h_r,VT,p0e,p_r,__r,cH,u_r,b_r,v_r,XT,F_r,_0e,T_r,M_r,u0e,E_r,C_r,zT,_Ve,ec,WT,b0e,_9,w_r,v0e,A_r,uVe,Zo,u9,L_r,oc,y_r,fH,x_r,$_r,mH,k_r,S_r,R_r,b9,P_r,F0e,B_r,I_r,N_r,$t,v9,q_r,T0e,j_r,D_r,rc,G_r,M0e,O_r,V_r,gH,X_r,z_r,W_r,QT,Q_r,Fo,F9,H_r,E0e,U_r,J_r,an,Y_r,C0e,K_r,Z_r,w0e,eur,our,A0e,rur,tur,aur,L0e,HT,y0e,nur,sur,hH,lur,iur,dur,UT,cur,x0e,fur,mur,$0e,gur,hur,JT,bVe,tc,YT,k0e,T9,pur,S0e,_ur,vVe,er,M9,uur,ac,bur,pH,vur,Fur,_H,Tur,Mur,Eur,E9,Cur,R0e,wur,Aur,Lur,kt,C9,yur,P0e,xur,$ur,nc,kur,B0e,Sur,Rur,uH,Pur,Bur,Iur,KT,Nur,yr,w9,qur,I0e,jur,Dur,nn,Gur,N0e,Our,Vur,q0e,Xur,zur,j0e,Wur,Qur,Hur,q,ZT,D0e,Uur,Jur,bH,Yur,Kur,Zur,e7,G0e,e1r,o1r,vH,r1r,t1r,a1r,o7,O0e,n1r,s1r,FH,l1r,i1r,d1r,r7,V0e,c1r,f1r,TH,m1r,g1r,h1r,t7,X0e,p1r,_1r,MH,u1r,b1r,v1r,a7,z0e,F1r,T1r,EH,M1r,E1r,C1r,n7,W0e,w1r,A1r,CH,L1r,y1r,x1r,s7,Q0e,$1r,k1r,wH,S1r,R1r,P1r,l7,H0e,B1r,I1r,AH,N1r,q1r,j1r,i7,U0e,D1r,G1r,LH,O1r,V1r,X1r,d7,J0e,z1r,W1r,yH,Q1r,H1r,U1r,c7,Y0e,J1r,Y1r,xH,K1r,Z1r,e2r,f7,K0e,o2r,r2r,$H,t2r,a2r,n2r,m7,Z0e,s2r,l2r,kH,i2r,d2r,c2r,g7,eFe,f2r,m2r,SH,g2r,h2r,p2r,h7,oFe,_2r,u2r,RH,b2r,v2r,F2r,p7,rFe,T2r,M2r,PH,E2r,C2r,w2r,_7,tFe,A2r,L2r,BH,y2r,x2r,$2r,Qs,aFe,k2r,S2r,IH,R2r,P2r,NH,B2r,I2r,N2r,u7,nFe,q2r,j2r,qH,D2r,G2r,O2r,b7,sFe,V2r,X2r,jH,z2r,W2r,Q2r,v7,lFe,H2r,U2r,DH,J2r,Y2r,K2r,F7,iFe,Z2r,ebr,GH,obr,rbr,tbr,T7,dFe,abr,nbr,OH,sbr,lbr,ibr,M7,cFe,dbr,cbr,VH,fbr,mbr,gbr,E7,fFe,hbr,pbr,XH,_br,ubr,bbr,C7,mFe,vbr,Fbr,zH,Tbr,Mbr,Ebr,w7,gFe,Cbr,wbr,WH,Abr,Lbr,ybr,A7,hFe,xbr,$br,QH,kbr,Sbr,Rbr,L7,pFe,Pbr,Bbr,HH,Ibr,Nbr,qbr,y7,_Fe,jbr,Dbr,UH,Gbr,Obr,Vbr,x7,uFe,Xbr,zbr,JH,Wbr,Qbr,Hbr,$7,bFe,Ubr,Jbr,YH,Ybr,Kbr,Zbr,k7,vFe,evr,ovr,KH,rvr,tvr,avr,S7,FFe,nvr,svr,ZH,lvr,ivr,dvr,R7,TFe,cvr,fvr,eU,mvr,gvr,hvr,P7,MFe,pvr,_vr,oU,uvr,bvr,vvr,B7,EFe,Fvr,Tvr,rU,Mvr,Evr,Cvr,I7,CFe,wvr,Avr,tU,Lvr,yvr,xvr,N7,wFe,$vr,kvr,aU,Svr,Rvr,Pvr,q7,AFe,Bvr,Ivr,nU,Nvr,qvr,jvr,j7,LFe,Dvr,Gvr,sU,Ovr,Vvr,Xvr,D7,yFe,zvr,Wvr,lU,Qvr,Hvr,Uvr,G7,xFe,Jvr,Yvr,iU,Kvr,Zvr,e0r,O7,$Fe,o0r,r0r,dU,t0r,a0r,n0r,V7,kFe,s0r,l0r,cU,i0r,d0r,c0r,X7,SFe,f0r,m0r,fU,g0r,h0r,p0r,z7,RFe,_0r,u0r,mU,b0r,v0r,F0r,W7,FVe,sc,Q7,PFe,A9,T0r,BFe,M0r,TVe,or,L9,E0r,lc,C0r,gU,w0r,A0r,hU,L0r,y0r,x0r,y9,$0r,IFe,k0r,S0r,R0r,St,x9,P0r,NFe,B0r,I0r,ic,N0r,qFe,q0r,j0r,pU,D0r,G0r,O0r,H7,V0r,xr,$9,X0r,jFe,z0r,W0r,sn,Q0r,DFe,H0r,U0r,GFe,J0r,Y0r,OFe,K0r,Z0r,eFr,se,U7,VFe,oFr,rFr,_U,tFr,aFr,nFr,J7,XFe,sFr,lFr,uU,iFr,dFr,cFr,Y7,zFe,fFr,mFr,bU,gFr,hFr,pFr,K7,WFe,_Fr,uFr,vU,bFr,vFr,FFr,Z7,QFe,TFr,MFr,FU,EFr,CFr,wFr,e8,HFe,AFr,LFr,TU,yFr,xFr,$Fr,o8,UFe,kFr,SFr,MU,RFr,PFr,BFr,r8,JFe,IFr,NFr,EU,qFr,jFr,DFr,t8,YFe,GFr,OFr,CU,VFr,XFr,zFr,a8,KFe,WFr,QFr,wU,HFr,UFr,JFr,n8,ZFe,YFr,KFr,AU,ZFr,e6r,o6r,s8,e6e,r6r,t6r,LU,a6r,n6r,s6r,l8,o6e,l6r,i6r,yU,d6r,c6r,f6r,i8,r6e,m6r,g6r,xU,h6r,p6r,_6r,d8,t6e,u6r,b6r,$U,v6r,F6r,T6r,c8,a6e,M6r,E6r,kU,C6r,w6r,A6r,f8,n6e,L6r,y6r,SU,x6r,$6r,k6r,m8,s6e,S6r,R6r,RU,P6r,B6r,I6r,g8,l6e,N6r,q6r,PU,j6r,D6r,G6r,h8,i6e,O6r,V6r,BU,X6r,z6r,W6r,p8,d6e,Q6r,H6r,IU,U6r,J6r,Y6r,_8,c6e,K6r,Z6r,NU,eTr,oTr,rTr,u8,f6e,tTr,aTr,qU,nTr,sTr,lTr,b8,MVe,dc,v8,m6e,k9,iTr,g6e,dTr,EVe,rr,S9,cTr,cc,fTr,jU,mTr,gTr,DU,hTr,pTr,_Tr,R9,uTr,h6e,bTr,vTr,FTr,Rt,P9,TTr,p6e,MTr,ETr,fc,CTr,_6e,wTr,ATr,GU,LTr,yTr,xTr,F8,$Tr,$r,B9,kTr,u6e,STr,RTr,ln,PTr,b6e,BTr,ITr,v6e,NTr,qTr,F6e,jTr,DTr,GTr,Me,T8,T6e,OTr,VTr,OU,XTr,zTr,WTr,M8,M6e,QTr,HTr,VU,UTr,JTr,YTr,E8,E6e,KTr,ZTr,XU,e7r,o7r,r7r,C8,C6e,t7r,a7r,zU,n7r,s7r,l7r,w8,w6e,i7r,d7r,WU,c7r,f7r,m7r,A8,A6e,g7r,h7r,QU,p7r,_7r,u7r,L8,L6e,b7r,v7r,HU,F7r,T7r,M7r,y8,y6e,E7r,C7r,UU,w7r,A7r,L7r,x8,x6e,y7r,x7r,JU,$7r,k7r,S7r,$8,$6e,R7r,P7r,YU,B7r,I7r,N7r,k8,k6e,q7r,j7r,KU,D7r,G7r,O7r,S8,S6e,V7r,X7r,ZU,z7r,W7r,Q7r,R8,R6e,H7r,U7r,eJ,J7r,Y7r,K7r,P8,CVe,mc,B8,P6e,I9,Z7r,B6e,e8r,wVe,tr,N9,o8r,gc,r8r,oJ,t8r,a8r,rJ,n8r,s8r,l8r,q9,i8r,I6e,d8r,c8r,f8r,Pt,j9,m8r,N6e,g8r,h8r,hc,p8r,q6e,_8r,u8r,tJ,b8r,v8r,F8r,I8,T8r,kr,D9,M8r,j6e,E8r,C8r,dn,w8r,D6e,A8r,L8r,G6e,y8r,x8r,O6e,$8r,k8r,S8r,rt,N8,V6e,R8r,P8r,aJ,B8r,I8r,N8r,q8,X6e,q8r,j8r,nJ,D8r,G8r,O8r,Hs,z6e,V8r,X8r,sJ,z8r,W8r,lJ,Q8r,H8r,U8r,j8,W6e,J8r,Y8r,iJ,K8r,Z8r,eMr,D8,Q6e,oMr,rMr,dJ,tMr,aMr,nMr,G8,AVe,pc,O8,H6e,G9,sMr,U6e,lMr,LVe,ar,O9,iMr,_c,dMr,cJ,cMr,fMr,fJ,mMr,gMr,hMr,V9,pMr,J6e,_Mr,uMr,bMr,Bt,X9,vMr,Y6e,FMr,TMr,uc,MMr,K6e,EMr,CMr,mJ,wMr,AMr,LMr,V8,yMr,Sr,z9,xMr,Z6e,$Mr,kMr,cn,SMr,eTe,RMr,PMr,oTe,BMr,IMr,rTe,NMr,qMr,jMr,ie,X8,tTe,DMr,GMr,gJ,OMr,VMr,XMr,z8,aTe,zMr,WMr,hJ,QMr,HMr,UMr,W8,nTe,JMr,YMr,pJ,KMr,ZMr,eEr,Q8,sTe,oEr,rEr,_J,tEr,aEr,nEr,H8,lTe,sEr,lEr,uJ,iEr,dEr,cEr,U8,iTe,fEr,mEr,bJ,gEr,hEr,pEr,J8,dTe,_Er,uEr,vJ,bEr,vEr,FEr,Y8,cTe,TEr,MEr,FJ,EEr,CEr,wEr,K8,fTe,AEr,LEr,TJ,yEr,xEr,$Er,Z8,mTe,kEr,SEr,MJ,REr,PEr,BEr,eM,gTe,IEr,NEr,EJ,qEr,jEr,DEr,oM,hTe,GEr,OEr,CJ,VEr,XEr,zEr,rM,pTe,WEr,QEr,wJ,HEr,UEr,JEr,tM,_Te,YEr,KEr,AJ,ZEr,e4r,o4r,aM,uTe,r4r,t4r,LJ,a4r,n4r,s4r,nM,bTe,l4r,i4r,yJ,d4r,c4r,f4r,sM,vTe,m4r,g4r,xJ,h4r,p4r,_4r,lM,FTe,u4r,b4r,$J,v4r,F4r,T4r,iM,TTe,M4r,E4r,kJ,C4r,w4r,A4r,dM,MTe,L4r,y4r,SJ,x4r,$4r,k4r,cM,yVe,bc,fM,ETe,W9,S4r,CTe,R4r,xVe,nr,Q9,P4r,vc,B4r,RJ,I4r,N4r,PJ,q4r,j4r,D4r,H9,G4r,wTe,O4r,V4r,X4r,It,U9,z4r,ATe,W4r,Q4r,Fc,H4r,LTe,U4r,J4r,BJ,Y4r,K4r,Z4r,mM,eCr,Rr,J9,oCr,yTe,rCr,tCr,fn,aCr,xTe,nCr,sCr,$Te,lCr,iCr,kTe,dCr,cCr,fCr,ye,gM,STe,mCr,gCr,IJ,hCr,pCr,_Cr,hM,RTe,uCr,bCr,NJ,vCr,FCr,TCr,pM,PTe,MCr,ECr,qJ,CCr,wCr,ACr,_M,BTe,LCr,yCr,jJ,xCr,$Cr,kCr,uM,ITe,SCr,RCr,DJ,PCr,BCr,ICr,bM,NTe,NCr,qCr,GJ,jCr,DCr,GCr,vM,qTe,OCr,VCr,OJ,XCr,zCr,WCr,FM,jTe,QCr,HCr,VJ,UCr,JCr,YCr,TM,DTe,KCr,ZCr,XJ,e5r,o5r,r5r,MM,GTe,t5r,a5r,zJ,n5r,s5r,l5r,EM,$Ve,Tc,CM,OTe,Y9,i5r,VTe,d5r,kVe,sr,K9,c5r,Mc,f5r,WJ,m5r,g5r,QJ,h5r,p5r,_5r,Z9,u5r,XTe,b5r,v5r,F5r,Nt,ex,T5r,zTe,M5r,E5r,Ec,C5r,WTe,w5r,A5r,HJ,L5r,y5r,x5r,wM,$5r,Pr,ox,k5r,QTe,S5r,R5r,mn,P5r,HTe,B5r,I5r,UTe,N5r,q5r,JTe,j5r,D5r,G5r,te,AM,YTe,O5r,V5r,UJ,X5r,z5r,W5r,LM,KTe,Q5r,H5r,JJ,U5r,J5r,Y5r,yM,ZTe,K5r,Z5r,YJ,e3r,o3r,r3r,xM,e7e,t3r,a3r,KJ,n3r,s3r,l3r,$M,o7e,i3r,d3r,ZJ,c3r,f3r,m3r,kM,r7e,g3r,h3r,eY,p3r,_3r,u3r,SM,t7e,b3r,v3r,oY,F3r,T3r,M3r,RM,a7e,E3r,C3r,rY,w3r,A3r,L3r,PM,n7e,y3r,x3r,tY,$3r,k3r,S3r,BM,s7e,R3r,P3r,aY,B3r,I3r,N3r,IM,l7e,q3r,j3r,nY,D3r,G3r,O3r,NM,i7e,V3r,X3r,sY,z3r,W3r,Q3r,qM,d7e,H3r,U3r,lY,J3r,Y3r,K3r,jM,c7e,Z3r,ewr,iY,owr,rwr,twr,DM,f7e,awr,nwr,dY,swr,lwr,iwr,GM,m7e,dwr,cwr,cY,fwr,mwr,gwr,OM,g7e,hwr,pwr,fY,_wr,uwr,bwr,VM,h7e,vwr,Fwr,mY,Twr,Mwr,Ewr,XM,p7e,Cwr,wwr,gY,Awr,Lwr,ywr,zM,_7e,xwr,$wr,hY,kwr,Swr,Rwr,WM,u7e,Pwr,Bwr,pY,Iwr,Nwr,qwr,QM,b7e,jwr,Dwr,_Y,Gwr,Owr,Vwr,HM,v7e,Xwr,zwr,uY,Wwr,Qwr,Hwr,UM,F7e,Uwr,Jwr,bY,Ywr,Kwr,Zwr,JM,T7e,eAr,oAr,vY,rAr,tAr,aAr,YM,M7e,nAr,sAr,FY,lAr,iAr,dAr,KM,SVe,Cc,ZM,E7e,rx,cAr,C7e,fAr,RVe,lr,tx,mAr,wc,gAr,TY,hAr,pAr,MY,_Ar,uAr,bAr,ax,vAr,w7e,FAr,TAr,MAr,qt,nx,EAr,A7e,CAr,wAr,Ac,AAr,L7e,LAr,yAr,EY,xAr,$Ar,kAr,eE,SAr,Br,sx,RAr,y7e,PAr,BAr,gn,IAr,x7e,NAr,qAr,$7e,jAr,DAr,k7e,GAr,OAr,VAr,_e,oE,S7e,XAr,zAr,CY,WAr,QAr,HAr,rE,R7e,UAr,JAr,wY,YAr,KAr,ZAr,tE,P7e,eLr,oLr,AY,rLr,tLr,aLr,aE,B7e,nLr,sLr,LY,lLr,iLr,dLr,nE,I7e,cLr,fLr,yY,mLr,gLr,hLr,sE,N7e,pLr,_Lr,xY,uLr,bLr,vLr,lE,q7e,FLr,TLr,$Y,MLr,ELr,CLr,iE,j7e,wLr,ALr,kY,LLr,yLr,xLr,dE,D7e,$Lr,kLr,SY,SLr,RLr,PLr,cE,G7e,BLr,ILr,RY,NLr,qLr,jLr,fE,O7e,DLr,GLr,PY,OLr,VLr,XLr,mE,V7e,zLr,WLr,BY,QLr,HLr,ULr,gE,X7e,JLr,YLr,IY,KLr,ZLr,eyr,hE,z7e,oyr,ryr,NY,tyr,ayr,nyr,pE,W7e,syr,lyr,qY,iyr,dyr,cyr,_E,Q7e,fyr,myr,jY,gyr,hyr,pyr,uE,H7e,_yr,uyr,DY,byr,vyr,Fyr,bE,PVe,Lc,vE,U7e,lx,Tyr,J7e,Myr,BVe,ir,ix,Eyr,yc,Cyr,GY,wyr,Ayr,OY,Lyr,yyr,xyr,dx,$yr,Y7e,kyr,Syr,Ryr,jt,cx,Pyr,K7e,Byr,Iyr,xc,Nyr,Z7e,qyr,jyr,VY,Dyr,Gyr,Oyr,FE,Vyr,Ir,fx,Xyr,e8e,zyr,Wyr,hn,Qyr,o8e,Hyr,Uyr,r8e,Jyr,Yyr,t8e,Kyr,Zyr,e9r,mx,TE,a8e,o9r,r9r,XY,t9r,a9r,n9r,ME,n8e,s9r,l9r,zY,i9r,d9r,c9r,EE,IVe,$c,CE,s8e,gx,f9r,l8e,m9r,NVe,dr,hx,g9r,kc,h9r,WY,p9r,_9r,QY,u9r,b9r,v9r,px,F9r,i8e,T9r,M9r,E9r,Dt,_x,C9r,d8e,w9r,A9r,Sc,L9r,c8e,y9r,x9r,HY,$9r,k9r,S9r,wE,R9r,Nr,ux,P9r,f8e,B9r,I9r,pn,N9r,m8e,q9r,j9r,g8e,D9r,G9r,h8e,O9r,V9r,X9r,p8e,AE,_8e,z9r,W9r,UY,Q9r,H9r,U9r,LE,qVe,Rc,yE,u8e,bx,J9r,b8e,Y9r,jVe,cr,vx,K9r,Pc,Z9r,JY,exr,oxr,YY,rxr,txr,axr,Fx,nxr,v8e,sxr,lxr,ixr,Gt,Tx,dxr,F8e,cxr,fxr,Bc,mxr,T8e,gxr,hxr,KY,pxr,_xr,uxr,xE,bxr,qr,Mx,vxr,M8e,Fxr,Txr,_n,Mxr,E8e,Exr,Cxr,C8e,wxr,Axr,w8e,Lxr,yxr,xxr,de,$E,A8e,$xr,kxr,ZY,Sxr,Rxr,Pxr,kE,L8e,Bxr,Ixr,eK,Nxr,qxr,jxr,SE,y8e,Dxr,Gxr,oK,Oxr,Vxr,Xxr,RE,x8e,zxr,Wxr,rK,Qxr,Hxr,Uxr,PE,$8e,Jxr,Yxr,tK,Kxr,Zxr,e$r,BE,k8e,o$r,r$r,aK,t$r,a$r,n$r,IE,S8e,s$r,l$r,nK,i$r,d$r,c$r,NE,R8e,f$r,m$r,sK,g$r,h$r,p$r,qE,P8e,_$r,u$r,lK,b$r,v$r,F$r,jE,B8e,T$r,M$r,iK,E$r,C$r,w$r,DE,I8e,A$r,L$r,dK,y$r,x$r,$$r,GE,N8e,k$r,S$r,cK,R$r,P$r,B$r,OE,q8e,I$r,N$r,fK,q$r,j$r,D$r,VE,j8e,G$r,O$r,mK,V$r,X$r,z$r,XE,D8e,W$r,Q$r,gK,H$r,U$r,J$r,zE,G8e,Y$r,K$r,hK,Z$r,ekr,okr,WE,O8e,rkr,tkr,pK,akr,nkr,skr,QE,V8e,lkr,ikr,_K,dkr,ckr,fkr,HE,X8e,mkr,gkr,uK,hkr,pkr,_kr,UE,z8e,ukr,bkr,bK,vkr,Fkr,Tkr,JE,DVe,Ic,YE,W8e,Ex,Mkr,Q8e,Ekr,GVe,fr,Cx,Ckr,Nc,wkr,vK,Akr,Lkr,FK,ykr,xkr,$kr,wx,kkr,H8e,Skr,Rkr,Pkr,Ot,Ax,Bkr,U8e,Ikr,Nkr,qc,qkr,J8e,jkr,Dkr,TK,Gkr,Okr,Vkr,KE,Xkr,jr,Lx,zkr,Y8e,Wkr,Qkr,un,Hkr,K8e,Ukr,Jkr,Z8e,Ykr,Kkr,eMe,Zkr,eSr,oSr,ce,ZE,oMe,rSr,tSr,MK,aSr,nSr,sSr,e4,rMe,lSr,iSr,EK,dSr,cSr,fSr,o4,tMe,mSr,gSr,CK,hSr,pSr,_Sr,r4,aMe,uSr,bSr,wK,vSr,FSr,TSr,t4,nMe,MSr,ESr,AK,CSr,wSr,ASr,a4,sMe,LSr,ySr,LK,xSr,$Sr,kSr,n4,lMe,SSr,RSr,yK,PSr,BSr,ISr,s4,iMe,NSr,qSr,xK,jSr,DSr,GSr,l4,dMe,OSr,VSr,$K,XSr,zSr,WSr,i4,cMe,QSr,HSr,kK,USr,JSr,YSr,d4,fMe,KSr,ZSr,SK,eRr,oRr,rRr,c4,mMe,tRr,aRr,RK,nRr,sRr,lRr,f4,gMe,iRr,dRr,PK,cRr,fRr,mRr,m4,hMe,gRr,hRr,BK,pRr,_Rr,uRr,g4,pMe,bRr,vRr,IK,FRr,TRr,MRr,h4,_Me,ERr,CRr,NK,wRr,ARr,LRr,p4,uMe,yRr,xRr,qK,$Rr,kRr,SRr,_4,bMe,RRr,PRr,jK,BRr,IRr,NRr,u4,vMe,qRr,jRr,DK,DRr,GRr,ORr,b4,FMe,VRr,XRr,GK,zRr,WRr,QRr,v4,OVe,jc,F4,TMe,yx,HRr,MMe,URr,VVe,mr,xx,JRr,Dc,YRr,OK,KRr,ZRr,VK,ePr,oPr,rPr,$x,tPr,EMe,aPr,nPr,sPr,Vt,kx,lPr,CMe,iPr,dPr,Gc,cPr,wMe,fPr,mPr,XK,gPr,hPr,pPr,T4,_Pr,Dr,Sx,uPr,AMe,bPr,vPr,bn,FPr,LMe,TPr,MPr,yMe,EPr,CPr,xMe,wPr,APr,LPr,$Me,M4,kMe,yPr,xPr,zK,$Pr,kPr,SPr,E4,XVe,Oc,C4,SMe,Rx,RPr,RMe,PPr,zVe,gr,Px,BPr,Vc,IPr,WK,NPr,qPr,QK,jPr,DPr,GPr,Bx,OPr,PMe,VPr,XPr,zPr,Xt,Ix,WPr,BMe,QPr,HPr,Xc,UPr,IMe,JPr,YPr,HK,KPr,ZPr,eBr,w4,oBr,Gr,Nx,rBr,NMe,tBr,aBr,vn,nBr,qMe,sBr,lBr,jMe,iBr,dBr,DMe,cBr,fBr,mBr,GMe,A4,OMe,gBr,hBr,UK,pBr,_Br,uBr,L4,WVe,zc,y4,VMe,qx,bBr,XMe,vBr,QVe,hr,jx,FBr,Wc,TBr,JK,MBr,EBr,YK,CBr,wBr,ABr,Dx,LBr,zMe,yBr,xBr,$Br,zt,Gx,kBr,WMe,SBr,RBr,Qc,PBr,QMe,BBr,IBr,KK,NBr,qBr,jBr,x4,DBr,Or,Ox,GBr,HMe,OBr,VBr,Fn,XBr,UMe,zBr,WBr,JMe,QBr,HBr,YMe,UBr,JBr,YBr,oe,$4,KMe,KBr,ZBr,ZK,eIr,oIr,rIr,k4,ZMe,tIr,aIr,eZ,nIr,sIr,lIr,S4,eEe,iIr,dIr,oZ,cIr,fIr,mIr,R4,oEe,gIr,hIr,rZ,pIr,_Ir,uIr,P4,rEe,bIr,vIr,tZ,FIr,TIr,MIr,B4,tEe,EIr,CIr,aZ,wIr,AIr,LIr,I4,aEe,yIr,xIr,nZ,$Ir,kIr,SIr,N4,nEe,RIr,PIr,sZ,BIr,IIr,NIr,q4,sEe,qIr,jIr,lZ,DIr,GIr,OIr,j4,lEe,VIr,XIr,iZ,zIr,WIr,QIr,D4,iEe,HIr,UIr,dZ,JIr,YIr,KIr,G4,dEe,ZIr,eNr,cZ,oNr,rNr,tNr,O4,cEe,aNr,nNr,fZ,sNr,lNr,iNr,V4,fEe,dNr,cNr,mZ,fNr,mNr,gNr,X4,mEe,hNr,pNr,gZ,_Nr,uNr,bNr,z4,gEe,vNr,FNr,hZ,TNr,MNr,ENr,W4,hEe,CNr,wNr,pZ,ANr,LNr,yNr,Q4,pEe,xNr,$Nr,_Z,kNr,SNr,RNr,H4,_Ee,PNr,BNr,uZ,INr,NNr,qNr,U4,uEe,jNr,DNr,bZ,GNr,ONr,VNr,J4,bEe,XNr,zNr,vZ,WNr,QNr,HNr,Y4,vEe,UNr,JNr,FZ,YNr,KNr,ZNr,K4,FEe,eqr,oqr,TZ,rqr,tqr,aqr,Z4,TEe,nqr,sqr,MZ,lqr,iqr,dqr,eC,MEe,cqr,fqr,EZ,mqr,gqr,hqr,oC,EEe,pqr,_qr,CZ,uqr,bqr,vqr,rC,CEe,Fqr,Tqr,wZ,Mqr,Eqr,Cqr,tC,HVe,Hc,aC,wEe,Vx,wqr,AEe,Aqr,UVe,pr,Xx,Lqr,Uc,yqr,AZ,xqr,$qr,LZ,kqr,Sqr,Rqr,zx,Pqr,LEe,Bqr,Iqr,Nqr,Wt,Wx,qqr,yEe,jqr,Dqr,Jc,Gqr,xEe,Oqr,Vqr,yZ,Xqr,zqr,Wqr,nC,Qqr,Vr,Qx,Hqr,$Ee,Uqr,Jqr,Tn,Yqr,kEe,Kqr,Zqr,SEe,ejr,ojr,REe,rjr,tjr,ajr,xe,sC,PEe,njr,sjr,xZ,ljr,ijr,djr,lC,BEe,cjr,fjr,$Z,mjr,gjr,hjr,iC,IEe,pjr,_jr,kZ,ujr,bjr,vjr,dC,NEe,Fjr,Tjr,SZ,Mjr,Ejr,Cjr,cC,qEe,wjr,Ajr,RZ,Ljr,yjr,xjr,fC,jEe,$jr,kjr,PZ,Sjr,Rjr,Pjr,mC,DEe,Bjr,Ijr,BZ,Njr,qjr,jjr,gC,GEe,Djr,Gjr,IZ,Ojr,Vjr,Xjr,hC,OEe,zjr,Wjr,NZ,Qjr,Hjr,Ujr,pC,VEe,Jjr,Yjr,qZ,Kjr,Zjr,eDr,_C,JVe,Yc,uC,XEe,Hx,oDr,zEe,rDr,YVe,_r,Ux,tDr,Kc,aDr,jZ,nDr,sDr,DZ,lDr,iDr,dDr,Jx,cDr,WEe,fDr,mDr,gDr,Qt,Yx,hDr,QEe,pDr,_Dr,Zc,uDr,HEe,bDr,vDr,GZ,FDr,TDr,MDr,bC,EDr,Xr,Kx,CDr,UEe,wDr,ADr,Mn,LDr,JEe,yDr,xDr,YEe,$Dr,kDr,KEe,SDr,RDr,PDr,Ee,vC,ZEe,BDr,IDr,OZ,NDr,qDr,jDr,FC,e4e,DDr,GDr,VZ,ODr,VDr,XDr,TC,o4e,zDr,WDr,XZ,QDr,HDr,UDr,MC,r4e,JDr,YDr,zZ,KDr,ZDr,eGr,EC,t4e,oGr,rGr,WZ,tGr,aGr,nGr,CC,a4e,sGr,lGr,QZ,iGr,dGr,cGr,wC,n4e,fGr,mGr,HZ,gGr,hGr,pGr,AC,s4e,_Gr,uGr,UZ,bGr,vGr,FGr,LC,l4e,TGr,MGr,JZ,EGr,CGr,wGr,yC,i4e,AGr,LGr,YZ,yGr,xGr,$Gr,xC,d4e,kGr,SGr,KZ,RGr,PGr,BGr,$C,c4e,IGr,NGr,ZZ,qGr,jGr,DGr,kC,f4e,GGr,OGr,eee,VGr,XGr,zGr,SC,KVe,ef,RC,m4e,Zx,WGr,g4e,QGr,ZVe,ur,e$,HGr,of,UGr,oee,JGr,YGr,ree,KGr,ZGr,eOr,o$,oOr,h4e,rOr,tOr,aOr,Ht,r$,nOr,p4e,sOr,lOr,rf,iOr,_4e,dOr,cOr,tee,fOr,mOr,gOr,PC,hOr,zr,t$,pOr,u4e,_Or,uOr,En,bOr,b4e,vOr,FOr,v4e,TOr,MOr,F4e,EOr,COr,wOr,$e,BC,T4e,AOr,LOr,aee,yOr,xOr,$Or,IC,M4e,kOr,SOr,nee,ROr,POr,BOr,NC,E4e,IOr,NOr,see,qOr,jOr,DOr,qC,C4e,GOr,OOr,lee,VOr,XOr,zOr,jC,w4e,WOr,QOr,iee,HOr,UOr,JOr,DC,A4e,YOr,KOr,dee,ZOr,eVr,oVr,GC,L4e,rVr,tVr,cee,aVr,nVr,sVr,OC,y4e,lVr,iVr,fee,dVr,cVr,fVr,VC,x4e,mVr,gVr,mee,hVr,pVr,_Vr,XC,$4e,uVr,bVr,gee,vVr,FVr,TVr,zC,eXe,tf,WC,k4e,a$,MVr,S4e,EVr,oXe,br,n$,CVr,af,wVr,hee,AVr,LVr,pee,yVr,xVr,$Vr,s$,kVr,R4e,SVr,RVr,PVr,Ut,l$,BVr,P4e,IVr,NVr,nf,qVr,B4e,jVr,DVr,_ee,GVr,OVr,VVr,QC,XVr,Wr,i$,zVr,I4e,WVr,QVr,Cn,HVr,N4e,UVr,JVr,q4e,YVr,KVr,j4e,ZVr,eXr,oXr,ke,HC,D4e,rXr,tXr,uee,aXr,nXr,sXr,UC,G4e,lXr,iXr,bee,dXr,cXr,fXr,JC,O4e,mXr,gXr,vee,hXr,pXr,_Xr,YC,V4e,uXr,bXr,Fee,vXr,FXr,TXr,KC,X4e,MXr,EXr,Tee,CXr,wXr,AXr,ZC,z4e,LXr,yXr,Mee,xXr,$Xr,kXr,e5,W4e,SXr,RXr,Eee,PXr,BXr,IXr,o5,Q4e,NXr,qXr,Cee,jXr,DXr,GXr,r5,H4e,OXr,VXr,wee,XXr,zXr,WXr,t5,U4e,QXr,HXr,Aee,UXr,JXr,YXr,a5,rXe,sf,n5,J4e,d$,KXr,Y4e,ZXr,tXe,vr,c$,ezr,lf,ozr,Lee,rzr,tzr,yee,azr,nzr,szr,f$,lzr,K4e,izr,dzr,czr,Jt,m$,fzr,Z4e,mzr,gzr,df,hzr,eCe,pzr,_zr,xee,uzr,bzr,vzr,s5,Fzr,Qr,g$,Tzr,oCe,Mzr,Ezr,wn,Czr,rCe,wzr,Azr,tCe,Lzr,yzr,aCe,xzr,$zr,kzr,Se,l5,nCe,Szr,Rzr,$ee,Pzr,Bzr,Izr,i5,sCe,Nzr,qzr,kee,jzr,Dzr,Gzr,d5,lCe,Ozr,Vzr,See,Xzr,zzr,Wzr,c5,iCe,Qzr,Hzr,Ree,Uzr,Jzr,Yzr,f5,dCe,Kzr,Zzr,Pee,eWr,oWr,rWr,m5,cCe,tWr,aWr,Bee,nWr,sWr,lWr,g5,fCe,iWr,dWr,Iee,cWr,fWr,mWr,h5,mCe,gWr,hWr,Nee,pWr,_Wr,uWr,p5,gCe,bWr,vWr,qee,FWr,TWr,MWr,_5,hCe,EWr,CWr,jee,wWr,AWr,LWr,u5,aXe,cf,b5,pCe,h$,yWr,_Ce,xWr,nXe,Fr,p$,$Wr,ff,kWr,Dee,SWr,RWr,Gee,PWr,BWr,IWr,_$,NWr,uCe,qWr,jWr,DWr,Yt,u$,GWr,bCe,OWr,VWr,mf,XWr,vCe,zWr,WWr,Oee,QWr,HWr,UWr,v5,JWr,Hr,b$,YWr,FCe,KWr,ZWr,An,eQr,TCe,oQr,rQr,MCe,tQr,aQr,ECe,nQr,sQr,lQr,Re,F5,CCe,iQr,dQr,Vee,cQr,fQr,mQr,T5,wCe,gQr,hQr,Xee,pQr,_Qr,uQr,M5,ACe,bQr,vQr,zee,FQr,TQr,MQr,E5,LCe,EQr,CQr,Wee,wQr,AQr,LQr,C5,yCe,yQr,xQr,Qee,$Qr,kQr,SQr,w5,xCe,RQr,PQr,Hee,BQr,IQr,NQr,A5,$Ce,qQr,jQr,Uee,DQr,GQr,OQr,L5,kCe,VQr,XQr,Jee,zQr,WQr,QQr,y5,SCe,HQr,UQr,Yee,JQr,YQr,KQr,x5,RCe,ZQr,eHr,Kee,oHr,rHr,tHr,$5,sXe,gf,k5,PCe,v$,aHr,BCe,nHr,lXe,Tr,F$,sHr,hf,lHr,Zee,iHr,dHr,eoe,cHr,fHr,mHr,T$,gHr,ICe,hHr,pHr,_Hr,Kt,M$,uHr,NCe,bHr,vHr,pf,FHr,qCe,THr,MHr,ooe,EHr,CHr,wHr,S5,AHr,Ur,E$,LHr,jCe,yHr,xHr,Ln,$Hr,DCe,kHr,SHr,GCe,RHr,PHr,OCe,BHr,IHr,NHr,Ve,R5,VCe,qHr,jHr,roe,DHr,GHr,OHr,P5,XCe,VHr,XHr,toe,zHr,WHr,QHr,B5,zCe,HHr,UHr,aoe,JHr,YHr,KHr,I5,WCe,ZHr,eUr,noe,oUr,rUr,tUr,N5,QCe,aUr,nUr,soe,sUr,lUr,iUr,q5,HCe,dUr,cUr,loe,fUr,mUr,gUr,j5,UCe,hUr,pUr,ioe,_Ur,uUr,bUr,D5,JCe,vUr,FUr,doe,TUr,MUr,EUr,G5,iXe,_f,O5,YCe,C$,CUr,KCe,wUr,dXe,Mr,w$,AUr,uf,LUr,coe,yUr,xUr,foe,$Ur,kUr,SUr,A$,RUr,ZCe,PUr,BUr,IUr,Zt,L$,NUr,e5e,qUr,jUr,bf,DUr,o5e,GUr,OUr,moe,VUr,XUr,zUr,V5,WUr,Jr,y$,QUr,r5e,HUr,UUr,yn,JUr,t5e,YUr,KUr,a5e,ZUr,eJr,n5e,oJr,rJr,tJr,Xe,X5,s5e,aJr,nJr,goe,sJr,lJr,iJr,z5,l5e,dJr,cJr,hoe,fJr,mJr,gJr,W5,i5e,hJr,pJr,poe,_Jr,uJr,bJr,Q5,d5e,vJr,FJr,_oe,TJr,MJr,EJr,H5,c5e,CJr,wJr,uoe,AJr,LJr,yJr,U5,f5e,xJr,$Jr,boe,kJr,SJr,RJr,J5,m5e,PJr,BJr,voe,IJr,NJr,qJr,Y5,g5e,jJr,DJr,Foe,GJr,OJr,VJr,K5,cXe,vf,Z5,h5e,x$,XJr,p5e,zJr,fXe,Er,$$,WJr,Ff,QJr,Toe,HJr,UJr,Moe,JJr,YJr,KJr,k$,ZJr,_5e,eYr,oYr,rYr,ea,S$,tYr,u5e,aYr,nYr,Tf,sYr,b5e,lYr,iYr,Eoe,dYr,cYr,fYr,e3,mYr,Yr,R$,gYr,v5e,hYr,pYr,xn,_Yr,F5e,uYr,bYr,T5e,vYr,FYr,M5e,TYr,MYr,EYr,E5e,o3,C5e,CYr,wYr,Coe,AYr,LYr,yYr,r3,mXe,Mf,t3,w5e,P$,xYr,A5e,$Yr,gXe,Cr,B$,kYr,Ef,SYr,woe,RYr,PYr,Aoe,BYr,IYr,NYr,I$,qYr,L5e,jYr,DYr,GYr,oa,N$,OYr,y5e,VYr,XYr,Cf,zYr,x5e,WYr,QYr,Loe,HYr,UYr,JYr,a3,YYr,Kr,q$,KYr,$5e,ZYr,eKr,$n,oKr,k5e,rKr,tKr,S5e,aKr,nKr,R5e,sKr,lKr,iKr,j$,n3,P5e,dKr,cKr,yoe,fKr,mKr,gKr,s3,B5e,hKr,pKr,xoe,_Kr,uKr,bKr,l3,hXe,wf,i3,I5e,D$,vKr,N5e,FKr,pXe,wr,G$,TKr,Af,MKr,$oe,EKr,CKr,koe,wKr,AKr,LKr,O$,yKr,q5e,xKr,$Kr,kKr,ra,V$,SKr,j5e,RKr,PKr,Lf,BKr,D5e,IKr,NKr,Soe,qKr,jKr,DKr,d3,GKr,Zr,X$,OKr,G5e,VKr,XKr,kn,zKr,O5e,WKr,QKr,V5e,HKr,UKr,X5e,JKr,YKr,KKr,z5e,c3,W5e,ZKr,eZr,Roe,oZr,rZr,tZr,f3,_Xe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),BA=new re({}),IA=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),If=new aZr({props:{warning:!0,$$slots:{default:[XGt]},$$scope:{ctx:x}}}),NA=new re({}),qA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L601"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L624"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/configuration_auto.py#L747"}}),VA=new re({}),XA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L401"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17806/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L415"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/tokenization_auto.py#L614"}}),UA=new re({}),JA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17806/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ip=new aZr({props:{$$slots:{default:[QGt]},$$scope:{ctx:x}}}),dp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L88"}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L102"}}),xp=new aZr({props:{$$slots:{default:[UGt]},$$scope:{ctx:x}}}),$p=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),sL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/processing_auto.py#L255"}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L770"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L777"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L792"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L799"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),ab=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L806"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),sb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L815"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),NL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L860"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L867"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L853"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L824"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L831"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L876"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L915"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L842"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L922"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L945"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L929"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L936"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L954"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L961"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L908"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L883"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L890"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_auto.py#L899"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),T9=new re({}),M9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),A9=new re({}),L9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),k9=new re({}),S9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),P8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),I9=new re({}),N9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),G9=new re({}),O9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L515"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:x}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[uVt]},$$scope:{ctx:x}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bVt]},$$scope:{ctx:x}}}),qx=new re({}),jx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[vVt]},$$scope:{ctx:x}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[FVt]},$$scope:{ctx:x}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[TVt]},$$scope:{ctx:x}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[MVt]},$$scope:{ctx:x}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[EVt]},$$scope:{ctx:x}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CVt]},$$scope:{ctx:x}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[wVt]},$$scope:{ctx:x}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[AVt]},$$scope:{ctx:x}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[LVt]},$$scope:{ctx:x}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[yVt]},$$scope:{ctx:x}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[xVt]},$$scope:{ctx:x}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$Vt]},$$scope:{ctx:x}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kVt]},$$scope:{ctx:x}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SVt]},$$scope:{ctx:x}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[RVt]},$$scope:{ctx:x}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[PVt]},$$scope:{ctx:x}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BVt]},$$scope:{ctx:x}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[IVt]},$$scope:{ctx:x}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[NVt]},$$scope:{ctx:x}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qVt]},$$scope:{ctx:x}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[jVt]},$$scope:{ctx:x}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[DVt]},$$scope:{ctx:x}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[GVt]},$$scope:{ctx:x}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17806/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17806/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17806/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[OVt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ci=o("Auto Classes"),kf=l(),nt=a("p"),wi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=a("code"),kA=o("from_pretrained()"),Sf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Li=o("Instantiating one of "),Rn=a("a"),SA=o("AutoConfig"),Pn=o(", "),Bn=a("a"),RA=o("AutoModel"),yi=o(`, and
`),In=a("a"),PA=o("AutoTokenizer"),xi=o(" will directly create a class of the relevant architecture. For instance"),Rf=l(),F($a.$$.fragment),Qe=l(),Ae=a("p"),cS=o("will create a model that is an instance of "),$i=a("a"),fS=o("BertModel"),mS=o("."),Co=l(),ka=a("p"),gS=o("There is one class of "),Pf=a("code"),hS=o("AutoModel"),AWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fOe=l(),ki=a("h2"),Bf=a("a"),yte=a("span"),F(BA.$$.fragment),LWe=l(),xte=a("span"),yWe=o("Extending the Auto Classes"),mOe=l(),Nn=a("p"),xWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$te=a("code"),$We=o("NewModel"),kWe=o(", make sure you have a "),kte=a("code"),SWe=o("NewModelConfig"),RWe=o(` then you can add those to the auto
classes like this:`),gOe=l(),F(IA.$$.fragment),hOe=l(),pS=a("p"),PWe=o("You will then be able to use the auto classes like you would usually do!"),pOe=l(),F(If.$$.fragment),_Oe=l(),Si=a("h2"),Nf=a("a"),Ste=a("span"),F(NA.$$.fragment),BWe=l(),Rte=a("span"),IWe=o("AutoConfig"),uOe=l(),wo=a("div"),F(qA.$$.fragment),NWe=l(),jA=a("p"),qWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_S=a("a"),jWe=o("from_pretrained()"),DWe=o(" class method."),GWe=l(),DA=a("p"),OWe=o("This class cannot be instantiated directly using "),Pte=a("code"),VWe=o("__init__()"),XWe=o(" (throws an error)."),zWe=l(),Ar=a("div"),F(GA.$$.fragment),WWe=l(),Bte=a("p"),QWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),HWe=l(),Ri=a("p"),UWe=o("The configuration class to instantiate is selected based on the "),Ite=a("code"),JWe=o("model_type"),YWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nte=a("code"),KWe=o("pretrained_model_name_or_path"),ZWe=o(":"),eQe=l(),A=a("ul"),qf=a("li"),qte=a("strong"),oQe=o("albert"),rQe=o(" \u2014 "),uS=a("a"),tQe=o("AlbertConfig"),aQe=o(" (ALBERT model)"),nQe=l(),jf=a("li"),jte=a("strong"),sQe=o("bart"),lQe=o(" \u2014 "),bS=a("a"),iQe=o("BartConfig"),dQe=o(" (BART model)"),cQe=l(),Df=a("li"),Dte=a("strong"),fQe=o("beit"),mQe=o(" \u2014 "),vS=a("a"),gQe=o("BeitConfig"),hQe=o(" (BEiT model)"),pQe=l(),Gf=a("li"),Gte=a("strong"),_Qe=o("bert"),uQe=o(" \u2014 "),FS=a("a"),bQe=o("BertConfig"),vQe=o(" (BERT model)"),FQe=l(),Of=a("li"),Ote=a("strong"),TQe=o("bert-generation"),MQe=o(" \u2014 "),TS=a("a"),EQe=o("BertGenerationConfig"),CQe=o(" (Bert Generation model)"),wQe=l(),Vf=a("li"),Vte=a("strong"),AQe=o("big_bird"),LQe=o(" \u2014 "),MS=a("a"),yQe=o("BigBirdConfig"),xQe=o(" (BigBird model)"),$Qe=l(),Xf=a("li"),Xte=a("strong"),kQe=o("bigbird_pegasus"),SQe=o(" \u2014 "),ES=a("a"),RQe=o("BigBirdPegasusConfig"),PQe=o(" (BigBird-Pegasus model)"),BQe=l(),zf=a("li"),zte=a("strong"),IQe=o("blenderbot"),NQe=o(" \u2014 "),CS=a("a"),qQe=o("BlenderbotConfig"),jQe=o(" (Blenderbot model)"),DQe=l(),Wf=a("li"),Wte=a("strong"),GQe=o("blenderbot-small"),OQe=o(" \u2014 "),wS=a("a"),VQe=o("BlenderbotSmallConfig"),XQe=o(" (BlenderbotSmall model)"),zQe=l(),Qf=a("li"),Qte=a("strong"),WQe=o("bloom"),QQe=o(" \u2014 "),AS=a("a"),HQe=o("BloomConfig"),UQe=o(" (BLOOM model)"),JQe=l(),Hf=a("li"),Hte=a("strong"),YQe=o("camembert"),KQe=o(" \u2014 "),LS=a("a"),ZQe=o("CamembertConfig"),eHe=o(" (CamemBERT model)"),oHe=l(),Uf=a("li"),Ute=a("strong"),rHe=o("canine"),tHe=o(" \u2014 "),yS=a("a"),aHe=o("CanineConfig"),nHe=o(" (CANINE model)"),sHe=l(),Jf=a("li"),Jte=a("strong"),lHe=o("clip"),iHe=o(" \u2014 "),xS=a("a"),dHe=o("CLIPConfig"),cHe=o(" (CLIP model)"),fHe=l(),Yf=a("li"),Yte=a("strong"),mHe=o("codegen"),gHe=o(" \u2014 "),$S=a("a"),hHe=o("CodeGenConfig"),pHe=o(" (CodeGen model)"),_He=l(),Kf=a("li"),Kte=a("strong"),uHe=o("convbert"),bHe=o(" \u2014 "),kS=a("a"),vHe=o("ConvBertConfig"),FHe=o(" (ConvBERT model)"),THe=l(),Zf=a("li"),Zte=a("strong"),MHe=o("convnext"),EHe=o(" \u2014 "),SS=a("a"),CHe=o("ConvNextConfig"),wHe=o(" (ConvNeXT model)"),AHe=l(),em=a("li"),eae=a("strong"),LHe=o("ctrl"),yHe=o(" \u2014 "),RS=a("a"),xHe=o("CTRLConfig"),$He=o(" (CTRL model)"),kHe=l(),om=a("li"),oae=a("strong"),SHe=o("cvt"),RHe=o(" \u2014 "),PS=a("a"),PHe=o("CvtConfig"),BHe=o(" (CvT model)"),IHe=l(),rm=a("li"),rae=a("strong"),NHe=o("data2vec-audio"),qHe=o(" \u2014 "),BS=a("a"),jHe=o("Data2VecAudioConfig"),DHe=o(" (Data2VecAudio model)"),GHe=l(),tm=a("li"),tae=a("strong"),OHe=o("data2vec-text"),VHe=o(" \u2014 "),IS=a("a"),XHe=o("Data2VecTextConfig"),zHe=o(" (Data2VecText model)"),WHe=l(),am=a("li"),aae=a("strong"),QHe=o("data2vec-vision"),HHe=o(" \u2014 "),NS=a("a"),UHe=o("Data2VecVisionConfig"),JHe=o(" (Data2VecVision model)"),YHe=l(),nm=a("li"),nae=a("strong"),KHe=o("deberta"),ZHe=o(" \u2014 "),qS=a("a"),eUe=o("DebertaConfig"),oUe=o(" (DeBERTa model)"),rUe=l(),sm=a("li"),sae=a("strong"),tUe=o("deberta-v2"),aUe=o(" \u2014 "),jS=a("a"),nUe=o("DebertaV2Config"),sUe=o(" (DeBERTa-v2 model)"),lUe=l(),lm=a("li"),lae=a("strong"),iUe=o("decision_transformer"),dUe=o(" \u2014 "),DS=a("a"),cUe=o("DecisionTransformerConfig"),fUe=o(" (Decision Transformer model)"),mUe=l(),im=a("li"),iae=a("strong"),gUe=o("deit"),hUe=o(" \u2014 "),GS=a("a"),pUe=o("DeiTConfig"),_Ue=o(" (DeiT model)"),uUe=l(),dm=a("li"),dae=a("strong"),bUe=o("detr"),vUe=o(" \u2014 "),OS=a("a"),FUe=o("DetrConfig"),TUe=o(" (DETR model)"),MUe=l(),cm=a("li"),cae=a("strong"),EUe=o("distilbert"),CUe=o(" \u2014 "),VS=a("a"),wUe=o("DistilBertConfig"),AUe=o(" (DistilBERT model)"),LUe=l(),fm=a("li"),fae=a("strong"),yUe=o("dpr"),xUe=o(" \u2014 "),XS=a("a"),$Ue=o("DPRConfig"),kUe=o(" (DPR model)"),SUe=l(),mm=a("li"),mae=a("strong"),RUe=o("dpt"),PUe=o(" \u2014 "),zS=a("a"),BUe=o("DPTConfig"),IUe=o(" (DPT model)"),NUe=l(),gm=a("li"),gae=a("strong"),qUe=o("electra"),jUe=o(" \u2014 "),WS=a("a"),DUe=o("ElectraConfig"),GUe=o(" (ELECTRA model)"),OUe=l(),hm=a("li"),hae=a("strong"),VUe=o("encoder-decoder"),XUe=o(" \u2014 "),QS=a("a"),zUe=o("EncoderDecoderConfig"),WUe=o(" (Encoder decoder model)"),QUe=l(),pm=a("li"),pae=a("strong"),HUe=o("flaubert"),UUe=o(" \u2014 "),HS=a("a"),JUe=o("FlaubertConfig"),YUe=o(" (FlauBERT model)"),KUe=l(),_m=a("li"),_ae=a("strong"),ZUe=o("flava"),eJe=o(" \u2014 "),US=a("a"),oJe=o("FlavaConfig"),rJe=o(" (FLAVA model)"),tJe=l(),um=a("li"),uae=a("strong"),aJe=o("fnet"),nJe=o(" \u2014 "),JS=a("a"),sJe=o("FNetConfig"),lJe=o(" (FNet model)"),iJe=l(),bm=a("li"),bae=a("strong"),dJe=o("fsmt"),cJe=o(" \u2014 "),YS=a("a"),fJe=o("FSMTConfig"),mJe=o(" (FairSeq Machine-Translation model)"),gJe=l(),vm=a("li"),vae=a("strong"),hJe=o("funnel"),pJe=o(" \u2014 "),KS=a("a"),_Je=o("FunnelConfig"),uJe=o(" (Funnel Transformer model)"),bJe=l(),Fm=a("li"),Fae=a("strong"),vJe=o("glpn"),FJe=o(" \u2014 "),ZS=a("a"),TJe=o("GLPNConfig"),MJe=o(" (GLPN model)"),EJe=l(),Tm=a("li"),Tae=a("strong"),CJe=o("gpt2"),wJe=o(" \u2014 "),eR=a("a"),AJe=o("GPT2Config"),LJe=o(" (OpenAI GPT-2 model)"),yJe=l(),Mm=a("li"),Mae=a("strong"),xJe=o("gpt_neo"),$Je=o(" \u2014 "),oR=a("a"),kJe=o("GPTNeoConfig"),SJe=o(" (GPT Neo model)"),RJe=l(),Em=a("li"),Eae=a("strong"),PJe=o("gpt_neox"),BJe=o(" \u2014 "),rR=a("a"),IJe=o("GPTNeoXConfig"),NJe=o(" (GPT NeoX model)"),qJe=l(),Cm=a("li"),Cae=a("strong"),jJe=o("gptj"),DJe=o(" \u2014 "),tR=a("a"),GJe=o("GPTJConfig"),OJe=o(" (GPT-J model)"),VJe=l(),wm=a("li"),wae=a("strong"),XJe=o("hubert"),zJe=o(" \u2014 "),aR=a("a"),WJe=o("HubertConfig"),QJe=o(" (Hubert model)"),HJe=l(),Am=a("li"),Aae=a("strong"),UJe=o("ibert"),JJe=o(" \u2014 "),nR=a("a"),YJe=o("IBertConfig"),KJe=o(" (I-BERT model)"),ZJe=l(),Lm=a("li"),Lae=a("strong"),eYe=o("imagegpt"),oYe=o(" \u2014 "),sR=a("a"),rYe=o("ImageGPTConfig"),tYe=o(" (ImageGPT model)"),aYe=l(),ym=a("li"),yae=a("strong"),nYe=o("layoutlm"),sYe=o(" \u2014 "),lR=a("a"),lYe=o("LayoutLMConfig"),iYe=o(" (LayoutLM model)"),dYe=l(),xm=a("li"),xae=a("strong"),cYe=o("layoutlmv2"),fYe=o(" \u2014 "),iR=a("a"),mYe=o("LayoutLMv2Config"),gYe=o(" (LayoutLMv2 model)"),hYe=l(),$m=a("li"),$ae=a("strong"),pYe=o("layoutlmv3"),_Ye=o(" \u2014 "),dR=a("a"),uYe=o("LayoutLMv3Config"),bYe=o(" (LayoutLMv3 model)"),vYe=l(),km=a("li"),kae=a("strong"),FYe=o("led"),TYe=o(" \u2014 "),cR=a("a"),MYe=o("LEDConfig"),EYe=o(" (LED model)"),CYe=l(),Sm=a("li"),Sae=a("strong"),wYe=o("levit"),AYe=o(" \u2014 "),fR=a("a"),LYe=o("LevitConfig"),yYe=o(" (LeViT model)"),xYe=l(),Rm=a("li"),Rae=a("strong"),$Ye=o("longformer"),kYe=o(" \u2014 "),mR=a("a"),SYe=o("LongformerConfig"),RYe=o(" (Longformer model)"),PYe=l(),Pm=a("li"),Pae=a("strong"),BYe=o("longt5"),IYe=o(" \u2014 "),gR=a("a"),NYe=o("LongT5Config"),qYe=o(" (LongT5 model)"),jYe=l(),Bm=a("li"),Bae=a("strong"),DYe=o("luke"),GYe=o(" \u2014 "),hR=a("a"),OYe=o("LukeConfig"),VYe=o(" (LUKE model)"),XYe=l(),Im=a("li"),Iae=a("strong"),zYe=o("lxmert"),WYe=o(" \u2014 "),pR=a("a"),QYe=o("LxmertConfig"),HYe=o(" (LXMERT model)"),UYe=l(),Nm=a("li"),Nae=a("strong"),JYe=o("m2m_100"),YYe=o(" \u2014 "),_R=a("a"),KYe=o("M2M100Config"),ZYe=o(" (M2M100 model)"),eKe=l(),qm=a("li"),qae=a("strong"),oKe=o("marian"),rKe=o(" \u2014 "),uR=a("a"),tKe=o("MarianConfig"),aKe=o(" (Marian model)"),nKe=l(),jm=a("li"),jae=a("strong"),sKe=o("maskformer"),lKe=o(" \u2014 "),bR=a("a"),iKe=o("MaskFormerConfig"),dKe=o(" (MaskFormer model)"),cKe=l(),Dm=a("li"),Dae=a("strong"),fKe=o("mbart"),mKe=o(" \u2014 "),vR=a("a"),gKe=o("MBartConfig"),hKe=o(" (mBART model)"),pKe=l(),Gm=a("li"),Gae=a("strong"),_Ke=o("mctct"),uKe=o(" \u2014 "),FR=a("a"),bKe=o("MCTCTConfig"),vKe=o(" (M-CTC-T model)"),FKe=l(),Om=a("li"),Oae=a("strong"),TKe=o("megatron-bert"),MKe=o(" \u2014 "),TR=a("a"),EKe=o("MegatronBertConfig"),CKe=o(" (Megatron-BERT model)"),wKe=l(),Vm=a("li"),Vae=a("strong"),AKe=o("mobilebert"),LKe=o(" \u2014 "),MR=a("a"),yKe=o("MobileBertConfig"),xKe=o(" (MobileBERT model)"),$Ke=l(),Xm=a("li"),Xae=a("strong"),kKe=o("mpnet"),SKe=o(" \u2014 "),ER=a("a"),RKe=o("MPNetConfig"),PKe=o(" (MPNet model)"),BKe=l(),zm=a("li"),zae=a("strong"),IKe=o("mt5"),NKe=o(" \u2014 "),CR=a("a"),qKe=o("MT5Config"),jKe=o(" (MT5 model)"),DKe=l(),Wm=a("li"),Wae=a("strong"),GKe=o("nezha"),OKe=o(" \u2014 "),wR=a("a"),VKe=o("NezhaConfig"),XKe=o(" (Nezha model)"),zKe=l(),Qm=a("li"),Qae=a("strong"),WKe=o("nystromformer"),QKe=o(" \u2014 "),AR=a("a"),HKe=o("NystromformerConfig"),UKe=o(" (Nystr\xF6mformer model)"),JKe=l(),Hm=a("li"),Hae=a("strong"),YKe=o("openai-gpt"),KKe=o(" \u2014 "),LR=a("a"),ZKe=o("OpenAIGPTConfig"),eZe=o(" (OpenAI GPT model)"),oZe=l(),Um=a("li"),Uae=a("strong"),rZe=o("opt"),tZe=o(" \u2014 "),yR=a("a"),aZe=o("OPTConfig"),nZe=o(" (OPT model)"),sZe=l(),Jm=a("li"),Jae=a("strong"),lZe=o("pegasus"),iZe=o(" \u2014 "),xR=a("a"),dZe=o("PegasusConfig"),cZe=o(" (Pegasus model)"),fZe=l(),Ym=a("li"),Yae=a("strong"),mZe=o("perceiver"),gZe=o(" \u2014 "),$R=a("a"),hZe=o("PerceiverConfig"),pZe=o(" (Perceiver model)"),_Ze=l(),Km=a("li"),Kae=a("strong"),uZe=o("plbart"),bZe=o(" \u2014 "),kR=a("a"),vZe=o("PLBartConfig"),FZe=o(" (PLBart model)"),TZe=l(),Zm=a("li"),Zae=a("strong"),MZe=o("poolformer"),EZe=o(" \u2014 "),SR=a("a"),CZe=o("PoolFormerConfig"),wZe=o(" (PoolFormer model)"),AZe=l(),eg=a("li"),ene=a("strong"),LZe=o("prophetnet"),yZe=o(" \u2014 "),RR=a("a"),xZe=o("ProphetNetConfig"),$Ze=o(" (ProphetNet model)"),kZe=l(),og=a("li"),one=a("strong"),SZe=o("qdqbert"),RZe=o(" \u2014 "),PR=a("a"),PZe=o("QDQBertConfig"),BZe=o(" (QDQBert model)"),IZe=l(),rg=a("li"),rne=a("strong"),NZe=o("rag"),qZe=o(" \u2014 "),BR=a("a"),jZe=o("RagConfig"),DZe=o(" (RAG model)"),GZe=l(),tg=a("li"),tne=a("strong"),OZe=o("realm"),VZe=o(" \u2014 "),IR=a("a"),XZe=o("RealmConfig"),zZe=o(" (REALM model)"),WZe=l(),ag=a("li"),ane=a("strong"),QZe=o("reformer"),HZe=o(" \u2014 "),NR=a("a"),UZe=o("ReformerConfig"),JZe=o(" (Reformer model)"),YZe=l(),ng=a("li"),nne=a("strong"),KZe=o("regnet"),ZZe=o(" \u2014 "),qR=a("a"),eeo=o("RegNetConfig"),oeo=o(" (RegNet model)"),reo=l(),sg=a("li"),sne=a("strong"),teo=o("rembert"),aeo=o(" \u2014 "),jR=a("a"),neo=o("RemBertConfig"),seo=o(" (RemBERT model)"),leo=l(),lg=a("li"),lne=a("strong"),ieo=o("resnet"),deo=o(" \u2014 "),DR=a("a"),ceo=o("ResNetConfig"),feo=o(" (ResNet model)"),meo=l(),ig=a("li"),ine=a("strong"),geo=o("retribert"),heo=o(" \u2014 "),GR=a("a"),peo=o("RetriBertConfig"),_eo=o(" (RetriBERT model)"),ueo=l(),dg=a("li"),dne=a("strong"),beo=o("roberta"),veo=o(" \u2014 "),OR=a("a"),Feo=o("RobertaConfig"),Teo=o(" (RoBERTa model)"),Meo=l(),cg=a("li"),cne=a("strong"),Eeo=o("roformer"),Ceo=o(" \u2014 "),VR=a("a"),weo=o("RoFormerConfig"),Aeo=o(" (RoFormer model)"),Leo=l(),fg=a("li"),fne=a("strong"),yeo=o("segformer"),xeo=o(" \u2014 "),XR=a("a"),$eo=o("SegformerConfig"),keo=o(" (SegFormer model)"),Seo=l(),mg=a("li"),mne=a("strong"),Reo=o("sew"),Peo=o(" \u2014 "),zR=a("a"),Beo=o("SEWConfig"),Ieo=o(" (SEW model)"),Neo=l(),gg=a("li"),gne=a("strong"),qeo=o("sew-d"),jeo=o(" \u2014 "),WR=a("a"),Deo=o("SEWDConfig"),Geo=o(" (SEW-D model)"),Oeo=l(),hg=a("li"),hne=a("strong"),Veo=o("speech-encoder-decoder"),Xeo=o(" \u2014 "),QR=a("a"),zeo=o("SpeechEncoderDecoderConfig"),Weo=o(" (Speech Encoder decoder model)"),Qeo=l(),pg=a("li"),pne=a("strong"),Heo=o("speech_to_text"),Ueo=o(" \u2014 "),HR=a("a"),Jeo=o("Speech2TextConfig"),Yeo=o(" (Speech2Text model)"),Keo=l(),_g=a("li"),_ne=a("strong"),Zeo=o("speech_to_text_2"),eoo=o(" \u2014 "),UR=a("a"),ooo=o("Speech2Text2Config"),roo=o(" (Speech2Text2 model)"),too=l(),ug=a("li"),une=a("strong"),aoo=o("splinter"),noo=o(" \u2014 "),JR=a("a"),soo=o("SplinterConfig"),loo=o(" (Splinter model)"),ioo=l(),bg=a("li"),bne=a("strong"),doo=o("squeezebert"),coo=o(" \u2014 "),YR=a("a"),foo=o("SqueezeBertConfig"),moo=o(" (SqueezeBERT model)"),goo=l(),vg=a("li"),vne=a("strong"),hoo=o("swin"),poo=o(" \u2014 "),KR=a("a"),_oo=o("SwinConfig"),uoo=o(" (Swin Transformer model)"),boo=l(),Fg=a("li"),Fne=a("strong"),voo=o("t5"),Foo=o(" \u2014 "),ZR=a("a"),Too=o("T5Config"),Moo=o(" (T5 model)"),Eoo=l(),Tg=a("li"),Tne=a("strong"),Coo=o("tapas"),woo=o(" \u2014 "),eP=a("a"),Aoo=o("TapasConfig"),Loo=o(" (TAPAS model)"),yoo=l(),Mg=a("li"),Mne=a("strong"),xoo=o("trajectory_transformer"),$oo=o(" \u2014 "),oP=a("a"),koo=o("TrajectoryTransformerConfig"),Soo=o(" (Trajectory Transformer model)"),Roo=l(),Eg=a("li"),Ene=a("strong"),Poo=o("transfo-xl"),Boo=o(" \u2014 "),rP=a("a"),Ioo=o("TransfoXLConfig"),Noo=o(" (Transformer-XL model)"),qoo=l(),Cg=a("li"),Cne=a("strong"),joo=o("trocr"),Doo=o(" \u2014 "),tP=a("a"),Goo=o("TrOCRConfig"),Ooo=o(" (TrOCR model)"),Voo=l(),wg=a("li"),wne=a("strong"),Xoo=o("unispeech"),zoo=o(" \u2014 "),aP=a("a"),Woo=o("UniSpeechConfig"),Qoo=o(" (UniSpeech model)"),Hoo=l(),Ag=a("li"),Ane=a("strong"),Uoo=o("unispeech-sat"),Joo=o(" \u2014 "),nP=a("a"),Yoo=o("UniSpeechSatConfig"),Koo=o(" (UniSpeechSat model)"),Zoo=l(),Lg=a("li"),Lne=a("strong"),ero=o("van"),oro=o(" \u2014 "),sP=a("a"),rro=o("VanConfig"),tro=o(" (VAN model)"),aro=l(),yg=a("li"),yne=a("strong"),nro=o("vilt"),sro=o(" \u2014 "),lP=a("a"),lro=o("ViltConfig"),iro=o(" (ViLT model)"),dro=l(),xg=a("li"),xne=a("strong"),cro=o("vision-encoder-decoder"),fro=o(" \u2014 "),iP=a("a"),mro=o("VisionEncoderDecoderConfig"),gro=o(" (Vision Encoder decoder model)"),hro=l(),$g=a("li"),$ne=a("strong"),pro=o("vision-text-dual-encoder"),_ro=o(" \u2014 "),dP=a("a"),uro=o("VisionTextDualEncoderConfig"),bro=o(" (VisionTextDualEncoder model)"),vro=l(),kg=a("li"),kne=a("strong"),Fro=o("visual_bert"),Tro=o(" \u2014 "),cP=a("a"),Mro=o("VisualBertConfig"),Ero=o(" (VisualBERT model)"),Cro=l(),Sg=a("li"),Sne=a("strong"),wro=o("vit"),Aro=o(" \u2014 "),fP=a("a"),Lro=o("ViTConfig"),yro=o(" (ViT model)"),xro=l(),Rg=a("li"),Rne=a("strong"),$ro=o("vit_mae"),kro=o(" \u2014 "),mP=a("a"),Sro=o("ViTMAEConfig"),Rro=o(" (ViTMAE model)"),Pro=l(),Pg=a("li"),Pne=a("strong"),Bro=o("wav2vec2"),Iro=o(" \u2014 "),gP=a("a"),Nro=o("Wav2Vec2Config"),qro=o(" (Wav2Vec2 model)"),jro=l(),Bg=a("li"),Bne=a("strong"),Dro=o("wav2vec2-conformer"),Gro=o(" \u2014 "),hP=a("a"),Oro=o("Wav2Vec2ConformerConfig"),Vro=o(" (Wav2Vec2-Conformer model)"),Xro=l(),Ig=a("li"),Ine=a("strong"),zro=o("wavlm"),Wro=o(" \u2014 "),pP=a("a"),Qro=o("WavLMConfig"),Hro=o(" (WavLM model)"),Uro=l(),Ng=a("li"),Nne=a("strong"),Jro=o("xglm"),Yro=o(" \u2014 "),_P=a("a"),Kro=o("XGLMConfig"),Zro=o(" (XGLM model)"),eto=l(),qg=a("li"),qne=a("strong"),oto=o("xlm"),rto=o(" \u2014 "),uP=a("a"),tto=o("XLMConfig"),ato=o(" (XLM model)"),nto=l(),jg=a("li"),jne=a("strong"),sto=o("xlm-prophetnet"),lto=o(" \u2014 "),bP=a("a"),ito=o("XLMProphetNetConfig"),dto=o(" (XLM-ProphetNet model)"),cto=l(),Dg=a("li"),Dne=a("strong"),fto=o("xlm-roberta"),mto=o(" \u2014 "),vP=a("a"),gto=o("XLMRobertaConfig"),hto=o(" (XLM-RoBERTa model)"),pto=l(),Gg=a("li"),Gne=a("strong"),_to=o("xlm-roberta-xl"),uto=o(" \u2014 "),FP=a("a"),bto=o("XLMRobertaXLConfig"),vto=o(" (XLM-RoBERTa-XL model)"),Fto=l(),Og=a("li"),One=a("strong"),Tto=o("xlnet"),Mto=o(" \u2014 "),TP=a("a"),Eto=o("XLNetConfig"),Cto=o(" (XLNet model)"),wto=l(),Vg=a("li"),Vne=a("strong"),Ato=o("yolos"),Lto=o(" \u2014 "),MP=a("a"),yto=o("YolosConfig"),xto=o(" (YOLOS model)"),$to=l(),Xg=a("li"),Xne=a("strong"),kto=o("yoso"),Sto=o(" \u2014 "),EP=a("a"),Rto=o("YosoConfig"),Pto=o(" (YOSO model)"),Bto=l(),F(zg.$$.fragment),Ito=l(),Wg=a("div"),F(OA.$$.fragment),Nto=l(),zne=a("p"),qto=o("Register a new configuration for this class."),bOe=l(),Pi=a("h2"),Qg=a("a"),Wne=a("span"),F(VA.$$.fragment),jto=l(),Qne=a("span"),Dto=o("AutoTokenizer"),vOe=l(),Ao=a("div"),F(XA.$$.fragment),Gto=l(),zA=a("p"),Oto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CP=a("a"),Vto=o("AutoTokenizer.from_pretrained()"),Xto=o(" class method."),zto=l(),WA=a("p"),Wto=o("This class cannot be instantiated directly using "),Hne=a("code"),Qto=o("__init__()"),Hto=o(" (throws an error)."),Uto=l(),Lr=a("div"),F(QA.$$.fragment),Jto=l(),Une=a("p"),Yto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Kto=l(),Sa=a("p"),Zto=o("The tokenizer class to instantiate is selected based on the "),Jne=a("code"),eao=o("model_type"),oao=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),rao=o("pretrained_model_name_or_path"),tao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),aao=o("pretrained_model_name_or_path"),nao=o(":"),sao=l(),k=a("ul"),qn=a("li"),Zne=a("strong"),lao=o("albert"),iao=o(" \u2014 "),wP=a("a"),dao=o("AlbertTokenizer"),cao=o(" or "),AP=a("a"),fao=o("AlbertTokenizerFast"),mao=o(" (ALBERT model)"),gao=l(),jn=a("li"),ese=a("strong"),hao=o("bart"),pao=o(" \u2014 "),LP=a("a"),_ao=o("BartTokenizer"),uao=o(" or "),yP=a("a"),bao=o("BartTokenizerFast"),vao=o(" (BART model)"),Fao=l(),Dn=a("li"),ose=a("strong"),Tao=o("barthez"),Mao=o(" \u2014 "),xP=a("a"),Eao=o("BarthezTokenizer"),Cao=o(" or "),$P=a("a"),wao=o("BarthezTokenizerFast"),Aao=o(" (BARThez model)"),Lao=l(),Hg=a("li"),rse=a("strong"),yao=o("bartpho"),xao=o(" \u2014 "),kP=a("a"),$ao=o("BartphoTokenizer"),kao=o(" (BARTpho model)"),Sao=l(),Gn=a("li"),tse=a("strong"),Rao=o("bert"),Pao=o(" \u2014 "),SP=a("a"),Bao=o("BertTokenizer"),Iao=o(" or "),RP=a("a"),Nao=o("BertTokenizerFast"),qao=o(" (BERT model)"),jao=l(),Ug=a("li"),ase=a("strong"),Dao=o("bert-generation"),Gao=o(" \u2014 "),PP=a("a"),Oao=o("BertGenerationTokenizer"),Vao=o(" (Bert Generation model)"),Xao=l(),Jg=a("li"),nse=a("strong"),zao=o("bert-japanese"),Wao=o(" \u2014 "),BP=a("a"),Qao=o("BertJapaneseTokenizer"),Hao=o(" (BertJapanese model)"),Uao=l(),Yg=a("li"),sse=a("strong"),Jao=o("bertweet"),Yao=o(" \u2014 "),IP=a("a"),Kao=o("BertweetTokenizer"),Zao=o(" (BERTweet model)"),eno=l(),On=a("li"),lse=a("strong"),ono=o("big_bird"),rno=o(" \u2014 "),NP=a("a"),tno=o("BigBirdTokenizer"),ano=o(" or "),qP=a("a"),nno=o("BigBirdTokenizerFast"),sno=o(" (BigBird model)"),lno=l(),Vn=a("li"),ise=a("strong"),ino=o("bigbird_pegasus"),dno=o(" \u2014 "),jP=a("a"),cno=o("PegasusTokenizer"),fno=o(" or "),DP=a("a"),mno=o("PegasusTokenizerFast"),gno=o(" (BigBird-Pegasus model)"),hno=l(),Xn=a("li"),dse=a("strong"),pno=o("blenderbot"),_no=o(" \u2014 "),GP=a("a"),uno=o("BlenderbotTokenizer"),bno=o(" or "),OP=a("a"),vno=o("BlenderbotTokenizerFast"),Fno=o(" (Blenderbot model)"),Tno=l(),Kg=a("li"),cse=a("strong"),Mno=o("blenderbot-small"),Eno=o(" \u2014 "),VP=a("a"),Cno=o("BlenderbotSmallTokenizer"),wno=o(" (BlenderbotSmall model)"),Ano=l(),Zg=a("li"),fse=a("strong"),Lno=o("bloom"),yno=o(" \u2014 "),XP=a("a"),xno=o("BloomTokenizerFast"),$no=o(" (BLOOM model)"),kno=l(),eh=a("li"),mse=a("strong"),Sno=o("byt5"),Rno=o(" \u2014 "),zP=a("a"),Pno=o("ByT5Tokenizer"),Bno=o(" (ByT5 model)"),Ino=l(),zn=a("li"),gse=a("strong"),Nno=o("camembert"),qno=o(" \u2014 "),WP=a("a"),jno=o("CamembertTokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("CamembertTokenizerFast"),Ono=o(" (CamemBERT model)"),Vno=l(),oh=a("li"),hse=a("strong"),Xno=o("canine"),zno=o(" \u2014 "),HP=a("a"),Wno=o("CanineTokenizer"),Qno=o(" (CANINE model)"),Hno=l(),Wn=a("li"),pse=a("strong"),Uno=o("clip"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("CLIPTokenizer"),Kno=o(" or "),JP=a("a"),Zno=o("CLIPTokenizerFast"),eso=o(" (CLIP model)"),oso=l(),Qn=a("li"),_se=a("strong"),rso=o("codegen"),tso=o(" \u2014 "),YP=a("a"),aso=o("CodeGenTokenizer"),nso=o(" or "),KP=a("a"),sso=o("CodeGenTokenizerFast"),lso=o(" (CodeGen model)"),iso=l(),Hn=a("li"),use=a("strong"),dso=o("convbert"),cso=o(" \u2014 "),ZP=a("a"),fso=o("ConvBertTokenizer"),mso=o(" or "),eB=a("a"),gso=o("ConvBertTokenizerFast"),hso=o(" (ConvBERT model)"),pso=l(),Un=a("li"),bse=a("strong"),_so=o("cpm"),uso=o(" \u2014 "),oB=a("a"),bso=o("CpmTokenizer"),vso=o(" or "),rB=a("a"),Fso=o("CpmTokenizerFast"),Tso=o(" (CPM model)"),Mso=l(),rh=a("li"),vse=a("strong"),Eso=o("ctrl"),Cso=o(" \u2014 "),tB=a("a"),wso=o("CTRLTokenizer"),Aso=o(" (CTRL model)"),Lso=l(),Jn=a("li"),Fse=a("strong"),yso=o("data2vec-text"),xso=o(" \u2014 "),aB=a("a"),$so=o("RobertaTokenizer"),kso=o(" or "),nB=a("a"),Sso=o("RobertaTokenizerFast"),Rso=o(" (Data2VecText model)"),Pso=l(),Yn=a("li"),Tse=a("strong"),Bso=o("deberta"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("DebertaTokenizer"),qso=o(" or "),lB=a("a"),jso=o("DebertaTokenizerFast"),Dso=o(" (DeBERTa model)"),Gso=l(),Kn=a("li"),Mse=a("strong"),Oso=o("deberta-v2"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("DebertaV2Tokenizer"),zso=o(" or "),dB=a("a"),Wso=o("DebertaV2TokenizerFast"),Qso=o(" (DeBERTa-v2 model)"),Hso=l(),Zn=a("li"),Ese=a("strong"),Uso=o("distilbert"),Jso=o(" \u2014 "),cB=a("a"),Yso=o("DistilBertTokenizer"),Kso=o(" or "),fB=a("a"),Zso=o("DistilBertTokenizerFast"),elo=o(" (DistilBERT model)"),olo=l(),es=a("li"),Cse=a("strong"),rlo=o("dpr"),tlo=o(" \u2014 "),mB=a("a"),alo=o("DPRQuestionEncoderTokenizer"),nlo=o(" or "),gB=a("a"),slo=o("DPRQuestionEncoderTokenizerFast"),llo=o(" (DPR model)"),ilo=l(),os=a("li"),wse=a("strong"),dlo=o("electra"),clo=o(" \u2014 "),hB=a("a"),flo=o("ElectraTokenizer"),mlo=o(" or "),pB=a("a"),glo=o("ElectraTokenizerFast"),hlo=o(" (ELECTRA model)"),plo=l(),th=a("li"),Ase=a("strong"),_lo=o("flaubert"),ulo=o(" \u2014 "),_B=a("a"),blo=o("FlaubertTokenizer"),vlo=o(" (FlauBERT model)"),Flo=l(),rs=a("li"),Lse=a("strong"),Tlo=o("fnet"),Mlo=o(" \u2014 "),uB=a("a"),Elo=o("FNetTokenizer"),Clo=o(" or "),bB=a("a"),wlo=o("FNetTokenizerFast"),Alo=o(" (FNet model)"),Llo=l(),ah=a("li"),yse=a("strong"),ylo=o("fsmt"),xlo=o(" \u2014 "),vB=a("a"),$lo=o("FSMTTokenizer"),klo=o(" (FairSeq Machine-Translation model)"),Slo=l(),ts=a("li"),xse=a("strong"),Rlo=o("funnel"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("FunnelTokenizer"),Ilo=o(" or "),TB=a("a"),Nlo=o("FunnelTokenizerFast"),qlo=o(" (Funnel Transformer model)"),jlo=l(),as=a("li"),$se=a("strong"),Dlo=o("gpt2"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("GPT2Tokenizer"),Vlo=o(" or "),EB=a("a"),Xlo=o("GPT2TokenizerFast"),zlo=o(" (OpenAI GPT-2 model)"),Wlo=l(),ns=a("li"),kse=a("strong"),Qlo=o("gpt_neo"),Hlo=o(" \u2014 "),CB=a("a"),Ulo=o("GPT2Tokenizer"),Jlo=o(" or "),wB=a("a"),Ylo=o("GPT2TokenizerFast"),Klo=o(" (GPT Neo model)"),Zlo=l(),nh=a("li"),Sse=a("strong"),eio=o("gpt_neox"),oio=o(" \u2014 "),AB=a("a"),rio=o("GPTNeoXTokenizerFast"),tio=o(" (GPT NeoX model)"),aio=l(),ss=a("li"),Rse=a("strong"),nio=o("gptj"),sio=o(" \u2014 "),LB=a("a"),lio=o("GPT2Tokenizer"),iio=o(" or "),yB=a("a"),dio=o("GPT2TokenizerFast"),cio=o(" (GPT-J model)"),fio=l(),ls=a("li"),Pse=a("strong"),mio=o("herbert"),gio=o(" \u2014 "),xB=a("a"),hio=o("HerbertTokenizer"),pio=o(" or "),$B=a("a"),_io=o("HerbertTokenizerFast"),uio=o(" (HerBERT model)"),bio=l(),sh=a("li"),Bse=a("strong"),vio=o("hubert"),Fio=o(" \u2014 "),kB=a("a"),Tio=o("Wav2Vec2CTCTokenizer"),Mio=o(" (Hubert model)"),Eio=l(),is=a("li"),Ise=a("strong"),Cio=o("ibert"),wio=o(" \u2014 "),SB=a("a"),Aio=o("RobertaTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("RobertaTokenizerFast"),xio=o(" (I-BERT model)"),$io=l(),ds=a("li"),Nse=a("strong"),kio=o("layoutlm"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("LayoutLMTokenizer"),Pio=o(" or "),BB=a("a"),Bio=o("LayoutLMTokenizerFast"),Iio=o(" (LayoutLM model)"),Nio=l(),cs=a("li"),qse=a("strong"),qio=o("layoutlmv2"),jio=o(" \u2014 "),IB=a("a"),Dio=o("LayoutLMv2Tokenizer"),Gio=o(" or "),NB=a("a"),Oio=o("LayoutLMv2TokenizerFast"),Vio=o(" (LayoutLMv2 model)"),Xio=l(),fs=a("li"),jse=a("strong"),zio=o("layoutlmv3"),Wio=o(" \u2014 "),qB=a("a"),Qio=o("LayoutLMv3Tokenizer"),Hio=o(" or "),jB=a("a"),Uio=o("LayoutLMv3TokenizerFast"),Jio=o(" (LayoutLMv3 model)"),Yio=l(),ms=a("li"),Dse=a("strong"),Kio=o("layoutxlm"),Zio=o(" \u2014 "),DB=a("a"),edo=o("LayoutXLMTokenizer"),odo=o(" or "),GB=a("a"),rdo=o("LayoutXLMTokenizerFast"),tdo=o(" (LayoutXLM model)"),ado=l(),gs=a("li"),Gse=a("strong"),ndo=o("led"),sdo=o(" \u2014 "),OB=a("a"),ldo=o("LEDTokenizer"),ido=o(" or "),VB=a("a"),ddo=o("LEDTokenizerFast"),cdo=o(" (LED model)"),fdo=l(),hs=a("li"),Ose=a("strong"),mdo=o("longformer"),gdo=o(" \u2014 "),XB=a("a"),hdo=o("LongformerTokenizer"),pdo=o(" or "),zB=a("a"),_do=o("LongformerTokenizerFast"),udo=o(" (Longformer model)"),bdo=l(),ps=a("li"),Vse=a("strong"),vdo=o("longt5"),Fdo=o(" \u2014 "),WB=a("a"),Tdo=o("T5Tokenizer"),Mdo=o(" or "),QB=a("a"),Edo=o("T5TokenizerFast"),Cdo=o(" (LongT5 model)"),wdo=l(),lh=a("li"),Xse=a("strong"),Ado=o("luke"),Ldo=o(" \u2014 "),HB=a("a"),ydo=o("LukeTokenizer"),xdo=o(" (LUKE model)"),$do=l(),_s=a("li"),zse=a("strong"),kdo=o("lxmert"),Sdo=o(" \u2014 "),UB=a("a"),Rdo=o("LxmertTokenizer"),Pdo=o(" or "),JB=a("a"),Bdo=o("LxmertTokenizerFast"),Ido=o(" (LXMERT model)"),Ndo=l(),ih=a("li"),Wse=a("strong"),qdo=o("m2m_100"),jdo=o(" \u2014 "),YB=a("a"),Ddo=o("M2M100Tokenizer"),Gdo=o(" (M2M100 model)"),Odo=l(),dh=a("li"),Qse=a("strong"),Vdo=o("marian"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("MarianTokenizer"),Wdo=o(" (Marian model)"),Qdo=l(),us=a("li"),Hse=a("strong"),Hdo=o("mbart"),Udo=o(" \u2014 "),ZB=a("a"),Jdo=o("MBartTokenizer"),Ydo=o(" or "),eI=a("a"),Kdo=o("MBartTokenizerFast"),Zdo=o(" (mBART model)"),eco=l(),bs=a("li"),Use=a("strong"),oco=o("mbart50"),rco=o(" \u2014 "),oI=a("a"),tco=o("MBart50Tokenizer"),aco=o(" or "),rI=a("a"),nco=o("MBart50TokenizerFast"),sco=o(" (mBART-50 model)"),lco=l(),vs=a("li"),Jse=a("strong"),ico=o("megatron-bert"),dco=o(" \u2014 "),tI=a("a"),cco=o("BertTokenizer"),fco=o(" or "),aI=a("a"),mco=o("BertTokenizerFast"),gco=o(" (Megatron-BERT model)"),hco=l(),ch=a("li"),Yse=a("strong"),pco=o("mluke"),_co=o(" \u2014 "),nI=a("a"),uco=o("MLukeTokenizer"),bco=o(" (mLUKE model)"),vco=l(),Fs=a("li"),Kse=a("strong"),Fco=o("mobilebert"),Tco=o(" \u2014 "),sI=a("a"),Mco=o("MobileBertTokenizer"),Eco=o(" or "),lI=a("a"),Cco=o("MobileBertTokenizerFast"),wco=o(" (MobileBERT model)"),Aco=l(),Ts=a("li"),Zse=a("strong"),Lco=o("mpnet"),yco=o(" \u2014 "),iI=a("a"),xco=o("MPNetTokenizer"),$co=o(" or "),dI=a("a"),kco=o("MPNetTokenizerFast"),Sco=o(" (MPNet model)"),Rco=l(),Ms=a("li"),ele=a("strong"),Pco=o("mt5"),Bco=o(" \u2014 "),cI=a("a"),Ico=o("MT5Tokenizer"),Nco=o(" or "),fI=a("a"),qco=o("MT5TokenizerFast"),jco=o(" (MT5 model)"),Dco=l(),Es=a("li"),ole=a("strong"),Gco=o("nezha"),Oco=o(" \u2014 "),mI=a("a"),Vco=o("BertTokenizer"),Xco=o(" or "),gI=a("a"),zco=o("BertTokenizerFast"),Wco=o(" (Nezha model)"),Qco=l(),Cs=a("li"),rle=a("strong"),Hco=o("nystromformer"),Uco=o(" \u2014 "),hI=a("a"),Jco=o("AlbertTokenizer"),Yco=o(" or "),pI=a("a"),Kco=o("AlbertTokenizerFast"),Zco=o(" (Nystr\xF6mformer model)"),efo=l(),ws=a("li"),tle=a("strong"),ofo=o("openai-gpt"),rfo=o(" \u2014 "),_I=a("a"),tfo=o("OpenAIGPTTokenizer"),afo=o(" or "),uI=a("a"),nfo=o("OpenAIGPTTokenizerFast"),sfo=o(" (OpenAI GPT model)"),lfo=l(),fh=a("li"),ale=a("strong"),ifo=o("opt"),dfo=o(" \u2014 "),bI=a("a"),cfo=o("GPT2Tokenizer"),ffo=o(" (OPT model)"),mfo=l(),As=a("li"),nle=a("strong"),gfo=o("pegasus"),hfo=o(" \u2014 "),vI=a("a"),pfo=o("PegasusTokenizer"),_fo=o(" or "),FI=a("a"),ufo=o("PegasusTokenizerFast"),bfo=o(" (Pegasus model)"),vfo=l(),mh=a("li"),sle=a("strong"),Ffo=o("perceiver"),Tfo=o(" \u2014 "),TI=a("a"),Mfo=o("PerceiverTokenizer"),Efo=o(" (Perceiver model)"),Cfo=l(),gh=a("li"),lle=a("strong"),wfo=o("phobert"),Afo=o(" \u2014 "),MI=a("a"),Lfo=o("PhobertTokenizer"),yfo=o(" (PhoBERT model)"),xfo=l(),hh=a("li"),ile=a("strong"),$fo=o("plbart"),kfo=o(" \u2014 "),EI=a("a"),Sfo=o("PLBartTokenizer"),Rfo=o(" (PLBart model)"),Pfo=l(),ph=a("li"),dle=a("strong"),Bfo=o("prophetnet"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("ProphetNetTokenizer"),qfo=o(" (ProphetNet model)"),jfo=l(),Ls=a("li"),cle=a("strong"),Dfo=o("qdqbert"),Gfo=o(" \u2014 "),wI=a("a"),Ofo=o("BertTokenizer"),Vfo=o(" or "),AI=a("a"),Xfo=o("BertTokenizerFast"),zfo=o(" (QDQBert model)"),Wfo=l(),_h=a("li"),fle=a("strong"),Qfo=o("rag"),Hfo=o(" \u2014 "),LI=a("a"),Ufo=o("RagTokenizer"),Jfo=o(" (RAG model)"),Yfo=l(),ys=a("li"),mle=a("strong"),Kfo=o("realm"),Zfo=o(" \u2014 "),yI=a("a"),emo=o("RealmTokenizer"),omo=o(" or "),xI=a("a"),rmo=o("RealmTokenizerFast"),tmo=o(" (REALM model)"),amo=l(),xs=a("li"),gle=a("strong"),nmo=o("reformer"),smo=o(" \u2014 "),$I=a("a"),lmo=o("ReformerTokenizer"),imo=o(" or "),kI=a("a"),dmo=o("ReformerTokenizerFast"),cmo=o(" (Reformer model)"),fmo=l(),$s=a("li"),hle=a("strong"),mmo=o("rembert"),gmo=o(" \u2014 "),SI=a("a"),hmo=o("RemBertTokenizer"),pmo=o(" or "),RI=a("a"),_mo=o("RemBertTokenizerFast"),umo=o(" (RemBERT model)"),bmo=l(),ks=a("li"),ple=a("strong"),vmo=o("retribert"),Fmo=o(" \u2014 "),PI=a("a"),Tmo=o("RetriBertTokenizer"),Mmo=o(" or "),BI=a("a"),Emo=o("RetriBertTokenizerFast"),Cmo=o(" (RetriBERT model)"),wmo=l(),Ss=a("li"),_le=a("strong"),Amo=o("roberta"),Lmo=o(" \u2014 "),II=a("a"),ymo=o("RobertaTokenizer"),xmo=o(" or "),NI=a("a"),$mo=o("RobertaTokenizerFast"),kmo=o(" (RoBERTa model)"),Smo=l(),Rs=a("li"),ule=a("strong"),Rmo=o("roformer"),Pmo=o(" \u2014 "),qI=a("a"),Bmo=o("RoFormerTokenizer"),Imo=o(" or "),jI=a("a"),Nmo=o("RoFormerTokenizerFast"),qmo=o(" (RoFormer model)"),jmo=l(),uh=a("li"),ble=a("strong"),Dmo=o("speech_to_text"),Gmo=o(" \u2014 "),DI=a("a"),Omo=o("Speech2TextTokenizer"),Vmo=o(" (Speech2Text model)"),Xmo=l(),bh=a("li"),vle=a("strong"),zmo=o("speech_to_text_2"),Wmo=o(" \u2014 "),GI=a("a"),Qmo=o("Speech2Text2Tokenizer"),Hmo=o(" (Speech2Text2 model)"),Umo=l(),Ps=a("li"),Fle=a("strong"),Jmo=o("splinter"),Ymo=o(" \u2014 "),OI=a("a"),Kmo=o("SplinterTokenizer"),Zmo=o(" or "),VI=a("a"),ego=o("SplinterTokenizerFast"),ogo=o(" (Splinter model)"),rgo=l(),Bs=a("li"),Tle=a("strong"),tgo=o("squeezebert"),ago=o(" \u2014 "),XI=a("a"),ngo=o("SqueezeBertTokenizer"),sgo=o(" or "),zI=a("a"),lgo=o("SqueezeBertTokenizerFast"),igo=o(" (SqueezeBERT model)"),dgo=l(),Is=a("li"),Mle=a("strong"),cgo=o("t5"),fgo=o(" \u2014 "),WI=a("a"),mgo=o("T5Tokenizer"),ggo=o(" or "),QI=a("a"),hgo=o("T5TokenizerFast"),pgo=o(" (T5 model)"),_go=l(),vh=a("li"),Ele=a("strong"),ugo=o("tapas"),bgo=o(" \u2014 "),HI=a("a"),vgo=o("TapasTokenizer"),Fgo=o(" (TAPAS model)"),Tgo=l(),Fh=a("li"),Cle=a("strong"),Mgo=o("tapex"),Ego=o(" \u2014 "),UI=a("a"),Cgo=o("TapexTokenizer"),wgo=o(" (TAPEX model)"),Ago=l(),Th=a("li"),wle=a("strong"),Lgo=o("transfo-xl"),ygo=o(" \u2014 "),JI=a("a"),xgo=o("TransfoXLTokenizer"),$go=o(" (Transformer-XL model)"),kgo=l(),Ns=a("li"),Ale=a("strong"),Sgo=o("vilt"),Rgo=o(" \u2014 "),YI=a("a"),Pgo=o("BertTokenizer"),Bgo=o(" or "),KI=a("a"),Igo=o("BertTokenizerFast"),Ngo=o(" (ViLT model)"),qgo=l(),qs=a("li"),Lle=a("strong"),jgo=o("visual_bert"),Dgo=o(" \u2014 "),ZI=a("a"),Ggo=o("BertTokenizer"),Ogo=o(" or "),eN=a("a"),Vgo=o("BertTokenizerFast"),Xgo=o(" (VisualBERT model)"),zgo=l(),Mh=a("li"),yle=a("strong"),Wgo=o("wav2vec2"),Qgo=o(" \u2014 "),oN=a("a"),Hgo=o("Wav2Vec2CTCTokenizer"),Ugo=o(" (Wav2Vec2 model)"),Jgo=l(),Eh=a("li"),xle=a("strong"),Ygo=o("wav2vec2-conformer"),Kgo=o(" \u2014 "),rN=a("a"),Zgo=o("Wav2Vec2CTCTokenizer"),eho=o(" (Wav2Vec2-Conformer model)"),oho=l(),Ch=a("li"),$le=a("strong"),rho=o("wav2vec2_phoneme"),tho=o(" \u2014 "),tN=a("a"),aho=o("Wav2Vec2PhonemeCTCTokenizer"),nho=o(" (Wav2Vec2Phoneme model)"),sho=l(),js=a("li"),kle=a("strong"),lho=o("xglm"),iho=o(" \u2014 "),aN=a("a"),dho=o("XGLMTokenizer"),cho=o(" or "),nN=a("a"),fho=o("XGLMTokenizerFast"),mho=o(" (XGLM model)"),gho=l(),wh=a("li"),Sle=a("strong"),hho=o("xlm"),pho=o(" \u2014 "),sN=a("a"),_ho=o("XLMTokenizer"),uho=o(" (XLM model)"),bho=l(),Ah=a("li"),Rle=a("strong"),vho=o("xlm-prophetnet"),Fho=o(" \u2014 "),lN=a("a"),Tho=o("XLMProphetNetTokenizer"),Mho=o(" (XLM-ProphetNet model)"),Eho=l(),Ds=a("li"),Ple=a("strong"),Cho=o("xlm-roberta"),who=o(" \u2014 "),iN=a("a"),Aho=o("XLMRobertaTokenizer"),Lho=o(" or "),dN=a("a"),yho=o("XLMRobertaTokenizerFast"),xho=o(" (XLM-RoBERTa model)"),$ho=l(),Gs=a("li"),Ble=a("strong"),kho=o("xlm-roberta-xl"),Sho=o(" \u2014 "),cN=a("a"),Rho=o("RobertaTokenizer"),Pho=o(" or "),fN=a("a"),Bho=o("RobertaTokenizerFast"),Iho=o(" (XLM-RoBERTa-XL model)"),Nho=l(),Os=a("li"),Ile=a("strong"),qho=o("xlnet"),jho=o(" \u2014 "),mN=a("a"),Dho=o("XLNetTokenizer"),Gho=o(" or "),gN=a("a"),Oho=o("XLNetTokenizerFast"),Vho=o(" (XLNet model)"),Xho=l(),Vs=a("li"),Nle=a("strong"),zho=o("yoso"),Who=o(" \u2014 "),hN=a("a"),Qho=o("AlbertTokenizer"),Hho=o(" or "),pN=a("a"),Uho=o("AlbertTokenizerFast"),Jho=o(" (YOSO model)"),Yho=l(),F(Lh.$$.fragment),Kho=l(),yh=a("div"),F(HA.$$.fragment),Zho=l(),qle=a("p"),epo=o("Register a new tokenizer in this mapping."),FOe=l(),Bi=a("h2"),xh=a("a"),jle=a("span"),F(UA.$$.fragment),opo=l(),Dle=a("span"),rpo=o("AutoFeatureExtractor"),TOe=l(),Lo=a("div"),F(JA.$$.fragment),tpo=l(),YA=a("p"),apo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_N=a("a"),npo=o("AutoFeatureExtractor.from_pretrained()"),spo=o(" class method."),lpo=l(),KA=a("p"),ipo=o("This class cannot be instantiated directly using "),Gle=a("code"),dpo=o("__init__()"),cpo=o(" (throws an error)."),fpo=l(),He=a("div"),F(ZA.$$.fragment),mpo=l(),Ole=a("p"),gpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hpo=l(),Ra=a("p"),ppo=o("The feature extractor class to instantiate is selected based on the "),Vle=a("code"),_po=o("model_type"),upo=o(` property of the config object
(either passed as an argument or loaded from `),Xle=a("code"),bpo=o("pretrained_model_name_or_path"),vpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zle=a("code"),Fpo=o("pretrained_model_name_or_path"),Tpo=o(":"),Mpo=l(),Y=a("ul"),$h=a("li"),Wle=a("strong"),Epo=o("beit"),Cpo=o(" \u2014 "),uN=a("a"),wpo=o("BeitFeatureExtractor"),Apo=o(" (BEiT model)"),Lpo=l(),kh=a("li"),Qle=a("strong"),ypo=o("clip"),xpo=o(" \u2014 "),bN=a("a"),$po=o("CLIPFeatureExtractor"),kpo=o(" (CLIP model)"),Spo=l(),Sh=a("li"),Hle=a("strong"),Rpo=o("convnext"),Ppo=o(" \u2014 "),vN=a("a"),Bpo=o("ConvNextFeatureExtractor"),Ipo=o(" (ConvNeXT model)"),Npo=l(),Rh=a("li"),Ule=a("strong"),qpo=o("cvt"),jpo=o(" \u2014 "),FN=a("a"),Dpo=o("ConvNextFeatureExtractor"),Gpo=o(" (CvT model)"),Opo=l(),Ph=a("li"),Jle=a("strong"),Vpo=o("data2vec-audio"),Xpo=o(" \u2014 "),TN=a("a"),zpo=o("Wav2Vec2FeatureExtractor"),Wpo=o(" (Data2VecAudio model)"),Qpo=l(),Bh=a("li"),Yle=a("strong"),Hpo=o("data2vec-vision"),Upo=o(" \u2014 "),MN=a("a"),Jpo=o("BeitFeatureExtractor"),Ypo=o(" (Data2VecVision model)"),Kpo=l(),Ih=a("li"),Kle=a("strong"),Zpo=o("deit"),e_o=o(" \u2014 "),EN=a("a"),o_o=o("DeiTFeatureExtractor"),r_o=o(" (DeiT model)"),t_o=l(),Nh=a("li"),Zle=a("strong"),a_o=o("detr"),n_o=o(" \u2014 "),CN=a("a"),s_o=o("DetrFeatureExtractor"),l_o=o(" (DETR model)"),i_o=l(),qh=a("li"),eie=a("strong"),d_o=o("dpt"),c_o=o(" \u2014 "),wN=a("a"),f_o=o("DPTFeatureExtractor"),m_o=o(" (DPT model)"),g_o=l(),jh=a("li"),oie=a("strong"),h_o=o("flava"),p_o=o(" \u2014 "),AN=a("a"),__o=o("FlavaFeatureExtractor"),u_o=o(" (FLAVA model)"),b_o=l(),Dh=a("li"),rie=a("strong"),v_o=o("glpn"),F_o=o(" \u2014 "),LN=a("a"),T_o=o("GLPNFeatureExtractor"),M_o=o(" (GLPN model)"),E_o=l(),Gh=a("li"),tie=a("strong"),C_o=o("hubert"),w_o=o(" \u2014 "),yN=a("a"),A_o=o("Wav2Vec2FeatureExtractor"),L_o=o(" (Hubert model)"),y_o=l(),Oh=a("li"),aie=a("strong"),x_o=o("imagegpt"),$_o=o(" \u2014 "),xN=a("a"),k_o=o("ImageGPTFeatureExtractor"),S_o=o(" (ImageGPT model)"),R_o=l(),Vh=a("li"),nie=a("strong"),P_o=o("layoutlmv2"),B_o=o(" \u2014 "),$N=a("a"),I_o=o("LayoutLMv2FeatureExtractor"),N_o=o(" (LayoutLMv2 model)"),q_o=l(),Xh=a("li"),sie=a("strong"),j_o=o("layoutlmv3"),D_o=o(" \u2014 "),kN=a("a"),G_o=o("LayoutLMv3FeatureExtractor"),O_o=o(" (LayoutLMv3 model)"),V_o=l(),zh=a("li"),lie=a("strong"),X_o=o("levit"),z_o=o(" \u2014 "),SN=a("a"),W_o=o("LevitFeatureExtractor"),Q_o=o(" (LeViT model)"),H_o=l(),Wh=a("li"),iie=a("strong"),U_o=o("maskformer"),J_o=o(" \u2014 "),RN=a("a"),Y_o=o("MaskFormerFeatureExtractor"),K_o=o(" (MaskFormer model)"),Z_o=l(),Qh=a("li"),die=a("strong"),euo=o("mctct"),ouo=o(" \u2014 "),PN=a("a"),ruo=o("MCTCTFeatureExtractor"),tuo=o(" (M-CTC-T model)"),auo=l(),Hh=a("li"),cie=a("strong"),nuo=o("perceiver"),suo=o(" \u2014 "),BN=a("a"),luo=o("PerceiverFeatureExtractor"),iuo=o(" (Perceiver model)"),duo=l(),Uh=a("li"),fie=a("strong"),cuo=o("poolformer"),fuo=o(" \u2014 "),IN=a("a"),muo=o("PoolFormerFeatureExtractor"),guo=o(" (PoolFormer model)"),huo=l(),Jh=a("li"),mie=a("strong"),puo=o("regnet"),_uo=o(" \u2014 "),NN=a("a"),uuo=o("ConvNextFeatureExtractor"),buo=o(" (RegNet model)"),vuo=l(),Yh=a("li"),gie=a("strong"),Fuo=o("resnet"),Tuo=o(" \u2014 "),qN=a("a"),Muo=o("ConvNextFeatureExtractor"),Euo=o(" (ResNet model)"),Cuo=l(),Kh=a("li"),hie=a("strong"),wuo=o("segformer"),Auo=o(" \u2014 "),jN=a("a"),Luo=o("SegformerFeatureExtractor"),yuo=o(" (SegFormer model)"),xuo=l(),Zh=a("li"),pie=a("strong"),$uo=o("speech_to_text"),kuo=o(" \u2014 "),DN=a("a"),Suo=o("Speech2TextFeatureExtractor"),Ruo=o(" (Speech2Text model)"),Puo=l(),ep=a("li"),_ie=a("strong"),Buo=o("swin"),Iuo=o(" \u2014 "),GN=a("a"),Nuo=o("ViTFeatureExtractor"),quo=o(" (Swin Transformer model)"),juo=l(),op=a("li"),uie=a("strong"),Duo=o("van"),Guo=o(" \u2014 "),ON=a("a"),Ouo=o("ConvNextFeatureExtractor"),Vuo=o(" (VAN model)"),Xuo=l(),rp=a("li"),bie=a("strong"),zuo=o("vilt"),Wuo=o(" \u2014 "),VN=a("a"),Quo=o("ViltFeatureExtractor"),Huo=o(" (ViLT model)"),Uuo=l(),tp=a("li"),vie=a("strong"),Juo=o("vit"),Yuo=o(" \u2014 "),XN=a("a"),Kuo=o("ViTFeatureExtractor"),Zuo=o(" (ViT model)"),e1o=l(),ap=a("li"),Fie=a("strong"),o1o=o("vit_mae"),r1o=o(" \u2014 "),zN=a("a"),t1o=o("ViTFeatureExtractor"),a1o=o(" (ViTMAE model)"),n1o=l(),np=a("li"),Tie=a("strong"),s1o=o("wav2vec2"),l1o=o(" \u2014 "),WN=a("a"),i1o=o("Wav2Vec2FeatureExtractor"),d1o=o(" (Wav2Vec2 model)"),c1o=l(),sp=a("li"),Mie=a("strong"),f1o=o("wav2vec2-conformer"),m1o=o(" \u2014 "),QN=a("a"),g1o=o("Wav2Vec2FeatureExtractor"),h1o=o(" (Wav2Vec2-Conformer model)"),p1o=l(),lp=a("li"),Eie=a("strong"),_1o=o("yolos"),u1o=o(" \u2014 "),HN=a("a"),b1o=o("YolosFeatureExtractor"),v1o=o(" (YOLOS model)"),F1o=l(),F(ip.$$.fragment),T1o=l(),F(dp.$$.fragment),M1o=l(),cp=a("div"),F(eL.$$.fragment),E1o=l(),Cie=a("p"),C1o=o("Register a new feature extractor for this class."),MOe=l(),Ii=a("h2"),fp=a("a"),wie=a("span"),F(oL.$$.fragment),w1o=l(),Aie=a("span"),A1o=o("AutoProcessor"),EOe=l(),yo=a("div"),F(rL.$$.fragment),L1o=l(),tL=a("p"),y1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UN=a("a"),x1o=o("AutoProcessor.from_pretrained()"),$1o=o(" class method."),k1o=l(),aL=a("p"),S1o=o("This class cannot be instantiated directly using "),Lie=a("code"),R1o=o("__init__()"),P1o=o(" (throws an error)."),B1o=l(),Ue=a("div"),F(nL.$$.fragment),I1o=l(),yie=a("p"),N1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),q1o=l(),Ni=a("p"),j1o=o("The processor class to instantiate is selected based on the "),xie=a("code"),D1o=o("model_type"),G1o=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),O1o=o("pretrained_model_name_or_path"),V1o=o(" if possible):"),X1o=l(),he=a("ul"),mp=a("li"),kie=a("strong"),z1o=o("clip"),W1o=o(" \u2014 "),JN=a("a"),Q1o=o("CLIPProcessor"),H1o=o(" (CLIP model)"),U1o=l(),gp=a("li"),Sie=a("strong"),J1o=o("flava"),Y1o=o(" \u2014 "),Rie=a("code"),K1o=o("FLAVAProcessor"),Z1o=o(" (FLAVA model)"),e2o=l(),hp=a("li"),Pie=a("strong"),o2o=o("layoutlmv2"),r2o=o(" \u2014 "),YN=a("a"),t2o=o("LayoutLMv2Processor"),a2o=o(" (LayoutLMv2 model)"),n2o=l(),pp=a("li"),Bie=a("strong"),s2o=o("layoutlmv3"),l2o=o(" \u2014 "),KN=a("a"),i2o=o("LayoutLMv3Processor"),d2o=o(" (LayoutLMv3 model)"),c2o=l(),_p=a("li"),Iie=a("strong"),f2o=o("layoutxlm"),m2o=o(" \u2014 "),ZN=a("a"),g2o=o("LayoutXLMProcessor"),h2o=o(" (LayoutXLM model)"),p2o=l(),up=a("li"),Nie=a("strong"),_2o=o("sew"),u2o=o(" \u2014 "),eq=a("a"),b2o=o("Wav2Vec2Processor"),v2o=o(" (SEW model)"),F2o=l(),bp=a("li"),qie=a("strong"),T2o=o("sew-d"),M2o=o(" \u2014 "),oq=a("a"),E2o=o("Wav2Vec2Processor"),C2o=o(" (SEW-D model)"),w2o=l(),vp=a("li"),jie=a("strong"),A2o=o("speech_to_text"),L2o=o(" \u2014 "),rq=a("a"),y2o=o("Speech2TextProcessor"),x2o=o(" (Speech2Text model)"),$2o=l(),Fp=a("li"),Die=a("strong"),k2o=o("speech_to_text_2"),S2o=o(" \u2014 "),tq=a("a"),R2o=o("Speech2Text2Processor"),P2o=o(" (Speech2Text2 model)"),B2o=l(),Tp=a("li"),Gie=a("strong"),I2o=o("trocr"),N2o=o(" \u2014 "),aq=a("a"),q2o=o("TrOCRProcessor"),j2o=o(" (TrOCR model)"),D2o=l(),Mp=a("li"),Oie=a("strong"),G2o=o("unispeech"),O2o=o(" \u2014 "),nq=a("a"),V2o=o("Wav2Vec2Processor"),X2o=o(" (UniSpeech model)"),z2o=l(),Ep=a("li"),Vie=a("strong"),W2o=o("unispeech-sat"),Q2o=o(" \u2014 "),sq=a("a"),H2o=o("Wav2Vec2Processor"),U2o=o(" (UniSpeechSat model)"),J2o=l(),Cp=a("li"),Xie=a("strong"),Y2o=o("vilt"),K2o=o(" \u2014 "),lq=a("a"),Z2o=o("ViltProcessor"),ebo=o(" (ViLT model)"),obo=l(),wp=a("li"),zie=a("strong"),rbo=o("vision-text-dual-encoder"),tbo=o(" \u2014 "),iq=a("a"),abo=o("VisionTextDualEncoderProcessor"),nbo=o(" (VisionTextDualEncoder model)"),sbo=l(),Ap=a("li"),Wie=a("strong"),lbo=o("wav2vec2"),ibo=o(" \u2014 "),dq=a("a"),dbo=o("Wav2Vec2Processor"),cbo=o(" (Wav2Vec2 model)"),fbo=l(),Lp=a("li"),Qie=a("strong"),mbo=o("wav2vec2-conformer"),gbo=o(" \u2014 "),cq=a("a"),hbo=o("Wav2Vec2Processor"),pbo=o(" (Wav2Vec2-Conformer model)"),_bo=l(),yp=a("li"),Hie=a("strong"),ubo=o("wavlm"),bbo=o(" \u2014 "),fq=a("a"),vbo=o("Wav2Vec2Processor"),Fbo=o(" (WavLM model)"),Tbo=l(),F(xp.$$.fragment),Mbo=l(),F($p.$$.fragment),Ebo=l(),kp=a("div"),F(sL.$$.fragment),Cbo=l(),Uie=a("p"),wbo=o("Register a new processor for this class."),COe=l(),qi=a("h2"),Sp=a("a"),Jie=a("span"),F(lL.$$.fragment),Abo=l(),Yie=a("span"),Lbo=o("AutoModel"),wOe=l(),xo=a("div"),F(iL.$$.fragment),ybo=l(),ji=a("p"),xbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mq=a("a"),$bo=o("from_pretrained()"),kbo=o(" class method or the "),gq=a("a"),Sbo=o("from_config()"),Rbo=o(` class
method.`),Pbo=l(),dL=a("p"),Bbo=o("This class cannot be instantiated directly using "),Kie=a("code"),Ibo=o("__init__()"),Nbo=o(" (throws an error)."),qbo=l(),st=a("div"),F(cL.$$.fragment),jbo=l(),Zie=a("p"),Dbo=o("Instantiates one of the base model classes of the library from a configuration."),Gbo=l(),Di=a("p"),Obo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),Vbo=o("not"),Xbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=a("a"),zbo=o("from_pretrained()"),Wbo=o(" to load the model weights."),Qbo=l(),F(Rp.$$.fragment),Hbo=l(),Je=a("div"),F(fL.$$.fragment),Ubo=l(),ode=a("p"),Jbo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ybo=l(),Pa=a("p"),Kbo=o("The model class to instantiate is selected based on the "),rde=a("code"),Zbo=o("model_type"),evo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),ovo=o("pretrained_model_name_or_path"),rvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),tvo=o("pretrained_model_name_or_path"),avo=o(":"),nvo=l(),y=a("ul"),Pp=a("li"),nde=a("strong"),svo=o("albert"),lvo=o(" \u2014 "),pq=a("a"),ivo=o("AlbertModel"),dvo=o(" (ALBERT model)"),cvo=l(),Bp=a("li"),sde=a("strong"),fvo=o("bart"),mvo=o(" \u2014 "),_q=a("a"),gvo=o("BartModel"),hvo=o(" (BART model)"),pvo=l(),Ip=a("li"),lde=a("strong"),_vo=o("beit"),uvo=o(" \u2014 "),uq=a("a"),bvo=o("BeitModel"),vvo=o(" (BEiT model)"),Fvo=l(),Np=a("li"),ide=a("strong"),Tvo=o("bert"),Mvo=o(" \u2014 "),bq=a("a"),Evo=o("BertModel"),Cvo=o(" (BERT model)"),wvo=l(),qp=a("li"),dde=a("strong"),Avo=o("bert-generation"),Lvo=o(" \u2014 "),vq=a("a"),yvo=o("BertGenerationEncoder"),xvo=o(" (Bert Generation model)"),$vo=l(),jp=a("li"),cde=a("strong"),kvo=o("big_bird"),Svo=o(" \u2014 "),Fq=a("a"),Rvo=o("BigBirdModel"),Pvo=o(" (BigBird model)"),Bvo=l(),Dp=a("li"),fde=a("strong"),Ivo=o("bigbird_pegasus"),Nvo=o(" \u2014 "),Tq=a("a"),qvo=o("BigBirdPegasusModel"),jvo=o(" (BigBird-Pegasus model)"),Dvo=l(),Gp=a("li"),mde=a("strong"),Gvo=o("blenderbot"),Ovo=o(" \u2014 "),Mq=a("a"),Vvo=o("BlenderbotModel"),Xvo=o(" (Blenderbot model)"),zvo=l(),Op=a("li"),gde=a("strong"),Wvo=o("blenderbot-small"),Qvo=o(" \u2014 "),Eq=a("a"),Hvo=o("BlenderbotSmallModel"),Uvo=o(" (BlenderbotSmall model)"),Jvo=l(),Vp=a("li"),hde=a("strong"),Yvo=o("bloom"),Kvo=o(" \u2014 "),Cq=a("a"),Zvo=o("BloomModel"),e0o=o(" (BLOOM model)"),o0o=l(),Xp=a("li"),pde=a("strong"),r0o=o("camembert"),t0o=o(" \u2014 "),wq=a("a"),a0o=o("CamembertModel"),n0o=o(" (CamemBERT model)"),s0o=l(),zp=a("li"),_de=a("strong"),l0o=o("canine"),i0o=o(" \u2014 "),Aq=a("a"),d0o=o("CanineModel"),c0o=o(" (CANINE model)"),f0o=l(),Wp=a("li"),ude=a("strong"),m0o=o("clip"),g0o=o(" \u2014 "),Lq=a("a"),h0o=o("CLIPModel"),p0o=o(" (CLIP model)"),_0o=l(),Qp=a("li"),bde=a("strong"),u0o=o("codegen"),b0o=o(" \u2014 "),yq=a("a"),v0o=o("CodeGenModel"),F0o=o(" (CodeGen model)"),T0o=l(),Hp=a("li"),vde=a("strong"),M0o=o("convbert"),E0o=o(" \u2014 "),xq=a("a"),C0o=o("ConvBertModel"),w0o=o(" (ConvBERT model)"),A0o=l(),Up=a("li"),Fde=a("strong"),L0o=o("convnext"),y0o=o(" \u2014 "),$q=a("a"),x0o=o("ConvNextModel"),$0o=o(" (ConvNeXT model)"),k0o=l(),Jp=a("li"),Tde=a("strong"),S0o=o("ctrl"),R0o=o(" \u2014 "),kq=a("a"),P0o=o("CTRLModel"),B0o=o(" (CTRL model)"),I0o=l(),Yp=a("li"),Mde=a("strong"),N0o=o("cvt"),q0o=o(" \u2014 "),Sq=a("a"),j0o=o("CvtModel"),D0o=o(" (CvT model)"),G0o=l(),Kp=a("li"),Ede=a("strong"),O0o=o("data2vec-audio"),V0o=o(" \u2014 "),Rq=a("a"),X0o=o("Data2VecAudioModel"),z0o=o(" (Data2VecAudio model)"),W0o=l(),Zp=a("li"),Cde=a("strong"),Q0o=o("data2vec-text"),H0o=o(" \u2014 "),Pq=a("a"),U0o=o("Data2VecTextModel"),J0o=o(" (Data2VecText model)"),Y0o=l(),e_=a("li"),wde=a("strong"),K0o=o("data2vec-vision"),Z0o=o(" \u2014 "),Bq=a("a"),eFo=o("Data2VecVisionModel"),oFo=o(" (Data2VecVision model)"),rFo=l(),o_=a("li"),Ade=a("strong"),tFo=o("deberta"),aFo=o(" \u2014 "),Iq=a("a"),nFo=o("DebertaModel"),sFo=o(" (DeBERTa model)"),lFo=l(),r_=a("li"),Lde=a("strong"),iFo=o("deberta-v2"),dFo=o(" \u2014 "),Nq=a("a"),cFo=o("DebertaV2Model"),fFo=o(" (DeBERTa-v2 model)"),mFo=l(),t_=a("li"),yde=a("strong"),gFo=o("decision_transformer"),hFo=o(" \u2014 "),qq=a("a"),pFo=o("DecisionTransformerModel"),_Fo=o(" (Decision Transformer model)"),uFo=l(),a_=a("li"),xde=a("strong"),bFo=o("deit"),vFo=o(" \u2014 "),jq=a("a"),FFo=o("DeiTModel"),TFo=o(" (DeiT model)"),MFo=l(),n_=a("li"),$de=a("strong"),EFo=o("detr"),CFo=o(" \u2014 "),Dq=a("a"),wFo=o("DetrModel"),AFo=o(" (DETR model)"),LFo=l(),s_=a("li"),kde=a("strong"),yFo=o("distilbert"),xFo=o(" \u2014 "),Gq=a("a"),$Fo=o("DistilBertModel"),kFo=o(" (DistilBERT model)"),SFo=l(),l_=a("li"),Sde=a("strong"),RFo=o("dpr"),PFo=o(" \u2014 "),Oq=a("a"),BFo=o("DPRQuestionEncoder"),IFo=o(" (DPR model)"),NFo=l(),i_=a("li"),Rde=a("strong"),qFo=o("dpt"),jFo=o(" \u2014 "),Vq=a("a"),DFo=o("DPTModel"),GFo=o(" (DPT model)"),OFo=l(),d_=a("li"),Pde=a("strong"),VFo=o("electra"),XFo=o(" \u2014 "),Xq=a("a"),zFo=o("ElectraModel"),WFo=o(" (ELECTRA model)"),QFo=l(),c_=a("li"),Bde=a("strong"),HFo=o("flaubert"),UFo=o(" \u2014 "),zq=a("a"),JFo=o("FlaubertModel"),YFo=o(" (FlauBERT model)"),KFo=l(),f_=a("li"),Ide=a("strong"),ZFo=o("flava"),e6o=o(" \u2014 "),Wq=a("a"),o6o=o("FlavaModel"),r6o=o(" (FLAVA model)"),t6o=l(),m_=a("li"),Nde=a("strong"),a6o=o("fnet"),n6o=o(" \u2014 "),Qq=a("a"),s6o=o("FNetModel"),l6o=o(" (FNet model)"),i6o=l(),g_=a("li"),qde=a("strong"),d6o=o("fsmt"),c6o=o(" \u2014 "),Hq=a("a"),f6o=o("FSMTModel"),m6o=o(" (FairSeq Machine-Translation model)"),g6o=l(),Xs=a("li"),jde=a("strong"),h6o=o("funnel"),p6o=o(" \u2014 "),Uq=a("a"),_6o=o("FunnelModel"),u6o=o(" or "),Jq=a("a"),b6o=o("FunnelBaseModel"),v6o=o(" (Funnel Transformer model)"),F6o=l(),h_=a("li"),Dde=a("strong"),T6o=o("glpn"),M6o=o(" \u2014 "),Yq=a("a"),E6o=o("GLPNModel"),C6o=o(" (GLPN model)"),w6o=l(),p_=a("li"),Gde=a("strong"),A6o=o("gpt2"),L6o=o(" \u2014 "),Kq=a("a"),y6o=o("GPT2Model"),x6o=o(" (OpenAI GPT-2 model)"),$6o=l(),__=a("li"),Ode=a("strong"),k6o=o("gpt_neo"),S6o=o(" \u2014 "),Zq=a("a"),R6o=o("GPTNeoModel"),P6o=o(" (GPT Neo model)"),B6o=l(),u_=a("li"),Vde=a("strong"),I6o=o("gpt_neox"),N6o=o(" \u2014 "),ej=a("a"),q6o=o("GPTNeoXModel"),j6o=o(" (GPT NeoX model)"),D6o=l(),b_=a("li"),Xde=a("strong"),G6o=o("gptj"),O6o=o(" \u2014 "),oj=a("a"),V6o=o("GPTJModel"),X6o=o(" (GPT-J model)"),z6o=l(),v_=a("li"),zde=a("strong"),W6o=o("hubert"),Q6o=o(" \u2014 "),rj=a("a"),H6o=o("HubertModel"),U6o=o(" (Hubert model)"),J6o=l(),F_=a("li"),Wde=a("strong"),Y6o=o("ibert"),K6o=o(" \u2014 "),tj=a("a"),Z6o=o("IBertModel"),eTo=o(" (I-BERT model)"),oTo=l(),T_=a("li"),Qde=a("strong"),rTo=o("imagegpt"),tTo=o(" \u2014 "),aj=a("a"),aTo=o("ImageGPTModel"),nTo=o(" (ImageGPT model)"),sTo=l(),M_=a("li"),Hde=a("strong"),lTo=o("layoutlm"),iTo=o(" \u2014 "),nj=a("a"),dTo=o("LayoutLMModel"),cTo=o(" (LayoutLM model)"),fTo=l(),E_=a("li"),Ude=a("strong"),mTo=o("layoutlmv2"),gTo=o(" \u2014 "),sj=a("a"),hTo=o("LayoutLMv2Model"),pTo=o(" (LayoutLMv2 model)"),_To=l(),C_=a("li"),Jde=a("strong"),uTo=o("layoutlmv3"),bTo=o(" \u2014 "),lj=a("a"),vTo=o("LayoutLMv3Model"),FTo=o(" (LayoutLMv3 model)"),TTo=l(),w_=a("li"),Yde=a("strong"),MTo=o("led"),ETo=o(" \u2014 "),ij=a("a"),CTo=o("LEDModel"),wTo=o(" (LED model)"),ATo=l(),A_=a("li"),Kde=a("strong"),LTo=o("levit"),yTo=o(" \u2014 "),dj=a("a"),xTo=o("LevitModel"),$To=o(" (LeViT model)"),kTo=l(),L_=a("li"),Zde=a("strong"),STo=o("longformer"),RTo=o(" \u2014 "),cj=a("a"),PTo=o("LongformerModel"),BTo=o(" (Longformer model)"),ITo=l(),y_=a("li"),ece=a("strong"),NTo=o("longt5"),qTo=o(" \u2014 "),fj=a("a"),jTo=o("LongT5Model"),DTo=o(" (LongT5 model)"),GTo=l(),x_=a("li"),oce=a("strong"),OTo=o("luke"),VTo=o(" \u2014 "),mj=a("a"),XTo=o("LukeModel"),zTo=o(" (LUKE model)"),WTo=l(),$_=a("li"),rce=a("strong"),QTo=o("lxmert"),HTo=o(" \u2014 "),gj=a("a"),UTo=o("LxmertModel"),JTo=o(" (LXMERT model)"),YTo=l(),k_=a("li"),tce=a("strong"),KTo=o("m2m_100"),ZTo=o(" \u2014 "),hj=a("a"),e7o=o("M2M100Model"),o7o=o(" (M2M100 model)"),r7o=l(),S_=a("li"),ace=a("strong"),t7o=o("marian"),a7o=o(" \u2014 "),pj=a("a"),n7o=o("MarianModel"),s7o=o(" (Marian model)"),l7o=l(),R_=a("li"),nce=a("strong"),i7o=o("maskformer"),d7o=o(" \u2014 "),_j=a("a"),c7o=o("MaskFormerModel"),f7o=o(" (MaskFormer model)"),m7o=l(),P_=a("li"),sce=a("strong"),g7o=o("mbart"),h7o=o(" \u2014 "),uj=a("a"),p7o=o("MBartModel"),_7o=o(" (mBART model)"),u7o=l(),B_=a("li"),lce=a("strong"),b7o=o("mctct"),v7o=o(" \u2014 "),bj=a("a"),F7o=o("MCTCTModel"),T7o=o(" (M-CTC-T model)"),M7o=l(),I_=a("li"),ice=a("strong"),E7o=o("megatron-bert"),C7o=o(" \u2014 "),vj=a("a"),w7o=o("MegatronBertModel"),A7o=o(" (Megatron-BERT model)"),L7o=l(),N_=a("li"),dce=a("strong"),y7o=o("mobilebert"),x7o=o(" \u2014 "),Fj=a("a"),$7o=o("MobileBertModel"),k7o=o(" (MobileBERT model)"),S7o=l(),q_=a("li"),cce=a("strong"),R7o=o("mpnet"),P7o=o(" \u2014 "),Tj=a("a"),B7o=o("MPNetModel"),I7o=o(" (MPNet model)"),N7o=l(),j_=a("li"),fce=a("strong"),q7o=o("mt5"),j7o=o(" \u2014 "),Mj=a("a"),D7o=o("MT5Model"),G7o=o(" (MT5 model)"),O7o=l(),D_=a("li"),mce=a("strong"),V7o=o("nezha"),X7o=o(" \u2014 "),Ej=a("a"),z7o=o("NezhaModel"),W7o=o(" (Nezha model)"),Q7o=l(),G_=a("li"),gce=a("strong"),H7o=o("nystromformer"),U7o=o(" \u2014 "),Cj=a("a"),J7o=o("NystromformerModel"),Y7o=o(" (Nystr\xF6mformer model)"),K7o=l(),O_=a("li"),hce=a("strong"),Z7o=o("openai-gpt"),e8o=o(" \u2014 "),wj=a("a"),o8o=o("OpenAIGPTModel"),r8o=o(" (OpenAI GPT model)"),t8o=l(),V_=a("li"),pce=a("strong"),a8o=o("opt"),n8o=o(" \u2014 "),Aj=a("a"),s8o=o("OPTModel"),l8o=o(" (OPT model)"),i8o=l(),X_=a("li"),_ce=a("strong"),d8o=o("pegasus"),c8o=o(" \u2014 "),Lj=a("a"),f8o=o("PegasusModel"),m8o=o(" (Pegasus model)"),g8o=l(),z_=a("li"),uce=a("strong"),h8o=o("perceiver"),p8o=o(" \u2014 "),yj=a("a"),_8o=o("PerceiverModel"),u8o=o(" (Perceiver model)"),b8o=l(),W_=a("li"),bce=a("strong"),v8o=o("plbart"),F8o=o(" \u2014 "),xj=a("a"),T8o=o("PLBartModel"),M8o=o(" (PLBart model)"),E8o=l(),Q_=a("li"),vce=a("strong"),C8o=o("poolformer"),w8o=o(" \u2014 "),$j=a("a"),A8o=o("PoolFormerModel"),L8o=o(" (PoolFormer model)"),y8o=l(),H_=a("li"),Fce=a("strong"),x8o=o("prophetnet"),$8o=o(" \u2014 "),kj=a("a"),k8o=o("ProphetNetModel"),S8o=o(" (ProphetNet model)"),R8o=l(),U_=a("li"),Tce=a("strong"),P8o=o("qdqbert"),B8o=o(" \u2014 "),Sj=a("a"),I8o=o("QDQBertModel"),N8o=o(" (QDQBert model)"),q8o=l(),J_=a("li"),Mce=a("strong"),j8o=o("reformer"),D8o=o(" \u2014 "),Rj=a("a"),G8o=o("ReformerModel"),O8o=o(" (Reformer model)"),V8o=l(),Y_=a("li"),Ece=a("strong"),X8o=o("regnet"),z8o=o(" \u2014 "),Pj=a("a"),W8o=o("RegNetModel"),Q8o=o(" (RegNet model)"),H8o=l(),K_=a("li"),Cce=a("strong"),U8o=o("rembert"),J8o=o(" \u2014 "),Bj=a("a"),Y8o=o("RemBertModel"),K8o=o(" (RemBERT model)"),Z8o=l(),Z_=a("li"),wce=a("strong"),eMo=o("resnet"),oMo=o(" \u2014 "),Ij=a("a"),rMo=o("ResNetModel"),tMo=o(" (ResNet model)"),aMo=l(),eu=a("li"),Ace=a("strong"),nMo=o("retribert"),sMo=o(" \u2014 "),Nj=a("a"),lMo=o("RetriBertModel"),iMo=o(" (RetriBERT model)"),dMo=l(),ou=a("li"),Lce=a("strong"),cMo=o("roberta"),fMo=o(" \u2014 "),qj=a("a"),mMo=o("RobertaModel"),gMo=o(" (RoBERTa model)"),hMo=l(),ru=a("li"),yce=a("strong"),pMo=o("roformer"),_Mo=o(" \u2014 "),jj=a("a"),uMo=o("RoFormerModel"),bMo=o(" (RoFormer model)"),vMo=l(),tu=a("li"),xce=a("strong"),FMo=o("segformer"),TMo=o(" \u2014 "),Dj=a("a"),MMo=o("SegformerModel"),EMo=o(" (SegFormer model)"),CMo=l(),au=a("li"),$ce=a("strong"),wMo=o("sew"),AMo=o(" \u2014 "),Gj=a("a"),LMo=o("SEWModel"),yMo=o(" (SEW model)"),xMo=l(),nu=a("li"),kce=a("strong"),$Mo=o("sew-d"),kMo=o(" \u2014 "),Oj=a("a"),SMo=o("SEWDModel"),RMo=o(" (SEW-D model)"),PMo=l(),su=a("li"),Sce=a("strong"),BMo=o("speech_to_text"),IMo=o(" \u2014 "),Vj=a("a"),NMo=o("Speech2TextModel"),qMo=o(" (Speech2Text model)"),jMo=l(),lu=a("li"),Rce=a("strong"),DMo=o("splinter"),GMo=o(" \u2014 "),Xj=a("a"),OMo=o("SplinterModel"),VMo=o(" (Splinter model)"),XMo=l(),iu=a("li"),Pce=a("strong"),zMo=o("squeezebert"),WMo=o(" \u2014 "),zj=a("a"),QMo=o("SqueezeBertModel"),HMo=o(" (SqueezeBERT model)"),UMo=l(),du=a("li"),Bce=a("strong"),JMo=o("swin"),YMo=o(" \u2014 "),Wj=a("a"),KMo=o("SwinModel"),ZMo=o(" (Swin Transformer model)"),eEo=l(),cu=a("li"),Ice=a("strong"),oEo=o("t5"),rEo=o(" \u2014 "),Qj=a("a"),tEo=o("T5Model"),aEo=o(" (T5 model)"),nEo=l(),fu=a("li"),Nce=a("strong"),sEo=o("tapas"),lEo=o(" \u2014 "),Hj=a("a"),iEo=o("TapasModel"),dEo=o(" (TAPAS model)"),cEo=l(),mu=a("li"),qce=a("strong"),fEo=o("trajectory_transformer"),mEo=o(" \u2014 "),Uj=a("a"),gEo=o("TrajectoryTransformerModel"),hEo=o(" (Trajectory Transformer model)"),pEo=l(),gu=a("li"),jce=a("strong"),_Eo=o("transfo-xl"),uEo=o(" \u2014 "),Jj=a("a"),bEo=o("TransfoXLModel"),vEo=o(" (Transformer-XL model)"),FEo=l(),hu=a("li"),Dce=a("strong"),TEo=o("unispeech"),MEo=o(" \u2014 "),Yj=a("a"),EEo=o("UniSpeechModel"),CEo=o(" (UniSpeech model)"),wEo=l(),pu=a("li"),Gce=a("strong"),AEo=o("unispeech-sat"),LEo=o(" \u2014 "),Kj=a("a"),yEo=o("UniSpeechSatModel"),xEo=o(" (UniSpeechSat model)"),$Eo=l(),_u=a("li"),Oce=a("strong"),kEo=o("van"),SEo=o(" \u2014 "),Zj=a("a"),REo=o("VanModel"),PEo=o(" (VAN model)"),BEo=l(),uu=a("li"),Vce=a("strong"),IEo=o("vilt"),NEo=o(" \u2014 "),eD=a("a"),qEo=o("ViltModel"),jEo=o(" (ViLT model)"),DEo=l(),bu=a("li"),Xce=a("strong"),GEo=o("vision-text-dual-encoder"),OEo=o(" \u2014 "),oD=a("a"),VEo=o("VisionTextDualEncoderModel"),XEo=o(" (VisionTextDualEncoder model)"),zEo=l(),vu=a("li"),zce=a("strong"),WEo=o("visual_bert"),QEo=o(" \u2014 "),rD=a("a"),HEo=o("VisualBertModel"),UEo=o(" (VisualBERT model)"),JEo=l(),Fu=a("li"),Wce=a("strong"),YEo=o("vit"),KEo=o(" \u2014 "),tD=a("a"),ZEo=o("ViTModel"),e4o=o(" (ViT model)"),o4o=l(),Tu=a("li"),Qce=a("strong"),r4o=o("vit_mae"),t4o=o(" \u2014 "),aD=a("a"),a4o=o("ViTMAEModel"),n4o=o(" (ViTMAE model)"),s4o=l(),Mu=a("li"),Hce=a("strong"),l4o=o("wav2vec2"),i4o=o(" \u2014 "),nD=a("a"),d4o=o("Wav2Vec2Model"),c4o=o(" (Wav2Vec2 model)"),f4o=l(),Eu=a("li"),Uce=a("strong"),m4o=o("wav2vec2-conformer"),g4o=o(" \u2014 "),sD=a("a"),h4o=o("Wav2Vec2ConformerModel"),p4o=o(" (Wav2Vec2-Conformer model)"),_4o=l(),Cu=a("li"),Jce=a("strong"),u4o=o("wavlm"),b4o=o(" \u2014 "),lD=a("a"),v4o=o("WavLMModel"),F4o=o(" (WavLM model)"),T4o=l(),wu=a("li"),Yce=a("strong"),M4o=o("xglm"),E4o=o(" \u2014 "),iD=a("a"),C4o=o("XGLMModel"),w4o=o(" (XGLM model)"),A4o=l(),Au=a("li"),Kce=a("strong"),L4o=o("xlm"),y4o=o(" \u2014 "),dD=a("a"),x4o=o("XLMModel"),$4o=o(" (XLM model)"),k4o=l(),Lu=a("li"),Zce=a("strong"),S4o=o("xlm-prophetnet"),R4o=o(" \u2014 "),cD=a("a"),P4o=o("XLMProphetNetModel"),B4o=o(" (XLM-ProphetNet model)"),I4o=l(),yu=a("li"),efe=a("strong"),N4o=o("xlm-roberta"),q4o=o(" \u2014 "),fD=a("a"),j4o=o("XLMRobertaModel"),D4o=o(" (XLM-RoBERTa model)"),G4o=l(),xu=a("li"),ofe=a("strong"),O4o=o("xlm-roberta-xl"),V4o=o(" \u2014 "),mD=a("a"),X4o=o("XLMRobertaXLModel"),z4o=o(" (XLM-RoBERTa-XL model)"),W4o=l(),$u=a("li"),rfe=a("strong"),Q4o=o("xlnet"),H4o=o(" \u2014 "),gD=a("a"),U4o=o("XLNetModel"),J4o=o(" (XLNet model)"),Y4o=l(),ku=a("li"),tfe=a("strong"),K4o=o("yolos"),Z4o=o(" \u2014 "),hD=a("a"),eCo=o("YolosModel"),oCo=o(" (YOLOS model)"),rCo=l(),Su=a("li"),afe=a("strong"),tCo=o("yoso"),aCo=o(" \u2014 "),pD=a("a"),nCo=o("YosoModel"),sCo=o(" (YOSO model)"),lCo=l(),Ru=a("p"),iCo=o("The model is set in evaluation mode by default using "),nfe=a("code"),dCo=o("model.eval()"),cCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),fCo=o("model.train()"),mCo=l(),F(Pu.$$.fragment),AOe=l(),Gi=a("h2"),Bu=a("a"),lfe=a("span"),F(mL.$$.fragment),gCo=l(),ife=a("span"),hCo=o("AutoModelForPreTraining"),LOe=l(),$o=a("div"),F(gL.$$.fragment),pCo=l(),Oi=a("p"),_Co=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_D=a("a"),uCo=o("from_pretrained()"),bCo=o(" class method or the "),uD=a("a"),vCo=o("from_config()"),FCo=o(` class
method.`),TCo=l(),hL=a("p"),MCo=o("This class cannot be instantiated directly using "),dfe=a("code"),ECo=o("__init__()"),CCo=o(" (throws an error)."),wCo=l(),lt=a("div"),F(pL.$$.fragment),ACo=l(),cfe=a("p"),LCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yCo=l(),Vi=a("p"),xCo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),$Co=o("not"),kCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),SCo=o("from_pretrained()"),RCo=o(" to load the model weights."),PCo=l(),F(Iu.$$.fragment),BCo=l(),Ye=a("div"),F(_L.$$.fragment),ICo=l(),mfe=a("p"),NCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qCo=l(),Ba=a("p"),jCo=o("The model class to instantiate is selected based on the "),gfe=a("code"),DCo=o("model_type"),GCo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),OCo=o("pretrained_model_name_or_path"),VCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),XCo=o("pretrained_model_name_or_path"),zCo=o(":"),WCo=l(),G=a("ul"),Nu=a("li"),_fe=a("strong"),QCo=o("albert"),HCo=o(" \u2014 "),vD=a("a"),UCo=o("AlbertForPreTraining"),JCo=o(" (ALBERT model)"),YCo=l(),qu=a("li"),ufe=a("strong"),KCo=o("bart"),ZCo=o(" \u2014 "),FD=a("a"),e5o=o("BartForConditionalGeneration"),o5o=o(" (BART model)"),r5o=l(),ju=a("li"),bfe=a("strong"),t5o=o("bert"),a5o=o(" \u2014 "),TD=a("a"),n5o=o("BertForPreTraining"),s5o=o(" (BERT model)"),l5o=l(),Du=a("li"),vfe=a("strong"),i5o=o("big_bird"),d5o=o(" \u2014 "),MD=a("a"),c5o=o("BigBirdForPreTraining"),f5o=o(" (BigBird model)"),m5o=l(),Gu=a("li"),Ffe=a("strong"),g5o=o("bloom"),h5o=o(" \u2014 "),ED=a("a"),p5o=o("BloomForCausalLM"),_5o=o(" (BLOOM model)"),u5o=l(),Ou=a("li"),Tfe=a("strong"),b5o=o("camembert"),v5o=o(" \u2014 "),CD=a("a"),F5o=o("CamembertForMaskedLM"),T5o=o(" (CamemBERT model)"),M5o=l(),Vu=a("li"),Mfe=a("strong"),E5o=o("ctrl"),C5o=o(" \u2014 "),wD=a("a"),w5o=o("CTRLLMHeadModel"),A5o=o(" (CTRL model)"),L5o=l(),Xu=a("li"),Efe=a("strong"),y5o=o("data2vec-text"),x5o=o(" \u2014 "),AD=a("a"),$5o=o("Data2VecTextForMaskedLM"),k5o=o(" (Data2VecText model)"),S5o=l(),zu=a("li"),Cfe=a("strong"),R5o=o("deberta"),P5o=o(" \u2014 "),LD=a("a"),B5o=o("DebertaForMaskedLM"),I5o=o(" (DeBERTa model)"),N5o=l(),Wu=a("li"),wfe=a("strong"),q5o=o("deberta-v2"),j5o=o(" \u2014 "),yD=a("a"),D5o=o("DebertaV2ForMaskedLM"),G5o=o(" (DeBERTa-v2 model)"),O5o=l(),Qu=a("li"),Afe=a("strong"),V5o=o("distilbert"),X5o=o(" \u2014 "),xD=a("a"),z5o=o("DistilBertForMaskedLM"),W5o=o(" (DistilBERT model)"),Q5o=l(),Hu=a("li"),Lfe=a("strong"),H5o=o("electra"),U5o=o(" \u2014 "),$D=a("a"),J5o=o("ElectraForPreTraining"),Y5o=o(" (ELECTRA model)"),K5o=l(),Uu=a("li"),yfe=a("strong"),Z5o=o("flaubert"),e3o=o(" \u2014 "),kD=a("a"),o3o=o("FlaubertWithLMHeadModel"),r3o=o(" (FlauBERT model)"),t3o=l(),Ju=a("li"),xfe=a("strong"),a3o=o("flava"),n3o=o(" \u2014 "),SD=a("a"),s3o=o("FlavaForPreTraining"),l3o=o(" (FLAVA model)"),i3o=l(),Yu=a("li"),$fe=a("strong"),d3o=o("fnet"),c3o=o(" \u2014 "),RD=a("a"),f3o=o("FNetForPreTraining"),m3o=o(" (FNet model)"),g3o=l(),Ku=a("li"),kfe=a("strong"),h3o=o("fsmt"),p3o=o(" \u2014 "),PD=a("a"),_3o=o("FSMTForConditionalGeneration"),u3o=o(" (FairSeq Machine-Translation model)"),b3o=l(),Zu=a("li"),Sfe=a("strong"),v3o=o("funnel"),F3o=o(" \u2014 "),BD=a("a"),T3o=o("FunnelForPreTraining"),M3o=o(" (Funnel Transformer model)"),E3o=l(),e1=a("li"),Rfe=a("strong"),C3o=o("gpt2"),w3o=o(" \u2014 "),ID=a("a"),A3o=o("GPT2LMHeadModel"),L3o=o(" (OpenAI GPT-2 model)"),y3o=l(),o1=a("li"),Pfe=a("strong"),x3o=o("ibert"),$3o=o(" \u2014 "),ND=a("a"),k3o=o("IBertForMaskedLM"),S3o=o(" (I-BERT model)"),R3o=l(),r1=a("li"),Bfe=a("strong"),P3o=o("layoutlm"),B3o=o(" \u2014 "),qD=a("a"),I3o=o("LayoutLMForMaskedLM"),N3o=o(" (LayoutLM model)"),q3o=l(),t1=a("li"),Ife=a("strong"),j3o=o("longformer"),D3o=o(" \u2014 "),jD=a("a"),G3o=o("LongformerForMaskedLM"),O3o=o(" (Longformer model)"),V3o=l(),a1=a("li"),Nfe=a("strong"),X3o=o("lxmert"),z3o=o(" \u2014 "),DD=a("a"),W3o=o("LxmertForPreTraining"),Q3o=o(" (LXMERT model)"),H3o=l(),n1=a("li"),qfe=a("strong"),U3o=o("megatron-bert"),J3o=o(" \u2014 "),GD=a("a"),Y3o=o("MegatronBertForPreTraining"),K3o=o(" (Megatron-BERT model)"),Z3o=l(),s1=a("li"),jfe=a("strong"),ewo=o("mobilebert"),owo=o(" \u2014 "),OD=a("a"),rwo=o("MobileBertForPreTraining"),two=o(" (MobileBERT model)"),awo=l(),l1=a("li"),Dfe=a("strong"),nwo=o("mpnet"),swo=o(" \u2014 "),VD=a("a"),lwo=o("MPNetForMaskedLM"),iwo=o(" (MPNet model)"),dwo=l(),i1=a("li"),Gfe=a("strong"),cwo=o("nezha"),fwo=o(" \u2014 "),XD=a("a"),mwo=o("NezhaForPreTraining"),gwo=o(" (Nezha model)"),hwo=l(),d1=a("li"),Ofe=a("strong"),pwo=o("openai-gpt"),_wo=o(" \u2014 "),zD=a("a"),uwo=o("OpenAIGPTLMHeadModel"),bwo=o(" (OpenAI GPT model)"),vwo=l(),c1=a("li"),Vfe=a("strong"),Fwo=o("retribert"),Two=o(" \u2014 "),WD=a("a"),Mwo=o("RetriBertModel"),Ewo=o(" (RetriBERT model)"),Cwo=l(),f1=a("li"),Xfe=a("strong"),wwo=o("roberta"),Awo=o(" \u2014 "),QD=a("a"),Lwo=o("RobertaForMaskedLM"),ywo=o(" (RoBERTa model)"),xwo=l(),m1=a("li"),zfe=a("strong"),$wo=o("splinter"),kwo=o(" \u2014 "),HD=a("a"),Swo=o("SplinterForPreTraining"),Rwo=o(" (Splinter model)"),Pwo=l(),g1=a("li"),Wfe=a("strong"),Bwo=o("squeezebert"),Iwo=o(" \u2014 "),UD=a("a"),Nwo=o("SqueezeBertForMaskedLM"),qwo=o(" (SqueezeBERT model)"),jwo=l(),h1=a("li"),Qfe=a("strong"),Dwo=o("t5"),Gwo=o(" \u2014 "),JD=a("a"),Owo=o("T5ForConditionalGeneration"),Vwo=o(" (T5 model)"),Xwo=l(),p1=a("li"),Hfe=a("strong"),zwo=o("tapas"),Wwo=o(" \u2014 "),YD=a("a"),Qwo=o("TapasForMaskedLM"),Hwo=o(" (TAPAS model)"),Uwo=l(),_1=a("li"),Ufe=a("strong"),Jwo=o("transfo-xl"),Ywo=o(" \u2014 "),KD=a("a"),Kwo=o("TransfoXLLMHeadModel"),Zwo=o(" (Transformer-XL model)"),eAo=l(),u1=a("li"),Jfe=a("strong"),oAo=o("unispeech"),rAo=o(" \u2014 "),ZD=a("a"),tAo=o("UniSpeechForPreTraining"),aAo=o(" (UniSpeech model)"),nAo=l(),b1=a("li"),Yfe=a("strong"),sAo=o("unispeech-sat"),lAo=o(" \u2014 "),eG=a("a"),iAo=o("UniSpeechSatForPreTraining"),dAo=o(" (UniSpeechSat model)"),cAo=l(),v1=a("li"),Kfe=a("strong"),fAo=o("visual_bert"),mAo=o(" \u2014 "),oG=a("a"),gAo=o("VisualBertForPreTraining"),hAo=o(" (VisualBERT model)"),pAo=l(),F1=a("li"),Zfe=a("strong"),_Ao=o("vit_mae"),uAo=o(" \u2014 "),rG=a("a"),bAo=o("ViTMAEForPreTraining"),vAo=o(" (ViTMAE model)"),FAo=l(),T1=a("li"),eme=a("strong"),TAo=o("wav2vec2"),MAo=o(" \u2014 "),tG=a("a"),EAo=o("Wav2Vec2ForPreTraining"),CAo=o(" (Wav2Vec2 model)"),wAo=l(),M1=a("li"),ome=a("strong"),AAo=o("wav2vec2-conformer"),LAo=o(" \u2014 "),aG=a("a"),yAo=o("Wav2Vec2ConformerForPreTraining"),xAo=o(" (Wav2Vec2-Conformer model)"),$Ao=l(),E1=a("li"),rme=a("strong"),kAo=o("xlm"),SAo=o(" \u2014 "),nG=a("a"),RAo=o("XLMWithLMHeadModel"),PAo=o(" (XLM model)"),BAo=l(),C1=a("li"),tme=a("strong"),IAo=o("xlm-roberta"),NAo=o(" \u2014 "),sG=a("a"),qAo=o("XLMRobertaForMaskedLM"),jAo=o(" (XLM-RoBERTa model)"),DAo=l(),w1=a("li"),ame=a("strong"),GAo=o("xlm-roberta-xl"),OAo=o(" \u2014 "),lG=a("a"),VAo=o("XLMRobertaXLForMaskedLM"),XAo=o(" (XLM-RoBERTa-XL model)"),zAo=l(),A1=a("li"),nme=a("strong"),WAo=o("xlnet"),QAo=o(" \u2014 "),iG=a("a"),HAo=o("XLNetLMHeadModel"),UAo=o(" (XLNet model)"),JAo=l(),L1=a("p"),YAo=o("The model is set in evaluation mode by default using "),sme=a("code"),KAo=o("model.eval()"),ZAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),eLo=o("model.train()"),oLo=l(),F(y1.$$.fragment),yOe=l(),Xi=a("h2"),x1=a("a"),ime=a("span"),F(uL.$$.fragment),rLo=l(),dme=a("span"),tLo=o("AutoModelForCausalLM"),xOe=l(),ko=a("div"),F(bL.$$.fragment),aLo=l(),zi=a("p"),nLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dG=a("a"),sLo=o("from_pretrained()"),lLo=o(" class method or the "),cG=a("a"),iLo=o("from_config()"),dLo=o(` class
method.`),cLo=l(),vL=a("p"),fLo=o("This class cannot be instantiated directly using "),cme=a("code"),mLo=o("__init__()"),gLo=o(" (throws an error)."),hLo=l(),it=a("div"),F(FL.$$.fragment),pLo=l(),fme=a("p"),_Lo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uLo=l(),Wi=a("p"),bLo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),vLo=o("not"),FLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),TLo=o("from_pretrained()"),MLo=o(" to load the model weights."),ELo=l(),F($1.$$.fragment),CLo=l(),Ke=a("div"),F(TL.$$.fragment),wLo=l(),gme=a("p"),ALo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LLo=l(),Ia=a("p"),yLo=o("The model class to instantiate is selected based on the "),hme=a("code"),xLo=o("model_type"),$Lo=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),kLo=o("pretrained_model_name_or_path"),SLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),RLo=o("pretrained_model_name_or_path"),PLo=o(":"),BLo=l(),z=a("ul"),k1=a("li"),ume=a("strong"),ILo=o("bart"),NLo=o(" \u2014 "),mG=a("a"),qLo=o("BartForCausalLM"),jLo=o(" (BART model)"),DLo=l(),S1=a("li"),bme=a("strong"),GLo=o("bert"),OLo=o(" \u2014 "),gG=a("a"),VLo=o("BertLMHeadModel"),XLo=o(" (BERT model)"),zLo=l(),R1=a("li"),vme=a("strong"),WLo=o("bert-generation"),QLo=o(" \u2014 "),hG=a("a"),HLo=o("BertGenerationDecoder"),ULo=o(" (Bert Generation model)"),JLo=l(),P1=a("li"),Fme=a("strong"),YLo=o("big_bird"),KLo=o(" \u2014 "),pG=a("a"),ZLo=o("BigBirdForCausalLM"),eyo=o(" (BigBird model)"),oyo=l(),B1=a("li"),Tme=a("strong"),ryo=o("bigbird_pegasus"),tyo=o(" \u2014 "),_G=a("a"),ayo=o("BigBirdPegasusForCausalLM"),nyo=o(" (BigBird-Pegasus model)"),syo=l(),I1=a("li"),Mme=a("strong"),lyo=o("blenderbot"),iyo=o(" \u2014 "),uG=a("a"),dyo=o("BlenderbotForCausalLM"),cyo=o(" (Blenderbot model)"),fyo=l(),N1=a("li"),Eme=a("strong"),myo=o("blenderbot-small"),gyo=o(" \u2014 "),bG=a("a"),hyo=o("BlenderbotSmallForCausalLM"),pyo=o(" (BlenderbotSmall model)"),_yo=l(),q1=a("li"),Cme=a("strong"),uyo=o("bloom"),byo=o(" \u2014 "),vG=a("a"),vyo=o("BloomForCausalLM"),Fyo=o(" (BLOOM model)"),Tyo=l(),j1=a("li"),wme=a("strong"),Myo=o("camembert"),Eyo=o(" \u2014 "),FG=a("a"),Cyo=o("CamembertForCausalLM"),wyo=o(" (CamemBERT model)"),Ayo=l(),D1=a("li"),Ame=a("strong"),Lyo=o("codegen"),yyo=o(" \u2014 "),TG=a("a"),xyo=o("CodeGenForCausalLM"),$yo=o(" (CodeGen model)"),kyo=l(),G1=a("li"),Lme=a("strong"),Syo=o("ctrl"),Ryo=o(" \u2014 "),MG=a("a"),Pyo=o("CTRLLMHeadModel"),Byo=o(" (CTRL model)"),Iyo=l(),O1=a("li"),yme=a("strong"),Nyo=o("data2vec-text"),qyo=o(" \u2014 "),EG=a("a"),jyo=o("Data2VecTextForCausalLM"),Dyo=o(" (Data2VecText model)"),Gyo=l(),V1=a("li"),xme=a("strong"),Oyo=o("electra"),Vyo=o(" \u2014 "),CG=a("a"),Xyo=o("ElectraForCausalLM"),zyo=o(" (ELECTRA model)"),Wyo=l(),X1=a("li"),$me=a("strong"),Qyo=o("gpt2"),Hyo=o(" \u2014 "),wG=a("a"),Uyo=o("GPT2LMHeadModel"),Jyo=o(" (OpenAI GPT-2 model)"),Yyo=l(),z1=a("li"),kme=a("strong"),Kyo=o("gpt_neo"),Zyo=o(" \u2014 "),AG=a("a"),e9o=o("GPTNeoForCausalLM"),o9o=o(" (GPT Neo model)"),r9o=l(),W1=a("li"),Sme=a("strong"),t9o=o("gpt_neox"),a9o=o(" \u2014 "),LG=a("a"),n9o=o("GPTNeoXForCausalLM"),s9o=o(" (GPT NeoX model)"),l9o=l(),Q1=a("li"),Rme=a("strong"),i9o=o("gptj"),d9o=o(" \u2014 "),yG=a("a"),c9o=o("GPTJForCausalLM"),f9o=o(" (GPT-J model)"),m9o=l(),H1=a("li"),Pme=a("strong"),g9o=o("marian"),h9o=o(" \u2014 "),xG=a("a"),p9o=o("MarianForCausalLM"),_9o=o(" (Marian model)"),u9o=l(),U1=a("li"),Bme=a("strong"),b9o=o("mbart"),v9o=o(" \u2014 "),$G=a("a"),F9o=o("MBartForCausalLM"),T9o=o(" (mBART model)"),M9o=l(),J1=a("li"),Ime=a("strong"),E9o=o("megatron-bert"),C9o=o(" \u2014 "),kG=a("a"),w9o=o("MegatronBertForCausalLM"),A9o=o(" (Megatron-BERT model)"),L9o=l(),Y1=a("li"),Nme=a("strong"),y9o=o("openai-gpt"),x9o=o(" \u2014 "),SG=a("a"),$9o=o("OpenAIGPTLMHeadModel"),k9o=o(" (OpenAI GPT model)"),S9o=l(),K1=a("li"),qme=a("strong"),R9o=o("opt"),P9o=o(" \u2014 "),RG=a("a"),B9o=o("OPTForCausalLM"),I9o=o(" (OPT model)"),N9o=l(),Z1=a("li"),jme=a("strong"),q9o=o("pegasus"),j9o=o(" \u2014 "),PG=a("a"),D9o=o("PegasusForCausalLM"),G9o=o(" (Pegasus model)"),O9o=l(),e2=a("li"),Dme=a("strong"),V9o=o("plbart"),X9o=o(" \u2014 "),BG=a("a"),z9o=o("PLBartForCausalLM"),W9o=o(" (PLBart model)"),Q9o=l(),o2=a("li"),Gme=a("strong"),H9o=o("prophetnet"),U9o=o(" \u2014 "),IG=a("a"),J9o=o("ProphetNetForCausalLM"),Y9o=o(" (ProphetNet model)"),K9o=l(),r2=a("li"),Ome=a("strong"),Z9o=o("qdqbert"),exo=o(" \u2014 "),NG=a("a"),oxo=o("QDQBertLMHeadModel"),rxo=o(" (QDQBert model)"),txo=l(),t2=a("li"),Vme=a("strong"),axo=o("reformer"),nxo=o(" \u2014 "),qG=a("a"),sxo=o("ReformerModelWithLMHead"),lxo=o(" (Reformer model)"),ixo=l(),a2=a("li"),Xme=a("strong"),dxo=o("rembert"),cxo=o(" \u2014 "),jG=a("a"),fxo=o("RemBertForCausalLM"),mxo=o(" (RemBERT model)"),gxo=l(),n2=a("li"),zme=a("strong"),hxo=o("roberta"),pxo=o(" \u2014 "),DG=a("a"),_xo=o("RobertaForCausalLM"),uxo=o(" (RoBERTa model)"),bxo=l(),s2=a("li"),Wme=a("strong"),vxo=o("roformer"),Fxo=o(" \u2014 "),GG=a("a"),Txo=o("RoFormerForCausalLM"),Mxo=o(" (RoFormer model)"),Exo=l(),l2=a("li"),Qme=a("strong"),Cxo=o("speech_to_text_2"),wxo=o(" \u2014 "),OG=a("a"),Axo=o("Speech2Text2ForCausalLM"),Lxo=o(" (Speech2Text2 model)"),yxo=l(),i2=a("li"),Hme=a("strong"),xxo=o("transfo-xl"),$xo=o(" \u2014 "),VG=a("a"),kxo=o("TransfoXLLMHeadModel"),Sxo=o(" (Transformer-XL model)"),Rxo=l(),d2=a("li"),Ume=a("strong"),Pxo=o("trocr"),Bxo=o(" \u2014 "),XG=a("a"),Ixo=o("TrOCRForCausalLM"),Nxo=o(" (TrOCR model)"),qxo=l(),c2=a("li"),Jme=a("strong"),jxo=o("xglm"),Dxo=o(" \u2014 "),zG=a("a"),Gxo=o("XGLMForCausalLM"),Oxo=o(" (XGLM model)"),Vxo=l(),f2=a("li"),Yme=a("strong"),Xxo=o("xlm"),zxo=o(" \u2014 "),WG=a("a"),Wxo=o("XLMWithLMHeadModel"),Qxo=o(" (XLM model)"),Hxo=l(),m2=a("li"),Kme=a("strong"),Uxo=o("xlm-prophetnet"),Jxo=o(" \u2014 "),QG=a("a"),Yxo=o("XLMProphetNetForCausalLM"),Kxo=o(" (XLM-ProphetNet model)"),Zxo=l(),g2=a("li"),Zme=a("strong"),e$o=o("xlm-roberta"),o$o=o(" \u2014 "),HG=a("a"),r$o=o("XLMRobertaForCausalLM"),t$o=o(" (XLM-RoBERTa model)"),a$o=l(),h2=a("li"),ege=a("strong"),n$o=o("xlm-roberta-xl"),s$o=o(" \u2014 "),UG=a("a"),l$o=o("XLMRobertaXLForCausalLM"),i$o=o(" (XLM-RoBERTa-XL model)"),d$o=l(),p2=a("li"),oge=a("strong"),c$o=o("xlnet"),f$o=o(" \u2014 "),JG=a("a"),m$o=o("XLNetLMHeadModel"),g$o=o(" (XLNet model)"),h$o=l(),_2=a("p"),p$o=o("The model is set in evaluation mode by default using "),rge=a("code"),_$o=o("model.eval()"),u$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),b$o=o("model.train()"),v$o=l(),F(u2.$$.fragment),$Oe=l(),Qi=a("h2"),b2=a("a"),age=a("span"),F(ML.$$.fragment),F$o=l(),nge=a("span"),T$o=o("AutoModelForMaskedLM"),kOe=l(),So=a("div"),F(EL.$$.fragment),M$o=l(),Hi=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YG=a("a"),C$o=o("from_pretrained()"),w$o=o(" class method or the "),KG=a("a"),A$o=o("from_config()"),L$o=o(` class
method.`),y$o=l(),CL=a("p"),x$o=o("This class cannot be instantiated directly using "),sge=a("code"),$$o=o("__init__()"),k$o=o(" (throws an error)."),S$o=l(),dt=a("div"),F(wL.$$.fragment),R$o=l(),lge=a("p"),P$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B$o=l(),Ui=a("p"),I$o=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),N$o=o("not"),q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),j$o=o("from_pretrained()"),D$o=o(" to load the model weights."),G$o=l(),F(v2.$$.fragment),O$o=l(),Ze=a("div"),F(AL.$$.fragment),V$o=l(),dge=a("p"),X$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z$o=l(),Na=a("p"),W$o=o("The model class to instantiate is selected based on the "),cge=a("code"),Q$o=o("model_type"),H$o=o(` property of the config object (either
passed as an argument or loaded from `),fge=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=a("code"),Y$o=o("pretrained_model_name_or_path"),K$o=o(":"),Z$o=l(),Q=a("ul"),F2=a("li"),gge=a("strong"),eko=o("albert"),oko=o(" \u2014 "),eO=a("a"),rko=o("AlbertForMaskedLM"),tko=o(" (ALBERT model)"),ako=l(),T2=a("li"),hge=a("strong"),nko=o("bart"),sko=o(" \u2014 "),oO=a("a"),lko=o("BartForConditionalGeneration"),iko=o(" (BART model)"),dko=l(),M2=a("li"),pge=a("strong"),cko=o("bert"),fko=o(" \u2014 "),rO=a("a"),mko=o("BertForMaskedLM"),gko=o(" (BERT model)"),hko=l(),E2=a("li"),_ge=a("strong"),pko=o("big_bird"),_ko=o(" \u2014 "),tO=a("a"),uko=o("BigBirdForMaskedLM"),bko=o(" (BigBird model)"),vko=l(),C2=a("li"),uge=a("strong"),Fko=o("camembert"),Tko=o(" \u2014 "),aO=a("a"),Mko=o("CamembertForMaskedLM"),Eko=o(" (CamemBERT model)"),Cko=l(),w2=a("li"),bge=a("strong"),wko=o("convbert"),Ako=o(" \u2014 "),nO=a("a"),Lko=o("ConvBertForMaskedLM"),yko=o(" (ConvBERT model)"),xko=l(),A2=a("li"),vge=a("strong"),$ko=o("data2vec-text"),kko=o(" \u2014 "),sO=a("a"),Sko=o("Data2VecTextForMaskedLM"),Rko=o(" (Data2VecText model)"),Pko=l(),L2=a("li"),Fge=a("strong"),Bko=o("deberta"),Iko=o(" \u2014 "),lO=a("a"),Nko=o("DebertaForMaskedLM"),qko=o(" (DeBERTa model)"),jko=l(),y2=a("li"),Tge=a("strong"),Dko=o("deberta-v2"),Gko=o(" \u2014 "),iO=a("a"),Oko=o("DebertaV2ForMaskedLM"),Vko=o(" (DeBERTa-v2 model)"),Xko=l(),x2=a("li"),Mge=a("strong"),zko=o("distilbert"),Wko=o(" \u2014 "),dO=a("a"),Qko=o("DistilBertForMaskedLM"),Hko=o(" (DistilBERT model)"),Uko=l(),$2=a("li"),Ege=a("strong"),Jko=o("electra"),Yko=o(" \u2014 "),cO=a("a"),Kko=o("ElectraForMaskedLM"),Zko=o(" (ELECTRA model)"),eSo=l(),k2=a("li"),Cge=a("strong"),oSo=o("flaubert"),rSo=o(" \u2014 "),fO=a("a"),tSo=o("FlaubertWithLMHeadModel"),aSo=o(" (FlauBERT model)"),nSo=l(),S2=a("li"),wge=a("strong"),sSo=o("fnet"),lSo=o(" \u2014 "),mO=a("a"),iSo=o("FNetForMaskedLM"),dSo=o(" (FNet model)"),cSo=l(),R2=a("li"),Age=a("strong"),fSo=o("funnel"),mSo=o(" \u2014 "),gO=a("a"),gSo=o("FunnelForMaskedLM"),hSo=o(" (Funnel Transformer model)"),pSo=l(),P2=a("li"),Lge=a("strong"),_So=o("ibert"),uSo=o(" \u2014 "),hO=a("a"),bSo=o("IBertForMaskedLM"),vSo=o(" (I-BERT model)"),FSo=l(),B2=a("li"),yge=a("strong"),TSo=o("layoutlm"),MSo=o(" \u2014 "),pO=a("a"),ESo=o("LayoutLMForMaskedLM"),CSo=o(" (LayoutLM model)"),wSo=l(),I2=a("li"),xge=a("strong"),ASo=o("longformer"),LSo=o(" \u2014 "),_O=a("a"),ySo=o("LongformerForMaskedLM"),xSo=o(" (Longformer model)"),$So=l(),N2=a("li"),$ge=a("strong"),kSo=o("luke"),SSo=o(" \u2014 "),uO=a("a"),RSo=o("LukeForMaskedLM"),PSo=o(" (LUKE model)"),BSo=l(),q2=a("li"),kge=a("strong"),ISo=o("mbart"),NSo=o(" \u2014 "),bO=a("a"),qSo=o("MBartForConditionalGeneration"),jSo=o(" (mBART model)"),DSo=l(),j2=a("li"),Sge=a("strong"),GSo=o("megatron-bert"),OSo=o(" \u2014 "),vO=a("a"),VSo=o("MegatronBertForMaskedLM"),XSo=o(" (Megatron-BERT model)"),zSo=l(),D2=a("li"),Rge=a("strong"),WSo=o("mobilebert"),QSo=o(" \u2014 "),FO=a("a"),HSo=o("MobileBertForMaskedLM"),USo=o(" (MobileBERT model)"),JSo=l(),G2=a("li"),Pge=a("strong"),YSo=o("mpnet"),KSo=o(" \u2014 "),TO=a("a"),ZSo=o("MPNetForMaskedLM"),eRo=o(" (MPNet model)"),oRo=l(),O2=a("li"),Bge=a("strong"),rRo=o("nezha"),tRo=o(" \u2014 "),MO=a("a"),aRo=o("NezhaForMaskedLM"),nRo=o(" (Nezha model)"),sRo=l(),V2=a("li"),Ige=a("strong"),lRo=o("nystromformer"),iRo=o(" \u2014 "),EO=a("a"),dRo=o("NystromformerForMaskedLM"),cRo=o(" (Nystr\xF6mformer model)"),fRo=l(),X2=a("li"),Nge=a("strong"),mRo=o("perceiver"),gRo=o(" \u2014 "),CO=a("a"),hRo=o("PerceiverForMaskedLM"),pRo=o(" (Perceiver model)"),_Ro=l(),z2=a("li"),qge=a("strong"),uRo=o("qdqbert"),bRo=o(" \u2014 "),wO=a("a"),vRo=o("QDQBertForMaskedLM"),FRo=o(" (QDQBert model)"),TRo=l(),W2=a("li"),jge=a("strong"),MRo=o("reformer"),ERo=o(" \u2014 "),AO=a("a"),CRo=o("ReformerForMaskedLM"),wRo=o(" (Reformer model)"),ARo=l(),Q2=a("li"),Dge=a("strong"),LRo=o("rembert"),yRo=o(" \u2014 "),LO=a("a"),xRo=o("RemBertForMaskedLM"),$Ro=o(" (RemBERT model)"),kRo=l(),H2=a("li"),Gge=a("strong"),SRo=o("roberta"),RRo=o(" \u2014 "),yO=a("a"),PRo=o("RobertaForMaskedLM"),BRo=o(" (RoBERTa model)"),IRo=l(),U2=a("li"),Oge=a("strong"),NRo=o("roformer"),qRo=o(" \u2014 "),xO=a("a"),jRo=o("RoFormerForMaskedLM"),DRo=o(" (RoFormer model)"),GRo=l(),J2=a("li"),Vge=a("strong"),ORo=o("squeezebert"),VRo=o(" \u2014 "),$O=a("a"),XRo=o("SqueezeBertForMaskedLM"),zRo=o(" (SqueezeBERT model)"),WRo=l(),Y2=a("li"),Xge=a("strong"),QRo=o("tapas"),HRo=o(" \u2014 "),kO=a("a"),URo=o("TapasForMaskedLM"),JRo=o(" (TAPAS model)"),YRo=l(),K2=a("li"),zge=a("strong"),KRo=o("wav2vec2"),ZRo=o(" \u2014 "),Wge=a("code"),ePo=o("Wav2Vec2ForMaskedLM"),oPo=o(" (Wav2Vec2 model)"),rPo=l(),Z2=a("li"),Qge=a("strong"),tPo=o("xlm"),aPo=o(" \u2014 "),SO=a("a"),nPo=o("XLMWithLMHeadModel"),sPo=o(" (XLM model)"),lPo=l(),eb=a("li"),Hge=a("strong"),iPo=o("xlm-roberta"),dPo=o(" \u2014 "),RO=a("a"),cPo=o("XLMRobertaForMaskedLM"),fPo=o(" (XLM-RoBERTa model)"),mPo=l(),ob=a("li"),Uge=a("strong"),gPo=o("xlm-roberta-xl"),hPo=o(" \u2014 "),PO=a("a"),pPo=o("XLMRobertaXLForMaskedLM"),_Po=o(" (XLM-RoBERTa-XL model)"),uPo=l(),rb=a("li"),Jge=a("strong"),bPo=o("yoso"),vPo=o(" \u2014 "),BO=a("a"),FPo=o("YosoForMaskedLM"),TPo=o(" (YOSO model)"),MPo=l(),tb=a("p"),EPo=o("The model is set in evaluation mode by default using "),Yge=a("code"),CPo=o("model.eval()"),wPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),APo=o("model.train()"),LPo=l(),F(ab.$$.fragment),SOe=l(),Ji=a("h2"),nb=a("a"),Zge=a("span"),F(LL.$$.fragment),yPo=l(),ehe=a("span"),xPo=o("AutoModelForSeq2SeqLM"),ROe=l(),Ro=a("div"),F(yL.$$.fragment),$Po=l(),Yi=a("p"),kPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IO=a("a"),SPo=o("from_pretrained()"),RPo=o(" class method or the "),NO=a("a"),PPo=o("from_config()"),BPo=o(` class
method.`),IPo=l(),xL=a("p"),NPo=o("This class cannot be instantiated directly using "),ohe=a("code"),qPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),ct=a("div"),F($L.$$.fragment),GPo=l(),rhe=a("p"),OPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VPo=l(),Ki=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),zPo=o("not"),WPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),QPo=o("from_pretrained()"),HPo=o(" to load the model weights."),UPo=l(),F(sb.$$.fragment),JPo=l(),eo=a("div"),F(kL.$$.fragment),YPo=l(),ahe=a("p"),KPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZPo=l(),qa=a("p"),eBo=o("The model class to instantiate is selected based on the "),nhe=a("code"),oBo=o("model_type"),rBo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),tBo=o("pretrained_model_name_or_path"),aBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),nBo=o("pretrained_model_name_or_path"),sBo=o(":"),lBo=l(),pe=a("ul"),lb=a("li"),ihe=a("strong"),iBo=o("bart"),dBo=o(" \u2014 "),jO=a("a"),cBo=o("BartForConditionalGeneration"),fBo=o(" (BART model)"),mBo=l(),ib=a("li"),dhe=a("strong"),gBo=o("bigbird_pegasus"),hBo=o(" \u2014 "),DO=a("a"),pBo=o("BigBirdPegasusForConditionalGeneration"),_Bo=o(" (BigBird-Pegasus model)"),uBo=l(),db=a("li"),che=a("strong"),bBo=o("blenderbot"),vBo=o(" \u2014 "),GO=a("a"),FBo=o("BlenderbotForConditionalGeneration"),TBo=o(" (Blenderbot model)"),MBo=l(),cb=a("li"),fhe=a("strong"),EBo=o("blenderbot-small"),CBo=o(" \u2014 "),OO=a("a"),wBo=o("BlenderbotSmallForConditionalGeneration"),ABo=o(" (BlenderbotSmall model)"),LBo=l(),fb=a("li"),mhe=a("strong"),yBo=o("encoder-decoder"),xBo=o(" \u2014 "),VO=a("a"),$Bo=o("EncoderDecoderModel"),kBo=o(" (Encoder decoder model)"),SBo=l(),mb=a("li"),ghe=a("strong"),RBo=o("fsmt"),PBo=o(" \u2014 "),XO=a("a"),BBo=o("FSMTForConditionalGeneration"),IBo=o(" (FairSeq Machine-Translation model)"),NBo=l(),gb=a("li"),hhe=a("strong"),qBo=o("led"),jBo=o(" \u2014 "),zO=a("a"),DBo=o("LEDForConditionalGeneration"),GBo=o(" (LED model)"),OBo=l(),hb=a("li"),phe=a("strong"),VBo=o("longt5"),XBo=o(" \u2014 "),WO=a("a"),zBo=o("LongT5ForConditionalGeneration"),WBo=o(" (LongT5 model)"),QBo=l(),pb=a("li"),_he=a("strong"),HBo=o("m2m_100"),UBo=o(" \u2014 "),QO=a("a"),JBo=o("M2M100ForConditionalGeneration"),YBo=o(" (M2M100 model)"),KBo=l(),_b=a("li"),uhe=a("strong"),ZBo=o("marian"),eIo=o(" \u2014 "),HO=a("a"),oIo=o("MarianMTModel"),rIo=o(" (Marian model)"),tIo=l(),ub=a("li"),bhe=a("strong"),aIo=o("mbart"),nIo=o(" \u2014 "),UO=a("a"),sIo=o("MBartForConditionalGeneration"),lIo=o(" (mBART model)"),iIo=l(),bb=a("li"),vhe=a("strong"),dIo=o("mt5"),cIo=o(" \u2014 "),JO=a("a"),fIo=o("MT5ForConditionalGeneration"),mIo=o(" (MT5 model)"),gIo=l(),vb=a("li"),Fhe=a("strong"),hIo=o("pegasus"),pIo=o(" \u2014 "),YO=a("a"),_Io=o("PegasusForConditionalGeneration"),uIo=o(" (Pegasus model)"),bIo=l(),Fb=a("li"),The=a("strong"),vIo=o("plbart"),FIo=o(" \u2014 "),KO=a("a"),TIo=o("PLBartForConditionalGeneration"),MIo=o(" (PLBart model)"),EIo=l(),Tb=a("li"),Mhe=a("strong"),CIo=o("prophetnet"),wIo=o(" \u2014 "),ZO=a("a"),AIo=o("ProphetNetForConditionalGeneration"),LIo=o(" (ProphetNet model)"),yIo=l(),Mb=a("li"),Ehe=a("strong"),xIo=o("t5"),$Io=o(" \u2014 "),eV=a("a"),kIo=o("T5ForConditionalGeneration"),SIo=o(" (T5 model)"),RIo=l(),Eb=a("li"),Che=a("strong"),PIo=o("xlm-prophetnet"),BIo=o(" \u2014 "),oV=a("a"),IIo=o("XLMProphetNetForConditionalGeneration"),NIo=o(" (XLM-ProphetNet model)"),qIo=l(),Cb=a("p"),jIo=o("The model is set in evaluation mode by default using "),whe=a("code"),DIo=o("model.eval()"),GIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=a("code"),OIo=o("model.train()"),VIo=l(),F(wb.$$.fragment),POe=l(),Zi=a("h2"),Ab=a("a"),Lhe=a("span"),F(SL.$$.fragment),XIo=l(),yhe=a("span"),zIo=o("AutoModelForSequenceClassification"),BOe=l(),Po=a("div"),F(RL.$$.fragment),WIo=l(),ed=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rV=a("a"),HIo=o("from_pretrained()"),UIo=o(" class method or the "),tV=a("a"),JIo=o("from_config()"),YIo=o(` class
method.`),KIo=l(),PL=a("p"),ZIo=o("This class cannot be instantiated directly using "),xhe=a("code"),eNo=o("__init__()"),oNo=o(" (throws an error)."),rNo=l(),ft=a("div"),F(BL.$$.fragment),tNo=l(),$he=a("p"),aNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nNo=l(),od=a("p"),sNo=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),lNo=o("not"),iNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),dNo=o("from_pretrained()"),cNo=o(" to load the model weights."),fNo=l(),F(Lb.$$.fragment),mNo=l(),oo=a("div"),F(IL.$$.fragment),gNo=l(),She=a("p"),hNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pNo=l(),ja=a("p"),_No=o("The model class to instantiate is selected based on the "),Rhe=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),vNo=o("pretrained_model_name_or_path"),FNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),TNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),N=a("ul"),yb=a("li"),Ihe=a("strong"),CNo=o("albert"),wNo=o(" \u2014 "),nV=a("a"),ANo=o("AlbertForSequenceClassification"),LNo=o(" (ALBERT model)"),yNo=l(),xb=a("li"),Nhe=a("strong"),xNo=o("bart"),$No=o(" \u2014 "),sV=a("a"),kNo=o("BartForSequenceClassification"),SNo=o(" (BART model)"),RNo=l(),$b=a("li"),qhe=a("strong"),PNo=o("bert"),BNo=o(" \u2014 "),lV=a("a"),INo=o("BertForSequenceClassification"),NNo=o(" (BERT model)"),qNo=l(),kb=a("li"),jhe=a("strong"),jNo=o("big_bird"),DNo=o(" \u2014 "),iV=a("a"),GNo=o("BigBirdForSequenceClassification"),ONo=o(" (BigBird model)"),VNo=l(),Sb=a("li"),Dhe=a("strong"),XNo=o("bigbird_pegasus"),zNo=o(" \u2014 "),dV=a("a"),WNo=o("BigBirdPegasusForSequenceClassification"),QNo=o(" (BigBird-Pegasus model)"),HNo=l(),Rb=a("li"),Ghe=a("strong"),UNo=o("bloom"),JNo=o(" \u2014 "),cV=a("a"),YNo=o("BloomForSequenceClassification"),KNo=o(" (BLOOM model)"),ZNo=l(),Pb=a("li"),Ohe=a("strong"),eqo=o("camembert"),oqo=o(" \u2014 "),fV=a("a"),rqo=o("CamembertForSequenceClassification"),tqo=o(" (CamemBERT model)"),aqo=l(),Bb=a("li"),Vhe=a("strong"),nqo=o("canine"),sqo=o(" \u2014 "),mV=a("a"),lqo=o("CanineForSequenceClassification"),iqo=o(" (CANINE model)"),dqo=l(),Ib=a("li"),Xhe=a("strong"),cqo=o("convbert"),fqo=o(" \u2014 "),gV=a("a"),mqo=o("ConvBertForSequenceClassification"),gqo=o(" (ConvBERT model)"),hqo=l(),Nb=a("li"),zhe=a("strong"),pqo=o("ctrl"),_qo=o(" \u2014 "),hV=a("a"),uqo=o("CTRLForSequenceClassification"),bqo=o(" (CTRL model)"),vqo=l(),qb=a("li"),Whe=a("strong"),Fqo=o("data2vec-text"),Tqo=o(" \u2014 "),pV=a("a"),Mqo=o("Data2VecTextForSequenceClassification"),Eqo=o(" (Data2VecText model)"),Cqo=l(),jb=a("li"),Qhe=a("strong"),wqo=o("deberta"),Aqo=o(" \u2014 "),_V=a("a"),Lqo=o("DebertaForSequenceClassification"),yqo=o(" (DeBERTa model)"),xqo=l(),Db=a("li"),Hhe=a("strong"),$qo=o("deberta-v2"),kqo=o(" \u2014 "),uV=a("a"),Sqo=o("DebertaV2ForSequenceClassification"),Rqo=o(" (DeBERTa-v2 model)"),Pqo=l(),Gb=a("li"),Uhe=a("strong"),Bqo=o("distilbert"),Iqo=o(" \u2014 "),bV=a("a"),Nqo=o("DistilBertForSequenceClassification"),qqo=o(" (DistilBERT model)"),jqo=l(),Ob=a("li"),Jhe=a("strong"),Dqo=o("electra"),Gqo=o(" \u2014 "),vV=a("a"),Oqo=o("ElectraForSequenceClassification"),Vqo=o(" (ELECTRA model)"),Xqo=l(),Vb=a("li"),Yhe=a("strong"),zqo=o("flaubert"),Wqo=o(" \u2014 "),FV=a("a"),Qqo=o("FlaubertForSequenceClassification"),Hqo=o(" (FlauBERT model)"),Uqo=l(),Xb=a("li"),Khe=a("strong"),Jqo=o("fnet"),Yqo=o(" \u2014 "),TV=a("a"),Kqo=o("FNetForSequenceClassification"),Zqo=o(" (FNet model)"),ejo=l(),zb=a("li"),Zhe=a("strong"),ojo=o("funnel"),rjo=o(" \u2014 "),MV=a("a"),tjo=o("FunnelForSequenceClassification"),ajo=o(" (Funnel Transformer model)"),njo=l(),Wb=a("li"),epe=a("strong"),sjo=o("gpt2"),ljo=o(" \u2014 "),EV=a("a"),ijo=o("GPT2ForSequenceClassification"),djo=o(" (OpenAI GPT-2 model)"),cjo=l(),Qb=a("li"),ope=a("strong"),fjo=o("gpt_neo"),mjo=o(" \u2014 "),CV=a("a"),gjo=o("GPTNeoForSequenceClassification"),hjo=o(" (GPT Neo model)"),pjo=l(),Hb=a("li"),rpe=a("strong"),_jo=o("gptj"),ujo=o(" \u2014 "),wV=a("a"),bjo=o("GPTJForSequenceClassification"),vjo=o(" (GPT-J model)"),Fjo=l(),Ub=a("li"),tpe=a("strong"),Tjo=o("ibert"),Mjo=o(" \u2014 "),AV=a("a"),Ejo=o("IBertForSequenceClassification"),Cjo=o(" (I-BERT model)"),wjo=l(),Jb=a("li"),ape=a("strong"),Ajo=o("layoutlm"),Ljo=o(" \u2014 "),LV=a("a"),yjo=o("LayoutLMForSequenceClassification"),xjo=o(" (LayoutLM model)"),$jo=l(),Yb=a("li"),npe=a("strong"),kjo=o("layoutlmv2"),Sjo=o(" \u2014 "),yV=a("a"),Rjo=o("LayoutLMv2ForSequenceClassification"),Pjo=o(" (LayoutLMv2 model)"),Bjo=l(),Kb=a("li"),spe=a("strong"),Ijo=o("layoutlmv3"),Njo=o(" \u2014 "),xV=a("a"),qjo=o("LayoutLMv3ForSequenceClassification"),jjo=o(" (LayoutLMv3 model)"),Djo=l(),Zb=a("li"),lpe=a("strong"),Gjo=o("led"),Ojo=o(" \u2014 "),$V=a("a"),Vjo=o("LEDForSequenceClassification"),Xjo=o(" (LED model)"),zjo=l(),ev=a("li"),ipe=a("strong"),Wjo=o("longformer"),Qjo=o(" \u2014 "),kV=a("a"),Hjo=o("LongformerForSequenceClassification"),Ujo=o(" (Longformer model)"),Jjo=l(),ov=a("li"),dpe=a("strong"),Yjo=o("mbart"),Kjo=o(" \u2014 "),SV=a("a"),Zjo=o("MBartForSequenceClassification"),eDo=o(" (mBART model)"),oDo=l(),rv=a("li"),cpe=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),RV=a("a"),aDo=o("MegatronBertForSequenceClassification"),nDo=o(" (Megatron-BERT model)"),sDo=l(),tv=a("li"),fpe=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),PV=a("a"),dDo=o("MobileBertForSequenceClassification"),cDo=o(" (MobileBERT model)"),fDo=l(),av=a("li"),mpe=a("strong"),mDo=o("mpnet"),gDo=o(" \u2014 "),BV=a("a"),hDo=o("MPNetForSequenceClassification"),pDo=o(" (MPNet model)"),_Do=l(),nv=a("li"),gpe=a("strong"),uDo=o("nezha"),bDo=o(" \u2014 "),IV=a("a"),vDo=o("NezhaForSequenceClassification"),FDo=o(" (Nezha model)"),TDo=l(),sv=a("li"),hpe=a("strong"),MDo=o("nystromformer"),EDo=o(" \u2014 "),NV=a("a"),CDo=o("NystromformerForSequenceClassification"),wDo=o(" (Nystr\xF6mformer model)"),ADo=l(),lv=a("li"),ppe=a("strong"),LDo=o("openai-gpt"),yDo=o(" \u2014 "),qV=a("a"),xDo=o("OpenAIGPTForSequenceClassification"),$Do=o(" (OpenAI GPT model)"),kDo=l(),iv=a("li"),_pe=a("strong"),SDo=o("perceiver"),RDo=o(" \u2014 "),jV=a("a"),PDo=o("PerceiverForSequenceClassification"),BDo=o(" (Perceiver model)"),IDo=l(),dv=a("li"),upe=a("strong"),NDo=o("plbart"),qDo=o(" \u2014 "),DV=a("a"),jDo=o("PLBartForSequenceClassification"),DDo=o(" (PLBart model)"),GDo=l(),cv=a("li"),bpe=a("strong"),ODo=o("qdqbert"),VDo=o(" \u2014 "),GV=a("a"),XDo=o("QDQBertForSequenceClassification"),zDo=o(" (QDQBert model)"),WDo=l(),fv=a("li"),vpe=a("strong"),QDo=o("reformer"),HDo=o(" \u2014 "),OV=a("a"),UDo=o("ReformerForSequenceClassification"),JDo=o(" (Reformer model)"),YDo=l(),mv=a("li"),Fpe=a("strong"),KDo=o("rembert"),ZDo=o(" \u2014 "),VV=a("a"),eGo=o("RemBertForSequenceClassification"),oGo=o(" (RemBERT model)"),rGo=l(),gv=a("li"),Tpe=a("strong"),tGo=o("roberta"),aGo=o(" \u2014 "),XV=a("a"),nGo=o("RobertaForSequenceClassification"),sGo=o(" (RoBERTa model)"),lGo=l(),hv=a("li"),Mpe=a("strong"),iGo=o("roformer"),dGo=o(" \u2014 "),zV=a("a"),cGo=o("RoFormerForSequenceClassification"),fGo=o(" (RoFormer model)"),mGo=l(),pv=a("li"),Epe=a("strong"),gGo=o("squeezebert"),hGo=o(" \u2014 "),WV=a("a"),pGo=o("SqueezeBertForSequenceClassification"),_Go=o(" (SqueezeBERT model)"),uGo=l(),_v=a("li"),Cpe=a("strong"),bGo=o("tapas"),vGo=o(" \u2014 "),QV=a("a"),FGo=o("TapasForSequenceClassification"),TGo=o(" (TAPAS model)"),MGo=l(),uv=a("li"),wpe=a("strong"),EGo=o("transfo-xl"),CGo=o(" \u2014 "),HV=a("a"),wGo=o("TransfoXLForSequenceClassification"),AGo=o(" (Transformer-XL model)"),LGo=l(),bv=a("li"),Ape=a("strong"),yGo=o("xlm"),xGo=o(" \u2014 "),UV=a("a"),$Go=o("XLMForSequenceClassification"),kGo=o(" (XLM model)"),SGo=l(),vv=a("li"),Lpe=a("strong"),RGo=o("xlm-roberta"),PGo=o(" \u2014 "),JV=a("a"),BGo=o("XLMRobertaForSequenceClassification"),IGo=o(" (XLM-RoBERTa model)"),NGo=l(),Fv=a("li"),ype=a("strong"),qGo=o("xlm-roberta-xl"),jGo=o(" \u2014 "),YV=a("a"),DGo=o("XLMRobertaXLForSequenceClassification"),GGo=o(" (XLM-RoBERTa-XL model)"),OGo=l(),Tv=a("li"),xpe=a("strong"),VGo=o("xlnet"),XGo=o(" \u2014 "),KV=a("a"),zGo=o("XLNetForSequenceClassification"),WGo=o(" (XLNet model)"),QGo=l(),Mv=a("li"),$pe=a("strong"),HGo=o("yoso"),UGo=o(" \u2014 "),ZV=a("a"),JGo=o("YosoForSequenceClassification"),YGo=o(" (YOSO model)"),KGo=l(),Ev=a("p"),ZGo=o("The model is set in evaluation mode by default using "),kpe=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),rOo=o("model.train()"),tOo=l(),F(Cv.$$.fragment),IOe=l(),rd=a("h2"),wv=a("a"),Rpe=a("span"),F(NL.$$.fragment),aOo=l(),Ppe=a("span"),nOo=o("AutoModelForMultipleChoice"),NOe=l(),Bo=a("div"),F(qL.$$.fragment),sOo=l(),td=a("p"),lOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eX=a("a"),iOo=o("from_pretrained()"),dOo=o(" class method or the "),oX=a("a"),cOo=o("from_config()"),fOo=o(` class
method.`),mOo=l(),jL=a("p"),gOo=o("This class cannot be instantiated directly using "),Bpe=a("code"),hOo=o("__init__()"),pOo=o(" (throws an error)."),_Oo=l(),mt=a("div"),F(DL.$$.fragment),uOo=l(),Ipe=a("p"),bOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vOo=l(),ad=a("p"),FOo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),TOo=o("not"),MOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),EOo=o("from_pretrained()"),COo=o(" to load the model weights."),wOo=l(),F(Av.$$.fragment),AOo=l(),ro=a("div"),F(GL.$$.fragment),LOo=l(),qpe=a("p"),yOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xOo=l(),Da=a("p"),$Oo=o("The model class to instantiate is selected based on the "),jpe=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),ROo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),BOo=o("pretrained_model_name_or_path"),IOo=o(":"),NOo=l(),Z=a("ul"),Lv=a("li"),Ope=a("strong"),qOo=o("albert"),jOo=o(" \u2014 "),tX=a("a"),DOo=o("AlbertForMultipleChoice"),GOo=o(" (ALBERT model)"),OOo=l(),yv=a("li"),Vpe=a("strong"),VOo=o("bert"),XOo=o(" \u2014 "),aX=a("a"),zOo=o("BertForMultipleChoice"),WOo=o(" (BERT model)"),QOo=l(),xv=a("li"),Xpe=a("strong"),HOo=o("big_bird"),UOo=o(" \u2014 "),nX=a("a"),JOo=o("BigBirdForMultipleChoice"),YOo=o(" (BigBird model)"),KOo=l(),$v=a("li"),zpe=a("strong"),ZOo=o("camembert"),eVo=o(" \u2014 "),sX=a("a"),oVo=o("CamembertForMultipleChoice"),rVo=o(" (CamemBERT model)"),tVo=l(),kv=a("li"),Wpe=a("strong"),aVo=o("canine"),nVo=o(" \u2014 "),lX=a("a"),sVo=o("CanineForMultipleChoice"),lVo=o(" (CANINE model)"),iVo=l(),Sv=a("li"),Qpe=a("strong"),dVo=o("convbert"),cVo=o(" \u2014 "),iX=a("a"),fVo=o("ConvBertForMultipleChoice"),mVo=o(" (ConvBERT model)"),gVo=l(),Rv=a("li"),Hpe=a("strong"),hVo=o("data2vec-text"),pVo=o(" \u2014 "),dX=a("a"),_Vo=o("Data2VecTextForMultipleChoice"),uVo=o(" (Data2VecText model)"),bVo=l(),Pv=a("li"),Upe=a("strong"),vVo=o("deberta-v2"),FVo=o(" \u2014 "),cX=a("a"),TVo=o("DebertaV2ForMultipleChoice"),MVo=o(" (DeBERTa-v2 model)"),EVo=l(),Bv=a("li"),Jpe=a("strong"),CVo=o("distilbert"),wVo=o(" \u2014 "),fX=a("a"),AVo=o("DistilBertForMultipleChoice"),LVo=o(" (DistilBERT model)"),yVo=l(),Iv=a("li"),Ype=a("strong"),xVo=o("electra"),$Vo=o(" \u2014 "),mX=a("a"),kVo=o("ElectraForMultipleChoice"),SVo=o(" (ELECTRA model)"),RVo=l(),Nv=a("li"),Kpe=a("strong"),PVo=o("flaubert"),BVo=o(" \u2014 "),gX=a("a"),IVo=o("FlaubertForMultipleChoice"),NVo=o(" (FlauBERT model)"),qVo=l(),qv=a("li"),Zpe=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),hX=a("a"),GVo=o("FNetForMultipleChoice"),OVo=o(" (FNet model)"),VVo=l(),jv=a("li"),e_e=a("strong"),XVo=o("funnel"),zVo=o(" \u2014 "),pX=a("a"),WVo=o("FunnelForMultipleChoice"),QVo=o(" (Funnel Transformer model)"),HVo=l(),Dv=a("li"),o_e=a("strong"),UVo=o("ibert"),JVo=o(" \u2014 "),_X=a("a"),YVo=o("IBertForMultipleChoice"),KVo=o(" (I-BERT model)"),ZVo=l(),Gv=a("li"),r_e=a("strong"),eXo=o("longformer"),oXo=o(" \u2014 "),uX=a("a"),rXo=o("LongformerForMultipleChoice"),tXo=o(" (Longformer model)"),aXo=l(),Ov=a("li"),t_e=a("strong"),nXo=o("megatron-bert"),sXo=o(" \u2014 "),bX=a("a"),lXo=o("MegatronBertForMultipleChoice"),iXo=o(" (Megatron-BERT model)"),dXo=l(),Vv=a("li"),a_e=a("strong"),cXo=o("mobilebert"),fXo=o(" \u2014 "),vX=a("a"),mXo=o("MobileBertForMultipleChoice"),gXo=o(" (MobileBERT model)"),hXo=l(),Xv=a("li"),n_e=a("strong"),pXo=o("mpnet"),_Xo=o(" \u2014 "),FX=a("a"),uXo=o("MPNetForMultipleChoice"),bXo=o(" (MPNet model)"),vXo=l(),zv=a("li"),s_e=a("strong"),FXo=o("nezha"),TXo=o(" \u2014 "),TX=a("a"),MXo=o("NezhaForMultipleChoice"),EXo=o(" (Nezha model)"),CXo=l(),Wv=a("li"),l_e=a("strong"),wXo=o("nystromformer"),AXo=o(" \u2014 "),MX=a("a"),LXo=o("NystromformerForMultipleChoice"),yXo=o(" (Nystr\xF6mformer model)"),xXo=l(),Qv=a("li"),i_e=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),EX=a("a"),SXo=o("QDQBertForMultipleChoice"),RXo=o(" (QDQBert model)"),PXo=l(),Hv=a("li"),d_e=a("strong"),BXo=o("rembert"),IXo=o(" \u2014 "),CX=a("a"),NXo=o("RemBertForMultipleChoice"),qXo=o(" (RemBERT model)"),jXo=l(),Uv=a("li"),c_e=a("strong"),DXo=o("roberta"),GXo=o(" \u2014 "),wX=a("a"),OXo=o("RobertaForMultipleChoice"),VXo=o(" (RoBERTa model)"),XXo=l(),Jv=a("li"),f_e=a("strong"),zXo=o("roformer"),WXo=o(" \u2014 "),AX=a("a"),QXo=o("RoFormerForMultipleChoice"),HXo=o(" (RoFormer model)"),UXo=l(),Yv=a("li"),m_e=a("strong"),JXo=o("squeezebert"),YXo=o(" \u2014 "),LX=a("a"),KXo=o("SqueezeBertForMultipleChoice"),ZXo=o(" (SqueezeBERT model)"),ezo=l(),Kv=a("li"),g_e=a("strong"),ozo=o("xlm"),rzo=o(" \u2014 "),yX=a("a"),tzo=o("XLMForMultipleChoice"),azo=o(" (XLM model)"),nzo=l(),Zv=a("li"),h_e=a("strong"),szo=o("xlm-roberta"),lzo=o(" \u2014 "),xX=a("a"),izo=o("XLMRobertaForMultipleChoice"),dzo=o(" (XLM-RoBERTa model)"),czo=l(),e0=a("li"),p_e=a("strong"),fzo=o("xlm-roberta-xl"),mzo=o(" \u2014 "),$X=a("a"),gzo=o("XLMRobertaXLForMultipleChoice"),hzo=o(" (XLM-RoBERTa-XL model)"),pzo=l(),o0=a("li"),__e=a("strong"),_zo=o("xlnet"),uzo=o(" \u2014 "),kX=a("a"),bzo=o("XLNetForMultipleChoice"),vzo=o(" (XLNet model)"),Fzo=l(),r0=a("li"),u_e=a("strong"),Tzo=o("yoso"),Mzo=o(" \u2014 "),SX=a("a"),Ezo=o("YosoForMultipleChoice"),Czo=o(" (YOSO model)"),wzo=l(),t0=a("p"),Azo=o("The model is set in evaluation mode by default using "),b_e=a("code"),Lzo=o("model.eval()"),yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),xzo=o("model.train()"),$zo=l(),F(a0.$$.fragment),qOe=l(),nd=a("h2"),n0=a("a"),F_e=a("span"),F(OL.$$.fragment),kzo=l(),T_e=a("span"),Szo=o("AutoModelForNextSentencePrediction"),jOe=l(),Io=a("div"),F(VL.$$.fragment),Rzo=l(),sd=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RX=a("a"),Bzo=o("from_pretrained()"),Izo=o(" class method or the "),PX=a("a"),Nzo=o("from_config()"),qzo=o(` class
method.`),jzo=l(),XL=a("p"),Dzo=o("This class cannot be instantiated directly using "),M_e=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),gt=a("div"),F(zL.$$.fragment),Xzo=l(),E_e=a("p"),zzo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wzo=l(),ld=a("p"),Qzo=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),Hzo=o("not"),Uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),F(s0.$$.fragment),Zzo=l(),to=a("div"),F(WL.$$.fragment),eWo=l(),w_e=a("p"),oWo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rWo=l(),Ga=a("p"),tWo=o("The model class to instantiate is selected based on the "),A_e=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),No=a("ul"),l0=a("li"),x_e=a("strong"),fWo=o("bert"),mWo=o(" \u2014 "),IX=a("a"),gWo=o("BertForNextSentencePrediction"),hWo=o(" (BERT model)"),pWo=l(),i0=a("li"),$_e=a("strong"),_Wo=o("fnet"),uWo=o(" \u2014 "),NX=a("a"),bWo=o("FNetForNextSentencePrediction"),vWo=o(" (FNet model)"),FWo=l(),d0=a("li"),k_e=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),qX=a("a"),EWo=o("MegatronBertForNextSentencePrediction"),CWo=o(" (Megatron-BERT model)"),wWo=l(),c0=a("li"),S_e=a("strong"),AWo=o("mobilebert"),LWo=o(" \u2014 "),jX=a("a"),yWo=o("MobileBertForNextSentencePrediction"),xWo=o(" (MobileBERT model)"),$Wo=l(),f0=a("li"),R_e=a("strong"),kWo=o("nezha"),SWo=o(" \u2014 "),DX=a("a"),RWo=o("NezhaForNextSentencePrediction"),PWo=o(" (Nezha model)"),BWo=l(),m0=a("li"),P_e=a("strong"),IWo=o("qdqbert"),NWo=o(" \u2014 "),GX=a("a"),qWo=o("QDQBertForNextSentencePrediction"),jWo=o(" (QDQBert model)"),DWo=l(),g0=a("p"),GWo=o("The model is set in evaluation mode by default using "),B_e=a("code"),OWo=o("model.eval()"),VWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),XWo=o("model.train()"),zWo=l(),F(h0.$$.fragment),DOe=l(),id=a("h2"),p0=a("a"),N_e=a("span"),F(QL.$$.fragment),WWo=l(),q_e=a("span"),QWo=o("AutoModelForTokenClassification"),GOe=l(),qo=a("div"),F(HL.$$.fragment),HWo=l(),dd=a("p"),UWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OX=a("a"),JWo=o("from_pretrained()"),YWo=o(" class method or the "),VX=a("a"),KWo=o("from_config()"),ZWo=o(` class
method.`),eQo=l(),UL=a("p"),oQo=o("This class cannot be instantiated directly using "),j_e=a("code"),rQo=o("__init__()"),tQo=o(" (throws an error)."),aQo=l(),ht=a("div"),F(JL.$$.fragment),nQo=l(),D_e=a("p"),sQo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lQo=l(),cd=a("p"),iQo=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),dQo=o("not"),cQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),fQo=o("from_pretrained()"),mQo=o(" to load the model weights."),gQo=l(),F(_0.$$.fragment),hQo=l(),ao=a("div"),F(YL.$$.fragment),pQo=l(),O_e=a("p"),_Qo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uQo=l(),Oa=a("p"),bQo=o("The model class to instantiate is selected based on the "),V_e=a("code"),vQo=o("model_type"),FQo=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),EQo=o("pretrained_model_name_or_path"),CQo=o(":"),wQo=l(),H=a("ul"),u0=a("li"),W_e=a("strong"),AQo=o("albert"),LQo=o(" \u2014 "),zX=a("a"),yQo=o("AlbertForTokenClassification"),xQo=o(" (ALBERT model)"),$Qo=l(),b0=a("li"),Q_e=a("strong"),kQo=o("bert"),SQo=o(" \u2014 "),WX=a("a"),RQo=o("BertForTokenClassification"),PQo=o(" (BERT model)"),BQo=l(),v0=a("li"),H_e=a("strong"),IQo=o("big_bird"),NQo=o(" \u2014 "),QX=a("a"),qQo=o("BigBirdForTokenClassification"),jQo=o(" (BigBird model)"),DQo=l(),F0=a("li"),U_e=a("strong"),GQo=o("bloom"),OQo=o(" \u2014 "),HX=a("a"),VQo=o("BloomForTokenClassification"),XQo=o(" (BLOOM model)"),zQo=l(),T0=a("li"),J_e=a("strong"),WQo=o("camembert"),QQo=o(" \u2014 "),UX=a("a"),HQo=o("CamembertForTokenClassification"),UQo=o(" (CamemBERT model)"),JQo=l(),M0=a("li"),Y_e=a("strong"),YQo=o("canine"),KQo=o(" \u2014 "),JX=a("a"),ZQo=o("CanineForTokenClassification"),eHo=o(" (CANINE model)"),oHo=l(),E0=a("li"),K_e=a("strong"),rHo=o("convbert"),tHo=o(" \u2014 "),YX=a("a"),aHo=o("ConvBertForTokenClassification"),nHo=o(" (ConvBERT model)"),sHo=l(),C0=a("li"),Z_e=a("strong"),lHo=o("data2vec-text"),iHo=o(" \u2014 "),KX=a("a"),dHo=o("Data2VecTextForTokenClassification"),cHo=o(" (Data2VecText model)"),fHo=l(),w0=a("li"),eue=a("strong"),mHo=o("deberta"),gHo=o(" \u2014 "),ZX=a("a"),hHo=o("DebertaForTokenClassification"),pHo=o(" (DeBERTa model)"),_Ho=l(),A0=a("li"),oue=a("strong"),uHo=o("deberta-v2"),bHo=o(" \u2014 "),ez=a("a"),vHo=o("DebertaV2ForTokenClassification"),FHo=o(" (DeBERTa-v2 model)"),THo=l(),L0=a("li"),rue=a("strong"),MHo=o("distilbert"),EHo=o(" \u2014 "),oz=a("a"),CHo=o("DistilBertForTokenClassification"),wHo=o(" (DistilBERT model)"),AHo=l(),y0=a("li"),tue=a("strong"),LHo=o("electra"),yHo=o(" \u2014 "),rz=a("a"),xHo=o("ElectraForTokenClassification"),$Ho=o(" (ELECTRA model)"),kHo=l(),x0=a("li"),aue=a("strong"),SHo=o("flaubert"),RHo=o(" \u2014 "),tz=a("a"),PHo=o("FlaubertForTokenClassification"),BHo=o(" (FlauBERT model)"),IHo=l(),$0=a("li"),nue=a("strong"),NHo=o("fnet"),qHo=o(" \u2014 "),az=a("a"),jHo=o("FNetForTokenClassification"),DHo=o(" (FNet model)"),GHo=l(),k0=a("li"),sue=a("strong"),OHo=o("funnel"),VHo=o(" \u2014 "),nz=a("a"),XHo=o("FunnelForTokenClassification"),zHo=o(" (Funnel Transformer model)"),WHo=l(),S0=a("li"),lue=a("strong"),QHo=o("gpt2"),HHo=o(" \u2014 "),sz=a("a"),UHo=o("GPT2ForTokenClassification"),JHo=o(" (OpenAI GPT-2 model)"),YHo=l(),R0=a("li"),iue=a("strong"),KHo=o("ibert"),ZHo=o(" \u2014 "),lz=a("a"),eUo=o("IBertForTokenClassification"),oUo=o(" (I-BERT model)"),rUo=l(),P0=a("li"),due=a("strong"),tUo=o("layoutlm"),aUo=o(" \u2014 "),iz=a("a"),nUo=o("LayoutLMForTokenClassification"),sUo=o(" (LayoutLM model)"),lUo=l(),B0=a("li"),cue=a("strong"),iUo=o("layoutlmv2"),dUo=o(" \u2014 "),dz=a("a"),cUo=o("LayoutLMv2ForTokenClassification"),fUo=o(" (LayoutLMv2 model)"),mUo=l(),I0=a("li"),fue=a("strong"),gUo=o("layoutlmv3"),hUo=o(" \u2014 "),cz=a("a"),pUo=o("LayoutLMv3ForTokenClassification"),_Uo=o(" (LayoutLMv3 model)"),uUo=l(),N0=a("li"),mue=a("strong"),bUo=o("longformer"),vUo=o(" \u2014 "),fz=a("a"),FUo=o("LongformerForTokenClassification"),TUo=o(" (Longformer model)"),MUo=l(),q0=a("li"),gue=a("strong"),EUo=o("megatron-bert"),CUo=o(" \u2014 "),mz=a("a"),wUo=o("MegatronBertForTokenClassification"),AUo=o(" (Megatron-BERT model)"),LUo=l(),j0=a("li"),hue=a("strong"),yUo=o("mobilebert"),xUo=o(" \u2014 "),gz=a("a"),$Uo=o("MobileBertForTokenClassification"),kUo=o(" (MobileBERT model)"),SUo=l(),D0=a("li"),pue=a("strong"),RUo=o("mpnet"),PUo=o(" \u2014 "),hz=a("a"),BUo=o("MPNetForTokenClassification"),IUo=o(" (MPNet model)"),NUo=l(),G0=a("li"),_ue=a("strong"),qUo=o("nezha"),jUo=o(" \u2014 "),pz=a("a"),DUo=o("NezhaForTokenClassification"),GUo=o(" (Nezha model)"),OUo=l(),O0=a("li"),uue=a("strong"),VUo=o("nystromformer"),XUo=o(" \u2014 "),_z=a("a"),zUo=o("NystromformerForTokenClassification"),WUo=o(" (Nystr\xF6mformer model)"),QUo=l(),V0=a("li"),bue=a("strong"),HUo=o("qdqbert"),UUo=o(" \u2014 "),uz=a("a"),JUo=o("QDQBertForTokenClassification"),YUo=o(" (QDQBert model)"),KUo=l(),X0=a("li"),vue=a("strong"),ZUo=o("rembert"),eJo=o(" \u2014 "),bz=a("a"),oJo=o("RemBertForTokenClassification"),rJo=o(" (RemBERT model)"),tJo=l(),z0=a("li"),Fue=a("strong"),aJo=o("roberta"),nJo=o(" \u2014 "),vz=a("a"),sJo=o("RobertaForTokenClassification"),lJo=o(" (RoBERTa model)"),iJo=l(),W0=a("li"),Tue=a("strong"),dJo=o("roformer"),cJo=o(" \u2014 "),Fz=a("a"),fJo=o("RoFormerForTokenClassification"),mJo=o(" (RoFormer model)"),gJo=l(),Q0=a("li"),Mue=a("strong"),hJo=o("squeezebert"),pJo=o(" \u2014 "),Tz=a("a"),_Jo=o("SqueezeBertForTokenClassification"),uJo=o(" (SqueezeBERT model)"),bJo=l(),H0=a("li"),Eue=a("strong"),vJo=o("xlm"),FJo=o(" \u2014 "),Mz=a("a"),TJo=o("XLMForTokenClassification"),MJo=o(" (XLM model)"),EJo=l(),U0=a("li"),Cue=a("strong"),CJo=o("xlm-roberta"),wJo=o(" \u2014 "),Ez=a("a"),AJo=o("XLMRobertaForTokenClassification"),LJo=o(" (XLM-RoBERTa model)"),yJo=l(),J0=a("li"),wue=a("strong"),xJo=o("xlm-roberta-xl"),$Jo=o(" \u2014 "),Cz=a("a"),kJo=o("XLMRobertaXLForTokenClassification"),SJo=o(" (XLM-RoBERTa-XL model)"),RJo=l(),Y0=a("li"),Aue=a("strong"),PJo=o("xlnet"),BJo=o(" \u2014 "),wz=a("a"),IJo=o("XLNetForTokenClassification"),NJo=o(" (XLNet model)"),qJo=l(),K0=a("li"),Lue=a("strong"),jJo=o("yoso"),DJo=o(" \u2014 "),Az=a("a"),GJo=o("YosoForTokenClassification"),OJo=o(" (YOSO model)"),VJo=l(),Z0=a("p"),XJo=o("The model is set in evaluation mode by default using "),yue=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),QJo=o("model.train()"),HJo=l(),F(eF.$$.fragment),OOe=l(),fd=a("h2"),oF=a("a"),$ue=a("span"),F(KL.$$.fragment),UJo=l(),kue=a("span"),JJo=o("AutoModelForQuestionAnswering"),VOe=l(),jo=a("div"),F(ZL.$$.fragment),YJo=l(),md=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lz=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),yz=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),ey=a("p"),aYo=o("This class cannot be instantiated directly using "),Sue=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),pt=a("div"),F(oy.$$.fragment),iYo=l(),Rue=a("p"),dYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cYo=l(),gd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(rF.$$.fragment),uYo=l(),no=a("div"),F(ry.$$.fragment),bYo=l(),Bue=a("p"),vYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FYo=l(),Va=a("p"),TYo=o("The model class to instantiate is selected based on the "),Iue=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),AYo=o("pretrained_model_name_or_path"),LYo=o(":"),yYo=l(),V=a("ul"),tF=a("li"),jue=a("strong"),xYo=o("albert"),$Yo=o(" \u2014 "),$z=a("a"),kYo=o("AlbertForQuestionAnswering"),SYo=o(" (ALBERT model)"),RYo=l(),aF=a("li"),Due=a("strong"),PYo=o("bart"),BYo=o(" \u2014 "),kz=a("a"),IYo=o("BartForQuestionAnswering"),NYo=o(" (BART model)"),qYo=l(),nF=a("li"),Gue=a("strong"),jYo=o("bert"),DYo=o(" \u2014 "),Sz=a("a"),GYo=o("BertForQuestionAnswering"),OYo=o(" (BERT model)"),VYo=l(),sF=a("li"),Oue=a("strong"),XYo=o("big_bird"),zYo=o(" \u2014 "),Rz=a("a"),WYo=o("BigBirdForQuestionAnswering"),QYo=o(" (BigBird model)"),HYo=l(),lF=a("li"),Vue=a("strong"),UYo=o("bigbird_pegasus"),JYo=o(" \u2014 "),Pz=a("a"),YYo=o("BigBirdPegasusForQuestionAnswering"),KYo=o(" (BigBird-Pegasus model)"),ZYo=l(),iF=a("li"),Xue=a("strong"),eKo=o("camembert"),oKo=o(" \u2014 "),Bz=a("a"),rKo=o("CamembertForQuestionAnswering"),tKo=o(" (CamemBERT model)"),aKo=l(),dF=a("li"),zue=a("strong"),nKo=o("canine"),sKo=o(" \u2014 "),Iz=a("a"),lKo=o("CanineForQuestionAnswering"),iKo=o(" (CANINE model)"),dKo=l(),cF=a("li"),Wue=a("strong"),cKo=o("convbert"),fKo=o(" \u2014 "),Nz=a("a"),mKo=o("ConvBertForQuestionAnswering"),gKo=o(" (ConvBERT model)"),hKo=l(),fF=a("li"),Que=a("strong"),pKo=o("data2vec-text"),_Ko=o(" \u2014 "),qz=a("a"),uKo=o("Data2VecTextForQuestionAnswering"),bKo=o(" (Data2VecText model)"),vKo=l(),mF=a("li"),Hue=a("strong"),FKo=o("deberta"),TKo=o(" \u2014 "),jz=a("a"),MKo=o("DebertaForQuestionAnswering"),EKo=o(" (DeBERTa model)"),CKo=l(),gF=a("li"),Uue=a("strong"),wKo=o("deberta-v2"),AKo=o(" \u2014 "),Dz=a("a"),LKo=o("DebertaV2ForQuestionAnswering"),yKo=o(" (DeBERTa-v2 model)"),xKo=l(),hF=a("li"),Jue=a("strong"),$Ko=o("distilbert"),kKo=o(" \u2014 "),Gz=a("a"),SKo=o("DistilBertForQuestionAnswering"),RKo=o(" (DistilBERT model)"),PKo=l(),pF=a("li"),Yue=a("strong"),BKo=o("electra"),IKo=o(" \u2014 "),Oz=a("a"),NKo=o("ElectraForQuestionAnswering"),qKo=o(" (ELECTRA model)"),jKo=l(),_F=a("li"),Kue=a("strong"),DKo=o("flaubert"),GKo=o(" \u2014 "),Vz=a("a"),OKo=o("FlaubertForQuestionAnsweringSimple"),VKo=o(" (FlauBERT model)"),XKo=l(),uF=a("li"),Zue=a("strong"),zKo=o("fnet"),WKo=o(" \u2014 "),Xz=a("a"),QKo=o("FNetForQuestionAnswering"),HKo=o(" (FNet model)"),UKo=l(),bF=a("li"),e1e=a("strong"),JKo=o("funnel"),YKo=o(" \u2014 "),zz=a("a"),KKo=o("FunnelForQuestionAnswering"),ZKo=o(" (Funnel Transformer model)"),eZo=l(),vF=a("li"),o1e=a("strong"),oZo=o("gptj"),rZo=o(" \u2014 "),Wz=a("a"),tZo=o("GPTJForQuestionAnswering"),aZo=o(" (GPT-J model)"),nZo=l(),FF=a("li"),r1e=a("strong"),sZo=o("ibert"),lZo=o(" \u2014 "),Qz=a("a"),iZo=o("IBertForQuestionAnswering"),dZo=o(" (I-BERT model)"),cZo=l(),TF=a("li"),t1e=a("strong"),fZo=o("layoutlmv2"),mZo=o(" \u2014 "),Hz=a("a"),gZo=o("LayoutLMv2ForQuestionAnswering"),hZo=o(" (LayoutLMv2 model)"),pZo=l(),MF=a("li"),a1e=a("strong"),_Zo=o("layoutlmv3"),uZo=o(" \u2014 "),Uz=a("a"),bZo=o("LayoutLMv3ForQuestionAnswering"),vZo=o(" (LayoutLMv3 model)"),FZo=l(),EF=a("li"),n1e=a("strong"),TZo=o("led"),MZo=o(" \u2014 "),Jz=a("a"),EZo=o("LEDForQuestionAnswering"),CZo=o(" (LED model)"),wZo=l(),CF=a("li"),s1e=a("strong"),AZo=o("longformer"),LZo=o(" \u2014 "),Yz=a("a"),yZo=o("LongformerForQuestionAnswering"),xZo=o(" (Longformer model)"),$Zo=l(),wF=a("li"),l1e=a("strong"),kZo=o("lxmert"),SZo=o(" \u2014 "),Kz=a("a"),RZo=o("LxmertForQuestionAnswering"),PZo=o(" (LXMERT model)"),BZo=l(),AF=a("li"),i1e=a("strong"),IZo=o("mbart"),NZo=o(" \u2014 "),Zz=a("a"),qZo=o("MBartForQuestionAnswering"),jZo=o(" (mBART model)"),DZo=l(),LF=a("li"),d1e=a("strong"),GZo=o("megatron-bert"),OZo=o(" \u2014 "),eW=a("a"),VZo=o("MegatronBertForQuestionAnswering"),XZo=o(" (Megatron-BERT model)"),zZo=l(),yF=a("li"),c1e=a("strong"),WZo=o("mobilebert"),QZo=o(" \u2014 "),oW=a("a"),HZo=o("MobileBertForQuestionAnswering"),UZo=o(" (MobileBERT model)"),JZo=l(),xF=a("li"),f1e=a("strong"),YZo=o("mpnet"),KZo=o(" \u2014 "),rW=a("a"),ZZo=o("MPNetForQuestionAnswering"),eer=o(" (MPNet model)"),oer=l(),$F=a("li"),m1e=a("strong"),rer=o("nezha"),ter=o(" \u2014 "),tW=a("a"),aer=o("NezhaForQuestionAnswering"),ner=o(" (Nezha model)"),ser=l(),kF=a("li"),g1e=a("strong"),ler=o("nystromformer"),ier=o(" \u2014 "),aW=a("a"),der=o("NystromformerForQuestionAnswering"),cer=o(" (Nystr\xF6mformer model)"),fer=l(),SF=a("li"),h1e=a("strong"),mer=o("qdqbert"),ger=o(" \u2014 "),nW=a("a"),her=o("QDQBertForQuestionAnswering"),per=o(" (QDQBert model)"),_er=l(),RF=a("li"),p1e=a("strong"),uer=o("reformer"),ber=o(" \u2014 "),sW=a("a"),ver=o("ReformerForQuestionAnswering"),Fer=o(" (Reformer model)"),Ter=l(),PF=a("li"),_1e=a("strong"),Mer=o("rembert"),Eer=o(" \u2014 "),lW=a("a"),Cer=o("RemBertForQuestionAnswering"),wer=o(" (RemBERT model)"),Aer=l(),BF=a("li"),u1e=a("strong"),Ler=o("roberta"),yer=o(" \u2014 "),iW=a("a"),xer=o("RobertaForQuestionAnswering"),$er=o(" (RoBERTa model)"),ker=l(),IF=a("li"),b1e=a("strong"),Ser=o("roformer"),Rer=o(" \u2014 "),dW=a("a"),Per=o("RoFormerForQuestionAnswering"),Ber=o(" (RoFormer model)"),Ier=l(),NF=a("li"),v1e=a("strong"),Ner=o("splinter"),qer=o(" \u2014 "),cW=a("a"),jer=o("SplinterForQuestionAnswering"),Der=o(" (Splinter model)"),Ger=l(),qF=a("li"),F1e=a("strong"),Oer=o("squeezebert"),Ver=o(" \u2014 "),fW=a("a"),Xer=o("SqueezeBertForQuestionAnswering"),zer=o(" (SqueezeBERT model)"),Wer=l(),jF=a("li"),T1e=a("strong"),Qer=o("xlm"),Her=o(" \u2014 "),mW=a("a"),Uer=o("XLMForQuestionAnsweringSimple"),Jer=o(" (XLM model)"),Yer=l(),DF=a("li"),M1e=a("strong"),Ker=o("xlm-roberta"),Zer=o(" \u2014 "),gW=a("a"),eor=o("XLMRobertaForQuestionAnswering"),oor=o(" (XLM-RoBERTa model)"),ror=l(),GF=a("li"),E1e=a("strong"),tor=o("xlm-roberta-xl"),aor=o(" \u2014 "),hW=a("a"),nor=o("XLMRobertaXLForQuestionAnswering"),sor=o(" (XLM-RoBERTa-XL model)"),lor=l(),OF=a("li"),C1e=a("strong"),ior=o("xlnet"),dor=o(" \u2014 "),pW=a("a"),cor=o("XLNetForQuestionAnsweringSimple"),mor=o(" (XLNet model)"),gor=l(),VF=a("li"),w1e=a("strong"),hor=o("yoso"),por=o(" \u2014 "),_W=a("a"),_or=o("YosoForQuestionAnswering"),uor=o(" (YOSO model)"),bor=l(),XF=a("p"),vor=o("The model is set in evaluation mode by default using "),A1e=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Mor=o("model.train()"),Eor=l(),F(zF.$$.fragment),XOe=l(),hd=a("h2"),WF=a("a"),y1e=a("span"),F(ty.$$.fragment),Cor=l(),x1e=a("span"),wor=o("AutoModelForTableQuestionAnswering"),zOe=l(),Do=a("div"),F(ay.$$.fragment),Aor=l(),pd=a("p"),Lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),yor=o("from_pretrained()"),xor=o(" class method or the "),bW=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),ny=a("p"),Ror=o("This class cannot be instantiated directly using "),$1e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),_t=a("div"),F(sy.$$.fragment),Nor=l(),k1e=a("p"),qor=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jor=l(),_d=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(QF.$$.fragment),Wor=l(),so=a("div"),F(ly.$$.fragment),Qor=l(),R1e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Uor=l(),Xa=a("p"),Jor=o("The model class to instantiate is selected based on the "),P1e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),N1e=a("ul"),HF=a("li"),q1e=a("strong"),arr=o("tapas"),nrr=o(" \u2014 "),FW=a("a"),srr=o("TapasForQuestionAnswering"),lrr=o(" (TAPAS model)"),irr=l(),UF=a("p"),drr=o("The model is set in evaluation mode by default using "),j1e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),mrr=o("model.train()"),grr=l(),F(JF.$$.fragment),WOe=l(),ud=a("h2"),YF=a("a"),G1e=a("span"),F(iy.$$.fragment),hrr=l(),O1e=a("span"),prr=o("AutoModelForImageClassification"),QOe=l(),Go=a("div"),F(dy.$$.fragment),_rr=l(),bd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),MW=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),cy=a("p"),Err=o("This class cannot be instantiated directly using "),V1e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),ut=a("div"),F(fy.$$.fragment),Lrr=l(),X1e=a("p"),yrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xrr=l(),vd=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(KF.$$.fragment),Irr=l(),lo=a("div"),F(my.$$.fragment),Nrr=l(),W1e=a("p"),qrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jrr=l(),za=a("p"),Drr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),Fe=a("ul"),ZF=a("li"),J1e=a("strong"),Hrr=o("beit"),Urr=o(" \u2014 "),CW=a("a"),Jrr=o("BeitForImageClassification"),Yrr=o(" (BEiT model)"),Krr=l(),e6=a("li"),Y1e=a("strong"),Zrr=o("convnext"),etr=o(" \u2014 "),wW=a("a"),otr=o("ConvNextForImageClassification"),rtr=o(" (ConvNeXT model)"),ttr=l(),o6=a("li"),K1e=a("strong"),atr=o("cvt"),ntr=o(" \u2014 "),AW=a("a"),str=o("CvtForImageClassification"),ltr=o(" (CvT model)"),itr=l(),r6=a("li"),Z1e=a("strong"),dtr=o("data2vec-vision"),ctr=o(" \u2014 "),LW=a("a"),ftr=o("Data2VecVisionForImageClassification"),mtr=o(" (Data2VecVision model)"),gtr=l(),zs=a("li"),e2e=a("strong"),htr=o("deit"),ptr=o(" \u2014 "),yW=a("a"),_tr=o("DeiTForImageClassification"),utr=o(" or "),xW=a("a"),btr=o("DeiTForImageClassificationWithTeacher"),vtr=o(" (DeiT model)"),Ftr=l(),t6=a("li"),o2e=a("strong"),Ttr=o("imagegpt"),Mtr=o(" \u2014 "),$W=a("a"),Etr=o("ImageGPTForImageClassification"),Ctr=o(" (ImageGPT model)"),wtr=l(),Ws=a("li"),r2e=a("strong"),Atr=o("levit"),Ltr=o(" \u2014 "),kW=a("a"),ytr=o("LevitForImageClassification"),xtr=o(" or "),SW=a("a"),$tr=o("LevitForImageClassificationWithTeacher"),ktr=o(" (LeViT model)"),Str=l(),bt=a("li"),t2e=a("strong"),Rtr=o("perceiver"),Ptr=o(" \u2014 "),RW=a("a"),Btr=o("PerceiverForImageClassificationLearned"),Itr=o(" or "),PW=a("a"),Ntr=o("PerceiverForImageClassificationFourier"),qtr=o(" or "),BW=a("a"),jtr=o("PerceiverForImageClassificationConvProcessing"),Dtr=o(" (Perceiver model)"),Gtr=l(),a6=a("li"),a2e=a("strong"),Otr=o("poolformer"),Vtr=o(" \u2014 "),IW=a("a"),Xtr=o("PoolFormerForImageClassification"),ztr=o(" (PoolFormer model)"),Wtr=l(),n6=a("li"),n2e=a("strong"),Qtr=o("regnet"),Htr=o(" \u2014 "),NW=a("a"),Utr=o("RegNetForImageClassification"),Jtr=o(" (RegNet model)"),Ytr=l(),s6=a("li"),s2e=a("strong"),Ktr=o("resnet"),Ztr=o(" \u2014 "),qW=a("a"),ear=o("ResNetForImageClassification"),oar=o(" (ResNet model)"),rar=l(),l6=a("li"),l2e=a("strong"),tar=o("segformer"),aar=o(" \u2014 "),jW=a("a"),nar=o("SegformerForImageClassification"),sar=o(" (SegFormer model)"),lar=l(),i6=a("li"),i2e=a("strong"),iar=o("swin"),dar=o(" \u2014 "),DW=a("a"),car=o("SwinForImageClassification"),far=o(" (Swin Transformer model)"),mar=l(),d6=a("li"),d2e=a("strong"),gar=o("van"),har=o(" \u2014 "),GW=a("a"),par=o("VanForImageClassification"),_ar=o(" (VAN model)"),uar=l(),c6=a("li"),c2e=a("strong"),bar=o("vit"),Far=o(" \u2014 "),OW=a("a"),Tar=o("ViTForImageClassification"),Mar=o(" (ViT model)"),Ear=l(),f6=a("p"),Car=o("The model is set in evaluation mode by default using "),f2e=a("code"),war=o("model.eval()"),Aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),Lar=o("model.train()"),yar=l(),F(m6.$$.fragment),HOe=l(),Fd=a("h2"),g6=a("a"),g2e=a("span"),F(gy.$$.fragment),xar=l(),h2e=a("span"),$ar=o("AutoModelForVision2Seq"),UOe=l(),Oo=a("div"),F(hy.$$.fragment),kar=l(),Td=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VW=a("a"),Rar=o("from_pretrained()"),Par=o(" class method or the "),XW=a("a"),Bar=o("from_config()"),Iar=o(` class
method.`),Nar=l(),py=a("p"),qar=o("This class cannot be instantiated directly using "),p2e=a("code"),jar=o("__init__()"),Dar=o(" (throws an error)."),Gar=l(),vt=a("div"),F(_y.$$.fragment),Oar=l(),_2e=a("p"),Var=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xar=l(),Md=a("p"),zar=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),War=o("not"),Qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Har=o("from_pretrained()"),Uar=o(" to load the model weights."),Jar=l(),F(h6.$$.fragment),Yar=l(),io=a("div"),F(uy.$$.fragment),Kar=l(),b2e=a("p"),Zar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),enr=l(),Wa=a("p"),onr=o("The model class to instantiate is selected based on the "),v2e=a("code"),rnr=o("model_type"),tnr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),snr=o("pretrained_model_name_or_path"),lnr=o(":"),inr=l(),M2e=a("ul"),p6=a("li"),E2e=a("strong"),dnr=o("vision-encoder-decoder"),cnr=o(" \u2014 "),WW=a("a"),fnr=o("VisionEncoderDecoderModel"),mnr=o(" (Vision Encoder decoder model)"),gnr=l(),_6=a("p"),hnr=o("The model is set in evaluation mode by default using "),C2e=a("code"),pnr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=a("code"),unr=o("model.train()"),bnr=l(),F(u6.$$.fragment),JOe=l(),Ed=a("h2"),b6=a("a"),A2e=a("span"),F(by.$$.fragment),vnr=l(),L2e=a("span"),Fnr=o("AutoModelForVisualQuestionAnswering"),YOe=l(),Vo=a("div"),F(vy.$$.fragment),Tnr=l(),Cd=a("p"),Mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=a("a"),Enr=o("from_pretrained()"),Cnr=o(" class method or the "),HW=a("a"),wnr=o("from_config()"),Anr=o(` class
method.`),Lnr=l(),Fy=a("p"),ynr=o("This class cannot be instantiated directly using "),y2e=a("code"),xnr=o("__init__()"),$nr=o(" (throws an error)."),knr=l(),Ft=a("div"),F(Ty.$$.fragment),Snr=l(),x2e=a("p"),Rnr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Pnr=l(),wd=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),Inr=o("not"),Nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),qnr=o("from_pretrained()"),jnr=o(" to load the model weights."),Dnr=l(),F(v6.$$.fragment),Gnr=l(),co=a("div"),F(My.$$.fragment),Onr=l(),k2e=a("p"),Vnr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Xnr=l(),Qa=a("p"),znr=o("The model class to instantiate is selected based on the "),S2e=a("code"),Wnr=o("model_type"),Qnr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),Hnr=o("pretrained_model_name_or_path"),Unr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(":"),Knr=l(),B2e=a("ul"),F6=a("li"),I2e=a("strong"),Znr=o("vilt"),esr=o(" \u2014 "),JW=a("a"),osr=o("ViltForQuestionAnswering"),rsr=o(" (ViLT model)"),tsr=l(),T6=a("p"),asr=o("The model is set in evaluation mode by default using "),N2e=a("code"),nsr=o("model.eval()"),ssr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),lsr=o("model.train()"),isr=l(),F(M6.$$.fragment),KOe=l(),Ad=a("h2"),E6=a("a"),j2e=a("span"),F(Ey.$$.fragment),dsr=l(),D2e=a("span"),csr=o("AutoModelForAudioClassification"),ZOe=l(),Xo=a("div"),F(Cy.$$.fragment),fsr=l(),Ld=a("p"),msr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YW=a("a"),gsr=o("from_pretrained()"),hsr=o(" class method or the "),KW=a("a"),psr=o("from_config()"),_sr=o(` class
method.`),usr=l(),wy=a("p"),bsr=o("This class cannot be instantiated directly using "),G2e=a("code"),vsr=o("__init__()"),Fsr=o(" (throws an error)."),Tsr=l(),Tt=a("div"),F(Ay.$$.fragment),Msr=l(),O2e=a("p"),Esr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Csr=l(),yd=a("p"),wsr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Asr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),ysr=o("from_pretrained()"),xsr=o(" to load the model weights."),$sr=l(),F(C6.$$.fragment),ksr=l(),fo=a("div"),F(Ly.$$.fragment),Ssr=l(),X2e=a("p"),Rsr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Psr=l(),Ha=a("p"),Bsr=o("The model class to instantiate is selected based on the "),z2e=a("code"),Isr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),qsr=o("pretrained_model_name_or_path"),jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(":"),Osr=l(),Pe=a("ul"),w6=a("li"),H2e=a("strong"),Vsr=o("data2vec-audio"),Xsr=o(" \u2014 "),eQ=a("a"),zsr=o("Data2VecAudioForSequenceClassification"),Wsr=o(" (Data2VecAudio model)"),Qsr=l(),A6=a("li"),U2e=a("strong"),Hsr=o("hubert"),Usr=o(" \u2014 "),oQ=a("a"),Jsr=o("HubertForSequenceClassification"),Ysr=o(" (Hubert model)"),Ksr=l(),L6=a("li"),J2e=a("strong"),Zsr=o("sew"),elr=o(" \u2014 "),rQ=a("a"),olr=o("SEWForSequenceClassification"),rlr=o(" (SEW model)"),tlr=l(),y6=a("li"),Y2e=a("strong"),alr=o("sew-d"),nlr=o(" \u2014 "),tQ=a("a"),slr=o("SEWDForSequenceClassification"),llr=o(" (SEW-D model)"),ilr=l(),x6=a("li"),K2e=a("strong"),dlr=o("unispeech"),clr=o(" \u2014 "),aQ=a("a"),flr=o("UniSpeechForSequenceClassification"),mlr=o(" (UniSpeech model)"),glr=l(),$6=a("li"),Z2e=a("strong"),hlr=o("unispeech-sat"),plr=o(" \u2014 "),nQ=a("a"),_lr=o("UniSpeechSatForSequenceClassification"),ulr=o(" (UniSpeechSat model)"),blr=l(),k6=a("li"),ebe=a("strong"),vlr=o("wav2vec2"),Flr=o(" \u2014 "),sQ=a("a"),Tlr=o("Wav2Vec2ForSequenceClassification"),Mlr=o(" (Wav2Vec2 model)"),Elr=l(),S6=a("li"),obe=a("strong"),Clr=o("wav2vec2-conformer"),wlr=o(" \u2014 "),lQ=a("a"),Alr=o("Wav2Vec2ConformerForSequenceClassification"),Llr=o(" (Wav2Vec2-Conformer model)"),ylr=l(),R6=a("li"),rbe=a("strong"),xlr=o("wavlm"),$lr=o(" \u2014 "),iQ=a("a"),klr=o("WavLMForSequenceClassification"),Slr=o(" (WavLM model)"),Rlr=l(),P6=a("p"),Plr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Blr=o("model.eval()"),Ilr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),Nlr=o("model.train()"),qlr=l(),F(B6.$$.fragment),eVe=l(),xd=a("h2"),I6=a("a"),nbe=a("span"),F(yy.$$.fragment),jlr=l(),sbe=a("span"),Dlr=o("AutoModelForAudioFrameClassification"),oVe=l(),zo=a("div"),F(xy.$$.fragment),Glr=l(),$d=a("p"),Olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dQ=a("a"),Vlr=o("from_pretrained()"),Xlr=o(" class method or the "),cQ=a("a"),zlr=o("from_config()"),Wlr=o(` class
method.`),Qlr=l(),$y=a("p"),Hlr=o("This class cannot be instantiated directly using "),lbe=a("code"),Ulr=o("__init__()"),Jlr=o(" (throws an error)."),Ylr=l(),Mt=a("div"),F(ky.$$.fragment),Klr=l(),ibe=a("p"),Zlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eir=l(),kd=a("p"),oir=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),rir=o("not"),tir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),air=o("from_pretrained()"),nir=o(" to load the model weights."),sir=l(),F(N6.$$.fragment),lir=l(),mo=a("div"),F(Sy.$$.fragment),iir=l(),cbe=a("p"),dir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),cir=l(),Ua=a("p"),fir=o("The model class to instantiate is selected based on the "),fbe=a("code"),mir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(":"),bir=l(),et=a("ul"),q6=a("li"),hbe=a("strong"),vir=o("data2vec-audio"),Fir=o(" \u2014 "),mQ=a("a"),Tir=o("Data2VecAudioForAudioFrameClassification"),Mir=o(" (Data2VecAudio model)"),Eir=l(),j6=a("li"),pbe=a("strong"),Cir=o("unispeech-sat"),wir=o(" \u2014 "),gQ=a("a"),Air=o("UniSpeechSatForAudioFrameClassification"),Lir=o(" (UniSpeechSat model)"),yir=l(),D6=a("li"),_be=a("strong"),xir=o("wav2vec2"),$ir=o(" \u2014 "),hQ=a("a"),kir=o("Wav2Vec2ForAudioFrameClassification"),Sir=o(" (Wav2Vec2 model)"),Rir=l(),G6=a("li"),ube=a("strong"),Pir=o("wav2vec2-conformer"),Bir=o(" \u2014 "),pQ=a("a"),Iir=o("Wav2Vec2ConformerForAudioFrameClassification"),Nir=o(" (Wav2Vec2-Conformer model)"),qir=l(),O6=a("li"),bbe=a("strong"),jir=o("wavlm"),Dir=o(" \u2014 "),_Q=a("a"),Gir=o("WavLMForAudioFrameClassification"),Oir=o(" (WavLM model)"),Vir=l(),V6=a("p"),Xir=o("The model is set in evaluation mode by default using "),vbe=a("code"),zir=o("model.eval()"),Wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),Qir=o("model.train()"),Hir=l(),F(X6.$$.fragment),rVe=l(),Sd=a("h2"),z6=a("a"),Tbe=a("span"),F(Ry.$$.fragment),Uir=l(),Mbe=a("span"),Jir=o("AutoModelForCTC"),tVe=l(),Wo=a("div"),F(Py.$$.fragment),Yir=l(),Rd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uQ=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),bQ=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),By=a("p"),adr=o("This class cannot be instantiated directly using "),Ebe=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),Et=a("div"),F(Iy.$$.fragment),idr=l(),Cbe=a("p"),ddr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cdr=l(),Pd=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),mdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),hdr=o("from_pretrained()"),pdr=o(" to load the model weights."),_dr=l(),F(W6.$$.fragment),udr=l(),go=a("div"),F(Ny.$$.fragment),bdr=l(),Abe=a("p"),vdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fdr=l(),Ja=a("p"),Tdr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(":"),ydr=l(),Le=a("ul"),Q6=a("li"),$be=a("strong"),xdr=o("data2vec-audio"),$dr=o(" \u2014 "),FQ=a("a"),kdr=o("Data2VecAudioForCTC"),Sdr=o(" (Data2VecAudio model)"),Rdr=l(),H6=a("li"),kbe=a("strong"),Pdr=o("hubert"),Bdr=o(" \u2014 "),TQ=a("a"),Idr=o("HubertForCTC"),Ndr=o(" (Hubert model)"),qdr=l(),U6=a("li"),Sbe=a("strong"),jdr=o("mctct"),Ddr=o(" \u2014 "),MQ=a("a"),Gdr=o("MCTCTForCTC"),Odr=o(" (M-CTC-T model)"),Vdr=l(),J6=a("li"),Rbe=a("strong"),Xdr=o("sew"),zdr=o(" \u2014 "),EQ=a("a"),Wdr=o("SEWForCTC"),Qdr=o(" (SEW model)"),Hdr=l(),Y6=a("li"),Pbe=a("strong"),Udr=o("sew-d"),Jdr=o(" \u2014 "),CQ=a("a"),Ydr=o("SEWDForCTC"),Kdr=o(" (SEW-D model)"),Zdr=l(),K6=a("li"),Bbe=a("strong"),ecr=o("unispeech"),ocr=o(" \u2014 "),wQ=a("a"),rcr=o("UniSpeechForCTC"),tcr=o(" (UniSpeech model)"),acr=l(),Z6=a("li"),Ibe=a("strong"),ncr=o("unispeech-sat"),scr=o(" \u2014 "),AQ=a("a"),lcr=o("UniSpeechSatForCTC"),icr=o(" (UniSpeechSat model)"),dcr=l(),eT=a("li"),Nbe=a("strong"),ccr=o("wav2vec2"),fcr=o(" \u2014 "),LQ=a("a"),mcr=o("Wav2Vec2ForCTC"),gcr=o(" (Wav2Vec2 model)"),hcr=l(),oT=a("li"),qbe=a("strong"),pcr=o("wav2vec2-conformer"),_cr=o(" \u2014 "),yQ=a("a"),ucr=o("Wav2Vec2ConformerForCTC"),bcr=o(" (Wav2Vec2-Conformer model)"),vcr=l(),rT=a("li"),jbe=a("strong"),Fcr=o("wavlm"),Tcr=o(" \u2014 "),xQ=a("a"),Mcr=o("WavLMForCTC"),Ecr=o(" (WavLM model)"),Ccr=l(),tT=a("p"),wcr=o("The model is set in evaluation mode by default using "),Dbe=a("code"),Acr=o("model.eval()"),Lcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=a("code"),ycr=o("model.train()"),xcr=l(),F(aT.$$.fragment),aVe=l(),Bd=a("h2"),nT=a("a"),Obe=a("span"),F(qy.$$.fragment),$cr=l(),Vbe=a("span"),kcr=o("AutoModelForSpeechSeq2Seq"),nVe=l(),Qo=a("div"),F(jy.$$.fragment),Scr=l(),Id=a("p"),Rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$Q=a("a"),Pcr=o("from_pretrained()"),Bcr=o(" class method or the "),kQ=a("a"),Icr=o("from_config()"),Ncr=o(` class
method.`),qcr=l(),Dy=a("p"),jcr=o("This class cannot be instantiated directly using "),Xbe=a("code"),Dcr=o("__init__()"),Gcr=o(" (throws an error)."),Ocr=l(),Ct=a("div"),F(Gy.$$.fragment),Vcr=l(),zbe=a("p"),Xcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zcr=l(),Nd=a("p"),Wcr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Qcr=o("not"),Hcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" to load the model weights."),Ycr=l(),F(sT.$$.fragment),Kcr=l(),ho=a("div"),F(Oy.$$.fragment),Zcr=l(),Qbe=a("p"),efr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ofr=l(),Ya=a("p"),rfr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),tfr=o("model_type"),afr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(":"),dfr=l(),Vy=a("ul"),lT=a("li"),Ybe=a("strong"),cfr=o("speech-encoder-decoder"),ffr=o(" \u2014 "),RQ=a("a"),mfr=o("SpeechEncoderDecoderModel"),gfr=o(" (Speech Encoder decoder model)"),hfr=l(),iT=a("li"),Kbe=a("strong"),pfr=o("speech_to_text"),_fr=o(" \u2014 "),PQ=a("a"),ufr=o("Speech2TextForConditionalGeneration"),bfr=o(" (Speech2Text model)"),vfr=l(),dT=a("p"),Ffr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),Tfr=o("model.eval()"),Mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=a("code"),Efr=o("model.train()"),Cfr=l(),F(cT.$$.fragment),sVe=l(),qd=a("h2"),fT=a("a"),ove=a("span"),F(Xy.$$.fragment),wfr=l(),rve=a("span"),Afr=o("AutoModelForAudioXVector"),lVe=l(),Ho=a("div"),F(zy.$$.fragment),Lfr=l(),jd=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BQ=a("a"),xfr=o("from_pretrained()"),$fr=o(" class method or the "),IQ=a("a"),kfr=o("from_config()"),Sfr=o(` class
method.`),Rfr=l(),Wy=a("p"),Pfr=o("This class cannot be instantiated directly using "),tve=a("code"),Bfr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),wt=a("div"),F(Qy.$$.fragment),qfr=l(),ave=a("p"),jfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dfr=l(),Dd=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Ofr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),Xfr=o("from_pretrained()"),zfr=o(" to load the model weights."),Wfr=l(),F(mT.$$.fragment),Qfr=l(),po=a("div"),F(Hy.$$.fragment),Hfr=l(),sve=a("p"),Ufr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jfr=l(),Ka=a("p"),Yfr=o("The model class to instantiate is selected based on the "),lve=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),ot=a("ul"),gT=a("li"),cve=a("strong"),nmr=o("data2vec-audio"),smr=o(" \u2014 "),qQ=a("a"),lmr=o("Data2VecAudioForXVector"),imr=o(" (Data2VecAudio model)"),dmr=l(),hT=a("li"),fve=a("strong"),cmr=o("unispeech-sat"),fmr=o(" \u2014 "),jQ=a("a"),mmr=o("UniSpeechSatForXVector"),gmr=o(" (UniSpeechSat model)"),hmr=l(),pT=a("li"),mve=a("strong"),pmr=o("wav2vec2"),_mr=o(" \u2014 "),DQ=a("a"),umr=o("Wav2Vec2ForXVector"),bmr=o(" (Wav2Vec2 model)"),vmr=l(),_T=a("li"),gve=a("strong"),Fmr=o("wav2vec2-conformer"),Tmr=o(" \u2014 "),GQ=a("a"),Mmr=o("Wav2Vec2ConformerForXVector"),Emr=o(" (Wav2Vec2-Conformer model)"),Cmr=l(),uT=a("li"),hve=a("strong"),wmr=o("wavlm"),Amr=o(" \u2014 "),OQ=a("a"),Lmr=o("WavLMForXVector"),ymr=o(" (WavLM model)"),xmr=l(),bT=a("p"),$mr=o("The model is set in evaluation mode by default using "),pve=a("code"),kmr=o("model.eval()"),Smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=a("code"),Rmr=o("model.train()"),Pmr=l(),F(vT.$$.fragment),iVe=l(),Gd=a("h2"),FT=a("a"),uve=a("span"),F(Uy.$$.fragment),Bmr=l(),bve=a("span"),Imr=o("AutoModelForMaskedImageModeling"),dVe=l(),Uo=a("div"),F(Jy.$$.fragment),Nmr=l(),Od=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VQ=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),XQ=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),Yy=a("p"),Xmr=o("This class cannot be instantiated directly using "),vve=a("code"),zmr=o("__init__()"),Wmr=o(" (throws an error)."),Qmr=l(),At=a("div"),F(Ky.$$.fragment),Hmr=l(),Fve=a("p"),Umr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Jmr=l(),Vd=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),egr=o("from_pretrained()"),ogr=o(" to load the model weights."),rgr=l(),F(TT.$$.fragment),tgr=l(),_o=a("div"),F(Zy.$$.fragment),agr=l(),Mve=a("p"),ngr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),sgr=l(),Za=a("p"),lgr=o("The model class to instantiate is selected based on the "),Eve=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),Xd=a("ul"),MT=a("li"),Ave=a("strong"),pgr=o("deit"),_gr=o(" \u2014 "),WQ=a("a"),ugr=o("DeiTForMaskedImageModeling"),bgr=o(" (DeiT model)"),vgr=l(),ET=a("li"),Lve=a("strong"),Fgr=o("swin"),Tgr=o(" \u2014 "),QQ=a("a"),Mgr=o("SwinForMaskedImageModeling"),Egr=o(" (Swin Transformer model)"),Cgr=l(),CT=a("li"),yve=a("strong"),wgr=o("vit"),Agr=o(" \u2014 "),HQ=a("a"),Lgr=o("ViTForMaskedImageModeling"),ygr=o(" (ViT model)"),xgr=l(),wT=a("p"),$gr=o("The model is set in evaluation mode by default using "),xve=a("code"),kgr=o("model.eval()"),Sgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=a("code"),Rgr=o("model.train()"),Pgr=l(),F(AT.$$.fragment),cVe=l(),zd=a("h2"),LT=a("a"),kve=a("span"),F(e9.$$.fragment),Bgr=l(),Sve=a("span"),Igr=o("AutoModelForObjectDetection"),fVe=l(),Jo=a("div"),F(o9.$$.fragment),Ngr=l(),Wd=a("p"),qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UQ=a("a"),jgr=o("from_pretrained()"),Dgr=o(" class method or the "),JQ=a("a"),Ggr=o("from_config()"),Ogr=o(` class
method.`),Vgr=l(),r9=a("p"),Xgr=o("This class cannot be instantiated directly using "),Rve=a("code"),zgr=o("__init__()"),Wgr=o(" (throws an error)."),Qgr=l(),Lt=a("div"),F(t9.$$.fragment),Hgr=l(),Pve=a("p"),Ugr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jgr=l(),Qd=a("p"),Ygr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),Kgr=o("not"),Zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),ehr=o("from_pretrained()"),ohr=o(" to load the model weights."),rhr=l(),F(yT.$$.fragment),thr=l(),uo=a("div"),F(a9.$$.fragment),ahr=l(),Ive=a("p"),nhr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),shr=l(),en=a("p"),lhr=o("The model class to instantiate is selected based on the "),Nve=a("code"),ihr=o("model_type"),dhr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),chr=o("pretrained_model_name_or_path"),fhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),mhr=o("pretrained_model_name_or_path"),ghr=o(":"),hhr=l(),n9=a("ul"),xT=a("li"),Dve=a("strong"),phr=o("detr"),_hr=o(" \u2014 "),KQ=a("a"),uhr=o("DetrForObjectDetection"),bhr=o(" (DETR model)"),vhr=l(),$T=a("li"),Gve=a("strong"),Fhr=o("yolos"),Thr=o(" \u2014 "),ZQ=a("a"),Mhr=o("YolosForObjectDetection"),Ehr=o(" (YOLOS model)"),Chr=l(),kT=a("p"),whr=o("The model is set in evaluation mode by default using "),Ove=a("code"),Ahr=o("model.eval()"),Lhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=a("code"),yhr=o("model.train()"),xhr=l(),F(ST.$$.fragment),mVe=l(),Hd=a("h2"),RT=a("a"),Xve=a("span"),F(s9.$$.fragment),$hr=l(),zve=a("span"),khr=o("AutoModelForImageSegmentation"),gVe=l(),Yo=a("div"),F(l9.$$.fragment),Shr=l(),Ud=a("p"),Rhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eH=a("a"),Phr=o("from_pretrained()"),Bhr=o(" class method or the "),oH=a("a"),Ihr=o("from_config()"),Nhr=o(` class
method.`),qhr=l(),i9=a("p"),jhr=o("This class cannot be instantiated directly using "),Wve=a("code"),Dhr=o("__init__()"),Ghr=o(" (throws an error)."),Ohr=l(),yt=a("div"),F(d9.$$.fragment),Vhr=l(),Qve=a("p"),Xhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zhr=l(),Jd=a("p"),Whr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),Qhr=o("not"),Hhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" to load the model weights."),Yhr=l(),F(PT.$$.fragment),Khr=l(),bo=a("div"),F(c9.$$.fragment),Zhr=l(),Uve=a("p"),epr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),opr=l(),on=a("p"),rpr=o("The model class to instantiate is selected based on the "),Jve=a("code"),tpr=o("model_type"),apr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),npr=o("pretrained_model_name_or_path"),spr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),lpr=o("pretrained_model_name_or_path"),ipr=o(":"),dpr=l(),Zve=a("ul"),BT=a("li"),e0e=a("strong"),cpr=o("detr"),fpr=o(" \u2014 "),tH=a("a"),mpr=o("DetrForSegmentation"),gpr=o(" (DETR model)"),hpr=l(),IT=a("p"),ppr=o("The model is set in evaluation mode by default using "),o0e=a("code"),_pr=o("model.eval()"),upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=a("code"),bpr=o("model.train()"),vpr=l(),F(NT.$$.fragment),hVe=l(),Yd=a("h2"),qT=a("a"),t0e=a("span"),F(f9.$$.fragment),Fpr=l(),a0e=a("span"),Tpr=o("AutoModelForSemanticSegmentation"),pVe=l(),Ko=a("div"),F(m9.$$.fragment),Mpr=l(),Kd=a("p"),Epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aH=a("a"),Cpr=o("from_pretrained()"),wpr=o(" class method or the "),nH=a("a"),Apr=o("from_config()"),Lpr=o(` class
method.`),ypr=l(),g9=a("p"),xpr=o("This class cannot be instantiated directly using "),n0e=a("code"),$pr=o("__init__()"),kpr=o(" (throws an error)."),Spr=l(),xt=a("div"),F(h9.$$.fragment),Rpr=l(),s0e=a("p"),Ppr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Bpr=l(),Zd=a("p"),Ipr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),Npr=o("not"),qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),jpr=o("from_pretrained()"),Dpr=o(" to load the model weights."),Gpr=l(),F(jT.$$.fragment),Opr=l(),vo=a("div"),F(p9.$$.fragment),Vpr=l(),i0e=a("p"),Xpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zpr=l(),rn=a("p"),Wpr=o("The model class to instantiate is selected based on the "),d0e=a("code"),Qpr=o("model_type"),Hpr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),Ypr=o("pretrained_model_name_or_path"),Kpr=o(":"),Zpr=l(),tn=a("ul"),DT=a("li"),m0e=a("strong"),e_r=o("beit"),o_r=o(" \u2014 "),lH=a("a"),r_r=o("BeitForSemanticSegmentation"),t_r=o(" (BEiT model)"),a_r=l(),GT=a("li"),g0e=a("strong"),n_r=o("data2vec-vision"),s_r=o(" \u2014 "),iH=a("a"),l_r=o("Data2VecVisionForSemanticSegmentation"),i_r=o(" (Data2VecVision model)"),d_r=l(),OT=a("li"),h0e=a("strong"),c_r=o("dpt"),f_r=o(" \u2014 "),dH=a("a"),m_r=o("DPTForSemanticSegmentation"),g_r=o(" (DPT model)"),h_r=l(),VT=a("li"),p0e=a("strong"),p_r=o("segformer"),__r=o(" \u2014 "),cH=a("a"),u_r=o("SegformerForSemanticSegmentation"),b_r=o(" (SegFormer model)"),v_r=l(),XT=a("p"),F_r=o("The model is set in evaluation mode by default using "),_0e=a("code"),T_r=o("model.eval()"),M_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u0e=a("code"),E_r=o("model.train()"),C_r=l(),F(zT.$$.fragment),_Ve=l(),ec=a("h2"),WT=a("a"),b0e=a("span"),F(_9.$$.fragment),w_r=l(),v0e=a("span"),A_r=o("AutoModelForInstanceSegmentation"),uVe=l(),Zo=a("div"),F(u9.$$.fragment),L_r=l(),oc=a("p"),y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fH=a("a"),x_r=o("from_pretrained()"),$_r=o(" class method or the "),mH=a("a"),k_r=o("from_config()"),S_r=o(` class
method.`),R_r=l(),b9=a("p"),P_r=o("This class cannot be instantiated directly using "),F0e=a("code"),B_r=o("__init__()"),I_r=o(" (throws an error)."),N_r=l(),$t=a("div"),F(v9.$$.fragment),q_r=l(),T0e=a("p"),j_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),D_r=l(),rc=a("p"),G_r=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),O_r=o("not"),V_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),X_r=o("from_pretrained()"),z_r=o(" to load the model weights."),W_r=l(),F(QT.$$.fragment),Q_r=l(),Fo=a("div"),F(F9.$$.fragment),H_r=l(),E0e=a("p"),U_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J_r=l(),an=a("p"),Y_r=o("The model class to instantiate is selected based on the "),C0e=a("code"),K_r=o("model_type"),Z_r=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),eur=o("pretrained_model_name_or_path"),our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(":"),aur=l(),L0e=a("ul"),HT=a("li"),y0e=a("strong"),nur=o("maskformer"),sur=o(" \u2014 "),hH=a("a"),lur=o("MaskFormerForInstanceSegmentation"),iur=o(" (MaskFormer model)"),dur=l(),UT=a("p"),cur=o("The model is set in evaluation mode by default using "),x0e=a("code"),fur=o("model.eval()"),mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$0e=a("code"),gur=o("model.train()"),hur=l(),F(JT.$$.fragment),bVe=l(),tc=a("h2"),YT=a("a"),k0e=a("span"),F(T9.$$.fragment),pur=l(),S0e=a("span"),_ur=o("TFAutoModel"),vVe=l(),er=a("div"),F(M9.$$.fragment),uur=l(),ac=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pH=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),_H=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),E9=a("p"),Cur=o("This class cannot be instantiated directly using "),R0e=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),kt=a("div"),F(C9.$$.fragment),yur=l(),P0e=a("p"),xur=o("Instantiates one of the base model classes of the library from a configuration."),$ur=l(),nc=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),B0e=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(KT.$$.fragment),Nur=l(),yr=a("div"),F(w9.$$.fragment),qur=l(),I0e=a("p"),jur=o("Instantiate one of the base model classes of the library from a pretrained model."),Dur=l(),nn=a("p"),Gur=o("The model class to instantiate is selected based on the "),N0e=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),q0e=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(":"),Hur=l(),q=a("ul"),ZT=a("li"),D0e=a("strong"),Uur=o("albert"),Jur=o(" \u2014 "),bH=a("a"),Yur=o("TFAlbertModel"),Kur=o(" (ALBERT model)"),Zur=l(),e7=a("li"),G0e=a("strong"),e1r=o("bart"),o1r=o(" \u2014 "),vH=a("a"),r1r=o("TFBartModel"),t1r=o(" (BART model)"),a1r=l(),o7=a("li"),O0e=a("strong"),n1r=o("bert"),s1r=o(" \u2014 "),FH=a("a"),l1r=o("TFBertModel"),i1r=o(" (BERT model)"),d1r=l(),r7=a("li"),V0e=a("strong"),c1r=o("blenderbot"),f1r=o(" \u2014 "),TH=a("a"),m1r=o("TFBlenderbotModel"),g1r=o(" (Blenderbot model)"),h1r=l(),t7=a("li"),X0e=a("strong"),p1r=o("blenderbot-small"),_1r=o(" \u2014 "),MH=a("a"),u1r=o("TFBlenderbotSmallModel"),b1r=o(" (BlenderbotSmall model)"),v1r=l(),a7=a("li"),z0e=a("strong"),F1r=o("camembert"),T1r=o(" \u2014 "),EH=a("a"),M1r=o("TFCamembertModel"),E1r=o(" (CamemBERT model)"),C1r=l(),n7=a("li"),W0e=a("strong"),w1r=o("clip"),A1r=o(" \u2014 "),CH=a("a"),L1r=o("TFCLIPModel"),y1r=o(" (CLIP model)"),x1r=l(),s7=a("li"),Q0e=a("strong"),$1r=o("convbert"),k1r=o(" \u2014 "),wH=a("a"),S1r=o("TFConvBertModel"),R1r=o(" (ConvBERT model)"),P1r=l(),l7=a("li"),H0e=a("strong"),B1r=o("convnext"),I1r=o(" \u2014 "),AH=a("a"),N1r=o("TFConvNextModel"),q1r=o(" (ConvNeXT model)"),j1r=l(),i7=a("li"),U0e=a("strong"),D1r=o("ctrl"),G1r=o(" \u2014 "),LH=a("a"),O1r=o("TFCTRLModel"),V1r=o(" (CTRL model)"),X1r=l(),d7=a("li"),J0e=a("strong"),z1r=o("data2vec-vision"),W1r=o(" \u2014 "),yH=a("a"),Q1r=o("TFData2VecVisionModel"),H1r=o(" (Data2VecVision model)"),U1r=l(),c7=a("li"),Y0e=a("strong"),J1r=o("deberta"),Y1r=o(" \u2014 "),xH=a("a"),K1r=o("TFDebertaModel"),Z1r=o(" (DeBERTa model)"),e2r=l(),f7=a("li"),K0e=a("strong"),o2r=o("deberta-v2"),r2r=o(" \u2014 "),$H=a("a"),t2r=o("TFDebertaV2Model"),a2r=o(" (DeBERTa-v2 model)"),n2r=l(),m7=a("li"),Z0e=a("strong"),s2r=o("deit"),l2r=o(" \u2014 "),kH=a("a"),i2r=o("TFDeiTModel"),d2r=o(" (DeiT model)"),c2r=l(),g7=a("li"),eFe=a("strong"),f2r=o("distilbert"),m2r=o(" \u2014 "),SH=a("a"),g2r=o("TFDistilBertModel"),h2r=o(" (DistilBERT model)"),p2r=l(),h7=a("li"),oFe=a("strong"),_2r=o("dpr"),u2r=o(" \u2014 "),RH=a("a"),b2r=o("TFDPRQuestionEncoder"),v2r=o(" (DPR model)"),F2r=l(),p7=a("li"),rFe=a("strong"),T2r=o("electra"),M2r=o(" \u2014 "),PH=a("a"),E2r=o("TFElectraModel"),C2r=o(" (ELECTRA model)"),w2r=l(),_7=a("li"),tFe=a("strong"),A2r=o("flaubert"),L2r=o(" \u2014 "),BH=a("a"),y2r=o("TFFlaubertModel"),x2r=o(" (FlauBERT model)"),$2r=l(),Qs=a("li"),aFe=a("strong"),k2r=o("funnel"),S2r=o(" \u2014 "),IH=a("a"),R2r=o("TFFunnelModel"),P2r=o(" or "),NH=a("a"),B2r=o("TFFunnelBaseModel"),I2r=o(" (Funnel Transformer model)"),N2r=l(),u7=a("li"),nFe=a("strong"),q2r=o("gpt2"),j2r=o(" \u2014 "),qH=a("a"),D2r=o("TFGPT2Model"),G2r=o(" (OpenAI GPT-2 model)"),O2r=l(),b7=a("li"),sFe=a("strong"),V2r=o("gptj"),X2r=o(" \u2014 "),jH=a("a"),z2r=o("TFGPTJModel"),W2r=o(" (GPT-J model)"),Q2r=l(),v7=a("li"),lFe=a("strong"),H2r=o("hubert"),U2r=o(" \u2014 "),DH=a("a"),J2r=o("TFHubertModel"),Y2r=o(" (Hubert model)"),K2r=l(),F7=a("li"),iFe=a("strong"),Z2r=o("layoutlm"),ebr=o(" \u2014 "),GH=a("a"),obr=o("TFLayoutLMModel"),rbr=o(" (LayoutLM model)"),tbr=l(),T7=a("li"),dFe=a("strong"),abr=o("led"),nbr=o(" \u2014 "),OH=a("a"),sbr=o("TFLEDModel"),lbr=o(" (LED model)"),ibr=l(),M7=a("li"),cFe=a("strong"),dbr=o("longformer"),cbr=o(" \u2014 "),VH=a("a"),fbr=o("TFLongformerModel"),mbr=o(" (Longformer model)"),gbr=l(),E7=a("li"),fFe=a("strong"),hbr=o("lxmert"),pbr=o(" \u2014 "),XH=a("a"),_br=o("TFLxmertModel"),ubr=o(" (LXMERT model)"),bbr=l(),C7=a("li"),mFe=a("strong"),vbr=o("marian"),Fbr=o(" \u2014 "),zH=a("a"),Tbr=o("TFMarianModel"),Mbr=o(" (Marian model)"),Ebr=l(),w7=a("li"),gFe=a("strong"),Cbr=o("mbart"),wbr=o(" \u2014 "),WH=a("a"),Abr=o("TFMBartModel"),Lbr=o(" (mBART model)"),ybr=l(),A7=a("li"),hFe=a("strong"),xbr=o("mobilebert"),$br=o(" \u2014 "),QH=a("a"),kbr=o("TFMobileBertModel"),Sbr=o(" (MobileBERT model)"),Rbr=l(),L7=a("li"),pFe=a("strong"),Pbr=o("mpnet"),Bbr=o(" \u2014 "),HH=a("a"),Ibr=o("TFMPNetModel"),Nbr=o(" (MPNet model)"),qbr=l(),y7=a("li"),_Fe=a("strong"),jbr=o("mt5"),Dbr=o(" \u2014 "),UH=a("a"),Gbr=o("TFMT5Model"),Obr=o(" (MT5 model)"),Vbr=l(),x7=a("li"),uFe=a("strong"),Xbr=o("openai-gpt"),zbr=o(" \u2014 "),JH=a("a"),Wbr=o("TFOpenAIGPTModel"),Qbr=o(" (OpenAI GPT model)"),Hbr=l(),$7=a("li"),bFe=a("strong"),Ubr=o("opt"),Jbr=o(" \u2014 "),YH=a("a"),Ybr=o("TFOPTModel"),Kbr=o(" (OPT model)"),Zbr=l(),k7=a("li"),vFe=a("strong"),evr=o("pegasus"),ovr=o(" \u2014 "),KH=a("a"),rvr=o("TFPegasusModel"),tvr=o(" (Pegasus model)"),avr=l(),S7=a("li"),FFe=a("strong"),nvr=o("rembert"),svr=o(" \u2014 "),ZH=a("a"),lvr=o("TFRemBertModel"),ivr=o(" (RemBERT model)"),dvr=l(),R7=a("li"),TFe=a("strong"),cvr=o("roberta"),fvr=o(" \u2014 "),eU=a("a"),mvr=o("TFRobertaModel"),gvr=o(" (RoBERTa model)"),hvr=l(),P7=a("li"),MFe=a("strong"),pvr=o("roformer"),_vr=o(" \u2014 "),oU=a("a"),uvr=o("TFRoFormerModel"),bvr=o(" (RoFormer model)"),vvr=l(),B7=a("li"),EFe=a("strong"),Fvr=o("speech_to_text"),Tvr=o(" \u2014 "),rU=a("a"),Mvr=o("TFSpeech2TextModel"),Evr=o(" (Speech2Text model)"),Cvr=l(),I7=a("li"),CFe=a("strong"),wvr=o("swin"),Avr=o(" \u2014 "),tU=a("a"),Lvr=o("TFSwinModel"),yvr=o(" (Swin Transformer model)"),xvr=l(),N7=a("li"),wFe=a("strong"),$vr=o("t5"),kvr=o(" \u2014 "),aU=a("a"),Svr=o("TFT5Model"),Rvr=o(" (T5 model)"),Pvr=l(),q7=a("li"),AFe=a("strong"),Bvr=o("tapas"),Ivr=o(" \u2014 "),nU=a("a"),Nvr=o("TFTapasModel"),qvr=o(" (TAPAS model)"),jvr=l(),j7=a("li"),LFe=a("strong"),Dvr=o("transfo-xl"),Gvr=o(" \u2014 "),sU=a("a"),Ovr=o("TFTransfoXLModel"),Vvr=o(" (Transformer-XL model)"),Xvr=l(),D7=a("li"),yFe=a("strong"),zvr=o("vit"),Wvr=o(" \u2014 "),lU=a("a"),Qvr=o("TFViTModel"),Hvr=o(" (ViT model)"),Uvr=l(),G7=a("li"),xFe=a("strong"),Jvr=o("vit_mae"),Yvr=o(" \u2014 "),iU=a("a"),Kvr=o("TFViTMAEModel"),Zvr=o(" (ViTMAE model)"),e0r=l(),O7=a("li"),$Fe=a("strong"),o0r=o("wav2vec2"),r0r=o(" \u2014 "),dU=a("a"),t0r=o("TFWav2Vec2Model"),a0r=o(" (Wav2Vec2 model)"),n0r=l(),V7=a("li"),kFe=a("strong"),s0r=o("xlm"),l0r=o(" \u2014 "),cU=a("a"),i0r=o("TFXLMModel"),d0r=o(" (XLM model)"),c0r=l(),X7=a("li"),SFe=a("strong"),f0r=o("xlm-roberta"),m0r=o(" \u2014 "),fU=a("a"),g0r=o("TFXLMRobertaModel"),h0r=o(" (XLM-RoBERTa model)"),p0r=l(),z7=a("li"),RFe=a("strong"),_0r=o("xlnet"),u0r=o(" \u2014 "),mU=a("a"),b0r=o("TFXLNetModel"),v0r=o(" (XLNet model)"),F0r=l(),F(W7.$$.fragment),FVe=l(),sc=a("h2"),Q7=a("a"),PFe=a("span"),F(A9.$$.fragment),T0r=l(),BFe=a("span"),M0r=o("TFAutoModelForPreTraining"),TVe=l(),or=a("div"),F(L9.$$.fragment),E0r=l(),lc=a("p"),C0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gU=a("a"),w0r=o("from_pretrained()"),A0r=o(" class method or the "),hU=a("a"),L0r=o("from_config()"),y0r=o(` class
method.`),x0r=l(),y9=a("p"),$0r=o("This class cannot be instantiated directly using "),IFe=a("code"),k0r=o("__init__()"),S0r=o(" (throws an error)."),R0r=l(),St=a("div"),F(x9.$$.fragment),P0r=l(),NFe=a("p"),B0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),I0r=l(),ic=a("p"),N0r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),q0r=o("not"),j0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),D0r=o("from_pretrained()"),G0r=o(" to load the model weights."),O0r=l(),F(H7.$$.fragment),V0r=l(),xr=a("div"),F($9.$$.fragment),X0r=l(),jFe=a("p"),z0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W0r=l(),sn=a("p"),Q0r=o("The model class to instantiate is selected based on the "),DFe=a("code"),H0r=o("model_type"),U0r=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(":"),eFr=l(),se=a("ul"),U7=a("li"),VFe=a("strong"),oFr=o("albert"),rFr=o(" \u2014 "),_U=a("a"),tFr=o("TFAlbertForPreTraining"),aFr=o(" (ALBERT model)"),nFr=l(),J7=a("li"),XFe=a("strong"),sFr=o("bart"),lFr=o(" \u2014 "),uU=a("a"),iFr=o("TFBartForConditionalGeneration"),dFr=o(" (BART model)"),cFr=l(),Y7=a("li"),zFe=a("strong"),fFr=o("bert"),mFr=o(" \u2014 "),bU=a("a"),gFr=o("TFBertForPreTraining"),hFr=o(" (BERT model)"),pFr=l(),K7=a("li"),WFe=a("strong"),_Fr=o("camembert"),uFr=o(" \u2014 "),vU=a("a"),bFr=o("TFCamembertForMaskedLM"),vFr=o(" (CamemBERT model)"),FFr=l(),Z7=a("li"),QFe=a("strong"),TFr=o("ctrl"),MFr=o(" \u2014 "),FU=a("a"),EFr=o("TFCTRLLMHeadModel"),CFr=o(" (CTRL model)"),wFr=l(),e8=a("li"),HFe=a("strong"),AFr=o("distilbert"),LFr=o(" \u2014 "),TU=a("a"),yFr=o("TFDistilBertForMaskedLM"),xFr=o(" (DistilBERT model)"),$Fr=l(),o8=a("li"),UFe=a("strong"),kFr=o("electra"),SFr=o(" \u2014 "),MU=a("a"),RFr=o("TFElectraForPreTraining"),PFr=o(" (ELECTRA model)"),BFr=l(),r8=a("li"),JFe=a("strong"),IFr=o("flaubert"),NFr=o(" \u2014 "),EU=a("a"),qFr=o("TFFlaubertWithLMHeadModel"),jFr=o(" (FlauBERT model)"),DFr=l(),t8=a("li"),YFe=a("strong"),GFr=o("funnel"),OFr=o(" \u2014 "),CU=a("a"),VFr=o("TFFunnelForPreTraining"),XFr=o(" (Funnel Transformer model)"),zFr=l(),a8=a("li"),KFe=a("strong"),WFr=o("gpt2"),QFr=o(" \u2014 "),wU=a("a"),HFr=o("TFGPT2LMHeadModel"),UFr=o(" (OpenAI GPT-2 model)"),JFr=l(),n8=a("li"),ZFe=a("strong"),YFr=o("layoutlm"),KFr=o(" \u2014 "),AU=a("a"),ZFr=o("TFLayoutLMForMaskedLM"),e6r=o(" (LayoutLM model)"),o6r=l(),s8=a("li"),e6e=a("strong"),r6r=o("lxmert"),t6r=o(" \u2014 "),LU=a("a"),a6r=o("TFLxmertForPreTraining"),n6r=o(" (LXMERT model)"),s6r=l(),l8=a("li"),o6e=a("strong"),l6r=o("mobilebert"),i6r=o(" \u2014 "),yU=a("a"),d6r=o("TFMobileBertForPreTraining"),c6r=o(" (MobileBERT model)"),f6r=l(),i8=a("li"),r6e=a("strong"),m6r=o("mpnet"),g6r=o(" \u2014 "),xU=a("a"),h6r=o("TFMPNetForMaskedLM"),p6r=o(" (MPNet model)"),_6r=l(),d8=a("li"),t6e=a("strong"),u6r=o("openai-gpt"),b6r=o(" \u2014 "),$U=a("a"),v6r=o("TFOpenAIGPTLMHeadModel"),F6r=o(" (OpenAI GPT model)"),T6r=l(),c8=a("li"),a6e=a("strong"),M6r=o("roberta"),E6r=o(" \u2014 "),kU=a("a"),C6r=o("TFRobertaForMaskedLM"),w6r=o(" (RoBERTa model)"),A6r=l(),f8=a("li"),n6e=a("strong"),L6r=o("t5"),y6r=o(" \u2014 "),SU=a("a"),x6r=o("TFT5ForConditionalGeneration"),$6r=o(" (T5 model)"),k6r=l(),m8=a("li"),s6e=a("strong"),S6r=o("tapas"),R6r=o(" \u2014 "),RU=a("a"),P6r=o("TFTapasForMaskedLM"),B6r=o(" (TAPAS model)"),I6r=l(),g8=a("li"),l6e=a("strong"),N6r=o("transfo-xl"),q6r=o(" \u2014 "),PU=a("a"),j6r=o("TFTransfoXLLMHeadModel"),D6r=o(" (Transformer-XL model)"),G6r=l(),h8=a("li"),i6e=a("strong"),O6r=o("vit_mae"),V6r=o(" \u2014 "),BU=a("a"),X6r=o("TFViTMAEForPreTraining"),z6r=o(" (ViTMAE model)"),W6r=l(),p8=a("li"),d6e=a("strong"),Q6r=o("xlm"),H6r=o(" \u2014 "),IU=a("a"),U6r=o("TFXLMWithLMHeadModel"),J6r=o(" (XLM model)"),Y6r=l(),_8=a("li"),c6e=a("strong"),K6r=o("xlm-roberta"),Z6r=o(" \u2014 "),NU=a("a"),eTr=o("TFXLMRobertaForMaskedLM"),oTr=o(" (XLM-RoBERTa model)"),rTr=l(),u8=a("li"),f6e=a("strong"),tTr=o("xlnet"),aTr=o(" \u2014 "),qU=a("a"),nTr=o("TFXLNetLMHeadModel"),sTr=o(" (XLNet model)"),lTr=l(),F(b8.$$.fragment),MVe=l(),dc=a("h2"),v8=a("a"),m6e=a("span"),F(k9.$$.fragment),iTr=l(),g6e=a("span"),dTr=o("TFAutoModelForCausalLM"),EVe=l(),rr=a("div"),F(S9.$$.fragment),cTr=l(),cc=a("p"),fTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=a("a"),mTr=o("from_pretrained()"),gTr=o(" class method or the "),DU=a("a"),hTr=o("from_config()"),pTr=o(` class
method.`),_Tr=l(),R9=a("p"),uTr=o("This class cannot be instantiated directly using "),h6e=a("code"),bTr=o("__init__()"),vTr=o(" (throws an error)."),FTr=l(),Rt=a("div"),F(P9.$$.fragment),TTr=l(),p6e=a("p"),MTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ETr=l(),fc=a("p"),CTr=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),wTr=o("not"),ATr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),LTr=o("from_pretrained()"),yTr=o(" to load the model weights."),xTr=l(),F(F8.$$.fragment),$Tr=l(),$r=a("div"),F(B9.$$.fragment),kTr=l(),u6e=a("p"),STr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RTr=l(),ln=a("p"),PTr=o("The model class to instantiate is selected based on the "),b6e=a("code"),BTr=o("model_type"),ITr=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),NTr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),jTr=o("pretrained_model_name_or_path"),DTr=o(":"),GTr=l(),Me=a("ul"),T8=a("li"),T6e=a("strong"),OTr=o("bert"),VTr=o(" \u2014 "),OU=a("a"),XTr=o("TFBertLMHeadModel"),zTr=o(" (BERT model)"),WTr=l(),M8=a("li"),M6e=a("strong"),QTr=o("camembert"),HTr=o(" \u2014 "),VU=a("a"),UTr=o("TFCamembertForCausalLM"),JTr=o(" (CamemBERT model)"),YTr=l(),E8=a("li"),E6e=a("strong"),KTr=o("ctrl"),ZTr=o(" \u2014 "),XU=a("a"),e7r=o("TFCTRLLMHeadModel"),o7r=o(" (CTRL model)"),r7r=l(),C8=a("li"),C6e=a("strong"),t7r=o("gpt2"),a7r=o(" \u2014 "),zU=a("a"),n7r=o("TFGPT2LMHeadModel"),s7r=o(" (OpenAI GPT-2 model)"),l7r=l(),w8=a("li"),w6e=a("strong"),i7r=o("gptj"),d7r=o(" \u2014 "),WU=a("a"),c7r=o("TFGPTJForCausalLM"),f7r=o(" (GPT-J model)"),m7r=l(),A8=a("li"),A6e=a("strong"),g7r=o("openai-gpt"),h7r=o(" \u2014 "),QU=a("a"),p7r=o("TFOpenAIGPTLMHeadModel"),_7r=o(" (OpenAI GPT model)"),u7r=l(),L8=a("li"),L6e=a("strong"),b7r=o("opt"),v7r=o(" \u2014 "),HU=a("a"),F7r=o("TFOPTForCausalLM"),T7r=o(" (OPT model)"),M7r=l(),y8=a("li"),y6e=a("strong"),E7r=o("rembert"),C7r=o(" \u2014 "),UU=a("a"),w7r=o("TFRemBertForCausalLM"),A7r=o(" (RemBERT model)"),L7r=l(),x8=a("li"),x6e=a("strong"),y7r=o("roberta"),x7r=o(" \u2014 "),JU=a("a"),$7r=o("TFRobertaForCausalLM"),k7r=o(" (RoBERTa model)"),S7r=l(),$8=a("li"),$6e=a("strong"),R7r=o("roformer"),P7r=o(" \u2014 "),YU=a("a"),B7r=o("TFRoFormerForCausalLM"),I7r=o(" (RoFormer model)"),N7r=l(),k8=a("li"),k6e=a("strong"),q7r=o("transfo-xl"),j7r=o(" \u2014 "),KU=a("a"),D7r=o("TFTransfoXLLMHeadModel"),G7r=o(" (Transformer-XL model)"),O7r=l(),S8=a("li"),S6e=a("strong"),V7r=o("xlm"),X7r=o(" \u2014 "),ZU=a("a"),z7r=o("TFXLMWithLMHeadModel"),W7r=o(" (XLM model)"),Q7r=l(),R8=a("li"),R6e=a("strong"),H7r=o("xlnet"),U7r=o(" \u2014 "),eJ=a("a"),J7r=o("TFXLNetLMHeadModel"),Y7r=o(" (XLNet model)"),K7r=l(),F(P8.$$.fragment),CVe=l(),mc=a("h2"),B8=a("a"),P6e=a("span"),F(I9.$$.fragment),Z7r=l(),B6e=a("span"),e8r=o("TFAutoModelForImageClassification"),wVe=l(),tr=a("div"),F(N9.$$.fragment),o8r=l(),gc=a("p"),r8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=a("a"),t8r=o("from_pretrained()"),a8r=o(" class method or the "),rJ=a("a"),n8r=o("from_config()"),s8r=o(` class
method.`),l8r=l(),q9=a("p"),i8r=o("This class cannot be instantiated directly using "),I6e=a("code"),d8r=o("__init__()"),c8r=o(" (throws an error)."),f8r=l(),Pt=a("div"),F(j9.$$.fragment),m8r=l(),N6e=a("p"),g8r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h8r=l(),hc=a("p"),p8r=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),_8r=o("not"),u8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),b8r=o("from_pretrained()"),v8r=o(" to load the model weights."),F8r=l(),F(I8.$$.fragment),T8r=l(),kr=a("div"),F(D9.$$.fragment),M8r=l(),j6e=a("p"),E8r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C8r=l(),dn=a("p"),w8r=o("The model class to instantiate is selected based on the "),D6e=a("code"),A8r=o("model_type"),L8r=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),y8r=o("pretrained_model_name_or_path"),x8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),$8r=o("pretrained_model_name_or_path"),k8r=o(":"),S8r=l(),rt=a("ul"),N8=a("li"),V6e=a("strong"),R8r=o("convnext"),P8r=o(" \u2014 "),aJ=a("a"),B8r=o("TFConvNextForImageClassification"),I8r=o(" (ConvNeXT model)"),N8r=l(),q8=a("li"),X6e=a("strong"),q8r=o("data2vec-vision"),j8r=o(" \u2014 "),nJ=a("a"),D8r=o("TFData2VecVisionForImageClassification"),G8r=o(" (Data2VecVision model)"),O8r=l(),Hs=a("li"),z6e=a("strong"),V8r=o("deit"),X8r=o(" \u2014 "),sJ=a("a"),z8r=o("TFDeiTForImageClassification"),W8r=o(" or "),lJ=a("a"),Q8r=o("TFDeiTForImageClassificationWithTeacher"),H8r=o(" (DeiT model)"),U8r=l(),j8=a("li"),W6e=a("strong"),J8r=o("swin"),Y8r=o(" \u2014 "),iJ=a("a"),K8r=o("TFSwinForImageClassification"),Z8r=o(" (Swin Transformer model)"),eMr=l(),D8=a("li"),Q6e=a("strong"),oMr=o("vit"),rMr=o(" \u2014 "),dJ=a("a"),tMr=o("TFViTForImageClassification"),aMr=o(" (ViT model)"),nMr=l(),F(G8.$$.fragment),AVe=l(),pc=a("h2"),O8=a("a"),H6e=a("span"),F(G9.$$.fragment),sMr=l(),U6e=a("span"),lMr=o("TFAutoModelForMaskedLM"),LVe=l(),ar=a("div"),F(O9.$$.fragment),iMr=l(),_c=a("p"),dMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=a("a"),cMr=o("from_pretrained()"),fMr=o(" class method or the "),fJ=a("a"),mMr=o("from_config()"),gMr=o(` class
method.`),hMr=l(),V9=a("p"),pMr=o("This class cannot be instantiated directly using "),J6e=a("code"),_Mr=o("__init__()"),uMr=o(" (throws an error)."),bMr=l(),Bt=a("div"),F(X9.$$.fragment),vMr=l(),Y6e=a("p"),FMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TMr=l(),uc=a("p"),MMr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),EMr=o("not"),CMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),wMr=o("from_pretrained()"),AMr=o(" to load the model weights."),LMr=l(),F(V8.$$.fragment),yMr=l(),Sr=a("div"),F(z9.$$.fragment),xMr=l(),Z6e=a("p"),$Mr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kMr=l(),cn=a("p"),SMr=o("The model class to instantiate is selected based on the "),eTe=a("code"),RMr=o("model_type"),PMr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),BMr=o("pretrained_model_name_or_path"),IMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),NMr=o("pretrained_model_name_or_path"),qMr=o(":"),jMr=l(),ie=a("ul"),X8=a("li"),tTe=a("strong"),DMr=o("albert"),GMr=o(" \u2014 "),gJ=a("a"),OMr=o("TFAlbertForMaskedLM"),VMr=o(" (ALBERT model)"),XMr=l(),z8=a("li"),aTe=a("strong"),zMr=o("bert"),WMr=o(" \u2014 "),hJ=a("a"),QMr=o("TFBertForMaskedLM"),HMr=o(" (BERT model)"),UMr=l(),W8=a("li"),nTe=a("strong"),JMr=o("camembert"),YMr=o(" \u2014 "),pJ=a("a"),KMr=o("TFCamembertForMaskedLM"),ZMr=o(" (CamemBERT model)"),eEr=l(),Q8=a("li"),sTe=a("strong"),oEr=o("convbert"),rEr=o(" \u2014 "),_J=a("a"),tEr=o("TFConvBertForMaskedLM"),aEr=o(" (ConvBERT model)"),nEr=l(),H8=a("li"),lTe=a("strong"),sEr=o("deberta"),lEr=o(" \u2014 "),uJ=a("a"),iEr=o("TFDebertaForMaskedLM"),dEr=o(" (DeBERTa model)"),cEr=l(),U8=a("li"),iTe=a("strong"),fEr=o("deberta-v2"),mEr=o(" \u2014 "),bJ=a("a"),gEr=o("TFDebertaV2ForMaskedLM"),hEr=o(" (DeBERTa-v2 model)"),pEr=l(),J8=a("li"),dTe=a("strong"),_Er=o("distilbert"),uEr=o(" \u2014 "),vJ=a("a"),bEr=o("TFDistilBertForMaskedLM"),vEr=o(" (DistilBERT model)"),FEr=l(),Y8=a("li"),cTe=a("strong"),TEr=o("electra"),MEr=o(" \u2014 "),FJ=a("a"),EEr=o("TFElectraForMaskedLM"),CEr=o(" (ELECTRA model)"),wEr=l(),K8=a("li"),fTe=a("strong"),AEr=o("flaubert"),LEr=o(" \u2014 "),TJ=a("a"),yEr=o("TFFlaubertWithLMHeadModel"),xEr=o(" (FlauBERT model)"),$Er=l(),Z8=a("li"),mTe=a("strong"),kEr=o("funnel"),SEr=o(" \u2014 "),MJ=a("a"),REr=o("TFFunnelForMaskedLM"),PEr=o(" (Funnel Transformer model)"),BEr=l(),eM=a("li"),gTe=a("strong"),IEr=o("layoutlm"),NEr=o(" \u2014 "),EJ=a("a"),qEr=o("TFLayoutLMForMaskedLM"),jEr=o(" (LayoutLM model)"),DEr=l(),oM=a("li"),hTe=a("strong"),GEr=o("longformer"),OEr=o(" \u2014 "),CJ=a("a"),VEr=o("TFLongformerForMaskedLM"),XEr=o(" (Longformer model)"),zEr=l(),rM=a("li"),pTe=a("strong"),WEr=o("mobilebert"),QEr=o(" \u2014 "),wJ=a("a"),HEr=o("TFMobileBertForMaskedLM"),UEr=o(" (MobileBERT model)"),JEr=l(),tM=a("li"),_Te=a("strong"),YEr=o("mpnet"),KEr=o(" \u2014 "),AJ=a("a"),ZEr=o("TFMPNetForMaskedLM"),e4r=o(" (MPNet model)"),o4r=l(),aM=a("li"),uTe=a("strong"),r4r=o("rembert"),t4r=o(" \u2014 "),LJ=a("a"),a4r=o("TFRemBertForMaskedLM"),n4r=o(" (RemBERT model)"),s4r=l(),nM=a("li"),bTe=a("strong"),l4r=o("roberta"),i4r=o(" \u2014 "),yJ=a("a"),d4r=o("TFRobertaForMaskedLM"),c4r=o(" (RoBERTa model)"),f4r=l(),sM=a("li"),vTe=a("strong"),m4r=o("roformer"),g4r=o(" \u2014 "),xJ=a("a"),h4r=o("TFRoFormerForMaskedLM"),p4r=o(" (RoFormer model)"),_4r=l(),lM=a("li"),FTe=a("strong"),u4r=o("tapas"),b4r=o(" \u2014 "),$J=a("a"),v4r=o("TFTapasForMaskedLM"),F4r=o(" (TAPAS model)"),T4r=l(),iM=a("li"),TTe=a("strong"),M4r=o("xlm"),E4r=o(" \u2014 "),kJ=a("a"),C4r=o("TFXLMWithLMHeadModel"),w4r=o(" (XLM model)"),A4r=l(),dM=a("li"),MTe=a("strong"),L4r=o("xlm-roberta"),y4r=o(" \u2014 "),SJ=a("a"),x4r=o("TFXLMRobertaForMaskedLM"),$4r=o(" (XLM-RoBERTa model)"),k4r=l(),F(cM.$$.fragment),yVe=l(),bc=a("h2"),fM=a("a"),ETe=a("span"),F(W9.$$.fragment),S4r=l(),CTe=a("span"),R4r=o("TFAutoModelForSeq2SeqLM"),xVe=l(),nr=a("div"),F(Q9.$$.fragment),P4r=l(),vc=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RJ=a("a"),I4r=o("from_pretrained()"),N4r=o(" class method or the "),PJ=a("a"),q4r=o("from_config()"),j4r=o(` class
method.`),D4r=l(),H9=a("p"),G4r=o("This class cannot be instantiated directly using "),wTe=a("code"),O4r=o("__init__()"),V4r=o(" (throws an error)."),X4r=l(),It=a("div"),F(U9.$$.fragment),z4r=l(),ATe=a("p"),W4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q4r=l(),Fc=a("p"),H4r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),U4r=o("not"),J4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),Y4r=o("from_pretrained()"),K4r=o(" to load the model weights."),Z4r=l(),F(mM.$$.fragment),eCr=l(),Rr=a("div"),F(J9.$$.fragment),oCr=l(),yTe=a("p"),rCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tCr=l(),fn=a("p"),aCr=o("The model class to instantiate is selected based on the "),xTe=a("code"),nCr=o("model_type"),sCr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),lCr=o("pretrained_model_name_or_path"),iCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(":"),fCr=l(),ye=a("ul"),gM=a("li"),STe=a("strong"),mCr=o("bart"),gCr=o(" \u2014 "),IJ=a("a"),hCr=o("TFBartForConditionalGeneration"),pCr=o(" (BART model)"),_Cr=l(),hM=a("li"),RTe=a("strong"),uCr=o("blenderbot"),bCr=o(" \u2014 "),NJ=a("a"),vCr=o("TFBlenderbotForConditionalGeneration"),FCr=o(" (Blenderbot model)"),TCr=l(),pM=a("li"),PTe=a("strong"),MCr=o("blenderbot-small"),ECr=o(" \u2014 "),qJ=a("a"),CCr=o("TFBlenderbotSmallForConditionalGeneration"),wCr=o(" (BlenderbotSmall model)"),ACr=l(),_M=a("li"),BTe=a("strong"),LCr=o("encoder-decoder"),yCr=o(" \u2014 "),jJ=a("a"),xCr=o("TFEncoderDecoderModel"),$Cr=o(" (Encoder decoder model)"),kCr=l(),uM=a("li"),ITe=a("strong"),SCr=o("led"),RCr=o(" \u2014 "),DJ=a("a"),PCr=o("TFLEDForConditionalGeneration"),BCr=o(" (LED model)"),ICr=l(),bM=a("li"),NTe=a("strong"),NCr=o("marian"),qCr=o(" \u2014 "),GJ=a("a"),jCr=o("TFMarianMTModel"),DCr=o(" (Marian model)"),GCr=l(),vM=a("li"),qTe=a("strong"),OCr=o("mbart"),VCr=o(" \u2014 "),OJ=a("a"),XCr=o("TFMBartForConditionalGeneration"),zCr=o(" (mBART model)"),WCr=l(),FM=a("li"),jTe=a("strong"),QCr=o("mt5"),HCr=o(" \u2014 "),VJ=a("a"),UCr=o("TFMT5ForConditionalGeneration"),JCr=o(" (MT5 model)"),YCr=l(),TM=a("li"),DTe=a("strong"),KCr=o("pegasus"),ZCr=o(" \u2014 "),XJ=a("a"),e5r=o("TFPegasusForConditionalGeneration"),o5r=o(" (Pegasus model)"),r5r=l(),MM=a("li"),GTe=a("strong"),t5r=o("t5"),a5r=o(" \u2014 "),zJ=a("a"),n5r=o("TFT5ForConditionalGeneration"),s5r=o(" (T5 model)"),l5r=l(),F(EM.$$.fragment),$Ve=l(),Tc=a("h2"),CM=a("a"),OTe=a("span"),F(Y9.$$.fragment),i5r=l(),VTe=a("span"),d5r=o("TFAutoModelForSequenceClassification"),kVe=l(),sr=a("div"),F(K9.$$.fragment),c5r=l(),Mc=a("p"),f5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WJ=a("a"),m5r=o("from_pretrained()"),g5r=o(" class method or the "),QJ=a("a"),h5r=o("from_config()"),p5r=o(` class
method.`),_5r=l(),Z9=a("p"),u5r=o("This class cannot be instantiated directly using "),XTe=a("code"),b5r=o("__init__()"),v5r=o(" (throws an error)."),F5r=l(),Nt=a("div"),F(ex.$$.fragment),T5r=l(),zTe=a("p"),M5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E5r=l(),Ec=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),w5r=o("not"),A5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),L5r=o("from_pretrained()"),y5r=o(" to load the model weights."),x5r=l(),F(wM.$$.fragment),$5r=l(),Pr=a("div"),F(ox.$$.fragment),k5r=l(),QTe=a("p"),S5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R5r=l(),mn=a("p"),P5r=o("The model class to instantiate is selected based on the "),HTe=a("code"),B5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),N5r=o("pretrained_model_name_or_path"),q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(":"),G5r=l(),te=a("ul"),AM=a("li"),YTe=a("strong"),O5r=o("albert"),V5r=o(" \u2014 "),UJ=a("a"),X5r=o("TFAlbertForSequenceClassification"),z5r=o(" (ALBERT model)"),W5r=l(),LM=a("li"),KTe=a("strong"),Q5r=o("bert"),H5r=o(" \u2014 "),JJ=a("a"),U5r=o("TFBertForSequenceClassification"),J5r=o(" (BERT model)"),Y5r=l(),yM=a("li"),ZTe=a("strong"),K5r=o("camembert"),Z5r=o(" \u2014 "),YJ=a("a"),e3r=o("TFCamembertForSequenceClassification"),o3r=o(" (CamemBERT model)"),r3r=l(),xM=a("li"),e7e=a("strong"),t3r=o("convbert"),a3r=o(" \u2014 "),KJ=a("a"),n3r=o("TFConvBertForSequenceClassification"),s3r=o(" (ConvBERT model)"),l3r=l(),$M=a("li"),o7e=a("strong"),i3r=o("ctrl"),d3r=o(" \u2014 "),ZJ=a("a"),c3r=o("TFCTRLForSequenceClassification"),f3r=o(" (CTRL model)"),m3r=l(),kM=a("li"),r7e=a("strong"),g3r=o("deberta"),h3r=o(" \u2014 "),eY=a("a"),p3r=o("TFDebertaForSequenceClassification"),_3r=o(" (DeBERTa model)"),u3r=l(),SM=a("li"),t7e=a("strong"),b3r=o("deberta-v2"),v3r=o(" \u2014 "),oY=a("a"),F3r=o("TFDebertaV2ForSequenceClassification"),T3r=o(" (DeBERTa-v2 model)"),M3r=l(),RM=a("li"),a7e=a("strong"),E3r=o("distilbert"),C3r=o(" \u2014 "),rY=a("a"),w3r=o("TFDistilBertForSequenceClassification"),A3r=o(" (DistilBERT model)"),L3r=l(),PM=a("li"),n7e=a("strong"),y3r=o("electra"),x3r=o(" \u2014 "),tY=a("a"),$3r=o("TFElectraForSequenceClassification"),k3r=o(" (ELECTRA model)"),S3r=l(),BM=a("li"),s7e=a("strong"),R3r=o("flaubert"),P3r=o(" \u2014 "),aY=a("a"),B3r=o("TFFlaubertForSequenceClassification"),I3r=o(" (FlauBERT model)"),N3r=l(),IM=a("li"),l7e=a("strong"),q3r=o("funnel"),j3r=o(" \u2014 "),nY=a("a"),D3r=o("TFFunnelForSequenceClassification"),G3r=o(" (Funnel Transformer model)"),O3r=l(),NM=a("li"),i7e=a("strong"),V3r=o("gpt2"),X3r=o(" \u2014 "),sY=a("a"),z3r=o("TFGPT2ForSequenceClassification"),W3r=o(" (OpenAI GPT-2 model)"),Q3r=l(),qM=a("li"),d7e=a("strong"),H3r=o("gptj"),U3r=o(" \u2014 "),lY=a("a"),J3r=o("TFGPTJForSequenceClassification"),Y3r=o(" (GPT-J model)"),K3r=l(),jM=a("li"),c7e=a("strong"),Z3r=o("layoutlm"),ewr=o(" \u2014 "),iY=a("a"),owr=o("TFLayoutLMForSequenceClassification"),rwr=o(" (LayoutLM model)"),twr=l(),DM=a("li"),f7e=a("strong"),awr=o("longformer"),nwr=o(" \u2014 "),dY=a("a"),swr=o("TFLongformerForSequenceClassification"),lwr=o(" (Longformer model)"),iwr=l(),GM=a("li"),m7e=a("strong"),dwr=o("mobilebert"),cwr=o(" \u2014 "),cY=a("a"),fwr=o("TFMobileBertForSequenceClassification"),mwr=o(" (MobileBERT model)"),gwr=l(),OM=a("li"),g7e=a("strong"),hwr=o("mpnet"),pwr=o(" \u2014 "),fY=a("a"),_wr=o("TFMPNetForSequenceClassification"),uwr=o(" (MPNet model)"),bwr=l(),VM=a("li"),h7e=a("strong"),vwr=o("openai-gpt"),Fwr=o(" \u2014 "),mY=a("a"),Twr=o("TFOpenAIGPTForSequenceClassification"),Mwr=o(" (OpenAI GPT model)"),Ewr=l(),XM=a("li"),p7e=a("strong"),Cwr=o("rembert"),wwr=o(" \u2014 "),gY=a("a"),Awr=o("TFRemBertForSequenceClassification"),Lwr=o(" (RemBERT model)"),ywr=l(),zM=a("li"),_7e=a("strong"),xwr=o("roberta"),$wr=o(" \u2014 "),hY=a("a"),kwr=o("TFRobertaForSequenceClassification"),Swr=o(" (RoBERTa model)"),Rwr=l(),WM=a("li"),u7e=a("strong"),Pwr=o("roformer"),Bwr=o(" \u2014 "),pY=a("a"),Iwr=o("TFRoFormerForSequenceClassification"),Nwr=o(" (RoFormer model)"),qwr=l(),QM=a("li"),b7e=a("strong"),jwr=o("tapas"),Dwr=o(" \u2014 "),_Y=a("a"),Gwr=o("TFTapasForSequenceClassification"),Owr=o(" (TAPAS model)"),Vwr=l(),HM=a("li"),v7e=a("strong"),Xwr=o("transfo-xl"),zwr=o(" \u2014 "),uY=a("a"),Wwr=o("TFTransfoXLForSequenceClassification"),Qwr=o(" (Transformer-XL model)"),Hwr=l(),UM=a("li"),F7e=a("strong"),Uwr=o("xlm"),Jwr=o(" \u2014 "),bY=a("a"),Ywr=o("TFXLMForSequenceClassification"),Kwr=o(" (XLM model)"),Zwr=l(),JM=a("li"),T7e=a("strong"),eAr=o("xlm-roberta"),oAr=o(" \u2014 "),vY=a("a"),rAr=o("TFXLMRobertaForSequenceClassification"),tAr=o(" (XLM-RoBERTa model)"),aAr=l(),YM=a("li"),M7e=a("strong"),nAr=o("xlnet"),sAr=o(" \u2014 "),FY=a("a"),lAr=o("TFXLNetForSequenceClassification"),iAr=o(" (XLNet model)"),dAr=l(),F(KM.$$.fragment),SVe=l(),Cc=a("h2"),ZM=a("a"),E7e=a("span"),F(rx.$$.fragment),cAr=l(),C7e=a("span"),fAr=o("TFAutoModelForMultipleChoice"),RVe=l(),lr=a("div"),F(tx.$$.fragment),mAr=l(),wc=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TY=a("a"),hAr=o("from_pretrained()"),pAr=o(" class method or the "),MY=a("a"),_Ar=o("from_config()"),uAr=o(` class
method.`),bAr=l(),ax=a("p"),vAr=o("This class cannot be instantiated directly using "),w7e=a("code"),FAr=o("__init__()"),TAr=o(" (throws an error)."),MAr=l(),qt=a("div"),F(nx.$$.fragment),EAr=l(),A7e=a("p"),CAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wAr=l(),Ac=a("p"),AAr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),LAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),xAr=o("from_pretrained()"),$Ar=o(" to load the model weights."),kAr=l(),F(eE.$$.fragment),SAr=l(),Br=a("div"),F(sx.$$.fragment),RAr=l(),y7e=a("p"),PAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BAr=l(),gn=a("p"),IAr=o("The model class to instantiate is selected based on the "),x7e=a("code"),NAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),_e=a("ul"),oE=a("li"),S7e=a("strong"),XAr=o("albert"),zAr=o(" \u2014 "),CY=a("a"),WAr=o("TFAlbertForMultipleChoice"),QAr=o(" (ALBERT model)"),HAr=l(),rE=a("li"),R7e=a("strong"),UAr=o("bert"),JAr=o(" \u2014 "),wY=a("a"),YAr=o("TFBertForMultipleChoice"),KAr=o(" (BERT model)"),ZAr=l(),tE=a("li"),P7e=a("strong"),eLr=o("camembert"),oLr=o(" \u2014 "),AY=a("a"),rLr=o("TFCamembertForMultipleChoice"),tLr=o(" (CamemBERT model)"),aLr=l(),aE=a("li"),B7e=a("strong"),nLr=o("convbert"),sLr=o(" \u2014 "),LY=a("a"),lLr=o("TFConvBertForMultipleChoice"),iLr=o(" (ConvBERT model)"),dLr=l(),nE=a("li"),I7e=a("strong"),cLr=o("distilbert"),fLr=o(" \u2014 "),yY=a("a"),mLr=o("TFDistilBertForMultipleChoice"),gLr=o(" (DistilBERT model)"),hLr=l(),sE=a("li"),N7e=a("strong"),pLr=o("electra"),_Lr=o(" \u2014 "),xY=a("a"),uLr=o("TFElectraForMultipleChoice"),bLr=o(" (ELECTRA model)"),vLr=l(),lE=a("li"),q7e=a("strong"),FLr=o("flaubert"),TLr=o(" \u2014 "),$Y=a("a"),MLr=o("TFFlaubertForMultipleChoice"),ELr=o(" (FlauBERT model)"),CLr=l(),iE=a("li"),j7e=a("strong"),wLr=o("funnel"),ALr=o(" \u2014 "),kY=a("a"),LLr=o("TFFunnelForMultipleChoice"),yLr=o(" (Funnel Transformer model)"),xLr=l(),dE=a("li"),D7e=a("strong"),$Lr=o("longformer"),kLr=o(" \u2014 "),SY=a("a"),SLr=o("TFLongformerForMultipleChoice"),RLr=o(" (Longformer model)"),PLr=l(),cE=a("li"),G7e=a("strong"),BLr=o("mobilebert"),ILr=o(" \u2014 "),RY=a("a"),NLr=o("TFMobileBertForMultipleChoice"),qLr=o(" (MobileBERT model)"),jLr=l(),fE=a("li"),O7e=a("strong"),DLr=o("mpnet"),GLr=o(" \u2014 "),PY=a("a"),OLr=o("TFMPNetForMultipleChoice"),VLr=o(" (MPNet model)"),XLr=l(),mE=a("li"),V7e=a("strong"),zLr=o("rembert"),WLr=o(" \u2014 "),BY=a("a"),QLr=o("TFRemBertForMultipleChoice"),HLr=o(" (RemBERT model)"),ULr=l(),gE=a("li"),X7e=a("strong"),JLr=o("roberta"),YLr=o(" \u2014 "),IY=a("a"),KLr=o("TFRobertaForMultipleChoice"),ZLr=o(" (RoBERTa model)"),eyr=l(),hE=a("li"),z7e=a("strong"),oyr=o("roformer"),ryr=o(" \u2014 "),NY=a("a"),tyr=o("TFRoFormerForMultipleChoice"),ayr=o(" (RoFormer model)"),nyr=l(),pE=a("li"),W7e=a("strong"),syr=o("xlm"),lyr=o(" \u2014 "),qY=a("a"),iyr=o("TFXLMForMultipleChoice"),dyr=o(" (XLM model)"),cyr=l(),_E=a("li"),Q7e=a("strong"),fyr=o("xlm-roberta"),myr=o(" \u2014 "),jY=a("a"),gyr=o("TFXLMRobertaForMultipleChoice"),hyr=o(" (XLM-RoBERTa model)"),pyr=l(),uE=a("li"),H7e=a("strong"),_yr=o("xlnet"),uyr=o(" \u2014 "),DY=a("a"),byr=o("TFXLNetForMultipleChoice"),vyr=o(" (XLNet model)"),Fyr=l(),F(bE.$$.fragment),PVe=l(),Lc=a("h2"),vE=a("a"),U7e=a("span"),F(lx.$$.fragment),Tyr=l(),J7e=a("span"),Myr=o("TFAutoModelForNextSentencePrediction"),BVe=l(),ir=a("div"),F(ix.$$.fragment),Eyr=l(),yc=a("p"),Cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GY=a("a"),wyr=o("from_pretrained()"),Ayr=o(" class method or the "),OY=a("a"),Lyr=o("from_config()"),yyr=o(` class
method.`),xyr=l(),dx=a("p"),$yr=o("This class cannot be instantiated directly using "),Y7e=a("code"),kyr=o("__init__()"),Syr=o(" (throws an error)."),Ryr=l(),jt=a("div"),F(cx.$$.fragment),Pyr=l(),K7e=a("p"),Byr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iyr=l(),xc=a("p"),Nyr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),qyr=o("not"),jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" to load the model weights."),Oyr=l(),F(FE.$$.fragment),Vyr=l(),Ir=a("div"),F(fx.$$.fragment),Xyr=l(),e8e=a("p"),zyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wyr=l(),hn=a("p"),Qyr=o("The model class to instantiate is selected based on the "),o8e=a("code"),Hyr=o("model_type"),Uyr=o(` property of the config object (either
passed as an argument or loaded from `),r8e=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(":"),e9r=l(),mx=a("ul"),TE=a("li"),a8e=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),XY=a("a"),t9r=o("TFBertForNextSentencePrediction"),a9r=o(" (BERT model)"),n9r=l(),ME=a("li"),n8e=a("strong"),s9r=o("mobilebert"),l9r=o(" \u2014 "),zY=a("a"),i9r=o("TFMobileBertForNextSentencePrediction"),d9r=o(" (MobileBERT model)"),c9r=l(),F(EE.$$.fragment),IVe=l(),$c=a("h2"),CE=a("a"),s8e=a("span"),F(gx.$$.fragment),f9r=l(),l8e=a("span"),m9r=o("TFAutoModelForTableQuestionAnswering"),NVe=l(),dr=a("div"),F(hx.$$.fragment),g9r=l(),kc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WY=a("a"),p9r=o("from_pretrained()"),_9r=o(" class method or the "),QY=a("a"),u9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),px=a("p"),F9r=o("This class cannot be instantiated directly using "),i8e=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Dt=a("div"),F(_x.$$.fragment),C9r=l(),d8e=a("p"),w9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A9r=l(),Sc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),y9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(wE.$$.fragment),R9r=l(),Nr=a("div"),F(ux.$$.fragment),P9r=l(),f8e=a("p"),B9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),I9r=l(),pn=a("p"),N9r=o("The model class to instantiate is selected based on the "),m8e=a("code"),q9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),p8e=a("ul"),AE=a("li"),_8e=a("strong"),z9r=o("tapas"),W9r=o(" \u2014 "),UY=a("a"),Q9r=o("TFTapasForQuestionAnswering"),H9r=o(" (TAPAS model)"),U9r=l(),F(LE.$$.fragment),qVe=l(),Rc=a("h2"),yE=a("a"),u8e=a("span"),F(bx.$$.fragment),J9r=l(),b8e=a("span"),Y9r=o("TFAutoModelForTokenClassification"),jVe=l(),cr=a("div"),F(vx.$$.fragment),K9r=l(),Pc=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JY=a("a"),exr=o("from_pretrained()"),oxr=o(" class method or the "),YY=a("a"),rxr=o("from_config()"),txr=o(` class
method.`),axr=l(),Fx=a("p"),nxr=o("This class cannot be instantiated directly using "),v8e=a("code"),sxr=o("__init__()"),lxr=o(" (throws an error)."),ixr=l(),Gt=a("div"),F(Tx.$$.fragment),dxr=l(),F8e=a("p"),cxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fxr=l(),Bc=a("p"),mxr=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),gxr=o("not"),hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),pxr=o("from_pretrained()"),_xr=o(" to load the model weights."),uxr=l(),F(xE.$$.fragment),bxr=l(),qr=a("div"),F(Mx.$$.fragment),vxr=l(),M8e=a("p"),Fxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Txr=l(),_n=a("p"),Mxr=o("The model class to instantiate is selected based on the "),E8e=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),Lxr=o("pretrained_model_name_or_path"),yxr=o(":"),xxr=l(),de=a("ul"),$E=a("li"),A8e=a("strong"),$xr=o("albert"),kxr=o(" \u2014 "),ZY=a("a"),Sxr=o("TFAlbertForTokenClassification"),Rxr=o(" (ALBERT model)"),Pxr=l(),kE=a("li"),L8e=a("strong"),Bxr=o("bert"),Ixr=o(" \u2014 "),eK=a("a"),Nxr=o("TFBertForTokenClassification"),qxr=o(" (BERT model)"),jxr=l(),SE=a("li"),y8e=a("strong"),Dxr=o("camembert"),Gxr=o(" \u2014 "),oK=a("a"),Oxr=o("TFCamembertForTokenClassification"),Vxr=o(" (CamemBERT model)"),Xxr=l(),RE=a("li"),x8e=a("strong"),zxr=o("convbert"),Wxr=o(" \u2014 "),rK=a("a"),Qxr=o("TFConvBertForTokenClassification"),Hxr=o(" (ConvBERT model)"),Uxr=l(),PE=a("li"),$8e=a("strong"),Jxr=o("deberta"),Yxr=o(" \u2014 "),tK=a("a"),Kxr=o("TFDebertaForTokenClassification"),Zxr=o(" (DeBERTa model)"),e$r=l(),BE=a("li"),k8e=a("strong"),o$r=o("deberta-v2"),r$r=o(" \u2014 "),aK=a("a"),t$r=o("TFDebertaV2ForTokenClassification"),a$r=o(" (DeBERTa-v2 model)"),n$r=l(),IE=a("li"),S8e=a("strong"),s$r=o("distilbert"),l$r=o(" \u2014 "),nK=a("a"),i$r=o("TFDistilBertForTokenClassification"),d$r=o(" (DistilBERT model)"),c$r=l(),NE=a("li"),R8e=a("strong"),f$r=o("electra"),m$r=o(" \u2014 "),sK=a("a"),g$r=o("TFElectraForTokenClassification"),h$r=o(" (ELECTRA model)"),p$r=l(),qE=a("li"),P8e=a("strong"),_$r=o("flaubert"),u$r=o(" \u2014 "),lK=a("a"),b$r=o("TFFlaubertForTokenClassification"),v$r=o(" (FlauBERT model)"),F$r=l(),jE=a("li"),B8e=a("strong"),T$r=o("funnel"),M$r=o(" \u2014 "),iK=a("a"),E$r=o("TFFunnelForTokenClassification"),C$r=o(" (Funnel Transformer model)"),w$r=l(),DE=a("li"),I8e=a("strong"),A$r=o("layoutlm"),L$r=o(" \u2014 "),dK=a("a"),y$r=o("TFLayoutLMForTokenClassification"),x$r=o(" (LayoutLM model)"),$$r=l(),GE=a("li"),N8e=a("strong"),k$r=o("longformer"),S$r=o(" \u2014 "),cK=a("a"),R$r=o("TFLongformerForTokenClassification"),P$r=o(" (Longformer model)"),B$r=l(),OE=a("li"),q8e=a("strong"),I$r=o("mobilebert"),N$r=o(" \u2014 "),fK=a("a"),q$r=o("TFMobileBertForTokenClassification"),j$r=o(" (MobileBERT model)"),D$r=l(),VE=a("li"),j8e=a("strong"),G$r=o("mpnet"),O$r=o(" \u2014 "),mK=a("a"),V$r=o("TFMPNetForTokenClassification"),X$r=o(" (MPNet model)"),z$r=l(),XE=a("li"),D8e=a("strong"),W$r=o("rembert"),Q$r=o(" \u2014 "),gK=a("a"),H$r=o("TFRemBertForTokenClassification"),U$r=o(" (RemBERT model)"),J$r=l(),zE=a("li"),G8e=a("strong"),Y$r=o("roberta"),K$r=o(" \u2014 "),hK=a("a"),Z$r=o("TFRobertaForTokenClassification"),ekr=o(" (RoBERTa model)"),okr=l(),WE=a("li"),O8e=a("strong"),rkr=o("roformer"),tkr=o(" \u2014 "),pK=a("a"),akr=o("TFRoFormerForTokenClassification"),nkr=o(" (RoFormer model)"),skr=l(),QE=a("li"),V8e=a("strong"),lkr=o("xlm"),ikr=o(" \u2014 "),_K=a("a"),dkr=o("TFXLMForTokenClassification"),ckr=o(" (XLM model)"),fkr=l(),HE=a("li"),X8e=a("strong"),mkr=o("xlm-roberta"),gkr=o(" \u2014 "),uK=a("a"),hkr=o("TFXLMRobertaForTokenClassification"),pkr=o(" (XLM-RoBERTa model)"),_kr=l(),UE=a("li"),z8e=a("strong"),ukr=o("xlnet"),bkr=o(" \u2014 "),bK=a("a"),vkr=o("TFXLNetForTokenClassification"),Fkr=o(" (XLNet model)"),Tkr=l(),F(JE.$$.fragment),DVe=l(),Ic=a("h2"),YE=a("a"),W8e=a("span"),F(Ex.$$.fragment),Mkr=l(),Q8e=a("span"),Ekr=o("TFAutoModelForQuestionAnswering"),GVe=l(),fr=a("div"),F(Cx.$$.fragment),Ckr=l(),Nc=a("p"),wkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vK=a("a"),Akr=o("from_pretrained()"),Lkr=o(" class method or the "),FK=a("a"),ykr=o("from_config()"),xkr=o(` class
method.`),$kr=l(),wx=a("p"),kkr=o("This class cannot be instantiated directly using "),H8e=a("code"),Skr=o("__init__()"),Rkr=o(" (throws an error)."),Pkr=l(),Ot=a("div"),F(Ax.$$.fragment),Bkr=l(),U8e=a("p"),Ikr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nkr=l(),qc=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),J8e=a("strong"),jkr=o("not"),Dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),Gkr=o("from_pretrained()"),Okr=o(" to load the model weights."),Vkr=l(),F(KE.$$.fragment),Xkr=l(),jr=a("div"),F(Lx.$$.fragment),zkr=l(),Y8e=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qkr=l(),un=a("p"),Hkr=o("The model class to instantiate is selected based on the "),K8e=a("code"),Ukr=o("model_type"),Jkr=o(` property of the config object (either
passed as an argument or loaded from `),Z8e=a("code"),Ykr=o("pretrained_model_name_or_path"),Kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(":"),oSr=l(),ce=a("ul"),ZE=a("li"),oMe=a("strong"),rSr=o("albert"),tSr=o(" \u2014 "),MK=a("a"),aSr=o("TFAlbertForQuestionAnswering"),nSr=o(" (ALBERT model)"),sSr=l(),e4=a("li"),rMe=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),EK=a("a"),dSr=o("TFBertForQuestionAnswering"),cSr=o(" (BERT model)"),fSr=l(),o4=a("li"),tMe=a("strong"),mSr=o("camembert"),gSr=o(" \u2014 "),CK=a("a"),hSr=o("TFCamembertForQuestionAnswering"),pSr=o(" (CamemBERT model)"),_Sr=l(),r4=a("li"),aMe=a("strong"),uSr=o("convbert"),bSr=o(" \u2014 "),wK=a("a"),vSr=o("TFConvBertForQuestionAnswering"),FSr=o(" (ConvBERT model)"),TSr=l(),t4=a("li"),nMe=a("strong"),MSr=o("deberta"),ESr=o(" \u2014 "),AK=a("a"),CSr=o("TFDebertaForQuestionAnswering"),wSr=o(" (DeBERTa model)"),ASr=l(),a4=a("li"),sMe=a("strong"),LSr=o("deberta-v2"),ySr=o(" \u2014 "),LK=a("a"),xSr=o("TFDebertaV2ForQuestionAnswering"),$Sr=o(" (DeBERTa-v2 model)"),kSr=l(),n4=a("li"),lMe=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),yK=a("a"),PSr=o("TFDistilBertForQuestionAnswering"),BSr=o(" (DistilBERT model)"),ISr=l(),s4=a("li"),iMe=a("strong"),NSr=o("electra"),qSr=o(" \u2014 "),xK=a("a"),jSr=o("TFElectraForQuestionAnswering"),DSr=o(" (ELECTRA model)"),GSr=l(),l4=a("li"),dMe=a("strong"),OSr=o("flaubert"),VSr=o(" \u2014 "),$K=a("a"),XSr=o("TFFlaubertForQuestionAnsweringSimple"),zSr=o(" (FlauBERT model)"),WSr=l(),i4=a("li"),cMe=a("strong"),QSr=o("funnel"),HSr=o(" \u2014 "),kK=a("a"),USr=o("TFFunnelForQuestionAnswering"),JSr=o(" (Funnel Transformer model)"),YSr=l(),d4=a("li"),fMe=a("strong"),KSr=o("gptj"),ZSr=o(" \u2014 "),SK=a("a"),eRr=o("TFGPTJForQuestionAnswering"),oRr=o(" (GPT-J model)"),rRr=l(),c4=a("li"),mMe=a("strong"),tRr=o("longformer"),aRr=o(" \u2014 "),RK=a("a"),nRr=o("TFLongformerForQuestionAnswering"),sRr=o(" (Longformer model)"),lRr=l(),f4=a("li"),gMe=a("strong"),iRr=o("mobilebert"),dRr=o(" \u2014 "),PK=a("a"),cRr=o("TFMobileBertForQuestionAnswering"),fRr=o(" (MobileBERT model)"),mRr=l(),m4=a("li"),hMe=a("strong"),gRr=o("mpnet"),hRr=o(" \u2014 "),BK=a("a"),pRr=o("TFMPNetForQuestionAnswering"),_Rr=o(" (MPNet model)"),uRr=l(),g4=a("li"),pMe=a("strong"),bRr=o("rembert"),vRr=o(" \u2014 "),IK=a("a"),FRr=o("TFRemBertForQuestionAnswering"),TRr=o(" (RemBERT model)"),MRr=l(),h4=a("li"),_Me=a("strong"),ERr=o("roberta"),CRr=o(" \u2014 "),NK=a("a"),wRr=o("TFRobertaForQuestionAnswering"),ARr=o(" (RoBERTa model)"),LRr=l(),p4=a("li"),uMe=a("strong"),yRr=o("roformer"),xRr=o(" \u2014 "),qK=a("a"),$Rr=o("TFRoFormerForQuestionAnswering"),kRr=o(" (RoFormer model)"),SRr=l(),_4=a("li"),bMe=a("strong"),RRr=o("xlm"),PRr=o(" \u2014 "),jK=a("a"),BRr=o("TFXLMForQuestionAnsweringSimple"),IRr=o(" (XLM model)"),NRr=l(),u4=a("li"),vMe=a("strong"),qRr=o("xlm-roberta"),jRr=o(" \u2014 "),DK=a("a"),DRr=o("TFXLMRobertaForQuestionAnswering"),GRr=o(" (XLM-RoBERTa model)"),ORr=l(),b4=a("li"),FMe=a("strong"),VRr=o("xlnet"),XRr=o(" \u2014 "),GK=a("a"),zRr=o("TFXLNetForQuestionAnsweringSimple"),WRr=o(" (XLNet model)"),QRr=l(),F(v4.$$.fragment),OVe=l(),jc=a("h2"),F4=a("a"),TMe=a("span"),F(yx.$$.fragment),HRr=l(),MMe=a("span"),URr=o("TFAutoModelForVision2Seq"),VVe=l(),mr=a("div"),F(xx.$$.fragment),JRr=l(),Dc=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OK=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),VK=a("a"),ePr=o("from_config()"),oPr=o(` class
method.`),rPr=l(),$x=a("p"),tPr=o("This class cannot be instantiated directly using "),EMe=a("code"),aPr=o("__init__()"),nPr=o(" (throws an error)."),sPr=l(),Vt=a("div"),F(kx.$$.fragment),lPr=l(),CMe=a("p"),iPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dPr=l(),Gc=a("p"),cPr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),fPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),gPr=o("from_pretrained()"),hPr=o(" to load the model weights."),pPr=l(),F(T4.$$.fragment),_Pr=l(),Dr=a("div"),F(Sx.$$.fragment),uPr=l(),AMe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vPr=l(),bn=a("p"),FPr=o("The model class to instantiate is selected based on the "),LMe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),LPr=l(),$Me=a("ul"),M4=a("li"),kMe=a("strong"),yPr=o("vision-encoder-decoder"),xPr=o(" \u2014 "),zK=a("a"),$Pr=o("TFVisionEncoderDecoderModel"),kPr=o(" (Vision Encoder decoder model)"),SPr=l(),F(E4.$$.fragment),XVe=l(),Oc=a("h2"),C4=a("a"),SMe=a("span"),F(Rx.$$.fragment),RPr=l(),RMe=a("span"),PPr=o("TFAutoModelForSpeechSeq2Seq"),zVe=l(),gr=a("div"),F(Px.$$.fragment),BPr=l(),Vc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WK=a("a"),NPr=o("from_pretrained()"),qPr=o(" class method or the "),QK=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),Bx=a("p"),OPr=o("This class cannot be instantiated directly using "),PMe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Xt=a("div"),F(Ix.$$.fragment),WPr=l(),BMe=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HPr=l(),Xc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(w4.$$.fragment),oBr=l(),Gr=a("div"),F(Nx.$$.fragment),rBr=l(),NMe=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aBr=l(),vn=a("p"),nBr=o("The model class to instantiate is selected based on the "),qMe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),GMe=a("ul"),A4=a("li"),OMe=a("strong"),gBr=o("speech_to_text"),hBr=o(" \u2014 "),UK=a("a"),pBr=o("TFSpeech2TextForConditionalGeneration"),_Br=o(" (Speech2Text model)"),uBr=l(),F(L4.$$.fragment),WVe=l(),zc=a("h2"),y4=a("a"),VMe=a("span"),F(qx.$$.fragment),bBr=l(),XMe=a("span"),vBr=o("FlaxAutoModel"),QVe=l(),hr=a("div"),F(jx.$$.fragment),FBr=l(),Wc=a("p"),TBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JK=a("a"),MBr=o("from_pretrained()"),EBr=o(" class method or the "),YK=a("a"),CBr=o("from_config()"),wBr=o(` class
method.`),ABr=l(),Dx=a("p"),LBr=o("This class cannot be instantiated directly using "),zMe=a("code"),yBr=o("__init__()"),xBr=o(" (throws an error)."),$Br=l(),zt=a("div"),F(Gx.$$.fragment),kBr=l(),WMe=a("p"),SBr=o("Instantiates one of the base model classes of the library from a configuration."),RBr=l(),Qc=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),BBr=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),NBr=o("from_pretrained()"),qBr=o(" to load the model weights."),jBr=l(),F(x4.$$.fragment),DBr=l(),Or=a("div"),F(Ox.$$.fragment),GBr=l(),HMe=a("p"),OBr=o("Instantiate one of the base model classes of the library from a pretrained model."),VBr=l(),Fn=a("p"),XBr=o("The model class to instantiate is selected based on the "),UMe=a("code"),zBr=o("model_type"),WBr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(":"),YBr=l(),oe=a("ul"),$4=a("li"),KMe=a("strong"),KBr=o("albert"),ZBr=o(" \u2014 "),ZK=a("a"),eIr=o("FlaxAlbertModel"),oIr=o(" (ALBERT model)"),rIr=l(),k4=a("li"),ZMe=a("strong"),tIr=o("bart"),aIr=o(" \u2014 "),eZ=a("a"),nIr=o("FlaxBartModel"),sIr=o(" (BART model)"),lIr=l(),S4=a("li"),eEe=a("strong"),iIr=o("beit"),dIr=o(" \u2014 "),oZ=a("a"),cIr=o("FlaxBeitModel"),fIr=o(" (BEiT model)"),mIr=l(),R4=a("li"),oEe=a("strong"),gIr=o("bert"),hIr=o(" \u2014 "),rZ=a("a"),pIr=o("FlaxBertModel"),_Ir=o(" (BERT model)"),uIr=l(),P4=a("li"),rEe=a("strong"),bIr=o("big_bird"),vIr=o(" \u2014 "),tZ=a("a"),FIr=o("FlaxBigBirdModel"),TIr=o(" (BigBird model)"),MIr=l(),B4=a("li"),tEe=a("strong"),EIr=o("blenderbot"),CIr=o(" \u2014 "),aZ=a("a"),wIr=o("FlaxBlenderbotModel"),AIr=o(" (Blenderbot model)"),LIr=l(),I4=a("li"),aEe=a("strong"),yIr=o("blenderbot-small"),xIr=o(" \u2014 "),nZ=a("a"),$Ir=o("FlaxBlenderbotSmallModel"),kIr=o(" (BlenderbotSmall model)"),SIr=l(),N4=a("li"),nEe=a("strong"),RIr=o("clip"),PIr=o(" \u2014 "),sZ=a("a"),BIr=o("FlaxCLIPModel"),IIr=o(" (CLIP model)"),NIr=l(),q4=a("li"),sEe=a("strong"),qIr=o("distilbert"),jIr=o(" \u2014 "),lZ=a("a"),DIr=o("FlaxDistilBertModel"),GIr=o(" (DistilBERT model)"),OIr=l(),j4=a("li"),lEe=a("strong"),VIr=o("electra"),XIr=o(" \u2014 "),iZ=a("a"),zIr=o("FlaxElectraModel"),WIr=o(" (ELECTRA model)"),QIr=l(),D4=a("li"),iEe=a("strong"),HIr=o("gpt2"),UIr=o(" \u2014 "),dZ=a("a"),JIr=o("FlaxGPT2Model"),YIr=o(" (OpenAI GPT-2 model)"),KIr=l(),G4=a("li"),dEe=a("strong"),ZIr=o("gpt_neo"),eNr=o(" \u2014 "),cZ=a("a"),oNr=o("FlaxGPTNeoModel"),rNr=o(" (GPT Neo model)"),tNr=l(),O4=a("li"),cEe=a("strong"),aNr=o("gptj"),nNr=o(" \u2014 "),fZ=a("a"),sNr=o("FlaxGPTJModel"),lNr=o(" (GPT-J model)"),iNr=l(),V4=a("li"),fEe=a("strong"),dNr=o("longt5"),cNr=o(" \u2014 "),mZ=a("a"),fNr=o("FlaxLongT5Model"),mNr=o(" (LongT5 model)"),gNr=l(),X4=a("li"),mEe=a("strong"),hNr=o("marian"),pNr=o(" \u2014 "),gZ=a("a"),_Nr=o("FlaxMarianModel"),uNr=o(" (Marian model)"),bNr=l(),z4=a("li"),gEe=a("strong"),vNr=o("mbart"),FNr=o(" \u2014 "),hZ=a("a"),TNr=o("FlaxMBartModel"),MNr=o(" (mBART model)"),ENr=l(),W4=a("li"),hEe=a("strong"),CNr=o("mt5"),wNr=o(" \u2014 "),pZ=a("a"),ANr=o("FlaxMT5Model"),LNr=o(" (MT5 model)"),yNr=l(),Q4=a("li"),pEe=a("strong"),xNr=o("opt"),$Nr=o(" \u2014 "),_Z=a("a"),kNr=o("FlaxOPTModel"),SNr=o(" (OPT model)"),RNr=l(),H4=a("li"),_Ee=a("strong"),PNr=o("pegasus"),BNr=o(" \u2014 "),uZ=a("a"),INr=o("FlaxPegasusModel"),NNr=o(" (Pegasus model)"),qNr=l(),U4=a("li"),uEe=a("strong"),jNr=o("roberta"),DNr=o(" \u2014 "),bZ=a("a"),GNr=o("FlaxRobertaModel"),ONr=o(" (RoBERTa model)"),VNr=l(),J4=a("li"),bEe=a("strong"),XNr=o("roformer"),zNr=o(" \u2014 "),vZ=a("a"),WNr=o("FlaxRoFormerModel"),QNr=o(" (RoFormer model)"),HNr=l(),Y4=a("li"),vEe=a("strong"),UNr=o("t5"),JNr=o(" \u2014 "),FZ=a("a"),YNr=o("FlaxT5Model"),KNr=o(" (T5 model)"),ZNr=l(),K4=a("li"),FEe=a("strong"),eqr=o("vision-text-dual-encoder"),oqr=o(" \u2014 "),TZ=a("a"),rqr=o("FlaxVisionTextDualEncoderModel"),tqr=o(" (VisionTextDualEncoder model)"),aqr=l(),Z4=a("li"),TEe=a("strong"),nqr=o("vit"),sqr=o(" \u2014 "),MZ=a("a"),lqr=o("FlaxViTModel"),iqr=o(" (ViT model)"),dqr=l(),eC=a("li"),MEe=a("strong"),cqr=o("wav2vec2"),fqr=o(" \u2014 "),EZ=a("a"),mqr=o("FlaxWav2Vec2Model"),gqr=o(" (Wav2Vec2 model)"),hqr=l(),oC=a("li"),EEe=a("strong"),pqr=o("xglm"),_qr=o(" \u2014 "),CZ=a("a"),uqr=o("FlaxXGLMModel"),bqr=o(" (XGLM model)"),vqr=l(),rC=a("li"),CEe=a("strong"),Fqr=o("xlm-roberta"),Tqr=o(" \u2014 "),wZ=a("a"),Mqr=o("FlaxXLMRobertaModel"),Eqr=o(" (XLM-RoBERTa model)"),Cqr=l(),F(tC.$$.fragment),HVe=l(),Hc=a("h2"),aC=a("a"),wEe=a("span"),F(Vx.$$.fragment),wqr=l(),AEe=a("span"),Aqr=o("FlaxAutoModelForCausalLM"),UVe=l(),pr=a("div"),F(Xx.$$.fragment),Lqr=l(),Uc=a("p"),yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AZ=a("a"),xqr=o("from_pretrained()"),$qr=o(" class method or the "),LZ=a("a"),kqr=o("from_config()"),Sqr=o(` class
method.`),Rqr=l(),zx=a("p"),Pqr=o("This class cannot be instantiated directly using "),LEe=a("code"),Bqr=o("__init__()"),Iqr=o(" (throws an error)."),Nqr=l(),Wt=a("div"),F(Wx.$$.fragment),qqr=l(),yEe=a("p"),jqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dqr=l(),Jc=a("p"),Gqr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),Oqr=o("not"),Vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),Xqr=o("from_pretrained()"),zqr=o(" to load the model weights."),Wqr=l(),F(nC.$$.fragment),Qqr=l(),Vr=a("div"),F(Qx.$$.fragment),Hqr=l(),$Ee=a("p"),Uqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jqr=l(),Tn=a("p"),Yqr=o("The model class to instantiate is selected based on the "),kEe=a("code"),Kqr=o("model_type"),Zqr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),ejr=o("pretrained_model_name_or_path"),ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(":"),ajr=l(),xe=a("ul"),sC=a("li"),PEe=a("strong"),njr=o("bart"),sjr=o(" \u2014 "),xZ=a("a"),ljr=o("FlaxBartForCausalLM"),ijr=o(" (BART model)"),djr=l(),lC=a("li"),BEe=a("strong"),cjr=o("bert"),fjr=o(" \u2014 "),$Z=a("a"),mjr=o("FlaxBertForCausalLM"),gjr=o(" (BERT model)"),hjr=l(),iC=a("li"),IEe=a("strong"),pjr=o("big_bird"),_jr=o(" \u2014 "),kZ=a("a"),ujr=o("FlaxBigBirdForCausalLM"),bjr=o(" (BigBird model)"),vjr=l(),dC=a("li"),NEe=a("strong"),Fjr=o("electra"),Tjr=o(" \u2014 "),SZ=a("a"),Mjr=o("FlaxElectraForCausalLM"),Ejr=o(" (ELECTRA model)"),Cjr=l(),cC=a("li"),qEe=a("strong"),wjr=o("gpt2"),Ajr=o(" \u2014 "),RZ=a("a"),Ljr=o("FlaxGPT2LMHeadModel"),yjr=o(" (OpenAI GPT-2 model)"),xjr=l(),fC=a("li"),jEe=a("strong"),$jr=o("gpt_neo"),kjr=o(" \u2014 "),PZ=a("a"),Sjr=o("FlaxGPTNeoForCausalLM"),Rjr=o(" (GPT Neo model)"),Pjr=l(),mC=a("li"),DEe=a("strong"),Bjr=o("gptj"),Ijr=o(" \u2014 "),BZ=a("a"),Njr=o("FlaxGPTJForCausalLM"),qjr=o(" (GPT-J model)"),jjr=l(),gC=a("li"),GEe=a("strong"),Djr=o("opt"),Gjr=o(" \u2014 "),IZ=a("a"),Ojr=o("FlaxOPTForCausalLM"),Vjr=o(" (OPT model)"),Xjr=l(),hC=a("li"),OEe=a("strong"),zjr=o("roberta"),Wjr=o(" \u2014 "),NZ=a("a"),Qjr=o("FlaxRobertaForCausalLM"),Hjr=o(" (RoBERTa model)"),Ujr=l(),pC=a("li"),VEe=a("strong"),Jjr=o("xglm"),Yjr=o(" \u2014 "),qZ=a("a"),Kjr=o("FlaxXGLMForCausalLM"),Zjr=o(" (XGLM model)"),eDr=l(),F(_C.$$.fragment),JVe=l(),Yc=a("h2"),uC=a("a"),XEe=a("span"),F(Hx.$$.fragment),oDr=l(),zEe=a("span"),rDr=o("FlaxAutoModelForPreTraining"),YVe=l(),_r=a("div"),F(Ux.$$.fragment),tDr=l(),Kc=a("p"),aDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jZ=a("a"),nDr=o("from_pretrained()"),sDr=o(" class method or the "),DZ=a("a"),lDr=o("from_config()"),iDr=o(` class
method.`),dDr=l(),Jx=a("p"),cDr=o("This class cannot be instantiated directly using "),WEe=a("code"),fDr=o("__init__()"),mDr=o(" (throws an error)."),gDr=l(),Qt=a("div"),F(Yx.$$.fragment),hDr=l(),QEe=a("p"),pDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Dr=l(),Zc=a("p"),uDr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),bDr=o("not"),vDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),FDr=o("from_pretrained()"),TDr=o(" to load the model weights."),MDr=l(),F(bC.$$.fragment),EDr=l(),Xr=a("div"),F(Kx.$$.fragment),CDr=l(),UEe=a("p"),wDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ADr=l(),Mn=a("p"),LDr=o("The model class to instantiate is selected based on the "),JEe=a("code"),yDr=o("model_type"),xDr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(":"),PDr=l(),Ee=a("ul"),vC=a("li"),ZEe=a("strong"),BDr=o("albert"),IDr=o(" \u2014 "),OZ=a("a"),NDr=o("FlaxAlbertForPreTraining"),qDr=o(" (ALBERT model)"),jDr=l(),FC=a("li"),e4e=a("strong"),DDr=o("bart"),GDr=o(" \u2014 "),VZ=a("a"),ODr=o("FlaxBartForConditionalGeneration"),VDr=o(" (BART model)"),XDr=l(),TC=a("li"),o4e=a("strong"),zDr=o("bert"),WDr=o(" \u2014 "),XZ=a("a"),QDr=o("FlaxBertForPreTraining"),HDr=o(" (BERT model)"),UDr=l(),MC=a("li"),r4e=a("strong"),JDr=o("big_bird"),YDr=o(" \u2014 "),zZ=a("a"),KDr=o("FlaxBigBirdForPreTraining"),ZDr=o(" (BigBird model)"),eGr=l(),EC=a("li"),t4e=a("strong"),oGr=o("electra"),rGr=o(" \u2014 "),WZ=a("a"),tGr=o("FlaxElectraForPreTraining"),aGr=o(" (ELECTRA model)"),nGr=l(),CC=a("li"),a4e=a("strong"),sGr=o("longt5"),lGr=o(" \u2014 "),QZ=a("a"),iGr=o("FlaxLongT5ForConditionalGeneration"),dGr=o(" (LongT5 model)"),cGr=l(),wC=a("li"),n4e=a("strong"),fGr=o("mbart"),mGr=o(" \u2014 "),HZ=a("a"),gGr=o("FlaxMBartForConditionalGeneration"),hGr=o(" (mBART model)"),pGr=l(),AC=a("li"),s4e=a("strong"),_Gr=o("mt5"),uGr=o(" \u2014 "),UZ=a("a"),bGr=o("FlaxMT5ForConditionalGeneration"),vGr=o(" (MT5 model)"),FGr=l(),LC=a("li"),l4e=a("strong"),TGr=o("roberta"),MGr=o(" \u2014 "),JZ=a("a"),EGr=o("FlaxRobertaForMaskedLM"),CGr=o(" (RoBERTa model)"),wGr=l(),yC=a("li"),i4e=a("strong"),AGr=o("roformer"),LGr=o(" \u2014 "),YZ=a("a"),yGr=o("FlaxRoFormerForMaskedLM"),xGr=o(" (RoFormer model)"),$Gr=l(),xC=a("li"),d4e=a("strong"),kGr=o("t5"),SGr=o(" \u2014 "),KZ=a("a"),RGr=o("FlaxT5ForConditionalGeneration"),PGr=o(" (T5 model)"),BGr=l(),$C=a("li"),c4e=a("strong"),IGr=o("wav2vec2"),NGr=o(" \u2014 "),ZZ=a("a"),qGr=o("FlaxWav2Vec2ForPreTraining"),jGr=o(" (Wav2Vec2 model)"),DGr=l(),kC=a("li"),f4e=a("strong"),GGr=o("xlm-roberta"),OGr=o(" \u2014 "),eee=a("a"),VGr=o("FlaxXLMRobertaForMaskedLM"),XGr=o(" (XLM-RoBERTa model)"),zGr=l(),F(SC.$$.fragment),KVe=l(),ef=a("h2"),RC=a("a"),m4e=a("span"),F(Zx.$$.fragment),WGr=l(),g4e=a("span"),QGr=o("FlaxAutoModelForMaskedLM"),ZVe=l(),ur=a("div"),F(e$.$$.fragment),HGr=l(),of=a("p"),UGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oee=a("a"),JGr=o("from_pretrained()"),YGr=o(" class method or the "),ree=a("a"),KGr=o("from_config()"),ZGr=o(` class
method.`),eOr=l(),o$=a("p"),oOr=o("This class cannot be instantiated directly using "),h4e=a("code"),rOr=o("__init__()"),tOr=o(" (throws an error)."),aOr=l(),Ht=a("div"),F(r$.$$.fragment),nOr=l(),p4e=a("p"),sOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lOr=l(),rf=a("p"),iOr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),dOr=o("not"),cOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),fOr=o("from_pretrained()"),mOr=o(" to load the model weights."),gOr=l(),F(PC.$$.fragment),hOr=l(),zr=a("div"),F(t$.$$.fragment),pOr=l(),u4e=a("p"),_Or=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uOr=l(),En=a("p"),bOr=o("The model class to instantiate is selected based on the "),b4e=a("code"),vOr=o("model_type"),FOr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),TOr=o("pretrained_model_name_or_path"),MOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),EOr=o("pretrained_model_name_or_path"),COr=o(":"),wOr=l(),$e=a("ul"),BC=a("li"),T4e=a("strong"),AOr=o("albert"),LOr=o(" \u2014 "),aee=a("a"),yOr=o("FlaxAlbertForMaskedLM"),xOr=o(" (ALBERT model)"),$Or=l(),IC=a("li"),M4e=a("strong"),kOr=o("bart"),SOr=o(" \u2014 "),nee=a("a"),ROr=o("FlaxBartForConditionalGeneration"),POr=o(" (BART model)"),BOr=l(),NC=a("li"),E4e=a("strong"),IOr=o("bert"),NOr=o(" \u2014 "),see=a("a"),qOr=o("FlaxBertForMaskedLM"),jOr=o(" (BERT model)"),DOr=l(),qC=a("li"),C4e=a("strong"),GOr=o("big_bird"),OOr=o(" \u2014 "),lee=a("a"),VOr=o("FlaxBigBirdForMaskedLM"),XOr=o(" (BigBird model)"),zOr=l(),jC=a("li"),w4e=a("strong"),WOr=o("distilbert"),QOr=o(" \u2014 "),iee=a("a"),HOr=o("FlaxDistilBertForMaskedLM"),UOr=o(" (DistilBERT model)"),JOr=l(),DC=a("li"),A4e=a("strong"),YOr=o("electra"),KOr=o(" \u2014 "),dee=a("a"),ZOr=o("FlaxElectraForMaskedLM"),eVr=o(" (ELECTRA model)"),oVr=l(),GC=a("li"),L4e=a("strong"),rVr=o("mbart"),tVr=o(" \u2014 "),cee=a("a"),aVr=o("FlaxMBartForConditionalGeneration"),nVr=o(" (mBART model)"),sVr=l(),OC=a("li"),y4e=a("strong"),lVr=o("roberta"),iVr=o(" \u2014 "),fee=a("a"),dVr=o("FlaxRobertaForMaskedLM"),cVr=o(" (RoBERTa model)"),fVr=l(),VC=a("li"),x4e=a("strong"),mVr=o("roformer"),gVr=o(" \u2014 "),mee=a("a"),hVr=o("FlaxRoFormerForMaskedLM"),pVr=o(" (RoFormer model)"),_Vr=l(),XC=a("li"),$4e=a("strong"),uVr=o("xlm-roberta"),bVr=o(" \u2014 "),gee=a("a"),vVr=o("FlaxXLMRobertaForMaskedLM"),FVr=o(" (XLM-RoBERTa model)"),TVr=l(),F(zC.$$.fragment),eXe=l(),tf=a("h2"),WC=a("a"),k4e=a("span"),F(a$.$$.fragment),MVr=l(),S4e=a("span"),EVr=o("FlaxAutoModelForSeq2SeqLM"),oXe=l(),br=a("div"),F(n$.$$.fragment),CVr=l(),af=a("p"),wVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hee=a("a"),AVr=o("from_pretrained()"),LVr=o(" class method or the "),pee=a("a"),yVr=o("from_config()"),xVr=o(` class
method.`),$Vr=l(),s$=a("p"),kVr=o("This class cannot be instantiated directly using "),R4e=a("code"),SVr=o("__init__()"),RVr=o(" (throws an error)."),PVr=l(),Ut=a("div"),F(l$.$$.fragment),BVr=l(),P4e=a("p"),IVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NVr=l(),nf=a("p"),qVr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),jVr=o("not"),DVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),GVr=o("from_pretrained()"),OVr=o(" to load the model weights."),VVr=l(),F(QC.$$.fragment),XVr=l(),Wr=a("div"),F(i$.$$.fragment),zVr=l(),I4e=a("p"),WVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QVr=l(),Cn=a("p"),HVr=o("The model class to instantiate is selected based on the "),N4e=a("code"),UVr=o("model_type"),JVr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),YVr=o("pretrained_model_name_or_path"),KVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),ZVr=o("pretrained_model_name_or_path"),eXr=o(":"),oXr=l(),ke=a("ul"),HC=a("li"),D4e=a("strong"),rXr=o("bart"),tXr=o(" \u2014 "),uee=a("a"),aXr=o("FlaxBartForConditionalGeneration"),nXr=o(" (BART model)"),sXr=l(),UC=a("li"),G4e=a("strong"),lXr=o("blenderbot"),iXr=o(" \u2014 "),bee=a("a"),dXr=o("FlaxBlenderbotForConditionalGeneration"),cXr=o(" (Blenderbot model)"),fXr=l(),JC=a("li"),O4e=a("strong"),mXr=o("blenderbot-small"),gXr=o(" \u2014 "),vee=a("a"),hXr=o("FlaxBlenderbotSmallForConditionalGeneration"),pXr=o(" (BlenderbotSmall model)"),_Xr=l(),YC=a("li"),V4e=a("strong"),uXr=o("encoder-decoder"),bXr=o(" \u2014 "),Fee=a("a"),vXr=o("FlaxEncoderDecoderModel"),FXr=o(" (Encoder decoder model)"),TXr=l(),KC=a("li"),X4e=a("strong"),MXr=o("longt5"),EXr=o(" \u2014 "),Tee=a("a"),CXr=o("FlaxLongT5ForConditionalGeneration"),wXr=o(" (LongT5 model)"),AXr=l(),ZC=a("li"),z4e=a("strong"),LXr=o("marian"),yXr=o(" \u2014 "),Mee=a("a"),xXr=o("FlaxMarianMTModel"),$Xr=o(" (Marian model)"),kXr=l(),e5=a("li"),W4e=a("strong"),SXr=o("mbart"),RXr=o(" \u2014 "),Eee=a("a"),PXr=o("FlaxMBartForConditionalGeneration"),BXr=o(" (mBART model)"),IXr=l(),o5=a("li"),Q4e=a("strong"),NXr=o("mt5"),qXr=o(" \u2014 "),Cee=a("a"),jXr=o("FlaxMT5ForConditionalGeneration"),DXr=o(" (MT5 model)"),GXr=l(),r5=a("li"),H4e=a("strong"),OXr=o("pegasus"),VXr=o(" \u2014 "),wee=a("a"),XXr=o("FlaxPegasusForConditionalGeneration"),zXr=o(" (Pegasus model)"),WXr=l(),t5=a("li"),U4e=a("strong"),QXr=o("t5"),HXr=o(" \u2014 "),Aee=a("a"),UXr=o("FlaxT5ForConditionalGeneration"),JXr=o(" (T5 model)"),YXr=l(),F(a5.$$.fragment),rXe=l(),sf=a("h2"),n5=a("a"),J4e=a("span"),F(d$.$$.fragment),KXr=l(),Y4e=a("span"),ZXr=o("FlaxAutoModelForSequenceClassification"),tXe=l(),vr=a("div"),F(c$.$$.fragment),ezr=l(),lf=a("p"),ozr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lee=a("a"),rzr=o("from_pretrained()"),tzr=o(" class method or the "),yee=a("a"),azr=o("from_config()"),nzr=o(` class
method.`),szr=l(),f$=a("p"),lzr=o("This class cannot be instantiated directly using "),K4e=a("code"),izr=o("__init__()"),dzr=o(" (throws an error)."),czr=l(),Jt=a("div"),F(m$.$$.fragment),fzr=l(),Z4e=a("p"),mzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gzr=l(),df=a("p"),hzr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),pzr=o("not"),_zr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("a"),uzr=o("from_pretrained()"),bzr=o(" to load the model weights."),vzr=l(),F(s5.$$.fragment),Fzr=l(),Qr=a("div"),F(g$.$$.fragment),Tzr=l(),oCe=a("p"),Mzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ezr=l(),wn=a("p"),Czr=o("The model class to instantiate is selected based on the "),rCe=a("code"),wzr=o("model_type"),Azr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),Lzr=o("pretrained_model_name_or_path"),yzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),xzr=o("pretrained_model_name_or_path"),$zr=o(":"),kzr=l(),Se=a("ul"),l5=a("li"),nCe=a("strong"),Szr=o("albert"),Rzr=o(" \u2014 "),$ee=a("a"),Pzr=o("FlaxAlbertForSequenceClassification"),Bzr=o(" (ALBERT model)"),Izr=l(),i5=a("li"),sCe=a("strong"),Nzr=o("bart"),qzr=o(" \u2014 "),kee=a("a"),jzr=o("FlaxBartForSequenceClassification"),Dzr=o(" (BART model)"),Gzr=l(),d5=a("li"),lCe=a("strong"),Ozr=o("bert"),Vzr=o(" \u2014 "),See=a("a"),Xzr=o("FlaxBertForSequenceClassification"),zzr=o(" (BERT model)"),Wzr=l(),c5=a("li"),iCe=a("strong"),Qzr=o("big_bird"),Hzr=o(" \u2014 "),Ree=a("a"),Uzr=o("FlaxBigBirdForSequenceClassification"),Jzr=o(" (BigBird model)"),Yzr=l(),f5=a("li"),dCe=a("strong"),Kzr=o("distilbert"),Zzr=o(" \u2014 "),Pee=a("a"),eWr=o("FlaxDistilBertForSequenceClassification"),oWr=o(" (DistilBERT model)"),rWr=l(),m5=a("li"),cCe=a("strong"),tWr=o("electra"),aWr=o(" \u2014 "),Bee=a("a"),nWr=o("FlaxElectraForSequenceClassification"),sWr=o(" (ELECTRA model)"),lWr=l(),g5=a("li"),fCe=a("strong"),iWr=o("mbart"),dWr=o(" \u2014 "),Iee=a("a"),cWr=o("FlaxMBartForSequenceClassification"),fWr=o(" (mBART model)"),mWr=l(),h5=a("li"),mCe=a("strong"),gWr=o("roberta"),hWr=o(" \u2014 "),Nee=a("a"),pWr=o("FlaxRobertaForSequenceClassification"),_Wr=o(" (RoBERTa model)"),uWr=l(),p5=a("li"),gCe=a("strong"),bWr=o("roformer"),vWr=o(" \u2014 "),qee=a("a"),FWr=o("FlaxRoFormerForSequenceClassification"),TWr=o(" (RoFormer model)"),MWr=l(),_5=a("li"),hCe=a("strong"),EWr=o("xlm-roberta"),CWr=o(" \u2014 "),jee=a("a"),wWr=o("FlaxXLMRobertaForSequenceClassification"),AWr=o(" (XLM-RoBERTa model)"),LWr=l(),F(u5.$$.fragment),aXe=l(),cf=a("h2"),b5=a("a"),pCe=a("span"),F(h$.$$.fragment),yWr=l(),_Ce=a("span"),xWr=o("FlaxAutoModelForQuestionAnswering"),nXe=l(),Fr=a("div"),F(p$.$$.fragment),$Wr=l(),ff=a("p"),kWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dee=a("a"),SWr=o("from_pretrained()"),RWr=o(" class method or the "),Gee=a("a"),PWr=o("from_config()"),BWr=o(` class
method.`),IWr=l(),_$=a("p"),NWr=o("This class cannot be instantiated directly using "),uCe=a("code"),qWr=o("__init__()"),jWr=o(" (throws an error)."),DWr=l(),Yt=a("div"),F(u$.$$.fragment),GWr=l(),bCe=a("p"),OWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VWr=l(),mf=a("p"),XWr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),zWr=o("not"),WWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=a("a"),QWr=o("from_pretrained()"),HWr=o(" to load the model weights."),UWr=l(),F(v5.$$.fragment),JWr=l(),Hr=a("div"),F(b$.$$.fragment),YWr=l(),FCe=a("p"),KWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZWr=l(),An=a("p"),eQr=o("The model class to instantiate is selected based on the "),TCe=a("code"),oQr=o("model_type"),rQr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),tQr=o("pretrained_model_name_or_path"),aQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),nQr=o("pretrained_model_name_or_path"),sQr=o(":"),lQr=l(),Re=a("ul"),F5=a("li"),CCe=a("strong"),iQr=o("albert"),dQr=o(" \u2014 "),Vee=a("a"),cQr=o("FlaxAlbertForQuestionAnswering"),fQr=o(" (ALBERT model)"),mQr=l(),T5=a("li"),wCe=a("strong"),gQr=o("bart"),hQr=o(" \u2014 "),Xee=a("a"),pQr=o("FlaxBartForQuestionAnswering"),_Qr=o(" (BART model)"),uQr=l(),M5=a("li"),ACe=a("strong"),bQr=o("bert"),vQr=o(" \u2014 "),zee=a("a"),FQr=o("FlaxBertForQuestionAnswering"),TQr=o(" (BERT model)"),MQr=l(),E5=a("li"),LCe=a("strong"),EQr=o("big_bird"),CQr=o(" \u2014 "),Wee=a("a"),wQr=o("FlaxBigBirdForQuestionAnswering"),AQr=o(" (BigBird model)"),LQr=l(),C5=a("li"),yCe=a("strong"),yQr=o("distilbert"),xQr=o(" \u2014 "),Qee=a("a"),$Qr=o("FlaxDistilBertForQuestionAnswering"),kQr=o(" (DistilBERT model)"),SQr=l(),w5=a("li"),xCe=a("strong"),RQr=o("electra"),PQr=o(" \u2014 "),Hee=a("a"),BQr=o("FlaxElectraForQuestionAnswering"),IQr=o(" (ELECTRA model)"),NQr=l(),A5=a("li"),$Ce=a("strong"),qQr=o("mbart"),jQr=o(" \u2014 "),Uee=a("a"),DQr=o("FlaxMBartForQuestionAnswering"),GQr=o(" (mBART model)"),OQr=l(),L5=a("li"),kCe=a("strong"),VQr=o("roberta"),XQr=o(" \u2014 "),Jee=a("a"),zQr=o("FlaxRobertaForQuestionAnswering"),WQr=o(" (RoBERTa model)"),QQr=l(),y5=a("li"),SCe=a("strong"),HQr=o("roformer"),UQr=o(" \u2014 "),Yee=a("a"),JQr=o("FlaxRoFormerForQuestionAnswering"),YQr=o(" (RoFormer model)"),KQr=l(),x5=a("li"),RCe=a("strong"),ZQr=o("xlm-roberta"),eHr=o(" \u2014 "),Kee=a("a"),oHr=o("FlaxXLMRobertaForQuestionAnswering"),rHr=o(" (XLM-RoBERTa model)"),tHr=l(),F($5.$$.fragment),sXe=l(),gf=a("h2"),k5=a("a"),PCe=a("span"),F(v$.$$.fragment),aHr=l(),BCe=a("span"),nHr=o("FlaxAutoModelForTokenClassification"),lXe=l(),Tr=a("div"),F(F$.$$.fragment),sHr=l(),hf=a("p"),lHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zee=a("a"),iHr=o("from_pretrained()"),dHr=o(" class method or the "),eoe=a("a"),cHr=o("from_config()"),fHr=o(` class
method.`),mHr=l(),T$=a("p"),gHr=o("This class cannot be instantiated directly using "),ICe=a("code"),hHr=o("__init__()"),pHr=o(" (throws an error)."),_Hr=l(),Kt=a("div"),F(M$.$$.fragment),uHr=l(),NCe=a("p"),bHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vHr=l(),pf=a("p"),FHr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),THr=o("not"),MHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),EHr=o("from_pretrained()"),CHr=o(" to load the model weights."),wHr=l(),F(S5.$$.fragment),AHr=l(),Ur=a("div"),F(E$.$$.fragment),LHr=l(),jCe=a("p"),yHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xHr=l(),Ln=a("p"),$Hr=o("The model class to instantiate is selected based on the "),DCe=a("code"),kHr=o("model_type"),SHr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),RHr=o("pretrained_model_name_or_path"),PHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),BHr=o("pretrained_model_name_or_path"),IHr=o(":"),NHr=l(),Ve=a("ul"),R5=a("li"),VCe=a("strong"),qHr=o("albert"),jHr=o(" \u2014 "),roe=a("a"),DHr=o("FlaxAlbertForTokenClassification"),GHr=o(" (ALBERT model)"),OHr=l(),P5=a("li"),XCe=a("strong"),VHr=o("bert"),XHr=o(" \u2014 "),toe=a("a"),zHr=o("FlaxBertForTokenClassification"),WHr=o(" (BERT model)"),QHr=l(),B5=a("li"),zCe=a("strong"),HHr=o("big_bird"),UHr=o(" \u2014 "),aoe=a("a"),JHr=o("FlaxBigBirdForTokenClassification"),YHr=o(" (BigBird model)"),KHr=l(),I5=a("li"),WCe=a("strong"),ZHr=o("distilbert"),eUr=o(" \u2014 "),noe=a("a"),oUr=o("FlaxDistilBertForTokenClassification"),rUr=o(" (DistilBERT model)"),tUr=l(),N5=a("li"),QCe=a("strong"),aUr=o("electra"),nUr=o(" \u2014 "),soe=a("a"),sUr=o("FlaxElectraForTokenClassification"),lUr=o(" (ELECTRA model)"),iUr=l(),q5=a("li"),HCe=a("strong"),dUr=o("roberta"),cUr=o(" \u2014 "),loe=a("a"),fUr=o("FlaxRobertaForTokenClassification"),mUr=o(" (RoBERTa model)"),gUr=l(),j5=a("li"),UCe=a("strong"),hUr=o("roformer"),pUr=o(" \u2014 "),ioe=a("a"),_Ur=o("FlaxRoFormerForTokenClassification"),uUr=o(" (RoFormer model)"),bUr=l(),D5=a("li"),JCe=a("strong"),vUr=o("xlm-roberta"),FUr=o(" \u2014 "),doe=a("a"),TUr=o("FlaxXLMRobertaForTokenClassification"),MUr=o(" (XLM-RoBERTa model)"),EUr=l(),F(G5.$$.fragment),iXe=l(),_f=a("h2"),O5=a("a"),YCe=a("span"),F(C$.$$.fragment),CUr=l(),KCe=a("span"),wUr=o("FlaxAutoModelForMultipleChoice"),dXe=l(),Mr=a("div"),F(w$.$$.fragment),AUr=l(),uf=a("p"),LUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),coe=a("a"),yUr=o("from_pretrained()"),xUr=o(" class method or the "),foe=a("a"),$Ur=o("from_config()"),kUr=o(` class
method.`),SUr=l(),A$=a("p"),RUr=o("This class cannot be instantiated directly using "),ZCe=a("code"),PUr=o("__init__()"),BUr=o(" (throws an error)."),IUr=l(),Zt=a("div"),F(L$.$$.fragment),NUr=l(),e5e=a("p"),qUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jUr=l(),bf=a("p"),DUr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),GUr=o("not"),OUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("a"),VUr=o("from_pretrained()"),XUr=o(" to load the model weights."),zUr=l(),F(V5.$$.fragment),WUr=l(),Jr=a("div"),F(y$.$$.fragment),QUr=l(),r5e=a("p"),HUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UUr=l(),yn=a("p"),JUr=o("The model class to instantiate is selected based on the "),t5e=a("code"),YUr=o("model_type"),KUr=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),ZUr=o("pretrained_model_name_or_path"),eJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),oJr=o("pretrained_model_name_or_path"),rJr=o(":"),tJr=l(),Xe=a("ul"),X5=a("li"),s5e=a("strong"),aJr=o("albert"),nJr=o(" \u2014 "),goe=a("a"),sJr=o("FlaxAlbertForMultipleChoice"),lJr=o(" (ALBERT model)"),iJr=l(),z5=a("li"),l5e=a("strong"),dJr=o("bert"),cJr=o(" \u2014 "),hoe=a("a"),fJr=o("FlaxBertForMultipleChoice"),mJr=o(" (BERT model)"),gJr=l(),W5=a("li"),i5e=a("strong"),hJr=o("big_bird"),pJr=o(" \u2014 "),poe=a("a"),_Jr=o("FlaxBigBirdForMultipleChoice"),uJr=o(" (BigBird model)"),bJr=l(),Q5=a("li"),d5e=a("strong"),vJr=o("distilbert"),FJr=o(" \u2014 "),_oe=a("a"),TJr=o("FlaxDistilBertForMultipleChoice"),MJr=o(" (DistilBERT model)"),EJr=l(),H5=a("li"),c5e=a("strong"),CJr=o("electra"),wJr=o(" \u2014 "),uoe=a("a"),AJr=o("FlaxElectraForMultipleChoice"),LJr=o(" (ELECTRA model)"),yJr=l(),U5=a("li"),f5e=a("strong"),xJr=o("roberta"),$Jr=o(" \u2014 "),boe=a("a"),kJr=o("FlaxRobertaForMultipleChoice"),SJr=o(" (RoBERTa model)"),RJr=l(),J5=a("li"),m5e=a("strong"),PJr=o("roformer"),BJr=o(" \u2014 "),voe=a("a"),IJr=o("FlaxRoFormerForMultipleChoice"),NJr=o(" (RoFormer model)"),qJr=l(),Y5=a("li"),g5e=a("strong"),jJr=o("xlm-roberta"),DJr=o(" \u2014 "),Foe=a("a"),GJr=o("FlaxXLMRobertaForMultipleChoice"),OJr=o(" (XLM-RoBERTa model)"),VJr=l(),F(K5.$$.fragment),cXe=l(),vf=a("h2"),Z5=a("a"),h5e=a("span"),F(x$.$$.fragment),XJr=l(),p5e=a("span"),zJr=o("FlaxAutoModelForNextSentencePrediction"),fXe=l(),Er=a("div"),F($$.$$.fragment),WJr=l(),Ff=a("p"),QJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Toe=a("a"),HJr=o("from_pretrained()"),UJr=o(" class method or the "),Moe=a("a"),JJr=o("from_config()"),YJr=o(` class
method.`),KJr=l(),k$=a("p"),ZJr=o("This class cannot be instantiated directly using "),_5e=a("code"),eYr=o("__init__()"),oYr=o(" (throws an error)."),rYr=l(),ea=a("div"),F(S$.$$.fragment),tYr=l(),u5e=a("p"),aYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nYr=l(),Tf=a("p"),sYr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),lYr=o("not"),iYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),dYr=o("from_pretrained()"),cYr=o(" to load the model weights."),fYr=l(),F(e3.$$.fragment),mYr=l(),Yr=a("div"),F(R$.$$.fragment),gYr=l(),v5e=a("p"),hYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pYr=l(),xn=a("p"),_Yr=o("The model class to instantiate is selected based on the "),F5e=a("code"),uYr=o("model_type"),bYr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),vYr=o("pretrained_model_name_or_path"),FYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),TYr=o("pretrained_model_name_or_path"),MYr=o(":"),EYr=l(),E5e=a("ul"),o3=a("li"),C5e=a("strong"),CYr=o("bert"),wYr=o(" \u2014 "),Coe=a("a"),AYr=o("FlaxBertForNextSentencePrediction"),LYr=o(" (BERT model)"),yYr=l(),F(r3.$$.fragment),mXe=l(),Mf=a("h2"),t3=a("a"),w5e=a("span"),F(P$.$$.fragment),xYr=l(),A5e=a("span"),$Yr=o("FlaxAutoModelForImageClassification"),gXe=l(),Cr=a("div"),F(B$.$$.fragment),kYr=l(),Ef=a("p"),SYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),woe=a("a"),RYr=o("from_pretrained()"),PYr=o(" class method or the "),Aoe=a("a"),BYr=o("from_config()"),IYr=o(` class
method.`),NYr=l(),I$=a("p"),qYr=o("This class cannot be instantiated directly using "),L5e=a("code"),jYr=o("__init__()"),DYr=o(" (throws an error)."),GYr=l(),oa=a("div"),F(N$.$$.fragment),OYr=l(),y5e=a("p"),VYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XYr=l(),Cf=a("p"),zYr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),WYr=o("not"),QYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),HYr=o("from_pretrained()"),UYr=o(" to load the model weights."),JYr=l(),F(a3.$$.fragment),YYr=l(),Kr=a("div"),F(q$.$$.fragment),KYr=l(),$5e=a("p"),ZYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eKr=l(),$n=a("p"),oKr=o("The model class to instantiate is selected based on the "),k5e=a("code"),rKr=o("model_type"),tKr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),aKr=o("pretrained_model_name_or_path"),nKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),sKr=o("pretrained_model_name_or_path"),lKr=o(":"),iKr=l(),j$=a("ul"),n3=a("li"),P5e=a("strong"),dKr=o("beit"),cKr=o(" \u2014 "),yoe=a("a"),fKr=o("FlaxBeitForImageClassification"),mKr=o(" (BEiT model)"),gKr=l(),s3=a("li"),B5e=a("strong"),hKr=o("vit"),pKr=o(" \u2014 "),xoe=a("a"),_Kr=o("FlaxViTForImageClassification"),uKr=o(" (ViT model)"),bKr=l(),F(l3.$$.fragment),hXe=l(),wf=a("h2"),i3=a("a"),I5e=a("span"),F(D$.$$.fragment),vKr=l(),N5e=a("span"),FKr=o("FlaxAutoModelForVision2Seq"),pXe=l(),wr=a("div"),F(G$.$$.fragment),TKr=l(),Af=a("p"),MKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$oe=a("a"),EKr=o("from_pretrained()"),CKr=o(" class method or the "),koe=a("a"),wKr=o("from_config()"),AKr=o(` class
method.`),LKr=l(),O$=a("p"),yKr=o("This class cannot be instantiated directly using "),q5e=a("code"),xKr=o("__init__()"),$Kr=o(" (throws an error)."),kKr=l(),ra=a("div"),F(V$.$$.fragment),SKr=l(),j5e=a("p"),RKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PKr=l(),Lf=a("p"),BKr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),IKr=o("not"),NKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),qKr=o("from_pretrained()"),jKr=o(" to load the model weights."),DKr=l(),F(d3.$$.fragment),GKr=l(),Zr=a("div"),F(X$.$$.fragment),OKr=l(),G5e=a("p"),VKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XKr=l(),kn=a("p"),zKr=o("The model class to instantiate is selected based on the "),O5e=a("code"),WKr=o("model_type"),QKr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),HKr=o("pretrained_model_name_or_path"),UKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),JKr=o("pretrained_model_name_or_path"),YKr=o(":"),KKr=l(),z5e=a("ul"),c3=a("li"),W5e=a("strong"),ZKr=o("vision-encoder-decoder"),eZr=o(" \u2014 "),Roe=a("a"),oZr=o("FlaxVisionEncoderDecoderModel"),rZr=o(" (Vision Encoder decoder model)"),tZr=l(),F(f3.$$.fragment),this.h()},l(f){const u=OGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var z$=s(p);m=n(z$,"A",{id:!0,class:!0,href:!0});var Q5e=s(m);_=n(Q5e,"SPAN",{});var H5e=s(_);T(d.$$.fragment,H5e),H5e.forEach(t),Q5e.forEach(t),h=i(z$),Eo=n(z$,"SPAN",{});var U5e=s(Eo);Ci=r(U5e,"Auto Classes"),U5e.forEach(t),z$.forEach(t),kf=i(f),nt=n(f,"P",{});var W$=s(nt);wi=r(W$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=n(W$,"CODE",{});var J5e=s(Ai);kA=r(J5e,"from_pretrained()"),J5e.forEach(t),Sf=r(W$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),W$.forEach(t),Oe=i(f),We=n(f,"P",{});var Sn=s(We);Li=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Y5e=s(Rn);SA=r(Y5e,"AutoConfig"),Y5e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var K5e=s(Bn);RA=r(K5e,"AutoModel"),K5e.forEach(t),yi=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var Z5e=s(In);PA=r(Z5e,"AutoTokenizer"),Z5e.forEach(t),xi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Rf=i(f),T($a.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Q$=s(Ae);cS=r(Q$,"will create a model that is an instance of "),$i=n(Q$,"A",{href:!0});var e3e=s($i);fS=r(e3e,"BertModel"),e3e.forEach(t),mS=r(Q$,"."),Q$.forEach(t),Co=i(f),ka=n(f,"P",{});var H$=s(ka);gS=r(H$,"There is one class of "),Pf=n(H$,"CODE",{});var o3e=s(Pf);hS=r(o3e,"AutoModel"),o3e.forEach(t),AWe=r(H$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),H$.forEach(t),fOe=i(f),ki=n(f,"H2",{class:!0});var U$=s(ki);Bf=n(U$,"A",{id:!0,class:!0,href:!0});var r3e=s(Bf);yte=n(r3e,"SPAN",{});var t3e=s(yte);T(BA.$$.fragment,t3e),t3e.forEach(t),r3e.forEach(t),LWe=i(U$),xte=n(U$,"SPAN",{});var a3e=s(xte);yWe=r(a3e,"Extending the Auto Classes"),a3e.forEach(t),U$.forEach(t),mOe=i(f),Nn=n(f,"P",{});var yf=s(Nn);xWe=r(yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$te=n(yf,"CODE",{});var n3e=s($te);$We=r(n3e,"NewModel"),n3e.forEach(t),kWe=r(yf,", make sure you have a "),kte=n(yf,"CODE",{});var s3e=s(kte);SWe=r(s3e,"NewModelConfig"),s3e.forEach(t),RWe=r(yf,` then you can add those to the auto
classes like this:`),yf.forEach(t),gOe=i(f),T(IA.$$.fragment,f),hOe=i(f),pS=n(f,"P",{});var l3e=s(pS);PWe=r(l3e,"You will then be able to use the auto classes like you would usually do!"),l3e.forEach(t),pOe=i(f),T(If.$$.fragment,f),_Oe=i(f),Si=n(f,"H2",{class:!0});var J$=s(Si);Nf=n(J$,"A",{id:!0,class:!0,href:!0});var i3e=s(Nf);Ste=n(i3e,"SPAN",{});var d3e=s(Ste);T(NA.$$.fragment,d3e),d3e.forEach(t),i3e.forEach(t),BWe=i(J$),Rte=n(J$,"SPAN",{});var c3e=s(Rte);IWe=r(c3e,"AutoConfig"),c3e.forEach(t),J$.forEach(t),uOe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(qA.$$.fragment,tt),NWe=i(tt),jA=n(tt,"P",{});var Y$=s(jA);qWe=r(Y$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_S=n(Y$,"A",{href:!0});var f3e=s(_S);jWe=r(f3e,"from_pretrained()"),f3e.forEach(t),DWe=r(Y$," class method."),Y$.forEach(t),GWe=i(tt),DA=n(tt,"P",{});var K$=s(DA);OWe=r(K$,"This class cannot be instantiated directly using "),Pte=n(K$,"CODE",{});var m3e=s(Pte);VWe=r(m3e,"__init__()"),m3e.forEach(t),XWe=r(K$," (throws an error)."),K$.forEach(t),zWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(GA.$$.fragment,at),WWe=i(at),Bte=n(at,"P",{});var g3e=s(Bte);QWe=r(g3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),g3e.forEach(t),HWe=i(at),Ri=n(at,"P",{});var xf=s(Ri);UWe=r(xf,"The configuration class to instantiate is selected based on the "),Ite=n(xf,"CODE",{});var h3e=s(Ite);JWe=r(h3e,"model_type"),h3e.forEach(t),YWe=r(xf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nte=n(xf,"CODE",{});var p3e=s(Nte);KWe=r(p3e,"pretrained_model_name_or_path"),p3e.forEach(t),ZWe=r(xf,":"),xf.forEach(t),eQe=i(at),A=n(at,"UL",{});var L=s(A);qf=n(L,"LI",{});var m3=s(qf);qte=n(m3,"STRONG",{});var _3e=s(qte);oQe=r(_3e,"albert"),_3e.forEach(t),rQe=r(m3," \u2014 "),uS=n(m3,"A",{href:!0});var u3e=s(uS);tQe=r(u3e,"AlbertConfig"),u3e.forEach(t),aQe=r(m3," (ALBERT model)"),m3.forEach(t),nQe=i(L),jf=n(L,"LI",{});var g3=s(jf);jte=n(g3,"STRONG",{});var b3e=s(jte);sQe=r(b3e,"bart"),b3e.forEach(t),lQe=r(g3," \u2014 "),bS=n(g3,"A",{href:!0});var v3e=s(bS);iQe=r(v3e,"BartConfig"),v3e.forEach(t),dQe=r(g3," (BART model)"),g3.forEach(t),cQe=i(L),Df=n(L,"LI",{});var h3=s(Df);Dte=n(h3,"STRONG",{});var F3e=s(Dte);fQe=r(F3e,"beit"),F3e.forEach(t),mQe=r(h3," \u2014 "),vS=n(h3,"A",{href:!0});var T3e=s(vS);gQe=r(T3e,"BeitConfig"),T3e.forEach(t),hQe=r(h3," (BEiT model)"),h3.forEach(t),pQe=i(L),Gf=n(L,"LI",{});var p3=s(Gf);Gte=n(p3,"STRONG",{});var M3e=s(Gte);_Qe=r(M3e,"bert"),M3e.forEach(t),uQe=r(p3," \u2014 "),FS=n(p3,"A",{href:!0});var E3e=s(FS);bQe=r(E3e,"BertConfig"),E3e.forEach(t),vQe=r(p3," (BERT model)"),p3.forEach(t),FQe=i(L),Of=n(L,"LI",{});var _3=s(Of);Ote=n(_3,"STRONG",{});var C3e=s(Ote);TQe=r(C3e,"bert-generation"),C3e.forEach(t),MQe=r(_3," \u2014 "),TS=n(_3,"A",{href:!0});var w3e=s(TS);EQe=r(w3e,"BertGenerationConfig"),w3e.forEach(t),CQe=r(_3," (Bert Generation model)"),_3.forEach(t),wQe=i(L),Vf=n(L,"LI",{});var u3=s(Vf);Vte=n(u3,"STRONG",{});var A3e=s(Vte);AQe=r(A3e,"big_bird"),A3e.forEach(t),LQe=r(u3," \u2014 "),MS=n(u3,"A",{href:!0});var L3e=s(MS);yQe=r(L3e,"BigBirdConfig"),L3e.forEach(t),xQe=r(u3," (BigBird model)"),u3.forEach(t),$Qe=i(L),Xf=n(L,"LI",{});var b3=s(Xf);Xte=n(b3,"STRONG",{});var y3e=s(Xte);kQe=r(y3e,"bigbird_pegasus"),y3e.forEach(t),SQe=r(b3," \u2014 "),ES=n(b3,"A",{href:!0});var x3e=s(ES);RQe=r(x3e,"BigBirdPegasusConfig"),x3e.forEach(t),PQe=r(b3," (BigBird-Pegasus model)"),b3.forEach(t),BQe=i(L),zf=n(L,"LI",{});var v3=s(zf);zte=n(v3,"STRONG",{});var $3e=s(zte);IQe=r($3e,"blenderbot"),$3e.forEach(t),NQe=r(v3," \u2014 "),CS=n(v3,"A",{href:!0});var k3e=s(CS);qQe=r(k3e,"BlenderbotConfig"),k3e.forEach(t),jQe=r(v3," (Blenderbot model)"),v3.forEach(t),DQe=i(L),Wf=n(L,"LI",{});var F3=s(Wf);Wte=n(F3,"STRONG",{});var S3e=s(Wte);GQe=r(S3e,"blenderbot-small"),S3e.forEach(t),OQe=r(F3," \u2014 "),wS=n(F3,"A",{href:!0});var R3e=s(wS);VQe=r(R3e,"BlenderbotSmallConfig"),R3e.forEach(t),XQe=r(F3," (BlenderbotSmall model)"),F3.forEach(t),zQe=i(L),Qf=n(L,"LI",{});var T3=s(Qf);Qte=n(T3,"STRONG",{});var P3e=s(Qte);WQe=r(P3e,"bloom"),P3e.forEach(t),QQe=r(T3," \u2014 "),AS=n(T3,"A",{href:!0});var B3e=s(AS);HQe=r(B3e,"BloomConfig"),B3e.forEach(t),UQe=r(T3," (BLOOM model)"),T3.forEach(t),JQe=i(L),Hf=n(L,"LI",{});var M3=s(Hf);Hte=n(M3,"STRONG",{});var I3e=s(Hte);YQe=r(I3e,"camembert"),I3e.forEach(t),KQe=r(M3," \u2014 "),LS=n(M3,"A",{href:!0});var N3e=s(LS);ZQe=r(N3e,"CamembertConfig"),N3e.forEach(t),eHe=r(M3," (CamemBERT model)"),M3.forEach(t),oHe=i(L),Uf=n(L,"LI",{});var E3=s(Uf);Ute=n(E3,"STRONG",{});var q3e=s(Ute);rHe=r(q3e,"canine"),q3e.forEach(t),tHe=r(E3," \u2014 "),yS=n(E3,"A",{href:!0});var j3e=s(yS);aHe=r(j3e,"CanineConfig"),j3e.forEach(t),nHe=r(E3," (CANINE model)"),E3.forEach(t),sHe=i(L),Jf=n(L,"LI",{});var C3=s(Jf);Jte=n(C3,"STRONG",{});var D3e=s(Jte);lHe=r(D3e,"clip"),D3e.forEach(t),iHe=r(C3," \u2014 "),xS=n(C3,"A",{href:!0});var G3e=s(xS);dHe=r(G3e,"CLIPConfig"),G3e.forEach(t),cHe=r(C3," (CLIP model)"),C3.forEach(t),fHe=i(L),Yf=n(L,"LI",{});var w3=s(Yf);Yte=n(w3,"STRONG",{});var O3e=s(Yte);mHe=r(O3e,"codegen"),O3e.forEach(t),gHe=r(w3," \u2014 "),$S=n(w3,"A",{href:!0});var V3e=s($S);hHe=r(V3e,"CodeGenConfig"),V3e.forEach(t),pHe=r(w3," (CodeGen model)"),w3.forEach(t),_He=i(L),Kf=n(L,"LI",{});var A3=s(Kf);Kte=n(A3,"STRONG",{});var X3e=s(Kte);uHe=r(X3e,"convbert"),X3e.forEach(t),bHe=r(A3," \u2014 "),kS=n(A3,"A",{href:!0});var z3e=s(kS);vHe=r(z3e,"ConvBertConfig"),z3e.forEach(t),FHe=r(A3," (ConvBERT model)"),A3.forEach(t),THe=i(L),Zf=n(L,"LI",{});var L3=s(Zf);Zte=n(L3,"STRONG",{});var W3e=s(Zte);MHe=r(W3e,"convnext"),W3e.forEach(t),EHe=r(L3," \u2014 "),SS=n(L3,"A",{href:!0});var Q3e=s(SS);CHe=r(Q3e,"ConvNextConfig"),Q3e.forEach(t),wHe=r(L3," (ConvNeXT model)"),L3.forEach(t),AHe=i(L),em=n(L,"LI",{});var y3=s(em);eae=n(y3,"STRONG",{});var H3e=s(eae);LHe=r(H3e,"ctrl"),H3e.forEach(t),yHe=r(y3," \u2014 "),RS=n(y3,"A",{href:!0});var U3e=s(RS);xHe=r(U3e,"CTRLConfig"),U3e.forEach(t),$He=r(y3," (CTRL model)"),y3.forEach(t),kHe=i(L),om=n(L,"LI",{});var x3=s(om);oae=n(x3,"STRONG",{});var J3e=s(oae);SHe=r(J3e,"cvt"),J3e.forEach(t),RHe=r(x3," \u2014 "),PS=n(x3,"A",{href:!0});var Y3e=s(PS);PHe=r(Y3e,"CvtConfig"),Y3e.forEach(t),BHe=r(x3," (CvT model)"),x3.forEach(t),IHe=i(L),rm=n(L,"LI",{});var $3=s(rm);rae=n($3,"STRONG",{});var K3e=s(rae);NHe=r(K3e,"data2vec-audio"),K3e.forEach(t),qHe=r($3," \u2014 "),BS=n($3,"A",{href:!0});var Z3e=s(BS);jHe=r(Z3e,"Data2VecAudioConfig"),Z3e.forEach(t),DHe=r($3," (Data2VecAudio model)"),$3.forEach(t),GHe=i(L),tm=n(L,"LI",{});var k3=s(tm);tae=n(k3,"STRONG",{});var ewe=s(tae);OHe=r(ewe,"data2vec-text"),ewe.forEach(t),VHe=r(k3," \u2014 "),IS=n(k3,"A",{href:!0});var owe=s(IS);XHe=r(owe,"Data2VecTextConfig"),owe.forEach(t),zHe=r(k3," (Data2VecText model)"),k3.forEach(t),WHe=i(L),am=n(L,"LI",{});var S3=s(am);aae=n(S3,"STRONG",{});var rwe=s(aae);QHe=r(rwe,"data2vec-vision"),rwe.forEach(t),HHe=r(S3," \u2014 "),NS=n(S3,"A",{href:!0});var twe=s(NS);UHe=r(twe,"Data2VecVisionConfig"),twe.forEach(t),JHe=r(S3," (Data2VecVision model)"),S3.forEach(t),YHe=i(L),nm=n(L,"LI",{});var R3=s(nm);nae=n(R3,"STRONG",{});var awe=s(nae);KHe=r(awe,"deberta"),awe.forEach(t),ZHe=r(R3," \u2014 "),qS=n(R3,"A",{href:!0});var nwe=s(qS);eUe=r(nwe,"DebertaConfig"),nwe.forEach(t),oUe=r(R3," (DeBERTa model)"),R3.forEach(t),rUe=i(L),sm=n(L,"LI",{});var P3=s(sm);sae=n(P3,"STRONG",{});var swe=s(sae);tUe=r(swe,"deberta-v2"),swe.forEach(t),aUe=r(P3," \u2014 "),jS=n(P3,"A",{href:!0});var lwe=s(jS);nUe=r(lwe,"DebertaV2Config"),lwe.forEach(t),sUe=r(P3," (DeBERTa-v2 model)"),P3.forEach(t),lUe=i(L),lm=n(L,"LI",{});var B3=s(lm);lae=n(B3,"STRONG",{});var nZr=s(lae);iUe=r(nZr,"decision_transformer"),nZr.forEach(t),dUe=r(B3," \u2014 "),DS=n(B3,"A",{href:!0});var sZr=s(DS);cUe=r(sZr,"DecisionTransformerConfig"),sZr.forEach(t),fUe=r(B3," (Decision Transformer model)"),B3.forEach(t),mUe=i(L),im=n(L,"LI",{});var iwe=s(im);iae=n(iwe,"STRONG",{});var lZr=s(iae);gUe=r(lZr,"deit"),lZr.forEach(t),hUe=r(iwe," \u2014 "),GS=n(iwe,"A",{href:!0});var iZr=s(GS);pUe=r(iZr,"DeiTConfig"),iZr.forEach(t),_Ue=r(iwe," (DeiT model)"),iwe.forEach(t),uUe=i(L),dm=n(L,"LI",{});var dwe=s(dm);dae=n(dwe,"STRONG",{});var dZr=s(dae);bUe=r(dZr,"detr"),dZr.forEach(t),vUe=r(dwe," \u2014 "),OS=n(dwe,"A",{href:!0});var cZr=s(OS);FUe=r(cZr,"DetrConfig"),cZr.forEach(t),TUe=r(dwe," (DETR model)"),dwe.forEach(t),MUe=i(L),cm=n(L,"LI",{});var cwe=s(cm);cae=n(cwe,"STRONG",{});var fZr=s(cae);EUe=r(fZr,"distilbert"),fZr.forEach(t),CUe=r(cwe," \u2014 "),VS=n(cwe,"A",{href:!0});var mZr=s(VS);wUe=r(mZr,"DistilBertConfig"),mZr.forEach(t),AUe=r(cwe," (DistilBERT model)"),cwe.forEach(t),LUe=i(L),fm=n(L,"LI",{});var fwe=s(fm);fae=n(fwe,"STRONG",{});var gZr=s(fae);yUe=r(gZr,"dpr"),gZr.forEach(t),xUe=r(fwe," \u2014 "),XS=n(fwe,"A",{href:!0});var hZr=s(XS);$Ue=r(hZr,"DPRConfig"),hZr.forEach(t),kUe=r(fwe," (DPR model)"),fwe.forEach(t),SUe=i(L),mm=n(L,"LI",{});var mwe=s(mm);mae=n(mwe,"STRONG",{});var pZr=s(mae);RUe=r(pZr,"dpt"),pZr.forEach(t),PUe=r(mwe," \u2014 "),zS=n(mwe,"A",{href:!0});var _Zr=s(zS);BUe=r(_Zr,"DPTConfig"),_Zr.forEach(t),IUe=r(mwe," (DPT model)"),mwe.forEach(t),NUe=i(L),gm=n(L,"LI",{});var gwe=s(gm);gae=n(gwe,"STRONG",{});var uZr=s(gae);qUe=r(uZr,"electra"),uZr.forEach(t),jUe=r(gwe," \u2014 "),WS=n(gwe,"A",{href:!0});var bZr=s(WS);DUe=r(bZr,"ElectraConfig"),bZr.forEach(t),GUe=r(gwe," (ELECTRA model)"),gwe.forEach(t),OUe=i(L),hm=n(L,"LI",{});var hwe=s(hm);hae=n(hwe,"STRONG",{});var vZr=s(hae);VUe=r(vZr,"encoder-decoder"),vZr.forEach(t),XUe=r(hwe," \u2014 "),QS=n(hwe,"A",{href:!0});var FZr=s(QS);zUe=r(FZr,"EncoderDecoderConfig"),FZr.forEach(t),WUe=r(hwe," (Encoder decoder model)"),hwe.forEach(t),QUe=i(L),pm=n(L,"LI",{});var pwe=s(pm);pae=n(pwe,"STRONG",{});var TZr=s(pae);HUe=r(TZr,"flaubert"),TZr.forEach(t),UUe=r(pwe," \u2014 "),HS=n(pwe,"A",{href:!0});var MZr=s(HS);JUe=r(MZr,"FlaubertConfig"),MZr.forEach(t),YUe=r(pwe," (FlauBERT model)"),pwe.forEach(t),KUe=i(L),_m=n(L,"LI",{});var _we=s(_m);_ae=n(_we,"STRONG",{});var EZr=s(_ae);ZUe=r(EZr,"flava"),EZr.forEach(t),eJe=r(_we," \u2014 "),US=n(_we,"A",{href:!0});var CZr=s(US);oJe=r(CZr,"FlavaConfig"),CZr.forEach(t),rJe=r(_we," (FLAVA model)"),_we.forEach(t),tJe=i(L),um=n(L,"LI",{});var uwe=s(um);uae=n(uwe,"STRONG",{});var wZr=s(uae);aJe=r(wZr,"fnet"),wZr.forEach(t),nJe=r(uwe," \u2014 "),JS=n(uwe,"A",{href:!0});var AZr=s(JS);sJe=r(AZr,"FNetConfig"),AZr.forEach(t),lJe=r(uwe," (FNet model)"),uwe.forEach(t),iJe=i(L),bm=n(L,"LI",{});var bwe=s(bm);bae=n(bwe,"STRONG",{});var LZr=s(bae);dJe=r(LZr,"fsmt"),LZr.forEach(t),cJe=r(bwe," \u2014 "),YS=n(bwe,"A",{href:!0});var yZr=s(YS);fJe=r(yZr,"FSMTConfig"),yZr.forEach(t),mJe=r(bwe," (FairSeq Machine-Translation model)"),bwe.forEach(t),gJe=i(L),vm=n(L,"LI",{});var vwe=s(vm);vae=n(vwe,"STRONG",{});var xZr=s(vae);hJe=r(xZr,"funnel"),xZr.forEach(t),pJe=r(vwe," \u2014 "),KS=n(vwe,"A",{href:!0});var $Zr=s(KS);_Je=r($Zr,"FunnelConfig"),$Zr.forEach(t),uJe=r(vwe," (Funnel Transformer model)"),vwe.forEach(t),bJe=i(L),Fm=n(L,"LI",{});var Fwe=s(Fm);Fae=n(Fwe,"STRONG",{});var kZr=s(Fae);vJe=r(kZr,"glpn"),kZr.forEach(t),FJe=r(Fwe," \u2014 "),ZS=n(Fwe,"A",{href:!0});var SZr=s(ZS);TJe=r(SZr,"GLPNConfig"),SZr.forEach(t),MJe=r(Fwe," (GLPN model)"),Fwe.forEach(t),EJe=i(L),Tm=n(L,"LI",{});var Twe=s(Tm);Tae=n(Twe,"STRONG",{});var RZr=s(Tae);CJe=r(RZr,"gpt2"),RZr.forEach(t),wJe=r(Twe," \u2014 "),eR=n(Twe,"A",{href:!0});var PZr=s(eR);AJe=r(PZr,"GPT2Config"),PZr.forEach(t),LJe=r(Twe," (OpenAI GPT-2 model)"),Twe.forEach(t),yJe=i(L),Mm=n(L,"LI",{});var Mwe=s(Mm);Mae=n(Mwe,"STRONG",{});var BZr=s(Mae);xJe=r(BZr,"gpt_neo"),BZr.forEach(t),$Je=r(Mwe," \u2014 "),oR=n(Mwe,"A",{href:!0});var IZr=s(oR);kJe=r(IZr,"GPTNeoConfig"),IZr.forEach(t),SJe=r(Mwe," (GPT Neo model)"),Mwe.forEach(t),RJe=i(L),Em=n(L,"LI",{});var Ewe=s(Em);Eae=n(Ewe,"STRONG",{});var NZr=s(Eae);PJe=r(NZr,"gpt_neox"),NZr.forEach(t),BJe=r(Ewe," \u2014 "),rR=n(Ewe,"A",{href:!0});var qZr=s(rR);IJe=r(qZr,"GPTNeoXConfig"),qZr.forEach(t),NJe=r(Ewe," (GPT NeoX model)"),Ewe.forEach(t),qJe=i(L),Cm=n(L,"LI",{});var Cwe=s(Cm);Cae=n(Cwe,"STRONG",{});var jZr=s(Cae);jJe=r(jZr,"gptj"),jZr.forEach(t),DJe=r(Cwe," \u2014 "),tR=n(Cwe,"A",{href:!0});var DZr=s(tR);GJe=r(DZr,"GPTJConfig"),DZr.forEach(t),OJe=r(Cwe," (GPT-J model)"),Cwe.forEach(t),VJe=i(L),wm=n(L,"LI",{});var wwe=s(wm);wae=n(wwe,"STRONG",{});var GZr=s(wae);XJe=r(GZr,"hubert"),GZr.forEach(t),zJe=r(wwe," \u2014 "),aR=n(wwe,"A",{href:!0});var OZr=s(aR);WJe=r(OZr,"HubertConfig"),OZr.forEach(t),QJe=r(wwe," (Hubert model)"),wwe.forEach(t),HJe=i(L),Am=n(L,"LI",{});var Awe=s(Am);Aae=n(Awe,"STRONG",{});var VZr=s(Aae);UJe=r(VZr,"ibert"),VZr.forEach(t),JJe=r(Awe," \u2014 "),nR=n(Awe,"A",{href:!0});var XZr=s(nR);YJe=r(XZr,"IBertConfig"),XZr.forEach(t),KJe=r(Awe," (I-BERT model)"),Awe.forEach(t),ZJe=i(L),Lm=n(L,"LI",{});var Lwe=s(Lm);Lae=n(Lwe,"STRONG",{});var zZr=s(Lae);eYe=r(zZr,"imagegpt"),zZr.forEach(t),oYe=r(Lwe," \u2014 "),sR=n(Lwe,"A",{href:!0});var WZr=s(sR);rYe=r(WZr,"ImageGPTConfig"),WZr.forEach(t),tYe=r(Lwe," (ImageGPT model)"),Lwe.forEach(t),aYe=i(L),ym=n(L,"LI",{});var ywe=s(ym);yae=n(ywe,"STRONG",{});var QZr=s(yae);nYe=r(QZr,"layoutlm"),QZr.forEach(t),sYe=r(ywe," \u2014 "),lR=n(ywe,"A",{href:!0});var HZr=s(lR);lYe=r(HZr,"LayoutLMConfig"),HZr.forEach(t),iYe=r(ywe," (LayoutLM model)"),ywe.forEach(t),dYe=i(L),xm=n(L,"LI",{});var xwe=s(xm);xae=n(xwe,"STRONG",{});var UZr=s(xae);cYe=r(UZr,"layoutlmv2"),UZr.forEach(t),fYe=r(xwe," \u2014 "),iR=n(xwe,"A",{href:!0});var JZr=s(iR);mYe=r(JZr,"LayoutLMv2Config"),JZr.forEach(t),gYe=r(xwe," (LayoutLMv2 model)"),xwe.forEach(t),hYe=i(L),$m=n(L,"LI",{});var $we=s($m);$ae=n($we,"STRONG",{});var YZr=s($ae);pYe=r(YZr,"layoutlmv3"),YZr.forEach(t),_Ye=r($we," \u2014 "),dR=n($we,"A",{href:!0});var KZr=s(dR);uYe=r(KZr,"LayoutLMv3Config"),KZr.forEach(t),bYe=r($we," (LayoutLMv3 model)"),$we.forEach(t),vYe=i(L),km=n(L,"LI",{});var kwe=s(km);kae=n(kwe,"STRONG",{});var ZZr=s(kae);FYe=r(ZZr,"led"),ZZr.forEach(t),TYe=r(kwe," \u2014 "),cR=n(kwe,"A",{href:!0});var eet=s(cR);MYe=r(eet,"LEDConfig"),eet.forEach(t),EYe=r(kwe," (LED model)"),kwe.forEach(t),CYe=i(L),Sm=n(L,"LI",{});var Swe=s(Sm);Sae=n(Swe,"STRONG",{});var oet=s(Sae);wYe=r(oet,"levit"),oet.forEach(t),AYe=r(Swe," \u2014 "),fR=n(Swe,"A",{href:!0});var ret=s(fR);LYe=r(ret,"LevitConfig"),ret.forEach(t),yYe=r(Swe," (LeViT model)"),Swe.forEach(t),xYe=i(L),Rm=n(L,"LI",{});var Rwe=s(Rm);Rae=n(Rwe,"STRONG",{});var tet=s(Rae);$Ye=r(tet,"longformer"),tet.forEach(t),kYe=r(Rwe," \u2014 "),mR=n(Rwe,"A",{href:!0});var aet=s(mR);SYe=r(aet,"LongformerConfig"),aet.forEach(t),RYe=r(Rwe," (Longformer model)"),Rwe.forEach(t),PYe=i(L),Pm=n(L,"LI",{});var Pwe=s(Pm);Pae=n(Pwe,"STRONG",{});var net=s(Pae);BYe=r(net,"longt5"),net.forEach(t),IYe=r(Pwe," \u2014 "),gR=n(Pwe,"A",{href:!0});var set=s(gR);NYe=r(set,"LongT5Config"),set.forEach(t),qYe=r(Pwe," (LongT5 model)"),Pwe.forEach(t),jYe=i(L),Bm=n(L,"LI",{});var Bwe=s(Bm);Bae=n(Bwe,"STRONG",{});var iet=s(Bae);DYe=r(iet,"luke"),iet.forEach(t),GYe=r(Bwe," \u2014 "),hR=n(Bwe,"A",{href:!0});var det=s(hR);OYe=r(det,"LukeConfig"),det.forEach(t),VYe=r(Bwe," (LUKE model)"),Bwe.forEach(t),XYe=i(L),Im=n(L,"LI",{});var Iwe=s(Im);Iae=n(Iwe,"STRONG",{});var cet=s(Iae);zYe=r(cet,"lxmert"),cet.forEach(t),WYe=r(Iwe," \u2014 "),pR=n(Iwe,"A",{href:!0});var fet=s(pR);QYe=r(fet,"LxmertConfig"),fet.forEach(t),HYe=r(Iwe," (LXMERT model)"),Iwe.forEach(t),UYe=i(L),Nm=n(L,"LI",{});var Nwe=s(Nm);Nae=n(Nwe,"STRONG",{});var met=s(Nae);JYe=r(met,"m2m_100"),met.forEach(t),YYe=r(Nwe," \u2014 "),_R=n(Nwe,"A",{href:!0});var get=s(_R);KYe=r(get,"M2M100Config"),get.forEach(t),ZYe=r(Nwe," (M2M100 model)"),Nwe.forEach(t),eKe=i(L),qm=n(L,"LI",{});var qwe=s(qm);qae=n(qwe,"STRONG",{});var het=s(qae);oKe=r(het,"marian"),het.forEach(t),rKe=r(qwe," \u2014 "),uR=n(qwe,"A",{href:!0});var pet=s(uR);tKe=r(pet,"MarianConfig"),pet.forEach(t),aKe=r(qwe," (Marian model)"),qwe.forEach(t),nKe=i(L),jm=n(L,"LI",{});var jwe=s(jm);jae=n(jwe,"STRONG",{});var _et=s(jae);sKe=r(_et,"maskformer"),_et.forEach(t),lKe=r(jwe," \u2014 "),bR=n(jwe,"A",{href:!0});var uet=s(bR);iKe=r(uet,"MaskFormerConfig"),uet.forEach(t),dKe=r(jwe," (MaskFormer model)"),jwe.forEach(t),cKe=i(L),Dm=n(L,"LI",{});var Dwe=s(Dm);Dae=n(Dwe,"STRONG",{});var bet=s(Dae);fKe=r(bet,"mbart"),bet.forEach(t),mKe=r(Dwe," \u2014 "),vR=n(Dwe,"A",{href:!0});var vet=s(vR);gKe=r(vet,"MBartConfig"),vet.forEach(t),hKe=r(Dwe," (mBART model)"),Dwe.forEach(t),pKe=i(L),Gm=n(L,"LI",{});var Gwe=s(Gm);Gae=n(Gwe,"STRONG",{});var Fet=s(Gae);_Ke=r(Fet,"mctct"),Fet.forEach(t),uKe=r(Gwe," \u2014 "),FR=n(Gwe,"A",{href:!0});var Tet=s(FR);bKe=r(Tet,"MCTCTConfig"),Tet.forEach(t),vKe=r(Gwe," (M-CTC-T model)"),Gwe.forEach(t),FKe=i(L),Om=n(L,"LI",{});var Owe=s(Om);Oae=n(Owe,"STRONG",{});var Met=s(Oae);TKe=r(Met,"megatron-bert"),Met.forEach(t),MKe=r(Owe," \u2014 "),TR=n(Owe,"A",{href:!0});var Eet=s(TR);EKe=r(Eet,"MegatronBertConfig"),Eet.forEach(t),CKe=r(Owe," (Megatron-BERT model)"),Owe.forEach(t),wKe=i(L),Vm=n(L,"LI",{});var Vwe=s(Vm);Vae=n(Vwe,"STRONG",{});var Cet=s(Vae);AKe=r(Cet,"mobilebert"),Cet.forEach(t),LKe=r(Vwe," \u2014 "),MR=n(Vwe,"A",{href:!0});var wet=s(MR);yKe=r(wet,"MobileBertConfig"),wet.forEach(t),xKe=r(Vwe," (MobileBERT model)"),Vwe.forEach(t),$Ke=i(L),Xm=n(L,"LI",{});var Xwe=s(Xm);Xae=n(Xwe,"STRONG",{});var Aet=s(Xae);kKe=r(Aet,"mpnet"),Aet.forEach(t),SKe=r(Xwe," \u2014 "),ER=n(Xwe,"A",{href:!0});var Let=s(ER);RKe=r(Let,"MPNetConfig"),Let.forEach(t),PKe=r(Xwe," (MPNet model)"),Xwe.forEach(t),BKe=i(L),zm=n(L,"LI",{});var zwe=s(zm);zae=n(zwe,"STRONG",{});var yet=s(zae);IKe=r(yet,"mt5"),yet.forEach(t),NKe=r(zwe," \u2014 "),CR=n(zwe,"A",{href:!0});var xet=s(CR);qKe=r(xet,"MT5Config"),xet.forEach(t),jKe=r(zwe," (MT5 model)"),zwe.forEach(t),DKe=i(L),Wm=n(L,"LI",{});var Wwe=s(Wm);Wae=n(Wwe,"STRONG",{});var $et=s(Wae);GKe=r($et,"nezha"),$et.forEach(t),OKe=r(Wwe," \u2014 "),wR=n(Wwe,"A",{href:!0});var ket=s(wR);VKe=r(ket,"NezhaConfig"),ket.forEach(t),XKe=r(Wwe," (Nezha model)"),Wwe.forEach(t),zKe=i(L),Qm=n(L,"LI",{});var Qwe=s(Qm);Qae=n(Qwe,"STRONG",{});var Set=s(Qae);WKe=r(Set,"nystromformer"),Set.forEach(t),QKe=r(Qwe," \u2014 "),AR=n(Qwe,"A",{href:!0});var Ret=s(AR);HKe=r(Ret,"NystromformerConfig"),Ret.forEach(t),UKe=r(Qwe," (Nystr\xF6mformer model)"),Qwe.forEach(t),JKe=i(L),Hm=n(L,"LI",{});var Hwe=s(Hm);Hae=n(Hwe,"STRONG",{});var Pet=s(Hae);YKe=r(Pet,"openai-gpt"),Pet.forEach(t),KKe=r(Hwe," \u2014 "),LR=n(Hwe,"A",{href:!0});var Bet=s(LR);ZKe=r(Bet,"OpenAIGPTConfig"),Bet.forEach(t),eZe=r(Hwe," (OpenAI GPT model)"),Hwe.forEach(t),oZe=i(L),Um=n(L,"LI",{});var Uwe=s(Um);Uae=n(Uwe,"STRONG",{});var Iet=s(Uae);rZe=r(Iet,"opt"),Iet.forEach(t),tZe=r(Uwe," \u2014 "),yR=n(Uwe,"A",{href:!0});var Net=s(yR);aZe=r(Net,"OPTConfig"),Net.forEach(t),nZe=r(Uwe," (OPT model)"),Uwe.forEach(t),sZe=i(L),Jm=n(L,"LI",{});var Jwe=s(Jm);Jae=n(Jwe,"STRONG",{});var qet=s(Jae);lZe=r(qet,"pegasus"),qet.forEach(t),iZe=r(Jwe," \u2014 "),xR=n(Jwe,"A",{href:!0});var jet=s(xR);dZe=r(jet,"PegasusConfig"),jet.forEach(t),cZe=r(Jwe," (Pegasus model)"),Jwe.forEach(t),fZe=i(L),Ym=n(L,"LI",{});var Ywe=s(Ym);Yae=n(Ywe,"STRONG",{});var Det=s(Yae);mZe=r(Det,"perceiver"),Det.forEach(t),gZe=r(Ywe," \u2014 "),$R=n(Ywe,"A",{href:!0});var Get=s($R);hZe=r(Get,"PerceiverConfig"),Get.forEach(t),pZe=r(Ywe," (Perceiver model)"),Ywe.forEach(t),_Ze=i(L),Km=n(L,"LI",{});var Kwe=s(Km);Kae=n(Kwe,"STRONG",{});var Oet=s(Kae);uZe=r(Oet,"plbart"),Oet.forEach(t),bZe=r(Kwe," \u2014 "),kR=n(Kwe,"A",{href:!0});var Vet=s(kR);vZe=r(Vet,"PLBartConfig"),Vet.forEach(t),FZe=r(Kwe," (PLBart model)"),Kwe.forEach(t),TZe=i(L),Zm=n(L,"LI",{});var Zwe=s(Zm);Zae=n(Zwe,"STRONG",{});var Xet=s(Zae);MZe=r(Xet,"poolformer"),Xet.forEach(t),EZe=r(Zwe," \u2014 "),SR=n(Zwe,"A",{href:!0});var zet=s(SR);CZe=r(zet,"PoolFormerConfig"),zet.forEach(t),wZe=r(Zwe," (PoolFormer model)"),Zwe.forEach(t),AZe=i(L),eg=n(L,"LI",{});var eAe=s(eg);ene=n(eAe,"STRONG",{});var Wet=s(ene);LZe=r(Wet,"prophetnet"),Wet.forEach(t),yZe=r(eAe," \u2014 "),RR=n(eAe,"A",{href:!0});var Qet=s(RR);xZe=r(Qet,"ProphetNetConfig"),Qet.forEach(t),$Ze=r(eAe," (ProphetNet model)"),eAe.forEach(t),kZe=i(L),og=n(L,"LI",{});var oAe=s(og);one=n(oAe,"STRONG",{});var Het=s(one);SZe=r(Het,"qdqbert"),Het.forEach(t),RZe=r(oAe," \u2014 "),PR=n(oAe,"A",{href:!0});var Uet=s(PR);PZe=r(Uet,"QDQBertConfig"),Uet.forEach(t),BZe=r(oAe," (QDQBert model)"),oAe.forEach(t),IZe=i(L),rg=n(L,"LI",{});var rAe=s(rg);rne=n(rAe,"STRONG",{});var Jet=s(rne);NZe=r(Jet,"rag"),Jet.forEach(t),qZe=r(rAe," \u2014 "),BR=n(rAe,"A",{href:!0});var Yet=s(BR);jZe=r(Yet,"RagConfig"),Yet.forEach(t),DZe=r(rAe," (RAG model)"),rAe.forEach(t),GZe=i(L),tg=n(L,"LI",{});var tAe=s(tg);tne=n(tAe,"STRONG",{});var Ket=s(tne);OZe=r(Ket,"realm"),Ket.forEach(t),VZe=r(tAe," \u2014 "),IR=n(tAe,"A",{href:!0});var Zet=s(IR);XZe=r(Zet,"RealmConfig"),Zet.forEach(t),zZe=r(tAe," (REALM model)"),tAe.forEach(t),WZe=i(L),ag=n(L,"LI",{});var aAe=s(ag);ane=n(aAe,"STRONG",{});var eot=s(ane);QZe=r(eot,"reformer"),eot.forEach(t),HZe=r(aAe," \u2014 "),NR=n(aAe,"A",{href:!0});var oot=s(NR);UZe=r(oot,"ReformerConfig"),oot.forEach(t),JZe=r(aAe," (Reformer model)"),aAe.forEach(t),YZe=i(L),ng=n(L,"LI",{});var nAe=s(ng);nne=n(nAe,"STRONG",{});var rot=s(nne);KZe=r(rot,"regnet"),rot.forEach(t),ZZe=r(nAe," \u2014 "),qR=n(nAe,"A",{href:!0});var tot=s(qR);eeo=r(tot,"RegNetConfig"),tot.forEach(t),oeo=r(nAe," (RegNet model)"),nAe.forEach(t),reo=i(L),sg=n(L,"LI",{});var sAe=s(sg);sne=n(sAe,"STRONG",{});var aot=s(sne);teo=r(aot,"rembert"),aot.forEach(t),aeo=r(sAe," \u2014 "),jR=n(sAe,"A",{href:!0});var not=s(jR);neo=r(not,"RemBertConfig"),not.forEach(t),seo=r(sAe," (RemBERT model)"),sAe.forEach(t),leo=i(L),lg=n(L,"LI",{});var lAe=s(lg);lne=n(lAe,"STRONG",{});var sot=s(lne);ieo=r(sot,"resnet"),sot.forEach(t),deo=r(lAe," \u2014 "),DR=n(lAe,"A",{href:!0});var lot=s(DR);ceo=r(lot,"ResNetConfig"),lot.forEach(t),feo=r(lAe," (ResNet model)"),lAe.forEach(t),meo=i(L),ig=n(L,"LI",{});var iAe=s(ig);ine=n(iAe,"STRONG",{});var iot=s(ine);geo=r(iot,"retribert"),iot.forEach(t),heo=r(iAe," \u2014 "),GR=n(iAe,"A",{href:!0});var dot=s(GR);peo=r(dot,"RetriBertConfig"),dot.forEach(t),_eo=r(iAe," (RetriBERT model)"),iAe.forEach(t),ueo=i(L),dg=n(L,"LI",{});var dAe=s(dg);dne=n(dAe,"STRONG",{});var cot=s(dne);beo=r(cot,"roberta"),cot.forEach(t),veo=r(dAe," \u2014 "),OR=n(dAe,"A",{href:!0});var fot=s(OR);Feo=r(fot,"RobertaConfig"),fot.forEach(t),Teo=r(dAe," (RoBERTa model)"),dAe.forEach(t),Meo=i(L),cg=n(L,"LI",{});var cAe=s(cg);cne=n(cAe,"STRONG",{});var mot=s(cne);Eeo=r(mot,"roformer"),mot.forEach(t),Ceo=r(cAe," \u2014 "),VR=n(cAe,"A",{href:!0});var got=s(VR);weo=r(got,"RoFormerConfig"),got.forEach(t),Aeo=r(cAe," (RoFormer model)"),cAe.forEach(t),Leo=i(L),fg=n(L,"LI",{});var fAe=s(fg);fne=n(fAe,"STRONG",{});var hot=s(fne);yeo=r(hot,"segformer"),hot.forEach(t),xeo=r(fAe," \u2014 "),XR=n(fAe,"A",{href:!0});var pot=s(XR);$eo=r(pot,"SegformerConfig"),pot.forEach(t),keo=r(fAe," (SegFormer model)"),fAe.forEach(t),Seo=i(L),mg=n(L,"LI",{});var mAe=s(mg);mne=n(mAe,"STRONG",{});var _ot=s(mne);Reo=r(_ot,"sew"),_ot.forEach(t),Peo=r(mAe," \u2014 "),zR=n(mAe,"A",{href:!0});var uot=s(zR);Beo=r(uot,"SEWConfig"),uot.forEach(t),Ieo=r(mAe," (SEW model)"),mAe.forEach(t),Neo=i(L),gg=n(L,"LI",{});var gAe=s(gg);gne=n(gAe,"STRONG",{});var bot=s(gne);qeo=r(bot,"sew-d"),bot.forEach(t),jeo=r(gAe," \u2014 "),WR=n(gAe,"A",{href:!0});var vot=s(WR);Deo=r(vot,"SEWDConfig"),vot.forEach(t),Geo=r(gAe," (SEW-D model)"),gAe.forEach(t),Oeo=i(L),hg=n(L,"LI",{});var hAe=s(hg);hne=n(hAe,"STRONG",{});var Fot=s(hne);Veo=r(Fot,"speech-encoder-decoder"),Fot.forEach(t),Xeo=r(hAe," \u2014 "),QR=n(hAe,"A",{href:!0});var Tot=s(QR);zeo=r(Tot,"SpeechEncoderDecoderConfig"),Tot.forEach(t),Weo=r(hAe," (Speech Encoder decoder model)"),hAe.forEach(t),Qeo=i(L),pg=n(L,"LI",{});var pAe=s(pg);pne=n(pAe,"STRONG",{});var Mot=s(pne);Heo=r(Mot,"speech_to_text"),Mot.forEach(t),Ueo=r(pAe," \u2014 "),HR=n(pAe,"A",{href:!0});var Eot=s(HR);Jeo=r(Eot,"Speech2TextConfig"),Eot.forEach(t),Yeo=r(pAe," (Speech2Text model)"),pAe.forEach(t),Keo=i(L),_g=n(L,"LI",{});var _Ae=s(_g);_ne=n(_Ae,"STRONG",{});var Cot=s(_ne);Zeo=r(Cot,"speech_to_text_2"),Cot.forEach(t),eoo=r(_Ae," \u2014 "),UR=n(_Ae,"A",{href:!0});var wot=s(UR);ooo=r(wot,"Speech2Text2Config"),wot.forEach(t),roo=r(_Ae," (Speech2Text2 model)"),_Ae.forEach(t),too=i(L),ug=n(L,"LI",{});var uAe=s(ug);une=n(uAe,"STRONG",{});var Aot=s(une);aoo=r(Aot,"splinter"),Aot.forEach(t),noo=r(uAe," \u2014 "),JR=n(uAe,"A",{href:!0});var Lot=s(JR);soo=r(Lot,"SplinterConfig"),Lot.forEach(t),loo=r(uAe," (Splinter model)"),uAe.forEach(t),ioo=i(L),bg=n(L,"LI",{});var bAe=s(bg);bne=n(bAe,"STRONG",{});var yot=s(bne);doo=r(yot,"squeezebert"),yot.forEach(t),coo=r(bAe," \u2014 "),YR=n(bAe,"A",{href:!0});var xot=s(YR);foo=r(xot,"SqueezeBertConfig"),xot.forEach(t),moo=r(bAe," (SqueezeBERT model)"),bAe.forEach(t),goo=i(L),vg=n(L,"LI",{});var vAe=s(vg);vne=n(vAe,"STRONG",{});var $ot=s(vne);hoo=r($ot,"swin"),$ot.forEach(t),poo=r(vAe," \u2014 "),KR=n(vAe,"A",{href:!0});var kot=s(KR);_oo=r(kot,"SwinConfig"),kot.forEach(t),uoo=r(vAe," (Swin Transformer model)"),vAe.forEach(t),boo=i(L),Fg=n(L,"LI",{});var FAe=s(Fg);Fne=n(FAe,"STRONG",{});var Sot=s(Fne);voo=r(Sot,"t5"),Sot.forEach(t),Foo=r(FAe," \u2014 "),ZR=n(FAe,"A",{href:!0});var Rot=s(ZR);Too=r(Rot,"T5Config"),Rot.forEach(t),Moo=r(FAe," (T5 model)"),FAe.forEach(t),Eoo=i(L),Tg=n(L,"LI",{});var TAe=s(Tg);Tne=n(TAe,"STRONG",{});var Pot=s(Tne);Coo=r(Pot,"tapas"),Pot.forEach(t),woo=r(TAe," \u2014 "),eP=n(TAe,"A",{href:!0});var Bot=s(eP);Aoo=r(Bot,"TapasConfig"),Bot.forEach(t),Loo=r(TAe," (TAPAS model)"),TAe.forEach(t),yoo=i(L),Mg=n(L,"LI",{});var MAe=s(Mg);Mne=n(MAe,"STRONG",{});var Iot=s(Mne);xoo=r(Iot,"trajectory_transformer"),Iot.forEach(t),$oo=r(MAe," \u2014 "),oP=n(MAe,"A",{href:!0});var Not=s(oP);koo=r(Not,"TrajectoryTransformerConfig"),Not.forEach(t),Soo=r(MAe," (Trajectory Transformer model)"),MAe.forEach(t),Roo=i(L),Eg=n(L,"LI",{});var EAe=s(Eg);Ene=n(EAe,"STRONG",{});var qot=s(Ene);Poo=r(qot,"transfo-xl"),qot.forEach(t),Boo=r(EAe," \u2014 "),rP=n(EAe,"A",{href:!0});var jot=s(rP);Ioo=r(jot,"TransfoXLConfig"),jot.forEach(t),Noo=r(EAe," (Transformer-XL model)"),EAe.forEach(t),qoo=i(L),Cg=n(L,"LI",{});var CAe=s(Cg);Cne=n(CAe,"STRONG",{});var Dot=s(Cne);joo=r(Dot,"trocr"),Dot.forEach(t),Doo=r(CAe," \u2014 "),tP=n(CAe,"A",{href:!0});var Got=s(tP);Goo=r(Got,"TrOCRConfig"),Got.forEach(t),Ooo=r(CAe," (TrOCR model)"),CAe.forEach(t),Voo=i(L),wg=n(L,"LI",{});var wAe=s(wg);wne=n(wAe,"STRONG",{});var Oot=s(wne);Xoo=r(Oot,"unispeech"),Oot.forEach(t),zoo=r(wAe," \u2014 "),aP=n(wAe,"A",{href:!0});var Vot=s(aP);Woo=r(Vot,"UniSpeechConfig"),Vot.forEach(t),Qoo=r(wAe," (UniSpeech model)"),wAe.forEach(t),Hoo=i(L),Ag=n(L,"LI",{});var AAe=s(Ag);Ane=n(AAe,"STRONG",{});var Xot=s(Ane);Uoo=r(Xot,"unispeech-sat"),Xot.forEach(t),Joo=r(AAe," \u2014 "),nP=n(AAe,"A",{href:!0});var zot=s(nP);Yoo=r(zot,"UniSpeechSatConfig"),zot.forEach(t),Koo=r(AAe," (UniSpeechSat model)"),AAe.forEach(t),Zoo=i(L),Lg=n(L,"LI",{});var LAe=s(Lg);Lne=n(LAe,"STRONG",{});var Wot=s(Lne);ero=r(Wot,"van"),Wot.forEach(t),oro=r(LAe," \u2014 "),sP=n(LAe,"A",{href:!0});var Qot=s(sP);rro=r(Qot,"VanConfig"),Qot.forEach(t),tro=r(LAe," (VAN model)"),LAe.forEach(t),aro=i(L),yg=n(L,"LI",{});var yAe=s(yg);yne=n(yAe,"STRONG",{});var Hot=s(yne);nro=r(Hot,"vilt"),Hot.forEach(t),sro=r(yAe," \u2014 "),lP=n(yAe,"A",{href:!0});var Uot=s(lP);lro=r(Uot,"ViltConfig"),Uot.forEach(t),iro=r(yAe," (ViLT model)"),yAe.forEach(t),dro=i(L),xg=n(L,"LI",{});var xAe=s(xg);xne=n(xAe,"STRONG",{});var Jot=s(xne);cro=r(Jot,"vision-encoder-decoder"),Jot.forEach(t),fro=r(xAe," \u2014 "),iP=n(xAe,"A",{href:!0});var Yot=s(iP);mro=r(Yot,"VisionEncoderDecoderConfig"),Yot.forEach(t),gro=r(xAe," (Vision Encoder decoder model)"),xAe.forEach(t),hro=i(L),$g=n(L,"LI",{});var $Ae=s($g);$ne=n($Ae,"STRONG",{});var Kot=s($ne);pro=r(Kot,"vision-text-dual-encoder"),Kot.forEach(t),_ro=r($Ae," \u2014 "),dP=n($Ae,"A",{href:!0});var Zot=s(dP);uro=r(Zot,"VisionTextDualEncoderConfig"),Zot.forEach(t),bro=r($Ae," (VisionTextDualEncoder model)"),$Ae.forEach(t),vro=i(L),kg=n(L,"LI",{});var kAe=s(kg);kne=n(kAe,"STRONG",{});var ert=s(kne);Fro=r(ert,"visual_bert"),ert.forEach(t),Tro=r(kAe," \u2014 "),cP=n(kAe,"A",{href:!0});var ort=s(cP);Mro=r(ort,"VisualBertConfig"),ort.forEach(t),Ero=r(kAe," (VisualBERT model)"),kAe.forEach(t),Cro=i(L),Sg=n(L,"LI",{});var SAe=s(Sg);Sne=n(SAe,"STRONG",{});var rrt=s(Sne);wro=r(rrt,"vit"),rrt.forEach(t),Aro=r(SAe," \u2014 "),fP=n(SAe,"A",{href:!0});var trt=s(fP);Lro=r(trt,"ViTConfig"),trt.forEach(t),yro=r(SAe," (ViT model)"),SAe.forEach(t),xro=i(L),Rg=n(L,"LI",{});var RAe=s(Rg);Rne=n(RAe,"STRONG",{});var art=s(Rne);$ro=r(art,"vit_mae"),art.forEach(t),kro=r(RAe," \u2014 "),mP=n(RAe,"A",{href:!0});var nrt=s(mP);Sro=r(nrt,"ViTMAEConfig"),nrt.forEach(t),Rro=r(RAe," (ViTMAE model)"),RAe.forEach(t),Pro=i(L),Pg=n(L,"LI",{});var PAe=s(Pg);Pne=n(PAe,"STRONG",{});var srt=s(Pne);Bro=r(srt,"wav2vec2"),srt.forEach(t),Iro=r(PAe," \u2014 "),gP=n(PAe,"A",{href:!0});var lrt=s(gP);Nro=r(lrt,"Wav2Vec2Config"),lrt.forEach(t),qro=r(PAe," (Wav2Vec2 model)"),PAe.forEach(t),jro=i(L),Bg=n(L,"LI",{});var BAe=s(Bg);Bne=n(BAe,"STRONG",{});var irt=s(Bne);Dro=r(irt,"wav2vec2-conformer"),irt.forEach(t),Gro=r(BAe," \u2014 "),hP=n(BAe,"A",{href:!0});var drt=s(hP);Oro=r(drt,"Wav2Vec2ConformerConfig"),drt.forEach(t),Vro=r(BAe," (Wav2Vec2-Conformer model)"),BAe.forEach(t),Xro=i(L),Ig=n(L,"LI",{});var IAe=s(Ig);Ine=n(IAe,"STRONG",{});var crt=s(Ine);zro=r(crt,"wavlm"),crt.forEach(t),Wro=r(IAe," \u2014 "),pP=n(IAe,"A",{href:!0});var frt=s(pP);Qro=r(frt,"WavLMConfig"),frt.forEach(t),Hro=r(IAe," (WavLM model)"),IAe.forEach(t),Uro=i(L),Ng=n(L,"LI",{});var NAe=s(Ng);Nne=n(NAe,"STRONG",{});var mrt=s(Nne);Jro=r(mrt,"xglm"),mrt.forEach(t),Yro=r(NAe," \u2014 "),_P=n(NAe,"A",{href:!0});var grt=s(_P);Kro=r(grt,"XGLMConfig"),grt.forEach(t),Zro=r(NAe," (XGLM model)"),NAe.forEach(t),eto=i(L),qg=n(L,"LI",{});var qAe=s(qg);qne=n(qAe,"STRONG",{});var hrt=s(qne);oto=r(hrt,"xlm"),hrt.forEach(t),rto=r(qAe," \u2014 "),uP=n(qAe,"A",{href:!0});var prt=s(uP);tto=r(prt,"XLMConfig"),prt.forEach(t),ato=r(qAe," (XLM model)"),qAe.forEach(t),nto=i(L),jg=n(L,"LI",{});var jAe=s(jg);jne=n(jAe,"STRONG",{});var _rt=s(jne);sto=r(_rt,"xlm-prophetnet"),_rt.forEach(t),lto=r(jAe," \u2014 "),bP=n(jAe,"A",{href:!0});var urt=s(bP);ito=r(urt,"XLMProphetNetConfig"),urt.forEach(t),dto=r(jAe," (XLM-ProphetNet model)"),jAe.forEach(t),cto=i(L),Dg=n(L,"LI",{});var DAe=s(Dg);Dne=n(DAe,"STRONG",{});var brt=s(Dne);fto=r(brt,"xlm-roberta"),brt.forEach(t),mto=r(DAe," \u2014 "),vP=n(DAe,"A",{href:!0});var vrt=s(vP);gto=r(vrt,"XLMRobertaConfig"),vrt.forEach(t),hto=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),pto=i(L),Gg=n(L,"LI",{});var GAe=s(Gg);Gne=n(GAe,"STRONG",{});var Frt=s(Gne);_to=r(Frt,"xlm-roberta-xl"),Frt.forEach(t),uto=r(GAe," \u2014 "),FP=n(GAe,"A",{href:!0});var Trt=s(FP);bto=r(Trt,"XLMRobertaXLConfig"),Trt.forEach(t),vto=r(GAe," (XLM-RoBERTa-XL model)"),GAe.forEach(t),Fto=i(L),Og=n(L,"LI",{});var OAe=s(Og);One=n(OAe,"STRONG",{});var Mrt=s(One);Tto=r(Mrt,"xlnet"),Mrt.forEach(t),Mto=r(OAe," \u2014 "),TP=n(OAe,"A",{href:!0});var Ert=s(TP);Eto=r(Ert,"XLNetConfig"),Ert.forEach(t),Cto=r(OAe," (XLNet model)"),OAe.forEach(t),wto=i(L),Vg=n(L,"LI",{});var VAe=s(Vg);Vne=n(VAe,"STRONG",{});var Crt=s(Vne);Ato=r(Crt,"yolos"),Crt.forEach(t),Lto=r(VAe," \u2014 "),MP=n(VAe,"A",{href:!0});var wrt=s(MP);yto=r(wrt,"YolosConfig"),wrt.forEach(t),xto=r(VAe," (YOLOS model)"),VAe.forEach(t),$to=i(L),Xg=n(L,"LI",{});var XAe=s(Xg);Xne=n(XAe,"STRONG",{});var Art=s(Xne);kto=r(Art,"yoso"),Art.forEach(t),Sto=r(XAe," \u2014 "),EP=n(XAe,"A",{href:!0});var Lrt=s(EP);Rto=r(Lrt,"YosoConfig"),Lrt.forEach(t),Pto=r(XAe," (YOSO model)"),XAe.forEach(t),L.forEach(t),Bto=i(at),T(zg.$$.fragment,at),at.forEach(t),Ito=i(tt),Wg=n(tt,"DIV",{class:!0});var uXe=s(Wg);T(OA.$$.fragment,uXe),Nto=i(uXe),zne=n(uXe,"P",{});var yrt=s(zne);qto=r(yrt,"Register a new configuration for this class."),yrt.forEach(t),uXe.forEach(t),tt.forEach(t),bOe=i(f),Pi=n(f,"H2",{class:!0});var bXe=s(Pi);Qg=n(bXe,"A",{id:!0,class:!0,href:!0});var xrt=s(Qg);Wne=n(xrt,"SPAN",{});var $rt=s(Wne);T(VA.$$.fragment,$rt),$rt.forEach(t),xrt.forEach(t),jto=i(bXe),Qne=n(bXe,"SPAN",{});var krt=s(Qne);Dto=r(krt,"AutoTokenizer"),krt.forEach(t),bXe.forEach(t),vOe=i(f),Ao=n(f,"DIV",{class:!0});var Us=s(Ao);T(XA.$$.fragment,Us),Gto=i(Us),zA=n(Us,"P",{});var vXe=s(zA);Oto=r(vXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CP=n(vXe,"A",{href:!0});var Srt=s(CP);Vto=r(Srt,"AutoTokenizer.from_pretrained()"),Srt.forEach(t),Xto=r(vXe," class method."),vXe.forEach(t),zto=i(Us),WA=n(Us,"P",{});var FXe=s(WA);Wto=r(FXe,"This class cannot be instantiated directly using "),Hne=n(FXe,"CODE",{});var Rrt=s(Hne);Qto=r(Rrt,"__init__()"),Rrt.forEach(t),Hto=r(FXe," (throws an error)."),FXe.forEach(t),Uto=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(QA.$$.fragment,Js),Jto=i(Js),Une=n(Js,"P",{});var Prt=s(Une);Yto=r(Prt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Prt.forEach(t),Kto=i(Js),Sa=n(Js,"P",{});var I3=s(Sa);Zto=r(I3,"The tokenizer class to instantiate is selected based on the "),Jne=n(I3,"CODE",{});var Brt=s(Jne);eao=r(Brt,"model_type"),Brt.forEach(t),oao=r(I3,` property of the config object (either
passed as an argument or loaded from `),Yne=n(I3,"CODE",{});var Irt=s(Yne);rao=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),tao=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(I3,"CODE",{});var Nrt=s(Kne);aao=r(Nrt,"pretrained_model_name_or_path"),Nrt.forEach(t),nao=r(I3,":"),I3.forEach(t),sao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var Z$=s(qn);Zne=n(Z$,"STRONG",{});var qrt=s(Zne);lao=r(qrt,"albert"),qrt.forEach(t),iao=r(Z$," \u2014 "),wP=n(Z$,"A",{href:!0});var jrt=s(wP);dao=r(jrt,"AlbertTokenizer"),jrt.forEach(t),cao=r(Z$," or "),AP=n(Z$,"A",{href:!0});var Drt=s(AP);fao=r(Drt,"AlbertTokenizerFast"),Drt.forEach(t),mao=r(Z$," (ALBERT model)"),Z$.forEach(t),gao=i(S),jn=n(S,"LI",{});var ek=s(jn);ese=n(ek,"STRONG",{});var Grt=s(ese);hao=r(Grt,"bart"),Grt.forEach(t),pao=r(ek," \u2014 "),LP=n(ek,"A",{href:!0});var Ort=s(LP);_ao=r(Ort,"BartTokenizer"),Ort.forEach(t),uao=r(ek," or "),yP=n(ek,"A",{href:!0});var Vrt=s(yP);bao=r(Vrt,"BartTokenizerFast"),Vrt.forEach(t),vao=r(ek," (BART model)"),ek.forEach(t),Fao=i(S),Dn=n(S,"LI",{});var ok=s(Dn);ose=n(ok,"STRONG",{});var Xrt=s(ose);Tao=r(Xrt,"barthez"),Xrt.forEach(t),Mao=r(ok," \u2014 "),xP=n(ok,"A",{href:!0});var zrt=s(xP);Eao=r(zrt,"BarthezTokenizer"),zrt.forEach(t),Cao=r(ok," or "),$P=n(ok,"A",{href:!0});var Wrt=s($P);wao=r(Wrt,"BarthezTokenizerFast"),Wrt.forEach(t),Aao=r(ok," (BARThez model)"),ok.forEach(t),Lao=i(S),Hg=n(S,"LI",{});var zAe=s(Hg);rse=n(zAe,"STRONG",{});var Qrt=s(rse);yao=r(Qrt,"bartpho"),Qrt.forEach(t),xao=r(zAe," \u2014 "),kP=n(zAe,"A",{href:!0});var Hrt=s(kP);$ao=r(Hrt,"BartphoTokenizer"),Hrt.forEach(t),kao=r(zAe," (BARTpho model)"),zAe.forEach(t),Sao=i(S),Gn=n(S,"LI",{});var rk=s(Gn);tse=n(rk,"STRONG",{});var Urt=s(tse);Rao=r(Urt,"bert"),Urt.forEach(t),Pao=r(rk," \u2014 "),SP=n(rk,"A",{href:!0});var Jrt=s(SP);Bao=r(Jrt,"BertTokenizer"),Jrt.forEach(t),Iao=r(rk," or "),RP=n(rk,"A",{href:!0});var Yrt=s(RP);Nao=r(Yrt,"BertTokenizerFast"),Yrt.forEach(t),qao=r(rk," (BERT model)"),rk.forEach(t),jao=i(S),Ug=n(S,"LI",{});var WAe=s(Ug);ase=n(WAe,"STRONG",{});var Krt=s(ase);Dao=r(Krt,"bert-generation"),Krt.forEach(t),Gao=r(WAe," \u2014 "),PP=n(WAe,"A",{href:!0});var Zrt=s(PP);Oao=r(Zrt,"BertGenerationTokenizer"),Zrt.forEach(t),Vao=r(WAe," (Bert Generation model)"),WAe.forEach(t),Xao=i(S),Jg=n(S,"LI",{});var QAe=s(Jg);nse=n(QAe,"STRONG",{});var ett=s(nse);zao=r(ett,"bert-japanese"),ett.forEach(t),Wao=r(QAe," \u2014 "),BP=n(QAe,"A",{href:!0});var ott=s(BP);Qao=r(ott,"BertJapaneseTokenizer"),ott.forEach(t),Hao=r(QAe," (BertJapanese model)"),QAe.forEach(t),Uao=i(S),Yg=n(S,"LI",{});var HAe=s(Yg);sse=n(HAe,"STRONG",{});var rtt=s(sse);Jao=r(rtt,"bertweet"),rtt.forEach(t),Yao=r(HAe," \u2014 "),IP=n(HAe,"A",{href:!0});var ttt=s(IP);Kao=r(ttt,"BertweetTokenizer"),ttt.forEach(t),Zao=r(HAe," (BERTweet model)"),HAe.forEach(t),eno=i(S),On=n(S,"LI",{});var tk=s(On);lse=n(tk,"STRONG",{});var att=s(lse);ono=r(att,"big_bird"),att.forEach(t),rno=r(tk," \u2014 "),NP=n(tk,"A",{href:!0});var ntt=s(NP);tno=r(ntt,"BigBirdTokenizer"),ntt.forEach(t),ano=r(tk," or "),qP=n(tk,"A",{href:!0});var stt=s(qP);nno=r(stt,"BigBirdTokenizerFast"),stt.forEach(t),sno=r(tk," (BigBird model)"),tk.forEach(t),lno=i(S),Vn=n(S,"LI",{});var ak=s(Vn);ise=n(ak,"STRONG",{});var ltt=s(ise);ino=r(ltt,"bigbird_pegasus"),ltt.forEach(t),dno=r(ak," \u2014 "),jP=n(ak,"A",{href:!0});var itt=s(jP);cno=r(itt,"PegasusTokenizer"),itt.forEach(t),fno=r(ak," or "),DP=n(ak,"A",{href:!0});var dtt=s(DP);mno=r(dtt,"PegasusTokenizerFast"),dtt.forEach(t),gno=r(ak," (BigBird-Pegasus model)"),ak.forEach(t),hno=i(S),Xn=n(S,"LI",{});var nk=s(Xn);dse=n(nk,"STRONG",{});var ctt=s(dse);pno=r(ctt,"blenderbot"),ctt.forEach(t),_no=r(nk," \u2014 "),GP=n(nk,"A",{href:!0});var ftt=s(GP);uno=r(ftt,"BlenderbotTokenizer"),ftt.forEach(t),bno=r(nk," or "),OP=n(nk,"A",{href:!0});var mtt=s(OP);vno=r(mtt,"BlenderbotTokenizerFast"),mtt.forEach(t),Fno=r(nk," (Blenderbot model)"),nk.forEach(t),Tno=i(S),Kg=n(S,"LI",{});var UAe=s(Kg);cse=n(UAe,"STRONG",{});var gtt=s(cse);Mno=r(gtt,"blenderbot-small"),gtt.forEach(t),Eno=r(UAe," \u2014 "),VP=n(UAe,"A",{href:!0});var htt=s(VP);Cno=r(htt,"BlenderbotSmallTokenizer"),htt.forEach(t),wno=r(UAe," (BlenderbotSmall model)"),UAe.forEach(t),Ano=i(S),Zg=n(S,"LI",{});var JAe=s(Zg);fse=n(JAe,"STRONG",{});var ptt=s(fse);Lno=r(ptt,"bloom"),ptt.forEach(t),yno=r(JAe," \u2014 "),XP=n(JAe,"A",{href:!0});var _tt=s(XP);xno=r(_tt,"BloomTokenizerFast"),_tt.forEach(t),$no=r(JAe," (BLOOM model)"),JAe.forEach(t),kno=i(S),eh=n(S,"LI",{});var YAe=s(eh);mse=n(YAe,"STRONG",{});var utt=s(mse);Sno=r(utt,"byt5"),utt.forEach(t),Rno=r(YAe," \u2014 "),zP=n(YAe,"A",{href:!0});var btt=s(zP);Pno=r(btt,"ByT5Tokenizer"),btt.forEach(t),Bno=r(YAe," (ByT5 model)"),YAe.forEach(t),Ino=i(S),zn=n(S,"LI",{});var sk=s(zn);gse=n(sk,"STRONG",{});var vtt=s(gse);Nno=r(vtt,"camembert"),vtt.forEach(t),qno=r(sk," \u2014 "),WP=n(sk,"A",{href:!0});var Ftt=s(WP);jno=r(Ftt,"CamembertTokenizer"),Ftt.forEach(t),Dno=r(sk," or "),QP=n(sk,"A",{href:!0});var Ttt=s(QP);Gno=r(Ttt,"CamembertTokenizerFast"),Ttt.forEach(t),Ono=r(sk," (CamemBERT model)"),sk.forEach(t),Vno=i(S),oh=n(S,"LI",{});var KAe=s(oh);hse=n(KAe,"STRONG",{});var Mtt=s(hse);Xno=r(Mtt,"canine"),Mtt.forEach(t),zno=r(KAe," \u2014 "),HP=n(KAe,"A",{href:!0});var Ett=s(HP);Wno=r(Ett,"CanineTokenizer"),Ett.forEach(t),Qno=r(KAe," (CANINE model)"),KAe.forEach(t),Hno=i(S),Wn=n(S,"LI",{});var lk=s(Wn);pse=n(lk,"STRONG",{});var Ctt=s(pse);Uno=r(Ctt,"clip"),Ctt.forEach(t),Jno=r(lk," \u2014 "),UP=n(lk,"A",{href:!0});var wtt=s(UP);Yno=r(wtt,"CLIPTokenizer"),wtt.forEach(t),Kno=r(lk," or "),JP=n(lk,"A",{href:!0});var Att=s(JP);Zno=r(Att,"CLIPTokenizerFast"),Att.forEach(t),eso=r(lk," (CLIP model)"),lk.forEach(t),oso=i(S),Qn=n(S,"LI",{});var ik=s(Qn);_se=n(ik,"STRONG",{});var Ltt=s(_se);rso=r(Ltt,"codegen"),Ltt.forEach(t),tso=r(ik," \u2014 "),YP=n(ik,"A",{href:!0});var ytt=s(YP);aso=r(ytt,"CodeGenTokenizer"),ytt.forEach(t),nso=r(ik," or "),KP=n(ik,"A",{href:!0});var xtt=s(KP);sso=r(xtt,"CodeGenTokenizerFast"),xtt.forEach(t),lso=r(ik," (CodeGen model)"),ik.forEach(t),iso=i(S),Hn=n(S,"LI",{});var dk=s(Hn);use=n(dk,"STRONG",{});var $tt=s(use);dso=r($tt,"convbert"),$tt.forEach(t),cso=r(dk," \u2014 "),ZP=n(dk,"A",{href:!0});var ktt=s(ZP);fso=r(ktt,"ConvBertTokenizer"),ktt.forEach(t),mso=r(dk," or "),eB=n(dk,"A",{href:!0});var Stt=s(eB);gso=r(Stt,"ConvBertTokenizerFast"),Stt.forEach(t),hso=r(dk," (ConvBERT model)"),dk.forEach(t),pso=i(S),Un=n(S,"LI",{});var ck=s(Un);bse=n(ck,"STRONG",{});var Rtt=s(bse);_so=r(Rtt,"cpm"),Rtt.forEach(t),uso=r(ck," \u2014 "),oB=n(ck,"A",{href:!0});var Ptt=s(oB);bso=r(Ptt,"CpmTokenizer"),Ptt.forEach(t),vso=r(ck," or "),rB=n(ck,"A",{href:!0});var Btt=s(rB);Fso=r(Btt,"CpmTokenizerFast"),Btt.forEach(t),Tso=r(ck," (CPM model)"),ck.forEach(t),Mso=i(S),rh=n(S,"LI",{});var ZAe=s(rh);vse=n(ZAe,"STRONG",{});var Itt=s(vse);Eso=r(Itt,"ctrl"),Itt.forEach(t),Cso=r(ZAe," \u2014 "),tB=n(ZAe,"A",{href:!0});var Ntt=s(tB);wso=r(Ntt,"CTRLTokenizer"),Ntt.forEach(t),Aso=r(ZAe," (CTRL model)"),ZAe.forEach(t),Lso=i(S),Jn=n(S,"LI",{});var fk=s(Jn);Fse=n(fk,"STRONG",{});var qtt=s(Fse);yso=r(qtt,"data2vec-text"),qtt.forEach(t),xso=r(fk," \u2014 "),aB=n(fk,"A",{href:!0});var jtt=s(aB);$so=r(jtt,"RobertaTokenizer"),jtt.forEach(t),kso=r(fk," or "),nB=n(fk,"A",{href:!0});var Dtt=s(nB);Sso=r(Dtt,"RobertaTokenizerFast"),Dtt.forEach(t),Rso=r(fk," (Data2VecText model)"),fk.forEach(t),Pso=i(S),Yn=n(S,"LI",{});var mk=s(Yn);Tse=n(mk,"STRONG",{});var Gtt=s(Tse);Bso=r(Gtt,"deberta"),Gtt.forEach(t),Iso=r(mk," \u2014 "),sB=n(mk,"A",{href:!0});var Ott=s(sB);Nso=r(Ott,"DebertaTokenizer"),Ott.forEach(t),qso=r(mk," or "),lB=n(mk,"A",{href:!0});var Vtt=s(lB);jso=r(Vtt,"DebertaTokenizerFast"),Vtt.forEach(t),Dso=r(mk," (DeBERTa model)"),mk.forEach(t),Gso=i(S),Kn=n(S,"LI",{});var gk=s(Kn);Mse=n(gk,"STRONG",{});var Xtt=s(Mse);Oso=r(Xtt,"deberta-v2"),Xtt.forEach(t),Vso=r(gk," \u2014 "),iB=n(gk,"A",{href:!0});var ztt=s(iB);Xso=r(ztt,"DebertaV2Tokenizer"),ztt.forEach(t),zso=r(gk," or "),dB=n(gk,"A",{href:!0});var Wtt=s(dB);Wso=r(Wtt,"DebertaV2TokenizerFast"),Wtt.forEach(t),Qso=r(gk," (DeBERTa-v2 model)"),gk.forEach(t),Hso=i(S),Zn=n(S,"LI",{});var hk=s(Zn);Ese=n(hk,"STRONG",{});var Qtt=s(Ese);Uso=r(Qtt,"distilbert"),Qtt.forEach(t),Jso=r(hk," \u2014 "),cB=n(hk,"A",{href:!0});var Htt=s(cB);Yso=r(Htt,"DistilBertTokenizer"),Htt.forEach(t),Kso=r(hk," or "),fB=n(hk,"A",{href:!0});var Utt=s(fB);Zso=r(Utt,"DistilBertTokenizerFast"),Utt.forEach(t),elo=r(hk," (DistilBERT model)"),hk.forEach(t),olo=i(S),es=n(S,"LI",{});var pk=s(es);Cse=n(pk,"STRONG",{});var Jtt=s(Cse);rlo=r(Jtt,"dpr"),Jtt.forEach(t),tlo=r(pk," \u2014 "),mB=n(pk,"A",{href:!0});var Ytt=s(mB);alo=r(Ytt,"DPRQuestionEncoderTokenizer"),Ytt.forEach(t),nlo=r(pk," or "),gB=n(pk,"A",{href:!0});var Ktt=s(gB);slo=r(Ktt,"DPRQuestionEncoderTokenizerFast"),Ktt.forEach(t),llo=r(pk," (DPR model)"),pk.forEach(t),ilo=i(S),os=n(S,"LI",{});var _k=s(os);wse=n(_k,"STRONG",{});var Ztt=s(wse);dlo=r(Ztt,"electra"),Ztt.forEach(t),clo=r(_k," \u2014 "),hB=n(_k,"A",{href:!0});var eat=s(hB);flo=r(eat,"ElectraTokenizer"),eat.forEach(t),mlo=r(_k," or "),pB=n(_k,"A",{href:!0});var oat=s(pB);glo=r(oat,"ElectraTokenizerFast"),oat.forEach(t),hlo=r(_k," (ELECTRA model)"),_k.forEach(t),plo=i(S),th=n(S,"LI",{});var eLe=s(th);Ase=n(eLe,"STRONG",{});var rat=s(Ase);_lo=r(rat,"flaubert"),rat.forEach(t),ulo=r(eLe," \u2014 "),_B=n(eLe,"A",{href:!0});var tat=s(_B);blo=r(tat,"FlaubertTokenizer"),tat.forEach(t),vlo=r(eLe," (FlauBERT model)"),eLe.forEach(t),Flo=i(S),rs=n(S,"LI",{});var uk=s(rs);Lse=n(uk,"STRONG",{});var aat=s(Lse);Tlo=r(aat,"fnet"),aat.forEach(t),Mlo=r(uk," \u2014 "),uB=n(uk,"A",{href:!0});var nat=s(uB);Elo=r(nat,"FNetTokenizer"),nat.forEach(t),Clo=r(uk," or "),bB=n(uk,"A",{href:!0});var sat=s(bB);wlo=r(sat,"FNetTokenizerFast"),sat.forEach(t),Alo=r(uk," (FNet model)"),uk.forEach(t),Llo=i(S),ah=n(S,"LI",{});var oLe=s(ah);yse=n(oLe,"STRONG",{});var lat=s(yse);ylo=r(lat,"fsmt"),lat.forEach(t),xlo=r(oLe," \u2014 "),vB=n(oLe,"A",{href:!0});var iat=s(vB);$lo=r(iat,"FSMTTokenizer"),iat.forEach(t),klo=r(oLe," (FairSeq Machine-Translation model)"),oLe.forEach(t),Slo=i(S),ts=n(S,"LI",{});var bk=s(ts);xse=n(bk,"STRONG",{});var dat=s(xse);Rlo=r(dat,"funnel"),dat.forEach(t),Plo=r(bk," \u2014 "),FB=n(bk,"A",{href:!0});var cat=s(FB);Blo=r(cat,"FunnelTokenizer"),cat.forEach(t),Ilo=r(bk," or "),TB=n(bk,"A",{href:!0});var fat=s(TB);Nlo=r(fat,"FunnelTokenizerFast"),fat.forEach(t),qlo=r(bk," (Funnel Transformer model)"),bk.forEach(t),jlo=i(S),as=n(S,"LI",{});var vk=s(as);$se=n(vk,"STRONG",{});var mat=s($se);Dlo=r(mat,"gpt2"),mat.forEach(t),Glo=r(vk," \u2014 "),MB=n(vk,"A",{href:!0});var gat=s(MB);Olo=r(gat,"GPT2Tokenizer"),gat.forEach(t),Vlo=r(vk," or "),EB=n(vk,"A",{href:!0});var hat=s(EB);Xlo=r(hat,"GPT2TokenizerFast"),hat.forEach(t),zlo=r(vk," (OpenAI GPT-2 model)"),vk.forEach(t),Wlo=i(S),ns=n(S,"LI",{});var Fk=s(ns);kse=n(Fk,"STRONG",{});var pat=s(kse);Qlo=r(pat,"gpt_neo"),pat.forEach(t),Hlo=r(Fk," \u2014 "),CB=n(Fk,"A",{href:!0});var _at=s(CB);Ulo=r(_at,"GPT2Tokenizer"),_at.forEach(t),Jlo=r(Fk," or "),wB=n(Fk,"A",{href:!0});var uat=s(wB);Ylo=r(uat,"GPT2TokenizerFast"),uat.forEach(t),Klo=r(Fk," (GPT Neo model)"),Fk.forEach(t),Zlo=i(S),nh=n(S,"LI",{});var rLe=s(nh);Sse=n(rLe,"STRONG",{});var bat=s(Sse);eio=r(bat,"gpt_neox"),bat.forEach(t),oio=r(rLe," \u2014 "),AB=n(rLe,"A",{href:!0});var vat=s(AB);rio=r(vat,"GPTNeoXTokenizerFast"),vat.forEach(t),tio=r(rLe," (GPT NeoX model)"),rLe.forEach(t),aio=i(S),ss=n(S,"LI",{});var Tk=s(ss);Rse=n(Tk,"STRONG",{});var Fat=s(Rse);nio=r(Fat,"gptj"),Fat.forEach(t),sio=r(Tk," \u2014 "),LB=n(Tk,"A",{href:!0});var Tat=s(LB);lio=r(Tat,"GPT2Tokenizer"),Tat.forEach(t),iio=r(Tk," or "),yB=n(Tk,"A",{href:!0});var Mat=s(yB);dio=r(Mat,"GPT2TokenizerFast"),Mat.forEach(t),cio=r(Tk," (GPT-J model)"),Tk.forEach(t),fio=i(S),ls=n(S,"LI",{});var Mk=s(ls);Pse=n(Mk,"STRONG",{});var Eat=s(Pse);mio=r(Eat,"herbert"),Eat.forEach(t),gio=r(Mk," \u2014 "),xB=n(Mk,"A",{href:!0});var Cat=s(xB);hio=r(Cat,"HerbertTokenizer"),Cat.forEach(t),pio=r(Mk," or "),$B=n(Mk,"A",{href:!0});var wat=s($B);_io=r(wat,"HerbertTokenizerFast"),wat.forEach(t),uio=r(Mk," (HerBERT model)"),Mk.forEach(t),bio=i(S),sh=n(S,"LI",{});var tLe=s(sh);Bse=n(tLe,"STRONG",{});var Aat=s(Bse);vio=r(Aat,"hubert"),Aat.forEach(t),Fio=r(tLe," \u2014 "),kB=n(tLe,"A",{href:!0});var Lat=s(kB);Tio=r(Lat,"Wav2Vec2CTCTokenizer"),Lat.forEach(t),Mio=r(tLe," (Hubert model)"),tLe.forEach(t),Eio=i(S),is=n(S,"LI",{});var Ek=s(is);Ise=n(Ek,"STRONG",{});var yat=s(Ise);Cio=r(yat,"ibert"),yat.forEach(t),wio=r(Ek," \u2014 "),SB=n(Ek,"A",{href:!0});var xat=s(SB);Aio=r(xat,"RobertaTokenizer"),xat.forEach(t),Lio=r(Ek," or "),RB=n(Ek,"A",{href:!0});var $at=s(RB);yio=r($at,"RobertaTokenizerFast"),$at.forEach(t),xio=r(Ek," (I-BERT model)"),Ek.forEach(t),$io=i(S),ds=n(S,"LI",{});var Ck=s(ds);Nse=n(Ck,"STRONG",{});var kat=s(Nse);kio=r(kat,"layoutlm"),kat.forEach(t),Sio=r(Ck," \u2014 "),PB=n(Ck,"A",{href:!0});var Sat=s(PB);Rio=r(Sat,"LayoutLMTokenizer"),Sat.forEach(t),Pio=r(Ck," or "),BB=n(Ck,"A",{href:!0});var Rat=s(BB);Bio=r(Rat,"LayoutLMTokenizerFast"),Rat.forEach(t),Iio=r(Ck," (LayoutLM model)"),Ck.forEach(t),Nio=i(S),cs=n(S,"LI",{});var wk=s(cs);qse=n(wk,"STRONG",{});var Pat=s(qse);qio=r(Pat,"layoutlmv2"),Pat.forEach(t),jio=r(wk," \u2014 "),IB=n(wk,"A",{href:!0});var Bat=s(IB);Dio=r(Bat,"LayoutLMv2Tokenizer"),Bat.forEach(t),Gio=r(wk," or "),NB=n(wk,"A",{href:!0});var Iat=s(NB);Oio=r(Iat,"LayoutLMv2TokenizerFast"),Iat.forEach(t),Vio=r(wk," (LayoutLMv2 model)"),wk.forEach(t),Xio=i(S),fs=n(S,"LI",{});var Ak=s(fs);jse=n(Ak,"STRONG",{});var Nat=s(jse);zio=r(Nat,"layoutlmv3"),Nat.forEach(t),Wio=r(Ak," \u2014 "),qB=n(Ak,"A",{href:!0});var qat=s(qB);Qio=r(qat,"LayoutLMv3Tokenizer"),qat.forEach(t),Hio=r(Ak," or "),jB=n(Ak,"A",{href:!0});var jat=s(jB);Uio=r(jat,"LayoutLMv3TokenizerFast"),jat.forEach(t),Jio=r(Ak," (LayoutLMv3 model)"),Ak.forEach(t),Yio=i(S),ms=n(S,"LI",{});var Lk=s(ms);Dse=n(Lk,"STRONG",{});var Dat=s(Dse);Kio=r(Dat,"layoutxlm"),Dat.forEach(t),Zio=r(Lk," \u2014 "),DB=n(Lk,"A",{href:!0});var Gat=s(DB);edo=r(Gat,"LayoutXLMTokenizer"),Gat.forEach(t),odo=r(Lk," or "),GB=n(Lk,"A",{href:!0});var Oat=s(GB);rdo=r(Oat,"LayoutXLMTokenizerFast"),Oat.forEach(t),tdo=r(Lk," (LayoutXLM model)"),Lk.forEach(t),ado=i(S),gs=n(S,"LI",{});var yk=s(gs);Gse=n(yk,"STRONG",{});var Vat=s(Gse);ndo=r(Vat,"led"),Vat.forEach(t),sdo=r(yk," \u2014 "),OB=n(yk,"A",{href:!0});var Xat=s(OB);ldo=r(Xat,"LEDTokenizer"),Xat.forEach(t),ido=r(yk," or "),VB=n(yk,"A",{href:!0});var zat=s(VB);ddo=r(zat,"LEDTokenizerFast"),zat.forEach(t),cdo=r(yk," (LED model)"),yk.forEach(t),fdo=i(S),hs=n(S,"LI",{});var xk=s(hs);Ose=n(xk,"STRONG",{});var Wat=s(Ose);mdo=r(Wat,"longformer"),Wat.forEach(t),gdo=r(xk," \u2014 "),XB=n(xk,"A",{href:!0});var Qat=s(XB);hdo=r(Qat,"LongformerTokenizer"),Qat.forEach(t),pdo=r(xk," or "),zB=n(xk,"A",{href:!0});var Hat=s(zB);_do=r(Hat,"LongformerTokenizerFast"),Hat.forEach(t),udo=r(xk," (Longformer model)"),xk.forEach(t),bdo=i(S),ps=n(S,"LI",{});var $k=s(ps);Vse=n($k,"STRONG",{});var Uat=s(Vse);vdo=r(Uat,"longt5"),Uat.forEach(t),Fdo=r($k," \u2014 "),WB=n($k,"A",{href:!0});var Jat=s(WB);Tdo=r(Jat,"T5Tokenizer"),Jat.forEach(t),Mdo=r($k," or "),QB=n($k,"A",{href:!0});var Yat=s(QB);Edo=r(Yat,"T5TokenizerFast"),Yat.forEach(t),Cdo=r($k," (LongT5 model)"),$k.forEach(t),wdo=i(S),lh=n(S,"LI",{});var aLe=s(lh);Xse=n(aLe,"STRONG",{});var Kat=s(Xse);Ado=r(Kat,"luke"),Kat.forEach(t),Ldo=r(aLe," \u2014 "),HB=n(aLe,"A",{href:!0});var Zat=s(HB);ydo=r(Zat,"LukeTokenizer"),Zat.forEach(t),xdo=r(aLe," (LUKE model)"),aLe.forEach(t),$do=i(S),_s=n(S,"LI",{});var kk=s(_s);zse=n(kk,"STRONG",{});var ent=s(zse);kdo=r(ent,"lxmert"),ent.forEach(t),Sdo=r(kk," \u2014 "),UB=n(kk,"A",{href:!0});var ont=s(UB);Rdo=r(ont,"LxmertTokenizer"),ont.forEach(t),Pdo=r(kk," or "),JB=n(kk,"A",{href:!0});var rnt=s(JB);Bdo=r(rnt,"LxmertTokenizerFast"),rnt.forEach(t),Ido=r(kk," (LXMERT model)"),kk.forEach(t),Ndo=i(S),ih=n(S,"LI",{});var nLe=s(ih);Wse=n(nLe,"STRONG",{});var tnt=s(Wse);qdo=r(tnt,"m2m_100"),tnt.forEach(t),jdo=r(nLe," \u2014 "),YB=n(nLe,"A",{href:!0});var ant=s(YB);Ddo=r(ant,"M2M100Tokenizer"),ant.forEach(t),Gdo=r(nLe," (M2M100 model)"),nLe.forEach(t),Odo=i(S),dh=n(S,"LI",{});var sLe=s(dh);Qse=n(sLe,"STRONG",{});var nnt=s(Qse);Vdo=r(nnt,"marian"),nnt.forEach(t),Xdo=r(sLe," \u2014 "),KB=n(sLe,"A",{href:!0});var snt=s(KB);zdo=r(snt,"MarianTokenizer"),snt.forEach(t),Wdo=r(sLe," (Marian model)"),sLe.forEach(t),Qdo=i(S),us=n(S,"LI",{});var Sk=s(us);Hse=n(Sk,"STRONG",{});var lnt=s(Hse);Hdo=r(lnt,"mbart"),lnt.forEach(t),Udo=r(Sk," \u2014 "),ZB=n(Sk,"A",{href:!0});var int=s(ZB);Jdo=r(int,"MBartTokenizer"),int.forEach(t),Ydo=r(Sk," or "),eI=n(Sk,"A",{href:!0});var dnt=s(eI);Kdo=r(dnt,"MBartTokenizerFast"),dnt.forEach(t),Zdo=r(Sk," (mBART model)"),Sk.forEach(t),eco=i(S),bs=n(S,"LI",{});var Rk=s(bs);Use=n(Rk,"STRONG",{});var cnt=s(Use);oco=r(cnt,"mbart50"),cnt.forEach(t),rco=r(Rk," \u2014 "),oI=n(Rk,"A",{href:!0});var fnt=s(oI);tco=r(fnt,"MBart50Tokenizer"),fnt.forEach(t),aco=r(Rk," or "),rI=n(Rk,"A",{href:!0});var mnt=s(rI);nco=r(mnt,"MBart50TokenizerFast"),mnt.forEach(t),sco=r(Rk," (mBART-50 model)"),Rk.forEach(t),lco=i(S),vs=n(S,"LI",{});var Pk=s(vs);Jse=n(Pk,"STRONG",{});var gnt=s(Jse);ico=r(gnt,"megatron-bert"),gnt.forEach(t),dco=r(Pk," \u2014 "),tI=n(Pk,"A",{href:!0});var hnt=s(tI);cco=r(hnt,"BertTokenizer"),hnt.forEach(t),fco=r(Pk," or "),aI=n(Pk,"A",{href:!0});var pnt=s(aI);mco=r(pnt,"BertTokenizerFast"),pnt.forEach(t),gco=r(Pk," (Megatron-BERT model)"),Pk.forEach(t),hco=i(S),ch=n(S,"LI",{});var lLe=s(ch);Yse=n(lLe,"STRONG",{});var _nt=s(Yse);pco=r(_nt,"mluke"),_nt.forEach(t),_co=r(lLe," \u2014 "),nI=n(lLe,"A",{href:!0});var unt=s(nI);uco=r(unt,"MLukeTokenizer"),unt.forEach(t),bco=r(lLe," (mLUKE model)"),lLe.forEach(t),vco=i(S),Fs=n(S,"LI",{});var Bk=s(Fs);Kse=n(Bk,"STRONG",{});var bnt=s(Kse);Fco=r(bnt,"mobilebert"),bnt.forEach(t),Tco=r(Bk," \u2014 "),sI=n(Bk,"A",{href:!0});var vnt=s(sI);Mco=r(vnt,"MobileBertTokenizer"),vnt.forEach(t),Eco=r(Bk," or "),lI=n(Bk,"A",{href:!0});var Fnt=s(lI);Cco=r(Fnt,"MobileBertTokenizerFast"),Fnt.forEach(t),wco=r(Bk," (MobileBERT model)"),Bk.forEach(t),Aco=i(S),Ts=n(S,"LI",{});var Ik=s(Ts);Zse=n(Ik,"STRONG",{});var Tnt=s(Zse);Lco=r(Tnt,"mpnet"),Tnt.forEach(t),yco=r(Ik," \u2014 "),iI=n(Ik,"A",{href:!0});var Mnt=s(iI);xco=r(Mnt,"MPNetTokenizer"),Mnt.forEach(t),$co=r(Ik," or "),dI=n(Ik,"A",{href:!0});var Ent=s(dI);kco=r(Ent,"MPNetTokenizerFast"),Ent.forEach(t),Sco=r(Ik," (MPNet model)"),Ik.forEach(t),Rco=i(S),Ms=n(S,"LI",{});var Nk=s(Ms);ele=n(Nk,"STRONG",{});var Cnt=s(ele);Pco=r(Cnt,"mt5"),Cnt.forEach(t),Bco=r(Nk," \u2014 "),cI=n(Nk,"A",{href:!0});var wnt=s(cI);Ico=r(wnt,"MT5Tokenizer"),wnt.forEach(t),Nco=r(Nk," or "),fI=n(Nk,"A",{href:!0});var Ant=s(fI);qco=r(Ant,"MT5TokenizerFast"),Ant.forEach(t),jco=r(Nk," (MT5 model)"),Nk.forEach(t),Dco=i(S),Es=n(S,"LI",{});var qk=s(Es);ole=n(qk,"STRONG",{});var Lnt=s(ole);Gco=r(Lnt,"nezha"),Lnt.forEach(t),Oco=r(qk," \u2014 "),mI=n(qk,"A",{href:!0});var ynt=s(mI);Vco=r(ynt,"BertTokenizer"),ynt.forEach(t),Xco=r(qk," or "),gI=n(qk,"A",{href:!0});var xnt=s(gI);zco=r(xnt,"BertTokenizerFast"),xnt.forEach(t),Wco=r(qk," (Nezha model)"),qk.forEach(t),Qco=i(S),Cs=n(S,"LI",{});var jk=s(Cs);rle=n(jk,"STRONG",{});var $nt=s(rle);Hco=r($nt,"nystromformer"),$nt.forEach(t),Uco=r(jk," \u2014 "),hI=n(jk,"A",{href:!0});var knt=s(hI);Jco=r(knt,"AlbertTokenizer"),knt.forEach(t),Yco=r(jk," or "),pI=n(jk,"A",{href:!0});var Snt=s(pI);Kco=r(Snt,"AlbertTokenizerFast"),Snt.forEach(t),Zco=r(jk," (Nystr\xF6mformer model)"),jk.forEach(t),efo=i(S),ws=n(S,"LI",{});var Dk=s(ws);tle=n(Dk,"STRONG",{});var Rnt=s(tle);ofo=r(Rnt,"openai-gpt"),Rnt.forEach(t),rfo=r(Dk," \u2014 "),_I=n(Dk,"A",{href:!0});var Pnt=s(_I);tfo=r(Pnt,"OpenAIGPTTokenizer"),Pnt.forEach(t),afo=r(Dk," or "),uI=n(Dk,"A",{href:!0});var Bnt=s(uI);nfo=r(Bnt,"OpenAIGPTTokenizerFast"),Bnt.forEach(t),sfo=r(Dk," (OpenAI GPT model)"),Dk.forEach(t),lfo=i(S),fh=n(S,"LI",{});var iLe=s(fh);ale=n(iLe,"STRONG",{});var Int=s(ale);ifo=r(Int,"opt"),Int.forEach(t),dfo=r(iLe," \u2014 "),bI=n(iLe,"A",{href:!0});var Nnt=s(bI);cfo=r(Nnt,"GPT2Tokenizer"),Nnt.forEach(t),ffo=r(iLe," (OPT model)"),iLe.forEach(t),mfo=i(S),As=n(S,"LI",{});var Gk=s(As);nle=n(Gk,"STRONG",{});var qnt=s(nle);gfo=r(qnt,"pegasus"),qnt.forEach(t),hfo=r(Gk," \u2014 "),vI=n(Gk,"A",{href:!0});var jnt=s(vI);pfo=r(jnt,"PegasusTokenizer"),jnt.forEach(t),_fo=r(Gk," or "),FI=n(Gk,"A",{href:!0});var Dnt=s(FI);ufo=r(Dnt,"PegasusTokenizerFast"),Dnt.forEach(t),bfo=r(Gk," (Pegasus model)"),Gk.forEach(t),vfo=i(S),mh=n(S,"LI",{});var dLe=s(mh);sle=n(dLe,"STRONG",{});var Gnt=s(sle);Ffo=r(Gnt,"perceiver"),Gnt.forEach(t),Tfo=r(dLe," \u2014 "),TI=n(dLe,"A",{href:!0});var Ont=s(TI);Mfo=r(Ont,"PerceiverTokenizer"),Ont.forEach(t),Efo=r(dLe," (Perceiver model)"),dLe.forEach(t),Cfo=i(S),gh=n(S,"LI",{});var cLe=s(gh);lle=n(cLe,"STRONG",{});var Vnt=s(lle);wfo=r(Vnt,"phobert"),Vnt.forEach(t),Afo=r(cLe," \u2014 "),MI=n(cLe,"A",{href:!0});var Xnt=s(MI);Lfo=r(Xnt,"PhobertTokenizer"),Xnt.forEach(t),yfo=r(cLe," (PhoBERT model)"),cLe.forEach(t),xfo=i(S),hh=n(S,"LI",{});var fLe=s(hh);ile=n(fLe,"STRONG",{});var znt=s(ile);$fo=r(znt,"plbart"),znt.forEach(t),kfo=r(fLe," \u2014 "),EI=n(fLe,"A",{href:!0});var Wnt=s(EI);Sfo=r(Wnt,"PLBartTokenizer"),Wnt.forEach(t),Rfo=r(fLe," (PLBart model)"),fLe.forEach(t),Pfo=i(S),ph=n(S,"LI",{});var mLe=s(ph);dle=n(mLe,"STRONG",{});var Qnt=s(dle);Bfo=r(Qnt,"prophetnet"),Qnt.forEach(t),Ifo=r(mLe," \u2014 "),CI=n(mLe,"A",{href:!0});var Hnt=s(CI);Nfo=r(Hnt,"ProphetNetTokenizer"),Hnt.forEach(t),qfo=r(mLe," (ProphetNet model)"),mLe.forEach(t),jfo=i(S),Ls=n(S,"LI",{});var Ok=s(Ls);cle=n(Ok,"STRONG",{});var Unt=s(cle);Dfo=r(Unt,"qdqbert"),Unt.forEach(t),Gfo=r(Ok," \u2014 "),wI=n(Ok,"A",{href:!0});var Jnt=s(wI);Ofo=r(Jnt,"BertTokenizer"),Jnt.forEach(t),Vfo=r(Ok," or "),AI=n(Ok,"A",{href:!0});var Ynt=s(AI);Xfo=r(Ynt,"BertTokenizerFast"),Ynt.forEach(t),zfo=r(Ok," (QDQBert model)"),Ok.forEach(t),Wfo=i(S),_h=n(S,"LI",{});var gLe=s(_h);fle=n(gLe,"STRONG",{});var Knt=s(fle);Qfo=r(Knt,"rag"),Knt.forEach(t),Hfo=r(gLe," \u2014 "),LI=n(gLe,"A",{href:!0});var Znt=s(LI);Ufo=r(Znt,"RagTokenizer"),Znt.forEach(t),Jfo=r(gLe," (RAG model)"),gLe.forEach(t),Yfo=i(S),ys=n(S,"LI",{});var Vk=s(ys);mle=n(Vk,"STRONG",{});var est=s(mle);Kfo=r(est,"realm"),est.forEach(t),Zfo=r(Vk," \u2014 "),yI=n(Vk,"A",{href:!0});var ost=s(yI);emo=r(ost,"RealmTokenizer"),ost.forEach(t),omo=r(Vk," or "),xI=n(Vk,"A",{href:!0});var rst=s(xI);rmo=r(rst,"RealmTokenizerFast"),rst.forEach(t),tmo=r(Vk," (REALM model)"),Vk.forEach(t),amo=i(S),xs=n(S,"LI",{});var Xk=s(xs);gle=n(Xk,"STRONG",{});var tst=s(gle);nmo=r(tst,"reformer"),tst.forEach(t),smo=r(Xk," \u2014 "),$I=n(Xk,"A",{href:!0});var ast=s($I);lmo=r(ast,"ReformerTokenizer"),ast.forEach(t),imo=r(Xk," or "),kI=n(Xk,"A",{href:!0});var nst=s(kI);dmo=r(nst,"ReformerTokenizerFast"),nst.forEach(t),cmo=r(Xk," (Reformer model)"),Xk.forEach(t),fmo=i(S),$s=n(S,"LI",{});var zk=s($s);hle=n(zk,"STRONG",{});var sst=s(hle);mmo=r(sst,"rembert"),sst.forEach(t),gmo=r(zk," \u2014 "),SI=n(zk,"A",{href:!0});var lst=s(SI);hmo=r(lst,"RemBertTokenizer"),lst.forEach(t),pmo=r(zk," or "),RI=n(zk,"A",{href:!0});var ist=s(RI);_mo=r(ist,"RemBertTokenizerFast"),ist.forEach(t),umo=r(zk," (RemBERT model)"),zk.forEach(t),bmo=i(S),ks=n(S,"LI",{});var Wk=s(ks);ple=n(Wk,"STRONG",{});var dst=s(ple);vmo=r(dst,"retribert"),dst.forEach(t),Fmo=r(Wk," \u2014 "),PI=n(Wk,"A",{href:!0});var cst=s(PI);Tmo=r(cst,"RetriBertTokenizer"),cst.forEach(t),Mmo=r(Wk," or "),BI=n(Wk,"A",{href:!0});var fst=s(BI);Emo=r(fst,"RetriBertTokenizerFast"),fst.forEach(t),Cmo=r(Wk," (RetriBERT model)"),Wk.forEach(t),wmo=i(S),Ss=n(S,"LI",{});var Qk=s(Ss);_le=n(Qk,"STRONG",{});var mst=s(_le);Amo=r(mst,"roberta"),mst.forEach(t),Lmo=r(Qk," \u2014 "),II=n(Qk,"A",{href:!0});var gst=s(II);ymo=r(gst,"RobertaTokenizer"),gst.forEach(t),xmo=r(Qk," or "),NI=n(Qk,"A",{href:!0});var hst=s(NI);$mo=r(hst,"RobertaTokenizerFast"),hst.forEach(t),kmo=r(Qk," (RoBERTa model)"),Qk.forEach(t),Smo=i(S),Rs=n(S,"LI",{});var Hk=s(Rs);ule=n(Hk,"STRONG",{});var pst=s(ule);Rmo=r(pst,"roformer"),pst.forEach(t),Pmo=r(Hk," \u2014 "),qI=n(Hk,"A",{href:!0});var _st=s(qI);Bmo=r(_st,"RoFormerTokenizer"),_st.forEach(t),Imo=r(Hk," or "),jI=n(Hk,"A",{href:!0});var ust=s(jI);Nmo=r(ust,"RoFormerTokenizerFast"),ust.forEach(t),qmo=r(Hk," (RoFormer model)"),Hk.forEach(t),jmo=i(S),uh=n(S,"LI",{});var hLe=s(uh);ble=n(hLe,"STRONG",{});var bst=s(ble);Dmo=r(bst,"speech_to_text"),bst.forEach(t),Gmo=r(hLe," \u2014 "),DI=n(hLe,"A",{href:!0});var vst=s(DI);Omo=r(vst,"Speech2TextTokenizer"),vst.forEach(t),Vmo=r(hLe," (Speech2Text model)"),hLe.forEach(t),Xmo=i(S),bh=n(S,"LI",{});var pLe=s(bh);vle=n(pLe,"STRONG",{});var Fst=s(vle);zmo=r(Fst,"speech_to_text_2"),Fst.forEach(t),Wmo=r(pLe," \u2014 "),GI=n(pLe,"A",{href:!0});var Tst=s(GI);Qmo=r(Tst,"Speech2Text2Tokenizer"),Tst.forEach(t),Hmo=r(pLe," (Speech2Text2 model)"),pLe.forEach(t),Umo=i(S),Ps=n(S,"LI",{});var Uk=s(Ps);Fle=n(Uk,"STRONG",{});var Mst=s(Fle);Jmo=r(Mst,"splinter"),Mst.forEach(t),Ymo=r(Uk," \u2014 "),OI=n(Uk,"A",{href:!0});var Est=s(OI);Kmo=r(Est,"SplinterTokenizer"),Est.forEach(t),Zmo=r(Uk," or "),VI=n(Uk,"A",{href:!0});var Cst=s(VI);ego=r(Cst,"SplinterTokenizerFast"),Cst.forEach(t),ogo=r(Uk," (Splinter model)"),Uk.forEach(t),rgo=i(S),Bs=n(S,"LI",{});var Jk=s(Bs);Tle=n(Jk,"STRONG",{});var wst=s(Tle);tgo=r(wst,"squeezebert"),wst.forEach(t),ago=r(Jk," \u2014 "),XI=n(Jk,"A",{href:!0});var Ast=s(XI);ngo=r(Ast,"SqueezeBertTokenizer"),Ast.forEach(t),sgo=r(Jk," or "),zI=n(Jk,"A",{href:!0});var Lst=s(zI);lgo=r(Lst,"SqueezeBertTokenizerFast"),Lst.forEach(t),igo=r(Jk," (SqueezeBERT model)"),Jk.forEach(t),dgo=i(S),Is=n(S,"LI",{});var Yk=s(Is);Mle=n(Yk,"STRONG",{});var yst=s(Mle);cgo=r(yst,"t5"),yst.forEach(t),fgo=r(Yk," \u2014 "),WI=n(Yk,"A",{href:!0});var xst=s(WI);mgo=r(xst,"T5Tokenizer"),xst.forEach(t),ggo=r(Yk," or "),QI=n(Yk,"A",{href:!0});var $st=s(QI);hgo=r($st,"T5TokenizerFast"),$st.forEach(t),pgo=r(Yk," (T5 model)"),Yk.forEach(t),_go=i(S),vh=n(S,"LI",{});var _Le=s(vh);Ele=n(_Le,"STRONG",{});var kst=s(Ele);ugo=r(kst,"tapas"),kst.forEach(t),bgo=r(_Le," \u2014 "),HI=n(_Le,"A",{href:!0});var Sst=s(HI);vgo=r(Sst,"TapasTokenizer"),Sst.forEach(t),Fgo=r(_Le," (TAPAS model)"),_Le.forEach(t),Tgo=i(S),Fh=n(S,"LI",{});var uLe=s(Fh);Cle=n(uLe,"STRONG",{});var Rst=s(Cle);Mgo=r(Rst,"tapex"),Rst.forEach(t),Ego=r(uLe," \u2014 "),UI=n(uLe,"A",{href:!0});var Pst=s(UI);Cgo=r(Pst,"TapexTokenizer"),Pst.forEach(t),wgo=r(uLe," (TAPEX model)"),uLe.forEach(t),Ago=i(S),Th=n(S,"LI",{});var bLe=s(Th);wle=n(bLe,"STRONG",{});var Bst=s(wle);Lgo=r(Bst,"transfo-xl"),Bst.forEach(t),ygo=r(bLe," \u2014 "),JI=n(bLe,"A",{href:!0});var Ist=s(JI);xgo=r(Ist,"TransfoXLTokenizer"),Ist.forEach(t),$go=r(bLe," (Transformer-XL model)"),bLe.forEach(t),kgo=i(S),Ns=n(S,"LI",{});var Kk=s(Ns);Ale=n(Kk,"STRONG",{});var Nst=s(Ale);Sgo=r(Nst,"vilt"),Nst.forEach(t),Rgo=r(Kk," \u2014 "),YI=n(Kk,"A",{href:!0});var qst=s(YI);Pgo=r(qst,"BertTokenizer"),qst.forEach(t),Bgo=r(Kk," or "),KI=n(Kk,"A",{href:!0});var jst=s(KI);Igo=r(jst,"BertTokenizerFast"),jst.forEach(t),Ngo=r(Kk," (ViLT model)"),Kk.forEach(t),qgo=i(S),qs=n(S,"LI",{});var Zk=s(qs);Lle=n(Zk,"STRONG",{});var Dst=s(Lle);jgo=r(Dst,"visual_bert"),Dst.forEach(t),Dgo=r(Zk," \u2014 "),ZI=n(Zk,"A",{href:!0});var Gst=s(ZI);Ggo=r(Gst,"BertTokenizer"),Gst.forEach(t),Ogo=r(Zk," or "),eN=n(Zk,"A",{href:!0});var Ost=s(eN);Vgo=r(Ost,"BertTokenizerFast"),Ost.forEach(t),Xgo=r(Zk," (VisualBERT model)"),Zk.forEach(t),zgo=i(S),Mh=n(S,"LI",{});var vLe=s(Mh);yle=n(vLe,"STRONG",{});var Vst=s(yle);Wgo=r(Vst,"wav2vec2"),Vst.forEach(t),Qgo=r(vLe," \u2014 "),oN=n(vLe,"A",{href:!0});var Xst=s(oN);Hgo=r(Xst,"Wav2Vec2CTCTokenizer"),Xst.forEach(t),Ugo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),Jgo=i(S),Eh=n(S,"LI",{});var FLe=s(Eh);xle=n(FLe,"STRONG",{});var zst=s(xle);Ygo=r(zst,"wav2vec2-conformer"),zst.forEach(t),Kgo=r(FLe," \u2014 "),rN=n(FLe,"A",{href:!0});var Wst=s(rN);Zgo=r(Wst,"Wav2Vec2CTCTokenizer"),Wst.forEach(t),eho=r(FLe," (Wav2Vec2-Conformer model)"),FLe.forEach(t),oho=i(S),Ch=n(S,"LI",{});var TLe=s(Ch);$le=n(TLe,"STRONG",{});var Qst=s($le);rho=r(Qst,"wav2vec2_phoneme"),Qst.forEach(t),tho=r(TLe," \u2014 "),tN=n(TLe,"A",{href:!0});var Hst=s(tN);aho=r(Hst,"Wav2Vec2PhonemeCTCTokenizer"),Hst.forEach(t),nho=r(TLe," (Wav2Vec2Phoneme model)"),TLe.forEach(t),sho=i(S),js=n(S,"LI",{});var eS=s(js);kle=n(eS,"STRONG",{});var Ust=s(kle);lho=r(Ust,"xglm"),Ust.forEach(t),iho=r(eS," \u2014 "),aN=n(eS,"A",{href:!0});var Jst=s(aN);dho=r(Jst,"XGLMTokenizer"),Jst.forEach(t),cho=r(eS," or "),nN=n(eS,"A",{href:!0});var Yst=s(nN);fho=r(Yst,"XGLMTokenizerFast"),Yst.forEach(t),mho=r(eS," (XGLM model)"),eS.forEach(t),gho=i(S),wh=n(S,"LI",{});var MLe=s(wh);Sle=n(MLe,"STRONG",{});var Kst=s(Sle);hho=r(Kst,"xlm"),Kst.forEach(t),pho=r(MLe," \u2014 "),sN=n(MLe,"A",{href:!0});var Zst=s(sN);_ho=r(Zst,"XLMTokenizer"),Zst.forEach(t),uho=r(MLe," (XLM model)"),MLe.forEach(t),bho=i(S),Ah=n(S,"LI",{});var ELe=s(Ah);Rle=n(ELe,"STRONG",{});var elt=s(Rle);vho=r(elt,"xlm-prophetnet"),elt.forEach(t),Fho=r(ELe," \u2014 "),lN=n(ELe,"A",{href:!0});var olt=s(lN);Tho=r(olt,"XLMProphetNetTokenizer"),olt.forEach(t),Mho=r(ELe," (XLM-ProphetNet model)"),ELe.forEach(t),Eho=i(S),Ds=n(S,"LI",{});var oS=s(Ds);Ple=n(oS,"STRONG",{});var rlt=s(Ple);Cho=r(rlt,"xlm-roberta"),rlt.forEach(t),who=r(oS," \u2014 "),iN=n(oS,"A",{href:!0});var tlt=s(iN);Aho=r(tlt,"XLMRobertaTokenizer"),tlt.forEach(t),Lho=r(oS," or "),dN=n(oS,"A",{href:!0});var alt=s(dN);yho=r(alt,"XLMRobertaTokenizerFast"),alt.forEach(t),xho=r(oS," (XLM-RoBERTa model)"),oS.forEach(t),$ho=i(S),Gs=n(S,"LI",{});var rS=s(Gs);Ble=n(rS,"STRONG",{});var nlt=s(Ble);kho=r(nlt,"xlm-roberta-xl"),nlt.forEach(t),Sho=r(rS," \u2014 "),cN=n(rS,"A",{href:!0});var slt=s(cN);Rho=r(slt,"RobertaTokenizer"),slt.forEach(t),Pho=r(rS," or "),fN=n(rS,"A",{href:!0});var llt=s(fN);Bho=r(llt,"RobertaTokenizerFast"),llt.forEach(t),Iho=r(rS," (XLM-RoBERTa-XL model)"),rS.forEach(t),Nho=i(S),Os=n(S,"LI",{});var tS=s(Os);Ile=n(tS,"STRONG",{});var ilt=s(Ile);qho=r(ilt,"xlnet"),ilt.forEach(t),jho=r(tS," \u2014 "),mN=n(tS,"A",{href:!0});var dlt=s(mN);Dho=r(dlt,"XLNetTokenizer"),dlt.forEach(t),Gho=r(tS," or "),gN=n(tS,"A",{href:!0});var clt=s(gN);Oho=r(clt,"XLNetTokenizerFast"),clt.forEach(t),Vho=r(tS," (XLNet model)"),tS.forEach(t),Xho=i(S),Vs=n(S,"LI",{});var aS=s(Vs);Nle=n(aS,"STRONG",{});var flt=s(Nle);zho=r(flt,"yoso"),flt.forEach(t),Who=r(aS," \u2014 "),hN=n(aS,"A",{href:!0});var mlt=s(hN);Qho=r(mlt,"AlbertTokenizer"),mlt.forEach(t),Hho=r(aS," or "),pN=n(aS,"A",{href:!0});var glt=s(pN);Uho=r(glt,"AlbertTokenizerFast"),glt.forEach(t),Jho=r(aS," (YOSO model)"),aS.forEach(t),S.forEach(t),Yho=i(Js),T(Lh.$$.fragment,Js),Js.forEach(t),Kho=i(Us),yh=n(Us,"DIV",{class:!0});var TXe=s(yh);T(HA.$$.fragment,TXe),Zho=i(TXe),qle=n(TXe,"P",{});var hlt=s(qle);epo=r(hlt,"Register a new tokenizer in this mapping."),hlt.forEach(t),TXe.forEach(t),Us.forEach(t),FOe=i(f),Bi=n(f,"H2",{class:!0});var MXe=s(Bi);xh=n(MXe,"A",{id:!0,class:!0,href:!0});var plt=s(xh);jle=n(plt,"SPAN",{});var _lt=s(jle);T(UA.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),opo=i(MXe),Dle=n(MXe,"SPAN",{});var ult=s(Dle);rpo=r(ult,"AutoFeatureExtractor"),ult.forEach(t),MXe.forEach(t),TOe=i(f),Lo=n(f,"DIV",{class:!0});var Ys=s(Lo);T(JA.$$.fragment,Ys),tpo=i(Ys),YA=n(Ys,"P",{});var EXe=s(YA);apo=r(EXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_N=n(EXe,"A",{href:!0});var blt=s(_N);npo=r(blt,"AutoFeatureExtractor.from_pretrained()"),blt.forEach(t),spo=r(EXe," class method."),EXe.forEach(t),lpo=i(Ys),KA=n(Ys,"P",{});var CXe=s(KA);ipo=r(CXe,"This class cannot be instantiated directly using "),Gle=n(CXe,"CODE",{});var vlt=s(Gle);dpo=r(vlt,"__init__()"),vlt.forEach(t),cpo=r(CXe," (throws an error)."),CXe.forEach(t),fpo=i(Ys),He=n(Ys,"DIV",{class:!0});var ta=s(He);T(ZA.$$.fragment,ta),mpo=i(ta),Ole=n(ta,"P",{});var Flt=s(Ole);gpo=r(Flt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Flt.forEach(t),hpo=i(ta),Ra=n(ta,"P",{});var N3=s(Ra);ppo=r(N3,"The feature extractor class to instantiate is selected based on the "),Vle=n(N3,"CODE",{});var Tlt=s(Vle);_po=r(Tlt,"model_type"),Tlt.forEach(t),upo=r(N3,` property of the config object
(either passed as an argument or loaded from `),Xle=n(N3,"CODE",{});var Mlt=s(Xle);bpo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),vpo=r(N3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zle=n(N3,"CODE",{});var Elt=s(zle);Fpo=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),Tpo=r(N3,":"),N3.forEach(t),Mpo=i(ta),Y=n(ta,"UL",{});var K=s(Y);$h=n(K,"LI",{});var CLe=s($h);Wle=n(CLe,"STRONG",{});var Clt=s(Wle);Epo=r(Clt,"beit"),Clt.forEach(t),Cpo=r(CLe," \u2014 "),uN=n(CLe,"A",{href:!0});var wlt=s(uN);wpo=r(wlt,"BeitFeatureExtractor"),wlt.forEach(t),Apo=r(CLe," (BEiT model)"),CLe.forEach(t),Lpo=i(K),kh=n(K,"LI",{});var wLe=s(kh);Qle=n(wLe,"STRONG",{});var Alt=s(Qle);ypo=r(Alt,"clip"),Alt.forEach(t),xpo=r(wLe," \u2014 "),bN=n(wLe,"A",{href:!0});var Llt=s(bN);$po=r(Llt,"CLIPFeatureExtractor"),Llt.forEach(t),kpo=r(wLe," (CLIP model)"),wLe.forEach(t),Spo=i(K),Sh=n(K,"LI",{});var ALe=s(Sh);Hle=n(ALe,"STRONG",{});var ylt=s(Hle);Rpo=r(ylt,"convnext"),ylt.forEach(t),Ppo=r(ALe," \u2014 "),vN=n(ALe,"A",{href:!0});var xlt=s(vN);Bpo=r(xlt,"ConvNextFeatureExtractor"),xlt.forEach(t),Ipo=r(ALe," (ConvNeXT model)"),ALe.forEach(t),Npo=i(K),Rh=n(K,"LI",{});var LLe=s(Rh);Ule=n(LLe,"STRONG",{});var $lt=s(Ule);qpo=r($lt,"cvt"),$lt.forEach(t),jpo=r(LLe," \u2014 "),FN=n(LLe,"A",{href:!0});var klt=s(FN);Dpo=r(klt,"ConvNextFeatureExtractor"),klt.forEach(t),Gpo=r(LLe," (CvT model)"),LLe.forEach(t),Opo=i(K),Ph=n(K,"LI",{});var yLe=s(Ph);Jle=n(yLe,"STRONG",{});var Slt=s(Jle);Vpo=r(Slt,"data2vec-audio"),Slt.forEach(t),Xpo=r(yLe," \u2014 "),TN=n(yLe,"A",{href:!0});var Rlt=s(TN);zpo=r(Rlt,"Wav2Vec2FeatureExtractor"),Rlt.forEach(t),Wpo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),Qpo=i(K),Bh=n(K,"LI",{});var xLe=s(Bh);Yle=n(xLe,"STRONG",{});var Plt=s(Yle);Hpo=r(Plt,"data2vec-vision"),Plt.forEach(t),Upo=r(xLe," \u2014 "),MN=n(xLe,"A",{href:!0});var Blt=s(MN);Jpo=r(Blt,"BeitFeatureExtractor"),Blt.forEach(t),Ypo=r(xLe," (Data2VecVision model)"),xLe.forEach(t),Kpo=i(K),Ih=n(K,"LI",{});var $Le=s(Ih);Kle=n($Le,"STRONG",{});var Ilt=s(Kle);Zpo=r(Ilt,"deit"),Ilt.forEach(t),e_o=r($Le," \u2014 "),EN=n($Le,"A",{href:!0});var Nlt=s(EN);o_o=r(Nlt,"DeiTFeatureExtractor"),Nlt.forEach(t),r_o=r($Le," (DeiT model)"),$Le.forEach(t),t_o=i(K),Nh=n(K,"LI",{});var kLe=s(Nh);Zle=n(kLe,"STRONG",{});var qlt=s(Zle);a_o=r(qlt,"detr"),qlt.forEach(t),n_o=r(kLe," \u2014 "),CN=n(kLe,"A",{href:!0});var jlt=s(CN);s_o=r(jlt,"DetrFeatureExtractor"),jlt.forEach(t),l_o=r(kLe," (DETR model)"),kLe.forEach(t),i_o=i(K),qh=n(K,"LI",{});var SLe=s(qh);eie=n(SLe,"STRONG",{});var Dlt=s(eie);d_o=r(Dlt,"dpt"),Dlt.forEach(t),c_o=r(SLe," \u2014 "),wN=n(SLe,"A",{href:!0});var Glt=s(wN);f_o=r(Glt,"DPTFeatureExtractor"),Glt.forEach(t),m_o=r(SLe," (DPT model)"),SLe.forEach(t),g_o=i(K),jh=n(K,"LI",{});var RLe=s(jh);oie=n(RLe,"STRONG",{});var Olt=s(oie);h_o=r(Olt,"flava"),Olt.forEach(t),p_o=r(RLe," \u2014 "),AN=n(RLe,"A",{href:!0});var Vlt=s(AN);__o=r(Vlt,"FlavaFeatureExtractor"),Vlt.forEach(t),u_o=r(RLe," (FLAVA model)"),RLe.forEach(t),b_o=i(K),Dh=n(K,"LI",{});var PLe=s(Dh);rie=n(PLe,"STRONG",{});var Xlt=s(rie);v_o=r(Xlt,"glpn"),Xlt.forEach(t),F_o=r(PLe," \u2014 "),LN=n(PLe,"A",{href:!0});var zlt=s(LN);T_o=r(zlt,"GLPNFeatureExtractor"),zlt.forEach(t),M_o=r(PLe," (GLPN model)"),PLe.forEach(t),E_o=i(K),Gh=n(K,"LI",{});var BLe=s(Gh);tie=n(BLe,"STRONG",{});var Wlt=s(tie);C_o=r(Wlt,"hubert"),Wlt.forEach(t),w_o=r(BLe," \u2014 "),yN=n(BLe,"A",{href:!0});var Qlt=s(yN);A_o=r(Qlt,"Wav2Vec2FeatureExtractor"),Qlt.forEach(t),L_o=r(BLe," (Hubert model)"),BLe.forEach(t),y_o=i(K),Oh=n(K,"LI",{});var ILe=s(Oh);aie=n(ILe,"STRONG",{});var Hlt=s(aie);x_o=r(Hlt,"imagegpt"),Hlt.forEach(t),$_o=r(ILe," \u2014 "),xN=n(ILe,"A",{href:!0});var Ult=s(xN);k_o=r(Ult,"ImageGPTFeatureExtractor"),Ult.forEach(t),S_o=r(ILe," (ImageGPT model)"),ILe.forEach(t),R_o=i(K),Vh=n(K,"LI",{});var NLe=s(Vh);nie=n(NLe,"STRONG",{});var Jlt=s(nie);P_o=r(Jlt,"layoutlmv2"),Jlt.forEach(t),B_o=r(NLe," \u2014 "),$N=n(NLe,"A",{href:!0});var Ylt=s($N);I_o=r(Ylt,"LayoutLMv2FeatureExtractor"),Ylt.forEach(t),N_o=r(NLe," (LayoutLMv2 model)"),NLe.forEach(t),q_o=i(K),Xh=n(K,"LI",{});var qLe=s(Xh);sie=n(qLe,"STRONG",{});var Klt=s(sie);j_o=r(Klt,"layoutlmv3"),Klt.forEach(t),D_o=r(qLe," \u2014 "),kN=n(qLe,"A",{href:!0});var Zlt=s(kN);G_o=r(Zlt,"LayoutLMv3FeatureExtractor"),Zlt.forEach(t),O_o=r(qLe," (LayoutLMv3 model)"),qLe.forEach(t),V_o=i(K),zh=n(K,"LI",{});var jLe=s(zh);lie=n(jLe,"STRONG",{});var eit=s(lie);X_o=r(eit,"levit"),eit.forEach(t),z_o=r(jLe," \u2014 "),SN=n(jLe,"A",{href:!0});var oit=s(SN);W_o=r(oit,"LevitFeatureExtractor"),oit.forEach(t),Q_o=r(jLe," (LeViT model)"),jLe.forEach(t),H_o=i(K),Wh=n(K,"LI",{});var DLe=s(Wh);iie=n(DLe,"STRONG",{});var rit=s(iie);U_o=r(rit,"maskformer"),rit.forEach(t),J_o=r(DLe," \u2014 "),RN=n(DLe,"A",{href:!0});var tit=s(RN);Y_o=r(tit,"MaskFormerFeatureExtractor"),tit.forEach(t),K_o=r(DLe," (MaskFormer model)"),DLe.forEach(t),Z_o=i(K),Qh=n(K,"LI",{});var GLe=s(Qh);die=n(GLe,"STRONG",{});var ait=s(die);euo=r(ait,"mctct"),ait.forEach(t),ouo=r(GLe," \u2014 "),PN=n(GLe,"A",{href:!0});var nit=s(PN);ruo=r(nit,"MCTCTFeatureExtractor"),nit.forEach(t),tuo=r(GLe," (M-CTC-T model)"),GLe.forEach(t),auo=i(K),Hh=n(K,"LI",{});var OLe=s(Hh);cie=n(OLe,"STRONG",{});var sit=s(cie);nuo=r(sit,"perceiver"),sit.forEach(t),suo=r(OLe," \u2014 "),BN=n(OLe,"A",{href:!0});var lit=s(BN);luo=r(lit,"PerceiverFeatureExtractor"),lit.forEach(t),iuo=r(OLe," (Perceiver model)"),OLe.forEach(t),duo=i(K),Uh=n(K,"LI",{});var VLe=s(Uh);fie=n(VLe,"STRONG",{});var iit=s(fie);cuo=r(iit,"poolformer"),iit.forEach(t),fuo=r(VLe," \u2014 "),IN=n(VLe,"A",{href:!0});var dit=s(IN);muo=r(dit,"PoolFormerFeatureExtractor"),dit.forEach(t),guo=r(VLe," (PoolFormer model)"),VLe.forEach(t),huo=i(K),Jh=n(K,"LI",{});var XLe=s(Jh);mie=n(XLe,"STRONG",{});var cit=s(mie);puo=r(cit,"regnet"),cit.forEach(t),_uo=r(XLe," \u2014 "),NN=n(XLe,"A",{href:!0});var fit=s(NN);uuo=r(fit,"ConvNextFeatureExtractor"),fit.forEach(t),buo=r(XLe," (RegNet model)"),XLe.forEach(t),vuo=i(K),Yh=n(K,"LI",{});var zLe=s(Yh);gie=n(zLe,"STRONG",{});var mit=s(gie);Fuo=r(mit,"resnet"),mit.forEach(t),Tuo=r(zLe," \u2014 "),qN=n(zLe,"A",{href:!0});var git=s(qN);Muo=r(git,"ConvNextFeatureExtractor"),git.forEach(t),Euo=r(zLe," (ResNet model)"),zLe.forEach(t),Cuo=i(K),Kh=n(K,"LI",{});var WLe=s(Kh);hie=n(WLe,"STRONG",{});var hit=s(hie);wuo=r(hit,"segformer"),hit.forEach(t),Auo=r(WLe," \u2014 "),jN=n(WLe,"A",{href:!0});var pit=s(jN);Luo=r(pit,"SegformerFeatureExtractor"),pit.forEach(t),yuo=r(WLe," (SegFormer model)"),WLe.forEach(t),xuo=i(K),Zh=n(K,"LI",{});var QLe=s(Zh);pie=n(QLe,"STRONG",{});var _it=s(pie);$uo=r(_it,"speech_to_text"),_it.forEach(t),kuo=r(QLe," \u2014 "),DN=n(QLe,"A",{href:!0});var uit=s(DN);Suo=r(uit,"Speech2TextFeatureExtractor"),uit.forEach(t),Ruo=r(QLe," (Speech2Text model)"),QLe.forEach(t),Puo=i(K),ep=n(K,"LI",{});var HLe=s(ep);_ie=n(HLe,"STRONG",{});var bit=s(_ie);Buo=r(bit,"swin"),bit.forEach(t),Iuo=r(HLe," \u2014 "),GN=n(HLe,"A",{href:!0});var vit=s(GN);Nuo=r(vit,"ViTFeatureExtractor"),vit.forEach(t),quo=r(HLe," (Swin Transformer model)"),HLe.forEach(t),juo=i(K),op=n(K,"LI",{});var ULe=s(op);uie=n(ULe,"STRONG",{});var Fit=s(uie);Duo=r(Fit,"van"),Fit.forEach(t),Guo=r(ULe," \u2014 "),ON=n(ULe,"A",{href:!0});var Tit=s(ON);Ouo=r(Tit,"ConvNextFeatureExtractor"),Tit.forEach(t),Vuo=r(ULe," (VAN model)"),ULe.forEach(t),Xuo=i(K),rp=n(K,"LI",{});var JLe=s(rp);bie=n(JLe,"STRONG",{});var Mit=s(bie);zuo=r(Mit,"vilt"),Mit.forEach(t),Wuo=r(JLe," \u2014 "),VN=n(JLe,"A",{href:!0});var Eit=s(VN);Quo=r(Eit,"ViltFeatureExtractor"),Eit.forEach(t),Huo=r(JLe," (ViLT model)"),JLe.forEach(t),Uuo=i(K),tp=n(K,"LI",{});var YLe=s(tp);vie=n(YLe,"STRONG",{});var Cit=s(vie);Juo=r(Cit,"vit"),Cit.forEach(t),Yuo=r(YLe," \u2014 "),XN=n(YLe,"A",{href:!0});var wit=s(XN);Kuo=r(wit,"ViTFeatureExtractor"),wit.forEach(t),Zuo=r(YLe," (ViT model)"),YLe.forEach(t),e1o=i(K),ap=n(K,"LI",{});var KLe=s(ap);Fie=n(KLe,"STRONG",{});var Ait=s(Fie);o1o=r(Ait,"vit_mae"),Ait.forEach(t),r1o=r(KLe," \u2014 "),zN=n(KLe,"A",{href:!0});var Lit=s(zN);t1o=r(Lit,"ViTFeatureExtractor"),Lit.forEach(t),a1o=r(KLe," (ViTMAE model)"),KLe.forEach(t),n1o=i(K),np=n(K,"LI",{});var ZLe=s(np);Tie=n(ZLe,"STRONG",{});var yit=s(Tie);s1o=r(yit,"wav2vec2"),yit.forEach(t),l1o=r(ZLe," \u2014 "),WN=n(ZLe,"A",{href:!0});var xit=s(WN);i1o=r(xit,"Wav2Vec2FeatureExtractor"),xit.forEach(t),d1o=r(ZLe," (Wav2Vec2 model)"),ZLe.forEach(t),c1o=i(K),sp=n(K,"LI",{});var eye=s(sp);Mie=n(eye,"STRONG",{});var $it=s(Mie);f1o=r($it,"wav2vec2-conformer"),$it.forEach(t),m1o=r(eye," \u2014 "),QN=n(eye,"A",{href:!0});var kit=s(QN);g1o=r(kit,"Wav2Vec2FeatureExtractor"),kit.forEach(t),h1o=r(eye," (Wav2Vec2-Conformer model)"),eye.forEach(t),p1o=i(K),lp=n(K,"LI",{});var oye=s(lp);Eie=n(oye,"STRONG",{});var Sit=s(Eie);_1o=r(Sit,"yolos"),Sit.forEach(t),u1o=r(oye," \u2014 "),HN=n(oye,"A",{href:!0});var Rit=s(HN);b1o=r(Rit,"YolosFeatureExtractor"),Rit.forEach(t),v1o=r(oye," (YOLOS model)"),oye.forEach(t),K.forEach(t),F1o=i(ta),T(ip.$$.fragment,ta),T1o=i(ta),T(dp.$$.fragment,ta),ta.forEach(t),M1o=i(Ys),cp=n(Ys,"DIV",{class:!0});var wXe=s(cp);T(eL.$$.fragment,wXe),E1o=i(wXe),Cie=n(wXe,"P",{});var Pit=s(Cie);C1o=r(Pit,"Register a new feature extractor for this class."),Pit.forEach(t),wXe.forEach(t),Ys.forEach(t),MOe=i(f),Ii=n(f,"H2",{class:!0});var AXe=s(Ii);fp=n(AXe,"A",{id:!0,class:!0,href:!0});var Bit=s(fp);wie=n(Bit,"SPAN",{});var Iit=s(wie);T(oL.$$.fragment,Iit),Iit.forEach(t),Bit.forEach(t),w1o=i(AXe),Aie=n(AXe,"SPAN",{});var Nit=s(Aie);A1o=r(Nit,"AutoProcessor"),Nit.forEach(t),AXe.forEach(t),EOe=i(f),yo=n(f,"DIV",{class:!0});var Ks=s(yo);T(rL.$$.fragment,Ks),L1o=i(Ks),tL=n(Ks,"P",{});var LXe=s(tL);y1o=r(LXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UN=n(LXe,"A",{href:!0});var qit=s(UN);x1o=r(qit,"AutoProcessor.from_pretrained()"),qit.forEach(t),$1o=r(LXe," class method."),LXe.forEach(t),k1o=i(Ks),aL=n(Ks,"P",{});var yXe=s(aL);S1o=r(yXe,"This class cannot be instantiated directly using "),Lie=n(yXe,"CODE",{});var jit=s(Lie);R1o=r(jit,"__init__()"),jit.forEach(t),P1o=r(yXe," (throws an error)."),yXe.forEach(t),B1o=i(Ks),Ue=n(Ks,"DIV",{class:!0});var aa=s(Ue);T(nL.$$.fragment,aa),I1o=i(aa),yie=n(aa,"P",{});var Dit=s(yie);N1o=r(Dit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Dit.forEach(t),q1o=i(aa),Ni=n(aa,"P",{});var Poe=s(Ni);j1o=r(Poe,"The processor class to instantiate is selected based on the "),xie=n(Poe,"CODE",{});var Git=s(xie);D1o=r(Git,"model_type"),Git.forEach(t),G1o=r(Poe,` property of the config object (either
passed as an argument or loaded from `),$ie=n(Poe,"CODE",{});var Oit=s($ie);O1o=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),V1o=r(Poe," if possible):"),Poe.forEach(t),X1o=i(aa),he=n(aa,"UL",{});var ue=s(he);mp=n(ue,"LI",{});var rye=s(mp);kie=n(rye,"STRONG",{});var Vit=s(kie);z1o=r(Vit,"clip"),Vit.forEach(t),W1o=r(rye," \u2014 "),JN=n(rye,"A",{href:!0});var Xit=s(JN);Q1o=r(Xit,"CLIPProcessor"),Xit.forEach(t),H1o=r(rye," (CLIP model)"),rye.forEach(t),U1o=i(ue),gp=n(ue,"LI",{});var tye=s(gp);Sie=n(tye,"STRONG",{});var zit=s(Sie);J1o=r(zit,"flava"),zit.forEach(t),Y1o=r(tye," \u2014 "),Rie=n(tye,"CODE",{});var Wit=s(Rie);K1o=r(Wit,"FLAVAProcessor"),Wit.forEach(t),Z1o=r(tye," (FLAVA model)"),tye.forEach(t),e2o=i(ue),hp=n(ue,"LI",{});var aye=s(hp);Pie=n(aye,"STRONG",{});var Qit=s(Pie);o2o=r(Qit,"layoutlmv2"),Qit.forEach(t),r2o=r(aye," \u2014 "),YN=n(aye,"A",{href:!0});var Hit=s(YN);t2o=r(Hit,"LayoutLMv2Processor"),Hit.forEach(t),a2o=r(aye," (LayoutLMv2 model)"),aye.forEach(t),n2o=i(ue),pp=n(ue,"LI",{});var nye=s(pp);Bie=n(nye,"STRONG",{});var Uit=s(Bie);s2o=r(Uit,"layoutlmv3"),Uit.forEach(t),l2o=r(nye," \u2014 "),KN=n(nye,"A",{href:!0});var Jit=s(KN);i2o=r(Jit,"LayoutLMv3Processor"),Jit.forEach(t),d2o=r(nye," (LayoutLMv3 model)"),nye.forEach(t),c2o=i(ue),_p=n(ue,"LI",{});var sye=s(_p);Iie=n(sye,"STRONG",{});var Yit=s(Iie);f2o=r(Yit,"layoutxlm"),Yit.forEach(t),m2o=r(sye," \u2014 "),ZN=n(sye,"A",{href:!0});var Kit=s(ZN);g2o=r(Kit,"LayoutXLMProcessor"),Kit.forEach(t),h2o=r(sye," (LayoutXLM model)"),sye.forEach(t),p2o=i(ue),up=n(ue,"LI",{});var lye=s(up);Nie=n(lye,"STRONG",{});var Zit=s(Nie);_2o=r(Zit,"sew"),Zit.forEach(t),u2o=r(lye," \u2014 "),eq=n(lye,"A",{href:!0});var edt=s(eq);b2o=r(edt,"Wav2Vec2Processor"),edt.forEach(t),v2o=r(lye," (SEW model)"),lye.forEach(t),F2o=i(ue),bp=n(ue,"LI",{});var iye=s(bp);qie=n(iye,"STRONG",{});var odt=s(qie);T2o=r(odt,"sew-d"),odt.forEach(t),M2o=r(iye," \u2014 "),oq=n(iye,"A",{href:!0});var rdt=s(oq);E2o=r(rdt,"Wav2Vec2Processor"),rdt.forEach(t),C2o=r(iye," (SEW-D model)"),iye.forEach(t),w2o=i(ue),vp=n(ue,"LI",{});var dye=s(vp);jie=n(dye,"STRONG",{});var tdt=s(jie);A2o=r(tdt,"speech_to_text"),tdt.forEach(t),L2o=r(dye," \u2014 "),rq=n(dye,"A",{href:!0});var adt=s(rq);y2o=r(adt,"Speech2TextProcessor"),adt.forEach(t),x2o=r(dye," (Speech2Text model)"),dye.forEach(t),$2o=i(ue),Fp=n(ue,"LI",{});var cye=s(Fp);Die=n(cye,"STRONG",{});var ndt=s(Die);k2o=r(ndt,"speech_to_text_2"),ndt.forEach(t),S2o=r(cye," \u2014 "),tq=n(cye,"A",{href:!0});var sdt=s(tq);R2o=r(sdt,"Speech2Text2Processor"),sdt.forEach(t),P2o=r(cye," (Speech2Text2 model)"),cye.forEach(t),B2o=i(ue),Tp=n(ue,"LI",{});var fye=s(Tp);Gie=n(fye,"STRONG",{});var ldt=s(Gie);I2o=r(ldt,"trocr"),ldt.forEach(t),N2o=r(fye," \u2014 "),aq=n(fye,"A",{href:!0});var idt=s(aq);q2o=r(idt,"TrOCRProcessor"),idt.forEach(t),j2o=r(fye," (TrOCR model)"),fye.forEach(t),D2o=i(ue),Mp=n(ue,"LI",{});var mye=s(Mp);Oie=n(mye,"STRONG",{});var ddt=s(Oie);G2o=r(ddt,"unispeech"),ddt.forEach(t),O2o=r(mye," \u2014 "),nq=n(mye,"A",{href:!0});var cdt=s(nq);V2o=r(cdt,"Wav2Vec2Processor"),cdt.forEach(t),X2o=r(mye," (UniSpeech model)"),mye.forEach(t),z2o=i(ue),Ep=n(ue,"LI",{});var gye=s(Ep);Vie=n(gye,"STRONG",{});var fdt=s(Vie);W2o=r(fdt,"unispeech-sat"),fdt.forEach(t),Q2o=r(gye," \u2014 "),sq=n(gye,"A",{href:!0});var mdt=s(sq);H2o=r(mdt,"Wav2Vec2Processor"),mdt.forEach(t),U2o=r(gye," (UniSpeechSat model)"),gye.forEach(t),J2o=i(ue),Cp=n(ue,"LI",{});var hye=s(Cp);Xie=n(hye,"STRONG",{});var gdt=s(Xie);Y2o=r(gdt,"vilt"),gdt.forEach(t),K2o=r(hye," \u2014 "),lq=n(hye,"A",{href:!0});var hdt=s(lq);Z2o=r(hdt,"ViltProcessor"),hdt.forEach(t),ebo=r(hye," (ViLT model)"),hye.forEach(t),obo=i(ue),wp=n(ue,"LI",{});var pye=s(wp);zie=n(pye,"STRONG",{});var pdt=s(zie);rbo=r(pdt,"vision-text-dual-encoder"),pdt.forEach(t),tbo=r(pye," \u2014 "),iq=n(pye,"A",{href:!0});var _dt=s(iq);abo=r(_dt,"VisionTextDualEncoderProcessor"),_dt.forEach(t),nbo=r(pye," (VisionTextDualEncoder model)"),pye.forEach(t),sbo=i(ue),Ap=n(ue,"LI",{});var _ye=s(Ap);Wie=n(_ye,"STRONG",{});var udt=s(Wie);lbo=r(udt,"wav2vec2"),udt.forEach(t),ibo=r(_ye," \u2014 "),dq=n(_ye,"A",{href:!0});var bdt=s(dq);dbo=r(bdt,"Wav2Vec2Processor"),bdt.forEach(t),cbo=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),fbo=i(ue),Lp=n(ue,"LI",{});var uye=s(Lp);Qie=n(uye,"STRONG",{});var vdt=s(Qie);mbo=r(vdt,"wav2vec2-conformer"),vdt.forEach(t),gbo=r(uye," \u2014 "),cq=n(uye,"A",{href:!0});var Fdt=s(cq);hbo=r(Fdt,"Wav2Vec2Processor"),Fdt.forEach(t),pbo=r(uye," (Wav2Vec2-Conformer model)"),uye.forEach(t),_bo=i(ue),yp=n(ue,"LI",{});var bye=s(yp);Hie=n(bye,"STRONG",{});var Tdt=s(Hie);ubo=r(Tdt,"wavlm"),Tdt.forEach(t),bbo=r(bye," \u2014 "),fq=n(bye,"A",{href:!0});var Mdt=s(fq);vbo=r(Mdt,"Wav2Vec2Processor"),Mdt.forEach(t),Fbo=r(bye," (WavLM model)"),bye.forEach(t),ue.forEach(t),Tbo=i(aa),T(xp.$$.fragment,aa),Mbo=i(aa),T($p.$$.fragment,aa),aa.forEach(t),Ebo=i(Ks),kp=n(Ks,"DIV",{class:!0});var xXe=s(kp);T(sL.$$.fragment,xXe),Cbo=i(xXe),Uie=n(xXe,"P",{});var Edt=s(Uie);wbo=r(Edt,"Register a new processor for this class."),Edt.forEach(t),xXe.forEach(t),Ks.forEach(t),COe=i(f),qi=n(f,"H2",{class:!0});var $Xe=s(qi);Sp=n($Xe,"A",{id:!0,class:!0,href:!0});var Cdt=s(Sp);Jie=n(Cdt,"SPAN",{});var wdt=s(Jie);T(lL.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),Abo=i($Xe),Yie=n($Xe,"SPAN",{});var Adt=s(Yie);Lbo=r(Adt,"AutoModel"),Adt.forEach(t),$Xe.forEach(t),wOe=i(f),xo=n(f,"DIV",{class:!0});var Zs=s(xo);T(iL.$$.fragment,Zs),ybo=i(Zs),ji=n(Zs,"P",{});var Boe=s(ji);xbo=r(Boe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mq=n(Boe,"A",{href:!0});var Ldt=s(mq);$bo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),kbo=r(Boe," class method or the "),gq=n(Boe,"A",{href:!0});var ydt=s(gq);Sbo=r(ydt,"from_config()"),ydt.forEach(t),Rbo=r(Boe,` class
method.`),Boe.forEach(t),Pbo=i(Zs),dL=n(Zs,"P",{});var kXe=s(dL);Bbo=r(kXe,"This class cannot be instantiated directly using "),Kie=n(kXe,"CODE",{});var xdt=s(Kie);Ibo=r(xdt,"__init__()"),xdt.forEach(t),Nbo=r(kXe," (throws an error)."),kXe.forEach(t),qbo=i(Zs),st=n(Zs,"DIV",{class:!0});var q3=s(st);T(cL.$$.fragment,q3),jbo=i(q3),Zie=n(q3,"P",{});var $dt=s(Zie);Dbo=r($dt,"Instantiates one of the base model classes of the library from a configuration."),$dt.forEach(t),Gbo=i(q3),Di=n(q3,"P",{});var Ioe=s(Di);Obo=r(Ioe,`Note:
Loading a model from its configuration file does `),ede=n(Ioe,"STRONG",{});var kdt=s(ede);Vbo=r(kdt,"not"),kdt.forEach(t),Xbo=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=n(Ioe,"A",{href:!0});var Sdt=s(hq);zbo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Wbo=r(Ioe," to load the model weights."),Ioe.forEach(t),Qbo=i(q3),T(Rp.$$.fragment,q3),q3.forEach(t),Hbo=i(Zs),Je=n(Zs,"DIV",{class:!0});var na=s(Je);T(fL.$$.fragment,na),Ubo=i(na),ode=n(na,"P",{});var Rdt=s(ode);Jbo=r(Rdt,"Instantiate one of the base model classes of the library from a pretrained model."),Rdt.forEach(t),Ybo=i(na),Pa=n(na,"P",{});var j3=s(Pa);Kbo=r(j3,"The model class to instantiate is selected based on the "),rde=n(j3,"CODE",{});var Pdt=s(rde);Zbo=r(Pdt,"model_type"),Pdt.forEach(t),evo=r(j3,` property of the config object (either
passed as an argument or loaded from `),tde=n(j3,"CODE",{});var Bdt=s(tde);ovo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),rvo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(j3,"CODE",{});var Idt=s(ade);tvo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),avo=r(j3,":"),j3.forEach(t),nvo=i(na),y=n(na,"UL",{});var $=s(y);Pp=n($,"LI",{});var vye=s(Pp);nde=n(vye,"STRONG",{});var Ndt=s(nde);svo=r(Ndt,"albert"),Ndt.forEach(t),lvo=r(vye," \u2014 "),pq=n(vye,"A",{href:!0});var qdt=s(pq);ivo=r(qdt,"AlbertModel"),qdt.forEach(t),dvo=r(vye," (ALBERT model)"),vye.forEach(t),cvo=i($),Bp=n($,"LI",{});var Fye=s(Bp);sde=n(Fye,"STRONG",{});var jdt=s(sde);fvo=r(jdt,"bart"),jdt.forEach(t),mvo=r(Fye," \u2014 "),_q=n(Fye,"A",{href:!0});var Ddt=s(_q);gvo=r(Ddt,"BartModel"),Ddt.forEach(t),hvo=r(Fye," (BART model)"),Fye.forEach(t),pvo=i($),Ip=n($,"LI",{});var Tye=s(Ip);lde=n(Tye,"STRONG",{});var Gdt=s(lde);_vo=r(Gdt,"beit"),Gdt.forEach(t),uvo=r(Tye," \u2014 "),uq=n(Tye,"A",{href:!0});var Odt=s(uq);bvo=r(Odt,"BeitModel"),Odt.forEach(t),vvo=r(Tye," (BEiT model)"),Tye.forEach(t),Fvo=i($),Np=n($,"LI",{});var Mye=s(Np);ide=n(Mye,"STRONG",{});var Vdt=s(ide);Tvo=r(Vdt,"bert"),Vdt.forEach(t),Mvo=r(Mye," \u2014 "),bq=n(Mye,"A",{href:!0});var Xdt=s(bq);Evo=r(Xdt,"BertModel"),Xdt.forEach(t),Cvo=r(Mye," (BERT model)"),Mye.forEach(t),wvo=i($),qp=n($,"LI",{});var Eye=s(qp);dde=n(Eye,"STRONG",{});var zdt=s(dde);Avo=r(zdt,"bert-generation"),zdt.forEach(t),Lvo=r(Eye," \u2014 "),vq=n(Eye,"A",{href:!0});var Wdt=s(vq);yvo=r(Wdt,"BertGenerationEncoder"),Wdt.forEach(t),xvo=r(Eye," (Bert Generation model)"),Eye.forEach(t),$vo=i($),jp=n($,"LI",{});var Cye=s(jp);cde=n(Cye,"STRONG",{});var Qdt=s(cde);kvo=r(Qdt,"big_bird"),Qdt.forEach(t),Svo=r(Cye," \u2014 "),Fq=n(Cye,"A",{href:!0});var Hdt=s(Fq);Rvo=r(Hdt,"BigBirdModel"),Hdt.forEach(t),Pvo=r(Cye," (BigBird model)"),Cye.forEach(t),Bvo=i($),Dp=n($,"LI",{});var wye=s(Dp);fde=n(wye,"STRONG",{});var Udt=s(fde);Ivo=r(Udt,"bigbird_pegasus"),Udt.forEach(t),Nvo=r(wye," \u2014 "),Tq=n(wye,"A",{href:!0});var Jdt=s(Tq);qvo=r(Jdt,"BigBirdPegasusModel"),Jdt.forEach(t),jvo=r(wye," (BigBird-Pegasus model)"),wye.forEach(t),Dvo=i($),Gp=n($,"LI",{});var Aye=s(Gp);mde=n(Aye,"STRONG",{});var Ydt=s(mde);Gvo=r(Ydt,"blenderbot"),Ydt.forEach(t),Ovo=r(Aye," \u2014 "),Mq=n(Aye,"A",{href:!0});var Kdt=s(Mq);Vvo=r(Kdt,"BlenderbotModel"),Kdt.forEach(t),Xvo=r(Aye," (Blenderbot model)"),Aye.forEach(t),zvo=i($),Op=n($,"LI",{});var Lye=s(Op);gde=n(Lye,"STRONG",{});var Zdt=s(gde);Wvo=r(Zdt,"blenderbot-small"),Zdt.forEach(t),Qvo=r(Lye," \u2014 "),Eq=n(Lye,"A",{href:!0});var ect=s(Eq);Hvo=r(ect,"BlenderbotSmallModel"),ect.forEach(t),Uvo=r(Lye," (BlenderbotSmall model)"),Lye.forEach(t),Jvo=i($),Vp=n($,"LI",{});var yye=s(Vp);hde=n(yye,"STRONG",{});var oct=s(hde);Yvo=r(oct,"bloom"),oct.forEach(t),Kvo=r(yye," \u2014 "),Cq=n(yye,"A",{href:!0});var rct=s(Cq);Zvo=r(rct,"BloomModel"),rct.forEach(t),e0o=r(yye," (BLOOM model)"),yye.forEach(t),o0o=i($),Xp=n($,"LI",{});var xye=s(Xp);pde=n(xye,"STRONG",{});var tct=s(pde);r0o=r(tct,"camembert"),tct.forEach(t),t0o=r(xye," \u2014 "),wq=n(xye,"A",{href:!0});var act=s(wq);a0o=r(act,"CamembertModel"),act.forEach(t),n0o=r(xye," (CamemBERT model)"),xye.forEach(t),s0o=i($),zp=n($,"LI",{});var $ye=s(zp);_de=n($ye,"STRONG",{});var nct=s(_de);l0o=r(nct,"canine"),nct.forEach(t),i0o=r($ye," \u2014 "),Aq=n($ye,"A",{href:!0});var sct=s(Aq);d0o=r(sct,"CanineModel"),sct.forEach(t),c0o=r($ye," (CANINE model)"),$ye.forEach(t),f0o=i($),Wp=n($,"LI",{});var kye=s(Wp);ude=n(kye,"STRONG",{});var lct=s(ude);m0o=r(lct,"clip"),lct.forEach(t),g0o=r(kye," \u2014 "),Lq=n(kye,"A",{href:!0});var ict=s(Lq);h0o=r(ict,"CLIPModel"),ict.forEach(t),p0o=r(kye," (CLIP model)"),kye.forEach(t),_0o=i($),Qp=n($,"LI",{});var Sye=s(Qp);bde=n(Sye,"STRONG",{});var dct=s(bde);u0o=r(dct,"codegen"),dct.forEach(t),b0o=r(Sye," \u2014 "),yq=n(Sye,"A",{href:!0});var cct=s(yq);v0o=r(cct,"CodeGenModel"),cct.forEach(t),F0o=r(Sye," (CodeGen model)"),Sye.forEach(t),T0o=i($),Hp=n($,"LI",{});var Rye=s(Hp);vde=n(Rye,"STRONG",{});var fct=s(vde);M0o=r(fct,"convbert"),fct.forEach(t),E0o=r(Rye," \u2014 "),xq=n(Rye,"A",{href:!0});var mct=s(xq);C0o=r(mct,"ConvBertModel"),mct.forEach(t),w0o=r(Rye," (ConvBERT model)"),Rye.forEach(t),A0o=i($),Up=n($,"LI",{});var Pye=s(Up);Fde=n(Pye,"STRONG",{});var gct=s(Fde);L0o=r(gct,"convnext"),gct.forEach(t),y0o=r(Pye," \u2014 "),$q=n(Pye,"A",{href:!0});var hct=s($q);x0o=r(hct,"ConvNextModel"),hct.forEach(t),$0o=r(Pye," (ConvNeXT model)"),Pye.forEach(t),k0o=i($),Jp=n($,"LI",{});var Bye=s(Jp);Tde=n(Bye,"STRONG",{});var pct=s(Tde);S0o=r(pct,"ctrl"),pct.forEach(t),R0o=r(Bye," \u2014 "),kq=n(Bye,"A",{href:!0});var _ct=s(kq);P0o=r(_ct,"CTRLModel"),_ct.forEach(t),B0o=r(Bye," (CTRL model)"),Bye.forEach(t),I0o=i($),Yp=n($,"LI",{});var Iye=s(Yp);Mde=n(Iye,"STRONG",{});var uct=s(Mde);N0o=r(uct,"cvt"),uct.forEach(t),q0o=r(Iye," \u2014 "),Sq=n(Iye,"A",{href:!0});var bct=s(Sq);j0o=r(bct,"CvtModel"),bct.forEach(t),D0o=r(Iye," (CvT model)"),Iye.forEach(t),G0o=i($),Kp=n($,"LI",{});var Nye=s(Kp);Ede=n(Nye,"STRONG",{});var vct=s(Ede);O0o=r(vct,"data2vec-audio"),vct.forEach(t),V0o=r(Nye," \u2014 "),Rq=n(Nye,"A",{href:!0});var Fct=s(Rq);X0o=r(Fct,"Data2VecAudioModel"),Fct.forEach(t),z0o=r(Nye," (Data2VecAudio model)"),Nye.forEach(t),W0o=i($),Zp=n($,"LI",{});var qye=s(Zp);Cde=n(qye,"STRONG",{});var Tct=s(Cde);Q0o=r(Tct,"data2vec-text"),Tct.forEach(t),H0o=r(qye," \u2014 "),Pq=n(qye,"A",{href:!0});var Mct=s(Pq);U0o=r(Mct,"Data2VecTextModel"),Mct.forEach(t),J0o=r(qye," (Data2VecText model)"),qye.forEach(t),Y0o=i($),e_=n($,"LI",{});var jye=s(e_);wde=n(jye,"STRONG",{});var Ect=s(wde);K0o=r(Ect,"data2vec-vision"),Ect.forEach(t),Z0o=r(jye," \u2014 "),Bq=n(jye,"A",{href:!0});var Cct=s(Bq);eFo=r(Cct,"Data2VecVisionModel"),Cct.forEach(t),oFo=r(jye," (Data2VecVision model)"),jye.forEach(t),rFo=i($),o_=n($,"LI",{});var Dye=s(o_);Ade=n(Dye,"STRONG",{});var wct=s(Ade);tFo=r(wct,"deberta"),wct.forEach(t),aFo=r(Dye," \u2014 "),Iq=n(Dye,"A",{href:!0});var Act=s(Iq);nFo=r(Act,"DebertaModel"),Act.forEach(t),sFo=r(Dye," (DeBERTa model)"),Dye.forEach(t),lFo=i($),r_=n($,"LI",{});var Gye=s(r_);Lde=n(Gye,"STRONG",{});var Lct=s(Lde);iFo=r(Lct,"deberta-v2"),Lct.forEach(t),dFo=r(Gye," \u2014 "),Nq=n(Gye,"A",{href:!0});var yct=s(Nq);cFo=r(yct,"DebertaV2Model"),yct.forEach(t),fFo=r(Gye," (DeBERTa-v2 model)"),Gye.forEach(t),mFo=i($),t_=n($,"LI",{});var Oye=s(t_);yde=n(Oye,"STRONG",{});var xct=s(yde);gFo=r(xct,"decision_transformer"),xct.forEach(t),hFo=r(Oye," \u2014 "),qq=n(Oye,"A",{href:!0});var $ct=s(qq);pFo=r($ct,"DecisionTransformerModel"),$ct.forEach(t),_Fo=r(Oye," (Decision Transformer model)"),Oye.forEach(t),uFo=i($),a_=n($,"LI",{});var Vye=s(a_);xde=n(Vye,"STRONG",{});var kct=s(xde);bFo=r(kct,"deit"),kct.forEach(t),vFo=r(Vye," \u2014 "),jq=n(Vye,"A",{href:!0});var Sct=s(jq);FFo=r(Sct,"DeiTModel"),Sct.forEach(t),TFo=r(Vye," (DeiT model)"),Vye.forEach(t),MFo=i($),n_=n($,"LI",{});var Xye=s(n_);$de=n(Xye,"STRONG",{});var Rct=s($de);EFo=r(Rct,"detr"),Rct.forEach(t),CFo=r(Xye," \u2014 "),Dq=n(Xye,"A",{href:!0});var Pct=s(Dq);wFo=r(Pct,"DetrModel"),Pct.forEach(t),AFo=r(Xye," (DETR model)"),Xye.forEach(t),LFo=i($),s_=n($,"LI",{});var zye=s(s_);kde=n(zye,"STRONG",{});var Bct=s(kde);yFo=r(Bct,"distilbert"),Bct.forEach(t),xFo=r(zye," \u2014 "),Gq=n(zye,"A",{href:!0});var Ict=s(Gq);$Fo=r(Ict,"DistilBertModel"),Ict.forEach(t),kFo=r(zye," (DistilBERT model)"),zye.forEach(t),SFo=i($),l_=n($,"LI",{});var Wye=s(l_);Sde=n(Wye,"STRONG",{});var Nct=s(Sde);RFo=r(Nct,"dpr"),Nct.forEach(t),PFo=r(Wye," \u2014 "),Oq=n(Wye,"A",{href:!0});var qct=s(Oq);BFo=r(qct,"DPRQuestionEncoder"),qct.forEach(t),IFo=r(Wye," (DPR model)"),Wye.forEach(t),NFo=i($),i_=n($,"LI",{});var Qye=s(i_);Rde=n(Qye,"STRONG",{});var jct=s(Rde);qFo=r(jct,"dpt"),jct.forEach(t),jFo=r(Qye," \u2014 "),Vq=n(Qye,"A",{href:!0});var Dct=s(Vq);DFo=r(Dct,"DPTModel"),Dct.forEach(t),GFo=r(Qye," (DPT model)"),Qye.forEach(t),OFo=i($),d_=n($,"LI",{});var Hye=s(d_);Pde=n(Hye,"STRONG",{});var Gct=s(Pde);VFo=r(Gct,"electra"),Gct.forEach(t),XFo=r(Hye," \u2014 "),Xq=n(Hye,"A",{href:!0});var Oct=s(Xq);zFo=r(Oct,"ElectraModel"),Oct.forEach(t),WFo=r(Hye," (ELECTRA model)"),Hye.forEach(t),QFo=i($),c_=n($,"LI",{});var Uye=s(c_);Bde=n(Uye,"STRONG",{});var Vct=s(Bde);HFo=r(Vct,"flaubert"),Vct.forEach(t),UFo=r(Uye," \u2014 "),zq=n(Uye,"A",{href:!0});var Xct=s(zq);JFo=r(Xct,"FlaubertModel"),Xct.forEach(t),YFo=r(Uye," (FlauBERT model)"),Uye.forEach(t),KFo=i($),f_=n($,"LI",{});var Jye=s(f_);Ide=n(Jye,"STRONG",{});var zct=s(Ide);ZFo=r(zct,"flava"),zct.forEach(t),e6o=r(Jye," \u2014 "),Wq=n(Jye,"A",{href:!0});var Wct=s(Wq);o6o=r(Wct,"FlavaModel"),Wct.forEach(t),r6o=r(Jye," (FLAVA model)"),Jye.forEach(t),t6o=i($),m_=n($,"LI",{});var Yye=s(m_);Nde=n(Yye,"STRONG",{});var Qct=s(Nde);a6o=r(Qct,"fnet"),Qct.forEach(t),n6o=r(Yye," \u2014 "),Qq=n(Yye,"A",{href:!0});var Hct=s(Qq);s6o=r(Hct,"FNetModel"),Hct.forEach(t),l6o=r(Yye," (FNet model)"),Yye.forEach(t),i6o=i($),g_=n($,"LI",{});var Kye=s(g_);qde=n(Kye,"STRONG",{});var Uct=s(qde);d6o=r(Uct,"fsmt"),Uct.forEach(t),c6o=r(Kye," \u2014 "),Hq=n(Kye,"A",{href:!0});var Jct=s(Hq);f6o=r(Jct,"FSMTModel"),Jct.forEach(t),m6o=r(Kye," (FairSeq Machine-Translation model)"),Kye.forEach(t),g6o=i($),Xs=n($,"LI",{});var nS=s(Xs);jde=n(nS,"STRONG",{});var Yct=s(jde);h6o=r(Yct,"funnel"),Yct.forEach(t),p6o=r(nS," \u2014 "),Uq=n(nS,"A",{href:!0});var Kct=s(Uq);_6o=r(Kct,"FunnelModel"),Kct.forEach(t),u6o=r(nS," or "),Jq=n(nS,"A",{href:!0});var Zct=s(Jq);b6o=r(Zct,"FunnelBaseModel"),Zct.forEach(t),v6o=r(nS," (Funnel Transformer model)"),nS.forEach(t),F6o=i($),h_=n($,"LI",{});var Zye=s(h_);Dde=n(Zye,"STRONG",{});var eft=s(Dde);T6o=r(eft,"glpn"),eft.forEach(t),M6o=r(Zye," \u2014 "),Yq=n(Zye,"A",{href:!0});var oft=s(Yq);E6o=r(oft,"GLPNModel"),oft.forEach(t),C6o=r(Zye," (GLPN model)"),Zye.forEach(t),w6o=i($),p_=n($,"LI",{});var e9e=s(p_);Gde=n(e9e,"STRONG",{});var rft=s(Gde);A6o=r(rft,"gpt2"),rft.forEach(t),L6o=r(e9e," \u2014 "),Kq=n(e9e,"A",{href:!0});var tft=s(Kq);y6o=r(tft,"GPT2Model"),tft.forEach(t),x6o=r(e9e," (OpenAI GPT-2 model)"),e9e.forEach(t),$6o=i($),__=n($,"LI",{});var o9e=s(__);Ode=n(o9e,"STRONG",{});var aft=s(Ode);k6o=r(aft,"gpt_neo"),aft.forEach(t),S6o=r(o9e," \u2014 "),Zq=n(o9e,"A",{href:!0});var nft=s(Zq);R6o=r(nft,"GPTNeoModel"),nft.forEach(t),P6o=r(o9e," (GPT Neo model)"),o9e.forEach(t),B6o=i($),u_=n($,"LI",{});var r9e=s(u_);Vde=n(r9e,"STRONG",{});var sft=s(Vde);I6o=r(sft,"gpt_neox"),sft.forEach(t),N6o=r(r9e," \u2014 "),ej=n(r9e,"A",{href:!0});var lft=s(ej);q6o=r(lft,"GPTNeoXModel"),lft.forEach(t),j6o=r(r9e," (GPT NeoX model)"),r9e.forEach(t),D6o=i($),b_=n($,"LI",{});var t9e=s(b_);Xde=n(t9e,"STRONG",{});var ift=s(Xde);G6o=r(ift,"gptj"),ift.forEach(t),O6o=r(t9e," \u2014 "),oj=n(t9e,"A",{href:!0});var dft=s(oj);V6o=r(dft,"GPTJModel"),dft.forEach(t),X6o=r(t9e," (GPT-J model)"),t9e.forEach(t),z6o=i($),v_=n($,"LI",{});var a9e=s(v_);zde=n(a9e,"STRONG",{});var cft=s(zde);W6o=r(cft,"hubert"),cft.forEach(t),Q6o=r(a9e," \u2014 "),rj=n(a9e,"A",{href:!0});var fft=s(rj);H6o=r(fft,"HubertModel"),fft.forEach(t),U6o=r(a9e," (Hubert model)"),a9e.forEach(t),J6o=i($),F_=n($,"LI",{});var n9e=s(F_);Wde=n(n9e,"STRONG",{});var mft=s(Wde);Y6o=r(mft,"ibert"),mft.forEach(t),K6o=r(n9e," \u2014 "),tj=n(n9e,"A",{href:!0});var gft=s(tj);Z6o=r(gft,"IBertModel"),gft.forEach(t),eTo=r(n9e," (I-BERT model)"),n9e.forEach(t),oTo=i($),T_=n($,"LI",{});var s9e=s(T_);Qde=n(s9e,"STRONG",{});var hft=s(Qde);rTo=r(hft,"imagegpt"),hft.forEach(t),tTo=r(s9e," \u2014 "),aj=n(s9e,"A",{href:!0});var pft=s(aj);aTo=r(pft,"ImageGPTModel"),pft.forEach(t),nTo=r(s9e," (ImageGPT model)"),s9e.forEach(t),sTo=i($),M_=n($,"LI",{});var l9e=s(M_);Hde=n(l9e,"STRONG",{});var _ft=s(Hde);lTo=r(_ft,"layoutlm"),_ft.forEach(t),iTo=r(l9e," \u2014 "),nj=n(l9e,"A",{href:!0});var uft=s(nj);dTo=r(uft,"LayoutLMModel"),uft.forEach(t),cTo=r(l9e," (LayoutLM model)"),l9e.forEach(t),fTo=i($),E_=n($,"LI",{});var i9e=s(E_);Ude=n(i9e,"STRONG",{});var bft=s(Ude);mTo=r(bft,"layoutlmv2"),bft.forEach(t),gTo=r(i9e," \u2014 "),sj=n(i9e,"A",{href:!0});var vft=s(sj);hTo=r(vft,"LayoutLMv2Model"),vft.forEach(t),pTo=r(i9e," (LayoutLMv2 model)"),i9e.forEach(t),_To=i($),C_=n($,"LI",{});var d9e=s(C_);Jde=n(d9e,"STRONG",{});var Fft=s(Jde);uTo=r(Fft,"layoutlmv3"),Fft.forEach(t),bTo=r(d9e," \u2014 "),lj=n(d9e,"A",{href:!0});var Tft=s(lj);vTo=r(Tft,"LayoutLMv3Model"),Tft.forEach(t),FTo=r(d9e," (LayoutLMv3 model)"),d9e.forEach(t),TTo=i($),w_=n($,"LI",{});var c9e=s(w_);Yde=n(c9e,"STRONG",{});var Mft=s(Yde);MTo=r(Mft,"led"),Mft.forEach(t),ETo=r(c9e," \u2014 "),ij=n(c9e,"A",{href:!0});var Eft=s(ij);CTo=r(Eft,"LEDModel"),Eft.forEach(t),wTo=r(c9e," (LED model)"),c9e.forEach(t),ATo=i($),A_=n($,"LI",{});var f9e=s(A_);Kde=n(f9e,"STRONG",{});var Cft=s(Kde);LTo=r(Cft,"levit"),Cft.forEach(t),yTo=r(f9e," \u2014 "),dj=n(f9e,"A",{href:!0});var wft=s(dj);xTo=r(wft,"LevitModel"),wft.forEach(t),$To=r(f9e," (LeViT model)"),f9e.forEach(t),kTo=i($),L_=n($,"LI",{});var m9e=s(L_);Zde=n(m9e,"STRONG",{});var Aft=s(Zde);STo=r(Aft,"longformer"),Aft.forEach(t),RTo=r(m9e," \u2014 "),cj=n(m9e,"A",{href:!0});var Lft=s(cj);PTo=r(Lft,"LongformerModel"),Lft.forEach(t),BTo=r(m9e," (Longformer model)"),m9e.forEach(t),ITo=i($),y_=n($,"LI",{});var g9e=s(y_);ece=n(g9e,"STRONG",{});var yft=s(ece);NTo=r(yft,"longt5"),yft.forEach(t),qTo=r(g9e," \u2014 "),fj=n(g9e,"A",{href:!0});var xft=s(fj);jTo=r(xft,"LongT5Model"),xft.forEach(t),DTo=r(g9e," (LongT5 model)"),g9e.forEach(t),GTo=i($),x_=n($,"LI",{});var h9e=s(x_);oce=n(h9e,"STRONG",{});var $ft=s(oce);OTo=r($ft,"luke"),$ft.forEach(t),VTo=r(h9e," \u2014 "),mj=n(h9e,"A",{href:!0});var kft=s(mj);XTo=r(kft,"LukeModel"),kft.forEach(t),zTo=r(h9e," (LUKE model)"),h9e.forEach(t),WTo=i($),$_=n($,"LI",{});var p9e=s($_);rce=n(p9e,"STRONG",{});var Sft=s(rce);QTo=r(Sft,"lxmert"),Sft.forEach(t),HTo=r(p9e," \u2014 "),gj=n(p9e,"A",{href:!0});var Rft=s(gj);UTo=r(Rft,"LxmertModel"),Rft.forEach(t),JTo=r(p9e," (LXMERT model)"),p9e.forEach(t),YTo=i($),k_=n($,"LI",{});var _9e=s(k_);tce=n(_9e,"STRONG",{});var Pft=s(tce);KTo=r(Pft,"m2m_100"),Pft.forEach(t),ZTo=r(_9e," \u2014 "),hj=n(_9e,"A",{href:!0});var Bft=s(hj);e7o=r(Bft,"M2M100Model"),Bft.forEach(t),o7o=r(_9e," (M2M100 model)"),_9e.forEach(t),r7o=i($),S_=n($,"LI",{});var u9e=s(S_);ace=n(u9e,"STRONG",{});var Ift=s(ace);t7o=r(Ift,"marian"),Ift.forEach(t),a7o=r(u9e," \u2014 "),pj=n(u9e,"A",{href:!0});var Nft=s(pj);n7o=r(Nft,"MarianModel"),Nft.forEach(t),s7o=r(u9e," (Marian model)"),u9e.forEach(t),l7o=i($),R_=n($,"LI",{});var b9e=s(R_);nce=n(b9e,"STRONG",{});var qft=s(nce);i7o=r(qft,"maskformer"),qft.forEach(t),d7o=r(b9e," \u2014 "),_j=n(b9e,"A",{href:!0});var jft=s(_j);c7o=r(jft,"MaskFormerModel"),jft.forEach(t),f7o=r(b9e," (MaskFormer model)"),b9e.forEach(t),m7o=i($),P_=n($,"LI",{});var v9e=s(P_);sce=n(v9e,"STRONG",{});var Dft=s(sce);g7o=r(Dft,"mbart"),Dft.forEach(t),h7o=r(v9e," \u2014 "),uj=n(v9e,"A",{href:!0});var Gft=s(uj);p7o=r(Gft,"MBartModel"),Gft.forEach(t),_7o=r(v9e," (mBART model)"),v9e.forEach(t),u7o=i($),B_=n($,"LI",{});var F9e=s(B_);lce=n(F9e,"STRONG",{});var Oft=s(lce);b7o=r(Oft,"mctct"),Oft.forEach(t),v7o=r(F9e," \u2014 "),bj=n(F9e,"A",{href:!0});var Vft=s(bj);F7o=r(Vft,"MCTCTModel"),Vft.forEach(t),T7o=r(F9e," (M-CTC-T model)"),F9e.forEach(t),M7o=i($),I_=n($,"LI",{});var T9e=s(I_);ice=n(T9e,"STRONG",{});var Xft=s(ice);E7o=r(Xft,"megatron-bert"),Xft.forEach(t),C7o=r(T9e," \u2014 "),vj=n(T9e,"A",{href:!0});var zft=s(vj);w7o=r(zft,"MegatronBertModel"),zft.forEach(t),A7o=r(T9e," (Megatron-BERT model)"),T9e.forEach(t),L7o=i($),N_=n($,"LI",{});var M9e=s(N_);dce=n(M9e,"STRONG",{});var Wft=s(dce);y7o=r(Wft,"mobilebert"),Wft.forEach(t),x7o=r(M9e," \u2014 "),Fj=n(M9e,"A",{href:!0});var Qft=s(Fj);$7o=r(Qft,"MobileBertModel"),Qft.forEach(t),k7o=r(M9e," (MobileBERT model)"),M9e.forEach(t),S7o=i($),q_=n($,"LI",{});var E9e=s(q_);cce=n(E9e,"STRONG",{});var Hft=s(cce);R7o=r(Hft,"mpnet"),Hft.forEach(t),P7o=r(E9e," \u2014 "),Tj=n(E9e,"A",{href:!0});var Uft=s(Tj);B7o=r(Uft,"MPNetModel"),Uft.forEach(t),I7o=r(E9e," (MPNet model)"),E9e.forEach(t),N7o=i($),j_=n($,"LI",{});var C9e=s(j_);fce=n(C9e,"STRONG",{});var Jft=s(fce);q7o=r(Jft,"mt5"),Jft.forEach(t),j7o=r(C9e," \u2014 "),Mj=n(C9e,"A",{href:!0});var Yft=s(Mj);D7o=r(Yft,"MT5Model"),Yft.forEach(t),G7o=r(C9e," (MT5 model)"),C9e.forEach(t),O7o=i($),D_=n($,"LI",{});var w9e=s(D_);mce=n(w9e,"STRONG",{});var Kft=s(mce);V7o=r(Kft,"nezha"),Kft.forEach(t),X7o=r(w9e," \u2014 "),Ej=n(w9e,"A",{href:!0});var Zft=s(Ej);z7o=r(Zft,"NezhaModel"),Zft.forEach(t),W7o=r(w9e," (Nezha model)"),w9e.forEach(t),Q7o=i($),G_=n($,"LI",{});var A9e=s(G_);gce=n(A9e,"STRONG",{});var emt=s(gce);H7o=r(emt,"nystromformer"),emt.forEach(t),U7o=r(A9e," \u2014 "),Cj=n(A9e,"A",{href:!0});var omt=s(Cj);J7o=r(omt,"NystromformerModel"),omt.forEach(t),Y7o=r(A9e," (Nystr\xF6mformer model)"),A9e.forEach(t),K7o=i($),O_=n($,"LI",{});var L9e=s(O_);hce=n(L9e,"STRONG",{});var rmt=s(hce);Z7o=r(rmt,"openai-gpt"),rmt.forEach(t),e8o=r(L9e," \u2014 "),wj=n(L9e,"A",{href:!0});var tmt=s(wj);o8o=r(tmt,"OpenAIGPTModel"),tmt.forEach(t),r8o=r(L9e," (OpenAI GPT model)"),L9e.forEach(t),t8o=i($),V_=n($,"LI",{});var y9e=s(V_);pce=n(y9e,"STRONG",{});var amt=s(pce);a8o=r(amt,"opt"),amt.forEach(t),n8o=r(y9e," \u2014 "),Aj=n(y9e,"A",{href:!0});var nmt=s(Aj);s8o=r(nmt,"OPTModel"),nmt.forEach(t),l8o=r(y9e," (OPT model)"),y9e.forEach(t),i8o=i($),X_=n($,"LI",{});var x9e=s(X_);_ce=n(x9e,"STRONG",{});var smt=s(_ce);d8o=r(smt,"pegasus"),smt.forEach(t),c8o=r(x9e," \u2014 "),Lj=n(x9e,"A",{href:!0});var lmt=s(Lj);f8o=r(lmt,"PegasusModel"),lmt.forEach(t),m8o=r(x9e," (Pegasus model)"),x9e.forEach(t),g8o=i($),z_=n($,"LI",{});var $9e=s(z_);uce=n($9e,"STRONG",{});var imt=s(uce);h8o=r(imt,"perceiver"),imt.forEach(t),p8o=r($9e," \u2014 "),yj=n($9e,"A",{href:!0});var dmt=s(yj);_8o=r(dmt,"PerceiverModel"),dmt.forEach(t),u8o=r($9e," (Perceiver model)"),$9e.forEach(t),b8o=i($),W_=n($,"LI",{});var k9e=s(W_);bce=n(k9e,"STRONG",{});var cmt=s(bce);v8o=r(cmt,"plbart"),cmt.forEach(t),F8o=r(k9e," \u2014 "),xj=n(k9e,"A",{href:!0});var fmt=s(xj);T8o=r(fmt,"PLBartModel"),fmt.forEach(t),M8o=r(k9e," (PLBart model)"),k9e.forEach(t),E8o=i($),Q_=n($,"LI",{});var S9e=s(Q_);vce=n(S9e,"STRONG",{});var mmt=s(vce);C8o=r(mmt,"poolformer"),mmt.forEach(t),w8o=r(S9e," \u2014 "),$j=n(S9e,"A",{href:!0});var gmt=s($j);A8o=r(gmt,"PoolFormerModel"),gmt.forEach(t),L8o=r(S9e," (PoolFormer model)"),S9e.forEach(t),y8o=i($),H_=n($,"LI",{});var R9e=s(H_);Fce=n(R9e,"STRONG",{});var hmt=s(Fce);x8o=r(hmt,"prophetnet"),hmt.forEach(t),$8o=r(R9e," \u2014 "),kj=n(R9e,"A",{href:!0});var pmt=s(kj);k8o=r(pmt,"ProphetNetModel"),pmt.forEach(t),S8o=r(R9e," (ProphetNet model)"),R9e.forEach(t),R8o=i($),U_=n($,"LI",{});var P9e=s(U_);Tce=n(P9e,"STRONG",{});var _mt=s(Tce);P8o=r(_mt,"qdqbert"),_mt.forEach(t),B8o=r(P9e," \u2014 "),Sj=n(P9e,"A",{href:!0});var umt=s(Sj);I8o=r(umt,"QDQBertModel"),umt.forEach(t),N8o=r(P9e," (QDQBert model)"),P9e.forEach(t),q8o=i($),J_=n($,"LI",{});var B9e=s(J_);Mce=n(B9e,"STRONG",{});var bmt=s(Mce);j8o=r(bmt,"reformer"),bmt.forEach(t),D8o=r(B9e," \u2014 "),Rj=n(B9e,"A",{href:!0});var vmt=s(Rj);G8o=r(vmt,"ReformerModel"),vmt.forEach(t),O8o=r(B9e," (Reformer model)"),B9e.forEach(t),V8o=i($),Y_=n($,"LI",{});var I9e=s(Y_);Ece=n(I9e,"STRONG",{});var Fmt=s(Ece);X8o=r(Fmt,"regnet"),Fmt.forEach(t),z8o=r(I9e," \u2014 "),Pj=n(I9e,"A",{href:!0});var Tmt=s(Pj);W8o=r(Tmt,"RegNetModel"),Tmt.forEach(t),Q8o=r(I9e," (RegNet model)"),I9e.forEach(t),H8o=i($),K_=n($,"LI",{});var N9e=s(K_);Cce=n(N9e,"STRONG",{});var Mmt=s(Cce);U8o=r(Mmt,"rembert"),Mmt.forEach(t),J8o=r(N9e," \u2014 "),Bj=n(N9e,"A",{href:!0});var Emt=s(Bj);Y8o=r(Emt,"RemBertModel"),Emt.forEach(t),K8o=r(N9e," (RemBERT model)"),N9e.forEach(t),Z8o=i($),Z_=n($,"LI",{});var q9e=s(Z_);wce=n(q9e,"STRONG",{});var Cmt=s(wce);eMo=r(Cmt,"resnet"),Cmt.forEach(t),oMo=r(q9e," \u2014 "),Ij=n(q9e,"A",{href:!0});var wmt=s(Ij);rMo=r(wmt,"ResNetModel"),wmt.forEach(t),tMo=r(q9e," (ResNet model)"),q9e.forEach(t),aMo=i($),eu=n($,"LI",{});var j9e=s(eu);Ace=n(j9e,"STRONG",{});var Amt=s(Ace);nMo=r(Amt,"retribert"),Amt.forEach(t),sMo=r(j9e," \u2014 "),Nj=n(j9e,"A",{href:!0});var Lmt=s(Nj);lMo=r(Lmt,"RetriBertModel"),Lmt.forEach(t),iMo=r(j9e," (RetriBERT model)"),j9e.forEach(t),dMo=i($),ou=n($,"LI",{});var D9e=s(ou);Lce=n(D9e,"STRONG",{});var ymt=s(Lce);cMo=r(ymt,"roberta"),ymt.forEach(t),fMo=r(D9e," \u2014 "),qj=n(D9e,"A",{href:!0});var xmt=s(qj);mMo=r(xmt,"RobertaModel"),xmt.forEach(t),gMo=r(D9e," (RoBERTa model)"),D9e.forEach(t),hMo=i($),ru=n($,"LI",{});var G9e=s(ru);yce=n(G9e,"STRONG",{});var $mt=s(yce);pMo=r($mt,"roformer"),$mt.forEach(t),_Mo=r(G9e," \u2014 "),jj=n(G9e,"A",{href:!0});var kmt=s(jj);uMo=r(kmt,"RoFormerModel"),kmt.forEach(t),bMo=r(G9e," (RoFormer model)"),G9e.forEach(t),vMo=i($),tu=n($,"LI",{});var O9e=s(tu);xce=n(O9e,"STRONG",{});var Smt=s(xce);FMo=r(Smt,"segformer"),Smt.forEach(t),TMo=r(O9e," \u2014 "),Dj=n(O9e,"A",{href:!0});var Rmt=s(Dj);MMo=r(Rmt,"SegformerModel"),Rmt.forEach(t),EMo=r(O9e," (SegFormer model)"),O9e.forEach(t),CMo=i($),au=n($,"LI",{});var V9e=s(au);$ce=n(V9e,"STRONG",{});var Pmt=s($ce);wMo=r(Pmt,"sew"),Pmt.forEach(t),AMo=r(V9e," \u2014 "),Gj=n(V9e,"A",{href:!0});var Bmt=s(Gj);LMo=r(Bmt,"SEWModel"),Bmt.forEach(t),yMo=r(V9e," (SEW model)"),V9e.forEach(t),xMo=i($),nu=n($,"LI",{});var X9e=s(nu);kce=n(X9e,"STRONG",{});var Imt=s(kce);$Mo=r(Imt,"sew-d"),Imt.forEach(t),kMo=r(X9e," \u2014 "),Oj=n(X9e,"A",{href:!0});var Nmt=s(Oj);SMo=r(Nmt,"SEWDModel"),Nmt.forEach(t),RMo=r(X9e," (SEW-D model)"),X9e.forEach(t),PMo=i($),su=n($,"LI",{});var z9e=s(su);Sce=n(z9e,"STRONG",{});var qmt=s(Sce);BMo=r(qmt,"speech_to_text"),qmt.forEach(t),IMo=r(z9e," \u2014 "),Vj=n(z9e,"A",{href:!0});var jmt=s(Vj);NMo=r(jmt,"Speech2TextModel"),jmt.forEach(t),qMo=r(z9e," (Speech2Text model)"),z9e.forEach(t),jMo=i($),lu=n($,"LI",{});var W9e=s(lu);Rce=n(W9e,"STRONG",{});var Dmt=s(Rce);DMo=r(Dmt,"splinter"),Dmt.forEach(t),GMo=r(W9e," \u2014 "),Xj=n(W9e,"A",{href:!0});var Gmt=s(Xj);OMo=r(Gmt,"SplinterModel"),Gmt.forEach(t),VMo=r(W9e," (Splinter model)"),W9e.forEach(t),XMo=i($),iu=n($,"LI",{});var Q9e=s(iu);Pce=n(Q9e,"STRONG",{});var Omt=s(Pce);zMo=r(Omt,"squeezebert"),Omt.forEach(t),WMo=r(Q9e," \u2014 "),zj=n(Q9e,"A",{href:!0});var Vmt=s(zj);QMo=r(Vmt,"SqueezeBertModel"),Vmt.forEach(t),HMo=r(Q9e," (SqueezeBERT model)"),Q9e.forEach(t),UMo=i($),du=n($,"LI",{});var H9e=s(du);Bce=n(H9e,"STRONG",{});var Xmt=s(Bce);JMo=r(Xmt,"swin"),Xmt.forEach(t),YMo=r(H9e," \u2014 "),Wj=n(H9e,"A",{href:!0});var zmt=s(Wj);KMo=r(zmt,"SwinModel"),zmt.forEach(t),ZMo=r(H9e," (Swin Transformer model)"),H9e.forEach(t),eEo=i($),cu=n($,"LI",{});var U9e=s(cu);Ice=n(U9e,"STRONG",{});var Wmt=s(Ice);oEo=r(Wmt,"t5"),Wmt.forEach(t),rEo=r(U9e," \u2014 "),Qj=n(U9e,"A",{href:!0});var Qmt=s(Qj);tEo=r(Qmt,"T5Model"),Qmt.forEach(t),aEo=r(U9e," (T5 model)"),U9e.forEach(t),nEo=i($),fu=n($,"LI",{});var J9e=s(fu);Nce=n(J9e,"STRONG",{});var Hmt=s(Nce);sEo=r(Hmt,"tapas"),Hmt.forEach(t),lEo=r(J9e," \u2014 "),Hj=n(J9e,"A",{href:!0});var Umt=s(Hj);iEo=r(Umt,"TapasModel"),Umt.forEach(t),dEo=r(J9e," (TAPAS model)"),J9e.forEach(t),cEo=i($),mu=n($,"LI",{});var Y9e=s(mu);qce=n(Y9e,"STRONG",{});var Jmt=s(qce);fEo=r(Jmt,"trajectory_transformer"),Jmt.forEach(t),mEo=r(Y9e," \u2014 "),Uj=n(Y9e,"A",{href:!0});var Ymt=s(Uj);gEo=r(Ymt,"TrajectoryTransformerModel"),Ymt.forEach(t),hEo=r(Y9e," (Trajectory Transformer model)"),Y9e.forEach(t),pEo=i($),gu=n($,"LI",{});var K9e=s(gu);jce=n(K9e,"STRONG",{});var Kmt=s(jce);_Eo=r(Kmt,"transfo-xl"),Kmt.forEach(t),uEo=r(K9e," \u2014 "),Jj=n(K9e,"A",{href:!0});var Zmt=s(Jj);bEo=r(Zmt,"TransfoXLModel"),Zmt.forEach(t),vEo=r(K9e," (Transformer-XL model)"),K9e.forEach(t),FEo=i($),hu=n($,"LI",{});var Z9e=s(hu);Dce=n(Z9e,"STRONG",{});var egt=s(Dce);TEo=r(egt,"unispeech"),egt.forEach(t),MEo=r(Z9e," \u2014 "),Yj=n(Z9e,"A",{href:!0});var ogt=s(Yj);EEo=r(ogt,"UniSpeechModel"),ogt.forEach(t),CEo=r(Z9e," (UniSpeech model)"),Z9e.forEach(t),wEo=i($),pu=n($,"LI",{});var exe=s(pu);Gce=n(exe,"STRONG",{});var rgt=s(Gce);AEo=r(rgt,"unispeech-sat"),rgt.forEach(t),LEo=r(exe," \u2014 "),Kj=n(exe,"A",{href:!0});var tgt=s(Kj);yEo=r(tgt,"UniSpeechSatModel"),tgt.forEach(t),xEo=r(exe," (UniSpeechSat model)"),exe.forEach(t),$Eo=i($),_u=n($,"LI",{});var oxe=s(_u);Oce=n(oxe,"STRONG",{});var agt=s(Oce);kEo=r(agt,"van"),agt.forEach(t),SEo=r(oxe," \u2014 "),Zj=n(oxe,"A",{href:!0});var ngt=s(Zj);REo=r(ngt,"VanModel"),ngt.forEach(t),PEo=r(oxe," (VAN model)"),oxe.forEach(t),BEo=i($),uu=n($,"LI",{});var rxe=s(uu);Vce=n(rxe,"STRONG",{});var sgt=s(Vce);IEo=r(sgt,"vilt"),sgt.forEach(t),NEo=r(rxe," \u2014 "),eD=n(rxe,"A",{href:!0});var lgt=s(eD);qEo=r(lgt,"ViltModel"),lgt.forEach(t),jEo=r(rxe," (ViLT model)"),rxe.forEach(t),DEo=i($),bu=n($,"LI",{});var txe=s(bu);Xce=n(txe,"STRONG",{});var igt=s(Xce);GEo=r(igt,"vision-text-dual-encoder"),igt.forEach(t),OEo=r(txe," \u2014 "),oD=n(txe,"A",{href:!0});var dgt=s(oD);VEo=r(dgt,"VisionTextDualEncoderModel"),dgt.forEach(t),XEo=r(txe," (VisionTextDualEncoder model)"),txe.forEach(t),zEo=i($),vu=n($,"LI",{});var axe=s(vu);zce=n(axe,"STRONG",{});var cgt=s(zce);WEo=r(cgt,"visual_bert"),cgt.forEach(t),QEo=r(axe," \u2014 "),rD=n(axe,"A",{href:!0});var fgt=s(rD);HEo=r(fgt,"VisualBertModel"),fgt.forEach(t),UEo=r(axe," (VisualBERT model)"),axe.forEach(t),JEo=i($),Fu=n($,"LI",{});var nxe=s(Fu);Wce=n(nxe,"STRONG",{});var mgt=s(Wce);YEo=r(mgt,"vit"),mgt.forEach(t),KEo=r(nxe," \u2014 "),tD=n(nxe,"A",{href:!0});var ggt=s(tD);ZEo=r(ggt,"ViTModel"),ggt.forEach(t),e4o=r(nxe," (ViT model)"),nxe.forEach(t),o4o=i($),Tu=n($,"LI",{});var sxe=s(Tu);Qce=n(sxe,"STRONG",{});var hgt=s(Qce);r4o=r(hgt,"vit_mae"),hgt.forEach(t),t4o=r(sxe," \u2014 "),aD=n(sxe,"A",{href:!0});var pgt=s(aD);a4o=r(pgt,"ViTMAEModel"),pgt.forEach(t),n4o=r(sxe," (ViTMAE model)"),sxe.forEach(t),s4o=i($),Mu=n($,"LI",{});var lxe=s(Mu);Hce=n(lxe,"STRONG",{});var _gt=s(Hce);l4o=r(_gt,"wav2vec2"),_gt.forEach(t),i4o=r(lxe," \u2014 "),nD=n(lxe,"A",{href:!0});var ugt=s(nD);d4o=r(ugt,"Wav2Vec2Model"),ugt.forEach(t),c4o=r(lxe," (Wav2Vec2 model)"),lxe.forEach(t),f4o=i($),Eu=n($,"LI",{});var ixe=s(Eu);Uce=n(ixe,"STRONG",{});var bgt=s(Uce);m4o=r(bgt,"wav2vec2-conformer"),bgt.forEach(t),g4o=r(ixe," \u2014 "),sD=n(ixe,"A",{href:!0});var vgt=s(sD);h4o=r(vgt,"Wav2Vec2ConformerModel"),vgt.forEach(t),p4o=r(ixe," (Wav2Vec2-Conformer model)"),ixe.forEach(t),_4o=i($),Cu=n($,"LI",{});var dxe=s(Cu);Jce=n(dxe,"STRONG",{});var Fgt=s(Jce);u4o=r(Fgt,"wavlm"),Fgt.forEach(t),b4o=r(dxe," \u2014 "),lD=n(dxe,"A",{href:!0});var Tgt=s(lD);v4o=r(Tgt,"WavLMModel"),Tgt.forEach(t),F4o=r(dxe," (WavLM model)"),dxe.forEach(t),T4o=i($),wu=n($,"LI",{});var cxe=s(wu);Yce=n(cxe,"STRONG",{});var Mgt=s(Yce);M4o=r(Mgt,"xglm"),Mgt.forEach(t),E4o=r(cxe," \u2014 "),iD=n(cxe,"A",{href:!0});var Egt=s(iD);C4o=r(Egt,"XGLMModel"),Egt.forEach(t),w4o=r(cxe," (XGLM model)"),cxe.forEach(t),A4o=i($),Au=n($,"LI",{});var fxe=s(Au);Kce=n(fxe,"STRONG",{});var Cgt=s(Kce);L4o=r(Cgt,"xlm"),Cgt.forEach(t),y4o=r(fxe," \u2014 "),dD=n(fxe,"A",{href:!0});var wgt=s(dD);x4o=r(wgt,"XLMModel"),wgt.forEach(t),$4o=r(fxe," (XLM model)"),fxe.forEach(t),k4o=i($),Lu=n($,"LI",{});var mxe=s(Lu);Zce=n(mxe,"STRONG",{});var Agt=s(Zce);S4o=r(Agt,"xlm-prophetnet"),Agt.forEach(t),R4o=r(mxe," \u2014 "),cD=n(mxe,"A",{href:!0});var Lgt=s(cD);P4o=r(Lgt,"XLMProphetNetModel"),Lgt.forEach(t),B4o=r(mxe," (XLM-ProphetNet model)"),mxe.forEach(t),I4o=i($),yu=n($,"LI",{});var gxe=s(yu);efe=n(gxe,"STRONG",{});var ygt=s(efe);N4o=r(ygt,"xlm-roberta"),ygt.forEach(t),q4o=r(gxe," \u2014 "),fD=n(gxe,"A",{href:!0});var xgt=s(fD);j4o=r(xgt,"XLMRobertaModel"),xgt.forEach(t),D4o=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),G4o=i($),xu=n($,"LI",{});var hxe=s(xu);ofe=n(hxe,"STRONG",{});var $gt=s(ofe);O4o=r($gt,"xlm-roberta-xl"),$gt.forEach(t),V4o=r(hxe," \u2014 "),mD=n(hxe,"A",{href:!0});var kgt=s(mD);X4o=r(kgt,"XLMRobertaXLModel"),kgt.forEach(t),z4o=r(hxe," (XLM-RoBERTa-XL model)"),hxe.forEach(t),W4o=i($),$u=n($,"LI",{});var pxe=s($u);rfe=n(pxe,"STRONG",{});var Sgt=s(rfe);Q4o=r(Sgt,"xlnet"),Sgt.forEach(t),H4o=r(pxe," \u2014 "),gD=n(pxe,"A",{href:!0});var Rgt=s(gD);U4o=r(Rgt,"XLNetModel"),Rgt.forEach(t),J4o=r(pxe," (XLNet model)"),pxe.forEach(t),Y4o=i($),ku=n($,"LI",{});var _xe=s(ku);tfe=n(_xe,"STRONG",{});var Pgt=s(tfe);K4o=r(Pgt,"yolos"),Pgt.forEach(t),Z4o=r(_xe," \u2014 "),hD=n(_xe,"A",{href:!0});var Bgt=s(hD);eCo=r(Bgt,"YolosModel"),Bgt.forEach(t),oCo=r(_xe," (YOLOS model)"),_xe.forEach(t),rCo=i($),Su=n($,"LI",{});var uxe=s(Su);afe=n(uxe,"STRONG",{});var Igt=s(afe);tCo=r(Igt,"yoso"),Igt.forEach(t),aCo=r(uxe," \u2014 "),pD=n(uxe,"A",{href:!0});var Ngt=s(pD);nCo=r(Ngt,"YosoModel"),Ngt.forEach(t),sCo=r(uxe," (YOSO model)"),uxe.forEach(t),$.forEach(t),lCo=i(na),Ru=n(na,"P",{});var bxe=s(Ru);iCo=r(bxe,"The model is set in evaluation mode by default using "),nfe=n(bxe,"CODE",{});var qgt=s(nfe);dCo=r(qgt,"model.eval()"),qgt.forEach(t),cCo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(bxe,"CODE",{});var jgt=s(sfe);fCo=r(jgt,"model.train()"),jgt.forEach(t),bxe.forEach(t),mCo=i(na),T(Pu.$$.fragment,na),na.forEach(t),Zs.forEach(t),AOe=i(f),Gi=n(f,"H2",{class:!0});var SXe=s(Gi);Bu=n(SXe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Bu);lfe=n(Dgt,"SPAN",{});var Ggt=s(lfe);T(mL.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),gCo=i(SXe),ife=n(SXe,"SPAN",{});var Ogt=s(ife);hCo=r(Ogt,"AutoModelForPreTraining"),Ogt.forEach(t),SXe.forEach(t),LOe=i(f),$o=n(f,"DIV",{class:!0});var el=s($o);T(gL.$$.fragment,el),pCo=i(el),Oi=n(el,"P",{});var Noe=s(Oi);_Co=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_D=n(Noe,"A",{href:!0});var Vgt=s(_D);uCo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),bCo=r(Noe," class method or the "),uD=n(Noe,"A",{href:!0});var Xgt=s(uD);vCo=r(Xgt,"from_config()"),Xgt.forEach(t),FCo=r(Noe,` class
method.`),Noe.forEach(t),TCo=i(el),hL=n(el,"P",{});var RXe=s(hL);MCo=r(RXe,"This class cannot be instantiated directly using "),dfe=n(RXe,"CODE",{});var zgt=s(dfe);ECo=r(zgt,"__init__()"),zgt.forEach(t),CCo=r(RXe," (throws an error)."),RXe.forEach(t),wCo=i(el),lt=n(el,"DIV",{class:!0});var D3=s(lt);T(pL.$$.fragment,D3),ACo=i(D3),cfe=n(D3,"P",{});var Wgt=s(cfe);LCo=r(Wgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wgt.forEach(t),yCo=i(D3),Vi=n(D3,"P",{});var qoe=s(Vi);xCo=r(qoe,`Note:
Loading a model from its configuration file does `),ffe=n(qoe,"STRONG",{});var Qgt=s(ffe);$Co=r(Qgt,"not"),Qgt.forEach(t),kCo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(qoe,"A",{href:!0});var Hgt=s(bD);SCo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),RCo=r(qoe," to load the model weights."),qoe.forEach(t),PCo=i(D3),T(Iu.$$.fragment,D3),D3.forEach(t),BCo=i(el),Ye=n(el,"DIV",{class:!0});var sa=s(Ye);T(_L.$$.fragment,sa),ICo=i(sa),mfe=n(sa,"P",{});var Ugt=s(mfe);NCo=r(Ugt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ugt.forEach(t),qCo=i(sa),Ba=n(sa,"P",{});var G3=s(Ba);jCo=r(G3,"The model class to instantiate is selected based on the "),gfe=n(G3,"CODE",{});var Jgt=s(gfe);DCo=r(Jgt,"model_type"),Jgt.forEach(t),GCo=r(G3,` property of the config object (either
passed as an argument or loaded from `),hfe=n(G3,"CODE",{});var Ygt=s(hfe);OCo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),VCo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(G3,"CODE",{});var Kgt=s(pfe);XCo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),zCo=r(G3,":"),G3.forEach(t),WCo=i(sa),G=n(sa,"UL",{});var O=s(G);Nu=n(O,"LI",{});var vxe=s(Nu);_fe=n(vxe,"STRONG",{});var Zgt=s(_fe);QCo=r(Zgt,"albert"),Zgt.forEach(t),HCo=r(vxe," \u2014 "),vD=n(vxe,"A",{href:!0});var eht=s(vD);UCo=r(eht,"AlbertForPreTraining"),eht.forEach(t),JCo=r(vxe," (ALBERT model)"),vxe.forEach(t),YCo=i(O),qu=n(O,"LI",{});var Fxe=s(qu);ufe=n(Fxe,"STRONG",{});var oht=s(ufe);KCo=r(oht,"bart"),oht.forEach(t),ZCo=r(Fxe," \u2014 "),FD=n(Fxe,"A",{href:!0});var rht=s(FD);e5o=r(rht,"BartForConditionalGeneration"),rht.forEach(t),o5o=r(Fxe," (BART model)"),Fxe.forEach(t),r5o=i(O),ju=n(O,"LI",{});var Txe=s(ju);bfe=n(Txe,"STRONG",{});var tht=s(bfe);t5o=r(tht,"bert"),tht.forEach(t),a5o=r(Txe," \u2014 "),TD=n(Txe,"A",{href:!0});var aht=s(TD);n5o=r(aht,"BertForPreTraining"),aht.forEach(t),s5o=r(Txe," (BERT model)"),Txe.forEach(t),l5o=i(O),Du=n(O,"LI",{});var Mxe=s(Du);vfe=n(Mxe,"STRONG",{});var nht=s(vfe);i5o=r(nht,"big_bird"),nht.forEach(t),d5o=r(Mxe," \u2014 "),MD=n(Mxe,"A",{href:!0});var sht=s(MD);c5o=r(sht,"BigBirdForPreTraining"),sht.forEach(t),f5o=r(Mxe," (BigBird model)"),Mxe.forEach(t),m5o=i(O),Gu=n(O,"LI",{});var Exe=s(Gu);Ffe=n(Exe,"STRONG",{});var lht=s(Ffe);g5o=r(lht,"bloom"),lht.forEach(t),h5o=r(Exe," \u2014 "),ED=n(Exe,"A",{href:!0});var iht=s(ED);p5o=r(iht,"BloomForCausalLM"),iht.forEach(t),_5o=r(Exe," (BLOOM model)"),Exe.forEach(t),u5o=i(O),Ou=n(O,"LI",{});var Cxe=s(Ou);Tfe=n(Cxe,"STRONG",{});var dht=s(Tfe);b5o=r(dht,"camembert"),dht.forEach(t),v5o=r(Cxe," \u2014 "),CD=n(Cxe,"A",{href:!0});var cht=s(CD);F5o=r(cht,"CamembertForMaskedLM"),cht.forEach(t),T5o=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),M5o=i(O),Vu=n(O,"LI",{});var wxe=s(Vu);Mfe=n(wxe,"STRONG",{});var fht=s(Mfe);E5o=r(fht,"ctrl"),fht.forEach(t),C5o=r(wxe," \u2014 "),wD=n(wxe,"A",{href:!0});var mht=s(wD);w5o=r(mht,"CTRLLMHeadModel"),mht.forEach(t),A5o=r(wxe," (CTRL model)"),wxe.forEach(t),L5o=i(O),Xu=n(O,"LI",{});var Axe=s(Xu);Efe=n(Axe,"STRONG",{});var ght=s(Efe);y5o=r(ght,"data2vec-text"),ght.forEach(t),x5o=r(Axe," \u2014 "),AD=n(Axe,"A",{href:!0});var hht=s(AD);$5o=r(hht,"Data2VecTextForMaskedLM"),hht.forEach(t),k5o=r(Axe," (Data2VecText model)"),Axe.forEach(t),S5o=i(O),zu=n(O,"LI",{});var Lxe=s(zu);Cfe=n(Lxe,"STRONG",{});var pht=s(Cfe);R5o=r(pht,"deberta"),pht.forEach(t),P5o=r(Lxe," \u2014 "),LD=n(Lxe,"A",{href:!0});var _ht=s(LD);B5o=r(_ht,"DebertaForMaskedLM"),_ht.forEach(t),I5o=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),N5o=i(O),Wu=n(O,"LI",{});var yxe=s(Wu);wfe=n(yxe,"STRONG",{});var uht=s(wfe);q5o=r(uht,"deberta-v2"),uht.forEach(t),j5o=r(yxe," \u2014 "),yD=n(yxe,"A",{href:!0});var bht=s(yD);D5o=r(bht,"DebertaV2ForMaskedLM"),bht.forEach(t),G5o=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),O5o=i(O),Qu=n(O,"LI",{});var xxe=s(Qu);Afe=n(xxe,"STRONG",{});var vht=s(Afe);V5o=r(vht,"distilbert"),vht.forEach(t),X5o=r(xxe," \u2014 "),xD=n(xxe,"A",{href:!0});var Fht=s(xD);z5o=r(Fht,"DistilBertForMaskedLM"),Fht.forEach(t),W5o=r(xxe," (DistilBERT model)"),xxe.forEach(t),Q5o=i(O),Hu=n(O,"LI",{});var $xe=s(Hu);Lfe=n($xe,"STRONG",{});var Tht=s(Lfe);H5o=r(Tht,"electra"),Tht.forEach(t),U5o=r($xe," \u2014 "),$D=n($xe,"A",{href:!0});var Mht=s($D);J5o=r(Mht,"ElectraForPreTraining"),Mht.forEach(t),Y5o=r($xe," (ELECTRA model)"),$xe.forEach(t),K5o=i(O),Uu=n(O,"LI",{});var kxe=s(Uu);yfe=n(kxe,"STRONG",{});var Eht=s(yfe);Z5o=r(Eht,"flaubert"),Eht.forEach(t),e3o=r(kxe," \u2014 "),kD=n(kxe,"A",{href:!0});var Cht=s(kD);o3o=r(Cht,"FlaubertWithLMHeadModel"),Cht.forEach(t),r3o=r(kxe," (FlauBERT model)"),kxe.forEach(t),t3o=i(O),Ju=n(O,"LI",{});var Sxe=s(Ju);xfe=n(Sxe,"STRONG",{});var wht=s(xfe);a3o=r(wht,"flava"),wht.forEach(t),n3o=r(Sxe," \u2014 "),SD=n(Sxe,"A",{href:!0});var Aht=s(SD);s3o=r(Aht,"FlavaForPreTraining"),Aht.forEach(t),l3o=r(Sxe," (FLAVA model)"),Sxe.forEach(t),i3o=i(O),Yu=n(O,"LI",{});var Rxe=s(Yu);$fe=n(Rxe,"STRONG",{});var Lht=s($fe);d3o=r(Lht,"fnet"),Lht.forEach(t),c3o=r(Rxe," \u2014 "),RD=n(Rxe,"A",{href:!0});var yht=s(RD);f3o=r(yht,"FNetForPreTraining"),yht.forEach(t),m3o=r(Rxe," (FNet model)"),Rxe.forEach(t),g3o=i(O),Ku=n(O,"LI",{});var Pxe=s(Ku);kfe=n(Pxe,"STRONG",{});var xht=s(kfe);h3o=r(xht,"fsmt"),xht.forEach(t),p3o=r(Pxe," \u2014 "),PD=n(Pxe,"A",{href:!0});var $ht=s(PD);_3o=r($ht,"FSMTForConditionalGeneration"),$ht.forEach(t),u3o=r(Pxe," (FairSeq Machine-Translation model)"),Pxe.forEach(t),b3o=i(O),Zu=n(O,"LI",{});var Bxe=s(Zu);Sfe=n(Bxe,"STRONG",{});var kht=s(Sfe);v3o=r(kht,"funnel"),kht.forEach(t),F3o=r(Bxe," \u2014 "),BD=n(Bxe,"A",{href:!0});var Sht=s(BD);T3o=r(Sht,"FunnelForPreTraining"),Sht.forEach(t),M3o=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),E3o=i(O),e1=n(O,"LI",{});var Ixe=s(e1);Rfe=n(Ixe,"STRONG",{});var Rht=s(Rfe);C3o=r(Rht,"gpt2"),Rht.forEach(t),w3o=r(Ixe," \u2014 "),ID=n(Ixe,"A",{href:!0});var Pht=s(ID);A3o=r(Pht,"GPT2LMHeadModel"),Pht.forEach(t),L3o=r(Ixe," (OpenAI GPT-2 model)"),Ixe.forEach(t),y3o=i(O),o1=n(O,"LI",{});var Nxe=s(o1);Pfe=n(Nxe,"STRONG",{});var Bht=s(Pfe);x3o=r(Bht,"ibert"),Bht.forEach(t),$3o=r(Nxe," \u2014 "),ND=n(Nxe,"A",{href:!0});var Iht=s(ND);k3o=r(Iht,"IBertForMaskedLM"),Iht.forEach(t),S3o=r(Nxe," (I-BERT model)"),Nxe.forEach(t),R3o=i(O),r1=n(O,"LI",{});var qxe=s(r1);Bfe=n(qxe,"STRONG",{});var Nht=s(Bfe);P3o=r(Nht,"layoutlm"),Nht.forEach(t),B3o=r(qxe," \u2014 "),qD=n(qxe,"A",{href:!0});var qht=s(qD);I3o=r(qht,"LayoutLMForMaskedLM"),qht.forEach(t),N3o=r(qxe," (LayoutLM model)"),qxe.forEach(t),q3o=i(O),t1=n(O,"LI",{});var jxe=s(t1);Ife=n(jxe,"STRONG",{});var jht=s(Ife);j3o=r(jht,"longformer"),jht.forEach(t),D3o=r(jxe," \u2014 "),jD=n(jxe,"A",{href:!0});var Dht=s(jD);G3o=r(Dht,"LongformerForMaskedLM"),Dht.forEach(t),O3o=r(jxe," (Longformer model)"),jxe.forEach(t),V3o=i(O),a1=n(O,"LI",{});var Dxe=s(a1);Nfe=n(Dxe,"STRONG",{});var Ght=s(Nfe);X3o=r(Ght,"lxmert"),Ght.forEach(t),z3o=r(Dxe," \u2014 "),DD=n(Dxe,"A",{href:!0});var Oht=s(DD);W3o=r(Oht,"LxmertForPreTraining"),Oht.forEach(t),Q3o=r(Dxe," (LXMERT model)"),Dxe.forEach(t),H3o=i(O),n1=n(O,"LI",{});var Gxe=s(n1);qfe=n(Gxe,"STRONG",{});var Vht=s(qfe);U3o=r(Vht,"megatron-bert"),Vht.forEach(t),J3o=r(Gxe," \u2014 "),GD=n(Gxe,"A",{href:!0});var Xht=s(GD);Y3o=r(Xht,"MegatronBertForPreTraining"),Xht.forEach(t),K3o=r(Gxe," (Megatron-BERT model)"),Gxe.forEach(t),Z3o=i(O),s1=n(O,"LI",{});var Oxe=s(s1);jfe=n(Oxe,"STRONG",{});var zht=s(jfe);ewo=r(zht,"mobilebert"),zht.forEach(t),owo=r(Oxe," \u2014 "),OD=n(Oxe,"A",{href:!0});var Wht=s(OD);rwo=r(Wht,"MobileBertForPreTraining"),Wht.forEach(t),two=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),awo=i(O),l1=n(O,"LI",{});var Vxe=s(l1);Dfe=n(Vxe,"STRONG",{});var Qht=s(Dfe);nwo=r(Qht,"mpnet"),Qht.forEach(t),swo=r(Vxe," \u2014 "),VD=n(Vxe,"A",{href:!0});var Hht=s(VD);lwo=r(Hht,"MPNetForMaskedLM"),Hht.forEach(t),iwo=r(Vxe," (MPNet model)"),Vxe.forEach(t),dwo=i(O),i1=n(O,"LI",{});var Xxe=s(i1);Gfe=n(Xxe,"STRONG",{});var Uht=s(Gfe);cwo=r(Uht,"nezha"),Uht.forEach(t),fwo=r(Xxe," \u2014 "),XD=n(Xxe,"A",{href:!0});var Jht=s(XD);mwo=r(Jht,"NezhaForPreTraining"),Jht.forEach(t),gwo=r(Xxe," (Nezha model)"),Xxe.forEach(t),hwo=i(O),d1=n(O,"LI",{});var zxe=s(d1);Ofe=n(zxe,"STRONG",{});var Yht=s(Ofe);pwo=r(Yht,"openai-gpt"),Yht.forEach(t),_wo=r(zxe," \u2014 "),zD=n(zxe,"A",{href:!0});var Kht=s(zD);uwo=r(Kht,"OpenAIGPTLMHeadModel"),Kht.forEach(t),bwo=r(zxe," (OpenAI GPT model)"),zxe.forEach(t),vwo=i(O),c1=n(O,"LI",{});var Wxe=s(c1);Vfe=n(Wxe,"STRONG",{});var Zht=s(Vfe);Fwo=r(Zht,"retribert"),Zht.forEach(t),Two=r(Wxe," \u2014 "),WD=n(Wxe,"A",{href:!0});var ept=s(WD);Mwo=r(ept,"RetriBertModel"),ept.forEach(t),Ewo=r(Wxe," (RetriBERT model)"),Wxe.forEach(t),Cwo=i(O),f1=n(O,"LI",{});var Qxe=s(f1);Xfe=n(Qxe,"STRONG",{});var opt=s(Xfe);wwo=r(opt,"roberta"),opt.forEach(t),Awo=r(Qxe," \u2014 "),QD=n(Qxe,"A",{href:!0});var rpt=s(QD);Lwo=r(rpt,"RobertaForMaskedLM"),rpt.forEach(t),ywo=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),xwo=i(O),m1=n(O,"LI",{});var Hxe=s(m1);zfe=n(Hxe,"STRONG",{});var tpt=s(zfe);$wo=r(tpt,"splinter"),tpt.forEach(t),kwo=r(Hxe," \u2014 "),HD=n(Hxe,"A",{href:!0});var apt=s(HD);Swo=r(apt,"SplinterForPreTraining"),apt.forEach(t),Rwo=r(Hxe," (Splinter model)"),Hxe.forEach(t),Pwo=i(O),g1=n(O,"LI",{});var Uxe=s(g1);Wfe=n(Uxe,"STRONG",{});var npt=s(Wfe);Bwo=r(npt,"squeezebert"),npt.forEach(t),Iwo=r(Uxe," \u2014 "),UD=n(Uxe,"A",{href:!0});var spt=s(UD);Nwo=r(spt,"SqueezeBertForMaskedLM"),spt.forEach(t),qwo=r(Uxe," (SqueezeBERT model)"),Uxe.forEach(t),jwo=i(O),h1=n(O,"LI",{});var Jxe=s(h1);Qfe=n(Jxe,"STRONG",{});var lpt=s(Qfe);Dwo=r(lpt,"t5"),lpt.forEach(t),Gwo=r(Jxe," \u2014 "),JD=n(Jxe,"A",{href:!0});var ipt=s(JD);Owo=r(ipt,"T5ForConditionalGeneration"),ipt.forEach(t),Vwo=r(Jxe," (T5 model)"),Jxe.forEach(t),Xwo=i(O),p1=n(O,"LI",{});var Yxe=s(p1);Hfe=n(Yxe,"STRONG",{});var dpt=s(Hfe);zwo=r(dpt,"tapas"),dpt.forEach(t),Wwo=r(Yxe," \u2014 "),YD=n(Yxe,"A",{href:!0});var cpt=s(YD);Qwo=r(cpt,"TapasForMaskedLM"),cpt.forEach(t),Hwo=r(Yxe," (TAPAS model)"),Yxe.forEach(t),Uwo=i(O),_1=n(O,"LI",{});var Kxe=s(_1);Ufe=n(Kxe,"STRONG",{});var fpt=s(Ufe);Jwo=r(fpt,"transfo-xl"),fpt.forEach(t),Ywo=r(Kxe," \u2014 "),KD=n(Kxe,"A",{href:!0});var mpt=s(KD);Kwo=r(mpt,"TransfoXLLMHeadModel"),mpt.forEach(t),Zwo=r(Kxe," (Transformer-XL model)"),Kxe.forEach(t),eAo=i(O),u1=n(O,"LI",{});var Zxe=s(u1);Jfe=n(Zxe,"STRONG",{});var gpt=s(Jfe);oAo=r(gpt,"unispeech"),gpt.forEach(t),rAo=r(Zxe," \u2014 "),ZD=n(Zxe,"A",{href:!0});var hpt=s(ZD);tAo=r(hpt,"UniSpeechForPreTraining"),hpt.forEach(t),aAo=r(Zxe," (UniSpeech model)"),Zxe.forEach(t),nAo=i(O),b1=n(O,"LI",{});var e$e=s(b1);Yfe=n(e$e,"STRONG",{});var ppt=s(Yfe);sAo=r(ppt,"unispeech-sat"),ppt.forEach(t),lAo=r(e$e," \u2014 "),eG=n(e$e,"A",{href:!0});var _pt=s(eG);iAo=r(_pt,"UniSpeechSatForPreTraining"),_pt.forEach(t),dAo=r(e$e," (UniSpeechSat model)"),e$e.forEach(t),cAo=i(O),v1=n(O,"LI",{});var o$e=s(v1);Kfe=n(o$e,"STRONG",{});var upt=s(Kfe);fAo=r(upt,"visual_bert"),upt.forEach(t),mAo=r(o$e," \u2014 "),oG=n(o$e,"A",{href:!0});var bpt=s(oG);gAo=r(bpt,"VisualBertForPreTraining"),bpt.forEach(t),hAo=r(o$e," (VisualBERT model)"),o$e.forEach(t),pAo=i(O),F1=n(O,"LI",{});var r$e=s(F1);Zfe=n(r$e,"STRONG",{});var vpt=s(Zfe);_Ao=r(vpt,"vit_mae"),vpt.forEach(t),uAo=r(r$e," \u2014 "),rG=n(r$e,"A",{href:!0});var Fpt=s(rG);bAo=r(Fpt,"ViTMAEForPreTraining"),Fpt.forEach(t),vAo=r(r$e," (ViTMAE model)"),r$e.forEach(t),FAo=i(O),T1=n(O,"LI",{});var t$e=s(T1);eme=n(t$e,"STRONG",{});var Tpt=s(eme);TAo=r(Tpt,"wav2vec2"),Tpt.forEach(t),MAo=r(t$e," \u2014 "),tG=n(t$e,"A",{href:!0});var Mpt=s(tG);EAo=r(Mpt,"Wav2Vec2ForPreTraining"),Mpt.forEach(t),CAo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),wAo=i(O),M1=n(O,"LI",{});var a$e=s(M1);ome=n(a$e,"STRONG",{});var Ept=s(ome);AAo=r(Ept,"wav2vec2-conformer"),Ept.forEach(t),LAo=r(a$e," \u2014 "),aG=n(a$e,"A",{href:!0});var Cpt=s(aG);yAo=r(Cpt,"Wav2Vec2ConformerForPreTraining"),Cpt.forEach(t),xAo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),$Ao=i(O),E1=n(O,"LI",{});var n$e=s(E1);rme=n(n$e,"STRONG",{});var wpt=s(rme);kAo=r(wpt,"xlm"),wpt.forEach(t),SAo=r(n$e," \u2014 "),nG=n(n$e,"A",{href:!0});var Apt=s(nG);RAo=r(Apt,"XLMWithLMHeadModel"),Apt.forEach(t),PAo=r(n$e," (XLM model)"),n$e.forEach(t),BAo=i(O),C1=n(O,"LI",{});var s$e=s(C1);tme=n(s$e,"STRONG",{});var Lpt=s(tme);IAo=r(Lpt,"xlm-roberta"),Lpt.forEach(t),NAo=r(s$e," \u2014 "),sG=n(s$e,"A",{href:!0});var ypt=s(sG);qAo=r(ypt,"XLMRobertaForMaskedLM"),ypt.forEach(t),jAo=r(s$e," (XLM-RoBERTa model)"),s$e.forEach(t),DAo=i(O),w1=n(O,"LI",{});var l$e=s(w1);ame=n(l$e,"STRONG",{});var xpt=s(ame);GAo=r(xpt,"xlm-roberta-xl"),xpt.forEach(t),OAo=r(l$e," \u2014 "),lG=n(l$e,"A",{href:!0});var $pt=s(lG);VAo=r($pt,"XLMRobertaXLForMaskedLM"),$pt.forEach(t),XAo=r(l$e," (XLM-RoBERTa-XL model)"),l$e.forEach(t),zAo=i(O),A1=n(O,"LI",{});var i$e=s(A1);nme=n(i$e,"STRONG",{});var kpt=s(nme);WAo=r(kpt,"xlnet"),kpt.forEach(t),QAo=r(i$e," \u2014 "),iG=n(i$e,"A",{href:!0});var Spt=s(iG);HAo=r(Spt,"XLNetLMHeadModel"),Spt.forEach(t),UAo=r(i$e," (XLNet model)"),i$e.forEach(t),O.forEach(t),JAo=i(sa),L1=n(sa,"P",{});var d$e=s(L1);YAo=r(d$e,"The model is set in evaluation mode by default using "),sme=n(d$e,"CODE",{});var Rpt=s(sme);KAo=r(Rpt,"model.eval()"),Rpt.forEach(t),ZAo=r(d$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(d$e,"CODE",{});var Ppt=s(lme);eLo=r(Ppt,"model.train()"),Ppt.forEach(t),d$e.forEach(t),oLo=i(sa),T(y1.$$.fragment,sa),sa.forEach(t),el.forEach(t),yOe=i(f),Xi=n(f,"H2",{class:!0});var PXe=s(Xi);x1=n(PXe,"A",{id:!0,class:!0,href:!0});var Bpt=s(x1);ime=n(Bpt,"SPAN",{});var Ipt=s(ime);T(uL.$$.fragment,Ipt),Ipt.forEach(t),Bpt.forEach(t),rLo=i(PXe),dme=n(PXe,"SPAN",{});var Npt=s(dme);tLo=r(Npt,"AutoModelForCausalLM"),Npt.forEach(t),PXe.forEach(t),xOe=i(f),ko=n(f,"DIV",{class:!0});var ol=s(ko);T(bL.$$.fragment,ol),aLo=i(ol),zi=n(ol,"P",{});var joe=s(zi);nLo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dG=n(joe,"A",{href:!0});var qpt=s(dG);sLo=r(qpt,"from_pretrained()"),qpt.forEach(t),lLo=r(joe," class method or the "),cG=n(joe,"A",{href:!0});var jpt=s(cG);iLo=r(jpt,"from_config()"),jpt.forEach(t),dLo=r(joe,` class
method.`),joe.forEach(t),cLo=i(ol),vL=n(ol,"P",{});var BXe=s(vL);fLo=r(BXe,"This class cannot be instantiated directly using "),cme=n(BXe,"CODE",{});var Dpt=s(cme);mLo=r(Dpt,"__init__()"),Dpt.forEach(t),gLo=r(BXe," (throws an error)."),BXe.forEach(t),hLo=i(ol),it=n(ol,"DIV",{class:!0});var O3=s(it);T(FL.$$.fragment,O3),pLo=i(O3),fme=n(O3,"P",{});var Gpt=s(fme);_Lo=r(Gpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gpt.forEach(t),uLo=i(O3),Wi=n(O3,"P",{});var Doe=s(Wi);bLo=r(Doe,`Note:
Loading a model from its configuration file does `),mme=n(Doe,"STRONG",{});var Opt=s(mme);vLo=r(Opt,"not"),Opt.forEach(t),FLo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(Doe,"A",{href:!0});var Vpt=s(fG);TLo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),MLo=r(Doe," to load the model weights."),Doe.forEach(t),ELo=i(O3),T($1.$$.fragment,O3),O3.forEach(t),CLo=i(ol),Ke=n(ol,"DIV",{class:!0});var la=s(Ke);T(TL.$$.fragment,la),wLo=i(la),gme=n(la,"P",{});var Xpt=s(gme);ALo=r(Xpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xpt.forEach(t),LLo=i(la),Ia=n(la,"P",{});var V3=s(Ia);yLo=r(V3,"The model class to instantiate is selected based on the "),hme=n(V3,"CODE",{});var zpt=s(hme);xLo=r(zpt,"model_type"),zpt.forEach(t),$Lo=r(V3,` property of the config object (either
passed as an argument or loaded from `),pme=n(V3,"CODE",{});var Wpt=s(pme);kLo=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),SLo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(V3,"CODE",{});var Qpt=s(_me);RLo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),PLo=r(V3,":"),V3.forEach(t),BLo=i(la),z=n(la,"UL",{});var W=s(z);k1=n(W,"LI",{});var c$e=s(k1);ume=n(c$e,"STRONG",{});var Hpt=s(ume);ILo=r(Hpt,"bart"),Hpt.forEach(t),NLo=r(c$e," \u2014 "),mG=n(c$e,"A",{href:!0});var Upt=s(mG);qLo=r(Upt,"BartForCausalLM"),Upt.forEach(t),jLo=r(c$e," (BART model)"),c$e.forEach(t),DLo=i(W),S1=n(W,"LI",{});var f$e=s(S1);bme=n(f$e,"STRONG",{});var Jpt=s(bme);GLo=r(Jpt,"bert"),Jpt.forEach(t),OLo=r(f$e," \u2014 "),gG=n(f$e,"A",{href:!0});var Ypt=s(gG);VLo=r(Ypt,"BertLMHeadModel"),Ypt.forEach(t),XLo=r(f$e," (BERT model)"),f$e.forEach(t),zLo=i(W),R1=n(W,"LI",{});var m$e=s(R1);vme=n(m$e,"STRONG",{});var Kpt=s(vme);WLo=r(Kpt,"bert-generation"),Kpt.forEach(t),QLo=r(m$e," \u2014 "),hG=n(m$e,"A",{href:!0});var Zpt=s(hG);HLo=r(Zpt,"BertGenerationDecoder"),Zpt.forEach(t),ULo=r(m$e," (Bert Generation model)"),m$e.forEach(t),JLo=i(W),P1=n(W,"LI",{});var g$e=s(P1);Fme=n(g$e,"STRONG",{});var e_t=s(Fme);YLo=r(e_t,"big_bird"),e_t.forEach(t),KLo=r(g$e," \u2014 "),pG=n(g$e,"A",{href:!0});var o_t=s(pG);ZLo=r(o_t,"BigBirdForCausalLM"),o_t.forEach(t),eyo=r(g$e," (BigBird model)"),g$e.forEach(t),oyo=i(W),B1=n(W,"LI",{});var h$e=s(B1);Tme=n(h$e,"STRONG",{});var r_t=s(Tme);ryo=r(r_t,"bigbird_pegasus"),r_t.forEach(t),tyo=r(h$e," \u2014 "),_G=n(h$e,"A",{href:!0});var t_t=s(_G);ayo=r(t_t,"BigBirdPegasusForCausalLM"),t_t.forEach(t),nyo=r(h$e," (BigBird-Pegasus model)"),h$e.forEach(t),syo=i(W),I1=n(W,"LI",{});var p$e=s(I1);Mme=n(p$e,"STRONG",{});var a_t=s(Mme);lyo=r(a_t,"blenderbot"),a_t.forEach(t),iyo=r(p$e," \u2014 "),uG=n(p$e,"A",{href:!0});var n_t=s(uG);dyo=r(n_t,"BlenderbotForCausalLM"),n_t.forEach(t),cyo=r(p$e," (Blenderbot model)"),p$e.forEach(t),fyo=i(W),N1=n(W,"LI",{});var _$e=s(N1);Eme=n(_$e,"STRONG",{});var s_t=s(Eme);myo=r(s_t,"blenderbot-small"),s_t.forEach(t),gyo=r(_$e," \u2014 "),bG=n(_$e,"A",{href:!0});var l_t=s(bG);hyo=r(l_t,"BlenderbotSmallForCausalLM"),l_t.forEach(t),pyo=r(_$e," (BlenderbotSmall model)"),_$e.forEach(t),_yo=i(W),q1=n(W,"LI",{});var u$e=s(q1);Cme=n(u$e,"STRONG",{});var i_t=s(Cme);uyo=r(i_t,"bloom"),i_t.forEach(t),byo=r(u$e," \u2014 "),vG=n(u$e,"A",{href:!0});var d_t=s(vG);vyo=r(d_t,"BloomForCausalLM"),d_t.forEach(t),Fyo=r(u$e," (BLOOM model)"),u$e.forEach(t),Tyo=i(W),j1=n(W,"LI",{});var b$e=s(j1);wme=n(b$e,"STRONG",{});var c_t=s(wme);Myo=r(c_t,"camembert"),c_t.forEach(t),Eyo=r(b$e," \u2014 "),FG=n(b$e,"A",{href:!0});var f_t=s(FG);Cyo=r(f_t,"CamembertForCausalLM"),f_t.forEach(t),wyo=r(b$e," (CamemBERT model)"),b$e.forEach(t),Ayo=i(W),D1=n(W,"LI",{});var v$e=s(D1);Ame=n(v$e,"STRONG",{});var m_t=s(Ame);Lyo=r(m_t,"codegen"),m_t.forEach(t),yyo=r(v$e," \u2014 "),TG=n(v$e,"A",{href:!0});var g_t=s(TG);xyo=r(g_t,"CodeGenForCausalLM"),g_t.forEach(t),$yo=r(v$e," (CodeGen model)"),v$e.forEach(t),kyo=i(W),G1=n(W,"LI",{});var F$e=s(G1);Lme=n(F$e,"STRONG",{});var h_t=s(Lme);Syo=r(h_t,"ctrl"),h_t.forEach(t),Ryo=r(F$e," \u2014 "),MG=n(F$e,"A",{href:!0});var p_t=s(MG);Pyo=r(p_t,"CTRLLMHeadModel"),p_t.forEach(t),Byo=r(F$e," (CTRL model)"),F$e.forEach(t),Iyo=i(W),O1=n(W,"LI",{});var T$e=s(O1);yme=n(T$e,"STRONG",{});var __t=s(yme);Nyo=r(__t,"data2vec-text"),__t.forEach(t),qyo=r(T$e," \u2014 "),EG=n(T$e,"A",{href:!0});var u_t=s(EG);jyo=r(u_t,"Data2VecTextForCausalLM"),u_t.forEach(t),Dyo=r(T$e," (Data2VecText model)"),T$e.forEach(t),Gyo=i(W),V1=n(W,"LI",{});var M$e=s(V1);xme=n(M$e,"STRONG",{});var b_t=s(xme);Oyo=r(b_t,"electra"),b_t.forEach(t),Vyo=r(M$e," \u2014 "),CG=n(M$e,"A",{href:!0});var v_t=s(CG);Xyo=r(v_t,"ElectraForCausalLM"),v_t.forEach(t),zyo=r(M$e," (ELECTRA model)"),M$e.forEach(t),Wyo=i(W),X1=n(W,"LI",{});var E$e=s(X1);$me=n(E$e,"STRONG",{});var F_t=s($me);Qyo=r(F_t,"gpt2"),F_t.forEach(t),Hyo=r(E$e," \u2014 "),wG=n(E$e,"A",{href:!0});var T_t=s(wG);Uyo=r(T_t,"GPT2LMHeadModel"),T_t.forEach(t),Jyo=r(E$e," (OpenAI GPT-2 model)"),E$e.forEach(t),Yyo=i(W),z1=n(W,"LI",{});var C$e=s(z1);kme=n(C$e,"STRONG",{});var M_t=s(kme);Kyo=r(M_t,"gpt_neo"),M_t.forEach(t),Zyo=r(C$e," \u2014 "),AG=n(C$e,"A",{href:!0});var E_t=s(AG);e9o=r(E_t,"GPTNeoForCausalLM"),E_t.forEach(t),o9o=r(C$e," (GPT Neo model)"),C$e.forEach(t),r9o=i(W),W1=n(W,"LI",{});var w$e=s(W1);Sme=n(w$e,"STRONG",{});var C_t=s(Sme);t9o=r(C_t,"gpt_neox"),C_t.forEach(t),a9o=r(w$e," \u2014 "),LG=n(w$e,"A",{href:!0});var w_t=s(LG);n9o=r(w_t,"GPTNeoXForCausalLM"),w_t.forEach(t),s9o=r(w$e," (GPT NeoX model)"),w$e.forEach(t),l9o=i(W),Q1=n(W,"LI",{});var A$e=s(Q1);Rme=n(A$e,"STRONG",{});var A_t=s(Rme);i9o=r(A_t,"gptj"),A_t.forEach(t),d9o=r(A$e," \u2014 "),yG=n(A$e,"A",{href:!0});var L_t=s(yG);c9o=r(L_t,"GPTJForCausalLM"),L_t.forEach(t),f9o=r(A$e," (GPT-J model)"),A$e.forEach(t),m9o=i(W),H1=n(W,"LI",{});var L$e=s(H1);Pme=n(L$e,"STRONG",{});var y_t=s(Pme);g9o=r(y_t,"marian"),y_t.forEach(t),h9o=r(L$e," \u2014 "),xG=n(L$e,"A",{href:!0});var x_t=s(xG);p9o=r(x_t,"MarianForCausalLM"),x_t.forEach(t),_9o=r(L$e," (Marian model)"),L$e.forEach(t),u9o=i(W),U1=n(W,"LI",{});var y$e=s(U1);Bme=n(y$e,"STRONG",{});var $_t=s(Bme);b9o=r($_t,"mbart"),$_t.forEach(t),v9o=r(y$e," \u2014 "),$G=n(y$e,"A",{href:!0});var k_t=s($G);F9o=r(k_t,"MBartForCausalLM"),k_t.forEach(t),T9o=r(y$e," (mBART model)"),y$e.forEach(t),M9o=i(W),J1=n(W,"LI",{});var x$e=s(J1);Ime=n(x$e,"STRONG",{});var S_t=s(Ime);E9o=r(S_t,"megatron-bert"),S_t.forEach(t),C9o=r(x$e," \u2014 "),kG=n(x$e,"A",{href:!0});var R_t=s(kG);w9o=r(R_t,"MegatronBertForCausalLM"),R_t.forEach(t),A9o=r(x$e," (Megatron-BERT model)"),x$e.forEach(t),L9o=i(W),Y1=n(W,"LI",{});var $$e=s(Y1);Nme=n($$e,"STRONG",{});var P_t=s(Nme);y9o=r(P_t,"openai-gpt"),P_t.forEach(t),x9o=r($$e," \u2014 "),SG=n($$e,"A",{href:!0});var B_t=s(SG);$9o=r(B_t,"OpenAIGPTLMHeadModel"),B_t.forEach(t),k9o=r($$e," (OpenAI GPT model)"),$$e.forEach(t),S9o=i(W),K1=n(W,"LI",{});var k$e=s(K1);qme=n(k$e,"STRONG",{});var I_t=s(qme);R9o=r(I_t,"opt"),I_t.forEach(t),P9o=r(k$e," \u2014 "),RG=n(k$e,"A",{href:!0});var N_t=s(RG);B9o=r(N_t,"OPTForCausalLM"),N_t.forEach(t),I9o=r(k$e," (OPT model)"),k$e.forEach(t),N9o=i(W),Z1=n(W,"LI",{});var S$e=s(Z1);jme=n(S$e,"STRONG",{});var q_t=s(jme);q9o=r(q_t,"pegasus"),q_t.forEach(t),j9o=r(S$e," \u2014 "),PG=n(S$e,"A",{href:!0});var j_t=s(PG);D9o=r(j_t,"PegasusForCausalLM"),j_t.forEach(t),G9o=r(S$e," (Pegasus model)"),S$e.forEach(t),O9o=i(W),e2=n(W,"LI",{});var R$e=s(e2);Dme=n(R$e,"STRONG",{});var D_t=s(Dme);V9o=r(D_t,"plbart"),D_t.forEach(t),X9o=r(R$e," \u2014 "),BG=n(R$e,"A",{href:!0});var G_t=s(BG);z9o=r(G_t,"PLBartForCausalLM"),G_t.forEach(t),W9o=r(R$e," (PLBart model)"),R$e.forEach(t),Q9o=i(W),o2=n(W,"LI",{});var P$e=s(o2);Gme=n(P$e,"STRONG",{});var O_t=s(Gme);H9o=r(O_t,"prophetnet"),O_t.forEach(t),U9o=r(P$e," \u2014 "),IG=n(P$e,"A",{href:!0});var V_t=s(IG);J9o=r(V_t,"ProphetNetForCausalLM"),V_t.forEach(t),Y9o=r(P$e," (ProphetNet model)"),P$e.forEach(t),K9o=i(W),r2=n(W,"LI",{});var B$e=s(r2);Ome=n(B$e,"STRONG",{});var X_t=s(Ome);Z9o=r(X_t,"qdqbert"),X_t.forEach(t),exo=r(B$e," \u2014 "),NG=n(B$e,"A",{href:!0});var z_t=s(NG);oxo=r(z_t,"QDQBertLMHeadModel"),z_t.forEach(t),rxo=r(B$e," (QDQBert model)"),B$e.forEach(t),txo=i(W),t2=n(W,"LI",{});var I$e=s(t2);Vme=n(I$e,"STRONG",{});var W_t=s(Vme);axo=r(W_t,"reformer"),W_t.forEach(t),nxo=r(I$e," \u2014 "),qG=n(I$e,"A",{href:!0});var Q_t=s(qG);sxo=r(Q_t,"ReformerModelWithLMHead"),Q_t.forEach(t),lxo=r(I$e," (Reformer model)"),I$e.forEach(t),ixo=i(W),a2=n(W,"LI",{});var N$e=s(a2);Xme=n(N$e,"STRONG",{});var H_t=s(Xme);dxo=r(H_t,"rembert"),H_t.forEach(t),cxo=r(N$e," \u2014 "),jG=n(N$e,"A",{href:!0});var U_t=s(jG);fxo=r(U_t,"RemBertForCausalLM"),U_t.forEach(t),mxo=r(N$e," (RemBERT model)"),N$e.forEach(t),gxo=i(W),n2=n(W,"LI",{});var q$e=s(n2);zme=n(q$e,"STRONG",{});var J_t=s(zme);hxo=r(J_t,"roberta"),J_t.forEach(t),pxo=r(q$e," \u2014 "),DG=n(q$e,"A",{href:!0});var Y_t=s(DG);_xo=r(Y_t,"RobertaForCausalLM"),Y_t.forEach(t),uxo=r(q$e," (RoBERTa model)"),q$e.forEach(t),bxo=i(W),s2=n(W,"LI",{});var j$e=s(s2);Wme=n(j$e,"STRONG",{});var K_t=s(Wme);vxo=r(K_t,"roformer"),K_t.forEach(t),Fxo=r(j$e," \u2014 "),GG=n(j$e,"A",{href:!0});var Z_t=s(GG);Txo=r(Z_t,"RoFormerForCausalLM"),Z_t.forEach(t),Mxo=r(j$e," (RoFormer model)"),j$e.forEach(t),Exo=i(W),l2=n(W,"LI",{});var D$e=s(l2);Qme=n(D$e,"STRONG",{});var eut=s(Qme);Cxo=r(eut,"speech_to_text_2"),eut.forEach(t),wxo=r(D$e," \u2014 "),OG=n(D$e,"A",{href:!0});var out=s(OG);Axo=r(out,"Speech2Text2ForCausalLM"),out.forEach(t),Lxo=r(D$e," (Speech2Text2 model)"),D$e.forEach(t),yxo=i(W),i2=n(W,"LI",{});var G$e=s(i2);Hme=n(G$e,"STRONG",{});var rut=s(Hme);xxo=r(rut,"transfo-xl"),rut.forEach(t),$xo=r(G$e," \u2014 "),VG=n(G$e,"A",{href:!0});var tut=s(VG);kxo=r(tut,"TransfoXLLMHeadModel"),tut.forEach(t),Sxo=r(G$e," (Transformer-XL model)"),G$e.forEach(t),Rxo=i(W),d2=n(W,"LI",{});var O$e=s(d2);Ume=n(O$e,"STRONG",{});var aut=s(Ume);Pxo=r(aut,"trocr"),aut.forEach(t),Bxo=r(O$e," \u2014 "),XG=n(O$e,"A",{href:!0});var nut=s(XG);Ixo=r(nut,"TrOCRForCausalLM"),nut.forEach(t),Nxo=r(O$e," (TrOCR model)"),O$e.forEach(t),qxo=i(W),c2=n(W,"LI",{});var V$e=s(c2);Jme=n(V$e,"STRONG",{});var sut=s(Jme);jxo=r(sut,"xglm"),sut.forEach(t),Dxo=r(V$e," \u2014 "),zG=n(V$e,"A",{href:!0});var lut=s(zG);Gxo=r(lut,"XGLMForCausalLM"),lut.forEach(t),Oxo=r(V$e," (XGLM model)"),V$e.forEach(t),Vxo=i(W),f2=n(W,"LI",{});var X$e=s(f2);Yme=n(X$e,"STRONG",{});var iut=s(Yme);Xxo=r(iut,"xlm"),iut.forEach(t),zxo=r(X$e," \u2014 "),WG=n(X$e,"A",{href:!0});var dut=s(WG);Wxo=r(dut,"XLMWithLMHeadModel"),dut.forEach(t),Qxo=r(X$e," (XLM model)"),X$e.forEach(t),Hxo=i(W),m2=n(W,"LI",{});var z$e=s(m2);Kme=n(z$e,"STRONG",{});var cut=s(Kme);Uxo=r(cut,"xlm-prophetnet"),cut.forEach(t),Jxo=r(z$e," \u2014 "),QG=n(z$e,"A",{href:!0});var fut=s(QG);Yxo=r(fut,"XLMProphetNetForCausalLM"),fut.forEach(t),Kxo=r(z$e," (XLM-ProphetNet model)"),z$e.forEach(t),Zxo=i(W),g2=n(W,"LI",{});var W$e=s(g2);Zme=n(W$e,"STRONG",{});var mut=s(Zme);e$o=r(mut,"xlm-roberta"),mut.forEach(t),o$o=r(W$e," \u2014 "),HG=n(W$e,"A",{href:!0});var gut=s(HG);r$o=r(gut,"XLMRobertaForCausalLM"),gut.forEach(t),t$o=r(W$e," (XLM-RoBERTa model)"),W$e.forEach(t),a$o=i(W),h2=n(W,"LI",{});var Q$e=s(h2);ege=n(Q$e,"STRONG",{});var hut=s(ege);n$o=r(hut,"xlm-roberta-xl"),hut.forEach(t),s$o=r(Q$e," \u2014 "),UG=n(Q$e,"A",{href:!0});var put=s(UG);l$o=r(put,"XLMRobertaXLForCausalLM"),put.forEach(t),i$o=r(Q$e," (XLM-RoBERTa-XL model)"),Q$e.forEach(t),d$o=i(W),p2=n(W,"LI",{});var H$e=s(p2);oge=n(H$e,"STRONG",{});var _ut=s(oge);c$o=r(_ut,"xlnet"),_ut.forEach(t),f$o=r(H$e," \u2014 "),JG=n(H$e,"A",{href:!0});var uut=s(JG);m$o=r(uut,"XLNetLMHeadModel"),uut.forEach(t),g$o=r(H$e," (XLNet model)"),H$e.forEach(t),W.forEach(t),h$o=i(la),_2=n(la,"P",{});var U$e=s(_2);p$o=r(U$e,"The model is set in evaluation mode by default using "),rge=n(U$e,"CODE",{});var but=s(rge);_$o=r(but,"model.eval()"),but.forEach(t),u$o=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(U$e,"CODE",{});var vut=s(tge);b$o=r(vut,"model.train()"),vut.forEach(t),U$e.forEach(t),v$o=i(la),T(u2.$$.fragment,la),la.forEach(t),ol.forEach(t),$Oe=i(f),Qi=n(f,"H2",{class:!0});var IXe=s(Qi);b2=n(IXe,"A",{id:!0,class:!0,href:!0});var Fut=s(b2);age=n(Fut,"SPAN",{});var Tut=s(age);T(ML.$$.fragment,Tut),Tut.forEach(t),Fut.forEach(t),F$o=i(IXe),nge=n(IXe,"SPAN",{});var Mut=s(nge);T$o=r(Mut,"AutoModelForMaskedLM"),Mut.forEach(t),IXe.forEach(t),kOe=i(f),So=n(f,"DIV",{class:!0});var rl=s(So);T(EL.$$.fragment,rl),M$o=i(rl),Hi=n(rl,"P",{});var Goe=s(Hi);E$o=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YG=n(Goe,"A",{href:!0});var Eut=s(YG);C$o=r(Eut,"from_pretrained()"),Eut.forEach(t),w$o=r(Goe," class method or the "),KG=n(Goe,"A",{href:!0});var Cut=s(KG);A$o=r(Cut,"from_config()"),Cut.forEach(t),L$o=r(Goe,` class
method.`),Goe.forEach(t),y$o=i(rl),CL=n(rl,"P",{});var NXe=s(CL);x$o=r(NXe,"This class cannot be instantiated directly using "),sge=n(NXe,"CODE",{});var wut=s(sge);$$o=r(wut,"__init__()"),wut.forEach(t),k$o=r(NXe," (throws an error)."),NXe.forEach(t),S$o=i(rl),dt=n(rl,"DIV",{class:!0});var X3=s(dt);T(wL.$$.fragment,X3),R$o=i(X3),lge=n(X3,"P",{});var Aut=s(lge);P$o=r(Aut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Aut.forEach(t),B$o=i(X3),Ui=n(X3,"P",{});var Ooe=s(Ui);I$o=r(Ooe,`Note:
Loading a model from its configuration file does `),ige=n(Ooe,"STRONG",{});var Lut=s(ige);N$o=r(Lut,"not"),Lut.forEach(t),q$o=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(Ooe,"A",{href:!0});var yut=s(ZG);j$o=r(yut,"from_pretrained()"),yut.forEach(t),D$o=r(Ooe," to load the model weights."),Ooe.forEach(t),G$o=i(X3),T(v2.$$.fragment,X3),X3.forEach(t),O$o=i(rl),Ze=n(rl,"DIV",{class:!0});var ia=s(Ze);T(AL.$$.fragment,ia),V$o=i(ia),dge=n(ia,"P",{});var xut=s(dge);X$o=r(xut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xut.forEach(t),z$o=i(ia),Na=n(ia,"P",{});var z3=s(Na);W$o=r(z3,"The model class to instantiate is selected based on the "),cge=n(z3,"CODE",{});var $ut=s(cge);Q$o=r($ut,"model_type"),$ut.forEach(t),H$o=r(z3,` property of the config object (either
passed as an argument or loaded from `),fge=n(z3,"CODE",{});var kut=s(fge);U$o=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),J$o=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=n(z3,"CODE",{});var Sut=s(mge);Y$o=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),K$o=r(z3,":"),z3.forEach(t),Z$o=i(ia),Q=n(ia,"UL",{});var U=s(Q);F2=n(U,"LI",{});var J$e=s(F2);gge=n(J$e,"STRONG",{});var Rut=s(gge);eko=r(Rut,"albert"),Rut.forEach(t),oko=r(J$e," \u2014 "),eO=n(J$e,"A",{href:!0});var Put=s(eO);rko=r(Put,"AlbertForMaskedLM"),Put.forEach(t),tko=r(J$e," (ALBERT model)"),J$e.forEach(t),ako=i(U),T2=n(U,"LI",{});var Y$e=s(T2);hge=n(Y$e,"STRONG",{});var But=s(hge);nko=r(But,"bart"),But.forEach(t),sko=r(Y$e," \u2014 "),oO=n(Y$e,"A",{href:!0});var Iut=s(oO);lko=r(Iut,"BartForConditionalGeneration"),Iut.forEach(t),iko=r(Y$e," (BART model)"),Y$e.forEach(t),dko=i(U),M2=n(U,"LI",{});var K$e=s(M2);pge=n(K$e,"STRONG",{});var Nut=s(pge);cko=r(Nut,"bert"),Nut.forEach(t),fko=r(K$e," \u2014 "),rO=n(K$e,"A",{href:!0});var qut=s(rO);mko=r(qut,"BertForMaskedLM"),qut.forEach(t),gko=r(K$e," (BERT model)"),K$e.forEach(t),hko=i(U),E2=n(U,"LI",{});var Z$e=s(E2);_ge=n(Z$e,"STRONG",{});var jut=s(_ge);pko=r(jut,"big_bird"),jut.forEach(t),_ko=r(Z$e," \u2014 "),tO=n(Z$e,"A",{href:!0});var Dut=s(tO);uko=r(Dut,"BigBirdForMaskedLM"),Dut.forEach(t),bko=r(Z$e," (BigBird model)"),Z$e.forEach(t),vko=i(U),C2=n(U,"LI",{});var eke=s(C2);uge=n(eke,"STRONG",{});var Gut=s(uge);Fko=r(Gut,"camembert"),Gut.forEach(t),Tko=r(eke," \u2014 "),aO=n(eke,"A",{href:!0});var Out=s(aO);Mko=r(Out,"CamembertForMaskedLM"),Out.forEach(t),Eko=r(eke," (CamemBERT model)"),eke.forEach(t),Cko=i(U),w2=n(U,"LI",{});var oke=s(w2);bge=n(oke,"STRONG",{});var Vut=s(bge);wko=r(Vut,"convbert"),Vut.forEach(t),Ako=r(oke," \u2014 "),nO=n(oke,"A",{href:!0});var Xut=s(nO);Lko=r(Xut,"ConvBertForMaskedLM"),Xut.forEach(t),yko=r(oke," (ConvBERT model)"),oke.forEach(t),xko=i(U),A2=n(U,"LI",{});var rke=s(A2);vge=n(rke,"STRONG",{});var zut=s(vge);$ko=r(zut,"data2vec-text"),zut.forEach(t),kko=r(rke," \u2014 "),sO=n(rke,"A",{href:!0});var Wut=s(sO);Sko=r(Wut,"Data2VecTextForMaskedLM"),Wut.forEach(t),Rko=r(rke," (Data2VecText model)"),rke.forEach(t),Pko=i(U),L2=n(U,"LI",{});var tke=s(L2);Fge=n(tke,"STRONG",{});var Qut=s(Fge);Bko=r(Qut,"deberta"),Qut.forEach(t),Iko=r(tke," \u2014 "),lO=n(tke,"A",{href:!0});var Hut=s(lO);Nko=r(Hut,"DebertaForMaskedLM"),Hut.forEach(t),qko=r(tke," (DeBERTa model)"),tke.forEach(t),jko=i(U),y2=n(U,"LI",{});var ake=s(y2);Tge=n(ake,"STRONG",{});var Uut=s(Tge);Dko=r(Uut,"deberta-v2"),Uut.forEach(t),Gko=r(ake," \u2014 "),iO=n(ake,"A",{href:!0});var Jut=s(iO);Oko=r(Jut,"DebertaV2ForMaskedLM"),Jut.forEach(t),Vko=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),Xko=i(U),x2=n(U,"LI",{});var nke=s(x2);Mge=n(nke,"STRONG",{});var Yut=s(Mge);zko=r(Yut,"distilbert"),Yut.forEach(t),Wko=r(nke," \u2014 "),dO=n(nke,"A",{href:!0});var Kut=s(dO);Qko=r(Kut,"DistilBertForMaskedLM"),Kut.forEach(t),Hko=r(nke," (DistilBERT model)"),nke.forEach(t),Uko=i(U),$2=n(U,"LI",{});var ske=s($2);Ege=n(ske,"STRONG",{});var Zut=s(Ege);Jko=r(Zut,"electra"),Zut.forEach(t),Yko=r(ske," \u2014 "),cO=n(ske,"A",{href:!0});var e1t=s(cO);Kko=r(e1t,"ElectraForMaskedLM"),e1t.forEach(t),Zko=r(ske," (ELECTRA model)"),ske.forEach(t),eSo=i(U),k2=n(U,"LI",{});var lke=s(k2);Cge=n(lke,"STRONG",{});var o1t=s(Cge);oSo=r(o1t,"flaubert"),o1t.forEach(t),rSo=r(lke," \u2014 "),fO=n(lke,"A",{href:!0});var r1t=s(fO);tSo=r(r1t,"FlaubertWithLMHeadModel"),r1t.forEach(t),aSo=r(lke," (FlauBERT model)"),lke.forEach(t),nSo=i(U),S2=n(U,"LI",{});var ike=s(S2);wge=n(ike,"STRONG",{});var t1t=s(wge);sSo=r(t1t,"fnet"),t1t.forEach(t),lSo=r(ike," \u2014 "),mO=n(ike,"A",{href:!0});var a1t=s(mO);iSo=r(a1t,"FNetForMaskedLM"),a1t.forEach(t),dSo=r(ike," (FNet model)"),ike.forEach(t),cSo=i(U),R2=n(U,"LI",{});var dke=s(R2);Age=n(dke,"STRONG",{});var n1t=s(Age);fSo=r(n1t,"funnel"),n1t.forEach(t),mSo=r(dke," \u2014 "),gO=n(dke,"A",{href:!0});var s1t=s(gO);gSo=r(s1t,"FunnelForMaskedLM"),s1t.forEach(t),hSo=r(dke," (Funnel Transformer model)"),dke.forEach(t),pSo=i(U),P2=n(U,"LI",{});var cke=s(P2);Lge=n(cke,"STRONG",{});var l1t=s(Lge);_So=r(l1t,"ibert"),l1t.forEach(t),uSo=r(cke," \u2014 "),hO=n(cke,"A",{href:!0});var i1t=s(hO);bSo=r(i1t,"IBertForMaskedLM"),i1t.forEach(t),vSo=r(cke," (I-BERT model)"),cke.forEach(t),FSo=i(U),B2=n(U,"LI",{});var fke=s(B2);yge=n(fke,"STRONG",{});var d1t=s(yge);TSo=r(d1t,"layoutlm"),d1t.forEach(t),MSo=r(fke," \u2014 "),pO=n(fke,"A",{href:!0});var c1t=s(pO);ESo=r(c1t,"LayoutLMForMaskedLM"),c1t.forEach(t),CSo=r(fke," (LayoutLM model)"),fke.forEach(t),wSo=i(U),I2=n(U,"LI",{});var mke=s(I2);xge=n(mke,"STRONG",{});var f1t=s(xge);ASo=r(f1t,"longformer"),f1t.forEach(t),LSo=r(mke," \u2014 "),_O=n(mke,"A",{href:!0});var m1t=s(_O);ySo=r(m1t,"LongformerForMaskedLM"),m1t.forEach(t),xSo=r(mke," (Longformer model)"),mke.forEach(t),$So=i(U),N2=n(U,"LI",{});var gke=s(N2);$ge=n(gke,"STRONG",{});var g1t=s($ge);kSo=r(g1t,"luke"),g1t.forEach(t),SSo=r(gke," \u2014 "),uO=n(gke,"A",{href:!0});var h1t=s(uO);RSo=r(h1t,"LukeForMaskedLM"),h1t.forEach(t),PSo=r(gke," (LUKE model)"),gke.forEach(t),BSo=i(U),q2=n(U,"LI",{});var hke=s(q2);kge=n(hke,"STRONG",{});var p1t=s(kge);ISo=r(p1t,"mbart"),p1t.forEach(t),NSo=r(hke," \u2014 "),bO=n(hke,"A",{href:!0});var _1t=s(bO);qSo=r(_1t,"MBartForConditionalGeneration"),_1t.forEach(t),jSo=r(hke," (mBART model)"),hke.forEach(t),DSo=i(U),j2=n(U,"LI",{});var pke=s(j2);Sge=n(pke,"STRONG",{});var u1t=s(Sge);GSo=r(u1t,"megatron-bert"),u1t.forEach(t),OSo=r(pke," \u2014 "),vO=n(pke,"A",{href:!0});var b1t=s(vO);VSo=r(b1t,"MegatronBertForMaskedLM"),b1t.forEach(t),XSo=r(pke," (Megatron-BERT model)"),pke.forEach(t),zSo=i(U),D2=n(U,"LI",{});var _ke=s(D2);Rge=n(_ke,"STRONG",{});var v1t=s(Rge);WSo=r(v1t,"mobilebert"),v1t.forEach(t),QSo=r(_ke," \u2014 "),FO=n(_ke,"A",{href:!0});var F1t=s(FO);HSo=r(F1t,"MobileBertForMaskedLM"),F1t.forEach(t),USo=r(_ke," (MobileBERT model)"),_ke.forEach(t),JSo=i(U),G2=n(U,"LI",{});var uke=s(G2);Pge=n(uke,"STRONG",{});var T1t=s(Pge);YSo=r(T1t,"mpnet"),T1t.forEach(t),KSo=r(uke," \u2014 "),TO=n(uke,"A",{href:!0});var M1t=s(TO);ZSo=r(M1t,"MPNetForMaskedLM"),M1t.forEach(t),eRo=r(uke," (MPNet model)"),uke.forEach(t),oRo=i(U),O2=n(U,"LI",{});var bke=s(O2);Bge=n(bke,"STRONG",{});var E1t=s(Bge);rRo=r(E1t,"nezha"),E1t.forEach(t),tRo=r(bke," \u2014 "),MO=n(bke,"A",{href:!0});var C1t=s(MO);aRo=r(C1t,"NezhaForMaskedLM"),C1t.forEach(t),nRo=r(bke," (Nezha model)"),bke.forEach(t),sRo=i(U),V2=n(U,"LI",{});var vke=s(V2);Ige=n(vke,"STRONG",{});var w1t=s(Ige);lRo=r(w1t,"nystromformer"),w1t.forEach(t),iRo=r(vke," \u2014 "),EO=n(vke,"A",{href:!0});var A1t=s(EO);dRo=r(A1t,"NystromformerForMaskedLM"),A1t.forEach(t),cRo=r(vke," (Nystr\xF6mformer model)"),vke.forEach(t),fRo=i(U),X2=n(U,"LI",{});var Fke=s(X2);Nge=n(Fke,"STRONG",{});var L1t=s(Nge);mRo=r(L1t,"perceiver"),L1t.forEach(t),gRo=r(Fke," \u2014 "),CO=n(Fke,"A",{href:!0});var y1t=s(CO);hRo=r(y1t,"PerceiverForMaskedLM"),y1t.forEach(t),pRo=r(Fke," (Perceiver model)"),Fke.forEach(t),_Ro=i(U),z2=n(U,"LI",{});var Tke=s(z2);qge=n(Tke,"STRONG",{});var x1t=s(qge);uRo=r(x1t,"qdqbert"),x1t.forEach(t),bRo=r(Tke," \u2014 "),wO=n(Tke,"A",{href:!0});var $1t=s(wO);vRo=r($1t,"QDQBertForMaskedLM"),$1t.forEach(t),FRo=r(Tke," (QDQBert model)"),Tke.forEach(t),TRo=i(U),W2=n(U,"LI",{});var Mke=s(W2);jge=n(Mke,"STRONG",{});var k1t=s(jge);MRo=r(k1t,"reformer"),k1t.forEach(t),ERo=r(Mke," \u2014 "),AO=n(Mke,"A",{href:!0});var S1t=s(AO);CRo=r(S1t,"ReformerForMaskedLM"),S1t.forEach(t),wRo=r(Mke," (Reformer model)"),Mke.forEach(t),ARo=i(U),Q2=n(U,"LI",{});var Eke=s(Q2);Dge=n(Eke,"STRONG",{});var R1t=s(Dge);LRo=r(R1t,"rembert"),R1t.forEach(t),yRo=r(Eke," \u2014 "),LO=n(Eke,"A",{href:!0});var P1t=s(LO);xRo=r(P1t,"RemBertForMaskedLM"),P1t.forEach(t),$Ro=r(Eke," (RemBERT model)"),Eke.forEach(t),kRo=i(U),H2=n(U,"LI",{});var Cke=s(H2);Gge=n(Cke,"STRONG",{});var B1t=s(Gge);SRo=r(B1t,"roberta"),B1t.forEach(t),RRo=r(Cke," \u2014 "),yO=n(Cke,"A",{href:!0});var I1t=s(yO);PRo=r(I1t,"RobertaForMaskedLM"),I1t.forEach(t),BRo=r(Cke," (RoBERTa model)"),Cke.forEach(t),IRo=i(U),U2=n(U,"LI",{});var wke=s(U2);Oge=n(wke,"STRONG",{});var N1t=s(Oge);NRo=r(N1t,"roformer"),N1t.forEach(t),qRo=r(wke," \u2014 "),xO=n(wke,"A",{href:!0});var q1t=s(xO);jRo=r(q1t,"RoFormerForMaskedLM"),q1t.forEach(t),DRo=r(wke," (RoFormer model)"),wke.forEach(t),GRo=i(U),J2=n(U,"LI",{});var Ake=s(J2);Vge=n(Ake,"STRONG",{});var j1t=s(Vge);ORo=r(j1t,"squeezebert"),j1t.forEach(t),VRo=r(Ake," \u2014 "),$O=n(Ake,"A",{href:!0});var D1t=s($O);XRo=r(D1t,"SqueezeBertForMaskedLM"),D1t.forEach(t),zRo=r(Ake," (SqueezeBERT model)"),Ake.forEach(t),WRo=i(U),Y2=n(U,"LI",{});var Lke=s(Y2);Xge=n(Lke,"STRONG",{});var G1t=s(Xge);QRo=r(G1t,"tapas"),G1t.forEach(t),HRo=r(Lke," \u2014 "),kO=n(Lke,"A",{href:!0});var O1t=s(kO);URo=r(O1t,"TapasForMaskedLM"),O1t.forEach(t),JRo=r(Lke," (TAPAS model)"),Lke.forEach(t),YRo=i(U),K2=n(U,"LI",{});var yke=s(K2);zge=n(yke,"STRONG",{});var V1t=s(zge);KRo=r(V1t,"wav2vec2"),V1t.forEach(t),ZRo=r(yke," \u2014 "),Wge=n(yke,"CODE",{});var X1t=s(Wge);ePo=r(X1t,"Wav2Vec2ForMaskedLM"),X1t.forEach(t),oPo=r(yke," (Wav2Vec2 model)"),yke.forEach(t),rPo=i(U),Z2=n(U,"LI",{});var xke=s(Z2);Qge=n(xke,"STRONG",{});var z1t=s(Qge);tPo=r(z1t,"xlm"),z1t.forEach(t),aPo=r(xke," \u2014 "),SO=n(xke,"A",{href:!0});var W1t=s(SO);nPo=r(W1t,"XLMWithLMHeadModel"),W1t.forEach(t),sPo=r(xke," (XLM model)"),xke.forEach(t),lPo=i(U),eb=n(U,"LI",{});var $ke=s(eb);Hge=n($ke,"STRONG",{});var Q1t=s(Hge);iPo=r(Q1t,"xlm-roberta"),Q1t.forEach(t),dPo=r($ke," \u2014 "),RO=n($ke,"A",{href:!0});var H1t=s(RO);cPo=r(H1t,"XLMRobertaForMaskedLM"),H1t.forEach(t),fPo=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),mPo=i(U),ob=n(U,"LI",{});var kke=s(ob);Uge=n(kke,"STRONG",{});var U1t=s(Uge);gPo=r(U1t,"xlm-roberta-xl"),U1t.forEach(t),hPo=r(kke," \u2014 "),PO=n(kke,"A",{href:!0});var J1t=s(PO);pPo=r(J1t,"XLMRobertaXLForMaskedLM"),J1t.forEach(t),_Po=r(kke," (XLM-RoBERTa-XL model)"),kke.forEach(t),uPo=i(U),rb=n(U,"LI",{});var Ske=s(rb);Jge=n(Ske,"STRONG",{});var Y1t=s(Jge);bPo=r(Y1t,"yoso"),Y1t.forEach(t),vPo=r(Ske," \u2014 "),BO=n(Ske,"A",{href:!0});var K1t=s(BO);FPo=r(K1t,"YosoForMaskedLM"),K1t.forEach(t),TPo=r(Ske," (YOSO model)"),Ske.forEach(t),U.forEach(t),MPo=i(ia),tb=n(ia,"P",{});var Rke=s(tb);EPo=r(Rke,"The model is set in evaluation mode by default using "),Yge=n(Rke,"CODE",{});var Z1t=s(Yge);CPo=r(Z1t,"model.eval()"),Z1t.forEach(t),wPo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(Rke,"CODE",{});var e2t=s(Kge);APo=r(e2t,"model.train()"),e2t.forEach(t),Rke.forEach(t),LPo=i(ia),T(ab.$$.fragment,ia),ia.forEach(t),rl.forEach(t),SOe=i(f),Ji=n(f,"H2",{class:!0});var qXe=s(Ji);nb=n(qXe,"A",{id:!0,class:!0,href:!0});var o2t=s(nb);Zge=n(o2t,"SPAN",{});var r2t=s(Zge);T(LL.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),yPo=i(qXe),ehe=n(qXe,"SPAN",{});var t2t=s(ehe);xPo=r(t2t,"AutoModelForSeq2SeqLM"),t2t.forEach(t),qXe.forEach(t),ROe=i(f),Ro=n(f,"DIV",{class:!0});var tl=s(Ro);T(yL.$$.fragment,tl),$Po=i(tl),Yi=n(tl,"P",{});var Voe=s(Yi);kPo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IO=n(Voe,"A",{href:!0});var a2t=s(IO);SPo=r(a2t,"from_pretrained()"),a2t.forEach(t),RPo=r(Voe," class method or the "),NO=n(Voe,"A",{href:!0});var n2t=s(NO);PPo=r(n2t,"from_config()"),n2t.forEach(t),BPo=r(Voe,` class
method.`),Voe.forEach(t),IPo=i(tl),xL=n(tl,"P",{});var jXe=s(xL);NPo=r(jXe,"This class cannot be instantiated directly using "),ohe=n(jXe,"CODE",{});var s2t=s(ohe);qPo=r(s2t,"__init__()"),s2t.forEach(t),jPo=r(jXe," (throws an error)."),jXe.forEach(t),DPo=i(tl),ct=n(tl,"DIV",{class:!0});var W3=s(ct);T($L.$$.fragment,W3),GPo=i(W3),rhe=n(W3,"P",{});var l2t=s(rhe);OPo=r(l2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l2t.forEach(t),VPo=i(W3),Ki=n(W3,"P",{});var Xoe=s(Ki);XPo=r(Xoe,`Note:
Loading a model from its configuration file does `),the=n(Xoe,"STRONG",{});var i2t=s(the);zPo=r(i2t,"not"),i2t.forEach(t),WPo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(Xoe,"A",{href:!0});var d2t=s(qO);QPo=r(d2t,"from_pretrained()"),d2t.forEach(t),HPo=r(Xoe," to load the model weights."),Xoe.forEach(t),UPo=i(W3),T(sb.$$.fragment,W3),W3.forEach(t),JPo=i(tl),eo=n(tl,"DIV",{class:!0});var da=s(eo);T(kL.$$.fragment,da),YPo=i(da),ahe=n(da,"P",{});var c2t=s(ahe);KPo=r(c2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),c2t.forEach(t),ZPo=i(da),qa=n(da,"P",{});var Q3=s(qa);eBo=r(Q3,"The model class to instantiate is selected based on the "),nhe=n(Q3,"CODE",{});var f2t=s(nhe);oBo=r(f2t,"model_type"),f2t.forEach(t),rBo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),she=n(Q3,"CODE",{});var m2t=s(she);tBo=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),aBo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(Q3,"CODE",{});var g2t=s(lhe);nBo=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),sBo=r(Q3,":"),Q3.forEach(t),lBo=i(da),pe=n(da,"UL",{});var be=s(pe);lb=n(be,"LI",{});var Pke=s(lb);ihe=n(Pke,"STRONG",{});var h2t=s(ihe);iBo=r(h2t,"bart"),h2t.forEach(t),dBo=r(Pke," \u2014 "),jO=n(Pke,"A",{href:!0});var p2t=s(jO);cBo=r(p2t,"BartForConditionalGeneration"),p2t.forEach(t),fBo=r(Pke," (BART model)"),Pke.forEach(t),mBo=i(be),ib=n(be,"LI",{});var Bke=s(ib);dhe=n(Bke,"STRONG",{});var _2t=s(dhe);gBo=r(_2t,"bigbird_pegasus"),_2t.forEach(t),hBo=r(Bke," \u2014 "),DO=n(Bke,"A",{href:!0});var u2t=s(DO);pBo=r(u2t,"BigBirdPegasusForConditionalGeneration"),u2t.forEach(t),_Bo=r(Bke," (BigBird-Pegasus model)"),Bke.forEach(t),uBo=i(be),db=n(be,"LI",{});var Ike=s(db);che=n(Ike,"STRONG",{});var b2t=s(che);bBo=r(b2t,"blenderbot"),b2t.forEach(t),vBo=r(Ike," \u2014 "),GO=n(Ike,"A",{href:!0});var v2t=s(GO);FBo=r(v2t,"BlenderbotForConditionalGeneration"),v2t.forEach(t),TBo=r(Ike," (Blenderbot model)"),Ike.forEach(t),MBo=i(be),cb=n(be,"LI",{});var Nke=s(cb);fhe=n(Nke,"STRONG",{});var F2t=s(fhe);EBo=r(F2t,"blenderbot-small"),F2t.forEach(t),CBo=r(Nke," \u2014 "),OO=n(Nke,"A",{href:!0});var T2t=s(OO);wBo=r(T2t,"BlenderbotSmallForConditionalGeneration"),T2t.forEach(t),ABo=r(Nke," (BlenderbotSmall model)"),Nke.forEach(t),LBo=i(be),fb=n(be,"LI",{});var qke=s(fb);mhe=n(qke,"STRONG",{});var M2t=s(mhe);yBo=r(M2t,"encoder-decoder"),M2t.forEach(t),xBo=r(qke," \u2014 "),VO=n(qke,"A",{href:!0});var E2t=s(VO);$Bo=r(E2t,"EncoderDecoderModel"),E2t.forEach(t),kBo=r(qke," (Encoder decoder model)"),qke.forEach(t),SBo=i(be),mb=n(be,"LI",{});var jke=s(mb);ghe=n(jke,"STRONG",{});var C2t=s(ghe);RBo=r(C2t,"fsmt"),C2t.forEach(t),PBo=r(jke," \u2014 "),XO=n(jke,"A",{href:!0});var w2t=s(XO);BBo=r(w2t,"FSMTForConditionalGeneration"),w2t.forEach(t),IBo=r(jke," (FairSeq Machine-Translation model)"),jke.forEach(t),NBo=i(be),gb=n(be,"LI",{});var Dke=s(gb);hhe=n(Dke,"STRONG",{});var A2t=s(hhe);qBo=r(A2t,"led"),A2t.forEach(t),jBo=r(Dke," \u2014 "),zO=n(Dke,"A",{href:!0});var L2t=s(zO);DBo=r(L2t,"LEDForConditionalGeneration"),L2t.forEach(t),GBo=r(Dke," (LED model)"),Dke.forEach(t),OBo=i(be),hb=n(be,"LI",{});var Gke=s(hb);phe=n(Gke,"STRONG",{});var y2t=s(phe);VBo=r(y2t,"longt5"),y2t.forEach(t),XBo=r(Gke," \u2014 "),WO=n(Gke,"A",{href:!0});var x2t=s(WO);zBo=r(x2t,"LongT5ForConditionalGeneration"),x2t.forEach(t),WBo=r(Gke," (LongT5 model)"),Gke.forEach(t),QBo=i(be),pb=n(be,"LI",{});var Oke=s(pb);_he=n(Oke,"STRONG",{});var $2t=s(_he);HBo=r($2t,"m2m_100"),$2t.forEach(t),UBo=r(Oke," \u2014 "),QO=n(Oke,"A",{href:!0});var k2t=s(QO);JBo=r(k2t,"M2M100ForConditionalGeneration"),k2t.forEach(t),YBo=r(Oke," (M2M100 model)"),Oke.forEach(t),KBo=i(be),_b=n(be,"LI",{});var Vke=s(_b);uhe=n(Vke,"STRONG",{});var S2t=s(uhe);ZBo=r(S2t,"marian"),S2t.forEach(t),eIo=r(Vke," \u2014 "),HO=n(Vke,"A",{href:!0});var R2t=s(HO);oIo=r(R2t,"MarianMTModel"),R2t.forEach(t),rIo=r(Vke," (Marian model)"),Vke.forEach(t),tIo=i(be),ub=n(be,"LI",{});var Xke=s(ub);bhe=n(Xke,"STRONG",{});var P2t=s(bhe);aIo=r(P2t,"mbart"),P2t.forEach(t),nIo=r(Xke," \u2014 "),UO=n(Xke,"A",{href:!0});var B2t=s(UO);sIo=r(B2t,"MBartForConditionalGeneration"),B2t.forEach(t),lIo=r(Xke," (mBART model)"),Xke.forEach(t),iIo=i(be),bb=n(be,"LI",{});var zke=s(bb);vhe=n(zke,"STRONG",{});var I2t=s(vhe);dIo=r(I2t,"mt5"),I2t.forEach(t),cIo=r(zke," \u2014 "),JO=n(zke,"A",{href:!0});var N2t=s(JO);fIo=r(N2t,"MT5ForConditionalGeneration"),N2t.forEach(t),mIo=r(zke," (MT5 model)"),zke.forEach(t),gIo=i(be),vb=n(be,"LI",{});var Wke=s(vb);Fhe=n(Wke,"STRONG",{});var q2t=s(Fhe);hIo=r(q2t,"pegasus"),q2t.forEach(t),pIo=r(Wke," \u2014 "),YO=n(Wke,"A",{href:!0});var j2t=s(YO);_Io=r(j2t,"PegasusForConditionalGeneration"),j2t.forEach(t),uIo=r(Wke," (Pegasus model)"),Wke.forEach(t),bIo=i(be),Fb=n(be,"LI",{});var Qke=s(Fb);The=n(Qke,"STRONG",{});var D2t=s(The);vIo=r(D2t,"plbart"),D2t.forEach(t),FIo=r(Qke," \u2014 "),KO=n(Qke,"A",{href:!0});var G2t=s(KO);TIo=r(G2t,"PLBartForConditionalGeneration"),G2t.forEach(t),MIo=r(Qke," (PLBart model)"),Qke.forEach(t),EIo=i(be),Tb=n(be,"LI",{});var Hke=s(Tb);Mhe=n(Hke,"STRONG",{});var O2t=s(Mhe);CIo=r(O2t,"prophetnet"),O2t.forEach(t),wIo=r(Hke," \u2014 "),ZO=n(Hke,"A",{href:!0});var V2t=s(ZO);AIo=r(V2t,"ProphetNetForConditionalGeneration"),V2t.forEach(t),LIo=r(Hke," (ProphetNet model)"),Hke.forEach(t),yIo=i(be),Mb=n(be,"LI",{});var Uke=s(Mb);Ehe=n(Uke,"STRONG",{});var X2t=s(Ehe);xIo=r(X2t,"t5"),X2t.forEach(t),$Io=r(Uke," \u2014 "),eV=n(Uke,"A",{href:!0});var z2t=s(eV);kIo=r(z2t,"T5ForConditionalGeneration"),z2t.forEach(t),SIo=r(Uke," (T5 model)"),Uke.forEach(t),RIo=i(be),Eb=n(be,"LI",{});var Jke=s(Eb);Che=n(Jke,"STRONG",{});var W2t=s(Che);PIo=r(W2t,"xlm-prophetnet"),W2t.forEach(t),BIo=r(Jke," \u2014 "),oV=n(Jke,"A",{href:!0});var Q2t=s(oV);IIo=r(Q2t,"XLMProphetNetForConditionalGeneration"),Q2t.forEach(t),NIo=r(Jke," (XLM-ProphetNet model)"),Jke.forEach(t),be.forEach(t),qIo=i(da),Cb=n(da,"P",{});var Yke=s(Cb);jIo=r(Yke,"The model is set in evaluation mode by default using "),whe=n(Yke,"CODE",{});var H2t=s(whe);DIo=r(H2t,"model.eval()"),H2t.forEach(t),GIo=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=n(Yke,"CODE",{});var U2t=s(Ahe);OIo=r(U2t,"model.train()"),U2t.forEach(t),Yke.forEach(t),VIo=i(da),T(wb.$$.fragment,da),da.forEach(t),tl.forEach(t),POe=i(f),Zi=n(f,"H2",{class:!0});var DXe=s(Zi);Ab=n(DXe,"A",{id:!0,class:!0,href:!0});var J2t=s(Ab);Lhe=n(J2t,"SPAN",{});var Y2t=s(Lhe);T(SL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),XIo=i(DXe),yhe=n(DXe,"SPAN",{});var K2t=s(yhe);zIo=r(K2t,"AutoModelForSequenceClassification"),K2t.forEach(t),DXe.forEach(t),BOe=i(f),Po=n(f,"DIV",{class:!0});var al=s(Po);T(RL.$$.fragment,al),WIo=i(al),ed=n(al,"P",{});var zoe=s(ed);QIo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rV=n(zoe,"A",{href:!0});var Z2t=s(rV);HIo=r(Z2t,"from_pretrained()"),Z2t.forEach(t),UIo=r(zoe," class method or the "),tV=n(zoe,"A",{href:!0});var ebt=s(tV);JIo=r(ebt,"from_config()"),ebt.forEach(t),YIo=r(zoe,` class
method.`),zoe.forEach(t),KIo=i(al),PL=n(al,"P",{});var GXe=s(PL);ZIo=r(GXe,"This class cannot be instantiated directly using "),xhe=n(GXe,"CODE",{});var obt=s(xhe);eNo=r(obt,"__init__()"),obt.forEach(t),oNo=r(GXe," (throws an error)."),GXe.forEach(t),rNo=i(al),ft=n(al,"DIV",{class:!0});var H3=s(ft);T(BL.$$.fragment,H3),tNo=i(H3),$he=n(H3,"P",{});var rbt=s($he);aNo=r(rbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rbt.forEach(t),nNo=i(H3),od=n(H3,"P",{});var Woe=s(od);sNo=r(Woe,`Note:
Loading a model from its configuration file does `),khe=n(Woe,"STRONG",{});var tbt=s(khe);lNo=r(tbt,"not"),tbt.forEach(t),iNo=r(Woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(Woe,"A",{href:!0});var abt=s(aV);dNo=r(abt,"from_pretrained()"),abt.forEach(t),cNo=r(Woe," to load the model weights."),Woe.forEach(t),fNo=i(H3),T(Lb.$$.fragment,H3),H3.forEach(t),mNo=i(al),oo=n(al,"DIV",{class:!0});var ca=s(oo);T(IL.$$.fragment,ca),gNo=i(ca),She=n(ca,"P",{});var nbt=s(She);hNo=r(nbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nbt.forEach(t),pNo=i(ca),ja=n(ca,"P",{});var U3=s(ja);_No=r(U3,"The model class to instantiate is selected based on the "),Rhe=n(U3,"CODE",{});var sbt=s(Rhe);uNo=r(sbt,"model_type"),sbt.forEach(t),bNo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Phe=n(U3,"CODE",{});var lbt=s(Phe);vNo=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),FNo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(U3,"CODE",{});var ibt=s(Bhe);TNo=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),MNo=r(U3,":"),U3.forEach(t),ENo=i(ca),N=n(ca,"UL",{});var j=s(N);yb=n(j,"LI",{});var Kke=s(yb);Ihe=n(Kke,"STRONG",{});var dbt=s(Ihe);CNo=r(dbt,"albert"),dbt.forEach(t),wNo=r(Kke," \u2014 "),nV=n(Kke,"A",{href:!0});var cbt=s(nV);ANo=r(cbt,"AlbertForSequenceClassification"),cbt.forEach(t),LNo=r(Kke," (ALBERT model)"),Kke.forEach(t),yNo=i(j),xb=n(j,"LI",{});var Zke=s(xb);Nhe=n(Zke,"STRONG",{});var fbt=s(Nhe);xNo=r(fbt,"bart"),fbt.forEach(t),$No=r(Zke," \u2014 "),sV=n(Zke,"A",{href:!0});var mbt=s(sV);kNo=r(mbt,"BartForSequenceClassification"),mbt.forEach(t),SNo=r(Zke," (BART model)"),Zke.forEach(t),RNo=i(j),$b=n(j,"LI",{});var eSe=s($b);qhe=n(eSe,"STRONG",{});var gbt=s(qhe);PNo=r(gbt,"bert"),gbt.forEach(t),BNo=r(eSe," \u2014 "),lV=n(eSe,"A",{href:!0});var hbt=s(lV);INo=r(hbt,"BertForSequenceClassification"),hbt.forEach(t),NNo=r(eSe," (BERT model)"),eSe.forEach(t),qNo=i(j),kb=n(j,"LI",{});var oSe=s(kb);jhe=n(oSe,"STRONG",{});var pbt=s(jhe);jNo=r(pbt,"big_bird"),pbt.forEach(t),DNo=r(oSe," \u2014 "),iV=n(oSe,"A",{href:!0});var _bt=s(iV);GNo=r(_bt,"BigBirdForSequenceClassification"),_bt.forEach(t),ONo=r(oSe," (BigBird model)"),oSe.forEach(t),VNo=i(j),Sb=n(j,"LI",{});var rSe=s(Sb);Dhe=n(rSe,"STRONG",{});var ubt=s(Dhe);XNo=r(ubt,"bigbird_pegasus"),ubt.forEach(t),zNo=r(rSe," \u2014 "),dV=n(rSe,"A",{href:!0});var bbt=s(dV);WNo=r(bbt,"BigBirdPegasusForSequenceClassification"),bbt.forEach(t),QNo=r(rSe," (BigBird-Pegasus model)"),rSe.forEach(t),HNo=i(j),Rb=n(j,"LI",{});var tSe=s(Rb);Ghe=n(tSe,"STRONG",{});var vbt=s(Ghe);UNo=r(vbt,"bloom"),vbt.forEach(t),JNo=r(tSe," \u2014 "),cV=n(tSe,"A",{href:!0});var Fbt=s(cV);YNo=r(Fbt,"BloomForSequenceClassification"),Fbt.forEach(t),KNo=r(tSe," (BLOOM model)"),tSe.forEach(t),ZNo=i(j),Pb=n(j,"LI",{});var aSe=s(Pb);Ohe=n(aSe,"STRONG",{});var Tbt=s(Ohe);eqo=r(Tbt,"camembert"),Tbt.forEach(t),oqo=r(aSe," \u2014 "),fV=n(aSe,"A",{href:!0});var Mbt=s(fV);rqo=r(Mbt,"CamembertForSequenceClassification"),Mbt.forEach(t),tqo=r(aSe," (CamemBERT model)"),aSe.forEach(t),aqo=i(j),Bb=n(j,"LI",{});var nSe=s(Bb);Vhe=n(nSe,"STRONG",{});var Ebt=s(Vhe);nqo=r(Ebt,"canine"),Ebt.forEach(t),sqo=r(nSe," \u2014 "),mV=n(nSe,"A",{href:!0});var Cbt=s(mV);lqo=r(Cbt,"CanineForSequenceClassification"),Cbt.forEach(t),iqo=r(nSe," (CANINE model)"),nSe.forEach(t),dqo=i(j),Ib=n(j,"LI",{});var sSe=s(Ib);Xhe=n(sSe,"STRONG",{});var wbt=s(Xhe);cqo=r(wbt,"convbert"),wbt.forEach(t),fqo=r(sSe," \u2014 "),gV=n(sSe,"A",{href:!0});var Abt=s(gV);mqo=r(Abt,"ConvBertForSequenceClassification"),Abt.forEach(t),gqo=r(sSe," (ConvBERT model)"),sSe.forEach(t),hqo=i(j),Nb=n(j,"LI",{});var lSe=s(Nb);zhe=n(lSe,"STRONG",{});var Lbt=s(zhe);pqo=r(Lbt,"ctrl"),Lbt.forEach(t),_qo=r(lSe," \u2014 "),hV=n(lSe,"A",{href:!0});var ybt=s(hV);uqo=r(ybt,"CTRLForSequenceClassification"),ybt.forEach(t),bqo=r(lSe," (CTRL model)"),lSe.forEach(t),vqo=i(j),qb=n(j,"LI",{});var iSe=s(qb);Whe=n(iSe,"STRONG",{});var xbt=s(Whe);Fqo=r(xbt,"data2vec-text"),xbt.forEach(t),Tqo=r(iSe," \u2014 "),pV=n(iSe,"A",{href:!0});var $bt=s(pV);Mqo=r($bt,"Data2VecTextForSequenceClassification"),$bt.forEach(t),Eqo=r(iSe," (Data2VecText model)"),iSe.forEach(t),Cqo=i(j),jb=n(j,"LI",{});var dSe=s(jb);Qhe=n(dSe,"STRONG",{});var kbt=s(Qhe);wqo=r(kbt,"deberta"),kbt.forEach(t),Aqo=r(dSe," \u2014 "),_V=n(dSe,"A",{href:!0});var Sbt=s(_V);Lqo=r(Sbt,"DebertaForSequenceClassification"),Sbt.forEach(t),yqo=r(dSe," (DeBERTa model)"),dSe.forEach(t),xqo=i(j),Db=n(j,"LI",{});var cSe=s(Db);Hhe=n(cSe,"STRONG",{});var Rbt=s(Hhe);$qo=r(Rbt,"deberta-v2"),Rbt.forEach(t),kqo=r(cSe," \u2014 "),uV=n(cSe,"A",{href:!0});var Pbt=s(uV);Sqo=r(Pbt,"DebertaV2ForSequenceClassification"),Pbt.forEach(t),Rqo=r(cSe," (DeBERTa-v2 model)"),cSe.forEach(t),Pqo=i(j),Gb=n(j,"LI",{});var fSe=s(Gb);Uhe=n(fSe,"STRONG",{});var Bbt=s(Uhe);Bqo=r(Bbt,"distilbert"),Bbt.forEach(t),Iqo=r(fSe," \u2014 "),bV=n(fSe,"A",{href:!0});var Ibt=s(bV);Nqo=r(Ibt,"DistilBertForSequenceClassification"),Ibt.forEach(t),qqo=r(fSe," (DistilBERT model)"),fSe.forEach(t),jqo=i(j),Ob=n(j,"LI",{});var mSe=s(Ob);Jhe=n(mSe,"STRONG",{});var Nbt=s(Jhe);Dqo=r(Nbt,"electra"),Nbt.forEach(t),Gqo=r(mSe," \u2014 "),vV=n(mSe,"A",{href:!0});var qbt=s(vV);Oqo=r(qbt,"ElectraForSequenceClassification"),qbt.forEach(t),Vqo=r(mSe," (ELECTRA model)"),mSe.forEach(t),Xqo=i(j),Vb=n(j,"LI",{});var gSe=s(Vb);Yhe=n(gSe,"STRONG",{});var jbt=s(Yhe);zqo=r(jbt,"flaubert"),jbt.forEach(t),Wqo=r(gSe," \u2014 "),FV=n(gSe,"A",{href:!0});var Dbt=s(FV);Qqo=r(Dbt,"FlaubertForSequenceClassification"),Dbt.forEach(t),Hqo=r(gSe," (FlauBERT model)"),gSe.forEach(t),Uqo=i(j),Xb=n(j,"LI",{});var hSe=s(Xb);Khe=n(hSe,"STRONG",{});var Gbt=s(Khe);Jqo=r(Gbt,"fnet"),Gbt.forEach(t),Yqo=r(hSe," \u2014 "),TV=n(hSe,"A",{href:!0});var Obt=s(TV);Kqo=r(Obt,"FNetForSequenceClassification"),Obt.forEach(t),Zqo=r(hSe," (FNet model)"),hSe.forEach(t),ejo=i(j),zb=n(j,"LI",{});var pSe=s(zb);Zhe=n(pSe,"STRONG",{});var Vbt=s(Zhe);ojo=r(Vbt,"funnel"),Vbt.forEach(t),rjo=r(pSe," \u2014 "),MV=n(pSe,"A",{href:!0});var Xbt=s(MV);tjo=r(Xbt,"FunnelForSequenceClassification"),Xbt.forEach(t),ajo=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),njo=i(j),Wb=n(j,"LI",{});var _Se=s(Wb);epe=n(_Se,"STRONG",{});var zbt=s(epe);sjo=r(zbt,"gpt2"),zbt.forEach(t),ljo=r(_Se," \u2014 "),EV=n(_Se,"A",{href:!0});var Wbt=s(EV);ijo=r(Wbt,"GPT2ForSequenceClassification"),Wbt.forEach(t),djo=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),cjo=i(j),Qb=n(j,"LI",{});var uSe=s(Qb);ope=n(uSe,"STRONG",{});var Qbt=s(ope);fjo=r(Qbt,"gpt_neo"),Qbt.forEach(t),mjo=r(uSe," \u2014 "),CV=n(uSe,"A",{href:!0});var Hbt=s(CV);gjo=r(Hbt,"GPTNeoForSequenceClassification"),Hbt.forEach(t),hjo=r(uSe," (GPT Neo model)"),uSe.forEach(t),pjo=i(j),Hb=n(j,"LI",{});var bSe=s(Hb);rpe=n(bSe,"STRONG",{});var Ubt=s(rpe);_jo=r(Ubt,"gptj"),Ubt.forEach(t),ujo=r(bSe," \u2014 "),wV=n(bSe,"A",{href:!0});var Jbt=s(wV);bjo=r(Jbt,"GPTJForSequenceClassification"),Jbt.forEach(t),vjo=r(bSe," (GPT-J model)"),bSe.forEach(t),Fjo=i(j),Ub=n(j,"LI",{});var vSe=s(Ub);tpe=n(vSe,"STRONG",{});var Ybt=s(tpe);Tjo=r(Ybt,"ibert"),Ybt.forEach(t),Mjo=r(vSe," \u2014 "),AV=n(vSe,"A",{href:!0});var Kbt=s(AV);Ejo=r(Kbt,"IBertForSequenceClassification"),Kbt.forEach(t),Cjo=r(vSe," (I-BERT model)"),vSe.forEach(t),wjo=i(j),Jb=n(j,"LI",{});var FSe=s(Jb);ape=n(FSe,"STRONG",{});var Zbt=s(ape);Ajo=r(Zbt,"layoutlm"),Zbt.forEach(t),Ljo=r(FSe," \u2014 "),LV=n(FSe,"A",{href:!0});var evt=s(LV);yjo=r(evt,"LayoutLMForSequenceClassification"),evt.forEach(t),xjo=r(FSe," (LayoutLM model)"),FSe.forEach(t),$jo=i(j),Yb=n(j,"LI",{});var TSe=s(Yb);npe=n(TSe,"STRONG",{});var ovt=s(npe);kjo=r(ovt,"layoutlmv2"),ovt.forEach(t),Sjo=r(TSe," \u2014 "),yV=n(TSe,"A",{href:!0});var rvt=s(yV);Rjo=r(rvt,"LayoutLMv2ForSequenceClassification"),rvt.forEach(t),Pjo=r(TSe," (LayoutLMv2 model)"),TSe.forEach(t),Bjo=i(j),Kb=n(j,"LI",{});var MSe=s(Kb);spe=n(MSe,"STRONG",{});var tvt=s(spe);Ijo=r(tvt,"layoutlmv3"),tvt.forEach(t),Njo=r(MSe," \u2014 "),xV=n(MSe,"A",{href:!0});var avt=s(xV);qjo=r(avt,"LayoutLMv3ForSequenceClassification"),avt.forEach(t),jjo=r(MSe," (LayoutLMv3 model)"),MSe.forEach(t),Djo=i(j),Zb=n(j,"LI",{});var ESe=s(Zb);lpe=n(ESe,"STRONG",{});var nvt=s(lpe);Gjo=r(nvt,"led"),nvt.forEach(t),Ojo=r(ESe," \u2014 "),$V=n(ESe,"A",{href:!0});var svt=s($V);Vjo=r(svt,"LEDForSequenceClassification"),svt.forEach(t),Xjo=r(ESe," (LED model)"),ESe.forEach(t),zjo=i(j),ev=n(j,"LI",{});var CSe=s(ev);ipe=n(CSe,"STRONG",{});var lvt=s(ipe);Wjo=r(lvt,"longformer"),lvt.forEach(t),Qjo=r(CSe," \u2014 "),kV=n(CSe,"A",{href:!0});var ivt=s(kV);Hjo=r(ivt,"LongformerForSequenceClassification"),ivt.forEach(t),Ujo=r(CSe," (Longformer model)"),CSe.forEach(t),Jjo=i(j),ov=n(j,"LI",{});var wSe=s(ov);dpe=n(wSe,"STRONG",{});var dvt=s(dpe);Yjo=r(dvt,"mbart"),dvt.forEach(t),Kjo=r(wSe," \u2014 "),SV=n(wSe,"A",{href:!0});var cvt=s(SV);Zjo=r(cvt,"MBartForSequenceClassification"),cvt.forEach(t),eDo=r(wSe," (mBART model)"),wSe.forEach(t),oDo=i(j),rv=n(j,"LI",{});var ASe=s(rv);cpe=n(ASe,"STRONG",{});var fvt=s(cpe);rDo=r(fvt,"megatron-bert"),fvt.forEach(t),tDo=r(ASe," \u2014 "),RV=n(ASe,"A",{href:!0});var mvt=s(RV);aDo=r(mvt,"MegatronBertForSequenceClassification"),mvt.forEach(t),nDo=r(ASe," (Megatron-BERT model)"),ASe.forEach(t),sDo=i(j),tv=n(j,"LI",{});var LSe=s(tv);fpe=n(LSe,"STRONG",{});var gvt=s(fpe);lDo=r(gvt,"mobilebert"),gvt.forEach(t),iDo=r(LSe," \u2014 "),PV=n(LSe,"A",{href:!0});var hvt=s(PV);dDo=r(hvt,"MobileBertForSequenceClassification"),hvt.forEach(t),cDo=r(LSe," (MobileBERT model)"),LSe.forEach(t),fDo=i(j),av=n(j,"LI",{});var ySe=s(av);mpe=n(ySe,"STRONG",{});var pvt=s(mpe);mDo=r(pvt,"mpnet"),pvt.forEach(t),gDo=r(ySe," \u2014 "),BV=n(ySe,"A",{href:!0});var _vt=s(BV);hDo=r(_vt,"MPNetForSequenceClassification"),_vt.forEach(t),pDo=r(ySe," (MPNet model)"),ySe.forEach(t),_Do=i(j),nv=n(j,"LI",{});var xSe=s(nv);gpe=n(xSe,"STRONG",{});var uvt=s(gpe);uDo=r(uvt,"nezha"),uvt.forEach(t),bDo=r(xSe," \u2014 "),IV=n(xSe,"A",{href:!0});var bvt=s(IV);vDo=r(bvt,"NezhaForSequenceClassification"),bvt.forEach(t),FDo=r(xSe," (Nezha model)"),xSe.forEach(t),TDo=i(j),sv=n(j,"LI",{});var $Se=s(sv);hpe=n($Se,"STRONG",{});var vvt=s(hpe);MDo=r(vvt,"nystromformer"),vvt.forEach(t),EDo=r($Se," \u2014 "),NV=n($Se,"A",{href:!0});var Fvt=s(NV);CDo=r(Fvt,"NystromformerForSequenceClassification"),Fvt.forEach(t),wDo=r($Se," (Nystr\xF6mformer model)"),$Se.forEach(t),ADo=i(j),lv=n(j,"LI",{});var kSe=s(lv);ppe=n(kSe,"STRONG",{});var Tvt=s(ppe);LDo=r(Tvt,"openai-gpt"),Tvt.forEach(t),yDo=r(kSe," \u2014 "),qV=n(kSe,"A",{href:!0});var Mvt=s(qV);xDo=r(Mvt,"OpenAIGPTForSequenceClassification"),Mvt.forEach(t),$Do=r(kSe," (OpenAI GPT model)"),kSe.forEach(t),kDo=i(j),iv=n(j,"LI",{});var SSe=s(iv);_pe=n(SSe,"STRONG",{});var Evt=s(_pe);SDo=r(Evt,"perceiver"),Evt.forEach(t),RDo=r(SSe," \u2014 "),jV=n(SSe,"A",{href:!0});var Cvt=s(jV);PDo=r(Cvt,"PerceiverForSequenceClassification"),Cvt.forEach(t),BDo=r(SSe," (Perceiver model)"),SSe.forEach(t),IDo=i(j),dv=n(j,"LI",{});var RSe=s(dv);upe=n(RSe,"STRONG",{});var wvt=s(upe);NDo=r(wvt,"plbart"),wvt.forEach(t),qDo=r(RSe," \u2014 "),DV=n(RSe,"A",{href:!0});var Avt=s(DV);jDo=r(Avt,"PLBartForSequenceClassification"),Avt.forEach(t),DDo=r(RSe," (PLBart model)"),RSe.forEach(t),GDo=i(j),cv=n(j,"LI",{});var PSe=s(cv);bpe=n(PSe,"STRONG",{});var Lvt=s(bpe);ODo=r(Lvt,"qdqbert"),Lvt.forEach(t),VDo=r(PSe," \u2014 "),GV=n(PSe,"A",{href:!0});var yvt=s(GV);XDo=r(yvt,"QDQBertForSequenceClassification"),yvt.forEach(t),zDo=r(PSe," (QDQBert model)"),PSe.forEach(t),WDo=i(j),fv=n(j,"LI",{});var BSe=s(fv);vpe=n(BSe,"STRONG",{});var xvt=s(vpe);QDo=r(xvt,"reformer"),xvt.forEach(t),HDo=r(BSe," \u2014 "),OV=n(BSe,"A",{href:!0});var $vt=s(OV);UDo=r($vt,"ReformerForSequenceClassification"),$vt.forEach(t),JDo=r(BSe," (Reformer model)"),BSe.forEach(t),YDo=i(j),mv=n(j,"LI",{});var ISe=s(mv);Fpe=n(ISe,"STRONG",{});var kvt=s(Fpe);KDo=r(kvt,"rembert"),kvt.forEach(t),ZDo=r(ISe," \u2014 "),VV=n(ISe,"A",{href:!0});var Svt=s(VV);eGo=r(Svt,"RemBertForSequenceClassification"),Svt.forEach(t),oGo=r(ISe," (RemBERT model)"),ISe.forEach(t),rGo=i(j),gv=n(j,"LI",{});var NSe=s(gv);Tpe=n(NSe,"STRONG",{});var Rvt=s(Tpe);tGo=r(Rvt,"roberta"),Rvt.forEach(t),aGo=r(NSe," \u2014 "),XV=n(NSe,"A",{href:!0});var Pvt=s(XV);nGo=r(Pvt,"RobertaForSequenceClassification"),Pvt.forEach(t),sGo=r(NSe," (RoBERTa model)"),NSe.forEach(t),lGo=i(j),hv=n(j,"LI",{});var qSe=s(hv);Mpe=n(qSe,"STRONG",{});var Bvt=s(Mpe);iGo=r(Bvt,"roformer"),Bvt.forEach(t),dGo=r(qSe," \u2014 "),zV=n(qSe,"A",{href:!0});var Ivt=s(zV);cGo=r(Ivt,"RoFormerForSequenceClassification"),Ivt.forEach(t),fGo=r(qSe," (RoFormer model)"),qSe.forEach(t),mGo=i(j),pv=n(j,"LI",{});var jSe=s(pv);Epe=n(jSe,"STRONG",{});var Nvt=s(Epe);gGo=r(Nvt,"squeezebert"),Nvt.forEach(t),hGo=r(jSe," \u2014 "),WV=n(jSe,"A",{href:!0});var qvt=s(WV);pGo=r(qvt,"SqueezeBertForSequenceClassification"),qvt.forEach(t),_Go=r(jSe," (SqueezeBERT model)"),jSe.forEach(t),uGo=i(j),_v=n(j,"LI",{});var DSe=s(_v);Cpe=n(DSe,"STRONG",{});var jvt=s(Cpe);bGo=r(jvt,"tapas"),jvt.forEach(t),vGo=r(DSe," \u2014 "),QV=n(DSe,"A",{href:!0});var Dvt=s(QV);FGo=r(Dvt,"TapasForSequenceClassification"),Dvt.forEach(t),TGo=r(DSe," (TAPAS model)"),DSe.forEach(t),MGo=i(j),uv=n(j,"LI",{});var GSe=s(uv);wpe=n(GSe,"STRONG",{});var Gvt=s(wpe);EGo=r(Gvt,"transfo-xl"),Gvt.forEach(t),CGo=r(GSe," \u2014 "),HV=n(GSe,"A",{href:!0});var Ovt=s(HV);wGo=r(Ovt,"TransfoXLForSequenceClassification"),Ovt.forEach(t),AGo=r(GSe," (Transformer-XL model)"),GSe.forEach(t),LGo=i(j),bv=n(j,"LI",{});var OSe=s(bv);Ape=n(OSe,"STRONG",{});var Vvt=s(Ape);yGo=r(Vvt,"xlm"),Vvt.forEach(t),xGo=r(OSe," \u2014 "),UV=n(OSe,"A",{href:!0});var Xvt=s(UV);$Go=r(Xvt,"XLMForSequenceClassification"),Xvt.forEach(t),kGo=r(OSe," (XLM model)"),OSe.forEach(t),SGo=i(j),vv=n(j,"LI",{});var VSe=s(vv);Lpe=n(VSe,"STRONG",{});var zvt=s(Lpe);RGo=r(zvt,"xlm-roberta"),zvt.forEach(t),PGo=r(VSe," \u2014 "),JV=n(VSe,"A",{href:!0});var Wvt=s(JV);BGo=r(Wvt,"XLMRobertaForSequenceClassification"),Wvt.forEach(t),IGo=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),NGo=i(j),Fv=n(j,"LI",{});var XSe=s(Fv);ype=n(XSe,"STRONG",{});var Qvt=s(ype);qGo=r(Qvt,"xlm-roberta-xl"),Qvt.forEach(t),jGo=r(XSe," \u2014 "),YV=n(XSe,"A",{href:!0});var Hvt=s(YV);DGo=r(Hvt,"XLMRobertaXLForSequenceClassification"),Hvt.forEach(t),GGo=r(XSe," (XLM-RoBERTa-XL model)"),XSe.forEach(t),OGo=i(j),Tv=n(j,"LI",{});var zSe=s(Tv);xpe=n(zSe,"STRONG",{});var Uvt=s(xpe);VGo=r(Uvt,"xlnet"),Uvt.forEach(t),XGo=r(zSe," \u2014 "),KV=n(zSe,"A",{href:!0});var Jvt=s(KV);zGo=r(Jvt,"XLNetForSequenceClassification"),Jvt.forEach(t),WGo=r(zSe," (XLNet model)"),zSe.forEach(t),QGo=i(j),Mv=n(j,"LI",{});var WSe=s(Mv);$pe=n(WSe,"STRONG",{});var Yvt=s($pe);HGo=r(Yvt,"yoso"),Yvt.forEach(t),UGo=r(WSe," \u2014 "),ZV=n(WSe,"A",{href:!0});var Kvt=s(ZV);JGo=r(Kvt,"YosoForSequenceClassification"),Kvt.forEach(t),YGo=r(WSe," (YOSO model)"),WSe.forEach(t),j.forEach(t),KGo=i(ca),Ev=n(ca,"P",{});var QSe=s(Ev);ZGo=r(QSe,"The model is set in evaluation mode by default using "),kpe=n(QSe,"CODE",{});var Zvt=s(kpe);eOo=r(Zvt,"model.eval()"),Zvt.forEach(t),oOo=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(QSe,"CODE",{});var e0t=s(Spe);rOo=r(e0t,"model.train()"),e0t.forEach(t),QSe.forEach(t),tOo=i(ca),T(Cv.$$.fragment,ca),ca.forEach(t),al.forEach(t),IOe=i(f),rd=n(f,"H2",{class:!0});var OXe=s(rd);wv=n(OXe,"A",{id:!0,class:!0,href:!0});var o0t=s(wv);Rpe=n(o0t,"SPAN",{});var r0t=s(Rpe);T(NL.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),aOo=i(OXe),Ppe=n(OXe,"SPAN",{});var t0t=s(Ppe);nOo=r(t0t,"AutoModelForMultipleChoice"),t0t.forEach(t),OXe.forEach(t),NOe=i(f),Bo=n(f,"DIV",{class:!0});var nl=s(Bo);T(qL.$$.fragment,nl),sOo=i(nl),td=n(nl,"P",{});var Qoe=s(td);lOo=r(Qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eX=n(Qoe,"A",{href:!0});var a0t=s(eX);iOo=r(a0t,"from_pretrained()"),a0t.forEach(t),dOo=r(Qoe," class method or the "),oX=n(Qoe,"A",{href:!0});var n0t=s(oX);cOo=r(n0t,"from_config()"),n0t.forEach(t),fOo=r(Qoe,` class
method.`),Qoe.forEach(t),mOo=i(nl),jL=n(nl,"P",{});var VXe=s(jL);gOo=r(VXe,"This class cannot be instantiated directly using "),Bpe=n(VXe,"CODE",{});var s0t=s(Bpe);hOo=r(s0t,"__init__()"),s0t.forEach(t),pOo=r(VXe," (throws an error)."),VXe.forEach(t),_Oo=i(nl),mt=n(nl,"DIV",{class:!0});var J3=s(mt);T(DL.$$.fragment,J3),uOo=i(J3),Ipe=n(J3,"P",{});var l0t=s(Ipe);bOo=r(l0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l0t.forEach(t),vOo=i(J3),ad=n(J3,"P",{});var Hoe=s(ad);FOo=r(Hoe,`Note:
Loading a model from its configuration file does `),Npe=n(Hoe,"STRONG",{});var i0t=s(Npe);TOo=r(i0t,"not"),i0t.forEach(t),MOo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(Hoe,"A",{href:!0});var d0t=s(rX);EOo=r(d0t,"from_pretrained()"),d0t.forEach(t),COo=r(Hoe," to load the model weights."),Hoe.forEach(t),wOo=i(J3),T(Av.$$.fragment,J3),J3.forEach(t),AOo=i(nl),ro=n(nl,"DIV",{class:!0});var fa=s(ro);T(GL.$$.fragment,fa),LOo=i(fa),qpe=n(fa,"P",{});var c0t=s(qpe);yOo=r(c0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c0t.forEach(t),xOo=i(fa),Da=n(fa,"P",{});var Y3=s(Da);$Oo=r(Y3,"The model class to instantiate is selected based on the "),jpe=n(Y3,"CODE",{});var f0t=s(jpe);kOo=r(f0t,"model_type"),f0t.forEach(t),SOo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(Y3,"CODE",{});var m0t=s(Dpe);ROo=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),POo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(Y3,"CODE",{});var g0t=s(Gpe);BOo=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),IOo=r(Y3,":"),Y3.forEach(t),NOo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);Lv=n(ee,"LI",{});var HSe=s(Lv);Ope=n(HSe,"STRONG",{});var h0t=s(Ope);qOo=r(h0t,"albert"),h0t.forEach(t),jOo=r(HSe," \u2014 "),tX=n(HSe,"A",{href:!0});var p0t=s(tX);DOo=r(p0t,"AlbertForMultipleChoice"),p0t.forEach(t),GOo=r(HSe," (ALBERT model)"),HSe.forEach(t),OOo=i(ee),yv=n(ee,"LI",{});var USe=s(yv);Vpe=n(USe,"STRONG",{});var _0t=s(Vpe);VOo=r(_0t,"bert"),_0t.forEach(t),XOo=r(USe," \u2014 "),aX=n(USe,"A",{href:!0});var u0t=s(aX);zOo=r(u0t,"BertForMultipleChoice"),u0t.forEach(t),WOo=r(USe," (BERT model)"),USe.forEach(t),QOo=i(ee),xv=n(ee,"LI",{});var JSe=s(xv);Xpe=n(JSe,"STRONG",{});var b0t=s(Xpe);HOo=r(b0t,"big_bird"),b0t.forEach(t),UOo=r(JSe," \u2014 "),nX=n(JSe,"A",{href:!0});var v0t=s(nX);JOo=r(v0t,"BigBirdForMultipleChoice"),v0t.forEach(t),YOo=r(JSe," (BigBird model)"),JSe.forEach(t),KOo=i(ee),$v=n(ee,"LI",{});var YSe=s($v);zpe=n(YSe,"STRONG",{});var F0t=s(zpe);ZOo=r(F0t,"camembert"),F0t.forEach(t),eVo=r(YSe," \u2014 "),sX=n(YSe,"A",{href:!0});var T0t=s(sX);oVo=r(T0t,"CamembertForMultipleChoice"),T0t.forEach(t),rVo=r(YSe," (CamemBERT model)"),YSe.forEach(t),tVo=i(ee),kv=n(ee,"LI",{});var KSe=s(kv);Wpe=n(KSe,"STRONG",{});var M0t=s(Wpe);aVo=r(M0t,"canine"),M0t.forEach(t),nVo=r(KSe," \u2014 "),lX=n(KSe,"A",{href:!0});var E0t=s(lX);sVo=r(E0t,"CanineForMultipleChoice"),E0t.forEach(t),lVo=r(KSe," (CANINE model)"),KSe.forEach(t),iVo=i(ee),Sv=n(ee,"LI",{});var ZSe=s(Sv);Qpe=n(ZSe,"STRONG",{});var C0t=s(Qpe);dVo=r(C0t,"convbert"),C0t.forEach(t),cVo=r(ZSe," \u2014 "),iX=n(ZSe,"A",{href:!0});var w0t=s(iX);fVo=r(w0t,"ConvBertForMultipleChoice"),w0t.forEach(t),mVo=r(ZSe," (ConvBERT model)"),ZSe.forEach(t),gVo=i(ee),Rv=n(ee,"LI",{});var eRe=s(Rv);Hpe=n(eRe,"STRONG",{});var A0t=s(Hpe);hVo=r(A0t,"data2vec-text"),A0t.forEach(t),pVo=r(eRe," \u2014 "),dX=n(eRe,"A",{href:!0});var L0t=s(dX);_Vo=r(L0t,"Data2VecTextForMultipleChoice"),L0t.forEach(t),uVo=r(eRe," (Data2VecText model)"),eRe.forEach(t),bVo=i(ee),Pv=n(ee,"LI",{});var oRe=s(Pv);Upe=n(oRe,"STRONG",{});var y0t=s(Upe);vVo=r(y0t,"deberta-v2"),y0t.forEach(t),FVo=r(oRe," \u2014 "),cX=n(oRe,"A",{href:!0});var x0t=s(cX);TVo=r(x0t,"DebertaV2ForMultipleChoice"),x0t.forEach(t),MVo=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),EVo=i(ee),Bv=n(ee,"LI",{});var rRe=s(Bv);Jpe=n(rRe,"STRONG",{});var $0t=s(Jpe);CVo=r($0t,"distilbert"),$0t.forEach(t),wVo=r(rRe," \u2014 "),fX=n(rRe,"A",{href:!0});var k0t=s(fX);AVo=r(k0t,"DistilBertForMultipleChoice"),k0t.forEach(t),LVo=r(rRe," (DistilBERT model)"),rRe.forEach(t),yVo=i(ee),Iv=n(ee,"LI",{});var tRe=s(Iv);Ype=n(tRe,"STRONG",{});var S0t=s(Ype);xVo=r(S0t,"electra"),S0t.forEach(t),$Vo=r(tRe," \u2014 "),mX=n(tRe,"A",{href:!0});var R0t=s(mX);kVo=r(R0t,"ElectraForMultipleChoice"),R0t.forEach(t),SVo=r(tRe," (ELECTRA model)"),tRe.forEach(t),RVo=i(ee),Nv=n(ee,"LI",{});var aRe=s(Nv);Kpe=n(aRe,"STRONG",{});var P0t=s(Kpe);PVo=r(P0t,"flaubert"),P0t.forEach(t),BVo=r(aRe," \u2014 "),gX=n(aRe,"A",{href:!0});var B0t=s(gX);IVo=r(B0t,"FlaubertForMultipleChoice"),B0t.forEach(t),NVo=r(aRe," (FlauBERT model)"),aRe.forEach(t),qVo=i(ee),qv=n(ee,"LI",{});var nRe=s(qv);Zpe=n(nRe,"STRONG",{});var I0t=s(Zpe);jVo=r(I0t,"fnet"),I0t.forEach(t),DVo=r(nRe," \u2014 "),hX=n(nRe,"A",{href:!0});var N0t=s(hX);GVo=r(N0t,"FNetForMultipleChoice"),N0t.forEach(t),OVo=r(nRe," (FNet model)"),nRe.forEach(t),VVo=i(ee),jv=n(ee,"LI",{});var sRe=s(jv);e_e=n(sRe,"STRONG",{});var q0t=s(e_e);XVo=r(q0t,"funnel"),q0t.forEach(t),zVo=r(sRe," \u2014 "),pX=n(sRe,"A",{href:!0});var j0t=s(pX);WVo=r(j0t,"FunnelForMultipleChoice"),j0t.forEach(t),QVo=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),HVo=i(ee),Dv=n(ee,"LI",{});var lRe=s(Dv);o_e=n(lRe,"STRONG",{});var D0t=s(o_e);UVo=r(D0t,"ibert"),D0t.forEach(t),JVo=r(lRe," \u2014 "),_X=n(lRe,"A",{href:!0});var G0t=s(_X);YVo=r(G0t,"IBertForMultipleChoice"),G0t.forEach(t),KVo=r(lRe," (I-BERT model)"),lRe.forEach(t),ZVo=i(ee),Gv=n(ee,"LI",{});var iRe=s(Gv);r_e=n(iRe,"STRONG",{});var O0t=s(r_e);eXo=r(O0t,"longformer"),O0t.forEach(t),oXo=r(iRe," \u2014 "),uX=n(iRe,"A",{href:!0});var V0t=s(uX);rXo=r(V0t,"LongformerForMultipleChoice"),V0t.forEach(t),tXo=r(iRe," (Longformer model)"),iRe.forEach(t),aXo=i(ee),Ov=n(ee,"LI",{});var dRe=s(Ov);t_e=n(dRe,"STRONG",{});var X0t=s(t_e);nXo=r(X0t,"megatron-bert"),X0t.forEach(t),sXo=r(dRe," \u2014 "),bX=n(dRe,"A",{href:!0});var z0t=s(bX);lXo=r(z0t,"MegatronBertForMultipleChoice"),z0t.forEach(t),iXo=r(dRe," (Megatron-BERT model)"),dRe.forEach(t),dXo=i(ee),Vv=n(ee,"LI",{});var cRe=s(Vv);a_e=n(cRe,"STRONG",{});var W0t=s(a_e);cXo=r(W0t,"mobilebert"),W0t.forEach(t),fXo=r(cRe," \u2014 "),vX=n(cRe,"A",{href:!0});var Q0t=s(vX);mXo=r(Q0t,"MobileBertForMultipleChoice"),Q0t.forEach(t),gXo=r(cRe," (MobileBERT model)"),cRe.forEach(t),hXo=i(ee),Xv=n(ee,"LI",{});var fRe=s(Xv);n_e=n(fRe,"STRONG",{});var H0t=s(n_e);pXo=r(H0t,"mpnet"),H0t.forEach(t),_Xo=r(fRe," \u2014 "),FX=n(fRe,"A",{href:!0});var U0t=s(FX);uXo=r(U0t,"MPNetForMultipleChoice"),U0t.forEach(t),bXo=r(fRe," (MPNet model)"),fRe.forEach(t),vXo=i(ee),zv=n(ee,"LI",{});var mRe=s(zv);s_e=n(mRe,"STRONG",{});var J0t=s(s_e);FXo=r(J0t,"nezha"),J0t.forEach(t),TXo=r(mRe," \u2014 "),TX=n(mRe,"A",{href:!0});var Y0t=s(TX);MXo=r(Y0t,"NezhaForMultipleChoice"),Y0t.forEach(t),EXo=r(mRe," (Nezha model)"),mRe.forEach(t),CXo=i(ee),Wv=n(ee,"LI",{});var gRe=s(Wv);l_e=n(gRe,"STRONG",{});var K0t=s(l_e);wXo=r(K0t,"nystromformer"),K0t.forEach(t),AXo=r(gRe," \u2014 "),MX=n(gRe,"A",{href:!0});var Z0t=s(MX);LXo=r(Z0t,"NystromformerForMultipleChoice"),Z0t.forEach(t),yXo=r(gRe," (Nystr\xF6mformer model)"),gRe.forEach(t),xXo=i(ee),Qv=n(ee,"LI",{});var hRe=s(Qv);i_e=n(hRe,"STRONG",{});var eFt=s(i_e);$Xo=r(eFt,"qdqbert"),eFt.forEach(t),kXo=r(hRe," \u2014 "),EX=n(hRe,"A",{href:!0});var oFt=s(EX);SXo=r(oFt,"QDQBertForMultipleChoice"),oFt.forEach(t),RXo=r(hRe," (QDQBert model)"),hRe.forEach(t),PXo=i(ee),Hv=n(ee,"LI",{});var pRe=s(Hv);d_e=n(pRe,"STRONG",{});var rFt=s(d_e);BXo=r(rFt,"rembert"),rFt.forEach(t),IXo=r(pRe," \u2014 "),CX=n(pRe,"A",{href:!0});var tFt=s(CX);NXo=r(tFt,"RemBertForMultipleChoice"),tFt.forEach(t),qXo=r(pRe," (RemBERT model)"),pRe.forEach(t),jXo=i(ee),Uv=n(ee,"LI",{});var _Re=s(Uv);c_e=n(_Re,"STRONG",{});var aFt=s(c_e);DXo=r(aFt,"roberta"),aFt.forEach(t),GXo=r(_Re," \u2014 "),wX=n(_Re,"A",{href:!0});var nFt=s(wX);OXo=r(nFt,"RobertaForMultipleChoice"),nFt.forEach(t),VXo=r(_Re," (RoBERTa model)"),_Re.forEach(t),XXo=i(ee),Jv=n(ee,"LI",{});var uRe=s(Jv);f_e=n(uRe,"STRONG",{});var sFt=s(f_e);zXo=r(sFt,"roformer"),sFt.forEach(t),WXo=r(uRe," \u2014 "),AX=n(uRe,"A",{href:!0});var lFt=s(AX);QXo=r(lFt,"RoFormerForMultipleChoice"),lFt.forEach(t),HXo=r(uRe," (RoFormer model)"),uRe.forEach(t),UXo=i(ee),Yv=n(ee,"LI",{});var bRe=s(Yv);m_e=n(bRe,"STRONG",{});var iFt=s(m_e);JXo=r(iFt,"squeezebert"),iFt.forEach(t),YXo=r(bRe," \u2014 "),LX=n(bRe,"A",{href:!0});var dFt=s(LX);KXo=r(dFt,"SqueezeBertForMultipleChoice"),dFt.forEach(t),ZXo=r(bRe," (SqueezeBERT model)"),bRe.forEach(t),ezo=i(ee),Kv=n(ee,"LI",{});var vRe=s(Kv);g_e=n(vRe,"STRONG",{});var cFt=s(g_e);ozo=r(cFt,"xlm"),cFt.forEach(t),rzo=r(vRe," \u2014 "),yX=n(vRe,"A",{href:!0});var fFt=s(yX);tzo=r(fFt,"XLMForMultipleChoice"),fFt.forEach(t),azo=r(vRe," (XLM model)"),vRe.forEach(t),nzo=i(ee),Zv=n(ee,"LI",{});var FRe=s(Zv);h_e=n(FRe,"STRONG",{});var mFt=s(h_e);szo=r(mFt,"xlm-roberta"),mFt.forEach(t),lzo=r(FRe," \u2014 "),xX=n(FRe,"A",{href:!0});var gFt=s(xX);izo=r(gFt,"XLMRobertaForMultipleChoice"),gFt.forEach(t),dzo=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),czo=i(ee),e0=n(ee,"LI",{});var TRe=s(e0);p_e=n(TRe,"STRONG",{});var hFt=s(p_e);fzo=r(hFt,"xlm-roberta-xl"),hFt.forEach(t),mzo=r(TRe," \u2014 "),$X=n(TRe,"A",{href:!0});var pFt=s($X);gzo=r(pFt,"XLMRobertaXLForMultipleChoice"),pFt.forEach(t),hzo=r(TRe," (XLM-RoBERTa-XL model)"),TRe.forEach(t),pzo=i(ee),o0=n(ee,"LI",{});var MRe=s(o0);__e=n(MRe,"STRONG",{});var _Ft=s(__e);_zo=r(_Ft,"xlnet"),_Ft.forEach(t),uzo=r(MRe," \u2014 "),kX=n(MRe,"A",{href:!0});var uFt=s(kX);bzo=r(uFt,"XLNetForMultipleChoice"),uFt.forEach(t),vzo=r(MRe," (XLNet model)"),MRe.forEach(t),Fzo=i(ee),r0=n(ee,"LI",{});var ERe=s(r0);u_e=n(ERe,"STRONG",{});var bFt=s(u_e);Tzo=r(bFt,"yoso"),bFt.forEach(t),Mzo=r(ERe," \u2014 "),SX=n(ERe,"A",{href:!0});var vFt=s(SX);Ezo=r(vFt,"YosoForMultipleChoice"),vFt.forEach(t),Czo=r(ERe," (YOSO model)"),ERe.forEach(t),ee.forEach(t),wzo=i(fa),t0=n(fa,"P",{});var CRe=s(t0);Azo=r(CRe,"The model is set in evaluation mode by default using "),b_e=n(CRe,"CODE",{});var FFt=s(b_e);Lzo=r(FFt,"model.eval()"),FFt.forEach(t),yzo=r(CRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(CRe,"CODE",{});var TFt=s(v_e);xzo=r(TFt,"model.train()"),TFt.forEach(t),CRe.forEach(t),$zo=i(fa),T(a0.$$.fragment,fa),fa.forEach(t),nl.forEach(t),qOe=i(f),nd=n(f,"H2",{class:!0});var XXe=s(nd);n0=n(XXe,"A",{id:!0,class:!0,href:!0});var MFt=s(n0);F_e=n(MFt,"SPAN",{});var EFt=s(F_e);T(OL.$$.fragment,EFt),EFt.forEach(t),MFt.forEach(t),kzo=i(XXe),T_e=n(XXe,"SPAN",{});var CFt=s(T_e);Szo=r(CFt,"AutoModelForNextSentencePrediction"),CFt.forEach(t),XXe.forEach(t),jOe=i(f),Io=n(f,"DIV",{class:!0});var sl=s(Io);T(VL.$$.fragment,sl),Rzo=i(sl),sd=n(sl,"P",{});var Uoe=s(sd);Pzo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RX=n(Uoe,"A",{href:!0});var wFt=s(RX);Bzo=r(wFt,"from_pretrained()"),wFt.forEach(t),Izo=r(Uoe," class method or the "),PX=n(Uoe,"A",{href:!0});var AFt=s(PX);Nzo=r(AFt,"from_config()"),AFt.forEach(t),qzo=r(Uoe,` class
method.`),Uoe.forEach(t),jzo=i(sl),XL=n(sl,"P",{});var zXe=s(XL);Dzo=r(zXe,"This class cannot be instantiated directly using "),M_e=n(zXe,"CODE",{});var LFt=s(M_e);Gzo=r(LFt,"__init__()"),LFt.forEach(t),Ozo=r(zXe," (throws an error)."),zXe.forEach(t),Vzo=i(sl),gt=n(sl,"DIV",{class:!0});var K3=s(gt);T(zL.$$.fragment,K3),Xzo=i(K3),E_e=n(K3,"P",{});var yFt=s(E_e);zzo=r(yFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yFt.forEach(t),Wzo=i(K3),ld=n(K3,"P",{});var Joe=s(ld);Qzo=r(Joe,`Note:
Loading a model from its configuration file does `),C_e=n(Joe,"STRONG",{});var xFt=s(C_e);Hzo=r(xFt,"not"),xFt.forEach(t),Uzo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(Joe,"A",{href:!0});var $Ft=s(BX);Jzo=r($Ft,"from_pretrained()"),$Ft.forEach(t),Yzo=r(Joe," to load the model weights."),Joe.forEach(t),Kzo=i(K3),T(s0.$$.fragment,K3),K3.forEach(t),Zzo=i(sl),to=n(sl,"DIV",{class:!0});var ma=s(to);T(WL.$$.fragment,ma),eWo=i(ma),w_e=n(ma,"P",{});var kFt=s(w_e);oWo=r(kFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kFt.forEach(t),rWo=i(ma),Ga=n(ma,"P",{});var Z3=s(Ga);tWo=r(Z3,"The model class to instantiate is selected based on the "),A_e=n(Z3,"CODE",{});var SFt=s(A_e);aWo=r(SFt,"model_type"),SFt.forEach(t),nWo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),L_e=n(Z3,"CODE",{});var RFt=s(L_e);sWo=r(RFt,"pretrained_model_name_or_path"),RFt.forEach(t),lWo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(Z3,"CODE",{});var PFt=s(y_e);iWo=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),dWo=r(Z3,":"),Z3.forEach(t),cWo=i(ma),No=n(ma,"UL",{});var ga=s(No);l0=n(ga,"LI",{});var wRe=s(l0);x_e=n(wRe,"STRONG",{});var BFt=s(x_e);fWo=r(BFt,"bert"),BFt.forEach(t),mWo=r(wRe," \u2014 "),IX=n(wRe,"A",{href:!0});var IFt=s(IX);gWo=r(IFt,"BertForNextSentencePrediction"),IFt.forEach(t),hWo=r(wRe," (BERT model)"),wRe.forEach(t),pWo=i(ga),i0=n(ga,"LI",{});var ARe=s(i0);$_e=n(ARe,"STRONG",{});var NFt=s($_e);_Wo=r(NFt,"fnet"),NFt.forEach(t),uWo=r(ARe," \u2014 "),NX=n(ARe,"A",{href:!0});var qFt=s(NX);bWo=r(qFt,"FNetForNextSentencePrediction"),qFt.forEach(t),vWo=r(ARe," (FNet model)"),ARe.forEach(t),FWo=i(ga),d0=n(ga,"LI",{});var LRe=s(d0);k_e=n(LRe,"STRONG",{});var jFt=s(k_e);TWo=r(jFt,"megatron-bert"),jFt.forEach(t),MWo=r(LRe," \u2014 "),qX=n(LRe,"A",{href:!0});var DFt=s(qX);EWo=r(DFt,"MegatronBertForNextSentencePrediction"),DFt.forEach(t),CWo=r(LRe," (Megatron-BERT model)"),LRe.forEach(t),wWo=i(ga),c0=n(ga,"LI",{});var yRe=s(c0);S_e=n(yRe,"STRONG",{});var GFt=s(S_e);AWo=r(GFt,"mobilebert"),GFt.forEach(t),LWo=r(yRe," \u2014 "),jX=n(yRe,"A",{href:!0});var OFt=s(jX);yWo=r(OFt,"MobileBertForNextSentencePrediction"),OFt.forEach(t),xWo=r(yRe," (MobileBERT model)"),yRe.forEach(t),$Wo=i(ga),f0=n(ga,"LI",{});var xRe=s(f0);R_e=n(xRe,"STRONG",{});var VFt=s(R_e);kWo=r(VFt,"nezha"),VFt.forEach(t),SWo=r(xRe," \u2014 "),DX=n(xRe,"A",{href:!0});var XFt=s(DX);RWo=r(XFt,"NezhaForNextSentencePrediction"),XFt.forEach(t),PWo=r(xRe," (Nezha model)"),xRe.forEach(t),BWo=i(ga),m0=n(ga,"LI",{});var $Re=s(m0);P_e=n($Re,"STRONG",{});var zFt=s(P_e);IWo=r(zFt,"qdqbert"),zFt.forEach(t),NWo=r($Re," \u2014 "),GX=n($Re,"A",{href:!0});var WFt=s(GX);qWo=r(WFt,"QDQBertForNextSentencePrediction"),WFt.forEach(t),jWo=r($Re," (QDQBert model)"),$Re.forEach(t),ga.forEach(t),DWo=i(ma),g0=n(ma,"P",{});var kRe=s(g0);GWo=r(kRe,"The model is set in evaluation mode by default using "),B_e=n(kRe,"CODE",{});var QFt=s(B_e);OWo=r(QFt,"model.eval()"),QFt.forEach(t),VWo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(kRe,"CODE",{});var HFt=s(I_e);XWo=r(HFt,"model.train()"),HFt.forEach(t),kRe.forEach(t),zWo=i(ma),T(h0.$$.fragment,ma),ma.forEach(t),sl.forEach(t),DOe=i(f),id=n(f,"H2",{class:!0});var WXe=s(id);p0=n(WXe,"A",{id:!0,class:!0,href:!0});var UFt=s(p0);N_e=n(UFt,"SPAN",{});var JFt=s(N_e);T(QL.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),WWo=i(WXe),q_e=n(WXe,"SPAN",{});var YFt=s(q_e);QWo=r(YFt,"AutoModelForTokenClassification"),YFt.forEach(t),WXe.forEach(t),GOe=i(f),qo=n(f,"DIV",{class:!0});var ll=s(qo);T(HL.$$.fragment,ll),HWo=i(ll),dd=n(ll,"P",{});var Yoe=s(dd);UWo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OX=n(Yoe,"A",{href:!0});var KFt=s(OX);JWo=r(KFt,"from_pretrained()"),KFt.forEach(t),YWo=r(Yoe," class method or the "),VX=n(Yoe,"A",{href:!0});var ZFt=s(VX);KWo=r(ZFt,"from_config()"),ZFt.forEach(t),ZWo=r(Yoe,` class
method.`),Yoe.forEach(t),eQo=i(ll),UL=n(ll,"P",{});var QXe=s(UL);oQo=r(QXe,"This class cannot be instantiated directly using "),j_e=n(QXe,"CODE",{});var e6t=s(j_e);rQo=r(e6t,"__init__()"),e6t.forEach(t),tQo=r(QXe," (throws an error)."),QXe.forEach(t),aQo=i(ll),ht=n(ll,"DIV",{class:!0});var ew=s(ht);T(JL.$$.fragment,ew),nQo=i(ew),D_e=n(ew,"P",{});var o6t=s(D_e);sQo=r(o6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o6t.forEach(t),lQo=i(ew),cd=n(ew,"P",{});var Koe=s(cd);iQo=r(Koe,`Note:
Loading a model from its configuration file does `),G_e=n(Koe,"STRONG",{});var r6t=s(G_e);dQo=r(r6t,"not"),r6t.forEach(t),cQo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(Koe,"A",{href:!0});var t6t=s(XX);fQo=r(t6t,"from_pretrained()"),t6t.forEach(t),mQo=r(Koe," to load the model weights."),Koe.forEach(t),gQo=i(ew),T(_0.$$.fragment,ew),ew.forEach(t),hQo=i(ll),ao=n(ll,"DIV",{class:!0});var ha=s(ao);T(YL.$$.fragment,ha),pQo=i(ha),O_e=n(ha,"P",{});var a6t=s(O_e);_Qo=r(a6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),a6t.forEach(t),uQo=i(ha),Oa=n(ha,"P",{});var ow=s(Oa);bQo=r(ow,"The model class to instantiate is selected based on the "),V_e=n(ow,"CODE",{});var n6t=s(V_e);vQo=r(n6t,"model_type"),n6t.forEach(t),FQo=r(ow,` property of the config object (either
passed as an argument or loaded from `),X_e=n(ow,"CODE",{});var s6t=s(X_e);TQo=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),MQo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(ow,"CODE",{});var l6t=s(z_e);EQo=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),CQo=r(ow,":"),ow.forEach(t),wQo=i(ha),H=n(ha,"UL",{});var J=s(H);u0=n(J,"LI",{});var SRe=s(u0);W_e=n(SRe,"STRONG",{});var i6t=s(W_e);AQo=r(i6t,"albert"),i6t.forEach(t),LQo=r(SRe," \u2014 "),zX=n(SRe,"A",{href:!0});var d6t=s(zX);yQo=r(d6t,"AlbertForTokenClassification"),d6t.forEach(t),xQo=r(SRe," (ALBERT model)"),SRe.forEach(t),$Qo=i(J),b0=n(J,"LI",{});var RRe=s(b0);Q_e=n(RRe,"STRONG",{});var c6t=s(Q_e);kQo=r(c6t,"bert"),c6t.forEach(t),SQo=r(RRe," \u2014 "),WX=n(RRe,"A",{href:!0});var f6t=s(WX);RQo=r(f6t,"BertForTokenClassification"),f6t.forEach(t),PQo=r(RRe," (BERT model)"),RRe.forEach(t),BQo=i(J),v0=n(J,"LI",{});var PRe=s(v0);H_e=n(PRe,"STRONG",{});var m6t=s(H_e);IQo=r(m6t,"big_bird"),m6t.forEach(t),NQo=r(PRe," \u2014 "),QX=n(PRe,"A",{href:!0});var g6t=s(QX);qQo=r(g6t,"BigBirdForTokenClassification"),g6t.forEach(t),jQo=r(PRe," (BigBird model)"),PRe.forEach(t),DQo=i(J),F0=n(J,"LI",{});var BRe=s(F0);U_e=n(BRe,"STRONG",{});var h6t=s(U_e);GQo=r(h6t,"bloom"),h6t.forEach(t),OQo=r(BRe," \u2014 "),HX=n(BRe,"A",{href:!0});var p6t=s(HX);VQo=r(p6t,"BloomForTokenClassification"),p6t.forEach(t),XQo=r(BRe," (BLOOM model)"),BRe.forEach(t),zQo=i(J),T0=n(J,"LI",{});var IRe=s(T0);J_e=n(IRe,"STRONG",{});var _6t=s(J_e);WQo=r(_6t,"camembert"),_6t.forEach(t),QQo=r(IRe," \u2014 "),UX=n(IRe,"A",{href:!0});var u6t=s(UX);HQo=r(u6t,"CamembertForTokenClassification"),u6t.forEach(t),UQo=r(IRe," (CamemBERT model)"),IRe.forEach(t),JQo=i(J),M0=n(J,"LI",{});var NRe=s(M0);Y_e=n(NRe,"STRONG",{});var b6t=s(Y_e);YQo=r(b6t,"canine"),b6t.forEach(t),KQo=r(NRe," \u2014 "),JX=n(NRe,"A",{href:!0});var v6t=s(JX);ZQo=r(v6t,"CanineForTokenClassification"),v6t.forEach(t),eHo=r(NRe," (CANINE model)"),NRe.forEach(t),oHo=i(J),E0=n(J,"LI",{});var qRe=s(E0);K_e=n(qRe,"STRONG",{});var F6t=s(K_e);rHo=r(F6t,"convbert"),F6t.forEach(t),tHo=r(qRe," \u2014 "),YX=n(qRe,"A",{href:!0});var T6t=s(YX);aHo=r(T6t,"ConvBertForTokenClassification"),T6t.forEach(t),nHo=r(qRe," (ConvBERT model)"),qRe.forEach(t),sHo=i(J),C0=n(J,"LI",{});var jRe=s(C0);Z_e=n(jRe,"STRONG",{});var M6t=s(Z_e);lHo=r(M6t,"data2vec-text"),M6t.forEach(t),iHo=r(jRe," \u2014 "),KX=n(jRe,"A",{href:!0});var E6t=s(KX);dHo=r(E6t,"Data2VecTextForTokenClassification"),E6t.forEach(t),cHo=r(jRe," (Data2VecText model)"),jRe.forEach(t),fHo=i(J),w0=n(J,"LI",{});var DRe=s(w0);eue=n(DRe,"STRONG",{});var C6t=s(eue);mHo=r(C6t,"deberta"),C6t.forEach(t),gHo=r(DRe," \u2014 "),ZX=n(DRe,"A",{href:!0});var w6t=s(ZX);hHo=r(w6t,"DebertaForTokenClassification"),w6t.forEach(t),pHo=r(DRe," (DeBERTa model)"),DRe.forEach(t),_Ho=i(J),A0=n(J,"LI",{});var GRe=s(A0);oue=n(GRe,"STRONG",{});var A6t=s(oue);uHo=r(A6t,"deberta-v2"),A6t.forEach(t),bHo=r(GRe," \u2014 "),ez=n(GRe,"A",{href:!0});var L6t=s(ez);vHo=r(L6t,"DebertaV2ForTokenClassification"),L6t.forEach(t),FHo=r(GRe," (DeBERTa-v2 model)"),GRe.forEach(t),THo=i(J),L0=n(J,"LI",{});var ORe=s(L0);rue=n(ORe,"STRONG",{});var y6t=s(rue);MHo=r(y6t,"distilbert"),y6t.forEach(t),EHo=r(ORe," \u2014 "),oz=n(ORe,"A",{href:!0});var x6t=s(oz);CHo=r(x6t,"DistilBertForTokenClassification"),x6t.forEach(t),wHo=r(ORe," (DistilBERT model)"),ORe.forEach(t),AHo=i(J),y0=n(J,"LI",{});var VRe=s(y0);tue=n(VRe,"STRONG",{});var $6t=s(tue);LHo=r($6t,"electra"),$6t.forEach(t),yHo=r(VRe," \u2014 "),rz=n(VRe,"A",{href:!0});var k6t=s(rz);xHo=r(k6t,"ElectraForTokenClassification"),k6t.forEach(t),$Ho=r(VRe," (ELECTRA model)"),VRe.forEach(t),kHo=i(J),x0=n(J,"LI",{});var XRe=s(x0);aue=n(XRe,"STRONG",{});var S6t=s(aue);SHo=r(S6t,"flaubert"),S6t.forEach(t),RHo=r(XRe," \u2014 "),tz=n(XRe,"A",{href:!0});var R6t=s(tz);PHo=r(R6t,"FlaubertForTokenClassification"),R6t.forEach(t),BHo=r(XRe," (FlauBERT model)"),XRe.forEach(t),IHo=i(J),$0=n(J,"LI",{});var zRe=s($0);nue=n(zRe,"STRONG",{});var P6t=s(nue);NHo=r(P6t,"fnet"),P6t.forEach(t),qHo=r(zRe," \u2014 "),az=n(zRe,"A",{href:!0});var B6t=s(az);jHo=r(B6t,"FNetForTokenClassification"),B6t.forEach(t),DHo=r(zRe," (FNet model)"),zRe.forEach(t),GHo=i(J),k0=n(J,"LI",{});var WRe=s(k0);sue=n(WRe,"STRONG",{});var I6t=s(sue);OHo=r(I6t,"funnel"),I6t.forEach(t),VHo=r(WRe," \u2014 "),nz=n(WRe,"A",{href:!0});var N6t=s(nz);XHo=r(N6t,"FunnelForTokenClassification"),N6t.forEach(t),zHo=r(WRe," (Funnel Transformer model)"),WRe.forEach(t),WHo=i(J),S0=n(J,"LI",{});var QRe=s(S0);lue=n(QRe,"STRONG",{});var q6t=s(lue);QHo=r(q6t,"gpt2"),q6t.forEach(t),HHo=r(QRe," \u2014 "),sz=n(QRe,"A",{href:!0});var j6t=s(sz);UHo=r(j6t,"GPT2ForTokenClassification"),j6t.forEach(t),JHo=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),YHo=i(J),R0=n(J,"LI",{});var HRe=s(R0);iue=n(HRe,"STRONG",{});var D6t=s(iue);KHo=r(D6t,"ibert"),D6t.forEach(t),ZHo=r(HRe," \u2014 "),lz=n(HRe,"A",{href:!0});var G6t=s(lz);eUo=r(G6t,"IBertForTokenClassification"),G6t.forEach(t),oUo=r(HRe," (I-BERT model)"),HRe.forEach(t),rUo=i(J),P0=n(J,"LI",{});var URe=s(P0);due=n(URe,"STRONG",{});var O6t=s(due);tUo=r(O6t,"layoutlm"),O6t.forEach(t),aUo=r(URe," \u2014 "),iz=n(URe,"A",{href:!0});var V6t=s(iz);nUo=r(V6t,"LayoutLMForTokenClassification"),V6t.forEach(t),sUo=r(URe," (LayoutLM model)"),URe.forEach(t),lUo=i(J),B0=n(J,"LI",{});var JRe=s(B0);cue=n(JRe,"STRONG",{});var X6t=s(cue);iUo=r(X6t,"layoutlmv2"),X6t.forEach(t),dUo=r(JRe," \u2014 "),dz=n(JRe,"A",{href:!0});var z6t=s(dz);cUo=r(z6t,"LayoutLMv2ForTokenClassification"),z6t.forEach(t),fUo=r(JRe," (LayoutLMv2 model)"),JRe.forEach(t),mUo=i(J),I0=n(J,"LI",{});var YRe=s(I0);fue=n(YRe,"STRONG",{});var W6t=s(fue);gUo=r(W6t,"layoutlmv3"),W6t.forEach(t),hUo=r(YRe," \u2014 "),cz=n(YRe,"A",{href:!0});var Q6t=s(cz);pUo=r(Q6t,"LayoutLMv3ForTokenClassification"),Q6t.forEach(t),_Uo=r(YRe," (LayoutLMv3 model)"),YRe.forEach(t),uUo=i(J),N0=n(J,"LI",{});var KRe=s(N0);mue=n(KRe,"STRONG",{});var H6t=s(mue);bUo=r(H6t,"longformer"),H6t.forEach(t),vUo=r(KRe," \u2014 "),fz=n(KRe,"A",{href:!0});var U6t=s(fz);FUo=r(U6t,"LongformerForTokenClassification"),U6t.forEach(t),TUo=r(KRe," (Longformer model)"),KRe.forEach(t),MUo=i(J),q0=n(J,"LI",{});var ZRe=s(q0);gue=n(ZRe,"STRONG",{});var J6t=s(gue);EUo=r(J6t,"megatron-bert"),J6t.forEach(t),CUo=r(ZRe," \u2014 "),mz=n(ZRe,"A",{href:!0});var Y6t=s(mz);wUo=r(Y6t,"MegatronBertForTokenClassification"),Y6t.forEach(t),AUo=r(ZRe," (Megatron-BERT model)"),ZRe.forEach(t),LUo=i(J),j0=n(J,"LI",{});var ePe=s(j0);hue=n(ePe,"STRONG",{});var K6t=s(hue);yUo=r(K6t,"mobilebert"),K6t.forEach(t),xUo=r(ePe," \u2014 "),gz=n(ePe,"A",{href:!0});var Z6t=s(gz);$Uo=r(Z6t,"MobileBertForTokenClassification"),Z6t.forEach(t),kUo=r(ePe," (MobileBERT model)"),ePe.forEach(t),SUo=i(J),D0=n(J,"LI",{});var oPe=s(D0);pue=n(oPe,"STRONG",{});var eTt=s(pue);RUo=r(eTt,"mpnet"),eTt.forEach(t),PUo=r(oPe," \u2014 "),hz=n(oPe,"A",{href:!0});var oTt=s(hz);BUo=r(oTt,"MPNetForTokenClassification"),oTt.forEach(t),IUo=r(oPe," (MPNet model)"),oPe.forEach(t),NUo=i(J),G0=n(J,"LI",{});var rPe=s(G0);_ue=n(rPe,"STRONG",{});var rTt=s(_ue);qUo=r(rTt,"nezha"),rTt.forEach(t),jUo=r(rPe," \u2014 "),pz=n(rPe,"A",{href:!0});var tTt=s(pz);DUo=r(tTt,"NezhaForTokenClassification"),tTt.forEach(t),GUo=r(rPe," (Nezha model)"),rPe.forEach(t),OUo=i(J),O0=n(J,"LI",{});var tPe=s(O0);uue=n(tPe,"STRONG",{});var aTt=s(uue);VUo=r(aTt,"nystromformer"),aTt.forEach(t),XUo=r(tPe," \u2014 "),_z=n(tPe,"A",{href:!0});var nTt=s(_z);zUo=r(nTt,"NystromformerForTokenClassification"),nTt.forEach(t),WUo=r(tPe," (Nystr\xF6mformer model)"),tPe.forEach(t),QUo=i(J),V0=n(J,"LI",{});var aPe=s(V0);bue=n(aPe,"STRONG",{});var sTt=s(bue);HUo=r(sTt,"qdqbert"),sTt.forEach(t),UUo=r(aPe," \u2014 "),uz=n(aPe,"A",{href:!0});var lTt=s(uz);JUo=r(lTt,"QDQBertForTokenClassification"),lTt.forEach(t),YUo=r(aPe," (QDQBert model)"),aPe.forEach(t),KUo=i(J),X0=n(J,"LI",{});var nPe=s(X0);vue=n(nPe,"STRONG",{});var iTt=s(vue);ZUo=r(iTt,"rembert"),iTt.forEach(t),eJo=r(nPe," \u2014 "),bz=n(nPe,"A",{href:!0});var dTt=s(bz);oJo=r(dTt,"RemBertForTokenClassification"),dTt.forEach(t),rJo=r(nPe," (RemBERT model)"),nPe.forEach(t),tJo=i(J),z0=n(J,"LI",{});var sPe=s(z0);Fue=n(sPe,"STRONG",{});var cTt=s(Fue);aJo=r(cTt,"roberta"),cTt.forEach(t),nJo=r(sPe," \u2014 "),vz=n(sPe,"A",{href:!0});var fTt=s(vz);sJo=r(fTt,"RobertaForTokenClassification"),fTt.forEach(t),lJo=r(sPe," (RoBERTa model)"),sPe.forEach(t),iJo=i(J),W0=n(J,"LI",{});var lPe=s(W0);Tue=n(lPe,"STRONG",{});var mTt=s(Tue);dJo=r(mTt,"roformer"),mTt.forEach(t),cJo=r(lPe," \u2014 "),Fz=n(lPe,"A",{href:!0});var gTt=s(Fz);fJo=r(gTt,"RoFormerForTokenClassification"),gTt.forEach(t),mJo=r(lPe," (RoFormer model)"),lPe.forEach(t),gJo=i(J),Q0=n(J,"LI",{});var iPe=s(Q0);Mue=n(iPe,"STRONG",{});var hTt=s(Mue);hJo=r(hTt,"squeezebert"),hTt.forEach(t),pJo=r(iPe," \u2014 "),Tz=n(iPe,"A",{href:!0});var pTt=s(Tz);_Jo=r(pTt,"SqueezeBertForTokenClassification"),pTt.forEach(t),uJo=r(iPe," (SqueezeBERT model)"),iPe.forEach(t),bJo=i(J),H0=n(J,"LI",{});var dPe=s(H0);Eue=n(dPe,"STRONG",{});var _Tt=s(Eue);vJo=r(_Tt,"xlm"),_Tt.forEach(t),FJo=r(dPe," \u2014 "),Mz=n(dPe,"A",{href:!0});var uTt=s(Mz);TJo=r(uTt,"XLMForTokenClassification"),uTt.forEach(t),MJo=r(dPe," (XLM model)"),dPe.forEach(t),EJo=i(J),U0=n(J,"LI",{});var cPe=s(U0);Cue=n(cPe,"STRONG",{});var bTt=s(Cue);CJo=r(bTt,"xlm-roberta"),bTt.forEach(t),wJo=r(cPe," \u2014 "),Ez=n(cPe,"A",{href:!0});var vTt=s(Ez);AJo=r(vTt,"XLMRobertaForTokenClassification"),vTt.forEach(t),LJo=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),yJo=i(J),J0=n(J,"LI",{});var fPe=s(J0);wue=n(fPe,"STRONG",{});var FTt=s(wue);xJo=r(FTt,"xlm-roberta-xl"),FTt.forEach(t),$Jo=r(fPe," \u2014 "),Cz=n(fPe,"A",{href:!0});var TTt=s(Cz);kJo=r(TTt,"XLMRobertaXLForTokenClassification"),TTt.forEach(t),SJo=r(fPe," (XLM-RoBERTa-XL model)"),fPe.forEach(t),RJo=i(J),Y0=n(J,"LI",{});var mPe=s(Y0);Aue=n(mPe,"STRONG",{});var MTt=s(Aue);PJo=r(MTt,"xlnet"),MTt.forEach(t),BJo=r(mPe," \u2014 "),wz=n(mPe,"A",{href:!0});var ETt=s(wz);IJo=r(ETt,"XLNetForTokenClassification"),ETt.forEach(t),NJo=r(mPe," (XLNet model)"),mPe.forEach(t),qJo=i(J),K0=n(J,"LI",{});var gPe=s(K0);Lue=n(gPe,"STRONG",{});var CTt=s(Lue);jJo=r(CTt,"yoso"),CTt.forEach(t),DJo=r(gPe," \u2014 "),Az=n(gPe,"A",{href:!0});var wTt=s(Az);GJo=r(wTt,"YosoForTokenClassification"),wTt.forEach(t),OJo=r(gPe," (YOSO model)"),gPe.forEach(t),J.forEach(t),VJo=i(ha),Z0=n(ha,"P",{});var hPe=s(Z0);XJo=r(hPe,"The model is set in evaluation mode by default using "),yue=n(hPe,"CODE",{});var ATt=s(yue);zJo=r(ATt,"model.eval()"),ATt.forEach(t),WJo=r(hPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(hPe,"CODE",{});var LTt=s(xue);QJo=r(LTt,"model.train()"),LTt.forEach(t),hPe.forEach(t),HJo=i(ha),T(eF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),OOe=i(f),fd=n(f,"H2",{class:!0});var HXe=s(fd);oF=n(HXe,"A",{id:!0,class:!0,href:!0});var yTt=s(oF);$ue=n(yTt,"SPAN",{});var xTt=s($ue);T(KL.$$.fragment,xTt),xTt.forEach(t),yTt.forEach(t),UJo=i(HXe),kue=n(HXe,"SPAN",{});var $Tt=s(kue);JJo=r($Tt,"AutoModelForQuestionAnswering"),$Tt.forEach(t),HXe.forEach(t),VOe=i(f),jo=n(f,"DIV",{class:!0});var il=s(jo);T(ZL.$$.fragment,il),YJo=i(il),md=n(il,"P",{});var Zoe=s(md);KJo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lz=n(Zoe,"A",{href:!0});var kTt=s(Lz);ZJo=r(kTt,"from_pretrained()"),kTt.forEach(t),eYo=r(Zoe," class method or the "),yz=n(Zoe,"A",{href:!0});var STt=s(yz);oYo=r(STt,"from_config()"),STt.forEach(t),rYo=r(Zoe,` class
method.`),Zoe.forEach(t),tYo=i(il),ey=n(il,"P",{});var UXe=s(ey);aYo=r(UXe,"This class cannot be instantiated directly using "),Sue=n(UXe,"CODE",{});var RTt=s(Sue);nYo=r(RTt,"__init__()"),RTt.forEach(t),sYo=r(UXe," (throws an error)."),UXe.forEach(t),lYo=i(il),pt=n(il,"DIV",{class:!0});var rw=s(pt);T(oy.$$.fragment,rw),iYo=i(rw),Rue=n(rw,"P",{});var PTt=s(Rue);dYo=r(PTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PTt.forEach(t),cYo=i(rw),gd=n(rw,"P",{});var ere=s(gd);fYo=r(ere,`Note:
Loading a model from its configuration file does `),Pue=n(ere,"STRONG",{});var BTt=s(Pue);mYo=r(BTt,"not"),BTt.forEach(t),gYo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(ere,"A",{href:!0});var ITt=s(xz);hYo=r(ITt,"from_pretrained()"),ITt.forEach(t),pYo=r(ere," to load the model weights."),ere.forEach(t),_Yo=i(rw),T(rF.$$.fragment,rw),rw.forEach(t),uYo=i(il),no=n(il,"DIV",{class:!0});var pa=s(no);T(ry.$$.fragment,pa),bYo=i(pa),Bue=n(pa,"P",{});var NTt=s(Bue);vYo=r(NTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NTt.forEach(t),FYo=i(pa),Va=n(pa,"P",{});var tw=s(Va);TYo=r(tw,"The model class to instantiate is selected based on the "),Iue=n(tw,"CODE",{});var qTt=s(Iue);MYo=r(qTt,"model_type"),qTt.forEach(t),EYo=r(tw,` property of the config object (either
passed as an argument or loaded from `),Nue=n(tw,"CODE",{});var jTt=s(Nue);CYo=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),wYo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(tw,"CODE",{});var DTt=s(que);AYo=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),LYo=r(tw,":"),tw.forEach(t),yYo=i(pa),V=n(pa,"UL",{});var X=s(V);tF=n(X,"LI",{});var pPe=s(tF);jue=n(pPe,"STRONG",{});var GTt=s(jue);xYo=r(GTt,"albert"),GTt.forEach(t),$Yo=r(pPe," \u2014 "),$z=n(pPe,"A",{href:!0});var OTt=s($z);kYo=r(OTt,"AlbertForQuestionAnswering"),OTt.forEach(t),SYo=r(pPe," (ALBERT model)"),pPe.forEach(t),RYo=i(X),aF=n(X,"LI",{});var _Pe=s(aF);Due=n(_Pe,"STRONG",{});var VTt=s(Due);PYo=r(VTt,"bart"),VTt.forEach(t),BYo=r(_Pe," \u2014 "),kz=n(_Pe,"A",{href:!0});var XTt=s(kz);IYo=r(XTt,"BartForQuestionAnswering"),XTt.forEach(t),NYo=r(_Pe," (BART model)"),_Pe.forEach(t),qYo=i(X),nF=n(X,"LI",{});var uPe=s(nF);Gue=n(uPe,"STRONG",{});var zTt=s(Gue);jYo=r(zTt,"bert"),zTt.forEach(t),DYo=r(uPe," \u2014 "),Sz=n(uPe,"A",{href:!0});var WTt=s(Sz);GYo=r(WTt,"BertForQuestionAnswering"),WTt.forEach(t),OYo=r(uPe," (BERT model)"),uPe.forEach(t),VYo=i(X),sF=n(X,"LI",{});var bPe=s(sF);Oue=n(bPe,"STRONG",{});var QTt=s(Oue);XYo=r(QTt,"big_bird"),QTt.forEach(t),zYo=r(bPe," \u2014 "),Rz=n(bPe,"A",{href:!0});var HTt=s(Rz);WYo=r(HTt,"BigBirdForQuestionAnswering"),HTt.forEach(t),QYo=r(bPe," (BigBird model)"),bPe.forEach(t),HYo=i(X),lF=n(X,"LI",{});var vPe=s(lF);Vue=n(vPe,"STRONG",{});var UTt=s(Vue);UYo=r(UTt,"bigbird_pegasus"),UTt.forEach(t),JYo=r(vPe," \u2014 "),Pz=n(vPe,"A",{href:!0});var JTt=s(Pz);YYo=r(JTt,"BigBirdPegasusForQuestionAnswering"),JTt.forEach(t),KYo=r(vPe," (BigBird-Pegasus model)"),vPe.forEach(t),ZYo=i(X),iF=n(X,"LI",{});var FPe=s(iF);Xue=n(FPe,"STRONG",{});var YTt=s(Xue);eKo=r(YTt,"camembert"),YTt.forEach(t),oKo=r(FPe," \u2014 "),Bz=n(FPe,"A",{href:!0});var KTt=s(Bz);rKo=r(KTt,"CamembertForQuestionAnswering"),KTt.forEach(t),tKo=r(FPe," (CamemBERT model)"),FPe.forEach(t),aKo=i(X),dF=n(X,"LI",{});var TPe=s(dF);zue=n(TPe,"STRONG",{});var ZTt=s(zue);nKo=r(ZTt,"canine"),ZTt.forEach(t),sKo=r(TPe," \u2014 "),Iz=n(TPe,"A",{href:!0});var e7t=s(Iz);lKo=r(e7t,"CanineForQuestionAnswering"),e7t.forEach(t),iKo=r(TPe," (CANINE model)"),TPe.forEach(t),dKo=i(X),cF=n(X,"LI",{});var MPe=s(cF);Wue=n(MPe,"STRONG",{});var o7t=s(Wue);cKo=r(o7t,"convbert"),o7t.forEach(t),fKo=r(MPe," \u2014 "),Nz=n(MPe,"A",{href:!0});var r7t=s(Nz);mKo=r(r7t,"ConvBertForQuestionAnswering"),r7t.forEach(t),gKo=r(MPe," (ConvBERT model)"),MPe.forEach(t),hKo=i(X),fF=n(X,"LI",{});var EPe=s(fF);Que=n(EPe,"STRONG",{});var t7t=s(Que);pKo=r(t7t,"data2vec-text"),t7t.forEach(t),_Ko=r(EPe," \u2014 "),qz=n(EPe,"A",{href:!0});var a7t=s(qz);uKo=r(a7t,"Data2VecTextForQuestionAnswering"),a7t.forEach(t),bKo=r(EPe," (Data2VecText model)"),EPe.forEach(t),vKo=i(X),mF=n(X,"LI",{});var CPe=s(mF);Hue=n(CPe,"STRONG",{});var n7t=s(Hue);FKo=r(n7t,"deberta"),n7t.forEach(t),TKo=r(CPe," \u2014 "),jz=n(CPe,"A",{href:!0});var s7t=s(jz);MKo=r(s7t,"DebertaForQuestionAnswering"),s7t.forEach(t),EKo=r(CPe," (DeBERTa model)"),CPe.forEach(t),CKo=i(X),gF=n(X,"LI",{});var wPe=s(gF);Uue=n(wPe,"STRONG",{});var l7t=s(Uue);wKo=r(l7t,"deberta-v2"),l7t.forEach(t),AKo=r(wPe," \u2014 "),Dz=n(wPe,"A",{href:!0});var i7t=s(Dz);LKo=r(i7t,"DebertaV2ForQuestionAnswering"),i7t.forEach(t),yKo=r(wPe," (DeBERTa-v2 model)"),wPe.forEach(t),xKo=i(X),hF=n(X,"LI",{});var APe=s(hF);Jue=n(APe,"STRONG",{});var d7t=s(Jue);$Ko=r(d7t,"distilbert"),d7t.forEach(t),kKo=r(APe," \u2014 "),Gz=n(APe,"A",{href:!0});var c7t=s(Gz);SKo=r(c7t,"DistilBertForQuestionAnswering"),c7t.forEach(t),RKo=r(APe," (DistilBERT model)"),APe.forEach(t),PKo=i(X),pF=n(X,"LI",{});var LPe=s(pF);Yue=n(LPe,"STRONG",{});var f7t=s(Yue);BKo=r(f7t,"electra"),f7t.forEach(t),IKo=r(LPe," \u2014 "),Oz=n(LPe,"A",{href:!0});var m7t=s(Oz);NKo=r(m7t,"ElectraForQuestionAnswering"),m7t.forEach(t),qKo=r(LPe," (ELECTRA model)"),LPe.forEach(t),jKo=i(X),_F=n(X,"LI",{});var yPe=s(_F);Kue=n(yPe,"STRONG",{});var g7t=s(Kue);DKo=r(g7t,"flaubert"),g7t.forEach(t),GKo=r(yPe," \u2014 "),Vz=n(yPe,"A",{href:!0});var h7t=s(Vz);OKo=r(h7t,"FlaubertForQuestionAnsweringSimple"),h7t.forEach(t),VKo=r(yPe," (FlauBERT model)"),yPe.forEach(t),XKo=i(X),uF=n(X,"LI",{});var xPe=s(uF);Zue=n(xPe,"STRONG",{});var p7t=s(Zue);zKo=r(p7t,"fnet"),p7t.forEach(t),WKo=r(xPe," \u2014 "),Xz=n(xPe,"A",{href:!0});var _7t=s(Xz);QKo=r(_7t,"FNetForQuestionAnswering"),_7t.forEach(t),HKo=r(xPe," (FNet model)"),xPe.forEach(t),UKo=i(X),bF=n(X,"LI",{});var $Pe=s(bF);e1e=n($Pe,"STRONG",{});var u7t=s(e1e);JKo=r(u7t,"funnel"),u7t.forEach(t),YKo=r($Pe," \u2014 "),zz=n($Pe,"A",{href:!0});var b7t=s(zz);KKo=r(b7t,"FunnelForQuestionAnswering"),b7t.forEach(t),ZKo=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),eZo=i(X),vF=n(X,"LI",{});var kPe=s(vF);o1e=n(kPe,"STRONG",{});var v7t=s(o1e);oZo=r(v7t,"gptj"),v7t.forEach(t),rZo=r(kPe," \u2014 "),Wz=n(kPe,"A",{href:!0});var F7t=s(Wz);tZo=r(F7t,"GPTJForQuestionAnswering"),F7t.forEach(t),aZo=r(kPe," (GPT-J model)"),kPe.forEach(t),nZo=i(X),FF=n(X,"LI",{});var SPe=s(FF);r1e=n(SPe,"STRONG",{});var T7t=s(r1e);sZo=r(T7t,"ibert"),T7t.forEach(t),lZo=r(SPe," \u2014 "),Qz=n(SPe,"A",{href:!0});var M7t=s(Qz);iZo=r(M7t,"IBertForQuestionAnswering"),M7t.forEach(t),dZo=r(SPe," (I-BERT model)"),SPe.forEach(t),cZo=i(X),TF=n(X,"LI",{});var RPe=s(TF);t1e=n(RPe,"STRONG",{});var E7t=s(t1e);fZo=r(E7t,"layoutlmv2"),E7t.forEach(t),mZo=r(RPe," \u2014 "),Hz=n(RPe,"A",{href:!0});var C7t=s(Hz);gZo=r(C7t,"LayoutLMv2ForQuestionAnswering"),C7t.forEach(t),hZo=r(RPe," (LayoutLMv2 model)"),RPe.forEach(t),pZo=i(X),MF=n(X,"LI",{});var PPe=s(MF);a1e=n(PPe,"STRONG",{});var w7t=s(a1e);_Zo=r(w7t,"layoutlmv3"),w7t.forEach(t),uZo=r(PPe," \u2014 "),Uz=n(PPe,"A",{href:!0});var A7t=s(Uz);bZo=r(A7t,"LayoutLMv3ForQuestionAnswering"),A7t.forEach(t),vZo=r(PPe," (LayoutLMv3 model)"),PPe.forEach(t),FZo=i(X),EF=n(X,"LI",{});var BPe=s(EF);n1e=n(BPe,"STRONG",{});var L7t=s(n1e);TZo=r(L7t,"led"),L7t.forEach(t),MZo=r(BPe," \u2014 "),Jz=n(BPe,"A",{href:!0});var y7t=s(Jz);EZo=r(y7t,"LEDForQuestionAnswering"),y7t.forEach(t),CZo=r(BPe," (LED model)"),BPe.forEach(t),wZo=i(X),CF=n(X,"LI",{});var IPe=s(CF);s1e=n(IPe,"STRONG",{});var x7t=s(s1e);AZo=r(x7t,"longformer"),x7t.forEach(t),LZo=r(IPe," \u2014 "),Yz=n(IPe,"A",{href:!0});var $7t=s(Yz);yZo=r($7t,"LongformerForQuestionAnswering"),$7t.forEach(t),xZo=r(IPe," (Longformer model)"),IPe.forEach(t),$Zo=i(X),wF=n(X,"LI",{});var NPe=s(wF);l1e=n(NPe,"STRONG",{});var k7t=s(l1e);kZo=r(k7t,"lxmert"),k7t.forEach(t),SZo=r(NPe," \u2014 "),Kz=n(NPe,"A",{href:!0});var S7t=s(Kz);RZo=r(S7t,"LxmertForQuestionAnswering"),S7t.forEach(t),PZo=r(NPe," (LXMERT model)"),NPe.forEach(t),BZo=i(X),AF=n(X,"LI",{});var qPe=s(AF);i1e=n(qPe,"STRONG",{});var R7t=s(i1e);IZo=r(R7t,"mbart"),R7t.forEach(t),NZo=r(qPe," \u2014 "),Zz=n(qPe,"A",{href:!0});var P7t=s(Zz);qZo=r(P7t,"MBartForQuestionAnswering"),P7t.forEach(t),jZo=r(qPe," (mBART model)"),qPe.forEach(t),DZo=i(X),LF=n(X,"LI",{});var jPe=s(LF);d1e=n(jPe,"STRONG",{});var B7t=s(d1e);GZo=r(B7t,"megatron-bert"),B7t.forEach(t),OZo=r(jPe," \u2014 "),eW=n(jPe,"A",{href:!0});var I7t=s(eW);VZo=r(I7t,"MegatronBertForQuestionAnswering"),I7t.forEach(t),XZo=r(jPe," (Megatron-BERT model)"),jPe.forEach(t),zZo=i(X),yF=n(X,"LI",{});var DPe=s(yF);c1e=n(DPe,"STRONG",{});var N7t=s(c1e);WZo=r(N7t,"mobilebert"),N7t.forEach(t),QZo=r(DPe," \u2014 "),oW=n(DPe,"A",{href:!0});var q7t=s(oW);HZo=r(q7t,"MobileBertForQuestionAnswering"),q7t.forEach(t),UZo=r(DPe," (MobileBERT model)"),DPe.forEach(t),JZo=i(X),xF=n(X,"LI",{});var GPe=s(xF);f1e=n(GPe,"STRONG",{});var j7t=s(f1e);YZo=r(j7t,"mpnet"),j7t.forEach(t),KZo=r(GPe," \u2014 "),rW=n(GPe,"A",{href:!0});var D7t=s(rW);ZZo=r(D7t,"MPNetForQuestionAnswering"),D7t.forEach(t),eer=r(GPe," (MPNet model)"),GPe.forEach(t),oer=i(X),$F=n(X,"LI",{});var OPe=s($F);m1e=n(OPe,"STRONG",{});var G7t=s(m1e);rer=r(G7t,"nezha"),G7t.forEach(t),ter=r(OPe," \u2014 "),tW=n(OPe,"A",{href:!0});var O7t=s(tW);aer=r(O7t,"NezhaForQuestionAnswering"),O7t.forEach(t),ner=r(OPe," (Nezha model)"),OPe.forEach(t),ser=i(X),kF=n(X,"LI",{});var VPe=s(kF);g1e=n(VPe,"STRONG",{});var V7t=s(g1e);ler=r(V7t,"nystromformer"),V7t.forEach(t),ier=r(VPe," \u2014 "),aW=n(VPe,"A",{href:!0});var X7t=s(aW);der=r(X7t,"NystromformerForQuestionAnswering"),X7t.forEach(t),cer=r(VPe," (Nystr\xF6mformer model)"),VPe.forEach(t),fer=i(X),SF=n(X,"LI",{});var XPe=s(SF);h1e=n(XPe,"STRONG",{});var z7t=s(h1e);mer=r(z7t,"qdqbert"),z7t.forEach(t),ger=r(XPe," \u2014 "),nW=n(XPe,"A",{href:!0});var W7t=s(nW);her=r(W7t,"QDQBertForQuestionAnswering"),W7t.forEach(t),per=r(XPe," (QDQBert model)"),XPe.forEach(t),_er=i(X),RF=n(X,"LI",{});var zPe=s(RF);p1e=n(zPe,"STRONG",{});var Q7t=s(p1e);uer=r(Q7t,"reformer"),Q7t.forEach(t),ber=r(zPe," \u2014 "),sW=n(zPe,"A",{href:!0});var H7t=s(sW);ver=r(H7t,"ReformerForQuestionAnswering"),H7t.forEach(t),Fer=r(zPe," (Reformer model)"),zPe.forEach(t),Ter=i(X),PF=n(X,"LI",{});var WPe=s(PF);_1e=n(WPe,"STRONG",{});var U7t=s(_1e);Mer=r(U7t,"rembert"),U7t.forEach(t),Eer=r(WPe," \u2014 "),lW=n(WPe,"A",{href:!0});var J7t=s(lW);Cer=r(J7t,"RemBertForQuestionAnswering"),J7t.forEach(t),wer=r(WPe," (RemBERT model)"),WPe.forEach(t),Aer=i(X),BF=n(X,"LI",{});var QPe=s(BF);u1e=n(QPe,"STRONG",{});var Y7t=s(u1e);Ler=r(Y7t,"roberta"),Y7t.forEach(t),yer=r(QPe," \u2014 "),iW=n(QPe,"A",{href:!0});var K7t=s(iW);xer=r(K7t,"RobertaForQuestionAnswering"),K7t.forEach(t),$er=r(QPe," (RoBERTa model)"),QPe.forEach(t),ker=i(X),IF=n(X,"LI",{});var HPe=s(IF);b1e=n(HPe,"STRONG",{});var Z7t=s(b1e);Ser=r(Z7t,"roformer"),Z7t.forEach(t),Rer=r(HPe," \u2014 "),dW=n(HPe,"A",{href:!0});var e8t=s(dW);Per=r(e8t,"RoFormerForQuestionAnswering"),e8t.forEach(t),Ber=r(HPe," (RoFormer model)"),HPe.forEach(t),Ier=i(X),NF=n(X,"LI",{});var UPe=s(NF);v1e=n(UPe,"STRONG",{});var o8t=s(v1e);Ner=r(o8t,"splinter"),o8t.forEach(t),qer=r(UPe," \u2014 "),cW=n(UPe,"A",{href:!0});var r8t=s(cW);jer=r(r8t,"SplinterForQuestionAnswering"),r8t.forEach(t),Der=r(UPe," (Splinter model)"),UPe.forEach(t),Ger=i(X),qF=n(X,"LI",{});var JPe=s(qF);F1e=n(JPe,"STRONG",{});var t8t=s(F1e);Oer=r(t8t,"squeezebert"),t8t.forEach(t),Ver=r(JPe," \u2014 "),fW=n(JPe,"A",{href:!0});var a8t=s(fW);Xer=r(a8t,"SqueezeBertForQuestionAnswering"),a8t.forEach(t),zer=r(JPe," (SqueezeBERT model)"),JPe.forEach(t),Wer=i(X),jF=n(X,"LI",{});var YPe=s(jF);T1e=n(YPe,"STRONG",{});var n8t=s(T1e);Qer=r(n8t,"xlm"),n8t.forEach(t),Her=r(YPe," \u2014 "),mW=n(YPe,"A",{href:!0});var s8t=s(mW);Uer=r(s8t,"XLMForQuestionAnsweringSimple"),s8t.forEach(t),Jer=r(YPe," (XLM model)"),YPe.forEach(t),Yer=i(X),DF=n(X,"LI",{});var KPe=s(DF);M1e=n(KPe,"STRONG",{});var l8t=s(M1e);Ker=r(l8t,"xlm-roberta"),l8t.forEach(t),Zer=r(KPe," \u2014 "),gW=n(KPe,"A",{href:!0});var i8t=s(gW);eor=r(i8t,"XLMRobertaForQuestionAnswering"),i8t.forEach(t),oor=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),ror=i(X),GF=n(X,"LI",{});var ZPe=s(GF);E1e=n(ZPe,"STRONG",{});var d8t=s(E1e);tor=r(d8t,"xlm-roberta-xl"),d8t.forEach(t),aor=r(ZPe," \u2014 "),hW=n(ZPe,"A",{href:!0});var c8t=s(hW);nor=r(c8t,"XLMRobertaXLForQuestionAnswering"),c8t.forEach(t),sor=r(ZPe," (XLM-RoBERTa-XL model)"),ZPe.forEach(t),lor=i(X),OF=n(X,"LI",{});var eBe=s(OF);C1e=n(eBe,"STRONG",{});var f8t=s(C1e);ior=r(f8t,"xlnet"),f8t.forEach(t),dor=r(eBe," \u2014 "),pW=n(eBe,"A",{href:!0});var m8t=s(pW);cor=r(m8t,"XLNetForQuestionAnsweringSimple"),m8t.forEach(t),mor=r(eBe," (XLNet model)"),eBe.forEach(t),gor=i(X),VF=n(X,"LI",{});var oBe=s(VF);w1e=n(oBe,"STRONG",{});var g8t=s(w1e);hor=r(g8t,"yoso"),g8t.forEach(t),por=r(oBe," \u2014 "),_W=n(oBe,"A",{href:!0});var h8t=s(_W);_or=r(h8t,"YosoForQuestionAnswering"),h8t.forEach(t),uor=r(oBe," (YOSO model)"),oBe.forEach(t),X.forEach(t),bor=i(pa),XF=n(pa,"P",{});var rBe=s(XF);vor=r(rBe,"The model is set in evaluation mode by default using "),A1e=n(rBe,"CODE",{});var p8t=s(A1e);For=r(p8t,"model.eval()"),p8t.forEach(t),Tor=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(rBe,"CODE",{});var _8t=s(L1e);Mor=r(_8t,"model.train()"),_8t.forEach(t),rBe.forEach(t),Eor=i(pa),T(zF.$$.fragment,pa),pa.forEach(t),il.forEach(t),XOe=i(f),hd=n(f,"H2",{class:!0});var JXe=s(hd);WF=n(JXe,"A",{id:!0,class:!0,href:!0});var u8t=s(WF);y1e=n(u8t,"SPAN",{});var b8t=s(y1e);T(ty.$$.fragment,b8t),b8t.forEach(t),u8t.forEach(t),Cor=i(JXe),x1e=n(JXe,"SPAN",{});var v8t=s(x1e);wor=r(v8t,"AutoModelForTableQuestionAnswering"),v8t.forEach(t),JXe.forEach(t),zOe=i(f),Do=n(f,"DIV",{class:!0});var dl=s(Do);T(ay.$$.fragment,dl),Aor=i(dl),pd=n(dl,"P",{});var ore=s(pd);Lor=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(ore,"A",{href:!0});var F8t=s(uW);yor=r(F8t,"from_pretrained()"),F8t.forEach(t),xor=r(ore," class method or the "),bW=n(ore,"A",{href:!0});var T8t=s(bW);$or=r(T8t,"from_config()"),T8t.forEach(t),kor=r(ore,` class
method.`),ore.forEach(t),Sor=i(dl),ny=n(dl,"P",{});var YXe=s(ny);Ror=r(YXe,"This class cannot be instantiated directly using "),$1e=n(YXe,"CODE",{});var M8t=s($1e);Por=r(M8t,"__init__()"),M8t.forEach(t),Bor=r(YXe," (throws an error)."),YXe.forEach(t),Ior=i(dl),_t=n(dl,"DIV",{class:!0});var aw=s(_t);T(sy.$$.fragment,aw),Nor=i(aw),k1e=n(aw,"P",{});var E8t=s(k1e);qor=r(E8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E8t.forEach(t),jor=i(aw),_d=n(aw,"P",{});var rre=s(_d);Dor=r(rre,`Note:
Loading a model from its configuration file does `),S1e=n(rre,"STRONG",{});var C8t=s(S1e);Gor=r(C8t,"not"),C8t.forEach(t),Oor=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(rre,"A",{href:!0});var w8t=s(vW);Vor=r(w8t,"from_pretrained()"),w8t.forEach(t),Xor=r(rre," to load the model weights."),rre.forEach(t),zor=i(aw),T(QF.$$.fragment,aw),aw.forEach(t),Wor=i(dl),so=n(dl,"DIV",{class:!0});var _a=s(so);T(ly.$$.fragment,_a),Qor=i(_a),R1e=n(_a,"P",{});var A8t=s(R1e);Hor=r(A8t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),A8t.forEach(t),Uor=i(_a),Xa=n(_a,"P",{});var nw=s(Xa);Jor=r(nw,"The model class to instantiate is selected based on the "),P1e=n(nw,"CODE",{});var L8t=s(P1e);Yor=r(L8t,"model_type"),L8t.forEach(t),Kor=r(nw,` property of the config object (either
passed as an argument or loaded from `),B1e=n(nw,"CODE",{});var y8t=s(B1e);Zor=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),err=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(nw,"CODE",{});var x8t=s(I1e);orr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),rrr=r(nw,":"),nw.forEach(t),trr=i(_a),N1e=n(_a,"UL",{});var $8t=s(N1e);HF=n($8t,"LI",{});var tBe=s(HF);q1e=n(tBe,"STRONG",{});var k8t=s(q1e);arr=r(k8t,"tapas"),k8t.forEach(t),nrr=r(tBe," \u2014 "),FW=n(tBe,"A",{href:!0});var S8t=s(FW);srr=r(S8t,"TapasForQuestionAnswering"),S8t.forEach(t),lrr=r(tBe," (TAPAS model)"),tBe.forEach(t),$8t.forEach(t),irr=i(_a),UF=n(_a,"P",{});var aBe=s(UF);drr=r(aBe,"The model is set in evaluation mode by default using "),j1e=n(aBe,"CODE",{});var R8t=s(j1e);crr=r(R8t,"model.eval()"),R8t.forEach(t),frr=r(aBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(aBe,"CODE",{});var P8t=s(D1e);mrr=r(P8t,"model.train()"),P8t.forEach(t),aBe.forEach(t),grr=i(_a),T(JF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),WOe=i(f),ud=n(f,"H2",{class:!0});var KXe=s(ud);YF=n(KXe,"A",{id:!0,class:!0,href:!0});var B8t=s(YF);G1e=n(B8t,"SPAN",{});var I8t=s(G1e);T(iy.$$.fragment,I8t),I8t.forEach(t),B8t.forEach(t),hrr=i(KXe),O1e=n(KXe,"SPAN",{});var N8t=s(O1e);prr=r(N8t,"AutoModelForImageClassification"),N8t.forEach(t),KXe.forEach(t),QOe=i(f),Go=n(f,"DIV",{class:!0});var cl=s(Go);T(dy.$$.fragment,cl),_rr=i(cl),bd=n(cl,"P",{});var tre=s(bd);urr=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=n(tre,"A",{href:!0});var q8t=s(TW);brr=r(q8t,"from_pretrained()"),q8t.forEach(t),vrr=r(tre," class method or the "),MW=n(tre,"A",{href:!0});var j8t=s(MW);Frr=r(j8t,"from_config()"),j8t.forEach(t),Trr=r(tre,` class
method.`),tre.forEach(t),Mrr=i(cl),cy=n(cl,"P",{});var ZXe=s(cy);Err=r(ZXe,"This class cannot be instantiated directly using "),V1e=n(ZXe,"CODE",{});var D8t=s(V1e);Crr=r(D8t,"__init__()"),D8t.forEach(t),wrr=r(ZXe," (throws an error)."),ZXe.forEach(t),Arr=i(cl),ut=n(cl,"DIV",{class:!0});var sw=s(ut);T(fy.$$.fragment,sw),Lrr=i(sw),X1e=n(sw,"P",{});var G8t=s(X1e);yrr=r(G8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G8t.forEach(t),xrr=i(sw),vd=n(sw,"P",{});var are=s(vd);$rr=r(are,`Note:
Loading a model from its configuration file does `),z1e=n(are,"STRONG",{});var O8t=s(z1e);krr=r(O8t,"not"),O8t.forEach(t),Srr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(are,"A",{href:!0});var V8t=s(EW);Rrr=r(V8t,"from_pretrained()"),V8t.forEach(t),Prr=r(are," to load the model weights."),are.forEach(t),Brr=i(sw),T(KF.$$.fragment,sw),sw.forEach(t),Irr=i(cl),lo=n(cl,"DIV",{class:!0});var ua=s(lo);T(my.$$.fragment,ua),Nrr=i(ua),W1e=n(ua,"P",{});var X8t=s(W1e);qrr=r(X8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X8t.forEach(t),jrr=i(ua),za=n(ua,"P",{});var lw=s(za);Drr=r(lw,"The model class to instantiate is selected based on the "),Q1e=n(lw,"CODE",{});var z8t=s(Q1e);Grr=r(z8t,"model_type"),z8t.forEach(t),Orr=r(lw,` property of the config object (either
passed as an argument or loaded from `),H1e=n(lw,"CODE",{});var W8t=s(H1e);Vrr=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),Xrr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(lw,"CODE",{});var Q8t=s(U1e);zrr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),Wrr=r(lw,":"),lw.forEach(t),Qrr=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);ZF=n(Te,"LI",{});var nBe=s(ZF);J1e=n(nBe,"STRONG",{});var H8t=s(J1e);Hrr=r(H8t,"beit"),H8t.forEach(t),Urr=r(nBe," \u2014 "),CW=n(nBe,"A",{href:!0});var U8t=s(CW);Jrr=r(U8t,"BeitForImageClassification"),U8t.forEach(t),Yrr=r(nBe," (BEiT model)"),nBe.forEach(t),Krr=i(Te),e6=n(Te,"LI",{});var sBe=s(e6);Y1e=n(sBe,"STRONG",{});var J8t=s(Y1e);Zrr=r(J8t,"convnext"),J8t.forEach(t),etr=r(sBe," \u2014 "),wW=n(sBe,"A",{href:!0});var Y8t=s(wW);otr=r(Y8t,"ConvNextForImageClassification"),Y8t.forEach(t),rtr=r(sBe," (ConvNeXT model)"),sBe.forEach(t),ttr=i(Te),o6=n(Te,"LI",{});var lBe=s(o6);K1e=n(lBe,"STRONG",{});var K8t=s(K1e);atr=r(K8t,"cvt"),K8t.forEach(t),ntr=r(lBe," \u2014 "),AW=n(lBe,"A",{href:!0});var Z8t=s(AW);str=r(Z8t,"CvtForImageClassification"),Z8t.forEach(t),ltr=r(lBe," (CvT model)"),lBe.forEach(t),itr=i(Te),r6=n(Te,"LI",{});var iBe=s(r6);Z1e=n(iBe,"STRONG",{});var eMt=s(Z1e);dtr=r(eMt,"data2vec-vision"),eMt.forEach(t),ctr=r(iBe," \u2014 "),LW=n(iBe,"A",{href:!0});var oMt=s(LW);ftr=r(oMt,"Data2VecVisionForImageClassification"),oMt.forEach(t),mtr=r(iBe," (Data2VecVision model)"),iBe.forEach(t),gtr=i(Te),zs=n(Te,"LI",{});var sS=s(zs);e2e=n(sS,"STRONG",{});var rMt=s(e2e);htr=r(rMt,"deit"),rMt.forEach(t),ptr=r(sS," \u2014 "),yW=n(sS,"A",{href:!0});var tMt=s(yW);_tr=r(tMt,"DeiTForImageClassification"),tMt.forEach(t),utr=r(sS," or "),xW=n(sS,"A",{href:!0});var aMt=s(xW);btr=r(aMt,"DeiTForImageClassificationWithTeacher"),aMt.forEach(t),vtr=r(sS," (DeiT model)"),sS.forEach(t),Ftr=i(Te),t6=n(Te,"LI",{});var dBe=s(t6);o2e=n(dBe,"STRONG",{});var nMt=s(o2e);Ttr=r(nMt,"imagegpt"),nMt.forEach(t),Mtr=r(dBe," \u2014 "),$W=n(dBe,"A",{href:!0});var sMt=s($W);Etr=r(sMt,"ImageGPTForImageClassification"),sMt.forEach(t),Ctr=r(dBe," (ImageGPT model)"),dBe.forEach(t),wtr=i(Te),Ws=n(Te,"LI",{});var lS=s(Ws);r2e=n(lS,"STRONG",{});var lMt=s(r2e);Atr=r(lMt,"levit"),lMt.forEach(t),Ltr=r(lS," \u2014 "),kW=n(lS,"A",{href:!0});var iMt=s(kW);ytr=r(iMt,"LevitForImageClassification"),iMt.forEach(t),xtr=r(lS," or "),SW=n(lS,"A",{href:!0});var dMt=s(SW);$tr=r(dMt,"LevitForImageClassificationWithTeacher"),dMt.forEach(t),ktr=r(lS," (LeViT model)"),lS.forEach(t),Str=i(Te),bt=n(Te,"LI",{});var $f=s(bt);t2e=n($f,"STRONG",{});var cMt=s(t2e);Rtr=r(cMt,"perceiver"),cMt.forEach(t),Ptr=r($f," \u2014 "),RW=n($f,"A",{href:!0});var fMt=s(RW);Btr=r(fMt,"PerceiverForImageClassificationLearned"),fMt.forEach(t),Itr=r($f," or "),PW=n($f,"A",{href:!0});var mMt=s(PW);Ntr=r(mMt,"PerceiverForImageClassificationFourier"),mMt.forEach(t),qtr=r($f," or "),BW=n($f,"A",{href:!0});var gMt=s(BW);jtr=r(gMt,"PerceiverForImageClassificationConvProcessing"),gMt.forEach(t),Dtr=r($f," (Perceiver model)"),$f.forEach(t),Gtr=i(Te),a6=n(Te,"LI",{});var cBe=s(a6);a2e=n(cBe,"STRONG",{});var hMt=s(a2e);Otr=r(hMt,"poolformer"),hMt.forEach(t),Vtr=r(cBe," \u2014 "),IW=n(cBe,"A",{href:!0});var pMt=s(IW);Xtr=r(pMt,"PoolFormerForImageClassification"),pMt.forEach(t),ztr=r(cBe," (PoolFormer model)"),cBe.forEach(t),Wtr=i(Te),n6=n(Te,"LI",{});var fBe=s(n6);n2e=n(fBe,"STRONG",{});var _Mt=s(n2e);Qtr=r(_Mt,"regnet"),_Mt.forEach(t),Htr=r(fBe," \u2014 "),NW=n(fBe,"A",{href:!0});var uMt=s(NW);Utr=r(uMt,"RegNetForImageClassification"),uMt.forEach(t),Jtr=r(fBe," (RegNet model)"),fBe.forEach(t),Ytr=i(Te),s6=n(Te,"LI",{});var mBe=s(s6);s2e=n(mBe,"STRONG",{});var bMt=s(s2e);Ktr=r(bMt,"resnet"),bMt.forEach(t),Ztr=r(mBe," \u2014 "),qW=n(mBe,"A",{href:!0});var vMt=s(qW);ear=r(vMt,"ResNetForImageClassification"),vMt.forEach(t),oar=r(mBe," (ResNet model)"),mBe.forEach(t),rar=i(Te),l6=n(Te,"LI",{});var gBe=s(l6);l2e=n(gBe,"STRONG",{});var FMt=s(l2e);tar=r(FMt,"segformer"),FMt.forEach(t),aar=r(gBe," \u2014 "),jW=n(gBe,"A",{href:!0});var TMt=s(jW);nar=r(TMt,"SegformerForImageClassification"),TMt.forEach(t),sar=r(gBe," (SegFormer model)"),gBe.forEach(t),lar=i(Te),i6=n(Te,"LI",{});var hBe=s(i6);i2e=n(hBe,"STRONG",{});var MMt=s(i2e);iar=r(MMt,"swin"),MMt.forEach(t),dar=r(hBe," \u2014 "),DW=n(hBe,"A",{href:!0});var EMt=s(DW);car=r(EMt,"SwinForImageClassification"),EMt.forEach(t),far=r(hBe," (Swin Transformer model)"),hBe.forEach(t),mar=i(Te),d6=n(Te,"LI",{});var pBe=s(d6);d2e=n(pBe,"STRONG",{});var CMt=s(d2e);gar=r(CMt,"van"),CMt.forEach(t),har=r(pBe," \u2014 "),GW=n(pBe,"A",{href:!0});var wMt=s(GW);par=r(wMt,"VanForImageClassification"),wMt.forEach(t),_ar=r(pBe," (VAN model)"),pBe.forEach(t),uar=i(Te),c6=n(Te,"LI",{});var _Be=s(c6);c2e=n(_Be,"STRONG",{});var AMt=s(c2e);bar=r(AMt,"vit"),AMt.forEach(t),Far=r(_Be," \u2014 "),OW=n(_Be,"A",{href:!0});var LMt=s(OW);Tar=r(LMt,"ViTForImageClassification"),LMt.forEach(t),Mar=r(_Be," (ViT model)"),_Be.forEach(t),Te.forEach(t),Ear=i(ua),f6=n(ua,"P",{});var uBe=s(f6);Car=r(uBe,"The model is set in evaluation mode by default using "),f2e=n(uBe,"CODE",{});var yMt=s(f2e);war=r(yMt,"model.eval()"),yMt.forEach(t),Aar=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(uBe,"CODE",{});var xMt=s(m2e);Lar=r(xMt,"model.train()"),xMt.forEach(t),uBe.forEach(t),yar=i(ua),T(m6.$$.fragment,ua),ua.forEach(t),cl.forEach(t),HOe=i(f),Fd=n(f,"H2",{class:!0});var eze=s(Fd);g6=n(eze,"A",{id:!0,class:!0,href:!0});var $Mt=s(g6);g2e=n($Mt,"SPAN",{});var kMt=s(g2e);T(gy.$$.fragment,kMt),kMt.forEach(t),$Mt.forEach(t),xar=i(eze),h2e=n(eze,"SPAN",{});var SMt=s(h2e);$ar=r(SMt,"AutoModelForVision2Seq"),SMt.forEach(t),eze.forEach(t),UOe=i(f),Oo=n(f,"DIV",{class:!0});var fl=s(Oo);T(hy.$$.fragment,fl),kar=i(fl),Td=n(fl,"P",{});var nre=s(Td);Sar=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VW=n(nre,"A",{href:!0});var RMt=s(VW);Rar=r(RMt,"from_pretrained()"),RMt.forEach(t),Par=r(nre," class method or the "),XW=n(nre,"A",{href:!0});var PMt=s(XW);Bar=r(PMt,"from_config()"),PMt.forEach(t),Iar=r(nre,` class
method.`),nre.forEach(t),Nar=i(fl),py=n(fl,"P",{});var oze=s(py);qar=r(oze,"This class cannot be instantiated directly using "),p2e=n(oze,"CODE",{});var BMt=s(p2e);jar=r(BMt,"__init__()"),BMt.forEach(t),Dar=r(oze," (throws an error)."),oze.forEach(t),Gar=i(fl),vt=n(fl,"DIV",{class:!0});var iw=s(vt);T(_y.$$.fragment,iw),Oar=i(iw),_2e=n(iw,"P",{});var IMt=s(_2e);Var=r(IMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IMt.forEach(t),Xar=i(iw),Md=n(iw,"P",{});var sre=s(Md);zar=r(sre,`Note:
Loading a model from its configuration file does `),u2e=n(sre,"STRONG",{});var NMt=s(u2e);War=r(NMt,"not"),NMt.forEach(t),Qar=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(sre,"A",{href:!0});var qMt=s(zW);Har=r(qMt,"from_pretrained()"),qMt.forEach(t),Uar=r(sre," to load the model weights."),sre.forEach(t),Jar=i(iw),T(h6.$$.fragment,iw),iw.forEach(t),Yar=i(fl),io=n(fl,"DIV",{class:!0});var ba=s(io);T(uy.$$.fragment,ba),Kar=i(ba),b2e=n(ba,"P",{});var jMt=s(b2e);Zar=r(jMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jMt.forEach(t),enr=i(ba),Wa=n(ba,"P",{});var dw=s(Wa);onr=r(dw,"The model class to instantiate is selected based on the "),v2e=n(dw,"CODE",{});var DMt=s(v2e);rnr=r(DMt,"model_type"),DMt.forEach(t),tnr=r(dw,` property of the config object (either
passed as an argument or loaded from `),F2e=n(dw,"CODE",{});var GMt=s(F2e);anr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),nnr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(dw,"CODE",{});var OMt=s(T2e);snr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),lnr=r(dw,":"),dw.forEach(t),inr=i(ba),M2e=n(ba,"UL",{});var VMt=s(M2e);p6=n(VMt,"LI",{});var bBe=s(p6);E2e=n(bBe,"STRONG",{});var XMt=s(E2e);dnr=r(XMt,"vision-encoder-decoder"),XMt.forEach(t),cnr=r(bBe," \u2014 "),WW=n(bBe,"A",{href:!0});var zMt=s(WW);fnr=r(zMt,"VisionEncoderDecoderModel"),zMt.forEach(t),mnr=r(bBe," (Vision Encoder decoder model)"),bBe.forEach(t),VMt.forEach(t),gnr=i(ba),_6=n(ba,"P",{});var vBe=s(_6);hnr=r(vBe,"The model is set in evaluation mode by default using "),C2e=n(vBe,"CODE",{});var WMt=s(C2e);pnr=r(WMt,"model.eval()"),WMt.forEach(t),_nr=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=n(vBe,"CODE",{});var QMt=s(w2e);unr=r(QMt,"model.train()"),QMt.forEach(t),vBe.forEach(t),bnr=i(ba),T(u6.$$.fragment,ba),ba.forEach(t),fl.forEach(t),JOe=i(f),Ed=n(f,"H2",{class:!0});var rze=s(Ed);b6=n(rze,"A",{id:!0,class:!0,href:!0});var HMt=s(b6);A2e=n(HMt,"SPAN",{});var UMt=s(A2e);T(by.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),vnr=i(rze),L2e=n(rze,"SPAN",{});var JMt=s(L2e);Fnr=r(JMt,"AutoModelForVisualQuestionAnswering"),JMt.forEach(t),rze.forEach(t),YOe=i(f),Vo=n(f,"DIV",{class:!0});var ml=s(Vo);T(vy.$$.fragment,ml),Tnr=i(ml),Cd=n(ml,"P",{});var lre=s(Cd);Mnr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=n(lre,"A",{href:!0});var YMt=s(QW);Enr=r(YMt,"from_pretrained()"),YMt.forEach(t),Cnr=r(lre," class method or the "),HW=n(lre,"A",{href:!0});var KMt=s(HW);wnr=r(KMt,"from_config()"),KMt.forEach(t),Anr=r(lre,` class
method.`),lre.forEach(t),Lnr=i(ml),Fy=n(ml,"P",{});var tze=s(Fy);ynr=r(tze,"This class cannot be instantiated directly using "),y2e=n(tze,"CODE",{});var ZMt=s(y2e);xnr=r(ZMt,"__init__()"),ZMt.forEach(t),$nr=r(tze," (throws an error)."),tze.forEach(t),knr=i(ml),Ft=n(ml,"DIV",{class:!0});var cw=s(Ft);T(Ty.$$.fragment,cw),Snr=i(cw),x2e=n(cw,"P",{});var eEt=s(x2e);Rnr=r(eEt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),eEt.forEach(t),Pnr=i(cw),wd=n(cw,"P",{});var ire=s(wd);Bnr=r(ire,`Note:
Loading a model from its configuration file does `),$2e=n(ire,"STRONG",{});var oEt=s($2e);Inr=r(oEt,"not"),oEt.forEach(t),Nnr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(ire,"A",{href:!0});var rEt=s(UW);qnr=r(rEt,"from_pretrained()"),rEt.forEach(t),jnr=r(ire," to load the model weights."),ire.forEach(t),Dnr=i(cw),T(v6.$$.fragment,cw),cw.forEach(t),Gnr=i(ml),co=n(ml,"DIV",{class:!0});var va=s(co);T(My.$$.fragment,va),Onr=i(va),k2e=n(va,"P",{});var tEt=s(k2e);Vnr=r(tEt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),tEt.forEach(t),Xnr=i(va),Qa=n(va,"P",{});var fw=s(Qa);znr=r(fw,"The model class to instantiate is selected based on the "),S2e=n(fw,"CODE",{});var aEt=s(S2e);Wnr=r(aEt,"model_type"),aEt.forEach(t),Qnr=r(fw,` property of the config object (either
passed as an argument or loaded from `),R2e=n(fw,"CODE",{});var nEt=s(R2e);Hnr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),Unr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(fw,"CODE",{});var sEt=s(P2e);Jnr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),Ynr=r(fw,":"),fw.forEach(t),Knr=i(va),B2e=n(va,"UL",{});var lEt=s(B2e);F6=n(lEt,"LI",{});var FBe=s(F6);I2e=n(FBe,"STRONG",{});var iEt=s(I2e);Znr=r(iEt,"vilt"),iEt.forEach(t),esr=r(FBe," \u2014 "),JW=n(FBe,"A",{href:!0});var dEt=s(JW);osr=r(dEt,"ViltForQuestionAnswering"),dEt.forEach(t),rsr=r(FBe," (ViLT model)"),FBe.forEach(t),lEt.forEach(t),tsr=i(va),T6=n(va,"P",{});var TBe=s(T6);asr=r(TBe,"The model is set in evaluation mode by default using "),N2e=n(TBe,"CODE",{});var cEt=s(N2e);nsr=r(cEt,"model.eval()"),cEt.forEach(t),ssr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(TBe,"CODE",{});var fEt=s(q2e);lsr=r(fEt,"model.train()"),fEt.forEach(t),TBe.forEach(t),isr=i(va),T(M6.$$.fragment,va),va.forEach(t),ml.forEach(t),KOe=i(f),Ad=n(f,"H2",{class:!0});var aze=s(Ad);E6=n(aze,"A",{id:!0,class:!0,href:!0});var mEt=s(E6);j2e=n(mEt,"SPAN",{});var gEt=s(j2e);T(Ey.$$.fragment,gEt),gEt.forEach(t),mEt.forEach(t),dsr=i(aze),D2e=n(aze,"SPAN",{});var hEt=s(D2e);csr=r(hEt,"AutoModelForAudioClassification"),hEt.forEach(t),aze.forEach(t),ZOe=i(f),Xo=n(f,"DIV",{class:!0});var gl=s(Xo);T(Cy.$$.fragment,gl),fsr=i(gl),Ld=n(gl,"P",{});var dre=s(Ld);msr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YW=n(dre,"A",{href:!0});var pEt=s(YW);gsr=r(pEt,"from_pretrained()"),pEt.forEach(t),hsr=r(dre," class method or the "),KW=n(dre,"A",{href:!0});var _Et=s(KW);psr=r(_Et,"from_config()"),_Et.forEach(t),_sr=r(dre,` class
method.`),dre.forEach(t),usr=i(gl),wy=n(gl,"P",{});var nze=s(wy);bsr=r(nze,"This class cannot be instantiated directly using "),G2e=n(nze,"CODE",{});var uEt=s(G2e);vsr=r(uEt,"__init__()"),uEt.forEach(t),Fsr=r(nze," (throws an error)."),nze.forEach(t),Tsr=i(gl),Tt=n(gl,"DIV",{class:!0});var mw=s(Tt);T(Ay.$$.fragment,mw),Msr=i(mw),O2e=n(mw,"P",{});var bEt=s(O2e);Esr=r(bEt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bEt.forEach(t),Csr=i(mw),yd=n(mw,"P",{});var cre=s(yd);wsr=r(cre,`Note:
Loading a model from its configuration file does `),V2e=n(cre,"STRONG",{});var vEt=s(V2e);Asr=r(vEt,"not"),vEt.forEach(t),Lsr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(cre,"A",{href:!0});var FEt=s(ZW);ysr=r(FEt,"from_pretrained()"),FEt.forEach(t),xsr=r(cre," to load the model weights."),cre.forEach(t),$sr=i(mw),T(C6.$$.fragment,mw),mw.forEach(t),ksr=i(gl),fo=n(gl,"DIV",{class:!0});var Fa=s(fo);T(Ly.$$.fragment,Fa),Ssr=i(Fa),X2e=n(Fa,"P",{});var TEt=s(X2e);Rsr=r(TEt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),TEt.forEach(t),Psr=i(Fa),Ha=n(Fa,"P",{});var gw=s(Ha);Bsr=r(gw,"The model class to instantiate is selected based on the "),z2e=n(gw,"CODE",{});var MEt=s(z2e);Isr=r(MEt,"model_type"),MEt.forEach(t),Nsr=r(gw,` property of the config object (either
passed as an argument or loaded from `),W2e=n(gw,"CODE",{});var EEt=s(W2e);qsr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),jsr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(gw,"CODE",{});var CEt=s(Q2e);Dsr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),Gsr=r(gw,":"),gw.forEach(t),Osr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);w6=n(ze,"LI",{});var MBe=s(w6);H2e=n(MBe,"STRONG",{});var wEt=s(H2e);Vsr=r(wEt,"data2vec-audio"),wEt.forEach(t),Xsr=r(MBe," \u2014 "),eQ=n(MBe,"A",{href:!0});var AEt=s(eQ);zsr=r(AEt,"Data2VecAudioForSequenceClassification"),AEt.forEach(t),Wsr=r(MBe," (Data2VecAudio model)"),MBe.forEach(t),Qsr=i(ze),A6=n(ze,"LI",{});var EBe=s(A6);U2e=n(EBe,"STRONG",{});var LEt=s(U2e);Hsr=r(LEt,"hubert"),LEt.forEach(t),Usr=r(EBe," \u2014 "),oQ=n(EBe,"A",{href:!0});var yEt=s(oQ);Jsr=r(yEt,"HubertForSequenceClassification"),yEt.forEach(t),Ysr=r(EBe," (Hubert model)"),EBe.forEach(t),Ksr=i(ze),L6=n(ze,"LI",{});var CBe=s(L6);J2e=n(CBe,"STRONG",{});var xEt=s(J2e);Zsr=r(xEt,"sew"),xEt.forEach(t),elr=r(CBe," \u2014 "),rQ=n(CBe,"A",{href:!0});var $Et=s(rQ);olr=r($Et,"SEWForSequenceClassification"),$Et.forEach(t),rlr=r(CBe," (SEW model)"),CBe.forEach(t),tlr=i(ze),y6=n(ze,"LI",{});var wBe=s(y6);Y2e=n(wBe,"STRONG",{});var kEt=s(Y2e);alr=r(kEt,"sew-d"),kEt.forEach(t),nlr=r(wBe," \u2014 "),tQ=n(wBe,"A",{href:!0});var SEt=s(tQ);slr=r(SEt,"SEWDForSequenceClassification"),SEt.forEach(t),llr=r(wBe," (SEW-D model)"),wBe.forEach(t),ilr=i(ze),x6=n(ze,"LI",{});var ABe=s(x6);K2e=n(ABe,"STRONG",{});var REt=s(K2e);dlr=r(REt,"unispeech"),REt.forEach(t),clr=r(ABe," \u2014 "),aQ=n(ABe,"A",{href:!0});var PEt=s(aQ);flr=r(PEt,"UniSpeechForSequenceClassification"),PEt.forEach(t),mlr=r(ABe," (UniSpeech model)"),ABe.forEach(t),glr=i(ze),$6=n(ze,"LI",{});var LBe=s($6);Z2e=n(LBe,"STRONG",{});var BEt=s(Z2e);hlr=r(BEt,"unispeech-sat"),BEt.forEach(t),plr=r(LBe," \u2014 "),nQ=n(LBe,"A",{href:!0});var IEt=s(nQ);_lr=r(IEt,"UniSpeechSatForSequenceClassification"),IEt.forEach(t),ulr=r(LBe," (UniSpeechSat model)"),LBe.forEach(t),blr=i(ze),k6=n(ze,"LI",{});var yBe=s(k6);ebe=n(yBe,"STRONG",{});var NEt=s(ebe);vlr=r(NEt,"wav2vec2"),NEt.forEach(t),Flr=r(yBe," \u2014 "),sQ=n(yBe,"A",{href:!0});var qEt=s(sQ);Tlr=r(qEt,"Wav2Vec2ForSequenceClassification"),qEt.forEach(t),Mlr=r(yBe," (Wav2Vec2 model)"),yBe.forEach(t),Elr=i(ze),S6=n(ze,"LI",{});var xBe=s(S6);obe=n(xBe,"STRONG",{});var jEt=s(obe);Clr=r(jEt,"wav2vec2-conformer"),jEt.forEach(t),wlr=r(xBe," \u2014 "),lQ=n(xBe,"A",{href:!0});var DEt=s(lQ);Alr=r(DEt,"Wav2Vec2ConformerForSequenceClassification"),DEt.forEach(t),Llr=r(xBe," (Wav2Vec2-Conformer model)"),xBe.forEach(t),ylr=i(ze),R6=n(ze,"LI",{});var $Be=s(R6);rbe=n($Be,"STRONG",{});var GEt=s(rbe);xlr=r(GEt,"wavlm"),GEt.forEach(t),$lr=r($Be," \u2014 "),iQ=n($Be,"A",{href:!0});var OEt=s(iQ);klr=r(OEt,"WavLMForSequenceClassification"),OEt.forEach(t),Slr=r($Be," (WavLM model)"),$Be.forEach(t),ze.forEach(t),Rlr=i(Fa),P6=n(Fa,"P",{});var kBe=s(P6);Plr=r(kBe,"The model is set in evaluation mode by default using "),tbe=n(kBe,"CODE",{});var VEt=s(tbe);Blr=r(VEt,"model.eval()"),VEt.forEach(t),Ilr=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(kBe,"CODE",{});var XEt=s(abe);Nlr=r(XEt,"model.train()"),XEt.forEach(t),kBe.forEach(t),qlr=i(Fa),T(B6.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),eVe=i(f),xd=n(f,"H2",{class:!0});var sze=s(xd);I6=n(sze,"A",{id:!0,class:!0,href:!0});var zEt=s(I6);nbe=n(zEt,"SPAN",{});var WEt=s(nbe);T(yy.$$.fragment,WEt),WEt.forEach(t),zEt.forEach(t),jlr=i(sze),sbe=n(sze,"SPAN",{});var QEt=s(sbe);Dlr=r(QEt,"AutoModelForAudioFrameClassification"),QEt.forEach(t),sze.forEach(t),oVe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(xy.$$.fragment,hl),Glr=i(hl),$d=n(hl,"P",{});var fre=s($d);Olr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dQ=n(fre,"A",{href:!0});var HEt=s(dQ);Vlr=r(HEt,"from_pretrained()"),HEt.forEach(t),Xlr=r(fre," class method or the "),cQ=n(fre,"A",{href:!0});var UEt=s(cQ);zlr=r(UEt,"from_config()"),UEt.forEach(t),Wlr=r(fre,` class
method.`),fre.forEach(t),Qlr=i(hl),$y=n(hl,"P",{});var lze=s($y);Hlr=r(lze,"This class cannot be instantiated directly using "),lbe=n(lze,"CODE",{});var JEt=s(lbe);Ulr=r(JEt,"__init__()"),JEt.forEach(t),Jlr=r(lze," (throws an error)."),lze.forEach(t),Ylr=i(hl),Mt=n(hl,"DIV",{class:!0});var hw=s(Mt);T(ky.$$.fragment,hw),Klr=i(hw),ibe=n(hw,"P",{});var YEt=s(ibe);Zlr=r(YEt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),YEt.forEach(t),eir=i(hw),kd=n(hw,"P",{});var mre=s(kd);oir=r(mre,`Note:
Loading a model from its configuration file does `),dbe=n(mre,"STRONG",{});var KEt=s(dbe);rir=r(KEt,"not"),KEt.forEach(t),tir=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(mre,"A",{href:!0});var ZEt=s(fQ);air=r(ZEt,"from_pretrained()"),ZEt.forEach(t),nir=r(mre," to load the model weights."),mre.forEach(t),sir=i(hw),T(N6.$$.fragment,hw),hw.forEach(t),lir=i(hl),mo=n(hl,"DIV",{class:!0});var Ta=s(mo);T(Sy.$$.fragment,Ta),iir=i(Ta),cbe=n(Ta,"P",{});var e4t=s(cbe);dir=r(e4t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),e4t.forEach(t),cir=i(Ta),Ua=n(Ta,"P",{});var pw=s(Ua);fir=r(pw,"The model class to instantiate is selected based on the "),fbe=n(pw,"CODE",{});var o4t=s(fbe);mir=r(o4t,"model_type"),o4t.forEach(t),gir=r(pw,` property of the config object (either
passed as an argument or loaded from `),mbe=n(pw,"CODE",{});var r4t=s(mbe);hir=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),pir=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(pw,"CODE",{});var t4t=s(gbe);_ir=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),uir=r(pw,":"),pw.forEach(t),bir=i(Ta),et=n(Ta,"UL",{});var pl=s(et);q6=n(pl,"LI",{});var SBe=s(q6);hbe=n(SBe,"STRONG",{});var a4t=s(hbe);vir=r(a4t,"data2vec-audio"),a4t.forEach(t),Fir=r(SBe," \u2014 "),mQ=n(SBe,"A",{href:!0});var n4t=s(mQ);Tir=r(n4t,"Data2VecAudioForAudioFrameClassification"),n4t.forEach(t),Mir=r(SBe," (Data2VecAudio model)"),SBe.forEach(t),Eir=i(pl),j6=n(pl,"LI",{});var RBe=s(j6);pbe=n(RBe,"STRONG",{});var s4t=s(pbe);Cir=r(s4t,"unispeech-sat"),s4t.forEach(t),wir=r(RBe," \u2014 "),gQ=n(RBe,"A",{href:!0});var l4t=s(gQ);Air=r(l4t,"UniSpeechSatForAudioFrameClassification"),l4t.forEach(t),Lir=r(RBe," (UniSpeechSat model)"),RBe.forEach(t),yir=i(pl),D6=n(pl,"LI",{});var PBe=s(D6);_be=n(PBe,"STRONG",{});var i4t=s(_be);xir=r(i4t,"wav2vec2"),i4t.forEach(t),$ir=r(PBe," \u2014 "),hQ=n(PBe,"A",{href:!0});var d4t=s(hQ);kir=r(d4t,"Wav2Vec2ForAudioFrameClassification"),d4t.forEach(t),Sir=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),Rir=i(pl),G6=n(pl,"LI",{});var BBe=s(G6);ube=n(BBe,"STRONG",{});var c4t=s(ube);Pir=r(c4t,"wav2vec2-conformer"),c4t.forEach(t),Bir=r(BBe," \u2014 "),pQ=n(BBe,"A",{href:!0});var f4t=s(pQ);Iir=r(f4t,"Wav2Vec2ConformerForAudioFrameClassification"),f4t.forEach(t),Nir=r(BBe," (Wav2Vec2-Conformer model)"),BBe.forEach(t),qir=i(pl),O6=n(pl,"LI",{});var IBe=s(O6);bbe=n(IBe,"STRONG",{});var m4t=s(bbe);jir=r(m4t,"wavlm"),m4t.forEach(t),Dir=r(IBe," \u2014 "),_Q=n(IBe,"A",{href:!0});var g4t=s(_Q);Gir=r(g4t,"WavLMForAudioFrameClassification"),g4t.forEach(t),Oir=r(IBe," (WavLM model)"),IBe.forEach(t),pl.forEach(t),Vir=i(Ta),V6=n(Ta,"P",{});var NBe=s(V6);Xir=r(NBe,"The model is set in evaluation mode by default using "),vbe=n(NBe,"CODE",{});var h4t=s(vbe);zir=r(h4t,"model.eval()"),h4t.forEach(t),Wir=r(NBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(NBe,"CODE",{});var p4t=s(Fbe);Qir=r(p4t,"model.train()"),p4t.forEach(t),NBe.forEach(t),Hir=i(Ta),T(X6.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),rVe=i(f),Sd=n(f,"H2",{class:!0});var ize=s(Sd);z6=n(ize,"A",{id:!0,class:!0,href:!0});var _4t=s(z6);Tbe=n(_4t,"SPAN",{});var u4t=s(Tbe);T(Ry.$$.fragment,u4t),u4t.forEach(t),_4t.forEach(t),Uir=i(ize),Mbe=n(ize,"SPAN",{});var b4t=s(Mbe);Jir=r(b4t,"AutoModelForCTC"),b4t.forEach(t),ize.forEach(t),tVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(Py.$$.fragment,_l),Yir=i(_l),Rd=n(_l,"P",{});var gre=s(Rd);Kir=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uQ=n(gre,"A",{href:!0});var v4t=s(uQ);Zir=r(v4t,"from_pretrained()"),v4t.forEach(t),edr=r(gre," class method or the "),bQ=n(gre,"A",{href:!0});var F4t=s(bQ);odr=r(F4t,"from_config()"),F4t.forEach(t),rdr=r(gre,` class
method.`),gre.forEach(t),tdr=i(_l),By=n(_l,"P",{});var dze=s(By);adr=r(dze,"This class cannot be instantiated directly using "),Ebe=n(dze,"CODE",{});var T4t=s(Ebe);ndr=r(T4t,"__init__()"),T4t.forEach(t),sdr=r(dze," (throws an error)."),dze.forEach(t),ldr=i(_l),Et=n(_l,"DIV",{class:!0});var _w=s(Et);T(Iy.$$.fragment,_w),idr=i(_w),Cbe=n(_w,"P",{});var M4t=s(Cbe);ddr=r(M4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),M4t.forEach(t),cdr=i(_w),Pd=n(_w,"P",{});var hre=s(Pd);fdr=r(hre,`Note:
Loading a model from its configuration file does `),wbe=n(hre,"STRONG",{});var E4t=s(wbe);mdr=r(E4t,"not"),E4t.forEach(t),gdr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(hre,"A",{href:!0});var C4t=s(vQ);hdr=r(C4t,"from_pretrained()"),C4t.forEach(t),pdr=r(hre," to load the model weights."),hre.forEach(t),_dr=i(_w),T(W6.$$.fragment,_w),_w.forEach(t),udr=i(_l),go=n(_l,"DIV",{class:!0});var Ma=s(go);T(Ny.$$.fragment,Ma),bdr=i(Ma),Abe=n(Ma,"P",{});var w4t=s(Abe);vdr=r(w4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),w4t.forEach(t),Fdr=i(Ma),Ja=n(Ma,"P",{});var uw=s(Ja);Tdr=r(uw,"The model class to instantiate is selected based on the "),Lbe=n(uw,"CODE",{});var A4t=s(Lbe);Mdr=r(A4t,"model_type"),A4t.forEach(t),Edr=r(uw,` property of the config object (either
passed as an argument or loaded from `),ybe=n(uw,"CODE",{});var L4t=s(ybe);Cdr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),wdr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(uw,"CODE",{});var y4t=s(xbe);Adr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),Ldr=r(uw,":"),uw.forEach(t),ydr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);Q6=n(Be,"LI",{});var qBe=s(Q6);$be=n(qBe,"STRONG",{});var x4t=s($be);xdr=r(x4t,"data2vec-audio"),x4t.forEach(t),$dr=r(qBe," \u2014 "),FQ=n(qBe,"A",{href:!0});var $4t=s(FQ);kdr=r($4t,"Data2VecAudioForCTC"),$4t.forEach(t),Sdr=r(qBe," (Data2VecAudio model)"),qBe.forEach(t),Rdr=i(Be),H6=n(Be,"LI",{});var jBe=s(H6);kbe=n(jBe,"STRONG",{});var k4t=s(kbe);Pdr=r(k4t,"hubert"),k4t.forEach(t),Bdr=r(jBe," \u2014 "),TQ=n(jBe,"A",{href:!0});var S4t=s(TQ);Idr=r(S4t,"HubertForCTC"),S4t.forEach(t),Ndr=r(jBe," (Hubert model)"),jBe.forEach(t),qdr=i(Be),U6=n(Be,"LI",{});var DBe=s(U6);Sbe=n(DBe,"STRONG",{});var R4t=s(Sbe);jdr=r(R4t,"mctct"),R4t.forEach(t),Ddr=r(DBe," \u2014 "),MQ=n(DBe,"A",{href:!0});var P4t=s(MQ);Gdr=r(P4t,"MCTCTForCTC"),P4t.forEach(t),Odr=r(DBe," (M-CTC-T model)"),DBe.forEach(t),Vdr=i(Be),J6=n(Be,"LI",{});var GBe=s(J6);Rbe=n(GBe,"STRONG",{});var B4t=s(Rbe);Xdr=r(B4t,"sew"),B4t.forEach(t),zdr=r(GBe," \u2014 "),EQ=n(GBe,"A",{href:!0});var I4t=s(EQ);Wdr=r(I4t,"SEWForCTC"),I4t.forEach(t),Qdr=r(GBe," (SEW model)"),GBe.forEach(t),Hdr=i(Be),Y6=n(Be,"LI",{});var OBe=s(Y6);Pbe=n(OBe,"STRONG",{});var N4t=s(Pbe);Udr=r(N4t,"sew-d"),N4t.forEach(t),Jdr=r(OBe," \u2014 "),CQ=n(OBe,"A",{href:!0});var q4t=s(CQ);Ydr=r(q4t,"SEWDForCTC"),q4t.forEach(t),Kdr=r(OBe," (SEW-D model)"),OBe.forEach(t),Zdr=i(Be),K6=n(Be,"LI",{});var VBe=s(K6);Bbe=n(VBe,"STRONG",{});var j4t=s(Bbe);ecr=r(j4t,"unispeech"),j4t.forEach(t),ocr=r(VBe," \u2014 "),wQ=n(VBe,"A",{href:!0});var D4t=s(wQ);rcr=r(D4t,"UniSpeechForCTC"),D4t.forEach(t),tcr=r(VBe," (UniSpeech model)"),VBe.forEach(t),acr=i(Be),Z6=n(Be,"LI",{});var XBe=s(Z6);Ibe=n(XBe,"STRONG",{});var G4t=s(Ibe);ncr=r(G4t,"unispeech-sat"),G4t.forEach(t),scr=r(XBe," \u2014 "),AQ=n(XBe,"A",{href:!0});var O4t=s(AQ);lcr=r(O4t,"UniSpeechSatForCTC"),O4t.forEach(t),icr=r(XBe," (UniSpeechSat model)"),XBe.forEach(t),dcr=i(Be),eT=n(Be,"LI",{});var zBe=s(eT);Nbe=n(zBe,"STRONG",{});var V4t=s(Nbe);ccr=r(V4t,"wav2vec2"),V4t.forEach(t),fcr=r(zBe," \u2014 "),LQ=n(zBe,"A",{href:!0});var X4t=s(LQ);mcr=r(X4t,"Wav2Vec2ForCTC"),X4t.forEach(t),gcr=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),hcr=i(Be),oT=n(Be,"LI",{});var WBe=s(oT);qbe=n(WBe,"STRONG",{});var z4t=s(qbe);pcr=r(z4t,"wav2vec2-conformer"),z4t.forEach(t),_cr=r(WBe," \u2014 "),yQ=n(WBe,"A",{href:!0});var W4t=s(yQ);ucr=r(W4t,"Wav2Vec2ConformerForCTC"),W4t.forEach(t),bcr=r(WBe," (Wav2Vec2-Conformer model)"),WBe.forEach(t),vcr=i(Be),rT=n(Be,"LI",{});var QBe=s(rT);jbe=n(QBe,"STRONG",{});var Q4t=s(jbe);Fcr=r(Q4t,"wavlm"),Q4t.forEach(t),Tcr=r(QBe," \u2014 "),xQ=n(QBe,"A",{href:!0});var H4t=s(xQ);Mcr=r(H4t,"WavLMForCTC"),H4t.forEach(t),Ecr=r(QBe," (WavLM model)"),QBe.forEach(t),Be.forEach(t),Ccr=i(Ma),tT=n(Ma,"P",{});var HBe=s(tT);wcr=r(HBe,"The model is set in evaluation mode by default using "),Dbe=n(HBe,"CODE",{});var U4t=s(Dbe);Acr=r(U4t,"model.eval()"),U4t.forEach(t),Lcr=r(HBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=n(HBe,"CODE",{});var J4t=s(Gbe);ycr=r(J4t,"model.train()"),J4t.forEach(t),HBe.forEach(t),xcr=i(Ma),T(aT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),aVe=i(f),Bd=n(f,"H2",{class:!0});var cze=s(Bd);nT=n(cze,"A",{id:!0,class:!0,href:!0});var Y4t=s(nT);Obe=n(Y4t,"SPAN",{});var K4t=s(Obe);T(qy.$$.fragment,K4t),K4t.forEach(t),Y4t.forEach(t),$cr=i(cze),Vbe=n(cze,"SPAN",{});var Z4t=s(Vbe);kcr=r(Z4t,"AutoModelForSpeechSeq2Seq"),Z4t.forEach(t),cze.forEach(t),nVe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(jy.$$.fragment,ul),Scr=i(ul),Id=n(ul,"P",{});var pre=s(Id);Rcr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$Q=n(pre,"A",{href:!0});var eCt=s($Q);Pcr=r(eCt,"from_pretrained()"),eCt.forEach(t),Bcr=r(pre," class method or the "),kQ=n(pre,"A",{href:!0});var oCt=s(kQ);Icr=r(oCt,"from_config()"),oCt.forEach(t),Ncr=r(pre,` class
method.`),pre.forEach(t),qcr=i(ul),Dy=n(ul,"P",{});var fze=s(Dy);jcr=r(fze,"This class cannot be instantiated directly using "),Xbe=n(fze,"CODE",{});var rCt=s(Xbe);Dcr=r(rCt,"__init__()"),rCt.forEach(t),Gcr=r(fze," (throws an error)."),fze.forEach(t),Ocr=i(ul),Ct=n(ul,"DIV",{class:!0});var bw=s(Ct);T(Gy.$$.fragment,bw),Vcr=i(bw),zbe=n(bw,"P",{});var tCt=s(zbe);Xcr=r(tCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tCt.forEach(t),zcr=i(bw),Nd=n(bw,"P",{});var _re=s(Nd);Wcr=r(_re,`Note:
Loading a model from its configuration file does `),Wbe=n(_re,"STRONG",{});var aCt=s(Wbe);Qcr=r(aCt,"not"),aCt.forEach(t),Hcr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(_re,"A",{href:!0});var nCt=s(SQ);Ucr=r(nCt,"from_pretrained()"),nCt.forEach(t),Jcr=r(_re," to load the model weights."),_re.forEach(t),Ycr=i(bw),T(sT.$$.fragment,bw),bw.forEach(t),Kcr=i(ul),ho=n(ul,"DIV",{class:!0});var Ea=s(ho);T(Oy.$$.fragment,Ea),Zcr=i(Ea),Qbe=n(Ea,"P",{});var sCt=s(Qbe);efr=r(sCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sCt.forEach(t),ofr=i(Ea),Ya=n(Ea,"P",{});var vw=s(Ya);rfr=r(vw,"The model class to instantiate is selected based on the "),Hbe=n(vw,"CODE",{});var lCt=s(Hbe);tfr=r(lCt,"model_type"),lCt.forEach(t),afr=r(vw,` property of the config object (either
passed as an argument or loaded from `),Ube=n(vw,"CODE",{});var iCt=s(Ube);nfr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),sfr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(vw,"CODE",{});var dCt=s(Jbe);lfr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),ifr=r(vw,":"),vw.forEach(t),dfr=i(Ea),Vy=n(Ea,"UL",{});var mze=s(Vy);lT=n(mze,"LI",{});var UBe=s(lT);Ybe=n(UBe,"STRONG",{});var cCt=s(Ybe);cfr=r(cCt,"speech-encoder-decoder"),cCt.forEach(t),ffr=r(UBe," \u2014 "),RQ=n(UBe,"A",{href:!0});var fCt=s(RQ);mfr=r(fCt,"SpeechEncoderDecoderModel"),fCt.forEach(t),gfr=r(UBe," (Speech Encoder decoder model)"),UBe.forEach(t),hfr=i(mze),iT=n(mze,"LI",{});var JBe=s(iT);Kbe=n(JBe,"STRONG",{});var mCt=s(Kbe);pfr=r(mCt,"speech_to_text"),mCt.forEach(t),_fr=r(JBe," \u2014 "),PQ=n(JBe,"A",{href:!0});var gCt=s(PQ);ufr=r(gCt,"Speech2TextForConditionalGeneration"),gCt.forEach(t),bfr=r(JBe," (Speech2Text model)"),JBe.forEach(t),mze.forEach(t),vfr=i(Ea),dT=n(Ea,"P",{});var YBe=s(dT);Ffr=r(YBe,"The model is set in evaluation mode by default using "),Zbe=n(YBe,"CODE",{});var hCt=s(Zbe);Tfr=r(hCt,"model.eval()"),hCt.forEach(t),Mfr=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=n(YBe,"CODE",{});var pCt=s(eve);Efr=r(pCt,"model.train()"),pCt.forEach(t),YBe.forEach(t),Cfr=i(Ea),T(cT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),sVe=i(f),qd=n(f,"H2",{class:!0});var gze=s(qd);fT=n(gze,"A",{id:!0,class:!0,href:!0});var _Ct=s(fT);ove=n(_Ct,"SPAN",{});var uCt=s(ove);T(Xy.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),wfr=i(gze),rve=n(gze,"SPAN",{});var bCt=s(rve);Afr=r(bCt,"AutoModelForAudioXVector"),bCt.forEach(t),gze.forEach(t),lVe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(zy.$$.fragment,bl),Lfr=i(bl),jd=n(bl,"P",{});var ure=s(jd);yfr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BQ=n(ure,"A",{href:!0});var vCt=s(BQ);xfr=r(vCt,"from_pretrained()"),vCt.forEach(t),$fr=r(ure," class method or the "),IQ=n(ure,"A",{href:!0});var FCt=s(IQ);kfr=r(FCt,"from_config()"),FCt.forEach(t),Sfr=r(ure,` class
method.`),ure.forEach(t),Rfr=i(bl),Wy=n(bl,"P",{});var hze=s(Wy);Pfr=r(hze,"This class cannot be instantiated directly using "),tve=n(hze,"CODE",{});var TCt=s(tve);Bfr=r(TCt,"__init__()"),TCt.forEach(t),Ifr=r(hze," (throws an error)."),hze.forEach(t),Nfr=i(bl),wt=n(bl,"DIV",{class:!0});var Fw=s(wt);T(Qy.$$.fragment,Fw),qfr=i(Fw),ave=n(Fw,"P",{});var MCt=s(ave);jfr=r(MCt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),MCt.forEach(t),Dfr=i(Fw),Dd=n(Fw,"P",{});var bre=s(Dd);Gfr=r(bre,`Note:
Loading a model from its configuration file does `),nve=n(bre,"STRONG",{});var ECt=s(nve);Ofr=r(ECt,"not"),ECt.forEach(t),Vfr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(bre,"A",{href:!0});var CCt=s(NQ);Xfr=r(CCt,"from_pretrained()"),CCt.forEach(t),zfr=r(bre," to load the model weights."),bre.forEach(t),Wfr=i(Fw),T(mT.$$.fragment,Fw),Fw.forEach(t),Qfr=i(bl),po=n(bl,"DIV",{class:!0});var Ca=s(po);T(Hy.$$.fragment,Ca),Hfr=i(Ca),sve=n(Ca,"P",{});var wCt=s(sve);Ufr=r(wCt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wCt.forEach(t),Jfr=i(Ca),Ka=n(Ca,"P",{});var Tw=s(Ka);Yfr=r(Tw,"The model class to instantiate is selected based on the "),lve=n(Tw,"CODE",{});var ACt=s(lve);Kfr=r(ACt,"model_type"),ACt.forEach(t),Zfr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),ive=n(Tw,"CODE",{});var LCt=s(ive);emr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),omr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(Tw,"CODE",{});var yCt=s(dve);rmr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),tmr=r(Tw,":"),Tw.forEach(t),amr=i(Ca),ot=n(Ca,"UL",{});var vl=s(ot);gT=n(vl,"LI",{});var KBe=s(gT);cve=n(KBe,"STRONG",{});var xCt=s(cve);nmr=r(xCt,"data2vec-audio"),xCt.forEach(t),smr=r(KBe," \u2014 "),qQ=n(KBe,"A",{href:!0});var $Ct=s(qQ);lmr=r($Ct,"Data2VecAudioForXVector"),$Ct.forEach(t),imr=r(KBe," (Data2VecAudio model)"),KBe.forEach(t),dmr=i(vl),hT=n(vl,"LI",{});var ZBe=s(hT);fve=n(ZBe,"STRONG",{});var kCt=s(fve);cmr=r(kCt,"unispeech-sat"),kCt.forEach(t),fmr=r(ZBe," \u2014 "),jQ=n(ZBe,"A",{href:!0});var SCt=s(jQ);mmr=r(SCt,"UniSpeechSatForXVector"),SCt.forEach(t),gmr=r(ZBe," (UniSpeechSat model)"),ZBe.forEach(t),hmr=i(vl),pT=n(vl,"LI",{});var eIe=s(pT);mve=n(eIe,"STRONG",{});var RCt=s(mve);pmr=r(RCt,"wav2vec2"),RCt.forEach(t),_mr=r(eIe," \u2014 "),DQ=n(eIe,"A",{href:!0});var PCt=s(DQ);umr=r(PCt,"Wav2Vec2ForXVector"),PCt.forEach(t),bmr=r(eIe," (Wav2Vec2 model)"),eIe.forEach(t),vmr=i(vl),_T=n(vl,"LI",{});var oIe=s(_T);gve=n(oIe,"STRONG",{});var BCt=s(gve);Fmr=r(BCt,"wav2vec2-conformer"),BCt.forEach(t),Tmr=r(oIe," \u2014 "),GQ=n(oIe,"A",{href:!0});var ICt=s(GQ);Mmr=r(ICt,"Wav2Vec2ConformerForXVector"),ICt.forEach(t),Emr=r(oIe," (Wav2Vec2-Conformer model)"),oIe.forEach(t),Cmr=i(vl),uT=n(vl,"LI",{});var rIe=s(uT);hve=n(rIe,"STRONG",{});var NCt=s(hve);wmr=r(NCt,"wavlm"),NCt.forEach(t),Amr=r(rIe," \u2014 "),OQ=n(rIe,"A",{href:!0});var qCt=s(OQ);Lmr=r(qCt,"WavLMForXVector"),qCt.forEach(t),ymr=r(rIe," (WavLM model)"),rIe.forEach(t),vl.forEach(t),xmr=i(Ca),bT=n(Ca,"P",{});var tIe=s(bT);$mr=r(tIe,"The model is set in evaluation mode by default using "),pve=n(tIe,"CODE",{});var jCt=s(pve);kmr=r(jCt,"model.eval()"),jCt.forEach(t),Smr=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=n(tIe,"CODE",{});var DCt=s(_ve);Rmr=r(DCt,"model.train()"),DCt.forEach(t),tIe.forEach(t),Pmr=i(Ca),T(vT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),iVe=i(f),Gd=n(f,"H2",{class:!0});var pze=s(Gd);FT=n(pze,"A",{id:!0,class:!0,href:!0});var GCt=s(FT);uve=n(GCt,"SPAN",{});var OCt=s(uve);T(Uy.$$.fragment,OCt),OCt.forEach(t),GCt.forEach(t),Bmr=i(pze),bve=n(pze,"SPAN",{});var VCt=s(bve);Imr=r(VCt,"AutoModelForMaskedImageModeling"),VCt.forEach(t),pze.forEach(t),dVe=i(f),Uo=n(f,"DIV",{class:!0});var Fl=s(Uo);T(Jy.$$.fragment,Fl),Nmr=i(Fl),Od=n(Fl,"P",{});var vre=s(Od);qmr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VQ=n(vre,"A",{href:!0});var XCt=s(VQ);jmr=r(XCt,"from_pretrained()"),XCt.forEach(t),Dmr=r(vre," class method or the "),XQ=n(vre,"A",{href:!0});var zCt=s(XQ);Gmr=r(zCt,"from_config()"),zCt.forEach(t),Omr=r(vre,` class
method.`),vre.forEach(t),Vmr=i(Fl),Yy=n(Fl,"P",{});var _ze=s(Yy);Xmr=r(_ze,"This class cannot be instantiated directly using "),vve=n(_ze,"CODE",{});var WCt=s(vve);zmr=r(WCt,"__init__()"),WCt.forEach(t),Wmr=r(_ze," (throws an error)."),_ze.forEach(t),Qmr=i(Fl),At=n(Fl,"DIV",{class:!0});var Mw=s(At);T(Ky.$$.fragment,Mw),Hmr=i(Mw),Fve=n(Mw,"P",{});var QCt=s(Fve);Umr=r(QCt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QCt.forEach(t),Jmr=i(Mw),Vd=n(Mw,"P",{});var Fre=s(Vd);Ymr=r(Fre,`Note:
Loading a model from its configuration file does `),Tve=n(Fre,"STRONG",{});var HCt=s(Tve);Kmr=r(HCt,"not"),HCt.forEach(t),Zmr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(Fre,"A",{href:!0});var UCt=s(zQ);egr=r(UCt,"from_pretrained()"),UCt.forEach(t),ogr=r(Fre," to load the model weights."),Fre.forEach(t),rgr=i(Mw),T(TT.$$.fragment,Mw),Mw.forEach(t),tgr=i(Fl),_o=n(Fl,"DIV",{class:!0});var wa=s(_o);T(Zy.$$.fragment,wa),agr=i(wa),Mve=n(wa,"P",{});var JCt=s(Mve);ngr=r(JCt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JCt.forEach(t),sgr=i(wa),Za=n(wa,"P",{});var Ew=s(Za);lgr=r(Ew,"The model class to instantiate is selected based on the "),Eve=n(Ew,"CODE",{});var YCt=s(Eve);igr=r(YCt,"model_type"),YCt.forEach(t),dgr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Cve=n(Ew,"CODE",{});var KCt=s(Cve);cgr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),fgr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(Ew,"CODE",{});var ZCt=s(wve);mgr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),ggr=r(Ew,":"),Ew.forEach(t),hgr=i(wa),Xd=n(wa,"UL",{});var Tre=s(Xd);MT=n(Tre,"LI",{});var aIe=s(MT);Ave=n(aIe,"STRONG",{});var e5t=s(Ave);pgr=r(e5t,"deit"),e5t.forEach(t),_gr=r(aIe," \u2014 "),WQ=n(aIe,"A",{href:!0});var o5t=s(WQ);ugr=r(o5t,"DeiTForMaskedImageModeling"),o5t.forEach(t),bgr=r(aIe," (DeiT model)"),aIe.forEach(t),vgr=i(Tre),ET=n(Tre,"LI",{});var nIe=s(ET);Lve=n(nIe,"STRONG",{});var r5t=s(Lve);Fgr=r(r5t,"swin"),r5t.forEach(t),Tgr=r(nIe," \u2014 "),QQ=n(nIe,"A",{href:!0});var t5t=s(QQ);Mgr=r(t5t,"SwinForMaskedImageModeling"),t5t.forEach(t),Egr=r(nIe," (Swin Transformer model)"),nIe.forEach(t),Cgr=i(Tre),CT=n(Tre,"LI",{});var sIe=s(CT);yve=n(sIe,"STRONG",{});var a5t=s(yve);wgr=r(a5t,"vit"),a5t.forEach(t),Agr=r(sIe," \u2014 "),HQ=n(sIe,"A",{href:!0});var n5t=s(HQ);Lgr=r(n5t,"ViTForMaskedImageModeling"),n5t.forEach(t),ygr=r(sIe," (ViT model)"),sIe.forEach(t),Tre.forEach(t),xgr=i(wa),wT=n(wa,"P",{});var lIe=s(wT);$gr=r(lIe,"The model is set in evaluation mode by default using "),xve=n(lIe,"CODE",{});var s5t=s(xve);kgr=r(s5t,"model.eval()"),s5t.forEach(t),Sgr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ve=n(lIe,"CODE",{});var l5t=s($ve);Rgr=r(l5t,"model.train()"),l5t.forEach(t),lIe.forEach(t),Pgr=i(wa),T(AT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),cVe=i(f),zd=n(f,"H2",{class:!0});var uze=s(zd);LT=n(uze,"A",{id:!0,class:!0,href:!0});var i5t=s(LT);kve=n(i5t,"SPAN",{});var d5t=s(kve);T(e9.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),Bgr=i(uze),Sve=n(uze,"SPAN",{});var c5t=s(Sve);Igr=r(c5t,"AutoModelForObjectDetection"),c5t.forEach(t),uze.forEach(t),fVe=i(f),Jo=n(f,"DIV",{class:!0});var Tl=s(Jo);T(o9.$$.fragment,Tl),Ngr=i(Tl),Wd=n(Tl,"P",{});var Mre=s(Wd);qgr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UQ=n(Mre,"A",{href:!0});var f5t=s(UQ);jgr=r(f5t,"from_pretrained()"),f5t.forEach(t),Dgr=r(Mre," class method or the "),JQ=n(Mre,"A",{href:!0});var m5t=s(JQ);Ggr=r(m5t,"from_config()"),m5t.forEach(t),Ogr=r(Mre,` class
method.`),Mre.forEach(t),Vgr=i(Tl),r9=n(Tl,"P",{});var bze=s(r9);Xgr=r(bze,"This class cannot be instantiated directly using "),Rve=n(bze,"CODE",{});var g5t=s(Rve);zgr=r(g5t,"__init__()"),g5t.forEach(t),Wgr=r(bze," (throws an error)."),bze.forEach(t),Qgr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Cw=s(Lt);T(t9.$$.fragment,Cw),Hgr=i(Cw),Pve=n(Cw,"P",{});var h5t=s(Pve);Ugr=r(h5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),h5t.forEach(t),Jgr=i(Cw),Qd=n(Cw,"P",{});var Ere=s(Qd);Ygr=r(Ere,`Note:
Loading a model from its configuration file does `),Bve=n(Ere,"STRONG",{});var p5t=s(Bve);Kgr=r(p5t,"not"),p5t.forEach(t),Zgr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(Ere,"A",{href:!0});var _5t=s(YQ);ehr=r(_5t,"from_pretrained()"),_5t.forEach(t),ohr=r(Ere," to load the model weights."),Ere.forEach(t),rhr=i(Cw),T(yT.$$.fragment,Cw),Cw.forEach(t),thr=i(Tl),uo=n(Tl,"DIV",{class:!0});var Aa=s(uo);T(a9.$$.fragment,Aa),ahr=i(Aa),Ive=n(Aa,"P",{});var u5t=s(Ive);nhr=r(u5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),u5t.forEach(t),shr=i(Aa),en=n(Aa,"P",{});var ww=s(en);lhr=r(ww,"The model class to instantiate is selected based on the "),Nve=n(ww,"CODE",{});var b5t=s(Nve);ihr=r(b5t,"model_type"),b5t.forEach(t),dhr=r(ww,` property of the config object (either
passed as an argument or loaded from `),qve=n(ww,"CODE",{});var v5t=s(qve);chr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),fhr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(ww,"CODE",{});var F5t=s(jve);mhr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),ghr=r(ww,":"),ww.forEach(t),hhr=i(Aa),n9=n(Aa,"UL",{});var vze=s(n9);xT=n(vze,"LI",{});var iIe=s(xT);Dve=n(iIe,"STRONG",{});var T5t=s(Dve);phr=r(T5t,"detr"),T5t.forEach(t),_hr=r(iIe," \u2014 "),KQ=n(iIe,"A",{href:!0});var M5t=s(KQ);uhr=r(M5t,"DetrForObjectDetection"),M5t.forEach(t),bhr=r(iIe," (DETR model)"),iIe.forEach(t),vhr=i(vze),$T=n(vze,"LI",{});var dIe=s($T);Gve=n(dIe,"STRONG",{});var E5t=s(Gve);Fhr=r(E5t,"yolos"),E5t.forEach(t),Thr=r(dIe," \u2014 "),ZQ=n(dIe,"A",{href:!0});var C5t=s(ZQ);Mhr=r(C5t,"YolosForObjectDetection"),C5t.forEach(t),Ehr=r(dIe," (YOLOS model)"),dIe.forEach(t),vze.forEach(t),Chr=i(Aa),kT=n(Aa,"P",{});var cIe=s(kT);whr=r(cIe,"The model is set in evaluation mode by default using "),Ove=n(cIe,"CODE",{});var w5t=s(Ove);Ahr=r(w5t,"model.eval()"),w5t.forEach(t),Lhr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vve=n(cIe,"CODE",{});var A5t=s(Vve);yhr=r(A5t,"model.train()"),A5t.forEach(t),cIe.forEach(t),xhr=i(Aa),T(ST.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),mVe=i(f),Hd=n(f,"H2",{class:!0});var Fze=s(Hd);RT=n(Fze,"A",{id:!0,class:!0,href:!0});var L5t=s(RT);Xve=n(L5t,"SPAN",{});var y5t=s(Xve);T(s9.$$.fragment,y5t),y5t.forEach(t),L5t.forEach(t),$hr=i(Fze),zve=n(Fze,"SPAN",{});var x5t=s(zve);khr=r(x5t,"AutoModelForImageSegmentation"),x5t.forEach(t),Fze.forEach(t),gVe=i(f),Yo=n(f,"DIV",{class:!0});var Ml=s(Yo);T(l9.$$.fragment,Ml),Shr=i(Ml),Ud=n(Ml,"P",{});var Cre=s(Ud);Rhr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eH=n(Cre,"A",{href:!0});var $5t=s(eH);Phr=r($5t,"from_pretrained()"),$5t.forEach(t),Bhr=r(Cre," class method or the "),oH=n(Cre,"A",{href:!0});var k5t=s(oH);Ihr=r(k5t,"from_config()"),k5t.forEach(t),Nhr=r(Cre,` class
method.`),Cre.forEach(t),qhr=i(Ml),i9=n(Ml,"P",{});var Tze=s(i9);jhr=r(Tze,"This class cannot be instantiated directly using "),Wve=n(Tze,"CODE",{});var S5t=s(Wve);Dhr=r(S5t,"__init__()"),S5t.forEach(t),Ghr=r(Tze," (throws an error)."),Tze.forEach(t),Ohr=i(Ml),yt=n(Ml,"DIV",{class:!0});var Aw=s(yt);T(d9.$$.fragment,Aw),Vhr=i(Aw),Qve=n(Aw,"P",{});var R5t=s(Qve);Xhr=r(R5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),R5t.forEach(t),zhr=i(Aw),Jd=n(Aw,"P",{});var wre=s(Jd);Whr=r(wre,`Note:
Loading a model from its configuration file does `),Hve=n(wre,"STRONG",{});var P5t=s(Hve);Qhr=r(P5t,"not"),P5t.forEach(t),Hhr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(wre,"A",{href:!0});var B5t=s(rH);Uhr=r(B5t,"from_pretrained()"),B5t.forEach(t),Jhr=r(wre," to load the model weights."),wre.forEach(t),Yhr=i(Aw),T(PT.$$.fragment,Aw),Aw.forEach(t),Khr=i(Ml),bo=n(Ml,"DIV",{class:!0});var La=s(bo);T(c9.$$.fragment,La),Zhr=i(La),Uve=n(La,"P",{});var I5t=s(Uve);epr=r(I5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),I5t.forEach(t),opr=i(La),on=n(La,"P",{});var Lw=s(on);rpr=r(Lw,"The model class to instantiate is selected based on the "),Jve=n(Lw,"CODE",{});var N5t=s(Jve);tpr=r(N5t,"model_type"),N5t.forEach(t),apr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Yve=n(Lw,"CODE",{});var q5t=s(Yve);npr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),spr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(Lw,"CODE",{});var j5t=s(Kve);lpr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),ipr=r(Lw,":"),Lw.forEach(t),dpr=i(La),Zve=n(La,"UL",{});var D5t=s(Zve);BT=n(D5t,"LI",{});var fIe=s(BT);e0e=n(fIe,"STRONG",{});var G5t=s(e0e);cpr=r(G5t,"detr"),G5t.forEach(t),fpr=r(fIe," \u2014 "),tH=n(fIe,"A",{href:!0});var O5t=s(tH);mpr=r(O5t,"DetrForSegmentation"),O5t.forEach(t),gpr=r(fIe," (DETR model)"),fIe.forEach(t),D5t.forEach(t),hpr=i(La),IT=n(La,"P",{});var mIe=s(IT);ppr=r(mIe,"The model is set in evaluation mode by default using "),o0e=n(mIe,"CODE",{});var V5t=s(o0e);_pr=r(V5t,"model.eval()"),V5t.forEach(t),upr=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=n(mIe,"CODE",{});var X5t=s(r0e);bpr=r(X5t,"model.train()"),X5t.forEach(t),mIe.forEach(t),vpr=i(La),T(NT.$$.fragment,La),La.forEach(t),Ml.forEach(t),hVe=i(f),Yd=n(f,"H2",{class:!0});var Mze=s(Yd);qT=n(Mze,"A",{id:!0,class:!0,href:!0});var z5t=s(qT);t0e=n(z5t,"SPAN",{});var W5t=s(t0e);T(f9.$$.fragment,W5t),W5t.forEach(t),z5t.forEach(t),Fpr=i(Mze),a0e=n(Mze,"SPAN",{});var Q5t=s(a0e);Tpr=r(Q5t,"AutoModelForSemanticSegmentation"),Q5t.forEach(t),Mze.forEach(t),pVe=i(f),Ko=n(f,"DIV",{class:!0});var El=s(Ko);T(m9.$$.fragment,El),Mpr=i(El),Kd=n(El,"P",{});var Are=s(Kd);Epr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aH=n(Are,"A",{href:!0});var H5t=s(aH);Cpr=r(H5t,"from_pretrained()"),H5t.forEach(t),wpr=r(Are," class method or the "),nH=n(Are,"A",{href:!0});var U5t=s(nH);Apr=r(U5t,"from_config()"),U5t.forEach(t),Lpr=r(Are,` class
method.`),Are.forEach(t),ypr=i(El),g9=n(El,"P",{});var Eze=s(g9);xpr=r(Eze,"This class cannot be instantiated directly using "),n0e=n(Eze,"CODE",{});var J5t=s(n0e);$pr=r(J5t,"__init__()"),J5t.forEach(t),kpr=r(Eze," (throws an error)."),Eze.forEach(t),Spr=i(El),xt=n(El,"DIV",{class:!0});var yw=s(xt);T(h9.$$.fragment,yw),Rpr=i(yw),s0e=n(yw,"P",{});var Y5t=s(s0e);Ppr=r(Y5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Y5t.forEach(t),Bpr=i(yw),Zd=n(yw,"P",{});var Lre=s(Zd);Ipr=r(Lre,`Note:
Loading a model from its configuration file does `),l0e=n(Lre,"STRONG",{});var K5t=s(l0e);Npr=r(K5t,"not"),K5t.forEach(t),qpr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(Lre,"A",{href:!0});var Z5t=s(sH);jpr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),Dpr=r(Lre," to load the model weights."),Lre.forEach(t),Gpr=i(yw),T(jT.$$.fragment,yw),yw.forEach(t),Opr=i(El),vo=n(El,"DIV",{class:!0});var ya=s(vo);T(p9.$$.fragment,ya),Vpr=i(ya),i0e=n(ya,"P",{});var e3t=s(i0e);Xpr=r(e3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),e3t.forEach(t),zpr=i(ya),rn=n(ya,"P",{});var xw=s(rn);Wpr=r(xw,"The model class to instantiate is selected based on the "),d0e=n(xw,"CODE",{});var o3t=s(d0e);Qpr=r(o3t,"model_type"),o3t.forEach(t),Hpr=r(xw,` property of the config object (either
passed as an argument or loaded from `),c0e=n(xw,"CODE",{});var r3t=s(c0e);Upr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),Jpr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(xw,"CODE",{});var t3t=s(f0e);Ypr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),Kpr=r(xw,":"),xw.forEach(t),Zpr=i(ya),tn=n(ya,"UL",{});var $w=s(tn);DT=n($w,"LI",{});var gIe=s(DT);m0e=n(gIe,"STRONG",{});var a3t=s(m0e);e_r=r(a3t,"beit"),a3t.forEach(t),o_r=r(gIe," \u2014 "),lH=n(gIe,"A",{href:!0});var n3t=s(lH);r_r=r(n3t,"BeitForSemanticSegmentation"),n3t.forEach(t),t_r=r(gIe," (BEiT model)"),gIe.forEach(t),a_r=i($w),GT=n($w,"LI",{});var hIe=s(GT);g0e=n(hIe,"STRONG",{});var s3t=s(g0e);n_r=r(s3t,"data2vec-vision"),s3t.forEach(t),s_r=r(hIe," \u2014 "),iH=n(hIe,"A",{href:!0});var l3t=s(iH);l_r=r(l3t,"Data2VecVisionForSemanticSegmentation"),l3t.forEach(t),i_r=r(hIe," (Data2VecVision model)"),hIe.forEach(t),d_r=i($w),OT=n($w,"LI",{});var pIe=s(OT);h0e=n(pIe,"STRONG",{});var i3t=s(h0e);c_r=r(i3t,"dpt"),i3t.forEach(t),f_r=r(pIe," \u2014 "),dH=n(pIe,"A",{href:!0});var d3t=s(dH);m_r=r(d3t,"DPTForSemanticSegmentation"),d3t.forEach(t),g_r=r(pIe," (DPT model)"),pIe.forEach(t),h_r=i($w),VT=n($w,"LI",{});var _Ie=s(VT);p0e=n(_Ie,"STRONG",{});var c3t=s(p0e);p_r=r(c3t,"segformer"),c3t.forEach(t),__r=r(_Ie," \u2014 "),cH=n(_Ie,"A",{href:!0});var f3t=s(cH);u_r=r(f3t,"SegformerForSemanticSegmentation"),f3t.forEach(t),b_r=r(_Ie," (SegFormer model)"),_Ie.forEach(t),$w.forEach(t),v_r=i(ya),XT=n(ya,"P",{});var uIe=s(XT);F_r=r(uIe,"The model is set in evaluation mode by default using "),_0e=n(uIe,"CODE",{});var m3t=s(_0e);T_r=r(m3t,"model.eval()"),m3t.forEach(t),M_r=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u0e=n(uIe,"CODE",{});var g3t=s(u0e);E_r=r(g3t,"model.train()"),g3t.forEach(t),uIe.forEach(t),C_r=i(ya),T(zT.$$.fragment,ya),ya.forEach(t),El.forEach(t),_Ve=i(f),ec=n(f,"H2",{class:!0});var Cze=s(ec);WT=n(Cze,"A",{id:!0,class:!0,href:!0});var h3t=s(WT);b0e=n(h3t,"SPAN",{});var p3t=s(b0e);T(_9.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),w_r=i(Cze),v0e=n(Cze,"SPAN",{});var _3t=s(v0e);A_r=r(_3t,"AutoModelForInstanceSegmentation"),_3t.forEach(t),Cze.forEach(t),uVe=i(f),Zo=n(f,"DIV",{class:!0});var Cl=s(Zo);T(u9.$$.fragment,Cl),L_r=i(Cl),oc=n(Cl,"P",{});var yre=s(oc);y_r=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fH=n(yre,"A",{href:!0});var u3t=s(fH);x_r=r(u3t,"from_pretrained()"),u3t.forEach(t),$_r=r(yre," class method or the "),mH=n(yre,"A",{href:!0});var b3t=s(mH);k_r=r(b3t,"from_config()"),b3t.forEach(t),S_r=r(yre,` class
method.`),yre.forEach(t),R_r=i(Cl),b9=n(Cl,"P",{});var wze=s(b9);P_r=r(wze,"This class cannot be instantiated directly using "),F0e=n(wze,"CODE",{});var v3t=s(F0e);B_r=r(v3t,"__init__()"),v3t.forEach(t),I_r=r(wze," (throws an error)."),wze.forEach(t),N_r=i(Cl),$t=n(Cl,"DIV",{class:!0});var kw=s($t);T(v9.$$.fragment,kw),q_r=i(kw),T0e=n(kw,"P",{});var F3t=s(T0e);j_r=r(F3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),F3t.forEach(t),D_r=i(kw),rc=n(kw,"P",{});var xre=s(rc);G_r=r(xre,`Note:
Loading a model from its configuration file does `),M0e=n(xre,"STRONG",{});var T3t=s(M0e);O_r=r(T3t,"not"),T3t.forEach(t),V_r=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(xre,"A",{href:!0});var M3t=s(gH);X_r=r(M3t,"from_pretrained()"),M3t.forEach(t),z_r=r(xre," to load the model weights."),xre.forEach(t),W_r=i(kw),T(QT.$$.fragment,kw),kw.forEach(t),Q_r=i(Cl),Fo=n(Cl,"DIV",{class:!0});var xa=s(Fo);T(F9.$$.fragment,xa),H_r=i(xa),E0e=n(xa,"P",{});var E3t=s(E0e);U_r=r(E3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),E3t.forEach(t),J_r=i(xa),an=n(xa,"P",{});var Sw=s(an);Y_r=r(Sw,"The model class to instantiate is selected based on the "),C0e=n(Sw,"CODE",{});var C3t=s(C0e);K_r=r(C3t,"model_type"),C3t.forEach(t),Z_r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),w0e=n(Sw,"CODE",{});var w3t=s(w0e);eur=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),our=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(Sw,"CODE",{});var A3t=s(A0e);rur=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),tur=r(Sw,":"),Sw.forEach(t),aur=i(xa),L0e=n(xa,"UL",{});var L3t=s(L0e);HT=n(L3t,"LI",{});var bIe=s(HT);y0e=n(bIe,"STRONG",{});var y3t=s(y0e);nur=r(y3t,"maskformer"),y3t.forEach(t),sur=r(bIe," \u2014 "),hH=n(bIe,"A",{href:!0});var x3t=s(hH);lur=r(x3t,"MaskFormerForInstanceSegmentation"),x3t.forEach(t),iur=r(bIe," (MaskFormer model)"),bIe.forEach(t),L3t.forEach(t),dur=i(xa),UT=n(xa,"P",{});var vIe=s(UT);cur=r(vIe,"The model is set in evaluation mode by default using "),x0e=n(vIe,"CODE",{});var $3t=s(x0e);fur=r($3t,"model.eval()"),$3t.forEach(t),mur=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$0e=n(vIe,"CODE",{});var k3t=s($0e);gur=r(k3t,"model.train()"),k3t.forEach(t),vIe.forEach(t),hur=i(xa),T(JT.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),bVe=i(f),tc=n(f,"H2",{class:!0});var Aze=s(tc);YT=n(Aze,"A",{id:!0,class:!0,href:!0});var S3t=s(YT);k0e=n(S3t,"SPAN",{});var R3t=s(k0e);T(T9.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),pur=i(Aze),S0e=n(Aze,"SPAN",{});var P3t=s(S0e);_ur=r(P3t,"TFAutoModel"),P3t.forEach(t),Aze.forEach(t),vVe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(M9.$$.fragment,wl),uur=i(wl),ac=n(wl,"P",{});var $re=s(ac);bur=r($re,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pH=n($re,"A",{href:!0});var B3t=s(pH);vur=r(B3t,"from_pretrained()"),B3t.forEach(t),Fur=r($re," class method or the "),_H=n($re,"A",{href:!0});var I3t=s(_H);Tur=r(I3t,"from_config()"),I3t.forEach(t),Mur=r($re,` class
method.`),$re.forEach(t),Eur=i(wl),E9=n(wl,"P",{});var Lze=s(E9);Cur=r(Lze,"This class cannot be instantiated directly using "),R0e=n(Lze,"CODE",{});var N3t=s(R0e);wur=r(N3t,"__init__()"),N3t.forEach(t),Aur=r(Lze," (throws an error)."),Lze.forEach(t),Lur=i(wl),kt=n(wl,"DIV",{class:!0});var Rw=s(kt);T(C9.$$.fragment,Rw),yur=i(Rw),P0e=n(Rw,"P",{});var q3t=s(P0e);xur=r(q3t,"Instantiates one of the base model classes of the library from a configuration."),q3t.forEach(t),$ur=i(Rw),nc=n(Rw,"P",{});var kre=s(nc);kur=r(kre,`Note:
Loading a model from its configuration file does `),B0e=n(kre,"STRONG",{});var j3t=s(B0e);Sur=r(j3t,"not"),j3t.forEach(t),Rur=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(kre,"A",{href:!0});var D3t=s(uH);Pur=r(D3t,"from_pretrained()"),D3t.forEach(t),Bur=r(kre," to load the model weights."),kre.forEach(t),Iur=i(Rw),T(KT.$$.fragment,Rw),Rw.forEach(t),Nur=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(w9.$$.fragment,Al),qur=i(Al),I0e=n(Al,"P",{});var G3t=s(I0e);jur=r(G3t,"Instantiate one of the base model classes of the library from a pretrained model."),G3t.forEach(t),Dur=i(Al),nn=n(Al,"P",{});var Pw=s(nn);Gur=r(Pw,"The model class to instantiate is selected based on the "),N0e=n(Pw,"CODE",{});var O3t=s(N0e);Our=r(O3t,"model_type"),O3t.forEach(t),Vur=r(Pw,` property of the config object (either
passed as an argument or loaded from `),q0e=n(Pw,"CODE",{});var V3t=s(q0e);Xur=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),zur=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=n(Pw,"CODE",{});var X3t=s(j0e);Wur=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Qur=r(Pw,":"),Pw.forEach(t),Hur=i(Al),q=n(Al,"UL",{});var D=s(q);ZT=n(D,"LI",{});var FIe=s(ZT);D0e=n(FIe,"STRONG",{});var z3t=s(D0e);Uur=r(z3t,"albert"),z3t.forEach(t),Jur=r(FIe," \u2014 "),bH=n(FIe,"A",{href:!0});var W3t=s(bH);Yur=r(W3t,"TFAlbertModel"),W3t.forEach(t),Kur=r(FIe," (ALBERT model)"),FIe.forEach(t),Zur=i(D),e7=n(D,"LI",{});var TIe=s(e7);G0e=n(TIe,"STRONG",{});var Q3t=s(G0e);e1r=r(Q3t,"bart"),Q3t.forEach(t),o1r=r(TIe," \u2014 "),vH=n(TIe,"A",{href:!0});var H3t=s(vH);r1r=r(H3t,"TFBartModel"),H3t.forEach(t),t1r=r(TIe," (BART model)"),TIe.forEach(t),a1r=i(D),o7=n(D,"LI",{});var MIe=s(o7);O0e=n(MIe,"STRONG",{});var U3t=s(O0e);n1r=r(U3t,"bert"),U3t.forEach(t),s1r=r(MIe," \u2014 "),FH=n(MIe,"A",{href:!0});var J3t=s(FH);l1r=r(J3t,"TFBertModel"),J3t.forEach(t),i1r=r(MIe," (BERT model)"),MIe.forEach(t),d1r=i(D),r7=n(D,"LI",{});var EIe=s(r7);V0e=n(EIe,"STRONG",{});var Y3t=s(V0e);c1r=r(Y3t,"blenderbot"),Y3t.forEach(t),f1r=r(EIe," \u2014 "),TH=n(EIe,"A",{href:!0});var K3t=s(TH);m1r=r(K3t,"TFBlenderbotModel"),K3t.forEach(t),g1r=r(EIe," (Blenderbot model)"),EIe.forEach(t),h1r=i(D),t7=n(D,"LI",{});var CIe=s(t7);X0e=n(CIe,"STRONG",{});var Z3t=s(X0e);p1r=r(Z3t,"blenderbot-small"),Z3t.forEach(t),_1r=r(CIe," \u2014 "),MH=n(CIe,"A",{href:!0});var ewt=s(MH);u1r=r(ewt,"TFBlenderbotSmallModel"),ewt.forEach(t),b1r=r(CIe," (BlenderbotSmall model)"),CIe.forEach(t),v1r=i(D),a7=n(D,"LI",{});var wIe=s(a7);z0e=n(wIe,"STRONG",{});var owt=s(z0e);F1r=r(owt,"camembert"),owt.forEach(t),T1r=r(wIe," \u2014 "),EH=n(wIe,"A",{href:!0});var rwt=s(EH);M1r=r(rwt,"TFCamembertModel"),rwt.forEach(t),E1r=r(wIe," (CamemBERT model)"),wIe.forEach(t),C1r=i(D),n7=n(D,"LI",{});var AIe=s(n7);W0e=n(AIe,"STRONG",{});var twt=s(W0e);w1r=r(twt,"clip"),twt.forEach(t),A1r=r(AIe," \u2014 "),CH=n(AIe,"A",{href:!0});var awt=s(CH);L1r=r(awt,"TFCLIPModel"),awt.forEach(t),y1r=r(AIe," (CLIP model)"),AIe.forEach(t),x1r=i(D),s7=n(D,"LI",{});var LIe=s(s7);Q0e=n(LIe,"STRONG",{});var nwt=s(Q0e);$1r=r(nwt,"convbert"),nwt.forEach(t),k1r=r(LIe," \u2014 "),wH=n(LIe,"A",{href:!0});var swt=s(wH);S1r=r(swt,"TFConvBertModel"),swt.forEach(t),R1r=r(LIe," (ConvBERT model)"),LIe.forEach(t),P1r=i(D),l7=n(D,"LI",{});var yIe=s(l7);H0e=n(yIe,"STRONG",{});var lwt=s(H0e);B1r=r(lwt,"convnext"),lwt.forEach(t),I1r=r(yIe," \u2014 "),AH=n(yIe,"A",{href:!0});var iwt=s(AH);N1r=r(iwt,"TFConvNextModel"),iwt.forEach(t),q1r=r(yIe," (ConvNeXT model)"),yIe.forEach(t),j1r=i(D),i7=n(D,"LI",{});var xIe=s(i7);U0e=n(xIe,"STRONG",{});var dwt=s(U0e);D1r=r(dwt,"ctrl"),dwt.forEach(t),G1r=r(xIe," \u2014 "),LH=n(xIe,"A",{href:!0});var cwt=s(LH);O1r=r(cwt,"TFCTRLModel"),cwt.forEach(t),V1r=r(xIe," (CTRL model)"),xIe.forEach(t),X1r=i(D),d7=n(D,"LI",{});var $Ie=s(d7);J0e=n($Ie,"STRONG",{});var fwt=s(J0e);z1r=r(fwt,"data2vec-vision"),fwt.forEach(t),W1r=r($Ie," \u2014 "),yH=n($Ie,"A",{href:!0});var mwt=s(yH);Q1r=r(mwt,"TFData2VecVisionModel"),mwt.forEach(t),H1r=r($Ie," (Data2VecVision model)"),$Ie.forEach(t),U1r=i(D),c7=n(D,"LI",{});var kIe=s(c7);Y0e=n(kIe,"STRONG",{});var gwt=s(Y0e);J1r=r(gwt,"deberta"),gwt.forEach(t),Y1r=r(kIe," \u2014 "),xH=n(kIe,"A",{href:!0});var hwt=s(xH);K1r=r(hwt,"TFDebertaModel"),hwt.forEach(t),Z1r=r(kIe," (DeBERTa model)"),kIe.forEach(t),e2r=i(D),f7=n(D,"LI",{});var SIe=s(f7);K0e=n(SIe,"STRONG",{});var pwt=s(K0e);o2r=r(pwt,"deberta-v2"),pwt.forEach(t),r2r=r(SIe," \u2014 "),$H=n(SIe,"A",{href:!0});var _wt=s($H);t2r=r(_wt,"TFDebertaV2Model"),_wt.forEach(t),a2r=r(SIe," (DeBERTa-v2 model)"),SIe.forEach(t),n2r=i(D),m7=n(D,"LI",{});var RIe=s(m7);Z0e=n(RIe,"STRONG",{});var uwt=s(Z0e);s2r=r(uwt,"deit"),uwt.forEach(t),l2r=r(RIe," \u2014 "),kH=n(RIe,"A",{href:!0});var bwt=s(kH);i2r=r(bwt,"TFDeiTModel"),bwt.forEach(t),d2r=r(RIe," (DeiT model)"),RIe.forEach(t),c2r=i(D),g7=n(D,"LI",{});var PIe=s(g7);eFe=n(PIe,"STRONG",{});var vwt=s(eFe);f2r=r(vwt,"distilbert"),vwt.forEach(t),m2r=r(PIe," \u2014 "),SH=n(PIe,"A",{href:!0});var Fwt=s(SH);g2r=r(Fwt,"TFDistilBertModel"),Fwt.forEach(t),h2r=r(PIe," (DistilBERT model)"),PIe.forEach(t),p2r=i(D),h7=n(D,"LI",{});var BIe=s(h7);oFe=n(BIe,"STRONG",{});var Twt=s(oFe);_2r=r(Twt,"dpr"),Twt.forEach(t),u2r=r(BIe," \u2014 "),RH=n(BIe,"A",{href:!0});var Mwt=s(RH);b2r=r(Mwt,"TFDPRQuestionEncoder"),Mwt.forEach(t),v2r=r(BIe," (DPR model)"),BIe.forEach(t),F2r=i(D),p7=n(D,"LI",{});var IIe=s(p7);rFe=n(IIe,"STRONG",{});var Ewt=s(rFe);T2r=r(Ewt,"electra"),Ewt.forEach(t),M2r=r(IIe," \u2014 "),PH=n(IIe,"A",{href:!0});var Cwt=s(PH);E2r=r(Cwt,"TFElectraModel"),Cwt.forEach(t),C2r=r(IIe," (ELECTRA model)"),IIe.forEach(t),w2r=i(D),_7=n(D,"LI",{});var NIe=s(_7);tFe=n(NIe,"STRONG",{});var wwt=s(tFe);A2r=r(wwt,"flaubert"),wwt.forEach(t),L2r=r(NIe," \u2014 "),BH=n(NIe,"A",{href:!0});var Awt=s(BH);y2r=r(Awt,"TFFlaubertModel"),Awt.forEach(t),x2r=r(NIe," (FlauBERT model)"),NIe.forEach(t),$2r=i(D),Qs=n(D,"LI",{});var iS=s(Qs);aFe=n(iS,"STRONG",{});var Lwt=s(aFe);k2r=r(Lwt,"funnel"),Lwt.forEach(t),S2r=r(iS," \u2014 "),IH=n(iS,"A",{href:!0});var ywt=s(IH);R2r=r(ywt,"TFFunnelModel"),ywt.forEach(t),P2r=r(iS," or "),NH=n(iS,"A",{href:!0});var xwt=s(NH);B2r=r(xwt,"TFFunnelBaseModel"),xwt.forEach(t),I2r=r(iS," (Funnel Transformer model)"),iS.forEach(t),N2r=i(D),u7=n(D,"LI",{});var qIe=s(u7);nFe=n(qIe,"STRONG",{});var $wt=s(nFe);q2r=r($wt,"gpt2"),$wt.forEach(t),j2r=r(qIe," \u2014 "),qH=n(qIe,"A",{href:!0});var kwt=s(qH);D2r=r(kwt,"TFGPT2Model"),kwt.forEach(t),G2r=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),O2r=i(D),b7=n(D,"LI",{});var jIe=s(b7);sFe=n(jIe,"STRONG",{});var Swt=s(sFe);V2r=r(Swt,"gptj"),Swt.forEach(t),X2r=r(jIe," \u2014 "),jH=n(jIe,"A",{href:!0});var Rwt=s(jH);z2r=r(Rwt,"TFGPTJModel"),Rwt.forEach(t),W2r=r(jIe," (GPT-J model)"),jIe.forEach(t),Q2r=i(D),v7=n(D,"LI",{});var DIe=s(v7);lFe=n(DIe,"STRONG",{});var Pwt=s(lFe);H2r=r(Pwt,"hubert"),Pwt.forEach(t),U2r=r(DIe," \u2014 "),DH=n(DIe,"A",{href:!0});var Bwt=s(DH);J2r=r(Bwt,"TFHubertModel"),Bwt.forEach(t),Y2r=r(DIe," (Hubert model)"),DIe.forEach(t),K2r=i(D),F7=n(D,"LI",{});var GIe=s(F7);iFe=n(GIe,"STRONG",{});var Iwt=s(iFe);Z2r=r(Iwt,"layoutlm"),Iwt.forEach(t),ebr=r(GIe," \u2014 "),GH=n(GIe,"A",{href:!0});var Nwt=s(GH);obr=r(Nwt,"TFLayoutLMModel"),Nwt.forEach(t),rbr=r(GIe," (LayoutLM model)"),GIe.forEach(t),tbr=i(D),T7=n(D,"LI",{});var OIe=s(T7);dFe=n(OIe,"STRONG",{});var qwt=s(dFe);abr=r(qwt,"led"),qwt.forEach(t),nbr=r(OIe," \u2014 "),OH=n(OIe,"A",{href:!0});var jwt=s(OH);sbr=r(jwt,"TFLEDModel"),jwt.forEach(t),lbr=r(OIe," (LED model)"),OIe.forEach(t),ibr=i(D),M7=n(D,"LI",{});var VIe=s(M7);cFe=n(VIe,"STRONG",{});var Dwt=s(cFe);dbr=r(Dwt,"longformer"),Dwt.forEach(t),cbr=r(VIe," \u2014 "),VH=n(VIe,"A",{href:!0});var Gwt=s(VH);fbr=r(Gwt,"TFLongformerModel"),Gwt.forEach(t),mbr=r(VIe," (Longformer model)"),VIe.forEach(t),gbr=i(D),E7=n(D,"LI",{});var XIe=s(E7);fFe=n(XIe,"STRONG",{});var Owt=s(fFe);hbr=r(Owt,"lxmert"),Owt.forEach(t),pbr=r(XIe," \u2014 "),XH=n(XIe,"A",{href:!0});var Vwt=s(XH);_br=r(Vwt,"TFLxmertModel"),Vwt.forEach(t),ubr=r(XIe," (LXMERT model)"),XIe.forEach(t),bbr=i(D),C7=n(D,"LI",{});var zIe=s(C7);mFe=n(zIe,"STRONG",{});var Xwt=s(mFe);vbr=r(Xwt,"marian"),Xwt.forEach(t),Fbr=r(zIe," \u2014 "),zH=n(zIe,"A",{href:!0});var zwt=s(zH);Tbr=r(zwt,"TFMarianModel"),zwt.forEach(t),Mbr=r(zIe," (Marian model)"),zIe.forEach(t),Ebr=i(D),w7=n(D,"LI",{});var WIe=s(w7);gFe=n(WIe,"STRONG",{});var Wwt=s(gFe);Cbr=r(Wwt,"mbart"),Wwt.forEach(t),wbr=r(WIe," \u2014 "),WH=n(WIe,"A",{href:!0});var Qwt=s(WH);Abr=r(Qwt,"TFMBartModel"),Qwt.forEach(t),Lbr=r(WIe," (mBART model)"),WIe.forEach(t),ybr=i(D),A7=n(D,"LI",{});var QIe=s(A7);hFe=n(QIe,"STRONG",{});var Hwt=s(hFe);xbr=r(Hwt,"mobilebert"),Hwt.forEach(t),$br=r(QIe," \u2014 "),QH=n(QIe,"A",{href:!0});var Uwt=s(QH);kbr=r(Uwt,"TFMobileBertModel"),Uwt.forEach(t),Sbr=r(QIe," (MobileBERT model)"),QIe.forEach(t),Rbr=i(D),L7=n(D,"LI",{});var HIe=s(L7);pFe=n(HIe,"STRONG",{});var Jwt=s(pFe);Pbr=r(Jwt,"mpnet"),Jwt.forEach(t),Bbr=r(HIe," \u2014 "),HH=n(HIe,"A",{href:!0});var Ywt=s(HH);Ibr=r(Ywt,"TFMPNetModel"),Ywt.forEach(t),Nbr=r(HIe," (MPNet model)"),HIe.forEach(t),qbr=i(D),y7=n(D,"LI",{});var UIe=s(y7);_Fe=n(UIe,"STRONG",{});var Kwt=s(_Fe);jbr=r(Kwt,"mt5"),Kwt.forEach(t),Dbr=r(UIe," \u2014 "),UH=n(UIe,"A",{href:!0});var Zwt=s(UH);Gbr=r(Zwt,"TFMT5Model"),Zwt.forEach(t),Obr=r(UIe," (MT5 model)"),UIe.forEach(t),Vbr=i(D),x7=n(D,"LI",{});var JIe=s(x7);uFe=n(JIe,"STRONG",{});var eAt=s(uFe);Xbr=r(eAt,"openai-gpt"),eAt.forEach(t),zbr=r(JIe," \u2014 "),JH=n(JIe,"A",{href:!0});var oAt=s(JH);Wbr=r(oAt,"TFOpenAIGPTModel"),oAt.forEach(t),Qbr=r(JIe," (OpenAI GPT model)"),JIe.forEach(t),Hbr=i(D),$7=n(D,"LI",{});var YIe=s($7);bFe=n(YIe,"STRONG",{});var rAt=s(bFe);Ubr=r(rAt,"opt"),rAt.forEach(t),Jbr=r(YIe," \u2014 "),YH=n(YIe,"A",{href:!0});var tAt=s(YH);Ybr=r(tAt,"TFOPTModel"),tAt.forEach(t),Kbr=r(YIe," (OPT model)"),YIe.forEach(t),Zbr=i(D),k7=n(D,"LI",{});var KIe=s(k7);vFe=n(KIe,"STRONG",{});var aAt=s(vFe);evr=r(aAt,"pegasus"),aAt.forEach(t),ovr=r(KIe," \u2014 "),KH=n(KIe,"A",{href:!0});var nAt=s(KH);rvr=r(nAt,"TFPegasusModel"),nAt.forEach(t),tvr=r(KIe," (Pegasus model)"),KIe.forEach(t),avr=i(D),S7=n(D,"LI",{});var ZIe=s(S7);FFe=n(ZIe,"STRONG",{});var sAt=s(FFe);nvr=r(sAt,"rembert"),sAt.forEach(t),svr=r(ZIe," \u2014 "),ZH=n(ZIe,"A",{href:!0});var lAt=s(ZH);lvr=r(lAt,"TFRemBertModel"),lAt.forEach(t),ivr=r(ZIe," (RemBERT model)"),ZIe.forEach(t),dvr=i(D),R7=n(D,"LI",{});var eNe=s(R7);TFe=n(eNe,"STRONG",{});var iAt=s(TFe);cvr=r(iAt,"roberta"),iAt.forEach(t),fvr=r(eNe," \u2014 "),eU=n(eNe,"A",{href:!0});var dAt=s(eU);mvr=r(dAt,"TFRobertaModel"),dAt.forEach(t),gvr=r(eNe," (RoBERTa model)"),eNe.forEach(t),hvr=i(D),P7=n(D,"LI",{});var oNe=s(P7);MFe=n(oNe,"STRONG",{});var cAt=s(MFe);pvr=r(cAt,"roformer"),cAt.forEach(t),_vr=r(oNe," \u2014 "),oU=n(oNe,"A",{href:!0});var fAt=s(oU);uvr=r(fAt,"TFRoFormerModel"),fAt.forEach(t),bvr=r(oNe," (RoFormer model)"),oNe.forEach(t),vvr=i(D),B7=n(D,"LI",{});var rNe=s(B7);EFe=n(rNe,"STRONG",{});var mAt=s(EFe);Fvr=r(mAt,"speech_to_text"),mAt.forEach(t),Tvr=r(rNe," \u2014 "),rU=n(rNe,"A",{href:!0});var gAt=s(rU);Mvr=r(gAt,"TFSpeech2TextModel"),gAt.forEach(t),Evr=r(rNe," (Speech2Text model)"),rNe.forEach(t),Cvr=i(D),I7=n(D,"LI",{});var tNe=s(I7);CFe=n(tNe,"STRONG",{});var hAt=s(CFe);wvr=r(hAt,"swin"),hAt.forEach(t),Avr=r(tNe," \u2014 "),tU=n(tNe,"A",{href:!0});var pAt=s(tU);Lvr=r(pAt,"TFSwinModel"),pAt.forEach(t),yvr=r(tNe," (Swin Transformer model)"),tNe.forEach(t),xvr=i(D),N7=n(D,"LI",{});var aNe=s(N7);wFe=n(aNe,"STRONG",{});var _At=s(wFe);$vr=r(_At,"t5"),_At.forEach(t),kvr=r(aNe," \u2014 "),aU=n(aNe,"A",{href:!0});var uAt=s(aU);Svr=r(uAt,"TFT5Model"),uAt.forEach(t),Rvr=r(aNe," (T5 model)"),aNe.forEach(t),Pvr=i(D),q7=n(D,"LI",{});var nNe=s(q7);AFe=n(nNe,"STRONG",{});var bAt=s(AFe);Bvr=r(bAt,"tapas"),bAt.forEach(t),Ivr=r(nNe," \u2014 "),nU=n(nNe,"A",{href:!0});var vAt=s(nU);Nvr=r(vAt,"TFTapasModel"),vAt.forEach(t),qvr=r(nNe," (TAPAS model)"),nNe.forEach(t),jvr=i(D),j7=n(D,"LI",{});var sNe=s(j7);LFe=n(sNe,"STRONG",{});var FAt=s(LFe);Dvr=r(FAt,"transfo-xl"),FAt.forEach(t),Gvr=r(sNe," \u2014 "),sU=n(sNe,"A",{href:!0});var TAt=s(sU);Ovr=r(TAt,"TFTransfoXLModel"),TAt.forEach(t),Vvr=r(sNe," (Transformer-XL model)"),sNe.forEach(t),Xvr=i(D),D7=n(D,"LI",{});var lNe=s(D7);yFe=n(lNe,"STRONG",{});var MAt=s(yFe);zvr=r(MAt,"vit"),MAt.forEach(t),Wvr=r(lNe," \u2014 "),lU=n(lNe,"A",{href:!0});var EAt=s(lU);Qvr=r(EAt,"TFViTModel"),EAt.forEach(t),Hvr=r(lNe," (ViT model)"),lNe.forEach(t),Uvr=i(D),G7=n(D,"LI",{});var iNe=s(G7);xFe=n(iNe,"STRONG",{});var CAt=s(xFe);Jvr=r(CAt,"vit_mae"),CAt.forEach(t),Yvr=r(iNe," \u2014 "),iU=n(iNe,"A",{href:!0});var wAt=s(iU);Kvr=r(wAt,"TFViTMAEModel"),wAt.forEach(t),Zvr=r(iNe," (ViTMAE model)"),iNe.forEach(t),e0r=i(D),O7=n(D,"LI",{});var dNe=s(O7);$Fe=n(dNe,"STRONG",{});var AAt=s($Fe);o0r=r(AAt,"wav2vec2"),AAt.forEach(t),r0r=r(dNe," \u2014 "),dU=n(dNe,"A",{href:!0});var LAt=s(dU);t0r=r(LAt,"TFWav2Vec2Model"),LAt.forEach(t),a0r=r(dNe," (Wav2Vec2 model)"),dNe.forEach(t),n0r=i(D),V7=n(D,"LI",{});var cNe=s(V7);kFe=n(cNe,"STRONG",{});var yAt=s(kFe);s0r=r(yAt,"xlm"),yAt.forEach(t),l0r=r(cNe," \u2014 "),cU=n(cNe,"A",{href:!0});var xAt=s(cU);i0r=r(xAt,"TFXLMModel"),xAt.forEach(t),d0r=r(cNe," (XLM model)"),cNe.forEach(t),c0r=i(D),X7=n(D,"LI",{});var fNe=s(X7);SFe=n(fNe,"STRONG",{});var $At=s(SFe);f0r=r($At,"xlm-roberta"),$At.forEach(t),m0r=r(fNe," \u2014 "),fU=n(fNe,"A",{href:!0});var kAt=s(fU);g0r=r(kAt,"TFXLMRobertaModel"),kAt.forEach(t),h0r=r(fNe," (XLM-RoBERTa model)"),fNe.forEach(t),p0r=i(D),z7=n(D,"LI",{});var mNe=s(z7);RFe=n(mNe,"STRONG",{});var SAt=s(RFe);_0r=r(SAt,"xlnet"),SAt.forEach(t),u0r=r(mNe," \u2014 "),mU=n(mNe,"A",{href:!0});var RAt=s(mU);b0r=r(RAt,"TFXLNetModel"),RAt.forEach(t),v0r=r(mNe," (XLNet model)"),mNe.forEach(t),D.forEach(t),F0r=i(Al),T(W7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),FVe=i(f),sc=n(f,"H2",{class:!0});var yze=s(sc);Q7=n(yze,"A",{id:!0,class:!0,href:!0});var PAt=s(Q7);PFe=n(PAt,"SPAN",{});var BAt=s(PFe);T(A9.$$.fragment,BAt),BAt.forEach(t),PAt.forEach(t),T0r=i(yze),BFe=n(yze,"SPAN",{});var IAt=s(BFe);M0r=r(IAt,"TFAutoModelForPreTraining"),IAt.forEach(t),yze.forEach(t),TVe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(L9.$$.fragment,Ll),E0r=i(Ll),lc=n(Ll,"P",{});var Sre=s(lc);C0r=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gU=n(Sre,"A",{href:!0});var NAt=s(gU);w0r=r(NAt,"from_pretrained()"),NAt.forEach(t),A0r=r(Sre," class method or the "),hU=n(Sre,"A",{href:!0});var qAt=s(hU);L0r=r(qAt,"from_config()"),qAt.forEach(t),y0r=r(Sre,` class
method.`),Sre.forEach(t),x0r=i(Ll),y9=n(Ll,"P",{});var xze=s(y9);$0r=r(xze,"This class cannot be instantiated directly using "),IFe=n(xze,"CODE",{});var jAt=s(IFe);k0r=r(jAt,"__init__()"),jAt.forEach(t),S0r=r(xze," (throws an error)."),xze.forEach(t),R0r=i(Ll),St=n(Ll,"DIV",{class:!0});var Bw=s(St);T(x9.$$.fragment,Bw),P0r=i(Bw),NFe=n(Bw,"P",{});var DAt=s(NFe);B0r=r(DAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DAt.forEach(t),I0r=i(Bw),ic=n(Bw,"P",{});var Rre=s(ic);N0r=r(Rre,`Note:
Loading a model from its configuration file does `),qFe=n(Rre,"STRONG",{});var GAt=s(qFe);q0r=r(GAt,"not"),GAt.forEach(t),j0r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Rre,"A",{href:!0});var OAt=s(pU);D0r=r(OAt,"from_pretrained()"),OAt.forEach(t),G0r=r(Rre," to load the model weights."),Rre.forEach(t),O0r=i(Bw),T(H7.$$.fragment,Bw),Bw.forEach(t),V0r=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T($9.$$.fragment,yl),X0r=i(yl),jFe=n(yl,"P",{});var VAt=s(jFe);z0r=r(VAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VAt.forEach(t),W0r=i(yl),sn=n(yl,"P",{});var Iw=s(sn);Q0r=r(Iw,"The model class to instantiate is selected based on the "),DFe=n(Iw,"CODE",{});var XAt=s(DFe);H0r=r(XAt,"model_type"),XAt.forEach(t),U0r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),GFe=n(Iw,"CODE",{});var zAt=s(GFe);J0r=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),Y0r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(Iw,"CODE",{});var WAt=s(OFe);K0r=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),Z0r=r(Iw,":"),Iw.forEach(t),eFr=i(yl),se=n(yl,"UL",{});var le=s(se);U7=n(le,"LI",{});var gNe=s(U7);VFe=n(gNe,"STRONG",{});var QAt=s(VFe);oFr=r(QAt,"albert"),QAt.forEach(t),rFr=r(gNe," \u2014 "),_U=n(gNe,"A",{href:!0});var HAt=s(_U);tFr=r(HAt,"TFAlbertForPreTraining"),HAt.forEach(t),aFr=r(gNe," (ALBERT model)"),gNe.forEach(t),nFr=i(le),J7=n(le,"LI",{});var hNe=s(J7);XFe=n(hNe,"STRONG",{});var UAt=s(XFe);sFr=r(UAt,"bart"),UAt.forEach(t),lFr=r(hNe," \u2014 "),uU=n(hNe,"A",{href:!0});var JAt=s(uU);iFr=r(JAt,"TFBartForConditionalGeneration"),JAt.forEach(t),dFr=r(hNe," (BART model)"),hNe.forEach(t),cFr=i(le),Y7=n(le,"LI",{});var pNe=s(Y7);zFe=n(pNe,"STRONG",{});var YAt=s(zFe);fFr=r(YAt,"bert"),YAt.forEach(t),mFr=r(pNe," \u2014 "),bU=n(pNe,"A",{href:!0});var KAt=s(bU);gFr=r(KAt,"TFBertForPreTraining"),KAt.forEach(t),hFr=r(pNe," (BERT model)"),pNe.forEach(t),pFr=i(le),K7=n(le,"LI",{});var _Ne=s(K7);WFe=n(_Ne,"STRONG",{});var ZAt=s(WFe);_Fr=r(ZAt,"camembert"),ZAt.forEach(t),uFr=r(_Ne," \u2014 "),vU=n(_Ne,"A",{href:!0});var eLt=s(vU);bFr=r(eLt,"TFCamembertForMaskedLM"),eLt.forEach(t),vFr=r(_Ne," (CamemBERT model)"),_Ne.forEach(t),FFr=i(le),Z7=n(le,"LI",{});var uNe=s(Z7);QFe=n(uNe,"STRONG",{});var oLt=s(QFe);TFr=r(oLt,"ctrl"),oLt.forEach(t),MFr=r(uNe," \u2014 "),FU=n(uNe,"A",{href:!0});var rLt=s(FU);EFr=r(rLt,"TFCTRLLMHeadModel"),rLt.forEach(t),CFr=r(uNe," (CTRL model)"),uNe.forEach(t),wFr=i(le),e8=n(le,"LI",{});var bNe=s(e8);HFe=n(bNe,"STRONG",{});var tLt=s(HFe);AFr=r(tLt,"distilbert"),tLt.forEach(t),LFr=r(bNe," \u2014 "),TU=n(bNe,"A",{href:!0});var aLt=s(TU);yFr=r(aLt,"TFDistilBertForMaskedLM"),aLt.forEach(t),xFr=r(bNe," (DistilBERT model)"),bNe.forEach(t),$Fr=i(le),o8=n(le,"LI",{});var vNe=s(o8);UFe=n(vNe,"STRONG",{});var nLt=s(UFe);kFr=r(nLt,"electra"),nLt.forEach(t),SFr=r(vNe," \u2014 "),MU=n(vNe,"A",{href:!0});var sLt=s(MU);RFr=r(sLt,"TFElectraForPreTraining"),sLt.forEach(t),PFr=r(vNe," (ELECTRA model)"),vNe.forEach(t),BFr=i(le),r8=n(le,"LI",{});var FNe=s(r8);JFe=n(FNe,"STRONG",{});var lLt=s(JFe);IFr=r(lLt,"flaubert"),lLt.forEach(t),NFr=r(FNe," \u2014 "),EU=n(FNe,"A",{href:!0});var iLt=s(EU);qFr=r(iLt,"TFFlaubertWithLMHeadModel"),iLt.forEach(t),jFr=r(FNe," (FlauBERT model)"),FNe.forEach(t),DFr=i(le),t8=n(le,"LI",{});var TNe=s(t8);YFe=n(TNe,"STRONG",{});var dLt=s(YFe);GFr=r(dLt,"funnel"),dLt.forEach(t),OFr=r(TNe," \u2014 "),CU=n(TNe,"A",{href:!0});var cLt=s(CU);VFr=r(cLt,"TFFunnelForPreTraining"),cLt.forEach(t),XFr=r(TNe," (Funnel Transformer model)"),TNe.forEach(t),zFr=i(le),a8=n(le,"LI",{});var MNe=s(a8);KFe=n(MNe,"STRONG",{});var fLt=s(KFe);WFr=r(fLt,"gpt2"),fLt.forEach(t),QFr=r(MNe," \u2014 "),wU=n(MNe,"A",{href:!0});var mLt=s(wU);HFr=r(mLt,"TFGPT2LMHeadModel"),mLt.forEach(t),UFr=r(MNe," (OpenAI GPT-2 model)"),MNe.forEach(t),JFr=i(le),n8=n(le,"LI",{});var ENe=s(n8);ZFe=n(ENe,"STRONG",{});var gLt=s(ZFe);YFr=r(gLt,"layoutlm"),gLt.forEach(t),KFr=r(ENe," \u2014 "),AU=n(ENe,"A",{href:!0});var hLt=s(AU);ZFr=r(hLt,"TFLayoutLMForMaskedLM"),hLt.forEach(t),e6r=r(ENe," (LayoutLM model)"),ENe.forEach(t),o6r=i(le),s8=n(le,"LI",{});var CNe=s(s8);e6e=n(CNe,"STRONG",{});var pLt=s(e6e);r6r=r(pLt,"lxmert"),pLt.forEach(t),t6r=r(CNe," \u2014 "),LU=n(CNe,"A",{href:!0});var _Lt=s(LU);a6r=r(_Lt,"TFLxmertForPreTraining"),_Lt.forEach(t),n6r=r(CNe," (LXMERT model)"),CNe.forEach(t),s6r=i(le),l8=n(le,"LI",{});var wNe=s(l8);o6e=n(wNe,"STRONG",{});var uLt=s(o6e);l6r=r(uLt,"mobilebert"),uLt.forEach(t),i6r=r(wNe," \u2014 "),yU=n(wNe,"A",{href:!0});var bLt=s(yU);d6r=r(bLt,"TFMobileBertForPreTraining"),bLt.forEach(t),c6r=r(wNe," (MobileBERT model)"),wNe.forEach(t),f6r=i(le),i8=n(le,"LI",{});var ANe=s(i8);r6e=n(ANe,"STRONG",{});var vLt=s(r6e);m6r=r(vLt,"mpnet"),vLt.forEach(t),g6r=r(ANe," \u2014 "),xU=n(ANe,"A",{href:!0});var FLt=s(xU);h6r=r(FLt,"TFMPNetForMaskedLM"),FLt.forEach(t),p6r=r(ANe," (MPNet model)"),ANe.forEach(t),_6r=i(le),d8=n(le,"LI",{});var LNe=s(d8);t6e=n(LNe,"STRONG",{});var TLt=s(t6e);u6r=r(TLt,"openai-gpt"),TLt.forEach(t),b6r=r(LNe," \u2014 "),$U=n(LNe,"A",{href:!0});var MLt=s($U);v6r=r(MLt,"TFOpenAIGPTLMHeadModel"),MLt.forEach(t),F6r=r(LNe," (OpenAI GPT model)"),LNe.forEach(t),T6r=i(le),c8=n(le,"LI",{});var yNe=s(c8);a6e=n(yNe,"STRONG",{});var ELt=s(a6e);M6r=r(ELt,"roberta"),ELt.forEach(t),E6r=r(yNe," \u2014 "),kU=n(yNe,"A",{href:!0});var CLt=s(kU);C6r=r(CLt,"TFRobertaForMaskedLM"),CLt.forEach(t),w6r=r(yNe," (RoBERTa model)"),yNe.forEach(t),A6r=i(le),f8=n(le,"LI",{});var xNe=s(f8);n6e=n(xNe,"STRONG",{});var wLt=s(n6e);L6r=r(wLt,"t5"),wLt.forEach(t),y6r=r(xNe," \u2014 "),SU=n(xNe,"A",{href:!0});var ALt=s(SU);x6r=r(ALt,"TFT5ForConditionalGeneration"),ALt.forEach(t),$6r=r(xNe," (T5 model)"),xNe.forEach(t),k6r=i(le),m8=n(le,"LI",{});var $Ne=s(m8);s6e=n($Ne,"STRONG",{});var LLt=s(s6e);S6r=r(LLt,"tapas"),LLt.forEach(t),R6r=r($Ne," \u2014 "),RU=n($Ne,"A",{href:!0});var yLt=s(RU);P6r=r(yLt,"TFTapasForMaskedLM"),yLt.forEach(t),B6r=r($Ne," (TAPAS model)"),$Ne.forEach(t),I6r=i(le),g8=n(le,"LI",{});var kNe=s(g8);l6e=n(kNe,"STRONG",{});var xLt=s(l6e);N6r=r(xLt,"transfo-xl"),xLt.forEach(t),q6r=r(kNe," \u2014 "),PU=n(kNe,"A",{href:!0});var $Lt=s(PU);j6r=r($Lt,"TFTransfoXLLMHeadModel"),$Lt.forEach(t),D6r=r(kNe," (Transformer-XL model)"),kNe.forEach(t),G6r=i(le),h8=n(le,"LI",{});var SNe=s(h8);i6e=n(SNe,"STRONG",{});var kLt=s(i6e);O6r=r(kLt,"vit_mae"),kLt.forEach(t),V6r=r(SNe," \u2014 "),BU=n(SNe,"A",{href:!0});var SLt=s(BU);X6r=r(SLt,"TFViTMAEForPreTraining"),SLt.forEach(t),z6r=r(SNe," (ViTMAE model)"),SNe.forEach(t),W6r=i(le),p8=n(le,"LI",{});var RNe=s(p8);d6e=n(RNe,"STRONG",{});var RLt=s(d6e);Q6r=r(RLt,"xlm"),RLt.forEach(t),H6r=r(RNe," \u2014 "),IU=n(RNe,"A",{href:!0});var PLt=s(IU);U6r=r(PLt,"TFXLMWithLMHeadModel"),PLt.forEach(t),J6r=r(RNe," (XLM model)"),RNe.forEach(t),Y6r=i(le),_8=n(le,"LI",{});var PNe=s(_8);c6e=n(PNe,"STRONG",{});var BLt=s(c6e);K6r=r(BLt,"xlm-roberta"),BLt.forEach(t),Z6r=r(PNe," \u2014 "),NU=n(PNe,"A",{href:!0});var ILt=s(NU);eTr=r(ILt,"TFXLMRobertaForMaskedLM"),ILt.forEach(t),oTr=r(PNe," (XLM-RoBERTa model)"),PNe.forEach(t),rTr=i(le),u8=n(le,"LI",{});var BNe=s(u8);f6e=n(BNe,"STRONG",{});var NLt=s(f6e);tTr=r(NLt,"xlnet"),NLt.forEach(t),aTr=r(BNe," \u2014 "),qU=n(BNe,"A",{href:!0});var qLt=s(qU);nTr=r(qLt,"TFXLNetLMHeadModel"),qLt.forEach(t),sTr=r(BNe," (XLNet model)"),BNe.forEach(t),le.forEach(t),lTr=i(yl),T(b8.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),MVe=i(f),dc=n(f,"H2",{class:!0});var $ze=s(dc);v8=n($ze,"A",{id:!0,class:!0,href:!0});var jLt=s(v8);m6e=n(jLt,"SPAN",{});var DLt=s(m6e);T(k9.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),iTr=i($ze),g6e=n($ze,"SPAN",{});var GLt=s(g6e);dTr=r(GLt,"TFAutoModelForCausalLM"),GLt.forEach(t),$ze.forEach(t),EVe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(S9.$$.fragment,xl),cTr=i(xl),cc=n(xl,"P",{});var Pre=s(cc);fTr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=n(Pre,"A",{href:!0});var OLt=s(jU);mTr=r(OLt,"from_pretrained()"),OLt.forEach(t),gTr=r(Pre," class method or the "),DU=n(Pre,"A",{href:!0});var VLt=s(DU);hTr=r(VLt,"from_config()"),VLt.forEach(t),pTr=r(Pre,` class
method.`),Pre.forEach(t),_Tr=i(xl),R9=n(xl,"P",{});var kze=s(R9);uTr=r(kze,"This class cannot be instantiated directly using "),h6e=n(kze,"CODE",{});var XLt=s(h6e);bTr=r(XLt,"__init__()"),XLt.forEach(t),vTr=r(kze," (throws an error)."),kze.forEach(t),FTr=i(xl),Rt=n(xl,"DIV",{class:!0});var Nw=s(Rt);T(P9.$$.fragment,Nw),TTr=i(Nw),p6e=n(Nw,"P",{});var zLt=s(p6e);MTr=r(zLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zLt.forEach(t),ETr=i(Nw),fc=n(Nw,"P",{});var Bre=s(fc);CTr=r(Bre,`Note:
Loading a model from its configuration file does `),_6e=n(Bre,"STRONG",{});var WLt=s(_6e);wTr=r(WLt,"not"),WLt.forEach(t),ATr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Bre,"A",{href:!0});var QLt=s(GU);LTr=r(QLt,"from_pretrained()"),QLt.forEach(t),yTr=r(Bre," to load the model weights."),Bre.forEach(t),xTr=i(Nw),T(F8.$$.fragment,Nw),Nw.forEach(t),$Tr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(B9.$$.fragment,$l),kTr=i($l),u6e=n($l,"P",{});var HLt=s(u6e);STr=r(HLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HLt.forEach(t),RTr=i($l),ln=n($l,"P",{});var qw=s(ln);PTr=r(qw,"The model class to instantiate is selected based on the "),b6e=n(qw,"CODE",{});var ULt=s(b6e);BTr=r(ULt,"model_type"),ULt.forEach(t),ITr=r(qw,` property of the config object (either
passed as an argument or loaded from `),v6e=n(qw,"CODE",{});var JLt=s(v6e);NTr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),qTr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(qw,"CODE",{});var YLt=s(F6e);jTr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),DTr=r(qw,":"),qw.forEach(t),GTr=i($l),Me=n($l,"UL",{});var Ce=s(Me);T8=n(Ce,"LI",{});var INe=s(T8);T6e=n(INe,"STRONG",{});var KLt=s(T6e);OTr=r(KLt,"bert"),KLt.forEach(t),VTr=r(INe," \u2014 "),OU=n(INe,"A",{href:!0});var ZLt=s(OU);XTr=r(ZLt,"TFBertLMHeadModel"),ZLt.forEach(t),zTr=r(INe," (BERT model)"),INe.forEach(t),WTr=i(Ce),M8=n(Ce,"LI",{});var NNe=s(M8);M6e=n(NNe,"STRONG",{});var eyt=s(M6e);QTr=r(eyt,"camembert"),eyt.forEach(t),HTr=r(NNe," \u2014 "),VU=n(NNe,"A",{href:!0});var oyt=s(VU);UTr=r(oyt,"TFCamembertForCausalLM"),oyt.forEach(t),JTr=r(NNe," (CamemBERT model)"),NNe.forEach(t),YTr=i(Ce),E8=n(Ce,"LI",{});var qNe=s(E8);E6e=n(qNe,"STRONG",{});var ryt=s(E6e);KTr=r(ryt,"ctrl"),ryt.forEach(t),ZTr=r(qNe," \u2014 "),XU=n(qNe,"A",{href:!0});var tyt=s(XU);e7r=r(tyt,"TFCTRLLMHeadModel"),tyt.forEach(t),o7r=r(qNe," (CTRL model)"),qNe.forEach(t),r7r=i(Ce),C8=n(Ce,"LI",{});var jNe=s(C8);C6e=n(jNe,"STRONG",{});var ayt=s(C6e);t7r=r(ayt,"gpt2"),ayt.forEach(t),a7r=r(jNe," \u2014 "),zU=n(jNe,"A",{href:!0});var nyt=s(zU);n7r=r(nyt,"TFGPT2LMHeadModel"),nyt.forEach(t),s7r=r(jNe," (OpenAI GPT-2 model)"),jNe.forEach(t),l7r=i(Ce),w8=n(Ce,"LI",{});var DNe=s(w8);w6e=n(DNe,"STRONG",{});var syt=s(w6e);i7r=r(syt,"gptj"),syt.forEach(t),d7r=r(DNe," \u2014 "),WU=n(DNe,"A",{href:!0});var lyt=s(WU);c7r=r(lyt,"TFGPTJForCausalLM"),lyt.forEach(t),f7r=r(DNe," (GPT-J model)"),DNe.forEach(t),m7r=i(Ce),A8=n(Ce,"LI",{});var GNe=s(A8);A6e=n(GNe,"STRONG",{});var iyt=s(A6e);g7r=r(iyt,"openai-gpt"),iyt.forEach(t),h7r=r(GNe," \u2014 "),QU=n(GNe,"A",{href:!0});var dyt=s(QU);p7r=r(dyt,"TFOpenAIGPTLMHeadModel"),dyt.forEach(t),_7r=r(GNe," (OpenAI GPT model)"),GNe.forEach(t),u7r=i(Ce),L8=n(Ce,"LI",{});var ONe=s(L8);L6e=n(ONe,"STRONG",{});var cyt=s(L6e);b7r=r(cyt,"opt"),cyt.forEach(t),v7r=r(ONe," \u2014 "),HU=n(ONe,"A",{href:!0});var fyt=s(HU);F7r=r(fyt,"TFOPTForCausalLM"),fyt.forEach(t),T7r=r(ONe," (OPT model)"),ONe.forEach(t),M7r=i(Ce),y8=n(Ce,"LI",{});var VNe=s(y8);y6e=n(VNe,"STRONG",{});var myt=s(y6e);E7r=r(myt,"rembert"),myt.forEach(t),C7r=r(VNe," \u2014 "),UU=n(VNe,"A",{href:!0});var gyt=s(UU);w7r=r(gyt,"TFRemBertForCausalLM"),gyt.forEach(t),A7r=r(VNe," (RemBERT model)"),VNe.forEach(t),L7r=i(Ce),x8=n(Ce,"LI",{});var XNe=s(x8);x6e=n(XNe,"STRONG",{});var hyt=s(x6e);y7r=r(hyt,"roberta"),hyt.forEach(t),x7r=r(XNe," \u2014 "),JU=n(XNe,"A",{href:!0});var pyt=s(JU);$7r=r(pyt,"TFRobertaForCausalLM"),pyt.forEach(t),k7r=r(XNe," (RoBERTa model)"),XNe.forEach(t),S7r=i(Ce),$8=n(Ce,"LI",{});var zNe=s($8);$6e=n(zNe,"STRONG",{});var _yt=s($6e);R7r=r(_yt,"roformer"),_yt.forEach(t),P7r=r(zNe," \u2014 "),YU=n(zNe,"A",{href:!0});var uyt=s(YU);B7r=r(uyt,"TFRoFormerForCausalLM"),uyt.forEach(t),I7r=r(zNe," (RoFormer model)"),zNe.forEach(t),N7r=i(Ce),k8=n(Ce,"LI",{});var WNe=s(k8);k6e=n(WNe,"STRONG",{});var byt=s(k6e);q7r=r(byt,"transfo-xl"),byt.forEach(t),j7r=r(WNe," \u2014 "),KU=n(WNe,"A",{href:!0});var vyt=s(KU);D7r=r(vyt,"TFTransfoXLLMHeadModel"),vyt.forEach(t),G7r=r(WNe," (Transformer-XL model)"),WNe.forEach(t),O7r=i(Ce),S8=n(Ce,"LI",{});var QNe=s(S8);S6e=n(QNe,"STRONG",{});var Fyt=s(S6e);V7r=r(Fyt,"xlm"),Fyt.forEach(t),X7r=r(QNe," \u2014 "),ZU=n(QNe,"A",{href:!0});var Tyt=s(ZU);z7r=r(Tyt,"TFXLMWithLMHeadModel"),Tyt.forEach(t),W7r=r(QNe," (XLM model)"),QNe.forEach(t),Q7r=i(Ce),R8=n(Ce,"LI",{});var HNe=s(R8);R6e=n(HNe,"STRONG",{});var Myt=s(R6e);H7r=r(Myt,"xlnet"),Myt.forEach(t),U7r=r(HNe," \u2014 "),eJ=n(HNe,"A",{href:!0});var Eyt=s(eJ);J7r=r(Eyt,"TFXLNetLMHeadModel"),Eyt.forEach(t),Y7r=r(HNe," (XLNet model)"),HNe.forEach(t),Ce.forEach(t),K7r=i($l),T(P8.$$.fragment,$l),$l.forEach(t),xl.forEach(t),CVe=i(f),mc=n(f,"H2",{class:!0});var Sze=s(mc);B8=n(Sze,"A",{id:!0,class:!0,href:!0});var Cyt=s(B8);P6e=n(Cyt,"SPAN",{});var wyt=s(P6e);T(I9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),Z7r=i(Sze),B6e=n(Sze,"SPAN",{});var Ayt=s(B6e);e8r=r(Ayt,"TFAutoModelForImageClassification"),Ayt.forEach(t),Sze.forEach(t),wVe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(N9.$$.fragment,kl),o8r=i(kl),gc=n(kl,"P",{});var Ire=s(gc);r8r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=n(Ire,"A",{href:!0});var Lyt=s(oJ);t8r=r(Lyt,"from_pretrained()"),Lyt.forEach(t),a8r=r(Ire," class method or the "),rJ=n(Ire,"A",{href:!0});var yyt=s(rJ);n8r=r(yyt,"from_config()"),yyt.forEach(t),s8r=r(Ire,` class
method.`),Ire.forEach(t),l8r=i(kl),q9=n(kl,"P",{});var Rze=s(q9);i8r=r(Rze,"This class cannot be instantiated directly using "),I6e=n(Rze,"CODE",{});var xyt=s(I6e);d8r=r(xyt,"__init__()"),xyt.forEach(t),c8r=r(Rze," (throws an error)."),Rze.forEach(t),f8r=i(kl),Pt=n(kl,"DIV",{class:!0});var jw=s(Pt);T(j9.$$.fragment,jw),m8r=i(jw),N6e=n(jw,"P",{});var $yt=s(N6e);g8r=r($yt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$yt.forEach(t),h8r=i(jw),hc=n(jw,"P",{});var Nre=s(hc);p8r=r(Nre,`Note:
Loading a model from its configuration file does `),q6e=n(Nre,"STRONG",{});var kyt=s(q6e);_8r=r(kyt,"not"),kyt.forEach(t),u8r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(Nre,"A",{href:!0});var Syt=s(tJ);b8r=r(Syt,"from_pretrained()"),Syt.forEach(t),v8r=r(Nre," to load the model weights."),Nre.forEach(t),F8r=i(jw),T(I8.$$.fragment,jw),jw.forEach(t),T8r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(D9.$$.fragment,Sl),M8r=i(Sl),j6e=n(Sl,"P",{});var Ryt=s(j6e);E8r=r(Ryt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ryt.forEach(t),C8r=i(Sl),dn=n(Sl,"P",{});var Dw=s(dn);w8r=r(Dw,"The model class to instantiate is selected based on the "),D6e=n(Dw,"CODE",{});var Pyt=s(D6e);A8r=r(Pyt,"model_type"),Pyt.forEach(t),L8r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),G6e=n(Dw,"CODE",{});var Byt=s(G6e);y8r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),x8r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(Dw,"CODE",{});var Iyt=s(O6e);$8r=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),k8r=r(Dw,":"),Dw.forEach(t),S8r=i(Sl),rt=n(Sl,"UL",{});var Rl=s(rt);N8=n(Rl,"LI",{});var UNe=s(N8);V6e=n(UNe,"STRONG",{});var Nyt=s(V6e);R8r=r(Nyt,"convnext"),Nyt.forEach(t),P8r=r(UNe," \u2014 "),aJ=n(UNe,"A",{href:!0});var qyt=s(aJ);B8r=r(qyt,"TFConvNextForImageClassification"),qyt.forEach(t),I8r=r(UNe," (ConvNeXT model)"),UNe.forEach(t),N8r=i(Rl),q8=n(Rl,"LI",{});var JNe=s(q8);X6e=n(JNe,"STRONG",{});var jyt=s(X6e);q8r=r(jyt,"data2vec-vision"),jyt.forEach(t),j8r=r(JNe," \u2014 "),nJ=n(JNe,"A",{href:!0});var Dyt=s(nJ);D8r=r(Dyt,"TFData2VecVisionForImageClassification"),Dyt.forEach(t),G8r=r(JNe," (Data2VecVision model)"),JNe.forEach(t),O8r=i(Rl),Hs=n(Rl,"LI",{});var dS=s(Hs);z6e=n(dS,"STRONG",{});var Gyt=s(z6e);V8r=r(Gyt,"deit"),Gyt.forEach(t),X8r=r(dS," \u2014 "),sJ=n(dS,"A",{href:!0});var Oyt=s(sJ);z8r=r(Oyt,"TFDeiTForImageClassification"),Oyt.forEach(t),W8r=r(dS," or "),lJ=n(dS,"A",{href:!0});var Vyt=s(lJ);Q8r=r(Vyt,"TFDeiTForImageClassificationWithTeacher"),Vyt.forEach(t),H8r=r(dS," (DeiT model)"),dS.forEach(t),U8r=i(Rl),j8=n(Rl,"LI",{});var YNe=s(j8);W6e=n(YNe,"STRONG",{});var Xyt=s(W6e);J8r=r(Xyt,"swin"),Xyt.forEach(t),Y8r=r(YNe," \u2014 "),iJ=n(YNe,"A",{href:!0});var zyt=s(iJ);K8r=r(zyt,"TFSwinForImageClassification"),zyt.forEach(t),Z8r=r(YNe," (Swin Transformer model)"),YNe.forEach(t),eMr=i(Rl),D8=n(Rl,"LI",{});var KNe=s(D8);Q6e=n(KNe,"STRONG",{});var Wyt=s(Q6e);oMr=r(Wyt,"vit"),Wyt.forEach(t),rMr=r(KNe," \u2014 "),dJ=n(KNe,"A",{href:!0});var Qyt=s(dJ);tMr=r(Qyt,"TFViTForImageClassification"),Qyt.forEach(t),aMr=r(KNe," (ViT model)"),KNe.forEach(t),Rl.forEach(t),nMr=i(Sl),T(G8.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),AVe=i(f),pc=n(f,"H2",{class:!0});var Pze=s(pc);O8=n(Pze,"A",{id:!0,class:!0,href:!0});var Hyt=s(O8);H6e=n(Hyt,"SPAN",{});var Uyt=s(H6e);T(G9.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),sMr=i(Pze),U6e=n(Pze,"SPAN",{});var Jyt=s(U6e);lMr=r(Jyt,"TFAutoModelForMaskedLM"),Jyt.forEach(t),Pze.forEach(t),LVe=i(f),ar=n(f,"DIV",{class:!0});var Pl=s(ar);T(O9.$$.fragment,Pl),iMr=i(Pl),_c=n(Pl,"P",{});var qre=s(_c);dMr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=n(qre,"A",{href:!0});var Yyt=s(cJ);cMr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),fMr=r(qre," class method or the "),fJ=n(qre,"A",{href:!0});var Kyt=s(fJ);mMr=r(Kyt,"from_config()"),Kyt.forEach(t),gMr=r(qre,` class
method.`),qre.forEach(t),hMr=i(Pl),V9=n(Pl,"P",{});var Bze=s(V9);pMr=r(Bze,"This class cannot be instantiated directly using "),J6e=n(Bze,"CODE",{});var Zyt=s(J6e);_Mr=r(Zyt,"__init__()"),Zyt.forEach(t),uMr=r(Bze," (throws an error)."),Bze.forEach(t),bMr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var Gw=s(Bt);T(X9.$$.fragment,Gw),vMr=i(Gw),Y6e=n(Gw,"P",{});var e9t=s(Y6e);FMr=r(e9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e9t.forEach(t),TMr=i(Gw),uc=n(Gw,"P",{});var jre=s(uc);MMr=r(jre,`Note:
Loading a model from its configuration file does `),K6e=n(jre,"STRONG",{});var o9t=s(K6e);EMr=r(o9t,"not"),o9t.forEach(t),CMr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(jre,"A",{href:!0});var r9t=s(mJ);wMr=r(r9t,"from_pretrained()"),r9t.forEach(t),AMr=r(jre," to load the model weights."),jre.forEach(t),LMr=i(Gw),T(V8.$$.fragment,Gw),Gw.forEach(t),yMr=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(z9.$$.fragment,Bl),xMr=i(Bl),Z6e=n(Bl,"P",{});var t9t=s(Z6e);$Mr=r(t9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t9t.forEach(t),kMr=i(Bl),cn=n(Bl,"P",{});var Ow=s(cn);SMr=r(Ow,"The model class to instantiate is selected based on the "),eTe=n(Ow,"CODE",{});var a9t=s(eTe);RMr=r(a9t,"model_type"),a9t.forEach(t),PMr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),oTe=n(Ow,"CODE",{});var n9t=s(oTe);BMr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),IMr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(Ow,"CODE",{});var s9t=s(rTe);NMr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),qMr=r(Ow,":"),Ow.forEach(t),jMr=i(Bl),ie=n(Bl,"UL",{});var fe=s(ie);X8=n(fe,"LI",{});var ZNe=s(X8);tTe=n(ZNe,"STRONG",{});var l9t=s(tTe);DMr=r(l9t,"albert"),l9t.forEach(t),GMr=r(ZNe," \u2014 "),gJ=n(ZNe,"A",{href:!0});var i9t=s(gJ);OMr=r(i9t,"TFAlbertForMaskedLM"),i9t.forEach(t),VMr=r(ZNe," (ALBERT model)"),ZNe.forEach(t),XMr=i(fe),z8=n(fe,"LI",{});var eqe=s(z8);aTe=n(eqe,"STRONG",{});var d9t=s(aTe);zMr=r(d9t,"bert"),d9t.forEach(t),WMr=r(eqe," \u2014 "),hJ=n(eqe,"A",{href:!0});var c9t=s(hJ);QMr=r(c9t,"TFBertForMaskedLM"),c9t.forEach(t),HMr=r(eqe," (BERT model)"),eqe.forEach(t),UMr=i(fe),W8=n(fe,"LI",{});var oqe=s(W8);nTe=n(oqe,"STRONG",{});var f9t=s(nTe);JMr=r(f9t,"camembert"),f9t.forEach(t),YMr=r(oqe," \u2014 "),pJ=n(oqe,"A",{href:!0});var m9t=s(pJ);KMr=r(m9t,"TFCamembertForMaskedLM"),m9t.forEach(t),ZMr=r(oqe," (CamemBERT model)"),oqe.forEach(t),eEr=i(fe),Q8=n(fe,"LI",{});var rqe=s(Q8);sTe=n(rqe,"STRONG",{});var g9t=s(sTe);oEr=r(g9t,"convbert"),g9t.forEach(t),rEr=r(rqe," \u2014 "),_J=n(rqe,"A",{href:!0});var h9t=s(_J);tEr=r(h9t,"TFConvBertForMaskedLM"),h9t.forEach(t),aEr=r(rqe," (ConvBERT model)"),rqe.forEach(t),nEr=i(fe),H8=n(fe,"LI",{});var tqe=s(H8);lTe=n(tqe,"STRONG",{});var p9t=s(lTe);sEr=r(p9t,"deberta"),p9t.forEach(t),lEr=r(tqe," \u2014 "),uJ=n(tqe,"A",{href:!0});var _9t=s(uJ);iEr=r(_9t,"TFDebertaForMaskedLM"),_9t.forEach(t),dEr=r(tqe," (DeBERTa model)"),tqe.forEach(t),cEr=i(fe),U8=n(fe,"LI",{});var aqe=s(U8);iTe=n(aqe,"STRONG",{});var u9t=s(iTe);fEr=r(u9t,"deberta-v2"),u9t.forEach(t),mEr=r(aqe," \u2014 "),bJ=n(aqe,"A",{href:!0});var b9t=s(bJ);gEr=r(b9t,"TFDebertaV2ForMaskedLM"),b9t.forEach(t),hEr=r(aqe," (DeBERTa-v2 model)"),aqe.forEach(t),pEr=i(fe),J8=n(fe,"LI",{});var nqe=s(J8);dTe=n(nqe,"STRONG",{});var v9t=s(dTe);_Er=r(v9t,"distilbert"),v9t.forEach(t),uEr=r(nqe," \u2014 "),vJ=n(nqe,"A",{href:!0});var F9t=s(vJ);bEr=r(F9t,"TFDistilBertForMaskedLM"),F9t.forEach(t),vEr=r(nqe," (DistilBERT model)"),nqe.forEach(t),FEr=i(fe),Y8=n(fe,"LI",{});var sqe=s(Y8);cTe=n(sqe,"STRONG",{});var T9t=s(cTe);TEr=r(T9t,"electra"),T9t.forEach(t),MEr=r(sqe," \u2014 "),FJ=n(sqe,"A",{href:!0});var M9t=s(FJ);EEr=r(M9t,"TFElectraForMaskedLM"),M9t.forEach(t),CEr=r(sqe," (ELECTRA model)"),sqe.forEach(t),wEr=i(fe),K8=n(fe,"LI",{});var lqe=s(K8);fTe=n(lqe,"STRONG",{});var E9t=s(fTe);AEr=r(E9t,"flaubert"),E9t.forEach(t),LEr=r(lqe," \u2014 "),TJ=n(lqe,"A",{href:!0});var C9t=s(TJ);yEr=r(C9t,"TFFlaubertWithLMHeadModel"),C9t.forEach(t),xEr=r(lqe," (FlauBERT model)"),lqe.forEach(t),$Er=i(fe),Z8=n(fe,"LI",{});var iqe=s(Z8);mTe=n(iqe,"STRONG",{});var w9t=s(mTe);kEr=r(w9t,"funnel"),w9t.forEach(t),SEr=r(iqe," \u2014 "),MJ=n(iqe,"A",{href:!0});var A9t=s(MJ);REr=r(A9t,"TFFunnelForMaskedLM"),A9t.forEach(t),PEr=r(iqe," (Funnel Transformer model)"),iqe.forEach(t),BEr=i(fe),eM=n(fe,"LI",{});var dqe=s(eM);gTe=n(dqe,"STRONG",{});var L9t=s(gTe);IEr=r(L9t,"layoutlm"),L9t.forEach(t),NEr=r(dqe," \u2014 "),EJ=n(dqe,"A",{href:!0});var y9t=s(EJ);qEr=r(y9t,"TFLayoutLMForMaskedLM"),y9t.forEach(t),jEr=r(dqe," (LayoutLM model)"),dqe.forEach(t),DEr=i(fe),oM=n(fe,"LI",{});var cqe=s(oM);hTe=n(cqe,"STRONG",{});var x9t=s(hTe);GEr=r(x9t,"longformer"),x9t.forEach(t),OEr=r(cqe," \u2014 "),CJ=n(cqe,"A",{href:!0});var $9t=s(CJ);VEr=r($9t,"TFLongformerForMaskedLM"),$9t.forEach(t),XEr=r(cqe," (Longformer model)"),cqe.forEach(t),zEr=i(fe),rM=n(fe,"LI",{});var fqe=s(rM);pTe=n(fqe,"STRONG",{});var k9t=s(pTe);WEr=r(k9t,"mobilebert"),k9t.forEach(t),QEr=r(fqe," \u2014 "),wJ=n(fqe,"A",{href:!0});var S9t=s(wJ);HEr=r(S9t,"TFMobileBertForMaskedLM"),S9t.forEach(t),UEr=r(fqe," (MobileBERT model)"),fqe.forEach(t),JEr=i(fe),tM=n(fe,"LI",{});var mqe=s(tM);_Te=n(mqe,"STRONG",{});var R9t=s(_Te);YEr=r(R9t,"mpnet"),R9t.forEach(t),KEr=r(mqe," \u2014 "),AJ=n(mqe,"A",{href:!0});var P9t=s(AJ);ZEr=r(P9t,"TFMPNetForMaskedLM"),P9t.forEach(t),e4r=r(mqe," (MPNet model)"),mqe.forEach(t),o4r=i(fe),aM=n(fe,"LI",{});var gqe=s(aM);uTe=n(gqe,"STRONG",{});var B9t=s(uTe);r4r=r(B9t,"rembert"),B9t.forEach(t),t4r=r(gqe," \u2014 "),LJ=n(gqe,"A",{href:!0});var I9t=s(LJ);a4r=r(I9t,"TFRemBertForMaskedLM"),I9t.forEach(t),n4r=r(gqe," (RemBERT model)"),gqe.forEach(t),s4r=i(fe),nM=n(fe,"LI",{});var hqe=s(nM);bTe=n(hqe,"STRONG",{});var N9t=s(bTe);l4r=r(N9t,"roberta"),N9t.forEach(t),i4r=r(hqe," \u2014 "),yJ=n(hqe,"A",{href:!0});var q9t=s(yJ);d4r=r(q9t,"TFRobertaForMaskedLM"),q9t.forEach(t),c4r=r(hqe," (RoBERTa model)"),hqe.forEach(t),f4r=i(fe),sM=n(fe,"LI",{});var pqe=s(sM);vTe=n(pqe,"STRONG",{});var j9t=s(vTe);m4r=r(j9t,"roformer"),j9t.forEach(t),g4r=r(pqe," \u2014 "),xJ=n(pqe,"A",{href:!0});var D9t=s(xJ);h4r=r(D9t,"TFRoFormerForMaskedLM"),D9t.forEach(t),p4r=r(pqe," (RoFormer model)"),pqe.forEach(t),_4r=i(fe),lM=n(fe,"LI",{});var _qe=s(lM);FTe=n(_qe,"STRONG",{});var G9t=s(FTe);u4r=r(G9t,"tapas"),G9t.forEach(t),b4r=r(_qe," \u2014 "),$J=n(_qe,"A",{href:!0});var O9t=s($J);v4r=r(O9t,"TFTapasForMaskedLM"),O9t.forEach(t),F4r=r(_qe," (TAPAS model)"),_qe.forEach(t),T4r=i(fe),iM=n(fe,"LI",{});var uqe=s(iM);TTe=n(uqe,"STRONG",{});var V9t=s(TTe);M4r=r(V9t,"xlm"),V9t.forEach(t),E4r=r(uqe," \u2014 "),kJ=n(uqe,"A",{href:!0});var X9t=s(kJ);C4r=r(X9t,"TFXLMWithLMHeadModel"),X9t.forEach(t),w4r=r(uqe," (XLM model)"),uqe.forEach(t),A4r=i(fe),dM=n(fe,"LI",{});var bqe=s(dM);MTe=n(bqe,"STRONG",{});var z9t=s(MTe);L4r=r(z9t,"xlm-roberta"),z9t.forEach(t),y4r=r(bqe," \u2014 "),SJ=n(bqe,"A",{href:!0});var W9t=s(SJ);x4r=r(W9t,"TFXLMRobertaForMaskedLM"),W9t.forEach(t),$4r=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),fe.forEach(t),k4r=i(Bl),T(cM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),yVe=i(f),bc=n(f,"H2",{class:!0});var Ize=s(bc);fM=n(Ize,"A",{id:!0,class:!0,href:!0});var Q9t=s(fM);ETe=n(Q9t,"SPAN",{});var H9t=s(ETe);T(W9.$$.fragment,H9t),H9t.forEach(t),Q9t.forEach(t),S4r=i(Ize),CTe=n(Ize,"SPAN",{});var U9t=s(CTe);R4r=r(U9t,"TFAutoModelForSeq2SeqLM"),U9t.forEach(t),Ize.forEach(t),xVe=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(Q9.$$.fragment,Il),P4r=i(Il),vc=n(Il,"P",{});var Dre=s(vc);B4r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RJ=n(Dre,"A",{href:!0});var J9t=s(RJ);I4r=r(J9t,"from_pretrained()"),J9t.forEach(t),N4r=r(Dre," class method or the "),PJ=n(Dre,"A",{href:!0});var Y9t=s(PJ);q4r=r(Y9t,"from_config()"),Y9t.forEach(t),j4r=r(Dre,` class
method.`),Dre.forEach(t),D4r=i(Il),H9=n(Il,"P",{});var Nze=s(H9);G4r=r(Nze,"This class cannot be instantiated directly using "),wTe=n(Nze,"CODE",{});var K9t=s(wTe);O4r=r(K9t,"__init__()"),K9t.forEach(t),V4r=r(Nze," (throws an error)."),Nze.forEach(t),X4r=i(Il),It=n(Il,"DIV",{class:!0});var Vw=s(It);T(U9.$$.fragment,Vw),z4r=i(Vw),ATe=n(Vw,"P",{});var Z9t=s(ATe);W4r=r(Z9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z9t.forEach(t),Q4r=i(Vw),Fc=n(Vw,"P",{});var Gre=s(Fc);H4r=r(Gre,`Note:
Loading a model from its configuration file does `),LTe=n(Gre,"STRONG",{});var ext=s(LTe);U4r=r(ext,"not"),ext.forEach(t),J4r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(Gre,"A",{href:!0});var oxt=s(BJ);Y4r=r(oxt,"from_pretrained()"),oxt.forEach(t),K4r=r(Gre," to load the model weights."),Gre.forEach(t),Z4r=i(Vw),T(mM.$$.fragment,Vw),Vw.forEach(t),eCr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(J9.$$.fragment,Nl),oCr=i(Nl),yTe=n(Nl,"P",{});var rxt=s(yTe);rCr=r(rxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rxt.forEach(t),tCr=i(Nl),fn=n(Nl,"P",{});var Xw=s(fn);aCr=r(Xw,"The model class to instantiate is selected based on the "),xTe=n(Xw,"CODE",{});var txt=s(xTe);nCr=r(txt,"model_type"),txt.forEach(t),sCr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),$Te=n(Xw,"CODE",{});var axt=s($Te);lCr=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),iCr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(Xw,"CODE",{});var nxt=s(kTe);dCr=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),cCr=r(Xw,":"),Xw.forEach(t),fCr=i(Nl),ye=n(Nl,"UL",{});var Ie=s(ye);gM=n(Ie,"LI",{});var vqe=s(gM);STe=n(vqe,"STRONG",{});var sxt=s(STe);mCr=r(sxt,"bart"),sxt.forEach(t),gCr=r(vqe," \u2014 "),IJ=n(vqe,"A",{href:!0});var lxt=s(IJ);hCr=r(lxt,"TFBartForConditionalGeneration"),lxt.forEach(t),pCr=r(vqe," (BART model)"),vqe.forEach(t),_Cr=i(Ie),hM=n(Ie,"LI",{});var Fqe=s(hM);RTe=n(Fqe,"STRONG",{});var ixt=s(RTe);uCr=r(ixt,"blenderbot"),ixt.forEach(t),bCr=r(Fqe," \u2014 "),NJ=n(Fqe,"A",{href:!0});var dxt=s(NJ);vCr=r(dxt,"TFBlenderbotForConditionalGeneration"),dxt.forEach(t),FCr=r(Fqe," (Blenderbot model)"),Fqe.forEach(t),TCr=i(Ie),pM=n(Ie,"LI",{});var Tqe=s(pM);PTe=n(Tqe,"STRONG",{});var cxt=s(PTe);MCr=r(cxt,"blenderbot-small"),cxt.forEach(t),ECr=r(Tqe," \u2014 "),qJ=n(Tqe,"A",{href:!0});var fxt=s(qJ);CCr=r(fxt,"TFBlenderbotSmallForConditionalGeneration"),fxt.forEach(t),wCr=r(Tqe," (BlenderbotSmall model)"),Tqe.forEach(t),ACr=i(Ie),_M=n(Ie,"LI",{});var Mqe=s(_M);BTe=n(Mqe,"STRONG",{});var mxt=s(BTe);LCr=r(mxt,"encoder-decoder"),mxt.forEach(t),yCr=r(Mqe," \u2014 "),jJ=n(Mqe,"A",{href:!0});var gxt=s(jJ);xCr=r(gxt,"TFEncoderDecoderModel"),gxt.forEach(t),$Cr=r(Mqe," (Encoder decoder model)"),Mqe.forEach(t),kCr=i(Ie),uM=n(Ie,"LI",{});var Eqe=s(uM);ITe=n(Eqe,"STRONG",{});var hxt=s(ITe);SCr=r(hxt,"led"),hxt.forEach(t),RCr=r(Eqe," \u2014 "),DJ=n(Eqe,"A",{href:!0});var pxt=s(DJ);PCr=r(pxt,"TFLEDForConditionalGeneration"),pxt.forEach(t),BCr=r(Eqe," (LED model)"),Eqe.forEach(t),ICr=i(Ie),bM=n(Ie,"LI",{});var Cqe=s(bM);NTe=n(Cqe,"STRONG",{});var _xt=s(NTe);NCr=r(_xt,"marian"),_xt.forEach(t),qCr=r(Cqe," \u2014 "),GJ=n(Cqe,"A",{href:!0});var uxt=s(GJ);jCr=r(uxt,"TFMarianMTModel"),uxt.forEach(t),DCr=r(Cqe," (Marian model)"),Cqe.forEach(t),GCr=i(Ie),vM=n(Ie,"LI",{});var wqe=s(vM);qTe=n(wqe,"STRONG",{});var bxt=s(qTe);OCr=r(bxt,"mbart"),bxt.forEach(t),VCr=r(wqe," \u2014 "),OJ=n(wqe,"A",{href:!0});var vxt=s(OJ);XCr=r(vxt,"TFMBartForConditionalGeneration"),vxt.forEach(t),zCr=r(wqe," (mBART model)"),wqe.forEach(t),WCr=i(Ie),FM=n(Ie,"LI",{});var Aqe=s(FM);jTe=n(Aqe,"STRONG",{});var Fxt=s(jTe);QCr=r(Fxt,"mt5"),Fxt.forEach(t),HCr=r(Aqe," \u2014 "),VJ=n(Aqe,"A",{href:!0});var Txt=s(VJ);UCr=r(Txt,"TFMT5ForConditionalGeneration"),Txt.forEach(t),JCr=r(Aqe," (MT5 model)"),Aqe.forEach(t),YCr=i(Ie),TM=n(Ie,"LI",{});var Lqe=s(TM);DTe=n(Lqe,"STRONG",{});var Mxt=s(DTe);KCr=r(Mxt,"pegasus"),Mxt.forEach(t),ZCr=r(Lqe," \u2014 "),XJ=n(Lqe,"A",{href:!0});var Ext=s(XJ);e5r=r(Ext,"TFPegasusForConditionalGeneration"),Ext.forEach(t),o5r=r(Lqe," (Pegasus model)"),Lqe.forEach(t),r5r=i(Ie),MM=n(Ie,"LI",{});var yqe=s(MM);GTe=n(yqe,"STRONG",{});var Cxt=s(GTe);t5r=r(Cxt,"t5"),Cxt.forEach(t),a5r=r(yqe," \u2014 "),zJ=n(yqe,"A",{href:!0});var wxt=s(zJ);n5r=r(wxt,"TFT5ForConditionalGeneration"),wxt.forEach(t),s5r=r(yqe," (T5 model)"),yqe.forEach(t),Ie.forEach(t),l5r=i(Nl),T(EM.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),$Ve=i(f),Tc=n(f,"H2",{class:!0});var qze=s(Tc);CM=n(qze,"A",{id:!0,class:!0,href:!0});var Axt=s(CM);OTe=n(Axt,"SPAN",{});var Lxt=s(OTe);T(Y9.$$.fragment,Lxt),Lxt.forEach(t),Axt.forEach(t),i5r=i(qze),VTe=n(qze,"SPAN",{});var yxt=s(VTe);d5r=r(yxt,"TFAutoModelForSequenceClassification"),yxt.forEach(t),qze.forEach(t),kVe=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(K9.$$.fragment,ql),c5r=i(ql),Mc=n(ql,"P",{});var Ore=s(Mc);f5r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WJ=n(Ore,"A",{href:!0});var xxt=s(WJ);m5r=r(xxt,"from_pretrained()"),xxt.forEach(t),g5r=r(Ore," class method or the "),QJ=n(Ore,"A",{href:!0});var $xt=s(QJ);h5r=r($xt,"from_config()"),$xt.forEach(t),p5r=r(Ore,` class
method.`),Ore.forEach(t),_5r=i(ql),Z9=n(ql,"P",{});var jze=s(Z9);u5r=r(jze,"This class cannot be instantiated directly using "),XTe=n(jze,"CODE",{});var kxt=s(XTe);b5r=r(kxt,"__init__()"),kxt.forEach(t),v5r=r(jze," (throws an error)."),jze.forEach(t),F5r=i(ql),Nt=n(ql,"DIV",{class:!0});var zw=s(Nt);T(ex.$$.fragment,zw),T5r=i(zw),zTe=n(zw,"P",{});var Sxt=s(zTe);M5r=r(Sxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sxt.forEach(t),E5r=i(zw),Ec=n(zw,"P",{});var Vre=s(Ec);C5r=r(Vre,`Note:
Loading a model from its configuration file does `),WTe=n(Vre,"STRONG",{});var Rxt=s(WTe);w5r=r(Rxt,"not"),Rxt.forEach(t),A5r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(Vre,"A",{href:!0});var Pxt=s(HJ);L5r=r(Pxt,"from_pretrained()"),Pxt.forEach(t),y5r=r(Vre," to load the model weights."),Vre.forEach(t),x5r=i(zw),T(wM.$$.fragment,zw),zw.forEach(t),$5r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(ox.$$.fragment,jl),k5r=i(jl),QTe=n(jl,"P",{});var Bxt=s(QTe);S5r=r(Bxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bxt.forEach(t),R5r=i(jl),mn=n(jl,"P",{});var Ww=s(mn);P5r=r(Ww,"The model class to instantiate is selected based on the "),HTe=n(Ww,"CODE",{});var Ixt=s(HTe);B5r=r(Ixt,"model_type"),Ixt.forEach(t),I5r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),UTe=n(Ww,"CODE",{});var Nxt=s(UTe);N5r=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),q5r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(Ww,"CODE",{});var qxt=s(JTe);j5r=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),D5r=r(Ww,":"),Ww.forEach(t),G5r=i(jl),te=n(jl,"UL",{});var ne=s(te);AM=n(ne,"LI",{});var xqe=s(AM);YTe=n(xqe,"STRONG",{});var jxt=s(YTe);O5r=r(jxt,"albert"),jxt.forEach(t),V5r=r(xqe," \u2014 "),UJ=n(xqe,"A",{href:!0});var Dxt=s(UJ);X5r=r(Dxt,"TFAlbertForSequenceClassification"),Dxt.forEach(t),z5r=r(xqe," (ALBERT model)"),xqe.forEach(t),W5r=i(ne),LM=n(ne,"LI",{});var $qe=s(LM);KTe=n($qe,"STRONG",{});var Gxt=s(KTe);Q5r=r(Gxt,"bert"),Gxt.forEach(t),H5r=r($qe," \u2014 "),JJ=n($qe,"A",{href:!0});var Oxt=s(JJ);U5r=r(Oxt,"TFBertForSequenceClassification"),Oxt.forEach(t),J5r=r($qe," (BERT model)"),$qe.forEach(t),Y5r=i(ne),yM=n(ne,"LI",{});var kqe=s(yM);ZTe=n(kqe,"STRONG",{});var Vxt=s(ZTe);K5r=r(Vxt,"camembert"),Vxt.forEach(t),Z5r=r(kqe," \u2014 "),YJ=n(kqe,"A",{href:!0});var Xxt=s(YJ);e3r=r(Xxt,"TFCamembertForSequenceClassification"),Xxt.forEach(t),o3r=r(kqe," (CamemBERT model)"),kqe.forEach(t),r3r=i(ne),xM=n(ne,"LI",{});var Sqe=s(xM);e7e=n(Sqe,"STRONG",{});var zxt=s(e7e);t3r=r(zxt,"convbert"),zxt.forEach(t),a3r=r(Sqe," \u2014 "),KJ=n(Sqe,"A",{href:!0});var Wxt=s(KJ);n3r=r(Wxt,"TFConvBertForSequenceClassification"),Wxt.forEach(t),s3r=r(Sqe," (ConvBERT model)"),Sqe.forEach(t),l3r=i(ne),$M=n(ne,"LI",{});var Rqe=s($M);o7e=n(Rqe,"STRONG",{});var Qxt=s(o7e);i3r=r(Qxt,"ctrl"),Qxt.forEach(t),d3r=r(Rqe," \u2014 "),ZJ=n(Rqe,"A",{href:!0});var Hxt=s(ZJ);c3r=r(Hxt,"TFCTRLForSequenceClassification"),Hxt.forEach(t),f3r=r(Rqe," (CTRL model)"),Rqe.forEach(t),m3r=i(ne),kM=n(ne,"LI",{});var Pqe=s(kM);r7e=n(Pqe,"STRONG",{});var Uxt=s(r7e);g3r=r(Uxt,"deberta"),Uxt.forEach(t),h3r=r(Pqe," \u2014 "),eY=n(Pqe,"A",{href:!0});var Jxt=s(eY);p3r=r(Jxt,"TFDebertaForSequenceClassification"),Jxt.forEach(t),_3r=r(Pqe," (DeBERTa model)"),Pqe.forEach(t),u3r=i(ne),SM=n(ne,"LI",{});var Bqe=s(SM);t7e=n(Bqe,"STRONG",{});var Yxt=s(t7e);b3r=r(Yxt,"deberta-v2"),Yxt.forEach(t),v3r=r(Bqe," \u2014 "),oY=n(Bqe,"A",{href:!0});var Kxt=s(oY);F3r=r(Kxt,"TFDebertaV2ForSequenceClassification"),Kxt.forEach(t),T3r=r(Bqe," (DeBERTa-v2 model)"),Bqe.forEach(t),M3r=i(ne),RM=n(ne,"LI",{});var Iqe=s(RM);a7e=n(Iqe,"STRONG",{});var Zxt=s(a7e);E3r=r(Zxt,"distilbert"),Zxt.forEach(t),C3r=r(Iqe," \u2014 "),rY=n(Iqe,"A",{href:!0});var e$t=s(rY);w3r=r(e$t,"TFDistilBertForSequenceClassification"),e$t.forEach(t),A3r=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),L3r=i(ne),PM=n(ne,"LI",{});var Nqe=s(PM);n7e=n(Nqe,"STRONG",{});var o$t=s(n7e);y3r=r(o$t,"electra"),o$t.forEach(t),x3r=r(Nqe," \u2014 "),tY=n(Nqe,"A",{href:!0});var r$t=s(tY);$3r=r(r$t,"TFElectraForSequenceClassification"),r$t.forEach(t),k3r=r(Nqe," (ELECTRA model)"),Nqe.forEach(t),S3r=i(ne),BM=n(ne,"LI",{});var qqe=s(BM);s7e=n(qqe,"STRONG",{});var t$t=s(s7e);R3r=r(t$t,"flaubert"),t$t.forEach(t),P3r=r(qqe," \u2014 "),aY=n(qqe,"A",{href:!0});var a$t=s(aY);B3r=r(a$t,"TFFlaubertForSequenceClassification"),a$t.forEach(t),I3r=r(qqe," (FlauBERT model)"),qqe.forEach(t),N3r=i(ne),IM=n(ne,"LI",{});var jqe=s(IM);l7e=n(jqe,"STRONG",{});var n$t=s(l7e);q3r=r(n$t,"funnel"),n$t.forEach(t),j3r=r(jqe," \u2014 "),nY=n(jqe,"A",{href:!0});var s$t=s(nY);D3r=r(s$t,"TFFunnelForSequenceClassification"),s$t.forEach(t),G3r=r(jqe," (Funnel Transformer model)"),jqe.forEach(t),O3r=i(ne),NM=n(ne,"LI",{});var Dqe=s(NM);i7e=n(Dqe,"STRONG",{});var l$t=s(i7e);V3r=r(l$t,"gpt2"),l$t.forEach(t),X3r=r(Dqe," \u2014 "),sY=n(Dqe,"A",{href:!0});var i$t=s(sY);z3r=r(i$t,"TFGPT2ForSequenceClassification"),i$t.forEach(t),W3r=r(Dqe," (OpenAI GPT-2 model)"),Dqe.forEach(t),Q3r=i(ne),qM=n(ne,"LI",{});var Gqe=s(qM);d7e=n(Gqe,"STRONG",{});var d$t=s(d7e);H3r=r(d$t,"gptj"),d$t.forEach(t),U3r=r(Gqe," \u2014 "),lY=n(Gqe,"A",{href:!0});var c$t=s(lY);J3r=r(c$t,"TFGPTJForSequenceClassification"),c$t.forEach(t),Y3r=r(Gqe," (GPT-J model)"),Gqe.forEach(t),K3r=i(ne),jM=n(ne,"LI",{});var Oqe=s(jM);c7e=n(Oqe,"STRONG",{});var f$t=s(c7e);Z3r=r(f$t,"layoutlm"),f$t.forEach(t),ewr=r(Oqe," \u2014 "),iY=n(Oqe,"A",{href:!0});var m$t=s(iY);owr=r(m$t,"TFLayoutLMForSequenceClassification"),m$t.forEach(t),rwr=r(Oqe," (LayoutLM model)"),Oqe.forEach(t),twr=i(ne),DM=n(ne,"LI",{});var Vqe=s(DM);f7e=n(Vqe,"STRONG",{});var g$t=s(f7e);awr=r(g$t,"longformer"),g$t.forEach(t),nwr=r(Vqe," \u2014 "),dY=n(Vqe,"A",{href:!0});var h$t=s(dY);swr=r(h$t,"TFLongformerForSequenceClassification"),h$t.forEach(t),lwr=r(Vqe," (Longformer model)"),Vqe.forEach(t),iwr=i(ne),GM=n(ne,"LI",{});var Xqe=s(GM);m7e=n(Xqe,"STRONG",{});var p$t=s(m7e);dwr=r(p$t,"mobilebert"),p$t.forEach(t),cwr=r(Xqe," \u2014 "),cY=n(Xqe,"A",{href:!0});var _$t=s(cY);fwr=r(_$t,"TFMobileBertForSequenceClassification"),_$t.forEach(t),mwr=r(Xqe," (MobileBERT model)"),Xqe.forEach(t),gwr=i(ne),OM=n(ne,"LI",{});var zqe=s(OM);g7e=n(zqe,"STRONG",{});var u$t=s(g7e);hwr=r(u$t,"mpnet"),u$t.forEach(t),pwr=r(zqe," \u2014 "),fY=n(zqe,"A",{href:!0});var b$t=s(fY);_wr=r(b$t,"TFMPNetForSequenceClassification"),b$t.forEach(t),uwr=r(zqe," (MPNet model)"),zqe.forEach(t),bwr=i(ne),VM=n(ne,"LI",{});var Wqe=s(VM);h7e=n(Wqe,"STRONG",{});var v$t=s(h7e);vwr=r(v$t,"openai-gpt"),v$t.forEach(t),Fwr=r(Wqe," \u2014 "),mY=n(Wqe,"A",{href:!0});var F$t=s(mY);Twr=r(F$t,"TFOpenAIGPTForSequenceClassification"),F$t.forEach(t),Mwr=r(Wqe," (OpenAI GPT model)"),Wqe.forEach(t),Ewr=i(ne),XM=n(ne,"LI",{});var Qqe=s(XM);p7e=n(Qqe,"STRONG",{});var T$t=s(p7e);Cwr=r(T$t,"rembert"),T$t.forEach(t),wwr=r(Qqe," \u2014 "),gY=n(Qqe,"A",{href:!0});var M$t=s(gY);Awr=r(M$t,"TFRemBertForSequenceClassification"),M$t.forEach(t),Lwr=r(Qqe," (RemBERT model)"),Qqe.forEach(t),ywr=i(ne),zM=n(ne,"LI",{});var Hqe=s(zM);_7e=n(Hqe,"STRONG",{});var E$t=s(_7e);xwr=r(E$t,"roberta"),E$t.forEach(t),$wr=r(Hqe," \u2014 "),hY=n(Hqe,"A",{href:!0});var C$t=s(hY);kwr=r(C$t,"TFRobertaForSequenceClassification"),C$t.forEach(t),Swr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),Rwr=i(ne),WM=n(ne,"LI",{});var Uqe=s(WM);u7e=n(Uqe,"STRONG",{});var w$t=s(u7e);Pwr=r(w$t,"roformer"),w$t.forEach(t),Bwr=r(Uqe," \u2014 "),pY=n(Uqe,"A",{href:!0});var A$t=s(pY);Iwr=r(A$t,"TFRoFormerForSequenceClassification"),A$t.forEach(t),Nwr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),qwr=i(ne),QM=n(ne,"LI",{});var Jqe=s(QM);b7e=n(Jqe,"STRONG",{});var L$t=s(b7e);jwr=r(L$t,"tapas"),L$t.forEach(t),Dwr=r(Jqe," \u2014 "),_Y=n(Jqe,"A",{href:!0});var y$t=s(_Y);Gwr=r(y$t,"TFTapasForSequenceClassification"),y$t.forEach(t),Owr=r(Jqe," (TAPAS model)"),Jqe.forEach(t),Vwr=i(ne),HM=n(ne,"LI",{});var Yqe=s(HM);v7e=n(Yqe,"STRONG",{});var x$t=s(v7e);Xwr=r(x$t,"transfo-xl"),x$t.forEach(t),zwr=r(Yqe," \u2014 "),uY=n(Yqe,"A",{href:!0});var $$t=s(uY);Wwr=r($$t,"TFTransfoXLForSequenceClassification"),$$t.forEach(t),Qwr=r(Yqe," (Transformer-XL model)"),Yqe.forEach(t),Hwr=i(ne),UM=n(ne,"LI",{});var Kqe=s(UM);F7e=n(Kqe,"STRONG",{});var k$t=s(F7e);Uwr=r(k$t,"xlm"),k$t.forEach(t),Jwr=r(Kqe," \u2014 "),bY=n(Kqe,"A",{href:!0});var S$t=s(bY);Ywr=r(S$t,"TFXLMForSequenceClassification"),S$t.forEach(t),Kwr=r(Kqe," (XLM model)"),Kqe.forEach(t),Zwr=i(ne),JM=n(ne,"LI",{});var Zqe=s(JM);T7e=n(Zqe,"STRONG",{});var R$t=s(T7e);eAr=r(R$t,"xlm-roberta"),R$t.forEach(t),oAr=r(Zqe," \u2014 "),vY=n(Zqe,"A",{href:!0});var P$t=s(vY);rAr=r(P$t,"TFXLMRobertaForSequenceClassification"),P$t.forEach(t),tAr=r(Zqe," (XLM-RoBERTa model)"),Zqe.forEach(t),aAr=i(ne),YM=n(ne,"LI",{});var eje=s(YM);M7e=n(eje,"STRONG",{});var B$t=s(M7e);nAr=r(B$t,"xlnet"),B$t.forEach(t),sAr=r(eje," \u2014 "),FY=n(eje,"A",{href:!0});var I$t=s(FY);lAr=r(I$t,"TFXLNetForSequenceClassification"),I$t.forEach(t),iAr=r(eje," (XLNet model)"),eje.forEach(t),ne.forEach(t),dAr=i(jl),T(KM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),SVe=i(f),Cc=n(f,"H2",{class:!0});var Dze=s(Cc);ZM=n(Dze,"A",{id:!0,class:!0,href:!0});var N$t=s(ZM);E7e=n(N$t,"SPAN",{});var q$t=s(E7e);T(rx.$$.fragment,q$t),q$t.forEach(t),N$t.forEach(t),cAr=i(Dze),C7e=n(Dze,"SPAN",{});var j$t=s(C7e);fAr=r(j$t,"TFAutoModelForMultipleChoice"),j$t.forEach(t),Dze.forEach(t),RVe=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(tx.$$.fragment,Dl),mAr=i(Dl),wc=n(Dl,"P",{});var Xre=s(wc);gAr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TY=n(Xre,"A",{href:!0});var D$t=s(TY);hAr=r(D$t,"from_pretrained()"),D$t.forEach(t),pAr=r(Xre," class method or the "),MY=n(Xre,"A",{href:!0});var G$t=s(MY);_Ar=r(G$t,"from_config()"),G$t.forEach(t),uAr=r(Xre,` class
method.`),Xre.forEach(t),bAr=i(Dl),ax=n(Dl,"P",{});var Gze=s(ax);vAr=r(Gze,"This class cannot be instantiated directly using "),w7e=n(Gze,"CODE",{});var O$t=s(w7e);FAr=r(O$t,"__init__()"),O$t.forEach(t),TAr=r(Gze," (throws an error)."),Gze.forEach(t),MAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var Qw=s(qt);T(nx.$$.fragment,Qw),EAr=i(Qw),A7e=n(Qw,"P",{});var V$t=s(A7e);CAr=r(V$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V$t.forEach(t),wAr=i(Qw),Ac=n(Qw,"P",{});var zre=s(Ac);AAr=r(zre,`Note:
Loading a model from its configuration file does `),L7e=n(zre,"STRONG",{});var X$t=s(L7e);LAr=r(X$t,"not"),X$t.forEach(t),yAr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(zre,"A",{href:!0});var z$t=s(EY);xAr=r(z$t,"from_pretrained()"),z$t.forEach(t),$Ar=r(zre," to load the model weights."),zre.forEach(t),kAr=i(Qw),T(eE.$$.fragment,Qw),Qw.forEach(t),SAr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(sx.$$.fragment,Gl),RAr=i(Gl),y7e=n(Gl,"P",{});var W$t=s(y7e);PAr=r(W$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W$t.forEach(t),BAr=i(Gl),gn=n(Gl,"P",{});var Hw=s(gn);IAr=r(Hw,"The model class to instantiate is selected based on the "),x7e=n(Hw,"CODE",{});var Q$t=s(x7e);NAr=r(Q$t,"model_type"),Q$t.forEach(t),qAr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),$7e=n(Hw,"CODE",{});var H$t=s($7e);jAr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),DAr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(Hw,"CODE",{});var U$t=s(k7e);GAr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),OAr=r(Hw,":"),Hw.forEach(t),VAr=i(Gl),_e=n(Gl,"UL",{});var ve=s(_e);oE=n(ve,"LI",{});var oje=s(oE);S7e=n(oje,"STRONG",{});var J$t=s(S7e);XAr=r(J$t,"albert"),J$t.forEach(t),zAr=r(oje," \u2014 "),CY=n(oje,"A",{href:!0});var Y$t=s(CY);WAr=r(Y$t,"TFAlbertForMultipleChoice"),Y$t.forEach(t),QAr=r(oje," (ALBERT model)"),oje.forEach(t),HAr=i(ve),rE=n(ve,"LI",{});var rje=s(rE);R7e=n(rje,"STRONG",{});var K$t=s(R7e);UAr=r(K$t,"bert"),K$t.forEach(t),JAr=r(rje," \u2014 "),wY=n(rje,"A",{href:!0});var Z$t=s(wY);YAr=r(Z$t,"TFBertForMultipleChoice"),Z$t.forEach(t),KAr=r(rje," (BERT model)"),rje.forEach(t),ZAr=i(ve),tE=n(ve,"LI",{});var tje=s(tE);P7e=n(tje,"STRONG",{});var ekt=s(P7e);eLr=r(ekt,"camembert"),ekt.forEach(t),oLr=r(tje," \u2014 "),AY=n(tje,"A",{href:!0});var okt=s(AY);rLr=r(okt,"TFCamembertForMultipleChoice"),okt.forEach(t),tLr=r(tje," (CamemBERT model)"),tje.forEach(t),aLr=i(ve),aE=n(ve,"LI",{});var aje=s(aE);B7e=n(aje,"STRONG",{});var rkt=s(B7e);nLr=r(rkt,"convbert"),rkt.forEach(t),sLr=r(aje," \u2014 "),LY=n(aje,"A",{href:!0});var tkt=s(LY);lLr=r(tkt,"TFConvBertForMultipleChoice"),tkt.forEach(t),iLr=r(aje," (ConvBERT model)"),aje.forEach(t),dLr=i(ve),nE=n(ve,"LI",{});var nje=s(nE);I7e=n(nje,"STRONG",{});var akt=s(I7e);cLr=r(akt,"distilbert"),akt.forEach(t),fLr=r(nje," \u2014 "),yY=n(nje,"A",{href:!0});var nkt=s(yY);mLr=r(nkt,"TFDistilBertForMultipleChoice"),nkt.forEach(t),gLr=r(nje," (DistilBERT model)"),nje.forEach(t),hLr=i(ve),sE=n(ve,"LI",{});var sje=s(sE);N7e=n(sje,"STRONG",{});var skt=s(N7e);pLr=r(skt,"electra"),skt.forEach(t),_Lr=r(sje," \u2014 "),xY=n(sje,"A",{href:!0});var lkt=s(xY);uLr=r(lkt,"TFElectraForMultipleChoice"),lkt.forEach(t),bLr=r(sje," (ELECTRA model)"),sje.forEach(t),vLr=i(ve),lE=n(ve,"LI",{});var lje=s(lE);q7e=n(lje,"STRONG",{});var ikt=s(q7e);FLr=r(ikt,"flaubert"),ikt.forEach(t),TLr=r(lje," \u2014 "),$Y=n(lje,"A",{href:!0});var dkt=s($Y);MLr=r(dkt,"TFFlaubertForMultipleChoice"),dkt.forEach(t),ELr=r(lje," (FlauBERT model)"),lje.forEach(t),CLr=i(ve),iE=n(ve,"LI",{});var ije=s(iE);j7e=n(ije,"STRONG",{});var ckt=s(j7e);wLr=r(ckt,"funnel"),ckt.forEach(t),ALr=r(ije," \u2014 "),kY=n(ije,"A",{href:!0});var fkt=s(kY);LLr=r(fkt,"TFFunnelForMultipleChoice"),fkt.forEach(t),yLr=r(ije," (Funnel Transformer model)"),ije.forEach(t),xLr=i(ve),dE=n(ve,"LI",{});var dje=s(dE);D7e=n(dje,"STRONG",{});var mkt=s(D7e);$Lr=r(mkt,"longformer"),mkt.forEach(t),kLr=r(dje," \u2014 "),SY=n(dje,"A",{href:!0});var gkt=s(SY);SLr=r(gkt,"TFLongformerForMultipleChoice"),gkt.forEach(t),RLr=r(dje," (Longformer model)"),dje.forEach(t),PLr=i(ve),cE=n(ve,"LI",{});var cje=s(cE);G7e=n(cje,"STRONG",{});var hkt=s(G7e);BLr=r(hkt,"mobilebert"),hkt.forEach(t),ILr=r(cje," \u2014 "),RY=n(cje,"A",{href:!0});var pkt=s(RY);NLr=r(pkt,"TFMobileBertForMultipleChoice"),pkt.forEach(t),qLr=r(cje," (MobileBERT model)"),cje.forEach(t),jLr=i(ve),fE=n(ve,"LI",{});var fje=s(fE);O7e=n(fje,"STRONG",{});var _kt=s(O7e);DLr=r(_kt,"mpnet"),_kt.forEach(t),GLr=r(fje," \u2014 "),PY=n(fje,"A",{href:!0});var ukt=s(PY);OLr=r(ukt,"TFMPNetForMultipleChoice"),ukt.forEach(t),VLr=r(fje," (MPNet model)"),fje.forEach(t),XLr=i(ve),mE=n(ve,"LI",{});var mje=s(mE);V7e=n(mje,"STRONG",{});var bkt=s(V7e);zLr=r(bkt,"rembert"),bkt.forEach(t),WLr=r(mje," \u2014 "),BY=n(mje,"A",{href:!0});var vkt=s(BY);QLr=r(vkt,"TFRemBertForMultipleChoice"),vkt.forEach(t),HLr=r(mje," (RemBERT model)"),mje.forEach(t),ULr=i(ve),gE=n(ve,"LI",{});var gje=s(gE);X7e=n(gje,"STRONG",{});var Fkt=s(X7e);JLr=r(Fkt,"roberta"),Fkt.forEach(t),YLr=r(gje," \u2014 "),IY=n(gje,"A",{href:!0});var Tkt=s(IY);KLr=r(Tkt,"TFRobertaForMultipleChoice"),Tkt.forEach(t),ZLr=r(gje," (RoBERTa model)"),gje.forEach(t),eyr=i(ve),hE=n(ve,"LI",{});var hje=s(hE);z7e=n(hje,"STRONG",{});var Mkt=s(z7e);oyr=r(Mkt,"roformer"),Mkt.forEach(t),ryr=r(hje," \u2014 "),NY=n(hje,"A",{href:!0});var Ekt=s(NY);tyr=r(Ekt,"TFRoFormerForMultipleChoice"),Ekt.forEach(t),ayr=r(hje," (RoFormer model)"),hje.forEach(t),nyr=i(ve),pE=n(ve,"LI",{});var pje=s(pE);W7e=n(pje,"STRONG",{});var Ckt=s(W7e);syr=r(Ckt,"xlm"),Ckt.forEach(t),lyr=r(pje," \u2014 "),qY=n(pje,"A",{href:!0});var wkt=s(qY);iyr=r(wkt,"TFXLMForMultipleChoice"),wkt.forEach(t),dyr=r(pje," (XLM model)"),pje.forEach(t),cyr=i(ve),_E=n(ve,"LI",{});var _je=s(_E);Q7e=n(_je,"STRONG",{});var Akt=s(Q7e);fyr=r(Akt,"xlm-roberta"),Akt.forEach(t),myr=r(_je," \u2014 "),jY=n(_je,"A",{href:!0});var Lkt=s(jY);gyr=r(Lkt,"TFXLMRobertaForMultipleChoice"),Lkt.forEach(t),hyr=r(_je," (XLM-RoBERTa model)"),_je.forEach(t),pyr=i(ve),uE=n(ve,"LI",{});var uje=s(uE);H7e=n(uje,"STRONG",{});var ykt=s(H7e);_yr=r(ykt,"xlnet"),ykt.forEach(t),uyr=r(uje," \u2014 "),DY=n(uje,"A",{href:!0});var xkt=s(DY);byr=r(xkt,"TFXLNetForMultipleChoice"),xkt.forEach(t),vyr=r(uje," (XLNet model)"),uje.forEach(t),ve.forEach(t),Fyr=i(Gl),T(bE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),PVe=i(f),Lc=n(f,"H2",{class:!0});var Oze=s(Lc);vE=n(Oze,"A",{id:!0,class:!0,href:!0});var $kt=s(vE);U7e=n($kt,"SPAN",{});var kkt=s(U7e);T(lx.$$.fragment,kkt),kkt.forEach(t),$kt.forEach(t),Tyr=i(Oze),J7e=n(Oze,"SPAN",{});var Skt=s(J7e);Myr=r(Skt,"TFAutoModelForNextSentencePrediction"),Skt.forEach(t),Oze.forEach(t),BVe=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(ix.$$.fragment,Ol),Eyr=i(Ol),yc=n(Ol,"P",{});var Wre=s(yc);Cyr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GY=n(Wre,"A",{href:!0});var Rkt=s(GY);wyr=r(Rkt,"from_pretrained()"),Rkt.forEach(t),Ayr=r(Wre," class method or the "),OY=n(Wre,"A",{href:!0});var Pkt=s(OY);Lyr=r(Pkt,"from_config()"),Pkt.forEach(t),yyr=r(Wre,` class
method.`),Wre.forEach(t),xyr=i(Ol),dx=n(Ol,"P",{});var Vze=s(dx);$yr=r(Vze,"This class cannot be instantiated directly using "),Y7e=n(Vze,"CODE",{});var Bkt=s(Y7e);kyr=r(Bkt,"__init__()"),Bkt.forEach(t),Syr=r(Vze," (throws an error)."),Vze.forEach(t),Ryr=i(Ol),jt=n(Ol,"DIV",{class:!0});var Uw=s(jt);T(cx.$$.fragment,Uw),Pyr=i(Uw),K7e=n(Uw,"P",{});var Ikt=s(K7e);Byr=r(Ikt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ikt.forEach(t),Iyr=i(Uw),xc=n(Uw,"P",{});var Qre=s(xc);Nyr=r(Qre,`Note:
Loading a model from its configuration file does `),Z7e=n(Qre,"STRONG",{});var Nkt=s(Z7e);qyr=r(Nkt,"not"),Nkt.forEach(t),jyr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Qre,"A",{href:!0});var qkt=s(VY);Dyr=r(qkt,"from_pretrained()"),qkt.forEach(t),Gyr=r(Qre," to load the model weights."),Qre.forEach(t),Oyr=i(Uw),T(FE.$$.fragment,Uw),Uw.forEach(t),Vyr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(fx.$$.fragment,Vl),Xyr=i(Vl),e8e=n(Vl,"P",{});var jkt=s(e8e);zyr=r(jkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jkt.forEach(t),Wyr=i(Vl),hn=n(Vl,"P",{});var Jw=s(hn);Qyr=r(Jw,"The model class to instantiate is selected based on the "),o8e=n(Jw,"CODE",{});var Dkt=s(o8e);Hyr=r(Dkt,"model_type"),Dkt.forEach(t),Uyr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),r8e=n(Jw,"CODE",{});var Gkt=s(r8e);Jyr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),Yyr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=n(Jw,"CODE",{});var Okt=s(t8e);Kyr=r(Okt,"pretrained_model_name_or_path"),Okt.forEach(t),Zyr=r(Jw,":"),Jw.forEach(t),e9r=i(Vl),mx=n(Vl,"UL",{});var Xze=s(mx);TE=n(Xze,"LI",{});var bje=s(TE);a8e=n(bje,"STRONG",{});var Vkt=s(a8e);o9r=r(Vkt,"bert"),Vkt.forEach(t),r9r=r(bje," \u2014 "),XY=n(bje,"A",{href:!0});var Xkt=s(XY);t9r=r(Xkt,"TFBertForNextSentencePrediction"),Xkt.forEach(t),a9r=r(bje," (BERT model)"),bje.forEach(t),n9r=i(Xze),ME=n(Xze,"LI",{});var vje=s(ME);n8e=n(vje,"STRONG",{});var zkt=s(n8e);s9r=r(zkt,"mobilebert"),zkt.forEach(t),l9r=r(vje," \u2014 "),zY=n(vje,"A",{href:!0});var Wkt=s(zY);i9r=r(Wkt,"TFMobileBertForNextSentencePrediction"),Wkt.forEach(t),d9r=r(vje," (MobileBERT model)"),vje.forEach(t),Xze.forEach(t),c9r=i(Vl),T(EE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),IVe=i(f),$c=n(f,"H2",{class:!0});var zze=s($c);CE=n(zze,"A",{id:!0,class:!0,href:!0});var Qkt=s(CE);s8e=n(Qkt,"SPAN",{});var Hkt=s(s8e);T(gx.$$.fragment,Hkt),Hkt.forEach(t),Qkt.forEach(t),f9r=i(zze),l8e=n(zze,"SPAN",{});var Ukt=s(l8e);m9r=r(Ukt,"TFAutoModelForTableQuestionAnswering"),Ukt.forEach(t),zze.forEach(t),NVe=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(hx.$$.fragment,Xl),g9r=i(Xl),kc=n(Xl,"P",{});var Hre=s(kc);h9r=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WY=n(Hre,"A",{href:!0});var Jkt=s(WY);p9r=r(Jkt,"from_pretrained()"),Jkt.forEach(t),_9r=r(Hre," class method or the "),QY=n(Hre,"A",{href:!0});var Ykt=s(QY);u9r=r(Ykt,"from_config()"),Ykt.forEach(t),b9r=r(Hre,` class
method.`),Hre.forEach(t),v9r=i(Xl),px=n(Xl,"P",{});var Wze=s(px);F9r=r(Wze,"This class cannot be instantiated directly using "),i8e=n(Wze,"CODE",{});var Kkt=s(i8e);T9r=r(Kkt,"__init__()"),Kkt.forEach(t),M9r=r(Wze," (throws an error)."),Wze.forEach(t),E9r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var Yw=s(Dt);T(_x.$$.fragment,Yw),C9r=i(Yw),d8e=n(Yw,"P",{});var Zkt=s(d8e);w9r=r(Zkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zkt.forEach(t),A9r=i(Yw),Sc=n(Yw,"P",{});var Ure=s(Sc);L9r=r(Ure,`Note:
Loading a model from its configuration file does `),c8e=n(Ure,"STRONG",{});var eSt=s(c8e);y9r=r(eSt,"not"),eSt.forEach(t),x9r=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Ure,"A",{href:!0});var oSt=s(HY);$9r=r(oSt,"from_pretrained()"),oSt.forEach(t),k9r=r(Ure," to load the model weights."),Ure.forEach(t),S9r=i(Yw),T(wE.$$.fragment,Yw),Yw.forEach(t),R9r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(ux.$$.fragment,zl),P9r=i(zl),f8e=n(zl,"P",{});var rSt=s(f8e);B9r=r(rSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rSt.forEach(t),I9r=i(zl),pn=n(zl,"P",{});var Kw=s(pn);N9r=r(Kw,"The model class to instantiate is selected based on the "),m8e=n(Kw,"CODE",{});var tSt=s(m8e);q9r=r(tSt,"model_type"),tSt.forEach(t),j9r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),g8e=n(Kw,"CODE",{});var aSt=s(g8e);D9r=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),G9r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(Kw,"CODE",{});var nSt=s(h8e);O9r=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),V9r=r(Kw,":"),Kw.forEach(t),X9r=i(zl),p8e=n(zl,"UL",{});var sSt=s(p8e);AE=n(sSt,"LI",{});var Fje=s(AE);_8e=n(Fje,"STRONG",{});var lSt=s(_8e);z9r=r(lSt,"tapas"),lSt.forEach(t),W9r=r(Fje," \u2014 "),UY=n(Fje,"A",{href:!0});var iSt=s(UY);Q9r=r(iSt,"TFTapasForQuestionAnswering"),iSt.forEach(t),H9r=r(Fje," (TAPAS model)"),Fje.forEach(t),sSt.forEach(t),U9r=i(zl),T(LE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),qVe=i(f),Rc=n(f,"H2",{class:!0});var Qze=s(Rc);yE=n(Qze,"A",{id:!0,class:!0,href:!0});var dSt=s(yE);u8e=n(dSt,"SPAN",{});var cSt=s(u8e);T(bx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),J9r=i(Qze),b8e=n(Qze,"SPAN",{});var fSt=s(b8e);Y9r=r(fSt,"TFAutoModelForTokenClassification"),fSt.forEach(t),Qze.forEach(t),jVe=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(vx.$$.fragment,Wl),K9r=i(Wl),Pc=n(Wl,"P",{});var Jre=s(Pc);Z9r=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JY=n(Jre,"A",{href:!0});var mSt=s(JY);exr=r(mSt,"from_pretrained()"),mSt.forEach(t),oxr=r(Jre," class method or the "),YY=n(Jre,"A",{href:!0});var gSt=s(YY);rxr=r(gSt,"from_config()"),gSt.forEach(t),txr=r(Jre,` class
method.`),Jre.forEach(t),axr=i(Wl),Fx=n(Wl,"P",{});var Hze=s(Fx);nxr=r(Hze,"This class cannot be instantiated directly using "),v8e=n(Hze,"CODE",{});var hSt=s(v8e);sxr=r(hSt,"__init__()"),hSt.forEach(t),lxr=r(Hze," (throws an error)."),Hze.forEach(t),ixr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var Zw=s(Gt);T(Tx.$$.fragment,Zw),dxr=i(Zw),F8e=n(Zw,"P",{});var pSt=s(F8e);cxr=r(pSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pSt.forEach(t),fxr=i(Zw),Bc=n(Zw,"P",{});var Yre=s(Bc);mxr=r(Yre,`Note:
Loading a model from its configuration file does `),T8e=n(Yre,"STRONG",{});var _St=s(T8e);gxr=r(_St,"not"),_St.forEach(t),hxr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Yre,"A",{href:!0});var uSt=s(KY);pxr=r(uSt,"from_pretrained()"),uSt.forEach(t),_xr=r(Yre," to load the model weights."),Yre.forEach(t),uxr=i(Zw),T(xE.$$.fragment,Zw),Zw.forEach(t),bxr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Ql=s(qr);T(Mx.$$.fragment,Ql),vxr=i(Ql),M8e=n(Ql,"P",{});var bSt=s(M8e);Fxr=r(bSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bSt.forEach(t),Txr=i(Ql),_n=n(Ql,"P",{});var eA=s(_n);Mxr=r(eA,"The model class to instantiate is selected based on the "),E8e=n(eA,"CODE",{});var vSt=s(E8e);Exr=r(vSt,"model_type"),vSt.forEach(t),Cxr=r(eA,` property of the config object (either
passed as an argument or loaded from `),C8e=n(eA,"CODE",{});var FSt=s(C8e);wxr=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),Axr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(eA,"CODE",{});var TSt=s(w8e);Lxr=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),yxr=r(eA,":"),eA.forEach(t),xxr=i(Ql),de=n(Ql,"UL",{});var me=s(de);$E=n(me,"LI",{});var Tje=s($E);A8e=n(Tje,"STRONG",{});var MSt=s(A8e);$xr=r(MSt,"albert"),MSt.forEach(t),kxr=r(Tje," \u2014 "),ZY=n(Tje,"A",{href:!0});var ESt=s(ZY);Sxr=r(ESt,"TFAlbertForTokenClassification"),ESt.forEach(t),Rxr=r(Tje," (ALBERT model)"),Tje.forEach(t),Pxr=i(me),kE=n(me,"LI",{});var Mje=s(kE);L8e=n(Mje,"STRONG",{});var CSt=s(L8e);Bxr=r(CSt,"bert"),CSt.forEach(t),Ixr=r(Mje," \u2014 "),eK=n(Mje,"A",{href:!0});var wSt=s(eK);Nxr=r(wSt,"TFBertForTokenClassification"),wSt.forEach(t),qxr=r(Mje," (BERT model)"),Mje.forEach(t),jxr=i(me),SE=n(me,"LI",{});var Eje=s(SE);y8e=n(Eje,"STRONG",{});var ASt=s(y8e);Dxr=r(ASt,"camembert"),ASt.forEach(t),Gxr=r(Eje," \u2014 "),oK=n(Eje,"A",{href:!0});var LSt=s(oK);Oxr=r(LSt,"TFCamembertForTokenClassification"),LSt.forEach(t),Vxr=r(Eje," (CamemBERT model)"),Eje.forEach(t),Xxr=i(me),RE=n(me,"LI",{});var Cje=s(RE);x8e=n(Cje,"STRONG",{});var ySt=s(x8e);zxr=r(ySt,"convbert"),ySt.forEach(t),Wxr=r(Cje," \u2014 "),rK=n(Cje,"A",{href:!0});var xSt=s(rK);Qxr=r(xSt,"TFConvBertForTokenClassification"),xSt.forEach(t),Hxr=r(Cje," (ConvBERT model)"),Cje.forEach(t),Uxr=i(me),PE=n(me,"LI",{});var wje=s(PE);$8e=n(wje,"STRONG",{});var $St=s($8e);Jxr=r($St,"deberta"),$St.forEach(t),Yxr=r(wje," \u2014 "),tK=n(wje,"A",{href:!0});var kSt=s(tK);Kxr=r(kSt,"TFDebertaForTokenClassification"),kSt.forEach(t),Zxr=r(wje," (DeBERTa model)"),wje.forEach(t),e$r=i(me),BE=n(me,"LI",{});var Aje=s(BE);k8e=n(Aje,"STRONG",{});var SSt=s(k8e);o$r=r(SSt,"deberta-v2"),SSt.forEach(t),r$r=r(Aje," \u2014 "),aK=n(Aje,"A",{href:!0});var RSt=s(aK);t$r=r(RSt,"TFDebertaV2ForTokenClassification"),RSt.forEach(t),a$r=r(Aje," (DeBERTa-v2 model)"),Aje.forEach(t),n$r=i(me),IE=n(me,"LI",{});var Lje=s(IE);S8e=n(Lje,"STRONG",{});var PSt=s(S8e);s$r=r(PSt,"distilbert"),PSt.forEach(t),l$r=r(Lje," \u2014 "),nK=n(Lje,"A",{href:!0});var BSt=s(nK);i$r=r(BSt,"TFDistilBertForTokenClassification"),BSt.forEach(t),d$r=r(Lje," (DistilBERT model)"),Lje.forEach(t),c$r=i(me),NE=n(me,"LI",{});var yje=s(NE);R8e=n(yje,"STRONG",{});var ISt=s(R8e);f$r=r(ISt,"electra"),ISt.forEach(t),m$r=r(yje," \u2014 "),sK=n(yje,"A",{href:!0});var NSt=s(sK);g$r=r(NSt,"TFElectraForTokenClassification"),NSt.forEach(t),h$r=r(yje," (ELECTRA model)"),yje.forEach(t),p$r=i(me),qE=n(me,"LI",{});var xje=s(qE);P8e=n(xje,"STRONG",{});var qSt=s(P8e);_$r=r(qSt,"flaubert"),qSt.forEach(t),u$r=r(xje," \u2014 "),lK=n(xje,"A",{href:!0});var jSt=s(lK);b$r=r(jSt,"TFFlaubertForTokenClassification"),jSt.forEach(t),v$r=r(xje," (FlauBERT model)"),xje.forEach(t),F$r=i(me),jE=n(me,"LI",{});var $je=s(jE);B8e=n($je,"STRONG",{});var DSt=s(B8e);T$r=r(DSt,"funnel"),DSt.forEach(t),M$r=r($je," \u2014 "),iK=n($je,"A",{href:!0});var GSt=s(iK);E$r=r(GSt,"TFFunnelForTokenClassification"),GSt.forEach(t),C$r=r($je," (Funnel Transformer model)"),$je.forEach(t),w$r=i(me),DE=n(me,"LI",{});var kje=s(DE);I8e=n(kje,"STRONG",{});var OSt=s(I8e);A$r=r(OSt,"layoutlm"),OSt.forEach(t),L$r=r(kje," \u2014 "),dK=n(kje,"A",{href:!0});var VSt=s(dK);y$r=r(VSt,"TFLayoutLMForTokenClassification"),VSt.forEach(t),x$r=r(kje," (LayoutLM model)"),kje.forEach(t),$$r=i(me),GE=n(me,"LI",{});var Sje=s(GE);N8e=n(Sje,"STRONG",{});var XSt=s(N8e);k$r=r(XSt,"longformer"),XSt.forEach(t),S$r=r(Sje," \u2014 "),cK=n(Sje,"A",{href:!0});var zSt=s(cK);R$r=r(zSt,"TFLongformerForTokenClassification"),zSt.forEach(t),P$r=r(Sje," (Longformer model)"),Sje.forEach(t),B$r=i(me),OE=n(me,"LI",{});var Rje=s(OE);q8e=n(Rje,"STRONG",{});var WSt=s(q8e);I$r=r(WSt,"mobilebert"),WSt.forEach(t),N$r=r(Rje," \u2014 "),fK=n(Rje,"A",{href:!0});var QSt=s(fK);q$r=r(QSt,"TFMobileBertForTokenClassification"),QSt.forEach(t),j$r=r(Rje," (MobileBERT model)"),Rje.forEach(t),D$r=i(me),VE=n(me,"LI",{});var Pje=s(VE);j8e=n(Pje,"STRONG",{});var HSt=s(j8e);G$r=r(HSt,"mpnet"),HSt.forEach(t),O$r=r(Pje," \u2014 "),mK=n(Pje,"A",{href:!0});var USt=s(mK);V$r=r(USt,"TFMPNetForTokenClassification"),USt.forEach(t),X$r=r(Pje," (MPNet model)"),Pje.forEach(t),z$r=i(me),XE=n(me,"LI",{});var Bje=s(XE);D8e=n(Bje,"STRONG",{});var JSt=s(D8e);W$r=r(JSt,"rembert"),JSt.forEach(t),Q$r=r(Bje," \u2014 "),gK=n(Bje,"A",{href:!0});var YSt=s(gK);H$r=r(YSt,"TFRemBertForTokenClassification"),YSt.forEach(t),U$r=r(Bje," (RemBERT model)"),Bje.forEach(t),J$r=i(me),zE=n(me,"LI",{});var Ije=s(zE);G8e=n(Ije,"STRONG",{});var KSt=s(G8e);Y$r=r(KSt,"roberta"),KSt.forEach(t),K$r=r(Ije," \u2014 "),hK=n(Ije,"A",{href:!0});var ZSt=s(hK);Z$r=r(ZSt,"TFRobertaForTokenClassification"),ZSt.forEach(t),ekr=r(Ije," (RoBERTa model)"),Ije.forEach(t),okr=i(me),WE=n(me,"LI",{});var Nje=s(WE);O8e=n(Nje,"STRONG",{});var eRt=s(O8e);rkr=r(eRt,"roformer"),eRt.forEach(t),tkr=r(Nje," \u2014 "),pK=n(Nje,"A",{href:!0});var oRt=s(pK);akr=r(oRt,"TFRoFormerForTokenClassification"),oRt.forEach(t),nkr=r(Nje," (RoFormer model)"),Nje.forEach(t),skr=i(me),QE=n(me,"LI",{});var qje=s(QE);V8e=n(qje,"STRONG",{});var rRt=s(V8e);lkr=r(rRt,"xlm"),rRt.forEach(t),ikr=r(qje," \u2014 "),_K=n(qje,"A",{href:!0});var tRt=s(_K);dkr=r(tRt,"TFXLMForTokenClassification"),tRt.forEach(t),ckr=r(qje," (XLM model)"),qje.forEach(t),fkr=i(me),HE=n(me,"LI",{});var jje=s(HE);X8e=n(jje,"STRONG",{});var aRt=s(X8e);mkr=r(aRt,"xlm-roberta"),aRt.forEach(t),gkr=r(jje," \u2014 "),uK=n(jje,"A",{href:!0});var nRt=s(uK);hkr=r(nRt,"TFXLMRobertaForTokenClassification"),nRt.forEach(t),pkr=r(jje," (XLM-RoBERTa model)"),jje.forEach(t),_kr=i(me),UE=n(me,"LI",{});var Dje=s(UE);z8e=n(Dje,"STRONG",{});var sRt=s(z8e);ukr=r(sRt,"xlnet"),sRt.forEach(t),bkr=r(Dje," \u2014 "),bK=n(Dje,"A",{href:!0});var lRt=s(bK);vkr=r(lRt,"TFXLNetForTokenClassification"),lRt.forEach(t),Fkr=r(Dje," (XLNet model)"),Dje.forEach(t),me.forEach(t),Tkr=i(Ql),T(JE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),DVe=i(f),Ic=n(f,"H2",{class:!0});var Uze=s(Ic);YE=n(Uze,"A",{id:!0,class:!0,href:!0});var iRt=s(YE);W8e=n(iRt,"SPAN",{});var dRt=s(W8e);T(Ex.$$.fragment,dRt),dRt.forEach(t),iRt.forEach(t),Mkr=i(Uze),Q8e=n(Uze,"SPAN",{});var cRt=s(Q8e);Ekr=r(cRt,"TFAutoModelForQuestionAnswering"),cRt.forEach(t),Uze.forEach(t),GVe=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Cx.$$.fragment,Hl),Ckr=i(Hl),Nc=n(Hl,"P",{});var Kre=s(Nc);wkr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vK=n(Kre,"A",{href:!0});var fRt=s(vK);Akr=r(fRt,"from_pretrained()"),fRt.forEach(t),Lkr=r(Kre," class method or the "),FK=n(Kre,"A",{href:!0});var mRt=s(FK);ykr=r(mRt,"from_config()"),mRt.forEach(t),xkr=r(Kre,` class
method.`),Kre.forEach(t),$kr=i(Hl),wx=n(Hl,"P",{});var Jze=s(wx);kkr=r(Jze,"This class cannot be instantiated directly using "),H8e=n(Jze,"CODE",{});var gRt=s(H8e);Skr=r(gRt,"__init__()"),gRt.forEach(t),Rkr=r(Jze," (throws an error)."),Jze.forEach(t),Pkr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var oA=s(Ot);T(Ax.$$.fragment,oA),Bkr=i(oA),U8e=n(oA,"P",{});var hRt=s(U8e);Ikr=r(hRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hRt.forEach(t),Nkr=i(oA),qc=n(oA,"P",{});var Zre=s(qc);qkr=r(Zre,`Note:
Loading a model from its configuration file does `),J8e=n(Zre,"STRONG",{});var pRt=s(J8e);jkr=r(pRt,"not"),pRt.forEach(t),Dkr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(Zre,"A",{href:!0});var _Rt=s(TK);Gkr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),Okr=r(Zre," to load the model weights."),Zre.forEach(t),Vkr=i(oA),T(KE.$$.fragment,oA),oA.forEach(t),Xkr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Lx.$$.fragment,Ul),zkr=i(Ul),Y8e=n(Ul,"P",{});var uRt=s(Y8e);Wkr=r(uRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uRt.forEach(t),Qkr=i(Ul),un=n(Ul,"P",{});var rA=s(un);Hkr=r(rA,"The model class to instantiate is selected based on the "),K8e=n(rA,"CODE",{});var bRt=s(K8e);Ukr=r(bRt,"model_type"),bRt.forEach(t),Jkr=r(rA,` property of the config object (either
passed as an argument or loaded from `),Z8e=n(rA,"CODE",{});var vRt=s(Z8e);Ykr=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),Kkr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(rA,"CODE",{});var FRt=s(eMe);Zkr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),eSr=r(rA,":"),rA.forEach(t),oSr=i(Ul),ce=n(Ul,"UL",{});var ge=s(ce);ZE=n(ge,"LI",{});var Gje=s(ZE);oMe=n(Gje,"STRONG",{});var TRt=s(oMe);rSr=r(TRt,"albert"),TRt.forEach(t),tSr=r(Gje," \u2014 "),MK=n(Gje,"A",{href:!0});var MRt=s(MK);aSr=r(MRt,"TFAlbertForQuestionAnswering"),MRt.forEach(t),nSr=r(Gje," (ALBERT model)"),Gje.forEach(t),sSr=i(ge),e4=n(ge,"LI",{});var Oje=s(e4);rMe=n(Oje,"STRONG",{});var ERt=s(rMe);lSr=r(ERt,"bert"),ERt.forEach(t),iSr=r(Oje," \u2014 "),EK=n(Oje,"A",{href:!0});var CRt=s(EK);dSr=r(CRt,"TFBertForQuestionAnswering"),CRt.forEach(t),cSr=r(Oje," (BERT model)"),Oje.forEach(t),fSr=i(ge),o4=n(ge,"LI",{});var Vje=s(o4);tMe=n(Vje,"STRONG",{});var wRt=s(tMe);mSr=r(wRt,"camembert"),wRt.forEach(t),gSr=r(Vje," \u2014 "),CK=n(Vje,"A",{href:!0});var ARt=s(CK);hSr=r(ARt,"TFCamembertForQuestionAnswering"),ARt.forEach(t),pSr=r(Vje," (CamemBERT model)"),Vje.forEach(t),_Sr=i(ge),r4=n(ge,"LI",{});var Xje=s(r4);aMe=n(Xje,"STRONG",{});var LRt=s(aMe);uSr=r(LRt,"convbert"),LRt.forEach(t),bSr=r(Xje," \u2014 "),wK=n(Xje,"A",{href:!0});var yRt=s(wK);vSr=r(yRt,"TFConvBertForQuestionAnswering"),yRt.forEach(t),FSr=r(Xje," (ConvBERT model)"),Xje.forEach(t),TSr=i(ge),t4=n(ge,"LI",{});var zje=s(t4);nMe=n(zje,"STRONG",{});var xRt=s(nMe);MSr=r(xRt,"deberta"),xRt.forEach(t),ESr=r(zje," \u2014 "),AK=n(zje,"A",{href:!0});var $Rt=s(AK);CSr=r($Rt,"TFDebertaForQuestionAnswering"),$Rt.forEach(t),wSr=r(zje," (DeBERTa model)"),zje.forEach(t),ASr=i(ge),a4=n(ge,"LI",{});var Wje=s(a4);sMe=n(Wje,"STRONG",{});var kRt=s(sMe);LSr=r(kRt,"deberta-v2"),kRt.forEach(t),ySr=r(Wje," \u2014 "),LK=n(Wje,"A",{href:!0});var SRt=s(LK);xSr=r(SRt,"TFDebertaV2ForQuestionAnswering"),SRt.forEach(t),$Sr=r(Wje," (DeBERTa-v2 model)"),Wje.forEach(t),kSr=i(ge),n4=n(ge,"LI",{});var Qje=s(n4);lMe=n(Qje,"STRONG",{});var RRt=s(lMe);SSr=r(RRt,"distilbert"),RRt.forEach(t),RSr=r(Qje," \u2014 "),yK=n(Qje,"A",{href:!0});var PRt=s(yK);PSr=r(PRt,"TFDistilBertForQuestionAnswering"),PRt.forEach(t),BSr=r(Qje," (DistilBERT model)"),Qje.forEach(t),ISr=i(ge),s4=n(ge,"LI",{});var Hje=s(s4);iMe=n(Hje,"STRONG",{});var BRt=s(iMe);NSr=r(BRt,"electra"),BRt.forEach(t),qSr=r(Hje," \u2014 "),xK=n(Hje,"A",{href:!0});var IRt=s(xK);jSr=r(IRt,"TFElectraForQuestionAnswering"),IRt.forEach(t),DSr=r(Hje," (ELECTRA model)"),Hje.forEach(t),GSr=i(ge),l4=n(ge,"LI",{});var Uje=s(l4);dMe=n(Uje,"STRONG",{});var NRt=s(dMe);OSr=r(NRt,"flaubert"),NRt.forEach(t),VSr=r(Uje," \u2014 "),$K=n(Uje,"A",{href:!0});var qRt=s($K);XSr=r(qRt,"TFFlaubertForQuestionAnsweringSimple"),qRt.forEach(t),zSr=r(Uje," (FlauBERT model)"),Uje.forEach(t),WSr=i(ge),i4=n(ge,"LI",{});var Jje=s(i4);cMe=n(Jje,"STRONG",{});var jRt=s(cMe);QSr=r(jRt,"funnel"),jRt.forEach(t),HSr=r(Jje," \u2014 "),kK=n(Jje,"A",{href:!0});var DRt=s(kK);USr=r(DRt,"TFFunnelForQuestionAnswering"),DRt.forEach(t),JSr=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),YSr=i(ge),d4=n(ge,"LI",{});var Yje=s(d4);fMe=n(Yje,"STRONG",{});var GRt=s(fMe);KSr=r(GRt,"gptj"),GRt.forEach(t),ZSr=r(Yje," \u2014 "),SK=n(Yje,"A",{href:!0});var ORt=s(SK);eRr=r(ORt,"TFGPTJForQuestionAnswering"),ORt.forEach(t),oRr=r(Yje," (GPT-J model)"),Yje.forEach(t),rRr=i(ge),c4=n(ge,"LI",{});var Kje=s(c4);mMe=n(Kje,"STRONG",{});var VRt=s(mMe);tRr=r(VRt,"longformer"),VRt.forEach(t),aRr=r(Kje," \u2014 "),RK=n(Kje,"A",{href:!0});var XRt=s(RK);nRr=r(XRt,"TFLongformerForQuestionAnswering"),XRt.forEach(t),sRr=r(Kje," (Longformer model)"),Kje.forEach(t),lRr=i(ge),f4=n(ge,"LI",{});var Zje=s(f4);gMe=n(Zje,"STRONG",{});var zRt=s(gMe);iRr=r(zRt,"mobilebert"),zRt.forEach(t),dRr=r(Zje," \u2014 "),PK=n(Zje,"A",{href:!0});var WRt=s(PK);cRr=r(WRt,"TFMobileBertForQuestionAnswering"),WRt.forEach(t),fRr=r(Zje," (MobileBERT model)"),Zje.forEach(t),mRr=i(ge),m4=n(ge,"LI",{});var eDe=s(m4);hMe=n(eDe,"STRONG",{});var QRt=s(hMe);gRr=r(QRt,"mpnet"),QRt.forEach(t),hRr=r(eDe," \u2014 "),BK=n(eDe,"A",{href:!0});var HRt=s(BK);pRr=r(HRt,"TFMPNetForQuestionAnswering"),HRt.forEach(t),_Rr=r(eDe," (MPNet model)"),eDe.forEach(t),uRr=i(ge),g4=n(ge,"LI",{});var oDe=s(g4);pMe=n(oDe,"STRONG",{});var URt=s(pMe);bRr=r(URt,"rembert"),URt.forEach(t),vRr=r(oDe," \u2014 "),IK=n(oDe,"A",{href:!0});var JRt=s(IK);FRr=r(JRt,"TFRemBertForQuestionAnswering"),JRt.forEach(t),TRr=r(oDe," (RemBERT model)"),oDe.forEach(t),MRr=i(ge),h4=n(ge,"LI",{});var rDe=s(h4);_Me=n(rDe,"STRONG",{});var YRt=s(_Me);ERr=r(YRt,"roberta"),YRt.forEach(t),CRr=r(rDe," \u2014 "),NK=n(rDe,"A",{href:!0});var KRt=s(NK);wRr=r(KRt,"TFRobertaForQuestionAnswering"),KRt.forEach(t),ARr=r(rDe," (RoBERTa model)"),rDe.forEach(t),LRr=i(ge),p4=n(ge,"LI",{});var tDe=s(p4);uMe=n(tDe,"STRONG",{});var ZRt=s(uMe);yRr=r(ZRt,"roformer"),ZRt.forEach(t),xRr=r(tDe," \u2014 "),qK=n(tDe,"A",{href:!0});var ePt=s(qK);$Rr=r(ePt,"TFRoFormerForQuestionAnswering"),ePt.forEach(t),kRr=r(tDe," (RoFormer model)"),tDe.forEach(t),SRr=i(ge),_4=n(ge,"LI",{});var aDe=s(_4);bMe=n(aDe,"STRONG",{});var oPt=s(bMe);RRr=r(oPt,"xlm"),oPt.forEach(t),PRr=r(aDe," \u2014 "),jK=n(aDe,"A",{href:!0});var rPt=s(jK);BRr=r(rPt,"TFXLMForQuestionAnsweringSimple"),rPt.forEach(t),IRr=r(aDe," (XLM model)"),aDe.forEach(t),NRr=i(ge),u4=n(ge,"LI",{});var nDe=s(u4);vMe=n(nDe,"STRONG",{});var tPt=s(vMe);qRr=r(tPt,"xlm-roberta"),tPt.forEach(t),jRr=r(nDe," \u2014 "),DK=n(nDe,"A",{href:!0});var aPt=s(DK);DRr=r(aPt,"TFXLMRobertaForQuestionAnswering"),aPt.forEach(t),GRr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),ORr=i(ge),b4=n(ge,"LI",{});var sDe=s(b4);FMe=n(sDe,"STRONG",{});var nPt=s(FMe);VRr=r(nPt,"xlnet"),nPt.forEach(t),XRr=r(sDe," \u2014 "),GK=n(sDe,"A",{href:!0});var sPt=s(GK);zRr=r(sPt,"TFXLNetForQuestionAnsweringSimple"),sPt.forEach(t),WRr=r(sDe," (XLNet model)"),sDe.forEach(t),ge.forEach(t),QRr=i(Ul),T(v4.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),OVe=i(f),jc=n(f,"H2",{class:!0});var Yze=s(jc);F4=n(Yze,"A",{id:!0,class:!0,href:!0});var lPt=s(F4);TMe=n(lPt,"SPAN",{});var iPt=s(TMe);T(yx.$$.fragment,iPt),iPt.forEach(t),lPt.forEach(t),HRr=i(Yze),MMe=n(Yze,"SPAN",{});var dPt=s(MMe);URr=r(dPt,"TFAutoModelForVision2Seq"),dPt.forEach(t),Yze.forEach(t),VVe=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(xx.$$.fragment,Jl),JRr=i(Jl),Dc=n(Jl,"P",{});var ete=s(Dc);YRr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OK=n(ete,"A",{href:!0});var cPt=s(OK);KRr=r(cPt,"from_pretrained()"),cPt.forEach(t),ZRr=r(ete," class method or the "),VK=n(ete,"A",{href:!0});var fPt=s(VK);ePr=r(fPt,"from_config()"),fPt.forEach(t),oPr=r(ete,` class
method.`),ete.forEach(t),rPr=i(Jl),$x=n(Jl,"P",{});var Kze=s($x);tPr=r(Kze,"This class cannot be instantiated directly using "),EMe=n(Kze,"CODE",{});var mPt=s(EMe);aPr=r(mPt,"__init__()"),mPt.forEach(t),nPr=r(Kze," (throws an error)."),Kze.forEach(t),sPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var tA=s(Vt);T(kx.$$.fragment,tA),lPr=i(tA),CMe=n(tA,"P",{});var gPt=s(CMe);iPr=r(gPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gPt.forEach(t),dPr=i(tA),Gc=n(tA,"P",{});var ote=s(Gc);cPr=r(ote,`Note:
Loading a model from its configuration file does `),wMe=n(ote,"STRONG",{});var hPt=s(wMe);fPr=r(hPt,"not"),hPt.forEach(t),mPr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(ote,"A",{href:!0});var pPt=s(XK);gPr=r(pPt,"from_pretrained()"),pPt.forEach(t),hPr=r(ote," to load the model weights."),ote.forEach(t),pPr=i(tA),T(T4.$$.fragment,tA),tA.forEach(t),_Pr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Sx.$$.fragment,Yl),uPr=i(Yl),AMe=n(Yl,"P",{});var _Pt=s(AMe);bPr=r(_Pt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Pt.forEach(t),vPr=i(Yl),bn=n(Yl,"P",{});var aA=s(bn);FPr=r(aA,"The model class to instantiate is selected based on the "),LMe=n(aA,"CODE",{});var uPt=s(LMe);TPr=r(uPt,"model_type"),uPt.forEach(t),MPr=r(aA,` property of the config object (either
passed as an argument or loaded from `),yMe=n(aA,"CODE",{});var bPt=s(yMe);EPr=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),CPr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(aA,"CODE",{});var vPt=s(xMe);wPr=r(vPt,"pretrained_model_name_or_path"),vPt.forEach(t),APr=r(aA,":"),aA.forEach(t),LPr=i(Yl),$Me=n(Yl,"UL",{});var FPt=s($Me);M4=n(FPt,"LI",{});var lDe=s(M4);kMe=n(lDe,"STRONG",{});var TPt=s(kMe);yPr=r(TPt,"vision-encoder-decoder"),TPt.forEach(t),xPr=r(lDe," \u2014 "),zK=n(lDe,"A",{href:!0});var MPt=s(zK);$Pr=r(MPt,"TFVisionEncoderDecoderModel"),MPt.forEach(t),kPr=r(lDe," (Vision Encoder decoder model)"),lDe.forEach(t),FPt.forEach(t),SPr=i(Yl),T(E4.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XVe=i(f),Oc=n(f,"H2",{class:!0});var Zze=s(Oc);C4=n(Zze,"A",{id:!0,class:!0,href:!0});var EPt=s(C4);SMe=n(EPt,"SPAN",{});var CPt=s(SMe);T(Rx.$$.fragment,CPt),CPt.forEach(t),EPt.forEach(t),RPr=i(Zze),RMe=n(Zze,"SPAN",{});var wPt=s(RMe);PPr=r(wPt,"TFAutoModelForSpeechSeq2Seq"),wPt.forEach(t),Zze.forEach(t),zVe=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Px.$$.fragment,Kl),BPr=i(Kl),Vc=n(Kl,"P",{});var rte=s(Vc);IPr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WK=n(rte,"A",{href:!0});var APt=s(WK);NPr=r(APt,"from_pretrained()"),APt.forEach(t),qPr=r(rte," class method or the "),QK=n(rte,"A",{href:!0});var LPt=s(QK);jPr=r(LPt,"from_config()"),LPt.forEach(t),DPr=r(rte,` class
method.`),rte.forEach(t),GPr=i(Kl),Bx=n(Kl,"P",{});var eWe=s(Bx);OPr=r(eWe,"This class cannot be instantiated directly using "),PMe=n(eWe,"CODE",{});var yPt=s(PMe);VPr=r(yPt,"__init__()"),yPt.forEach(t),XPr=r(eWe," (throws an error)."),eWe.forEach(t),zPr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var nA=s(Xt);T(Ix.$$.fragment,nA),WPr=i(nA),BMe=n(nA,"P",{});var xPt=s(BMe);QPr=r(xPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xPt.forEach(t),HPr=i(nA),Xc=n(nA,"P",{});var tte=s(Xc);UPr=r(tte,`Note:
Loading a model from its configuration file does `),IMe=n(tte,"STRONG",{});var $Pt=s(IMe);JPr=r($Pt,"not"),$Pt.forEach(t),YPr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(tte,"A",{href:!0});var kPt=s(HK);KPr=r(kPt,"from_pretrained()"),kPt.forEach(t),ZPr=r(tte," to load the model weights."),tte.forEach(t),eBr=i(nA),T(w4.$$.fragment,nA),nA.forEach(t),oBr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Nx.$$.fragment,Zl),rBr=i(Zl),NMe=n(Zl,"P",{});var SPt=s(NMe);tBr=r(SPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SPt.forEach(t),aBr=i(Zl),vn=n(Zl,"P",{});var sA=s(vn);nBr=r(sA,"The model class to instantiate is selected based on the "),qMe=n(sA,"CODE",{});var RPt=s(qMe);sBr=r(RPt,"model_type"),RPt.forEach(t),lBr=r(sA,` property of the config object (either
passed as an argument or loaded from `),jMe=n(sA,"CODE",{});var PPt=s(jMe);iBr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),dBr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(sA,"CODE",{});var BPt=s(DMe);cBr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),fBr=r(sA,":"),sA.forEach(t),mBr=i(Zl),GMe=n(Zl,"UL",{});var IPt=s(GMe);A4=n(IPt,"LI",{});var iDe=s(A4);OMe=n(iDe,"STRONG",{});var NPt=s(OMe);gBr=r(NPt,"speech_to_text"),NPt.forEach(t),hBr=r(iDe," \u2014 "),UK=n(iDe,"A",{href:!0});var qPt=s(UK);pBr=r(qPt,"TFSpeech2TextForConditionalGeneration"),qPt.forEach(t),_Br=r(iDe," (Speech2Text model)"),iDe.forEach(t),IPt.forEach(t),uBr=i(Zl),T(L4.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WVe=i(f),zc=n(f,"H2",{class:!0});var oWe=s(zc);y4=n(oWe,"A",{id:!0,class:!0,href:!0});var jPt=s(y4);VMe=n(jPt,"SPAN",{});var DPt=s(VMe);T(qx.$$.fragment,DPt),DPt.forEach(t),jPt.forEach(t),bBr=i(oWe),XMe=n(oWe,"SPAN",{});var GPt=s(XMe);vBr=r(GPt,"FlaxAutoModel"),GPt.forEach(t),oWe.forEach(t),QVe=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(jx.$$.fragment,ei),FBr=i(ei),Wc=n(ei,"P",{});var ate=s(Wc);TBr=r(ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JK=n(ate,"A",{href:!0});var OPt=s(JK);MBr=r(OPt,"from_pretrained()"),OPt.forEach(t),EBr=r(ate," class method or the "),YK=n(ate,"A",{href:!0});var VPt=s(YK);CBr=r(VPt,"from_config()"),VPt.forEach(t),wBr=r(ate,` class
method.`),ate.forEach(t),ABr=i(ei),Dx=n(ei,"P",{});var rWe=s(Dx);LBr=r(rWe,"This class cannot be instantiated directly using "),zMe=n(rWe,"CODE",{});var XPt=s(zMe);yBr=r(XPt,"__init__()"),XPt.forEach(t),xBr=r(rWe," (throws an error)."),rWe.forEach(t),$Br=i(ei),zt=n(ei,"DIV",{class:!0});var lA=s(zt);T(Gx.$$.fragment,lA),kBr=i(lA),WMe=n(lA,"P",{});var zPt=s(WMe);SBr=r(zPt,"Instantiates one of the base model classes of the library from a configuration."),zPt.forEach(t),RBr=i(lA),Qc=n(lA,"P",{});var nte=s(Qc);PBr=r(nte,`Note:
Loading a model from its configuration file does `),QMe=n(nte,"STRONG",{});var WPt=s(QMe);BBr=r(WPt,"not"),WPt.forEach(t),IBr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(nte,"A",{href:!0});var QPt=s(KK);NBr=r(QPt,"from_pretrained()"),QPt.forEach(t),qBr=r(nte," to load the model weights."),nte.forEach(t),jBr=i(lA),T(x4.$$.fragment,lA),lA.forEach(t),DBr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(Ox.$$.fragment,oi),GBr=i(oi),HMe=n(oi,"P",{});var HPt=s(HMe);OBr=r(HPt,"Instantiate one of the base model classes of the library from a pretrained model."),HPt.forEach(t),VBr=i(oi),Fn=n(oi,"P",{});var iA=s(Fn);XBr=r(iA,"The model class to instantiate is selected based on the "),UMe=n(iA,"CODE",{});var UPt=s(UMe);zBr=r(UPt,"model_type"),UPt.forEach(t),WBr=r(iA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(iA,"CODE",{});var JPt=s(JMe);QBr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),HBr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(iA,"CODE",{});var YPt=s(YMe);UBr=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),JBr=r(iA,":"),iA.forEach(t),YBr=i(oi),oe=n(oi,"UL",{});var ae=s(oe);$4=n(ae,"LI",{});var dDe=s($4);KMe=n(dDe,"STRONG",{});var KPt=s(KMe);KBr=r(KPt,"albert"),KPt.forEach(t),ZBr=r(dDe," \u2014 "),ZK=n(dDe,"A",{href:!0});var ZPt=s(ZK);eIr=r(ZPt,"FlaxAlbertModel"),ZPt.forEach(t),oIr=r(dDe," (ALBERT model)"),dDe.forEach(t),rIr=i(ae),k4=n(ae,"LI",{});var cDe=s(k4);ZMe=n(cDe,"STRONG",{});var eBt=s(ZMe);tIr=r(eBt,"bart"),eBt.forEach(t),aIr=r(cDe," \u2014 "),eZ=n(cDe,"A",{href:!0});var oBt=s(eZ);nIr=r(oBt,"FlaxBartModel"),oBt.forEach(t),sIr=r(cDe," (BART model)"),cDe.forEach(t),lIr=i(ae),S4=n(ae,"LI",{});var fDe=s(S4);eEe=n(fDe,"STRONG",{});var rBt=s(eEe);iIr=r(rBt,"beit"),rBt.forEach(t),dIr=r(fDe," \u2014 "),oZ=n(fDe,"A",{href:!0});var tBt=s(oZ);cIr=r(tBt,"FlaxBeitModel"),tBt.forEach(t),fIr=r(fDe," (BEiT model)"),fDe.forEach(t),mIr=i(ae),R4=n(ae,"LI",{});var mDe=s(R4);oEe=n(mDe,"STRONG",{});var aBt=s(oEe);gIr=r(aBt,"bert"),aBt.forEach(t),hIr=r(mDe," \u2014 "),rZ=n(mDe,"A",{href:!0});var nBt=s(rZ);pIr=r(nBt,"FlaxBertModel"),nBt.forEach(t),_Ir=r(mDe," (BERT model)"),mDe.forEach(t),uIr=i(ae),P4=n(ae,"LI",{});var gDe=s(P4);rEe=n(gDe,"STRONG",{});var sBt=s(rEe);bIr=r(sBt,"big_bird"),sBt.forEach(t),vIr=r(gDe," \u2014 "),tZ=n(gDe,"A",{href:!0});var lBt=s(tZ);FIr=r(lBt,"FlaxBigBirdModel"),lBt.forEach(t),TIr=r(gDe," (BigBird model)"),gDe.forEach(t),MIr=i(ae),B4=n(ae,"LI",{});var hDe=s(B4);tEe=n(hDe,"STRONG",{});var iBt=s(tEe);EIr=r(iBt,"blenderbot"),iBt.forEach(t),CIr=r(hDe," \u2014 "),aZ=n(hDe,"A",{href:!0});var dBt=s(aZ);wIr=r(dBt,"FlaxBlenderbotModel"),dBt.forEach(t),AIr=r(hDe," (Blenderbot model)"),hDe.forEach(t),LIr=i(ae),I4=n(ae,"LI",{});var pDe=s(I4);aEe=n(pDe,"STRONG",{});var cBt=s(aEe);yIr=r(cBt,"blenderbot-small"),cBt.forEach(t),xIr=r(pDe," \u2014 "),nZ=n(pDe,"A",{href:!0});var fBt=s(nZ);$Ir=r(fBt,"FlaxBlenderbotSmallModel"),fBt.forEach(t),kIr=r(pDe," (BlenderbotSmall model)"),pDe.forEach(t),SIr=i(ae),N4=n(ae,"LI",{});var _De=s(N4);nEe=n(_De,"STRONG",{});var mBt=s(nEe);RIr=r(mBt,"clip"),mBt.forEach(t),PIr=r(_De," \u2014 "),sZ=n(_De,"A",{href:!0});var gBt=s(sZ);BIr=r(gBt,"FlaxCLIPModel"),gBt.forEach(t),IIr=r(_De," (CLIP model)"),_De.forEach(t),NIr=i(ae),q4=n(ae,"LI",{});var uDe=s(q4);sEe=n(uDe,"STRONG",{});var hBt=s(sEe);qIr=r(hBt,"distilbert"),hBt.forEach(t),jIr=r(uDe," \u2014 "),lZ=n(uDe,"A",{href:!0});var pBt=s(lZ);DIr=r(pBt,"FlaxDistilBertModel"),pBt.forEach(t),GIr=r(uDe," (DistilBERT model)"),uDe.forEach(t),OIr=i(ae),j4=n(ae,"LI",{});var bDe=s(j4);lEe=n(bDe,"STRONG",{});var _Bt=s(lEe);VIr=r(_Bt,"electra"),_Bt.forEach(t),XIr=r(bDe," \u2014 "),iZ=n(bDe,"A",{href:!0});var uBt=s(iZ);zIr=r(uBt,"FlaxElectraModel"),uBt.forEach(t),WIr=r(bDe," (ELECTRA model)"),bDe.forEach(t),QIr=i(ae),D4=n(ae,"LI",{});var vDe=s(D4);iEe=n(vDe,"STRONG",{});var bBt=s(iEe);HIr=r(bBt,"gpt2"),bBt.forEach(t),UIr=r(vDe," \u2014 "),dZ=n(vDe,"A",{href:!0});var vBt=s(dZ);JIr=r(vBt,"FlaxGPT2Model"),vBt.forEach(t),YIr=r(vDe," (OpenAI GPT-2 model)"),vDe.forEach(t),KIr=i(ae),G4=n(ae,"LI",{});var FDe=s(G4);dEe=n(FDe,"STRONG",{});var FBt=s(dEe);ZIr=r(FBt,"gpt_neo"),FBt.forEach(t),eNr=r(FDe," \u2014 "),cZ=n(FDe,"A",{href:!0});var TBt=s(cZ);oNr=r(TBt,"FlaxGPTNeoModel"),TBt.forEach(t),rNr=r(FDe," (GPT Neo model)"),FDe.forEach(t),tNr=i(ae),O4=n(ae,"LI",{});var TDe=s(O4);cEe=n(TDe,"STRONG",{});var MBt=s(cEe);aNr=r(MBt,"gptj"),MBt.forEach(t),nNr=r(TDe," \u2014 "),fZ=n(TDe,"A",{href:!0});var EBt=s(fZ);sNr=r(EBt,"FlaxGPTJModel"),EBt.forEach(t),lNr=r(TDe," (GPT-J model)"),TDe.forEach(t),iNr=i(ae),V4=n(ae,"LI",{});var MDe=s(V4);fEe=n(MDe,"STRONG",{});var CBt=s(fEe);dNr=r(CBt,"longt5"),CBt.forEach(t),cNr=r(MDe," \u2014 "),mZ=n(MDe,"A",{href:!0});var wBt=s(mZ);fNr=r(wBt,"FlaxLongT5Model"),wBt.forEach(t),mNr=r(MDe," (LongT5 model)"),MDe.forEach(t),gNr=i(ae),X4=n(ae,"LI",{});var EDe=s(X4);mEe=n(EDe,"STRONG",{});var ABt=s(mEe);hNr=r(ABt,"marian"),ABt.forEach(t),pNr=r(EDe," \u2014 "),gZ=n(EDe,"A",{href:!0});var LBt=s(gZ);_Nr=r(LBt,"FlaxMarianModel"),LBt.forEach(t),uNr=r(EDe," (Marian model)"),EDe.forEach(t),bNr=i(ae),z4=n(ae,"LI",{});var CDe=s(z4);gEe=n(CDe,"STRONG",{});var yBt=s(gEe);vNr=r(yBt,"mbart"),yBt.forEach(t),FNr=r(CDe," \u2014 "),hZ=n(CDe,"A",{href:!0});var xBt=s(hZ);TNr=r(xBt,"FlaxMBartModel"),xBt.forEach(t),MNr=r(CDe," (mBART model)"),CDe.forEach(t),ENr=i(ae),W4=n(ae,"LI",{});var wDe=s(W4);hEe=n(wDe,"STRONG",{});var $Bt=s(hEe);CNr=r($Bt,"mt5"),$Bt.forEach(t),wNr=r(wDe," \u2014 "),pZ=n(wDe,"A",{href:!0});var kBt=s(pZ);ANr=r(kBt,"FlaxMT5Model"),kBt.forEach(t),LNr=r(wDe," (MT5 model)"),wDe.forEach(t),yNr=i(ae),Q4=n(ae,"LI",{});var ADe=s(Q4);pEe=n(ADe,"STRONG",{});var SBt=s(pEe);xNr=r(SBt,"opt"),SBt.forEach(t),$Nr=r(ADe," \u2014 "),_Z=n(ADe,"A",{href:!0});var RBt=s(_Z);kNr=r(RBt,"FlaxOPTModel"),RBt.forEach(t),SNr=r(ADe," (OPT model)"),ADe.forEach(t),RNr=i(ae),H4=n(ae,"LI",{});var LDe=s(H4);_Ee=n(LDe,"STRONG",{});var PBt=s(_Ee);PNr=r(PBt,"pegasus"),PBt.forEach(t),BNr=r(LDe," \u2014 "),uZ=n(LDe,"A",{href:!0});var BBt=s(uZ);INr=r(BBt,"FlaxPegasusModel"),BBt.forEach(t),NNr=r(LDe," (Pegasus model)"),LDe.forEach(t),qNr=i(ae),U4=n(ae,"LI",{});var yDe=s(U4);uEe=n(yDe,"STRONG",{});var IBt=s(uEe);jNr=r(IBt,"roberta"),IBt.forEach(t),DNr=r(yDe," \u2014 "),bZ=n(yDe,"A",{href:!0});var NBt=s(bZ);GNr=r(NBt,"FlaxRobertaModel"),NBt.forEach(t),ONr=r(yDe," (RoBERTa model)"),yDe.forEach(t),VNr=i(ae),J4=n(ae,"LI",{});var xDe=s(J4);bEe=n(xDe,"STRONG",{});var qBt=s(bEe);XNr=r(qBt,"roformer"),qBt.forEach(t),zNr=r(xDe," \u2014 "),vZ=n(xDe,"A",{href:!0});var jBt=s(vZ);WNr=r(jBt,"FlaxRoFormerModel"),jBt.forEach(t),QNr=r(xDe," (RoFormer model)"),xDe.forEach(t),HNr=i(ae),Y4=n(ae,"LI",{});var $De=s(Y4);vEe=n($De,"STRONG",{});var DBt=s(vEe);UNr=r(DBt,"t5"),DBt.forEach(t),JNr=r($De," \u2014 "),FZ=n($De,"A",{href:!0});var GBt=s(FZ);YNr=r(GBt,"FlaxT5Model"),GBt.forEach(t),KNr=r($De," (T5 model)"),$De.forEach(t),ZNr=i(ae),K4=n(ae,"LI",{});var kDe=s(K4);FEe=n(kDe,"STRONG",{});var OBt=s(FEe);eqr=r(OBt,"vision-text-dual-encoder"),OBt.forEach(t),oqr=r(kDe," \u2014 "),TZ=n(kDe,"A",{href:!0});var VBt=s(TZ);rqr=r(VBt,"FlaxVisionTextDualEncoderModel"),VBt.forEach(t),tqr=r(kDe," (VisionTextDualEncoder model)"),kDe.forEach(t),aqr=i(ae),Z4=n(ae,"LI",{});var SDe=s(Z4);TEe=n(SDe,"STRONG",{});var XBt=s(TEe);nqr=r(XBt,"vit"),XBt.forEach(t),sqr=r(SDe," \u2014 "),MZ=n(SDe,"A",{href:!0});var zBt=s(MZ);lqr=r(zBt,"FlaxViTModel"),zBt.forEach(t),iqr=r(SDe," (ViT model)"),SDe.forEach(t),dqr=i(ae),eC=n(ae,"LI",{});var RDe=s(eC);MEe=n(RDe,"STRONG",{});var WBt=s(MEe);cqr=r(WBt,"wav2vec2"),WBt.forEach(t),fqr=r(RDe," \u2014 "),EZ=n(RDe,"A",{href:!0});var QBt=s(EZ);mqr=r(QBt,"FlaxWav2Vec2Model"),QBt.forEach(t),gqr=r(RDe," (Wav2Vec2 model)"),RDe.forEach(t),hqr=i(ae),oC=n(ae,"LI",{});var PDe=s(oC);EEe=n(PDe,"STRONG",{});var HBt=s(EEe);pqr=r(HBt,"xglm"),HBt.forEach(t),_qr=r(PDe," \u2014 "),CZ=n(PDe,"A",{href:!0});var UBt=s(CZ);uqr=r(UBt,"FlaxXGLMModel"),UBt.forEach(t),bqr=r(PDe," (XGLM model)"),PDe.forEach(t),vqr=i(ae),rC=n(ae,"LI",{});var BDe=s(rC);CEe=n(BDe,"STRONG",{});var JBt=s(CEe);Fqr=r(JBt,"xlm-roberta"),JBt.forEach(t),Tqr=r(BDe," \u2014 "),wZ=n(BDe,"A",{href:!0});var YBt=s(wZ);Mqr=r(YBt,"FlaxXLMRobertaModel"),YBt.forEach(t),Eqr=r(BDe," (XLM-RoBERTa model)"),BDe.forEach(t),ae.forEach(t),Cqr=i(oi),T(tC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),HVe=i(f),Hc=n(f,"H2",{class:!0});var tWe=s(Hc);aC=n(tWe,"A",{id:!0,class:!0,href:!0});var KBt=s(aC);wEe=n(KBt,"SPAN",{});var ZBt=s(wEe);T(Vx.$$.fragment,ZBt),ZBt.forEach(t),KBt.forEach(t),wqr=i(tWe),AEe=n(tWe,"SPAN",{});var eIt=s(AEe);Aqr=r(eIt,"FlaxAutoModelForCausalLM"),eIt.forEach(t),tWe.forEach(t),UVe=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(Xx.$$.fragment,ri),Lqr=i(ri),Uc=n(ri,"P",{});var ste=s(Uc);yqr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AZ=n(ste,"A",{href:!0});var oIt=s(AZ);xqr=r(oIt,"from_pretrained()"),oIt.forEach(t),$qr=r(ste," class method or the "),LZ=n(ste,"A",{href:!0});var rIt=s(LZ);kqr=r(rIt,"from_config()"),rIt.forEach(t),Sqr=r(ste,` class
method.`),ste.forEach(t),Rqr=i(ri),zx=n(ri,"P",{});var aWe=s(zx);Pqr=r(aWe,"This class cannot be instantiated directly using "),LEe=n(aWe,"CODE",{});var tIt=s(LEe);Bqr=r(tIt,"__init__()"),tIt.forEach(t),Iqr=r(aWe," (throws an error)."),aWe.forEach(t),Nqr=i(ri),Wt=n(ri,"DIV",{class:!0});var dA=s(Wt);T(Wx.$$.fragment,dA),qqr=i(dA),yEe=n(dA,"P",{});var aIt=s(yEe);jqr=r(aIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aIt.forEach(t),Dqr=i(dA),Jc=n(dA,"P",{});var lte=s(Jc);Gqr=r(lte,`Note:
Loading a model from its configuration file does `),xEe=n(lte,"STRONG",{});var nIt=s(xEe);Oqr=r(nIt,"not"),nIt.forEach(t),Vqr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(lte,"A",{href:!0});var sIt=s(yZ);Xqr=r(sIt,"from_pretrained()"),sIt.forEach(t),zqr=r(lte," to load the model weights."),lte.forEach(t),Wqr=i(dA),T(nC.$$.fragment,dA),dA.forEach(t),Qqr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(Qx.$$.fragment,ti),Hqr=i(ti),$Ee=n(ti,"P",{});var lIt=s($Ee);Uqr=r(lIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lIt.forEach(t),Jqr=i(ti),Tn=n(ti,"P",{});var cA=s(Tn);Yqr=r(cA,"The model class to instantiate is selected based on the "),kEe=n(cA,"CODE",{});var iIt=s(kEe);Kqr=r(iIt,"model_type"),iIt.forEach(t),Zqr=r(cA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(cA,"CODE",{});var dIt=s(SEe);ejr=r(dIt,"pretrained_model_name_or_path"),dIt.forEach(t),ojr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(cA,"CODE",{});var cIt=s(REe);rjr=r(cIt,"pretrained_model_name_or_path"),cIt.forEach(t),tjr=r(cA,":"),cA.forEach(t),ajr=i(ti),xe=n(ti,"UL",{});var Ne=s(xe);sC=n(Ne,"LI",{});var IDe=s(sC);PEe=n(IDe,"STRONG",{});var fIt=s(PEe);njr=r(fIt,"bart"),fIt.forEach(t),sjr=r(IDe," \u2014 "),xZ=n(IDe,"A",{href:!0});var mIt=s(xZ);ljr=r(mIt,"FlaxBartForCausalLM"),mIt.forEach(t),ijr=r(IDe," (BART model)"),IDe.forEach(t),djr=i(Ne),lC=n(Ne,"LI",{});var NDe=s(lC);BEe=n(NDe,"STRONG",{});var gIt=s(BEe);cjr=r(gIt,"bert"),gIt.forEach(t),fjr=r(NDe," \u2014 "),$Z=n(NDe,"A",{href:!0});var hIt=s($Z);mjr=r(hIt,"FlaxBertForCausalLM"),hIt.forEach(t),gjr=r(NDe," (BERT model)"),NDe.forEach(t),hjr=i(Ne),iC=n(Ne,"LI",{});var qDe=s(iC);IEe=n(qDe,"STRONG",{});var pIt=s(IEe);pjr=r(pIt,"big_bird"),pIt.forEach(t),_jr=r(qDe," \u2014 "),kZ=n(qDe,"A",{href:!0});var _It=s(kZ);ujr=r(_It,"FlaxBigBirdForCausalLM"),_It.forEach(t),bjr=r(qDe," (BigBird model)"),qDe.forEach(t),vjr=i(Ne),dC=n(Ne,"LI",{});var jDe=s(dC);NEe=n(jDe,"STRONG",{});var uIt=s(NEe);Fjr=r(uIt,"electra"),uIt.forEach(t),Tjr=r(jDe," \u2014 "),SZ=n(jDe,"A",{href:!0});var bIt=s(SZ);Mjr=r(bIt,"FlaxElectraForCausalLM"),bIt.forEach(t),Ejr=r(jDe," (ELECTRA model)"),jDe.forEach(t),Cjr=i(Ne),cC=n(Ne,"LI",{});var DDe=s(cC);qEe=n(DDe,"STRONG",{});var vIt=s(qEe);wjr=r(vIt,"gpt2"),vIt.forEach(t),Ajr=r(DDe," \u2014 "),RZ=n(DDe,"A",{href:!0});var FIt=s(RZ);Ljr=r(FIt,"FlaxGPT2LMHeadModel"),FIt.forEach(t),yjr=r(DDe," (OpenAI GPT-2 model)"),DDe.forEach(t),xjr=i(Ne),fC=n(Ne,"LI",{});var GDe=s(fC);jEe=n(GDe,"STRONG",{});var TIt=s(jEe);$jr=r(TIt,"gpt_neo"),TIt.forEach(t),kjr=r(GDe," \u2014 "),PZ=n(GDe,"A",{href:!0});var MIt=s(PZ);Sjr=r(MIt,"FlaxGPTNeoForCausalLM"),MIt.forEach(t),Rjr=r(GDe," (GPT Neo model)"),GDe.forEach(t),Pjr=i(Ne),mC=n(Ne,"LI",{});var ODe=s(mC);DEe=n(ODe,"STRONG",{});var EIt=s(DEe);Bjr=r(EIt,"gptj"),EIt.forEach(t),Ijr=r(ODe," \u2014 "),BZ=n(ODe,"A",{href:!0});var CIt=s(BZ);Njr=r(CIt,"FlaxGPTJForCausalLM"),CIt.forEach(t),qjr=r(ODe," (GPT-J model)"),ODe.forEach(t),jjr=i(Ne),gC=n(Ne,"LI",{});var VDe=s(gC);GEe=n(VDe,"STRONG",{});var wIt=s(GEe);Djr=r(wIt,"opt"),wIt.forEach(t),Gjr=r(VDe," \u2014 "),IZ=n(VDe,"A",{href:!0});var AIt=s(IZ);Ojr=r(AIt,"FlaxOPTForCausalLM"),AIt.forEach(t),Vjr=r(VDe," (OPT model)"),VDe.forEach(t),Xjr=i(Ne),hC=n(Ne,"LI",{});var XDe=s(hC);OEe=n(XDe,"STRONG",{});var LIt=s(OEe);zjr=r(LIt,"roberta"),LIt.forEach(t),Wjr=r(XDe," \u2014 "),NZ=n(XDe,"A",{href:!0});var yIt=s(NZ);Qjr=r(yIt,"FlaxRobertaForCausalLM"),yIt.forEach(t),Hjr=r(XDe," (RoBERTa model)"),XDe.forEach(t),Ujr=i(Ne),pC=n(Ne,"LI",{});var zDe=s(pC);VEe=n(zDe,"STRONG",{});var xIt=s(VEe);Jjr=r(xIt,"xglm"),xIt.forEach(t),Yjr=r(zDe," \u2014 "),qZ=n(zDe,"A",{href:!0});var $It=s(qZ);Kjr=r($It,"FlaxXGLMForCausalLM"),$It.forEach(t),Zjr=r(zDe," (XGLM model)"),zDe.forEach(t),Ne.forEach(t),eDr=i(ti),T(_C.$$.fragment,ti),ti.forEach(t),ri.forEach(t),JVe=i(f),Yc=n(f,"H2",{class:!0});var nWe=s(Yc);uC=n(nWe,"A",{id:!0,class:!0,href:!0});var kIt=s(uC);XEe=n(kIt,"SPAN",{});var SIt=s(XEe);T(Hx.$$.fragment,SIt),SIt.forEach(t),kIt.forEach(t),oDr=i(nWe),zEe=n(nWe,"SPAN",{});var RIt=s(zEe);rDr=r(RIt,"FlaxAutoModelForPreTraining"),RIt.forEach(t),nWe.forEach(t),YVe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Ux.$$.fragment,ai),tDr=i(ai),Kc=n(ai,"P",{});var ite=s(Kc);aDr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jZ=n(ite,"A",{href:!0});var PIt=s(jZ);nDr=r(PIt,"from_pretrained()"),PIt.forEach(t),sDr=r(ite," class method or the "),DZ=n(ite,"A",{href:!0});var BIt=s(DZ);lDr=r(BIt,"from_config()"),BIt.forEach(t),iDr=r(ite,` class
method.`),ite.forEach(t),dDr=i(ai),Jx=n(ai,"P",{});var sWe=s(Jx);cDr=r(sWe,"This class cannot be instantiated directly using "),WEe=n(sWe,"CODE",{});var IIt=s(WEe);fDr=r(IIt,"__init__()"),IIt.forEach(t),mDr=r(sWe," (throws an error)."),sWe.forEach(t),gDr=i(ai),Qt=n(ai,"DIV",{class:!0});var fA=s(Qt);T(Yx.$$.fragment,fA),hDr=i(fA),QEe=n(fA,"P",{});var NIt=s(QEe);pDr=r(NIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NIt.forEach(t),_Dr=i(fA),Zc=n(fA,"P",{});var dte=s(Zc);uDr=r(dte,`Note:
Loading a model from its configuration file does `),HEe=n(dte,"STRONG",{});var qIt=s(HEe);bDr=r(qIt,"not"),qIt.forEach(t),vDr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(dte,"A",{href:!0});var jIt=s(GZ);FDr=r(jIt,"from_pretrained()"),jIt.forEach(t),TDr=r(dte," to load the model weights."),dte.forEach(t),MDr=i(fA),T(bC.$$.fragment,fA),fA.forEach(t),EDr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(Kx.$$.fragment,ni),CDr=i(ni),UEe=n(ni,"P",{});var DIt=s(UEe);wDr=r(DIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DIt.forEach(t),ADr=i(ni),Mn=n(ni,"P",{});var mA=s(Mn);LDr=r(mA,"The model class to instantiate is selected based on the "),JEe=n(mA,"CODE",{});var GIt=s(JEe);yDr=r(GIt,"model_type"),GIt.forEach(t),xDr=r(mA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(mA,"CODE",{});var OIt=s(YEe);$Dr=r(OIt,"pretrained_model_name_or_path"),OIt.forEach(t),kDr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(mA,"CODE",{});var VIt=s(KEe);SDr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),RDr=r(mA,":"),mA.forEach(t),PDr=i(ni),Ee=n(ni,"UL",{});var we=s(Ee);vC=n(we,"LI",{});var WDe=s(vC);ZEe=n(WDe,"STRONG",{});var XIt=s(ZEe);BDr=r(XIt,"albert"),XIt.forEach(t),IDr=r(WDe," \u2014 "),OZ=n(WDe,"A",{href:!0});var zIt=s(OZ);NDr=r(zIt,"FlaxAlbertForPreTraining"),zIt.forEach(t),qDr=r(WDe," (ALBERT model)"),WDe.forEach(t),jDr=i(we),FC=n(we,"LI",{});var QDe=s(FC);e4e=n(QDe,"STRONG",{});var WIt=s(e4e);DDr=r(WIt,"bart"),WIt.forEach(t),GDr=r(QDe," \u2014 "),VZ=n(QDe,"A",{href:!0});var QIt=s(VZ);ODr=r(QIt,"FlaxBartForConditionalGeneration"),QIt.forEach(t),VDr=r(QDe," (BART model)"),QDe.forEach(t),XDr=i(we),TC=n(we,"LI",{});var HDe=s(TC);o4e=n(HDe,"STRONG",{});var HIt=s(o4e);zDr=r(HIt,"bert"),HIt.forEach(t),WDr=r(HDe," \u2014 "),XZ=n(HDe,"A",{href:!0});var UIt=s(XZ);QDr=r(UIt,"FlaxBertForPreTraining"),UIt.forEach(t),HDr=r(HDe," (BERT model)"),HDe.forEach(t),UDr=i(we),MC=n(we,"LI",{});var UDe=s(MC);r4e=n(UDe,"STRONG",{});var JIt=s(r4e);JDr=r(JIt,"big_bird"),JIt.forEach(t),YDr=r(UDe," \u2014 "),zZ=n(UDe,"A",{href:!0});var YIt=s(zZ);KDr=r(YIt,"FlaxBigBirdForPreTraining"),YIt.forEach(t),ZDr=r(UDe," (BigBird model)"),UDe.forEach(t),eGr=i(we),EC=n(we,"LI",{});var JDe=s(EC);t4e=n(JDe,"STRONG",{});var KIt=s(t4e);oGr=r(KIt,"electra"),KIt.forEach(t),rGr=r(JDe," \u2014 "),WZ=n(JDe,"A",{href:!0});var ZIt=s(WZ);tGr=r(ZIt,"FlaxElectraForPreTraining"),ZIt.forEach(t),aGr=r(JDe," (ELECTRA model)"),JDe.forEach(t),nGr=i(we),CC=n(we,"LI",{});var YDe=s(CC);a4e=n(YDe,"STRONG",{});var eNt=s(a4e);sGr=r(eNt,"longt5"),eNt.forEach(t),lGr=r(YDe," \u2014 "),QZ=n(YDe,"A",{href:!0});var oNt=s(QZ);iGr=r(oNt,"FlaxLongT5ForConditionalGeneration"),oNt.forEach(t),dGr=r(YDe," (LongT5 model)"),YDe.forEach(t),cGr=i(we),wC=n(we,"LI",{});var KDe=s(wC);n4e=n(KDe,"STRONG",{});var rNt=s(n4e);fGr=r(rNt,"mbart"),rNt.forEach(t),mGr=r(KDe," \u2014 "),HZ=n(KDe,"A",{href:!0});var tNt=s(HZ);gGr=r(tNt,"FlaxMBartForConditionalGeneration"),tNt.forEach(t),hGr=r(KDe," (mBART model)"),KDe.forEach(t),pGr=i(we),AC=n(we,"LI",{});var ZDe=s(AC);s4e=n(ZDe,"STRONG",{});var aNt=s(s4e);_Gr=r(aNt,"mt5"),aNt.forEach(t),uGr=r(ZDe," \u2014 "),UZ=n(ZDe,"A",{href:!0});var nNt=s(UZ);bGr=r(nNt,"FlaxMT5ForConditionalGeneration"),nNt.forEach(t),vGr=r(ZDe," (MT5 model)"),ZDe.forEach(t),FGr=i(we),LC=n(we,"LI",{});var eGe=s(LC);l4e=n(eGe,"STRONG",{});var sNt=s(l4e);TGr=r(sNt,"roberta"),sNt.forEach(t),MGr=r(eGe," \u2014 "),JZ=n(eGe,"A",{href:!0});var lNt=s(JZ);EGr=r(lNt,"FlaxRobertaForMaskedLM"),lNt.forEach(t),CGr=r(eGe," (RoBERTa model)"),eGe.forEach(t),wGr=i(we),yC=n(we,"LI",{});var oGe=s(yC);i4e=n(oGe,"STRONG",{});var iNt=s(i4e);AGr=r(iNt,"roformer"),iNt.forEach(t),LGr=r(oGe," \u2014 "),YZ=n(oGe,"A",{href:!0});var dNt=s(YZ);yGr=r(dNt,"FlaxRoFormerForMaskedLM"),dNt.forEach(t),xGr=r(oGe," (RoFormer model)"),oGe.forEach(t),$Gr=i(we),xC=n(we,"LI",{});var rGe=s(xC);d4e=n(rGe,"STRONG",{});var cNt=s(d4e);kGr=r(cNt,"t5"),cNt.forEach(t),SGr=r(rGe," \u2014 "),KZ=n(rGe,"A",{href:!0});var fNt=s(KZ);RGr=r(fNt,"FlaxT5ForConditionalGeneration"),fNt.forEach(t),PGr=r(rGe," (T5 model)"),rGe.forEach(t),BGr=i(we),$C=n(we,"LI",{});var tGe=s($C);c4e=n(tGe,"STRONG",{});var mNt=s(c4e);IGr=r(mNt,"wav2vec2"),mNt.forEach(t),NGr=r(tGe," \u2014 "),ZZ=n(tGe,"A",{href:!0});var gNt=s(ZZ);qGr=r(gNt,"FlaxWav2Vec2ForPreTraining"),gNt.forEach(t),jGr=r(tGe," (Wav2Vec2 model)"),tGe.forEach(t),DGr=i(we),kC=n(we,"LI",{});var aGe=s(kC);f4e=n(aGe,"STRONG",{});var hNt=s(f4e);GGr=r(hNt,"xlm-roberta"),hNt.forEach(t),OGr=r(aGe," \u2014 "),eee=n(aGe,"A",{href:!0});var pNt=s(eee);VGr=r(pNt,"FlaxXLMRobertaForMaskedLM"),pNt.forEach(t),XGr=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),we.forEach(t),zGr=i(ni),T(SC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),KVe=i(f),ef=n(f,"H2",{class:!0});var lWe=s(ef);RC=n(lWe,"A",{id:!0,class:!0,href:!0});var _Nt=s(RC);m4e=n(_Nt,"SPAN",{});var uNt=s(m4e);T(Zx.$$.fragment,uNt),uNt.forEach(t),_Nt.forEach(t),WGr=i(lWe),g4e=n(lWe,"SPAN",{});var bNt=s(g4e);QGr=r(bNt,"FlaxAutoModelForMaskedLM"),bNt.forEach(t),lWe.forEach(t),ZVe=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(e$.$$.fragment,si),HGr=i(si),of=n(si,"P",{});var cte=s(of);UGr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oee=n(cte,"A",{href:!0});var vNt=s(oee);JGr=r(vNt,"from_pretrained()"),vNt.forEach(t),YGr=r(cte," class method or the "),ree=n(cte,"A",{href:!0});var FNt=s(ree);KGr=r(FNt,"from_config()"),FNt.forEach(t),ZGr=r(cte,` class
method.`),cte.forEach(t),eOr=i(si),o$=n(si,"P",{});var iWe=s(o$);oOr=r(iWe,"This class cannot be instantiated directly using "),h4e=n(iWe,"CODE",{});var TNt=s(h4e);rOr=r(TNt,"__init__()"),TNt.forEach(t),tOr=r(iWe," (throws an error)."),iWe.forEach(t),aOr=i(si),Ht=n(si,"DIV",{class:!0});var gA=s(Ht);T(r$.$$.fragment,gA),nOr=i(gA),p4e=n(gA,"P",{});var MNt=s(p4e);sOr=r(MNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MNt.forEach(t),lOr=i(gA),rf=n(gA,"P",{});var fte=s(rf);iOr=r(fte,`Note:
Loading a model from its configuration file does `),_4e=n(fte,"STRONG",{});var ENt=s(_4e);dOr=r(ENt,"not"),ENt.forEach(t),cOr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(fte,"A",{href:!0});var CNt=s(tee);fOr=r(CNt,"from_pretrained()"),CNt.forEach(t),mOr=r(fte," to load the model weights."),fte.forEach(t),gOr=i(gA),T(PC.$$.fragment,gA),gA.forEach(t),hOr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(t$.$$.fragment,li),pOr=i(li),u4e=n(li,"P",{});var wNt=s(u4e);_Or=r(wNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wNt.forEach(t),uOr=i(li),En=n(li,"P",{});var hA=s(En);bOr=r(hA,"The model class to instantiate is selected based on the "),b4e=n(hA,"CODE",{});var ANt=s(b4e);vOr=r(ANt,"model_type"),ANt.forEach(t),FOr=r(hA,` property of the config object (either
passed as an argument or loaded from `),v4e=n(hA,"CODE",{});var LNt=s(v4e);TOr=r(LNt,"pretrained_model_name_or_path"),LNt.forEach(t),MOr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(hA,"CODE",{});var yNt=s(F4e);EOr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),COr=r(hA,":"),hA.forEach(t),wOr=i(li),$e=n(li,"UL",{});var qe=s($e);BC=n(qe,"LI",{});var nGe=s(BC);T4e=n(nGe,"STRONG",{});var xNt=s(T4e);AOr=r(xNt,"albert"),xNt.forEach(t),LOr=r(nGe," \u2014 "),aee=n(nGe,"A",{href:!0});var $Nt=s(aee);yOr=r($Nt,"FlaxAlbertForMaskedLM"),$Nt.forEach(t),xOr=r(nGe," (ALBERT model)"),nGe.forEach(t),$Or=i(qe),IC=n(qe,"LI",{});var sGe=s(IC);M4e=n(sGe,"STRONG",{});var kNt=s(M4e);kOr=r(kNt,"bart"),kNt.forEach(t),SOr=r(sGe," \u2014 "),nee=n(sGe,"A",{href:!0});var SNt=s(nee);ROr=r(SNt,"FlaxBartForConditionalGeneration"),SNt.forEach(t),POr=r(sGe," (BART model)"),sGe.forEach(t),BOr=i(qe),NC=n(qe,"LI",{});var lGe=s(NC);E4e=n(lGe,"STRONG",{});var RNt=s(E4e);IOr=r(RNt,"bert"),RNt.forEach(t),NOr=r(lGe," \u2014 "),see=n(lGe,"A",{href:!0});var PNt=s(see);qOr=r(PNt,"FlaxBertForMaskedLM"),PNt.forEach(t),jOr=r(lGe," (BERT model)"),lGe.forEach(t),DOr=i(qe),qC=n(qe,"LI",{});var iGe=s(qC);C4e=n(iGe,"STRONG",{});var BNt=s(C4e);GOr=r(BNt,"big_bird"),BNt.forEach(t),OOr=r(iGe," \u2014 "),lee=n(iGe,"A",{href:!0});var INt=s(lee);VOr=r(INt,"FlaxBigBirdForMaskedLM"),INt.forEach(t),XOr=r(iGe," (BigBird model)"),iGe.forEach(t),zOr=i(qe),jC=n(qe,"LI",{});var dGe=s(jC);w4e=n(dGe,"STRONG",{});var NNt=s(w4e);WOr=r(NNt,"distilbert"),NNt.forEach(t),QOr=r(dGe," \u2014 "),iee=n(dGe,"A",{href:!0});var qNt=s(iee);HOr=r(qNt,"FlaxDistilBertForMaskedLM"),qNt.forEach(t),UOr=r(dGe," (DistilBERT model)"),dGe.forEach(t),JOr=i(qe),DC=n(qe,"LI",{});var cGe=s(DC);A4e=n(cGe,"STRONG",{});var jNt=s(A4e);YOr=r(jNt,"electra"),jNt.forEach(t),KOr=r(cGe," \u2014 "),dee=n(cGe,"A",{href:!0});var DNt=s(dee);ZOr=r(DNt,"FlaxElectraForMaskedLM"),DNt.forEach(t),eVr=r(cGe," (ELECTRA model)"),cGe.forEach(t),oVr=i(qe),GC=n(qe,"LI",{});var fGe=s(GC);L4e=n(fGe,"STRONG",{});var GNt=s(L4e);rVr=r(GNt,"mbart"),GNt.forEach(t),tVr=r(fGe," \u2014 "),cee=n(fGe,"A",{href:!0});var ONt=s(cee);aVr=r(ONt,"FlaxMBartForConditionalGeneration"),ONt.forEach(t),nVr=r(fGe," (mBART model)"),fGe.forEach(t),sVr=i(qe),OC=n(qe,"LI",{});var mGe=s(OC);y4e=n(mGe,"STRONG",{});var VNt=s(y4e);lVr=r(VNt,"roberta"),VNt.forEach(t),iVr=r(mGe," \u2014 "),fee=n(mGe,"A",{href:!0});var XNt=s(fee);dVr=r(XNt,"FlaxRobertaForMaskedLM"),XNt.forEach(t),cVr=r(mGe," (RoBERTa model)"),mGe.forEach(t),fVr=i(qe),VC=n(qe,"LI",{});var gGe=s(VC);x4e=n(gGe,"STRONG",{});var zNt=s(x4e);mVr=r(zNt,"roformer"),zNt.forEach(t),gVr=r(gGe," \u2014 "),mee=n(gGe,"A",{href:!0});var WNt=s(mee);hVr=r(WNt,"FlaxRoFormerForMaskedLM"),WNt.forEach(t),pVr=r(gGe," (RoFormer model)"),gGe.forEach(t),_Vr=i(qe),XC=n(qe,"LI",{});var hGe=s(XC);$4e=n(hGe,"STRONG",{});var QNt=s($4e);uVr=r(QNt,"xlm-roberta"),QNt.forEach(t),bVr=r(hGe," \u2014 "),gee=n(hGe,"A",{href:!0});var HNt=s(gee);vVr=r(HNt,"FlaxXLMRobertaForMaskedLM"),HNt.forEach(t),FVr=r(hGe," (XLM-RoBERTa model)"),hGe.forEach(t),qe.forEach(t),TVr=i(li),T(zC.$$.fragment,li),li.forEach(t),si.forEach(t),eXe=i(f),tf=n(f,"H2",{class:!0});var dWe=s(tf);WC=n(dWe,"A",{id:!0,class:!0,href:!0});var UNt=s(WC);k4e=n(UNt,"SPAN",{});var JNt=s(k4e);T(a$.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),MVr=i(dWe),S4e=n(dWe,"SPAN",{});var YNt=s(S4e);EVr=r(YNt,"FlaxAutoModelForSeq2SeqLM"),YNt.forEach(t),dWe.forEach(t),oXe=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(n$.$$.fragment,ii),CVr=i(ii),af=n(ii,"P",{});var mte=s(af);wVr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hee=n(mte,"A",{href:!0});var KNt=s(hee);AVr=r(KNt,"from_pretrained()"),KNt.forEach(t),LVr=r(mte," class method or the "),pee=n(mte,"A",{href:!0});var ZNt=s(pee);yVr=r(ZNt,"from_config()"),ZNt.forEach(t),xVr=r(mte,` class
method.`),mte.forEach(t),$Vr=i(ii),s$=n(ii,"P",{});var cWe=s(s$);kVr=r(cWe,"This class cannot be instantiated directly using "),R4e=n(cWe,"CODE",{});var eqt=s(R4e);SVr=r(eqt,"__init__()"),eqt.forEach(t),RVr=r(cWe," (throws an error)."),cWe.forEach(t),PVr=i(ii),Ut=n(ii,"DIV",{class:!0});var pA=s(Ut);T(l$.$$.fragment,pA),BVr=i(pA),P4e=n(pA,"P",{});var oqt=s(P4e);IVr=r(oqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oqt.forEach(t),NVr=i(pA),nf=n(pA,"P",{});var gte=s(nf);qVr=r(gte,`Note:
Loading a model from its configuration file does `),B4e=n(gte,"STRONG",{});var rqt=s(B4e);jVr=r(rqt,"not"),rqt.forEach(t),DVr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(gte,"A",{href:!0});var tqt=s(_ee);GVr=r(tqt,"from_pretrained()"),tqt.forEach(t),OVr=r(gte," to load the model weights."),gte.forEach(t),VVr=i(pA),T(QC.$$.fragment,pA),pA.forEach(t),XVr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(i$.$$.fragment,di),zVr=i(di),I4e=n(di,"P",{});var aqt=s(I4e);WVr=r(aqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aqt.forEach(t),QVr=i(di),Cn=n(di,"P",{});var _A=s(Cn);HVr=r(_A,"The model class to instantiate is selected based on the "),N4e=n(_A,"CODE",{});var nqt=s(N4e);UVr=r(nqt,"model_type"),nqt.forEach(t),JVr=r(_A,` property of the config object (either
passed as an argument or loaded from `),q4e=n(_A,"CODE",{});var sqt=s(q4e);YVr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),KVr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(_A,"CODE",{});var lqt=s(j4e);ZVr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),eXr=r(_A,":"),_A.forEach(t),oXr=i(di),ke=n(di,"UL",{});var je=s(ke);HC=n(je,"LI",{});var pGe=s(HC);D4e=n(pGe,"STRONG",{});var iqt=s(D4e);rXr=r(iqt,"bart"),iqt.forEach(t),tXr=r(pGe," \u2014 "),uee=n(pGe,"A",{href:!0});var dqt=s(uee);aXr=r(dqt,"FlaxBartForConditionalGeneration"),dqt.forEach(t),nXr=r(pGe," (BART model)"),pGe.forEach(t),sXr=i(je),UC=n(je,"LI",{});var _Ge=s(UC);G4e=n(_Ge,"STRONG",{});var cqt=s(G4e);lXr=r(cqt,"blenderbot"),cqt.forEach(t),iXr=r(_Ge," \u2014 "),bee=n(_Ge,"A",{href:!0});var fqt=s(bee);dXr=r(fqt,"FlaxBlenderbotForConditionalGeneration"),fqt.forEach(t),cXr=r(_Ge," (Blenderbot model)"),_Ge.forEach(t),fXr=i(je),JC=n(je,"LI",{});var uGe=s(JC);O4e=n(uGe,"STRONG",{});var mqt=s(O4e);mXr=r(mqt,"blenderbot-small"),mqt.forEach(t),gXr=r(uGe," \u2014 "),vee=n(uGe,"A",{href:!0});var gqt=s(vee);hXr=r(gqt,"FlaxBlenderbotSmallForConditionalGeneration"),gqt.forEach(t),pXr=r(uGe," (BlenderbotSmall model)"),uGe.forEach(t),_Xr=i(je),YC=n(je,"LI",{});var bGe=s(YC);V4e=n(bGe,"STRONG",{});var hqt=s(V4e);uXr=r(hqt,"encoder-decoder"),hqt.forEach(t),bXr=r(bGe," \u2014 "),Fee=n(bGe,"A",{href:!0});var pqt=s(Fee);vXr=r(pqt,"FlaxEncoderDecoderModel"),pqt.forEach(t),FXr=r(bGe," (Encoder decoder model)"),bGe.forEach(t),TXr=i(je),KC=n(je,"LI",{});var vGe=s(KC);X4e=n(vGe,"STRONG",{});var _qt=s(X4e);MXr=r(_qt,"longt5"),_qt.forEach(t),EXr=r(vGe," \u2014 "),Tee=n(vGe,"A",{href:!0});var uqt=s(Tee);CXr=r(uqt,"FlaxLongT5ForConditionalGeneration"),uqt.forEach(t),wXr=r(vGe," (LongT5 model)"),vGe.forEach(t),AXr=i(je),ZC=n(je,"LI",{});var FGe=s(ZC);z4e=n(FGe,"STRONG",{});var bqt=s(z4e);LXr=r(bqt,"marian"),bqt.forEach(t),yXr=r(FGe," \u2014 "),Mee=n(FGe,"A",{href:!0});var vqt=s(Mee);xXr=r(vqt,"FlaxMarianMTModel"),vqt.forEach(t),$Xr=r(FGe," (Marian model)"),FGe.forEach(t),kXr=i(je),e5=n(je,"LI",{});var TGe=s(e5);W4e=n(TGe,"STRONG",{});var Fqt=s(W4e);SXr=r(Fqt,"mbart"),Fqt.forEach(t),RXr=r(TGe," \u2014 "),Eee=n(TGe,"A",{href:!0});var Tqt=s(Eee);PXr=r(Tqt,"FlaxMBartForConditionalGeneration"),Tqt.forEach(t),BXr=r(TGe," (mBART model)"),TGe.forEach(t),IXr=i(je),o5=n(je,"LI",{});var MGe=s(o5);Q4e=n(MGe,"STRONG",{});var Mqt=s(Q4e);NXr=r(Mqt,"mt5"),Mqt.forEach(t),qXr=r(MGe," \u2014 "),Cee=n(MGe,"A",{href:!0});var Eqt=s(Cee);jXr=r(Eqt,"FlaxMT5ForConditionalGeneration"),Eqt.forEach(t),DXr=r(MGe," (MT5 model)"),MGe.forEach(t),GXr=i(je),r5=n(je,"LI",{});var EGe=s(r5);H4e=n(EGe,"STRONG",{});var Cqt=s(H4e);OXr=r(Cqt,"pegasus"),Cqt.forEach(t),VXr=r(EGe," \u2014 "),wee=n(EGe,"A",{href:!0});var wqt=s(wee);XXr=r(wqt,"FlaxPegasusForConditionalGeneration"),wqt.forEach(t),zXr=r(EGe," (Pegasus model)"),EGe.forEach(t),WXr=i(je),t5=n(je,"LI",{});var CGe=s(t5);U4e=n(CGe,"STRONG",{});var Aqt=s(U4e);QXr=r(Aqt,"t5"),Aqt.forEach(t),HXr=r(CGe," \u2014 "),Aee=n(CGe,"A",{href:!0});var Lqt=s(Aee);UXr=r(Lqt,"FlaxT5ForConditionalGeneration"),Lqt.forEach(t),JXr=r(CGe," (T5 model)"),CGe.forEach(t),je.forEach(t),YXr=i(di),T(a5.$$.fragment,di),di.forEach(t),ii.forEach(t),rXe=i(f),sf=n(f,"H2",{class:!0});var fWe=s(sf);n5=n(fWe,"A",{id:!0,class:!0,href:!0});var yqt=s(n5);J4e=n(yqt,"SPAN",{});var xqt=s(J4e);T(d$.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),KXr=i(fWe),Y4e=n(fWe,"SPAN",{});var $qt=s(Y4e);ZXr=r($qt,"FlaxAutoModelForSequenceClassification"),$qt.forEach(t),fWe.forEach(t),tXe=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(c$.$$.fragment,ci),ezr=i(ci),lf=n(ci,"P",{});var hte=s(lf);ozr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lee=n(hte,"A",{href:!0});var kqt=s(Lee);rzr=r(kqt,"from_pretrained()"),kqt.forEach(t),tzr=r(hte," class method or the "),yee=n(hte,"A",{href:!0});var Sqt=s(yee);azr=r(Sqt,"from_config()"),Sqt.forEach(t),nzr=r(hte,` class
method.`),hte.forEach(t),szr=i(ci),f$=n(ci,"P",{});var mWe=s(f$);lzr=r(mWe,"This class cannot be instantiated directly using "),K4e=n(mWe,"CODE",{});var Rqt=s(K4e);izr=r(Rqt,"__init__()"),Rqt.forEach(t),dzr=r(mWe," (throws an error)."),mWe.forEach(t),czr=i(ci),Jt=n(ci,"DIV",{class:!0});var uA=s(Jt);T(m$.$$.fragment,uA),fzr=i(uA),Z4e=n(uA,"P",{});var Pqt=s(Z4e);mzr=r(Pqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pqt.forEach(t),gzr=i(uA),df=n(uA,"P",{});var pte=s(df);hzr=r(pte,`Note:
Loading a model from its configuration file does `),eCe=n(pte,"STRONG",{});var Bqt=s(eCe);pzr=r(Bqt,"not"),Bqt.forEach(t),_zr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(pte,"A",{href:!0});var Iqt=s(xee);uzr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),bzr=r(pte," to load the model weights."),pte.forEach(t),vzr=i(uA),T(s5.$$.fragment,uA),uA.forEach(t),Fzr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(g$.$$.fragment,fi),Tzr=i(fi),oCe=n(fi,"P",{});var Nqt=s(oCe);Mzr=r(Nqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nqt.forEach(t),Ezr=i(fi),wn=n(fi,"P",{});var bA=s(wn);Czr=r(bA,"The model class to instantiate is selected based on the "),rCe=n(bA,"CODE",{});var qqt=s(rCe);wzr=r(qqt,"model_type"),qqt.forEach(t),Azr=r(bA,` property of the config object (either
passed as an argument or loaded from `),tCe=n(bA,"CODE",{});var jqt=s(tCe);Lzr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),yzr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(bA,"CODE",{});var Dqt=s(aCe);xzr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),$zr=r(bA,":"),bA.forEach(t),kzr=i(fi),Se=n(fi,"UL",{});var De=s(Se);l5=n(De,"LI",{});var wGe=s(l5);nCe=n(wGe,"STRONG",{});var Gqt=s(nCe);Szr=r(Gqt,"albert"),Gqt.forEach(t),Rzr=r(wGe," \u2014 "),$ee=n(wGe,"A",{href:!0});var Oqt=s($ee);Pzr=r(Oqt,"FlaxAlbertForSequenceClassification"),Oqt.forEach(t),Bzr=r(wGe," (ALBERT model)"),wGe.forEach(t),Izr=i(De),i5=n(De,"LI",{});var AGe=s(i5);sCe=n(AGe,"STRONG",{});var Vqt=s(sCe);Nzr=r(Vqt,"bart"),Vqt.forEach(t),qzr=r(AGe," \u2014 "),kee=n(AGe,"A",{href:!0});var Xqt=s(kee);jzr=r(Xqt,"FlaxBartForSequenceClassification"),Xqt.forEach(t),Dzr=r(AGe," (BART model)"),AGe.forEach(t),Gzr=i(De),d5=n(De,"LI",{});var LGe=s(d5);lCe=n(LGe,"STRONG",{});var zqt=s(lCe);Ozr=r(zqt,"bert"),zqt.forEach(t),Vzr=r(LGe," \u2014 "),See=n(LGe,"A",{href:!0});var Wqt=s(See);Xzr=r(Wqt,"FlaxBertForSequenceClassification"),Wqt.forEach(t),zzr=r(LGe," (BERT model)"),LGe.forEach(t),Wzr=i(De),c5=n(De,"LI",{});var yGe=s(c5);iCe=n(yGe,"STRONG",{});var Qqt=s(iCe);Qzr=r(Qqt,"big_bird"),Qqt.forEach(t),Hzr=r(yGe," \u2014 "),Ree=n(yGe,"A",{href:!0});var Hqt=s(Ree);Uzr=r(Hqt,"FlaxBigBirdForSequenceClassification"),Hqt.forEach(t),Jzr=r(yGe," (BigBird model)"),yGe.forEach(t),Yzr=i(De),f5=n(De,"LI",{});var xGe=s(f5);dCe=n(xGe,"STRONG",{});var Uqt=s(dCe);Kzr=r(Uqt,"distilbert"),Uqt.forEach(t),Zzr=r(xGe," \u2014 "),Pee=n(xGe,"A",{href:!0});var Jqt=s(Pee);eWr=r(Jqt,"FlaxDistilBertForSequenceClassification"),Jqt.forEach(t),oWr=r(xGe," (DistilBERT model)"),xGe.forEach(t),rWr=i(De),m5=n(De,"LI",{});var $Ge=s(m5);cCe=n($Ge,"STRONG",{});var Yqt=s(cCe);tWr=r(Yqt,"electra"),Yqt.forEach(t),aWr=r($Ge," \u2014 "),Bee=n($Ge,"A",{href:!0});var Kqt=s(Bee);nWr=r(Kqt,"FlaxElectraForSequenceClassification"),Kqt.forEach(t),sWr=r($Ge," (ELECTRA model)"),$Ge.forEach(t),lWr=i(De),g5=n(De,"LI",{});var kGe=s(g5);fCe=n(kGe,"STRONG",{});var Zqt=s(fCe);iWr=r(Zqt,"mbart"),Zqt.forEach(t),dWr=r(kGe," \u2014 "),Iee=n(kGe,"A",{href:!0});var ejt=s(Iee);cWr=r(ejt,"FlaxMBartForSequenceClassification"),ejt.forEach(t),fWr=r(kGe," (mBART model)"),kGe.forEach(t),mWr=i(De),h5=n(De,"LI",{});var SGe=s(h5);mCe=n(SGe,"STRONG",{});var ojt=s(mCe);gWr=r(ojt,"roberta"),ojt.forEach(t),hWr=r(SGe," \u2014 "),Nee=n(SGe,"A",{href:!0});var rjt=s(Nee);pWr=r(rjt,"FlaxRobertaForSequenceClassification"),rjt.forEach(t),_Wr=r(SGe," (RoBERTa model)"),SGe.forEach(t),uWr=i(De),p5=n(De,"LI",{});var RGe=s(p5);gCe=n(RGe,"STRONG",{});var tjt=s(gCe);bWr=r(tjt,"roformer"),tjt.forEach(t),vWr=r(RGe," \u2014 "),qee=n(RGe,"A",{href:!0});var ajt=s(qee);FWr=r(ajt,"FlaxRoFormerForSequenceClassification"),ajt.forEach(t),TWr=r(RGe," (RoFormer model)"),RGe.forEach(t),MWr=i(De),_5=n(De,"LI",{});var PGe=s(_5);hCe=n(PGe,"STRONG",{});var njt=s(hCe);EWr=r(njt,"xlm-roberta"),njt.forEach(t),CWr=r(PGe," \u2014 "),jee=n(PGe,"A",{href:!0});var sjt=s(jee);wWr=r(sjt,"FlaxXLMRobertaForSequenceClassification"),sjt.forEach(t),AWr=r(PGe," (XLM-RoBERTa model)"),PGe.forEach(t),De.forEach(t),LWr=i(fi),T(u5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),aXe=i(f),cf=n(f,"H2",{class:!0});var gWe=s(cf);b5=n(gWe,"A",{id:!0,class:!0,href:!0});var ljt=s(b5);pCe=n(ljt,"SPAN",{});var ijt=s(pCe);T(h$.$$.fragment,ijt),ijt.forEach(t),ljt.forEach(t),yWr=i(gWe),_Ce=n(gWe,"SPAN",{});var djt=s(_Ce);xWr=r(djt,"FlaxAutoModelForQuestionAnswering"),djt.forEach(t),gWe.forEach(t),nXe=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(p$.$$.fragment,mi),$Wr=i(mi),ff=n(mi,"P",{});var _te=s(ff);kWr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dee=n(_te,"A",{href:!0});var cjt=s(Dee);SWr=r(cjt,"from_pretrained()"),cjt.forEach(t),RWr=r(_te," class method or the "),Gee=n(_te,"A",{href:!0});var fjt=s(Gee);PWr=r(fjt,"from_config()"),fjt.forEach(t),BWr=r(_te,` class
method.`),_te.forEach(t),IWr=i(mi),_$=n(mi,"P",{});var hWe=s(_$);NWr=r(hWe,"This class cannot be instantiated directly using "),uCe=n(hWe,"CODE",{});var mjt=s(uCe);qWr=r(mjt,"__init__()"),mjt.forEach(t),jWr=r(hWe," (throws an error)."),hWe.forEach(t),DWr=i(mi),Yt=n(mi,"DIV",{class:!0});var vA=s(Yt);T(u$.$$.fragment,vA),GWr=i(vA),bCe=n(vA,"P",{});var gjt=s(bCe);OWr=r(gjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gjt.forEach(t),VWr=i(vA),mf=n(vA,"P",{});var ute=s(mf);XWr=r(ute,`Note:
Loading a model from its configuration file does `),vCe=n(ute,"STRONG",{});var hjt=s(vCe);zWr=r(hjt,"not"),hjt.forEach(t),WWr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=n(ute,"A",{href:!0});var pjt=s(Oee);QWr=r(pjt,"from_pretrained()"),pjt.forEach(t),HWr=r(ute," to load the model weights."),ute.forEach(t),UWr=i(vA),T(v5.$$.fragment,vA),vA.forEach(t),JWr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(b$.$$.fragment,gi),YWr=i(gi),FCe=n(gi,"P",{});var _jt=s(FCe);KWr=r(_jt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_jt.forEach(t),ZWr=i(gi),An=n(gi,"P",{});var FA=s(An);eQr=r(FA,"The model class to instantiate is selected based on the "),TCe=n(FA,"CODE",{});var ujt=s(TCe);oQr=r(ujt,"model_type"),ujt.forEach(t),rQr=r(FA,` property of the config object (either
passed as an argument or loaded from `),MCe=n(FA,"CODE",{});var bjt=s(MCe);tQr=r(bjt,"pretrained_model_name_or_path"),bjt.forEach(t),aQr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(FA,"CODE",{});var vjt=s(ECe);nQr=r(vjt,"pretrained_model_name_or_path"),vjt.forEach(t),sQr=r(FA,":"),FA.forEach(t),lQr=i(gi),Re=n(gi,"UL",{});var Ge=s(Re);F5=n(Ge,"LI",{});var BGe=s(F5);CCe=n(BGe,"STRONG",{});var Fjt=s(CCe);iQr=r(Fjt,"albert"),Fjt.forEach(t),dQr=r(BGe," \u2014 "),Vee=n(BGe,"A",{href:!0});var Tjt=s(Vee);cQr=r(Tjt,"FlaxAlbertForQuestionAnswering"),Tjt.forEach(t),fQr=r(BGe," (ALBERT model)"),BGe.forEach(t),mQr=i(Ge),T5=n(Ge,"LI",{});var IGe=s(T5);wCe=n(IGe,"STRONG",{});var Mjt=s(wCe);gQr=r(Mjt,"bart"),Mjt.forEach(t),hQr=r(IGe," \u2014 "),Xee=n(IGe,"A",{href:!0});var Ejt=s(Xee);pQr=r(Ejt,"FlaxBartForQuestionAnswering"),Ejt.forEach(t),_Qr=r(IGe," (BART model)"),IGe.forEach(t),uQr=i(Ge),M5=n(Ge,"LI",{});var NGe=s(M5);ACe=n(NGe,"STRONG",{});var Cjt=s(ACe);bQr=r(Cjt,"bert"),Cjt.forEach(t),vQr=r(NGe," \u2014 "),zee=n(NGe,"A",{href:!0});var wjt=s(zee);FQr=r(wjt,"FlaxBertForQuestionAnswering"),wjt.forEach(t),TQr=r(NGe," (BERT model)"),NGe.forEach(t),MQr=i(Ge),E5=n(Ge,"LI",{});var qGe=s(E5);LCe=n(qGe,"STRONG",{});var Ajt=s(LCe);EQr=r(Ajt,"big_bird"),Ajt.forEach(t),CQr=r(qGe," \u2014 "),Wee=n(qGe,"A",{href:!0});var Ljt=s(Wee);wQr=r(Ljt,"FlaxBigBirdForQuestionAnswering"),Ljt.forEach(t),AQr=r(qGe," (BigBird model)"),qGe.forEach(t),LQr=i(Ge),C5=n(Ge,"LI",{});var jGe=s(C5);yCe=n(jGe,"STRONG",{});var yjt=s(yCe);yQr=r(yjt,"distilbert"),yjt.forEach(t),xQr=r(jGe," \u2014 "),Qee=n(jGe,"A",{href:!0});var xjt=s(Qee);$Qr=r(xjt,"FlaxDistilBertForQuestionAnswering"),xjt.forEach(t),kQr=r(jGe," (DistilBERT model)"),jGe.forEach(t),SQr=i(Ge),w5=n(Ge,"LI",{});var DGe=s(w5);xCe=n(DGe,"STRONG",{});var $jt=s(xCe);RQr=r($jt,"electra"),$jt.forEach(t),PQr=r(DGe," \u2014 "),Hee=n(DGe,"A",{href:!0});var kjt=s(Hee);BQr=r(kjt,"FlaxElectraForQuestionAnswering"),kjt.forEach(t),IQr=r(DGe," (ELECTRA model)"),DGe.forEach(t),NQr=i(Ge),A5=n(Ge,"LI",{});var GGe=s(A5);$Ce=n(GGe,"STRONG",{});var Sjt=s($Ce);qQr=r(Sjt,"mbart"),Sjt.forEach(t),jQr=r(GGe," \u2014 "),Uee=n(GGe,"A",{href:!0});var Rjt=s(Uee);DQr=r(Rjt,"FlaxMBartForQuestionAnswering"),Rjt.forEach(t),GQr=r(GGe," (mBART model)"),GGe.forEach(t),OQr=i(Ge),L5=n(Ge,"LI",{});var OGe=s(L5);kCe=n(OGe,"STRONG",{});var Pjt=s(kCe);VQr=r(Pjt,"roberta"),Pjt.forEach(t),XQr=r(OGe," \u2014 "),Jee=n(OGe,"A",{href:!0});var Bjt=s(Jee);zQr=r(Bjt,"FlaxRobertaForQuestionAnswering"),Bjt.forEach(t),WQr=r(OGe," (RoBERTa model)"),OGe.forEach(t),QQr=i(Ge),y5=n(Ge,"LI",{});var VGe=s(y5);SCe=n(VGe,"STRONG",{});var Ijt=s(SCe);HQr=r(Ijt,"roformer"),Ijt.forEach(t),UQr=r(VGe," \u2014 "),Yee=n(VGe,"A",{href:!0});var Njt=s(Yee);JQr=r(Njt,"FlaxRoFormerForQuestionAnswering"),Njt.forEach(t),YQr=r(VGe," (RoFormer model)"),VGe.forEach(t),KQr=i(Ge),x5=n(Ge,"LI",{});var XGe=s(x5);RCe=n(XGe,"STRONG",{});var qjt=s(RCe);ZQr=r(qjt,"xlm-roberta"),qjt.forEach(t),eHr=r(XGe," \u2014 "),Kee=n(XGe,"A",{href:!0});var jjt=s(Kee);oHr=r(jjt,"FlaxXLMRobertaForQuestionAnswering"),jjt.forEach(t),rHr=r(XGe," (XLM-RoBERTa model)"),XGe.forEach(t),Ge.forEach(t),tHr=i(gi),T($5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),sXe=i(f),gf=n(f,"H2",{class:!0});var pWe=s(gf);k5=n(pWe,"A",{id:!0,class:!0,href:!0});var Djt=s(k5);PCe=n(Djt,"SPAN",{});var Gjt=s(PCe);T(v$.$$.fragment,Gjt),Gjt.forEach(t),Djt.forEach(t),aHr=i(pWe),BCe=n(pWe,"SPAN",{});var Ojt=s(BCe);nHr=r(Ojt,"FlaxAutoModelForTokenClassification"),Ojt.forEach(t),pWe.forEach(t),lXe=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(F$.$$.fragment,hi),sHr=i(hi),hf=n(hi,"P",{});var bte=s(hf);lHr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zee=n(bte,"A",{href:!0});var Vjt=s(Zee);iHr=r(Vjt,"from_pretrained()"),Vjt.forEach(t),dHr=r(bte," class method or the "),eoe=n(bte,"A",{href:!0});var Xjt=s(eoe);cHr=r(Xjt,"from_config()"),Xjt.forEach(t),fHr=r(bte,` class
method.`),bte.forEach(t),mHr=i(hi),T$=n(hi,"P",{});var _We=s(T$);gHr=r(_We,"This class cannot be instantiated directly using "),ICe=n(_We,"CODE",{});var zjt=s(ICe);hHr=r(zjt,"__init__()"),zjt.forEach(t),pHr=r(_We," (throws an error)."),_We.forEach(t),_Hr=i(hi),Kt=n(hi,"DIV",{class:!0});var TA=s(Kt);T(M$.$$.fragment,TA),uHr=i(TA),NCe=n(TA,"P",{});var Wjt=s(NCe);bHr=r(Wjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wjt.forEach(t),vHr=i(TA),pf=n(TA,"P",{});var vte=s(pf);FHr=r(vte,`Note:
Loading a model from its configuration file does `),qCe=n(vte,"STRONG",{});var Qjt=s(qCe);THr=r(Qjt,"not"),Qjt.forEach(t),MHr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(vte,"A",{href:!0});var Hjt=s(ooe);EHr=r(Hjt,"from_pretrained()"),Hjt.forEach(t),CHr=r(vte," to load the model weights."),vte.forEach(t),wHr=i(TA),T(S5.$$.fragment,TA),TA.forEach(t),AHr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(E$.$$.fragment,pi),LHr=i(pi),jCe=n(pi,"P",{});var Ujt=s(jCe);yHr=r(Ujt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ujt.forEach(t),xHr=i(pi),Ln=n(pi,"P",{});var MA=s(Ln);$Hr=r(MA,"The model class to instantiate is selected based on the "),DCe=n(MA,"CODE",{});var Jjt=s(DCe);kHr=r(Jjt,"model_type"),Jjt.forEach(t),SHr=r(MA,` property of the config object (either
passed as an argument or loaded from `),GCe=n(MA,"CODE",{});var Yjt=s(GCe);RHr=r(Yjt,"pretrained_model_name_or_path"),Yjt.forEach(t),PHr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(MA,"CODE",{});var Kjt=s(OCe);BHr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),IHr=r(MA,":"),MA.forEach(t),NHr=i(pi),Ve=n(pi,"UL",{});var To=s(Ve);R5=n(To,"LI",{});var zGe=s(R5);VCe=n(zGe,"STRONG",{});var Zjt=s(VCe);qHr=r(Zjt,"albert"),Zjt.forEach(t),jHr=r(zGe," \u2014 "),roe=n(zGe,"A",{href:!0});var eDt=s(roe);DHr=r(eDt,"FlaxAlbertForTokenClassification"),eDt.forEach(t),GHr=r(zGe," (ALBERT model)"),zGe.forEach(t),OHr=i(To),P5=n(To,"LI",{});var WGe=s(P5);XCe=n(WGe,"STRONG",{});var oDt=s(XCe);VHr=r(oDt,"bert"),oDt.forEach(t),XHr=r(WGe," \u2014 "),toe=n(WGe,"A",{href:!0});var rDt=s(toe);zHr=r(rDt,"FlaxBertForTokenClassification"),rDt.forEach(t),WHr=r(WGe," (BERT model)"),WGe.forEach(t),QHr=i(To),B5=n(To,"LI",{});var QGe=s(B5);zCe=n(QGe,"STRONG",{});var tDt=s(zCe);HHr=r(tDt,"big_bird"),tDt.forEach(t),UHr=r(QGe," \u2014 "),aoe=n(QGe,"A",{href:!0});var aDt=s(aoe);JHr=r(aDt,"FlaxBigBirdForTokenClassification"),aDt.forEach(t),YHr=r(QGe," (BigBird model)"),QGe.forEach(t),KHr=i(To),I5=n(To,"LI",{});var HGe=s(I5);WCe=n(HGe,"STRONG",{});var nDt=s(WCe);ZHr=r(nDt,"distilbert"),nDt.forEach(t),eUr=r(HGe," \u2014 "),noe=n(HGe,"A",{href:!0});var sDt=s(noe);oUr=r(sDt,"FlaxDistilBertForTokenClassification"),sDt.forEach(t),rUr=r(HGe," (DistilBERT model)"),HGe.forEach(t),tUr=i(To),N5=n(To,"LI",{});var UGe=s(N5);QCe=n(UGe,"STRONG",{});var lDt=s(QCe);aUr=r(lDt,"electra"),lDt.forEach(t),nUr=r(UGe," \u2014 "),soe=n(UGe,"A",{href:!0});var iDt=s(soe);sUr=r(iDt,"FlaxElectraForTokenClassification"),iDt.forEach(t),lUr=r(UGe," (ELECTRA model)"),UGe.forEach(t),iUr=i(To),q5=n(To,"LI",{});var JGe=s(q5);HCe=n(JGe,"STRONG",{});var dDt=s(HCe);dUr=r(dDt,"roberta"),dDt.forEach(t),cUr=r(JGe," \u2014 "),loe=n(JGe,"A",{href:!0});var cDt=s(loe);fUr=r(cDt,"FlaxRobertaForTokenClassification"),cDt.forEach(t),mUr=r(JGe," (RoBERTa model)"),JGe.forEach(t),gUr=i(To),j5=n(To,"LI",{});var YGe=s(j5);UCe=n(YGe,"STRONG",{});var fDt=s(UCe);hUr=r(fDt,"roformer"),fDt.forEach(t),pUr=r(YGe," \u2014 "),ioe=n(YGe,"A",{href:!0});var mDt=s(ioe);_Ur=r(mDt,"FlaxRoFormerForTokenClassification"),mDt.forEach(t),uUr=r(YGe," (RoFormer model)"),YGe.forEach(t),bUr=i(To),D5=n(To,"LI",{});var KGe=s(D5);JCe=n(KGe,"STRONG",{});var gDt=s(JCe);vUr=r(gDt,"xlm-roberta"),gDt.forEach(t),FUr=r(KGe," \u2014 "),doe=n(KGe,"A",{href:!0});var hDt=s(doe);TUr=r(hDt,"FlaxXLMRobertaForTokenClassification"),hDt.forEach(t),MUr=r(KGe," (XLM-RoBERTa model)"),KGe.forEach(t),To.forEach(t),EUr=i(pi),T(G5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),iXe=i(f),_f=n(f,"H2",{class:!0});var uWe=s(_f);O5=n(uWe,"A",{id:!0,class:!0,href:!0});var pDt=s(O5);YCe=n(pDt,"SPAN",{});var _Dt=s(YCe);T(C$.$$.fragment,_Dt),_Dt.forEach(t),pDt.forEach(t),CUr=i(uWe),KCe=n(uWe,"SPAN",{});var uDt=s(KCe);wUr=r(uDt,"FlaxAutoModelForMultipleChoice"),uDt.forEach(t),uWe.forEach(t),dXe=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(w$.$$.fragment,_i),AUr=i(_i),uf=n(_i,"P",{});var Fte=s(uf);LUr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),coe=n(Fte,"A",{href:!0});var bDt=s(coe);yUr=r(bDt,"from_pretrained()"),bDt.forEach(t),xUr=r(Fte," class method or the "),foe=n(Fte,"A",{href:!0});var vDt=s(foe);$Ur=r(vDt,"from_config()"),vDt.forEach(t),kUr=r(Fte,` class
method.`),Fte.forEach(t),SUr=i(_i),A$=n(_i,"P",{});var bWe=s(A$);RUr=r(bWe,"This class cannot be instantiated directly using "),ZCe=n(bWe,"CODE",{});var FDt=s(ZCe);PUr=r(FDt,"__init__()"),FDt.forEach(t),BUr=r(bWe," (throws an error)."),bWe.forEach(t),IUr=i(_i),Zt=n(_i,"DIV",{class:!0});var EA=s(Zt);T(L$.$$.fragment,EA),NUr=i(EA),e5e=n(EA,"P",{});var TDt=s(e5e);qUr=r(TDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TDt.forEach(t),jUr=i(EA),bf=n(EA,"P",{});var Tte=s(bf);DUr=r(Tte,`Note:
Loading a model from its configuration file does `),o5e=n(Tte,"STRONG",{});var MDt=s(o5e);GUr=r(MDt,"not"),MDt.forEach(t),OUr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(Tte,"A",{href:!0});var EDt=s(moe);VUr=r(EDt,"from_pretrained()"),EDt.forEach(t),XUr=r(Tte," to load the model weights."),Tte.forEach(t),zUr=i(EA),T(V5.$$.fragment,EA),EA.forEach(t),WUr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(y$.$$.fragment,ui),QUr=i(ui),r5e=n(ui,"P",{});var CDt=s(r5e);HUr=r(CDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CDt.forEach(t),UUr=i(ui),yn=n(ui,"P",{});var CA=s(yn);JUr=r(CA,"The model class to instantiate is selected based on the "),t5e=n(CA,"CODE",{});var wDt=s(t5e);YUr=r(wDt,"model_type"),wDt.forEach(t),KUr=r(CA,` property of the config object (either
passed as an argument or loaded from `),a5e=n(CA,"CODE",{});var ADt=s(a5e);ZUr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),eJr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(CA,"CODE",{});var LDt=s(n5e);oJr=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),rJr=r(CA,":"),CA.forEach(t),tJr=i(ui),Xe=n(ui,"UL",{});var Mo=s(Xe);X5=n(Mo,"LI",{});var ZGe=s(X5);s5e=n(ZGe,"STRONG",{});var yDt=s(s5e);aJr=r(yDt,"albert"),yDt.forEach(t),nJr=r(ZGe," \u2014 "),goe=n(ZGe,"A",{href:!0});var xDt=s(goe);sJr=r(xDt,"FlaxAlbertForMultipleChoice"),xDt.forEach(t),lJr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),iJr=i(Mo),z5=n(Mo,"LI",{});var eOe=s(z5);l5e=n(eOe,"STRONG",{});var $Dt=s(l5e);dJr=r($Dt,"bert"),$Dt.forEach(t),cJr=r(eOe," \u2014 "),hoe=n(eOe,"A",{href:!0});var kDt=s(hoe);fJr=r(kDt,"FlaxBertForMultipleChoice"),kDt.forEach(t),mJr=r(eOe," (BERT model)"),eOe.forEach(t),gJr=i(Mo),W5=n(Mo,"LI",{});var oOe=s(W5);i5e=n(oOe,"STRONG",{});var SDt=s(i5e);hJr=r(SDt,"big_bird"),SDt.forEach(t),pJr=r(oOe," \u2014 "),poe=n(oOe,"A",{href:!0});var RDt=s(poe);_Jr=r(RDt,"FlaxBigBirdForMultipleChoice"),RDt.forEach(t),uJr=r(oOe," (BigBird model)"),oOe.forEach(t),bJr=i(Mo),Q5=n(Mo,"LI",{});var rOe=s(Q5);d5e=n(rOe,"STRONG",{});var PDt=s(d5e);vJr=r(PDt,"distilbert"),PDt.forEach(t),FJr=r(rOe," \u2014 "),_oe=n(rOe,"A",{href:!0});var BDt=s(_oe);TJr=r(BDt,"FlaxDistilBertForMultipleChoice"),BDt.forEach(t),MJr=r(rOe," (DistilBERT model)"),rOe.forEach(t),EJr=i(Mo),H5=n(Mo,"LI",{});var tOe=s(H5);c5e=n(tOe,"STRONG",{});var IDt=s(c5e);CJr=r(IDt,"electra"),IDt.forEach(t),wJr=r(tOe," \u2014 "),uoe=n(tOe,"A",{href:!0});var NDt=s(uoe);AJr=r(NDt,"FlaxElectraForMultipleChoice"),NDt.forEach(t),LJr=r(tOe," (ELECTRA model)"),tOe.forEach(t),yJr=i(Mo),U5=n(Mo,"LI",{});var aOe=s(U5);f5e=n(aOe,"STRONG",{});var qDt=s(f5e);xJr=r(qDt,"roberta"),qDt.forEach(t),$Jr=r(aOe," \u2014 "),boe=n(aOe,"A",{href:!0});var jDt=s(boe);kJr=r(jDt,"FlaxRobertaForMultipleChoice"),jDt.forEach(t),SJr=r(aOe," (RoBERTa model)"),aOe.forEach(t),RJr=i(Mo),J5=n(Mo,"LI",{});var nOe=s(J5);m5e=n(nOe,"STRONG",{});var DDt=s(m5e);PJr=r(DDt,"roformer"),DDt.forEach(t),BJr=r(nOe," \u2014 "),voe=n(nOe,"A",{href:!0});var GDt=s(voe);IJr=r(GDt,"FlaxRoFormerForMultipleChoice"),GDt.forEach(t),NJr=r(nOe," (RoFormer model)"),nOe.forEach(t),qJr=i(Mo),Y5=n(Mo,"LI",{});var sOe=s(Y5);g5e=n(sOe,"STRONG",{});var ODt=s(g5e);jJr=r(ODt,"xlm-roberta"),ODt.forEach(t),DJr=r(sOe," \u2014 "),Foe=n(sOe,"A",{href:!0});var VDt=s(Foe);GJr=r(VDt,"FlaxXLMRobertaForMultipleChoice"),VDt.forEach(t),OJr=r(sOe," (XLM-RoBERTa model)"),sOe.forEach(t),Mo.forEach(t),VJr=i(ui),T(K5.$$.fragment,ui),ui.forEach(t),_i.forEach(t),cXe=i(f),vf=n(f,"H2",{class:!0});var vWe=s(vf);Z5=n(vWe,"A",{id:!0,class:!0,href:!0});var XDt=s(Z5);h5e=n(XDt,"SPAN",{});var zDt=s(h5e);T(x$.$$.fragment,zDt),zDt.forEach(t),XDt.forEach(t),XJr=i(vWe),p5e=n(vWe,"SPAN",{});var WDt=s(p5e);zJr=r(WDt,"FlaxAutoModelForNextSentencePrediction"),WDt.forEach(t),vWe.forEach(t),fXe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T($$.$$.fragment,bi),WJr=i(bi),Ff=n(bi,"P",{});var Mte=s(Ff);QJr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Toe=n(Mte,"A",{href:!0});var QDt=s(Toe);HJr=r(QDt,"from_pretrained()"),QDt.forEach(t),UJr=r(Mte," class method or the "),Moe=n(Mte,"A",{href:!0});var HDt=s(Moe);JJr=r(HDt,"from_config()"),HDt.forEach(t),YJr=r(Mte,` class
method.`),Mte.forEach(t),KJr=i(bi),k$=n(bi,"P",{});var FWe=s(k$);ZJr=r(FWe,"This class cannot be instantiated directly using "),_5e=n(FWe,"CODE",{});var UDt=s(_5e);eYr=r(UDt,"__init__()"),UDt.forEach(t),oYr=r(FWe," (throws an error)."),FWe.forEach(t),rYr=i(bi),ea=n(bi,"DIV",{class:!0});var wA=s(ea);T(S$.$$.fragment,wA),tYr=i(wA),u5e=n(wA,"P",{});var JDt=s(u5e);aYr=r(JDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JDt.forEach(t),nYr=i(wA),Tf=n(wA,"P",{});var Ete=s(Tf);sYr=r(Ete,`Note:
Loading a model from its configuration file does `),b5e=n(Ete,"STRONG",{});var YDt=s(b5e);lYr=r(YDt,"not"),YDt.forEach(t),iYr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Ete,"A",{href:!0});var KDt=s(Eoe);dYr=r(KDt,"from_pretrained()"),KDt.forEach(t),cYr=r(Ete," to load the model weights."),Ete.forEach(t),fYr=i(wA),T(e3.$$.fragment,wA),wA.forEach(t),mYr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(R$.$$.fragment,vi),gYr=i(vi),v5e=n(vi,"P",{});var ZDt=s(v5e);hYr=r(ZDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZDt.forEach(t),pYr=i(vi),xn=n(vi,"P",{});var AA=s(xn);_Yr=r(AA,"The model class to instantiate is selected based on the "),F5e=n(AA,"CODE",{});var eGt=s(F5e);uYr=r(eGt,"model_type"),eGt.forEach(t),bYr=r(AA,` property of the config object (either
passed as an argument or loaded from `),T5e=n(AA,"CODE",{});var oGt=s(T5e);vYr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),FYr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(AA,"CODE",{});var rGt=s(M5e);TYr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),MYr=r(AA,":"),AA.forEach(t),EYr=i(vi),E5e=n(vi,"UL",{});var tGt=s(E5e);o3=n(tGt,"LI",{});var lOe=s(o3);C5e=n(lOe,"STRONG",{});var aGt=s(C5e);CYr=r(aGt,"bert"),aGt.forEach(t),wYr=r(lOe," \u2014 "),Coe=n(lOe,"A",{href:!0});var nGt=s(Coe);AYr=r(nGt,"FlaxBertForNextSentencePrediction"),nGt.forEach(t),LYr=r(lOe," (BERT model)"),lOe.forEach(t),tGt.forEach(t),yYr=i(vi),T(r3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),mXe=i(f),Mf=n(f,"H2",{class:!0});var TWe=s(Mf);t3=n(TWe,"A",{id:!0,class:!0,href:!0});var sGt=s(t3);w5e=n(sGt,"SPAN",{});var lGt=s(w5e);T(P$.$$.fragment,lGt),lGt.forEach(t),sGt.forEach(t),xYr=i(TWe),A5e=n(TWe,"SPAN",{});var iGt=s(A5e);$Yr=r(iGt,"FlaxAutoModelForImageClassification"),iGt.forEach(t),TWe.forEach(t),gXe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(B$.$$.fragment,Fi),kYr=i(Fi),Ef=n(Fi,"P",{});var Cte=s(Ef);SYr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),woe=n(Cte,"A",{href:!0});var dGt=s(woe);RYr=r(dGt,"from_pretrained()"),dGt.forEach(t),PYr=r(Cte," class method or the "),Aoe=n(Cte,"A",{href:!0});var cGt=s(Aoe);BYr=r(cGt,"from_config()"),cGt.forEach(t),IYr=r(Cte,` class
method.`),Cte.forEach(t),NYr=i(Fi),I$=n(Fi,"P",{});var MWe=s(I$);qYr=r(MWe,"This class cannot be instantiated directly using "),L5e=n(MWe,"CODE",{});var fGt=s(L5e);jYr=r(fGt,"__init__()"),fGt.forEach(t),DYr=r(MWe," (throws an error)."),MWe.forEach(t),GYr=i(Fi),oa=n(Fi,"DIV",{class:!0});var LA=s(oa);T(N$.$$.fragment,LA),OYr=i(LA),y5e=n(LA,"P",{});var mGt=s(y5e);VYr=r(mGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mGt.forEach(t),XYr=i(LA),Cf=n(LA,"P",{});var wte=s(Cf);zYr=r(wte,`Note:
Loading a model from its configuration file does `),x5e=n(wte,"STRONG",{});var gGt=s(x5e);WYr=r(gGt,"not"),gGt.forEach(t),QYr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(wte,"A",{href:!0});var hGt=s(Loe);HYr=r(hGt,"from_pretrained()"),hGt.forEach(t),UYr=r(wte," to load the model weights."),wte.forEach(t),JYr=i(LA),T(a3.$$.fragment,LA),LA.forEach(t),YYr=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(q$.$$.fragment,Ti),KYr=i(Ti),$5e=n(Ti,"P",{});var pGt=s($5e);ZYr=r(pGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pGt.forEach(t),eKr=i(Ti),$n=n(Ti,"P",{});var yA=s($n);oKr=r(yA,"The model class to instantiate is selected based on the "),k5e=n(yA,"CODE",{});var _Gt=s(k5e);rKr=r(_Gt,"model_type"),_Gt.forEach(t),tKr=r(yA,` property of the config object (either
passed as an argument or loaded from `),S5e=n(yA,"CODE",{});var uGt=s(S5e);aKr=r(uGt,"pretrained_model_name_or_path"),uGt.forEach(t),nKr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(yA,"CODE",{});var bGt=s(R5e);sKr=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),lKr=r(yA,":"),yA.forEach(t),iKr=i(Ti),j$=n(Ti,"UL",{});var EWe=s(j$);n3=n(EWe,"LI",{});var iOe=s(n3);P5e=n(iOe,"STRONG",{});var vGt=s(P5e);dKr=r(vGt,"beit"),vGt.forEach(t),cKr=r(iOe," \u2014 "),yoe=n(iOe,"A",{href:!0});var FGt=s(yoe);fKr=r(FGt,"FlaxBeitForImageClassification"),FGt.forEach(t),mKr=r(iOe," (BEiT model)"),iOe.forEach(t),gKr=i(EWe),s3=n(EWe,"LI",{});var dOe=s(s3);B5e=n(dOe,"STRONG",{});var TGt=s(B5e);hKr=r(TGt,"vit"),TGt.forEach(t),pKr=r(dOe," \u2014 "),xoe=n(dOe,"A",{href:!0});var MGt=s(xoe);_Kr=r(MGt,"FlaxViTForImageClassification"),MGt.forEach(t),uKr=r(dOe," (ViT model)"),dOe.forEach(t),EWe.forEach(t),bKr=i(Ti),T(l3.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),hXe=i(f),wf=n(f,"H2",{class:!0});var CWe=s(wf);i3=n(CWe,"A",{id:!0,class:!0,href:!0});var EGt=s(i3);I5e=n(EGt,"SPAN",{});var CGt=s(I5e);T(D$.$$.fragment,CGt),CGt.forEach(t),EGt.forEach(t),vKr=i(CWe),N5e=n(CWe,"SPAN",{});var wGt=s(N5e);FKr=r(wGt,"FlaxAutoModelForVision2Seq"),wGt.forEach(t),CWe.forEach(t),pXe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(G$.$$.fragment,Mi),TKr=i(Mi),Af=n(Mi,"P",{});var Ate=s(Af);MKr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$oe=n(Ate,"A",{href:!0});var AGt=s($oe);EKr=r(AGt,"from_pretrained()"),AGt.forEach(t),CKr=r(Ate," class method or the "),koe=n(Ate,"A",{href:!0});var LGt=s(koe);wKr=r(LGt,"from_config()"),LGt.forEach(t),AKr=r(Ate,` class
method.`),Ate.forEach(t),LKr=i(Mi),O$=n(Mi,"P",{});var wWe=s(O$);yKr=r(wWe,"This class cannot be instantiated directly using "),q5e=n(wWe,"CODE",{});var yGt=s(q5e);xKr=r(yGt,"__init__()"),yGt.forEach(t),$Kr=r(wWe," (throws an error)."),wWe.forEach(t),kKr=i(Mi),ra=n(Mi,"DIV",{class:!0});var xA=s(ra);T(V$.$$.fragment,xA),SKr=i(xA),j5e=n(xA,"P",{});var xGt=s(j5e);RKr=r(xGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xGt.forEach(t),PKr=i(xA),Lf=n(xA,"P",{});var Lte=s(Lf);BKr=r(Lte,`Note:
Loading a model from its configuration file does `),D5e=n(Lte,"STRONG",{});var $Gt=s(D5e);IKr=r($Gt,"not"),$Gt.forEach(t),NKr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(Lte,"A",{href:!0});var kGt=s(Soe);qKr=r(kGt,"from_pretrained()"),kGt.forEach(t),jKr=r(Lte," to load the model weights."),Lte.forEach(t),DKr=i(xA),T(d3.$$.fragment,xA),xA.forEach(t),GKr=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(X$.$$.fragment,Ei),OKr=i(Ei),G5e=n(Ei,"P",{});var SGt=s(G5e);VKr=r(SGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SGt.forEach(t),XKr=i(Ei),kn=n(Ei,"P",{});var $A=s(kn);zKr=r($A,"The model class to instantiate is selected based on the "),O5e=n($A,"CODE",{});var RGt=s(O5e);WKr=r(RGt,"model_type"),RGt.forEach(t),QKr=r($A,` property of the config object (either
passed as an argument or loaded from `),V5e=n($A,"CODE",{});var PGt=s(V5e);HKr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),UKr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n($A,"CODE",{});var BGt=s(X5e);JKr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),YKr=r($A,":"),$A.forEach(t),KKr=i(Ei),z5e=n(Ei,"UL",{});var IGt=s(z5e);c3=n(IGt,"LI",{});var cOe=s(c3);W5e=n(cOe,"STRONG",{});var NGt=s(W5e);ZKr=r(NGt,"vision-encoder-decoder"),NGt.forEach(t),eZr=r(cOe," \u2014 "),Roe=n(cOe,"A",{href:!0});var qGt=s(Roe);oZr=r(qGt,"FlaxVisionEncoderDecoderModel"),qGt.forEach(t),rZr=r(cOe," (Vision Encoder decoder model)"),cOe.forEach(t),IGt.forEach(t),tZr=i(Ei),T(f3.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(XVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer"),c($i,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(Bf,"id","extending-the-auto-classes"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#extending-the-auto-classes"),c(ki,"class","relative group"),c(Nf,"id","transformers.AutoConfig"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#transformers.AutoConfig"),c(Si,"class","relative group"),c(_S,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(uS,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertConfig"),c(bS,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartConfig"),c(vS,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitConfig"),c(FS,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertConfig"),c(TS,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(MS,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ES,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(CS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(wS,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(AS,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomConfig"),c(LS,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertConfig"),c(yS,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineConfig"),c(xS,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPConfig"),c($S,"href","/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenConfig"),c(kS,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertConfig"),c(SS,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextConfig"),c(RS,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLConfig"),c(PS,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtConfig"),c(BS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(IS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(NS,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(qS,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaConfig"),c(jS,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(DS,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(GS,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTConfig"),c(OS,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrConfig"),c(VS,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertConfig"),c(XS,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRConfig"),c(zS,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTConfig"),c(WS,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraConfig"),c(QS,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertConfig"),c(US,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaConfig"),c(JS,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetConfig"),c(YS,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTConfig"),c(KS,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelConfig"),c(ZS,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNConfig"),c(eR,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Config"),c(oR,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(rR,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(tR,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJConfig"),c(aR,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertConfig"),c(nR,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertConfig"),c(sR,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(iR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dR,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(cR,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDConfig"),c(fR,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitConfig"),c(mR,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerConfig"),c(gR,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Config"),c(hR,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeConfig"),c(pR,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertConfig"),c(_R,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Config"),c(uR,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianConfig"),c(bR,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(vR,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartConfig"),c(FR,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTConfig"),c(TR,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(MR,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ER,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetConfig"),c(CR,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Config"),c(wR,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaConfig"),c(AR,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(LR,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(yR,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTConfig"),c(xR,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusConfig"),c($R,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kR,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartConfig"),c(SR,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(RR,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(PR,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(BR,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagConfig"),c(IR,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmConfig"),c(NR,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerConfig"),c(qR,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetConfig"),c(jR,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertConfig"),c(DR,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetConfig"),c(GR,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertConfig"),c(OR,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaConfig"),c(VR,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerConfig"),c(XR,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerConfig"),c(zR,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWConfig"),c(WR,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDConfig"),c(QR,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(HR,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(UR,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(JR,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterConfig"),c(YR,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(KR,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinConfig"),c(ZR,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Config"),c(eP,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasConfig"),c(oP,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(rP,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(tP,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRConfig"),c(aP,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(nP,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(sP,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanConfig"),c(lP,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltConfig"),c(iP,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(dP,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(cP,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(fP,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTConfig"),c(mP,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(gP,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(hP,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(pP,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMConfig"),c(_P,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMConfig"),c(uP,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMConfig"),c(bP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(vP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(FP,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(TP,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetConfig"),c(MP,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosConfig"),c(EP,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"id","transformers.AutoTokenizer"),c(Qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qg,"href","#transformers.AutoTokenizer"),c(Pi,"class","relative group"),c(CP,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(wP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(AP,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizer"),c(yP,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartTokenizerFast"),c(xP,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizer"),c($P,"href","/docs/transformers/pr_17806/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(kP,"href","/docs/transformers/pr_17806/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(SP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(BP,"href","/docs/transformers/pr_17806/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(IP,"href","/docs/transformers/pr_17806/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(NP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(qP,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(jP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(DP,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(GP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(OP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(VP,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(XP,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(zP,"href","/docs/transformers/pr_17806/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(WP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizer"),c(QP,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineTokenizer"),c(UP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizer"),c(JP,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YP,"href","/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(KP,"href","/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eB,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizer"),c(rB,"href","/docs/transformers/pr_17806/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(tB,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lB,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dB,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cB,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fB,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gB,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hB,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizer"),c(pB,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_B,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(uB,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizer"),c(bB,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vB,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TB,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(LB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yB,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xB,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizer"),c($B,"href","/docs/transformers/pr_17806/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(NB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(qB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(jB,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(DB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(GB,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(OB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizer"),c(VB,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDTokenizerFast"),c(XB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizer"),c(zB,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(QB,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(HB,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeTokenizer"),c(UB,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(JB,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(YB,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(KB,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianTokenizer"),c(ZB,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizer"),c(eI,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(oI,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(rI,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(tI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(aI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17806/en/model_doc/mluke#transformers.MLukeTokenizer"),c(sI,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(lI,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(dI,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(cI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(fI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(mI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(gI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(pI,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(uI,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(bI,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vI,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FI,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TI,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(MI,"href","/docs/transformers/pr_17806/en/model_doc/phobert#transformers.PhobertTokenizer"),c(EI,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartTokenizer"),c(CI,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(wI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(AI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(LI,"href","/docs/transformers/pr_17806/en/model_doc/rag#transformers.RagTokenizer"),c(yI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizer"),c(xI,"href","/docs/transformers/pr_17806/en/model_doc/realm#transformers.RealmTokenizerFast"),c($I,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizer"),c(kI,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(SI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizer"),c(RI,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(BI,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(II,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NI,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qI,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(jI,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(DI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(GI,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(OI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizer"),c(VI,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(XI,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(zI,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Tokenizer"),c(QI,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5TokenizerFast"),c(HI,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasTokenizer"),c(UI,"href","/docs/transformers/pr_17806/en/model_doc/tapex#transformers.TapexTokenizer"),c(JI,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(YI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizer"),c(eN,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertTokenizerFast"),c(oN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(aN,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizer"),c(nN,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(sN,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMTokenizer"),c(lN,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(iN,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(dN,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fN,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mN,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(gN,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(hN,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizer"),c(pN,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Bi,"class","relative group"),c(_N,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(uN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MN,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c($N,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(kN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(SN,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QN,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HN,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoProcessor"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoProcessor"),c(Ii,"class","relative group"),c(UN,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(JN,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPProcessor"),c(YN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(KN,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(ZN,"href","/docs/transformers/pr_17806/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(eq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rq,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(tq,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(aq,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRProcessor"),c(nq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lq,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltProcessor"),c(iq,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(dq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"id","transformers.AutoModel"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(mq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hq,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pq,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertModel"),c(_q,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartModel"),c(uq,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitModel"),c(bq,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertModel"),c(vq,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Fq,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdModel"),c(Tq,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Mq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Eq,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Cq,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomModel"),c(wq,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertModel"),c(Aq,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineModel"),c(Lq,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.CLIPModel"),c(yq,"href","/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenModel"),c(xq,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertModel"),c($q,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextModel"),c(kq,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLModel"),c(Sq,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtModel"),c(Rq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Pq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Bq,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Iq,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaModel"),c(Nq,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(qq,"href","/docs/transformers/pr_17806/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(jq,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTModel"),c(Dq,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrModel"),c(Gq,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertModel"),c(Oq,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Vq,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTModel"),c(Xq,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraModel"),c(zq,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertModel"),c(Wq,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaModel"),c(Qq,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetModel"),c(Hq,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTModel"),c(Uq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelModel"),c(Jq,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Yq,"href","/docs/transformers/pr_17806/en/model_doc/glpn#transformers.GLPNModel"),c(Kq,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2Model"),c(Zq,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ej,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(oj,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJModel"),c(rj,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertModel"),c(tj,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertModel"),c(aj,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(nj,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(sj,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(lj,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(ij,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDModel"),c(dj,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitModel"),c(cj,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerModel"),c(fj,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5Model"),c(mj,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeModel"),c(gj,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertModel"),c(hj,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100Model"),c(pj,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianModel"),c(_j,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerModel"),c(uj,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartModel"),c(bj,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTModel"),c(vj,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Fj,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Tj,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetModel"),c(Mj,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5Model"),c(Ej,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaModel"),c(Cj,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerModel"),c(wj,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Aj,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTModel"),c(Lj,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusModel"),c(yj,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverModel"),c(xj,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartModel"),c($j,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerModel"),c(kj,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Sj,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Rj,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModel"),c(Pj,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetModel"),c(Bj,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertModel"),c(Ij,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetModel"),c(Nj,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(qj,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaModel"),c(jj,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerModel"),c(Dj,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerModel"),c(Gj,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWModel"),c(Oj,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDModel"),c(Vj,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Xj,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterModel"),c(zj,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Wj,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinModel"),c(Qj,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5Model"),c(Hj,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasModel"),c(Uj,"href","/docs/transformers/pr_17806/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Jj,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Yj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Kj,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Zj,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanModel"),c(eD,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltModel"),c(oD,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(rD,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertModel"),c(tD,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTModel"),c(aD,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(nD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(sD,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(lD,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMModel"),c(iD,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMModel"),c(dD,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMModel"),c(cD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mD,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gD,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetModel"),c(hD,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosModel"),c(pD,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoModelForPreTraining"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoModelForPreTraining"),c(Gi,"class","relative group"),c(_D,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForPreTraining"),c(FD,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForPreTraining"),c(MD,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ED,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(CD,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(AD,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LD,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForPreTraining"),c(kD,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17806/en/model_doc/flava#transformers.FlavaForPreTraining"),c(RD,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForPreTraining"),c(PD,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ID,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ND,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jD,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(DD,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(GD,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(OD,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(VD,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XD,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(zD,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WD,"href","/docs/transformers/pr_17806/en/model_doc/retribert#transformers.RetriBertModel"),c(QD,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(UD,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KD,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZD,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(eG,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oG,"href","/docs/transformers/pr_17806/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rG,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tG,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aG,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nG,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iG,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForCausalLM"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForCausalLM"),c(Xi,"class","relative group"),c(dG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForCausalLM"),c(gG,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertLMHeadModel"),c(hG,"href","/docs/transformers/pr_17806/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pG,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(_G,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(uG,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bG,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vG,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FG,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(TG,"href","/docs/transformers/pr_17806/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(MG,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EG,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(CG,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wG,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AG,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(LG,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(yG,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(xG,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianForCausalLM"),c($G,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForCausalLM"),c(kG,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(SG,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RG,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.OPTForCausalLM"),c(PG,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(BG,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(IG,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(NG,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qG,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(jG,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(DG,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(GG,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(OG,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(VG,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XG,"href","/docs/transformers/pr_17806/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(zG,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(WG,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(HG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(UG,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(JG,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForMaskedLM"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rO,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(aO,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lO,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iO,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dO,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cO,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(fO,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mO,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(gO,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(hO,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_O,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uO,"href","/docs/transformers/pr_17806/en/model_doc/luke#transformers.LukeForMaskedLM"),c(bO,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(FO,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MO,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(EO,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(CO,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(wO,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(LO,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(yO,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xO,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c($O,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kO,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SO,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(PO,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BO,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nb,"id","transformers.AutoModelForSeq2SeqLM"),c(nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ji,"class","relative group"),c(IO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(XO,"href","/docs/transformers/pr_17806/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17806/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.MarianMTModel"),c(UO,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17806/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(Zi,"class","relative group"),c(rV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c($V,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17806/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForMultipleChoice"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForMultipleChoice"),c(rd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($X,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.AutoModelForNextSentencePrediction"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.AutoModelForNextSentencePrediction"),c(nd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NX,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jX,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DX,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(GX,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.AutoModelForTokenClassification"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.AutoModelForTokenClassification"),c(id,"class","relative group"),c(OX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForTokenClassification"),c(QX,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HX,"href","/docs/transformers/pr_17806/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(UX,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YX,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KX,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ez,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oz,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tz,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(az,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nz,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sz,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lz,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(fz,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mz,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gz,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hz,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pz,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(_z,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uz,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vz,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wz,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Az,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForQuestionAnswering"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForQuestionAnswering"),c(fd,"class","relative group"),c(Lz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17806/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17806/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Xz,"href","/docs/transformers/pr_17806/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17806/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17806/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17806/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17806/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17806/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17806/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17806/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17806/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_17806/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(gW,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_W,"href","/docs/transformers/pr_17806/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForTableQuestionAnswering"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(hd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForImageClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForImageClassification"),c(ud,"class","relative group"),c(TW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForImageClassification"),c(wW,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AW,"href","/docs/transformers/pr_17806/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LW,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yW,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xW,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($W,"href","/docs/transformers/pr_17806/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kW,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassification"),c(SW,"href","/docs/transformers/pr_17806/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(PW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(BW,"href","/docs/transformers/pr_17806/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IW,"href","/docs/transformers/pr_17806/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(NW,"href","/docs/transformers/pr_17806/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(qW,"href","/docs/transformers/pr_17806/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(jW,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(DW,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForImageClassification"),c(GW,"href","/docs/transformers/pr_17806/en/model_doc/van#transformers.VanForImageClassification"),c(OW,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForVision2Seq"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForVision2Seq"),c(Fd,"class","relative group"),c(VW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ed,"class","relative group"),c(QW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17806/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.AutoModelForAudioClassification"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.AutoModelForAudioClassification"),c(Ad,"class","relative group"),c(YW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oQ,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rQ,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tQ,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(iQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.AutoModelForAudioFrameClassification"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.AutoModelForAudioFrameClassification"),c(xd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_Q,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForCTC"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForCTC"),c(Sd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TQ,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.HubertForCTC"),c(MQ,"href","/docs/transformers/pr_17806/en/model_doc/mctct#transformers.MCTCTForCTC"),c(EQ,"href","/docs/transformers/pr_17806/en/model_doc/sew#transformers.SEWForCTC"),c(CQ,"href","/docs/transformers/pr_17806/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(AQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(LQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(xQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Bd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17806/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(PQ,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForAudioXVector"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForAudioXVector"),c(qd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jQ,"href","/docs/transformers/pr_17806/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(DQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GQ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(OQ,"href","/docs/transformers/pr_17806/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForMaskedImageModeling"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Gd,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QQ,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HQ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForObjectDetection"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForObjectDetection"),c(zd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ZQ,"href","/docs/transformers/pr_17806/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForImageSegmentation"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForImageSegmentation"),c(Hd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17806/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForSemanticSegmentation"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Yd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iH,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(dH,"href","/docs/transformers/pr_17806/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(cH,"href","/docs/transformers/pr_17806/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForInstanceSegmentation"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForInstanceSegmentation"),c(ec,"class","relative group"),c(fH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17806/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.TFAutoModel"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.TFAutoModel"),c(tc,"class","relative group"),c(pH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertModel"),c(vH,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartModel"),c(FH,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertModel"),c(TH,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MH,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EH,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertModel"),c(CH,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.TFCLIPModel"),c(wH,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertModel"),c(AH,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextModel"),c(LH,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yH,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xH,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaModel"),c($H,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kH,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTModel"),c(SH,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RH,"href","/docs/transformers/pr_17806/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PH,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraModel"),c(BH,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(IH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelModel"),c(NH,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qH,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jH,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJModel"),c(DH,"href","/docs/transformers/pr_17806/en/model_doc/hubert#transformers.TFHubertModel"),c(GH,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OH,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDModel"),c(VH,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerModel"),c(XH,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zH,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianModel"),c(WH,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartModel"),c(QH,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HH,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UH,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5Model"),c(JH,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YH,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTModel"),c(KH,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZH,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertModel"),c(eU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaModel"),c(oU,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rU,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tU,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinModel"),c(aU,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5Model"),c(nU,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasModel"),c(sU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lU,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTModel"),c(iU,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dU,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMModel"),c(fU,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForPreTraining"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForPreTraining"),c(sc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(uU,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FU,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TU,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MU,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EU,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CU,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wU,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AU,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LU,"href","/docs/transformers/pr_17806/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(yU,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xU,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($U,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SU,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BU,"href","/docs/transformers/pr_17806/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NU,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.TFAutoModelForCausalLM"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.TFAutoModelForCausalLM"),c(dc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VU,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XU,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zU,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WU,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QU,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HU,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(UU,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JU,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YU,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KU,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZU,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eJ,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B8,"id","transformers.TFAutoModelForImageClassification"),c(B8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B8,"href","#transformers.TFAutoModelForImageClassification"),c(mc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17806/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(nJ,"href","/docs/transformers/pr_17806/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(sJ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(lJ,"href","/docs/transformers/pr_17806/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(iJ,"href","/docs/transformers/pr_17806/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dJ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.TFAutoModelForMaskedLM"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.TFAutoModelForMaskedLM"),c(pc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_J,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c($J,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(bc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(DJ,"href","/docs/transformers/pr_17806/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.TFMarianMTModel"),c(OJ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForSequenceClassification"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17806/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17806/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17806/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForMultipleChoice"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Lc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(zY,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c($c,"class","relative group"),c(WY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17806/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTokenClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTokenClassification"),c(Rc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oK,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tK,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aK,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nK,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lK,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dK,"href","/docs/transformers/pr_17806/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cK,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fK,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gK,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(pK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(_K,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uK,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(bK,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForQuestionAnswering"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(vK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17806/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17806/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17806/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17806/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17806/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kK,"href","/docs/transformers/pr_17806/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17806/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17806/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17806/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17806/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17806/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DK,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17806/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForVision2Seq"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForVision2Seq"),c(jc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Oc,"class","relative group"),c(WK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17806/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.FlaxAutoModel"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.FlaxAutoModel"),c(zc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartModel"),c(oZ,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitModel"),c(rZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertModel"),c(tZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aZ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nZ,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(sZ,"href","/docs/transformers/pr_17806/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lZ,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraModel"),c(dZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fZ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(gZ,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianModel"),c(hZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pZ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_Z,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTModel"),c(uZ,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(FZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5Model"),c(TZ,"href","/docs/transformers/pr_17806/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(MZ,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTModel"),c(EZ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(CZ,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wZ,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForCausalLM"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Hc,"class","relative group"),c(AZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($Z,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(SZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(RZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PZ,"href","/docs/transformers/pr_17806/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(BZ,"href","/docs/transformers/pr_17806/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IZ,"href","/docs/transformers/pr_17806/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(NZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qZ,"href","/docs/transformers/pr_17806/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Yc,"class","relative group"),c(jZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VZ,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zZ,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WZ,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QZ,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YZ,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(KZ,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_17806/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(eee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForMaskedLM"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(ef,"class","relative group"),c(oee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ree,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(nee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(see,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(lee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(iee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(dee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(cee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(gee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(tf,"class","relative group"),c(hee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(vee,"href","/docs/transformers/pr_17806/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17806/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Tee,"href","/docs/transformers/pr_17806/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17806/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Eee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17806/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_17806/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17806/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(sf,"class","relative group"),c(Lee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(See,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(cf,"class","relative group"),c(Dee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vee,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_17806/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_17806/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Yee,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Kee,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForTokenClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(gf,"class","relative group"),c(Zee,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ooe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(roe,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(toe,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aoe,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(noe,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(soe,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(loe,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ioe,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(doe,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(_f,"class","relative group"),c(coe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(moe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/pr_17806/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(poe,"href","/docs/transformers/pr_17806/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_17806/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_17806/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(boe,"href","/docs/transformers/pr_17806/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(voe,"href","/docs/transformers/pr_17806/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_17806/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(vf,"class","relative group"),c(Toe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_17806/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForImageClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForImageClassification"),c(Mf,"class","relative group"),c(woe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/pr_17806/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xoe,"href","/docs/transformers/pr_17806/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModelForVision2Seq"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(wf,"class","relative group"),c($oe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_17806/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_17806/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ci),b(f,kf,u),b(f,nt,u),e(nt,wi),e(nt,Ai),e(Ai,kA),e(nt,Sf),b(f,Oe,u),b(f,We,u),e(We,Li),e(We,Rn),e(Rn,SA),e(We,Pn),e(We,Bn),e(Bn,RA),e(We,yi),e(We,In),e(In,PA),e(We,xi),b(f,Rf,u),M($a,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,cS),e(Ae,$i),e($i,fS),e(Ae,mS),b(f,Co,u),b(f,ka,u),e(ka,gS),e(ka,Pf),e(Pf,hS),e(ka,AWe),b(f,fOe,u),b(f,ki,u),e(ki,Bf),e(Bf,yte),M(BA,yte,null),e(ki,LWe),e(ki,xte),e(xte,yWe),b(f,mOe,u),b(f,Nn,u),e(Nn,xWe),e(Nn,$te),e($te,$We),e(Nn,kWe),e(Nn,kte),e(kte,SWe),e(Nn,RWe),b(f,gOe,u),M(IA,f,u),b(f,hOe,u),b(f,pS,u),e(pS,PWe),b(f,pOe,u),M(If,f,u),b(f,_Oe,u),b(f,Si,u),e(Si,Nf),e(Nf,Ste),M(NA,Ste,null),e(Si,BWe),e(Si,Rte),e(Rte,IWe),b(f,uOe,u),b(f,wo,u),M(qA,wo,null),e(wo,NWe),e(wo,jA),e(jA,qWe),e(jA,_S),e(_S,jWe),e(jA,DWe),e(wo,GWe),e(wo,DA),e(DA,OWe),e(DA,Pte),e(Pte,VWe),e(DA,XWe),e(wo,zWe),e(wo,Ar),M(GA,Ar,null),e(Ar,WWe),e(Ar,Bte),e(Bte,QWe),e(Ar,HWe),e(Ar,Ri),e(Ri,UWe),e(Ri,Ite),e(Ite,JWe),e(Ri,YWe),e(Ri,Nte),e(Nte,KWe),e(Ri,ZWe),e(Ar,eQe),e(Ar,A),e(A,qf),e(qf,qte),e(qte,oQe),e(qf,rQe),e(qf,uS),e(uS,tQe),e(qf,aQe),e(A,nQe),e(A,jf),e(jf,jte),e(jte,sQe),e(jf,lQe),e(jf,bS),e(bS,iQe),e(jf,dQe),e(A,cQe),e(A,Df),e(Df,Dte),e(Dte,fQe),e(Df,mQe),e(Df,vS),e(vS,gQe),e(Df,hQe),e(A,pQe),e(A,Gf),e(Gf,Gte),e(Gte,_Qe),e(Gf,uQe),e(Gf,FS),e(FS,bQe),e(Gf,vQe),e(A,FQe),e(A,Of),e(Of,Ote),e(Ote,TQe),e(Of,MQe),e(Of,TS),e(TS,EQe),e(Of,CQe),e(A,wQe),e(A,Vf),e(Vf,Vte),e(Vte,AQe),e(Vf,LQe),e(Vf,MS),e(MS,yQe),e(Vf,xQe),e(A,$Qe),e(A,Xf),e(Xf,Xte),e(Xte,kQe),e(Xf,SQe),e(Xf,ES),e(ES,RQe),e(Xf,PQe),e(A,BQe),e(A,zf),e(zf,zte),e(zte,IQe),e(zf,NQe),e(zf,CS),e(CS,qQe),e(zf,jQe),e(A,DQe),e(A,Wf),e(Wf,Wte),e(Wte,GQe),e(Wf,OQe),e(Wf,wS),e(wS,VQe),e(Wf,XQe),e(A,zQe),e(A,Qf),e(Qf,Qte),e(Qte,WQe),e(Qf,QQe),e(Qf,AS),e(AS,HQe),e(Qf,UQe),e(A,JQe),e(A,Hf),e(Hf,Hte),e(Hte,YQe),e(Hf,KQe),e(Hf,LS),e(LS,ZQe),e(Hf,eHe),e(A,oHe),e(A,Uf),e(Uf,Ute),e(Ute,rHe),e(Uf,tHe),e(Uf,yS),e(yS,aHe),e(Uf,nHe),e(A,sHe),e(A,Jf),e(Jf,Jte),e(Jte,lHe),e(Jf,iHe),e(Jf,xS),e(xS,dHe),e(Jf,cHe),e(A,fHe),e(A,Yf),e(Yf,Yte),e(Yte,mHe),e(Yf,gHe),e(Yf,$S),e($S,hHe),e(Yf,pHe),e(A,_He),e(A,Kf),e(Kf,Kte),e(Kte,uHe),e(Kf,bHe),e(Kf,kS),e(kS,vHe),e(Kf,FHe),e(A,THe),e(A,Zf),e(Zf,Zte),e(Zte,MHe),e(Zf,EHe),e(Zf,SS),e(SS,CHe),e(Zf,wHe),e(A,AHe),e(A,em),e(em,eae),e(eae,LHe),e(em,yHe),e(em,RS),e(RS,xHe),e(em,$He),e(A,kHe),e(A,om),e(om,oae),e(oae,SHe),e(om,RHe),e(om,PS),e(PS,PHe),e(om,BHe),e(A,IHe),e(A,rm),e(rm,rae),e(rae,NHe),e(rm,qHe),e(rm,BS),e(BS,jHe),e(rm,DHe),e(A,GHe),e(A,tm),e(tm,tae),e(tae,OHe),e(tm,VHe),e(tm,IS),e(IS,XHe),e(tm,zHe),e(A,WHe),e(A,am),e(am,aae),e(aae,QHe),e(am,HHe),e(am,NS),e(NS,UHe),e(am,JHe),e(A,YHe),e(A,nm),e(nm,nae),e(nae,KHe),e(nm,ZHe),e(nm,qS),e(qS,eUe),e(nm,oUe),e(A,rUe),e(A,sm),e(sm,sae),e(sae,tUe),e(sm,aUe),e(sm,jS),e(jS,nUe),e(sm,sUe),e(A,lUe),e(A,lm),e(lm,lae),e(lae,iUe),e(lm,dUe),e(lm,DS),e(DS,cUe),e(lm,fUe),e(A,mUe),e(A,im),e(im,iae),e(iae,gUe),e(im,hUe),e(im,GS),e(GS,pUe),e(im,_Ue),e(A,uUe),e(A,dm),e(dm,dae),e(dae,bUe),e(dm,vUe),e(dm,OS),e(OS,FUe),e(dm,TUe),e(A,MUe),e(A,cm),e(cm,cae),e(cae,EUe),e(cm,CUe),e(cm,VS),e(VS,wUe),e(cm,AUe),e(A,LUe),e(A,fm),e(fm,fae),e(fae,yUe),e(fm,xUe),e(fm,XS),e(XS,$Ue),e(fm,kUe),e(A,SUe),e(A,mm),e(mm,mae),e(mae,RUe),e(mm,PUe),e(mm,zS),e(zS,BUe),e(mm,IUe),e(A,NUe),e(A,gm),e(gm,gae),e(gae,qUe),e(gm,jUe),e(gm,WS),e(WS,DUe),e(gm,GUe),e(A,OUe),e(A,hm),e(hm,hae),e(hae,VUe),e(hm,XUe),e(hm,QS),e(QS,zUe),e(hm,WUe),e(A,QUe),e(A,pm),e(pm,pae),e(pae,HUe),e(pm,UUe),e(pm,HS),e(HS,JUe),e(pm,YUe),e(A,KUe),e(A,_m),e(_m,_ae),e(_ae,ZUe),e(_m,eJe),e(_m,US),e(US,oJe),e(_m,rJe),e(A,tJe),e(A,um),e(um,uae),e(uae,aJe),e(um,nJe),e(um,JS),e(JS,sJe),e(um,lJe),e(A,iJe),e(A,bm),e(bm,bae),e(bae,dJe),e(bm,cJe),e(bm,YS),e(YS,fJe),e(bm,mJe),e(A,gJe),e(A,vm),e(vm,vae),e(vae,hJe),e(vm,pJe),e(vm,KS),e(KS,_Je),e(vm,uJe),e(A,bJe),e(A,Fm),e(Fm,Fae),e(Fae,vJe),e(Fm,FJe),e(Fm,ZS),e(ZS,TJe),e(Fm,MJe),e(A,EJe),e(A,Tm),e(Tm,Tae),e(Tae,CJe),e(Tm,wJe),e(Tm,eR),e(eR,AJe),e(Tm,LJe),e(A,yJe),e(A,Mm),e(Mm,Mae),e(Mae,xJe),e(Mm,$Je),e(Mm,oR),e(oR,kJe),e(Mm,SJe),e(A,RJe),e(A,Em),e(Em,Eae),e(Eae,PJe),e(Em,BJe),e(Em,rR),e(rR,IJe),e(Em,NJe),e(A,qJe),e(A,Cm),e(Cm,Cae),e(Cae,jJe),e(Cm,DJe),e(Cm,tR),e(tR,GJe),e(Cm,OJe),e(A,VJe),e(A,wm),e(wm,wae),e(wae,XJe),e(wm,zJe),e(wm,aR),e(aR,WJe),e(wm,QJe),e(A,HJe),e(A,Am),e(Am,Aae),e(Aae,UJe),e(Am,JJe),e(Am,nR),e(nR,YJe),e(Am,KJe),e(A,ZJe),e(A,Lm),e(Lm,Lae),e(Lae,eYe),e(Lm,oYe),e(Lm,sR),e(sR,rYe),e(Lm,tYe),e(A,aYe),e(A,ym),e(ym,yae),e(yae,nYe),e(ym,sYe),e(ym,lR),e(lR,lYe),e(ym,iYe),e(A,dYe),e(A,xm),e(xm,xae),e(xae,cYe),e(xm,fYe),e(xm,iR),e(iR,mYe),e(xm,gYe),e(A,hYe),e(A,$m),e($m,$ae),e($ae,pYe),e($m,_Ye),e($m,dR),e(dR,uYe),e($m,bYe),e(A,vYe),e(A,km),e(km,kae),e(kae,FYe),e(km,TYe),e(km,cR),e(cR,MYe),e(km,EYe),e(A,CYe),e(A,Sm),e(Sm,Sae),e(Sae,wYe),e(Sm,AYe),e(Sm,fR),e(fR,LYe),e(Sm,yYe),e(A,xYe),e(A,Rm),e(Rm,Rae),e(Rae,$Ye),e(Rm,kYe),e(Rm,mR),e(mR,SYe),e(Rm,RYe),e(A,PYe),e(A,Pm),e(Pm,Pae),e(Pae,BYe),e(Pm,IYe),e(Pm,gR),e(gR,NYe),e(Pm,qYe),e(A,jYe),e(A,Bm),e(Bm,Bae),e(Bae,DYe),e(Bm,GYe),e(Bm,hR),e(hR,OYe),e(Bm,VYe),e(A,XYe),e(A,Im),e(Im,Iae),e(Iae,zYe),e(Im,WYe),e(Im,pR),e(pR,QYe),e(Im,HYe),e(A,UYe),e(A,Nm),e(Nm,Nae),e(Nae,JYe),e(Nm,YYe),e(Nm,_R),e(_R,KYe),e(Nm,ZYe),e(A,eKe),e(A,qm),e(qm,qae),e(qae,oKe),e(qm,rKe),e(qm,uR),e(uR,tKe),e(qm,aKe),e(A,nKe),e(A,jm),e(jm,jae),e(jae,sKe),e(jm,lKe),e(jm,bR),e(bR,iKe),e(jm,dKe),e(A,cKe),e(A,Dm),e(Dm,Dae),e(Dae,fKe),e(Dm,mKe),e(Dm,vR),e(vR,gKe),e(Dm,hKe),e(A,pKe),e(A,Gm),e(Gm,Gae),e(Gae,_Ke),e(Gm,uKe),e(Gm,FR),e(FR,bKe),e(Gm,vKe),e(A,FKe),e(A,Om),e(Om,Oae),e(Oae,TKe),e(Om,MKe),e(Om,TR),e(TR,EKe),e(Om,CKe),e(A,wKe),e(A,Vm),e(Vm,Vae),e(Vae,AKe),e(Vm,LKe),e(Vm,MR),e(MR,yKe),e(Vm,xKe),e(A,$Ke),e(A,Xm),e(Xm,Xae),e(Xae,kKe),e(Xm,SKe),e(Xm,ER),e(ER,RKe),e(Xm,PKe),e(A,BKe),e(A,zm),e(zm,zae),e(zae,IKe),e(zm,NKe),e(zm,CR),e(CR,qKe),e(zm,jKe),e(A,DKe),e(A,Wm),e(Wm,Wae),e(Wae,GKe),e(Wm,OKe),e(Wm,wR),e(wR,VKe),e(Wm,XKe),e(A,zKe),e(A,Qm),e(Qm,Qae),e(Qae,WKe),e(Qm,QKe),e(Qm,AR),e(AR,HKe),e(Qm,UKe),e(A,JKe),e(A,Hm),e(Hm,Hae),e(Hae,YKe),e(Hm,KKe),e(Hm,LR),e(LR,ZKe),e(Hm,eZe),e(A,oZe),e(A,Um),e(Um,Uae),e(Uae,rZe),e(Um,tZe),e(Um,yR),e(yR,aZe),e(Um,nZe),e(A,sZe),e(A,Jm),e(Jm,Jae),e(Jae,lZe),e(Jm,iZe),e(Jm,xR),e(xR,dZe),e(Jm,cZe),e(A,fZe),e(A,Ym),e(Ym,Yae),e(Yae,mZe),e(Ym,gZe),e(Ym,$R),e($R,hZe),e(Ym,pZe),e(A,_Ze),e(A,Km),e(Km,Kae),e(Kae,uZe),e(Km,bZe),e(Km,kR),e(kR,vZe),e(Km,FZe),e(A,TZe),e(A,Zm),e(Zm,Zae),e(Zae,MZe),e(Zm,EZe),e(Zm,SR),e(SR,CZe),e(Zm,wZe),e(A,AZe),e(A,eg),e(eg,ene),e(ene,LZe),e(eg,yZe),e(eg,RR),e(RR,xZe),e(eg,$Ze),e(A,kZe),e(A,og),e(og,one),e(one,SZe),e(og,RZe),e(og,PR),e(PR,PZe),e(og,BZe),e(A,IZe),e(A,rg),e(rg,rne),e(rne,NZe),e(rg,qZe),e(rg,BR),e(BR,jZe),e(rg,DZe),e(A,GZe),e(A,tg),e(tg,tne),e(tne,OZe),e(tg,VZe),e(tg,IR),e(IR,XZe),e(tg,zZe),e(A,WZe),e(A,ag),e(ag,ane),e(ane,QZe),e(ag,HZe),e(ag,NR),e(NR,UZe),e(ag,JZe),e(A,YZe),e(A,ng),e(ng,nne),e(nne,KZe),e(ng,ZZe),e(ng,qR),e(qR,eeo),e(ng,oeo),e(A,reo),e(A,sg),e(sg,sne),e(sne,teo),e(sg,aeo),e(sg,jR),e(jR,neo),e(sg,seo),e(A,leo),e(A,lg),e(lg,lne),e(lne,ieo),e(lg,deo),e(lg,DR),e(DR,ceo),e(lg,feo),e(A,meo),e(A,ig),e(ig,ine),e(ine,geo),e(ig,heo),e(ig,GR),e(GR,peo),e(ig,_eo),e(A,ueo),e(A,dg),e(dg,dne),e(dne,beo),e(dg,veo),e(dg,OR),e(OR,Feo),e(dg,Teo),e(A,Meo),e(A,cg),e(cg,cne),e(cne,Eeo),e(cg,Ceo),e(cg,VR),e(VR,weo),e(cg,Aeo),e(A,Leo),e(A,fg),e(fg,fne),e(fne,yeo),e(fg,xeo),e(fg,XR),e(XR,$eo),e(fg,keo),e(A,Seo),e(A,mg),e(mg,mne),e(mne,Reo),e(mg,Peo),e(mg,zR),e(zR,Beo),e(mg,Ieo),e(A,Neo),e(A,gg),e(gg,gne),e(gne,qeo),e(gg,jeo),e(gg,WR),e(WR,Deo),e(gg,Geo),e(A,Oeo),e(A,hg),e(hg,hne),e(hne,Veo),e(hg,Xeo),e(hg,QR),e(QR,zeo),e(hg,Weo),e(A,Qeo),e(A,pg),e(pg,pne),e(pne,Heo),e(pg,Ueo),e(pg,HR),e(HR,Jeo),e(pg,Yeo),e(A,Keo),e(A,_g),e(_g,_ne),e(_ne,Zeo),e(_g,eoo),e(_g,UR),e(UR,ooo),e(_g,roo),e(A,too),e(A,ug),e(ug,une),e(une,aoo),e(ug,noo),e(ug,JR),e(JR,soo),e(ug,loo),e(A,ioo),e(A,bg),e(bg,bne),e(bne,doo),e(bg,coo),e(bg,YR),e(YR,foo),e(bg,moo),e(A,goo),e(A,vg),e(vg,vne),e(vne,hoo),e(vg,poo),e(vg,KR),e(KR,_oo),e(vg,uoo),e(A,boo),e(A,Fg),e(Fg,Fne),e(Fne,voo),e(Fg,Foo),e(Fg,ZR),e(ZR,Too),e(Fg,Moo),e(A,Eoo),e(A,Tg),e(Tg,Tne),e(Tne,Coo),e(Tg,woo),e(Tg,eP),e(eP,Aoo),e(Tg,Loo),e(A,yoo),e(A,Mg),e(Mg,Mne),e(Mne,xoo),e(Mg,$oo),e(Mg,oP),e(oP,koo),e(Mg,Soo),e(A,Roo),e(A,Eg),e(Eg,Ene),e(Ene,Poo),e(Eg,Boo),e(Eg,rP),e(rP,Ioo),e(Eg,Noo),e(A,qoo),e(A,Cg),e(Cg,Cne),e(Cne,joo),e(Cg,Doo),e(Cg,tP),e(tP,Goo),e(Cg,Ooo),e(A,Voo),e(A,wg),e(wg,wne),e(wne,Xoo),e(wg,zoo),e(wg,aP),e(aP,Woo),e(wg,Qoo),e(A,Hoo),e(A,Ag),e(Ag,Ane),e(Ane,Uoo),e(Ag,Joo),e(Ag,nP),e(nP,Yoo),e(Ag,Koo),e(A,Zoo),e(A,Lg),e(Lg,Lne),e(Lne,ero),e(Lg,oro),e(Lg,sP),e(sP,rro),e(Lg,tro),e(A,aro),e(A,yg),e(yg,yne),e(yne,nro),e(yg,sro),e(yg,lP),e(lP,lro),e(yg,iro),e(A,dro),e(A,xg),e(xg,xne),e(xne,cro),e(xg,fro),e(xg,iP),e(iP,mro),e(xg,gro),e(A,hro),e(A,$g),e($g,$ne),e($ne,pro),e($g,_ro),e($g,dP),e(dP,uro),e($g,bro),e(A,vro),e(A,kg),e(kg,kne),e(kne,Fro),e(kg,Tro),e(kg,cP),e(cP,Mro),e(kg,Ero),e(A,Cro),e(A,Sg),e(Sg,Sne),e(Sne,wro),e(Sg,Aro),e(Sg,fP),e(fP,Lro),e(Sg,yro),e(A,xro),e(A,Rg),e(Rg,Rne),e(Rne,$ro),e(Rg,kro),e(Rg,mP),e(mP,Sro),e(Rg,Rro),e(A,Pro),e(A,Pg),e(Pg,Pne),e(Pne,Bro),e(Pg,Iro),e(Pg,gP),e(gP,Nro),e(Pg,qro),e(A,jro),e(A,Bg),e(Bg,Bne),e(Bne,Dro),e(Bg,Gro),e(Bg,hP),e(hP,Oro),e(Bg,Vro),e(A,Xro),e(A,Ig),e(Ig,Ine),e(Ine,zro),e(Ig,Wro),e(Ig,pP),e(pP,Qro),e(Ig,Hro),e(A,Uro),e(A,Ng),e(Ng,Nne),e(Nne,Jro),e(Ng,Yro),e(Ng,_P),e(_P,Kro),e(Ng,Zro),e(A,eto),e(A,qg),e(qg,qne),e(qne,oto),e(qg,rto),e(qg,uP),e(uP,tto),e(qg,ato),e(A,nto),e(A,jg),e(jg,jne),e(jne,sto),e(jg,lto),e(jg,bP),e(bP,ito),e(jg,dto),e(A,cto),e(A,Dg),e(Dg,Dne),e(Dne,fto),e(Dg,mto),e(Dg,vP),e(vP,gto),e(Dg,hto),e(A,pto),e(A,Gg),e(Gg,Gne),e(Gne,_to),e(Gg,uto),e(Gg,FP),e(FP,bto),e(Gg,vto),e(A,Fto),e(A,Og),e(Og,One),e(One,Tto),e(Og,Mto),e(Og,TP),e(TP,Eto),e(Og,Cto),e(A,wto),e(A,Vg),e(Vg,Vne),e(Vne,Ato),e(Vg,Lto),e(Vg,MP),e(MP,yto),e(Vg,xto),e(A,$to),e(A,Xg),e(Xg,Xne),e(Xne,kto),e(Xg,Sto),e(Xg,EP),e(EP,Rto),e(Xg,Pto),e(Ar,Bto),M(zg,Ar,null),e(wo,Ito),e(wo,Wg),M(OA,Wg,null),e(Wg,Nto),e(Wg,zne),e(zne,qto),b(f,bOe,u),b(f,Pi,u),e(Pi,Qg),e(Qg,Wne),M(VA,Wne,null),e(Pi,jto),e(Pi,Qne),e(Qne,Dto),b(f,vOe,u),b(f,Ao,u),M(XA,Ao,null),e(Ao,Gto),e(Ao,zA),e(zA,Oto),e(zA,CP),e(CP,Vto),e(zA,Xto),e(Ao,zto),e(Ao,WA),e(WA,Wto),e(WA,Hne),e(Hne,Qto),e(WA,Hto),e(Ao,Uto),e(Ao,Lr),M(QA,Lr,null),e(Lr,Jto),e(Lr,Une),e(Une,Yto),e(Lr,Kto),e(Lr,Sa),e(Sa,Zto),e(Sa,Jne),e(Jne,eao),e(Sa,oao),e(Sa,Yne),e(Yne,rao),e(Sa,tao),e(Sa,Kne),e(Kne,aao),e(Sa,nao),e(Lr,sao),e(Lr,k),e(k,qn),e(qn,Zne),e(Zne,lao),e(qn,iao),e(qn,wP),e(wP,dao),e(qn,cao),e(qn,AP),e(AP,fao),e(qn,mao),e(k,gao),e(k,jn),e(jn,ese),e(ese,hao),e(jn,pao),e(jn,LP),e(LP,_ao),e(jn,uao),e(jn,yP),e(yP,bao),e(jn,vao),e(k,Fao),e(k,Dn),e(Dn,ose),e(ose,Tao),e(Dn,Mao),e(Dn,xP),e(xP,Eao),e(Dn,Cao),e(Dn,$P),e($P,wao),e(Dn,Aao),e(k,Lao),e(k,Hg),e(Hg,rse),e(rse,yao),e(Hg,xao),e(Hg,kP),e(kP,$ao),e(Hg,kao),e(k,Sao),e(k,Gn),e(Gn,tse),e(tse,Rao),e(Gn,Pao),e(Gn,SP),e(SP,Bao),e(Gn,Iao),e(Gn,RP),e(RP,Nao),e(Gn,qao),e(k,jao),e(k,Ug),e(Ug,ase),e(ase,Dao),e(Ug,Gao),e(Ug,PP),e(PP,Oao),e(Ug,Vao),e(k,Xao),e(k,Jg),e(Jg,nse),e(nse,zao),e(Jg,Wao),e(Jg,BP),e(BP,Qao),e(Jg,Hao),e(k,Uao),e(k,Yg),e(Yg,sse),e(sse,Jao),e(Yg,Yao),e(Yg,IP),e(IP,Kao),e(Yg,Zao),e(k,eno),e(k,On),e(On,lse),e(lse,ono),e(On,rno),e(On,NP),e(NP,tno),e(On,ano),e(On,qP),e(qP,nno),e(On,sno),e(k,lno),e(k,Vn),e(Vn,ise),e(ise,ino),e(Vn,dno),e(Vn,jP),e(jP,cno),e(Vn,fno),e(Vn,DP),e(DP,mno),e(Vn,gno),e(k,hno),e(k,Xn),e(Xn,dse),e(dse,pno),e(Xn,_no),e(Xn,GP),e(GP,uno),e(Xn,bno),e(Xn,OP),e(OP,vno),e(Xn,Fno),e(k,Tno),e(k,Kg),e(Kg,cse),e(cse,Mno),e(Kg,Eno),e(Kg,VP),e(VP,Cno),e(Kg,wno),e(k,Ano),e(k,Zg),e(Zg,fse),e(fse,Lno),e(Zg,yno),e(Zg,XP),e(XP,xno),e(Zg,$no),e(k,kno),e(k,eh),e(eh,mse),e(mse,Sno),e(eh,Rno),e(eh,zP),e(zP,Pno),e(eh,Bno),e(k,Ino),e(k,zn),e(zn,gse),e(gse,Nno),e(zn,qno),e(zn,WP),e(WP,jno),e(zn,Dno),e(zn,QP),e(QP,Gno),e(zn,Ono),e(k,Vno),e(k,oh),e(oh,hse),e(hse,Xno),e(oh,zno),e(oh,HP),e(HP,Wno),e(oh,Qno),e(k,Hno),e(k,Wn),e(Wn,pse),e(pse,Uno),e(Wn,Jno),e(Wn,UP),e(UP,Yno),e(Wn,Kno),e(Wn,JP),e(JP,Zno),e(Wn,eso),e(k,oso),e(k,Qn),e(Qn,_se),e(_se,rso),e(Qn,tso),e(Qn,YP),e(YP,aso),e(Qn,nso),e(Qn,KP),e(KP,sso),e(Qn,lso),e(k,iso),e(k,Hn),e(Hn,use),e(use,dso),e(Hn,cso),e(Hn,ZP),e(ZP,fso),e(Hn,mso),e(Hn,eB),e(eB,gso),e(Hn,hso),e(k,pso),e(k,Un),e(Un,bse),e(bse,_so),e(Un,uso),e(Un,oB),e(oB,bso),e(Un,vso),e(Un,rB),e(rB,Fso),e(Un,Tso),e(k,Mso),e(k,rh),e(rh,vse),e(vse,Eso),e(rh,Cso),e(rh,tB),e(tB,wso),e(rh,Aso),e(k,Lso),e(k,Jn),e(Jn,Fse),e(Fse,yso),e(Jn,xso),e(Jn,aB),e(aB,$so),e(Jn,kso),e(Jn,nB),e(nB,Sso),e(Jn,Rso),e(k,Pso),e(k,Yn),e(Yn,Tse),e(Tse,Bso),e(Yn,Iso),e(Yn,sB),e(sB,Nso),e(Yn,qso),e(Yn,lB),e(lB,jso),e(Yn,Dso),e(k,Gso),e(k,Kn),e(Kn,Mse),e(Mse,Oso),e(Kn,Vso),e(Kn,iB),e(iB,Xso),e(Kn,zso),e(Kn,dB),e(dB,Wso),e(Kn,Qso),e(k,Hso),e(k,Zn),e(Zn,Ese),e(Ese,Uso),e(Zn,Jso),e(Zn,cB),e(cB,Yso),e(Zn,Kso),e(Zn,fB),e(fB,Zso),e(Zn,elo),e(k,olo),e(k,es),e(es,Cse),e(Cse,rlo),e(es,tlo),e(es,mB),e(mB,alo),e(es,nlo),e(es,gB),e(gB,slo),e(es,llo),e(k,ilo),e(k,os),e(os,wse),e(wse,dlo),e(os,clo),e(os,hB),e(hB,flo),e(os,mlo),e(os,pB),e(pB,glo),e(os,hlo),e(k,plo),e(k,th),e(th,Ase),e(Ase,_lo),e(th,ulo),e(th,_B),e(_B,blo),e(th,vlo),e(k,Flo),e(k,rs),e(rs,Lse),e(Lse,Tlo),e(rs,Mlo),e(rs,uB),e(uB,Elo),e(rs,Clo),e(rs,bB),e(bB,wlo),e(rs,Alo),e(k,Llo),e(k,ah),e(ah,yse),e(yse,ylo),e(ah,xlo),e(ah,vB),e(vB,$lo),e(ah,klo),e(k,Slo),e(k,ts),e(ts,xse),e(xse,Rlo),e(ts,Plo),e(ts,FB),e(FB,Blo),e(ts,Ilo),e(ts,TB),e(TB,Nlo),e(ts,qlo),e(k,jlo),e(k,as),e(as,$se),e($se,Dlo),e(as,Glo),e(as,MB),e(MB,Olo),e(as,Vlo),e(as,EB),e(EB,Xlo),e(as,zlo),e(k,Wlo),e(k,ns),e(ns,kse),e(kse,Qlo),e(ns,Hlo),e(ns,CB),e(CB,Ulo),e(ns,Jlo),e(ns,wB),e(wB,Ylo),e(ns,Klo),e(k,Zlo),e(k,nh),e(nh,Sse),e(Sse,eio),e(nh,oio),e(nh,AB),e(AB,rio),e(nh,tio),e(k,aio),e(k,ss),e(ss,Rse),e(Rse,nio),e(ss,sio),e(ss,LB),e(LB,lio),e(ss,iio),e(ss,yB),e(yB,dio),e(ss,cio),e(k,fio),e(k,ls),e(ls,Pse),e(Pse,mio),e(ls,gio),e(ls,xB),e(xB,hio),e(ls,pio),e(ls,$B),e($B,_io),e(ls,uio),e(k,bio),e(k,sh),e(sh,Bse),e(Bse,vio),e(sh,Fio),e(sh,kB),e(kB,Tio),e(sh,Mio),e(k,Eio),e(k,is),e(is,Ise),e(Ise,Cio),e(is,wio),e(is,SB),e(SB,Aio),e(is,Lio),e(is,RB),e(RB,yio),e(is,xio),e(k,$io),e(k,ds),e(ds,Nse),e(Nse,kio),e(ds,Sio),e(ds,PB),e(PB,Rio),e(ds,Pio),e(ds,BB),e(BB,Bio),e(ds,Iio),e(k,Nio),e(k,cs),e(cs,qse),e(qse,qio),e(cs,jio),e(cs,IB),e(IB,Dio),e(cs,Gio),e(cs,NB),e(NB,Oio),e(cs,Vio),e(k,Xio),e(k,fs),e(fs,jse),e(jse,zio),e(fs,Wio),e(fs,qB),e(qB,Qio),e(fs,Hio),e(fs,jB),e(jB,Uio),e(fs,Jio),e(k,Yio),e(k,ms),e(ms,Dse),e(Dse,Kio),e(ms,Zio),e(ms,DB),e(DB,edo),e(ms,odo),e(ms,GB),e(GB,rdo),e(ms,tdo),e(k,ado),e(k,gs),e(gs,Gse),e(Gse,ndo),e(gs,sdo),e(gs,OB),e(OB,ldo),e(gs,ido),e(gs,VB),e(VB,ddo),e(gs,cdo),e(k,fdo),e(k,hs),e(hs,Ose),e(Ose,mdo),e(hs,gdo),e(hs,XB),e(XB,hdo),e(hs,pdo),e(hs,zB),e(zB,_do),e(hs,udo),e(k,bdo),e(k,ps),e(ps,Vse),e(Vse,vdo),e(ps,Fdo),e(ps,WB),e(WB,Tdo),e(ps,Mdo),e(ps,QB),e(QB,Edo),e(ps,Cdo),e(k,wdo),e(k,lh),e(lh,Xse),e(Xse,Ado),e(lh,Ldo),e(lh,HB),e(HB,ydo),e(lh,xdo),e(k,$do),e(k,_s),e(_s,zse),e(zse,kdo),e(_s,Sdo),e(_s,UB),e(UB,Rdo),e(_s,Pdo),e(_s,JB),e(JB,Bdo),e(_s,Ido),e(k,Ndo),e(k,ih),e(ih,Wse),e(Wse,qdo),e(ih,jdo),e(ih,YB),e(YB,Ddo),e(ih,Gdo),e(k,Odo),e(k,dh),e(dh,Qse),e(Qse,Vdo),e(dh,Xdo),e(dh,KB),e(KB,zdo),e(dh,Wdo),e(k,Qdo),e(k,us),e(us,Hse),e(Hse,Hdo),e(us,Udo),e(us,ZB),e(ZB,Jdo),e(us,Ydo),e(us,eI),e(eI,Kdo),e(us,Zdo),e(k,eco),e(k,bs),e(bs,Use),e(Use,oco),e(bs,rco),e(bs,oI),e(oI,tco),e(bs,aco),e(bs,rI),e(rI,nco),e(bs,sco),e(k,lco),e(k,vs),e(vs,Jse),e(Jse,ico),e(vs,dco),e(vs,tI),e(tI,cco),e(vs,fco),e(vs,aI),e(aI,mco),e(vs,gco),e(k,hco),e(k,ch),e(ch,Yse),e(Yse,pco),e(ch,_co),e(ch,nI),e(nI,uco),e(ch,bco),e(k,vco),e(k,Fs),e(Fs,Kse),e(Kse,Fco),e(Fs,Tco),e(Fs,sI),e(sI,Mco),e(Fs,Eco),e(Fs,lI),e(lI,Cco),e(Fs,wco),e(k,Aco),e(k,Ts),e(Ts,Zse),e(Zse,Lco),e(Ts,yco),e(Ts,iI),e(iI,xco),e(Ts,$co),e(Ts,dI),e(dI,kco),e(Ts,Sco),e(k,Rco),e(k,Ms),e(Ms,ele),e(ele,Pco),e(Ms,Bco),e(Ms,cI),e(cI,Ico),e(Ms,Nco),e(Ms,fI),e(fI,qco),e(Ms,jco),e(k,Dco),e(k,Es),e(Es,ole),e(ole,Gco),e(Es,Oco),e(Es,mI),e(mI,Vco),e(Es,Xco),e(Es,gI),e(gI,zco),e(Es,Wco),e(k,Qco),e(k,Cs),e(Cs,rle),e(rle,Hco),e(Cs,Uco),e(Cs,hI),e(hI,Jco),e(Cs,Yco),e(Cs,pI),e(pI,Kco),e(Cs,Zco),e(k,efo),e(k,ws),e(ws,tle),e(tle,ofo),e(ws,rfo),e(ws,_I),e(_I,tfo),e(ws,afo),e(ws,uI),e(uI,nfo),e(ws,sfo),e(k,lfo),e(k,fh),e(fh,ale),e(ale,ifo),e(fh,dfo),e(fh,bI),e(bI,cfo),e(fh,ffo),e(k,mfo),e(k,As),e(As,nle),e(nle,gfo),e(As,hfo),e(As,vI),e(vI,pfo),e(As,_fo),e(As,FI),e(FI,ufo),e(As,bfo),e(k,vfo),e(k,mh),e(mh,sle),e(sle,Ffo),e(mh,Tfo),e(mh,TI),e(TI,Mfo),e(mh,Efo),e(k,Cfo),e(k,gh),e(gh,lle),e(lle,wfo),e(gh,Afo),e(gh,MI),e(MI,Lfo),e(gh,yfo),e(k,xfo),e(k,hh),e(hh,ile),e(ile,$fo),e(hh,kfo),e(hh,EI),e(EI,Sfo),e(hh,Rfo),e(k,Pfo),e(k,ph),e(ph,dle),e(dle,Bfo),e(ph,Ifo),e(ph,CI),e(CI,Nfo),e(ph,qfo),e(k,jfo),e(k,Ls),e(Ls,cle),e(cle,Dfo),e(Ls,Gfo),e(Ls,wI),e(wI,Ofo),e(Ls,Vfo),e(Ls,AI),e(AI,Xfo),e(Ls,zfo),e(k,Wfo),e(k,_h),e(_h,fle),e(fle,Qfo),e(_h,Hfo),e(_h,LI),e(LI,Ufo),e(_h,Jfo),e(k,Yfo),e(k,ys),e(ys,mle),e(mle,Kfo),e(ys,Zfo),e(ys,yI),e(yI,emo),e(ys,omo),e(ys,xI),e(xI,rmo),e(ys,tmo),e(k,amo),e(k,xs),e(xs,gle),e(gle,nmo),e(xs,smo),e(xs,$I),e($I,lmo),e(xs,imo),e(xs,kI),e(kI,dmo),e(xs,cmo),e(k,fmo),e(k,$s),e($s,hle),e(hle,mmo),e($s,gmo),e($s,SI),e(SI,hmo),e($s,pmo),e($s,RI),e(RI,_mo),e($s,umo),e(k,bmo),e(k,ks),e(ks,ple),e(ple,vmo),e(ks,Fmo),e(ks,PI),e(PI,Tmo),e(ks,Mmo),e(ks,BI),e(BI,Emo),e(ks,Cmo),e(k,wmo),e(k,Ss),e(Ss,_le),e(_le,Amo),e(Ss,Lmo),e(Ss,II),e(II,ymo),e(Ss,xmo),e(Ss,NI),e(NI,$mo),e(Ss,kmo),e(k,Smo),e(k,Rs),e(Rs,ule),e(ule,Rmo),e(Rs,Pmo),e(Rs,qI),e(qI,Bmo),e(Rs,Imo),e(Rs,jI),e(jI,Nmo),e(Rs,qmo),e(k,jmo),e(k,uh),e(uh,ble),e(ble,Dmo),e(uh,Gmo),e(uh,DI),e(DI,Omo),e(uh,Vmo),e(k,Xmo),e(k,bh),e(bh,vle),e(vle,zmo),e(bh,Wmo),e(bh,GI),e(GI,Qmo),e(bh,Hmo),e(k,Umo),e(k,Ps),e(Ps,Fle),e(Fle,Jmo),e(Ps,Ymo),e(Ps,OI),e(OI,Kmo),e(Ps,Zmo),e(Ps,VI),e(VI,ego),e(Ps,ogo),e(k,rgo),e(k,Bs),e(Bs,Tle),e(Tle,tgo),e(Bs,ago),e(Bs,XI),e(XI,ngo),e(Bs,sgo),e(Bs,zI),e(zI,lgo),e(Bs,igo),e(k,dgo),e(k,Is),e(Is,Mle),e(Mle,cgo),e(Is,fgo),e(Is,WI),e(WI,mgo),e(Is,ggo),e(Is,QI),e(QI,hgo),e(Is,pgo),e(k,_go),e(k,vh),e(vh,Ele),e(Ele,ugo),e(vh,bgo),e(vh,HI),e(HI,vgo),e(vh,Fgo),e(k,Tgo),e(k,Fh),e(Fh,Cle),e(Cle,Mgo),e(Fh,Ego),e(Fh,UI),e(UI,Cgo),e(Fh,wgo),e(k,Ago),e(k,Th),e(Th,wle),e(wle,Lgo),e(Th,ygo),e(Th,JI),e(JI,xgo),e(Th,$go),e(k,kgo),e(k,Ns),e(Ns,Ale),e(Ale,Sgo),e(Ns,Rgo),e(Ns,YI),e(YI,Pgo),e(Ns,Bgo),e(Ns,KI),e(KI,Igo),e(Ns,Ngo),e(k,qgo),e(k,qs),e(qs,Lle),e(Lle,jgo),e(qs,Dgo),e(qs,ZI),e(ZI,Ggo),e(qs,Ogo),e(qs,eN),e(eN,Vgo),e(qs,Xgo),e(k,zgo),e(k,Mh),e(Mh,yle),e(yle,Wgo),e(Mh,Qgo),e(Mh,oN),e(oN,Hgo),e(Mh,Ugo),e(k,Jgo),e(k,Eh),e(Eh,xle),e(xle,Ygo),e(Eh,Kgo),e(Eh,rN),e(rN,Zgo),e(Eh,eho),e(k,oho),e(k,Ch),e(Ch,$le),e($le,rho),e(Ch,tho),e(Ch,tN),e(tN,aho),e(Ch,nho),e(k,sho),e(k,js),e(js,kle),e(kle,lho),e(js,iho),e(js,aN),e(aN,dho),e(js,cho),e(js,nN),e(nN,fho),e(js,mho),e(k,gho),e(k,wh),e(wh,Sle),e(Sle,hho),e(wh,pho),e(wh,sN),e(sN,_ho),e(wh,uho),e(k,bho),e(k,Ah),e(Ah,Rle),e(Rle,vho),e(Ah,Fho),e(Ah,lN),e(lN,Tho),e(Ah,Mho),e(k,Eho),e(k,Ds),e(Ds,Ple),e(Ple,Cho),e(Ds,who),e(Ds,iN),e(iN,Aho),e(Ds,Lho),e(Ds,dN),e(dN,yho),e(Ds,xho),e(k,$ho),e(k,Gs),e(Gs,Ble),e(Ble,kho),e(Gs,Sho),e(Gs,cN),e(cN,Rho),e(Gs,Pho),e(Gs,fN),e(fN,Bho),e(Gs,Iho),e(k,Nho),e(k,Os),e(Os,Ile),e(Ile,qho),e(Os,jho),e(Os,mN),e(mN,Dho),e(Os,Gho),e(Os,gN),e(gN,Oho),e(Os,Vho),e(k,Xho),e(k,Vs),e(Vs,Nle),e(Nle,zho),e(Vs,Who),e(Vs,hN),e(hN,Qho),e(Vs,Hho),e(Vs,pN),e(pN,Uho),e(Vs,Jho),e(Lr,Yho),M(Lh,Lr,null),e(Ao,Kho),e(Ao,yh),M(HA,yh,null),e(yh,Zho),e(yh,qle),e(qle,epo),b(f,FOe,u),b(f,Bi,u),e(Bi,xh),e(xh,jle),M(UA,jle,null),e(Bi,opo),e(Bi,Dle),e(Dle,rpo),b(f,TOe,u),b(f,Lo,u),M(JA,Lo,null),e(Lo,tpo),e(Lo,YA),e(YA,apo),e(YA,_N),e(_N,npo),e(YA,spo),e(Lo,lpo),e(Lo,KA),e(KA,ipo),e(KA,Gle),e(Gle,dpo),e(KA,cpo),e(Lo,fpo),e(Lo,He),M(ZA,He,null),e(He,mpo),e(He,Ole),e(Ole,gpo),e(He,hpo),e(He,Ra),e(Ra,ppo),e(Ra,Vle),e(Vle,_po),e(Ra,upo),e(Ra,Xle),e(Xle,bpo),e(Ra,vpo),e(Ra,zle),e(zle,Fpo),e(Ra,Tpo),e(He,Mpo),e(He,Y),e(Y,$h),e($h,Wle),e(Wle,Epo),e($h,Cpo),e($h,uN),e(uN,wpo),e($h,Apo),e(Y,Lpo),e(Y,kh),e(kh,Qle),e(Qle,ypo),e(kh,xpo),e(kh,bN),e(bN,$po),e(kh,kpo),e(Y,Spo),e(Y,Sh),e(Sh,Hle),e(Hle,Rpo),e(Sh,Ppo),e(Sh,vN),e(vN,Bpo),e(Sh,Ipo),e(Y,Npo),e(Y,Rh),e(Rh,Ule),e(Ule,qpo),e(Rh,jpo),e(Rh,FN),e(FN,Dpo),e(Rh,Gpo),e(Y,Opo),e(Y,Ph),e(Ph,Jle),e(Jle,Vpo),e(Ph,Xpo),e(Ph,TN),e(TN,zpo),e(Ph,Wpo),e(Y,Qpo),e(Y,Bh),e(Bh,Yle),e(Yle,Hpo),e(Bh,Upo),e(Bh,MN),e(MN,Jpo),e(Bh,Ypo),e(Y,Kpo),e(Y,Ih),e(Ih,Kle),e(Kle,Zpo),e(Ih,e_o),e(Ih,EN),e(EN,o_o),e(Ih,r_o),e(Y,t_o),e(Y,Nh),e(Nh,Zle),e(Zle,a_o),e(Nh,n_o),e(Nh,CN),e(CN,s_o),e(Nh,l_o),e(Y,i_o),e(Y,qh),e(qh,eie),e(eie,d_o),e(qh,c_o),e(qh,wN),e(wN,f_o),e(qh,m_o),e(Y,g_o),e(Y,jh),e(jh,oie),e(oie,h_o),e(jh,p_o),e(jh,AN),e(AN,__o),e(jh,u_o),e(Y,b_o),e(Y,Dh),e(Dh,rie),e(rie,v_o),e(Dh,F_o),e(Dh,LN),e(LN,T_o),e(Dh,M_o),e(Y,E_o),e(Y,Gh),e(Gh,tie),e(tie,C_o),e(Gh,w_o),e(Gh,yN),e(yN,A_o),e(Gh,L_o),e(Y,y_o),e(Y,Oh),e(Oh,aie),e(aie,x_o),e(Oh,$_o),e(Oh,xN),e(xN,k_o),e(Oh,S_o),e(Y,R_o),e(Y,Vh),e(Vh,nie),e(nie,P_o),e(Vh,B_o),e(Vh,$N),e($N,I_o),e(Vh,N_o),e(Y,q_o),e(Y,Xh),e(Xh,sie),e(sie,j_o),e(Xh,D_o),e(Xh,kN),e(kN,G_o),e(Xh,O_o),e(Y,V_o),e(Y,zh),e(zh,lie),e(lie,X_o),e(zh,z_o),e(zh,SN),e(SN,W_o),e(zh,Q_o),e(Y,H_o),e(Y,Wh),e(Wh,iie),e(iie,U_o),e(Wh,J_o),e(Wh,RN),e(RN,Y_o),e(Wh,K_o),e(Y,Z_o),e(Y,Qh),e(Qh,die),e(die,euo),e(Qh,ouo),e(Qh,PN),e(PN,ruo),e(Qh,tuo),e(Y,auo),e(Y,Hh),e(Hh,cie),e(cie,nuo),e(Hh,suo),e(Hh,BN),e(BN,luo),e(Hh,iuo),e(Y,duo),e(Y,Uh),e(Uh,fie),e(fie,cuo),e(Uh,fuo),e(Uh,IN),e(IN,muo),e(Uh,guo),e(Y,huo),e(Y,Jh),e(Jh,mie),e(mie,puo),e(Jh,_uo),e(Jh,NN),e(NN,uuo),e(Jh,buo),e(Y,vuo),e(Y,Yh),e(Yh,gie),e(gie,Fuo),e(Yh,Tuo),e(Yh,qN),e(qN,Muo),e(Yh,Euo),e(Y,Cuo),e(Y,Kh),e(Kh,hie),e(hie,wuo),e(Kh,Auo),e(Kh,jN),e(jN,Luo),e(Kh,yuo),e(Y,xuo),e(Y,Zh),e(Zh,pie),e(pie,$uo),e(Zh,kuo),e(Zh,DN),e(DN,Suo),e(Zh,Ruo),e(Y,Puo),e(Y,ep),e(ep,_ie),e(_ie,Buo),e(ep,Iuo),e(ep,GN),e(GN,Nuo),e(ep,quo),e(Y,juo),e(Y,op),e(op,uie),e(uie,Duo),e(op,Guo),e(op,ON),e(ON,Ouo),e(op,Vuo),e(Y,Xuo),e(Y,rp),e(rp,bie),e(bie,zuo),e(rp,Wuo),e(rp,VN),e(VN,Quo),e(rp,Huo),e(Y,Uuo),e(Y,tp),e(tp,vie),e(vie,Juo),e(tp,Yuo),e(tp,XN),e(XN,Kuo),e(tp,Zuo),e(Y,e1o),e(Y,ap),e(ap,Fie),e(Fie,o1o),e(ap,r1o),e(ap,zN),e(zN,t1o),e(ap,a1o),e(Y,n1o),e(Y,np),e(np,Tie),e(Tie,s1o),e(np,l1o),e(np,WN),e(WN,i1o),e(np,d1o),e(Y,c1o),e(Y,sp),e(sp,Mie),e(Mie,f1o),e(sp,m1o),e(sp,QN),e(QN,g1o),e(sp,h1o),e(Y,p1o),e(Y,lp),e(lp,Eie),e(Eie,_1o),e(lp,u1o),e(lp,HN),e(HN,b1o),e(lp,v1o),e(He,F1o),M(ip,He,null),e(He,T1o),M(dp,He,null),e(Lo,M1o),e(Lo,cp),M(eL,cp,null),e(cp,E1o),e(cp,Cie),e(Cie,C1o),b(f,MOe,u),b(f,Ii,u),e(Ii,fp),e(fp,wie),M(oL,wie,null),e(Ii,w1o),e(Ii,Aie),e(Aie,A1o),b(f,EOe,u),b(f,yo,u),M(rL,yo,null),e(yo,L1o),e(yo,tL),e(tL,y1o),e(tL,UN),e(UN,x1o),e(tL,$1o),e(yo,k1o),e(yo,aL),e(aL,S1o),e(aL,Lie),e(Lie,R1o),e(aL,P1o),e(yo,B1o),e(yo,Ue),M(nL,Ue,null),e(Ue,I1o),e(Ue,yie),e(yie,N1o),e(Ue,q1o),e(Ue,Ni),e(Ni,j1o),e(Ni,xie),e(xie,D1o),e(Ni,G1o),e(Ni,$ie),e($ie,O1o),e(Ni,V1o),e(Ue,X1o),e(Ue,he),e(he,mp),e(mp,kie),e(kie,z1o),e(mp,W1o),e(mp,JN),e(JN,Q1o),e(mp,H1o),e(he,U1o),e(he,gp),e(gp,Sie),e(Sie,J1o),e(gp,Y1o),e(gp,Rie),e(Rie,K1o),e(gp,Z1o),e(he,e2o),e(he,hp),e(hp,Pie),e(Pie,o2o),e(hp,r2o),e(hp,YN),e(YN,t2o),e(hp,a2o),e(he,n2o),e(he,pp),e(pp,Bie),e(Bie,s2o),e(pp,l2o),e(pp,KN),e(KN,i2o),e(pp,d2o),e(he,c2o),e(he,_p),e(_p,Iie),e(Iie,f2o),e(_p,m2o),e(_p,ZN),e(ZN,g2o),e(_p,h2o),e(he,p2o),e(he,up),e(up,Nie),e(Nie,_2o),e(up,u2o),e(up,eq),e(eq,b2o),e(up,v2o),e(he,F2o),e(he,bp),e(bp,qie),e(qie,T2o),e(bp,M2o),e(bp,oq),e(oq,E2o),e(bp,C2o),e(he,w2o),e(he,vp),e(vp,jie),e(jie,A2o),e(vp,L2o),e(vp,rq),e(rq,y2o),e(vp,x2o),e(he,$2o),e(he,Fp),e(Fp,Die),e(Die,k2o),e(Fp,S2o),e(Fp,tq),e(tq,R2o),e(Fp,P2o),e(he,B2o),e(he,Tp),e(Tp,Gie),e(Gie,I2o),e(Tp,N2o),e(Tp,aq),e(aq,q2o),e(Tp,j2o),e(he,D2o),e(he,Mp),e(Mp,Oie),e(Oie,G2o),e(Mp,O2o),e(Mp,nq),e(nq,V2o),e(Mp,X2o),e(he,z2o),e(he,Ep),e(Ep,Vie),e(Vie,W2o),e(Ep,Q2o),e(Ep,sq),e(sq,H2o),e(Ep,U2o),e(he,J2o),e(he,Cp),e(Cp,Xie),e(Xie,Y2o),e(Cp,K2o),e(Cp,lq),e(lq,Z2o),e(Cp,ebo),e(he,obo),e(he,wp),e(wp,zie),e(zie,rbo),e(wp,tbo),e(wp,iq),e(iq,abo),e(wp,nbo),e(he,sbo),e(he,Ap),e(Ap,Wie),e(Wie,lbo),e(Ap,ibo),e(Ap,dq),e(dq,dbo),e(Ap,cbo),e(he,fbo),e(he,Lp),e(Lp,Qie),e(Qie,mbo),e(Lp,gbo),e(Lp,cq),e(cq,hbo),e(Lp,pbo),e(he,_bo),e(he,yp),e(yp,Hie),e(Hie,ubo),e(yp,bbo),e(yp,fq),e(fq,vbo),e(yp,Fbo),e(Ue,Tbo),M(xp,Ue,null),e(Ue,Mbo),M($p,Ue,null),e(yo,Ebo),e(yo,kp),M(sL,kp,null),e(kp,Cbo),e(kp,Uie),e(Uie,wbo),b(f,COe,u),b(f,qi,u),e(qi,Sp),e(Sp,Jie),M(lL,Jie,null),e(qi,Abo),e(qi,Yie),e(Yie,Lbo),b(f,wOe,u),b(f,xo,u),M(iL,xo,null),e(xo,ybo),e(xo,ji),e(ji,xbo),e(ji,mq),e(mq,$bo),e(ji,kbo),e(ji,gq),e(gq,Sbo),e(ji,Rbo),e(xo,Pbo),e(xo,dL),e(dL,Bbo),e(dL,Kie),e(Kie,Ibo),e(dL,Nbo),e(xo,qbo),e(xo,st),M(cL,st,null),e(st,jbo),e(st,Zie),e(Zie,Dbo),e(st,Gbo),e(st,Di),e(Di,Obo),e(Di,ede),e(ede,Vbo),e(Di,Xbo),e(Di,hq),e(hq,zbo),e(Di,Wbo),e(st,Qbo),M(Rp,st,null),e(xo,Hbo),e(xo,Je),M(fL,Je,null),e(Je,Ubo),e(Je,ode),e(ode,Jbo),e(Je,Ybo),e(Je,Pa),e(Pa,Kbo),e(Pa,rde),e(rde,Zbo),e(Pa,evo),e(Pa,tde),e(tde,ovo),e(Pa,rvo),e(Pa,ade),e(ade,tvo),e(Pa,avo),e(Je,nvo),e(Je,y),e(y,Pp),e(Pp,nde),e(nde,svo),e(Pp,lvo),e(Pp,pq),e(pq,ivo),e(Pp,dvo),e(y,cvo),e(y,Bp),e(Bp,sde),e(sde,fvo),e(Bp,mvo),e(Bp,_q),e(_q,gvo),e(Bp,hvo),e(y,pvo),e(y,Ip),e(Ip,lde),e(lde,_vo),e(Ip,uvo),e(Ip,uq),e(uq,bvo),e(Ip,vvo),e(y,Fvo),e(y,Np),e(Np,ide),e(ide,Tvo),e(Np,Mvo),e(Np,bq),e(bq,Evo),e(Np,Cvo),e(y,wvo),e(y,qp),e(qp,dde),e(dde,Avo),e(qp,Lvo),e(qp,vq),e(vq,yvo),e(qp,xvo),e(y,$vo),e(y,jp),e(jp,cde),e(cde,kvo),e(jp,Svo),e(jp,Fq),e(Fq,Rvo),e(jp,Pvo),e(y,Bvo),e(y,Dp),e(Dp,fde),e(fde,Ivo),e(Dp,Nvo),e(Dp,Tq),e(Tq,qvo),e(Dp,jvo),e(y,Dvo),e(y,Gp),e(Gp,mde),e(mde,Gvo),e(Gp,Ovo),e(Gp,Mq),e(Mq,Vvo),e(Gp,Xvo),e(y,zvo),e(y,Op),e(Op,gde),e(gde,Wvo),e(Op,Qvo),e(Op,Eq),e(Eq,Hvo),e(Op,Uvo),e(y,Jvo),e(y,Vp),e(Vp,hde),e(hde,Yvo),e(Vp,Kvo),e(Vp,Cq),e(Cq,Zvo),e(Vp,e0o),e(y,o0o),e(y,Xp),e(Xp,pde),e(pde,r0o),e(Xp,t0o),e(Xp,wq),e(wq,a0o),e(Xp,n0o),e(y,s0o),e(y,zp),e(zp,_de),e(_de,l0o),e(zp,i0o),e(zp,Aq),e(Aq,d0o),e(zp,c0o),e(y,f0o),e(y,Wp),e(Wp,ude),e(ude,m0o),e(Wp,g0o),e(Wp,Lq),e(Lq,h0o),e(Wp,p0o),e(y,_0o),e(y,Qp),e(Qp,bde),e(bde,u0o),e(Qp,b0o),e(Qp,yq),e(yq,v0o),e(Qp,F0o),e(y,T0o),e(y,Hp),e(Hp,vde),e(vde,M0o),e(Hp,E0o),e(Hp,xq),e(xq,C0o),e(Hp,w0o),e(y,A0o),e(y,Up),e(Up,Fde),e(Fde,L0o),e(Up,y0o),e(Up,$q),e($q,x0o),e(Up,$0o),e(y,k0o),e(y,Jp),e(Jp,Tde),e(Tde,S0o),e(Jp,R0o),e(Jp,kq),e(kq,P0o),e(Jp,B0o),e(y,I0o),e(y,Yp),e(Yp,Mde),e(Mde,N0o),e(Yp,q0o),e(Yp,Sq),e(Sq,j0o),e(Yp,D0o),e(y,G0o),e(y,Kp),e(Kp,Ede),e(Ede,O0o),e(Kp,V0o),e(Kp,Rq),e(Rq,X0o),e(Kp,z0o),e(y,W0o),e(y,Zp),e(Zp,Cde),e(Cde,Q0o),e(Zp,H0o),e(Zp,Pq),e(Pq,U0o),e(Zp,J0o),e(y,Y0o),e(y,e_),e(e_,wde),e(wde,K0o),e(e_,Z0o),e(e_,Bq),e(Bq,eFo),e(e_,oFo),e(y,rFo),e(y,o_),e(o_,Ade),e(Ade,tFo),e(o_,aFo),e(o_,Iq),e(Iq,nFo),e(o_,sFo),e(y,lFo),e(y,r_),e(r_,Lde),e(Lde,iFo),e(r_,dFo),e(r_,Nq),e(Nq,cFo),e(r_,fFo),e(y,mFo),e(y,t_),e(t_,yde),e(yde,gFo),e(t_,hFo),e(t_,qq),e(qq,pFo),e(t_,_Fo),e(y,uFo),e(y,a_),e(a_,xde),e(xde,bFo),e(a_,vFo),e(a_,jq),e(jq,FFo),e(a_,TFo),e(y,MFo),e(y,n_),e(n_,$de),e($de,EFo),e(n_,CFo),e(n_,Dq),e(Dq,wFo),e(n_,AFo),e(y,LFo),e(y,s_),e(s_,kde),e(kde,yFo),e(s_,xFo),e(s_,Gq),e(Gq,$Fo),e(s_,kFo),e(y,SFo),e(y,l_),e(l_,Sde),e(Sde,RFo),e(l_,PFo),e(l_,Oq),e(Oq,BFo),e(l_,IFo),e(y,NFo),e(y,i_),e(i_,Rde),e(Rde,qFo),e(i_,jFo),e(i_,Vq),e(Vq,DFo),e(i_,GFo),e(y,OFo),e(y,d_),e(d_,Pde),e(Pde,VFo),e(d_,XFo),e(d_,Xq),e(Xq,zFo),e(d_,WFo),e(y,QFo),e(y,c_),e(c_,Bde),e(Bde,HFo),e(c_,UFo),e(c_,zq),e(zq,JFo),e(c_,YFo),e(y,KFo),e(y,f_),e(f_,Ide),e(Ide,ZFo),e(f_,e6o),e(f_,Wq),e(Wq,o6o),e(f_,r6o),e(y,t6o),e(y,m_),e(m_,Nde),e(Nde,a6o),e(m_,n6o),e(m_,Qq),e(Qq,s6o),e(m_,l6o),e(y,i6o),e(y,g_),e(g_,qde),e(qde,d6o),e(g_,c6o),e(g_,Hq),e(Hq,f6o),e(g_,m6o),e(y,g6o),e(y,Xs),e(Xs,jde),e(jde,h6o),e(Xs,p6o),e(Xs,Uq),e(Uq,_6o),e(Xs,u6o),e(Xs,Jq),e(Jq,b6o),e(Xs,v6o),e(y,F6o),e(y,h_),e(h_,Dde),e(Dde,T6o),e(h_,M6o),e(h_,Yq),e(Yq,E6o),e(h_,C6o),e(y,w6o),e(y,p_),e(p_,Gde),e(Gde,A6o),e(p_,L6o),e(p_,Kq),e(Kq,y6o),e(p_,x6o),e(y,$6o),e(y,__),e(__,Ode),e(Ode,k6o),e(__,S6o),e(__,Zq),e(Zq,R6o),e(__,P6o),e(y,B6o),e(y,u_),e(u_,Vde),e(Vde,I6o),e(u_,N6o),e(u_,ej),e(ej,q6o),e(u_,j6o),e(y,D6o),e(y,b_),e(b_,Xde),e(Xde,G6o),e(b_,O6o),e(b_,oj),e(oj,V6o),e(b_,X6o),e(y,z6o),e(y,v_),e(v_,zde),e(zde,W6o),e(v_,Q6o),e(v_,rj),e(rj,H6o),e(v_,U6o),e(y,J6o),e(y,F_),e(F_,Wde),e(Wde,Y6o),e(F_,K6o),e(F_,tj),e(tj,Z6o),e(F_,eTo),e(y,oTo),e(y,T_),e(T_,Qde),e(Qde,rTo),e(T_,tTo),e(T_,aj),e(aj,aTo),e(T_,nTo),e(y,sTo),e(y,M_),e(M_,Hde),e(Hde,lTo),e(M_,iTo),e(M_,nj),e(nj,dTo),e(M_,cTo),e(y,fTo),e(y,E_),e(E_,Ude),e(Ude,mTo),e(E_,gTo),e(E_,sj),e(sj,hTo),e(E_,pTo),e(y,_To),e(y,C_),e(C_,Jde),e(Jde,uTo),e(C_,bTo),e(C_,lj),e(lj,vTo),e(C_,FTo),e(y,TTo),e(y,w_),e(w_,Yde),e(Yde,MTo),e(w_,ETo),e(w_,ij),e(ij,CTo),e(w_,wTo),e(y,ATo),e(y,A_),e(A_,Kde),e(Kde,LTo),e(A_,yTo),e(A_,dj),e(dj,xTo),e(A_,$To),e(y,kTo),e(y,L_),e(L_,Zde),e(Zde,STo),e(L_,RTo),e(L_,cj),e(cj,PTo),e(L_,BTo),e(y,ITo),e(y,y_),e(y_,ece),e(ece,NTo),e(y_,qTo),e(y_,fj),e(fj,jTo),e(y_,DTo),e(y,GTo),e(y,x_),e(x_,oce),e(oce,OTo),e(x_,VTo),e(x_,mj),e(mj,XTo),e(x_,zTo),e(y,WTo),e(y,$_),e($_,rce),e(rce,QTo),e($_,HTo),e($_,gj),e(gj,UTo),e($_,JTo),e(y,YTo),e(y,k_),e(k_,tce),e(tce,KTo),e(k_,ZTo),e(k_,hj),e(hj,e7o),e(k_,o7o),e(y,r7o),e(y,S_),e(S_,ace),e(ace,t7o),e(S_,a7o),e(S_,pj),e(pj,n7o),e(S_,s7o),e(y,l7o),e(y,R_),e(R_,nce),e(nce,i7o),e(R_,d7o),e(R_,_j),e(_j,c7o),e(R_,f7o),e(y,m7o),e(y,P_),e(P_,sce),e(sce,g7o),e(P_,h7o),e(P_,uj),e(uj,p7o),e(P_,_7o),e(y,u7o),e(y,B_),e(B_,lce),e(lce,b7o),e(B_,v7o),e(B_,bj),e(bj,F7o),e(B_,T7o),e(y,M7o),e(y,I_),e(I_,ice),e(ice,E7o),e(I_,C7o),e(I_,vj),e(vj,w7o),e(I_,A7o),e(y,L7o),e(y,N_),e(N_,dce),e(dce,y7o),e(N_,x7o),e(N_,Fj),e(Fj,$7o),e(N_,k7o),e(y,S7o),e(y,q_),e(q_,cce),e(cce,R7o),e(q_,P7o),e(q_,Tj),e(Tj,B7o),e(q_,I7o),e(y,N7o),e(y,j_),e(j_,fce),e(fce,q7o),e(j_,j7o),e(j_,Mj),e(Mj,D7o),e(j_,G7o),e(y,O7o),e(y,D_),e(D_,mce),e(mce,V7o),e(D_,X7o),e(D_,Ej),e(Ej,z7o),e(D_,W7o),e(y,Q7o),e(y,G_),e(G_,gce),e(gce,H7o),e(G_,U7o),e(G_,Cj),e(Cj,J7o),e(G_,Y7o),e(y,K7o),e(y,O_),e(O_,hce),e(hce,Z7o),e(O_,e8o),e(O_,wj),e(wj,o8o),e(O_,r8o),e(y,t8o),e(y,V_),e(V_,pce),e(pce,a8o),e(V_,n8o),e(V_,Aj),e(Aj,s8o),e(V_,l8o),e(y,i8o),e(y,X_),e(X_,_ce),e(_ce,d8o),e(X_,c8o),e(X_,Lj),e(Lj,f8o),e(X_,m8o),e(y,g8o),e(y,z_),e(z_,uce),e(uce,h8o),e(z_,p8o),e(z_,yj),e(yj,_8o),e(z_,u8o),e(y,b8o),e(y,W_),e(W_,bce),e(bce,v8o),e(W_,F8o),e(W_,xj),e(xj,T8o),e(W_,M8o),e(y,E8o),e(y,Q_),e(Q_,vce),e(vce,C8o),e(Q_,w8o),e(Q_,$j),e($j,A8o),e(Q_,L8o),e(y,y8o),e(y,H_),e(H_,Fce),e(Fce,x8o),e(H_,$8o),e(H_,kj),e(kj,k8o),e(H_,S8o),e(y,R8o),e(y,U_),e(U_,Tce),e(Tce,P8o),e(U_,B8o),e(U_,Sj),e(Sj,I8o),e(U_,N8o),e(y,q8o),e(y,J_),e(J_,Mce),e(Mce,j8o),e(J_,D8o),e(J_,Rj),e(Rj,G8o),e(J_,O8o),e(y,V8o),e(y,Y_),e(Y_,Ece),e(Ece,X8o),e(Y_,z8o),e(Y_,Pj),e(Pj,W8o),e(Y_,Q8o),e(y,H8o),e(y,K_),e(K_,Cce),e(Cce,U8o),e(K_,J8o),e(K_,Bj),e(Bj,Y8o),e(K_,K8o),e(y,Z8o),e(y,Z_),e(Z_,wce),e(wce,eMo),e(Z_,oMo),e(Z_,Ij),e(Ij,rMo),e(Z_,tMo),e(y,aMo),e(y,eu),e(eu,Ace),e(Ace,nMo),e(eu,sMo),e(eu,Nj),e(Nj,lMo),e(eu,iMo),e(y,dMo),e(y,ou),e(ou,Lce),e(Lce,cMo),e(ou,fMo),e(ou,qj),e(qj,mMo),e(ou,gMo),e(y,hMo),e(y,ru),e(ru,yce),e(yce,pMo),e(ru,_Mo),e(ru,jj),e(jj,uMo),e(ru,bMo),e(y,vMo),e(y,tu),e(tu,xce),e(xce,FMo),e(tu,TMo),e(tu,Dj),e(Dj,MMo),e(tu,EMo),e(y,CMo),e(y,au),e(au,$ce),e($ce,wMo),e(au,AMo),e(au,Gj),e(Gj,LMo),e(au,yMo),e(y,xMo),e(y,nu),e(nu,kce),e(kce,$Mo),e(nu,kMo),e(nu,Oj),e(Oj,SMo),e(nu,RMo),e(y,PMo),e(y,su),e(su,Sce),e(Sce,BMo),e(su,IMo),e(su,Vj),e(Vj,NMo),e(su,qMo),e(y,jMo),e(y,lu),e(lu,Rce),e(Rce,DMo),e(lu,GMo),e(lu,Xj),e(Xj,OMo),e(lu,VMo),e(y,XMo),e(y,iu),e(iu,Pce),e(Pce,zMo),e(iu,WMo),e(iu,zj),e(zj,QMo),e(iu,HMo),e(y,UMo),e(y,du),e(du,Bce),e(Bce,JMo),e(du,YMo),e(du,Wj),e(Wj,KMo),e(du,ZMo),e(y,eEo),e(y,cu),e(cu,Ice),e(Ice,oEo),e(cu,rEo),e(cu,Qj),e(Qj,tEo),e(cu,aEo),e(y,nEo),e(y,fu),e(fu,Nce),e(Nce,sEo),e(fu,lEo),e(fu,Hj),e(Hj,iEo),e(fu,dEo),e(y,cEo),e(y,mu),e(mu,qce),e(qce,fEo),e(mu,mEo),e(mu,Uj),e(Uj,gEo),e(mu,hEo),e(y,pEo),e(y,gu),e(gu,jce),e(jce,_Eo),e(gu,uEo),e(gu,Jj),e(Jj,bEo),e(gu,vEo),e(y,FEo),e(y,hu),e(hu,Dce),e(Dce,TEo),e(hu,MEo),e(hu,Yj),e(Yj,EEo),e(hu,CEo),e(y,wEo),e(y,pu),e(pu,Gce),e(Gce,AEo),e(pu,LEo),e(pu,Kj),e(Kj,yEo),e(pu,xEo),e(y,$Eo),e(y,_u),e(_u,Oce),e(Oce,kEo),e(_u,SEo),e(_u,Zj),e(Zj,REo),e(_u,PEo),e(y,BEo),e(y,uu),e(uu,Vce),e(Vce,IEo),e(uu,NEo),e(uu,eD),e(eD,qEo),e(uu,jEo),e(y,DEo),e(y,bu),e(bu,Xce),e(Xce,GEo),e(bu,OEo),e(bu,oD),e(oD,VEo),e(bu,XEo),e(y,zEo),e(y,vu),e(vu,zce),e(zce,WEo),e(vu,QEo),e(vu,rD),e(rD,HEo),e(vu,UEo),e(y,JEo),e(y,Fu),e(Fu,Wce),e(Wce,YEo),e(Fu,KEo),e(Fu,tD),e(tD,ZEo),e(Fu,e4o),e(y,o4o),e(y,Tu),e(Tu,Qce),e(Qce,r4o),e(Tu,t4o),e(Tu,aD),e(aD,a4o),e(Tu,n4o),e(y,s4o),e(y,Mu),e(Mu,Hce),e(Hce,l4o),e(Mu,i4o),e(Mu,nD),e(nD,d4o),e(Mu,c4o),e(y,f4o),e(y,Eu),e(Eu,Uce),e(Uce,m4o),e(Eu,g4o),e(Eu,sD),e(sD,h4o),e(Eu,p4o),e(y,_4o),e(y,Cu),e(Cu,Jce),e(Jce,u4o),e(Cu,b4o),e(Cu,lD),e(lD,v4o),e(Cu,F4o),e(y,T4o),e(y,wu),e(wu,Yce),e(Yce,M4o),e(wu,E4o),e(wu,iD),e(iD,C4o),e(wu,w4o),e(y,A4o),e(y,Au),e(Au,Kce),e(Kce,L4o),e(Au,y4o),e(Au,dD),e(dD,x4o),e(Au,$4o),e(y,k4o),e(y,Lu),e(Lu,Zce),e(Zce,S4o),e(Lu,R4o),e(Lu,cD),e(cD,P4o),e(Lu,B4o),e(y,I4o),e(y,yu),e(yu,efe),e(efe,N4o),e(yu,q4o),e(yu,fD),e(fD,j4o),e(yu,D4o),e(y,G4o),e(y,xu),e(xu,ofe),e(ofe,O4o),e(xu,V4o),e(xu,mD),e(mD,X4o),e(xu,z4o),e(y,W4o),e(y,$u),e($u,rfe),e(rfe,Q4o),e($u,H4o),e($u,gD),e(gD,U4o),e($u,J4o),e(y,Y4o),e(y,ku),e(ku,tfe),e(tfe,K4o),e(ku,Z4o),e(ku,hD),e(hD,eCo),e(ku,oCo),e(y,rCo),e(y,Su),e(Su,afe),e(afe,tCo),e(Su,aCo),e(Su,pD),e(pD,nCo),e(Su,sCo),e(Je,lCo),e(Je,Ru),e(Ru,iCo),e(Ru,nfe),e(nfe,dCo),e(Ru,cCo),e(Ru,sfe),e(sfe,fCo),e(Je,mCo),M(Pu,Je,null),b(f,AOe,u),b(f,Gi,u),e(Gi,Bu),e(Bu,lfe),M(mL,lfe,null),e(Gi,gCo),e(Gi,ife),e(ife,hCo),b(f,LOe,u),b(f,$o,u),M(gL,$o,null),e($o,pCo),e($o,Oi),e(Oi,_Co),e(Oi,_D),e(_D,uCo),e(Oi,bCo),e(Oi,uD),e(uD,vCo),e(Oi,FCo),e($o,TCo),e($o,hL),e(hL,MCo),e(hL,dfe),e(dfe,ECo),e(hL,CCo),e($o,wCo),e($o,lt),M(pL,lt,null),e(lt,ACo),e(lt,cfe),e(cfe,LCo),e(lt,yCo),e(lt,Vi),e(Vi,xCo),e(Vi,ffe),e(ffe,$Co),e(Vi,kCo),e(Vi,bD),e(bD,SCo),e(Vi,RCo),e(lt,PCo),M(Iu,lt,null),e($o,BCo),e($o,Ye),M(_L,Ye,null),e(Ye,ICo),e(Ye,mfe),e(mfe,NCo),e(Ye,qCo),e(Ye,Ba),e(Ba,jCo),e(Ba,gfe),e(gfe,DCo),e(Ba,GCo),e(Ba,hfe),e(hfe,OCo),e(Ba,VCo),e(Ba,pfe),e(pfe,XCo),e(Ba,zCo),e(Ye,WCo),e(Ye,G),e(G,Nu),e(Nu,_fe),e(_fe,QCo),e(Nu,HCo),e(Nu,vD),e(vD,UCo),e(Nu,JCo),e(G,YCo),e(G,qu),e(qu,ufe),e(ufe,KCo),e(qu,ZCo),e(qu,FD),e(FD,e5o),e(qu,o5o),e(G,r5o),e(G,ju),e(ju,bfe),e(bfe,t5o),e(ju,a5o),e(ju,TD),e(TD,n5o),e(ju,s5o),e(G,l5o),e(G,Du),e(Du,vfe),e(vfe,i5o),e(Du,d5o),e(Du,MD),e(MD,c5o),e(Du,f5o),e(G,m5o),e(G,Gu),e(Gu,Ffe),e(Ffe,g5o),e(Gu,h5o),e(Gu,ED),e(ED,p5o),e(Gu,_5o),e(G,u5o),e(G,Ou),e(Ou,Tfe),e(Tfe,b5o),e(Ou,v5o),e(Ou,CD),e(CD,F5o),e(Ou,T5o),e(G,M5o),e(G,Vu),e(Vu,Mfe),e(Mfe,E5o),e(Vu,C5o),e(Vu,wD),e(wD,w5o),e(Vu,A5o),e(G,L5o),e(G,Xu),e(Xu,Efe),e(Efe,y5o),e(Xu,x5o),e(Xu,AD),e(AD,$5o),e(Xu,k5o),e(G,S5o),e(G,zu),e(zu,Cfe),e(Cfe,R5o),e(zu,P5o),e(zu,LD),e(LD,B5o),e(zu,I5o),e(G,N5o),e(G,Wu),e(Wu,wfe),e(wfe,q5o),e(Wu,j5o),e(Wu,yD),e(yD,D5o),e(Wu,G5o),e(G,O5o),e(G,Qu),e(Qu,Afe),e(Afe,V5o),e(Qu,X5o),e(Qu,xD),e(xD,z5o),e(Qu,W5o),e(G,Q5o),e(G,Hu),e(Hu,Lfe),e(Lfe,H5o),e(Hu,U5o),e(Hu,$D),e($D,J5o),e(Hu,Y5o),e(G,K5o),e(G,Uu),e(Uu,yfe),e(yfe,Z5o),e(Uu,e3o),e(Uu,kD),e(kD,o3o),e(Uu,r3o),e(G,t3o),e(G,Ju),e(Ju,xfe),e(xfe,a3o),e(Ju,n3o),e(Ju,SD),e(SD,s3o),e(Ju,l3o),e(G,i3o),e(G,Yu),e(Yu,$fe),e($fe,d3o),e(Yu,c3o),e(Yu,RD),e(RD,f3o),e(Yu,m3o),e(G,g3o),e(G,Ku),e(Ku,kfe),e(kfe,h3o),e(Ku,p3o),e(Ku,PD),e(PD,_3o),e(Ku,u3o),e(G,b3o),e(G,Zu),e(Zu,Sfe),e(Sfe,v3o),e(Zu,F3o),e(Zu,BD),e(BD,T3o),e(Zu,M3o),e(G,E3o),e(G,e1),e(e1,Rfe),e(Rfe,C3o),e(e1,w3o),e(e1,ID),e(ID,A3o),e(e1,L3o),e(G,y3o),e(G,o1),e(o1,Pfe),e(Pfe,x3o),e(o1,$3o),e(o1,ND),e(ND,k3o),e(o1,S3o),e(G,R3o),e(G,r1),e(r1,Bfe),e(Bfe,P3o),e(r1,B3o),e(r1,qD),e(qD,I3o),e(r1,N3o),e(G,q3o),e(G,t1),e(t1,Ife),e(Ife,j3o),e(t1,D3o),e(t1,jD),e(jD,G3o),e(t1,O3o),e(G,V3o),e(G,a1),e(a1,Nfe),e(Nfe,X3o),e(a1,z3o),e(a1,DD),e(DD,W3o),e(a1,Q3o),e(G,H3o),e(G,n1),e(n1,qfe),e(qfe,U3o),e(n1,J3o),e(n1,GD),e(GD,Y3o),e(n1,K3o),e(G,Z3o),e(G,s1),e(s1,jfe),e(jfe,ewo),e(s1,owo),e(s1,OD),e(OD,rwo),e(s1,two),e(G,awo),e(G,l1),e(l1,Dfe),e(Dfe,nwo),e(l1,swo),e(l1,VD),e(VD,lwo),e(l1,iwo),e(G,dwo),e(G,i1),e(i1,Gfe),e(Gfe,cwo),e(i1,fwo),e(i1,XD),e(XD,mwo),e(i1,gwo),e(G,hwo),e(G,d1),e(d1,Ofe),e(Ofe,pwo),e(d1,_wo),e(d1,zD),e(zD,uwo),e(d1,bwo),e(G,vwo),e(G,c1),e(c1,Vfe),e(Vfe,Fwo),e(c1,Two),e(c1,WD),e(WD,Mwo),e(c1,Ewo),e(G,Cwo),e(G,f1),e(f1,Xfe),e(Xfe,wwo),e(f1,Awo),e(f1,QD),e(QD,Lwo),e(f1,ywo),e(G,xwo),e(G,m1),e(m1,zfe),e(zfe,$wo),e(m1,kwo),e(m1,HD),e(HD,Swo),e(m1,Rwo),e(G,Pwo),e(G,g1),e(g1,Wfe),e(Wfe,Bwo),e(g1,Iwo),e(g1,UD),e(UD,Nwo),e(g1,qwo),e(G,jwo),e(G,h1),e(h1,Qfe),e(Qfe,Dwo),e(h1,Gwo),e(h1,JD),e(JD,Owo),e(h1,Vwo),e(G,Xwo),e(G,p1),e(p1,Hfe),e(Hfe,zwo),e(p1,Wwo),e(p1,YD),e(YD,Qwo),e(p1,Hwo),e(G,Uwo),e(G,_1),e(_1,Ufe),e(Ufe,Jwo),e(_1,Ywo),e(_1,KD),e(KD,Kwo),e(_1,Zwo),e(G,eAo),e(G,u1),e(u1,Jfe),e(Jfe,oAo),e(u1,rAo),e(u1,ZD),e(ZD,tAo),e(u1,aAo),e(G,nAo),e(G,b1),e(b1,Yfe),e(Yfe,sAo),e(b1,lAo),e(b1,eG),e(eG,iAo),e(b1,dAo),e(G,cAo),e(G,v1),e(v1,Kfe),e(Kfe,fAo),e(v1,mAo),e(v1,oG),e(oG,gAo),e(v1,hAo),e(G,pAo),e(G,F1),e(F1,Zfe),e(Zfe,_Ao),e(F1,uAo),e(F1,rG),e(rG,bAo),e(F1,vAo),e(G,FAo),e(G,T1),e(T1,eme),e(eme,TAo),e(T1,MAo),e(T1,tG),e(tG,EAo),e(T1,CAo),e(G,wAo),e(G,M1),e(M1,ome),e(ome,AAo),e(M1,LAo),e(M1,aG),e(aG,yAo),e(M1,xAo),e(G,$Ao),e(G,E1),e(E1,rme),e(rme,kAo),e(E1,SAo),e(E1,nG),e(nG,RAo),e(E1,PAo),e(G,BAo),e(G,C1),e(C1,tme),e(tme,IAo),e(C1,NAo),e(C1,sG),e(sG,qAo),e(C1,jAo),e(G,DAo),e(G,w1),e(w1,ame),e(ame,GAo),e(w1,OAo),e(w1,lG),e(lG,VAo),e(w1,XAo),e(G,zAo),e(G,A1),e(A1,nme),e(nme,WAo),e(A1,QAo),e(A1,iG),e(iG,HAo),e(A1,UAo),e(Ye,JAo),e(Ye,L1),e(L1,YAo),e(L1,sme),e(sme,KAo),e(L1,ZAo),e(L1,lme),e(lme,eLo),e(Ye,oLo),M(y1,Ye,null),b(f,yOe,u),b(f,Xi,u),e(Xi,x1),e(x1,ime),M(uL,ime,null),e(Xi,rLo),e(Xi,dme),e(dme,tLo),b(f,xOe,u),b(f,ko,u),M(bL,ko,null),e(ko,aLo),e(ko,zi),e(zi,nLo),e(zi,dG),e(dG,sLo),e(zi,lLo),e(zi,cG),e(cG,iLo),e(zi,dLo),e(ko,cLo),e(ko,vL),e(vL,fLo),e(vL,cme),e(cme,mLo),e(vL,gLo),e(ko,hLo),e(ko,it),M(FL,it,null),e(it,pLo),e(it,fme),e(fme,_Lo),e(it,uLo),e(it,Wi),e(Wi,bLo),e(Wi,mme),e(mme,vLo),e(Wi,FLo),e(Wi,fG),e(fG,TLo),e(Wi,MLo),e(it,ELo),M($1,it,null),e(ko,CLo),e(ko,Ke),M(TL,Ke,null),e(Ke,wLo),e(Ke,gme),e(gme,ALo),e(Ke,LLo),e(Ke,Ia),e(Ia,yLo),e(Ia,hme),e(hme,xLo),e(Ia,$Lo),e(Ia,pme),e(pme,kLo),e(Ia,SLo),e(Ia,_me),e(_me,RLo),e(Ia,PLo),e(Ke,BLo),e(Ke,z),e(z,k1),e(k1,ume),e(ume,ILo),e(k1,NLo),e(k1,mG),e(mG,qLo),e(k1,jLo),e(z,DLo),e(z,S1),e(S1,bme),e(bme,GLo),e(S1,OLo),e(S1,gG),e(gG,VLo),e(S1,XLo),e(z,zLo),e(z,R1),e(R1,vme),e(vme,WLo),e(R1,QLo),e(R1,hG),e(hG,HLo),e(R1,ULo),e(z,JLo),e(z,P1),e(P1,Fme),e(Fme,YLo),e(P1,KLo),e(P1,pG),e(pG,ZLo),e(P1,eyo),e(z,oyo),e(z,B1),e(B1,Tme),e(Tme,ryo),e(B1,tyo),e(B1,_G),e(_G,ayo),e(B1,nyo),e(z,syo),e(z,I1),e(I1,Mme),e(Mme,lyo),e(I1,iyo),e(I1,uG),e(uG,dyo),e(I1,cyo),e(z,fyo),e(z,N1),e(N1,Eme),e(Eme,myo),e(N1,gyo),e(N1,bG),e(bG,hyo),e(N1,pyo),e(z,_yo),e(z,q1),e(q1,Cme),e(Cme,uyo),e(q1,byo),e(q1,vG),e(vG,vyo),e(q1,Fyo),e(z,Tyo),e(z,j1),e(j1,wme),e(wme,Myo),e(j1,Eyo),e(j1,FG),e(FG,Cyo),e(j1,wyo),e(z,Ayo),e(z,D1),e(D1,Ame),e(Ame,Lyo),e(D1,yyo),e(D1,TG),e(TG,xyo),e(D1,$yo),e(z,kyo),e(z,G1),e(G1,Lme),e(Lme,Syo),e(G1,Ryo),e(G1,MG),e(MG,Pyo),e(G1,Byo),e(z,Iyo),e(z,O1),e(O1,yme),e(yme,Nyo),e(O1,qyo),e(O1,EG),e(EG,jyo),e(O1,Dyo),e(z,Gyo),e(z,V1),e(V1,xme),e(xme,Oyo),e(V1,Vyo),e(V1,CG),e(CG,Xyo),e(V1,zyo),e(z,Wyo),e(z,X1),e(X1,$me),e($me,Qyo),e(X1,Hyo),e(X1,wG),e(wG,Uyo),e(X1,Jyo),e(z,Yyo),e(z,z1),e(z1,kme),e(kme,Kyo),e(z1,Zyo),e(z1,AG),e(AG,e9o),e(z1,o9o),e(z,r9o),e(z,W1),e(W1,Sme),e(Sme,t9o),e(W1,a9o),e(W1,LG),e(LG,n9o),e(W1,s9o),e(z,l9o),e(z,Q1),e(Q1,Rme),e(Rme,i9o),e(Q1,d9o),e(Q1,yG),e(yG,c9o),e(Q1,f9o),e(z,m9o),e(z,H1),e(H1,Pme),e(Pme,g9o),e(H1,h9o),e(H1,xG),e(xG,p9o),e(H1,_9o),e(z,u9o),e(z,U1),e(U1,Bme),e(Bme,b9o),e(U1,v9o),e(U1,$G),e($G,F9o),e(U1,T9o),e(z,M9o),e(z,J1),e(J1,Ime),e(Ime,E9o),e(J1,C9o),e(J1,kG),e(kG,w9o),e(J1,A9o),e(z,L9o),e(z,Y1),e(Y1,Nme),e(Nme,y9o),e(Y1,x9o),e(Y1,SG),e(SG,$9o),e(Y1,k9o),e(z,S9o),e(z,K1),e(K1,qme),e(qme,R9o),e(K1,P9o),e(K1,RG),e(RG,B9o),e(K1,I9o),e(z,N9o),e(z,Z1),e(Z1,jme),e(jme,q9o),e(Z1,j9o),e(Z1,PG),e(PG,D9o),e(Z1,G9o),e(z,O9o),e(z,e2),e(e2,Dme),e(Dme,V9o),e(e2,X9o),e(e2,BG),e(BG,z9o),e(e2,W9o),e(z,Q9o),e(z,o2),e(o2,Gme),e(Gme,H9o),e(o2,U9o),e(o2,IG),e(IG,J9o),e(o2,Y9o),e(z,K9o),e(z,r2),e(r2,Ome),e(Ome,Z9o),e(r2,exo),e(r2,NG),e(NG,oxo),e(r2,rxo),e(z,txo),e(z,t2),e(t2,Vme),e(Vme,axo),e(t2,nxo),e(t2,qG),e(qG,sxo),e(t2,lxo),e(z,ixo),e(z,a2),e(a2,Xme),e(Xme,dxo),e(a2,cxo),e(a2,jG),e(jG,fxo),e(a2,mxo),e(z,gxo),e(z,n2),e(n2,zme),e(zme,hxo),e(n2,pxo),e(n2,DG),e(DG,_xo),e(n2,uxo),e(z,bxo),e(z,s2),e(s2,Wme),e(Wme,vxo),e(s2,Fxo),e(s2,GG),e(GG,Txo),e(s2,Mxo),e(z,Exo),e(z,l2),e(l2,Qme),e(Qme,Cxo),e(l2,wxo),e(l2,OG),e(OG,Axo),e(l2,Lxo),e(z,yxo),e(z,i2),e(i2,Hme),e(Hme,xxo),e(i2,$xo),e(i2,VG),e(VG,kxo),e(i2,Sxo),e(z,Rxo),e(z,d2),e(d2,Ume),e(Ume,Pxo),e(d2,Bxo),e(d2,XG),e(XG,Ixo),e(d2,Nxo),e(z,qxo),e(z,c2),e(c2,Jme),e(Jme,jxo),e(c2,Dxo),e(c2,zG),e(zG,Gxo),e(c2,Oxo),e(z,Vxo),e(z,f2),e(f2,Yme),e(Yme,Xxo),e(f2,zxo),e(f2,WG),e(WG,Wxo),e(f2,Qxo),e(z,Hxo),e(z,m2),e(m2,Kme),e(Kme,Uxo),e(m2,Jxo),e(m2,QG),e(QG,Yxo),e(m2,Kxo),e(z,Zxo),e(z,g2),e(g2,Zme),e(Zme,e$o),e(g2,o$o),e(g2,HG),e(HG,r$o),e(g2,t$o),e(z,a$o),e(z,h2),e(h2,ege),e(ege,n$o),e(h2,s$o),e(h2,UG),e(UG,l$o),e(h2,i$o),e(z,d$o),e(z,p2),e(p2,oge),e(oge,c$o),e(p2,f$o),e(p2,JG),e(JG,m$o),e(p2,g$o),e(Ke,h$o),e(Ke,_2),e(_2,p$o),e(_2,rge),e(rge,_$o),e(_2,u$o),e(_2,tge),e(tge,b$o),e(Ke,v$o),M(u2,Ke,null),b(f,$Oe,u),b(f,Qi,u),e(Qi,b2),e(b2,age),M(ML,age,null),e(Qi,F$o),e(Qi,nge),e(nge,T$o),b(f,kOe,u),b(f,So,u),M(EL,So,null),e(So,M$o),e(So,Hi),e(Hi,E$o),e(Hi,YG),e(YG,C$o),e(Hi,w$o),e(Hi,KG),e(KG,A$o),e(Hi,L$o),e(So,y$o),e(So,CL),e(CL,x$o),e(CL,sge),e(sge,$$o),e(CL,k$o),e(So,S$o),e(So,dt),M(wL,dt,null),e(dt,R$o),e(dt,lge),e(lge,P$o),e(dt,B$o),e(dt,Ui),e(Ui,I$o),e(Ui,ige),e(ige,N$o),e(Ui,q$o),e(Ui,ZG),e(ZG,j$o),e(Ui,D$o),e(dt,G$o),M(v2,dt,null),e(So,O$o),e(So,Ze),M(AL,Ze,null),e(Ze,V$o),e(Ze,dge),e(dge,X$o),e(Ze,z$o),e(Ze,Na),e(Na,W$o),e(Na,cge),e(cge,Q$o),e(Na,H$o),e(Na,fge),e(fge,U$o),e(Na,J$o),e(Na,mge),e(mge,Y$o),e(Na,K$o),e(Ze,Z$o),e(Ze,Q),e(Q,F2),e(F2,gge),e(gge,eko),e(F2,oko),e(F2,eO),e(eO,rko),e(F2,tko),e(Q,ako),e(Q,T2),e(T2,hge),e(hge,nko),e(T2,sko),e(T2,oO),e(oO,lko),e(T2,iko),e(Q,dko),e(Q,M2),e(M2,pge),e(pge,cko),e(M2,fko),e(M2,rO),e(rO,mko),e(M2,gko),e(Q,hko),e(Q,E2),e(E2,_ge),e(_ge,pko),e(E2,_ko),e(E2,tO),e(tO,uko),e(E2,bko),e(Q,vko),e(Q,C2),e(C2,uge),e(uge,Fko),e(C2,Tko),e(C2,aO),e(aO,Mko),e(C2,Eko),e(Q,Cko),e(Q,w2),e(w2,bge),e(bge,wko),e(w2,Ako),e(w2,nO),e(nO,Lko),e(w2,yko),e(Q,xko),e(Q,A2),e(A2,vge),e(vge,$ko),e(A2,kko),e(A2,sO),e(sO,Sko),e(A2,Rko),e(Q,Pko),e(Q,L2),e(L2,Fge),e(Fge,Bko),e(L2,Iko),e(L2,lO),e(lO,Nko),e(L2,qko),e(Q,jko),e(Q,y2),e(y2,Tge),e(Tge,Dko),e(y2,Gko),e(y2,iO),e(iO,Oko),e(y2,Vko),e(Q,Xko),e(Q,x2),e(x2,Mge),e(Mge,zko),e(x2,Wko),e(x2,dO),e(dO,Qko),e(x2,Hko),e(Q,Uko),e(Q,$2),e($2,Ege),e(Ege,Jko),e($2,Yko),e($2,cO),e(cO,Kko),e($2,Zko),e(Q,eSo),e(Q,k2),e(k2,Cge),e(Cge,oSo),e(k2,rSo),e(k2,fO),e(fO,tSo),e(k2,aSo),e(Q,nSo),e(Q,S2),e(S2,wge),e(wge,sSo),e(S2,lSo),e(S2,mO),e(mO,iSo),e(S2,dSo),e(Q,cSo),e(Q,R2),e(R2,Age),e(Age,fSo),e(R2,mSo),e(R2,gO),e(gO,gSo),e(R2,hSo),e(Q,pSo),e(Q,P2),e(P2,Lge),e(Lge,_So),e(P2,uSo),e(P2,hO),e(hO,bSo),e(P2,vSo),e(Q,FSo),e(Q,B2),e(B2,yge),e(yge,TSo),e(B2,MSo),e(B2,pO),e(pO,ESo),e(B2,CSo),e(Q,wSo),e(Q,I2),e(I2,xge),e(xge,ASo),e(I2,LSo),e(I2,_O),e(_O,ySo),e(I2,xSo),e(Q,$So),e(Q,N2),e(N2,$ge),e($ge,kSo),e(N2,SSo),e(N2,uO),e(uO,RSo),e(N2,PSo),e(Q,BSo),e(Q,q2),e(q2,kge),e(kge,ISo),e(q2,NSo),e(q2,bO),e(bO,qSo),e(q2,jSo),e(Q,DSo),e(Q,j2),e(j2,Sge),e(Sge,GSo),e(j2,OSo),e(j2,vO),e(vO,VSo),e(j2,XSo),e(Q,zSo),e(Q,D2),e(D2,Rge),e(Rge,WSo),e(D2,QSo),e(D2,FO),e(FO,HSo),e(D2,USo),e(Q,JSo),e(Q,G2),e(G2,Pge),e(Pge,YSo),e(G2,KSo),e(G2,TO),e(TO,ZSo),e(G2,eRo),e(Q,oRo),e(Q,O2),e(O2,Bge),e(Bge,rRo),e(O2,tRo),e(O2,MO),e(MO,aRo),e(O2,nRo),e(Q,sRo),e(Q,V2),e(V2,Ige),e(Ige,lRo),e(V2,iRo),e(V2,EO),e(EO,dRo),e(V2,cRo),e(Q,fRo),e(Q,X2),e(X2,Nge),e(Nge,mRo),e(X2,gRo),e(X2,CO),e(CO,hRo),e(X2,pRo),e(Q,_Ro),e(Q,z2),e(z2,qge),e(qge,uRo),e(z2,bRo),e(z2,wO),e(wO,vRo),e(z2,FRo),e(Q,TRo),e(Q,W2),e(W2,jge),e(jge,MRo),e(W2,ERo),e(W2,AO),e(AO,CRo),e(W2,wRo),e(Q,ARo),e(Q,Q2),e(Q2,Dge),e(Dge,LRo),e(Q2,yRo),e(Q2,LO),e(LO,xRo),e(Q2,$Ro),e(Q,kRo),e(Q,H2),e(H2,Gge),e(Gge,SRo),e(H2,RRo),e(H2,yO),e(yO,PRo),e(H2,BRo),e(Q,IRo),e(Q,U2),e(U2,Oge),e(Oge,NRo),e(U2,qRo),e(U2,xO),e(xO,jRo),e(U2,DRo),e(Q,GRo),e(Q,J2),e(J2,Vge),e(Vge,ORo),e(J2,VRo),e(J2,$O),e($O,XRo),e(J2,zRo),e(Q,WRo),e(Q,Y2),e(Y2,Xge),e(Xge,QRo),e(Y2,HRo),e(Y2,kO),e(kO,URo),e(Y2,JRo),e(Q,YRo),e(Q,K2),e(K2,zge),e(zge,KRo),e(K2,ZRo),e(K2,Wge),e(Wge,ePo),e(K2,oPo),e(Q,rPo),e(Q,Z2),e(Z2,Qge),e(Qge,tPo),e(Z2,aPo),e(Z2,SO),e(SO,nPo),e(Z2,sPo),e(Q,lPo),e(Q,eb),e(eb,Hge),e(Hge,iPo),e(eb,dPo),e(eb,RO),e(RO,cPo),e(eb,fPo),e(Q,mPo),e(Q,ob),e(ob,Uge),e(Uge,gPo),e(ob,hPo),e(ob,PO),e(PO,pPo),e(ob,_Po),e(Q,uPo),e(Q,rb),e(rb,Jge),e(Jge,bPo),e(rb,vPo),e(rb,BO),e(BO,FPo),e(rb,TPo),e(Ze,MPo),e(Ze,tb),e(tb,EPo),e(tb,Yge),e(Yge,CPo),e(tb,wPo),e(tb,Kge),e(Kge,APo),e(Ze,LPo),M(ab,Ze,null),b(f,SOe,u),b(f,Ji,u),e(Ji,nb),e(nb,Zge),M(LL,Zge,null),e(Ji,yPo),e(Ji,ehe),e(ehe,xPo),b(f,ROe,u),b(f,Ro,u),M(yL,Ro,null),e(Ro,$Po),e(Ro,Yi),e(Yi,kPo),e(Yi,IO),e(IO,SPo),e(Yi,RPo),e(Yi,NO),e(NO,PPo),e(Yi,BPo),e(Ro,IPo),e(Ro,xL),e(xL,NPo),e(xL,ohe),e(ohe,qPo),e(xL,jPo),e(Ro,DPo),e(Ro,ct),M($L,ct,null),e(ct,GPo),e(ct,rhe),e(rhe,OPo),e(ct,VPo),e(ct,Ki),e(Ki,XPo),e(Ki,the),e(the,zPo),e(Ki,WPo),e(Ki,qO),e(qO,QPo),e(Ki,HPo),e(ct,UPo),M(sb,ct,null),e(Ro,JPo),e(Ro,eo),M(kL,eo,null),e(eo,YPo),e(eo,ahe),e(ahe,KPo),e(eo,ZPo),e(eo,qa),e(qa,eBo),e(qa,nhe),e(nhe,oBo),e(qa,rBo),e(qa,she),e(she,tBo),e(qa,aBo),e(qa,lhe),e(lhe,nBo),e(qa,sBo),e(eo,lBo),e(eo,pe),e(pe,lb),e(lb,ihe),e(ihe,iBo),e(lb,dBo),e(lb,jO),e(jO,cBo),e(lb,fBo),e(pe,mBo),e(pe,ib),e(ib,dhe),e(dhe,gBo),e(ib,hBo),e(ib,DO),e(DO,pBo),e(ib,_Bo),e(pe,uBo),e(pe,db),e(db,che),e(che,bBo),e(db,vBo),e(db,GO),e(GO,FBo),e(db,TBo),e(pe,MBo),e(pe,cb),e(cb,fhe),e(fhe,EBo),e(cb,CBo),e(cb,OO),e(OO,wBo),e(cb,ABo),e(pe,LBo),e(pe,fb),e(fb,mhe),e(mhe,yBo),e(fb,xBo),e(fb,VO),e(VO,$Bo),e(fb,kBo),e(pe,SBo),e(pe,mb),e(mb,ghe),e(ghe,RBo),e(mb,PBo),e(mb,XO),e(XO,BBo),e(mb,IBo),e(pe,NBo),e(pe,gb),e(gb,hhe),e(hhe,qBo),e(gb,jBo),e(gb,zO),e(zO,DBo),e(gb,GBo),e(pe,OBo),e(pe,hb),e(hb,phe),e(phe,VBo),e(hb,XBo),e(hb,WO),e(WO,zBo),e(hb,WBo),e(pe,QBo),e(pe,pb),e(pb,_he),e(_he,HBo),e(pb,UBo),e(pb,QO),e(QO,JBo),e(pb,YBo),e(pe,KBo),e(pe,_b),e(_b,uhe),e(uhe,ZBo),e(_b,eIo),e(_b,HO),e(HO,oIo),e(_b,rIo),e(pe,tIo),e(pe,ub),e(ub,bhe),e(bhe,aIo),e(ub,nIo),e(ub,UO),e(UO,sIo),e(ub,lIo),e(pe,iIo),e(pe,bb),e(bb,vhe),e(vhe,dIo),e(bb,cIo),e(bb,JO),e(JO,fIo),e(bb,mIo),e(pe,gIo),e(pe,vb),e(vb,Fhe),e(Fhe,hIo),e(vb,pIo),e(vb,YO),e(YO,_Io),e(vb,uIo),e(pe,bIo),e(pe,Fb),e(Fb,The),e(The,vIo),e(Fb,FIo),e(Fb,KO),e(KO,TIo),e(Fb,MIo),e(pe,EIo),e(pe,Tb),e(Tb,Mhe),e(Mhe,CIo),e(Tb,wIo),e(Tb,ZO),e(ZO,AIo),e(Tb,LIo),e(pe,yIo),e(pe,Mb),e(Mb,Ehe),e(Ehe,xIo),e(Mb,$Io),e(Mb,eV),e(eV,kIo),e(Mb,SIo),e(pe,RIo),e(pe,Eb),e(Eb,Che),e(Che,PIo),e(Eb,BIo),e(Eb,oV),e(oV,IIo),e(Eb,NIo),e(eo,qIo),e(eo,Cb),e(Cb,jIo),e(Cb,whe),e(whe,DIo),e(Cb,GIo),e(Cb,Ahe),e(Ahe,OIo),e(eo,VIo),M(wb,eo,null),b(f,POe,u),b(f,Zi,u),e(Zi,Ab),e(Ab,Lhe),M(SL,Lhe,null),e(Zi,XIo),e(Zi,yhe),e(yhe,zIo),b(f,BOe,u),b(f,Po,u),M(RL,Po,null),e(Po,WIo),e(Po,ed),e(ed,QIo),e(ed,rV),e(rV,HIo),e(ed,UIo),e(ed,tV),e(tV,JIo),e(ed,YIo),e(Po,KIo),e(Po,PL),e(PL,ZIo),e(PL,xhe),e(xhe,eNo),e(PL,oNo),e(Po,rNo),e(Po,ft),M(BL,ft,null),e(ft,tNo),e(ft,$he),e($he,aNo),e(ft,nNo),e(ft,od),e(od,sNo),e(od,khe),e(khe,lNo),e(od,iNo),e(od,aV),e(aV,dNo),e(od,cNo),e(ft,fNo),M(Lb,ft,null),e(Po,mNo),e(Po,oo),M(IL,oo,null),e(oo,gNo),e(oo,She),e(She,hNo),e(oo,pNo),e(oo,ja),e(ja,_No),e(ja,Rhe),e(Rhe,uNo),e(ja,bNo),e(ja,Phe),e(Phe,vNo),e(ja,FNo),e(ja,Bhe),e(Bhe,TNo),e(ja,MNo),e(oo,ENo),e(oo,N),e(N,yb),e(yb,Ihe),e(Ihe,CNo),e(yb,wNo),e(yb,nV),e(nV,ANo),e(yb,LNo),e(N,yNo),e(N,xb),e(xb,Nhe),e(Nhe,xNo),e(xb,$No),e(xb,sV),e(sV,kNo),e(xb,SNo),e(N,RNo),e(N,$b),e($b,qhe),e(qhe,PNo),e($b,BNo),e($b,lV),e(lV,INo),e($b,NNo),e(N,qNo),e(N,kb),e(kb,jhe),e(jhe,jNo),e(kb,DNo),e(kb,iV),e(iV,GNo),e(kb,ONo),e(N,VNo),e(N,Sb),e(Sb,Dhe),e(Dhe,XNo),e(Sb,zNo),e(Sb,dV),e(dV,WNo),e(Sb,QNo),e(N,HNo),e(N,Rb),e(Rb,Ghe),e(Ghe,UNo),e(Rb,JNo),e(Rb,cV),e(cV,YNo),e(Rb,KNo),e(N,ZNo),e(N,Pb),e(Pb,Ohe),e(Ohe,eqo),e(Pb,oqo),e(Pb,fV),e(fV,rqo),e(Pb,tqo),e(N,aqo),e(N,Bb),e(Bb,Vhe),e(Vhe,nqo),e(Bb,sqo),e(Bb,mV),e(mV,lqo),e(Bb,iqo),e(N,dqo),e(N,Ib),e(Ib,Xhe),e(Xhe,cqo),e(Ib,fqo),e(Ib,gV),e(gV,mqo),e(Ib,gqo),e(N,hqo),e(N,Nb),e(Nb,zhe),e(zhe,pqo),e(Nb,_qo),e(Nb,hV),e(hV,uqo),e(Nb,bqo),e(N,vqo),e(N,qb),e(qb,Whe),e(Whe,Fqo),e(qb,Tqo),e(qb,pV),e(pV,Mqo),e(qb,Eqo),e(N,Cqo),e(N,jb),e(jb,Qhe),e(Qhe,wqo),e(jb,Aqo),e(jb,_V),e(_V,Lqo),e(jb,yqo),e(N,xqo),e(N,Db),e(Db,Hhe),e(Hhe,$qo),e(Db,kqo),e(Db,uV),e(uV,Sqo),e(Db,Rqo),e(N,Pqo),e(N,Gb),e(Gb,Uhe),e(Uhe,Bqo),e(Gb,Iqo),e(Gb,bV),e(bV,Nqo),e(Gb,qqo),e(N,jqo),e(N,Ob),e(Ob,Jhe),e(Jhe,Dqo),e(Ob,Gqo),e(Ob,vV),e(vV,Oqo),e(Ob,Vqo),e(N,Xqo),e(N,Vb),e(Vb,Yhe),e(Yhe,zqo),e(Vb,Wqo),e(Vb,FV),e(FV,Qqo),e(Vb,Hqo),e(N,Uqo),e(N,Xb),e(Xb,Khe),e(Khe,Jqo),e(Xb,Yqo),e(Xb,TV),e(TV,Kqo),e(Xb,Zqo),e(N,ejo),e(N,zb),e(zb,Zhe),e(Zhe,ojo),e(zb,rjo),e(zb,MV),e(MV,tjo),e(zb,ajo),e(N,njo),e(N,Wb),e(Wb,epe),e(epe,sjo),e(Wb,ljo),e(Wb,EV),e(EV,ijo),e(Wb,djo),e(N,cjo),e(N,Qb),e(Qb,ope),e(ope,fjo),e(Qb,mjo),e(Qb,CV),e(CV,gjo),e(Qb,hjo),e(N,pjo),e(N,Hb),e(Hb,rpe),e(rpe,_jo),e(Hb,ujo),e(Hb,wV),e(wV,bjo),e(Hb,vjo),e(N,Fjo),e(N,Ub),e(Ub,tpe),e(tpe,Tjo),e(Ub,Mjo),e(Ub,AV),e(AV,Ejo),e(Ub,Cjo),e(N,wjo),e(N,Jb),e(Jb,ape),e(ape,Ajo),e(Jb,Ljo),e(Jb,LV),e(LV,yjo),e(Jb,xjo),e(N,$jo),e(N,Yb),e(Yb,npe),e(npe,kjo),e(Yb,Sjo),e(Yb,yV),e(yV,Rjo),e(Yb,Pjo),e(N,Bjo),e(N,Kb),e(Kb,spe),e(spe,Ijo),e(Kb,Njo),e(Kb,xV),e(xV,qjo),e(Kb,jjo),e(N,Djo),e(N,Zb),e(Zb,lpe),e(lpe,Gjo),e(Zb,Ojo),e(Zb,$V),e($V,Vjo),e(Zb,Xjo),e(N,zjo),e(N,ev),e(ev,ipe),e(ipe,Wjo),e(ev,Qjo),e(ev,kV),e(kV,Hjo),e(ev,Ujo),e(N,Jjo),e(N,ov),e(ov,dpe),e(dpe,Yjo),e(ov,Kjo),e(ov,SV),e(SV,Zjo),e(ov,eDo),e(N,oDo),e(N,rv),e(rv,cpe),e(cpe,rDo),e(rv,tDo),e(rv,RV),e(RV,aDo),e(rv,nDo),e(N,sDo),e(N,tv),e(tv,fpe),e(fpe,lDo),e(tv,iDo),e(tv,PV),e(PV,dDo),e(tv,cDo),e(N,fDo),e(N,av),e(av,mpe),e(mpe,mDo),e(av,gDo),e(av,BV),e(BV,hDo),e(av,pDo),e(N,_Do),e(N,nv),e(nv,gpe),e(gpe,uDo),e(nv,bDo),e(nv,IV),e(IV,vDo),e(nv,FDo),e(N,TDo),e(N,sv),e(sv,hpe),e(hpe,MDo),e(sv,EDo),e(sv,NV),e(NV,CDo),e(sv,wDo),e(N,ADo),e(N,lv),e(lv,ppe),e(ppe,LDo),e(lv,yDo),e(lv,qV),e(qV,xDo),e(lv,$Do),e(N,kDo),e(N,iv),e(iv,_pe),e(_pe,SDo),e(iv,RDo),e(iv,jV),e(jV,PDo),e(iv,BDo),e(N,IDo),e(N,dv),e(dv,upe),e(upe,NDo),e(dv,qDo),e(dv,DV),e(DV,jDo),e(dv,DDo),e(N,GDo),e(N,cv),e(cv,bpe),e(bpe,ODo),e(cv,VDo),e(cv,GV),e(GV,XDo),e(cv,zDo),e(N,WDo),e(N,fv),e(fv,vpe),e(vpe,QDo),e(fv,HDo),e(fv,OV),e(OV,UDo),e(fv,JDo),e(N,YDo),e(N,mv),e(mv,Fpe),e(Fpe,KDo),e(mv,ZDo),e(mv,VV),e(VV,eGo),e(mv,oGo),e(N,rGo),e(N,gv),e(gv,Tpe),e(Tpe,tGo),e(gv,aGo),e(gv,XV),e(XV,nGo),e(gv,sGo),e(N,lGo),e(N,hv),e(hv,Mpe),e(Mpe,iGo),e(hv,dGo),e(hv,zV),e(zV,cGo),e(hv,fGo),e(N,mGo),e(N,pv),e(pv,Epe),e(Epe,gGo),e(pv,hGo),e(pv,WV),e(WV,pGo),e(pv,_Go),e(N,uGo),e(N,_v),e(_v,Cpe),e(Cpe,bGo),e(_v,vGo),e(_v,QV),e(QV,FGo),e(_v,TGo),e(N,MGo),e(N,uv),e(uv,wpe),e(wpe,EGo),e(uv,CGo),e(uv,HV),e(HV,wGo),e(uv,AGo),e(N,LGo),e(N,bv),e(bv,Ape),e(Ape,yGo),e(bv,xGo),e(bv,UV),e(UV,$Go),e(bv,kGo),e(N,SGo),e(N,vv),e(vv,Lpe),e(Lpe,RGo),e(vv,PGo),e(vv,JV),e(JV,BGo),e(vv,IGo),e(N,NGo),e(N,Fv),e(Fv,ype),e(ype,qGo),e(Fv,jGo),e(Fv,YV),e(YV,DGo),e(Fv,GGo),e(N,OGo),e(N,Tv),e(Tv,xpe),e(xpe,VGo),e(Tv,XGo),e(Tv,KV),e(KV,zGo),e(Tv,WGo),e(N,QGo),e(N,Mv),e(Mv,$pe),e($pe,HGo),e(Mv,UGo),e(Mv,ZV),e(ZV,JGo),e(Mv,YGo),e(oo,KGo),e(oo,Ev),e(Ev,ZGo),e(Ev,kpe),e(kpe,eOo),e(Ev,oOo),e(Ev,Spe),e(Spe,rOo),e(oo,tOo),M(Cv,oo,null),b(f,IOe,u),b(f,rd,u),e(rd,wv),e(wv,Rpe),M(NL,Rpe,null),e(rd,aOo),e(rd,Ppe),e(Ppe,nOo),b(f,NOe,u),b(f,Bo,u),M(qL,Bo,null),e(Bo,sOo),e(Bo,td),e(td,lOo),e(td,eX),e(eX,iOo),e(td,dOo),e(td,oX),e(oX,cOo),e(td,fOo),e(Bo,mOo),e(Bo,jL),e(jL,gOo),e(jL,Bpe),e(Bpe,hOo),e(jL,pOo),e(Bo,_Oo),e(Bo,mt),M(DL,mt,null),e(mt,uOo),e(mt,Ipe),e(Ipe,bOo),e(mt,vOo),e(mt,ad),e(ad,FOo),e(ad,Npe),e(Npe,TOo),e(ad,MOo),e(ad,rX),e(rX,EOo),e(ad,COo),e(mt,wOo),M(Av,mt,null),e(Bo,AOo),e(Bo,ro),M(GL,ro,null),e(ro,LOo),e(ro,qpe),e(qpe,yOo),e(ro,xOo),e(ro,Da),e(Da,$Oo),e(Da,jpe),e(jpe,kOo),e(Da,SOo),e(Da,Dpe),e(Dpe,ROo),e(Da,POo),e(Da,Gpe),e(Gpe,BOo),e(Da,IOo),e(ro,NOo),e(ro,Z),e(Z,Lv),e(Lv,Ope),e(Ope,qOo),e(Lv,jOo),e(Lv,tX),e(tX,DOo),e(Lv,GOo),e(Z,OOo),e(Z,yv),e(yv,Vpe),e(Vpe,VOo),e(yv,XOo),e(yv,aX),e(aX,zOo),e(yv,WOo),e(Z,QOo),e(Z,xv),e(xv,Xpe),e(Xpe,HOo),e(xv,UOo),e(xv,nX),e(nX,JOo),e(xv,YOo),e(Z,KOo),e(Z,$v),e($v,zpe),e(zpe,ZOo),e($v,eVo),e($v,sX),e(sX,oVo),e($v,rVo),e(Z,tVo),e(Z,kv),e(kv,Wpe),e(Wpe,aVo),e(kv,nVo),e(kv,lX),e(lX,sVo),e(kv,lVo),e(Z,iVo),e(Z,Sv),e(Sv,Qpe),e(Qpe,dVo),e(Sv,cVo),e(Sv,iX),e(iX,fVo),e(Sv,mVo),e(Z,gVo),e(Z,Rv),e(Rv,Hpe),e(Hpe,hVo),e(Rv,pVo),e(Rv,dX),e(dX,_Vo),e(Rv,uVo),e(Z,bVo),e(Z,Pv),e(Pv,Upe),e(Upe,vVo),e(Pv,FVo),e(Pv,cX),e(cX,TVo),e(Pv,MVo),e(Z,EVo),e(Z,Bv),e(Bv,Jpe),e(Jpe,CVo),e(Bv,wVo),e(Bv,fX),e(fX,AVo),e(Bv,LVo),e(Z,yVo),e(Z,Iv),e(Iv,Ype),e(Ype,xVo),e(Iv,$Vo),e(Iv,mX),e(mX,kVo),e(Iv,SVo),e(Z,RVo),e(Z,Nv),e(Nv,Kpe),e(Kpe,PVo),e(Nv,BVo),e(Nv,gX),e(gX,IVo),e(Nv,NVo),e(Z,qVo),e(Z,qv),e(qv,Zpe),e(Zpe,jVo),e(qv,DVo),e(qv,hX),e(hX,GVo),e(qv,OVo),e(Z,VVo),e(Z,jv),e(jv,e_e),e(e_e,XVo),e(jv,zVo),e(jv,pX),e(pX,WVo),e(jv,QVo),e(Z,HVo),e(Z,Dv),e(Dv,o_e),e(o_e,UVo),e(Dv,JVo),e(Dv,_X),e(_X,YVo),e(Dv,KVo),e(Z,ZVo),e(Z,Gv),e(Gv,r_e),e(r_e,eXo),e(Gv,oXo),e(Gv,uX),e(uX,rXo),e(Gv,tXo),e(Z,aXo),e(Z,Ov),e(Ov,t_e),e(t_e,nXo),e(Ov,sXo),e(Ov,bX),e(bX,lXo),e(Ov,iXo),e(Z,dXo),e(Z,Vv),e(Vv,a_e),e(a_e,cXo),e(Vv,fXo),e(Vv,vX),e(vX,mXo),e(Vv,gXo),e(Z,hXo),e(Z,Xv),e(Xv,n_e),e(n_e,pXo),e(Xv,_Xo),e(Xv,FX),e(FX,uXo),e(Xv,bXo),e(Z,vXo),e(Z,zv),e(zv,s_e),e(s_e,FXo),e(zv,TXo),e(zv,TX),e(TX,MXo),e(zv,EXo),e(Z,CXo),e(Z,Wv),e(Wv,l_e),e(l_e,wXo),e(Wv,AXo),e(Wv,MX),e(MX,LXo),e(Wv,yXo),e(Z,xXo),e(Z,Qv),e(Qv,i_e),e(i_e,$Xo),e(Qv,kXo),e(Qv,EX),e(EX,SXo),e(Qv,RXo),e(Z,PXo),e(Z,Hv),e(Hv,d_e),e(d_e,BXo),e(Hv,IXo),e(Hv,CX),e(CX,NXo),e(Hv,qXo),e(Z,jXo),e(Z,Uv),e(Uv,c_e),e(c_e,DXo),e(Uv,GXo),e(Uv,wX),e(wX,OXo),e(Uv,VXo),e(Z,XXo),e(Z,Jv),e(Jv,f_e),e(f_e,zXo),e(Jv,WXo),e(Jv,AX),e(AX,QXo),e(Jv,HXo),e(Z,UXo),e(Z,Yv),e(Yv,m_e),e(m_e,JXo),e(Yv,YXo),e(Yv,LX),e(LX,KXo),e(Yv,ZXo),e(Z,ezo),e(Z,Kv),e(Kv,g_e),e(g_e,ozo),e(Kv,rzo),e(Kv,yX),e(yX,tzo),e(Kv,azo),e(Z,nzo),e(Z,Zv),e(Zv,h_e),e(h_e,szo),e(Zv,lzo),e(Zv,xX),e(xX,izo),e(Zv,dzo),e(Z,czo),e(Z,e0),e(e0,p_e),e(p_e,fzo),e(e0,mzo),e(e0,$X),e($X,gzo),e(e0,hzo),e(Z,pzo),e(Z,o0),e(o0,__e),e(__e,_zo),e(o0,uzo),e(o0,kX),e(kX,bzo),e(o0,vzo),e(Z,Fzo),e(Z,r0),e(r0,u_e),e(u_e,Tzo),e(r0,Mzo),e(r0,SX),e(SX,Ezo),e(r0,Czo),e(ro,wzo),e(ro,t0),e(t0,Azo),e(t0,b_e),e(b_e,Lzo),e(t0,yzo),e(t0,v_e),e(v_e,xzo),e(ro,$zo),M(a0,ro,null),b(f,qOe,u),b(f,nd,u),e(nd,n0),e(n0,F_e),M(OL,F_e,null),e(nd,kzo),e(nd,T_e),e(T_e,Szo),b(f,jOe,u),b(f,Io,u),M(VL,Io,null),e(Io,Rzo),e(Io,sd),e(sd,Pzo),e(sd,RX),e(RX,Bzo),e(sd,Izo),e(sd,PX),e(PX,Nzo),e(sd,qzo),e(Io,jzo),e(Io,XL),e(XL,Dzo),e(XL,M_e),e(M_e,Gzo),e(XL,Ozo),e(Io,Vzo),e(Io,gt),M(zL,gt,null),e(gt,Xzo),e(gt,E_e),e(E_e,zzo),e(gt,Wzo),e(gt,ld),e(ld,Qzo),e(ld,C_e),e(C_e,Hzo),e(ld,Uzo),e(ld,BX),e(BX,Jzo),e(ld,Yzo),e(gt,Kzo),M(s0,gt,null),e(Io,Zzo),e(Io,to),M(WL,to,null),e(to,eWo),e(to,w_e),e(w_e,oWo),e(to,rWo),e(to,Ga),e(Ga,tWo),e(Ga,A_e),e(A_e,aWo),e(Ga,nWo),e(Ga,L_e),e(L_e,sWo),e(Ga,lWo),e(Ga,y_e),e(y_e,iWo),e(Ga,dWo),e(to,cWo),e(to,No),e(No,l0),e(l0,x_e),e(x_e,fWo),e(l0,mWo),e(l0,IX),e(IX,gWo),e(l0,hWo),e(No,pWo),e(No,i0),e(i0,$_e),e($_e,_Wo),e(i0,uWo),e(i0,NX),e(NX,bWo),e(i0,vWo),e(No,FWo),e(No,d0),e(d0,k_e),e(k_e,TWo),e(d0,MWo),e(d0,qX),e(qX,EWo),e(d0,CWo),e(No,wWo),e(No,c0),e(c0,S_e),e(S_e,AWo),e(c0,LWo),e(c0,jX),e(jX,yWo),e(c0,xWo),e(No,$Wo),e(No,f0),e(f0,R_e),e(R_e,kWo),e(f0,SWo),e(f0,DX),e(DX,RWo),e(f0,PWo),e(No,BWo),e(No,m0),e(m0,P_e),e(P_e,IWo),e(m0,NWo),e(m0,GX),e(GX,qWo),e(m0,jWo),e(to,DWo),e(to,g0),e(g0,GWo),e(g0,B_e),e(B_e,OWo),e(g0,VWo),e(g0,I_e),e(I_e,XWo),e(to,zWo),M(h0,to,null),b(f,DOe,u),b(f,id,u),e(id,p0),e(p0,N_e),M(QL,N_e,null),e(id,WWo),e(id,q_e),e(q_e,QWo),b(f,GOe,u),b(f,qo,u),M(HL,qo,null),e(qo,HWo),e(qo,dd),e(dd,UWo),e(dd,OX),e(OX,JWo),e(dd,YWo),e(dd,VX),e(VX,KWo),e(dd,ZWo),e(qo,eQo),e(qo,UL),e(UL,oQo),e(UL,j_e),e(j_e,rQo),e(UL,tQo),e(qo,aQo),e(qo,ht),M(JL,ht,null),e(ht,nQo),e(ht,D_e),e(D_e,sQo),e(ht,lQo),e(ht,cd),e(cd,iQo),e(cd,G_e),e(G_e,dQo),e(cd,cQo),e(cd,XX),e(XX,fQo),e(cd,mQo),e(ht,gQo),M(_0,ht,null),e(qo,hQo),e(qo,ao),M(YL,ao,null),e(ao,pQo),e(ao,O_e),e(O_e,_Qo),e(ao,uQo),e(ao,Oa),e(Oa,bQo),e(Oa,V_e),e(V_e,vQo),e(Oa,FQo),e(Oa,X_e),e(X_e,TQo),e(Oa,MQo),e(Oa,z_e),e(z_e,EQo),e(Oa,CQo),e(ao,wQo),e(ao,H),e(H,u0),e(u0,W_e),e(W_e,AQo),e(u0,LQo),e(u0,zX),e(zX,yQo),e(u0,xQo),e(H,$Qo),e(H,b0),e(b0,Q_e),e(Q_e,kQo),e(b0,SQo),e(b0,WX),e(WX,RQo),e(b0,PQo),e(H,BQo),e(H,v0),e(v0,H_e),e(H_e,IQo),e(v0,NQo),e(v0,QX),e(QX,qQo),e(v0,jQo),e(H,DQo),e(H,F0),e(F0,U_e),e(U_e,GQo),e(F0,OQo),e(F0,HX),e(HX,VQo),e(F0,XQo),e(H,zQo),e(H,T0),e(T0,J_e),e(J_e,WQo),e(T0,QQo),e(T0,UX),e(UX,HQo),e(T0,UQo),e(H,JQo),e(H,M0),e(M0,Y_e),e(Y_e,YQo),e(M0,KQo),e(M0,JX),e(JX,ZQo),e(M0,eHo),e(H,oHo),e(H,E0),e(E0,K_e),e(K_e,rHo),e(E0,tHo),e(E0,YX),e(YX,aHo),e(E0,nHo),e(H,sHo),e(H,C0),e(C0,Z_e),e(Z_e,lHo),e(C0,iHo),e(C0,KX),e(KX,dHo),e(C0,cHo),e(H,fHo),e(H,w0),e(w0,eue),e(eue,mHo),e(w0,gHo),e(w0,ZX),e(ZX,hHo),e(w0,pHo),e(H,_Ho),e(H,A0),e(A0,oue),e(oue,uHo),e(A0,bHo),e(A0,ez),e(ez,vHo),e(A0,FHo),e(H,THo),e(H,L0),e(L0,rue),e(rue,MHo),e(L0,EHo),e(L0,oz),e(oz,CHo),e(L0,wHo),e(H,AHo),e(H,y0),e(y0,tue),e(tue,LHo),e(y0,yHo),e(y0,rz),e(rz,xHo),e(y0,$Ho),e(H,kHo),e(H,x0),e(x0,aue),e(aue,SHo),e(x0,RHo),e(x0,tz),e(tz,PHo),e(x0,BHo),e(H,IHo),e(H,$0),e($0,nue),e(nue,NHo),e($0,qHo),e($0,az),e(az,jHo),e($0,DHo),e(H,GHo),e(H,k0),e(k0,sue),e(sue,OHo),e(k0,VHo),e(k0,nz),e(nz,XHo),e(k0,zHo),e(H,WHo),e(H,S0),e(S0,lue),e(lue,QHo),e(S0,HHo),e(S0,sz),e(sz,UHo),e(S0,JHo),e(H,YHo),e(H,R0),e(R0,iue),e(iue,KHo),e(R0,ZHo),e(R0,lz),e(lz,eUo),e(R0,oUo),e(H,rUo),e(H,P0),e(P0,due),e(due,tUo),e(P0,aUo),e(P0,iz),e(iz,nUo),e(P0,sUo),e(H,lUo),e(H,B0),e(B0,cue),e(cue,iUo),e(B0,dUo),e(B0,dz),e(dz,cUo),e(B0,fUo),e(H,mUo),e(H,I0),e(I0,fue),e(fue,gUo),e(I0,hUo),e(I0,cz),e(cz,pUo),e(I0,_Uo),e(H,uUo),e(H,N0),e(N0,mue),e(mue,bUo),e(N0,vUo),e(N0,fz),e(fz,FUo),e(N0,TUo),e(H,MUo),e(H,q0),e(q0,gue),e(gue,EUo),e(q0,CUo),e(q0,mz),e(mz,wUo),e(q0,AUo),e(H,LUo),e(H,j0),e(j0,hue),e(hue,yUo),e(j0,xUo),e(j0,gz),e(gz,$Uo),e(j0,kUo),e(H,SUo),e(H,D0),e(D0,pue),e(pue,RUo),e(D0,PUo),e(D0,hz),e(hz,BUo),e(D0,IUo),e(H,NUo),e(H,G0),e(G0,_ue),e(_ue,qUo),e(G0,jUo),e(G0,pz),e(pz,DUo),e(G0,GUo),e(H,OUo),e(H,O0),e(O0,uue),e(uue,VUo),e(O0,XUo),e(O0,_z),e(_z,zUo),e(O0,WUo),e(H,QUo),e(H,V0),e(V0,bue),e(bue,HUo),e(V0,UUo),e(V0,uz),e(uz,JUo),e(V0,YUo),e(H,KUo),e(H,X0),e(X0,vue),e(vue,ZUo),e(X0,eJo),e(X0,bz),e(bz,oJo),e(X0,rJo),e(H,tJo),e(H,z0),e(z0,Fue),e(Fue,aJo),e(z0,nJo),e(z0,vz),e(vz,sJo),e(z0,lJo),e(H,iJo),e(H,W0),e(W0,Tue),e(Tue,dJo),e(W0,cJo),e(W0,Fz),e(Fz,fJo),e(W0,mJo),e(H,gJo),e(H,Q0),e(Q0,Mue),e(Mue,hJo),e(Q0,pJo),e(Q0,Tz),e(Tz,_Jo),e(Q0,uJo),e(H,bJo),e(H,H0),e(H0,Eue),e(Eue,vJo),e(H0,FJo),e(H0,Mz),e(Mz,TJo),e(H0,MJo),e(H,EJo),e(H,U0),e(U0,Cue),e(Cue,CJo),e(U0,wJo),e(U0,Ez),e(Ez,AJo),e(U0,LJo),e(H,yJo),e(H,J0),e(J0,wue),e(wue,xJo),e(J0,$Jo),e(J0,Cz),e(Cz,kJo),e(J0,SJo),e(H,RJo),e(H,Y0),e(Y0,Aue),e(Aue,PJo),e(Y0,BJo),e(Y0,wz),e(wz,IJo),e(Y0,NJo),e(H,qJo),e(H,K0),e(K0,Lue),e(Lue,jJo),e(K0,DJo),e(K0,Az),e(Az,GJo),e(K0,OJo),e(ao,VJo),e(ao,Z0),e(Z0,XJo),e(Z0,yue),e(yue,zJo),e(Z0,WJo),e(Z0,xue),e(xue,QJo),e(ao,HJo),M(eF,ao,null),b(f,OOe,u),b(f,fd,u),e(fd,oF),e(oF,$ue),M(KL,$ue,null),e(fd,UJo),e(fd,kue),e(kue,JJo),b(f,VOe,u),b(f,jo,u),M(ZL,jo,null),e(jo,YJo),e(jo,md),e(md,KJo),e(md,Lz),e(Lz,ZJo),e(md,eYo),e(md,yz),e(yz,oYo),e(md,rYo),e(jo,tYo),e(jo,ey),e(ey,aYo),e(ey,Sue),e(Sue,nYo),e(ey,sYo),e(jo,lYo),e(jo,pt),M(oy,pt,null),e(pt,iYo),e(pt,Rue),e(Rue,dYo),e(pt,cYo),e(pt,gd),e(gd,fYo),e(gd,Pue),e(Pue,mYo),e(gd,gYo),e(gd,xz),e(xz,hYo),e(gd,pYo),e(pt,_Yo),M(rF,pt,null),e(jo,uYo),e(jo,no),M(ry,no,null),e(no,bYo),e(no,Bue),e(Bue,vYo),e(no,FYo),e(no,Va),e(Va,TYo),e(Va,Iue),e(Iue,MYo),e(Va,EYo),e(Va,Nue),e(Nue,CYo),e(Va,wYo),e(Va,que),e(que,AYo),e(Va,LYo),e(no,yYo),e(no,V),e(V,tF),e(tF,jue),e(jue,xYo),e(tF,$Yo),e(tF,$z),e($z,kYo),e(tF,SYo),e(V,RYo),e(V,aF),e(aF,Due),e(Due,PYo),e(aF,BYo),e(aF,kz),e(kz,IYo),e(aF,NYo),e(V,qYo),e(V,nF),e(nF,Gue),e(Gue,jYo),e(nF,DYo),e(nF,Sz),e(Sz,GYo),e(nF,OYo),e(V,VYo),e(V,sF),e(sF,Oue),e(Oue,XYo),e(sF,zYo),e(sF,Rz),e(Rz,WYo),e(sF,QYo),e(V,HYo),e(V,lF),e(lF,Vue),e(Vue,UYo),e(lF,JYo),e(lF,Pz),e(Pz,YYo),e(lF,KYo),e(V,ZYo),e(V,iF),e(iF,Xue),e(Xue,eKo),e(iF,oKo),e(iF,Bz),e(Bz,rKo),e(iF,tKo),e(V,aKo),e(V,dF),e(dF,zue),e(zue,nKo),e(dF,sKo),e(dF,Iz),e(Iz,lKo),e(dF,iKo),e(V,dKo),e(V,cF),e(cF,Wue),e(Wue,cKo),e(cF,fKo),e(cF,Nz),e(Nz,mKo),e(cF,gKo),e(V,hKo),e(V,fF),e(fF,Que),e(Que,pKo),e(fF,_Ko),e(fF,qz),e(qz,uKo),e(fF,bKo),e(V,vKo),e(V,mF),e(mF,Hue),e(Hue,FKo),e(mF,TKo),e(mF,jz),e(jz,MKo),e(mF,EKo),e(V,CKo),e(V,gF),e(gF,Uue),e(Uue,wKo),e(gF,AKo),e(gF,Dz),e(Dz,LKo),e(gF,yKo),e(V,xKo),e(V,hF),e(hF,Jue),e(Jue,$Ko),e(hF,kKo),e(hF,Gz),e(Gz,SKo),e(hF,RKo),e(V,PKo),e(V,pF),e(pF,Yue),e(Yue,BKo),e(pF,IKo),e(pF,Oz),e(Oz,NKo),e(pF,qKo),e(V,jKo),e(V,_F),e(_F,Kue),e(Kue,DKo),e(_F,GKo),e(_F,Vz),e(Vz,OKo),e(_F,VKo),e(V,XKo),e(V,uF),e(uF,Zue),e(Zue,zKo),e(uF,WKo),e(uF,Xz),e(Xz,QKo),e(uF,HKo),e(V,UKo),e(V,bF),e(bF,e1e),e(e1e,JKo),e(bF,YKo),e(bF,zz),e(zz,KKo),e(bF,ZKo),e(V,eZo),e(V,vF),e(vF,o1e),e(o1e,oZo),e(vF,rZo),e(vF,Wz),e(Wz,tZo),e(vF,aZo),e(V,nZo),e(V,FF),e(FF,r1e),e(r1e,sZo),e(FF,lZo),e(FF,Qz),e(Qz,iZo),e(FF,dZo),e(V,cZo),e(V,TF),e(TF,t1e),e(t1e,fZo),e(TF,mZo),e(TF,Hz),e(Hz,gZo),e(TF,hZo),e(V,pZo),e(V,MF),e(MF,a1e),e(a1e,_Zo),e(MF,uZo),e(MF,Uz),e(Uz,bZo),e(MF,vZo),e(V,FZo),e(V,EF),e(EF,n1e),e(n1e,TZo),e(EF,MZo),e(EF,Jz),e(Jz,EZo),e(EF,CZo),e(V,wZo),e(V,CF),e(CF,s1e),e(s1e,AZo),e(CF,LZo),e(CF,Yz),e(Yz,yZo),e(CF,xZo),e(V,$Zo),e(V,wF),e(wF,l1e),e(l1e,kZo),e(wF,SZo),e(wF,Kz),e(Kz,RZo),e(wF,PZo),e(V,BZo),e(V,AF),e(AF,i1e),e(i1e,IZo),e(AF,NZo),e(AF,Zz),e(Zz,qZo),e(AF,jZo),e(V,DZo),e(V,LF),e(LF,d1e),e(d1e,GZo),e(LF,OZo),e(LF,eW),e(eW,VZo),e(LF,XZo),e(V,zZo),e(V,yF),e(yF,c1e),e(c1e,WZo),e(yF,QZo),e(yF,oW),e(oW,HZo),e(yF,UZo),e(V,JZo),e(V,xF),e(xF,f1e),e(f1e,YZo),e(xF,KZo),e(xF,rW),e(rW,ZZo),e(xF,eer),e(V,oer),e(V,$F),e($F,m1e),e(m1e,rer),e($F,ter),e($F,tW),e(tW,aer),e($F,ner),e(V,ser),e(V,kF),e(kF,g1e),e(g1e,ler),e(kF,ier),e(kF,aW),e(aW,der),e(kF,cer),e(V,fer),e(V,SF),e(SF,h1e),e(h1e,mer),e(SF,ger),e(SF,nW),e(nW,her),e(SF,per),e(V,_er),e(V,RF),e(RF,p1e),e(p1e,uer),e(RF,ber),e(RF,sW),e(sW,ver),e(RF,Fer),e(V,Ter),e(V,PF),e(PF,_1e),e(_1e,Mer),e(PF,Eer),e(PF,lW),e(lW,Cer),e(PF,wer),e(V,Aer),e(V,BF),e(BF,u1e),e(u1e,Ler),e(BF,yer),e(BF,iW),e(iW,xer),e(BF,$er),e(V,ker),e(V,IF),e(IF,b1e),e(b1e,Ser),e(IF,Rer),e(IF,dW),e(dW,Per),e(IF,Ber),e(V,Ier),e(V,NF),e(NF,v1e),e(v1e,Ner),e(NF,qer),e(NF,cW),e(cW,jer),e(NF,Der),e(V,Ger),e(V,qF),e(qF,F1e),e(F1e,Oer),e(qF,Ver),e(qF,fW),e(fW,Xer),e(qF,zer),e(V,Wer),e(V,jF),e(jF,T1e),e(T1e,Qer),e(jF,Her),e(jF,mW),e(mW,Uer),e(jF,Jer),e(V,Yer),e(V,DF),e(DF,M1e),e(M1e,Ker),e(DF,Zer),e(DF,gW),e(gW,eor),e(DF,oor),e(V,ror),e(V,GF),e(GF,E1e),e(E1e,tor),e(GF,aor),e(GF,hW),e(hW,nor),e(GF,sor),e(V,lor),e(V,OF),e(OF,C1e),e(C1e,ior),e(OF,dor),e(OF,pW),e(pW,cor),e(OF,mor),e(V,gor),e(V,VF),e(VF,w1e),e(w1e,hor),e(VF,por),e(VF,_W),e(_W,_or),e(VF,uor),e(no,bor),e(no,XF),e(XF,vor),e(XF,A1e),e(A1e,For),e(XF,Tor),e(XF,L1e),e(L1e,Mor),e(no,Eor),M(zF,no,null),b(f,XOe,u),b(f,hd,u),e(hd,WF),e(WF,y1e),M(ty,y1e,null),e(hd,Cor),e(hd,x1e),e(x1e,wor),b(f,zOe,u),b(f,Do,u),M(ay,Do,null),e(Do,Aor),e(Do,pd),e(pd,Lor),e(pd,uW),e(uW,yor),e(pd,xor),e(pd,bW),e(bW,$or),e(pd,kor),e(Do,Sor),e(Do,ny),e(ny,Ror),e(ny,$1e),e($1e,Por),e(ny,Bor),e(Do,Ior),e(Do,_t),M(sy,_t,null),e(_t,Nor),e(_t,k1e),e(k1e,qor),e(_t,jor),e(_t,_d),e(_d,Dor),e(_d,S1e),e(S1e,Gor),e(_d,Oor),e(_d,vW),e(vW,Vor),e(_d,Xor),e(_t,zor),M(QF,_t,null),e(Do,Wor),e(Do,so),M(ly,so,null),e(so,Qor),e(so,R1e),e(R1e,Hor),e(so,Uor),e(so,Xa),e(Xa,Jor),e(Xa,P1e),e(P1e,Yor),e(Xa,Kor),e(Xa,B1e),e(B1e,Zor),e(Xa,err),e(Xa,I1e),e(I1e,orr),e(Xa,rrr),e(so,trr),e(so,N1e),e(N1e,HF),e(HF,q1e),e(q1e,arr),e(HF,nrr),e(HF,FW),e(FW,srr),e(HF,lrr),e(so,irr),e(so,UF),e(UF,drr),e(UF,j1e),e(j1e,crr),e(UF,frr),e(UF,D1e),e(D1e,mrr),e(so,grr),M(JF,so,null),b(f,WOe,u),b(f,ud,u),e(ud,YF),e(YF,G1e),M(iy,G1e,null),e(ud,hrr),e(ud,O1e),e(O1e,prr),b(f,QOe,u),b(f,Go,u),M(dy,Go,null),e(Go,_rr),e(Go,bd),e(bd,urr),e(bd,TW),e(TW,brr),e(bd,vrr),e(bd,MW),e(MW,Frr),e(bd,Trr),e(Go,Mrr),e(Go,cy),e(cy,Err),e(cy,V1e),e(V1e,Crr),e(cy,wrr),e(Go,Arr),e(Go,ut),M(fy,ut,null),e(ut,Lrr),e(ut,X1e),e(X1e,yrr),e(ut,xrr),e(ut,vd),e(vd,$rr),e(vd,z1e),e(z1e,krr),e(vd,Srr),e(vd,EW),e(EW,Rrr),e(vd,Prr),e(ut,Brr),M(KF,ut,null),e(Go,Irr),e(Go,lo),M(my,lo,null),e(lo,Nrr),e(lo,W1e),e(W1e,qrr),e(lo,jrr),e(lo,za),e(za,Drr),e(za,Q1e),e(Q1e,Grr),e(za,Orr),e(za,H1e),e(H1e,Vrr),e(za,Xrr),e(za,U1e),e(U1e,zrr),e(za,Wrr),e(lo,Qrr),e(lo,Fe),e(Fe,ZF),e(ZF,J1e),e(J1e,Hrr),e(ZF,Urr),e(ZF,CW),e(CW,Jrr),e(ZF,Yrr),e(Fe,Krr),e(Fe,e6),e(e6,Y1e),e(Y1e,Zrr),e(e6,etr),e(e6,wW),e(wW,otr),e(e6,rtr),e(Fe,ttr),e(Fe,o6),e(o6,K1e),e(K1e,atr),e(o6,ntr),e(o6,AW),e(AW,str),e(o6,ltr),e(Fe,itr),e(Fe,r6),e(r6,Z1e),e(Z1e,dtr),e(r6,ctr),e(r6,LW),e(LW,ftr),e(r6,mtr),e(Fe,gtr),e(Fe,zs),e(zs,e2e),e(e2e,htr),e(zs,ptr),e(zs,yW),e(yW,_tr),e(zs,utr),e(zs,xW),e(xW,btr),e(zs,vtr),e(Fe,Ftr),e(Fe,t6),e(t6,o2e),e(o2e,Ttr),e(t6,Mtr),e(t6,$W),e($W,Etr),e(t6,Ctr),e(Fe,wtr),e(Fe,Ws),e(Ws,r2e),e(r2e,Atr),e(Ws,Ltr),e(Ws,kW),e(kW,ytr),e(Ws,xtr),e(Ws,SW),e(SW,$tr),e(Ws,ktr),e(Fe,Str),e(Fe,bt),e(bt,t2e),e(t2e,Rtr),e(bt,Ptr),e(bt,RW),e(RW,Btr),e(bt,Itr),e(bt,PW),e(PW,Ntr),e(bt,qtr),e(bt,BW),e(BW,jtr),e(bt,Dtr),e(Fe,Gtr),e(Fe,a6),e(a6,a2e),e(a2e,Otr),e(a6,Vtr),e(a6,IW),e(IW,Xtr),e(a6,ztr),e(Fe,Wtr),e(Fe,n6),e(n6,n2e),e(n2e,Qtr),e(n6,Htr),e(n6,NW),e(NW,Utr),e(n6,Jtr),e(Fe,Ytr),e(Fe,s6),e(s6,s2e),e(s2e,Ktr),e(s6,Ztr),e(s6,qW),e(qW,ear),e(s6,oar),e(Fe,rar),e(Fe,l6),e(l6,l2e),e(l2e,tar),e(l6,aar),e(l6,jW),e(jW,nar),e(l6,sar),e(Fe,lar),e(Fe,i6),e(i6,i2e),e(i2e,iar),e(i6,dar),e(i6,DW),e(DW,car),e(i6,far),e(Fe,mar),e(Fe,d6),e(d6,d2e),e(d2e,gar),e(d6,har),e(d6,GW),e(GW,par),e(d6,_ar),e(Fe,uar),e(Fe,c6),e(c6,c2e),e(c2e,bar),e(c6,Far),e(c6,OW),e(OW,Tar),e(c6,Mar),e(lo,Ear),e(lo,f6),e(f6,Car),e(f6,f2e),e(f2e,war),e(f6,Aar),e(f6,m2e),e(m2e,Lar),e(lo,yar),M(m6,lo,null),b(f,HOe,u),b(f,Fd,u),e(Fd,g6),e(g6,g2e),M(gy,g2e,null),e(Fd,xar),e(Fd,h2e),e(h2e,$ar),b(f,UOe,u),b(f,Oo,u),M(hy,Oo,null),e(Oo,kar),e(Oo,Td),e(Td,Sar),e(Td,VW),e(VW,Rar),e(Td,Par),e(Td,XW),e(XW,Bar),e(Td,Iar),e(Oo,Nar),e(Oo,py),e(py,qar),e(py,p2e),e(p2e,jar),e(py,Dar),e(Oo,Gar),e(Oo,vt),M(_y,vt,null),e(vt,Oar),e(vt,_2e),e(_2e,Var),e(vt,Xar),e(vt,Md),e(Md,zar),e(Md,u2e),e(u2e,War),e(Md,Qar),e(Md,zW),e(zW,Har),e(Md,Uar),e(vt,Jar),M(h6,vt,null),e(Oo,Yar),e(Oo,io),M(uy,io,null),e(io,Kar),e(io,b2e),e(b2e,Zar),e(io,enr),e(io,Wa),e(Wa,onr),e(Wa,v2e),e(v2e,rnr),e(Wa,tnr),e(Wa,F2e),e(F2e,anr),e(Wa,nnr),e(Wa,T2e),e(T2e,snr),e(Wa,lnr),e(io,inr),e(io,M2e),e(M2e,p6),e(p6,E2e),e(E2e,dnr),e(p6,cnr),e(p6,WW),e(WW,fnr),e(p6,mnr),e(io,gnr),e(io,_6),e(_6,hnr),e(_6,C2e),e(C2e,pnr),e(_6,_nr),e(_6,w2e),e(w2e,unr),e(io,bnr),M(u6,io,null),b(f,JOe,u),b(f,Ed,u),e(Ed,b6),e(b6,A2e),M(by,A2e,null),e(Ed,vnr),e(Ed,L2e),e(L2e,Fnr),b(f,YOe,u),b(f,Vo,u),M(vy,Vo,null),e(Vo,Tnr),e(Vo,Cd),e(Cd,Mnr),e(Cd,QW),e(QW,Enr),e(Cd,Cnr),e(Cd,HW),e(HW,wnr),e(Cd,Anr),e(Vo,Lnr),e(Vo,Fy),e(Fy,ynr),e(Fy,y2e),e(y2e,xnr),e(Fy,$nr),e(Vo,knr),e(Vo,Ft),M(Ty,Ft,null),e(Ft,Snr),e(Ft,x2e),e(x2e,Rnr),e(Ft,Pnr),e(Ft,wd),e(wd,Bnr),e(wd,$2e),e($2e,Inr),e(wd,Nnr),e(wd,UW),e(UW,qnr),e(wd,jnr),e(Ft,Dnr),M(v6,Ft,null),e(Vo,Gnr),e(Vo,co),M(My,co,null),e(co,Onr),e(co,k2e),e(k2e,Vnr),e(co,Xnr),e(co,Qa),e(Qa,znr),e(Qa,S2e),e(S2e,Wnr),e(Qa,Qnr),e(Qa,R2e),e(R2e,Hnr),e(Qa,Unr),e(Qa,P2e),e(P2e,Jnr),e(Qa,Ynr),e(co,Knr),e(co,B2e),e(B2e,F6),e(F6,I2e),e(I2e,Znr),e(F6,esr),e(F6,JW),e(JW,osr),e(F6,rsr),e(co,tsr),e(co,T6),e(T6,asr),e(T6,N2e),e(N2e,nsr),e(T6,ssr),e(T6,q2e),e(q2e,lsr),e(co,isr),M(M6,co,null),b(f,KOe,u),b(f,Ad,u),e(Ad,E6),e(E6,j2e),M(Ey,j2e,null),e(Ad,dsr),e(Ad,D2e),e(D2e,csr),b(f,ZOe,u),b(f,Xo,u),M(Cy,Xo,null),e(Xo,fsr),e(Xo,Ld),e(Ld,msr),e(Ld,YW),e(YW,gsr),e(Ld,hsr),e(Ld,KW),e(KW,psr),e(Ld,_sr),e(Xo,usr),e(Xo,wy),e(wy,bsr),e(wy,G2e),e(G2e,vsr),e(wy,Fsr),e(Xo,Tsr),e(Xo,Tt),M(Ay,Tt,null),e(Tt,Msr),e(Tt,O2e),e(O2e,Esr),e(Tt,Csr),e(Tt,yd),e(yd,wsr),e(yd,V2e),e(V2e,Asr),e(yd,Lsr),e(yd,ZW),e(ZW,ysr),e(yd,xsr),e(Tt,$sr),M(C6,Tt,null),e(Xo,ksr),e(Xo,fo),M(Ly,fo,null),e(fo,Ssr),e(fo,X2e),e(X2e,Rsr),e(fo,Psr),e(fo,Ha),e(Ha,Bsr),e(Ha,z2e),e(z2e,Isr),e(Ha,Nsr),e(Ha,W2e),e(W2e,qsr),e(Ha,jsr),e(Ha,Q2e),e(Q2e,Dsr),e(Ha,Gsr),e(fo,Osr),e(fo,Pe),e(Pe,w6),e(w6,H2e),e(H2e,Vsr),e(w6,Xsr),e(w6,eQ),e(eQ,zsr),e(w6,Wsr),e(Pe,Qsr),e(Pe,A6),e(A6,U2e),e(U2e,Hsr),e(A6,Usr),e(A6,oQ),e(oQ,Jsr),e(A6,Ysr),e(Pe,Ksr),e(Pe,L6),e(L6,J2e),e(J2e,Zsr),e(L6,elr),e(L6,rQ),e(rQ,olr),e(L6,rlr),e(Pe,tlr),e(Pe,y6),e(y6,Y2e),e(Y2e,alr),e(y6,nlr),e(y6,tQ),e(tQ,slr),e(y6,llr),e(Pe,ilr),e(Pe,x6),e(x6,K2e),e(K2e,dlr),e(x6,clr),e(x6,aQ),e(aQ,flr),e(x6,mlr),e(Pe,glr),e(Pe,$6),e($6,Z2e),e(Z2e,hlr),e($6,plr),e($6,nQ),e(nQ,_lr),e($6,ulr),e(Pe,blr),e(Pe,k6),e(k6,ebe),e(ebe,vlr),e(k6,Flr),e(k6,sQ),e(sQ,Tlr),e(k6,Mlr),e(Pe,Elr),e(Pe,S6),e(S6,obe),e(obe,Clr),e(S6,wlr),e(S6,lQ),e(lQ,Alr),e(S6,Llr),e(Pe,ylr),e(Pe,R6),e(R6,rbe),e(rbe,xlr),e(R6,$lr),e(R6,iQ),e(iQ,klr),e(R6,Slr),e(fo,Rlr),e(fo,P6),e(P6,Plr),e(P6,tbe),e(tbe,Blr),e(P6,Ilr),e(P6,abe),e(abe,Nlr),e(fo,qlr),M(B6,fo,null),b(f,eVe,u),b(f,xd,u),e(xd,I6),e(I6,nbe),M(yy,nbe,null),e(xd,jlr),e(xd,sbe),e(sbe,Dlr),b(f,oVe,u),b(f,zo,u),M(xy,zo,null),e(zo,Glr),e(zo,$d),e($d,Olr),e($d,dQ),e(dQ,Vlr),e($d,Xlr),e($d,cQ),e(cQ,zlr),e($d,Wlr),e(zo,Qlr),e(zo,$y),e($y,Hlr),e($y,lbe),e(lbe,Ulr),e($y,Jlr),e(zo,Ylr),e(zo,Mt),M(ky,Mt,null),e(Mt,Klr),e(Mt,ibe),e(ibe,Zlr),e(Mt,eir),e(Mt,kd),e(kd,oir),e(kd,dbe),e(dbe,rir),e(kd,tir),e(kd,fQ),e(fQ,air),e(kd,nir),e(Mt,sir),M(N6,Mt,null),e(zo,lir),e(zo,mo),M(Sy,mo,null),e(mo,iir),e(mo,cbe),e(cbe,dir),e(mo,cir),e(mo,Ua),e(Ua,fir),e(Ua,fbe),e(fbe,mir),e(Ua,gir),e(Ua,mbe),e(mbe,hir),e(Ua,pir),e(Ua,gbe),e(gbe,_ir),e(Ua,uir),e(mo,bir),e(mo,et),e(et,q6),e(q6,hbe),e(hbe,vir),e(q6,Fir),e(q6,mQ),e(mQ,Tir),e(q6,Mir),e(et,Eir),e(et,j6),e(j6,pbe),e(pbe,Cir),e(j6,wir),e(j6,gQ),e(gQ,Air),e(j6,Lir),e(et,yir),e(et,D6),e(D6,_be),e(_be,xir),e(D6,$ir),e(D6,hQ),e(hQ,kir),e(D6,Sir),e(et,Rir),e(et,G6),e(G6,ube),e(ube,Pir),e(G6,Bir),e(G6,pQ),e(pQ,Iir),e(G6,Nir),e(et,qir),e(et,O6),e(O6,bbe),e(bbe,jir),e(O6,Dir),e(O6,_Q),e(_Q,Gir),e(O6,Oir),e(mo,Vir),e(mo,V6),e(V6,Xir),e(V6,vbe),e(vbe,zir),e(V6,Wir),e(V6,Fbe),e(Fbe,Qir),e(mo,Hir),M(X6,mo,null),b(f,rVe,u),b(f,Sd,u),e(Sd,z6),e(z6,Tbe),M(Ry,Tbe,null),e(Sd,Uir),e(Sd,Mbe),e(Mbe,Jir),b(f,tVe,u),b(f,Wo,u),M(Py,Wo,null),e(Wo,Yir),e(Wo,Rd),e(Rd,Kir),e(Rd,uQ),e(uQ,Zir),e(Rd,edr),e(Rd,bQ),e(bQ,odr),e(Rd,rdr),e(Wo,tdr),e(Wo,By),e(By,adr),e(By,Ebe),e(Ebe,ndr),e(By,sdr),e(Wo,ldr),e(Wo,Et),M(Iy,Et,null),e(Et,idr),e(Et,Cbe),e(Cbe,ddr),e(Et,cdr),e(Et,Pd),e(Pd,fdr),e(Pd,wbe),e(wbe,mdr),e(Pd,gdr),e(Pd,vQ),e(vQ,hdr),e(Pd,pdr),e(Et,_dr),M(W6,Et,null),e(Wo,udr),e(Wo,go),M(Ny,go,null),e(go,bdr),e(go,Abe),e(Abe,vdr),e(go,Fdr),e(go,Ja),e(Ja,Tdr),e(Ja,Lbe),e(Lbe,Mdr),e(Ja,Edr),e(Ja,ybe),e(ybe,Cdr),e(Ja,wdr),e(Ja,xbe),e(xbe,Adr),e(Ja,Ldr),e(go,ydr),e(go,Le),e(Le,Q6),e(Q6,$be),e($be,xdr),e(Q6,$dr),e(Q6,FQ),e(FQ,kdr),e(Q6,Sdr),e(Le,Rdr),e(Le,H6),e(H6,kbe),e(kbe,Pdr),e(H6,Bdr),e(H6,TQ),e(TQ,Idr),e(H6,Ndr),e(Le,qdr),e(Le,U6),e(U6,Sbe),e(Sbe,jdr),e(U6,Ddr),e(U6,MQ),e(MQ,Gdr),e(U6,Odr),e(Le,Vdr),e(Le,J6),e(J6,Rbe),e(Rbe,Xdr),e(J6,zdr),e(J6,EQ),e(EQ,Wdr),e(J6,Qdr),e(Le,Hdr),e(Le,Y6),e(Y6,Pbe),e(Pbe,Udr),e(Y6,Jdr),e(Y6,CQ),e(CQ,Ydr),e(Y6,Kdr),e(Le,Zdr),e(Le,K6),e(K6,Bbe),e(Bbe,ecr),e(K6,ocr),e(K6,wQ),e(wQ,rcr),e(K6,tcr),e(Le,acr),e(Le,Z6),e(Z6,Ibe),e(Ibe,ncr),e(Z6,scr),e(Z6,AQ),e(AQ,lcr),e(Z6,icr),e(Le,dcr),e(Le,eT),e(eT,Nbe),e(Nbe,ccr),e(eT,fcr),e(eT,LQ),e(LQ,mcr),e(eT,gcr),e(Le,hcr),e(Le,oT),e(oT,qbe),e(qbe,pcr),e(oT,_cr),e(oT,yQ),e(yQ,ucr),e(oT,bcr),e(Le,vcr),e(Le,rT),e(rT,jbe),e(jbe,Fcr),e(rT,Tcr),e(rT,xQ),e(xQ,Mcr),e(rT,Ecr),e(go,Ccr),e(go,tT),e(tT,wcr),e(tT,Dbe),e(Dbe,Acr),e(tT,Lcr),e(tT,Gbe),e(Gbe,ycr),e(go,xcr),M(aT,go,null),b(f,aVe,u),b(f,Bd,u),e(Bd,nT),e(nT,Obe),M(qy,Obe,null),e(Bd,$cr),e(Bd,Vbe),e(Vbe,kcr),b(f,nVe,u),b(f,Qo,u),M(jy,Qo,null),e(Qo,Scr),e(Qo,Id),e(Id,Rcr),e(Id,$Q),e($Q,Pcr),e(Id,Bcr),e(Id,kQ),e(kQ,Icr),e(Id,Ncr),e(Qo,qcr),e(Qo,Dy),e(Dy,jcr),e(Dy,Xbe),e(Xbe,Dcr),e(Dy,Gcr),e(Qo,Ocr),e(Qo,Ct),M(Gy,Ct,null),e(Ct,Vcr),e(Ct,zbe),e(zbe,Xcr),e(Ct,zcr),e(Ct,Nd),e(Nd,Wcr),e(Nd,Wbe),e(Wbe,Qcr),e(Nd,Hcr),e(Nd,SQ),e(SQ,Ucr),e(Nd,Jcr),e(Ct,Ycr),M(sT,Ct,null),e(Qo,Kcr),e(Qo,ho),M(Oy,ho,null),e(ho,Zcr),e(ho,Qbe),e(Qbe,efr),e(ho,ofr),e(ho,Ya),e(Ya,rfr),e(Ya,Hbe),e(Hbe,tfr),e(Ya,afr),e(Ya,Ube),e(Ube,nfr),e(Ya,sfr),e(Ya,Jbe),e(Jbe,lfr),e(Ya,ifr),e(ho,dfr),e(ho,Vy),e(Vy,lT),e(lT,Ybe),e(Ybe,cfr),e(lT,ffr),e(lT,RQ),e(RQ,mfr),e(lT,gfr),e(Vy,hfr),e(Vy,iT),e(iT,Kbe),e(Kbe,pfr),e(iT,_fr),e(iT,PQ),e(PQ,ufr),e(iT,bfr),e(ho,vfr),e(ho,dT),e(dT,Ffr),e(dT,Zbe),e(Zbe,Tfr),e(dT,Mfr),e(dT,eve),e(eve,Efr),e(ho,Cfr),M(cT,ho,null),b(f,sVe,u),b(f,qd,u),e(qd,fT),e(fT,ove),M(Xy,ove,null),e(qd,wfr),e(qd,rve),e(rve,Afr),b(f,lVe,u),b(f,Ho,u),M(zy,Ho,null),e(Ho,Lfr),e(Ho,jd),e(jd,yfr),e(jd,BQ),e(BQ,xfr),e(jd,$fr),e(jd,IQ),e(IQ,kfr),e(jd,Sfr),e(Ho,Rfr),e(Ho,Wy),e(Wy,Pfr),e(Wy,tve),e(tve,Bfr),e(Wy,Ifr),e(Ho,Nfr),e(Ho,wt),M(Qy,wt,null),e(wt,qfr),e(wt,ave),e(ave,jfr),e(wt,Dfr),e(wt,Dd),e(Dd,Gfr),e(Dd,nve),e(nve,Ofr),e(Dd,Vfr),e(Dd,NQ),e(NQ,Xfr),e(Dd,zfr),e(wt,Wfr),M(mT,wt,null),e(Ho,Qfr),e(Ho,po),M(Hy,po,null),e(po,Hfr),e(po,sve),e(sve,Ufr),e(po,Jfr),e(po,Ka),e(Ka,Yfr),e(Ka,lve),e(lve,Kfr),e(Ka,Zfr),e(Ka,ive),e(ive,emr),e(Ka,omr),e(Ka,dve),e(dve,rmr),e(Ka,tmr),e(po,amr),e(po,ot),e(ot,gT),e(gT,cve),e(cve,nmr),e(gT,smr),e(gT,qQ),e(qQ,lmr),e(gT,imr),e(ot,dmr),e(ot,hT),e(hT,fve),e(fve,cmr),e(hT,fmr),e(hT,jQ),e(jQ,mmr),e(hT,gmr),e(ot,hmr),e(ot,pT),e(pT,mve),e(mve,pmr),e(pT,_mr),e(pT,DQ),e(DQ,umr),e(pT,bmr),e(ot,vmr),e(ot,_T),e(_T,gve),e(gve,Fmr),e(_T,Tmr),e(_T,GQ),e(GQ,Mmr),e(_T,Emr),e(ot,Cmr),e(ot,uT),e(uT,hve),e(hve,wmr),e(uT,Amr),e(uT,OQ),e(OQ,Lmr),e(uT,ymr),e(po,xmr),e(po,bT),e(bT,$mr),e(bT,pve),e(pve,kmr),e(bT,Smr),e(bT,_ve),e(_ve,Rmr),e(po,Pmr),M(vT,po,null),b(f,iVe,u),b(f,Gd,u),e(Gd,FT),e(FT,uve),M(Uy,uve,null),e(Gd,Bmr),e(Gd,bve),e(bve,Imr),b(f,dVe,u),b(f,Uo,u),M(Jy,Uo,null),e(Uo,Nmr),e(Uo,Od),e(Od,qmr),e(Od,VQ),e(VQ,jmr),e(Od,Dmr),e(Od,XQ),e(XQ,Gmr),e(Od,Omr),e(Uo,Vmr),e(Uo,Yy),e(Yy,Xmr),e(Yy,vve),e(vve,zmr),e(Yy,Wmr),e(Uo,Qmr),e(Uo,At),M(Ky,At,null),e(At,Hmr),e(At,Fve),e(Fve,Umr),e(At,Jmr),e(At,Vd),e(Vd,Ymr),e(Vd,Tve),e(Tve,Kmr),e(Vd,Zmr),e(Vd,zQ),e(zQ,egr),e(Vd,ogr),e(At,rgr),M(TT,At,null),e(Uo,tgr),e(Uo,_o),M(Zy,_o,null),e(_o,agr),e(_o,Mve),e(Mve,ngr),e(_o,sgr),e(_o,Za),e(Za,lgr),e(Za,Eve),e(Eve,igr),e(Za,dgr),e(Za,Cve),e(Cve,cgr),e(Za,fgr),e(Za,wve),e(wve,mgr),e(Za,ggr),e(_o,hgr),e(_o,Xd),e(Xd,MT),e(MT,Ave),e(Ave,pgr),e(MT,_gr),e(MT,WQ),e(WQ,ugr),e(MT,bgr),e(Xd,vgr),e(Xd,ET),e(ET,Lve),e(Lve,Fgr),e(ET,Tgr),e(ET,QQ),e(QQ,Mgr),e(ET,Egr),e(Xd,Cgr),e(Xd,CT),e(CT,yve),e(yve,wgr),e(CT,Agr),e(CT,HQ),e(HQ,Lgr),e(CT,ygr),e(_o,xgr),e(_o,wT),e(wT,$gr),e(wT,xve),e(xve,kgr),e(wT,Sgr),e(wT,$ve),e($ve,Rgr),e(_o,Pgr),M(AT,_o,null),b(f,cVe,u),b(f,zd,u),e(zd,LT),e(LT,kve),M(e9,kve,null),e(zd,Bgr),e(zd,Sve),e(Sve,Igr),b(f,fVe,u),b(f,Jo,u),M(o9,Jo,null),e(Jo,Ngr),e(Jo,Wd),e(Wd,qgr),e(Wd,UQ),e(UQ,jgr),e(Wd,Dgr),e(Wd,JQ),e(JQ,Ggr),e(Wd,Ogr),e(Jo,Vgr),e(Jo,r9),e(r9,Xgr),e(r9,Rve),e(Rve,zgr),e(r9,Wgr),e(Jo,Qgr),e(Jo,Lt),M(t9,Lt,null),e(Lt,Hgr),e(Lt,Pve),e(Pve,Ugr),e(Lt,Jgr),e(Lt,Qd),e(Qd,Ygr),e(Qd,Bve),e(Bve,Kgr),e(Qd,Zgr),e(Qd,YQ),e(YQ,ehr),e(Qd,ohr),e(Lt,rhr),M(yT,Lt,null),e(Jo,thr),e(Jo,uo),M(a9,uo,null),e(uo,ahr),e(uo,Ive),e(Ive,nhr),e(uo,shr),e(uo,en),e(en,lhr),e(en,Nve),e(Nve,ihr),e(en,dhr),e(en,qve),e(qve,chr),e(en,fhr),e(en,jve),e(jve,mhr),e(en,ghr),e(uo,hhr),e(uo,n9),e(n9,xT),e(xT,Dve),e(Dve,phr),e(xT,_hr),e(xT,KQ),e(KQ,uhr),e(xT,bhr),e(n9,vhr),e(n9,$T),e($T,Gve),e(Gve,Fhr),e($T,Thr),e($T,ZQ),e(ZQ,Mhr),e($T,Ehr),e(uo,Chr),e(uo,kT),e(kT,whr),e(kT,Ove),e(Ove,Ahr),e(kT,Lhr),e(kT,Vve),e(Vve,yhr),e(uo,xhr),M(ST,uo,null),b(f,mVe,u),b(f,Hd,u),e(Hd,RT),e(RT,Xve),M(s9,Xve,null),e(Hd,$hr),e(Hd,zve),e(zve,khr),b(f,gVe,u),b(f,Yo,u),M(l9,Yo,null),e(Yo,Shr),e(Yo,Ud),e(Ud,Rhr),e(Ud,eH),e(eH,Phr),e(Ud,Bhr),e(Ud,oH),e(oH,Ihr),e(Ud,Nhr),e(Yo,qhr),e(Yo,i9),e(i9,jhr),e(i9,Wve),e(Wve,Dhr),e(i9,Ghr),e(Yo,Ohr),e(Yo,yt),M(d9,yt,null),e(yt,Vhr),e(yt,Qve),e(Qve,Xhr),e(yt,zhr),e(yt,Jd),e(Jd,Whr),e(Jd,Hve),e(Hve,Qhr),e(Jd,Hhr),e(Jd,rH),e(rH,Uhr),e(Jd,Jhr),e(yt,Yhr),M(PT,yt,null),e(Yo,Khr),e(Yo,bo),M(c9,bo,null),e(bo,Zhr),e(bo,Uve),e(Uve,epr),e(bo,opr),e(bo,on),e(on,rpr),e(on,Jve),e(Jve,tpr),e(on,apr),e(on,Yve),e(Yve,npr),e(on,spr),e(on,Kve),e(Kve,lpr),e(on,ipr),e(bo,dpr),e(bo,Zve),e(Zve,BT),e(BT,e0e),e(e0e,cpr),e(BT,fpr),e(BT,tH),e(tH,mpr),e(BT,gpr),e(bo,hpr),e(bo,IT),e(IT,ppr),e(IT,o0e),e(o0e,_pr),e(IT,upr),e(IT,r0e),e(r0e,bpr),e(bo,vpr),M(NT,bo,null),b(f,hVe,u),b(f,Yd,u),e(Yd,qT),e(qT,t0e),M(f9,t0e,null),e(Yd,Fpr),e(Yd,a0e),e(a0e,Tpr),b(f,pVe,u),b(f,Ko,u),M(m9,Ko,null),e(Ko,Mpr),e(Ko,Kd),e(Kd,Epr),e(Kd,aH),e(aH,Cpr),e(Kd,wpr),e(Kd,nH),e(nH,Apr),e(Kd,Lpr),e(Ko,ypr),e(Ko,g9),e(g9,xpr),e(g9,n0e),e(n0e,$pr),e(g9,kpr),e(Ko,Spr),e(Ko,xt),M(h9,xt,null),e(xt,Rpr),e(xt,s0e),e(s0e,Ppr),e(xt,Bpr),e(xt,Zd),e(Zd,Ipr),e(Zd,l0e),e(l0e,Npr),e(Zd,qpr),e(Zd,sH),e(sH,jpr),e(Zd,Dpr),e(xt,Gpr),M(jT,xt,null),e(Ko,Opr),e(Ko,vo),M(p9,vo,null),e(vo,Vpr),e(vo,i0e),e(i0e,Xpr),e(vo,zpr),e(vo,rn),e(rn,Wpr),e(rn,d0e),e(d0e,Qpr),e(rn,Hpr),e(rn,c0e),e(c0e,Upr),e(rn,Jpr),e(rn,f0e),e(f0e,Ypr),e(rn,Kpr),e(vo,Zpr),e(vo,tn),e(tn,DT),e(DT,m0e),e(m0e,e_r),e(DT,o_r),e(DT,lH),e(lH,r_r),e(DT,t_r),e(tn,a_r),e(tn,GT),e(GT,g0e),e(g0e,n_r),e(GT,s_r),e(GT,iH),e(iH,l_r),e(GT,i_r),e(tn,d_r),e(tn,OT),e(OT,h0e),e(h0e,c_r),e(OT,f_r),e(OT,dH),e(dH,m_r),e(OT,g_r),e(tn,h_r),e(tn,VT),e(VT,p0e),e(p0e,p_r),e(VT,__r),e(VT,cH),e(cH,u_r),e(VT,b_r),e(vo,v_r),e(vo,XT),e(XT,F_r),e(XT,_0e),e(_0e,T_r),e(XT,M_r),e(XT,u0e),e(u0e,E_r),e(vo,C_r),M(zT,vo,null),b(f,_Ve,u),b(f,ec,u),e(ec,WT),e(WT,b0e),M(_9,b0e,null),e(ec,w_r),e(ec,v0e),e(v0e,A_r),b(f,uVe,u),b(f,Zo,u),M(u9,Zo,null),e(Zo,L_r),e(Zo,oc),e(oc,y_r),e(oc,fH),e(fH,x_r),e(oc,$_r),e(oc,mH),e(mH,k_r),e(oc,S_r),e(Zo,R_r),e(Zo,b9),e(b9,P_r),e(b9,F0e),e(F0e,B_r),e(b9,I_r),e(Zo,N_r),e(Zo,$t),M(v9,$t,null),e($t,q_r),e($t,T0e),e(T0e,j_r),e($t,D_r),e($t,rc),e(rc,G_r),e(rc,M0e),e(M0e,O_r),e(rc,V_r),e(rc,gH),e(gH,X_r),e(rc,z_r),e($t,W_r),M(QT,$t,null),e(Zo,Q_r),e(Zo,Fo),M(F9,Fo,null),e(Fo,H_r),e(Fo,E0e),e(E0e,U_r),e(Fo,J_r),e(Fo,an),e(an,Y_r),e(an,C0e),e(C0e,K_r),e(an,Z_r),e(an,w0e),e(w0e,eur),e(an,our),e(an,A0e),e(A0e,rur),e(an,tur),e(Fo,aur),e(Fo,L0e),e(L0e,HT),e(HT,y0e),e(y0e,nur),e(HT,sur),e(HT,hH),e(hH,lur),e(HT,iur),e(Fo,dur),e(Fo,UT),e(UT,cur),e(UT,x0e),e(x0e,fur),e(UT,mur),e(UT,$0e),e($0e,gur),e(Fo,hur),M(JT,Fo,null),b(f,bVe,u),b(f,tc,u),e(tc,YT),e(YT,k0e),M(T9,k0e,null),e(tc,pur),e(tc,S0e),e(S0e,_ur),b(f,vVe,u),b(f,er,u),M(M9,er,null),e(er,uur),e(er,ac),e(ac,bur),e(ac,pH),e(pH,vur),e(ac,Fur),e(ac,_H),e(_H,Tur),e(ac,Mur),e(er,Eur),e(er,E9),e(E9,Cur),e(E9,R0e),e(R0e,wur),e(E9,Aur),e(er,Lur),e(er,kt),M(C9,kt,null),e(kt,yur),e(kt,P0e),e(P0e,xur),e(kt,$ur),e(kt,nc),e(nc,kur),e(nc,B0e),e(B0e,Sur),e(nc,Rur),e(nc,uH),e(uH,Pur),e(nc,Bur),e(kt,Iur),M(KT,kt,null),e(er,Nur),e(er,yr),M(w9,yr,null),e(yr,qur),e(yr,I0e),e(I0e,jur),e(yr,Dur),e(yr,nn),e(nn,Gur),e(nn,N0e),e(N0e,Our),e(nn,Vur),e(nn,q0e),e(q0e,Xur),e(nn,zur),e(nn,j0e),e(j0e,Wur),e(nn,Qur),e(yr,Hur),e(yr,q),e(q,ZT),e(ZT,D0e),e(D0e,Uur),e(ZT,Jur),e(ZT,bH),e(bH,Yur),e(ZT,Kur),e(q,Zur),e(q,e7),e(e7,G0e),e(G0e,e1r),e(e7,o1r),e(e7,vH),e(vH,r1r),e(e7,t1r),e(q,a1r),e(q,o7),e(o7,O0e),e(O0e,n1r),e(o7,s1r),e(o7,FH),e(FH,l1r),e(o7,i1r),e(q,d1r),e(q,r7),e(r7,V0e),e(V0e,c1r),e(r7,f1r),e(r7,TH),e(TH,m1r),e(r7,g1r),e(q,h1r),e(q,t7),e(t7,X0e),e(X0e,p1r),e(t7,_1r),e(t7,MH),e(MH,u1r),e(t7,b1r),e(q,v1r),e(q,a7),e(a7,z0e),e(z0e,F1r),e(a7,T1r),e(a7,EH),e(EH,M1r),e(a7,E1r),e(q,C1r),e(q,n7),e(n7,W0e),e(W0e,w1r),e(n7,A1r),e(n7,CH),e(CH,L1r),e(n7,y1r),e(q,x1r),e(q,s7),e(s7,Q0e),e(Q0e,$1r),e(s7,k1r),e(s7,wH),e(wH,S1r),e(s7,R1r),e(q,P1r),e(q,l7),e(l7,H0e),e(H0e,B1r),e(l7,I1r),e(l7,AH),e(AH,N1r),e(l7,q1r),e(q,j1r),e(q,i7),e(i7,U0e),e(U0e,D1r),e(i7,G1r),e(i7,LH),e(LH,O1r),e(i7,V1r),e(q,X1r),e(q,d7),e(d7,J0e),e(J0e,z1r),e(d7,W1r),e(d7,yH),e(yH,Q1r),e(d7,H1r),e(q,U1r),e(q,c7),e(c7,Y0e),e(Y0e,J1r),e(c7,Y1r),e(c7,xH),e(xH,K1r),e(c7,Z1r),e(q,e2r),e(q,f7),e(f7,K0e),e(K0e,o2r),e(f7,r2r),e(f7,$H),e($H,t2r),e(f7,a2r),e(q,n2r),e(q,m7),e(m7,Z0e),e(Z0e,s2r),e(m7,l2r),e(m7,kH),e(kH,i2r),e(m7,d2r),e(q,c2r),e(q,g7),e(g7,eFe),e(eFe,f2r),e(g7,m2r),e(g7,SH),e(SH,g2r),e(g7,h2r),e(q,p2r),e(q,h7),e(h7,oFe),e(oFe,_2r),e(h7,u2r),e(h7,RH),e(RH,b2r),e(h7,v2r),e(q,F2r),e(q,p7),e(p7,rFe),e(rFe,T2r),e(p7,M2r),e(p7,PH),e(PH,E2r),e(p7,C2r),e(q,w2r),e(q,_7),e(_7,tFe),e(tFe,A2r),e(_7,L2r),e(_7,BH),e(BH,y2r),e(_7,x2r),e(q,$2r),e(q,Qs),e(Qs,aFe),e(aFe,k2r),e(Qs,S2r),e(Qs,IH),e(IH,R2r),e(Qs,P2r),e(Qs,NH),e(NH,B2r),e(Qs,I2r),e(q,N2r),e(q,u7),e(u7,nFe),e(nFe,q2r),e(u7,j2r),e(u7,qH),e(qH,D2r),e(u7,G2r),e(q,O2r),e(q,b7),e(b7,sFe),e(sFe,V2r),e(b7,X2r),e(b7,jH),e(jH,z2r),e(b7,W2r),e(q,Q2r),e(q,v7),e(v7,lFe),e(lFe,H2r),e(v7,U2r),e(v7,DH),e(DH,J2r),e(v7,Y2r),e(q,K2r),e(q,F7),e(F7,iFe),e(iFe,Z2r),e(F7,ebr),e(F7,GH),e(GH,obr),e(F7,rbr),e(q,tbr),e(q,T7),e(T7,dFe),e(dFe,abr),e(T7,nbr),e(T7,OH),e(OH,sbr),e(T7,lbr),e(q,ibr),e(q,M7),e(M7,cFe),e(cFe,dbr),e(M7,cbr),e(M7,VH),e(VH,fbr),e(M7,mbr),e(q,gbr),e(q,E7),e(E7,fFe),e(fFe,hbr),e(E7,pbr),e(E7,XH),e(XH,_br),e(E7,ubr),e(q,bbr),e(q,C7),e(C7,mFe),e(mFe,vbr),e(C7,Fbr),e(C7,zH),e(zH,Tbr),e(C7,Mbr),e(q,Ebr),e(q,w7),e(w7,gFe),e(gFe,Cbr),e(w7,wbr),e(w7,WH),e(WH,Abr),e(w7,Lbr),e(q,ybr),e(q,A7),e(A7,hFe),e(hFe,xbr),e(A7,$br),e(A7,QH),e(QH,kbr),e(A7,Sbr),e(q,Rbr),e(q,L7),e(L7,pFe),e(pFe,Pbr),e(L7,Bbr),e(L7,HH),e(HH,Ibr),e(L7,Nbr),e(q,qbr),e(q,y7),e(y7,_Fe),e(_Fe,jbr),e(y7,Dbr),e(y7,UH),e(UH,Gbr),e(y7,Obr),e(q,Vbr),e(q,x7),e(x7,uFe),e(uFe,Xbr),e(x7,zbr),e(x7,JH),e(JH,Wbr),e(x7,Qbr),e(q,Hbr),e(q,$7),e($7,bFe),e(bFe,Ubr),e($7,Jbr),e($7,YH),e(YH,Ybr),e($7,Kbr),e(q,Zbr),e(q,k7),e(k7,vFe),e(vFe,evr),e(k7,ovr),e(k7,KH),e(KH,rvr),e(k7,tvr),e(q,avr),e(q,S7),e(S7,FFe),e(FFe,nvr),e(S7,svr),e(S7,ZH),e(ZH,lvr),e(S7,ivr),e(q,dvr),e(q,R7),e(R7,TFe),e(TFe,cvr),e(R7,fvr),e(R7,eU),e(eU,mvr),e(R7,gvr),e(q,hvr),e(q,P7),e(P7,MFe),e(MFe,pvr),e(P7,_vr),e(P7,oU),e(oU,uvr),e(P7,bvr),e(q,vvr),e(q,B7),e(B7,EFe),e(EFe,Fvr),e(B7,Tvr),e(B7,rU),e(rU,Mvr),e(B7,Evr),e(q,Cvr),e(q,I7),e(I7,CFe),e(CFe,wvr),e(I7,Avr),e(I7,tU),e(tU,Lvr),e(I7,yvr),e(q,xvr),e(q,N7),e(N7,wFe),e(wFe,$vr),e(N7,kvr),e(N7,aU),e(aU,Svr),e(N7,Rvr),e(q,Pvr),e(q,q7),e(q7,AFe),e(AFe,Bvr),e(q7,Ivr),e(q7,nU),e(nU,Nvr),e(q7,qvr),e(q,jvr),e(q,j7),e(j7,LFe),e(LFe,Dvr),e(j7,Gvr),e(j7,sU),e(sU,Ovr),e(j7,Vvr),e(q,Xvr),e(q,D7),e(D7,yFe),e(yFe,zvr),e(D7,Wvr),e(D7,lU),e(lU,Qvr),e(D7,Hvr),e(q,Uvr),e(q,G7),e(G7,xFe),e(xFe,Jvr),e(G7,Yvr),e(G7,iU),e(iU,Kvr),e(G7,Zvr),e(q,e0r),e(q,O7),e(O7,$Fe),e($Fe,o0r),e(O7,r0r),e(O7,dU),e(dU,t0r),e(O7,a0r),e(q,n0r),e(q,V7),e(V7,kFe),e(kFe,s0r),e(V7,l0r),e(V7,cU),e(cU,i0r),e(V7,d0r),e(q,c0r),e(q,X7),e(X7,SFe),e(SFe,f0r),e(X7,m0r),e(X7,fU),e(fU,g0r),e(X7,h0r),e(q,p0r),e(q,z7),e(z7,RFe),e(RFe,_0r),e(z7,u0r),e(z7,mU),e(mU,b0r),e(z7,v0r),e(yr,F0r),M(W7,yr,null),b(f,FVe,u),b(f,sc,u),e(sc,Q7),e(Q7,PFe),M(A9,PFe,null),e(sc,T0r),e(sc,BFe),e(BFe,M0r),b(f,TVe,u),b(f,or,u),M(L9,or,null),e(or,E0r),e(or,lc),e(lc,C0r),e(lc,gU),e(gU,w0r),e(lc,A0r),e(lc,hU),e(hU,L0r),e(lc,y0r),e(or,x0r),e(or,y9),e(y9,$0r),e(y9,IFe),e(IFe,k0r),e(y9,S0r),e(or,R0r),e(or,St),M(x9,St,null),e(St,P0r),e(St,NFe),e(NFe,B0r),e(St,I0r),e(St,ic),e(ic,N0r),e(ic,qFe),e(qFe,q0r),e(ic,j0r),e(ic,pU),e(pU,D0r),e(ic,G0r),e(St,O0r),M(H7,St,null),e(or,V0r),e(or,xr),M($9,xr,null),e(xr,X0r),e(xr,jFe),e(jFe,z0r),e(xr,W0r),e(xr,sn),e(sn,Q0r),e(sn,DFe),e(DFe,H0r),e(sn,U0r),e(sn,GFe),e(GFe,J0r),e(sn,Y0r),e(sn,OFe),e(OFe,K0r),e(sn,Z0r),e(xr,eFr),e(xr,se),e(se,U7),e(U7,VFe),e(VFe,oFr),e(U7,rFr),e(U7,_U),e(_U,tFr),e(U7,aFr),e(se,nFr),e(se,J7),e(J7,XFe),e(XFe,sFr),e(J7,lFr),e(J7,uU),e(uU,iFr),e(J7,dFr),e(se,cFr),e(se,Y7),e(Y7,zFe),e(zFe,fFr),e(Y7,mFr),e(Y7,bU),e(bU,gFr),e(Y7,hFr),e(se,pFr),e(se,K7),e(K7,WFe),e(WFe,_Fr),e(K7,uFr),e(K7,vU),e(vU,bFr),e(K7,vFr),e(se,FFr),e(se,Z7),e(Z7,QFe),e(QFe,TFr),e(Z7,MFr),e(Z7,FU),e(FU,EFr),e(Z7,CFr),e(se,wFr),e(se,e8),e(e8,HFe),e(HFe,AFr),e(e8,LFr),e(e8,TU),e(TU,yFr),e(e8,xFr),e(se,$Fr),e(se,o8),e(o8,UFe),e(UFe,kFr),e(o8,SFr),e(o8,MU),e(MU,RFr),e(o8,PFr),e(se,BFr),e(se,r8),e(r8,JFe),e(JFe,IFr),e(r8,NFr),e(r8,EU),e(EU,qFr),e(r8,jFr),e(se,DFr),e(se,t8),e(t8,YFe),e(YFe,GFr),e(t8,OFr),e(t8,CU),e(CU,VFr),e(t8,XFr),e(se,zFr),e(se,a8),e(a8,KFe),e(KFe,WFr),e(a8,QFr),e(a8,wU),e(wU,HFr),e(a8,UFr),e(se,JFr),e(se,n8),e(n8,ZFe),e(ZFe,YFr),e(n8,KFr),e(n8,AU),e(AU,ZFr),e(n8,e6r),e(se,o6r),e(se,s8),e(s8,e6e),e(e6e,r6r),e(s8,t6r),e(s8,LU),e(LU,a6r),e(s8,n6r),e(se,s6r),e(se,l8),e(l8,o6e),e(o6e,l6r),e(l8,i6r),e(l8,yU),e(yU,d6r),e(l8,c6r),e(se,f6r),e(se,i8),e(i8,r6e),e(r6e,m6r),e(i8,g6r),e(i8,xU),e(xU,h6r),e(i8,p6r),e(se,_6r),e(se,d8),e(d8,t6e),e(t6e,u6r),e(d8,b6r),e(d8,$U),e($U,v6r),e(d8,F6r),e(se,T6r),e(se,c8),e(c8,a6e),e(a6e,M6r),e(c8,E6r),e(c8,kU),e(kU,C6r),e(c8,w6r),e(se,A6r),e(se,f8),e(f8,n6e),e(n6e,L6r),e(f8,y6r),e(f8,SU),e(SU,x6r),e(f8,$6r),e(se,k6r),e(se,m8),e(m8,s6e),e(s6e,S6r),e(m8,R6r),e(m8,RU),e(RU,P6r),e(m8,B6r),e(se,I6r),e(se,g8),e(g8,l6e),e(l6e,N6r),e(g8,q6r),e(g8,PU),e(PU,j6r),e(g8,D6r),e(se,G6r),e(se,h8),e(h8,i6e),e(i6e,O6r),e(h8,V6r),e(h8,BU),e(BU,X6r),e(h8,z6r),e(se,W6r),e(se,p8),e(p8,d6e),e(d6e,Q6r),e(p8,H6r),e(p8,IU),e(IU,U6r),e(p8,J6r),e(se,Y6r),e(se,_8),e(_8,c6e),e(c6e,K6r),e(_8,Z6r),e(_8,NU),e(NU,eTr),e(_8,oTr),e(se,rTr),e(se,u8),e(u8,f6e),e(f6e,tTr),e(u8,aTr),e(u8,qU),e(qU,nTr),e(u8,sTr),e(xr,lTr),M(b8,xr,null),b(f,MVe,u),b(f,dc,u),e(dc,v8),e(v8,m6e),M(k9,m6e,null),e(dc,iTr),e(dc,g6e),e(g6e,dTr),b(f,EVe,u),b(f,rr,u),M(S9,rr,null),e(rr,cTr),e(rr,cc),e(cc,fTr),e(cc,jU),e(jU,mTr),e(cc,gTr),e(cc,DU),e(DU,hTr),e(cc,pTr),e(rr,_Tr),e(rr,R9),e(R9,uTr),e(R9,h6e),e(h6e,bTr),e(R9,vTr),e(rr,FTr),e(rr,Rt),M(P9,Rt,null),e(Rt,TTr),e(Rt,p6e),e(p6e,MTr),e(Rt,ETr),e(Rt,fc),e(fc,CTr),e(fc,_6e),e(_6e,wTr),e(fc,ATr),e(fc,GU),e(GU,LTr),e(fc,yTr),e(Rt,xTr),M(F8,Rt,null),e(rr,$Tr),e(rr,$r),M(B9,$r,null),e($r,kTr),e($r,u6e),e(u6e,STr),e($r,RTr),e($r,ln),e(ln,PTr),e(ln,b6e),e(b6e,BTr),e(ln,ITr),e(ln,v6e),e(v6e,NTr),e(ln,qTr),e(ln,F6e),e(F6e,jTr),e(ln,DTr),e($r,GTr),e($r,Me),e(Me,T8),e(T8,T6e),e(T6e,OTr),e(T8,VTr),e(T8,OU),e(OU,XTr),e(T8,zTr),e(Me,WTr),e(Me,M8),e(M8,M6e),e(M6e,QTr),e(M8,HTr),e(M8,VU),e(VU,UTr),e(M8,JTr),e(Me,YTr),e(Me,E8),e(E8,E6e),e(E6e,KTr),e(E8,ZTr),e(E8,XU),e(XU,e7r),e(E8,o7r),e(Me,r7r),e(Me,C8),e(C8,C6e),e(C6e,t7r),e(C8,a7r),e(C8,zU),e(zU,n7r),e(C8,s7r),e(Me,l7r),e(Me,w8),e(w8,w6e),e(w6e,i7r),e(w8,d7r),e(w8,WU),e(WU,c7r),e(w8,f7r),e(Me,m7r),e(Me,A8),e(A8,A6e),e(A6e,g7r),e(A8,h7r),e(A8,QU),e(QU,p7r),e(A8,_7r),e(Me,u7r),e(Me,L8),e(L8,L6e),e(L6e,b7r),e(L8,v7r),e(L8,HU),e(HU,F7r),e(L8,T7r),e(Me,M7r),e(Me,y8),e(y8,y6e),e(y6e,E7r),e(y8,C7r),e(y8,UU),e(UU,w7r),e(y8,A7r),e(Me,L7r),e(Me,x8),e(x8,x6e),e(x6e,y7r),e(x8,x7r),e(x8,JU),e(JU,$7r),e(x8,k7r),e(Me,S7r),e(Me,$8),e($8,$6e),e($6e,R7r),e($8,P7r),e($8,YU),e(YU,B7r),e($8,I7r),e(Me,N7r),e(Me,k8),e(k8,k6e),e(k6e,q7r),e(k8,j7r),e(k8,KU),e(KU,D7r),e(k8,G7r),e(Me,O7r),e(Me,S8),e(S8,S6e),e(S6e,V7r),e(S8,X7r),e(S8,ZU),e(ZU,z7r),e(S8,W7r),e(Me,Q7r),e(Me,R8),e(R8,R6e),e(R6e,H7r),e(R8,U7r),e(R8,eJ),e(eJ,J7r),e(R8,Y7r),e($r,K7r),M(P8,$r,null),b(f,CVe,u),b(f,mc,u),e(mc,B8),e(B8,P6e),M(I9,P6e,null),e(mc,Z7r),e(mc,B6e),e(B6e,e8r),b(f,wVe,u),b(f,tr,u),M(N9,tr,null),e(tr,o8r),e(tr,gc),e(gc,r8r),e(gc,oJ),e(oJ,t8r),e(gc,a8r),e(gc,rJ),e(rJ,n8r),e(gc,s8r),e(tr,l8r),e(tr,q9),e(q9,i8r),e(q9,I6e),e(I6e,d8r),e(q9,c8r),e(tr,f8r),e(tr,Pt),M(j9,Pt,null),e(Pt,m8r),e(Pt,N6e),e(N6e,g8r),e(Pt,h8r),e(Pt,hc),e(hc,p8r),e(hc,q6e),e(q6e,_8r),e(hc,u8r),e(hc,tJ),e(tJ,b8r),e(hc,v8r),e(Pt,F8r),M(I8,Pt,null),e(tr,T8r),e(tr,kr),M(D9,kr,null),e(kr,M8r),e(kr,j6e),e(j6e,E8r),e(kr,C8r),e(kr,dn),e(dn,w8r),e(dn,D6e),e(D6e,A8r),e(dn,L8r),e(dn,G6e),e(G6e,y8r),e(dn,x8r),e(dn,O6e),e(O6e,$8r),e(dn,k8r),e(kr,S8r),e(kr,rt),e(rt,N8),e(N8,V6e),e(V6e,R8r),e(N8,P8r),e(N8,aJ),e(aJ,B8r),e(N8,I8r),e(rt,N8r),e(rt,q8),e(q8,X6e),e(X6e,q8r),e(q8,j8r),e(q8,nJ),e(nJ,D8r),e(q8,G8r),e(rt,O8r),e(rt,Hs),e(Hs,z6e),e(z6e,V8r),e(Hs,X8r),e(Hs,sJ),e(sJ,z8r),e(Hs,W8r),e(Hs,lJ),e(lJ,Q8r),e(Hs,H8r),e(rt,U8r),e(rt,j8),e(j8,W6e),e(W6e,J8r),e(j8,Y8r),e(j8,iJ),e(iJ,K8r),e(j8,Z8r),e(rt,eMr),e(rt,D8),e(D8,Q6e),e(Q6e,oMr),e(D8,rMr),e(D8,dJ),e(dJ,tMr),e(D8,aMr),e(kr,nMr),M(G8,kr,null),b(f,AVe,u),b(f,pc,u),e(pc,O8),e(O8,H6e),M(G9,H6e,null),e(pc,sMr),e(pc,U6e),e(U6e,lMr),b(f,LVe,u),b(f,ar,u),M(O9,ar,null),e(ar,iMr),e(ar,_c),e(_c,dMr),e(_c,cJ),e(cJ,cMr),e(_c,fMr),e(_c,fJ),e(fJ,mMr),e(_c,gMr),e(ar,hMr),e(ar,V9),e(V9,pMr),e(V9,J6e),e(J6e,_Mr),e(V9,uMr),e(ar,bMr),e(ar,Bt),M(X9,Bt,null),e(Bt,vMr),e(Bt,Y6e),e(Y6e,FMr),e(Bt,TMr),e(Bt,uc),e(uc,MMr),e(uc,K6e),e(K6e,EMr),e(uc,CMr),e(uc,mJ),e(mJ,wMr),e(uc,AMr),e(Bt,LMr),M(V8,Bt,null),e(ar,yMr),e(ar,Sr),M(z9,Sr,null),e(Sr,xMr),e(Sr,Z6e),e(Z6e,$Mr),e(Sr,kMr),e(Sr,cn),e(cn,SMr),e(cn,eTe),e(eTe,RMr),e(cn,PMr),e(cn,oTe),e(oTe,BMr),e(cn,IMr),e(cn,rTe),e(rTe,NMr),e(cn,qMr),e(Sr,jMr),e(Sr,ie),e(ie,X8),e(X8,tTe),e(tTe,DMr),e(X8,GMr),e(X8,gJ),e(gJ,OMr),e(X8,VMr),e(ie,XMr),e(ie,z8),e(z8,aTe),e(aTe,zMr),e(z8,WMr),e(z8,hJ),e(hJ,QMr),e(z8,HMr),e(ie,UMr),e(ie,W8),e(W8,nTe),e(nTe,JMr),e(W8,YMr),e(W8,pJ),e(pJ,KMr),e(W8,ZMr),e(ie,eEr),e(ie,Q8),e(Q8,sTe),e(sTe,oEr),e(Q8,rEr),e(Q8,_J),e(_J,tEr),e(Q8,aEr),e(ie,nEr),e(ie,H8),e(H8,lTe),e(lTe,sEr),e(H8,lEr),e(H8,uJ),e(uJ,iEr),e(H8,dEr),e(ie,cEr),e(ie,U8),e(U8,iTe),e(iTe,fEr),e(U8,mEr),e(U8,bJ),e(bJ,gEr),e(U8,hEr),e(ie,pEr),e(ie,J8),e(J8,dTe),e(dTe,_Er),e(J8,uEr),e(J8,vJ),e(vJ,bEr),e(J8,vEr),e(ie,FEr),e(ie,Y8),e(Y8,cTe),e(cTe,TEr),e(Y8,MEr),e(Y8,FJ),e(FJ,EEr),e(Y8,CEr),e(ie,wEr),e(ie,K8),e(K8,fTe),e(fTe,AEr),e(K8,LEr),e(K8,TJ),e(TJ,yEr),e(K8,xEr),e(ie,$Er),e(ie,Z8),e(Z8,mTe),e(mTe,kEr),e(Z8,SEr),e(Z8,MJ),e(MJ,REr),e(Z8,PEr),e(ie,BEr),e(ie,eM),e(eM,gTe),e(gTe,IEr),e(eM,NEr),e(eM,EJ),e(EJ,qEr),e(eM,jEr),e(ie,DEr),e(ie,oM),e(oM,hTe),e(hTe,GEr),e(oM,OEr),e(oM,CJ),e(CJ,VEr),e(oM,XEr),e(ie,zEr),e(ie,rM),e(rM,pTe),e(pTe,WEr),e(rM,QEr),e(rM,wJ),e(wJ,HEr),e(rM,UEr),e(ie,JEr),e(ie,tM),e(tM,_Te),e(_Te,YEr),e(tM,KEr),e(tM,AJ),e(AJ,ZEr),e(tM,e4r),e(ie,o4r),e(ie,aM),e(aM,uTe),e(uTe,r4r),e(aM,t4r),e(aM,LJ),e(LJ,a4r),e(aM,n4r),e(ie,s4r),e(ie,nM),e(nM,bTe),e(bTe,l4r),e(nM,i4r),e(nM,yJ),e(yJ,d4r),e(nM,c4r),e(ie,f4r),e(ie,sM),e(sM,vTe),e(vTe,m4r),e(sM,g4r),e(sM,xJ),e(xJ,h4r),e(sM,p4r),e(ie,_4r),e(ie,lM),e(lM,FTe),e(FTe,u4r),e(lM,b4r),e(lM,$J),e($J,v4r),e(lM,F4r),e(ie,T4r),e(ie,iM),e(iM,TTe),e(TTe,M4r),e(iM,E4r),e(iM,kJ),e(kJ,C4r),e(iM,w4r),e(ie,A4r),e(ie,dM),e(dM,MTe),e(MTe,L4r),e(dM,y4r),e(dM,SJ),e(SJ,x4r),e(dM,$4r),e(Sr,k4r),M(cM,Sr,null),b(f,yVe,u),b(f,bc,u),e(bc,fM),e(fM,ETe),M(W9,ETe,null),e(bc,S4r),e(bc,CTe),e(CTe,R4r),b(f,xVe,u),b(f,nr,u),M(Q9,nr,null),e(nr,P4r),e(nr,vc),e(vc,B4r),e(vc,RJ),e(RJ,I4r),e(vc,N4r),e(vc,PJ),e(PJ,q4r),e(vc,j4r),e(nr,D4r),e(nr,H9),e(H9,G4r),e(H9,wTe),e(wTe,O4r),e(H9,V4r),e(nr,X4r),e(nr,It),M(U9,It,null),e(It,z4r),e(It,ATe),e(ATe,W4r),e(It,Q4r),e(It,Fc),e(Fc,H4r),e(Fc,LTe),e(LTe,U4r),e(Fc,J4r),e(Fc,BJ),e(BJ,Y4r),e(Fc,K4r),e(It,Z4r),M(mM,It,null),e(nr,eCr),e(nr,Rr),M(J9,Rr,null),e(Rr,oCr),e(Rr,yTe),e(yTe,rCr),e(Rr,tCr),e(Rr,fn),e(fn,aCr),e(fn,xTe),e(xTe,nCr),e(fn,sCr),e(fn,$Te),e($Te,lCr),e(fn,iCr),e(fn,kTe),e(kTe,dCr),e(fn,cCr),e(Rr,fCr),e(Rr,ye),e(ye,gM),e(gM,STe),e(STe,mCr),e(gM,gCr),e(gM,IJ),e(IJ,hCr),e(gM,pCr),e(ye,_Cr),e(ye,hM),e(hM,RTe),e(RTe,uCr),e(hM,bCr),e(hM,NJ),e(NJ,vCr),e(hM,FCr),e(ye,TCr),e(ye,pM),e(pM,PTe),e(PTe,MCr),e(pM,ECr),e(pM,qJ),e(qJ,CCr),e(pM,wCr),e(ye,ACr),e(ye,_M),e(_M,BTe),e(BTe,LCr),e(_M,yCr),e(_M,jJ),e(jJ,xCr),e(_M,$Cr),e(ye,kCr),e(ye,uM),e(uM,ITe),e(ITe,SCr),e(uM,RCr),e(uM,DJ),e(DJ,PCr),e(uM,BCr),e(ye,ICr),e(ye,bM),e(bM,NTe),e(NTe,NCr),e(bM,qCr),e(bM,GJ),e(GJ,jCr),e(bM,DCr),e(ye,GCr),e(ye,vM),e(vM,qTe),e(qTe,OCr),e(vM,VCr),e(vM,OJ),e(OJ,XCr),e(vM,zCr),e(ye,WCr),e(ye,FM),e(FM,jTe),e(jTe,QCr),e(FM,HCr),e(FM,VJ),e(VJ,UCr),e(FM,JCr),e(ye,YCr),e(ye,TM),e(TM,DTe),e(DTe,KCr),e(TM,ZCr),e(TM,XJ),e(XJ,e5r),e(TM,o5r),e(ye,r5r),e(ye,MM),e(MM,GTe),e(GTe,t5r),e(MM,a5r),e(MM,zJ),e(zJ,n5r),e(MM,s5r),e(Rr,l5r),M(EM,Rr,null),b(f,$Ve,u),b(f,Tc,u),e(Tc,CM),e(CM,OTe),M(Y9,OTe,null),e(Tc,i5r),e(Tc,VTe),e(VTe,d5r),b(f,kVe,u),b(f,sr,u),M(K9,sr,null),e(sr,c5r),e(sr,Mc),e(Mc,f5r),e(Mc,WJ),e(WJ,m5r),e(Mc,g5r),e(Mc,QJ),e(QJ,h5r),e(Mc,p5r),e(sr,_5r),e(sr,Z9),e(Z9,u5r),e(Z9,XTe),e(XTe,b5r),e(Z9,v5r),e(sr,F5r),e(sr,Nt),M(ex,Nt,null),e(Nt,T5r),e(Nt,zTe),e(zTe,M5r),e(Nt,E5r),e(Nt,Ec),e(Ec,C5r),e(Ec,WTe),e(WTe,w5r),e(Ec,A5r),e(Ec,HJ),e(HJ,L5r),e(Ec,y5r),e(Nt,x5r),M(wM,Nt,null),e(sr,$5r),e(sr,Pr),M(ox,Pr,null),e(Pr,k5r),e(Pr,QTe),e(QTe,S5r),e(Pr,R5r),e(Pr,mn),e(mn,P5r),e(mn,HTe),e(HTe,B5r),e(mn,I5r),e(mn,UTe),e(UTe,N5r),e(mn,q5r),e(mn,JTe),e(JTe,j5r),e(mn,D5r),e(Pr,G5r),e(Pr,te),e(te,AM),e(AM,YTe),e(YTe,O5r),e(AM,V5r),e(AM,UJ),e(UJ,X5r),e(AM,z5r),e(te,W5r),e(te,LM),e(LM,KTe),e(KTe,Q5r),e(LM,H5r),e(LM,JJ),e(JJ,U5r),e(LM,J5r),e(te,Y5r),e(te,yM),e(yM,ZTe),e(ZTe,K5r),e(yM,Z5r),e(yM,YJ),e(YJ,e3r),e(yM,o3r),e(te,r3r),e(te,xM),e(xM,e7e),e(e7e,t3r),e(xM,a3r),e(xM,KJ),e(KJ,n3r),e(xM,s3r),e(te,l3r),e(te,$M),e($M,o7e),e(o7e,i3r),e($M,d3r),e($M,ZJ),e(ZJ,c3r),e($M,f3r),e(te,m3r),e(te,kM),e(kM,r7e),e(r7e,g3r),e(kM,h3r),e(kM,eY),e(eY,p3r),e(kM,_3r),e(te,u3r),e(te,SM),e(SM,t7e),e(t7e,b3r),e(SM,v3r),e(SM,oY),e(oY,F3r),e(SM,T3r),e(te,M3r),e(te,RM),e(RM,a7e),e(a7e,E3r),e(RM,C3r),e(RM,rY),e(rY,w3r),e(RM,A3r),e(te,L3r),e(te,PM),e(PM,n7e),e(n7e,y3r),e(PM,x3r),e(PM,tY),e(tY,$3r),e(PM,k3r),e(te,S3r),e(te,BM),e(BM,s7e),e(s7e,R3r),e(BM,P3r),e(BM,aY),e(aY,B3r),e(BM,I3r),e(te,N3r),e(te,IM),e(IM,l7e),e(l7e,q3r),e(IM,j3r),e(IM,nY),e(nY,D3r),e(IM,G3r),e(te,O3r),e(te,NM),e(NM,i7e),e(i7e,V3r),e(NM,X3r),e(NM,sY),e(sY,z3r),e(NM,W3r),e(te,Q3r),e(te,qM),e(qM,d7e),e(d7e,H3r),e(qM,U3r),e(qM,lY),e(lY,J3r),e(qM,Y3r),e(te,K3r),e(te,jM),e(jM,c7e),e(c7e,Z3r),e(jM,ewr),e(jM,iY),e(iY,owr),e(jM,rwr),e(te,twr),e(te,DM),e(DM,f7e),e(f7e,awr),e(DM,nwr),e(DM,dY),e(dY,swr),e(DM,lwr),e(te,iwr),e(te,GM),e(GM,m7e),e(m7e,dwr),e(GM,cwr),e(GM,cY),e(cY,fwr),e(GM,mwr),e(te,gwr),e(te,OM),e(OM,g7e),e(g7e,hwr),e(OM,pwr),e(OM,fY),e(fY,_wr),e(OM,uwr),e(te,bwr),e(te,VM),e(VM,h7e),e(h7e,vwr),e(VM,Fwr),e(VM,mY),e(mY,Twr),e(VM,Mwr),e(te,Ewr),e(te,XM),e(XM,p7e),e(p7e,Cwr),e(XM,wwr),e(XM,gY),e(gY,Awr),e(XM,Lwr),e(te,ywr),e(te,zM),e(zM,_7e),e(_7e,xwr),e(zM,$wr),e(zM,hY),e(hY,kwr),e(zM,Swr),e(te,Rwr),e(te,WM),e(WM,u7e),e(u7e,Pwr),e(WM,Bwr),e(WM,pY),e(pY,Iwr),e(WM,Nwr),e(te,qwr),e(te,QM),e(QM,b7e),e(b7e,jwr),e(QM,Dwr),e(QM,_Y),e(_Y,Gwr),e(QM,Owr),e(te,Vwr),e(te,HM),e(HM,v7e),e(v7e,Xwr),e(HM,zwr),e(HM,uY),e(uY,Wwr),e(HM,Qwr),e(te,Hwr),e(te,UM),e(UM,F7e),e(F7e,Uwr),e(UM,Jwr),e(UM,bY),e(bY,Ywr),e(UM,Kwr),e(te,Zwr),e(te,JM),e(JM,T7e),e(T7e,eAr),e(JM,oAr),e(JM,vY),e(vY,rAr),e(JM,tAr),e(te,aAr),e(te,YM),e(YM,M7e),e(M7e,nAr),e(YM,sAr),e(YM,FY),e(FY,lAr),e(YM,iAr),e(Pr,dAr),M(KM,Pr,null),b(f,SVe,u),b(f,Cc,u),e(Cc,ZM),e(ZM,E7e),M(rx,E7e,null),e(Cc,cAr),e(Cc,C7e),e(C7e,fAr),b(f,RVe,u),b(f,lr,u),M(tx,lr,null),e(lr,mAr),e(lr,wc),e(wc,gAr),e(wc,TY),e(TY,hAr),e(wc,pAr),e(wc,MY),e(MY,_Ar),e(wc,uAr),e(lr,bAr),e(lr,ax),e(ax,vAr),e(ax,w7e),e(w7e,FAr),e(ax,TAr),e(lr,MAr),e(lr,qt),M(nx,qt,null),e(qt,EAr),e(qt,A7e),e(A7e,CAr),e(qt,wAr),e(qt,Ac),e(Ac,AAr),e(Ac,L7e),e(L7e,LAr),e(Ac,yAr),e(Ac,EY),e(EY,xAr),e(Ac,$Ar),e(qt,kAr),M(eE,qt,null),e(lr,SAr),e(lr,Br),M(sx,Br,null),e(Br,RAr),e(Br,y7e),e(y7e,PAr),e(Br,BAr),e(Br,gn),e(gn,IAr),e(gn,x7e),e(x7e,NAr),e(gn,qAr),e(gn,$7e),e($7e,jAr),e(gn,DAr),e(gn,k7e),e(k7e,GAr),e(gn,OAr),e(Br,VAr),e(Br,_e),e(_e,oE),e(oE,S7e),e(S7e,XAr),e(oE,zAr),e(oE,CY),e(CY,WAr),e(oE,QAr),e(_e,HAr),e(_e,rE),e(rE,R7e),e(R7e,UAr),e(rE,JAr),e(rE,wY),e(wY,YAr),e(rE,KAr),e(_e,ZAr),e(_e,tE),e(tE,P7e),e(P7e,eLr),e(tE,oLr),e(tE,AY),e(AY,rLr),e(tE,tLr),e(_e,aLr),e(_e,aE),e(aE,B7e),e(B7e,nLr),e(aE,sLr),e(aE,LY),e(LY,lLr),e(aE,iLr),e(_e,dLr),e(_e,nE),e(nE,I7e),e(I7e,cLr),e(nE,fLr),e(nE,yY),e(yY,mLr),e(nE,gLr),e(_e,hLr),e(_e,sE),e(sE,N7e),e(N7e,pLr),e(sE,_Lr),e(sE,xY),e(xY,uLr),e(sE,bLr),e(_e,vLr),e(_e,lE),e(lE,q7e),e(q7e,FLr),e(lE,TLr),e(lE,$Y),e($Y,MLr),e(lE,ELr),e(_e,CLr),e(_e,iE),e(iE,j7e),e(j7e,wLr),e(iE,ALr),e(iE,kY),e(kY,LLr),e(iE,yLr),e(_e,xLr),e(_e,dE),e(dE,D7e),e(D7e,$Lr),e(dE,kLr),e(dE,SY),e(SY,SLr),e(dE,RLr),e(_e,PLr),e(_e,cE),e(cE,G7e),e(G7e,BLr),e(cE,ILr),e(cE,RY),e(RY,NLr),e(cE,qLr),e(_e,jLr),e(_e,fE),e(fE,O7e),e(O7e,DLr),e(fE,GLr),e(fE,PY),e(PY,OLr),e(fE,VLr),e(_e,XLr),e(_e,mE),e(mE,V7e),e(V7e,zLr),e(mE,WLr),e(mE,BY),e(BY,QLr),e(mE,HLr),e(_e,ULr),e(_e,gE),e(gE,X7e),e(X7e,JLr),e(gE,YLr),e(gE,IY),e(IY,KLr),e(gE,ZLr),e(_e,eyr),e(_e,hE),e(hE,z7e),e(z7e,oyr),e(hE,ryr),e(hE,NY),e(NY,tyr),e(hE,ayr),e(_e,nyr),e(_e,pE),e(pE,W7e),e(W7e,syr),e(pE,lyr),e(pE,qY),e(qY,iyr),e(pE,dyr),e(_e,cyr),e(_e,_E),e(_E,Q7e),e(Q7e,fyr),e(_E,myr),e(_E,jY),e(jY,gyr),e(_E,hyr),e(_e,pyr),e(_e,uE),e(uE,H7e),e(H7e,_yr),e(uE,uyr),e(uE,DY),e(DY,byr),e(uE,vyr),e(Br,Fyr),M(bE,Br,null),b(f,PVe,u),b(f,Lc,u),e(Lc,vE),e(vE,U7e),M(lx,U7e,null),e(Lc,Tyr),e(Lc,J7e),e(J7e,Myr),b(f,BVe,u),b(f,ir,u),M(ix,ir,null),e(ir,Eyr),e(ir,yc),e(yc,Cyr),e(yc,GY),e(GY,wyr),e(yc,Ayr),e(yc,OY),e(OY,Lyr),e(yc,yyr),e(ir,xyr),e(ir,dx),e(dx,$yr),e(dx,Y7e),e(Y7e,kyr),e(dx,Syr),e(ir,Ryr),e(ir,jt),M(cx,jt,null),e(jt,Pyr),e(jt,K7e),e(K7e,Byr),e(jt,Iyr),e(jt,xc),e(xc,Nyr),e(xc,Z7e),e(Z7e,qyr),e(xc,jyr),e(xc,VY),e(VY,Dyr),e(xc,Gyr),e(jt,Oyr),M(FE,jt,null),e(ir,Vyr),e(ir,Ir),M(fx,Ir,null),e(Ir,Xyr),e(Ir,e8e),e(e8e,zyr),e(Ir,Wyr),e(Ir,hn),e(hn,Qyr),e(hn,o8e),e(o8e,Hyr),e(hn,Uyr),e(hn,r8e),e(r8e,Jyr),e(hn,Yyr),e(hn,t8e),e(t8e,Kyr),e(hn,Zyr),e(Ir,e9r),e(Ir,mx),e(mx,TE),e(TE,a8e),e(a8e,o9r),e(TE,r9r),e(TE,XY),e(XY,t9r),e(TE,a9r),e(mx,n9r),e(mx,ME),e(ME,n8e),e(n8e,s9r),e(ME,l9r),e(ME,zY),e(zY,i9r),e(ME,d9r),e(Ir,c9r),M(EE,Ir,null),b(f,IVe,u),b(f,$c,u),e($c,CE),e(CE,s8e),M(gx,s8e,null),e($c,f9r),e($c,l8e),e(l8e,m9r),b(f,NVe,u),b(f,dr,u),M(hx,dr,null),e(dr,g9r),e(dr,kc),e(kc,h9r),e(kc,WY),e(WY,p9r),e(kc,_9r),e(kc,QY),e(QY,u9r),e(kc,b9r),e(dr,v9r),e(dr,px),e(px,F9r),e(px,i8e),e(i8e,T9r),e(px,M9r),e(dr,E9r),e(dr,Dt),M(_x,Dt,null),e(Dt,C9r),e(Dt,d8e),e(d8e,w9r),e(Dt,A9r),e(Dt,Sc),e(Sc,L9r),e(Sc,c8e),e(c8e,y9r),e(Sc,x9r),e(Sc,HY),e(HY,$9r),e(Sc,k9r),e(Dt,S9r),M(wE,Dt,null),e(dr,R9r),e(dr,Nr),M(ux,Nr,null),e(Nr,P9r),e(Nr,f8e),e(f8e,B9r),e(Nr,I9r),e(Nr,pn),e(pn,N9r),e(pn,m8e),e(m8e,q9r),e(pn,j9r),e(pn,g8e),e(g8e,D9r),e(pn,G9r),e(pn,h8e),e(h8e,O9r),e(pn,V9r),e(Nr,X9r),e(Nr,p8e),e(p8e,AE),e(AE,_8e),e(_8e,z9r),e(AE,W9r),e(AE,UY),e(UY,Q9r),e(AE,H9r),e(Nr,U9r),M(LE,Nr,null),b(f,qVe,u),b(f,Rc,u),e(Rc,yE),e(yE,u8e),M(bx,u8e,null),e(Rc,J9r),e(Rc,b8e),e(b8e,Y9r),b(f,jVe,u),b(f,cr,u),M(vx,cr,null),e(cr,K9r),e(cr,Pc),e(Pc,Z9r),e(Pc,JY),e(JY,exr),e(Pc,oxr),e(Pc,YY),e(YY,rxr),e(Pc,txr),e(cr,axr),e(cr,Fx),e(Fx,nxr),e(Fx,v8e),e(v8e,sxr),e(Fx,lxr),e(cr,ixr),e(cr,Gt),M(Tx,Gt,null),e(Gt,dxr),e(Gt,F8e),e(F8e,cxr),e(Gt,fxr),e(Gt,Bc),e(Bc,mxr),e(Bc,T8e),e(T8e,gxr),e(Bc,hxr),e(Bc,KY),e(KY,pxr),e(Bc,_xr),e(Gt,uxr),M(xE,Gt,null),e(cr,bxr),e(cr,qr),M(Mx,qr,null),e(qr,vxr),e(qr,M8e),e(M8e,Fxr),e(qr,Txr),e(qr,_n),e(_n,Mxr),e(_n,E8e),e(E8e,Exr),e(_n,Cxr),e(_n,C8e),e(C8e,wxr),e(_n,Axr),e(_n,w8e),e(w8e,Lxr),e(_n,yxr),e(qr,xxr),e(qr,de),e(de,$E),e($E,A8e),e(A8e,$xr),e($E,kxr),e($E,ZY),e(ZY,Sxr),e($E,Rxr),e(de,Pxr),e(de,kE),e(kE,L8e),e(L8e,Bxr),e(kE,Ixr),e(kE,eK),e(eK,Nxr),e(kE,qxr),e(de,jxr),e(de,SE),e(SE,y8e),e(y8e,Dxr),e(SE,Gxr),e(SE,oK),e(oK,Oxr),e(SE,Vxr),e(de,Xxr),e(de,RE),e(RE,x8e),e(x8e,zxr),e(RE,Wxr),e(RE,rK),e(rK,Qxr),e(RE,Hxr),e(de,Uxr),e(de,PE),e(PE,$8e),e($8e,Jxr),e(PE,Yxr),e(PE,tK),e(tK,Kxr),e(PE,Zxr),e(de,e$r),e(de,BE),e(BE,k8e),e(k8e,o$r),e(BE,r$r),e(BE,aK),e(aK,t$r),e(BE,a$r),e(de,n$r),e(de,IE),e(IE,S8e),e(S8e,s$r),e(IE,l$r),e(IE,nK),e(nK,i$r),e(IE,d$r),e(de,c$r),e(de,NE),e(NE,R8e),e(R8e,f$r),e(NE,m$r),e(NE,sK),e(sK,g$r),e(NE,h$r),e(de,p$r),e(de,qE),e(qE,P8e),e(P8e,_$r),e(qE,u$r),e(qE,lK),e(lK,b$r),e(qE,v$r),e(de,F$r),e(de,jE),e(jE,B8e),e(B8e,T$r),e(jE,M$r),e(jE,iK),e(iK,E$r),e(jE,C$r),e(de,w$r),e(de,DE),e(DE,I8e),e(I8e,A$r),e(DE,L$r),e(DE,dK),e(dK,y$r),e(DE,x$r),e(de,$$r),e(de,GE),e(GE,N8e),e(N8e,k$r),e(GE,S$r),e(GE,cK),e(cK,R$r),e(GE,P$r),e(de,B$r),e(de,OE),e(OE,q8e),e(q8e,I$r),e(OE,N$r),e(OE,fK),e(fK,q$r),e(OE,j$r),e(de,D$r),e(de,VE),e(VE,j8e),e(j8e,G$r),e(VE,O$r),e(VE,mK),e(mK,V$r),e(VE,X$r),e(de,z$r),e(de,XE),e(XE,D8e),e(D8e,W$r),e(XE,Q$r),e(XE,gK),e(gK,H$r),e(XE,U$r),e(de,J$r),e(de,zE),e(zE,G8e),e(G8e,Y$r),e(zE,K$r),e(zE,hK),e(hK,Z$r),e(zE,ekr),e(de,okr),e(de,WE),e(WE,O8e),e(O8e,rkr),e(WE,tkr),e(WE,pK),e(pK,akr),e(WE,nkr),e(de,skr),e(de,QE),e(QE,V8e),e(V8e,lkr),e(QE,ikr),e(QE,_K),e(_K,dkr),e(QE,ckr),e(de,fkr),e(de,HE),e(HE,X8e),e(X8e,mkr),e(HE,gkr),e(HE,uK),e(uK,hkr),e(HE,pkr),e(de,_kr),e(de,UE),e(UE,z8e),e(z8e,ukr),e(UE,bkr),e(UE,bK),e(bK,vkr),e(UE,Fkr),e(qr,Tkr),M(JE,qr,null),b(f,DVe,u),b(f,Ic,u),e(Ic,YE),e(YE,W8e),M(Ex,W8e,null),e(Ic,Mkr),e(Ic,Q8e),e(Q8e,Ekr),b(f,GVe,u),b(f,fr,u),M(Cx,fr,null),e(fr,Ckr),e(fr,Nc),e(Nc,wkr),e(Nc,vK),e(vK,Akr),e(Nc,Lkr),e(Nc,FK),e(FK,ykr),e(Nc,xkr),e(fr,$kr),e(fr,wx),e(wx,kkr),e(wx,H8e),e(H8e,Skr),e(wx,Rkr),e(fr,Pkr),e(fr,Ot),M(Ax,Ot,null),e(Ot,Bkr),e(Ot,U8e),e(U8e,Ikr),e(Ot,Nkr),e(Ot,qc),e(qc,qkr),e(qc,J8e),e(J8e,jkr),e(qc,Dkr),e(qc,TK),e(TK,Gkr),e(qc,Okr),e(Ot,Vkr),M(KE,Ot,null),e(fr,Xkr),e(fr,jr),M(Lx,jr,null),e(jr,zkr),e(jr,Y8e),e(Y8e,Wkr),e(jr,Qkr),e(jr,un),e(un,Hkr),e(un,K8e),e(K8e,Ukr),e(un,Jkr),e(un,Z8e),e(Z8e,Ykr),e(un,Kkr),e(un,eMe),e(eMe,Zkr),e(un,eSr),e(jr,oSr),e(jr,ce),e(ce,ZE),e(ZE,oMe),e(oMe,rSr),e(ZE,tSr),e(ZE,MK),e(MK,aSr),e(ZE,nSr),e(ce,sSr),e(ce,e4),e(e4,rMe),e(rMe,lSr),e(e4,iSr),e(e4,EK),e(EK,dSr),e(e4,cSr),e(ce,fSr),e(ce,o4),e(o4,tMe),e(tMe,mSr),e(o4,gSr),e(o4,CK),e(CK,hSr),e(o4,pSr),e(ce,_Sr),e(ce,r4),e(r4,aMe),e(aMe,uSr),e(r4,bSr),e(r4,wK),e(wK,vSr),e(r4,FSr),e(ce,TSr),e(ce,t4),e(t4,nMe),e(nMe,MSr),e(t4,ESr),e(t4,AK),e(AK,CSr),e(t4,wSr),e(ce,ASr),e(ce,a4),e(a4,sMe),e(sMe,LSr),e(a4,ySr),e(a4,LK),e(LK,xSr),e(a4,$Sr),e(ce,kSr),e(ce,n4),e(n4,lMe),e(lMe,SSr),e(n4,RSr),e(n4,yK),e(yK,PSr),e(n4,BSr),e(ce,ISr),e(ce,s4),e(s4,iMe),e(iMe,NSr),e(s4,qSr),e(s4,xK),e(xK,jSr),e(s4,DSr),e(ce,GSr),e(ce,l4),e(l4,dMe),e(dMe,OSr),e(l4,VSr),e(l4,$K),e($K,XSr),e(l4,zSr),e(ce,WSr),e(ce,i4),e(i4,cMe),e(cMe,QSr),e(i4,HSr),e(i4,kK),e(kK,USr),e(i4,JSr),e(ce,YSr),e(ce,d4),e(d4,fMe),e(fMe,KSr),e(d4,ZSr),e(d4,SK),e(SK,eRr),e(d4,oRr),e(ce,rRr),e(ce,c4),e(c4,mMe),e(mMe,tRr),e(c4,aRr),e(c4,RK),e(RK,nRr),e(c4,sRr),e(ce,lRr),e(ce,f4),e(f4,gMe),e(gMe,iRr),e(f4,dRr),e(f4,PK),e(PK,cRr),e(f4,fRr),e(ce,mRr),e(ce,m4),e(m4,hMe),e(hMe,gRr),e(m4,hRr),e(m4,BK),e(BK,pRr),e(m4,_Rr),e(ce,uRr),e(ce,g4),e(g4,pMe),e(pMe,bRr),e(g4,vRr),e(g4,IK),e(IK,FRr),e(g4,TRr),e(ce,MRr),e(ce,h4),e(h4,_Me),e(_Me,ERr),e(h4,CRr),e(h4,NK),e(NK,wRr),e(h4,ARr),e(ce,LRr),e(ce,p4),e(p4,uMe),e(uMe,yRr),e(p4,xRr),e(p4,qK),e(qK,$Rr),e(p4,kRr),e(ce,SRr),e(ce,_4),e(_4,bMe),e(bMe,RRr),e(_4,PRr),e(_4,jK),e(jK,BRr),e(_4,IRr),e(ce,NRr),e(ce,u4),e(u4,vMe),e(vMe,qRr),e(u4,jRr),e(u4,DK),e(DK,DRr),e(u4,GRr),e(ce,ORr),e(ce,b4),e(b4,FMe),e(FMe,VRr),e(b4,XRr),e(b4,GK),e(GK,zRr),e(b4,WRr),e(jr,QRr),M(v4,jr,null),b(f,OVe,u),b(f,jc,u),e(jc,F4),e(F4,TMe),M(yx,TMe,null),e(jc,HRr),e(jc,MMe),e(MMe,URr),b(f,VVe,u),b(f,mr,u),M(xx,mr,null),e(mr,JRr),e(mr,Dc),e(Dc,YRr),e(Dc,OK),e(OK,KRr),e(Dc,ZRr),e(Dc,VK),e(VK,ePr),e(Dc,oPr),e(mr,rPr),e(mr,$x),e($x,tPr),e($x,EMe),e(EMe,aPr),e($x,nPr),e(mr,sPr),e(mr,Vt),M(kx,Vt,null),e(Vt,lPr),e(Vt,CMe),e(CMe,iPr),e(Vt,dPr),e(Vt,Gc),e(Gc,cPr),e(Gc,wMe),e(wMe,fPr),e(Gc,mPr),e(Gc,XK),e(XK,gPr),e(Gc,hPr),e(Vt,pPr),M(T4,Vt,null),e(mr,_Pr),e(mr,Dr),M(Sx,Dr,null),e(Dr,uPr),e(Dr,AMe),e(AMe,bPr),e(Dr,vPr),e(Dr,bn),e(bn,FPr),e(bn,LMe),e(LMe,TPr),e(bn,MPr),e(bn,yMe),e(yMe,EPr),e(bn,CPr),e(bn,xMe),e(xMe,wPr),e(bn,APr),e(Dr,LPr),e(Dr,$Me),e($Me,M4),e(M4,kMe),e(kMe,yPr),e(M4,xPr),e(M4,zK),e(zK,$Pr),e(M4,kPr),e(Dr,SPr),M(E4,Dr,null),b(f,XVe,u),b(f,Oc,u),e(Oc,C4),e(C4,SMe),M(Rx,SMe,null),e(Oc,RPr),e(Oc,RMe),e(RMe,PPr),b(f,zVe,u),b(f,gr,u),M(Px,gr,null),e(gr,BPr),e(gr,Vc),e(Vc,IPr),e(Vc,WK),e(WK,NPr),e(Vc,qPr),e(Vc,QK),e(QK,jPr),e(Vc,DPr),e(gr,GPr),e(gr,Bx),e(Bx,OPr),e(Bx,PMe),e(PMe,VPr),e(Bx,XPr),e(gr,zPr),e(gr,Xt),M(Ix,Xt,null),e(Xt,WPr),e(Xt,BMe),e(BMe,QPr),e(Xt,HPr),e(Xt,Xc),e(Xc,UPr),e(Xc,IMe),e(IMe,JPr),e(Xc,YPr),e(Xc,HK),e(HK,KPr),e(Xc,ZPr),e(Xt,eBr),M(w4,Xt,null),e(gr,oBr),e(gr,Gr),M(Nx,Gr,null),e(Gr,rBr),e(Gr,NMe),e(NMe,tBr),e(Gr,aBr),e(Gr,vn),e(vn,nBr),e(vn,qMe),e(qMe,sBr),e(vn,lBr),e(vn,jMe),e(jMe,iBr),e(vn,dBr),e(vn,DMe),e(DMe,cBr),e(vn,fBr),e(Gr,mBr),e(Gr,GMe),e(GMe,A4),e(A4,OMe),e(OMe,gBr),e(A4,hBr),e(A4,UK),e(UK,pBr),e(A4,_Br),e(Gr,uBr),M(L4,Gr,null),b(f,WVe,u),b(f,zc,u),e(zc,y4),e(y4,VMe),M(qx,VMe,null),e(zc,bBr),e(zc,XMe),e(XMe,vBr),b(f,QVe,u),b(f,hr,u),M(jx,hr,null),e(hr,FBr),e(hr,Wc),e(Wc,TBr),e(Wc,JK),e(JK,MBr),e(Wc,EBr),e(Wc,YK),e(YK,CBr),e(Wc,wBr),e(hr,ABr),e(hr,Dx),e(Dx,LBr),e(Dx,zMe),e(zMe,yBr),e(Dx,xBr),e(hr,$Br),e(hr,zt),M(Gx,zt,null),e(zt,kBr),e(zt,WMe),e(WMe,SBr),e(zt,RBr),e(zt,Qc),e(Qc,PBr),e(Qc,QMe),e(QMe,BBr),e(Qc,IBr),e(Qc,KK),e(KK,NBr),e(Qc,qBr),e(zt,jBr),M(x4,zt,null),e(hr,DBr),e(hr,Or),M(Ox,Or,null),e(Or,GBr),e(Or,HMe),e(HMe,OBr),e(Or,VBr),e(Or,Fn),e(Fn,XBr),e(Fn,UMe),e(UMe,zBr),e(Fn,WBr),e(Fn,JMe),e(JMe,QBr),e(Fn,HBr),e(Fn,YMe),e(YMe,UBr),e(Fn,JBr),e(Or,YBr),e(Or,oe),e(oe,$4),e($4,KMe),e(KMe,KBr),e($4,ZBr),e($4,ZK),e(ZK,eIr),e($4,oIr),e(oe,rIr),e(oe,k4),e(k4,ZMe),e(ZMe,tIr),e(k4,aIr),e(k4,eZ),e(eZ,nIr),e(k4,sIr),e(oe,lIr),e(oe,S4),e(S4,eEe),e(eEe,iIr),e(S4,dIr),e(S4,oZ),e(oZ,cIr),e(S4,fIr),e(oe,mIr),e(oe,R4),e(R4,oEe),e(oEe,gIr),e(R4,hIr),e(R4,rZ),e(rZ,pIr),e(R4,_Ir),e(oe,uIr),e(oe,P4),e(P4,rEe),e(rEe,bIr),e(P4,vIr),e(P4,tZ),e(tZ,FIr),e(P4,TIr),e(oe,MIr),e(oe,B4),e(B4,tEe),e(tEe,EIr),e(B4,CIr),e(B4,aZ),e(aZ,wIr),e(B4,AIr),e(oe,LIr),e(oe,I4),e(I4,aEe),e(aEe,yIr),e(I4,xIr),e(I4,nZ),e(nZ,$Ir),e(I4,kIr),e(oe,SIr),e(oe,N4),e(N4,nEe),e(nEe,RIr),e(N4,PIr),e(N4,sZ),e(sZ,BIr),e(N4,IIr),e(oe,NIr),e(oe,q4),e(q4,sEe),e(sEe,qIr),e(q4,jIr),e(q4,lZ),e(lZ,DIr),e(q4,GIr),e(oe,OIr),e(oe,j4),e(j4,lEe),e(lEe,VIr),e(j4,XIr),e(j4,iZ),e(iZ,zIr),e(j4,WIr),e(oe,QIr),e(oe,D4),e(D4,iEe),e(iEe,HIr),e(D4,UIr),e(D4,dZ),e(dZ,JIr),e(D4,YIr),e(oe,KIr),e(oe,G4),e(G4,dEe),e(dEe,ZIr),e(G4,eNr),e(G4,cZ),e(cZ,oNr),e(G4,rNr),e(oe,tNr),e(oe,O4),e(O4,cEe),e(cEe,aNr),e(O4,nNr),e(O4,fZ),e(fZ,sNr),e(O4,lNr),e(oe,iNr),e(oe,V4),e(V4,fEe),e(fEe,dNr),e(V4,cNr),e(V4,mZ),e(mZ,fNr),e(V4,mNr),e(oe,gNr),e(oe,X4),e(X4,mEe),e(mEe,hNr),e(X4,pNr),e(X4,gZ),e(gZ,_Nr),e(X4,uNr),e(oe,bNr),e(oe,z4),e(z4,gEe),e(gEe,vNr),e(z4,FNr),e(z4,hZ),e(hZ,TNr),e(z4,MNr),e(oe,ENr),e(oe,W4),e(W4,hEe),e(hEe,CNr),e(W4,wNr),e(W4,pZ),e(pZ,ANr),e(W4,LNr),e(oe,yNr),e(oe,Q4),e(Q4,pEe),e(pEe,xNr),e(Q4,$Nr),e(Q4,_Z),e(_Z,kNr),e(Q4,SNr),e(oe,RNr),e(oe,H4),e(H4,_Ee),e(_Ee,PNr),e(H4,BNr),e(H4,uZ),e(uZ,INr),e(H4,NNr),e(oe,qNr),e(oe,U4),e(U4,uEe),e(uEe,jNr),e(U4,DNr),e(U4,bZ),e(bZ,GNr),e(U4,ONr),e(oe,VNr),e(oe,J4),e(J4,bEe),e(bEe,XNr),e(J4,zNr),e(J4,vZ),e(vZ,WNr),e(J4,QNr),e(oe,HNr),e(oe,Y4),e(Y4,vEe),e(vEe,UNr),e(Y4,JNr),e(Y4,FZ),e(FZ,YNr),e(Y4,KNr),e(oe,ZNr),e(oe,K4),e(K4,FEe),e(FEe,eqr),e(K4,oqr),e(K4,TZ),e(TZ,rqr),e(K4,tqr),e(oe,aqr),e(oe,Z4),e(Z4,TEe),e(TEe,nqr),e(Z4,sqr),e(Z4,MZ),e(MZ,lqr),e(Z4,iqr),e(oe,dqr),e(oe,eC),e(eC,MEe),e(MEe,cqr),e(eC,fqr),e(eC,EZ),e(EZ,mqr),e(eC,gqr),e(oe,hqr),e(oe,oC),e(oC,EEe),e(EEe,pqr),e(oC,_qr),e(oC,CZ),e(CZ,uqr),e(oC,bqr),e(oe,vqr),e(oe,rC),e(rC,CEe),e(CEe,Fqr),e(rC,Tqr),e(rC,wZ),e(wZ,Mqr),e(rC,Eqr),e(Or,Cqr),M(tC,Or,null),b(f,HVe,u),b(f,Hc,u),e(Hc,aC),e(aC,wEe),M(Vx,wEe,null),e(Hc,wqr),e(Hc,AEe),e(AEe,Aqr),b(f,UVe,u),b(f,pr,u),M(Xx,pr,null),e(pr,Lqr),e(pr,Uc),e(Uc,yqr),e(Uc,AZ),e(AZ,xqr),e(Uc,$qr),e(Uc,LZ),e(LZ,kqr),e(Uc,Sqr),e(pr,Rqr),e(pr,zx),e(zx,Pqr),e(zx,LEe),e(LEe,Bqr),e(zx,Iqr),e(pr,Nqr),e(pr,Wt),M(Wx,Wt,null),e(Wt,qqr),e(Wt,yEe),e(yEe,jqr),e(Wt,Dqr),e(Wt,Jc),e(Jc,Gqr),e(Jc,xEe),e(xEe,Oqr),e(Jc,Vqr),e(Jc,yZ),e(yZ,Xqr),e(Jc,zqr),e(Wt,Wqr),M(nC,Wt,null),e(pr,Qqr),e(pr,Vr),M(Qx,Vr,null),e(Vr,Hqr),e(Vr,$Ee),e($Ee,Uqr),e(Vr,Jqr),e(Vr,Tn),e(Tn,Yqr),e(Tn,kEe),e(kEe,Kqr),e(Tn,Zqr),e(Tn,SEe),e(SEe,ejr),e(Tn,ojr),e(Tn,REe),e(REe,rjr),e(Tn,tjr),e(Vr,ajr),e(Vr,xe),e(xe,sC),e(sC,PEe),e(PEe,njr),e(sC,sjr),e(sC,xZ),e(xZ,ljr),e(sC,ijr),e(xe,djr),e(xe,lC),e(lC,BEe),e(BEe,cjr),e(lC,fjr),e(lC,$Z),e($Z,mjr),e(lC,gjr),e(xe,hjr),e(xe,iC),e(iC,IEe),e(IEe,pjr),e(iC,_jr),e(iC,kZ),e(kZ,ujr),e(iC,bjr),e(xe,vjr),e(xe,dC),e(dC,NEe),e(NEe,Fjr),e(dC,Tjr),e(dC,SZ),e(SZ,Mjr),e(dC,Ejr),e(xe,Cjr),e(xe,cC),e(cC,qEe),e(qEe,wjr),e(cC,Ajr),e(cC,RZ),e(RZ,Ljr),e(cC,yjr),e(xe,xjr),e(xe,fC),e(fC,jEe),e(jEe,$jr),e(fC,kjr),e(fC,PZ),e(PZ,Sjr),e(fC,Rjr),e(xe,Pjr),e(xe,mC),e(mC,DEe),e(DEe,Bjr),e(mC,Ijr),e(mC,BZ),e(BZ,Njr),e(mC,qjr),e(xe,jjr),e(xe,gC),e(gC,GEe),e(GEe,Djr),e(gC,Gjr),e(gC,IZ),e(IZ,Ojr),e(gC,Vjr),e(xe,Xjr),e(xe,hC),e(hC,OEe),e(OEe,zjr),e(hC,Wjr),e(hC,NZ),e(NZ,Qjr),e(hC,Hjr),e(xe,Ujr),e(xe,pC),e(pC,VEe),e(VEe,Jjr),e(pC,Yjr),e(pC,qZ),e(qZ,Kjr),e(pC,Zjr),e(Vr,eDr),M(_C,Vr,null),b(f,JVe,u),b(f,Yc,u),e(Yc,uC),e(uC,XEe),M(Hx,XEe,null),e(Yc,oDr),e(Yc,zEe),e(zEe,rDr),b(f,YVe,u),b(f,_r,u),M(Ux,_r,null),e(_r,tDr),e(_r,Kc),e(Kc,aDr),e(Kc,jZ),e(jZ,nDr),e(Kc,sDr),e(Kc,DZ),e(DZ,lDr),e(Kc,iDr),e(_r,dDr),e(_r,Jx),e(Jx,cDr),e(Jx,WEe),e(WEe,fDr),e(Jx,mDr),e(_r,gDr),e(_r,Qt),M(Yx,Qt,null),e(Qt,hDr),e(Qt,QEe),e(QEe,pDr),e(Qt,_Dr),e(Qt,Zc),e(Zc,uDr),e(Zc,HEe),e(HEe,bDr),e(Zc,vDr),e(Zc,GZ),e(GZ,FDr),e(Zc,TDr),e(Qt,MDr),M(bC,Qt,null),e(_r,EDr),e(_r,Xr),M(Kx,Xr,null),e(Xr,CDr),e(Xr,UEe),e(UEe,wDr),e(Xr,ADr),e(Xr,Mn),e(Mn,LDr),e(Mn,JEe),e(JEe,yDr),e(Mn,xDr),e(Mn,YEe),e(YEe,$Dr),e(Mn,kDr),e(Mn,KEe),e(KEe,SDr),e(Mn,RDr),e(Xr,PDr),e(Xr,Ee),e(Ee,vC),e(vC,ZEe),e(ZEe,BDr),e(vC,IDr),e(vC,OZ),e(OZ,NDr),e(vC,qDr),e(Ee,jDr),e(Ee,FC),e(FC,e4e),e(e4e,DDr),e(FC,GDr),e(FC,VZ),e(VZ,ODr),e(FC,VDr),e(Ee,XDr),e(Ee,TC),e(TC,o4e),e(o4e,zDr),e(TC,WDr),e(TC,XZ),e(XZ,QDr),e(TC,HDr),e(Ee,UDr),e(Ee,MC),e(MC,r4e),e(r4e,JDr),e(MC,YDr),e(MC,zZ),e(zZ,KDr),e(MC,ZDr),e(Ee,eGr),e(Ee,EC),e(EC,t4e),e(t4e,oGr),e(EC,rGr),e(EC,WZ),e(WZ,tGr),e(EC,aGr),e(Ee,nGr),e(Ee,CC),e(CC,a4e),e(a4e,sGr),e(CC,lGr),e(CC,QZ),e(QZ,iGr),e(CC,dGr),e(Ee,cGr),e(Ee,wC),e(wC,n4e),e(n4e,fGr),e(wC,mGr),e(wC,HZ),e(HZ,gGr),e(wC,hGr),e(Ee,pGr),e(Ee,AC),e(AC,s4e),e(s4e,_Gr),e(AC,uGr),e(AC,UZ),e(UZ,bGr),e(AC,vGr),e(Ee,FGr),e(Ee,LC),e(LC,l4e),e(l4e,TGr),e(LC,MGr),e(LC,JZ),e(JZ,EGr),e(LC,CGr),e(Ee,wGr),e(Ee,yC),e(yC,i4e),e(i4e,AGr),e(yC,LGr),e(yC,YZ),e(YZ,yGr),e(yC,xGr),e(Ee,$Gr),e(Ee,xC),e(xC,d4e),e(d4e,kGr),e(xC,SGr),e(xC,KZ),e(KZ,RGr),e(xC,PGr),e(Ee,BGr),e(Ee,$C),e($C,c4e),e(c4e,IGr),e($C,NGr),e($C,ZZ),e(ZZ,qGr),e($C,jGr),e(Ee,DGr),e(Ee,kC),e(kC,f4e),e(f4e,GGr),e(kC,OGr),e(kC,eee),e(eee,VGr),e(kC,XGr),e(Xr,zGr),M(SC,Xr,null),b(f,KVe,u),b(f,ef,u),e(ef,RC),e(RC,m4e),M(Zx,m4e,null),e(ef,WGr),e(ef,g4e),e(g4e,QGr),b(f,ZVe,u),b(f,ur,u),M(e$,ur,null),e(ur,HGr),e(ur,of),e(of,UGr),e(of,oee),e(oee,JGr),e(of,YGr),e(of,ree),e(ree,KGr),e(of,ZGr),e(ur,eOr),e(ur,o$),e(o$,oOr),e(o$,h4e),e(h4e,rOr),e(o$,tOr),e(ur,aOr),e(ur,Ht),M(r$,Ht,null),e(Ht,nOr),e(Ht,p4e),e(p4e,sOr),e(Ht,lOr),e(Ht,rf),e(rf,iOr),e(rf,_4e),e(_4e,dOr),e(rf,cOr),e(rf,tee),e(tee,fOr),e(rf,mOr),e(Ht,gOr),M(PC,Ht,null),e(ur,hOr),e(ur,zr),M(t$,zr,null),e(zr,pOr),e(zr,u4e),e(u4e,_Or),e(zr,uOr),e(zr,En),e(En,bOr),e(En,b4e),e(b4e,vOr),e(En,FOr),e(En,v4e),e(v4e,TOr),e(En,MOr),e(En,F4e),e(F4e,EOr),e(En,COr),e(zr,wOr),e(zr,$e),e($e,BC),e(BC,T4e),e(T4e,AOr),e(BC,LOr),e(BC,aee),e(aee,yOr),e(BC,xOr),e($e,$Or),e($e,IC),e(IC,M4e),e(M4e,kOr),e(IC,SOr),e(IC,nee),e(nee,ROr),e(IC,POr),e($e,BOr),e($e,NC),e(NC,E4e),e(E4e,IOr),e(NC,NOr),e(NC,see),e(see,qOr),e(NC,jOr),e($e,DOr),e($e,qC),e(qC,C4e),e(C4e,GOr),e(qC,OOr),e(qC,lee),e(lee,VOr),e(qC,XOr),e($e,zOr),e($e,jC),e(jC,w4e),e(w4e,WOr),e(jC,QOr),e(jC,iee),e(iee,HOr),e(jC,UOr),e($e,JOr),e($e,DC),e(DC,A4e),e(A4e,YOr),e(DC,KOr),e(DC,dee),e(dee,ZOr),e(DC,eVr),e($e,oVr),e($e,GC),e(GC,L4e),e(L4e,rVr),e(GC,tVr),e(GC,cee),e(cee,aVr),e(GC,nVr),e($e,sVr),e($e,OC),e(OC,y4e),e(y4e,lVr),e(OC,iVr),e(OC,fee),e(fee,dVr),e(OC,cVr),e($e,fVr),e($e,VC),e(VC,x4e),e(x4e,mVr),e(VC,gVr),e(VC,mee),e(mee,hVr),e(VC,pVr),e($e,_Vr),e($e,XC),e(XC,$4e),e($4e,uVr),e(XC,bVr),e(XC,gee),e(gee,vVr),e(XC,FVr),e(zr,TVr),M(zC,zr,null),b(f,eXe,u),b(f,tf,u),e(tf,WC),e(WC,k4e),M(a$,k4e,null),e(tf,MVr),e(tf,S4e),e(S4e,EVr),b(f,oXe,u),b(f,br,u),M(n$,br,null),e(br,CVr),e(br,af),e(af,wVr),e(af,hee),e(hee,AVr),e(af,LVr),e(af,pee),e(pee,yVr),e(af,xVr),e(br,$Vr),e(br,s$),e(s$,kVr),e(s$,R4e),e(R4e,SVr),e(s$,RVr),e(br,PVr),e(br,Ut),M(l$,Ut,null),e(Ut,BVr),e(Ut,P4e),e(P4e,IVr),e(Ut,NVr),e(Ut,nf),e(nf,qVr),e(nf,B4e),e(B4e,jVr),e(nf,DVr),e(nf,_ee),e(_ee,GVr),e(nf,OVr),e(Ut,VVr),M(QC,Ut,null),e(br,XVr),e(br,Wr),M(i$,Wr,null),e(Wr,zVr),e(Wr,I4e),e(I4e,WVr),e(Wr,QVr),e(Wr,Cn),e(Cn,HVr),e(Cn,N4e),e(N4e,UVr),e(Cn,JVr),e(Cn,q4e),e(q4e,YVr),e(Cn,KVr),e(Cn,j4e),e(j4e,ZVr),e(Cn,eXr),e(Wr,oXr),e(Wr,ke),e(ke,HC),e(HC,D4e),e(D4e,rXr),e(HC,tXr),e(HC,uee),e(uee,aXr),e(HC,nXr),e(ke,sXr),e(ke,UC),e(UC,G4e),e(G4e,lXr),e(UC,iXr),e(UC,bee),e(bee,dXr),e(UC,cXr),e(ke,fXr),e(ke,JC),e(JC,O4e),e(O4e,mXr),e(JC,gXr),e(JC,vee),e(vee,hXr),e(JC,pXr),e(ke,_Xr),e(ke,YC),e(YC,V4e),e(V4e,uXr),e(YC,bXr),e(YC,Fee),e(Fee,vXr),e(YC,FXr),e(ke,TXr),e(ke,KC),e(KC,X4e),e(X4e,MXr),e(KC,EXr),e(KC,Tee),e(Tee,CXr),e(KC,wXr),e(ke,AXr),e(ke,ZC),e(ZC,z4e),e(z4e,LXr),e(ZC,yXr),e(ZC,Mee),e(Mee,xXr),e(ZC,$Xr),e(ke,kXr),e(ke,e5),e(e5,W4e),e(W4e,SXr),e(e5,RXr),e(e5,Eee),e(Eee,PXr),e(e5,BXr),e(ke,IXr),e(ke,o5),e(o5,Q4e),e(Q4e,NXr),e(o5,qXr),e(o5,Cee),e(Cee,jXr),e(o5,DXr),e(ke,GXr),e(ke,r5),e(r5,H4e),e(H4e,OXr),e(r5,VXr),e(r5,wee),e(wee,XXr),e(r5,zXr),e(ke,WXr),e(ke,t5),e(t5,U4e),e(U4e,QXr),e(t5,HXr),e(t5,Aee),e(Aee,UXr),e(t5,JXr),e(Wr,YXr),M(a5,Wr,null),b(f,rXe,u),b(f,sf,u),e(sf,n5),e(n5,J4e),M(d$,J4e,null),e(sf,KXr),e(sf,Y4e),e(Y4e,ZXr),b(f,tXe,u),b(f,vr,u),M(c$,vr,null),e(vr,ezr),e(vr,lf),e(lf,ozr),e(lf,Lee),e(Lee,rzr),e(lf,tzr),e(lf,yee),e(yee,azr),e(lf,nzr),e(vr,szr),e(vr,f$),e(f$,lzr),e(f$,K4e),e(K4e,izr),e(f$,dzr),e(vr,czr),e(vr,Jt),M(m$,Jt,null),e(Jt,fzr),e(Jt,Z4e),e(Z4e,mzr),e(Jt,gzr),e(Jt,df),e(df,hzr),e(df,eCe),e(eCe,pzr),e(df,_zr),e(df,xee),e(xee,uzr),e(df,bzr),e(Jt,vzr),M(s5,Jt,null),e(vr,Fzr),e(vr,Qr),M(g$,Qr,null),e(Qr,Tzr),e(Qr,oCe),e(oCe,Mzr),e(Qr,Ezr),e(Qr,wn),e(wn,Czr),e(wn,rCe),e(rCe,wzr),e(wn,Azr),e(wn,tCe),e(tCe,Lzr),e(wn,yzr),e(wn,aCe),e(aCe,xzr),e(wn,$zr),e(Qr,kzr),e(Qr,Se),e(Se,l5),e(l5,nCe),e(nCe,Szr),e(l5,Rzr),e(l5,$ee),e($ee,Pzr),e(l5,Bzr),e(Se,Izr),e(Se,i5),e(i5,sCe),e(sCe,Nzr),e(i5,qzr),e(i5,kee),e(kee,jzr),e(i5,Dzr),e(Se,Gzr),e(Se,d5),e(d5,lCe),e(lCe,Ozr),e(d5,Vzr),e(d5,See),e(See,Xzr),e(d5,zzr),e(Se,Wzr),e(Se,c5),e(c5,iCe),e(iCe,Qzr),e(c5,Hzr),e(c5,Ree),e(Ree,Uzr),e(c5,Jzr),e(Se,Yzr),e(Se,f5),e(f5,dCe),e(dCe,Kzr),e(f5,Zzr),e(f5,Pee),e(Pee,eWr),e(f5,oWr),e(Se,rWr),e(Se,m5),e(m5,cCe),e(cCe,tWr),e(m5,aWr),e(m5,Bee),e(Bee,nWr),e(m5,sWr),e(Se,lWr),e(Se,g5),e(g5,fCe),e(fCe,iWr),e(g5,dWr),e(g5,Iee),e(Iee,cWr),e(g5,fWr),e(Se,mWr),e(Se,h5),e(h5,mCe),e(mCe,gWr),e(h5,hWr),e(h5,Nee),e(Nee,pWr),e(h5,_Wr),e(Se,uWr),e(Se,p5),e(p5,gCe),e(gCe,bWr),e(p5,vWr),e(p5,qee),e(qee,FWr),e(p5,TWr),e(Se,MWr),e(Se,_5),e(_5,hCe),e(hCe,EWr),e(_5,CWr),e(_5,jee),e(jee,wWr),e(_5,AWr),e(Qr,LWr),M(u5,Qr,null),b(f,aXe,u),b(f,cf,u),e(cf,b5),e(b5,pCe),M(h$,pCe,null),e(cf,yWr),e(cf,_Ce),e(_Ce,xWr),b(f,nXe,u),b(f,Fr,u),M(p$,Fr,null),e(Fr,$Wr),e(Fr,ff),e(ff,kWr),e(ff,Dee),e(Dee,SWr),e(ff,RWr),e(ff,Gee),e(Gee,PWr),e(ff,BWr),e(Fr,IWr),e(Fr,_$),e(_$,NWr),e(_$,uCe),e(uCe,qWr),e(_$,jWr),e(Fr,DWr),e(Fr,Yt),M(u$,Yt,null),e(Yt,GWr),e(Yt,bCe),e(bCe,OWr),e(Yt,VWr),e(Yt,mf),e(mf,XWr),e(mf,vCe),e(vCe,zWr),e(mf,WWr),e(mf,Oee),e(Oee,QWr),e(mf,HWr),e(Yt,UWr),M(v5,Yt,null),e(Fr,JWr),e(Fr,Hr),M(b$,Hr,null),e(Hr,YWr),e(Hr,FCe),e(FCe,KWr),e(Hr,ZWr),e(Hr,An),e(An,eQr),e(An,TCe),e(TCe,oQr),e(An,rQr),e(An,MCe),e(MCe,tQr),e(An,aQr),e(An,ECe),e(ECe,nQr),e(An,sQr),e(Hr,lQr),e(Hr,Re),e(Re,F5),e(F5,CCe),e(CCe,iQr),e(F5,dQr),e(F5,Vee),e(Vee,cQr),e(F5,fQr),e(Re,mQr),e(Re,T5),e(T5,wCe),e(wCe,gQr),e(T5,hQr),e(T5,Xee),e(Xee,pQr),e(T5,_Qr),e(Re,uQr),e(Re,M5),e(M5,ACe),e(ACe,bQr),e(M5,vQr),e(M5,zee),e(zee,FQr),e(M5,TQr),e(Re,MQr),e(Re,E5),e(E5,LCe),e(LCe,EQr),e(E5,CQr),e(E5,Wee),e(Wee,wQr),e(E5,AQr),e(Re,LQr),e(Re,C5),e(C5,yCe),e(yCe,yQr),e(C5,xQr),e(C5,Qee),e(Qee,$Qr),e(C5,kQr),e(Re,SQr),e(Re,w5),e(w5,xCe),e(xCe,RQr),e(w5,PQr),e(w5,Hee),e(Hee,BQr),e(w5,IQr),e(Re,NQr),e(Re,A5),e(A5,$Ce),e($Ce,qQr),e(A5,jQr),e(A5,Uee),e(Uee,DQr),e(A5,GQr),e(Re,OQr),e(Re,L5),e(L5,kCe),e(kCe,VQr),e(L5,XQr),e(L5,Jee),e(Jee,zQr),e(L5,WQr),e(Re,QQr),e(Re,y5),e(y5,SCe),e(SCe,HQr),e(y5,UQr),e(y5,Yee),e(Yee,JQr),e(y5,YQr),e(Re,KQr),e(Re,x5),e(x5,RCe),e(RCe,ZQr),e(x5,eHr),e(x5,Kee),e(Kee,oHr),e(x5,rHr),e(Hr,tHr),M($5,Hr,null),b(f,sXe,u),b(f,gf,u),e(gf,k5),e(k5,PCe),M(v$,PCe,null),e(gf,aHr),e(gf,BCe),e(BCe,nHr),b(f,lXe,u),b(f,Tr,u),M(F$,Tr,null),e(Tr,sHr),e(Tr,hf),e(hf,lHr),e(hf,Zee),e(Zee,iHr),e(hf,dHr),e(hf,eoe),e(eoe,cHr),e(hf,fHr),e(Tr,mHr),e(Tr,T$),e(T$,gHr),e(T$,ICe),e(ICe,hHr),e(T$,pHr),e(Tr,_Hr),e(Tr,Kt),M(M$,Kt,null),e(Kt,uHr),e(Kt,NCe),e(NCe,bHr),e(Kt,vHr),e(Kt,pf),e(pf,FHr),e(pf,qCe),e(qCe,THr),e(pf,MHr),e(pf,ooe),e(ooe,EHr),e(pf,CHr),e(Kt,wHr),M(S5,Kt,null),e(Tr,AHr),e(Tr,Ur),M(E$,Ur,null),e(Ur,LHr),e(Ur,jCe),e(jCe,yHr),e(Ur,xHr),e(Ur,Ln),e(Ln,$Hr),e(Ln,DCe),e(DCe,kHr),e(Ln,SHr),e(Ln,GCe),e(GCe,RHr),e(Ln,PHr),e(Ln,OCe),e(OCe,BHr),e(Ln,IHr),e(Ur,NHr),e(Ur,Ve),e(Ve,R5),e(R5,VCe),e(VCe,qHr),e(R5,jHr),e(R5,roe),e(roe,DHr),e(R5,GHr),e(Ve,OHr),e(Ve,P5),e(P5,XCe),e(XCe,VHr),e(P5,XHr),e(P5,toe),e(toe,zHr),e(P5,WHr),e(Ve,QHr),e(Ve,B5),e(B5,zCe),e(zCe,HHr),e(B5,UHr),e(B5,aoe),e(aoe,JHr),e(B5,YHr),e(Ve,KHr),e(Ve,I5),e(I5,WCe),e(WCe,ZHr),e(I5,eUr),e(I5,noe),e(noe,oUr),e(I5,rUr),e(Ve,tUr),e(Ve,N5),e(N5,QCe),e(QCe,aUr),e(N5,nUr),e(N5,soe),e(soe,sUr),e(N5,lUr),e(Ve,iUr),e(Ve,q5),e(q5,HCe),e(HCe,dUr),e(q5,cUr),e(q5,loe),e(loe,fUr),e(q5,mUr),e(Ve,gUr),e(Ve,j5),e(j5,UCe),e(UCe,hUr),e(j5,pUr),e(j5,ioe),e(ioe,_Ur),e(j5,uUr),e(Ve,bUr),e(Ve,D5),e(D5,JCe),e(JCe,vUr),e(D5,FUr),e(D5,doe),e(doe,TUr),e(D5,MUr),e(Ur,EUr),M(G5,Ur,null),b(f,iXe,u),b(f,_f,u),e(_f,O5),e(O5,YCe),M(C$,YCe,null),e(_f,CUr),e(_f,KCe),e(KCe,wUr),b(f,dXe,u),b(f,Mr,u),M(w$,Mr,null),e(Mr,AUr),e(Mr,uf),e(uf,LUr),e(uf,coe),e(coe,yUr),e(uf,xUr),e(uf,foe),e(foe,$Ur),e(uf,kUr),e(Mr,SUr),e(Mr,A$),e(A$,RUr),e(A$,ZCe),e(ZCe,PUr),e(A$,BUr),e(Mr,IUr),e(Mr,Zt),M(L$,Zt,null),e(Zt,NUr),e(Zt,e5e),e(e5e,qUr),e(Zt,jUr),e(Zt,bf),e(bf,DUr),e(bf,o5e),e(o5e,GUr),e(bf,OUr),e(bf,moe),e(moe,VUr),e(bf,XUr),e(Zt,zUr),M(V5,Zt,null),e(Mr,WUr),e(Mr,Jr),M(y$,Jr,null),e(Jr,QUr),e(Jr,r5e),e(r5e,HUr),e(Jr,UUr),e(Jr,yn),e(yn,JUr),e(yn,t5e),e(t5e,YUr),e(yn,KUr),e(yn,a5e),e(a5e,ZUr),e(yn,eJr),e(yn,n5e),e(n5e,oJr),e(yn,rJr),e(Jr,tJr),e(Jr,Xe),e(Xe,X5),e(X5,s5e),e(s5e,aJr),e(X5,nJr),e(X5,goe),e(goe,sJr),e(X5,lJr),e(Xe,iJr),e(Xe,z5),e(z5,l5e),e(l5e,dJr),e(z5,cJr),e(z5,hoe),e(hoe,fJr),e(z5,mJr),e(Xe,gJr),e(Xe,W5),e(W5,i5e),e(i5e,hJr),e(W5,pJr),e(W5,poe),e(poe,_Jr),e(W5,uJr),e(Xe,bJr),e(Xe,Q5),e(Q5,d5e),e(d5e,vJr),e(Q5,FJr),e(Q5,_oe),e(_oe,TJr),e(Q5,MJr),e(Xe,EJr),e(Xe,H5),e(H5,c5e),e(c5e,CJr),e(H5,wJr),e(H5,uoe),e(uoe,AJr),e(H5,LJr),e(Xe,yJr),e(Xe,U5),e(U5,f5e),e(f5e,xJr),e(U5,$Jr),e(U5,boe),e(boe,kJr),e(U5,SJr),e(Xe,RJr),e(Xe,J5),e(J5,m5e),e(m5e,PJr),e(J5,BJr),e(J5,voe),e(voe,IJr),e(J5,NJr),e(Xe,qJr),e(Xe,Y5),e(Y5,g5e),e(g5e,jJr),e(Y5,DJr),e(Y5,Foe),e(Foe,GJr),e(Y5,OJr),e(Jr,VJr),M(K5,Jr,null),b(f,cXe,u),b(f,vf,u),e(vf,Z5),e(Z5,h5e),M(x$,h5e,null),e(vf,XJr),e(vf,p5e),e(p5e,zJr),b(f,fXe,u),b(f,Er,u),M($$,Er,null),e(Er,WJr),e(Er,Ff),e(Ff,QJr),e(Ff,Toe),e(Toe,HJr),e(Ff,UJr),e(Ff,Moe),e(Moe,JJr),e(Ff,YJr),e(Er,KJr),e(Er,k$),e(k$,ZJr),e(k$,_5e),e(_5e,eYr),e(k$,oYr),e(Er,rYr),e(Er,ea),M(S$,ea,null),e(ea,tYr),e(ea,u5e),e(u5e,aYr),e(ea,nYr),e(ea,Tf),e(Tf,sYr),e(Tf,b5e),e(b5e,lYr),e(Tf,iYr),e(Tf,Eoe),e(Eoe,dYr),e(Tf,cYr),e(ea,fYr),M(e3,ea,null),e(Er,mYr),e(Er,Yr),M(R$,Yr,null),e(Yr,gYr),e(Yr,v5e),e(v5e,hYr),e(Yr,pYr),e(Yr,xn),e(xn,_Yr),e(xn,F5e),e(F5e,uYr),e(xn,bYr),e(xn,T5e),e(T5e,vYr),e(xn,FYr),e(xn,M5e),e(M5e,TYr),e(xn,MYr),e(Yr,EYr),e(Yr,E5e),e(E5e,o3),e(o3,C5e),e(C5e,CYr),e(o3,wYr),e(o3,Coe),e(Coe,AYr),e(o3,LYr),e(Yr,yYr),M(r3,Yr,null),b(f,mXe,u),b(f,Mf,u),e(Mf,t3),e(t3,w5e),M(P$,w5e,null),e(Mf,xYr),e(Mf,A5e),e(A5e,$Yr),b(f,gXe,u),b(f,Cr,u),M(B$,Cr,null),e(Cr,kYr),e(Cr,Ef),e(Ef,SYr),e(Ef,woe),e(woe,RYr),e(Ef,PYr),e(Ef,Aoe),e(Aoe,BYr),e(Ef,IYr),e(Cr,NYr),e(Cr,I$),e(I$,qYr),e(I$,L5e),e(L5e,jYr),e(I$,DYr),e(Cr,GYr),e(Cr,oa),M(N$,oa,null),e(oa,OYr),e(oa,y5e),e(y5e,VYr),e(oa,XYr),e(oa,Cf),e(Cf,zYr),e(Cf,x5e),e(x5e,WYr),e(Cf,QYr),e(Cf,Loe),e(Loe,HYr),e(Cf,UYr),e(oa,JYr),M(a3,oa,null),e(Cr,YYr),e(Cr,Kr),M(q$,Kr,null),e(Kr,KYr),e(Kr,$5e),e($5e,ZYr),e(Kr,eKr),e(Kr,$n),e($n,oKr),e($n,k5e),e(k5e,rKr),e($n,tKr),e($n,S5e),e(S5e,aKr),e($n,nKr),e($n,R5e),e(R5e,sKr),e($n,lKr),e(Kr,iKr),e(Kr,j$),e(j$,n3),e(n3,P5e),e(P5e,dKr),e(n3,cKr),e(n3,yoe),e(yoe,fKr),e(n3,mKr),e(j$,gKr),e(j$,s3),e(s3,B5e),e(B5e,hKr),e(s3,pKr),e(s3,xoe),e(xoe,_Kr),e(s3,uKr),e(Kr,bKr),M(l3,Kr,null),b(f,hXe,u),b(f,wf,u),e(wf,i3),e(i3,I5e),M(D$,I5e,null),e(wf,vKr),e(wf,N5e),e(N5e,FKr),b(f,pXe,u),b(f,wr,u),M(G$,wr,null),e(wr,TKr),e(wr,Af),e(Af,MKr),e(Af,$oe),e($oe,EKr),e(Af,CKr),e(Af,koe),e(koe,wKr),e(Af,AKr),e(wr,LKr),e(wr,O$),e(O$,yKr),e(O$,q5e),e(q5e,xKr),e(O$,$Kr),e(wr,kKr),e(wr,ra),M(V$,ra,null),e(ra,SKr),e(ra,j5e),e(j5e,RKr),e(ra,PKr),e(ra,Lf),e(Lf,BKr),e(Lf,D5e),e(D5e,IKr),e(Lf,NKr),e(Lf,Soe),e(Soe,qKr),e(Lf,jKr),e(ra,DKr),M(d3,ra,null),e(wr,GKr),e(wr,Zr),M(X$,Zr,null),e(Zr,OKr),e(Zr,G5e),e(G5e,VKr),e(Zr,XKr),e(Zr,kn),e(kn,zKr),e(kn,O5e),e(O5e,WKr),e(kn,QKr),e(kn,V5e),e(V5e,HKr),e(kn,UKr),e(kn,X5e),e(X5e,JKr),e(kn,YKr),e(Zr,KKr),e(Zr,z5e),e(z5e,c3),e(c3,W5e),e(W5e,ZKr),e(c3,eZr),e(c3,Roe),e(Roe,oZr),e(c3,rZr),e(Zr,tZr),M(f3,Zr,null),_Xe=!0},p(f,[u]){const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),If.$set(z$);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),zg.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),Lh.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),ip.$set(U5e);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),dp.$set(W$);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),xp.$set(J5e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),$p.$set(Sn);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),Rp.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),Pu.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),Iu.$set(Z5e);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),y1.$set(Q$);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),$1.$set(e3e);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),u2.$set(H$);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),v2.$set(o3e);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),ab.$set(U$);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),sb.$set(r3e);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),wb.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),Lb.$set(a3e);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),Cv.$set(yf);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),Av.$set(n3e);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),a0.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),s0.$set(l3e);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),h0.$set(J$);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),_0.$set(i3e);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),eF.$set(d3e);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),rF.$set(c3e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),zF.$set(tt);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),QF.$set(Y$);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),JF.$set(f3e);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),KF.$set(K$);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),m6.$set(m3e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),h6.$set(at);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),u6.$set(g3e);const xf={};u&2&&(xf.$$scope={dirty:u,ctx:f}),v6.$set(xf);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),M6.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),C6.$set(p3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),B6.$set(L);const m3={};u&2&&(m3.$$scope={dirty:u,ctx:f}),N6.$set(m3);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),X6.$set(_3e);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),W6.$set(u3e);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),aT.$set(g3);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),sT.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),cT.$set(v3e);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),mT.$set(h3);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),vT.$set(F3e);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),TT.$set(T3e);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),AT.$set(p3);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),yT.$set(M3e);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),ST.$set(E3e);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),PT.$set(_3);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),NT.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),jT.$set(w3e);const u3={};u&2&&(u3.$$scope={dirty:u,ctx:f}),zT.$set(u3);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),QT.$set(A3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),JT.$set(L3e);const b3={};u&2&&(b3.$$scope={dirty:u,ctx:f}),KT.$set(b3);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),W7.$set(y3e);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),H7.$set(x3e);const v3={};u&2&&(v3.$$scope={dirty:u,ctx:f}),b8.$set(v3);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),F8.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),P8.$set(k3e);const F3={};u&2&&(F3.$$scope={dirty:u,ctx:f}),I8.$set(F3);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),G8.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),V8.$set(R3e);const T3={};u&2&&(T3.$$scope={dirty:u,ctx:f}),cM.$set(T3);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),mM.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),EM.$set(B3e);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),wM.$set(M3);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),KM.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),eE.$set(N3e);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),bE.$set(E3);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),FE.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),EE.$set(j3e);const C3={};u&2&&(C3.$$scope={dirty:u,ctx:f}),wE.$set(C3);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),LE.$set(D3e);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),xE.$set(G3e);const w3={};u&2&&(w3.$$scope={dirty:u,ctx:f}),JE.$set(w3);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),KE.$set(O3e);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),v4.$set(V3e);const A3={};u&2&&(A3.$$scope={dirty:u,ctx:f}),T4.$set(A3);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),E4.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),w4.$set(z3e);const L3={};u&2&&(L3.$$scope={dirty:u,ctx:f}),L4.$set(L3);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),x4.$set(W3e);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),tC.$set(Q3e);const y3={};u&2&&(y3.$$scope={dirty:u,ctx:f}),nC.$set(y3);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),_C.$set(H3e);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),bC.$set(U3e);const x3={};u&2&&(x3.$$scope={dirty:u,ctx:f}),SC.$set(x3);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),PC.$set(J3e);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),zC.$set(Y3e);const $3={};u&2&&($3.$$scope={dirty:u,ctx:f}),QC.$set($3);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),a5.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),s5.$set(Z3e);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),u5.$set(k3);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),v5.$set(ewe);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),$5.$set(owe);const S3={};u&2&&(S3.$$scope={dirty:u,ctx:f}),S5.$set(S3);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),G5.$set(rwe);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),V5.$set(twe);const R3={};u&2&&(R3.$$scope={dirty:u,ctx:f}),K5.$set(R3);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),e3.$set(awe);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),r3.$set(nwe);const P3={};u&2&&(P3.$$scope={dirty:u,ctx:f}),a3.$set(P3);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),l3.$set(swe);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),d3.$set(lwe);const B3={};u&2&&(B3.$$scope={dirty:u,ctx:f}),f3.$set(B3)},i(f){_Xe||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(If.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(GA.$$.fragment,f),E(zg.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(Lh.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(ZA.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(nL.$$.fragment,f),E(xp.$$.fragment,f),E($p.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(Rp.$$.fragment,f),E(fL.$$.fragment,f),E(Pu.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(Iu.$$.fragment,f),E(_L.$$.fragment,f),E(y1.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E($1.$$.fragment,f),E(TL.$$.fragment,f),E(u2.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(v2.$$.fragment,f),E(AL.$$.fragment,f),E(ab.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(sb.$$.fragment,f),E(kL.$$.fragment,f),E(wb.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(Lb.$$.fragment,f),E(IL.$$.fragment,f),E(Cv.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(Av.$$.fragment,f),E(GL.$$.fragment,f),E(a0.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(s0.$$.fragment,f),E(WL.$$.fragment,f),E(h0.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(_0.$$.fragment,f),E(YL.$$.fragment,f),E(eF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(rF.$$.fragment,f),E(ry.$$.fragment,f),E(zF.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(QF.$$.fragment,f),E(ly.$$.fragment,f),E(JF.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(KF.$$.fragment,f),E(my.$$.fragment,f),E(m6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(h6.$$.fragment,f),E(uy.$$.fragment,f),E(u6.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(v6.$$.fragment,f),E(My.$$.fragment,f),E(M6.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(C6.$$.fragment,f),E(Ly.$$.fragment,f),E(B6.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(N6.$$.fragment,f),E(Sy.$$.fragment,f),E(X6.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(W6.$$.fragment,f),E(Ny.$$.fragment,f),E(aT.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(sT.$$.fragment,f),E(Oy.$$.fragment,f),E(cT.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(mT.$$.fragment,f),E(Hy.$$.fragment,f),E(vT.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(TT.$$.fragment,f),E(Zy.$$.fragment,f),E(AT.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(yT.$$.fragment,f),E(a9.$$.fragment,f),E(ST.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(PT.$$.fragment,f),E(c9.$$.fragment,f),E(NT.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(jT.$$.fragment,f),E(p9.$$.fragment,f),E(zT.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(QT.$$.fragment,f),E(F9.$$.fragment,f),E(JT.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(KT.$$.fragment,f),E(w9.$$.fragment,f),E(W7.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(H7.$$.fragment,f),E($9.$$.fragment,f),E(b8.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(F8.$$.fragment,f),E(B9.$$.fragment,f),E(P8.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(I8.$$.fragment,f),E(D9.$$.fragment,f),E(G8.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(V8.$$.fragment,f),E(z9.$$.fragment,f),E(cM.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(mM.$$.fragment,f),E(J9.$$.fragment,f),E(EM.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(wM.$$.fragment,f),E(ox.$$.fragment,f),E(KM.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(eE.$$.fragment,f),E(sx.$$.fragment,f),E(bE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(FE.$$.fragment,f),E(fx.$$.fragment,f),E(EE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(wE.$$.fragment,f),E(ux.$$.fragment,f),E(LE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(xE.$$.fragment,f),E(Mx.$$.fragment,f),E(JE.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(KE.$$.fragment,f),E(Lx.$$.fragment,f),E(v4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(T4.$$.fragment,f),E(Sx.$$.fragment,f),E(E4.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(w4.$$.fragment,f),E(Nx.$$.fragment,f),E(L4.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(x4.$$.fragment,f),E(Ox.$$.fragment,f),E(tC.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(nC.$$.fragment,f),E(Qx.$$.fragment,f),E(_C.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(bC.$$.fragment,f),E(Kx.$$.fragment,f),E(SC.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(PC.$$.fragment,f),E(t$.$$.fragment,f),E(zC.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(QC.$$.fragment,f),E(i$.$$.fragment,f),E(a5.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(s5.$$.fragment,f),E(g$.$$.fragment,f),E(u5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(v5.$$.fragment,f),E(b$.$$.fragment,f),E($5.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(S5.$$.fragment,f),E(E$.$$.fragment,f),E(G5.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(V5.$$.fragment,f),E(y$.$$.fragment,f),E(K5.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(e3.$$.fragment,f),E(R$.$$.fragment,f),E(r3.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(a3.$$.fragment,f),E(q$.$$.fragment,f),E(l3.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(d3.$$.fragment,f),E(X$.$$.fragment,f),E(f3.$$.fragment,f),_Xe=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(If.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(GA.$$.fragment,f),C(zg.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(Lh.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(ZA.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(nL.$$.fragment,f),C(xp.$$.fragment,f),C($p.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(Rp.$$.fragment,f),C(fL.$$.fragment,f),C(Pu.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(Iu.$$.fragment,f),C(_L.$$.fragment,f),C(y1.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C($1.$$.fragment,f),C(TL.$$.fragment,f),C(u2.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(v2.$$.fragment,f),C(AL.$$.fragment,f),C(ab.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(sb.$$.fragment,f),C(kL.$$.fragment,f),C(wb.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(Lb.$$.fragment,f),C(IL.$$.fragment,f),C(Cv.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(Av.$$.fragment,f),C(GL.$$.fragment,f),C(a0.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(s0.$$.fragment,f),C(WL.$$.fragment,f),C(h0.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(_0.$$.fragment,f),C(YL.$$.fragment,f),C(eF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(rF.$$.fragment,f),C(ry.$$.fragment,f),C(zF.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(QF.$$.fragment,f),C(ly.$$.fragment,f),C(JF.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(KF.$$.fragment,f),C(my.$$.fragment,f),C(m6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(h6.$$.fragment,f),C(uy.$$.fragment,f),C(u6.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(v6.$$.fragment,f),C(My.$$.fragment,f),C(M6.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(C6.$$.fragment,f),C(Ly.$$.fragment,f),C(B6.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(N6.$$.fragment,f),C(Sy.$$.fragment,f),C(X6.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(W6.$$.fragment,f),C(Ny.$$.fragment,f),C(aT.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(sT.$$.fragment,f),C(Oy.$$.fragment,f),C(cT.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(mT.$$.fragment,f),C(Hy.$$.fragment,f),C(vT.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(TT.$$.fragment,f),C(Zy.$$.fragment,f),C(AT.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(yT.$$.fragment,f),C(a9.$$.fragment,f),C(ST.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(PT.$$.fragment,f),C(c9.$$.fragment,f),C(NT.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(jT.$$.fragment,f),C(p9.$$.fragment,f),C(zT.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(QT.$$.fragment,f),C(F9.$$.fragment,f),C(JT.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(KT.$$.fragment,f),C(w9.$$.fragment,f),C(W7.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(H7.$$.fragment,f),C($9.$$.fragment,f),C(b8.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(F8.$$.fragment,f),C(B9.$$.fragment,f),C(P8.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(I8.$$.fragment,f),C(D9.$$.fragment,f),C(G8.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(V8.$$.fragment,f),C(z9.$$.fragment,f),C(cM.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(mM.$$.fragment,f),C(J9.$$.fragment,f),C(EM.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(wM.$$.fragment,f),C(ox.$$.fragment,f),C(KM.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(eE.$$.fragment,f),C(sx.$$.fragment,f),C(bE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(FE.$$.fragment,f),C(fx.$$.fragment,f),C(EE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(wE.$$.fragment,f),C(ux.$$.fragment,f),C(LE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(xE.$$.fragment,f),C(Mx.$$.fragment,f),C(JE.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(KE.$$.fragment,f),C(Lx.$$.fragment,f),C(v4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(T4.$$.fragment,f),C(Sx.$$.fragment,f),C(E4.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(w4.$$.fragment,f),C(Nx.$$.fragment,f),C(L4.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(x4.$$.fragment,f),C(Ox.$$.fragment,f),C(tC.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(nC.$$.fragment,f),C(Qx.$$.fragment,f),C(_C.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(bC.$$.fragment,f),C(Kx.$$.fragment,f),C(SC.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(PC.$$.fragment,f),C(t$.$$.fragment,f),C(zC.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(QC.$$.fragment,f),C(i$.$$.fragment,f),C(a5.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(s5.$$.fragment,f),C(g$.$$.fragment,f),C(u5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(v5.$$.fragment,f),C(b$.$$.fragment,f),C($5.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(S5.$$.fragment,f),C(E$.$$.fragment,f),C(G5.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(V5.$$.fragment,f),C(y$.$$.fragment,f),C(K5.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(e3.$$.fragment,f),C(R$.$$.fragment,f),C(r3.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(a3.$$.fragment,f),C(q$.$$.fragment,f),C(l3.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(d3.$$.fragment,f),C(X$.$$.fragment,f),C(f3.$$.fragment,f),_Xe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(kf),f&&t(nt),f&&t(Oe),f&&t(We),f&&t(Rf),w($a,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(fOe),f&&t(ki),w(BA),f&&t(mOe),f&&t(Nn),f&&t(gOe),w(IA,f),f&&t(hOe),f&&t(pS),f&&t(pOe),w(If,f),f&&t(_Oe),f&&t(Si),w(NA),f&&t(uOe),f&&t(wo),w(qA),w(GA),w(zg),w(OA),f&&t(bOe),f&&t(Pi),w(VA),f&&t(vOe),f&&t(Ao),w(XA),w(QA),w(Lh),w(HA),f&&t(FOe),f&&t(Bi),w(UA),f&&t(TOe),f&&t(Lo),w(JA),w(ZA),w(ip),w(dp),w(eL),f&&t(MOe),f&&t(Ii),w(oL),f&&t(EOe),f&&t(yo),w(rL),w(nL),w(xp),w($p),w(sL),f&&t(COe),f&&t(qi),w(lL),f&&t(wOe),f&&t(xo),w(iL),w(cL),w(Rp),w(fL),w(Pu),f&&t(AOe),f&&t(Gi),w(mL),f&&t(LOe),f&&t($o),w(gL),w(pL),w(Iu),w(_L),w(y1),f&&t(yOe),f&&t(Xi),w(uL),f&&t(xOe),f&&t(ko),w(bL),w(FL),w($1),w(TL),w(u2),f&&t($Oe),f&&t(Qi),w(ML),f&&t(kOe),f&&t(So),w(EL),w(wL),w(v2),w(AL),w(ab),f&&t(SOe),f&&t(Ji),w(LL),f&&t(ROe),f&&t(Ro),w(yL),w($L),w(sb),w(kL),w(wb),f&&t(POe),f&&t(Zi),w(SL),f&&t(BOe),f&&t(Po),w(RL),w(BL),w(Lb),w(IL),w(Cv),f&&t(IOe),f&&t(rd),w(NL),f&&t(NOe),f&&t(Bo),w(qL),w(DL),w(Av),w(GL),w(a0),f&&t(qOe),f&&t(nd),w(OL),f&&t(jOe),f&&t(Io),w(VL),w(zL),w(s0),w(WL),w(h0),f&&t(DOe),f&&t(id),w(QL),f&&t(GOe),f&&t(qo),w(HL),w(JL),w(_0),w(YL),w(eF),f&&t(OOe),f&&t(fd),w(KL),f&&t(VOe),f&&t(jo),w(ZL),w(oy),w(rF),w(ry),w(zF),f&&t(XOe),f&&t(hd),w(ty),f&&t(zOe),f&&t(Do),w(ay),w(sy),w(QF),w(ly),w(JF),f&&t(WOe),f&&t(ud),w(iy),f&&t(QOe),f&&t(Go),w(dy),w(fy),w(KF),w(my),w(m6),f&&t(HOe),f&&t(Fd),w(gy),f&&t(UOe),f&&t(Oo),w(hy),w(_y),w(h6),w(uy),w(u6),f&&t(JOe),f&&t(Ed),w(by),f&&t(YOe),f&&t(Vo),w(vy),w(Ty),w(v6),w(My),w(M6),f&&t(KOe),f&&t(Ad),w(Ey),f&&t(ZOe),f&&t(Xo),w(Cy),w(Ay),w(C6),w(Ly),w(B6),f&&t(eVe),f&&t(xd),w(yy),f&&t(oVe),f&&t(zo),w(xy),w(ky),w(N6),w(Sy),w(X6),f&&t(rVe),f&&t(Sd),w(Ry),f&&t(tVe),f&&t(Wo),w(Py),w(Iy),w(W6),w(Ny),w(aT),f&&t(aVe),f&&t(Bd),w(qy),f&&t(nVe),f&&t(Qo),w(jy),w(Gy),w(sT),w(Oy),w(cT),f&&t(sVe),f&&t(qd),w(Xy),f&&t(lVe),f&&t(Ho),w(zy),w(Qy),w(mT),w(Hy),w(vT),f&&t(iVe),f&&t(Gd),w(Uy),f&&t(dVe),f&&t(Uo),w(Jy),w(Ky),w(TT),w(Zy),w(AT),f&&t(cVe),f&&t(zd),w(e9),f&&t(fVe),f&&t(Jo),w(o9),w(t9),w(yT),w(a9),w(ST),f&&t(mVe),f&&t(Hd),w(s9),f&&t(gVe),f&&t(Yo),w(l9),w(d9),w(PT),w(c9),w(NT),f&&t(hVe),f&&t(Yd),w(f9),f&&t(pVe),f&&t(Ko),w(m9),w(h9),w(jT),w(p9),w(zT),f&&t(_Ve),f&&t(ec),w(_9),f&&t(uVe),f&&t(Zo),w(u9),w(v9),w(QT),w(F9),w(JT),f&&t(bVe),f&&t(tc),w(T9),f&&t(vVe),f&&t(er),w(M9),w(C9),w(KT),w(w9),w(W7),f&&t(FVe),f&&t(sc),w(A9),f&&t(TVe),f&&t(or),w(L9),w(x9),w(H7),w($9),w(b8),f&&t(MVe),f&&t(dc),w(k9),f&&t(EVe),f&&t(rr),w(S9),w(P9),w(F8),w(B9),w(P8),f&&t(CVe),f&&t(mc),w(I9),f&&t(wVe),f&&t(tr),w(N9),w(j9),w(I8),w(D9),w(G8),f&&t(AVe),f&&t(pc),w(G9),f&&t(LVe),f&&t(ar),w(O9),w(X9),w(V8),w(z9),w(cM),f&&t(yVe),f&&t(bc),w(W9),f&&t(xVe),f&&t(nr),w(Q9),w(U9),w(mM),w(J9),w(EM),f&&t($Ve),f&&t(Tc),w(Y9),f&&t(kVe),f&&t(sr),w(K9),w(ex),w(wM),w(ox),w(KM),f&&t(SVe),f&&t(Cc),w(rx),f&&t(RVe),f&&t(lr),w(tx),w(nx),w(eE),w(sx),w(bE),f&&t(PVe),f&&t(Lc),w(lx),f&&t(BVe),f&&t(ir),w(ix),w(cx),w(FE),w(fx),w(EE),f&&t(IVe),f&&t($c),w(gx),f&&t(NVe),f&&t(dr),w(hx),w(_x),w(wE),w(ux),w(LE),f&&t(qVe),f&&t(Rc),w(bx),f&&t(jVe),f&&t(cr),w(vx),w(Tx),w(xE),w(Mx),w(JE),f&&t(DVe),f&&t(Ic),w(Ex),f&&t(GVe),f&&t(fr),w(Cx),w(Ax),w(KE),w(Lx),w(v4),f&&t(OVe),f&&t(jc),w(yx),f&&t(VVe),f&&t(mr),w(xx),w(kx),w(T4),w(Sx),w(E4),f&&t(XVe),f&&t(Oc),w(Rx),f&&t(zVe),f&&t(gr),w(Px),w(Ix),w(w4),w(Nx),w(L4),f&&t(WVe),f&&t(zc),w(qx),f&&t(QVe),f&&t(hr),w(jx),w(Gx),w(x4),w(Ox),w(tC),f&&t(HVe),f&&t(Hc),w(Vx),f&&t(UVe),f&&t(pr),w(Xx),w(Wx),w(nC),w(Qx),w(_C),f&&t(JVe),f&&t(Yc),w(Hx),f&&t(YVe),f&&t(_r),w(Ux),w(Yx),w(bC),w(Kx),w(SC),f&&t(KVe),f&&t(ef),w(Zx),f&&t(ZVe),f&&t(ur),w(e$),w(r$),w(PC),w(t$),w(zC),f&&t(eXe),f&&t(tf),w(a$),f&&t(oXe),f&&t(br),w(n$),w(l$),w(QC),w(i$),w(a5),f&&t(rXe),f&&t(sf),w(d$),f&&t(tXe),f&&t(vr),w(c$),w(m$),w(s5),w(g$),w(u5),f&&t(aXe),f&&t(cf),w(h$),f&&t(nXe),f&&t(Fr),w(p$),w(u$),w(v5),w(b$),w($5),f&&t(sXe),f&&t(gf),w(v$),f&&t(lXe),f&&t(Tr),w(F$),w(M$),w(S5),w(E$),w(G5),f&&t(iXe),f&&t(_f),w(C$),f&&t(dXe),f&&t(Mr),w(w$),w(L$),w(V5),w(y$),w(K5),f&&t(cXe),f&&t(vf),w(x$),f&&t(fXe),f&&t(Er),w($$),w(S$),w(e3),w(R$),w(r3),f&&t(mXe),f&&t(Mf),w(P$),f&&t(gXe),f&&t(Cr),w(B$),w(N$),w(a3),w(q$),w(l3),f&&t(hXe),f&&t(wf),w(D$),f&&t(pXe),f&&t(wr),w(G$),w(V$),w(d3),w(X$),w(f3)}}}const XVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function zVt(x){return VGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class KVt extends jGt{constructor(g){super();DGt(this,g,zVt,VVt,GGt,{})}}export{KVt as default,XVt as metadata};
